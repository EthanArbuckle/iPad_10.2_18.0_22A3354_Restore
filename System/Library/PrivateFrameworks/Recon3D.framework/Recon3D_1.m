void sub_2231B8BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2231B8BD8(int a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  double result;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  switch(a1)
  {
    case 0:
      LOBYTE(v9) = 0;
      sub_224553CE8(a2, &v9);
      sub_22454BE90((uint64_t)v6, 0, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 1:
      LOWORD(v9) = 0;
      sub_224553E8C(a2, &v9);
      sub_22454BED4((uint64_t)v6, 1, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 2:
      LODWORD(v9) = 0;
      sub_224554030(a2, &v9);
      sub_22454BF18((uint64_t)v6, 2, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 3:
      v9 = 0;
      sub_2245543E0(a2, &v9);
      sub_22454BF5C((uint64_t)v6, 3, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 5:
      LOBYTE(v9) = 0;
      sub_224553C30(a2, &v9);
      sub_22454BE90((uint64_t)v6, 5, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 6:
      LOWORD(v9) = 0;
      sub_224553DD4(a2, &v9);
      sub_22454BED4((uint64_t)v6, 6, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 7:
      LODWORD(v9) = 0;
      sub_224553F78(a2, &v9);
      sub_22454BF18((uint64_t)v6, 7, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 8:
      v9 = 0;
      sub_2245542F0(a2, &v9);
      sub_22454BF5C((uint64_t)v6, 8, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 11:
      LODWORD(v9) = 0;
      sub_2245544C4(a2, (float *)&v9);
      sub_22454BFA0((uint64_t)v6, 11, *(float *)&v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 12:
      v9 = 0;
      sub_2245545FC(a2, (double *)&v9);
      sub_22454BFEC((uint64_t)v6, 12, *(double *)&v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (v4)
      {
LABEL_22:
        *(_QWORD *)(a3 + 24) = v4;
        operator delete(v4);
      }
LABEL_23:
      result = *(double *)&v7;
      *(_OWORD *)(a3 + 16) = v7;
      *(_QWORD *)(a3 + 32) = v8;
      return result;
    default:
      sub_22454B274(a1);
  }
}

double sub_2231B8E50(int a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  double result;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  switch(a1)
  {
    case 0:
      LOBYTE(v9) = 0;
      sub_224553CE8(a2, &v9);
      sub_22454BE90((uint64_t)v6, 0, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 1:
      LOWORD(v9) = 0;
      sub_224553E8C(a2, &v9);
      sub_22454BED4((uint64_t)v6, 1, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 2:
      LODWORD(v9) = 0;
      sub_224554030(a2, &v9);
      sub_22454BF18((uint64_t)v6, 2, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 3:
      v9 = 0;
      sub_2245543E0(a2, &v9);
      sub_22454BF5C((uint64_t)v6, 3, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 5:
      LOBYTE(v9) = 0;
      sub_224553C30(a2, &v9);
      sub_22454BE90((uint64_t)v6, 5, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 6:
      LOWORD(v9) = 0;
      sub_224553DD4(a2, &v9);
      sub_22454BED4((uint64_t)v6, 6, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 7:
      LODWORD(v9) = 0;
      sub_224553F78(a2, &v9);
      sub_22454BF18((uint64_t)v6, 7, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 8:
      v9 = 0;
      sub_2245542F0(a2, &v9);
      sub_22454BF5C((uint64_t)v6, 8, v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 11:
      LODWORD(v9) = 0;
      sub_2245544C4(a2, (float *)&v9);
      sub_22454BFA0((uint64_t)v6, 11, *(float *)&v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (!v4)
        goto LABEL_23;
      goto LABEL_22;
    case 12:
      v9 = 0;
      sub_2245545FC(a2, (double *)&v9);
      sub_22454BFEC((uint64_t)v6, 12, *(double *)&v9);
      *(_BYTE *)(a3 + 8) = v6[0];
      v4 = *(void **)(a3 + 16);
      if (v4)
      {
LABEL_22:
        *(_QWORD *)(a3 + 24) = v4;
        operator delete(v4);
      }
LABEL_23:
      result = *(double *)&v7;
      *(_OWORD *)(a3 + 16) = v7;
      *(_QWORD *)(a3 + 32) = v8;
      return result;
    default:
      sub_22454B274(a1);
  }
}

void sub_2231B90C8(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_22316E078();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 16;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

uint64_t sub_2231B91D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_2231B9308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B9324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231B9338(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2231A74D8(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231B9434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_2231B9448(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_22316E078();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_223174E94();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    if (!v13)
      return v10;
    goto LABEL_23;
  }
  do
  {
    v14 = *((_OWORD *)v13 - 1);
    v13 -= 16;
    *((_OWORD *)v9 - 1) = v14;
    v9 -= 16;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
  }
  while (v13 != v12);
  v15 = *a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  if (v13 != v15)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 16;
    }
    while (v13 != v15);
    v13 = v15;
  }
  if (v13)
LABEL_23:
    operator delete(v13);
  return v10;
}

void sub_2231B9590(uint64_t *a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFMutableArrayRef v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CFMutableArrayRef theArray[2];

  sub_2245281EC((std::__shared_weak_count_vtbl **)theArray);
  v5 = theArray[0];
  v4 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v6 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_30;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_30;
  }
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10)
  {
    do
    {
      v12 = *(const void **)v9;
      v11 = *(std::__shared_weak_count **)(v9 + 8);
      if (!v11)
        goto LABEL_18;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v12)
        {
LABEL_19:
          j__CFArrayAppendValue(theArray[0], v12);
          if (v11)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else
      {
LABEL_18:
        if (v12)
          goto LABEL_19;
      }
      *a2 = 0;
      a2[1] = 0;
      if (v11)
      {
LABEL_23:
        v19 = (unint64_t *)&v11->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
LABEL_27:
      if (!v12)
        goto LABEL_31;
      v9 += 16;
    }
    while (v9 != v10);
  }
  *(_OWORD *)a2 = *(_OWORD *)theArray;
  a2 = theArray;
LABEL_30:
  *a2 = 0;
  a2[1] = 0;
LABEL_31:
  v21 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v22 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_2231B9788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (v2)
    sub_2245743F4();
  sub_224574678((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231B97AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _BYTE *v44;
  int64_t v45;
  _BYTE *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  CFMutableArrayRef v79;
  std::__shared_weak_count *v80;
  void *__p[2];
  void *v82;
  void *v83[2];
  uint64_t v84;
  __int128 v85;
  void *v86;
  void *v87;

  LOWORD(v85) = 0;
  sub_224553E8C(a1, &v85);
  v10 = (unsigned __int16)v85;
  *(_WORD *)a2 = v85;
  switch(v10)
  {
    case 0:
      LOBYTE(v85) = 7;
      sub_22454CAB8((uint64_t)&v85 + 8);
      LODWORD(v83[0]) = 2;
      sub_224554030(a1, v83);
      sub_2231B8A34((uint64_t)v83, a1, (unsigned __int8 *)&v85, v83[0]);
      v11 = sub_22454B26C((uint64_t)&v85);
      sub_224532914(__p, v11);
      sub_2231B844C(v83, (uint64_t)__p);
      v12 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v17 = (unint64_t *)((char *)v83[1] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v20 = (unint64_t *)((char *)__p[1] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v86;
      if (!v86)
        return;
      v87 = v86;
      goto LABEL_115;
    case 1:
      v85 = 0uLL;
      v86 = 0;
      sub_224554814(a1, (void **)&v85);
      sub_224527BAC((uint64_t)&v85, (CFStringRef *)__p);
      sub_2231B855C(v83, (uint64_t)__p);
      v23 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v24 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v23;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v28 = (unint64_t *)((char *)v83[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if ((SHIBYTE(v86) & 0x80000000) == 0)
        return;
      v22 = (void *)v85;
      goto LABEL_115;
    case 2:
      LOBYTE(__p[0]) = 0;
      sub_224554730(a1, __p);
      sub_22452795C(__p, (std::__shared_weak_count_vtbl **)v83);
      sub_2231B866C(&v85, (uint64_t)v83);
      v33 = v85;
      v85 = 0uLL;
      v34 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v33;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v83[1];
      if (!v83[1])
        return;
      v41 = (unint64_t *)((char *)v83[1] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      goto LABEL_73;
    case 3:
      v83[0] = 0;
      v83[1] = 0;
      v84 = 0;
      *(_QWORD *)&v85 = 0;
      sub_2245543E0(a1, &v85);
      if (!(_QWORD)v85)
      {
        v44 = v83[1];
        goto LABEL_76;
      }
      sub_2231BA090((uint64_t *)v83, v85);
      v43 = (char *)v83[0];
      v44 = v83[1];
      if (v83[1] == v83[0])
      {
LABEL_76:
        v46 = v44;
        goto LABEL_77;
      }
      v45 = 24 * (((char *)v83[1] - (char *)v83[0]) / 24);
      do
      {
        LODWORD(__p[0]) = 1;
        sub_224554030(a1, __p);
        sub_2231B97AC(a1, v43, LODWORD(__p[0]));
        v43 += 24;
        v45 -= 24;
      }
      while (v45);
      v44 = v83[0];
      v46 = v83[1];
LABEL_77:
      v85 = 0uLL;
      v86 = 0;
      sub_2231B90C8((uint64_t)&v85, 0xAAAAAAAAAAAAAAABLL * ((v46 - v44) >> 3));
      sub_2231BA2C0((uint64_t)v83[0], (uint64_t)v83[1], (uint64_t)&v85);
      *(_OWORD *)__p = v85;
      v82 = v86;
      sub_2231B9590((uint64_t *)__p, &v79);
      sub_2231B877C(&v85, (uint64_t)&v79);
      v58 = v85;
      v85 = 0uLL;
      v59 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v58;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = v80;
      if (v80)
      {
        v66 = (unint64_t *)&v80->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (char *)__p[0];
      if (__p[0])
      {
        v69 = (char *)__p[1];
        v70 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v71 = (std::__shared_weak_count *)*((_QWORD *)v69 - 1);
            if (v71)
            {
              v72 = (unint64_t *)&v71->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v69 -= 16;
          }
          while (v69 != v68);
          v70 = __p[0];
        }
        __p[1] = v68;
        operator delete(v70);
      }
      v74 = (char *)v83[0];
      if (v83[0])
      {
        v75 = (char *)v83[1];
        v22 = v83[0];
        if (v83[1] != v83[0])
        {
          do
          {
            v76 = (std::__shared_weak_count *)*((_QWORD *)v75 - 1);
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v75 -= 24;
          }
          while (v75 != v74);
          v22 = v83[0];
        }
        v83[1] = v74;
LABEL_115:
        operator delete(v22);
      }
      return;
    case 4:
      sub_224517DF4(&v85);
      LODWORD(v83[0]) = 1;
      sub_224554030(a1, v83);
      sub_2231BA428(a1, &v85, LODWORD(v83[0]));
      sub_2245182D8((uint64_t)&v85, __p);
      sub_2231B8924(v83, (uint64_t)__p);
      v47 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v52 = (unint64_t *)((char *)v83[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v55 = (unint64_t *)((char *)__p[1] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        return;
      v57 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v42 = __ldaxr(v57);
      while (__stlxr(v42 - 1, v57));
LABEL_73:
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      return;
    default:
      sub_224574644(v4, v5, v6, v7, v8, v9);
  }
}

void sub_2231B9F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  sub_223167354((uint64_t)&a9);
  sub_2231B888C(&a11);
  sub_2231A62F0(&a15);
  _Unwind_Resume(a1);
}

void sub_2231B9F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2231B888C((void **)va1);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231B9FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2231B9FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B9FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B9FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_223167354((uint64_t)&a11);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2231BA090(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v4 = a1[2];
  v5 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v5 + 24 * a2;
      v12 = 24 * a2;
      do
      {
        sub_224517920(v5);
        v5 += 24;
        v12 -= 24;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (uint64_t)&v10[24 * v6];
    v24 = v13;
    v26 = &v10[24 * v9];
    v14 = 24 * a2;
    v15 = v13 + 24 * a2;
    do
    {
      sub_224517920(v13);
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
    v17 = *a1;
    v16 = a1[1];
    v18 = v24;
    if (v16 == *a1)
    {
      v20 = a1[1];
    }
    else
    {
      do
      {
        v19 = *(_WORD *)(v16 - 24);
        v16 -= 24;
        *(_WORD *)(v18 - 24) = v19;
        v18 -= 24;
        *(_OWORD *)(v18 + 8) = *(_OWORD *)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
      }
      while (v16 != v17);
      v20 = *a1;
      v16 = a1[1];
    }
    *a1 = v18;
    a1[1] = v15;
    a1[2] = (uint64_t)v26;
    if (v16 == v20)
    {
      if (!v16)
        return;
LABEL_34:
      operator delete((void *)v16);
      return;
    }
    do
    {
      v25 = v16 - 24;
      v21 = *(std::__shared_weak_count **)(v16 - 8);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v16 = v25;
    }
    while (v25 != v20);
    v16 = v20;
    if (v20)
      goto LABEL_34;
  }
}

void sub_2231BA2A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2231BA2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A72D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BA2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_2231BA3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BA414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BA428(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_2231B7368(a1, (uint64_t)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_2245543E0(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_2231BA090((uint64_t *)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_224554030(a1, &v34);
      sub_2231B97AC(a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_2245182E4((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_2231BA6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231BA6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231BA708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231BA71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231BA730(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231BA740(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BA770(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2231BA780(char *__s, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_2231BA8E8(v4, __s);
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC20F88[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC1FE10[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC1F9D0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC1F9B8[v5])(&v6, v4);
  return result;
}

void sub_2231BA8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231BA8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231BA8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_2231BA8E8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_2231BA9D8(_DWORD ***a1)
{
  return sub_2231BA9F4(**a1, (const char **)(*a1)[1]);
}

void sub_2231BA9E4(uint64_t a1, uint64_t a2)
{
  sub_2231BAAE8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231BA9F4(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231BAAE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = *(const char **)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231BACA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231BACE4(uint64_t a1, uint64_t a2)
{
  const char **v3;
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  char *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231BADDC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = *v3;
  v6 = strlen(*v3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v8 = operator new(v10 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v11 | 0x8000000000000000;
    *(_QWORD *)v4 = v8;
  }
  else
  {
    v4[23] = v6;
    v8 = v4;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231BADD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231BADDC(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (char *)*a1;
      v15 = (char *)a1[1];
      if (v15 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 24);
    *((_QWORD *)v12 - 1) = *((_QWORD *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 1) = 0;
    *((_QWORD *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  v20 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0)
        operator delete(*((void **)v15 - 3));
      v15 -= 24;
    }
    while (v15 != v20);
    v15 = v20;
  }
LABEL_28:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_2231BAFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BB00C()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

BOOL sub_2231BB01C(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  return sub_224573870(a1, 248, a3, 27, a5, 0, a7);
}

void sub_2231BB02C(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void sub_2231BB044()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void sub_2231BB058(void *__p)
{
  operator delete(__p);
}

BOOL sub_2231BB064(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  return sub_224573870(a1, a2, a3, 0, a5, 29, a7);
}

void sub_2231BB070(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

uint64_t sub_2231BB078(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  BOOL v42;
  char v44;
  unint64_t v45;
  unint64_t v46;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t j;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v74;
  float32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  BOOL v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  BOOL v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v97;
  float16x4_t *v98;
  int16x4_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  int v105;

  v5 = result;
  v6 = *(unsigned __int8 *)(a2 + 56);
  v7 = *(unsigned __int8 *)(a3 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(_DWORD *)(a2 + 32) != *(_DWORD *)(result + 56) || *(_DWORD *)(a2 + 36) != *(_DWORD *)(result + 60))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/FramePreProcessor.mm", 123, (uint64_t)"!opt_label_confidence_view || opt_label_confidence_view->Size() == size", 71, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
  }
  else if (!*(_BYTE *)(a3 + 56))
  {
    return result;
  }
  v8 = *(unsigned int *)(v5 + 60);
  if ((_DWORD)v8)
  {
    v9 = *(unsigned int *)(v5 + 56);
    if ((_DWORD)v9)
    {
      v10 = *(_DWORD *)(v5 + 68);
      v11 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        if (v7)
        {
          for (i = 0; i != v8; ++i)
          {
            v13 = 0;
            v14 = 0;
            v15 = 0;
            v16 = *(_DWORD *)(v5 + 48);
            result = v11 + 2 * (v10 * i);
            v17 = *(_DWORD *)(a2 + 40);
            v18 = *(_QWORD *)(a2 + 24) + 2 * (*(_DWORD *)(a2 + 44) * i);
            v19 = *(_DWORD *)(a3 + 40);
            v20 = *(_QWORD *)(a3 + 24) + (*(_DWORD *)(a3 + 44) * i);
            v21 = v9;
            do
            {
              _H0 = *(_WORD *)(v18 + 2 * v13);
              __asm { FCVT            S0, H0 }
              if (_S0 <= 0.0000001 || (*(_BYTE *)(v20 + v14) & 1) != 0)
                *(_WORD *)(result + 2 * v15) = -512;
              v15 += v16;
              v14 += v19;
              v13 += v17;
              --v21;
            }
            while (v21);
          }
          return result;
        }
        if (v9 < 0x24)
        {
          for (j = 0; j != v8; ++j)
          {
            v67 = 0;
            v68 = 0;
            v69 = *(_DWORD *)(v5 + 48);
            result = *(unsigned int *)(a2 + 40);
            v70 = *(_QWORD *)(a2 + 24) + 2 * (*(_DWORD *)(a2 + 44) * j);
            v71 = v9;
            do
            {
              _H0 = *(_WORD *)(v70 + 2 * v67);
              __asm { FCVT            S0, H0 }
              if (_S0 <= 0.0000001)
                *(_WORD *)(v11 + 2 * (v10 * j) + 2 * v68) = -512;
              v68 += v69;
              v67 += result;
              --v71;
            }
            while (v71);
          }
          return result;
        }
        v74 = 0;
        result = 869711765;
        v75 = (float32x4_t)vdupq_n_s32(0x33D6BF95u);
LABEL_123:
        v76 = 0;
        v77 = *(_QWORD *)(v5 + 44);
        v78 = HIDWORD(v77);
        if (v77 >= 0)
          v79 = HIDWORD(*(_QWORD *)(v5 + 44));
        else
          v79 = -HIDWORD(v77);
        v80 = v79 * (unint64_t)(v9 - 1);
        v81 = (v80 & 0xFFFFFFFF00000000) != 0;
        if ((_DWORD)v80)
          v82 = v77 < 0;
        else
          v82 = 0;
        v83 = (v10 * v74);
        v84 = v11 + 2 * v83;
        v85 = *(_DWORD *)(a2 + 40);
        v86 = (*(_DWORD *)(a2 + 44) * v74);
        v87 = *(_QWORD *)(a2 + 24);
        v88 = v87 + 2 * v86;
        if ((unint64_t)(v9 - 1) >> 32)
          v89 = HIDWORD(v77) == 0;
        else
          v89 = 1;
        v90 = !v89;
        if (v85 != 1 || v82 || v81 || (v90 & 1) != 0)
          goto LABEL_161;
        v91 = 2 * v83;
        v92 = v11 + 2 * v83;
        v93 = v87 + 2 * v9 + 2 * v86;
        v94 = v11 + v91 + (2 * v9 - 2) * (v77 >> 32);
        if (v94 >= v92)
          v95 = v92;
        else
          v95 = v94;
        if (v94 <= v92)
          v94 = v92;
        _CF = v88 >= v94 + 2;
        v76 = 0;
        if (!_CF && v95 < v93)
        {
LABEL_161:
          v100 = v76 * v78;
          v101 = v9 - v76;
          v102 = v85 * v76;
          do
          {
            _H1 = *(_WORD *)(v88 + 2 * v102);
            __asm { FCVT            S1, H1 }
            if (_S1 <= 0.0000001)
              *(_WORD *)(v84 + 2 * v100) = -512;
            v100 += v78;
            v102 += v85;
            --v101;
          }
          while (v101);
          goto LABEL_122;
        }
        v97 = v9 & 0xFFFFFFFC;
        v98 = (float16x4_t *)v88;
        while (1)
        {
          v99 = vmovn_s32(vcgeq_f32(v75, vcvtq_f32_f16(*v98)));
          if ((v99.i8[0] & 1) != 0)
          {
            *(_WORD *)(v84 + 2 * (v76 & 0xFFFFFFFC)) = -512;
            if ((v99.i8[2] & 1) == 0)
              goto LABEL_153;
          }
          else if ((v99.i8[2] & 1) == 0)
          {
LABEL_153:
            if ((v99.i8[4] & 1) != 0)
              goto LABEL_154;
            goto LABEL_158;
          }
          *(_WORD *)(v84 + 2 * (v78 + v76)) = -512;
          if ((v99.i8[4] & 1) != 0)
          {
LABEL_154:
            *(_WORD *)(v84 + 2 * ((2 * (_DWORD)v78 + (_DWORD)v76) & 0xFFFFFFFE)) = -512;
            if ((v99.i8[6] & 1) != 0)
              goto LABEL_159;
            goto LABEL_150;
          }
LABEL_158:
          if ((v99.i8[6] & 1) != 0)
LABEL_159:
            *(_WORD *)(v84 + 2 * (3 * v78 + v76)) = -512;
LABEL_150:
          LODWORD(v76) = v76 + 4 * v78;
          ++v98;
          v97 -= 4;
          if (!v97)
          {
            v76 = v9 & 0xFFFFFFFC;
            if (v76 != v9)
              goto LABEL_161;
LABEL_122:
            if (++v74 == v8)
              return result;
            goto LABEL_123;
          }
        }
      }
      if (!v7)
        return result;
      v26 = 0;
      v27 = v9 - 1;
      v28 = 2 * v9 - 2;
      v29 = v9 & 0xFFFFFFF8;
      v30 = (unint64_t)(v9 - 1) >> 32;
      v105 = *(_DWORD *)(v5 + 68);
LABEL_22:
      v31 = 2 * (v10 * v26);
      v32 = v11 + v31;
      v33 = *(_QWORD *)(v5 + 44);
      v34 = HIDWORD(v33);
      v35 = *(_DWORD *)(a3 + 40);
      v36 = (*(_DWORD *)(a3 + 44) * v26);
      v37 = *(_QWORD *)(a3 + 24);
      v38 = v37 + v36;
      if (v9 < 8)
        goto LABEL_51;
      v39 = 0;
      if (v33 >= 0)
        v40 = HIDWORD(*(_QWORD *)(v5 + 44));
      else
        v40 = -HIDWORD(v33);
      v41 = v40 * (unint64_t)v27;
      result = (v41 & 0xFFFFFFFF00000000) != 0;
      if ((_DWORD)v41)
        v42 = v33 < 0;
      else
        v42 = 0;
      if (v30)
        _ZF = HIDWORD(v33) == 0;
      else
        _ZF = 1;
      v44 = !_ZF;
      if (v35 != 1 || v42 || (result & 1) != 0 || (v44 & 1) != 0)
        goto LABEL_52;
      v45 = v11 + v31 + v28 * (v33 >> 32);
      if (v45 >= v32)
        v46 = v32;
      else
        v46 = v45;
      if (v45 <= v32)
        v45 = v32;
      _CF = v38 >= v45 + 2 || v46 >= v37 + v9 + v36;
      if (!_CF)
      {
LABEL_51:
        v39 = 0;
LABEL_52:
        v50 = v39 * v34;
        v51 = v9 - v39;
        v52 = v35 * v39;
        do
        {
          if ((*(_BYTE *)(v38 + v52) & 1) != 0)
            *(_WORD *)(v32 + 2 * v50) = -512;
          v50 += v34;
          v52 += v35;
          --v51;
        }
        while (v51);
        goto LABEL_21;
      }
      v48 = 8 * v34;
      if (v9 < 0x10)
      {
        v49 = 0;
        goto LABEL_93;
      }
      v53 = 0;
      result = 14 * v34;
      v54 = (__int128 *)(v37 + v36);
      v55 = v9 & 0xFFFFFFF0;
      while (1)
      {
        v56 = *v54;
        if ((*v54 & 1) != 0)
        {
          *(_WORD *)(v32 + 2 * (v53 & 0xFFFFFFF0)) = -512;
          if ((BYTE1(v56) & 1) == 0)
            goto LABEL_60;
        }
        else if ((BYTE1(v56) & 1) == 0)
        {
LABEL_60:
          if ((BYTE2(v56) & 1) != 0)
            goto LABEL_61;
          goto LABEL_77;
        }
        *(_WORD *)(v32 + 2 * (v34 + v53)) = -512;
        if ((BYTE2(v56) & 1) != 0)
        {
LABEL_61:
          *(_WORD *)(v32 + 2 * ((2 * (_DWORD)v34 + v53) & 0xFFFFFFFE)) = -512;
          if ((BYTE3(v56) & 1) == 0)
            goto LABEL_62;
          goto LABEL_78;
        }
LABEL_77:
        if ((BYTE3(v56) & 1) == 0)
        {
LABEL_62:
          if ((BYTE4(v56) & 1) != 0)
            goto LABEL_63;
          goto LABEL_79;
        }
LABEL_78:
        *(_WORD *)(v32 + 2 * (3 * v34 + v53)) = -512;
        if ((BYTE4(v56) & 1) != 0)
        {
LABEL_63:
          *(_WORD *)(v32 + 2 * ((4 * (_DWORD)v34 + v53) & 0xFFFFFFFC)) = -512;
          if ((BYTE5(v56) & 1) == 0)
            goto LABEL_64;
          goto LABEL_80;
        }
LABEL_79:
        if ((BYTE5(v56) & 1) == 0)
        {
LABEL_64:
          if ((BYTE6(v56) & 1) != 0)
            goto LABEL_65;
          goto LABEL_81;
        }
LABEL_80:
        *(_WORD *)(v32 + 2 * (5 * v34 + v53)) = -512;
        if ((BYTE6(v56) & 1) != 0)
        {
LABEL_65:
          *(_WORD *)(v32 + 2 * ((6 * (_DWORD)v34 + v53) & 0xFFFFFFFE)) = -512;
          if ((BYTE7(v56) & 1) == 0)
            goto LABEL_66;
          goto LABEL_82;
        }
LABEL_81:
        if ((BYTE7(v56) & 1) == 0)
        {
LABEL_66:
          if ((BYTE8(v56) & 1) != 0)
            goto LABEL_67;
          goto LABEL_83;
        }
LABEL_82:
        *(_WORD *)(v32 + 2 * (7 * v34 + v53)) = -512;
        if ((BYTE8(v56) & 1) != 0)
        {
LABEL_67:
          *(_WORD *)(v32 + 2 * ((v48 + v53) & 0xFFFFFFF8)) = -512;
          if ((BYTE9(v56) & 1) == 0)
            goto LABEL_68;
          goto LABEL_84;
        }
LABEL_83:
        if ((BYTE9(v56) & 1) == 0)
        {
LABEL_68:
          if ((BYTE10(v56) & 1) != 0)
            goto LABEL_69;
          goto LABEL_85;
        }
LABEL_84:
        *(_WORD *)(v32 + 2 * (9 * v34 + v53)) = -512;
        if ((BYTE10(v56) & 1) != 0)
        {
LABEL_69:
          *(_WORD *)(v32 + 2 * ((10 * (_DWORD)v34 + v53) & 0xFFFFFFFE)) = -512;
          if ((BYTE11(v56) & 1) == 0)
            goto LABEL_70;
          goto LABEL_86;
        }
LABEL_85:
        if ((BYTE11(v56) & 1) == 0)
        {
LABEL_70:
          if ((BYTE12(v56) & 1) != 0)
            goto LABEL_71;
          goto LABEL_87;
        }
LABEL_86:
        *(_WORD *)(v32 + 2 * (11 * v34 + v53)) = -512;
        if ((BYTE12(v56) & 1) != 0)
        {
LABEL_71:
          *(_WORD *)(v32 + 2 * ((12 * (_DWORD)v34 + v53) & 0xFFFFFFFC)) = -512;
          if ((BYTE13(v56) & 1) == 0)
            goto LABEL_72;
          goto LABEL_88;
        }
LABEL_87:
        if ((BYTE13(v56) & 1) == 0)
        {
LABEL_72:
          if ((BYTE14(v56) & 1) != 0)
            goto LABEL_73;
          goto LABEL_89;
        }
LABEL_88:
        *(_WORD *)(v32 + 2 * (13 * v34 + v53)) = -512;
        if ((BYTE14(v56) & 1) != 0)
        {
LABEL_73:
          *(_WORD *)(v32 + 2 * (((_DWORD)result + v53) & 0xFFFFFFFE)) = -512;
          if ((HIBYTE(v56) & 1) != 0)
            goto LABEL_90;
          goto LABEL_57;
        }
LABEL_89:
        if ((HIBYTE(v56) & 1) != 0)
LABEL_90:
          *(_WORD *)(v32 + 2 * (15 * v34 + v53)) = -512;
LABEL_57:
        v53 += 16 * v34;
        ++v54;
        v55 -= 16;
        if (!v55)
        {
          v10 = v105;
          v28 = 2 * v9 - 2;
          v27 = v9 - 1;
          v30 = (unint64_t)(v9 - 1) >> 32;
          if ((v9 & 0xFFFFFFF0) == v9)
            goto LABEL_21;
          v39 = v9 & 0xFFFFFFF0;
          v49 = v39;
          if ((v9 & 8) == 0)
            goto LABEL_52;
LABEL_93:
          v57 = 0;
          v58 = v49 * v34;
          v59 = v34 + v49 * v34;
          result = v34 * (v49 + 2);
          v60 = v34 * (v49 + 3);
          v61 = v34 * (v49 + 4);
          v62 = v34 * (v49 + 5);
          v63 = v34 * (v49 + 6);
          v64 = v34 * (v49 + 7);
          while (2)
          {
            v65 = *(_QWORD *)(v38 + (v49 & 0xFFFFFFF8));
            if ((v65 & 1) != 0)
            {
              *(_WORD *)(v32 + 2 * ((v58 + v57) & 0xFFFFFFF8)) = -512;
              if ((v65 & 0x100) == 0)
                goto LABEL_97;
LABEL_105:
              *(_WORD *)(v32 + 2 * (v59 + v57)) = -512;
              if ((v65 & 0x10000) == 0)
                goto LABEL_106;
LABEL_98:
              *(_WORD *)(v32 + 2 * (((_DWORD)result + v57) & 0xFFFFFFFE)) = -512;
              if ((v65 & 0x1000000) == 0)
                goto LABEL_99;
LABEL_107:
              *(_WORD *)(v32 + 2 * (v60 + v57)) = -512;
              if ((v65 & 0x100000000) == 0)
                goto LABEL_108;
LABEL_100:
              *(_WORD *)(v32 + 2 * ((v61 + v57) & 0xFFFFFFFC)) = -512;
              if ((v65 & 0x10000000000) == 0)
                goto LABEL_101;
LABEL_109:
              *(_WORD *)(v32 + 2 * (v62 + v57)) = -512;
              if ((v65 & 0x1000000000000) == 0)
                goto LABEL_110;
LABEL_102:
              *(_WORD *)(v32 + 2 * ((v63 + v57) & 0xFFFFFFFE)) = -512;
              if ((v65 & 0x100000000000000) != 0)
                goto LABEL_111;
            }
            else
            {
              if ((v65 & 0x100) != 0)
                goto LABEL_105;
LABEL_97:
              if ((v65 & 0x10000) != 0)
                goto LABEL_98;
LABEL_106:
              if ((v65 & 0x1000000) != 0)
                goto LABEL_107;
LABEL_99:
              if ((v65 & 0x100000000) != 0)
                goto LABEL_100;
LABEL_108:
              if ((v65 & 0x10000000000) != 0)
                goto LABEL_109;
LABEL_101:
              if ((v65 & 0x1000000000000) != 0)
                goto LABEL_102;
LABEL_110:
              if ((v65 & 0x100000000000000) != 0)
LABEL_111:
                *(_WORD *)(v32 + 2 * (v64 + v57)) = -512;
            }
            v49 += 8;
            v57 += v48;
            if (v29 != v49)
              continue;
            break;
          }
          v39 = v9 & 0xFFFFFFF8;
          if (v29 != v9)
            goto LABEL_52;
LABEL_21:
          if (++v26 == v8)
            return result;
          goto LABEL_22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2231BB8B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  uint64_t v11;
  int v12;
  float v13;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v39;
  float v40;

  _S9 = a5;
  v11 = result;
  if (*(_DWORD *)(result + 32) != *(_DWORD *)(a3 + 32) || (v12 = *(_DWORD *)(result + 36), v12 != *(_DWORD *)(a3 + 36)))
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/FramePreProcessor.mm", 50, (uint64_t)"invalid_pixel_mask.Size() == size", 33, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v12 = *(_DWORD *)(a3 + 36);
  }
  v13 = 20.0;
  if (*MEMORY[0x24BE05F58] > 0x7641AE7uLL)
    v13 = 0.0;
  if (*(_DWORD *)(a2 + 32))
    _ZF = *(_DWORD *)(a2 + 36) == 0;
  else
    _ZF = 1;
  v15 = _ZF;
  if (v12 && *(_DWORD *)(a3 + 32))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    __asm { FCVT            H1, S9 }
    do
    {
      if ((v15 & 1) == 0)
      {
        v17 = *(_QWORD *)(a2 + 24) + 4 * (*(_DWORD *)(a2 + 44) * v18);
        v16 = *(_DWORD *)(a2 + 40);
      }
      v22 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v22)
      {
        v23 = *(_DWORD *)(v11 + 40);
        v24 = *(_QWORD *)(v11 + 24) + (*(_DWORD *)(v11 + 44) * v18);
        v25 = *(_DWORD *)(a3 + 40);
        v26 = *(_QWORD *)(a3 + 24) + 2 * (*(_DWORD *)(a3 + 44) * v18);
        result = *(unsigned int *)(a4 + 40);
        v27 = *(_QWORD *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 44) * v18);
        v28 = 0;
        v29 = 0;
        v30 = 0;
        if ((v15 & 1) != 0)
        {
          do
          {
            if (*(_BYTE *)(v24 + v30))
            {
              if ((*(_BYTE *)(v24 + v30) & 1) != 0)
              {
                *(_WORD *)(v27 + 2 * v29) = 0;
              }
              else if ((*(_BYTE *)(v24 + v30) & 4) != 0)
              {
                if ((*(_BYTE *)(v24 + v30) & 2) != 0)
                {
                  *(_WORD *)(v26 + 2 * v28) = -1025;
                }
                else
                {
                  _H4 = *(_WORD *)(v26 + 2 * v28);
                  __asm { FCVT            S4, H4 }
                  _H5 = *(_WORD *)(v27 + 2 * v29);
                  __asm { FCVT            S5, H5 }
                  if (_S4 < a6 && _S5 < _S9)
                    *(_WORD *)(v27 + 2 * v29) = _H1;
                }
              }
            }
            v30 += v23;
            v29 += result;
            v28 += v25;
            --v22;
          }
          while (v22);
        }
        else
        {
          v31 = 0;
          do
          {
            _H4 = *(_WORD *)(v26 + 2 * v28);
            _H5 = *(_WORD *)(v27 + 2 * v29);
            v39 = *(unsigned __int8 *)(v24 + v30);
            v40 = *(float *)(v17 + 4 * v31);
            if (v40 > v13)
              *(_WORD *)(v27 + 2 * v29) = 0;
            if (v39)
            {
              if ((v39 & 1) != 0)
              {
                *(_WORD *)(v27 + 2 * v29) = 0;
              }
              else if ((v39 & 4) != 0)
              {
                if ((v39 & 2) != 0)
                {
                  *(_WORD *)(v26 + 2 * v28) = -1025;
                }
                else
                {
                  __asm
                  {
                    FCVT            S4, H4
                    FCVT            S5, H5
                  }
                  if (v40 <= v13 && _S4 < a6 && _S5 < _S9)
                    *(_WORD *)(v27 + 2 * v29) = _H1;
                }
              }
            }
            v31 += v16;
            v30 += v23;
            v29 += result;
            v28 += v25;
            --v22;
          }
          while (v22);
        }
      }
      ++v18;
    }
    while (v18 != v12);
  }
  return result;
}

uint64_t sub_2231BBB00(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_24EC20FB0;
  *(_QWORD *)(a1 + 8) = &off_24EC21040;
  sub_2231BF5DC((uint64_t *)(a1 + 16));
  *(_QWORD *)(a1 + 64) = &off_24EC21040;
  sub_2231BF5DC((uint64_t *)(a1 + 72));
  *(_QWORD *)(a1 + 120) = &off_24EC21138;
  sub_2231BF930((uint64_t *)(a1 + 128));
  v4 = *a2;
  *(_DWORD *)(a1 + 208) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 200) = v4;
  return a1;
}

void sub_2231BBB90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  nullsub_30(v3);
  sub_2231BBBE4(v2);
  sub_2231BBBE4(v1);
  _Unwind_Resume(a1);
}

void sub_2231BBBB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  nullsub_30(v2);
  sub_2231BBBE4(v1);
  _Unwind_Resume(a1);
}

void sub_2231BBBD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BBBE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21040;
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

_QWORD *sub_2231BBC5C(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *a1 = &off_24EC20FB0;
  a1[15] = &off_24EC21138;
  v2 = a1 + 15;
  v3 = (std::__shared_weak_count *)a1[17];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  nullsub_30(v2);
  a1[8] = &off_24EC21040;
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    goto LABEL_10;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    nullsub_30(a1 + 8);
    a1[1] = &off_24EC21040;
    v9 = a1 + 1;
    v10 = (std::__shared_weak_count *)a1[3];
    if (!v10)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    nullsub_30(a1 + 8);
    a1[1] = &off_24EC21040;
    v9 = a1 + 1;
    v10 = (std::__shared_weak_count *)a1[3];
    if (!v10)
      goto LABEL_16;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_16:
  nullsub_30(v9);
  return a1;
}

uint64_t sub_2231BBD94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21138;
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231BBE0C(_QWORD *a1)
{
  sub_2231BBC5C(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BBE30(uint64_t a1, uint64_t a2)
{
  int v4;
  __n128 v5;
  _BOOL4 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __n128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int16 v54;
  __int16 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int16 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v100;
  std::string::size_type v101;
  int v102;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  std::string::size_type v111;
  int v112;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  std::string::size_type v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __int16 v122;
  unint64_t v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  __int16 v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::string::size_type v133;
  std::string *v134;
  std::string::size_type v135;
  std::string::size_type v136;
  int v137;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::string::size_type v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int16 v148;
  unint64_t v149;
  __int128 v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  __int16 v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::string::size_type v159;
  _BYTE *v160;
  uint64_t v161;
  std::string __p;
  _BYTE v163[32];
  __int128 v164;
  __int16 v165;
  std::string v166;
  uint64_t (**v167)();
  uint64_t v168;
  std::__shared_weak_count *v169;
  __int128 v170;
  uint64_t v171;
  __int16 v172;
  uint64_t (**v173)();
  uint64_t v174;
  std::__shared_weak_count *v175;
  __int128 v176;
  uint64_t v177;
  __int16 v178;
  _BYTE v179[50];
  uint64_t v180;
  _BYTE v181[8];
  std::string::size_type v182;
  std::__shared_weak_count *v183;
  __int128 v184;
  uint64_t v185;
  __int16 v186;
  char v187;
  __int128 v188;
  __int128 v189;
  int v190;
  char v191;
  _BYTE v192[56];
  __int128 v193;
  __int16 v194;
  char v195;
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v188 = 0u;
  v189 = 0u;
  v190 = 728333704;
  kdebug_trace();
  v4 = *(unsigned __int8 *)(a1 + 208);
  if (*(_BYTE *)(a1 + 209))
  {
    v5 = sub_223C41A24(a2, (uint64_t)v192);
    v6 = v195 != 0;
    if (v195)
    {
      v7 = *(std::__shared_weak_count **)&v192[16];
      if (*(_QWORD *)&v192[16])
      {
        v8 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v5);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      nullsub_30(v192);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_223C41850(a2, (uint64_t)v181);
  v10 = *(_QWORD *)(a2 + 1328);
  v180 = v10;
  v11 = !v6;
  if (v4)
    v11 = 0;
  if (v11)
    goto LABEL_60;
  if (!v187)
  {
    v159 = 0;
    v179[0] = 0;
LABEL_276:
    __p.__r_.__value_.__r.__words[0] = v159;
    sub_2231BD444("Invalid input: depth size = ", (unsigned int *)(a2 + 32), (const char **)"has valid mask = ", v179, (const char **)", with size ", (unsigned int *)&__p);
    if (v192[23] >= 0)
      v160 = v192;
    else
      v160 = *(_BYTE **)v192;
    if (v192[23] >= 0)
      v161 = v192[23];
    else
      v161 = *(_QWORD *)&v192[8];
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/FramePreProcessor.mm", 176, (uint64_t)"", 0, (uint64_t)v160, v161, (void (*)(void **))sub_22457406C);
    if ((v192[23] & 0x80000000) != 0)
      operator delete(*(void **)v192);
LABEL_284:
    abort();
  }
  if (*((_QWORD *)&v184 + 1) != v10)
  {
    v179[0] = v187;
    v159 = *((_QWORD *)&v184 + 1);
    goto LABEL_276;
  }
  if (!v4)
  {
LABEL_60:
    sub_2231BEC8C(a2 + 568, a2);
    goto LABEL_114;
  }
  if (*(_QWORD *)(a1 + 96) != v10)
  {
    *(_QWORD *)v192 = &off_24EC21040;
    sub_2231C12FC(&v180, (uint64_t *)&v192[8]);
    v12 = *(_OWORD *)&v192[8];
    *(_QWORD *)&v192[8] = 0;
    *(_QWORD *)&v192[16] = 0;
    v13 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&v192[24];
    *(_OWORD *)(a1 + 98) = *(_OWORD *)&v192[34];
    *(_QWORD *)v192 = &off_24EC21040;
    v16 = *(std::__shared_weak_count **)&v192[16];
    if (*(_QWORD *)&v192[16])
    {
      v17 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    nullsub_30(v192);
  }
  if (!*(_BYTE *)(a2 + 56)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/FramePreProcessor.mm", 184, (uint64_t)"fb.depth.depth.has_value()", 26, (uint64_t)"Expect to have valid depth.", 27, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_284;
  }
  sub_223C3B2A0(a2, (uint64_t)v192);
  sub_2231BD69C((uint64_t)v192, a1 + 64, v19);
  if ((_BYTE)v193)
  {
    v20 = *(std::__shared_weak_count **)&v192[16];
    if (*(_QWORD *)&v192[16])
    {
      v21 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    nullsub_30(v192);
  }
  if (*(_QWORD *)(a1 + 40) != v180)
  {
    *(_QWORD *)v192 = &off_24EC21040;
    sub_2231C12FC(&v180, (uint64_t *)&v192[8]);
    v23 = *(_OWORD *)&v192[8];
    *(_QWORD *)&v192[8] = 0;
    *(_QWORD *)&v192[16] = 0;
    v24 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v192[24];
    *(_OWORD *)(a1 + 42) = *(_OWORD *)&v192[34];
    *(_QWORD *)v192 = &off_24EC21040;
    v27 = *(std::__shared_weak_count **)&v192[16];
    if (*(_QWORD *)&v192[16])
    {
      v28 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    nullsub_30(v192);
  }
  if (!*(_BYTE *)(a2 + 120)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/FramePreProcessor.mm", 189, (uint64_t)"fb.depth.confidence.has_value()", 31, (uint64_t)"Expect to have valid confidence.", 32, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_284;
  }
  sub_223C3B368(a2, (uint64_t)v192);
  sub_2231BD69C((uint64_t)v192, a1 + 8, v30);
  if ((_BYTE)v193)
  {
    v31 = *(std::__shared_weak_count **)&v192[16];
    if (*(_QWORD *)&v192[16])
    {
      v32 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    nullsub_30(v192);
  }
  sub_223C3BCBC(a2, (uint64_t)&__p);
  *(_QWORD *)v192 = &off_24EC216B8;
  sub_2231C1D58(&v192[8]);
  *(_QWORD *)v179 = &off_24EC21230;
  if ((_BYTE)v164)
  {
    *(_OWORD *)&v179[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)&v179[24] = *(_OWORD *)v163;
    *(_OWORD *)&v179[34] = *(_OWORD *)&v163[10];
  }
  else
  {
    sub_2231BE6D4((uint64_t)v192, (uint64_t *)&v179[8]);
  }
  v34 = *(float *)(a1 + 200);
  v35 = *(float *)(a1 + 204);
  v173 = &off_24EC218E0;
  v36 = *(_QWORD *)(a1 + 72);
  v37 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v37)
  {
    v54 = *(_WORD *)(a1 + 112);
    v174 = *(_QWORD *)(a1 + 72);
    v175 = 0;
    v176 = *(_OWORD *)(a1 + 88);
    v177 = *(_QWORD *)(a1 + 104);
    v178 = v54;
    v167 = &off_24EC218E0;
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v46)
      goto LABEL_90;
LABEL_76:
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v49 = *(_WORD *)(a1 + 56);
    do
      v50 = __ldxr(v47);
    while (__stxr(v50 + 1, v47));
    v170 = *(_OWORD *)(a1 + 32);
    v171 = *(_QWORD *)(a1 + 48);
    do
      v51 = __ldxr(v47);
    while (__stxr(v51 + 1, v47));
    v168 = v45;
    v169 = v46;
    v172 = v49;
    do
      v52 = __ldaxr(v47);
    while (__stlxr(v52 - 1, v47));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    do
      v53 = __ldaxr(v47);
    while (__stlxr(v53 - 1, v47));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    goto LABEL_91;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v40 = *(_WORD *)(a1 + 112);
  do
    v41 = __ldxr(v38);
  while (__stxr(v41 + 1, v38));
  v176 = *(_OWORD *)(a1 + 88);
  v177 = *(_QWORD *)(a1 + 104);
  do
    v42 = __ldxr(v38);
  while (__stxr(v42 + 1, v38));
  v174 = v36;
  v175 = v37;
  v178 = v40;
  do
    v43 = __ldaxr(v38);
  while (__stlxr(v43 - 1, v38));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  do
    v44 = __ldaxr(v38);
  while (__stlxr(v44 - 1, v38));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    v167 = &off_24EC218E0;
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v46)
      goto LABEL_90;
    goto LABEL_76;
  }
  v167 = &off_24EC218E0;
  v45 = *(_QWORD *)(a1 + 16);
  v46 = *(std::__shared_weak_count **)(a1 + 24);
  if (v46)
    goto LABEL_76;
LABEL_90:
  v55 = *(_WORD *)(a1 + 56);
  v168 = v45;
  v169 = 0;
  v170 = *(_OWORD *)(a1 + 32);
  v171 = *(_QWORD *)(a1 + 48);
  v172 = v55;
LABEL_91:
  sub_2231BB8B4((uint64_t)v181, (uint64_t)v179, (uint64_t)&v173, (uint64_t)&v167, v34, v35);
  v56 = v169;
  if (v169)
  {
    v57 = (unint64_t *)&v169->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  nullsub_30(&v167);
  v59 = v175;
  if (v175)
  {
    v60 = (unint64_t *)&v175->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  nullsub_30(&v173);
  v62 = *(std::__shared_weak_count **)&v179[16];
  if (*(_QWORD *)&v179[16])
  {
    v63 = (unint64_t *)(*(_QWORD *)&v179[16] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  nullsub_30(v179);
  sub_223167354((uint64_t)&v192[8]);
  nullsub_30(v192);
  if ((_BYTE)v164)
  {
    v65 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v66 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    nullsub_30(&__p);
  }
  sub_2231BDA6C(a2 + 568, a1 + 64);
  sub_2231BDA6C(a2 + 64, a1 + 8);
LABEL_114:
  if (v6)
  {
    if (*(_QWORD *)(a1 + 176) != v180)
    {
      *(_QWORD *)v192 = &off_24EC21138;
      sub_2231C2980(&v180, (uint64_t *)&v192[8]);
      v68 = *(_OWORD *)&v192[8];
      *(_QWORD *)&v192[8] = 0;
      *(_QWORD *)&v192[16] = 0;
      v69 = *(std::__shared_weak_count **)(a1 + 136);
      *(_OWORD *)(a1 + 128) = v68;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *(_OWORD *)&v192[40];
      *(_OWORD *)(a1 + 144) = *(_OWORD *)&v192[24];
      *(_OWORD *)(a1 + 160) = v72;
      *(_OWORD *)(a1 + 176) = v193;
      *(_WORD *)(a1 + 192) = v194;
      *(_QWORD *)v192 = &off_24EC21138;
      v73 = *(std::__shared_weak_count **)&v192[16];
      if (*(_QWORD *)&v192[16])
      {
        v74 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      nullsub_30(v192);
    }
    sub_223C41A24(a2, (uint64_t)v192);
    v76 = a1 + 120;
    sub_2231BDB9C((uint64_t)v192, v76);
    if (v195)
    {
      v77 = *(std::__shared_weak_count **)&v192[16];
      if (*(_QWORD *)&v192[16])
      {
        v78 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      nullsub_30(v192);
    }
    sub_223C380FC(a2, (uint64_t)v192);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21420;
    v80 = v182;
    v81 = v183;
    if (v183)
    {
      v82 = (unint64_t *)&v183->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
      v84 = v186;
      do
        v85 = __ldxr(v82);
      while (__stxr(v85 + 1, v82));
      *(_OWORD *)v163 = v184;
      *(_QWORD *)&v163[16] = v185;
      do
        v86 = __ldxr(v82);
      while (__stxr(v86 + 1, v82));
      __p.__r_.__value_.__l.__size_ = v80;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v81;
      *(_WORD *)&v163[24] = v84;
      do
        v87 = __ldaxr(v82);
      while (__stlxr(v87 - 1, v82));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
      do
        v88 = __ldaxr(v82);
      while (__stlxr(v88 - 1, v82));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v182;
      *(_OWORD *)v163 = v184;
      *(_QWORD *)&v163[16] = v185;
      *(_WORD *)&v163[24] = v186;
    }
    LOBYTE(v164) = 1;
    sub_2231BB078(v76, (uint64_t)v192, (uint64_t)&__p);
    if ((_BYTE)v164)
    {
      v89 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v90 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      nullsub_30(&__p);
    }
    if ((_BYTE)v193)
    {
      v92 = *(std::__shared_weak_count **)&v192[16];
      if (*(_QWORD *)&v192[16])
      {
        v93 = (unint64_t *)(*(_QWORD *)&v192[16] + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      nullsub_30(v192);
    }
    sub_2231BDE0C(a2 + 712, v76);
  }
  else
  {
    sub_2231BF3A0(a2 + 712, a2 + 800);
  }
  *(_QWORD *)v192 = "cv3d.recon.";
  *(_QWORD *)&v192[8] = 11;
  *(_QWORD *)&v192[16] = "Volumetric.NoveltyMask";
  *(_QWORD *)&v192[24] = 22;
  sub_2231A9820((uint64_t)v192, (uint64_t)&v192[32], 0, 0, &__p);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v95 = sub_2241471F8();
    v96 = sub_2241486EC((uint64_t)v95);
    if (!sub_2241053B4(v96))
    {
      v97 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97))
      {
        memset(v192, 0, 32);
        *(_DWORD *)&v192[32] = 728325608;
        kdebug_trace();
        sub_2231BDF4C((double *)&qword_255788F20, v97, a2 + 568, "processed_depth");
        kdebug_trace();
      }
    }
  }
  memset(v192, 0, 32);
  *(_DWORD *)&v192[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v100 = p_p->__r_.__value_.__r.__words[0];
    v101 = p_p->__r_.__value_.__l.__size_;
    v102 = p_p->__r_.__value_.__s.__data_[16];
    if (v100 == 0x6365722E64337663 && v101 == 0x73746174532E6E6FLL && v102 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v192 = "cv3d.recon.";
  *(_QWORD *)&v192[8] = 11;
  *(_QWORD *)&v192[16] = "Volumetric.NoveltyMask";
  *(_QWORD *)&v192[24] = 22;
  sub_2231A9820((uint64_t)v192, (uint64_t)&v192[32], 0, 0, &__p);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v105 = sub_2241471F8();
    v106 = sub_2241486EC((uint64_t)v105);
    if (!sub_2241053B4(v106))
    {
      v107 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
      {
        memset(v192, 0, 32);
        *(_DWORD *)&v192[32] = 728325608;
        kdebug_trace();
        sub_2231BE094((double *)&qword_255788F20, v107, a2 + 64, "processed_confidence");
        kdebug_trace();
      }
    }
  }
  memset(v192, 0, 32);
  *(_DWORD *)&v192[32] = 728325624;
  kdebug_trace();
  v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v108 = __p.__r_.__value_.__l.__size_;
  if (v108 >= 0x11)
  {
    v109 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v109 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v110 = v109->__r_.__value_.__r.__words[0];
    v111 = v109->__r_.__value_.__l.__size_;
    v112 = v109->__r_.__value_.__s.__data_[16];
    if (v110 == 0x6365722E64337663 && v111 == 0x73746174532E6E6FLL && v112 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v192 = "cv3d.recon.";
  *(_QWORD *)&v192[8] = 11;
  *(_QWORD *)&v192[16] = "Volumetric.NoveltyMask";
  *(_QWORD *)&v192[24] = 22;
  sub_2231A9820((uint64_t)v192, (uint64_t)&v192[32], 0, 0, &v166);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v115 = sub_2241471F8();
    v116 = sub_2241486EC((uint64_t)v115);
    if (!sub_2241053B4(v116))
    {
      v117 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117))
      {
        memset(v179, 0, 32);
        *(_DWORD *)&v179[32] = 728325608;
        kdebug_trace();
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC204C0;
        v118 = *(_QWORD *)(a2 + 720);
        v119 = *(std::__shared_weak_count **)(a2 + 728);
        if (v119)
        {
          v120 = (unint64_t *)&v119->__shared_owners_;
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
          v122 = *(_WORD *)(a2 + 784);
          do
            v123 = __ldxr(v120);
          while (__stxr(v123 + 1, v120));
          v124 = *(_OWORD *)(a2 + 752);
          *(_OWORD *)v163 = *(_OWORD *)(a2 + 736);
          *(_OWORD *)&v163[16] = v124;
          v164 = *(_OWORD *)(a2 + 768);
          do
            v125 = __ldxr(v120);
          while (__stxr(v125 + 1, v120));
          __p.__r_.__value_.__l.__size_ = v118;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v119;
          v165 = v122;
          do
            v126 = __ldaxr(v120);
          while (__stlxr(v126 - 1, v120));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
          do
            v127 = __ldaxr(v120);
          while (__stlxr(v127 - 1, v120));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        else
        {
          v128 = *(_WORD *)(a2 + 784);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v118;
          v129 = *(_OWORD *)(a2 + 752);
          *(_OWORD *)v163 = *(_OWORD *)(a2 + 736);
          *(_OWORD *)&v163[16] = v129;
          v164 = *(_OWORD *)(a2 + 768);
          v165 = v128;
        }
        *(_QWORD *)v192 = &off_24EC21B18;
        sub_2231C5C38(&v164, &v192[8]);
        sub_2231C59E4((uint64_t)&__p, (uint64_t)v192, (_BOOL8)&v191);
        sub_2231BE1DC((double *)&qword_255788F20, v117, v192, "processed_semantics");
        sub_223167354((uint64_t)&v192[8]);
        nullsub_30(v192);
        v130 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          v131 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        nullsub_30(&__p);
        kdebug_trace();
      }
    }
  }
  memset(v179, 0, 32);
  *(_DWORD *)&v179[32] = 728325624;
  kdebug_trace();
  v133 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v133 = v166.__r_.__value_.__l.__size_;
  if (v133 >= 0x11)
  {
    v134 = &v166;
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v134 = (std::string *)v166.__r_.__value_.__r.__words[0];
    v135 = v134->__r_.__value_.__r.__words[0];
    v136 = v134->__r_.__value_.__l.__size_;
    v137 = v134->__r_.__value_.__s.__data_[16];
    if (v135 == 0x6365722E64337663 && v136 == 0x73746174532E6E6FLL && v137 == 46)
    {
      sub_223187510();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC204C0;
      v144 = *(_QWORD *)(a2 + 720);
      v145 = *(std::__shared_weak_count **)(a2 + 728);
      if (v145)
      {
        v146 = (unint64_t *)&v145->__shared_owners_;
        do
          v147 = __ldxr(v146);
        while (__stxr(v147 + 1, v146));
        v148 = *(_WORD *)(a2 + 784);
        do
          v149 = __ldxr(v146);
        while (__stxr(v149 + 1, v146));
        v150 = *(_OWORD *)(a2 + 752);
        *(_OWORD *)v163 = *(_OWORD *)(a2 + 736);
        *(_OWORD *)&v163[16] = v150;
        v164 = *(_OWORD *)(a2 + 768);
        do
          v151 = __ldxr(v146);
        while (__stxr(v151 + 1, v146));
        __p.__r_.__value_.__l.__size_ = v144;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v145;
        v165 = v148;
        do
          v152 = __ldaxr(v146);
        while (__stlxr(v152 - 1, v146));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
        do
          v153 = __ldaxr(v146);
        while (__stlxr(v153 - 1, v146));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      else
      {
        v154 = *(_WORD *)(a2 + 784);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v144;
        v155 = *(_OWORD *)(a2 + 752);
        *(_OWORD *)v163 = *(_OWORD *)(a2 + 736);
        *(_OWORD *)&v163[16] = v155;
        v164 = *(_OWORD *)(a2 + 768);
        v165 = v154;
      }
      *(_QWORD *)v192 = &off_24EC21B18;
      sub_2231C5C38(&v164, &v192[8]);
      sub_2231C59E4((uint64_t)&__p, (uint64_t)v192, (_BOOL8)&v191);
      sub_223167354((uint64_t)&v192[8]);
      nullsub_30(v192);
      v156 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v157 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      nullsub_30(&__p);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (v187)
  {
    v140 = v183;
    if (v183)
    {
      v141 = (unint64_t *)&v183->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    nullsub_30(v181);
  }
  return kdebug_trace();
}

void sub_2231BD1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v60;

  nullsub_30(&a43);
  sub_223167354(v59);
  nullsub_30(v60 - 256);
  sub_2231BD90C((uint64_t)&a10);
  sub_2231BD90C((uint64_t)&a51);
  sub_2231874DC((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BD3DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_30(a1);
  }
  return a1;
}

uint64_t sub_2231BD444(char *__s, unsigned int *a2, const char **a3, _BYTE *a4, const char **a5, unsigned int *a6)
{
  const char *v11;
  uint64_t result;
  char v13;
  _DWORD v14[6];
  int v15;
  const char *v16;
  _QWORD **v17;
  const char **v18;
  _DWORD *v19;
  const char **v20;
  const char **v21;
  _QWORD *v22;

  v15 = 0;
  sub_2231BA8E8(v14, __s);
  sub_2231BFC9C((uint64_t)&v13, (uint64_t)v14, a2);
  v17 = (_QWORD **)v14;
  v18 = a3;
  v19 = v14;
  v20 = a3;
  v21 = a3;
  if (v15 == -1)
    sub_22316DD70();
  v22 = &v17;
  ((void (*)(_QWORD **, _DWORD *))off_24EC21648[v15])(&v22, v14);
  v11 = "true";
  if (!*a4)
    v11 = "false";
  v16 = v11;
  v17 = (_QWORD **)v14;
  v18 = &v16;
  v19 = v14;
  v20 = &v16;
  v21 = &v16;
  if (v15 == -1)
    sub_22316DD70();
  v22 = &v17;
  ((void (*)(_QWORD **, _DWORD *))off_24EC21660[v15])(&v22, v14);
  v17 = (_QWORD **)v14;
  v18 = a5;
  v19 = v14;
  v20 = a5;
  v21 = a5;
  if (v15 == -1)
    sub_22316DD70();
  v22 = &v17;
  ((void (*)(_QWORD **, _DWORD *))off_24EC21678[v15])(&v22, v14);
  sub_2231BFC9C((uint64_t)&v17, (uint64_t)v14, a6);
  if (v15 == -1)
    sub_22316DD70();
  v17 = &v22;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC21690[v15])(&v17, v14);
  if (v15 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC21600[v15])(&v17, v14);
  return result;
}

void sub_2231BD610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BD624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BD638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BD64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BD660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BD674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BD688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BD69C(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6)
      goto LABEL_41;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10)
      goto LABEL_41;
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(&v27, v5, 0);
        v14 = *(_QWORD *)(a2 + 8);
        v15 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v15)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
LABEL_41:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_14;
    }
  }
  v27 = 0;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
  {
LABEL_15:
    if (!v14)
      goto LABEL_34;
    goto LABEL_31;
  }
LABEL_19:
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
    if (!v14)
      goto LABEL_34;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v14)
      goto LABEL_34;
  }
  v14 = *(_QWORD *)(a2 + 8);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (*(_BYTE *)(a2 + 49))
        goto LABEL_32;
      goto LABEL_34;
    }
  }
LABEL_31:
  if (*(_BYTE *)(a2 + 49))
  {
LABEL_32:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 96))(&v26, v14, 1);
    goto LABEL_35;
  }
LABEL_34:
  v26 = 0;
LABEL_35:
  v23.n128_u64[0] = sub_2231C1408(a1, a2, a3);
  v24 = v26;
  v26 = 0;
  if (v24)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v24 + 8))(v24, v23.n128_f32[0]);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v23);
  return result;
}

void sub_2231BD8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231BD90C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_30(a1);
  }
  return a1;
}

uint64_t sub_2231BD974(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_2231BD9DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_2231BDA44(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

uint64_t sub_2231BDA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 56))
  {
    sub_2231BE944(a1, a2);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21328;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v10;
      *(_WORD *)(a1 + 48) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      v15 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v15;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_WORD *)(a1 + 48) = v14;
    }
    *(_BYTE *)(a1 + 56) = 1;
    return a1;
  }
}

uint64_t sub_2231BDB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_41;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_41;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (*(_BYTE *)(a1 + 73))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v25, v4, 0);
        v13 = *(_QWORD *)(a2 + 8);
        v14 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v14)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
LABEL_41:
      if (*(_BYTE *)(a1 + 73))
        goto LABEL_14;
    }
  }
  v25 = 0;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
  {
LABEL_15:
    if (!v13)
      goto LABEL_34;
    goto LABEL_31;
  }
LABEL_19:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    if (!v13)
      goto LABEL_34;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_34;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (*(_BYTE *)(a2 + 73))
        goto LABEL_32;
      goto LABEL_34;
    }
  }
LABEL_31:
  if (*(_BYTE *)(a2 + 73))
  {
LABEL_32:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(&v24, v13, 1);
    goto LABEL_35;
  }
LABEL_34:
  v24 = 0;
LABEL_35:
  sub_2231C2A8C(a1, a2);
  v22 = v24;
  v24 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231BDDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231BDE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_2231BF038(a1, a2);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21518;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_QWORD *)(a2 + 24);
      v11 = *(_OWORD *)(a2 + 32);
      v12 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 48) = v12;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v10;
      *(_WORD *)(a1 + 72) = v8;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v16 = *(_WORD *)(a2 + 72);
      v17 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v17;
      v18 = *(_OWORD *)(a2 + 32);
      v19 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v18;
      *(_OWORD *)(a1 + 48) = v19;
      *(_WORD *)(a1 + 72) = v16;
    }
    *(_BYTE *)(a1 + 80) = 1;
    return a1;
  }
}

void sub_2231BDF4C(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231C32E8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231BE078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231BE094(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231C32E8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231BE1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231BE1DC(double *a1, uint64_t a2, _QWORD *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231C6B28((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231BE308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231BE324(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

_QWORD *sub_2231BE34C(_QWORD *result)
{
  *result = &off_24EC20FD8;
  return result;
}

void sub_2231BE360()
{
  JUMPOUT(0x227684CE8);
}

void sub_2231BE378(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21040;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BE3F0()
{
  return 3;
}

uint64_t sub_2231BE3F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231BE400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_2231BE41C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2231BE498(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21138;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BE510()
{
  return 38;
}

uint64_t sub_2231BE518(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231BE520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231BE53C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2231BE5B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BE624()
{
  return 4;
}

uint64_t sub_2231BE62C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231BE634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_2231BE650(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2231BE6D4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v17 = v4;
    v18 = v5;
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0;
    v15 = v4;
    v16 = 0;
  }
  sub_2231BE7E0(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231BE7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231BE7E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v19, v3, 4);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231BE930(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BE944(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v22)();
  __int128 v23;
  _BYTE v24[26];

  v22 = &off_24EC21328;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_WORD *)(a2 + 48);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v24[8] = *(_OWORD *)(a2 + 32);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)&v23 = v3;
    *((_QWORD *)&v23 + 1) = v4;
    *(_QWORD *)v24 = v9;
    *(_WORD *)&v24[24] = v7;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v13 = *(_WORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 24);
    v23 = v3;
    *(_QWORD *)v24 = v14;
    *(_OWORD *)&v24[8] = *(_OWORD *)(a2 + 32);
    *(_WORD *)&v24[24] = v13;
  }
  v15 = v23;
  v23 = 0uLL;
  v16 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v15;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v24;
  *(_OWORD *)(a1 + 34) = *(_OWORD *)&v24[10];
  v22 = &off_24EC21328;
  if (*((_QWORD *)&v23 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
    }
  }
  nullsub_30(&v22);
  return a1;
}

uint64_t sub_2231BEAF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21328;
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231BEB6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21328;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BEBE4()
{
  return 3;
}

uint64_t sub_2231BEBEC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231BEBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_2231BEC10(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2231BEC8C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;

  v4 = *(unsigned __int8 *)(a1 + 56);
  if (v4 == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21328;
    if (v4)
    {
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      nullsub_30(a1);
      *(_BYTE *)(a1 + 56) = 0;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v20 = *(_WORD *)(a2 + 48);
        do
          v21 = __ldxr(v18);
        while (__stxr(v21 + 1, v18));
        v22 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v22;
        do
          v23 = __ldxr(v18);
        while (__stxr(v23 + 1, v18));
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v17;
        *(_WORD *)(a1 + 48) = v20;
        do
          v24 = __ldaxr(v18);
        while (__stlxr(v24 - 1, v18));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        do
          v25 = __ldaxr(v18);
        while (__stlxr(v25 - 1, v18));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
        v26 = *(_WORD *)(a2 + 48);
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = 0;
        v27 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v27;
        *(_WORD *)(a1 + 48) = v26;
        *(_BYTE *)(a1 + 56) = 1;
      }
    }
  }
}

uint64_t sub_2231BEEB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231BEF1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BEF88()
{
  return 1;
}

uint64_t sub_2231BEF90(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231BEF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_2231BEFB4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231BF038(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[48];
  __int16 v27;

  v24 = &off_24EC21518;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_WORD *)(a2 + 72);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v26[8] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v26[24] = v10;
    *(_QWORD *)&v26[40] = *(_QWORD *)(a2 + 64);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_QWORD *)&v25 = v3;
    *((_QWORD *)&v25 + 1) = v4;
    *(_QWORD *)v26 = v9;
    v27 = v7;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v14 = *(_WORD *)(a2 + 72);
    v15 = *(_QWORD *)(a2 + 24);
    v25 = v3;
    *(_QWORD *)v26 = v15;
    v16 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v26[8] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v26[24] = v16;
    *(_QWORD *)&v26[40] = *(_QWORD *)(a2 + 64);
    v27 = v14;
  }
  v17 = v25;
  v25 = 0uLL;
  v18 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v26;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v26[16];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v26[32];
  *(_WORD *)(a1 + 72) = v27;
  v24 = &off_24EC21518;
  if (*((_QWORD *)&v25 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
    }
  }
  nullsub_30(&v24);
  return a1;
}

uint64_t sub_2231BF20C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21518;
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231BF280(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21518;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231BF2F8()
{
  return 38;
}

uint64_t sub_2231BF300(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231BF308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231BF324(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2231BF3A0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;

  v4 = *(unsigned __int8 *)(a1 + 80);
  if (v4 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v13;
      *(_OWORD *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21518;
    if (v4)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      nullsub_30(a1);
      *(_BYTE *)(a1 + 80) = 0;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v21 = *(_WORD *)(a2 + 72);
        do
          v22 = __ldxr(v19);
        while (__stxr(v22 + 1, v19));
        v23 = *(_OWORD *)(a2 + 24);
        v24 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v24;
        *(_OWORD *)(a1 + 24) = v23;
        do
          v25 = __ldxr(v19);
        while (__stxr(v25 + 1, v19));
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v18;
        *(_WORD *)(a1 + 72) = v21;
        do
          v26 = __ldaxr(v19);
        while (__stlxr(v26 - 1, v19));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        do
          v27 = __ldaxr(v19);
        while (__stlxr(v27 - 1, v19));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        *(_BYTE *)(a1 + 80) = 1;
      }
      else
      {
        v28 = *(_WORD *)(a2 + 72);
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = 0;
        v29 = *(_OWORD *)(a2 + 24);
        v30 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v30;
        *(_OWORD *)(a1 + 24) = v29;
        *(_WORD *)(a1 + 72) = v28;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
  }
}

uint64_t sub_2231BF5DC@<X0>(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_2231BF6E8(&v9);
  v10 = v9;
  if (v9)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v9;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20058;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v11 = v2;
  v9 = 0;
  sub_2231BF7CC(a1, &v10);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    v8 = sub_224485244(result);
    return MEMORY[0x227684CE8](v8, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231BF6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231BF6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BF6E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  _OWORD v5[2];
  _QWORD v6[6];

  v6[5] = &off_24EC1FF78;
  sub_224498BB4((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_24EC1FFC0;
  *(_OWORD *)(v2 + 8) = v5[0];
  *(_OWORD *)(v2 + 20) = *(_OWORD *)((char *)v5 + 12);
  sub_2244E32B8((__n128 *)(v2 + 40), (__n128 *)v6);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)&v6[3];
  *a1 = v2;
  return sub_224485244((uint64_t)v4);
}

void sub_2231BF788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BF7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231BF7CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 3);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231BF91C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BF930@<X0>(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_2231BFA3C(&v9);
  v10 = v9;
  if (v9)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v9;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20470;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v11 = v2;
  v9 = 0;
  sub_2231BFB38(a1, &v10);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    v8 = sub_224497414(result);
    return MEMORY[0x227684CE8](v8, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_2231BFA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A4B20((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231BFA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A4B20((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BFA3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[7];

  v9[6] = &off_24EC20390;
  sub_22449B3E4((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_24EC203D8;
  *(_OWORD *)(v2 + 8) = v5;
  *(_OWORD *)(v2 + 24) = v6;
  *(_OWORD *)(v2 + 40) = v7;
  *(_QWORD *)(v2 + 56) = v8;
  sub_2244E32B8((__n128 *)(v2 + 64), (__n128 *)v9);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)&v9[3];
  *(_QWORD *)(v2 + 104) = v9[5];
  *a1 = v2;
  return sub_224497414((uint64_t)v4);
}

void sub_2231BFAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C40A44A61E0);
  sub_224497414((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BFB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224497414((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231BFB38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 38);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231BFC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231BFC9C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_22456E6D0(v9);
  v5 = (_QWORD *)sub_22456E810(v9);
  sub_2231BFD90(v5, a3);
  sub_22456E81C(v9, __p);
  sub_22456E764(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC21618[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2231BFD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2231BFD90(_QWORD *a1, unsigned int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_2231BFEBC((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_22316DD70();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC21690[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24EC21600[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_2231813E8(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_2231BFE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231BFE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231BFEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231BFEBC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24EC21630[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC21618[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24EC21630[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_22316DD70();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC21618[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_22316DD70();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24EC21630[v9])(&v11, a2);
}

void sub_2231C0054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2231C0078(_DWORD ***a1)
{
  return sub_2231C0094(**a1, (char *)(*a1)[1]);
}

void sub_2231C0084(uint64_t a1, uint64_t a2)
{
  sub_2231C0184((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231C0094(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC21600[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231C0184(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC21600[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231C0338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231C037C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231C0474((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231C046C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231C0474(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231C068C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2231C06A0(_DWORD ***a1)
{
  return sub_2231C06BC(**a1, (const char **)(*a1)[1]);
}

void sub_2231C06AC(uint64_t a1, uint64_t a2)
{
  sub_2231C07B0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231C06BC(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC21600[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231C07B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = *(const char **)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC21600[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231C0968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231C09AC(uint64_t a1, uint64_t a2)
{
  const char **v3;
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  char *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231C0AA4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = *v3;
  v6 = strlen(*v3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v8 = operator new(v10 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v11 | 0x8000000000000000;
    *(_QWORD *)v4 = v8;
  }
  else
  {
    v4[23] = v6;
    v8 = v4;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231C0A9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231C0AA4(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (char *)*a1;
      v15 = (char *)a1[1];
      if (v15 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 24);
    *((_QWORD *)v12 - 1) = *((_QWORD *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 1) = 0;
    *((_QWORD *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  v20 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0)
        operator delete(*((void **)v15 - 3));
      v15 -= 24;
    }
    while (v15 != v20);
    v15 = v20;
  }
LABEL_28:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_2231C0CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2231C0CD4(_DWORD ***a1)
{
  return sub_2231C0CF0(**a1, (char *)(*a1)[1]);
}

void sub_2231C0CE0(uint64_t a1, uint64_t a2)
{
  sub_2231C0DE0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231C0CF0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC21600[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231C0DE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC21600[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231C0F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231C0FD8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231C10D0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231C10C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231C10D0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231C12E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C12FC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  sub_2231A2FBC(a1, &v10);
  v11 = v10;
  if (v10)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v10;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20058;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v12 = v3;
  v10 = 0;
  sub_2231BF7CC(a2, &v11);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    v9 = sub_224485244(result);
    return MEMORY[0x227684CE8](v9, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231C13D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C13EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int16 sub_2231C1408@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  unsigned int v5;
  int v6;
  unint64_t v8;
  __n128 *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  __n128 *v27;
  __n128 *v28;
  unint64_t v29;
  __n128 v30;
  unsigned __int16 v31;
  uint64_t v33;

  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 44);
  if (v6 != *(_DWORD *)(a2 + 44) || v6 != v5)
  {
    v33 = *(unsigned int *)(a1 + 32);
    sub_2231C167C(a1, a2, &v33, a3);
    return a3.n128_u16[0];
  }
  v8 = *(unsigned int *)(a1 + 36) * (unint64_t)v5;
  v9 = *(__n128 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48))
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v9 = *(__n128 **)(a1 + 24);
  }
  if (v8
    && !v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_32:
    abort();
  }
  v16 = *(__n128 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v16)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v17 + 88))(v17, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    v16 = *(__n128 **)(a2 + 24);
  }
  if (!v8 || v16)
  {
    if (!v8)
      return a3.n128_u16[0];
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_32;
  }
  v22 = (v8 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v22 < 0xF || (unint64_t)((char *)v16 - (char *)v9) < 0x20)
  {
    v25 = (unsigned __int16 *)v16;
    v26 = (unsigned __int16 *)v9;
    do
    {
LABEL_41:
      v31 = *v26++;
      a3.n128_u16[0] = v31;
      *v25++ = v31;
    }
    while (v26 != (unsigned __int16 *)((char *)v9 + 2 * v8));
    return a3.n128_u16[0];
  }
  v23 = v22 + 1;
  v24 = (v22 + 1) & 0xFFFFFFFFFFFFFFF0;
  v25 = (unsigned __int16 *)v16 + v24;
  v26 = (unsigned __int16 *)v9 + v24;
  v27 = v9 + 1;
  v28 = v16 + 1;
  v29 = v24;
  do
  {
    a3 = v27[-1];
    v30 = *v27;
    v28[-1] = a3;
    *v28 = v30;
    v27 += 2;
    v28 += 2;
    v29 -= 16;
  }
  while (v29);
  if (v23 != v24)
    goto LABEL_41;
  return a3.n128_u16[0];
}

uint64_t sub_2231C167C(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      goto LABEL_44;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v12)
      goto LABEL_44;
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v28, v7, 0);
        v16 = *(_QWORD *)(a2 + 8);
        v17 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v17)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
LABEL_44:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_14;
    }
  }
  v28 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v17)
  {
LABEL_15:
    if (!v16)
      goto LABEL_35;
    goto LABEL_31;
  }
LABEL_19:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16)
      goto LABEL_35;
LABEL_26:
    v16 = *(_QWORD *)(a2 + 8);
    v21 = *(std::__shared_weak_count **)(a2 + 16);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if (!*(_BYTE *)(a2 + 49))
          goto LABEL_35;
LABEL_32:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 96))(&v27, v16, 1);
        if (!*(_DWORD *)(a1 + 32))
          goto LABEL_38;
        goto LABEL_36;
      }
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  if (v16)
    goto LABEL_26;
LABEL_35:
  v27 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_38;
LABEL_36:
  if (*(_DWORD *)(a1 + 36))
    a4.n128_f64[0] = sub_2231C1914(a3, a1, a2);
LABEL_38:
  v25 = v27;
  v27 = 0;
  if (v25)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v25 + 8))(v25, a4);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_2231C18B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

double sub_2231C1914(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _OWORD v29[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v25 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(unsigned int *)(a3 + 44);
    v26 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a3 + 40) << 32);
    v24 = 0;
    v27 = v3 - 1;
    v28 = v9 | (v10 << 32);
    v11 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(_QWORD *)(a2 + 24);
    }
    v17 = *(_QWORD *)(a3 + 24);
    if (*(_BYTE *)(a3 + 48) && v17)
    {
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(std::__shared_weak_count **)(a3 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v17 = *(_QWORD *)(a3 + 24);
    }
    memset(v29, 0, sizeof(v29));
    *(_QWORD *)&result = sub_2231C1A98(&v24, (uint64_t)v29, a1, v11, v17);
  }
  return result;
}

__int16 sub_2231C1A98@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  int v9;
  int v10;
  unsigned int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _WORD *v32;
  __int16 *v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;

  v5 = a5;
  v6 = a4;
  v9 = a1[3];
  v10 = a1[4];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = a5;
  *(_DWORD *)(a2 + 24) = v10;
  if (a1[5])
  {
    for (i = 0; i < a1[5]; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v13 = *a3;
      v14 = v5;
      v15 = *a3;
      if (!v6)
      {
        v14 = v5;
        v15 = *a3;
        if (v13)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_38;
          }
          v15 = *a3;
          v14 = *(_QWORD *)(a2 + 16);
        }
      }
      if (!v14
        && v15
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_38;
      }
      if (v13)
      {
        v17 = (v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v17 < 0xF || (unint64_t)(v14 - v6) < 0x20)
        {
          v20 = (_WORD *)v14;
          v21 = (__int16 *)v6;
        }
        else
        {
          v18 = v17 + 1;
          v19 = (v17 + 1) & 0xFFFFFFFFFFFFFFF0;
          v20 = (_WORD *)(v14 + 2 * v19);
          v21 = (__int16 *)(v6 + 2 * v19);
          v22 = (__int128 *)(v6 + 16);
          v23 = (_OWORD *)(v14 + 16);
          v24 = v19;
          do
          {
            v16 = *(v22 - 1);
            v25 = *v22;
            *(v23 - 1) = v16;
            *v23 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 16;
          }
          while (v24);
          if (v18 == v19)
            goto LABEL_3;
        }
        do
        {
          v26 = *v21++;
          LOWORD(v16) = v26;
          *v20++ = v26;
        }
        while (v21 != (__int16 *)(v6 + 2 * v13));
      }
LABEL_3:
      v6 += 2 * a1[6];
      v5 += 2 * a1[7];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v27 = *a3;
  v28 = *a3;
  if (!v6 && v27)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_38;
    }
    v28 = *a3;
    v5 = *(_QWORD *)(a2 + 16);
  }
  if (!v5
    && v28
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_38:
    abort();
  }
  if (!v27)
    return v16;
  v29 = (v27 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v29 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v32 = (_WORD *)v5;
    v33 = (__int16 *)v6;
    do
    {
LABEL_36:
      v38 = *v33++;
      LOWORD(v16) = v38;
      *v32++ = v38;
    }
    while (v33 != (__int16 *)(v6 + 2 * v27));
    return v16;
  }
  v30 = v29 + 1;
  v31 = (v29 + 1) & 0xFFFFFFFFFFFFFFF0;
  v32 = (_WORD *)(v5 + 2 * v31);
  v33 = (__int16 *)(v6 + 2 * v31);
  v34 = (__int128 *)(v6 + 16);
  v35 = (_OWORD *)(v5 + 16);
  v36 = v31;
  do
  {
    v16 = *(v34 - 1);
    v37 = *v34;
    *(v35 - 1) = v16;
    *v35 = v37;
    v34 += 2;
    v35 += 2;
    v36 -= 16;
  }
  while (v36);
  if (v30 != v31)
    goto LABEL_36;
  return v16;
}

uint64_t sub_2231C1D58@<X0>(_WORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_2231C1FA4(&v12);
  v13 = v12;
  if (v12)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v12;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21890;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v14 = v2;
  v12 = 0;
  sub_22449BE50((uint64_t)a1, &v13, 0);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  a1[36] = v6 & 0xFF00 | v5;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v11 = sub_224485C9C(result);
    return MEMORY[0x227684CE8](v11, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231C1E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C1E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C1EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C1EC0(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C1EFC()
{
  return 4;
}

uint64_t sub_2231C1F04(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_2231C1F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 64, 2, a1 + 72, 4);
}

uint64_t sub_2231C1F28(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2231C1FA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  _OWORD v5[2];
  _QWORD v6[6];

  v6[5] = &off_24EC217B0;
  sub_224498DEC((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_24EC217F8;
  *(_OWORD *)(v2 + 8) = v5[0];
  *(_OWORD *)(v2 + 20) = *(_OWORD *)((char *)v5 + 12);
  sub_2244E32B8((__n128 *)(v2 + 40), (__n128 *)v6);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)&v6[3];
  *a1 = v2;
  return sub_224485C9C((uint64_t)v4);
}

void sub_2231C2044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_224485C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C2074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224485C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231C2088(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224485C9C(v2);
    MEMORY[0x227684CE8](v3, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_2231C20D0()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C20E4()
{
  return 4;
}

__int128 *sub_2231C20F0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557896B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557896B0))
  {
    v2 = sub_2231C21C8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_255789698, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2557896A8 = *((_QWORD *)v2 + 2);
      xmmword_255789698 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789698, &dword_22314D000);
    __cxa_guard_release(&qword_2557896B0);
  }
  if (byte_2557896AF >= 0)
    return &xmmword_255789698;
  else
    return (__int128 *)xmmword_255789698;
}

void sub_2231C21B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557896B0);
  _Unwind_Resume(a1);
}

__int128 *sub_2231C21C8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557896D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557896D0))
    return &xmmword_2557896B8;
  v2 = sub_2231C22A4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_2557896B8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2557896C8 = v2->__r_.__value_.__r.__words[2];
    xmmword_2557896B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557896B8, &dword_22314D000);
  __cxa_guard_release(&qword_2557896D0);
  return &xmmword_2557896B8;
}

void sub_2231C228C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557896D0);
  _Unwind_Resume(a1);
}

std::string *sub_2231C22A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557896F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557896F0))
    return &stru_2557896D8;
  sub_2231C24BC((uint64_t)__p);
  sub_2231C2394((char *)__p, &stru_2557896D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557896D8, &dword_22314D000);
  __cxa_guard_release(&qword_2557896F0);
  return &stru_2557896D8;
}

void sub_2231C2354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2557896F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2557896F0);
  _Unwind_Resume(a1);
}

void sub_2231C2394(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231C26A0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2231C2490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2231C24BC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255789730);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255789730))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray32f>]", qword_255789718);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789718, &dword_22314D000);
    __cxa_guard_release(&qword_255789730);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789750);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789750))
  {
    v5 = sub_2231A38CC(qword_255789718, "<", 0);
    sub_2231A37C8(qword_255789718, 0, v5, qword_255789738);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789738, &dword_22314D000);
    __cxa_guard_release(&qword_255789750);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255789770);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255789770))
  {
    sub_224573040((uint64_t)qword_255789738, (uint64_t)&xmmword_255789758);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789758, &dword_22314D000);
    __cxa_guard_release(&qword_255789770);
  }
  if (byte_25578976F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789758, *((unint64_t *)&xmmword_255789758 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789758;
    *(_QWORD *)(a1 + 16) = unk_255789768;
  }
}

void sub_2231C2658(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789770);
  _Unwind_Resume(a1);
}

void sub_2231C2670(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789750);
  _Unwind_Resume(a1);
}

void sub_2231C2688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789730);
  _Unwind_Resume(a1);
}

std::string *sub_2231C26A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789710);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789710))
    return &stru_2557896F8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_2557896F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557896F8, &dword_22314D000);
  __cxa_guard_release(&qword_255789710);
  return &stru_2557896F8;
}

void sub_2231C2758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789710);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789710);
  _Unwind_Resume(a1);
}

void sub_2231C279C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C27C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_224485C9C(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2231C27F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2231C2864(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C28D0()
{
  return 3;
}

uint64_t sub_2231C28D8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231C28E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_2231C28FC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231C2980@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  sub_2231A4A20(a1, &v10);
  v11 = v10;
  if (v10)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v10;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20470;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v12 = v3;
  v10 = 0;
  sub_2231BFB38(a2, &v11);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    v9 = sub_224497414(result);
    return MEMORY[0x227684CE8](v9, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_2231C2A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A4B20((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C2A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A4B20((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C2A8C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  v5 = 4 * *(_DWORD *)(result + 56);
  if (v4 != *(_DWORD *)(a2 + 52) || v4 != v5)
  {
    v21 = (4 * *(_DWORD *)(result + 56));
    return sub_2231C2C90(result, a2, (unsigned int *)&v21);
  }
  v7 = *(unsigned int *)(result + 60) * (unint64_t)v5;
  v8 = *(const void **)(result + 24);
  if (*(_BYTE *)(result + 72))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(result + 8);
    v11 = *(std::__shared_weak_count **)(result + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v10 + 88))(v10, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(const void **)(v3 + 24);
  }
  if (v7)
  {
    if (!v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_33:
        abort();
    }
  }
  v15 = *(void **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v15)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(std::__shared_weak_count **)(a2 + 16);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v16 + 88))(v16, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    v15 = *(void **)(a2 + 24);
  }
  if (v7 && !v15)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_33;
    }
    return (uint64_t)memmove(v15, v8, 2 * v7);
  }
  if (v7)
    return (uint64_t)memmove(v15, v8, 2 * v7);
  return result;
}

uint64_t sub_2231C2C90(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_45;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_45;
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (*(_BYTE *)(a1 + 73))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v27, v6, 0);
        v15 = *(_QWORD *)(a2 + 8);
        v16 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v16)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
LABEL_45:
      if (*(_BYTE *)(a1 + 73))
        goto LABEL_14;
    }
  }
  v27 = 0;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
  {
LABEL_15:
    if (!v15)
      goto LABEL_35;
    goto LABEL_31;
  }
LABEL_19:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v15)
      goto LABEL_35;
LABEL_26:
    v15 = *(_QWORD *)(a2 + 8);
    v20 = *(std::__shared_weak_count **)(a2 + 16);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (!*(_BYTE *)(a2 + 73))
          goto LABEL_35;
LABEL_32:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 96))(&v26, v15, 1);
        if (!*(_DWORD *)(a1 + 32))
          goto LABEL_39;
        goto LABEL_36;
      }
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  if (v15)
    goto LABEL_26;
LABEL_35:
  v26 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_39;
LABEL_36:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_2231C2F30(a3, a1, a2);
LABEL_39:
  v24 = v26;
  v26 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231C2ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_2231C2F30(unsigned int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  _QWORD v32[6];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v10 = (uint64_t *)result;
    v26 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 48);
    v12 = *(unsigned int *)(a3 + 48);
    v27 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
    v25 = 0;
    v28 = v3 - 1;
    v29 = v11 | (v12 << 32);
    v30 = v5 - 1;
    v31 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 52) << 32);
    v13 = *(char **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v13)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v14 + 88))(v14, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v13 = *(char **)(a2 + 24);
    }
    v19 = *(char **)(a3 + 24);
    if (*(_BYTE *)(a3 + 72) && v19)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v21 = *(std::__shared_weak_count **)(a3 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 - 1, v22));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v20 + 88))(v20, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v19 = *(char **)(a3 + 24);
    }
    v32[2] = 0;
    v32[3] = 0;
    v32[0] = 0;
    v32[1] = 1;
    v32[4] = 1;
    v32[5] = 0;
    return sub_2231C30DC((unsigned int *)&v25, (uint64_t)v32, v10, v13, v19);
  }
  return result;
}

unsigned int *sub_2231C30DC(unsigned int *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = __dst;
  v6 = __src;
  v9 = result[6];
  v10 = result[7];
  v11 = result[3] | (unint64_t)(v9 << 32);
  v12 = result[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = __src;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = __dst;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  if (result[8])
  {
    v13 = result;
    v14 = 0;
    do
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v15 = *a3;
      v16 = v5;
      v17 = *a3;
      if (!v6)
      {
        v16 = v5;
        v17 = *a3;
        if (v15)
        {
          result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_23;
          v17 = *a3;
          v16 = *(void **)(a2 + 24);
        }
      }
      if (!v16)
      {
        if (v17)
        {
          result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_23;
        }
      }
      if (v15)
        result = (unsigned int *)memmove(v16, v6, 2 * v15);
      v6 += 2 * v13[9];
      v5 += 2 * v13[10];
    }
    while (++v14 < v13[8]);
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v18 = *a3;
  v19 = *a3;
  if (!v6 && v18)
  {
    result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      goto LABEL_23;
    v19 = *a3;
    v5 = *(char **)(a2 + 24);
  }
  if (!v5)
  {
    if (v19)
    {
      result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_23:
        abort();
    }
  }
  if (v18)
    return (unsigned int *)memmove(v5, v6, 2 * v18);
  return result;
}

uint64_t sub_2231C32E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231C33F0(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231C33BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231C33F0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_2231C3528(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_2231C34F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231C3514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C3528@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_2231C3640(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231C35AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_2231C35D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD **sub_2231C35FC(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22412407C(v2);
    MEMORY[0x227684CE8](v3, 0x10F3C4035895BD5);
  }
  return a1;
}

_QWORD *sub_2231C3640(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t (**v9)();
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  v9 = &off_24EC219D8;
  sub_2231C3864(a2, (uint64_t)&v10);
  sub_2231C3728(a1, (uint64_t)&v9, a3);
  v9 = &off_24EC219D8;
  nullsub_30(&v12);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(&v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_2231C3700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C3714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231C3728(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  __int128 v7;

  v6 = sub_224122F48(a1);
  *v6 = &off_24EC21AC8;
  v6[1] = &off_24EC219D8;
  *((_OWORD *)v6 + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)v6 + 46) = *(_OWORD *)(a2 + 38);
  *((_OWORD *)v6 + 2) = v7;
  sub_2231AB0FC((uint64_t)(v6 + 8), a3);
  *a1 = &off_24EC21A48;
  return a1;
}

void sub_2231C37B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v6;

  *(_QWORD *)(v1 + 8) = v3;
  nullsub_30(v4);
  v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6)
    sub_2245746AC(v6);
  nullsub_30(v2);
  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C37EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC219D8;
  nullsub_30(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231C3864(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2244E0B74((uint64_t)&v18, 2, a1 + 32, 2, a1 + 40, 2);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 3;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_30(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2231C39AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C39C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC219D8;
  nullsub_30(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C3A3C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2231C3A44(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_2231C3A4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_2231C3A60(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2231C3ADC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21AC8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  a1[1] = &off_24EC219D8;
  nullsub_30(a1 + 4);
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1 + 1);
  return nullsub_30(a1);
}

void sub_2231C3B6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21AC8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  a1[1] = &off_24EC219D8;
  nullsub_30(a1 + 4);
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1 + 1);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C3C10(uint64_t a1)
{
  return a1 + 64;
}

BOOL sub_2231C3C18(uint64_t a1, void *lpsrc)
{
  _QWORD *v4;
  _BOOL8 v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC21A88, 0);
  if (!v4)
    return 0;
  if ((void *)a1 != lpsrc)
  {
    if (*(_QWORD *)(a1 + 48) == v4[6] && *(_DWORD *)(a1 + 56) == *((_DWORD *)v4 + 14))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_DWORD *)(a1 + 40);
      v7 = v4[4];
      v8 = *((_DWORD *)v4 + 10);
      v5 = sub_2244E0C38(&v9, &v7);
      nullsub_30(&v7);
      nullsub_30(&v9);
      return v5;
    }
    return 0;
  }
  return 1;
}

void sub_2231C3CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  nullsub_30(&a9);
  nullsub_30(&a11);
  _Unwind_Resume(a1);
}

void sub_2231C3D18(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = sub_2231C5640();
  sub_2231C3DCC(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2231C3DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231C3DCC(uint64_t a1)
{
  unsigned __int8 v2;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_2557898B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2557898B0))
  {
    v4 = sub_2231C4B0C();
    size = v4->__r_.__value_.__l.__size_;
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    }
    else
    {
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
      v6 = size;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_255789898, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_2557898A8 = *(_QWORD *)(v9 - 8);
      xmmword_255789898 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789898, &dword_22314D000);
    __cxa_guard_release(&qword_2557898B0);
  }
  return sub_2231C583C(&xmmword_255789898, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_2231C3EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_2557898B0);
  _Unwind_Resume(a1);
}

void sub_2231C3EFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557898B0);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C3F14@<X0>(_DWORD *a1@<X8>)
{
  const char *v2;
  unint64_t v3;
  size_t v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];

  sub_224139774((uint64_t)v10, 0);
  v2 = sub_2241397A0();
  v4 = v3;
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = v2;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v4;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v3;
    v6 = a1;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v6, v5, v4);
LABEL_9:
  *((_BYTE *)v6 + v4) = 0;
  a1[6] = 1;
  return nullsub_591(v10);
}

void sub_2231C3FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_591(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C3FFC@<X0>(uint64_t (***a1)()@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v5[16];

  sub_224139774((uint64_t)v5, 0);
  sub_22413ADAC(a1, 1, a2);
  return nullsub_591(v5);
}

void sub_2231C404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_591(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C4060(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21AC8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  a1[1] = &off_24EC219D8;
  nullsub_30(a1 + 4);
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1 + 1);
  return nullsub_30(a1);
}

void sub_2231C40F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21AC8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  a1[1] = &off_24EC219D8;
  nullsub_30(a1 + 4);
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1 + 1);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C4194(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2231C50DC();
  return sub_2231C4368(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 64, (uint64_t)"}");
}

uint64_t sub_2231C41EC(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2231C4594((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC21690[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC21600[v3])(v5, v2);
  return result;
}

void sub_2231C4284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC21600[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void *sub_2231C42BC@<X0>(_DWORD *a1@<X8>)
{
  void *result;
  unint64_t v3;
  const void *v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = (void *)sub_224123BDC();
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v4 = result;
  v5 = v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v5;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v3;
    v6 = a1;
    if (!v3)
      goto LABEL_9;
  }
  result = memmove(v6, v4, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  a1[6] = 0;
  return result;
}

uint64_t sub_2231C4368(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2231C4594((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC21630[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC21630[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC21690[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC21600[v16])(&p_dst, &__dst);
  return result;
}

void sub_2231C4504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C4530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C4544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C4558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C4580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C4594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t **v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_22456E6D0(v9);
  v5 = (unint64_t **)sub_22456E810(v9);
  sub_2231C4688(v5, a3);
  sub_22456E81C(v9, __p);
  sub_22456E764(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC21618[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2231C4658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231C4688(unint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  uint64_t size;
  _QWORD *v17;
  _QWORD *v18;
  std::string *p_p;
  std::string::size_type v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  std::string::size_type v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t result;
  std::string __p;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  uint64_t v49;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_19;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_19;
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(_BYTE *)(a2 + 53))
          goto LABEL_17;
        goto LABEL_19;
      }
    }
  }
  else if (!v4)
  {
    goto LABEL_19;
  }
  if (*(_BYTE *)(a2 + 53))
  {
LABEL_17:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v49, v4, 0);
    goto LABEL_20;
  }
LABEL_19:
  v49 = 0;
LABEL_20:
  v13 = sub_2231C4B0C();
  v14 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  if (v14 >= 0)
    v15 = (uint64_t)v13;
  else
    v15 = v13->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  else
    size = v13->__r_.__value_.__l.__size_;
  v17 = sub_2231813E8(a1, v15, size);
  sub_2231813E8(v17, (uint64_t)": ", 2);
  LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 48);
  v18 = sub_22446FB94(a1, (unsigned int *)&__p);
  sub_2231813E8(v18, (uint64_t)", ", 2);
  sub_2231C4DC8((unsigned int *)(a2 + 24), (unsigned int *)(a2 + 32), "x", 1uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v20 = __p.__r_.__value_.__l.__size_;
  v21 = sub_2231813E8(a1, (uint64_t)p_p, v20);
  sub_2231813E8(v21, (uint64_t)" ", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_2231813E8(a1, (uint64_t)"[row byte stride ", 17);
  v22 = (_QWORD *)std::ostream::operator<<();
  sub_2231813E8(v22, (uint64_t)", ", 2);
  if (*(_BYTE *)(a2 + 52) && *(_QWORD *)(a2 + 40))
  {
    v23 = *(_QWORD *)(a2 + 8);
    v24 = *(std::__shared_weak_count **)(a2 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v23 + 88))(v23, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
  }
  v28 = (_QWORD *)std::ostream::operator<<();
  sub_2231813E8(v28, (uint64_t)"]", 1);
  sub_2231813E8(a1, (uint64_t)", values = {\n", 13);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC1F8C8;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = *(std::__shared_weak_count **)(a2 + 16);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    v33 = *(_QWORD *)(a2 + 40);
    v34 = *(_DWORD *)(a2 + 48);
    v35 = *(_WORD *)(a2 + 52);
    do
      v36 = __ldxr(v31);
    while (__stxr(v36 + 1, v31));
  }
  else
  {
    v33 = *(_QWORD *)(a2 + 40);
    v34 = *(_DWORD *)(a2 + 48);
    v35 = *(_WORD *)(a2 + 52);
  }
  __p.__r_.__value_.__l.__size_ = v29;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v30;
  v44 = *(_QWORD *)(a2 + 24);
  v45 = *(_DWORD *)(a2 + 32);
  v46 = v33;
  v47 = v34;
  v48 = v35;
  if (v30)
  {
    v37 = (unint64_t *)&v30->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  sub_2244B7E74(a1, (uint64_t)&__p);
  nullsub_30(&v44);
  v39 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v40 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  nullsub_30(&__p);
  sub_2231813E8(a1, (uint64_t)"\n}", 2);
  result = v49;
  v49 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231C4A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20;

  sub_22319A5E0((uint64_t)&__p);
  v20 = a19;
  a19 = 0;
  if (!v20)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

std::string *sub_2231C4B0C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789790);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789790))
  {
    sub_223174DE4(v7, "ConstSharedImage");
    v2 = sub_2231A2C78();
    sub_2231C4D10((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231C4D10((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789778, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789778, &dword_22314D000);
          __cxa_guard_release(&qword_255789790);
          return &stru_255789778;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789778;
}

void sub_2231C4C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789790);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789790);
  _Unwind_Resume(a1);
}

void sub_2231C4D10(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231C4DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231C4DC8(unsigned int *a1@<X0>, unsigned int *a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int64_t v13;
  unsigned int *v14;
  std::string::size_type v15;
  const std::string::value_type *p_p;
  std::string::size_type v17;
  unsigned int *i;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void *__p;
  std::string::size_type v23;
  unsigned __int8 v24;

  v9 = a1 - a2;
  if (v9 >= -1)
    v10 = -1;
  else
    v10 = a1 - a2;
  v11 = a4 * ~v10;
  v12 = 0;
  v13 = (char *)a1 - (char *)a2;
  if (a1 != a2)
  {
    v14 = a1;
    do
    {
      sub_2231C4FB4(v14);
      if ((v24 & 0x80u) == 0)
        v15 = v24;
      else
        v15 = v23;
      if ((char)v24 < 0)
        operator delete(__p);
      v12 += v15;
      ++v14;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v12 + v11);
  if (v13 < 0)
  {
    sub_2231C4FB4(a1);
    if ((v24 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v24 & 0x80u) == 0)
      v17 = v24;
    else
      v17 = v23;
    std::string::append(a5, p_p, v17);
    if ((char)v24 < 0)
    {
      operator delete(__p);
      if ((unint64_t)(v9 + 1) < 2)
        return;
    }
    else if ((unint64_t)(v9 + 1) < 2)
    {
      return;
    }
    for (i = a1 + 1; i != a2; ++i)
    {
      std::string::append(a5, a3, a4);
      sub_2231C4FB4(i);
      if ((v24 & 0x80u) == 0)
        v19 = (const std::string::value_type *)&__p;
      else
        v19 = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v20 = v24;
      else
        v20 = v23;
      std::string::append(a5, v19, v20);
      if ((char)v24 < 0)
        operator delete(__p);
    }
  }
}

void sub_2231C4F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231C4FB4(unsigned int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC21690[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC21600[v3])(v5, v2);
  return result;
}

void sub_2231C50A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C50B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

__int128 *sub_2231C50DC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557897B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557897B0))
    return &xmmword_255789798;
  v2 = sub_2231C51B8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255789798, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2557897A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_255789798 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789798, &dword_22314D000);
  __cxa_guard_release(&qword_2557897B0);
  return &xmmword_255789798;
}

void sub_2231C51A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557897B0);
  _Unwind_Resume(a1);
}

std::string *sub_2231C51B8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557897D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557897D0))
    return &stru_2557897B8;
  sub_2231C545C((uint64_t)__p);
  sub_2231C52A8((char *)__p, &stru_2557897B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557897B8, &dword_22314D000);
  __cxa_guard_release(&qword_2557897D0);
  return &stru_2557897B8;
}

void sub_2231C5268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2557897D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2557897D0);
  _Unwind_Resume(a1);
}

void sub_2231C52A8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  std::string::size_type v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231C4B0C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2231C540C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2231C545C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2557897F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2557897F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::img::SharedImage<cv3d::kit::img::Format::Dynamic, cv3d::kit::img::DynamicBuffer, cv3d::kit::img::Mutability::Const>>]", qword_2557897D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557897D8, &dword_22314D000);
    __cxa_guard_release(&qword_2557897F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789810);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789810))
  {
    v5 = sub_2231A38CC(qword_2557897D8, "<", 0);
    sub_2231A37C8(qword_2557897D8, 0, v5, qword_2557897F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557897F8, &dword_22314D000);
    __cxa_guard_release(&qword_255789810);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255789830);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255789830))
  {
    sub_224573040((uint64_t)qword_2557897F8, (uint64_t)&xmmword_255789818);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789818, &dword_22314D000);
    __cxa_guard_release(&qword_255789830);
  }
  if (byte_25578982F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789818, *((unint64_t *)&xmmword_255789818 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789818;
    *(_QWORD *)(a1 + 16) = unk_255789828;
  }
}

void sub_2231C55F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789830);
  _Unwind_Resume(a1);
}

void sub_2231C5610(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789810);
  _Unwind_Resume(a1);
}

void sub_2231C5628(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557897F0);
  _Unwind_Resume(a1);
}

__int128 *sub_2231C5640()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789850);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789850))
    return &xmmword_255789838;
  v2 = (char *)sub_2231C571C();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_255789838, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_255789848 = *((_QWORD *)v2 + 2);
    xmmword_255789838 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789838, &dword_22314D000);
  __cxa_guard_release(&qword_255789850);
  return &xmmword_255789838;
}

void sub_2231C5704(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789850);
  _Unwind_Resume(a1);
}

void *sub_2231C571C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_255789870);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789870))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ImageData]", qword_255789858);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789858, &dword_22314D000);
    __cxa_guard_release(&qword_255789870);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_255789890);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_255789890))
    return &unk_255789878;
  sub_224573040((uint64_t)qword_255789858, (uint64_t)&unk_255789878);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_255789878, &dword_22314D000);
  __cxa_guard_release(&qword_255789890);
  return &unk_255789878;
}

void sub_2231C580C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789890);
  _Unwind_Resume(a1);
}

void sub_2231C5824(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789870);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C583C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2231C4594((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC21630[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC21690[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC21600[v11])(&p_dst, &__dst);
  return result;
}

void sub_2231C597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C5994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C59A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C59BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C59D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C59E4(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_18;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
    v16 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_23;
LABEL_19:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v16)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_2231C6760(a3, a1, a2);
LABEL_32:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231C5BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231C5C38@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_2231C5E84(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21CF0;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_22449C0E0((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_22448FD24(result);
    return MEMORY[0x227684CE8](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_2231C5D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C5F84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C5D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231C5F84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C5D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231C5F84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C5DA0(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C5DDC()
{
  return 21;
}

uint64_t sub_2231C5DE4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2231C5DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 88, 3, a1 + 100, 1);
}

uint64_t sub_2231C5E08(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2231C5E84@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_24EC21C10;
  sub_22449A054(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC21C58;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_2244E32B8((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_22448FD24((uint64_t)v5);
}

void sub_2231C5F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C40A44A61E0);
  sub_22448FD24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C5F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22448FD24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231C5F84(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22448FD24(v2);
    MEMORY[0x227684CE8](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_2231C5FCC()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C5FE0()
{
  return 21;
}

__int128 *sub_2231C5FEC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557898D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557898D0))
  {
    v2 = sub_2231C60C4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_2557898B8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2557898C8 = *((_QWORD *)v2 + 2);
      xmmword_2557898B8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557898B8, &dword_22314D000);
    __cxa_guard_release(&qword_2557898D0);
  }
  if (byte_2557898CF >= 0)
    return &xmmword_2557898B8;
  else
    return (__int128 *)xmmword_2557898B8;
}

void sub_2231C60AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557898D0);
  _Unwind_Resume(a1);
}

__int128 *sub_2231C60C4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557898F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557898F0))
    return &xmmword_2557898D8;
  v2 = sub_2231C61A0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_2557898D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2557898E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_2557898D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557898D8, &dword_22314D000);
  __cxa_guard_release(&qword_2557898F0);
  return &xmmword_2557898D8;
}

void sub_2231C6188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557898F0);
  _Unwind_Resume(a1);
}

std::string *sub_2231C61A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789910);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789910))
    return &stru_2557898F8;
  sub_2231C63B8((uint64_t)__p);
  sub_2231C6290((char *)__p, &stru_2557898F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557898F8, &dword_22314D000);
  __cxa_guard_release(&qword_255789910);
  return &stru_2557898F8;
}

void sub_2231C6250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789910);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789910);
  _Unwind_Resume(a1);
}

void sub_2231C6290(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231C659C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2231C638C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2231C63B8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255789950);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255789950))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb8u>]", qword_255789938);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789938, &dword_22314D000);
    __cxa_guard_release(&qword_255789950);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789970);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789970))
  {
    v5 = sub_2231A38CC(qword_255789938, "<", 0);
    sub_2231A37C8(qword_255789938, 0, v5, qword_255789958);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789958, &dword_22314D000);
    __cxa_guard_release(&qword_255789970);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255789990);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255789990))
  {
    sub_224573040((uint64_t)qword_255789958, (uint64_t)&xmmword_255789978);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789978, &dword_22314D000);
    __cxa_guard_release(&qword_255789990);
  }
  if (byte_25578998F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789978, *((unint64_t *)&xmmword_255789978 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789978;
    *(_QWORD *)(a1 + 16) = unk_255789988;
  }
}

void sub_2231C6554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789990);
  _Unwind_Resume(a1);
}

void sub_2231C656C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789970);
  _Unwind_Resume(a1);
}

void sub_2231C6584(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789950);
  _Unwind_Resume(a1);
}

std::string *sub_2231C659C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789930);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789930))
    return &stru_255789918;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789918);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789918, &dword_22314D000);
  __cxa_guard_release(&qword_255789930);
  return &stru_255789918;
}

void sub_2231C6654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789930);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789930);
  _Unwind_Resume(a1);
}

void sub_2231C6698(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231C66BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_22448FD24(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2231C66F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

BOOL sub_2231C6760(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int i;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  _OWORD v28[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v10 = result;
    v22 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 48);
    v12 = *(unsigned int *)(a3 + 104);
    v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 100) << 32);
    v21 = 0;
    v24 = v3 - 1;
    v25 = v11 | (v12 << 32);
    v26 = v5 - 1;
    v27 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v13 = *(unint64_t **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v13)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v14 + 88))(v14, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v13 = *(unint64_t **)(a2 + 24);
    }
    v19 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 128) && v19)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v19 = *(char **)(a3 + 32);
    }
    memset(v28, 0, sizeof(v28));
    if (v26)
    {
      for (i = 0; i < v26; ++i)
      {
        sub_2231C6900((_BOOL8)&v21, (unint64_t **)v28, v10, v13, v19);
        v13 = (unint64_t *)((char *)v13 + 2 * v27);
        v19 += HIDWORD(v27);
      }
    }
    return sub_2231C6900((_BOOL8)&v21, (unint64_t **)v28, v10, v13, v19);
  }
  return result;
}

BOOL sub_2231C6900(_BOOL8 result, unint64_t **a2, uint64_t a3, unint64_t *a4, char *a5)
{
  char *v5;
  unint64_t *v6;
  _DWORD *v8;
  int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  char v26;
  char v27;

  v5 = a5;
  v6 = a4;
  *a2 = a4;
  a2[2] = (unint64_t *)a5;
  if (*(_DWORD *)(result + 20))
  {
    v8 = (_DWORD *)result;
    v9 = 0;
    do
    {
      *a2 = v6;
      a2[2] = (unint64_t *)v5;
      v10 = v5;
      if (!v6)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if (result)
          goto LABEL_24;
        v10 = (char *)a2[2];
      }
      v11 = *v6;
      if (*v6 <= BYTE6(*v6))
        v11 = HIWORD(*v6);
      v12 = v11 >> 8;
      v13 = BYTE1(v11);
      v14 = &byte_2245C3FE4[2 * v12 + v13];
      v15 = v13 >= 0x2A;
      v16 = &byte_2245C9FE2;
      if (!v15)
        v16 = v14;
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      if (!v10)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if (result)
          goto LABEL_24;
      }
      *v10 = v17;
      v10[1] = v18;
      v10[2] = v19;
      v6 = (unint64_t *)((char *)v6 + 2 * v8[6]);
      v5 += v8[7];
    }
    while (++v9 < v8[5]);
  }
  *a2 = v6;
  a2[2] = (unint64_t *)v5;
  if (!v6)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (result)
      goto LABEL_24;
    v5 = (char *)a2[2];
  }
  v20 = *v6;
  if (*v6 <= BYTE6(*v6))
    v20 = HIWORD(*v6);
  v21 = v20 >> 8;
  v22 = BYTE1(v20);
  v23 = &byte_2245C3FE4[2 * v21 + v22];
  v15 = v22 >= 0x2A;
  v24 = &byte_2245C9FE2;
  if (!v15)
    v24 = v23;
  v25 = *v24;
  v26 = v24[1];
  v27 = v24[2];
  if (!v5)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (result)
LABEL_24:
      abort();
  }
  *v5 = v25;
  v5[1] = v26;
  v5[2] = v27;
  return result;
}

uint64_t sub_2231C6B28(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231C6C30(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231C6BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231C6C30@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_2231C6D68(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_2231C6D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231C6D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C6D68@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_2231C6E3C(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231C6DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_2231C6E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231C6E3C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t (**v9)();
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  v9 = &off_24EC219D8;
  sub_2231C6F24(a2, (uint64_t)&v10);
  sub_2231C3728(a1, (uint64_t)&v9, a3);
  v9 = &off_24EC219D8;
  nullsub_30(&v12);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(&v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_2231C6EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231C6F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_2231C6F24(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[12];
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v18 = v3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v16 = v3;
    v17 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v16 = v3;
    v17 = 0;
  }
  v8 = a1[4];
  sub_2244E0B74((uint64_t)v15, 3, (uint64_t)(a1 + 11), 3, (uint64_t)a1 + 100, 1);
  sub_2231C7084(a2, &v16, (uint64_t)v15, v8, 21);
  nullsub_30(v15);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231C7044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_30(&a10);
  sub_223167354((uint64_t)&a12);
  sub_223167354((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_2231C7068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C7084(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;

  v5 = result;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v7;
  v10 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 40) = a5;
  if (v6)
  {
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    v15 = v14;
    if ((v14 & 0xFFFFFF) <= 0x10000)
      v15 = 0;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    *(_WORD *)(v5 + 44) = v16 & 0xFF00 | v15;
    return v5;
  }
  else
  {
    *(_WORD *)(result + 44) = 0;
  }
  return result;
}

void sub_2231C717C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  nullsub_30(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    sub_2245746AC(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C719C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  char v8;
  unint64_t v9;
  BOOL v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;

  kdebug_trace();
  if (*(_DWORD *)(a4 + 32))
    _ZF = *(_DWORD *)(a4 + 36) == 0;
  else
    _ZF = 1;
  v8 = _ZF;
  v9 = *(_QWORD *)(a2 + 32);
  v63 = HIDWORD(v9);
  v64 = v9;
  if (HIDWORD(v9))
    v10 = *(_QWORD *)(a2 + 32) == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v62 = a2;
    if ((v8 & 1) != 0)
    {
      v12 = 0;
      while (1)
      {
        v13 = *(_DWORD *)(a2 + 40);
        v14 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * v12);
        v15 = *(unsigned int *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 24);
        v17 = v16 + 2 * (*(_DWORD *)(a1 + 68) * v12);
        v18 = *(_DWORD *)(a3 + 40);
        v70 = v12;
        v19 = (*(_DWORD *)(a3 + 44) * v12);
        v20 = *(_QWORD *)(a3 + 24);
        v21 = v20 + v19;
        if (!v16)
          break;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = v64;
        do
        {
          v26 = *(unsigned __int8 *)(v14 + v22);
          v27 = v26 != 255;
          v28 = v26 << 8;
          v29 = (*(_BYTE *)(v21 + v23) == 0) & v27;
          if (!(_DWORD)v29)
            v28 = 65280;
          *(_QWORD *)(v17 + 2 * v24) = v28 | 0xFE00FE00FE000000 | v29;
          v24 += v15;
          v23 += v18;
          v22 += v13;
          --v25;
        }
        while (v25);
LABEL_15:
        v12 = v70 + 1;
        a2 = v62;
        if (v70 + 1 == (_DWORD)v63)
          return kdebug_trace();
      }
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = v64;
      v72 = v20 + v19;
      v74 = v14;
      while (1)
      {
        v34 = *(unsigned __int8 *)(v14 + v30);
        v35 = v34 != 255;
        v36 = *(unsigned __int8 *)(v21 + v31) == 0;
        v37 = v34 << 8;
        v38 = v36 & v35;
        v39 = v36 && v35 ? v37 : 65280;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          break;
        }
        *(_QWORD *)(v17 + 2 * v32) = v39 | v38 | 0xFE00FE00FE000000;
        v32 += v15;
        v31 += v18;
        v30 += v13;
        --v33;
        v21 = v72;
        v14 = v74;
        if (!v33)
          goto LABEL_15;
      }
LABEL_40:
      abort();
    }
    v40 = 0;
    LOWORD(v4) = 23544;
    v60 = a4;
    do
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v75 = *(_DWORD *)(a2 + 40);
      v68 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * v40);
      v73 = *(_DWORD *)(a4 + 40);
      v67 = *(_QWORD *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 44) * v40);
      v45 = v64;
      v71 = *(unsigned int *)(a1 + 48);
      v46 = *(_QWORD *)(a1 + 24);
      v69 = v46 + 2 * (*(_DWORD *)(a1 + 68) * v40);
      v47 = *(_DWORD *)(a3 + 40);
      v61 = v40;
      v48 = *(_QWORD *)(a3 + 24) + (*(_DWORD *)(a3 + 44) * v40);
      do
      {
        v50 = 0;
        v51 = 255;
        if (!*(_BYTE *)(v48 + v42) && *(unsigned __int8 *)(v68 + v41) != 255)
        {
          _H0 = *(_WORD *)(v67 + 2 * v43);
          __asm { FCVT            S0, H0 }
          _S0 = _S0 * 10.0;
          __asm
          {
            FCVT            H0, S0
            FCVT            S1, H0
          }
          if (_S1 > 255.0)
            _S0 = v4;
          __asm { FCVT            S0, H0 }
          v50 = (int)_S0;
          v51 = *(unsigned __int8 *)(v68 + v41);
        }
        if (!v46
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_40;
        }
        v49 = (unint64_t *)(v69 + 2 * v44);
        v44 += v71;
        *v49 = v50 | ((unint64_t)v51 << 8) | 0xFE00FE00FE000000;
        v43 += v73;
        v42 += v47;
        v41 += v75;
        --v45;
      }
      while (v45);
      v40 = v61 + 1;
      a2 = v62;
      a4 = v60;
    }
    while (v61 + 1 != (_DWORD)v63);
  }
  return kdebug_trace();
}

void sub_2231C7574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C7588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C759C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C75B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  char v8;
  unint64_t v9;
  BOOL v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;

  kdebug_trace();
  if (*(_DWORD *)(a4 + 32))
    _ZF = *(_DWORD *)(a4 + 36) == 0;
  else
    _ZF = 1;
  v8 = _ZF;
  v9 = *(_QWORD *)(a2 + 32);
  v63 = HIDWORD(v9);
  v64 = v9;
  if (HIDWORD(v9))
    v10 = *(_QWORD *)(a2 + 32) == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v62 = a2;
    if ((v8 & 1) != 0)
    {
      v12 = 0;
      while (1)
      {
        v13 = *(_DWORD *)(a2 + 40);
        v14 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * v12);
        v15 = *(unsigned int *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 24);
        v17 = v16 + 2 * (*(_DWORD *)(a1 + 68) * v12);
        v18 = *(_DWORD *)(a3 + 40);
        v70 = v12;
        v19 = (*(_DWORD *)(a3 + 44) * v12);
        v20 = *(_QWORD *)(a3 + 24);
        v21 = v20 + v19;
        if (!v16)
          break;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = v64;
        do
        {
          v26 = *(unsigned __int8 *)(v14 + v22);
          v27 = v26 != 255;
          v28 = v26 << 8;
          v29 = (*(_BYTE *)(v21 + v23) == 0) & v27;
          if (!(_DWORD)v29)
            v28 = 65280;
          *(_QWORD *)(v17 + 2 * v24) = v28 | 0xFE00FE00FE000000 | v29;
          v24 += v15;
          v23 += v18;
          v22 += v13;
          --v25;
        }
        while (v25);
LABEL_15:
        v12 = v70 + 1;
        a2 = v62;
        if (v70 + 1 == (_DWORD)v63)
          return kdebug_trace();
      }
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = v64;
      v72 = v20 + v19;
      v74 = v14;
      while (1)
      {
        v34 = *(unsigned __int8 *)(v14 + v30);
        v35 = v34 != 255;
        v36 = *(unsigned __int8 *)(v21 + v31) == 0;
        v37 = v34 << 8;
        v38 = v36 & v35;
        v39 = v36 && v35 ? v37 : 65280;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          break;
        }
        *(_QWORD *)(v17 + 2 * v32) = v39 | v38 | 0xFE00FE00FE000000;
        v32 += v15;
        v31 += v18;
        v30 += v13;
        --v33;
        v21 = v72;
        v14 = v74;
        if (!v33)
          goto LABEL_15;
      }
LABEL_40:
      abort();
    }
    v40 = 0;
    LOWORD(v4) = 23544;
    v60 = a4;
    do
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v75 = *(_DWORD *)(a2 + 40);
      v68 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * v40);
      v73 = *(_DWORD *)(a4 + 40);
      v67 = *(_QWORD *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 44) * v40);
      v45 = v64;
      v71 = *(unsigned int *)(a1 + 48);
      v46 = *(_QWORD *)(a1 + 24);
      v69 = v46 + 2 * (*(_DWORD *)(a1 + 68) * v40);
      v47 = *(_DWORD *)(a3 + 40);
      v61 = v40;
      v48 = *(_QWORD *)(a3 + 24) + (*(_DWORD *)(a3 + 44) * v40);
      do
      {
        v50 = 0;
        v51 = 255;
        if (!*(_BYTE *)(v48 + v42) && *(unsigned __int8 *)(v68 + v41) != 255)
        {
          _H0 = *(_WORD *)(v67 + 2 * v43);
          __asm { FCVT            S0, H0 }
          _S0 = _S0 * 10.0;
          __asm
          {
            FCVT            H0, S0
            FCVT            S1, H0
          }
          if (_S1 > 255.0)
            _S0 = v4;
          __asm { FCVT            S0, H0 }
          v50 = (int)_S0;
          v51 = *(unsigned __int8 *)(v68 + v41);
        }
        if (!v46
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_40;
        }
        v49 = (unint64_t *)(v69 + 2 * v44);
        v44 += v71;
        *v49 = v50 | ((unint64_t)v51 << 8) | 0xFE00FE00FE000000;
        v43 += v73;
        v42 += v47;
        v41 += v75;
        --v45;
      }
      while (v45);
      v40 = v61 + 1;
      a2 = v62;
      a4 = v60;
    }
    while (v61 + 1 != (_DWORD)v63);
  }
  return kdebug_trace();
}

void sub_2231C7988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C79B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231C79C4(uint64_t a1, char a2)
{
  BOOL v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  BOOL v31;
  _BYTE v33[16];
  std::__shared_weak_count *v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  _BYTE v37[16];
  std::__shared_weak_count *v38;
  char v39;

  sub_223C3B2A0(a1, (uint64_t)v33);
  if (v35)
    v4 = (a2 & 3) == 0;
  else
    v4 = 1;
  if (v4)
    v5 = 0;
  else
    v5 = 3;
  if (v35)
  {
    v6 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    nullsub_30(v33);
  }
  sub_223C3B2A0(a1, (uint64_t)v37);
  if (v39)
  {
    v5 |= a2 & 0x20;
LABEL_29:
    v13 = v38;
    if (v38)
    {
      v14 = (unint64_t *)&v38->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    nullsub_30(v37);
    goto LABEL_35;
  }
  sub_223C3B430(a1, (uint64_t)v33);
  if (v36)
    v9 = (a2 & 0x20) == 0;
  else
    v9 = 1;
  if (!v9)
    v5 |= 0x20u;
  if (v36)
  {
    v10 = v34;
    if (v34)
    {
      v11 = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    nullsub_30(v33);
  }
  if (v39)
    goto LABEL_29;
LABEL_35:
  sub_223C3B508(a1, (uint64_t)v33);
  v16 = v36;
  if (v36)
  {
    v17 = v34;
    if (v34)
    {
      v18 = (unint64_t *)&v34->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    nullsub_30(v33);
  }
  sub_223C38034(a1, (uint64_t)v33);
  v20 = v35;
  if (v35)
  {
    v21 = v34;
    if (v34)
    {
      v22 = (unint64_t *)&v34->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    nullsub_30(v33);
  }
  sub_223C381C4(a1, (uint64_t)v33);
  v24 = v35;
  if (v35)
  {
    v25 = v34;
    if (v34)
    {
      v26 = (unint64_t *)&v34->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    nullsub_30(v33);
  }
  if (v16)
    v28 = (a2 & 4) == 0;
  else
    v28 = 1;
  v29 = v5 | 4;
  if (v28)
    v29 = v5;
  if (v20)
    v30 = (a2 & 8) == 0;
  else
    v30 = 1;
  if (!v30)
    v29 |= 8u;
  if (v24)
    v31 = (a2 & 0x10) == 0;
  else
    v31 = 1;
  if (v31)
    return v29;
  else
    return v29 | 0x10;
}

void sub_2231C7C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_2231BD90C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231C7C7C(uint64_t a1@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X8>)
{
  BOOL v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  float *v91;
  int v92;
  char *v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  __int128 *p_p;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int32x2_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  __n128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::chrono::steady_clock::time_point v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  std::chrono::steady_clock::time_point v138;
  char v139;
  unint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  __n128 *v147;
  __int128 *v148;
  size_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  __n128 v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  int v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  float32x4_t *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  float16x4_t *v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  float32x4_t *v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  __int128 v270;
  int v271;
  __int128 v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  __int128 v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  __int128 v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  int v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  int v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  __int128 v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  __n128 v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *size;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  int v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  uint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  float *v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  __int16 v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  __int16 v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  __int16 v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  __int128 v395;
  unint64_t *v396;
  unint64_t v397;
  __int16 v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  std::chrono::steady_clock::time_point v437;
  char v438;
  unint64_t v439;
  _BYTE *v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  __n128 *v446;
  _BYTE *v447;
  size_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  uint64_t v461;
  int32x2_t *v462;
  uint64_t v463;
  char v464;
  std::chrono::steady_clock::time_point v465;
  unsigned int v467;
  uint64_t v468;
  uint64_t (**v469)();
  __int128 v470;
  __int128 v471;
  uint64_t v472;
  __int16 v473;
  uint64_t (**v474)();
  uint64_t v475;
  std::__shared_weak_count *v476;
  uint64_t (**v477)();
  uint64_t v478;
  std::__shared_weak_count *v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int16 v483;
  uint64_t (**v484)();
  uint64_t v485;
  std::__shared_weak_count *v486;
  __int128 v487;
  uint64_t v488;
  __int16 v489;
  uint64_t (**v490)();
  uint64_t v491;
  std::__shared_weak_count *v492;
  __int128 v493;
  uint64_t v494;
  __int16 v495;
  uint64_t (**v496)();
  __int128 v497;
  _BYTE v498[26];
  _BYTE v499[50];
  _BYTE v500[50];
  char v501;
  char v502;
  char v503;
  char v504;
  char v505;
  char v506;
  unsigned __int8 v507;
  char v508;
  __int128 __p;
  __int128 v510;
  int v511;
  int32x2_t v512;
  uint64_t v513;
  std::__shared_weak_count *v514;
  __int128 v515;
  uint64_t v516;
  uint64_t v517;
  std::__shared_weak_count *v518;
  __int128 v519;
  uint64_t v520;
  __int16 v521;
  __int128 v522;
  __n128 v523;
  _WORD v524[4];
  std::string v525;
  __int128 v526;
  _OWORD v527[2];
  _BYTE v528[56];
  __int128 v529;
  __int128 v530;
  _QWORD v531[10];
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  _BYTE v538[40];
  __int128 v539;
  __int128 v540;
  __int16 v541;
  char v542;
  _QWORD v543[5];

  v543[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v465.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v467 = sub_2231C79C4(a1, a7);
  sub_2231D13C0(a8, a1 + 1240, v467);
  v468 = a8;
  *(_QWORD *)(a8 + 8) = *(_QWORD *)(a1 + 1232);
  sub_223C3B2A0(a1, (uint64_t)v538);
  if ((_BYTE)v540)
  {
    v15 = 1;
  }
  else
  {
    sub_223C3B508(a1, (uint64_t)v528);
    v16 = BYTE8(v530);
    v15 = BYTE8(v530) != 0;
    if (BYTE8(v530))
    {
      v17 = *(std::__shared_weak_count **)&v528[16];
      if (*(_QWORD *)&v528[16])
      {
        v18 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      nullsub_30(v528);
    }
    if (!(_BYTE)v540)
    {
      if (v16)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v20 = *(std::__shared_weak_count **)&v538[16];
  if (!*(_QWORD *)&v538[16])
    goto LABEL_15;
  v21 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    nullsub_30(v538);
    if (v15)
      goto LABEL_17;
  }
  else
  {
LABEL_15:
    nullsub_30(v538);
    if (v15)
      goto LABEL_17;
  }
LABEL_16:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 100, (uint64_t)"(frame.Depth().has_value() || frame.Color().has_value())", 56, (uint64_t)"Should provide valid depth or color", 35, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_17:
  v23 = *(NSObject **)(a1 + 1328);
  v522 = 0uLL;
  sub_2231CBACC(&v516);
  if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36))
  {
    v25 = *(_QWORD *)(a3 + 8);
    v24 = *(std::__shared_weak_count **)(a3 + 16);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    v28 = v518;
    v517 = v25;
    v518 = v24;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v519 = *(_OWORD *)(a3 + 24);
    v520 = *(_QWORD *)(a3 + 40);
    v521 = *(_WORD *)(a3 + 48);
  }
  else
  {
    sub_2231F761C(v23, (const void **)v528);
    sub_2231F8060(*(uint64_t *)v528, v538);
    v31 = *(std::__shared_weak_count **)&v528[8];
    if (*(_QWORD *)&v528[8])
    {
      v32 = (unint64_t *)(*(_QWORD *)&v528[8] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *(_OWORD *)v538;
    *(_QWORD *)v538 = 0;
    *(_QWORD *)&v538[8] = 0;
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v522 + 1);
    v522 = v34;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(std::__shared_weak_count **)&v538[8];
    if (*(_QWORD *)&v538[8])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v538[8] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v522;
    v528[0] = 0;
    sub_2231CBB84(v522, (uint64_t)v528);
    sub_2231CBC74((uint64_t)&v516, v41);
  }
  *(_QWORD *)v528 = "cv3d.recon.";
  *(_QWORD *)&v528[8] = 11;
  *(_QWORD *)&v528[16] = "Keyframing.KeyframeBundle";
  *(_QWORD *)&v528[24] = 25;
  sub_2231A9820((uint64_t)v528, (uint64_t)&v528[32], 0, 0, (std::string *)v538);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v42 = sub_2241471F8();
    v43 = sub_2241486EC((uint64_t)v42);
    if (!sub_2241053B4(v43))
    {
      v44 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44))
      {
        memset(v528, 0, 32);
        *(_DWORD *)&v528[32] = 728325608;
        kdebug_trace();
        sub_2231CBD64((double *)&qword_255788F20, v44, (uint64_t)&v516, "invalid_mask");
        kdebug_trace();
      }
    }
  }
  memset(v528, 0, 32);
  *(_DWORD *)&v528[32] = 728325624;
  kdebug_trace();
  v45 = v538[23];
  if (v538[23] < 0)
    v45 = *(_QWORD *)&v538[8];
  if (v45 >= 0x11)
  {
    v46 = v538;
    if (v538[23] < 0)
      v46 = *(_BYTE **)v538;
    v47 = *(_QWORD *)v46;
    v48 = *((_QWORD *)v46 + 1);
    v49 = v46[16];
    if (v47 == 0x6365722E64337663 && v48 == 0x73746174532E6E6FLL && v49 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((v538[23] & 0x80000000) != 0)
    operator delete(*(void **)v538);
  *(int32x2_t *)((char *)&v515 + 4) = vdup_n_s32(0xC77FE000);
  LODWORD(v515) = 0;
  HIDWORD(v515) = -947920896;
  sub_223C3B2A0(a1, (uint64_t)v528);
  v52 = v529;
  if ((v467 & 1) != 0 && (_BYTE)v529)
  {
    sub_2231F761C(v23, (const void **)v538);
    sub_2231F8060(*(uint64_t *)v538, &v513);
    v53 = *(std::__shared_weak_count **)&v538[8];
    if (!*(_QWORD *)&v538[8])
      goto LABEL_70;
    v54 = (unint64_t *)(*(_QWORD *)&v538[8] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      v464 = a6;
      v56 = *(_QWORD *)(a1 + 216);
      if (v56)
      {
LABEL_71:
        if (*MEMORY[0x24BE05F58] <= 0x7641AE7uLL)
          v57 = 20.0;
        else
          v57 = 0.0;
        v58 = v513;
        v60 = *(_QWORD *)(v56 + 64);
        v59 = *(std::__shared_weak_count **)(v56 + 72);
        if (v59)
        {
          v61 = (unint64_t *)&v59->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
          do
            v63 = __ldaxr(v61);
          while (__stlxr(v63 - 1, v61));
          if (v63)
          {
            if (!v60)
              goto LABEL_99;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
            if (!v60)
              goto LABEL_99;
          }
          v60 = *(_QWORD *)(v56 + 64);
          v64 = *(std::__shared_weak_count **)(v56 + 72);
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
            do
              v67 = __ldaxr(v65);
            while (__stlxr(v67 - 1, v65));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        else if (!v60)
        {
          goto LABEL_99;
        }
        if (*(_BYTE *)(v56 + 137))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v60 + 96))(v538, v60, 0);
          v68 = *(_QWORD *)(v58 + 8);
          v69 = *(std::__shared_weak_count **)(v58 + 16);
          if (!v69)
            goto LABEL_104;
          goto LABEL_100;
        }
LABEL_99:
        *(_QWORD *)v538 = 0;
        v68 = *(_QWORD *)(v58 + 8);
        v69 = *(std::__shared_weak_count **)(v58 + 16);
        if (!v69)
          goto LABEL_104;
LABEL_100:
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
        do
          v72 = __ldaxr(v70);
        while (__stlxr(v72 - 1, v70));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
          if (!v68)
            goto LABEL_109;
          goto LABEL_105;
        }
LABEL_104:
        if (!v68)
          goto LABEL_109;
LABEL_105:
        if (*(_BYTE *)(v58 + 81))
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v58 + 8) + 96))(&__p, *(_QWORD *)(v58 + 8), 1);
          v73 = *(_DWORD *)(v56 + 120);
          if (!v73)
            goto LABEL_151;
          goto LABEL_110;
        }
LABEL_109:
        *(_QWORD *)&__p = 0;
        v73 = *(_DWORD *)(v56 + 120);
        if (!v73)
        {
LABEL_151:
          v99 = __p;
          *(_QWORD *)&__p = 0;
          if (v99)
            (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
          v100 = *(_QWORD *)v538;
          *(_QWORD *)v538 = 0;
          a6 = v464;
          if (v100)
            (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
          goto LABEL_155;
        }
LABEL_110:
        v74 = *(_DWORD *)(v56 + 124);
        if (v74)
        {
          v462 = a2;
          v463 = a5;
          v75 = *(unsigned int *)(v56 + 128);
          v76 = *(unsigned int *)(v56 + 132);
          v78 = *(unsigned int *)(v58 + 72);
          v77 = *(unsigned int *)(v58 + 76);
          v79 = *(float **)(v56 + 112);
          if (*(_BYTE *)(v56 + 136) && v79)
          {
            v461 = *(unsigned int *)(v56 + 132);
            v81 = *(_QWORD *)(v56 + 64);
            v80 = *(std::__shared_weak_count **)(v56 + 72);
            if (v80)
            {
              v82 = (unint64_t *)&v80->__shared_owners_;
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
              do
                v84 = __ldaxr(v82);
              while (__stlxr(v84 - 1, v82));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v81 + 88))(v81, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
            v76 = v461;
            v79 = *(float **)(v56 + 112);
          }
          v85 = *(char **)(v58 + 32);
          if (*(_BYTE *)(v58 + 80) && v85)
          {
            (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v58 + 8) + 88))(*(_QWORD *)(v58 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
            v85 = *(char **)(v58 + 32);
          }
          v86 = v73 - 1;
          v87 = 4 * v75;
          v88 = v74 - 1;
          if (v74 == 1)
          {
            a2 = v462;
          }
          else
          {
            v89 = 4 * v76;
            a2 = v462;
            if (v73 == 1)
            {
              do
              {
                if (*v79 > v57)
                  v96 = 0;
                else
                  v96 = -1;
                *v85 = v96;
                v85 += v77;
                v79 = (float *)((char *)v79 + v89);
                --v88;
              }
              while (v88);
            }
            else
            {
              v90 = 0;
              do
              {
                v91 = v79;
                v92 = v73 - 1;
                v93 = v85;
                do
                {
                  if (*v91 > v57)
                    v94 = 0;
                  else
                    v94 = -1;
                  *v93 = v94;
                  v93 += v78;
                  v91 = (float *)((char *)v91 + v87);
                  --v92;
                }
                while (v92);
                if (*v91 > v57)
                  v95 = 0;
                else
                  v95 = -1;
                *v93 = v95;
                v79 = (float *)((char *)v79 + v89);
                v85 += v77;
                ++v90;
              }
              while (v90 != v88);
            }
          }
          if (v73 != 1)
          {
            do
            {
              if (*v79 > v57)
                v97 = 0;
              else
                v97 = -1;
              *v85 = v97;
              v85 += v78;
              v79 = (float *)((char *)v79 + v87);
              --v86;
            }
            while (v86);
          }
          if (*v79 > v57)
            v98 = 0;
          else
            v98 = -1;
          *v85 = v98;
          a5 = v463;
        }
        goto LABEL_151;
      }
    }
    else
    {
LABEL_70:
      v464 = a6;
      v56 = *(_QWORD *)(a1 + 216);
      if (v56)
        goto LABEL_71;
    }
    *(_DWORD *)v538 = 255;
    sub_2231CBEAC(v513, (uint64_t)v538);
    a6 = v464;
LABEL_155:
    *(_QWORD *)v538 = "cv3d.recon.";
    *(_QWORD *)&v538[8] = 11;
    *(_QWORD *)&v538[16] = "Keyframing.KeyframeBundle";
    *(_QWORD *)&v538[24] = 25;
    sub_2231A9820((uint64_t)v538, (uint64_t)&v538[32], 0, 0, (std::string *)&__p);
    sub_224569D7C();
    if (sub_224569C6C())
    {
      v101 = sub_2241471F8();
      v102 = sub_2241486EC((uint64_t)v101);
      if (!sub_2241053B4(v102))
      {
        v103 = sub_2241472E0();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
        {
          memset(v538, 0, 32);
          *(_DWORD *)&v538[32] = 728325608;
          kdebug_trace();
          sub_2231CBF9C((double *)&qword_255788F20, v103, v513, "active_depth_mask");
          kdebug_trace();
        }
      }
    }
    memset(v538, 0, 32);
    *(_DWORD *)&v538[32] = 728325624;
    kdebug_trace();
    v104 = BYTE7(v510);
    if (SBYTE7(v510) < 0)
      v104 = *((_QWORD *)&__p + 1);
    if (v104 >= 0x11)
    {
      p_p = &__p;
      if (SBYTE7(v510) < 0)
        p_p = (__int128 *)__p;
      v106 = *(_QWORD *)p_p;
      v107 = *((_QWORD *)p_p + 1);
      v108 = *((unsigned __int8 *)p_p + 16);
      if (v106 == 0x6365722E64337663 && v107 == 0x73746174532E6E6FLL && v108 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if (SBYTE7(v510) < 0)
      operator delete((void *)__p);
    v111 = (int32x2_t)0x7F80000000000000;
    if (a2[1].i8[0])
      v111 = *a2;
    v512 = v111;
    sub_22320B0C8(v468, (uint64_t)v538);
    sub_2231D4F04((uint64_t)&__p, (uint64_t)v538);
    v112 = *(std::__shared_weak_count **)&v538[16];
    if (*(_QWORD *)&v538[16])
    {
      v113 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    nullsub_30(v538);
    sub_2231CC0E4((uint64_t)v528, (uint64_t)&__p, v115);
    v116 = (std::__shared_weak_count *)v510;
    if ((_QWORD)v510)
    {
      v117 = (unint64_t *)(v510 + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    nullsub_30(&__p);
    v119.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_223C3B368(a1, (uint64_t)v538);
    if ((_BYTE)v540)
    {
      v120 = *(std::__shared_weak_count **)&v538[16];
      if (*(_QWORD *)&v538[16])
      {
        v121 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      nullsub_30(v538);
    }
    else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 148, (uint64_t)"frame.Confidence()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_22320BBFC(v468, (uint64_t)v538);
    sub_2231D4F04((uint64_t)&__p, (uint64_t)v538);
    v123 = *(std::__shared_weak_count **)&v538[16];
    if (*(_QWORD *)&v538[16])
    {
      v124 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    nullsub_30(v538);
    *(_QWORD *)v500 = &off_24EC21420;
    sub_2231FBAA0(v513, (uint64_t *)&v500[8]);
    sub_223C3B368(a1, (uint64_t)v538);
    sub_223C0391C((uint64_t)&__p, (uint64_t)&v516, (uint64_t)v500, (uint64_t)&v515, (uint64_t)v528, (uint64_t)v538, &v512);
    if ((_BYTE)v540)
    {
      v126 = *(std::__shared_weak_count **)&v538[16];
      if (*(_QWORD *)&v538[16])
      {
        v127 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      nullsub_30(v538);
    }
    v129 = *(std::__shared_weak_count **)&v500[16];
    if (*(_QWORD *)&v500[16])
    {
      v130 = (unint64_t *)(*(_QWORD *)&v500[16] + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    nullsub_30(v500);
    v132 = (std::__shared_weak_count *)v510;
    if ((_QWORD)v510)
    {
      v133 = (unint64_t *)(v510 + 8);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    nullsub_30(&__p);
    *(_OWORD *)(v468 + 128) = v515;
    *(_QWORD *)v538 = "cv3d.recon.";
    *(_QWORD *)&v538[8] = 11;
    *(_QWORD *)&v538[16] = "Stats.Keyframing.KeyframeBundle_time";
    *(_QWORD *)&v538[24] = 36;
    sub_2231A9820((uint64_t)v538, (uint64_t)&v538[32], 0, 0, (std::string *)&__p);
    sub_224569D7C();
    if (sub_224569C6C()
      && (v135 = sub_2241471F8(), v136 = sub_2241486EC((uint64_t)v135), !sub_2241053B4(v136))
      && (v137 = sub_2241472E0(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v137 + 24))(v137)))
    {
      memset(v538, 0, 32);
      *(_DWORD *)&v538[32] = 728325608;
      kdebug_trace();
      v138.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v119.__d_.__rep_;
      *(float *)v500 = (float)v138.__d_.__rep_ / 1000000.0;
      sub_2231CC49C((double *)&qword_255788F20, v137, (float *)v500, "depth_to_depth_confidence (ms)");
      kdebug_trace();
      v139 = 1;
    }
    else
    {
      v139 = 0;
      v138.__d_.__rep_ = 0;
    }
    memset(v538, 0, 32);
    *(_DWORD *)&v538[32] = 728325624;
    kdebug_trace();
    v140 = BYTE7(v510);
    if (SBYTE7(v510) < 0)
      v140 = *((_QWORD *)&__p + 1);
    if (v140 >= 0x11)
    {
      v141 = &__p;
      if (SBYTE7(v510) < 0)
        v141 = (__int128 *)__p;
      v142 = *(_QWORD *)v141;
      v143 = *((_QWORD *)v141 + 1);
      v144 = *((unsigned __int8 *)v141 + 16);
      if (v142 == 0x6365722E64337663 && v143 == 0x73746174532E6E6FLL && v144 == 46)
      {
        v147 = sub_223187510();
        if ((SBYTE7(v510) & 0x80u) == 0)
          v148 = &__p;
        else
          v148 = (__int128 *)__p;
        if ((SBYTE7(v510) & 0x80u) == 0)
          v149 = BYTE7(v510);
        else
          v149 = *((_QWORD *)&__p + 1);
        if ((v139 & 1) == 0)
          v138.__d_.__rep_ = v138.__d_.__rep_ - v119.__d_.__rep_ + std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)v500 = (float)v138.__d_.__rep_ / 1000000.0;
        sub_2231897A8((uint64_t *)v147, v148, v149, (float *)v500, (uint64_t)"depth_to_depth_confidence (ms)", 30);
      }
    }
    kdebug_trace();
    if (SBYTE7(v510) < 0)
      operator delete((void *)__p);
    *(_QWORD *)v538 = "cv3d.recon.";
    *(_QWORD *)&v538[8] = 11;
    *(_QWORD *)&v538[16] = "Keyframing.KeyframeBundle";
    *(_QWORD *)&v538[24] = 25;
    sub_2231A9820((uint64_t)v538, (uint64_t)&v538[32], 0, 0, (std::string *)v499);
    sub_224569D7C();
    if (sub_224569C6C())
    {
      v150 = sub_2241471F8();
      v151 = sub_2241486EC((uint64_t)v150);
      if (!sub_2241053B4(v151))
      {
        v152 = sub_2241472E0();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v152 + 24))(v152))
        {
          memset(v500, 0, 32);
          *(_DWORD *)&v500[32] = 728325608;
          kdebug_trace();
          sub_22320B0C8(v468, (uint64_t)v538);
          sub_2231D4F04((uint64_t)&__p, (uint64_t)v538);
          v153 = *(std::__shared_weak_count **)&v538[16];
          if (*(_QWORD *)&v538[16])
          {
            v154 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          nullsub_30(v538);
          sub_2231CC5E4((double *)&qword_255788F20, v152, (uint64_t)&__p, "masked_depth");
          v156 = (std::__shared_weak_count *)v510;
          if ((_QWORD)v510)
          {
            v157 = (unint64_t *)(v510 + 8);
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          nullsub_30(&__p);
          kdebug_trace();
        }
      }
    }
    memset(v500, 0, 32);
    *(_DWORD *)&v500[32] = 728325624;
    kdebug_trace();
    v159 = v499[23];
    if (v499[23] < 0)
      v159 = *(_QWORD *)&v499[8];
    if (v159 >= 0x11)
    {
      v160 = v499;
      if (v499[23] < 0)
        v160 = *(_BYTE **)v499;
      v161 = *(_QWORD *)v160;
      v162 = *((_QWORD *)v160 + 1);
      v163 = v160[16];
      if (v161 == 0x6365722E64337663 && v162 == 0x73746174532E6E6FLL && v163 == 46)
      {
        sub_223187510();
        sub_22320B0C8(v468, (uint64_t)v538);
        sub_2231D4F04((uint64_t)&__p, (uint64_t)v538);
        v217 = *(std::__shared_weak_count **)&v538[16];
        if (*(_QWORD *)&v538[16])
        {
          v218 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
          do
            v219 = __ldaxr(v218);
          while (__stlxr(v219 - 1, v218));
          if (!v219)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
          }
        }
        nullsub_30(v538);
        v220 = (std::__shared_weak_count *)v510;
        if ((_QWORD)v510)
        {
          v221 = (unint64_t *)(v510 + 8);
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
          if (!v222)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v220);
          }
        }
        nullsub_30(&__p);
      }
    }
    kdebug_trace();
    if ((v499[23] & 0x80000000) != 0)
      operator delete(*(void **)v499);
    *(_QWORD *)v538 = "cv3d.recon.";
    *(_QWORD *)&v538[8] = 11;
    *(_QWORD *)&v538[16] = "Keyframing.KeyframeBundle";
    *(_QWORD *)&v538[24] = 25;
    sub_2231A9820((uint64_t)v538, (uint64_t)&v538[32], 0, 0, (std::string *)v499);
    sub_224569D7C();
    if (sub_224569C6C())
    {
      v166 = sub_2241471F8();
      v167 = sub_2241486EC((uint64_t)v166);
      if (!sub_2241053B4(v167))
      {
        v168 = sub_2241472E0();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v168 + 24))(v168))
        {
          memset(v500, 0, 32);
          *(_DWORD *)&v500[32] = 728325608;
          kdebug_trace();
          sub_22320BBFC(v468, (uint64_t)v538);
          sub_2231D4F04((uint64_t)&__p, (uint64_t)v538);
          v169 = *(std::__shared_weak_count **)&v538[16];
          if (*(_QWORD *)&v538[16])
          {
            v170 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          nullsub_30(v538);
          sub_2231CC72C((double *)&qword_255788F20, v168, (uint64_t)&__p, "masked_confidence");
          v172 = (std::__shared_weak_count *)v510;
          if ((_QWORD)v510)
          {
            v173 = (unint64_t *)(v510 + 8);
            do
              v174 = __ldaxr(v173);
            while (__stlxr(v174 - 1, v173));
            if (!v174)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v172);
            }
          }
          nullsub_30(&__p);
          kdebug_trace();
        }
      }
    }
    memset(v500, 0, 32);
    *(_DWORD *)&v500[32] = 728325624;
    kdebug_trace();
    v175 = v499[23];
    if (v499[23] < 0)
      v175 = *(_QWORD *)&v499[8];
    if (v175 >= 0x11)
    {
      v176 = v499;
      if (v499[23] < 0)
        v176 = *(_BYTE **)v499;
      v177 = *(_QWORD *)v176;
      v178 = *((_QWORD *)v176 + 1);
      v179 = v176[16];
      if (v177 == 0x6365722E64337663 && v178 == 0x73746174532E6E6FLL && v179 == 46)
      {
        sub_223187510();
        sub_22320BBFC(v468, (uint64_t)v538);
        sub_2231D4F04((uint64_t)&__p, (uint64_t)v538);
        v223 = *(std::__shared_weak_count **)&v538[16];
        if (*(_QWORD *)&v538[16])
        {
          v224 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
          do
            v225 = __ldaxr(v224);
          while (__stlxr(v225 - 1, v224));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
            std::__shared_weak_count::__release_weak(v223);
          }
        }
        nullsub_30(v538);
        v226 = (std::__shared_weak_count *)v510;
        if ((_QWORD)v510)
        {
          v227 = (unint64_t *)(v510 + 8);
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
          }
        }
        nullsub_30(&__p);
      }
    }
    kdebug_trace();
    if ((v499[23] & 0x80000000) != 0)
      operator delete(*(void **)v499);
    sub_224569D7C();
    if (sub_224569C6C())
    {
      v182 = sub_2241471F8();
      v183 = sub_2241486EC((uint64_t)v182);
      if (!sub_2241053B4(v183))
      {
        *(_QWORD *)v538 = "cv3d.recon.";
        *(_QWORD *)&v538[8] = 11;
        *(_QWORD *)&v538[16] = "Keyframing.KeyframeBundle";
        *(_QWORD *)&v538[24] = 25;
        sub_2231A9820((uint64_t)v538, (uint64_t)&v538[32], 0, 0, &v525);
        v184 = sub_2241472E0();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v184 + 24))(v184))
        {
          __p = 0u;
          v510 = 0u;
          v511 = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v184 + 24))(v184))
          {
            qmemcpy(v524, "ams", 3);
            sub_2245054E8((uint64_t)v538, (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0), 2);
            v523 = *(__n128 *)v538;
            v185 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v184 + 24))(v184))
            {
              sub_22452C3CC(&v496);
              v538[23] = 18;
              strcpy(v538, "valid_pixels_count");
              sub_224527BAC((uint64_t)v538, (CFStringRef *)v500);
              sub_2231FCFB8((uint64_t)&v496, *(const void **)v500, (uint64_t)&v515);
              v186 = *(std::__shared_weak_count **)&v500[8];
              if (*(_QWORD *)&v500[8])
              {
                v187 = (unint64_t *)(*(_QWORD *)&v500[8] + 8);
                do
                  v188 = __ldaxr(v187);
                while (__stlxr(v188 - 1, v187));
                if (!v188)
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
              }
              if ((v538[23] & 0x80000000) != 0)
                operator delete(*(void **)v538);
              v538[23] = 9;
              strcpy(v538, "depth_avg");
              sub_224527BAC((uint64_t)v538, (CFStringRef *)v500);
              sub_2231FD11C((uint64_t)&v496, *(const void **)v500, (uint64_t)&v515 + 4);
              v189 = *(std::__shared_weak_count **)&v500[8];
              if (*(_QWORD *)&v500[8])
              {
                v190 = (unint64_t *)(*(_QWORD *)&v500[8] + 8);
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                }
              }
              if ((v538[23] & 0x80000000) != 0)
                operator delete(*(void **)v538);
              v538[23] = 9;
              strcpy(v538, "depth_min");
              sub_224527BAC((uint64_t)v538, (CFStringRef *)v500);
              sub_2231FD11C((uint64_t)&v496, *(const void **)v500, (uint64_t)&v515 + 8);
              v192 = *(std::__shared_weak_count **)&v500[8];
              if (*(_QWORD *)&v500[8])
              {
                v193 = (unint64_t *)(*(_QWORD *)&v500[8] + 8);
                do
                  v194 = __ldaxr(v193);
                while (__stlxr(v194 - 1, v193));
                if (!v194)
                {
                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                  std::__shared_weak_count::__release_weak(v192);
                }
              }
              if ((v538[23] & 0x80000000) != 0)
                operator delete(*(void **)v538);
              v538[23] = 9;
              strcpy(v538, "depth_max");
              sub_224527BAC((uint64_t)v538, (CFStringRef *)v500);
              sub_2231FD11C((uint64_t)&v496, *(const void **)v500, (uint64_t)&v515 + 12);
              v195 = *(std::__shared_weak_count **)&v500[8];
              if (*(_QWORD *)&v500[8])
              {
                v196 = (unint64_t *)(*(_QWORD *)&v500[8] + 8);
                do
                  v197 = __ldaxr(v196);
                while (__stlxr(v197 - 1, v196));
                if (!v197)
                {
                  ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                  std::__shared_weak_count::__release_weak(v195);
                }
              }
              if ((v538[23] & 0x80000000) != 0)
                operator delete(*(void **)v538);
              *(_QWORD *)v500 = 0x7261506874706544;
              *(_WORD *)&v500[8] = v524[0];
              *(_WORD *)&v500[10] = LOBYTE(v524[1]);
              *(_QWORD *)&v500[12] = v543[0];
              *(_DWORD *)&v500[19] = *(_DWORD *)((char *)v543 + 7);
              *(_WORD *)&v500[23] = 267;
              v524[0] = 0;
              LOBYTE(v524[1]) = 0;
              v543[0] = 0;
              *(_DWORD *)((char *)v543 + 7) = 0;
              sub_2231AD9F0((uint64_t)&v496, (__int128 *)v500, (__int128 *)&v523, v499);
              if (v500[24] && (v500[23] & 0x80000000) != 0)
                operator delete(*(void **)v500);
              v198 = (std::__shared_weak_count *)v497;
              if ((_QWORD)v497)
              {
                v199 = (unint64_t *)(v497 + 8);
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
              v201 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 56))(v184);
              v202 = *v201;
              v203 = (std::__shared_weak_count *)v201[1];
              if (v203)
              {
                v204 = (unint64_t *)&v203->__shared_owners_;
                do
                  v205 = __ldxr(v204);
                while (__stxr(v205 + 1, v204));
              }
              v207 = *(_QWORD *)&v499[8];
              v206 = *(_QWORD *)&v499[16];
              v496 = &off_24EC6A3B8;
              v497 = *(_OWORD *)&v499[8];
              *(_QWORD *)&v499[8] = 0;
              *(_QWORD *)&v499[16] = 0;
              *(_QWORD *)v538 = v202;
              *(_QWORD *)&v538[8] = v203;
              if (v203)
              {
                v208 = (unint64_t *)&v203->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
              }
              *(_QWORD *)&v538[16] = &off_24EC6A3B8;
              *(_QWORD *)&v538[24] = v207;
              *(_QWORD *)&v538[32] = v206;
              if (v206)
              {
                v210 = (unint64_t *)(v206 + 8);
                do
                  v211 = __ldxr(v210);
                while (__stxr(v211 + 1, v210));
              }
              (*(void (**)(uint64_t *, _BYTE *))(*v185 + 16))(v185, v538);
              sub_2241231D8((uint64_t)&v538[16]);
              v212 = *(std::__shared_weak_count **)&v538[8];
              if (*(_QWORD *)&v538[8])
              {
                v213 = (unint64_t *)(*(_QWORD *)&v538[8] + 8);
                do
                  v214 = __ldaxr(v213);
                while (__stlxr(v214 - 1, v213));
                if (!v214)
                {
                  ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                  std::__shared_weak_count::__release_weak(v212);
                }
              }
              sub_2241231D8((uint64_t)&v496);
              if (v203)
              {
                v215 = (unint64_t *)&v203->__shared_owners_;
                do
                  v216 = __ldaxr(v215);
                while (__stlxr(v216 - 1, v215));
                if (!v216)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              sub_2241231D8((uint64_t)v499);
            }
          }
          kdebug_trace();
        }
        if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v525.__r_.__value_.__l.__data_);
      }
    }
    v229 = v514;
    if (v514)
    {
      v230 = (unint64_t *)&v514->__shared_owners_;
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
        std::__shared_weak_count::__release_weak(v229);
      }
    }
    v52 = v529;
  }
  if (v52)
  {
    v232 = *(std::__shared_weak_count **)&v528[16];
    if (*(_QWORD *)&v528[16])
    {
      v233 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    nullsub_30(v528);
  }
  sub_22320C540(v468, (uint64_t)v528);
  sub_2231D5360((uint64_t)&__p, (uint64_t)v528);
  v235 = *(std::__shared_weak_count **)&v528[16];
  if (!*(_QWORD *)&v528[16])
    goto LABEL_405;
  v236 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
  do
    v237 = __ldaxr(v236);
  while (__stlxr(v237 - 1, v236));
  if (!v237)
  {
    ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
    std::__shared_weak_count::__release_weak(v235);
    nullsub_30(v528);
    if ((v467 & 0x20) == 0)
      goto LABEL_416;
  }
  else
  {
LABEL_405:
    nullsub_30(v528);
    if ((v467 & 0x20) == 0)
      goto LABEL_416;
  }
  sub_223C3B430(a1, (uint64_t)v538);
  if (v542)
  {
    sub_2231CC918((uint64_t)v538, (uint64_t)&__p, v238);
    goto LABEL_408;
  }
  sub_223C3B2A0(a1, (uint64_t)v500);
  if (v507)
  {
    *(_QWORD *)v499 = v500;
    *(_QWORD *)&v499[8] = &__p;
    *(_QWORD *)&v499[16] = a1;
    if (a6)
    {
      sub_2231CCB80((uint64_t *)v499, a5);
      if (!v507)
        goto LABEL_408;
    }
    else
    {
      v537 = 0u;
      v536 = 0u;
      v535 = 0u;
      v534 = 0u;
      v533 = 0u;
      v532 = 0u;
      memset(v531, 0, sizeof(v531));
      v530 = 0u;
      v529 = 0u;
      memset(&v528[8], 0, 48);
      *(_QWORD *)v528 = &off_24EC1FE80;
      sub_2231DC6C8(&v528[8]);
      v531[0] = &off_24EC1FE80;
      sub_2231DC6C8(&v531[1]);
      v533 = 0uLL;
      *((_QWORD *)&v532 + 1) = 0;
      *((_QWORD *)&v534 + 1) = 0;
      v535 = 0uLL;
      *((_QWORD *)&v536 + 1) = 0;
      v537 = 0uLL;
      sub_2231CCB80((uint64_t *)v499, (uint64_t)v528);
      if (*((_QWORD *)&v537 + 1))
      {
        free(*((void **)&v537 + 1));
        *((_QWORD *)&v537 + 1) = 0;
      }
      if (*((_QWORD *)&v535 + 1))
      {
        free(*((void **)&v535 + 1));
        *((_QWORD *)&v535 + 1) = 0;
      }
      if (*((_QWORD *)&v532 + 1))
      {
        *(_QWORD *)&v533 = *((_QWORD *)&v532 + 1);
        operator delete(*((void **)&v532 + 1));
      }
      sub_223167354((uint64_t)&v531[1]);
      nullsub_30(v531);
      sub_223167354((uint64_t)&v528[8]);
      nullsub_30(v528);
      if (!v507)
        goto LABEL_408;
    }
    v458 = *(std::__shared_weak_count **)&v500[16];
    if (*(_QWORD *)&v500[16])
    {
      v459 = (unint64_t *)(*(_QWORD *)&v500[16] + 8);
      do
        v460 = __ldaxr(v459);
      while (__stlxr(v460 - 1, v459));
      if (!v460)
      {
        ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
        std::__shared_weak_count::__release_weak(v458);
      }
    }
    nullsub_30(v500);
  }
LABEL_408:
  if (v542)
  {
    v239 = *(std::__shared_weak_count **)&v538[16];
    if (*(_QWORD *)&v538[16])
    {
      v240 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
    nullsub_30(v538);
  }
LABEL_416:
  sub_223C3B508(a1, (uint64_t)v528);
  v242 = BYTE8(v530);
  if ((v467 & 4) != 0 && BYTE8(v530))
  {
    sub_22320D680(v468, (uint64_t)v538);
    sub_2231D5360((uint64_t)v500, (uint64_t)v538);
    v243 = *(std::__shared_weak_count **)&v538[16];
    if (*(_QWORD *)&v538[16])
    {
      v244 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
      do
        v245 = __ldaxr(v244);
      while (__stlxr(v245 - 1, v244));
      if (!v245)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
    nullsub_30(v538);
    v496 = 0;
    v525.__r_.__value_.__r.__words[0] = (std::string::size_type)&v496;
    if (*(_DWORD *)&v528[32] && *(_DWORD *)&v528[36] && *(_DWORD *)&v528[40])
    {
      v538[0] = v528[44];
      v538[1] = v528[45];
      v538[2] = v528[46];
      v538[3] = v528[47];
      v538[4] = v500[44];
      v538[5] = v500[45];
      v538[6] = v500[46];
      v538[7] = v500[47];
      *(_DWORD *)&v538[8] = 0;
      *(_DWORD *)&v538[12] = *(_DWORD *)&v528[36] - 1;
      v538[16] = v528[48];
      v538[17] = v528[49];
      v538[18] = v528[50];
      v538[19] = v528[51];
      v538[20] = v500[48];
      v538[21] = v500[49];
      v538[22] = v501;
      v538[23] = v502;
      *(_DWORD *)&v538[24] = v520;
      *(_DWORD *)&v538[28] = *(_DWORD *)&v528[40] - 1;
      v538[32] = v528[52];
      v538[33] = v528[53];
      v538[34] = v528[54];
      v538[35] = v528[55];
      v538[36] = v503;
      v538[37] = v504;
      v538[38] = v505;
      v538[39] = v506;
      LODWORD(v539) = HIDWORD(v520);
      v246 = *(float32x4_t **)&v528[24];
      if ((_BYTE)v530 && *(_QWORD *)&v528[24])
      {
        v247 = *(_QWORD *)&v528[8];
        v248 = *(std::__shared_weak_count **)&v528[16];
        if (*(_QWORD *)&v528[16])
        {
          v249 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
          do
            v250 = __ldxr(v249);
          while (__stxr(v250 + 1, v249));
          do
            v251 = __ldaxr(v249);
          while (__stlxr(v251 - 1, v249));
          if (!v251)
          {
            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
            std::__shared_weak_count::__release_weak(v248);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v247 + 88))(v247, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v246 = *(float32x4_t **)&v528[24];
      }
      v252 = *(float16x4_t **)&v500[24];
      if (v508 && *(_QWORD *)&v500[24])
      {
        v254 = *(_QWORD *)&v500[8];
        v253 = *(std::__shared_weak_count **)&v500[16];
        if (*(_QWORD *)&v500[16])
        {
          v255 = (unint64_t *)(*(_QWORD *)&v500[16] + 8);
          do
            v256 = __ldxr(v255);
          while (__stxr(v256 + 1, v255));
          do
            v257 = __ldaxr(v255);
          while (__stlxr(v257 - 1, v255));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v254 + 88))(v254, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v252 = *(float16x4_t **)&v500[24];
      }
      v258 = (float32x4_t *)v519;
      if ((_BYTE)v521 && (_QWORD)v519)
      {
        v259 = v517;
        v260 = v518;
        if (v518)
        {
          v261 = (unint64_t *)&v518->__shared_owners_;
          do
            v262 = __ldxr(v261);
          while (__stxr(v262 + 1, v261));
          do
            v263 = __ldaxr(v261);
          while (__stlxr(v263 - 1, v261));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
            std::__shared_weak_count::__release_weak(v260);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v259 + 88))(v259, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v258 = (float32x4_t *)v519;
      }
      memset(v499, 0, 40);
      v264 = *(_DWORD *)&v538[28];
      if (*(_DWORD *)&v538[28])
      {
        v265 = v539;
        v266 = 4 * *(unsigned int *)&v538[32];
        v267 = 2 * *(unsigned int *)&v538[36];
        do
        {
          sub_2231FDC04((_BOOL8)v538, (float32x4_t **)v499, (float16x4_t **)&v525, v246, v252, v258);
          v258 = (float32x4_t *)((char *)v258 + v265);
          v246 = (float32x4_t *)((char *)v246 + v266);
          v252 = (float16x4_t *)((char *)v252 + v267);
          --v264;
        }
        while (v264);
      }
      sub_2231FDC04((_BOOL8)v538, (float32x4_t **)v499, (float16x4_t **)&v525, v246, v252, v258);
    }
    v268 = *(_QWORD *)(a1 + 456);
    *(_DWORD *)(v468 + 304) = v268;
    *(_BYTE *)(v468 + 308) = BYTE4(v268);
    v269 = *(_BYTE *)(a1 + 564);
    if (v269)
    {
      v269 = *(_BYTE *)(a1 + 528);
      *(_DWORD *)((char *)v527 + 15) = *(_DWORD *)(a1 + 560);
      v270 = *(_OWORD *)(a1 + 545);
      v526 = *(_OWORD *)(a1 + 529);
      v527[0] = v270;
      v271 = *(unsigned __int8 *)(v468 + 364);
      if (v271 == 1)
        goto LABEL_459;
    }
    else
    {
      v271 = *(unsigned __int8 *)(v468 + 364);
      if (!*(_BYTE *)(v468 + 364))
      {
LABEL_459:
        if (v271)
        {
          *(_BYTE *)(v468 + 328) = v269;
          *(_DWORD *)(v468 + 360) = *(_DWORD *)((char *)v527 + 15);
          v272 = v527[0];
          *(_OWORD *)(v468 + 329) = v526;
          *(_OWORD *)(v468 + 345) = v272;
          v273 = *(std::__shared_weak_count **)&v500[16];
          if (!*(_QWORD *)&v500[16])
            goto LABEL_475;
LABEL_470:
          v274 = (unint64_t *)&v273->__shared_owners_;
          do
            v275 = __ldaxr(v274);
          while (__stlxr(v275 - 1, v274));
          if (!v275)
          {
            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
            std::__shared_weak_count::__release_weak(v273);
          }
          goto LABEL_475;
        }
        goto LABEL_469;
      }
    }
    if (!v271)
    {
      *(_BYTE *)(v468 + 328) = v269;
      *(_DWORD *)(v468 + 360) = *(_DWORD *)((char *)v527 + 15);
      v276 = v527[0];
      *(_OWORD *)(v468 + 329) = v526;
      *(_OWORD *)(v468 + 345) = v276;
      *(_BYTE *)(v468 + 364) = 1;
      v273 = *(std::__shared_weak_count **)&v500[16];
      if (*(_QWORD *)&v500[16])
        goto LABEL_470;
      goto LABEL_475;
    }
    *(_BYTE *)(v468 + 364) = 0;
LABEL_469:
    v273 = *(std::__shared_weak_count **)&v500[16];
    if (*(_QWORD *)&v500[16])
      goto LABEL_470;
LABEL_475:
    nullsub_30(v500);
    v242 = BYTE8(v530);
  }
  if (v242)
  {
    v277 = *(std::__shared_weak_count **)&v528[16];
    if (*(_QWORD *)&v528[16])
    {
      v278 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
      do
        v279 = __ldaxr(v278);
      while (__stlxr(v279 - 1, v278));
      if (!v279)
      {
        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
        std::__shared_weak_count::__release_weak(v277);
      }
    }
    nullsub_30(v528);
  }
  sub_2231DD328(v528, a1 + 512);
  v280 = *(_OWORD *)v528;
  *(_QWORD *)&v528[8] = 0;
  *(_QWORD *)v528 = 0;
  v281 = *(std::__shared_weak_count **)(v468 + 320);
  *(_OWORD *)(v468 + 312) = v280;
  if (v281)
  {
    v282 = (unint64_t *)&v281->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  v284 = *(std::__shared_weak_count **)&v528[8];
  if (*(_QWORD *)&v528[8])
  {
    v285 = (unint64_t *)(*(_QWORD *)&v528[8] + 8);
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
  sub_223C38034(a1, (uint64_t)v500);
  v287 = v507;
  if ((v467 & 8) != 0 && v507)
  {
    sub_22320DEEC(v468, (uint64_t)v528);
    sub_2231D57D4((uint64_t)v538, (uint64_t)v528);
    v288 = *(std::__shared_weak_count **)&v528[16];
    if (*(_QWORD *)&v528[16])
    {
      v289 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
      do
        v290 = __ldaxr(v289);
      while (__stlxr(v290 - 1, v289));
      if (!v290)
      {
        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
        std::__shared_weak_count::__release_weak(v288);
      }
    }
    nullsub_30(v528);
    sub_223C380FC(a1, (uint64_t)v528);
    if ((_BYTE)v529)
    {
      sub_2231C719C((uint64_t)v538, (uint64_t)v500, (uint64_t)&v516, (uint64_t)v528);
      if ((_BYTE)v529)
        goto LABEL_502;
    }
    else
    {
      sub_2231CDB84(v499);
      sub_2231C719C((uint64_t)v538, (uint64_t)v500, (uint64_t)&v516, (uint64_t)v499);
      v295 = *(std::__shared_weak_count **)&v499[16];
      if (*(_QWORD *)&v499[16])
      {
        v296 = (unint64_t *)(*(_QWORD *)&v499[16] + 8);
        do
          v297 = __ldaxr(v296);
        while (__stlxr(v297 - 1, v296));
        if (!v297)
        {
          ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
          std::__shared_weak_count::__release_weak(v295);
        }
      }
      nullsub_30(v499);
      if ((_BYTE)v529)
      {
LABEL_502:
        v291 = *(std::__shared_weak_count **)&v528[16];
        if (*(_QWORD *)&v528[16])
        {
          v292 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
          do
            v293 = __ldaxr(v292);
          while (__stlxr(v293 - 1, v292));
          if (!v293)
          {
            ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
            std::__shared_weak_count::__release_weak(v291);
          }
        }
        nullsub_30(v528);
        v294 = *(std::__shared_weak_count **)&v538[16];
        if (!*(_QWORD *)&v538[16])
          goto LABEL_520;
        goto LABEL_516;
      }
    }
    v294 = *(std::__shared_weak_count **)&v538[16];
    if (!*(_QWORD *)&v538[16])
    {
LABEL_520:
      nullsub_30(v538);
      v287 = v507;
      goto LABEL_521;
    }
LABEL_516:
    v298 = (unint64_t *)&v294->__shared_owners_;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
    goto LABEL_520;
  }
LABEL_521:
  if (v287)
  {
    v300 = *(std::__shared_weak_count **)&v500[16];
    if (*(_QWORD *)&v500[16])
    {
      v301 = (unint64_t *)(*(_QWORD *)&v500[16] + 8);
      do
        v302 = __ldaxr(v301);
      while (__stlxr(v302 - 1, v301));
      if (!v302)
      {
        ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
        std::__shared_weak_count::__release_weak(v300);
      }
    }
    nullsub_30(v500);
  }
  sub_223C381C4(a1, (uint64_t)v500);
  v303 = v507;
  if ((v467 & 0x10) != 0 && v507)
  {
    sub_22320EFB0(v468, (uint64_t)v528);
    sub_2231D57D4((uint64_t)v538, (uint64_t)v528);
    v304 = *(std::__shared_weak_count **)&v528[16];
    if (*(_QWORD *)&v528[16])
    {
      v305 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
      do
        v306 = __ldaxr(v305);
      while (__stlxr(v306 - 1, v305));
      if (!v306)
      {
        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
        std::__shared_weak_count::__release_weak(v304);
      }
    }
    nullsub_30(v528);
    sub_223C380FC(a1, (uint64_t)v528);
    if ((_BYTE)v529)
    {
      sub_2231CDD48((uint64_t)v538, (uint64_t)v500, (uint64_t)&v516, (uint64_t)v528);
      if ((_BYTE)v529)
        goto LABEL_537;
    }
    else
    {
      sub_2231CDB84(v499);
      sub_2231C75B0((uint64_t)v538, (uint64_t)v500, (uint64_t)&v516, (uint64_t)v499);
      v311 = *(std::__shared_weak_count **)&v499[16];
      if (*(_QWORD *)&v499[16])
      {
        v312 = (unint64_t *)(*(_QWORD *)&v499[16] + 8);
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
        }
      }
      nullsub_30(v499);
      if ((_BYTE)v529)
      {
LABEL_537:
        v307 = *(std::__shared_weak_count **)&v528[16];
        if (*(_QWORD *)&v528[16])
        {
          v308 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
          do
            v309 = __ldaxr(v308);
          while (__stlxr(v309 - 1, v308));
          if (!v309)
          {
            ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
            std::__shared_weak_count::__release_weak(v307);
          }
        }
        nullsub_30(v528);
        v310 = *(std::__shared_weak_count **)&v538[16];
        if (!*(_QWORD *)&v538[16])
          goto LABEL_555;
        goto LABEL_551;
      }
    }
    v310 = *(std::__shared_weak_count **)&v538[16];
    if (!*(_QWORD *)&v538[16])
    {
LABEL_555:
      nullsub_30(v538);
      v303 = v507;
      goto LABEL_556;
    }
LABEL_551:
    v314 = (unint64_t *)&v310->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
    goto LABEL_555;
  }
LABEL_556:
  if (v303)
  {
    v316 = *(std::__shared_weak_count **)&v500[16];
    if (*(_QWORD *)&v500[16])
    {
      v317 = (unint64_t *)(*(_QWORD *)&v500[16] + 8);
      do
        v318 = __ldaxr(v317);
      while (__stlxr(v318 - 1, v317));
      if (!v318)
      {
        ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
        std::__shared_weak_count::__release_weak(v316);
      }
    }
    nullsub_30(v500);
  }
  if (a4)
  {
    sub_223C3B2A0(a1, (uint64_t)v528);
    *(_QWORD *)v500 = &off_24EC200A8;
    *(_OWORD *)&v500[8] = *(_OWORD *)&v528[8];
    *(_QWORD *)&v528[8] = 0;
    *(_QWORD *)&v528[16] = 0;
    *(_OWORD *)&v500[24] = *(_OWORD *)&v528[24];
    *(_OWORD *)&v500[34] = *(_OWORD *)&v528[34];
    if ((_BYTE)v529)
      nullsub_30(v528);
    sub_223C3B368(a1, (uint64_t)v528);
    *(_QWORD *)v499 = &off_24EC200A8;
    *(_OWORD *)&v499[8] = *(_OWORD *)&v528[8];
    *(_QWORD *)&v528[8] = 0;
    *(_QWORD *)&v528[16] = 0;
    *(_OWORD *)&v499[24] = *(_OWORD *)&v528[24];
    *(_OWORD *)&v499[34] = *(_OWORD *)&v528[34];
    if ((_BYTE)v529)
      nullsub_30(v528);
    sub_2231CE0A4(&v496);
    v319 = *(_QWORD *)(a1 + 216);
    if (v319)
    {
      *(_QWORD *)v528 = &off_24EC21230;
      sub_2231BE6D4(v319 + 56, (uint64_t *)&v528[8]);
      v320 = *(_OWORD *)&v528[8];
      *(_QWORD *)&v528[8] = 0;
      *(_QWORD *)&v528[16] = 0;
      v321 = (std::__shared_weak_count *)*((_QWORD *)&v497 + 1);
      v497 = v320;
      if (v321)
      {
        v322 = (unint64_t *)&v321->__shared_owners_;
        do
          v323 = __ldaxr(v322);
        while (__stlxr(v323 - 1, v322));
        if (!v323)
        {
          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
          std::__shared_weak_count::__release_weak(v321);
        }
      }
      *(_OWORD *)v498 = *(_OWORD *)&v528[24];
      *(_OWORD *)&v498[10] = *(_OWORD *)&v528[34];
      v324 = *(std::__shared_weak_count **)&v528[16];
      if (*(_QWORD *)&v528[16])
      {
        v325 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 - 1, v325));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
        }
      }
      nullsub_30(v528);
    }
    v523 = 0uLL;
    sub_223C3B508(a1, (uint64_t)v528);
    if (!BYTE8(v530))
      goto LABEL_749;
    v327 = *(std::__shared_weak_count **)&v528[16];
    if (*(_QWORD *)&v528[16])
    {
      v328 = (unint64_t *)(*(_QWORD *)&v528[16] + 8);
      do
        v329 = __ldaxr(v328);
      while (__stlxr(v329 - 1, v328));
      if (!v329)
      {
        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
        std::__shared_weak_count::__release_weak(v327);
      }
    }
    nullsub_30(v528);
    sub_223C3B508(a1, (uint64_t)v528);
    *(_QWORD *)v538 = &off_24EC21DF8;
    *(_OWORD *)&v538[8] = *(_OWORD *)&v528[8];
    *(_QWORD *)&v528[8] = 0;
    *(_QWORD *)&v528[16] = 0;
    *(_OWORD *)&v538[24] = *(_OWORD *)&v528[24];
    v539 = *(_OWORD *)&v528[40];
    v540 = v529;
    v541 = v530;
    if (BYTE8(v530))
      nullsub_30(v528);
    sub_2231FDFBC(v540, (const void **)v528);
    sub_2231FEA00(*(uint64_t *)v528, &v525);
    v330 = *(std::__shared_weak_count **)&v528[8];
    if (*(_QWORD *)&v528[8])
    {
      v331 = (unint64_t *)(*(_QWORD *)&v528[8] + 8);
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (!v332)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
      }
    }
    v333 = *(__n128 *)&v525.__r_.__value_.__l.__data_;
    *(_OWORD *)&v525.__r_.__value_.__l.__data_ = 0uLL;
    v334 = (std::__shared_weak_count *)v523.n128_u64[1];
    v523 = v333;
    if (!v334)
      goto LABEL_597;
    v335 = (unint64_t *)&v334->__shared_owners_;
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
      size = (std::__shared_weak_count *)v525.__r_.__value_.__l.__size_;
      if (!v525.__r_.__value_.__l.__size_)
        goto LABEL_601;
    }
    else
    {
LABEL_597:
      size = (std::__shared_weak_count *)v525.__r_.__value_.__l.__size_;
      if (!v525.__r_.__value_.__l.__size_)
        goto LABEL_601;
    }
    v338 = (unint64_t *)&size->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      v340 = v523.n128_u64[0];
      v341 = *(_QWORD *)&v538[8];
      if (!*(_QWORD *)&v538[8])
        goto LABEL_620;
      goto LABEL_602;
    }
LABEL_601:
    v340 = v523.n128_u64[0];
    v341 = *(_QWORD *)&v538[8];
    if (!*(_QWORD *)&v538[8])
      goto LABEL_620;
LABEL_602:
    v342 = *(std::__shared_weak_count **)&v538[16];
    if (*(_QWORD *)&v538[16])
    {
      v343 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
      do
        v344 = __ldxr(v343);
      while (__stxr(v344 + 1, v343));
      do
        v345 = __ldaxr(v343);
      while (__stlxr(v345 - 1, v343));
      if (!v345)
      {
        ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
        std::__shared_weak_count::__release_weak(v342);
      }
      v341 = *(_QWORD *)&v538[8];
      v346 = *(std::__shared_weak_count **)&v538[16];
      if (*(_QWORD *)&v538[16])
      {
        v347 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
        do
          v348 = __ldxr(v347);
        while (__stxr(v348 + 1, v347));
        do
          v349 = __ldaxr(v347);
        while (__stlxr(v349 - 1, v347));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
          std::__shared_weak_count::__release_weak(v346);
        }
      }
    }
    if (HIBYTE(v541))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v341 + 96))(&v513, v341, 0);
      v350 = *(_QWORD *)(v340 + 8);
      v351 = *(std::__shared_weak_count **)(v340 + 16);
      if (!v351)
        goto LABEL_625;
      goto LABEL_621;
    }
LABEL_620:
    v513 = 0;
    v350 = *(_QWORD *)(v340 + 8);
    v351 = *(std::__shared_weak_count **)(v340 + 16);
    if (!v351)
      goto LABEL_625;
LABEL_621:
    v352 = (unint64_t *)&v351->__shared_owners_;
    do
      v353 = __ldxr(v352);
    while (__stxr(v353 + 1, v352));
    do
      v354 = __ldaxr(v352);
    while (__stlxr(v354 - 1, v352));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
      if (!v350)
        goto LABEL_630;
      goto LABEL_626;
    }
LABEL_625:
    if (!v350)
      goto LABEL_630;
LABEL_626:
    if (*(_BYTE *)(v340 + 81))
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v340 + 8) + 96))(v543, *(_QWORD *)(v340 + 8), 1);
      if (!*(_DWORD *)&v538[32])
        goto LABEL_649;
      goto LABEL_631;
    }
LABEL_630:
    v543[0] = 0;
    if (!*(_DWORD *)&v538[32])
      goto LABEL_649;
LABEL_631:
    if (*(_DWORD *)&v538[36] && (_DWORD)v539)
    {
      *(_QWORD *)v528 = DWORD1(v539);
      v355 = *(_DWORD *)(v340 + 76);
      v528[12] = BYTE8(v539);
      v528[13] = BYTE9(v539);
      v528[14] = BYTE10(v539);
      v528[15] = BYTE11(v539);
      *(_DWORD *)&v528[16] = *(_DWORD *)(v340 + 72);
      *(_DWORD *)&v528[8] = *(_DWORD *)&v538[36] - 1;
      *(_DWORD *)&v528[20] = v539 - 1;
      v528[24] = BYTE12(v539);
      v528[25] = BYTE13(v539);
      v528[26] = BYTE14(v539);
      v528[27] = HIBYTE(v539);
      *(_DWORD *)&v528[28] = v355;
      v356 = *(_QWORD *)&v538[24];
      if ((_BYTE)v541 && *(_QWORD *)&v538[24])
      {
        v358 = *(_QWORD *)&v538[8];
        v357 = *(std::__shared_weak_count **)&v538[16];
        if (*(_QWORD *)&v538[16])
        {
          v359 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
          do
            v360 = __ldxr(v359);
          while (__stxr(v360 + 1, v359));
          do
            v361 = __ldaxr(v359);
          while (__stlxr(v361 - 1, v359));
          if (!v361)
          {
            ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
            std::__shared_weak_count::__release_weak(v357);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v358 + 88))(v358, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v356 = *(_QWORD *)&v538[24];
      }
      v362 = *(float **)(v340 + 32);
      if (*(_BYTE *)(v340 + 80) && v362)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v340 + 8) + 88))(*(_QWORD *)(v340 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v362 = *(float **)(v340 + 32);
      }
      memset(&v525, 0, sizeof(v525));
      v363 = *(_DWORD *)&v528[20];
      if (*(_DWORD *)&v528[20])
      {
        v364 = 4 * *(unsigned int *)&v528[24];
        v365 = 4 * *(unsigned int *)&v528[28];
        do
        {
          sub_2231FFD24(v528, &v525, v356, v362);
          v356 += v364;
          v362 = (float *)((char *)v362 + v365);
          --v363;
        }
        while (v363);
      }
      v333.n128_f32[0] = sub_2231FFD24(v528, &v525, v356, v362);
    }
LABEL_649:
    v366 = v543[0];
    v543[0] = 0;
    if (v366)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v366 + 8))(v366, v333);
    v367 = v513;
    v513 = 0;
    if (v367)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v367 + 8))(v367, v333);
    v490 = &off_24EC200A8;
    v368 = *(_QWORD *)&v500[8];
    v369 = *(std::__shared_weak_count **)&v500[16];
    if (*(_QWORD *)&v500[16])
    {
      v370 = (unint64_t *)(*(_QWORD *)&v500[16] + 8);
      do
        v371 = __ldxr(v370);
      while (__stxr(v371 + 1, v370));
      v372 = *(_WORD *)&v500[48];
      do
        v373 = __ldxr(v370);
      while (__stxr(v373 + 1, v370));
      v493 = *(_OWORD *)&v500[24];
      v494 = *(_QWORD *)&v500[40];
      do
        v374 = __ldxr(v370);
      while (__stxr(v374 + 1, v370));
      v491 = v368;
      v492 = v369;
      v495 = v372;
      do
        v375 = __ldaxr(v370);
      while (__stlxr(v375 - 1, v370));
      if (!v375)
      {
        ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
        std::__shared_weak_count::__release_weak(v369);
      }
      do
        v376 = __ldaxr(v370);
      while (__stlxr(v376 - 1, v370));
      if (v376)
      {
        v484 = &off_24EC200A8;
        v377 = *(_QWORD *)&v499[8];
        v378 = *(std::__shared_weak_count **)&v499[16];
        if (*(_QWORD *)&v499[16])
          goto LABEL_667;
LABEL_694:
        v485 = v377;
        v486 = 0;
        v487 = *(_OWORD *)&v499[24];
        v488 = *(_QWORD *)&v499[40];
        v489 = *(_WORD *)&v499[48];
        v477 = &off_24EC21DF8;
        v386 = *(_QWORD *)&v538[8];
        v387 = *(std::__shared_weak_count **)&v538[16];
        if (!*(_QWORD *)&v538[16])
          goto LABEL_695;
        goto LABEL_680;
      }
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
      v484 = &off_24EC200A8;
      v377 = *(_QWORD *)&v499[8];
      v378 = *(std::__shared_weak_count **)&v499[16];
      if (!*(_QWORD *)&v499[16])
        goto LABEL_694;
    }
    else
    {
      v491 = *(_QWORD *)&v500[8];
      v492 = 0;
      v493 = *(_OWORD *)&v500[24];
      v494 = *(_QWORD *)&v500[40];
      v495 = *(_WORD *)&v500[48];
      v484 = &off_24EC200A8;
      v377 = *(_QWORD *)&v499[8];
      v378 = *(std::__shared_weak_count **)&v499[16];
      if (!*(_QWORD *)&v499[16])
        goto LABEL_694;
    }
LABEL_667:
    v379 = (unint64_t *)&v378->__shared_owners_;
    do
      v380 = __ldxr(v379);
    while (__stxr(v380 + 1, v379));
    v381 = *(_WORD *)&v499[48];
    do
      v382 = __ldxr(v379);
    while (__stxr(v382 + 1, v379));
    v487 = *(_OWORD *)&v499[24];
    v488 = *(_QWORD *)&v499[40];
    do
      v383 = __ldxr(v379);
    while (__stxr(v383 + 1, v379));
    v485 = v377;
    v486 = v378;
    v489 = v381;
    do
      v384 = __ldaxr(v379);
    while (__stlxr(v384 - 1, v379));
    if (!v384)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
    do
      v385 = __ldaxr(v379);
    while (__stlxr(v385 - 1, v379));
    if (v385)
    {
      v477 = &off_24EC21DF8;
      v386 = *(_QWORD *)&v538[8];
      v387 = *(std::__shared_weak_count **)&v538[16];
      if (*(_QWORD *)&v538[16])
        goto LABEL_680;
LABEL_695:
      v478 = v386;
      v479 = 0;
      v480 = *(_OWORD *)&v538[24];
      v481 = v539;
      v482 = v540;
      v483 = v541;
      goto LABEL_696;
    }
    ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
    std::__shared_weak_count::__release_weak(v378);
    v477 = &off_24EC21DF8;
    v386 = *(_QWORD *)&v538[8];
    v387 = *(std::__shared_weak_count **)&v538[16];
    if (!*(_QWORD *)&v538[16])
      goto LABEL_695;
LABEL_680:
    v388 = (unint64_t *)&v387->__shared_owners_;
    do
      v389 = __ldxr(v388);
    while (__stxr(v389 + 1, v388));
    v390 = v541;
    do
      v391 = __ldxr(v388);
    while (__stxr(v391 + 1, v388));
    v480 = *(_OWORD *)&v538[24];
    v481 = v539;
    v482 = v540;
    do
      v392 = __ldxr(v388);
    while (__stxr(v392 + 1, v388));
    v478 = v386;
    v479 = v387;
    v483 = v390;
    do
      v393 = __ldaxr(v388);
    while (__stlxr(v393 - 1, v388));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v387);
    }
    do
      v394 = __ldaxr(v388);
    while (__stlxr(v394 - 1, v388));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v387);
    }
LABEL_696:
    v474 = &off_24EC21230;
    sub_2231BE6D4(v523.n128_i64[0], &v475);
    v469 = &off_24EC21230;
    v395 = v497;
    if (*((_QWORD *)&v497 + 1))
    {
      v396 = (unint64_t *)(*((_QWORD *)&v497 + 1) + 8);
      do
        v397 = __ldxr(v396);
      while (__stxr(v397 + 1, v396));
      v398 = *(_WORD *)&v498[24];
      do
        v399 = __ldxr(v396);
      while (__stxr(v399 + 1, v396));
      v471 = *(_OWORD *)v498;
      v472 = *(_QWORD *)&v498[16];
      do
        v400 = __ldxr(v396);
      while (__stxr(v400 + 1, v396));
      v470 = v395;
      v473 = v398;
      do
        v401 = __ldaxr(v396);
      while (__stlxr(v401 - 1, v396));
      if (!v401)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v395 + 1) + 16))(*((_QWORD *)&v395 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v395 + 1));
      }
      do
        v402 = __ldaxr(v396);
      while (__stlxr(v402 - 1, v396));
      if (!v402)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v395 + 1) + 16))(*((_QWORD *)&v395 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v395 + 1));
      }
    }
    else
    {
      v470 = (unint64_t)v497;
      v471 = *(_OWORD *)v498;
      v472 = *(_QWORD *)&v498[16];
      v473 = *(_WORD *)&v498[24];
    }
    sub_2231CEB6C((uint64_t)v528, (uint64_t)&v490, (uint64_t)&v484, (uint64_t)&v477, (uint64_t)&v474, (uint64_t)&v469);
    v403 = v468 + 216;
    if (*(_BYTE *)(v468 + 296))
    {
      sub_2231CF16C(v403, (uint64_t *)v528);
      sub_2231DC94C(v528);
      v404 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (!*((_QWORD *)&v470 + 1))
      {
LABEL_719:
        nullsub_30(&v469);
        v407 = v476;
        if (v476)
        {
          v408 = (unint64_t *)&v476->__shared_owners_;
          do
            v409 = __ldaxr(v408);
          while (__stlxr(v409 - 1, v408));
          if (!v409)
          {
            ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
            std::__shared_weak_count::__release_weak(v407);
          }
        }
        nullsub_30(&v474);
        v410 = v479;
        if (v479)
        {
          v411 = (unint64_t *)&v479->__shared_owners_;
          do
            v412 = __ldaxr(v411);
          while (__stlxr(v412 - 1, v411));
          if (!v412)
          {
            ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
            std::__shared_weak_count::__release_weak(v410);
          }
        }
        nullsub_30(&v477);
        v413 = v486;
        if (v486)
        {
          v414 = (unint64_t *)&v486->__shared_owners_;
          do
            v415 = __ldaxr(v414);
          while (__stlxr(v415 - 1, v414));
          if (!v415)
          {
            ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
            std::__shared_weak_count::__release_weak(v413);
          }
        }
        nullsub_30(&v484);
        v416 = v492;
        if (v492)
        {
          v417 = (unint64_t *)&v492->__shared_owners_;
          do
            v418 = __ldaxr(v417);
          while (__stlxr(v418 - 1, v417));
          if (!v418)
          {
            ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
            std::__shared_weak_count::__release_weak(v416);
          }
        }
        nullsub_30(&v490);
        v419 = *(std::__shared_weak_count **)&v538[16];
        if (*(_QWORD *)&v538[16])
        {
          v420 = (unint64_t *)(*(_QWORD *)&v538[16] + 8);
          do
            v421 = __ldaxr(v420);
          while (__stlxr(v421 - 1, v420));
          if (!v421)
          {
            ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
            std::__shared_weak_count::__release_weak(v419);
          }
        }
        nullsub_30(v538);
        v422 = (std::__shared_weak_count *)v523.n128_u64[1];
        if (v523.n128_u64[1])
        {
          v423 = (unint64_t *)(v523.n128_u64[1] + 8);
          do
            v424 = __ldaxr(v423);
          while (__stlxr(v424 - 1, v423));
          if (!v424)
          {
            ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
            std::__shared_weak_count::__release_weak(v422);
          }
        }
LABEL_749:
        v425 = (std::__shared_weak_count *)*((_QWORD *)&v497 + 1);
        if (*((_QWORD *)&v497 + 1))
        {
          v426 = (unint64_t *)(*((_QWORD *)&v497 + 1) + 8);
          do
            v427 = __ldaxr(v426);
          while (__stlxr(v427 - 1, v426));
          if (!v427)
          {
            ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
            std::__shared_weak_count::__release_weak(v425);
          }
        }
        nullsub_30(&v496);
        v428 = *(std::__shared_weak_count **)&v499[16];
        if (*(_QWORD *)&v499[16])
        {
          v429 = (unint64_t *)(*(_QWORD *)&v499[16] + 8);
          do
            v430 = __ldaxr(v429);
          while (__stlxr(v430 - 1, v429));
          if (!v430)
          {
            ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
            std::__shared_weak_count::__release_weak(v428);
          }
        }
        nullsub_30(v499);
        v431 = *(std::__shared_weak_count **)&v500[16];
        if (*(_QWORD *)&v500[16])
        {
          v432 = (unint64_t *)(*(_QWORD *)&v500[16] + 8);
          do
            v433 = __ldaxr(v432);
          while (__stlxr(v433 - 1, v432));
          if (!v433)
          {
            ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
            std::__shared_weak_count::__release_weak(v431);
          }
        }
        nullsub_30(v500);
        goto LABEL_765;
      }
    }
    else
    {
      sub_2231CE38C(v403, (uint64_t *)v528);
      *(_BYTE *)(v468 + 296) = 1;
      sub_2231DC94C(v528);
      v404 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (!*((_QWORD *)&v470 + 1))
        goto LABEL_719;
    }
    v405 = (unint64_t *)&v404->__shared_owners_;
    do
      v406 = __ldaxr(v405);
    while (__stlxr(v406 - 1, v405));
    if (!v406)
    {
      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
      std::__shared_weak_count::__release_weak(v404);
    }
    goto LABEL_719;
  }
LABEL_765:
  *(_QWORD *)v528 = "cv3d.recon.";
  *(_QWORD *)&v528[8] = 11;
  *(_QWORD *)&v528[16] = "Stats.Keyframing.KeyframeBundle_time";
  *(_QWORD *)&v528[24] = 36;
  sub_2231A9820((uint64_t)v528, (uint64_t)&v528[32], 0, 0, (std::string *)v538);
  sub_224569D7C();
  if (sub_224569C6C()
    && (v434 = sub_2241471F8(), v435 = sub_2241486EC((uint64_t)v434), !sub_2241053B4(v435))
    && (v436 = sub_2241472E0(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v436 + 24))(v436)))
  {
    memset(v528, 0, 32);
    *(_DWORD *)&v528[32] = 728325608;
    kdebug_trace();
    v437.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v465.__d_.__rep_;
    *(float *)v500 = (float)v437.__d_.__rep_ / 1000000.0;
    sub_2231CE208((double *)&qword_255788F20, v436, (float *)v500, "frame_to_keyframe (ms)");
    kdebug_trace();
    v438 = 1;
  }
  else
  {
    v438 = 0;
    v437.__d_.__rep_ = 0;
  }
  memset(v528, 0, 32);
  *(_DWORD *)&v528[32] = 728325624;
  kdebug_trace();
  v439 = v538[23];
  if (v538[23] < 0)
    v439 = *(_QWORD *)&v538[8];
  if (v439 >= 0x11)
  {
    v440 = v538;
    if (v538[23] < 0)
      v440 = *(_BYTE **)v538;
    v441 = *(_QWORD *)v440;
    v442 = *((_QWORD *)v440 + 1);
    v443 = v440[16];
    if (v441 == 0x6365722E64337663 && v442 == 0x73746174532E6E6FLL && v443 == 46)
    {
      v446 = sub_223187510();
      if (v538[23] >= 0)
        v447 = v538;
      else
        v447 = *(_BYTE **)v538;
      if (v538[23] >= 0)
        v448 = v538[23];
      else
        v448 = *(_QWORD *)&v538[8];
      if ((v438 & 1) == 0)
        v437.__d_.__rep_ = v437.__d_.__rep_ - v465.__d_.__rep_ + std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)v500 = (float)v437.__d_.__rep_ / 1000000.0;
      sub_2231897A8((uint64_t *)v446, v447, v448, (float *)v500, (uint64_t)"frame_to_keyframe (ms)", 22);
    }
  }
  kdebug_trace();
  if ((v538[23] & 0x80000000) != 0)
    operator delete(*(void **)v538);
  kdebug_trace();
  v449 = (std::__shared_weak_count *)v510;
  if ((_QWORD)v510)
  {
    v450 = (unint64_t *)(v510 + 8);
    do
      v451 = __ldaxr(v450);
    while (__stlxr(v451 - 1, v450));
    if (!v451)
    {
      ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
      std::__shared_weak_count::__release_weak(v449);
    }
  }
  nullsub_30(&__p);
  v452 = v518;
  if (v518)
  {
    v453 = (unint64_t *)&v518->__shared_owners_;
    do
      v454 = __ldaxr(v453);
    while (__stlxr(v454 - 1, v453));
    if (!v454)
    {
      ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
      std::__shared_weak_count::__release_weak(v452);
    }
  }
  nullsub_30(&v516);
  v455 = (std::__shared_weak_count *)*((_QWORD *)&v522 + 1);
  if (*((_QWORD *)&v522 + 1))
  {
    v456 = (unint64_t *)(*((_QWORD *)&v522 + 1) + 8);
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
}

void sub_2231CB3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *p_shared_owners;
  unint64_t v66;

  sub_2241231D8(v62);
  if (*(_QWORD *)(v63 - 216))
    sub_2245743F4();
  sub_2241231D8((uint64_t)&a54);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_2241231D8((uint64_t)&a61);
  sub_2231874DC((uint64_t)&STACK[0x230]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_223167354((uint64_t)&STACK[0x288]);
  sub_2231BD90C((uint64_t)&STACK[0x360]);
  sub_2231BEEB4((uint64_t)&STACK[0x2A8]);
  sub_223167354((uint64_t)&STACK[0x2E0]);
  sub_2231CE350(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CBAC0(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 8) = *a2;
  return result;
}

_QWORD *sub_2231CBACC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC21420;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0uLL;
  sub_2231F74F8((uint64_t)(a1 + 1), &v8, &v6);
  v2 = v9;
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2231CBB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    sub_2245743F4();
  nullsub_30(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CBB84(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(&v10, *(_QWORD *)(a1 + 8), 1);
    goto LABEL_11;
  }
LABEL_10:
  v10 = 0;
LABEL_11:
  v11[0] = a1;
  v11[1] = a2;
  sub_2231F9628(v11);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231CBC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CBC74(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  __int128 v12;
  _OWORD v13[2];

  v11 = &off_24EC21420;
  sub_2231F9830(a2, (uint64_t *)&v12);
  v3 = v12;
  v12 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_OWORD *)(a1 + 24) = v13[0];
  *(_OWORD *)(a1 + 34) = *(_OWORD *)((char *)v13 + 10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  nullsub_30(&v11);
  return a1;
}

void sub_2231CBD50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_2231CBD64(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231F9AA0((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231CBE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CBEAC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(&v10, *(_QWORD *)(a1 + 8), 1);
    goto LABEL_11;
  }
LABEL_10:
  v10 = 0;
LABEL_11:
  v11[0] = a1;
  v11[1] = a2;
  sub_2231FABA4(v11);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231CBF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_2231CBF9C(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231FADAC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231CC0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CC0E4(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_17;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_39;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_39;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_17:
    v27 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    if (!v14)
      goto LABEL_32;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(&v27, v5, 0);
  v14 = *(_QWORD *)(a2 + 8);
  if (!v14)
    goto LABEL_32;
LABEL_18:
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_40;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v14 = *(_QWORD *)(a2 + 8);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_40;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (*(_BYTE *)(a2 + 49))
      goto LABEL_30;
  }
  else
  {
LABEL_40:
    if (*(_BYTE *)(a2 + 49))
    {
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 96))(&v26, v14, 1);
      goto LABEL_33;
    }
  }
LABEL_32:
  v26 = 0;
LABEL_33:
  v23.n128_u64[0] = sub_2231FB418(a1, a2, a3);
  v24 = v26;
  v26 = 0;
  if (v24)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v24 + 8))(v24, v23.n128_f32[0]);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v23);
  return result;
}

void sub_2231CC2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CC34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_22320B0C8(a1, (uint64_t)v7);
  sub_2231D4F04(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231CC3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231BD974((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CC3F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_22320BBFC(a1, (uint64_t)v7);
  sub_2231D4F04(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231CC480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231BD974((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CC494(uint64_t a1)
{
  return a1 + 128;
}

void sub_2231CC49C(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231CC5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231CC5E4(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231FBE20((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231CC710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231CC72C(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231FBE20((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231CC858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CC874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_22320C540(a1, (uint64_t)v7);
  sub_2231D5360(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231CC904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231CD9B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CC918(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_17;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_39;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_39;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_14;
LABEL_17:
    v27 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    if (!v14)
      goto LABEL_32;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(&v27, v5, 0);
  v14 = *(_QWORD *)(a2 + 8);
  if (!v14)
    goto LABEL_32;
LABEL_18:
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_40;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v14 = *(_QWORD *)(a2 + 8);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_40;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (*(_BYTE *)(a2 + 73))
      goto LABEL_30;
  }
  else
  {
LABEL_40:
    if (*(_BYTE *)(a2 + 73))
    {
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 96))(&v26, v14, 1);
      goto LABEL_33;
    }
  }
LABEL_32:
  v26 = 0;
LABEL_33:
  v23.n128_u64[0] = sub_2231FD280(a1, a2, a3);
  v24 = v26;
  v26 = 0;
  if (v24)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v24 + 8))(v24, v23.n128_f32[0]);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v23);
  return result;
}

void sub_2231CCB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CCB80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  float32x2_t *v4;
  int v5;
  int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  float32x2_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v57;
  BOOL v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v65;
  int8x16_t v67;
  int8x16_t v68;
  float32x4_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _WORD *v78;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  uint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v92;
  BOOL v94;
  int8x16_t v95;
  int8x16_t v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v105;
  __int32 v106;
  unsigned __int32 v107;
  int8x16_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float32x4_t v115;
  float v116;
  float32x2_t *v117;
  unint64_t v118;
  int8x16_t v119;
  int8x16_t v120;
  unsigned __int32 v121;
  int8x16_t v122;
  unsigned __int32 v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t (**v128)();
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t (**v131)();
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  int v135;
  int v136;

  v3 = *a1;
  v4 = (float32x2_t *)a1[2];
  v6 = (int *)(*a1 + 32);
  v5 = *v6;
  v110 = a1[1];
  if (*v6 != *(_DWORD *)(v110 + 56) || *(_DWORD *)(v3 + 36) != *(_DWORD *)(v110 + 60))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/NormalEstimation.h", 250, (uint64_t)"depth.Size() == normal.Size()", 29, (uint64_t)"depth and normal size must match", 32, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_96;
    }
    v5 = *v6;
  }
  if (v5 != v4[166].i32[0] || *(_DWORD *)(v3 + 36) != v4[166].i32[1])
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/NormalEstimation.h", 251, (uint64_t)"depth.Size() == camera.ImageSize()", 34, (uint64_t)"depth and camera image size must match", 38, (void (*)(void **))sub_22457406C))
    {
      v5 = *v6;
      goto LABEL_9;
    }
LABEL_96:
    abort();
  }
LABEL_9:
  if (*(_DWORD *)(a2 + 64) != v5 || *(_DWORD *)(a2 + 68) != *(_DWORD *)(v3 + 36))
    sub_2231DB284(a2, v6);
  v131 = &off_24EC218E0;
  sub_2231DC2F8(a2, &v132);
  sub_2231DB42C(a2 + 200, v3, (uint64_t)&v131);
  v7 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  nullsub_30(&v131);
  sub_2231DB82C(a2, a2 + 88);
  v131 = &off_24EC200A8;
  sub_2231A3AA0(a2 + 88, &v132);
  v128 = &off_24EC218E0;
  sub_2231DC2F8(a2, &v129);
  sub_2231DB42C(a2 + 200, (uint64_t)&v131, (uint64_t)&v128);
  v117 = v4;
  v10 = v130;
  if (v130)
  {
    v11 = (unint64_t *)&v130->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  nullsub_30(&v128);
  v13 = v133;
  if (v133)
  {
    v14 = (unint64_t *)&v133->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v131);
  sub_2231DB82C(a2, a2 + 88);
  v131 = &off_24EC200A8;
  sub_2231A3AA0(a2 + 88, &v132);
  v128 = &off_24EC218E0;
  sub_2231DC2F8(a2, &v129);
  sub_2231DB42C(a2 + 200, (uint64_t)&v131, (uint64_t)&v128);
  v16 = v130;
  if (v130)
  {
    v17 = (unint64_t *)&v130->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  nullsub_30(&v128);
  v19 = v133;
  if (v133)
  {
    v20 = (unint64_t *)&v133->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  nullsub_30(&v131);
  v131 = &off_24EC200A8;
  sub_2231A3AA0(a2, &v132);
  v25 = v117[166];
  v26 = *(_QWORD *)(a2 + 176);
  v27 = (_QWORD *)(a2 + 176);
  v28 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 184) - v26) >> 2);
  if (v25.u32[0] <= v28)
  {
    if (v25.u32[0] < v28)
      *(_QWORD *)(a2 + 184) = v26 + 12 * v25.u32[0];
  }
  else
  {
    sub_2231DC564((char **)(a2 + 176), v25.u32[0] - v28);
  }
  v29 = HIDWORD(*(_QWORD *)&v25);
  if (v25.i32[0])
  {
    v30 = 0;
    v31 = 0;
    do
    {
      *(float32x2_t *)_Q1.i8 = vadd_f32(v117[160], vmul_f32(v117[159], (float32x2_t)COERCE_UNSIGNED_INT((float)(int)v31)));
      _Q1.i32[2] = 1.0;
      _H2 = *(_WORD *)(v134 + 2 * (v135 * v31));
      __asm { FCVT            S2, H2 }
      v38 = *v27 + v30;
      _Q1 = (int8x16_t)vmulq_n_f32((float32x4_t)_Q1, _S2);
      *(_DWORD *)(v38 + 8) = _Q1.i32[2];
      *(_QWORD *)v38 = _Q1.i64[0];
      ++v31;
      v30 += 12;
    }
    while (v25.u32[0] != v31);
  }
  v109 = v25.i32[1] - 1;
  v106 = v25.i32[0];
  if (v25.i32[1] == 1)
  {
    v40 = (v25.i32[0] - 1);
  }
  else
  {
    v105 = HIDWORD(*(_QWORD *)&v25);
    v39 = 0;
    LODWORD(v40) = v25.i32[0] - 1;
    v107 = v25.i32[0] - 2;
    _Q0.f32[0] = (float)(v25.i32[0] - 1);
    v108 = (int8x16_t)_Q0;
    v112 = (v25.i32[0] - 1);
    do
    {
      v43 = v135;
      v44 = v134 + 2 * (v136 * (v39 + 1));
      v45 = HIDWORD(*(_QWORD *)(v110 + 44));
      v46 = *(_QWORD *)(v110 + 24);
      v47 = v46 + 2 * (*(_DWORD *)(v110 + 68) * v39);
      v111 = v39 + 1;
      _Q0.f32[0] = (float)(v39 + 1);
      v115 = _Q0;
      if ((_DWORD)v40)
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        while (1)
        {
          _Q0.f32[0] = (float)v48;
          _Q1.i32[3] = v115.i32[3];
          _Q0.i32[1] = v115.i32[0];
          *(float32x2_t *)_Q0.f32 = vadd_f32(vmul_f32(v117[159], *(float32x2_t *)_Q0.f32), v117[160]);
          _Q0.i32[2] = 1.0;
          v55 = *v27 + v51;
          _Q1.i16[0] = *(_WORD *)(v44 + 2 * v49);
          __asm { FCVT            S1, H1 }
          v57 = vmulq_n_f32(_Q0, _Q1.f32[0]);
          _Q2.i64[0] = 0;
          v118 = 0;
          v120 = (int8x16_t)_Q2;
          v124 = v57;
          v58 = *(float *)(v55 + 8) <= -65504.0 || *(float *)(v55 + 20) <= -65504.0;
          if (!v58 && v57.f32[2] > -65504.0)
          {
            _Q0.i64[0] = *(_QWORD *)(v55 + 12);
            _Q0.i32[2] = *(_DWORD *)(v55 + 20);
            v59 = *v27 + v51;
            _Q1.i64[0] = *(_QWORD *)v59;
            _Q1.i32[2] = *(_DWORD *)(v59 + 8);
            v60 = (int8x16_t)vsubq_f32(_Q0, _Q1);
            v61 = (int8x16_t)vsubq_f32(_Q1, v57);
            v62 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v60, v60, 0xCuLL), v60, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61), v61, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), v60, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v61, v61, 0xCuLL), v61, 8uLL));
            v61.i64[0] = vextq_s8(v62, v62, 8uLL).u64[0];
            v120 = (int8x16_t)vmulq_n_f32((float32x4_t)v62, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1), *(float32x2_t *)v62.i8, 1), *(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8).f32[0]));
            v118 = vextq_s8(v120, v120, 4uLL).u64[0];
          }
          if (!v46
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            break;
          }
          v52 = (_WORD *)(v47 + 2 * v50);
          _S1 = v118;
          _Q2 = (float32x4_t)v120;
          _Q0.i32[0] = HIDWORD(v118);
          __asm
          {
            FCVT            H0, S0
            FCVT            H1, S1
            FCVT            H2, S2
          }
          *v52 = _Q2.i16[0];
          v52[1] = _S1;
          v52[2] = _Q0.i16[0];
          v52[3] = 0;
          v54 = *v27 + v51;
          _Q0.i32[3] = v124.i32[3];
          *(_QWORD *)v54 = v124.i64[0];
          v51 += 12;
          *(_DWORD *)(v54 + 8) = v124.i32[2];
          v50 += v45;
          v49 += v43;
          ++v48;
          if (12 * v112 == v51)
            goto LABEL_59;
        }
LABEL_67:
        abort();
      }
LABEL_59:
      v63 = *v27 + 12 * v112;
      _Q1 = v108;
      _Q1.i32[1] = v115.i32[0];
      *(float32x2_t *)_Q0.f32 = vadd_f32(vmul_f32(v117[159], *(float32x2_t *)_Q1.i8), v117[160]);
      _Q0.i32[2] = 1.0;
      _Q1.i16[0] = *(_WORD *)(v44 + 2 * (v43 * v112));
      __asm { FCVT            S1, H1 }
      _Q2 = vmulq_n_f32(_Q0, *(float *)_Q1.i32);
      v121 = 0;
      v125 = _Q2;
      _H9 = 0;
      if (*(float *)(v63 + 8) > -65504.0)
      {
        v65 = *v27 + 12 * v107;
        if (_Q2.f32[2] > -65504.0 && *(float *)(v65 + 8) > -65504.0)
        {
          _Q0.i64[0] = *(_QWORD *)v63;
          _Q0.i32[2] = *(_DWORD *)(v63 + 8);
          _Q1.i64[0] = *(_QWORD *)v65;
          _Q1.i32[2] = *(_DWORD *)(v65 + 8);
          v67 = (int8x16_t)vsubq_f32(_Q2, _Q0);
          v68 = (int8x16_t)vsubq_f32(_Q0, (float32x4_t)_Q1);
          _Q1 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v67, v67, 0xCuLL), v67, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), v68, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), v67, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v68, v68, 0xCuLL), v68, 8uLL));
          _Q2 = (float32x4_t)vextq_s8(_Q1, _Q1, 8uLL);
          v69 = vmulq_n_f32((float32x4_t)_Q1, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q1.i8, *(float32x2_t *)_Q1.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q1.i8, 1), *(float32x2_t *)_Q1.i8, 1), *(float32x2_t *)_Q2.f32, *(float32x2_t *)_Q2.f32).f32[0]));
          _Q1.i32[0] = v69.i32[2];
          __asm { FCVT            H9, S1 }
          v121 = vcvt_f16_f32(v69).u32[0];
        }
      }
      if (!v46
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_67;
      }
      v40 = v112;
      v41 = v47 + 2 * (v112 * v45);
      *(_DWORD *)v41 = v121;
      *(_WORD *)(v41 + 4) = _H9;
      *(_WORD *)(v41 + 6) = 0;
      v42 = *v27 + 12 * v112;
      _Q0 = v125;
      *(_QWORD *)v42 = v125.i64[0];
      *(_DWORD *)(v42 + 8) = v125.i32[2];
      v39 = v111;
    }
    while (v111 != v109);
    LODWORD(v29) = v105;
  }
  v70 = v135;
  v71 = v134 + 2 * (v136 * (v29 - 2));
  v114 = HIDWORD(*(_QWORD *)(v110 + 44));
  v72 = *(_QWORD *)(v110 + 24);
  v113 = v72 + 2 * (*(_DWORD *)(v110 + 68) * v109);
  v116 = (float)(v29 - 2);
  v73 = v40;
  if ((_DWORD)v40)
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    while (1)
    {
      _Q0.f32[0] = (float)(int)v77;
      v81 = *v27 + v76;
      _Q0.f32[1] = v116;
      *(float32x2_t *)_Q0.f32 = vadd_f32(vmul_f32(v117[159], *(float32x2_t *)_Q0.f32), v117[160]);
      _Q0.i32[2] = 1.0;
      _Q1.i16[0] = *(_WORD *)(v71 + 2 * v74);
      __asm { FCVT            S1, H1 }
      v82 = vmulq_n_f32(_Q0, *(float *)_Q1.i32);
      _Q1.i64[0] = 0;
      v119 = _Q1;
      v122.i32[0] = 0;
      v126 = v82;
      if (*(float *)(v81 + 8) > -65504.0 && v82.f32[2] > -65504.0 && *(float *)(v81 + 20) > -65504.0)
      {
        v84 = *v27 + v76;
        _Q0.i64[0] = *(_QWORD *)v84;
        _Q0.i32[2] = *(_DWORD *)(v84 + 8);
        v85 = (int8x16_t)vsubq_f32(v82, _Q0);
        v82.i64[0] = *(_QWORD *)(v81 + 12);
        v82.i32[2] = *(_DWORD *)(v81 + 20);
        v86 = (int8x16_t)vsubq_f32(_Q0, v82);
        v87 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v85, v85, 0xCuLL), v85, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), v86, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), v85, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v86, v86, 0xCuLL), v86, 8uLL));
        v85.i64[0] = vextq_s8(v87, v87, 8uLL).u64[0];
        v122 = (int8x16_t)vmulq_n_f32((float32x4_t)v87, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)v87.i8, 1), *(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8).f32[0]));
        v119 = vextq_s8(v122, v122, 4uLL);
      }
      if (!v72
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        break;
      }
      ++v77;
      v78 = (_WORD *)(v113 + 2 * v75);
      _Q1 = v119;
      _S2 = v122.i32[0];
      _Q0.i32[0] = v119.i32[1];
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
        FCVT            H2, S2
      }
      *v78 = _S2;
      v78[1] = _Q1.i16[0];
      v78[2] = _Q0.i16[0];
      v78[3] = 0;
      v80 = *v27 + v76;
      _Q0.i32[3] = v126.i32[3];
      *(_QWORD *)v80 = v126.i64[0];
      *(_DWORD *)(v80 + 8) = v126.i32[2];
      v76 += 12;
      v75 += v114;
      v74 += v70;
      if (v73 == v77)
        goto LABEL_82;
    }
LABEL_81:
    abort();
  }
LABEL_82:
  v88 = *v27 + 12 * v73;
  v89 = *v27 + 12 * (v106 - 2);
  _Q0.f32[0] = (float)(int)v73;
  _Q0.f32[1] = v116;
  *(float32x2_t *)_Q0.f32 = vadd_f32(vmul_f32(v117[159], *(float32x2_t *)_Q0.f32), v117[160]);
  _Q0.i32[2] = 1.0;
  _H1 = *(_WORD *)(v71 + 2 * (v70 * v73));
  __asm { FCVT            S1, H1 }
  v92 = vmulq_n_f32(_Q0, _S1);
  v123 = 0;
  v127 = v92;
  _H8 = 0;
  v94 = *(float *)(v88 + 8) <= -65504.0 || *(float *)(v89 + 8) <= -65504.0;
  if (!v94 && v92.f32[2] > -65504.0)
  {
    _Q0.i64[0] = *(_QWORD *)v89;
    _Q0.i32[2] = *(_DWORD *)(v89 + 8);
    _Q1.i64[0] = *(_QWORD *)v88;
    _Q1.i32[2] = *(_DWORD *)(v88 + 8);
    v95 = (int8x16_t)vsubq_f32(_Q0, (float32x4_t)_Q1);
    _Q1 = (int8x16_t)vsubq_f32((float32x4_t)_Q1, v92);
    v97 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v95, v95, 0xCuLL), v95, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), _Q1, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), v95, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(_Q1, _Q1, 0xCuLL), _Q1, 8uLL));
    _Q1.i64[0] = vextq_s8(v97, v97, 8uLL).u64[0];
    v98 = vmulq_n_f32((float32x4_t)v97, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1), *(float32x2_t *)v97.i8, 1), *(float32x2_t *)_Q1.i8, *(float32x2_t *)_Q1.i8).f32[0]));
    _Q1.i32[0] = v98.i32[2];
    __asm { FCVT            H8, S1 }
    v123 = vcvt_f16_f32(v98).u32[0];
  }
  if (!v72
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_81;
  }
  v99 = v113 + 2 * (v73 * v114);
  *(_DWORD *)v99 = v123;
  *(_WORD *)(v99 + 4) = _H8;
  *(_WORD *)(v99 + 6) = 0;
  v100 = *v27 + 12 * v73;
  *(_QWORD *)v100 = v127.i64[0];
  *(_DWORD *)(v100 + 8) = v127.i32[2];
  v101 = v133;
  if (v133)
  {
    v102 = (unint64_t *)&v133->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  return nullsub_30(&v131);
}

void sub_2231CD714(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 144);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  nullsub_30(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CD83C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[32];
  if (v2)
  {
    free(v2);
    a1[32] = 0;
  }
  v3 = (void *)a1[28];
  if (v3)
  {
    free(v3);
    a1[28] = 0;
  }
  v4 = (void *)a1[22];
  if (v4)
  {
    a1[23] = v4;
    operator delete(v4);
  }
  sub_223167354((uint64_t)(a1 + 12));
  nullsub_30(a1 + 11);
  sub_223167354((uint64_t)(a1 + 1));
  return nullsub_30(a1);
}

uint64_t sub_2231CD8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_22320D680(a1, (uint64_t)v7);
  sub_2231D5360(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231CD938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231CD9B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CD94C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 304) = a2;
  *(_BYTE *)(result + 308) = BYTE4(a2);
  return result;
}

__n128 sub_2231CD95C(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = (__n128 *)(a1 + 328);
  if (*(unsigned __int8 *)(a1 + 364) == *(unsigned __int8 *)(a2 + 36))
  {
    if (*(_BYTE *)(a1 + 364))
    {
      result = *(__n128 *)a2;
      v4 = *(_OWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 32);
      *v2 = result;
      *(_OWORD *)(a1 + 344) = v4;
    }
  }
  else if (*(_BYTE *)(a1 + 364))
  {
    *(_BYTE *)(a1 + 364) = 0;
  }
  else
  {
    result = *(__n128 *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 32);
    *v2 = result;
    *(_OWORD *)(a1 + 344) = v5;
    *(_BYTE *)(a1 + 364) = 1;
  }
  return result;
}

uint64_t sub_2231CD9B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231CDA18(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v3 = (_OWORD *)(a1 + 312);
  sub_2231DD328(&v11, a2);
  v4 = v11;
  v11 = 0uLL;
  v5 = *(std::__shared_weak_count **)(a1 + 320);
  *v3 = v4;
  if (!v5)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return;
  }
  else
  {
LABEL_5:
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t sub_2231CDAE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_22320DEEC(a1, (uint64_t)v7);
  sub_2231D57D4(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231CDB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231CDC3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231CDB84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC200A8;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0uLL;
  sub_2231FDD74((uint64_t)(a1 + 1), &v8, &v6);
  v2 = v9;
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2231CDC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    sub_2245743F4();
  nullsub_30(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CDC3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_2231CDCA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_22320EFB0(a1, (uint64_t)v7);
  sub_2231D57D4(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231CDD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231CDC3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CDD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  unint64_t v8;
  BOOL v9;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unsigned __int8 v38;
  int v39;
  unint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  unsigned int v50;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;

  kdebug_trace();
  if (*(_DWORD *)(a4 + 32))
    _ZF = *(_DWORD *)(a4 + 36) == 0;
  else
    _ZF = 1;
  v7 = _ZF;
  v8 = *(_QWORD *)(a2 + 32);
  v55 = HIDWORD(v8);
  v56 = v8;
  if (HIDWORD(v8))
    v9 = *(_QWORD *)(a2 + 32) == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v11 = 0;
    v53 = a2;
    v54 = a4;
    v61 = v7;
    do
    {
      v12 = *(_DWORD *)(a2 + 40);
      v13 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * v11);
      v14 = *(_DWORD *)(a4 + 40);
      v15 = *(_QWORD *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 44) * v11);
      if ((v7 & 1) != 0)
        v15 = 0;
      v60 = v15;
      if ((v7 & 1) != 0)
        v14 = 0;
      v65 = v14;
      v16 = *(unsigned int *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 24);
      v18 = v17 + 2 * (*(_DWORD *)(a1 + 68) * v11);
      v19 = *(_DWORD *)(a3 + 40);
      v20 = (*(_DWORD *)(a3 + 44) * v11);
      v21 = *(_QWORD *)(a3 + 24);
      v22 = v21 + v20;
      v59 = v11;
      if (v17)
      {
        v23 = 0;
        v24 = 0;
        if ((v7 & 1) != 0)
        {
          v25 = 0;
          v26 = v56;
          do
          {
            v27 = *(unsigned __int8 *)(v13 + v23);
            v28 = v27 != 255;
            v29 = v27 << 8;
            v30 = (*(_BYTE *)(v22 + v24) == 0) & v28;
            if (!(_DWORD)v30)
              v29 = 65280;
            *(_QWORD *)(v18 + 2 * v25) = v29 | 0xFE00FE00FE000000 | v30;
            v25 += v16;
            v24 += v19;
            v23 += v12;
            --v26;
          }
          while (v26);
        }
        else
        {
          v46 = 0;
          v47 = 0;
          v48 = v56;
          do
          {
            v49 = 0;
            v50 = 255;
            if (!*(_BYTE *)(v22 + v24) && *(unsigned __int8 *)(v13 + v23) != 255)
            {
              _H0 = *(_WORD *)(v60 + 2 * v46);
              __asm { FCVT            S0, H0 }
              v49 = _S0 > 0.0;
              v50 = *(unsigned __int8 *)(v13 + v23);
            }
            *(_QWORD *)(v18 + 2 * v47) = v49 | ((unint64_t)v50 << 8) | 0xFE00FE00FE000000;
            v47 += v16;
            v46 += v65;
            v24 += v19;
            v23 += v12;
            --v48;
          }
          while (v48);
        }
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = v56;
        v64 = v13;
        v63 = v12;
        v62 = v21 + v20;
        do
        {
          if (*(_BYTE *)(v22 + v32))
            v36 = 1;
          else
            v36 = *(unsigned __int8 *)(v13 + v31) == 255;
          v37 = v36;
          if (v36)
            v38 = -1;
          else
            v38 = *(_BYTE *)(v13 + v31);
          if (((v37 | v7) & 1) != 0)
          {
            v39 = v37 ^ 1;
          }
          else
          {
            _H0 = *(_WORD *)(v60 + 2 * v33);
            __asm { FCVT            S0, H0 }
            v39 = _S0 > 0.0;
            v38 = *(_BYTE *)(v13 + v31);
          }
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v45 = (unint64_t *)(v18 + 2 * v34);
          v34 += v16;
          *v45 = v39 & 0xFFFF00FF | ((unint64_t)v38 << 8) | 0xFE00FE00FE000000;
          v33 += v65;
          v32 += v19;
          v31 += v63;
          --v35;
          v7 = v61;
          v13 = v64;
          v22 = v62;
        }
        while (v35);
      }
      v11 = v59 + 1;
      a4 = v54;
      a2 = v53;
    }
    while (v59 + 1 != (_DWORD)v55);
  }
  return kdebug_trace();
}

void sub_2231CE07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231CE090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231CE0A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC21230;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0uLL;
  sub_2231FDE98((uint64_t)(a1 + 1), &v8, &v6);
  v2 = v9;
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2231CE13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    sub_2245743F4();
  nullsub_30(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CE15C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 216;
  if (*(_BYTE *)(a1 + 296))
    return sub_2231CF16C(v3, a2);
  result = sub_2231CE38C(v3, a2);
  *(_BYTE *)(a1 + 296) = 1;
  return result;
}

uint64_t sub_2231CE1A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231CE208(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231CE334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CE350(_QWORD *a1)
{
  *a1 = &off_24EC21D68;
  sub_2244E3314((uint64_t)(a1 + 63));
  sub_2231F4908(a1 + 46);
  return sub_2231D0094((uint64_t)a1);
}

uint64_t sub_2231CE38C(uint64_t a1, uint64_t *a2)
{
  __n128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*a2)
  {
    sub_2232000D0(*(NSObject **)(*a2 + 64), (const void **)&v62);
    sub_223200B10(v62, &v61);
    v5 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    sub_2231FFEAC(*a2, v61, v4);
    v8 = *(std::__shared_weak_count **)(a1 + 8);
    v9 = v61;
    v61 = 0uLL;
    *(_OWORD *)a1 = v9;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v61 = 0uLL;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = a2[2];
      if (v15)
        goto LABEL_18;
LABEL_26:
      v61 = 0uLL;
      v21 = *(std::__shared_weak_count **)(a1 + 24);
      *(_OWORD *)(a1 + 16) = 0u;
      if (!v21)
        goto LABEL_31;
      goto LABEL_27;
    }
  }
  v15 = a2[2];
  if (!v15)
    goto LABEL_26;
LABEL_18:
  sub_2232000D0(*(NSObject **)(v15 + 64), (const void **)&v62);
  sub_223200B10(v62, &v61);
  v17 = v63;
  if (v63)
  {
    v18 = (unint64_t *)&v63->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sub_2231FFEAC(a2[2], v61, v16);
  v20 = v61;
  v61 = 0uLL;
  v21 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v20;
  if (v21)
  {
LABEL_27:
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_31:
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      v27 = a2[4];
      if (v27)
        goto LABEL_36;
LABEL_44:
      v61 = 0uLL;
      v32 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = 0u;
      if (!v32)
        goto LABEL_49;
      goto LABEL_45;
    }
  }
  v27 = a2[4];
  if (!v27)
    goto LABEL_44;
LABEL_36:
  sub_2232023BC(*(NSObject **)(v27 + 112), (const void **)&v62);
  sub_223202E00(v62, &v61);
  v28 = v63;
  if (v63)
  {
    v29 = (unint64_t *)&v63->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_223202198(a2[4], v61);
  v31 = v61;
  v61 = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v31;
  if (v32)
  {
LABEL_45:
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_49:
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v38 = a2[6];
      if (v38)
        goto LABEL_54;
LABEL_62:
      v61 = 0uLL;
      v43 = *(std::__shared_weak_count **)(a1 + 56);
      *(_OWORD *)(a1 + 48) = 0u;
      if (!v43)
        goto LABEL_67;
      goto LABEL_63;
    }
  }
  v38 = a2[6];
  if (!v38)
    goto LABEL_62;
LABEL_54:
  sub_2231FDFBC(*(NSObject **)(v38 + 64), (const void **)&v62);
  sub_2231FEA00(v62, &v61);
  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  sub_2232050AC(a2[6], v61);
  v42 = v61;
  v61 = 0uLL;
  v43 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v42;
  if (v43)
  {
LABEL_63:
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_67:
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v49 = a2[8];
      if (v49)
        goto LABEL_72;
LABEL_80:
      v61 = 0uLL;
      v54 = *(std::__shared_weak_count **)(a1 + 72);
      *(_OWORD *)(a1 + 64) = 0u;
      if (!v54)
        goto LABEL_85;
      goto LABEL_81;
    }
  }
  v49 = a2[8];
  if (!v49)
    goto LABEL_80;
LABEL_72:
  sub_2231FDFBC(*(NSObject **)(v49 + 64), (const void **)&v62);
  sub_2231FEA00(v62, &v61);
  v50 = v63;
  if (v63)
  {
    v51 = (unint64_t *)&v63->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_2232050AC(a2[8], v61);
  v53 = v61;
  v61 = 0uLL;
  v54 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v53;
  if (v54)
  {
LABEL_81:
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_85:
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return a1;
}

void sub_2231CE8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_223167354((uint64_t)&a9);
  sub_223167354(v13);
  sub_223167354(v12);
  sub_223167354(v11);
  sub_223167354(v10);
  sub_223167354(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CE998(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (!v5)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v12 = a2[1];
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v9 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v12;
    if (!v9)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v8 = a2[1];
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v9 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v8;
    if (!v9)
      goto LABEL_11;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_11:
  v13 = a2[2];
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v13;
  if (!v14)
    goto LABEL_15;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v21 = a2[3];
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v18 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v21;
    if (!v18)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v17 = a2[3];
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v18 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v17;
    if (!v18)
      goto LABEL_21;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_21:
  v22 = a2[4];
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  v23 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v22;
  if (!v23)
    return a1;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
    return a1;
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  return a1;
}

uint64_t sub_2231CEB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v47;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  sub_2231CEED8(a2, (uint64_t *)&v47);
  v11 = v47;
  v47 = 0uLL;
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_2231CEED8(a3, (uint64_t *)&v47);
  v18 = v47;
  v47 = 0uLL;
  v19 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_2231CEFB4(a4, (uint64_t *)&v47);
  v25 = v47;
  v47 = 0uLL;
  v26 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_2231CF090(a5, (uint64_t *)&v47);
  v32 = v47;
  v47 = 0uLL;
  v33 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v32;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_2231CF090(a6, (uint64_t *)&v47);
  v39 = v47;
  v47 = 0uLL;
  v40 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  return a1;
}

void sub_2231CEE94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_223167354(v5);
  sub_223167354(v4);
  sub_223167354(v3);
  sub_223167354(v2);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CEED8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (*(_DWORD *)(result + 32))
    v3 = *(_DWORD *)(result + 36) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v4 = result;
    sub_2232000D0(*(NSObject **)(result + 32), (const void **)&v9);
    sub_223200B10(v9, a2);
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return sub_223205A14(v4, *a2, v5);
  }
  return result;
}

void sub_2231CEF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231CEFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CEFB4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  if (*(_DWORD *)(result + 56))
    v3 = *(_DWORD *)(result + 60) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v4 = result;
    sub_2232023BC(*(NSObject **)(result + 56), (const void **)&v8);
    sub_223202E00(v8, a2);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    return sub_2232061EC(v4, *a2);
  }
  return result;
}

void sub_2231CF068(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231CF07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CF090@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  if (*(_DWORD *)(result + 32))
    v3 = *(_DWORD *)(result + 36) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v4 = result;
    sub_2231FDFBC(*(NSObject **)(result + 32), (const void **)&v8);
    sub_2231FEA00(v8, a2);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    return sub_223206984(v4, *a2);
  }
  return result;
}

void sub_2231CF144(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231CF158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CF16C(uint64_t a1, uint64_t *a2)
{
  __n128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  if (a2 == (uint64_t *)a1)
    return a1;
  if (*a2)
  {
    sub_2232000D0(*(NSObject **)(*a2 + 64), (const void **)&v62);
    sub_223200B10(v62, &v61);
    v5 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    sub_2231FFEAC(*a2, v61, v4);
    v8 = v61;
    v61 = 0uLL;
    v9 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v8;
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    v61 = 0uLL;
    v9 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = 0u;
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (!*((_QWORD *)&v61 + 1))
      goto LABEL_18;
    goto LABEL_15;
  }
LABEL_14:
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_18;
LABEL_15:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = a2[2];
    if (v15)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_18:
  v15 = a2[2];
  if (v15)
  {
LABEL_19:
    sub_2232000D0(*(NSObject **)(v15 + 64), (const void **)&v62);
    sub_223200B10(v62, &v61);
    v17 = v63;
    if (v63)
    {
      v18 = (unint64_t *)&v63->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_2231FFEAC(a2[2], v61, v16);
    v20 = v61;
    v61 = 0uLL;
    v21 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v20;
    if (!v21)
      goto LABEL_33;
    goto LABEL_30;
  }
LABEL_29:
  v61 = 0uLL;
  v21 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  if (!v21)
    goto LABEL_33;
LABEL_30:
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (!*((_QWORD *)&v61 + 1))
      goto LABEL_37;
    goto LABEL_34;
  }
LABEL_33:
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_37;
LABEL_34:
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = a2[4];
    if (v27)
      goto LABEL_38;
    goto LABEL_48;
  }
LABEL_37:
  v27 = a2[4];
  if (v27)
  {
LABEL_38:
    sub_2232023BC(*(NSObject **)(v27 + 112), (const void **)&v62);
    sub_223202E00(v62, &v61);
    v28 = v63;
    if (v63)
    {
      v29 = (unint64_t *)&v63->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    sub_223202198(a2[4], v61);
    v31 = v61;
    v61 = 0uLL;
    v32 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v31;
    if (!v32)
      goto LABEL_52;
    goto LABEL_49;
  }
LABEL_48:
  v61 = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = 0u;
  if (!v32)
    goto LABEL_52;
LABEL_49:
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (!*((_QWORD *)&v61 + 1))
      goto LABEL_56;
    goto LABEL_53;
  }
LABEL_52:
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_56;
LABEL_53:
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = a2[6];
    if (v38)
      goto LABEL_57;
    goto LABEL_67;
  }
LABEL_56:
  v38 = a2[6];
  if (v38)
  {
LABEL_57:
    sub_2231FDFBC(*(NSObject **)(v38 + 64), (const void **)&v62);
    sub_2231FEA00(v62, &v61);
    v39 = v63;
    if (v63)
    {
      v40 = (unint64_t *)&v63->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    sub_2232050AC(a2[6], v61);
    v42 = v61;
    v61 = 0uLL;
    v43 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v42;
    if (!v43)
      goto LABEL_71;
    goto LABEL_68;
  }
LABEL_67:
  v61 = 0uLL;
  v43 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = 0u;
  if (!v43)
    goto LABEL_71;
LABEL_68:
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (!*((_QWORD *)&v61 + 1))
      goto LABEL_75;
    goto LABEL_72;
  }
LABEL_71:
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_75;
LABEL_72:
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v49 = a2[8];
    if (v49)
      goto LABEL_76;
    goto LABEL_86;
  }
LABEL_75:
  v49 = a2[8];
  if (v49)
  {
LABEL_76:
    sub_2231FDFBC(*(NSObject **)(v49 + 64), (const void **)&v62);
    sub_2231FEA00(v62, &v61);
    v50 = v63;
    if (v63)
    {
      v51 = (unint64_t *)&v63->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    sub_2232050AC(a2[8], v61);
    v53 = v61;
    v61 = 0uLL;
    v54 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v53;
    if (!v54)
      goto LABEL_90;
    goto LABEL_87;
  }
LABEL_86:
  v61 = 0uLL;
  v54 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = 0u;
  if (!v54)
    goto LABEL_90;
LABEL_87:
  v55 = (unint64_t *)&v54->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
      goto LABEL_91;
    return a1;
  }
LABEL_90:
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (!*((_QWORD *)&v61 + 1))
    return a1;
LABEL_91:
  v58 = (unint64_t *)&v57->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (v59)
    return a1;
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  return a1;
}

void sub_2231CF6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231CF840(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  __int128 v7[8];
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;

  *(_QWORD *)(a1 + 24) = &off_24EC20868;
  *(_QWORD *)(a1 + 16) = &off_24EC20828;
  *(_QWORD *)a1 = off_24EC21D40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = &off_24EC207B8;
  v5 = operator new(0x30uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24EC24E18;
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = 0;
  *(_QWORD *)(a1 + 112) = v5 + 3;
  *(_QWORD *)(a1 + 120) = v5;
  *(_DWORD *)(a1 + 128) = 0;
  *(int32x2_t *)(a1 + 132) = vdup_n_s32(0xC77FE000);
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 140) = -947920896;
  v12 = 0;
  v11 = 0;
  v13 = 0;
  v7[0] = (__int128)vdupq_n_s32(0x3CF83E10u);
  v7[1] = v7[0];
  v7[2] = v7[0];
  v7[3] = v7[0];
  v7[4] = v7[0];
  v7[5] = v7[0];
  v7[6] = v7[0];
  v7[7] = v7[0];
  v8 = 1022901776;
  v9 = 32;
  v10 = 0;
  v14 = 0;
  v15 = 1065353216;
  v16 = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  v17 = 0;
  v18 = 0;
  sub_2232071B8((_QWORD *)(a1 + 176), &v17, &v18, 1, v7, 1, 0);
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  sub_22452ABC8((_OWORD *)(a1 + 312));
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  return a1;
}

void sub_2231CF9D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(v3 + 296))
    sub_2231DC94C(v5);
  sub_2231CFA24(v4);
  sub_223167354(v3 + 112);
  *v1 = v6;
  nullsub_30(v2);
  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CFA24(uint64_t a1)
{
  BOOL v2;
  int v3;

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_DWORD *)(a1 + 60))
      v2 = *(_DWORD *)(a1 + 56) == 0;
    else
      v2 = 1;
    if (v2)
      v3 = 0;
    else
      v3 = *(_DWORD *)(a1 + 60);
    if (v3 * (((381774871 * (unint64_t)(*(_QWORD *)(a1 + 64) >> 34)) >> 32) >> 2) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  sub_2244E3314(a1 + 32);
  return a1;
}

uint64_t sub_2231CFAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = &off_24EC20828;
  *(_QWORD *)(a1 + 24) = &off_24EC20868;
  *(_QWORD *)a1 = off_24EC21D40;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 16) = &off_24EC207B8;
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(a1 + 144) = v10;
  sub_223207688(a1 + 176, a2 + 176);
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    sub_2231CE38C(a1 + 216, (uint64_t *)(a2 + 216));
    *(_BYTE *)(a1 + 296) = 1;
  }
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  sub_22319ED0C((_QWORD *)(a1 + 312), a2 + 312);
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  if (*(_BYTE *)(a2 + 364))
  {
    v11 = *(_OWORD *)(a2 + 328);
    v12 = *(_OWORD *)(a2 + 344);
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 328) = v11;
    *(_OWORD *)(a1 + 344) = v12;
    *(_BYTE *)(a1 + 364) = 1;
  }
  return a1;
}

void sub_2231CFC24(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(v2 + 296))
    sub_2231DC94C(v5);
  sub_2231CFA24(v2 + 144);
  sub_223167354(v4);
  *v1 = v6;
  nullsub_30(v3);
  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231CFC70(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  int v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 112);
  v6 = *(_QWORD *)(a2 + 120);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_2231CFEAC(a1 + 144, a2 + 144);
  v13 = (_QWORD *)(a1 + 216);
  v14 = (uint64_t *)(a2 + 216);
  if (*(unsigned __int8 *)(a1 + 296) == *(unsigned __int8 *)(a2 + 296))
  {
    if (*(_BYTE *)(a1 + 296))
      sub_2231CF16C((uint64_t)v13, v14);
  }
  else if (*(_BYTE *)(a1 + 296))
  {
    sub_2231DC94C(v13);
    *(_BYTE *)(a1 + 296) = 0;
  }
  else
  {
    sub_2231CE38C((uint64_t)v13, v14);
    *(_BYTE *)(a1 + 296) = 1;
  }
  v15 = *(_DWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_DWORD *)(a1 + 304) = v15;
  sub_2231DD328(&v30, a2 + 312);
  v16 = v30;
  v30 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a1 + 320);
  *(_OWORD *)(a1 + 312) = v16;
  if (!v17)
    goto LABEL_19;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (!*((_QWORD *)&v30 + 1))
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (!*((_QWORD *)&v30 + 1))
      goto LABEL_25;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_25:
  v23 = (_OWORD *)(a1 + 328);
  v24 = (__int128 *)(a2 + 328);
  if (*(unsigned __int8 *)(a1 + 364) == *(unsigned __int8 *)(a2 + 364))
  {
    if (*(_BYTE *)(a1 + 364))
    {
      v25 = *v24;
      v26 = *(_OWORD *)(a2 + 344);
      *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
      *v23 = v25;
      *(_OWORD *)(a1 + 344) = v26;
    }
    return a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 364))
    {
      *(_BYTE *)(a1 + 364) = 0;
    }
    else
    {
      v28 = *v24;
      v29 = *(_OWORD *)(a2 + 344);
      *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
      *v23 = v28;
      *(_OWORD *)(a1 + 344) = v29;
      *(_BYTE *)(a1 + 364) = 1;
    }
    return a1;
  }
}

uint64_t sub_2231CFEAC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8[4];
  _QWORD v9[3];
  __int128 v10;

  if (*(_QWORD *)(a1 + 40)
    && *(_DWORD *)a2 == *(_DWORD *)a1
    && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a1 + 4)
    && *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8)
    && *(_DWORD *)(a2 + 12) == *(_DWORD *)(a1 + 12))
  {
    v8[0] = a2;
    v8[1] = a1;
    sub_223207A0C(v8);
    return a1;
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *(_OWORD *)((char *)&v8[1] + 4) = *(_OWORD *)(a2 + 12);
    sub_223207688((uint64_t)v9, a2 + 32);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)&v8[1] + 4);
    *(_OWORD *)(a1 + 56) = v10;
    if (*(_QWORD *)(a1 + 40))
    {
      v4 = !*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 56) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(a1 + 60);
      if (v5 * (((381774871 * (unint64_t)(*(_QWORD *)(a1 + 64) >> 34)) >> 32) >> 2) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    sub_2244E32D0((_QWORD *)(a1 + 32), v9);
    if (v9[1])
    {
      if (DWORD1(v10))
        v6 = (_DWORD)v10 == 0;
      else
        v6 = 1;
      if (v6)
        v7 = 0;
      else
        v7 = DWORD1(v10);
      if (v7 * (((381774871 * (unint64_t)(*((_QWORD *)&v10 + 1) >> 34)) >> 32) >> 2) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    sub_2244E3314((uint64_t)v9);
    return a1;
  }
}

void sub_2231D0080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231CFA24((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D0094(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  BOOL v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a1 = off_24EC21D40;
  v2 = *(std::__shared_weak_count **)(a1 + 320);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(_BYTE *)(a1 + 296))
    sub_2231DC94C((_QWORD *)(a1 + 216));
  if (*(_QWORD *)(a1 + 184))
  {
    v5 = !*(_DWORD *)(a1 + 204) || *(_DWORD *)(a1 + 200) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a1 + 204);
    if (v6 * (((381774871 * (unint64_t)(*(_QWORD *)(a1 + 208) >> 34)) >> 32) >> 2) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  sub_2244E3314(a1 + 176);
  v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 16) = &off_24EC20828;
  nullsub_30(a1 + 24);
  nullsub_30(a1 + 16);
  return a1;
}

BOOL sub_2231D01EC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) && *(_DWORD *)(a1 + 108) != 0;
}

uint64_t sub_2231D020C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_2231D0214(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_2231D021C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_2231D0224(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_2231D022C@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v3;
  float32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t (**v11)();
  uint64_t (**v12)(_QWORD);
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  int v16;
  float32x2_t v17;
  _QWORD v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;

  v3 = vadd_f32(a1[5], (float32x2_t)0x3F0000003F000000);
  v18[0] = a1[4];
  v18[1] = v3;
  v4 = a1[13];
  sub_223207E58(&v19, (int *)v18);
  v12 = &off_24EC20868;
  v13 = v20;
  v14 = v21;
  *(_OWORD *)v15 = v22;
  *(_OWORD *)&v15[16] = v23;
  v16 = v24;
  v17 = v4;
  nullsub_30(&v19);
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)(a2 + 20) = 0u;
  *(_OWORD *)(a2 + 36) = 0u;
  *(_QWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 60) = 1065353216;
  v5 = *(_QWORD *)v15;
  v6 = *(_QWORD *)&v15[12];
  v7 = *(_DWORD *)&v15[20];
  v8 = *(_QWORD *)&v15[24];
  v9 = v16;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)&v15[8];
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 32) = v8;
  v11 = &off_24EC220E0;
  nullsub_30(&v12);
  return nullsub_30(&v11);
}

uint64_t sub_2231D0324@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v3;
  float32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v9)();
  uint64_t (**v10)(_QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  float32x2_t v16;
  _QWORD v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;

  v3 = vadd_f32(a1[5], (float32x2_t)0x3F0000003F000000);
  v17[0] = a1[4];
  v17[1] = v3;
  v4 = a1[13];
  sub_223207E58(&v18, (int *)v17);
  v10 = &off_24EC20868;
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  v15 = v23;
  v16 = v4;
  nullsub_30(&v18);
  LODWORD(v5) = 0;
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)(a2 + 20) = 0u;
  *(_OWORD *)(a2 + 36) = 0u;
  *(_QWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 60) = 1065353216;
  v6 = *((_QWORD *)&v12 + 1);
  HIDWORD(v5) = DWORD1(v12);
  LODWORD(v7) = v12;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 40) = 1065353216;
  *(_QWORD *)(a2 + 32) = v6;
  v9 = &off_24EC220E0;
  nullsub_30(&v10);
  return nullsub_30(&v9);
}

uint64_t sub_2231D041C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_2231D0424(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 112);
  if (!result)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 401, (uint64_t)"clouds", 6, (uint64_t)"Ptr to JasperClouds expected non-null in KF bundle", 50, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(_QWORD *)(a1 + 112);
  }
  return result;
}

uint64_t sub_2231D0490(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 112);
  if (!result)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 406, (uint64_t)"clouds", 6, (uint64_t)"Ptr to JasperClouds expected non-null in KF bundle", 50, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(_QWORD *)(a1 + 112);
  }
  return result;
}

uint64_t sub_2231D04FC(uint64_t a1)
{
  return a1 + 144;
}

uint64_t sub_2231D0504(uint64_t a1)
{
  return a1 + 216;
}

uint64_t sub_2231D050C(uint64_t a1)
{
  return a1 + 304;
}

uint64_t sub_2231D0514(uint64_t a1)
{
  return a1 + 328;
}

uint64_t sub_2231D051C(uint64_t a1)
{
  return a1 + 312;
}

BOOL sub_2231D0524(const void **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  const void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  const void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_15:
      v14 = *a1;
      goto LABEL_16;
    }
  }
  if (!v5)
    goto LABEL_15;
LABEL_7:
  v10 = *(const void **)a2;
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v9)
    goto LABEL_12;
  v11 = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v14 = *a1;
    if (v10)
      return sub_224532A0C(v14, *(const void **)a2);
  }
  else
  {
LABEL_12:
    v14 = *a1;
    if (v10)
      return sub_224532A0C(v14, *(const void **)a2);
  }
LABEL_16:
  v16 = (std::__shared_weak_count *)a1[1];
  if (!v16)
    goto LABEL_21;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v14)
      return 0;
  }
  else
  {
LABEL_21:
    if (v14)
      return 0;
  }
  v21 = *(const void **)a2;
  v20 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v20)
    return v21 == 0;
  v22 = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (v24)
    return v21 == 0;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return v21 == 0;
}

uint64_t *sub_2231D06E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v4 = sub_2231CFAC8((uint64_t)a1, a2);
  *(_QWORD *)v4 = &off_24EC21D68;
  v5 = (uint64_t *)(v4 + 368);
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  v7 = 0;
  *(_BYTE *)(v4 + 500) = 0;
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 464) = 0;
  *(_BYTE *)(v4 + 488) = 0;
  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  sub_223208FD4(v4 + 504, (unsigned int *)&v8, &v10, 1, &v7, 1, 0);
  sub_2231D0838((uint64_t *)(a2 + 368), v5, 3u);
  sub_2231D0838((uint64_t *)(a2 + 384), a1 + 48, 3u);
  sub_2231D0838((uint64_t *)(a2 + 400), a1 + 50, 0x1Fu);
  sub_2231D0838((uint64_t *)(a2 + 416), a1 + 52, 0x26u);
  sub_2231D0838((uint64_t *)(a2 + 432), a1 + 54, 0x26u);
  sub_2231D0838((uint64_t *)(a2 + 448), a1 + 56, 0x1Fu);
  sub_2231D0BB8((uint64_t)(a1 + 58), (__int128 *)(a2 + 464));
  return a1;
}

void sub_2231D07F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_2244E3314(v3);
  sub_2231F4908(v2);
  sub_2231D0094(v1);
  _Unwind_Resume(a1);
}

void sub_2231D0838(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  _DWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[2];
  char v29;
  __int128 v30;

  v5 = (_DWORD *)*a1;
  if (v5)
  {
    v6 = *a2;
    if (*a2)
    {
      if (v5[8] != *(_DWORD *)(v6 + 32) || v5[9] != *(_DWORD *)(v6 + 36))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 415, (uint64_t)"source_ptr->Size() == target_ptr->Size()", 40, (uint64_t)"Output image size does not match input image", 44, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v5 = (_DWORD *)*a1;
        v6 = *a2;
      }
      sub_2231DD4C4((uint64_t)v5, v6);
      return;
    }
    __p[0] = &v30;
    __p[1] = v5;
    if (sub_2231DD68C(v5[14], (uint64_t)__p))
    {
      v29 = 9;
      strcpy((char *)__p, "CopyImage");
      if (*a1)
      {
        sub_223C867D8(*(_QWORD *)(*a1 + 32), a3, (uint64_t *)__p, (uint64_t *)&v30);
        sub_2231DD4C4(*a1, v30);
        v11 = v30;
        v30 = 0uLL;
        v12 = (std::__shared_weak_count *)a2[1];
        *(_OWORD *)a2 = v11;
        if (!v12)
        {
LABEL_30:
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          if (v29 < 0)
            operator delete(__p[0]);
          return;
        }
      }
      else
      {
        v30 = 0uLL;
        v12 = (std::__shared_weak_count *)a2[1];
        *(_OWORD *)a2 = 0u;
        if (!v12)
          goto LABEL_30;
      }
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_30;
    }
    if (*a1)
    {
      sub_2231F4AAC(a3, *(_QWORD *)(*a1 + 32), (const void **)__p);
      sub_2231F5540((uint64_t)__p[0], &v30);
      v13 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v14 = (unint64_t *)((char *)__p[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      sub_2231DD4C4(*a1, v30);
      v16 = v30;
      v30 = 0uLL;
      v17 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v16;
      if (!v17)
        goto LABEL_42;
    }
    else
    {
      v30 = 0uLL;
      v17 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = 0u;
      if (!v17)
      {
LABEL_42:
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        if (*((_QWORD *)&v30 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        return;
      }
    }
    v23 = (unint64_t *)&v17->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_42;
  }
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2231D0B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231D0B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_223167354((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D0BB8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  __int128 v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 48)
    && *(_DWORD *)a2 == *(_DWORD *)a1
    && *((_DWORD *)a2 + 1) == *(_DWORD *)(a1 + 4)
    && *((_DWORD *)a2 + 2) == *(_DWORD *)(a1 + 8)
    && *((_DWORD *)a2 + 3) == *(_DWORD *)(a1 + 12)
    && *((_DWORD *)a2 + 4) == *(_DWORD *)(a1 + 16)
    && *((_DWORD *)a2 + 5) == *(_DWORD *)(a1 + 20))
  {
    *(_QWORD *)&v6 = a2;
    *((_QWORD *)&v6 + 1) = a1;
    sub_223209524((size_t *)&v6);
    return a1;
  }
  else
  {
    v4 = a2[1];
    v6 = *a2;
    v7 = v4;
    v8 = *((_QWORD *)a2 + 4);
    sub_223209D60((uint64_t)v9, (uint64_t)a2 + 40);
    v5 = v7;
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    sub_2244E32D0((_QWORD *)(a1 + 40), v9);
    sub_2244E3314((uint64_t)v9);
    return a1;
  }
}

void sub_2231D0CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2244E3314(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D0CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;

  v4 = sub_2231D0F48(a1, a2);
  *(_QWORD *)v4 = &off_24EC21D68;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  v34 = 0;
  *(_BYTE *)(v4 + 500) = 0;
  v5 = (_QWORD *)(v4 + 504);
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 464) = 0;
  *(_BYTE *)(v4 + 488) = 0;
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  sub_223208FD4(v4 + 504, (unsigned int *)&v35, &v37, 1, &v34, 1, 0);
  v6 = *(_OWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 376);
  *(_OWORD *)(a1 + 368) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 392);
  *(_OWORD *)(a1 + 384) = v10;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a2 + 408) = 0;
  v15 = *(std::__shared_weak_count **)(a1 + 408);
  *(_OWORD *)(a1 + 400) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 424);
  *(_OWORD *)(a1 + 416) = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_OWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0;
  v23 = *(std::__shared_weak_count **)(a1 + 440);
  *(_OWORD *)(a1 + 432) = v22;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a2 + 456) = 0;
  v27 = *(std::__shared_weak_count **)(a1 + 456);
  *(_OWORD *)(a1 + 448) = v26;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(_OWORD *)(a2 + 464);
  v31 = *(_OWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 464) = v30;
  *(_OWORD *)(a1 + 480) = v31;
  v32 = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 528) = v32;
  sub_2244E32D0(v5, (_QWORD *)(a2 + 504));
  return a1;
}

uint64_t sub_2231D0F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = off_24EC21D40;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &off_24EC20828;
  *(_QWORD *)(a1 + 24) = &off_24EC20868;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 16) = &off_24EC207B8;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(a1 + 144) = v7;
  sub_2244E32B8((__n128 *)(a1 + 176), (__n128 *)(a2 + 176));
  v8 = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = v8;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    sub_2231CE998(a1 + 216, (__int128 *)(a2 + 216));
    *(_BYTE *)(a1 + 296) = 1;
  }
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v9 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v9;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  if (*(_BYTE *)(a2 + 364))
  {
    v10 = *(_OWORD *)(a2 + 328);
    v11 = *(_OWORD *)(a2 + 344);
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 328) = v10;
    *(_OWORD *)(a1 + 344) = v11;
    *(_BYTE *)(a1 + 364) = 1;
  }
  return a1;
}

uint64_t *sub_2231D1074(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2231CFC70((uint64_t)a1, a2);
  sub_2231D0838((uint64_t *)(a2 + 368), (uint64_t *)(v4 + 368), 3u);
  sub_2231D0838((uint64_t *)(a2 + 384), a1 + 48, 3u);
  sub_2231D0838((uint64_t *)(a2 + 400), a1 + 50, 0x1Fu);
  sub_2231D0838((uint64_t *)(a2 + 416), a1 + 52, 0x26u);
  sub_2231D0838((uint64_t *)(a2 + 432), a1 + 54, 0x26u);
  sub_2231D0838((uint64_t *)(a2 + 448), a1 + 56, 0x1Fu);
  sub_2231D0BB8((uint64_t)(a1 + 58), (__int128 *)(a2 + 464));
  return a1;
}

_QWORD *sub_2231D1108(_QWORD *a1, uint64_t a2)
{
  sub_2231D1130(a1, a2, 63);
  return a1;
}

uint64_t sub_2231D1130(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;

  sub_2231CFC70((uint64_t)a1, a2);
  if ((a3 & 1) == 0)
    goto LABEL_9;
  v7 = *(_QWORD *)(a2 + 368);
  v6 = *(_QWORD *)(a2 + 376);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)a1[47];
  a1[46] = v7;
  a1[47] = v6;
  if (!v10)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((a3 & 2) == 0)
      goto LABEL_19;
  }
  else
  {
LABEL_9:
    if ((a3 & 2) == 0)
      goto LABEL_19;
  }
  v14 = *(_QWORD *)(a2 + 384);
  v13 = *(_QWORD *)(a2 + 392);
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)a1[49];
  a1[48] = v14;
  a1[49] = v13;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((a3 & 4) == 0)
    goto LABEL_27;
LABEL_19:
  v21 = *(_QWORD *)(a2 + 400);
  v20 = *(_QWORD *)(a2 + 408);
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (std::__shared_weak_count *)a1[51];
  a1[50] = v21;
  a1[51] = v20;
  if (!v24)
    goto LABEL_27;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if ((a3 & 8) == 0)
      goto LABEL_37;
  }
  else
  {
LABEL_27:
    if ((a3 & 8) == 0)
      goto LABEL_37;
  }
  v28 = *(_QWORD *)(a2 + 416);
  v27 = *(_QWORD *)(a2 + 424);
  if (v27)
  {
    v29 = (unint64_t *)(v27 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = (std::__shared_weak_count *)a1[53];
  a1[52] = v28;
  a1[53] = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if ((a3 & 0x10) == 0)
    goto LABEL_45;
LABEL_37:
  v35 = *(_QWORD *)(a2 + 432);
  v34 = *(_QWORD *)(a2 + 440);
  if (v34)
  {
    v36 = (unint64_t *)(v34 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = (std::__shared_weak_count *)a1[55];
  a1[54] = v35;
  a1[55] = v34;
  if (!v38)
    goto LABEL_45;
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if ((a3 & 0x20) == 0)
      return sub_2231D0BB8((uint64_t)(a1 + 58), (__int128 *)(a2 + 464));
  }
  else
  {
LABEL_45:
    if ((a3 & 0x20) == 0)
      return sub_2231D0BB8((uint64_t)(a1 + 58), (__int128 *)(a2 + 464));
  }
  v42 = *(_QWORD *)(a2 + 448);
  v41 = *(_QWORD *)(a2 + 456);
  if (v41)
  {
    v43 = (unint64_t *)(v41 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = (std::__shared_weak_count *)a1[57];
  a1[56] = v42;
  a1[57] = v41;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      return sub_2231D0BB8((uint64_t)(a1 + 58), (__int128 *)(a2 + 464));
    }
  }
  return sub_2231D0BB8((uint64_t)(a1 + 58), (__int128 *)(a2 + 464));
}

uint64_t sub_2231D13C0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v54;
  void *__p[4];
  __int128 v56;
  char v57;

  v6 = sub_2231CF840(a1, a2);
  *(_QWORD *)v6 = &off_24EC21D68;
  v54 = v6 + 368;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  v57 = 0;
  *(_BYTE *)(v6 + 500) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  __p[0] = 0;
  LODWORD(__p[1]) = 0;
  *(_QWORD *)&v56 = 0;
  DWORD2(v56) = 0;
  sub_223208FD4(v6 + 504, (unsigned int *)&v56, (uint64_t *)__p, 1, &v57, 1, 0);
  for (i = 0; i != 6; ++i)
  {
    if (((a3 >> i) & 1) != 0)
    {
      v8 = dword_2245BBE5C[i];
      v9 = *(_QWORD *)(a2 + 88);
      switch((char)i)
      {
        case 0:
          strcpy((char *)__p, "KeyframeBundleCpuDepth");
          HIBYTE(__p[2]) = 22;
          sub_223C867D8(v9, v8, (uint64_t *)__p, (uint64_t *)&v56);
          v10 = v56;
          v56 = 0uLL;
          v11 = *(std::__shared_weak_count **)(a1 + 376);
          *(_OWORD *)(a1 + 368) = v10;
          if (!v11)
            goto LABEL_13;
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          else
          {
LABEL_13:
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          goto LABEL_2;
        case 1:
          __p[0] = operator new(0x20uLL);
          *(_OWORD *)&__p[1] = xmmword_2245B8D50;
          strcpy((char *)__p[0], "KeyframeBundleCpuConfidence");
          sub_223C867D8(v9, v8, (uint64_t *)__p, (uint64_t *)&v56);
          v28 = v56;
          v56 = 0uLL;
          v29 = *(std::__shared_weak_count **)(a1 + 392);
          *(_OWORD *)(a1 + 384) = v28;
          if (!v29)
            goto LABEL_35;
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          else
          {
LABEL_35:
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          v32 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v32);
          while (__stlxr(v16 - 1, v32));
          goto LABEL_2;
        case 2:
          strcpy((char *)__p, "KeyframeBundleCpuColor");
          HIBYTE(__p[2]) = 22;
          sub_223C867D8(v9, v8, (uint64_t *)__p, (uint64_t *)&v56);
          v33 = v56;
          v56 = 0uLL;
          v34 = *(std::__shared_weak_count **)(a1 + 408);
          *(_OWORD *)(a1 + 400) = v33;
          if (!v34)
            goto LABEL_43;
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          else
          {
LABEL_43:
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          v37 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v37);
          while (__stlxr(v16 - 1, v37));
          goto LABEL_2;
        case 3:
          __p[0] = operator new(0x20uLL);
          *(_OWORD *)&__p[1] = xmmword_2245B8D00;
          strcpy((char *)__p[0], "KeyframeBundleCpuSemantic");
          sub_223C867D8(v9, v8, (uint64_t *)__p, (uint64_t *)&v56);
          v38 = v56;
          v56 = 0uLL;
          v39 = *(std::__shared_weak_count **)(a1 + 424);
          *(_OWORD *)(a1 + 416) = v38;
          if (!v39)
            goto LABEL_51;
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          else
          {
LABEL_51:
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          v42 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v42);
          while (__stlxr(v16 - 1, v42));
          goto LABEL_2;
        case 4:
          __p[0] = operator new(0x20uLL);
          *(_OWORD *)&__p[1] = xmmword_2245B8D00;
          strcpy((char *)__p[0], "KeyframeBundleCpuMaterial");
          sub_223C867D8(v9, v8, (uint64_t *)__p, (uint64_t *)&v56);
          v43 = v56;
          v56 = 0uLL;
          v44 = *(std::__shared_weak_count **)(a1 + 440);
          *(_OWORD *)(a1 + 432) = v43;
          if (!v44)
            goto LABEL_59;
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          else
          {
LABEL_59:
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          v47 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v47);
          while (__stlxr(v16 - 1, v47));
          goto LABEL_2;
        case 5:
          __p[0] = operator new(0x20uLL);
          *(_OWORD *)&__p[1] = xmmword_2245B9420;
          strcpy((char *)__p[0], "KeyframeBundleCpuNormals");
          sub_223C867D8(v9, v8, (uint64_t *)__p, (uint64_t *)&v56);
          v48 = v56;
          v56 = 0uLL;
          v49 = *(std::__shared_weak_count **)(a1 + 456);
          *(_OWORD *)(a1 + 448) = v48;
          if (!v49)
            goto LABEL_67;
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          else
          {
LABEL_67:
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_4;
          }
          v52 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v52);
          while (__stlxr(v16 - 1, v52));
LABEL_2:
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
LABEL_4:
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          continue;
        default:
          sub_2231F4AAC(dword_2245BBE5C[i], *(_QWORD *)(a2 + 88), (const void **)__p);
          sub_2231F5540((uint64_t)__p[0], &v56);
          v17 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v18 = (unint64_t *)((char *)__p[1] + 8);
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v20 = v54 + 16 * i;
          v21 = v56;
          v56 = 0uLL;
          v22 = *(std::__shared_weak_count **)(v20 + 8);
          *(_OWORD *)v20 = v21;
          if (!v22)
            goto LABEL_26;
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
            v25 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              continue;
          }
          else
          {
LABEL_26:
            v25 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              continue;
          }
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
          break;
      }
    }
  }
  return a1;
}

void sub_2231D1A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;

  sub_2231F4908(a16);
  sub_2231D0094(v16);
  _Unwind_Resume(a1);
}

void sub_2231D1A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  sub_2244E3314(a10);
  sub_2231F4908(a16);
  sub_2231D0094(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D1AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *__p[4];
  __int128 v59;
  char v60;

  v6 = sub_2231CF840(a1, a2);
  *(_QWORD *)v6 = &off_24EC21D68;
  v7 = v6 + 368;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  v60 = 0;
  *(_BYTE *)(v6 + 500) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  __p[0] = 0;
  LODWORD(__p[1]) = 0;
  *(_QWORD *)&v59 = 0;
  DWORD2(v59) = 0;
  sub_223208FD4(v6 + 504, (unsigned int *)&v59, (uint64_t *)__p, 1, &v60, 1, 0);
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 88);
  do
  {
    v10 = *(_DWORD *)(a3 + 56 * v8 + 24);
    if (v10)
    {
      v11 = *(_DWORD *)(a3 + 56 * v8 + 28);
      if (v11)
      {
        v12 = v10 == (_DWORD)v9 && v11 == HIDWORD(v9);
        if (!v12
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 630, (uint64_t)"images[*component].Size() == image_size", 39, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v13 = dword_2245BBE5C[v8];
        switch((char)v8)
        {
          case 0:
            strcpy((char *)__p, "KeyframeBundleCpuDepth");
            HIBYTE(__p[2]) = 22;
            sub_223C867D8(v9, v13, (uint64_t *)__p, (uint64_t *)&v59);
            v14 = v59;
            v59 = 0uLL;
            v15 = *(std::__shared_weak_count **)(a1 + 376);
            *(_OWORD *)(a1 + 368) = v14;
            if (v15)
            {
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldaxr(p_shared_owners);
              while (__stlxr(v17 - 1, p_shared_owners));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (!*((_QWORD *)&v59 + 1))
              goto LABEL_4;
            v19 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            break;
          case 1:
            __p[0] = operator new(0x20uLL);
            *(_OWORD *)&__p[1] = xmmword_2245B8D50;
            strcpy((char *)__p[0], "KeyframeBundleCpuConfidence");
            sub_223C867D8(v9, v13, (uint64_t *)__p, (uint64_t *)&v59);
            v36 = v59;
            v59 = 0uLL;
            v37 = *(std::__shared_weak_count **)(a1 + 392);
            *(_OWORD *)(a1 + 384) = v36;
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (!*((_QWORD *)&v59 + 1))
              goto LABEL_4;
            v40 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v20 = __ldaxr(v40);
            while (__stlxr(v20 - 1, v40));
            break;
          case 2:
            strcpy((char *)__p, "KeyframeBundleCpuColor");
            HIBYTE(__p[2]) = 22;
            sub_223C867D8(v9, v13, (uint64_t *)__p, (uint64_t *)&v59);
            v26 = v59;
            v59 = 0uLL;
            v27 = *(std::__shared_weak_count **)(a1 + 408);
            *(_OWORD *)(a1 + 400) = v26;
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (!*((_QWORD *)&v59 + 1))
              goto LABEL_4;
            v30 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v20 = __ldaxr(v30);
            while (__stlxr(v20 - 1, v30));
            break;
          case 3:
            __p[0] = operator new(0x20uLL);
            *(_OWORD *)&__p[1] = xmmword_2245B8D00;
            strcpy((char *)__p[0], "KeyframeBundleCpuSemantic");
            sub_223C867D8(v9, v13, (uint64_t *)__p, (uint64_t *)&v59);
            v31 = v59;
            v59 = 0uLL;
            v32 = *(std::__shared_weak_count **)(a1 + 424);
            *(_OWORD *)(a1 + 416) = v31;
            if (v32)
            {
              v33 = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (!*((_QWORD *)&v59 + 1))
              goto LABEL_4;
            v35 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v20 = __ldaxr(v35);
            while (__stlxr(v20 - 1, v35));
            break;
          case 4:
            __p[0] = operator new(0x20uLL);
            *(_OWORD *)&__p[1] = xmmword_2245B8D00;
            strcpy((char *)__p[0], "KeyframeBundleCpuMaterial");
            sub_223C867D8(v9, v13, (uint64_t *)__p, (uint64_t *)&v59);
            v21 = v59;
            v59 = 0uLL;
            v22 = *(std::__shared_weak_count **)(a1 + 440);
            *(_OWORD *)(a1 + 432) = v21;
            if (v22)
            {
              v23 = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (!*((_QWORD *)&v59 + 1))
              goto LABEL_4;
            v25 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v20 = __ldaxr(v25);
            while (__stlxr(v20 - 1, v25));
            break;
          case 5:
            __p[0] = operator new(0x20uLL);
            *(_OWORD *)&__p[1] = xmmword_2245B9420;
            strcpy((char *)__p[0], "KeyframeBundleCpuNormals");
            sub_223C867D8(v9, v13, (uint64_t *)__p, (uint64_t *)&v59);
            v41 = v59;
            v59 = 0uLL;
            v42 = *(std::__shared_weak_count **)(a1 + 456);
            *(_OWORD *)(a1 + 448) = v41;
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v18 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (!*((_QWORD *)&v59 + 1))
              goto LABEL_4;
            v45 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v20 = __ldaxr(v45);
            while (__stlxr(v20 - 1, v45));
            break;
          default:
            sub_2231F4AAC(dword_2245BBE5C[v8], v9, (const void **)__p);
            sub_2231F5540((uint64_t)__p[0], &v59);
            v46 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v47 = (unint64_t *)((char *)__p[1] + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = v7 + 16 * v8;
            v50 = v59;
            v59 = 0uLL;
            v51 = *(std::__shared_weak_count **)(v49 + 8);
            *(_OWORD *)v49 = v50;
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (*((_QWORD *)&v59 + 1))
            {
              v55 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            goto LABEL_6;
        }
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
LABEL_4:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
LABEL_6:
        sub_2231D21E0(a3 + 56 * v8, *(_QWORD *)(v7 + 16 * v8));
      }
    }
    ++v8;
  }
  while (v8 != 6);
  return a1;
}

void sub_2231D2148(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_2231F4908(v2);
  sub_2231D0094(v1);
  _Unwind_Resume(a1);
}

void sub_2231D2164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  _QWORD *v23;

  sub_223167354((uint64_t)&__p);
  sub_2244E3314(a10);
  sub_2231F4908(v23);
  sub_2231D0094(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D21E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 53))
      goto LABEL_15;
LABEL_18:
    v21 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v13)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 53))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v21, v4, 0);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_23;
LABEL_19:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_23:
    if (!v14)
      goto LABEL_27;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
    goto LABEL_27;
LABEL_24:
  if (*(_BYTE *)(a2 + 61))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v20, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_28;
  }
LABEL_27:
  v20 = 0;
LABEL_28:
  sub_22320A750((_DWORD *)a1, a2);
  v18 = v20;
  v20 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231D23A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231D2408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _BYTE __p[24];
  uint64_t v63;
  __int128 v64;
  _OWORD v65[2];
  int v66;

  v6 = sub_2231CFAC8(a1, a3);
  *(_QWORD *)v6 = &off_24EC21D68;
  v7 = v6 + 368;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  LOBYTE(v64) = 0;
  *(_BYTE *)(v6 + 500) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_QWORD *)__p = 0;
  *(_DWORD *)&__p[8] = 0;
  *(_QWORD *)&v65[0] = 0;
  DWORD2(v65[0]) = 0;
  sub_223208FD4(v6 + 504, (unsigned int *)v65, (uint64_t *)__p, 1, &v64, 1, 0);
  memset(v65, 0, sizeof(v65));
  v66 = 728303356;
  kdebug_trace();
  v8 = 0;
  v9 = a3 + 368;
  v10 = *(_QWORD *)(a3 + 104);
  do
  {
    if (sub_223225C34((_QWORD *)(v9 + 16 * v8)))
    {
      v11 = dword_2245BBE5C[v8];
      switch((char)v8)
      {
        case 0:
          strcpy(__p, "KeyframeBundleCpuDepth");
          __p[23] = 22;
          sub_223C867D8(v10, v11, (uint64_t *)__p, (uint64_t *)&v64);
          v12 = v64;
          v64 = 0uLL;
          v13 = *(std::__shared_weak_count **)(a1 + 376);
          *(_OWORD *)(a1 + 368) = v12;
          if (!v13)
            goto LABEL_10;
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          else
          {
LABEL_10:
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          goto LABEL_62;
        case 1:
          *(_QWORD *)__p = operator new(0x20uLL);
          *(_OWORD *)&__p[8] = xmmword_2245B8D50;
          strcpy(*(char **)__p, "KeyframeBundleCpuConfidence");
          sub_223C867D8(v10, v11, (uint64_t *)__p, (uint64_t *)&v64);
          v27 = v64;
          v64 = 0uLL;
          v28 = *(std::__shared_weak_count **)(a1 + 392);
          *(_OWORD *)(a1 + 384) = v27;
          if (!v28)
            goto LABEL_27;
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          else
          {
LABEL_27:
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          v31 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v31);
          while (__stlxr(v18 - 1, v31));
          goto LABEL_62;
        case 2:
          strcpy(__p, "KeyframeBundleCpuColor");
          __p[23] = 22;
          sub_223C867D8(v10, v11, (uint64_t *)__p, (uint64_t *)&v64);
          v32 = v64;
          v64 = 0uLL;
          v33 = *(std::__shared_weak_count **)(a1 + 408);
          *(_OWORD *)(a1 + 400) = v32;
          if (!v33)
            goto LABEL_35;
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          else
          {
LABEL_35:
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          v36 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v36);
          while (__stlxr(v18 - 1, v36));
          goto LABEL_62;
        case 3:
          *(_QWORD *)__p = operator new(0x20uLL);
          *(_OWORD *)&__p[8] = xmmword_2245B8D00;
          strcpy(*(char **)__p, "KeyframeBundleCpuSemantic");
          sub_223C867D8(v10, v11, (uint64_t *)__p, (uint64_t *)&v64);
          v37 = v64;
          v64 = 0uLL;
          v38 = *(std::__shared_weak_count **)(a1 + 424);
          *(_OWORD *)(a1 + 416) = v37;
          if (!v38)
            goto LABEL_43;
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          else
          {
LABEL_43:
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          v41 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v41);
          while (__stlxr(v18 - 1, v41));
          goto LABEL_62;
        case 4:
          *(_QWORD *)__p = operator new(0x20uLL);
          *(_OWORD *)&__p[8] = xmmword_2245B8D00;
          strcpy(*(char **)__p, "KeyframeBundleCpuMaterial");
          sub_223C867D8(v10, v11, (uint64_t *)__p, (uint64_t *)&v64);
          v42 = v64;
          v64 = 0uLL;
          v43 = *(std::__shared_weak_count **)(a1 + 440);
          *(_OWORD *)(a1 + 432) = v42;
          if (!v43)
            goto LABEL_51;
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          else
          {
LABEL_51:
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          v46 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v46);
          while (__stlxr(v18 - 1, v46));
          goto LABEL_62;
        case 5:
          *(_QWORD *)__p = operator new(0x20uLL);
          *(_OWORD *)&__p[8] = xmmword_2245B9420;
          strcpy(*(char **)__p, "KeyframeBundleCpuNormals");
          sub_223C867D8(v10, v11, (uint64_t *)__p, (uint64_t *)&v64);
          v47 = v64;
          v64 = 0uLL;
          v48 = *(std::__shared_weak_count **)(a1 + 456);
          *(_OWORD *)(a1 + 448) = v47;
          if (!v48)
            goto LABEL_59;
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          else
          {
LABEL_59:
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (!*((_QWORD *)&v64 + 1))
              goto LABEL_64;
          }
          v51 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v51);
          while (__stlxr(v18 - 1, v51));
LABEL_62:
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
LABEL_64:
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          goto LABEL_66;
        default:
          sub_2231F4AAC(dword_2245BBE5C[v8], v10, (const void **)__p);
          sub_2231F5540(*(uint64_t *)__p, &v64);
          v19 = *(std::__shared_weak_count **)&__p[8];
          if (!*(_QWORD *)&__p[8])
            goto LABEL_18;
          v20 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
            v56 = v7 + 16 * v8;
            v57 = v64;
            v64 = 0uLL;
            v24 = *(std::__shared_weak_count **)(v56 + 8);
            *(_OWORD *)v56 = v57;
            if (!v24)
              goto LABEL_76;
          }
          else
          {
LABEL_18:
            v22 = v7 + 16 * v8;
            v23 = v64;
            v64 = 0uLL;
            v24 = *(std::__shared_weak_count **)(v22 + 8);
            *(_OWORD *)v22 = v23;
            if (!v24)
              goto LABEL_76;
          }
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
LABEL_76:
          v58 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (*((_QWORD *)&v64 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
LABEL_66:
          v52 = *(_QWORD *)(v7 + 16 * v8);
          *(_QWORD *)__p = &off_24EC20EB8;
          sub_2231B4D38(v52, (uint64_t)&__p[8]);
          sub_2231D2C6C(a2, (void ***)(v9 + 16 * v8), (uint64_t)__p);
          nullsub_30(&v63);
          v53 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v54 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          nullsub_30(__p);
          break;
      }
    }
    ++v8;
  }
  while (v8 != 6);
  kdebug_trace();
  return a1;
}

void sub_2231D2B4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_2231F4908(v2);
  sub_2231D0094(v1);
  _Unwind_Resume(a1);
}

void sub_2231D2B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  if (a22 < 0)
    operator delete(__p);
  sub_2231874DC(v24 - 128);
  sub_2244E3314(a10);
  sub_2231F4908(v23);
  sub_2231D0094(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D2C04(uint64_t a1, unsigned int a2)
{
  if (a2 >= 6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 992, (uint64_t)"*c < *KeyframeBundleComponent::NumComponents", 44, (uint64_t)"Unsupported component", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1 + 16 * a2 + 368;
}

void sub_2231D2C6C(uint64_t a1, void ***a2, uint64_t a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  void **v54;
  std::__shared_weak_count *v55;
  uint64_t (**v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  char v64[24];
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (!sub_223225C34(a2)
    || (v11 = *(_DWORD *)(a3 + 24), v11 != sub_223229314(a2, v6, v7, v8, v9, v10))
    || (v17 = *(_DWORD *)(a3 + 28), v17 != sub_223229330(a2, v12, v13, v14, v15, v16)))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include/Reconstruction/Gpu/Utils.h", 128, (uint64_t)"texture && (img.Width() == texture.width()) && (img.Height() == texture.height())", 81, (uint64_t)"Texture and image size don't match", 34, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v18 = (std::__shared_weak_count *)a2[1];
  v54 = *a2;
  v55 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v56 = &off_24EC20EB8;
  v21 = *(_QWORD *)(a3 + 8);
  v22 = *(std::__shared_weak_count **)(a3 + 16);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = *(_QWORD *)(a3 + 40);
    v26 = *(_DWORD *)(a3 + 48);
    v27 = *(_WORD *)(a3 + 52);
    do
      v28 = __ldxr(v23);
    while (__stxr(v28 + 1, v23));
  }
  else
  {
    v25 = *(_QWORD *)(a3 + 40);
    v26 = *(_DWORD *)(a3 + 48);
    v27 = *(_WORD *)(a3 + 52);
  }
  v57 = v21;
  v58 = v22;
  v59 = *(_QWORD *)(a3 + 24);
  v60 = *(_DWORD *)(a3 + 32);
  v61 = v25;
  v62 = v26;
  v63 = v27;
  if (v22)
  {
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v65 = 0;
  v31 = (char *)operator new(0x50uLL);
  v36 = v31;
  *(_QWORD *)v31 = &off_24EC24E80;
  *((_QWORD *)v31 + 1) = v54;
  *((_QWORD *)v31 + 2) = v55;
  if (v55)
  {
    v37 = (unint64_t *)&v55->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *((_QWORD *)v31 + 3) = &off_24EC20EB8;
  v39 = v58;
  if (v58)
  {
    v40 = &v58->__shared_owners_;
    do
      v41 = __ldxr((unint64_t *)v40);
    while (__stxr(v41 + 1, (unint64_t *)v40));
    v42 = v61;
    v43 = v62;
    v44 = v63;
    do
      v45 = __ldxr((unint64_t *)v40);
    while (__stxr(v45 + 1, (unint64_t *)v40));
  }
  else
  {
    v42 = v61;
    v43 = v62;
    v44 = v63;
  }
  *((_QWORD *)v31 + 4) = v57;
  *((_QWORD *)v31 + 5) = v39;
  *((_QWORD *)v31 + 6) = v59;
  *((_DWORD *)v31 + 14) = v60;
  *((_QWORD *)v31 + 8) = v42;
  *((_DWORD *)v31 + 18) = v43;
  *((_WORD *)v31 + 38) = v44;
  if (v39)
  {
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v65 = v36;
  sub_2232268C4(a1, v64, v32, v33, v34, v35);
  v48 = v65;
  if (v65 == v64)
  {
    v49 = 4;
    v48 = v64;
    goto LABEL_39;
  }
  if (v65)
  {
    v49 = 5;
LABEL_39:
    (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
  }
  nullsub_30(&v59);
  if (v58)
  {
    v50 = &v58->__shared_owners_;
    do
      v51 = __ldaxr((unint64_t *)v50);
    while (__stlxr(v51 - 1, (unint64_t *)v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  nullsub_30(&v56);
  if (v55)
  {
    v52 = (unint64_t *)&v55->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_2231D2FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
    {
      sub_22320A828((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
  sub_22320A828((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D3004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t (**v14)();
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (**v23)();
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  _QWORD v27[3];

  v3 = 0;
  v4 = a3 + 368;
  v5 = a1 + 368;
  do
  {
    result = sub_223225C34((_QWORD *)(v4 + 16 * v3));
    if ((_DWORD)result)
    {
      v7 = (uint64_t *)(v5 + 16 * v3);
      result = *v7;
      if (*v7)
      {
        sub_22446FBF8(result, v27);
        v13 = (const void *)sub_2232293F4((_QWORD **)(v4 + 16 * v3), v8, v9, v10, v11, v12);
        sub_2244E13A0((uint64_t)v27, &v23);
        v14 = v23;
        v15 = v24;
        if (!v24)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if (!v14)
            goto LABEL_15;
        }
        else
        {
LABEL_11:
          if (!v14)
            goto LABEL_15;
        }
        if (sub_2244E13D4((uint64_t)v27, v13))
        {
LABEL_3:
          result = (uint64_t)sub_2244E0FF4(v27);
          goto LABEL_4;
        }
LABEL_15:
        v18 = *v7;
        v23 = &off_24EC20EB8;
        sub_2231B4D38(v18, (uint64_t)&v24);
        sub_2231D2C6C(a2, (void ***)(v4 + 16 * v3), (uint64_t)&v23);
        nullsub_30(&v26);
        v19 = v25;
        if (v25)
        {
          v20 = (unint64_t *)&v25->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        nullsub_30(&v23);
        goto LABEL_3;
      }
    }
LABEL_4:
    ++v3;
  }
  while (v3 != 6);
  return result;
}

void sub_2231D317C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_2231B4CC8((uint64_t)va);
  sub_2244E0FF4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2231D3198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  nullsub_30((uint64_t *)va);
  sub_2244E0FF4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2231D31B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2244E0FF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231D31CC(_QWORD *a1)
{
  *a1 = &off_24EC21D68;
  sub_2244E3314((uint64_t)(a1 + 63));
  sub_2231F4908(a1 + 46);
  sub_2231D0094((uint64_t)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231D321C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  std::__shared_weak_count *v29;

  v2 = a2;
  v3 = result;
  v4 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0 || (a2 & 1) != 0)
  {
    v5.n128_f64[0] = sub_22320B0C8(result, (uint64_t)v28);
    sub_22320B470((uint64_t)v28, word_2245BBE74, v5);
    v6 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    result = nullsub_30(v28);
    if (!v4)
      goto LABEL_50;
  }
  if ((v2 & 2) != 0)
  {
LABEL_50:
    v9 = sub_22320BBFC(v3, (uint64_t)v28);
    sub_22320BDC8((uint64_t)v28, &dword_2245BBE78, *(int16x4_t *)&v9);
    v10 = v29;
    if (v29)
    {
      v11 = (unint64_t *)&v29->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    result = nullsub_30(v28);
    if (!v4)
      goto LABEL_49;
  }
  if ((v2 & 0x20) != 0)
  {
LABEL_49:
    v13.n128_f64[0] = sub_22320C540(v3, (uint64_t)v28);
    sub_22320C99C((uint64_t)v28, (uint64_t)&unk_2245BBE7C, v13);
    v14 = v29;
    if (v29)
    {
      v15 = (unint64_t *)&v29->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    result = nullsub_30(v28);
    if (!v4)
      goto LABEL_31;
  }
  if ((v2 & 4) != 0)
  {
LABEL_31:
    v17.n128_f64[0] = sub_22320D680(v3, (uint64_t)v28);
    v27 = 0;
    sub_2231D3548((uint64_t)v28, &v27, v17);
    v18 = v29;
    if (v29)
    {
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    result = nullsub_30(v28);
    *(_BYTE *)(v3 + 308) = 0;
    *(_DWORD *)(v3 + 304) = 0;
    if (*(_BYTE *)(v3 + 364))
      *(_BYTE *)(v3 + 364) = 0;
    if (!v4)
      goto LABEL_48;
  }
  if ((v2 & 8) != 0)
  {
LABEL_48:
    sub_22320DEEC(v3, (uint64_t)v28);
    sub_22320E348((uint64_t)v28, (uint64_t)&unk_2245BBE7E);
    v21 = v29;
    if (v29)
    {
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    result = nullsub_30(v28);
    if (!v4)
      goto LABEL_40;
  }
  if ((v2 & 0x10) != 0)
  {
LABEL_40:
    sub_22320EFB0(v3, (uint64_t)v28);
    sub_22320E348((uint64_t)v28, (uint64_t)&unk_2245BBE80);
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    return nullsub_30(v28);
  }
  return result;
}

void sub_2231D34D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231CDC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231D34E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231CDC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231D34F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231CD9B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231D350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231CD9B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231D3520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231BD974((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231D3534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231BD974((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D3548(uint64_t a1, uint64_t *a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6)
      goto LABEL_21;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10)
      goto LABEL_21;
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (*(_BYTE *)(a1 + 73))
        goto LABEL_14;
    }
    else
    {
LABEL_21:
      if (*(_BYTE *)(a1 + 73))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(&v16, v5, 1);
        goto LABEL_17;
      }
    }
  }
  v16 = 0;
LABEL_17:
  v17 = *a2;
  v18[0] = a1;
  v18[1] = &v17;
  v14 = sub_22320D854((uint64_t)v18, a3);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 8))(result, v14);
  return result;
}

void sub_2231D3670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231D3694(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  void *__p[10];
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 104);
  strcpy((char *)__p, "KeyframeBundleCpuColor");
  HIBYTE(__p[2]) = 22;
  sub_223C867D8(v2, 31, (uint64_t *)__p, (uint64_t *)&v16);
  v3 = v16;
  v16 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 408);
  *(_OWORD *)(a1 + 400) = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (!*((_QWORD *)&v16 + 1))
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (!*((_QWORD *)&v16 + 1))
      goto LABEL_9;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_9:
  if (SHIBYTE(__p[2]) < 0)
LABEL_10:
    operator delete(__p[0]);
LABEL_11:
  v10.n128_f64[0] = sub_22320D680(a1, (uint64_t)__p);
  *(_QWORD *)&v16 = 0;
  sub_2231D3548((uint64_t)__p, (uint64_t *)&v16, v10);
  v11 = (std::__shared_weak_count *)__p[2];
  if (__p[2])
  {
    v12 = (unint64_t *)((char *)__p[2] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result = nullsub_30(__p);
  *(_BYTE *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  if (*(_BYTE *)(a1 + 364))
    *(_BYTE *)(a1 + 364) = 0;
  return result;
}

void sub_2231D3800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231CD9B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231D3814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_2231D3830(_QWORD *a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  float v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;

  v1 = (_DWORD *)a1[46];
  if (!v1)
  {
    v7 = 0.0;
    v8 = (_DWORD *)a1[48];
    if (v8)
      goto LABEL_25;
LABEL_6:
    v9 = (_DWORD *)a1[50];
    if (v9)
      goto LABEL_42;
LABEL_7:
    v10 = (_DWORD *)a1[52];
    if (v10)
      goto LABEL_59;
LABEL_8:
    v11 = (_DWORD *)a1[54];
    if (v11)
      goto LABEL_76;
LABEL_9:
    v12 = (_DWORD *)a1[56];
    if (v12)
      goto LABEL_93;
    return v7 * 0.00097656;
  }
  v2 = v1[14];
  v3 = v1[8];
  v4 = v1[9];
  if ((v2 - 1) < 4)
  {
    v5 = 1;
    v6 = (v2 & 3) - 1;
    if (v6 > 2)
      goto LABEL_23;
LABEL_21:
    v15 = qword_2245C4368[v6];
    goto LABEL_24;
  }
  if ((v2 - 5) < 4)
  {
    v5 = 2;
    v6 = (v2 & 3) - 1;
    if (v6 > 2)
      goto LABEL_23;
    goto LABEL_21;
  }
  if ((v2 - 9) >= 0x10 || ((0xFF0Fu >> (v2 - 9)) & 1) == 0)
  {
    if ((v2 - 13) >= 4 && (v2 - 25) >= 0x10)
      goto LABEL_108;
    v5 = 4;
    v6 = (v2 & 3) - 1;
    if (v6 > 2)
      goto LABEL_23;
    goto LABEL_21;
  }
  v5 = 3;
  v6 = (v2 & 3) - 1;
  if (v6 <= 2)
    goto LABEL_21;
LABEL_23:
  v15 = 4;
LABEL_24:
  v7 = (float)(v15 * (unint64_t)(v4 * v3 * v5));
  v8 = (_DWORD *)a1[48];
  if (!v8)
    goto LABEL_6;
LABEL_25:
  v2 = v8[14];
  v16 = v8[8];
  v17 = v8[9];
  if ((v2 - 1) < 4)
  {
    v18 = 1;
    v19 = (v2 & 3) - 1;
    if (v19 > 2)
      goto LABEL_40;
LABEL_38:
    v21 = qword_2245C4368[v19];
    goto LABEL_41;
  }
  if ((v2 - 5) < 4)
  {
    v18 = 2;
    v19 = (v2 & 3) - 1;
    if (v19 > 2)
      goto LABEL_40;
    goto LABEL_38;
  }
  if ((v2 - 9) >= 0x10 || ((0xFF0Fu >> (v2 - 9)) & 1) == 0)
  {
    if ((v2 - 13) >= 4 && (v2 - 25) >= 0x10)
      goto LABEL_108;
    v18 = 4;
    v19 = (v2 & 3) - 1;
    if (v19 > 2)
      goto LABEL_40;
    goto LABEL_38;
  }
  v18 = 3;
  v19 = (v2 & 3) - 1;
  if (v19 <= 2)
    goto LABEL_38;
LABEL_40:
  v21 = 4;
LABEL_41:
  v7 = v7 + (float)(v21 * (unint64_t)(v17 * v16 * v18));
  v9 = (_DWORD *)a1[50];
  if (!v9)
    goto LABEL_7;
LABEL_42:
  v2 = v9[14];
  v22 = v9[8];
  v23 = v9[9];
  if ((v2 - 1) < 4)
  {
    v24 = 1;
    v25 = (v2 & 3) - 1;
    if (v25 > 2)
      goto LABEL_57;
LABEL_55:
    v27 = qword_2245C4368[v25];
    goto LABEL_58;
  }
  if ((v2 - 5) < 4)
  {
    v24 = 2;
    v25 = (v2 & 3) - 1;
    if (v25 > 2)
      goto LABEL_57;
    goto LABEL_55;
  }
  if ((v2 - 9) >= 0x10 || ((0xFF0Fu >> (v2 - 9)) & 1) == 0)
  {
    if ((v2 - 13) >= 4 && (v2 - 25) >= 0x10)
      goto LABEL_108;
    v24 = 4;
    v25 = (v2 & 3) - 1;
    if (v25 > 2)
      goto LABEL_57;
    goto LABEL_55;
  }
  v24 = 3;
  v25 = (v2 & 3) - 1;
  if (v25 <= 2)
    goto LABEL_55;
LABEL_57:
  v27 = 4;
LABEL_58:
  v7 = v7 + (float)(v27 * (unint64_t)(v23 * v22 * v24));
  v10 = (_DWORD *)a1[52];
  if (!v10)
    goto LABEL_8;
LABEL_59:
  v2 = v10[14];
  v28 = v10[8];
  v29 = v10[9];
  if ((v2 - 1) < 4)
  {
    v30 = 1;
    v31 = (v2 & 3) - 1;
    if (v31 > 2)
      goto LABEL_74;
LABEL_72:
    v33 = qword_2245C4368[v31];
    goto LABEL_75;
  }
  if ((v2 - 5) < 4)
  {
    v30 = 2;
    v31 = (v2 & 3) - 1;
    if (v31 > 2)
      goto LABEL_74;
    goto LABEL_72;
  }
  if ((v2 - 9) >= 0x10 || ((0xFF0Fu >> (v2 - 9)) & 1) == 0)
  {
    if ((v2 - 13) >= 4 && (v2 - 25) >= 0x10)
      goto LABEL_108;
    v30 = 4;
    v31 = (v2 & 3) - 1;
    if (v31 > 2)
      goto LABEL_74;
    goto LABEL_72;
  }
  v30 = 3;
  v31 = (v2 & 3) - 1;
  if (v31 <= 2)
    goto LABEL_72;
LABEL_74:
  v33 = 4;
LABEL_75:
  v7 = v7 + (float)(v33 * (unint64_t)(v29 * v28 * v30));
  v11 = (_DWORD *)a1[54];
  if (!v11)
    goto LABEL_9;
LABEL_76:
  v2 = v11[14];
  v34 = v11[8];
  v35 = v11[9];
  if ((v2 - 1) < 4)
  {
    v36 = 1;
    v37 = (v2 & 3) - 1;
    if (v37 > 2)
      goto LABEL_91;
LABEL_89:
    v39 = qword_2245C4368[v37];
    goto LABEL_92;
  }
  if ((v2 - 5) < 4)
  {
    v36 = 2;
    v37 = (v2 & 3) - 1;
    if (v37 > 2)
      goto LABEL_91;
    goto LABEL_89;
  }
  if ((v2 - 9) >= 0x10 || ((0xFF0Fu >> (v2 - 9)) & 1) == 0)
  {
    if ((v2 - 13) >= 4 && (v2 - 25) >= 0x10)
      goto LABEL_108;
    v36 = 4;
    v37 = (v2 & 3) - 1;
    if (v37 > 2)
      goto LABEL_91;
    goto LABEL_89;
  }
  v36 = 3;
  v37 = (v2 & 3) - 1;
  if (v37 <= 2)
    goto LABEL_89;
LABEL_91:
  v39 = 4;
LABEL_92:
  v7 = v7 + (float)(v39 * (unint64_t)(v35 * v34 * v36));
  v12 = (_DWORD *)a1[56];
  if (!v12)
    return v7 * 0.00097656;
LABEL_93:
  v2 = v12[14];
  v40 = v12[8];
  v41 = v12[9];
  if ((v2 - 1) >= 4)
  {
    if ((v2 - 5) < 4)
    {
      v42 = 2;
      v43 = (v2 & 3) - 1;
      if (v43 > 2)
        goto LABEL_106;
      goto LABEL_104;
    }
    if ((v2 - 9) < 0x10 && ((0xFF0Fu >> (v2 - 9)) & 1) != 0)
    {
      v42 = 3;
      v43 = (v2 & 3) - 1;
      if (v43 <= 2)
        goto LABEL_104;
      goto LABEL_106;
    }
    v42 = 4;
    if ((v2 - 13) < 4 || (v2 - 25) < 0x10)
    {
      v43 = (v2 & 3) - 1;
      if (v43 <= 2)
        goto LABEL_104;
LABEL_106:
      v44 = 4;
      return (float)(v7 + (float)(v44 * (unint64_t)(v41 * v40 * v42))) * 0.00097656;
    }
LABEL_108:
    if (!v2)
      sub_2245746EC();
    sub_224574728();
  }
  v42 = 1;
  v43 = (v2 & 3) - 1;
  if (v43 > 2)
    goto LABEL_106;
LABEL_104:
  v44 = qword_2245C4368[v43];
  return (float)(v7 + (float)(v44 * (unint64_t)(v41 * v40 * v42))) * 0.00097656;
}

uint64_t sub_2231D3D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_22320F184(a1, (uint64_t)v7);
  sub_2231D3E34(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231D3E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231D3E34(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t (**v46)();
  uint64_t v47;
  std::__shared_weak_count *v48;

  if (*(_DWORD *)(a2 + 32))
    v3 = *(_DWORD *)(a2 + 36) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)a1 = &off_24EC200A8;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 48) = v8;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v27 = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_WORD *)(a1 + 48) = v27;
    }
  }
  else
  {
    v46 = &off_24EC24F10;
    sub_22320F9FC(a2, (uint64_t)&v47);
    v13 = v47;
    v14 = v48;
    if (v48)
    {
      v15 = (unint64_t *)&v48->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    sub_22427727C(v13, &v43);
    v18 = (_QWORD *)operator new();
    v40 = v44;
    v44 = 0uLL;
    v39 = &off_24EC71528;
    sub_224281C3C(v18, (uint64_t)&v39);
    sub_2242A879C(&v39);
    sub_2242A879C(&v43);
    v45 = 0;
    v38 = v18;
    sub_2232103F0(&v39, (uint64_t *)&v38);
    *(_QWORD *)a1 = &off_24EC200A8;
    v19 = v40;
    if (*((_QWORD *)&v40 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldxr(v20);
      while (__stxr(v22 + 1, v20));
      v23 = v41;
      *(_OWORD *)(a1 + 32) = v42;
      do
        v24 = __ldxr(v20);
      while (__stxr(v24 + 1, v20));
      *(_OWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 24) = v23;
      *(_WORD *)(a1 + 48) = 256;
      do
        v25 = __ldaxr(v20);
      while (__stlxr(v25 - 1, v20));
      if (!v25)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v19 + 1) + 16))(*((_QWORD *)&v19 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
      }
      do
        v26 = __ldaxr(v20);
      while (__stlxr(v26 - 1, v20));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v19 + 1) + 16))(*((_QWORD *)&v19 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    else
    {
      v28 = v41;
      *(_OWORD *)(a1 + 8) = (unint64_t)v40;
      *(_QWORD *)(a1 + 24) = v28;
      *(_OWORD *)(a1 + 32) = v42;
      *(_WORD *)(a1 + 48) = 256;
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    nullsub_30(&v39);
    v32 = (uint64_t)v38;
    v38 = 0;
    if (v32)
    {
      v33 = sub_2242762F8(v32);
      MEMORY[0x227684CE8](v33, 0x10A3C40A1F8E8FFLL);
    }
    if (v45)
    {
      v34 = sub_2242762F8(v45);
      MEMORY[0x227684CE8](v34, 0x10A3C40A1F8E8FFLL);
    }
    v35 = v48;
    if (v48)
    {
      v36 = (unint64_t *)&v48->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    nullsub_30(&v46);
  }
}

void sub_2231D41F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22320F89C((uint64_t *)va);
  sub_22320F89C((uint64_t *)va1);
  sub_2231D5D24(v2 - 88);
  _Unwind_Resume(a1);
}

void sub_2231D421C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2242A879C((uint64_t *)va);
  MEMORY[0x227684CE8](v3, 0x10A3C40A1F8E8FFLL);
  sub_2242A879C(va1);
  sub_2231D5D24(v4 - 88);
  _Unwind_Resume(a1);
}

void sub_2231D4260(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231D5D24(v1 - 88);
  _Unwind_Resume(a1);
}

void sub_2231D4274(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D4288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_223210828(a1, (uint64_t)v7);
  sub_2231D3E34(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231D4318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D432C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_2232109F4(a1, (uint64_t)v7);
  sub_2231D43D0(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231D43BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231D4840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231D43D0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t (**v51)();
  uint64_t v52;
  std::__shared_weak_count *v53;

  if (*(_DWORD *)(a2 + 56))
    v3 = *(_DWORD *)(a2 + 60) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)a1 = &off_24EC25150;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 72) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v29 = *(_WORD *)(a2 + 72);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v29;
    }
  }
  else
  {
    v51 = &off_24EC25248;
    sub_223211760(a2, (uint64_t)&v52);
    v14 = v52;
    v15 = v53;
    if (v53)
    {
      v16 = (unint64_t *)&v53->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_224279C10(v14, &v48);
    v19 = (_QWORD *)operator new();
    v43 = v49;
    v49 = 0uLL;
    v42 = &off_24EC71528;
    sub_22428F938(v19, (uint64_t)&v42);
    sub_2242A879C(&v42);
    sub_2242A879C(&v48);
    v50 = 0;
    v41 = v19;
    sub_223211F58(&v42, (uint64_t *)&v41);
    *(_QWORD *)a1 = &off_24EC25150;
    v20 = v43;
    if (*((_QWORD *)&v43 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      v24 = v44;
      v25 = v46;
      *(_OWORD *)(a1 + 32) = v45;
      *(_OWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 64) = v47;
      do
        v26 = __ldxr(v21);
      while (__stxr(v26 + 1, v21));
      *(_OWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 24) = v24;
      *(_WORD *)(a1 + 72) = 256;
      do
        v27 = __ldaxr(v21);
      while (__stlxr(v27 - 1, v21));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
      do
        v28 = __ldaxr(v21);
      while (__stlxr(v28 - 1, v21));
      if (!v28)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    else
    {
      v30 = v44;
      *(_OWORD *)(a1 + 8) = (unint64_t)v43;
      *(_QWORD *)(a1 + 24) = v30;
      v31 = v46;
      *(_OWORD *)(a1 + 32) = v45;
      *(_OWORD *)(a1 + 48) = v31;
      *(_QWORD *)(a1 + 64) = v47;
      *(_WORD *)(a1 + 72) = 256;
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    nullsub_30(&v42);
    v35 = (uint64_t)v41;
    v41 = 0;
    if (v35)
    {
      v36 = sub_224278C60(v35);
      MEMORY[0x227684CE8](v36, 0x10A3C40ED729E16);
    }
    if (v50)
    {
      v37 = sub_224278C60(v50);
      MEMORY[0x227684CE8](v37, 0x10A3C40ED729E16);
    }
    v38 = v53;
    if (v53)
    {
      v39 = (unint64_t *)&v53->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    nullsub_30(&v51);
  }
}

void sub_2231D47B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_223211600((uint64_t *)va);
  sub_223211600((uint64_t *)va1);
  sub_2231D5F44(v2 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D47D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2242A879C((uint64_t *)va);
  MEMORY[0x227684CE8](v3, 0x10A3C40ED729E16);
  sub_2242A879C(va1);
  sub_2231D5F44(v4 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D4818(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231D5F44(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D482C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D4840(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_2231D48A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_223212390(a1, (uint64_t)v7);
  sub_2231D43D0(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231D4938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231D4840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D494C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_223212564(a1, (uint64_t)v7);
  sub_2231D49F0(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231D49DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319F500((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231D49F0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t (**v51)();
  uint64_t v52;
  std::__shared_weak_count *v53;

  if (*(_DWORD *)(a2 + 56))
    v3 = *(_DWORD *)(a2 + 60) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)a1 = &off_24EC204C0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 72) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v29 = *(_WORD *)(a2 + 72);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v29;
    }
  }
  else
  {
    v51 = &off_24EC25488;
    sub_22321306C(a2, (uint64_t)&v52);
    v14 = v52;
    v15 = v53;
    if (v53)
    {
      v16 = (unint64_t *)&v53->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_2242759E8(v14, &v48);
    v19 = operator new();
    v43 = v49;
    v49 = 0uLL;
    v42 = &off_24EC71528;
    sub_224295298(v19, (uint64_t)&v42);
    sub_2242A879C(&v42);
    sub_2242A879C(&v48);
    v50 = 0;
    v41 = v19;
    sub_223213864(&v42, &v41);
    *(_QWORD *)a1 = &off_24EC204C0;
    v20 = v43;
    if (*((_QWORD *)&v43 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      v24 = v44;
      v25 = v46;
      *(_OWORD *)(a1 + 32) = v45;
      *(_OWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 64) = v47;
      do
        v26 = __ldxr(v21);
      while (__stxr(v26 + 1, v21));
      *(_OWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 24) = v24;
      *(_WORD *)(a1 + 72) = 256;
      do
        v27 = __ldaxr(v21);
      while (__stlxr(v27 - 1, v21));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
      do
        v28 = __ldaxr(v21);
      while (__stlxr(v28 - 1, v21));
      if (!v28)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    else
    {
      v30 = v44;
      *(_OWORD *)(a1 + 8) = (unint64_t)v43;
      *(_QWORD *)(a1 + 24) = v30;
      v31 = v46;
      *(_OWORD *)(a1 + 32) = v45;
      *(_OWORD *)(a1 + 48) = v31;
      *(_QWORD *)(a1 + 64) = v47;
      *(_WORD *)(a1 + 72) = 256;
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    nullsub_30(&v42);
    v35 = v41;
    v41 = 0;
    if (v35)
    {
      v36 = sub_224274AB0(v35);
      MEMORY[0x227684CE8](v36, 0x10A3C40ED729E16);
    }
    if (v50)
    {
      v37 = sub_224274AB0(v50);
      MEMORY[0x227684CE8](v37, 0x10A3C40ED729E16);
    }
    v38 = v53;
    if (v53)
    {
      v39 = (unint64_t *)&v53->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    nullsub_30(&v51);
  }
}

void sub_2231D4DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_223212F0C((uint64_t *)va);
  sub_223212F0C((uint64_t *)va1);
  sub_2231D6164(v2 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D4DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2242A879C((uint64_t *)va);
  MEMORY[0x227684CE8](v3, 0x10A3C40ED729E16);
  sub_2242A879C(va1);
  sub_2231D6164(v4 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D4E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231D6164(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D4E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D4E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v7[16];
  std::__shared_weak_count *v8;

  sub_223213C9C(a1, (uint64_t)v7);
  sub_2231D49F0(a2, (uint64_t)v7);
  v3 = v8;
  if (!v8)
    return nullsub_30(v7);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(v7);
}

void sub_2231D4EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319F500((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231D4F04(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t v45;
  std::__shared_weak_count *v46;

  if (*(_DWORD *)(a2 + 32))
    v3 = *(_DWORD *)(a2 + 36) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)a1 = &off_24EC218E0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 48) = v8;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v26 = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_WORD *)(a1 + 48) = v26;
    }
  }
  else
  {
    v44 = &off_24EC25008;
    sub_223213E70(a2, (uint64_t)&v45);
    v13 = v45;
    v14 = v46;
    if (v46)
    {
      v15 = (unint64_t *)&v46->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    sub_224276F3C(v13, &v41);
    v18 = operator new();
    v38 = v42;
    v42 = 0uLL;
    v37 = &off_24EC71548;
    sub_224281E20(v18, (uint64_t)&v37);
    sub_2242A8AC4(&v37);
    sub_2242A8AC4(&v41);
    v43 = 0;
    v36 = v18;
    sub_2232103F0(&v37, &v36);
    *(_QWORD *)a1 = &off_24EC218E0;
    v19 = v38;
    if (*((_QWORD *)&v38 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldxr(v20);
      while (__stxr(v22 + 1, v20));
      *(_OWORD *)(a1 + 24) = v39;
      *(_QWORD *)(a1 + 40) = v40;
      do
        v23 = __ldxr(v20);
      while (__stxr(v23 + 1, v20));
      *(_OWORD *)(a1 + 8) = v19;
      *(_WORD *)(a1 + 48) = 256;
      do
        v24 = __ldaxr(v20);
      while (__stlxr(v24 - 1, v20));
      if (!v24)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v19 + 1) + 16))(*((_QWORD *)&v19 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
      }
      do
        v25 = __ldaxr(v20);
      while (__stlxr(v25 - 1, v20));
      if (!v25)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v19 + 1) + 16))(*((_QWORD *)&v19 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    else
    {
      *(_OWORD *)(a1 + 8) = (unint64_t)v38;
      *(_OWORD *)(a1 + 24) = v39;
      *(_QWORD *)(a1 + 40) = v40;
      *(_WORD *)(a1 + 48) = 256;
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    nullsub_30(&v37);
    v30 = v36;
    v36 = 0;
    if (v30)
    {
      v31 = sub_2242762F8(v30);
      MEMORY[0x227684CE8](v31, 0x10A3C40A1F8E8FFLL);
    }
    if (v43)
    {
      v32 = sub_2242762F8(v43);
      MEMORY[0x227684CE8](v32, 0x10A3C40A1F8E8FFLL);
    }
    v33 = v46;
    if (v46)
    {
      v34 = (unint64_t *)&v46->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    nullsub_30(&v44);
  }
}

void sub_2231D52D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22320F89C((uint64_t *)va);
  sub_22320F89C((uint64_t *)va1);
  sub_22320F834(v2 - 88);
  _Unwind_Resume(a1);
}

void sub_2231D52F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2242A8AC4((uint64_t *)va);
  MEMORY[0x227684CE8](v3, 0x10A3C40A1F8E8FFLL);
  sub_2242A8AC4(va1);
  sub_22320F834(v4 - 88);
  _Unwind_Resume(a1);
}

void sub_2231D5338(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22320F834(v1 - 88);
  _Unwind_Resume(a1);
}

void sub_2231D534C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1 - 88);
  _Unwind_Resume(a1);
}

void sub_2231D5360(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;

  if (*(_DWORD *)(a2 + 56))
    v3 = *(_DWORD *)(a2 + 60) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)a1 = &off_24EC23CA0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 72) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v28 = *(_WORD *)(a2 + 72);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v28;
    }
  }
  else
  {
    v47 = &off_24EC25340;
    sub_223214668(a2, (uint64_t)&v48);
    v14 = v48;
    v15 = v49;
    if (v49)
    {
      v16 = (unint64_t *)&v49->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_2242798A4(v14, &v44);
    v19 = operator new();
    v40 = v45;
    v45 = 0uLL;
    v39 = &off_24EC71548;
    sub_22428FB1C(v19, (uint64_t)&v39);
    sub_2242A8AC4(&v39);
    sub_2242A8AC4(&v44);
    v46 = 0;
    v38 = v19;
    sub_223211F58(&v39, &v38);
    *(_QWORD *)a1 = &off_24EC23CA0;
    v20 = v40;
    if (*((_QWORD *)&v40 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      v24 = v42;
      *(_OWORD *)(a1 + 24) = v41;
      *(_OWORD *)(a1 + 40) = v24;
      *(_OWORD *)(a1 + 56) = v43;
      do
        v25 = __ldxr(v21);
      while (__stxr(v25 + 1, v21));
      *(_OWORD *)(a1 + 8) = v20;
      *(_WORD *)(a1 + 72) = 256;
      do
        v26 = __ldaxr(v21);
      while (__stlxr(v26 - 1, v21));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
      do
        v27 = __ldaxr(v21);
      while (__stlxr(v27 - 1, v21));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    else
    {
      *(_OWORD *)(a1 + 8) = (unint64_t)v40;
      *(_OWORD *)(a1 + 24) = v41;
      *(_OWORD *)(a1 + 40) = v42;
      *(_OWORD *)(a1 + 56) = v43;
      *(_WORD *)(a1 + 72) = 256;
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    nullsub_30(&v39);
    v32 = v38;
    v38 = 0;
    if (v32)
    {
      v33 = sub_224278C60(v32);
      MEMORY[0x227684CE8](v33, 0x10A3C40ED729E16);
    }
    if (v46)
    {
      v34 = sub_224278C60(v46);
      MEMORY[0x227684CE8](v34, 0x10A3C40ED729E16);
    }
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    nullsub_30(&v47);
  }
}

void sub_2231D5744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_223211600((uint64_t *)va);
  sub_223211600((uint64_t *)va1);
  sub_223211598(v2 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D5768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2242A8AC4((uint64_t *)va);
  MEMORY[0x227684CE8](v3, 0x10A3C40ED729E16);
  sub_2242A8AC4(va1);
  sub_223211598(v4 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D57AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223211598(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D57C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D57D4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;

  if (*(_DWORD *)(a2 + 56))
    v3 = *(_DWORD *)(a2 + 60) == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)a1 = &off_24EC24270;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 72) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v28 = *(_WORD *)(a2 + 72);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v28;
    }
  }
  else
  {
    v47 = &off_24EC25580;
    sub_223214E60(a2, (uint64_t)&v48);
    v14 = v48;
    v15 = v49;
    if (v49)
    {
      v16 = (unint64_t *)&v49->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_224275680(v14, &v44);
    v19 = operator new();
    v40 = v45;
    v45 = 0uLL;
    v39 = &off_24EC71548;
    sub_224295678(v19, (uint64_t)&v39);
    sub_2242A8AC4(&v39);
    sub_2242A8AC4(&v44);
    v46 = 0;
    v38 = v19;
    sub_223213864(&v39, &v38);
    *(_QWORD *)a1 = &off_24EC24270;
    v20 = v40;
    if (*((_QWORD *)&v40 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      v24 = v42;
      *(_OWORD *)(a1 + 24) = v41;
      *(_OWORD *)(a1 + 40) = v24;
      *(_OWORD *)(a1 + 56) = v43;
      do
        v25 = __ldxr(v21);
      while (__stxr(v25 + 1, v21));
      *(_OWORD *)(a1 + 8) = v20;
      *(_WORD *)(a1 + 72) = 256;
      do
        v26 = __ldaxr(v21);
      while (__stlxr(v26 - 1, v21));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
      do
        v27 = __ldaxr(v21);
      while (__stlxr(v27 - 1, v21));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    else
    {
      *(_OWORD *)(a1 + 8) = (unint64_t)v40;
      *(_OWORD *)(a1 + 24) = v41;
      *(_OWORD *)(a1 + 40) = v42;
      *(_OWORD *)(a1 + 56) = v43;
      *(_WORD *)(a1 + 72) = 256;
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    nullsub_30(&v39);
    v32 = v38;
    v38 = 0;
    if (v32)
    {
      v33 = sub_224274AB0(v32);
      MEMORY[0x227684CE8](v33, 0x10A3C40ED729E16);
    }
    if (v46)
    {
      v34 = sub_224274AB0(v46);
      MEMORY[0x227684CE8](v34, 0x10A3C40ED729E16);
    }
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    nullsub_30(&v47);
  }
}

void sub_2231D5BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_223212F0C((uint64_t *)va);
  sub_223212F0C((uint64_t *)va1);
  sub_223212EA4(v2 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D5BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2242A8AC4((uint64_t *)va);
  MEMORY[0x227684CE8](v3, 0x10A3C40ED729E16);
  sub_2242A8AC4(va1);
  sub_223212EA4(v4 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D5C20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223212EA4(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2231D5C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D5C48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v13[8];
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3.n128_f64[0] = sub_223215658(a1, (uint64_t)v13);
  v4 = v14;
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v3);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_224276BD8(v4, a2);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return nullsub_30(v13);
}

void sub_2231D5D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231D5D24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D5D24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_2231D5D8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v13[8];
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3.n128_f64[0] = sub_223215F1C(a1, (uint64_t)v13);
  v4 = v14;
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v3);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_224276BD8(v4, a2);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return nullsub_30(v13);
}

void sub_2231D5E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231D5D24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D5E68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  v3.n128_f64[0] = sub_2232160C4(a1, (uint64_t)v13);
  v4 = v13[1];
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v3);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_224279540(v4, a2);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return nullsub_30(v13);
}

void sub_2231D5F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231D5F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D5F44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_2231D5FAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  v3.n128_f64[0] = sub_223216A64(a1, (uint64_t)v13);
  v4 = v13[1];
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v3);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_224279540(v4, a2);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return nullsub_30(v13);
}

void sub_2231D6074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231D5F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D6088@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  v3.n128_f64[0] = sub_223216C24(a1, (uint64_t)v13);
  v4 = v13[1];
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v3);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_22427531C(v4, a2);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return nullsub_30(v13);
}

void sub_2231D6150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231D6164((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D6164(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_2231D61CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  v3.n128_f64[0] = sub_2232175C4(a1, (uint64_t)v13);
  v4 = v13[1];
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v3);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_22427531C(v4, a2);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return nullsub_30(v13);
}

void sub_2231D6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231D6164((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D62A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char __p[23];
  char v13;
  __int128 v14;

  v2 = a1[50];
  if (!v2)
  {
    v3 = a1[13];
    strcpy(__p, "KeyframeBundleCpuColor");
    v13 = 22;
    sub_223C867D8(v3, 31, (uint64_t *)__p, (uint64_t *)&v14);
    v4 = v14;
    v14 = 0uLL;
    v5 = (std::__shared_weak_count *)a1[51];
    *((_OWORD *)a1 + 25) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (!*((_QWORD *)&v14 + 1))
      goto LABEL_11;
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if ((v13 & 0x80000000) == 0)
      {
LABEL_13:
        v2 = a1[50];
        goto LABEL_14;
      }
    }
    operator delete(*(void **)__p);
    goto LABEL_13;
  }
LABEL_14:
  *(_QWORD *)__p = 0;
  return sub_2231D63CC(v2, __p);
}

void sub_2231D63B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231D63CC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 61))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(&v10, *(_QWORD *)(a1 + 8), 1);
    goto LABEL_11;
  }
LABEL_10:
  v10 = 0;
LABEL_11:
  sub_223217784(a1, a2);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231D6498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2231D64BC(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[2];

  v8 = (_QWORD *)sub_2231CF840((uint64_t)a1, a3);
  *v8 = &off_24EC21D90;
  v9 = (uint64_t)(v8 + 46);
  sub_2232291A8(v8 + 46);
  sub_2232291A8(a1 + 48);
  sub_2232291A8(a1 + 50);
  sub_2232291A8(a1 + 52);
  sub_2232291A8(a1 + 54);
  sub_2232291A8(a1 + 56);
  v17[0] = a3;
  v17[1] = a2;
  sub_2231D66AC(&v11, v17, 0);
  sub_2231D66AC(&v12, v17, 1u);
  if ((a4 & 4) != 0)
    sub_2231D66AC(v13, v17, 2u);
  else
    sub_2232291A8(v13);
  if ((a4 & 8) != 0)
    sub_2231D66AC(v14, v17, 3u);
  else
    sub_2232291A8(v14);
  if ((a4 & 0x10) != 0)
    sub_2231D66AC(v15, v17, 4u);
  else
    sub_2232291A8(v15);
  sub_2231D66AC(&v16, v17, 5u);
  sub_2231D6788(v9, &v11);
  sub_2231F4908(&v11);
  return a1;
}

void sub_2231D662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;

  do
  {
    v11 -= 2;
    sub_223167354((uint64_t)v11);
  }
  while (v11 != &a9);
  sub_2231F4908(v10);
  sub_2231D0094(v9);
  _Unwind_Resume(a1);
}

void sub_2231D6670()
{
  JUMPOUT(0x2231D6658);
}

void sub_2231D6678(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231D0094(v1);
  _Unwind_Resume(a1);
}

void sub_2231D668C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_224574764(v3, v2);
  sub_2231D0094(v1);
  _Unwind_Resume(a1);
}

void sub_2231D66AC(_QWORD *a1, _QWORD *a2, unsigned __int8 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;

  sub_2232290AC(dword_2245BBE84[a3], (const char *)*(unsigned int *)(*a2 + 88), *(_DWORD *)(*a2 + 92), 0, &v20);
  sub_223229188(&v20, 0, v5, v6, v7, v8);
  sub_223229198(&v20, 7u, v9, v10, v11, v12);
  v13 = (void ***)a2[1];
  nullsub_30(v13);
  sub_223229208(a1, v13, &v20, v14, v15, v16);
  v17 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_2231D6774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D6788(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v31;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (!v5)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v12 = a2[1];
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v9 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v12;
    if (!v9)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v8 = a2[1];
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v9 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v8;
    if (!v9)
      goto LABEL_11;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_11:
  v13 = a2[2];
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v13;
  if (!v14)
    goto LABEL_15;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v21 = a2[3];
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v18 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v21;
    if (!v18)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v17 = a2[3];
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v18 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v17;
    if (!v18)
      goto LABEL_21;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_21:
  v22 = a2[4];
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  v23 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v22;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v31 = a2[5];
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      v27 = *(std::__shared_weak_count **)(a1 + 88);
      *(_OWORD *)(a1 + 80) = v31;
      if (v27)
        goto LABEL_26;
      return a1;
    }
  }
  v26 = a2[5];
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v27 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v26;
  if (!v27)
    return a1;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
    return a1;
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  return a1;
}

_QWORD *sub_2231D69AC(_QWORD *a1, void ***a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t i;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD v49[3];
  uint64_t *v50;
  std::__shared_weak_count *v51;
  _BYTE v52[16];
  std::__shared_weak_count *v53;
  _DWORD v54[8];
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;

  v6 = (_QWORD *)sub_2231CFAC8((uint64_t)a1, a3);
  *v6 = &off_24EC21D90;
  v7 = v6 + 46;
  sub_2232291A8(v6 + 46);
  sub_2232291A8(a1 + 48);
  sub_2232291A8(a1 + 50);
  sub_2232291A8(a1 + 52);
  sub_2232291A8(a1 + 54);
  sub_2232291A8(a1 + 56);
  v55 = 0u;
  v56 = 0u;
  v57 = 728303372;
  kdebug_trace();
  for (i = 0; i != 6; ++i)
  {
    sub_22319AC90(a3, i, (uint64_t)v52);
    if (v54[0])
      v9 = v54[1] == 0;
    else
      v9 = 1;
    if (v9)
      goto LABEL_39;
    sub_2232290AC(dword_2245BBE84[i], (const char *)*(unsigned int *)(a3 + 104), *(_DWORD *)(a3 + 108), 0, &v50);
    sub_223229188(&v50, 0, v10, v11, v12, v13);
    sub_223229198(&v50, 7u, v14, v15, v16, v17);
    sub_22446FBF8((uint64_t)v52, v49);
    sub_2244E13A0((uint64_t)v49, &v58);
    v18 = v58;
    if (*((_QWORD *)&v58 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v18 + 1) + 16))(*((_QWORD *)&v18 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v18 + 1));
        if ((_QWORD)v18)
          goto LABEL_12;
LABEL_22:
        nullsub_30(a2);
        sub_223229208(&v58, a2, &v50, v31, v32, v33);
        v34 = &v7[2 * i];
        v35 = v58;
        v58 = 0uLL;
        v36 = (std::__shared_weak_count *)v34[1];
        *(_OWORD *)v34 = v35;
        if (!v36)
          goto LABEL_26;
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
          if (*((_QWORD *)&v58 + 1))
            goto LABEL_27;
        }
        else
        {
LABEL_26:
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
          if (*((_QWORD *)&v58 + 1))
          {
LABEL_27:
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
        }
        sub_2231D6E74((void ***)&v7[2 * i], (uint64_t)v52);
        goto LABEL_35;
      }
    }
    if (!(_QWORD)v18)
      goto LABEL_22;
LABEL_12:
    v21 = sub_2244E10DC((uint64_t)v49);
    nullsub_30(a2);
    sub_22322928C(&v58, a2, &v50, v21, 0, v22);
    v23 = &v7[2 * i];
    v24 = v58;
    v58 = 0uLL;
    v25 = (std::__shared_weak_count *)v23[1];
    *(_OWORD *)v23 = v24;
    if (!v25)
      goto LABEL_16;
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
      if (!*((_QWORD *)&v58 + 1))
        goto LABEL_35;
    }
    else
    {
LABEL_16:
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
      if (!*((_QWORD *)&v58 + 1))
        goto LABEL_35;
    }
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_35:
    sub_2244E0FF4(v49);
    v42 = v51;
    if (v51)
    {
      v43 = (unint64_t *)&v51->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        nullsub_30(v54);
        v45 = v53;
        if (!v53)
          goto LABEL_2;
        goto LABEL_40;
      }
    }
LABEL_39:
    nullsub_30(v54);
    v45 = v53;
    if (!v53)
      goto LABEL_2;
LABEL_40:
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
LABEL_2:
    nullsub_30(v52);
  }
  kdebug_trace();
  return a1;
}

void sub_2231D6D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231D0094(v1);
  _Unwind_Resume(a1);
}

void sub_2231D6D88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_224574764(v3, v2);
  sub_2231D0094(v1);
  _Unwind_Resume(a1);
}

void sub_2231D6DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  _QWORD *v22;

  sub_2244E0FF4(&a9);
  sub_223167354((uint64_t)&a12);
  sub_22319A5E0((uint64_t)&a14);
  sub_2231874DC((uint64_t)&a21);
  sub_2231F4908(v22);
  sub_2231D0094(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_2231D6E0C(uint64_t a1, unsigned int a2)
{
  if (a2 >= 6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 987, (uint64_t)"*c < *KeyframeBundleComponent::NumComponents", 44, (uint64_t)"Unsupported component", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1 + 16 * a2 + 368;
}

uint64_t sub_2231D6E74(void ***a1, uint64_t a2)
{
  int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;

  v5 = *(_DWORD *)(a2 + 24);
  v4 = *(_DWORD *)(a2 + 28);
  if (!sub_223225C34(a1)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include/Reconstruction/Gpu/Utils.h", 97, (uint64_t)"texture", 7, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (sub_223229314(a1, v6, v7, v8, v9, v10) != v5|| sub_223229330(a1, v11, v12, v13, v14, v15) != v4)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include/Reconstruction/Gpu/Utils.h", 99, (uint64_t)"(width == texture.width()) && (height == texture.height())", 58, (uint64_t)"Texture and image size don't match", 34, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = *(_DWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 8);
  if (!v17)
    goto LABEL_21;
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    v17 = *(_QWORD *)(a2 + 8);
    v22 = *(std::__shared_weak_count **)(a2 + 16);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if (*(_BYTE *)(a2 + 53))
          goto LABEL_19;
LABEL_21:
        v38 = 0;
        goto LABEL_22;
      }
    }
  }
  if (!*(_BYTE *)(a2 + 53))
    goto LABEL_21;
LABEL_19:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v17 + 96))(&v38, v17, 0);
LABEL_22:
  v33 = 0;
  v34 = 0;
  v35 = v5;
  v36 = v4;
  v37 = 1;
  v26 = *(_QWORD *)(a2 + 40);
  if (*(_BYTE *)(a2 + 52) && v26)
  {
    v27 = *(_QWORD *)(a2 + 8);
    v28 = *(std::__shared_weak_count **)(a2 + 16);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v27 + 88))(v27, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v26 = *(_QWORD *)(a2 + 40);
  }
  sub_2232293A0(a1, (uint64_t)&v33, 0, v26, v16);
  result = v38;
  v38 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231D70CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231D70F4(_QWORD *a1)
{
  *a1 = &off_24EC21D90;
  sub_2231F4908(a1 + 46);
  return sub_2231D0094((uint64_t)a1);
}

void sub_2231D7128(_QWORD *a1)
{
  *a1 = &off_24EC21D90;
  sub_2231F4908(a1 + 46);
  sub_2231D0094((uint64_t)a1);
  JUMPOUT(0x227684CE8);
}

void sub_2231D7170(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  _BYTE v50[4];
  int v51;
  _OWORD v52[2];
  uint64_t v53;
  char v54;
  int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  int v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  int v65;
  int64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  char v69;
  int v70;
  int64x2_t v71;
  int64x2_t v72;
  uint64_t v73;
  char v74;
  int v75;
  int64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;

  if ((!*(_DWORD *)(a1 + 104) || !*(_DWORD *)(a1 + 108))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 999, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2232285F8(&v80);
  v10 = 0;
  v50[0] = 0;
  v51 = 0;
  v52[0] = vdupq_n_s64(0xC0EFFC0000000000);
  v52[1] = v52[0];
  v53 = 0x100000002;
  v54 = 1;
  v55 = 1;
  v56 = 0u;
  v57 = 0u;
  v58 = 0x100000002;
  v59 = 2;
  v60 = 2;
  v61 = 0u;
  v62 = 0u;
  v63 = 0x100000002;
  v64 = 3;
  v65 = 3;
  v66 = vdupq_n_s64(0x40EFE00000000000uLL);
  v67 = v66;
  v68 = 0x100000002;
  v69 = 4;
  v70 = 4;
  v71 = v66;
  v72 = v66;
  v73 = 0x100000002;
  v74 = 5;
  v75 = 5;
  v47 = a1;
  v11 = a1 + 368;
  v76 = vdupq_n_s64(0x7FF8000000000000uLL);
  v77 = 0x7FF8000000000000;
  v78 = 0x7FF8000000000000;
  v79 = 0x100000002;
  do
  {
    if (!BYTE4(a2) || ((a2 >> v10) & 1) != 0)
    {
      v12 = v50[48 * v10];
      if (v12 >= 6
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 987, (uint64_t)"*c < *KeyframeBundleComponent::NumComponents", 44, (uint64_t)"Unsupported component", 21, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = (_QWORD **)(v11 + 16 * v12);
      if (sub_223225C34(v13))
      {
        sub_223228674((void ***)&v80, (const char *)*(unsigned int *)&v50[48 * v10 + 4], v6, v7, v8, v9, &v48);
        sub_2232285A4(&v48, v13, v14, v15, v16, v17);
        sub_2232285B8(&v48, *((_DWORD *)&v53 + 12 * v10), v18, v19, v20, v21);
        sub_2232285C8(&v48, *((_DWORD *)&v53 + 12 * v10 + 1), v22, v23, v24, v25);
        sub_2232285D8(&v48, (uint64_t)&v52[3 * v10], v26, v27, v28, v29);
        v30 = v49;
        if (v49)
        {
          p_shared_owners = (unint64_t *)&v49->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
    }
    ++v10;
  }
  while (v10 != 6);
  sub_223228888(&v80, 1u, v6, v7, v8, v9);
  if (!a4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 1046, (uint64_t)"command_buffer.has_value()", 26, (uint64_t)"Expect non null command buffer", 30, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223226BC8(a3, (uint64_t)&v80, (uint64_t)&v48);
  sub_223CEEDEC((uint64_t)&v48, "Keyframing.KeyframeBundleGpu.Clear", 0x22uLL);
  sub_223226DF0((uint64_t)&v48, v33, v34, v35, v36, v37);
  if (!BYTE4(a2) || (a2 & 4) != 0)
  {
    *(_BYTE *)(v47 + 308) = 0;
    *(_DWORD *)(v47 + 304) = 0;
    if (*(_BYTE *)(v47 + 364))
      *(_BYTE *)(v47 + 364) = 0;
    if (!BYTE4(a2))
      goto LABEL_24;
  }
  if ((_DWORD)a2 == 63)
  {
LABEL_24:
    v38 = *(uint64_t **)(v47 + 112);
    if (!v38)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 406, (uint64_t)"clouds", 6, (uint64_t)"Ptr to JasperClouds expected non-null in KF bundle", 50, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v38 = *(uint64_t **)(v47 + 112);
    }
    v39 = *v38;
    for (i = v38[1]; i != v39; i -= 40)
    {
      v41 = *(void **)(i - 24);
      if (v41)
      {
        *(_QWORD *)(i - 16) = v41;
        operator delete(v41);
      }
    }
    v38[1] = v39;
  }
  sub_223226D74(&v48);
  v42 = v81;
  if (v81)
  {
    v43 = (unint64_t *)&v81->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_2231D7548(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_2231D7588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  sub_223167354(v5 - 104);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231D75A4(_QWORD *a1, char *a2)
{
  char v5;

  if (!*a2)
    return sub_2231813E8(a1, (uint64_t)"NoUpdate", 8);
  if ((*a2 & 1) == 0)
  {
    if ((*a2 & 2) == 0)
    {
      if ((*a2 & 4) == 0)
      {
        if ((*a2 & 8) == 0)
        {
          if ((*a2 & 0x10) == 0)
          {
            if ((*a2 & 0x20) != 0)
              goto LABEL_25;
            return a1;
          }
          goto LABEL_23;
        }
LABEL_21:
        sub_2231813E8(a1, (uint64_t)"ContentUpdated", 14);
        v5 = *a2;
        if ((*a2 & 0x10) != 0)
          goto LABEL_22;
        goto LABEL_14;
      }
LABEL_19:
      sub_2231813E8(a1, (uint64_t)"PoseUpdated", 11);
      v5 = *a2;
      if ((*a2 & 8) != 0)
        goto LABEL_20;
      goto LABEL_13;
    }
LABEL_17:
    sub_2231813E8(a1, (uint64_t)"KeyframeRelocalized", 19);
    v5 = *a2;
    if ((*a2 & 4) != 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  sub_2231813E8(a1, (uint64_t)"KeyframeCreated", 15);
  v5 = *a2;
  if ((*a2 & 2) != 0)
  {
    sub_2231813E8(a1, (uint64_t)"|", 1);
    goto LABEL_17;
  }
  if ((*a2 & 4) != 0)
  {
LABEL_18:
    sub_2231813E8(a1, (uint64_t)"|", 1);
    goto LABEL_19;
  }
LABEL_12:
  if ((v5 & 8) != 0)
  {
LABEL_20:
    sub_2231813E8(a1, (uint64_t)"|", 1);
    goto LABEL_21;
  }
LABEL_13:
  if ((v5 & 0x10) != 0)
  {
LABEL_22:
    sub_2231813E8(a1, (uint64_t)"|", 1);
LABEL_23:
    sub_2231813E8(a1, (uint64_t)"SlamAnchorExternal", 18);
    if ((*a2 & 0x20) == 0)
      return a1;
    goto LABEL_24;
  }
LABEL_14:
  if ((v5 & 0x20) == 0)
    return a1;
LABEL_24:
  sub_2231813E8(a1, (uint64_t)"|", 1);
LABEL_25:
  sub_2231813E8(a1, (uint64_t)"PoseAndContentDeleted", 21);
  return a1;
}

_QWORD *sub_2231D772C(_QWORD *a1, unsigned __int8 *a2)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v2 = *a2;
  if (v2 == 2)
  {
    v3 = "ProcessAnyway";
    v4 = 13;
  }
  else if (v2 == 1)
  {
    v3 = "InsignificantChange";
    v4 = 19;
  }
  else
  {
    v3 = "SignificantChange";
    v4 = 17;
  }
  return sub_2231813E8(a1, (uint64_t)v3, v4);
}

BOOL sub_2231D7770(int a1)
{
  if ((~a1 & 0x14) == 0 || (a1 & 0x18) == 24)
    return 0;
  if ((a1 & 0xFFFFFFCF) != 0 && (a1 & 0x30) != 0)
    return 0;
  return (a1 & 6) != 2;
}

uint64_t sub_2231D77B8(int a1, __int32 a2, int8x8_t a3)
{
  __int32 v3;
  BOOL v5;
  int v6;
  int v9;

  v3 = a2;
  if (a2)
  {
    a3.i32[0] = a2;
    if (vaddlv_u8((uint8x8_t)vcnt_s8(a3)) >= 2u
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 1203, (uint64_t)"is_flag(in)", 11, (uint64_t)"Received an invalid (composite) update state as input.", 54, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_32;
    }
  }
  if (a1 && (v3 & a1) == 0)
  {
    v5 = (v3 & 0x30) == 0 || (a1 & 9) == 0;
    v6 = a1 & 0xF6;
    if (v5)
      v6 = a1;
    if ((v6 & 0x34) == 0 || (v3 & 0x34) == 0)
      a1 = v6;
    else
      a1 = v6 & 0xEB;
    if ((v3 & 0x30) != 0 && (a1 & 2) != 0)
      return 0;
    v9 = a1 & 0x30;
    if ((v3 & 2) != 0 && (a1 & 0x30) != 0)
    {
      if (a1 == 32
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 1263, (uint64_t)"cur != KeyframeUpdateStatePoseAndContentDeleted", 47, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_32;
      }
      v9 = a1 & 0x20;
      LOBYTE(a1) = a1 & 0xEF;
      LOBYTE(v3) = v3 & 0xFD;
    }
    if ((a1 & ((v3 & 4) >> 2)) != 0)
      LOBYTE(v3) = v3 & 0xFB;
    if (!v9
      || (v3 & 0xC) == 0
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundle.mm", 1274, (uint64_t)"!update_for_invalid_pose", 24, (uint64_t)"Received update for invalid pose", 32, (void (*)(void **))sub_22457406C))
    {
      return (v3 | a1);
    }
LABEL_32:
    abort();
  }
  return (v3 | a1);
}

BOOL sub_2231D793C(int a1, int a2, int a3)
{
  return !a2 || a2 == 8 && a1 == 1 && a3 == 1;
}

void sub_2231D7968(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  size_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  int v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const void *v26;
  void *v27;
  void **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  size_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  const void *v58;
  void *v59;
  void **v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  size_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  const void *v87;
  void *v88;
  _BYTE *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  size_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  const void *v110;
  void *v111;
  void **v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  __n128 v119;
  double v120;
  double v121;
  float32x4_t v122;
  double v123;
  float32x4_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::string::size_type size;
  std::string *v129;
  std::string::size_type v130;
  std::string::size_type v131;
  int v132;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  int v138;
  size_t v139;
  unint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  const void *v145;
  void *v146;
  _BYTE *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  int v164;
  size_t v165;
  unint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  const void *v171;
  void *v172;
  _BYTE *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  int v187;
  size_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  const void *v194;
  void *v195;
  void **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  __int128 v207;
  uint64_t *v208;
  uint64_t v209;
  int v210;
  size_t v211;
  unint64_t v212;
  _BYTE *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  __n128 v223;
  double v224;
  double v225;
  float32x4_t v226;
  double v227;
  float32x4_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  const void *v235;
  void *v236;
  _BYTE *v237;
  uint64_t v238;
  uint64_t *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  void *v247;
  std::__shared_weak_count *v248;
  unint64_t *p_shared_owners;
  unint64_t v250;
  __int128 v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  size_t v264;
  unint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  const void *v270;
  void *v271;
  void **v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  void *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  void *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  int v307;
  size_t v308;
  unint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  const void *v314;
  void *v315;
  _BYTE *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  void **v321;
  void *v322;
  void *v323;
  int v324;
  std::string v327;
  _BYTE v328[32];
  int v329;
  _DWORD v330[6];
  _BYTE v331[32];
  int v332;
  void *__p[2];
  __int128 v334;
  int v335;
  char v336;
  int v337;
  int v338;
  std::string v339;
  std::string v340;
  void *v341[18];
  __int128 v342;
  _QWORD v343[5];

  v343[2] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  if (!sub_224569C6C())
    return;
  v4 = sub_2241471F8();
  v5 = sub_2241486EC((uint64_t)v4);
  if (sub_2241053B4(v5))
    return;
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = v7 + 11;
  if (v7 + 11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    v12 = (char *)operator new(v10 + 1);
    *(_QWORD *)&v328[8] = v7 + 11;
    *(_QWORD *)&v328[16] = v11 | 0x8000000000000000;
    *(_QWORD *)v328 = v12;
    v9 = v12 + 11;
    *(_DWORD *)(v12 + 7) = 778530409;
    *(_QWORD *)v12 = *(_QWORD *)"Keyframing.";
  }
  else
  {
    v328[9] = 0;
    *(_WORD *)&v328[10] = 0;
    *(_DWORD *)&v328[12] = 0;
    *(_QWORD *)&v328[16] = 0;
    v328[23] = v7 + 11;
    v9 = &v328[11];
    strcpy(v328, "Keyframi");
    if (!v7)
      goto LABEL_17;
  }
  if (v6 >= 0)
    v13 = a2;
  else
    v13 = *a2;
  memmove(v9, v13, v7);
LABEL_17:
  v9[v7] = 0;
  v341[0] = "cv3d.recon.";
  v341[1] = (void *)11;
  v14 = (void *)v328[23];
  v15 = v328;
  if (v328[23] < 0)
  {
    v15 = *(_BYTE **)v328;
    v14 = *(void **)&v328[8];
  }
  v341[2] = v15;
  v341[3] = v14;
  sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)__p);
  v16 = sub_2241472E0();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
  {
    v18 = 1;
    if ((SBYTE7(v334) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 104))
    v17 = *(_DWORD *)(a1 + 108) == 0;
  else
    v17 = 1;
  v18 = v17;
  if (SBYTE7(v334) < 0)
LABEL_29:
    operator delete(__p[0]);
LABEL_30:
  if ((v328[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v328);
    if ((v18 & 1) != 0)
      return;
  }
  else if ((v18 & 1) != 0)
  {
    return;
  }
  v19 = *((char *)a2 + 23);
  if (v19 >= 0)
    v20 = *((unsigned __int8 *)a2 + 23);
  else
    v20 = (size_t)a2[1];
  v21 = v20 + 11;
  if (v20 + 11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v21 >= 0x17)
  {
    v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v23 = v21 | 7;
    v24 = v23 + 1;
    v25 = operator new(v23 + 1);
    __p[1] = (void *)(v20 + 11);
    *(_QWORD *)&v334 = v24 | 0x8000000000000000;
    __p[0] = v25;
    v22 = (char *)v25 + 11;
    *(_DWORD *)((char *)v25 + 7) = 778530409;
    *v25 = *(_QWORD *)"Keyframing.";
  }
  else
  {
    __p[1] = 0;
    *(_QWORD *)&v334 = 0;
    *(_DWORD *)((char *)__p + 7) = 778530409;
    BYTE7(v334) = v20 + 11;
    v22 = (char *)&__p[1] + 3;
    __p[0] = *(void **)"Keyframing.";
    if (!v20)
      goto LABEL_48;
  }
  if (v19 >= 0)
    v26 = a2;
  else
    v26 = *a2;
  memmove(v22, v26, v20);
LABEL_48:
  v22[v20] = 0;
  v341[0] = "cv3d.recon.";
  v341[1] = (void *)11;
  v27 = (void *)BYTE7(v334);
  v28 = __p;
  if (SBYTE7(v334) < 0)
  {
    v28 = (void **)__p[0];
    v27 = __p[1];
  }
  v341[2] = v28;
  v341[3] = v27;
  sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)v331);
  if (SBYTE7(v334) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v29 = sub_2241471F8();
    v30 = sub_2241486EC((uint64_t)v29);
    if (!sub_2241053B4(v30))
    {
      v31 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
      {
        memset(v328, 0, sizeof(v328));
        v329 = 728325608;
        kdebug_trace();
        sub_22320F184(a1, (uint64_t)v341);
        sub_2231D3E34((uint64_t)__p, (uint64_t)v341);
        v32 = (std::__shared_weak_count *)v341[2];
        if (v341[2])
        {
          v33 = (unint64_t *)((char *)v341[2] + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        nullsub_30(v341);
        sub_2231DA98C((double *)&qword_255788F20, v31, (uint64_t)__p, "depth");
        v35 = (std::__shared_weak_count *)v334;
        if ((_QWORD)v334)
        {
          v36 = (unint64_t *)(v334 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        nullsub_30(__p);
        kdebug_trace();
      }
    }
  }
  memset(v328, 0, sizeof(v328));
  v329 = 728325624;
  kdebug_trace();
  v38 = v331[23];
  if (v331[23] < 0)
    v38 = *(_QWORD *)&v331[8];
  if (v38 >= 0x11)
  {
    v39 = v331;
    if (v331[23] < 0)
      v39 = *(_BYTE **)v331;
    v40 = *(_QWORD *)v39;
    v41 = *((_QWORD *)v39 + 1);
    v42 = v39[16];
    if (v40 == 0x6365722E64337663 && v41 == 0x73746174532E6E6FLL && v42 == 46)
    {
      sub_223187510();
      sub_22320F184(a1, (uint64_t)v341);
      sub_2231D3E34((uint64_t)__p, (uint64_t)v341);
      v45 = (std::__shared_weak_count *)v341[2];
      if (v341[2])
      {
        v46 = (unint64_t *)((char *)v341[2] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      nullsub_30(v341);
      v48 = (std::__shared_weak_count *)v334;
      if ((_QWORD)v334)
      {
        v49 = (unint64_t *)(v334 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      nullsub_30(__p);
    }
  }
  kdebug_trace();
  if ((v331[23] & 0x80000000) != 0)
    operator delete(*(void **)v331);
  v51 = *((char *)a2 + 23);
  if (v51 >= 0)
    v52 = *((unsigned __int8 *)a2 + 23);
  else
    v52 = (size_t)a2[1];
  v53 = v52 + 11;
  if (v52 + 11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v53 >= 0x17)
  {
    v55 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v55 = v53 | 7;
    v56 = v55 + 1;
    v57 = operator new(v55 + 1);
    __p[1] = (void *)(v52 + 11);
    *(_QWORD *)&v334 = v56 | 0x8000000000000000;
    __p[0] = v57;
    v54 = (char *)v57 + 11;
    *(_DWORD *)((char *)v57 + 7) = 778530409;
    *v57 = *(_QWORD *)"Keyframing.";
  }
  else
  {
    __p[1] = 0;
    *(_QWORD *)&v334 = 0;
    *(_DWORD *)((char *)__p + 7) = 778530409;
    BYTE7(v334) = v52 + 11;
    v54 = (char *)&__p[1] + 3;
    __p[0] = *(void **)"Keyframing.";
    if (!v52)
      goto LABEL_106;
  }
  if (v51 >= 0)
    v58 = a2;
  else
    v58 = *a2;
  memmove(v54, v58, v52);
LABEL_106:
  v54[v52] = 0;
  v341[0] = "cv3d.recon.";
  v341[1] = (void *)11;
  v59 = (void *)BYTE7(v334);
  v60 = __p;
  if (SBYTE7(v334) < 0)
  {
    v60 = (void **)__p[0];
    v59 = __p[1];
  }
  v341[2] = v60;
  v341[3] = v59;
  sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)v331);
  if (SBYTE7(v334) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v61 = sub_2241471F8();
    v62 = sub_2241486EC((uint64_t)v61);
    if (!sub_2241053B4(v62))
    {
      v63 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63))
      {
        memset(v328, 0, sizeof(v328));
        v329 = 728325608;
        kdebug_trace();
        sub_223210828(a1, (uint64_t)v341);
        sub_2231D3E34((uint64_t)__p, (uint64_t)v341);
        v64 = (std::__shared_weak_count *)v341[2];
        if (v341[2])
        {
          v65 = (unint64_t *)((char *)v341[2] + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        nullsub_30(v341);
        sub_2231DAAD4((double *)&qword_255788F20, v63, (uint64_t)__p, "confidence");
        v67 = (std::__shared_weak_count *)v334;
        if ((_QWORD)v334)
        {
          v68 = (unint64_t *)(v334 + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        nullsub_30(__p);
        kdebug_trace();
      }
    }
  }
  memset(v328, 0, sizeof(v328));
  v329 = 728325624;
  kdebug_trace();
  v70 = v331[23];
  if (v331[23] < 0)
    v70 = *(_QWORD *)&v331[8];
  if (v70 >= 0x11)
  {
    v71 = v331;
    if (v331[23] < 0)
      v71 = *(_BYTE **)v331;
    v72 = *(_QWORD *)v71;
    v73 = *((_QWORD *)v71 + 1);
    v74 = v71[16];
    if (v72 == 0x6365722E64337663 && v73 == 0x73746174532E6E6FLL && v74 == 46)
    {
      sub_223187510();
      sub_223210828(a1, (uint64_t)v341);
      sub_2231D3E34((uint64_t)__p, (uint64_t)v341);
      v214 = (std::__shared_weak_count *)v341[2];
      if (v341[2])
      {
        v215 = (unint64_t *)((char *)v341[2] + 8);
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      nullsub_30(v341);
      v217 = (std::__shared_weak_count *)v334;
      if ((_QWORD)v334)
      {
        v218 = (unint64_t *)(v334 + 8);
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
      nullsub_30(__p);
    }
  }
  kdebug_trace();
  if ((v331[23] & 0x80000000) != 0)
    operator delete(*(void **)v331);
  sub_223212564(a1, (uint64_t)v341);
  sub_2231D49F0((uint64_t)__p, (uint64_t)v341);
  v77 = (std::__shared_weak_count *)v341[2];
  if (v341[2])
  {
    v78 = (unint64_t *)((char *)v341[2] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  nullsub_30(v341);
  if (v337 && v338)
  {
    v80 = *((char *)a2 + 23);
    if (v80 >= 0)
      v81 = *((unsigned __int8 *)a2 + 23);
    else
      v81 = (size_t)a2[1];
    v82 = v81 + 11;
    if (v81 + 11 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v82 >= 0x17)
    {
      v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v84 = v82 | 7;
      v85 = v84 + 1;
      v86 = (char *)operator new(v84 + 1);
      *(_QWORD *)&v328[8] = v81 + 11;
      *(_QWORD *)&v328[16] = v85 | 0x8000000000000000;
      *(_QWORD *)v328 = v86;
      *(_DWORD *)(v86 + 7) = 778530409;
      *(_QWORD *)v86 = *(_QWORD *)"Keyframing.";
      v83 = v86 + 11;
    }
    else
    {
      v328[9] = 0;
      *(_WORD *)&v328[10] = 0;
      *(_DWORD *)&v328[12] = 0;
      *(_QWORD *)&v328[16] = 0;
      v328[23] = v81 + 11;
      strcpy(v328, "Keyframi");
      v83 = &v328[11];
      if (!v81)
      {
LABEL_159:
        v83[v81] = 0;
        v341[0] = "cv3d.recon.";
        v341[1] = (void *)11;
        v88 = (void *)v328[23];
        v89 = v328;
        if (v328[23] < 0)
        {
          v89 = *(_BYTE **)v328;
          v88 = *(void **)&v328[8];
        }
        v341[2] = v89;
        v341[3] = v88;
        sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)v331);
        if ((v328[23] & 0x80000000) != 0)
          operator delete(*(void **)v328);
        sub_224569D7C();
        if (sub_224569C6C())
        {
          v90 = sub_2241471F8();
          v91 = sub_2241486EC((uint64_t)v90);
          if (!sub_2241053B4(v91))
          {
            v92 = sub_2241472E0();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92))
            {
              memset(v328, 0, sizeof(v328));
              v329 = 728325608;
              kdebug_trace();
              v341[0] = &off_24EC21B18;
              sub_2231C5C38(&v337, &v341[1]);
              sub_2231C59E4((uint64_t)__p, (uint64_t)v341, (_BOOL8)&v340);
              sub_2231DAC1C((double *)&qword_255788F20, v92, v341, "semantic");
              sub_223167354((uint64_t)&v341[1]);
              nullsub_30(v341);
              kdebug_trace();
            }
          }
        }
        memset(v328, 0, sizeof(v328));
        v329 = 728325624;
        kdebug_trace();
        v93 = v331[23];
        if (v331[23] < 0)
          v93 = *(_QWORD *)&v331[8];
        if (v93 >= 0x11)
        {
          v94 = v331;
          if (v331[23] < 0)
            v94 = *(_BYTE **)v331;
          v95 = *(_QWORD *)v94;
          v96 = *((_QWORD *)v94 + 1);
          v97 = v94[16];
          if (v95 == 0x6365722E64337663 && v96 == 0x73746174532E6E6FLL && v97 == 46)
          {
            sub_223187510();
            v341[0] = &off_24EC21B18;
            sub_2231C5C38(&v337, &v341[1]);
            sub_2231C59E4((uint64_t)__p, (uint64_t)v341, (_BOOL8)&v340);
            sub_223167354((uint64_t)&v341[1]);
            nullsub_30(v341);
          }
        }
        kdebug_trace();
        if ((v331[23] & 0x80000000) != 0)
          operator delete(*(void **)v331);
        goto LABEL_183;
      }
    }
    if (v80 >= 0)
      v87 = a2;
    else
      v87 = *a2;
    memmove(v83, v87, v81);
    goto LABEL_159;
  }
LABEL_183:
  v100 = (std::__shared_weak_count *)v334;
  if ((_QWORD)v334)
  {
    v101 = (unint64_t *)(v334 + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  nullsub_30(__p);
  v103 = *((char *)a2 + 23);
  if (v103 >= 0)
    v104 = *((unsigned __int8 *)a2 + 23);
  else
    v104 = (size_t)a2[1];
  v105 = v104 + 11;
  if (v104 + 11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v105 >= 0x17)
  {
    v107 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v105 | 7) != 0x17)
      v107 = v105 | 7;
    v108 = v107 + 1;
    v109 = operator new(v107 + 1);
    __p[1] = (void *)(v104 + 11);
    *(_QWORD *)&v334 = v108 | 0x8000000000000000;
    __p[0] = v109;
    v106 = (char *)v109 + 11;
    *(_DWORD *)((char *)v109 + 7) = 778530409;
    *v109 = *(_QWORD *)"Keyframing.";
  }
  else
  {
    __p[1] = 0;
    *(_QWORD *)&v334 = 0;
    *(_DWORD *)((char *)__p + 7) = 778530409;
    BYTE7(v334) = v104 + 11;
    v106 = (char *)&__p[1] + 3;
    __p[0] = *(void **)"Keyframing.";
    if (!v104)
      goto LABEL_202;
  }
  if (v103 >= 0)
    v110 = a2;
  else
    v110 = *a2;
  memmove(v106, v110, v104);
LABEL_202:
  v106[v104] = 0;
  v341[0] = "cv3d.recon.";
  v341[1] = (void *)11;
  v111 = (void *)BYTE7(v334);
  v112 = __p;
  if (SBYTE7(v334) < 0)
  {
    v112 = (void **)__p[0];
    v111 = __p[1];
  }
  v341[2] = v112;
  v341[3] = v111;
  sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, &v340);
  if (SBYTE7(v334) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v113 = sub_2241471F8();
    v114 = sub_2241486EC((uint64_t)v113);
    if (!sub_2241053B4(v114))
    {
      v115 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v115 + 24))(v115))
      {
        memset(v331, 0, sizeof(v331));
        v332 = 728325608;
        kdebug_trace();
        sub_2232109F4(a1, (uint64_t)__p);
        sub_2231D43D0((uint64_t)v328, (uint64_t)__p);
        v116 = (std::__shared_weak_count *)v334;
        if ((_QWORD)v334)
        {
          v117 = (unint64_t *)(v334 + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        nullsub_30(__p);
        LODWORD(v339.__r_.__value_.__l.__data_) = 1132396544;
        v341[0] = &off_24EC21B18;
        sub_2231C5C38(v330, &v341[1]);
        __p[0] = &v339;
        sub_22321860C((uint64_t)v328, (uint64_t)v341, (float **)__p, v119, v120, v121, v122, v123, v124);
        sub_2231DAD64((double *)&qword_255788F20, v115, v341, "normal");
        sub_223167354((uint64_t)&v341[1]);
        nullsub_30(v341);
        v125 = *(std::__shared_weak_count **)&v328[16];
        if (*(_QWORD *)&v328[16])
        {
          v126 = (unint64_t *)(*(_QWORD *)&v328[16] + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        nullsub_30(v328);
        kdebug_trace();
      }
    }
  }
  memset(v331, 0, sizeof(v331));
  v332 = 728325624;
  kdebug_trace();
  size = HIBYTE(v340.__r_.__value_.__r.__words[2]);
  if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v340.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v129 = &v340;
    if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v129 = (std::string *)v340.__r_.__value_.__r.__words[0];
    v130 = v129->__r_.__value_.__r.__words[0];
    v131 = v129->__r_.__value_.__l.__size_;
    v132 = v129->__r_.__value_.__s.__data_[16];
    if (v130 == 0x6365722E64337663 && v131 == 0x73746174532E6E6FLL && v132 == 46)
    {
      sub_223187510();
      sub_2232109F4(a1, (uint64_t)__p);
      sub_2231D43D0((uint64_t)v328, (uint64_t)__p);
      v220 = (std::__shared_weak_count *)v334;
      if ((_QWORD)v334)
      {
        v221 = (unint64_t *)(v334 + 8);
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      nullsub_30(__p);
      LODWORD(v339.__r_.__value_.__l.__data_) = 1132396544;
      v341[0] = &off_24EC21B18;
      sub_2231C5C38(v330, &v341[1]);
      __p[0] = &v339;
      sub_22321860C((uint64_t)v328, (uint64_t)v341, (float **)__p, v223, v224, v225, v226, v227, v228);
      sub_223167354((uint64_t)&v341[1]);
      nullsub_30(v341);
      v229 = *(std::__shared_weak_count **)&v328[16];
      if (*(_QWORD *)&v328[16])
      {
        v230 = (unint64_t *)(*(_QWORD *)&v328[16] + 8);
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      nullsub_30(v328);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  sub_223212390(a1, (uint64_t)v341);
  sub_2231D43D0((uint64_t)__p, (uint64_t)v341);
  v135 = (std::__shared_weak_count *)v341[2];
  if (v341[2])
  {
    v136 = (unint64_t *)((char *)v341[2] + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  nullsub_30(v341);
  if (v337 && v338)
  {
    v138 = *((char *)a2 + 23);
    if (v138 >= 0)
      v139 = *((unsigned __int8 *)a2 + 23);
    else
      v139 = (size_t)a2[1];
    v140 = v139 + 11;
    if (v139 + 11 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v140 >= 0x17)
    {
      v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v140 | 7) != 0x17)
        v142 = v140 | 7;
      v143 = v142 + 1;
      v144 = (char *)operator new(v142 + 1);
      *(_QWORD *)&v331[8] = v139 + 11;
      *(_QWORD *)&v331[16] = v143 | 0x8000000000000000;
      *(_QWORD *)v331 = v144;
      *(_DWORD *)(v144 + 7) = 778530409;
      *(_QWORD *)v144 = *(_QWORD *)"Keyframing.";
      v141 = v144 + 11;
    }
    else
    {
      v331[9] = 0;
      *(_WORD *)&v331[10] = 0;
      *(_DWORD *)&v331[12] = 0;
      *(_QWORD *)&v331[16] = 0;
      v331[23] = v139 + 11;
      strcpy(v331, "Keyframi");
      v141 = &v331[11];
      if (!v139)
      {
LABEL_255:
        v141[v139] = 0;
        v341[0] = "cv3d.recon.";
        v341[1] = (void *)11;
        v146 = (void *)v331[23];
        v147 = v331;
        if (v331[23] < 0)
        {
          v147 = *(_BYTE **)v331;
          v146 = *(void **)&v331[8];
        }
        v341[2] = v147;
        v341[3] = v146;
        sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)v328);
        if ((v331[23] & 0x80000000) != 0)
          operator delete(*(void **)v331);
        sub_224569D7C();
        if (sub_224569C6C())
        {
          v148 = sub_2241471F8();
          v149 = sub_2241486EC((uint64_t)v148);
          if (!sub_2241053B4(v149))
          {
            v150 = sub_2241472E0();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150))
            {
              memset(v341, 0, 32);
              LODWORD(v341[4]) = 728325608;
              kdebug_trace();
              sub_2231DAEAC((double *)&qword_255788F20, v150, (uint64_t)__p, "color");
              kdebug_trace();
            }
          }
        }
        memset(v341, 0, 32);
        LODWORD(v341[4]) = 728325624;
        kdebug_trace();
        v151 = v328[23];
        if (v328[23] < 0)
          v151 = *(_QWORD *)&v328[8];
        if (v151 >= 0x11)
        {
          v152 = v328;
          if (v328[23] < 0)
            v152 = *(_BYTE **)v328;
          v153 = *(_QWORD *)v152;
          v154 = *((_QWORD *)v152 + 1);
          v155 = v152[16];
          if (v153 == 0x6365722E64337663 && v154 == 0x73746174532E6E6FLL && v155 == 46)
            sub_223187510();
        }
        kdebug_trace();
        if ((v328[23] & 0x80000000) != 0)
          operator delete(*(void **)v328);
        goto LABEL_279;
      }
    }
    if (v138 >= 0)
      v145 = a2;
    else
      v145 = *a2;
    memmove(v141, v145, v139);
    goto LABEL_255;
  }
LABEL_279:
  v158 = (std::__shared_weak_count *)v334;
  if ((_QWORD)v334)
  {
    v159 = (unint64_t *)(v334 + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  nullsub_30(__p);
  sub_223213C9C(a1, (uint64_t)v341);
  sub_2231D49F0((uint64_t)__p, (uint64_t)v341);
  v161 = (std::__shared_weak_count *)v341[2];
  if (v341[2])
  {
    v162 = (unint64_t *)((char *)v341[2] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  nullsub_30(v341);
  if (v337 && v338)
  {
    v164 = *((char *)a2 + 23);
    if (v164 >= 0)
      v165 = *((unsigned __int8 *)a2 + 23);
    else
      v165 = (size_t)a2[1];
    v166 = v165 + 11;
    if (v165 + 11 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v166 >= 0x17)
    {
      v168 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v166 | 7) != 0x17)
        v168 = v166 | 7;
      v169 = v168 + 1;
      v170 = (char *)operator new(v168 + 1);
      *(_QWORD *)&v328[8] = v165 + 11;
      *(_QWORD *)&v328[16] = v169 | 0x8000000000000000;
      *(_QWORD *)v328 = v170;
      *(_DWORD *)(v170 + 7) = 778530409;
      *(_QWORD *)v170 = *(_QWORD *)"Keyframing.";
      v167 = v170 + 11;
    }
    else
    {
      v328[9] = 0;
      *(_WORD *)&v328[10] = 0;
      *(_DWORD *)&v328[12] = 0;
      *(_QWORD *)&v328[16] = 0;
      v328[23] = v165 + 11;
      strcpy(v328, "Keyframi");
      v167 = &v328[11];
      if (!v165)
      {
LABEL_305:
        v167[v165] = 0;
        v341[0] = "cv3d.recon.";
        v341[1] = (void *)11;
        v172 = (void *)v328[23];
        v173 = v328;
        if (v328[23] < 0)
        {
          v173 = *(_BYTE **)v328;
          v172 = *(void **)&v328[8];
        }
        v341[2] = v173;
        v341[3] = v172;
        sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)v331);
        if ((v328[23] & 0x80000000) != 0)
          operator delete(*(void **)v328);
        sub_224569D7C();
        if (sub_224569C6C())
        {
          v174 = sub_2241471F8();
          v175 = sub_2241486EC((uint64_t)v174);
          if (!sub_2241053B4(v175))
          {
            v176 = sub_2241472E0();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 24))(v176))
            {
              memset(v328, 0, sizeof(v328));
              v329 = 728325608;
              kdebug_trace();
              v341[0] = &off_24EC21B18;
              sub_2231C5C38(&v337, &v341[1]);
              sub_22321A9F0((uint64_t)__p, (uint64_t)v341, (_BOOL8)&v340);
              sub_2231DAC1C((double *)&qword_255788F20, v176, v341, "material");
              sub_223167354((uint64_t)&v341[1]);
              nullsub_30(v341);
              kdebug_trace();
            }
          }
        }
        memset(v328, 0, sizeof(v328));
        v329 = 728325624;
        kdebug_trace();
        v177 = v331[23];
        if (v331[23] < 0)
          v177 = *(_QWORD *)&v331[8];
        if (v177 >= 0x11)
        {
          v178 = v331;
          if (v331[23] < 0)
            v178 = *(_BYTE **)v331;
          v179 = *(_QWORD *)v178;
          v180 = *((_QWORD *)v178 + 1);
          v181 = v178[16];
          if (v179 == 0x6365722E64337663 && v180 == 0x73746174532E6E6FLL && v181 == 46)
          {
            sub_223187510();
            v341[0] = &off_24EC21B18;
            sub_2231C5C38(&v337, &v341[1]);
            sub_22321A9F0((uint64_t)__p, (uint64_t)v341, (_BOOL8)&v340);
            sub_223167354((uint64_t)&v341[1]);
            nullsub_30(v341);
          }
        }
        kdebug_trace();
        if ((v331[23] & 0x80000000) != 0)
          operator delete(*(void **)v331);
        goto LABEL_329;
      }
    }
    if (v164 >= 0)
      v171 = a2;
    else
      v171 = *a2;
    memmove(v167, v171, v165);
    goto LABEL_305;
  }
LABEL_329:
  v184 = (std::__shared_weak_count *)v334;
  if ((_QWORD)v334)
  {
    v185 = (unint64_t *)(v334 + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  nullsub_30(__p);
  *(_QWORD *)v331 = *(_QWORD *)(a1 + 304);
  if ((*(_QWORD *)v331 & 0xFF00000000) != 0)
  {
    v187 = *((char *)a2 + 23);
    if (v187 >= 0)
      v188 = *((unsigned __int8 *)a2 + 23);
    else
      v188 = (size_t)a2[1];
    v189 = v188 + 11;
    if (v188 + 11 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v189 >= 0x17)
    {
      v191 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v189 | 7) != 0x17)
        v191 = v189 | 7;
      v192 = v191 + 1;
      v193 = operator new(v191 + 1);
      __p[1] = (void *)(v188 + 11);
      *(_QWORD *)&v334 = v192 | 0x8000000000000000;
      __p[0] = v193;
      v190 = (char *)v193 + 11;
      *(_DWORD *)((char *)v193 + 7) = 778530409;
      *v193 = *(_QWORD *)"Keyframing.";
    }
    else
    {
      __p[1] = 0;
      *(_QWORD *)&v334 = 0;
      *(_DWORD *)((char *)__p + 7) = 778530409;
      BYTE7(v334) = v188 + 11;
      v190 = (char *)&__p[1] + 3;
      __p[0] = *(void **)"Keyframing.";
      if (!v188)
      {
LABEL_349:
        v190[v188] = 0;
        v341[0] = "cv3d.recon.";
        v341[1] = (void *)11;
        v195 = (void *)BYTE7(v334);
        v196 = __p;
        if (SBYTE7(v334) < 0)
        {
          v196 = (void **)__p[0];
          v195 = __p[1];
        }
        v341[2] = v196;
        v341[3] = v195;
        sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)v328);
        if (SBYTE7(v334) < 0)
          operator delete(__p[0]);
        sub_224569D7C();
        if (sub_224569C6C())
        {
          v197 = sub_2241471F8();
          v198 = sub_2241486EC((uint64_t)v197);
          if (!sub_2241053B4(v198))
          {
            v199 = sub_2241472E0();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199))
            {
              *(_OWORD *)__p = 0u;
              v334 = 0u;
              v335 = 728325608;
              kdebug_trace();
              v340.__r_.__value_.__r.__words[0] = 0x100000001;
              v341[0] = &off_24EC216B8;
              sub_22321B00C(&v340, v331, &v341[1]);
              sub_2231DAFF4((double *)&qword_255788F20, v199, v341, "clipping_point_lux");
              sub_223167354((uint64_t)&v341[1]);
              nullsub_30(v341);
              kdebug_trace();
            }
          }
        }
        *(_OWORD *)__p = 0u;
        v334 = 0u;
        v335 = 728325624;
        kdebug_trace();
        v200 = v328[23];
        if (v328[23] < 0)
          v200 = *(_QWORD *)&v328[8];
        if (v200 >= 0x11)
        {
          v201 = v328;
          if (v328[23] < 0)
            v201 = *(_BYTE **)v328;
          v202 = *(_QWORD *)v201;
          v203 = *((_QWORD *)v201 + 1);
          v204 = v201[16];
          if (v202 == 0x6365722E64337663 && v203 == 0x73746174532E6E6FLL && v204 == 46)
          {
            sub_223187510();
            v340.__r_.__value_.__r.__words[0] = 0x100000001;
            v341[0] = &off_24EC216B8;
            sub_22321B00C(&v340, v331, &v341[1]);
            sub_223167354((uint64_t)&v341[1]);
            nullsub_30(v341);
          }
        }
        kdebug_trace();
        if ((v328[23] & 0x80000000) != 0)
          operator delete(*(void **)v328);
        goto LABEL_373;
      }
    }
    if (v187 >= 0)
      v194 = a2;
    else
      v194 = *a2;
    memmove(v190, v194, v188);
    goto LABEL_349;
  }
LABEL_373:
  if (!*(_BYTE *)(a1 + 364))
    goto LABEL_457;
  v335 = *(_DWORD *)(a1 + 360);
  v207 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 328);
  v334 = v207;
  v336 = 1;
  sub_224569D7C();
  if (!sub_224569C6C())
    goto LABEL_457;
  v208 = sub_2241471F8();
  v209 = sub_2241486EC((uint64_t)v208);
  if (sub_2241053B4(v209))
    goto LABEL_457;
  v210 = *((char *)a2 + 23);
  if (v210 >= 0)
    v211 = *((unsigned __int8 *)a2 + 23);
  else
    v211 = (size_t)a2[1];
  v212 = v211 + 11;
  if (v211 + 11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v212 >= 0x17)
  {
    v232 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v212 | 7) != 0x17)
      v232 = v212 | 7;
    v233 = v232 + 1;
    v234 = (char *)operator new(v232 + 1);
    *(_QWORD *)&v328[8] = v211 + 11;
    *(_QWORD *)&v328[16] = v233 | 0x8000000000000000;
    *(_QWORD *)v328 = v234;
    v213 = v234 + 11;
    *(_DWORD *)(v234 + 7) = 778530409;
    *(_QWORD *)v234 = *(_QWORD *)"Keyframing.";
    goto LABEL_408;
  }
  v328[9] = 0;
  *(_WORD *)&v328[10] = 0;
  *(_DWORD *)&v328[12] = 0;
  *(_QWORD *)&v328[16] = 0;
  v328[23] = v211 + 11;
  v213 = &v328[11];
  strcpy(v328, "Keyframi");
  if (v211)
  {
LABEL_408:
    if (v210 >= 0)
      v235 = a2;
    else
      v235 = *a2;
    memmove(v213, v235, v211);
  }
  v213[v211] = 0;
  v341[0] = "cv3d.recon.";
  v341[1] = (void *)11;
  v236 = (void *)v328[23];
  v237 = v328;
  if (v328[23] < 0)
  {
    v237 = *(_BYTE **)v328;
    v236 = *(void **)&v328[8];
  }
  v341[2] = v237;
  v341[3] = v236;
  sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, &v327);
  if ((v328[23] & 0x80000000) != 0)
    operator delete(*(void **)v328);
  v238 = sub_2241472E0();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v238 + 24))(v238))
  {
    memset(v328, 0, sizeof(v328));
    v329 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v238 + 24))(v238))
    {
      sub_2245054E8((uint64_t)v341, (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0), 2);
      v342 = *(_OWORD *)v341;
      v239 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v238 + 24))(v238))
      {
        sub_22452C3CC(&v339);
        HIBYTE(v341[2]) = 4;
        strcpy((char *)v341, "icam");
        sub_224527BAC((uint64_t)v341, (CFStringRef *)v331);
        sub_22321B7BC((uint64_t)&v339, *(const void **)v331, (uint64_t)__p);
        v240 = *(std::__shared_weak_count **)&v331[8];
        if (*(_QWORD *)&v331[8])
        {
          v241 = (unint64_t *)(*(_QWORD *)&v331[8] + 8);
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        if (SHIBYTE(v341[2]) < 0)
          operator delete(v341[0]);
        *(_QWORD *)v331 = 6453089;
        *(_QWORD *)&v331[8] = v343[0];
        *(_QWORD *)&v331[15] = *(_QWORD *)((char *)v343 + 7);
        *(_WORD *)&v331[23] = 259;
        v343[0] = 0;
        *(_QWORD *)((char *)v343 + 7) = 0;
        sub_2231AD9F0((uint64_t)&v339, (__int128 *)v331, &v342, &v340);
        if (v331[24] && (v331[23] & 0x80000000) != 0)
          operator delete(*(void **)v331);
        v243 = (std::__shared_weak_count *)v339.__r_.__value_.__l.__size_;
        if (v339.__r_.__value_.__l.__size_)
        {
          v244 = (unint64_t *)(v339.__r_.__value_.__l.__size_ + 8);
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        v246 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v238 + 56))(v238);
        v247 = *(void **)v246;
        v248 = *(std::__shared_weak_count **)(v246 + 8);
        if (v248)
        {
          p_shared_owners = (unint64_t *)&v248->__shared_owners_;
          do
            v250 = __ldxr(p_shared_owners);
          while (__stxr(v250 + 1, p_shared_owners));
        }
        v251 = *(_OWORD *)&v340.__r_.__value_.__r.__words[1];
        v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = *(_OWORD *)&v340.__r_.__value_.__r.__words[1];
        *(_OWORD *)&v340.__r_.__value_.__r.__words[1] = 0uLL;
        v341[0] = v247;
        v341[1] = v248;
        if (v248)
        {
          v252 = (unint64_t *)&v248->__shared_owners_;
          do
            v253 = __ldxr(v252);
          while (__stxr(v253 + 1, v252));
        }
        v341[2] = &off_24EC6A3B8;
        *(_OWORD *)&v341[3] = v251;
        if (*((_QWORD *)&v251 + 1))
        {
          v254 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
          do
            v255 = __ldxr(v254);
          while (__stxr(v255 + 1, v254));
        }
        (*(void (**)(uint64_t *, void **))(*v239 + 16))(v239, v341);
        sub_2241231D8((uint64_t)&v341[2]);
        v256 = (std::__shared_weak_count *)v341[1];
        if (v341[1])
        {
          v257 = (unint64_t *)((char *)v341[1] + 8);
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
        }
        sub_2241231D8((uint64_t)&v339);
        if (v248)
        {
          v259 = (unint64_t *)&v248->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
            std::__shared_weak_count::__release_weak(v248);
          }
        }
        sub_2241231D8((uint64_t)&v340);
      }
    }
    kdebug_trace();
  }
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
LABEL_457:
  if (!*(_DWORD *)(a1 + 144))
    goto LABEL_541;
  if (!*(_DWORD *)(a1 + 148))
    goto LABEL_541;
  sub_224569D7C();
  if (!sub_224569C6C())
    goto LABEL_541;
  v261 = sub_2241471F8();
  v262 = sub_2241486EC((uint64_t)v261);
  if (sub_2241053B4(v262))
    goto LABEL_541;
  v263 = *((char *)a2 + 23);
  if (v263 >= 0)
    v264 = *((unsigned __int8 *)a2 + 23);
  else
    v264 = (size_t)a2[1];
  v265 = v264 + 11;
  if (v264 + 11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v265 >= 0x17)
  {
    v267 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v265 | 7) != 0x17)
      v267 = v265 | 7;
    v268 = v267 + 1;
    v269 = operator new(v267 + 1);
    __p[1] = (void *)(v264 + 11);
    *(_QWORD *)&v334 = v268 | 0x8000000000000000;
    __p[0] = v269;
    v266 = (char *)v269 + 11;
    *(_DWORD *)((char *)v269 + 7) = 778530409;
    *v269 = *(_QWORD *)"Keyframing.";
    goto LABEL_471;
  }
  __p[1] = 0;
  *(_QWORD *)&v334 = 0;
  *(_DWORD *)((char *)__p + 7) = 778530409;
  BYTE7(v334) = v264 + 11;
  v266 = (char *)&__p[1] + 3;
  __p[0] = *(void **)"Keyframing.";
  if (v264)
  {
LABEL_471:
    if (v263 >= 0)
      v270 = a2;
    else
      v270 = *a2;
    memmove(v266, v270, v264);
  }
  v266[v264] = 0;
  v341[0] = "cv3d.recon.";
  v341[1] = (void *)11;
  v271 = (void *)BYTE7(v334);
  v272 = __p;
  if (SBYTE7(v334) < 0)
  {
    v272 = (void **)__p[0];
    v271 = __p[1];
  }
  v341[2] = v272;
  v341[3] = v271;
  sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, &v339);
  if (SBYTE7(v334) < 0)
    operator delete(__p[0]);
  v273 = sub_2241472E0();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v273 + 24))(v273))
  {
    *(_OWORD *)__p = 0u;
    v334 = 0u;
    v335 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v273 + 24))(v273))
    {
      sub_2245054E8((uint64_t)v341, (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0), 2);
      *(_OWORD *)&v327.__r_.__value_.__l.__data_ = *(_OWORD *)v341;
      v274 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v273 + 24))(v273))
      {
        sub_22452C3CC(&v340);
        v275 = *(_QWORD *)(a1 + 184);
        HIBYTE(v341[2]) = 5;
        strcpy((char *)v341, "label");
        sub_224527BAC((uint64_t)v341, (CFStringRef *)v328);
        sub_22321BB5C((uint64_t)&v340, *(const void **)v328, (char *)(v275 + 132));
        v276 = *(std::__shared_weak_count **)&v328[8];
        if (*(_QWORD *)&v328[8])
        {
          v277 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
          do
            v278 = __ldaxr(v277);
          while (__stlxr(v278 - 1, v277));
          if (!v278)
          {
            ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
            std::__shared_weak_count::__release_weak(v276);
          }
        }
        if (SHIBYTE(v341[2]) < 0)
          operator delete(v341[0]);
        HIBYTE(v341[2]) = 10;
        strcpy((char *)v341, "confidence");
        sub_224527BAC((uint64_t)v341, (CFStringRef *)v328);
        sub_2231FD11C((uint64_t)&v340, *(const void **)v328, v275 + 136);
        v279 = *(std::__shared_weak_count **)&v328[8];
        if (*(_QWORD *)&v328[8])
        {
          v280 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
          do
            v281 = __ldaxr(v280);
          while (__stlxr(v281 - 1, v280));
          if (!v281)
          {
            ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
            std::__shared_weak_count::__release_weak(v279);
          }
        }
        if (SHIBYTE(v341[2]) < 0)
          operator delete(v341[0]);
        HIBYTE(v341[2]) = 8;
        strcpy((char *)v341, "io_label");
        sub_224527BAC((uint64_t)v341, (CFStringRef *)v328);
        sub_22321BCC8((uint64_t)&v340, *(const void **)v328, (char *)(v275 + 164));
        v282 = *(std::__shared_weak_count **)&v328[8];
        if (*(_QWORD *)&v328[8])
        {
          v283 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
          do
            v284 = __ldaxr(v283);
          while (__stlxr(v284 - 1, v283));
          if (!v284)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
        }
        if (SHIBYTE(v341[2]) < 0)
          operator delete(v341[0]);
        HIBYTE(v341[2]) = 16;
        strcpy((char *)v341, "io_probabilities");
        sub_224527BAC((uint64_t)v341, (CFStringRef *)v328);
        sub_22321BE34((uint64_t)&v340, *(const void **)v328, v275 + 168);
        v285 = *(std::__shared_weak_count **)&v328[8];
        if (*(_QWORD *)&v328[8])
        {
          v286 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
        if (SHIBYTE(v341[2]) < 0)
          operator delete(v341[0]);
        strcpy(v328, "scene_type");
        *(_QWORD *)&v328[11] = v342;
        *(_DWORD *)&v328[19] = DWORD2(v342);
        *(_WORD *)&v328[23] = 266;
        *(_QWORD *)&v342 = 0;
        DWORD2(v342) = 0;
        sub_2231AD9F0((uint64_t)&v340, (__int128 *)v328, (__int128 *)&v327, v331);
        if (v328[24] && (v328[23] & 0x80000000) != 0)
          operator delete(*(void **)v328);
        v288 = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
        if (v340.__r_.__value_.__l.__size_)
        {
          v289 = (unint64_t *)(v340.__r_.__value_.__l.__size_ + 8);
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        v291 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v273 + 56))(v273);
        v292 = *(void **)v291;
        v293 = *(std::__shared_weak_count **)(v291 + 8);
        if (v293)
        {
          v294 = (unint64_t *)&v293->__shared_owners_;
          do
            v295 = __ldxr(v294);
          while (__stxr(v295 + 1, v294));
        }
        v297 = *(void **)&v331[8];
        v296 = *(unint64_t **)&v331[16];
        v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v340.__r_.__value_.__r.__words[1] = *(_OWORD *)&v331[8];
        v341[0] = v292;
        *(_QWORD *)&v331[8] = 0;
        *(_QWORD *)&v331[16] = 0;
        v341[1] = v293;
        if (v293)
        {
          v298 = (unint64_t *)&v293->__shared_owners_;
          do
            v299 = __ldxr(v298);
          while (__stxr(v299 + 1, v298));
        }
        v341[2] = &off_24EC6A3B8;
        v341[3] = v297;
        v341[4] = v296;
        if (v296)
        {
          v300 = v296 + 1;
          do
            v301 = __ldxr(v300);
          while (__stxr(v301 + 1, v300));
        }
        (*(void (**)(uint64_t *, void **))(*v274 + 16))(v274, v341);
        sub_2241231D8((uint64_t)&v341[2]);
        v302 = (std::__shared_weak_count *)v341[1];
        if (v341[1])
        {
          v303 = (unint64_t *)((char *)v341[1] + 8);
          do
            v304 = __ldaxr(v303);
          while (__stlxr(v304 - 1, v303));
          if (!v304)
          {
            ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
            std::__shared_weak_count::__release_weak(v302);
          }
        }
        sub_2241231D8((uint64_t)&v340);
        if (v293)
        {
          v305 = (unint64_t *)&v293->__shared_owners_;
          do
            v306 = __ldaxr(v305);
          while (__stlxr(v306 - 1, v305));
          if (!v306)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v293);
          }
        }
        sub_2241231D8((uint64_t)v331);
      }
    }
    kdebug_trace();
  }
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
LABEL_541:
  v307 = *((char *)a2 + 23);
  if (v307 >= 0)
    v308 = *((unsigned __int8 *)a2 + 23);
  else
    v308 = (size_t)a2[1];
  v309 = v308 + 11;
  if (v308 + 11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v309 >= 0x17)
  {
    v311 = (v309 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v309 | 7) != 0x17)
      v311 = v309 | 7;
    v312 = v311 + 1;
    v313 = (char *)operator new(v311 + 1);
    *(_QWORD *)&v328[8] = v308 + 11;
    *(_QWORD *)&v328[16] = v312 | 0x8000000000000000;
    *(_QWORD *)v328 = v313;
    v310 = v313 + 11;
    *(_DWORD *)(v313 + 7) = 778530409;
    *(_QWORD *)v313 = *(_QWORD *)"Keyframing.";
    goto LABEL_551;
  }
  v328[9] = 0;
  *(_WORD *)&v328[10] = 0;
  *(_DWORD *)&v328[12] = 0;
  *(_QWORD *)&v328[16] = 0;
  v328[23] = v308 + 11;
  v310 = &v328[11];
  strcpy(v328, "Keyframi");
  if (v308)
  {
LABEL_551:
    if (v307 >= 0)
      v314 = a2;
    else
      v314 = *a2;
    memmove(v310, v314, v308);
  }
  v310[v308] = 0;
  v341[0] = "cv3d.recon.";
  v341[1] = (void *)11;
  v315 = (void *)v328[23];
  v316 = v328;
  if (v328[23] < 0)
  {
    v316 = *(_BYTE **)v328;
    v315 = *(void **)&v328[8];
  }
  v341[2] = v316;
  v341[3] = v315;
  sub_2231A9820((uint64_t)v341, (uint64_t)&v341[4], 0, 0, (std::string *)__p);
  if ((v328[23] & 0x80000000) != 0)
    operator delete(*(void **)v328);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v317 = sub_2241471F8();
    v318 = sub_2241486EC((uint64_t)v317);
    if (!sub_2241053B4(v318))
    {
      v319 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v319 + 24))(v319))
      {
        memset(v341, 0, 32);
        LODWORD(v341[4]) = 728325608;
        kdebug_trace();
        sub_2231DB13C((double *)&qword_255788F20, v319, a1 + 312, "camera_metadata");
        kdebug_trace();
      }
    }
  }
  memset(v341, 0, 32);
  LODWORD(v341[4]) = 728325624;
  kdebug_trace();
  v320 = BYTE7(v334);
  if (SBYTE7(v334) < 0)
    v320 = (unint64_t)__p[1];
  if (v320 >= 0x11)
  {
    v321 = __p;
    if (SBYTE7(v334) < 0)
      v321 = (void **)__p[0];
    v322 = *v321;
    v323 = v321[1];
    v324 = *((unsigned __int8 *)v321 + 16);
    if (v322 == (void *)0x6365722E64337663 && v323 == (void *)0x73746174532E6E6FLL && v324 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v334) < 0)
    operator delete(__p[0]);
}

void sub_2231DA2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v53;

  sub_2241231D8(v50);
  if (a49)
    sub_2245743F4();
  sub_2241231D8((uint64_t)&a45);
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2241231D8((uint64_t)&a23);
  sub_2231874DC((uint64_t)&a29);
  if (a44 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2231DA98C(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_223217B08((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231DAAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231DAAD4(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_223217B08((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231DAC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231DAC1C(double *a1, uint64_t a2, _QWORD *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231C6B28((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231DAD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231DAD64(double *a1, uint64_t a2, _QWORD *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231C6B28((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231DAE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231DAEAC(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_223218BCC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231DAFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231DAFF4(double *a1, uint64_t a2, _QWORD *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_22321B260((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231DB120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231DB13C(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_22321C330((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231DB268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231DB284(uint64_t a1, _DWORD *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int16 v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int16 v21;

  v14 = 32256;
  v15 = &off_24EC1FE80;
  sub_2231DB98C(a2, &v14, &v16);
  v4 = v16;
  v16 = 0uLL;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_OWORD *)(a1 + 24) = v17;
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 72) = v20;
  *(_WORD *)(a1 + 80) = v21;
  sub_223167354((uint64_t)&v16);
  nullsub_30(&v15);
  v14 = 32256;
  v15 = &off_24EC1FE80;
  sub_2231DB98C(a2, &v14, &v16);
  v8 = v16;
  v16 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  *(_OWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 160) = v20;
  *(_WORD *)(a1 + 168) = v21;
  sub_223167354((uint64_t)&v16);
  return nullsub_30(&v15);
}

void sub_2231DB404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_2231DB418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DB42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v13;
  void *v14;
  void *v15;
  int v16;
  __int16 *v17;
  double *v18;
  _DWORD *v19;
  unint64_t v25;
  unint64_t v26;
  double v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v33;
  unint64_t v35;
  unint64_t v36;
  float v37;
  int v38;
  _DWORD *v39;
  double *v40;
  int v41;
  int v42;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  double *v48;
  int v49;
  int v50;
  __int16 *v51;
  int v52;
  uint64_t v53;
  int v54;
  unint64_t v57;
  unint64_t v58;
  float v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  double *v63;
  double *v64;
  int v65;
  int v66;
  uint64_t v69;
  double v70;
  unint64_t size;
  unint64_t sizea;

  if ((*(_DWORD *)(a2 + 32) != *(_DWORD *)(a3 + 32) || *(_DWORD *)(a2 + 36) != *(_DWORD *)(a3 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/BoxFilter.h", 141, (uint64_t)"input.Size() == result.Size()", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = *(_QWORD *)(a2 + 32);
  v7 = HIDWORD(v6);
  if (*(_DWORD *)(a1 + 8) != (_DWORD)v6 || *(_DWORD *)(a1 + 12) != HIDWORD(v6))
  {
    v9 = ((unint64_t)(((8 * (_DWORD)v6 + 15) & 0xFFFFFFF0) >> 4) << 36) | 8;
    size = ((8 * (_DWORD)v6 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v6);
    if (size)
    {
      v10 = malloc_type_malloc(size, 0xAE2F145AuLL);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v6;
      v11 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      if (!v11)
        goto LABEL_11;
      goto LABEL_10;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v6;
    v11 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = 0;
    if (v11)
LABEL_10:
      free(v11);
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 40) != (_DWORD)v6 || *(_DWORD *)(a1 + 44) != HIDWORD(v6))
  {
    v13 = ((unint64_t)(((4 * (_DWORD)v6 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    sizea = ((4 * (_DWORD)v6 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v6);
    if (sizea)
    {
      v14 = malloc_type_malloc(sizea, 0xAE2F145AuLL);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = v6;
      v15 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v14;
      if (!v15)
        goto LABEL_18;
      goto LABEL_17;
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    v15 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = 0;
    if (v15)
LABEL_17:
      free(v15);
  }
LABEL_18:
  v16 = *(_DWORD *)(a2 + 40);
  v17 = *(__int16 **)(a2 + 24);
  v18 = *(double **)(a1 + 24);
  v19 = *(_DWORD **)(a1 + 56);
  _H0 = *v17;
  __asm { FCVT            S0, H0 }
  v25 = LODWORD(_S0) | 0x100000000;
  if (_S0 <= -65504.0)
    v25 = 0;
  v26 = HIDWORD(v25);
  v27 = *(float *)&v25;
  *v18 = *(float *)&v25;
  *v19 = HIDWORD(v25);
  v28 = v6 - 1;
  if ((_DWORD)v6 == 1)
  {
    if (HIDWORD(v6) != 1)
    {
      v29 = 1;
      do
      {
        v30 = *(_DWORD *)(a1 + 20);
        v31 = v30 * (v29 - 1);
        _H0 = v17[*(_DWORD *)(a2 + 44) * v29];
        v33 = v30 * v29;
        __asm { FCVT            S0, H0 }
        v35 = LODWORD(_S0) | 0x100000000;
        if (_S0 <= -65504.0)
          v35 = 0;
        v36 = HIDWORD(v35);
        v37 = *(float *)&v35;
        v38 = *(_DWORD *)(a1 + 52);
        *(double *)((char *)v18 + v33) = *(double *)((char *)v18 + v31) + v37;
        *(_DWORD *)((char *)v19 + (v38 * v29)) = *(_DWORD *)((char *)v19 + (v38 * (v29 - 1)))
                                                             + v36;
        ++v29;
      }
      while (HIDWORD(v6) != v29);
    }
  }
  else
  {
    v39 = v19 + 1;
    v40 = v18 + 1;
    v41 = v16;
    v42 = v6 - 1;
    do
    {
      _H1 = v17[v41];
      __asm { FCVT            S1, H1 }
      v45 = LODWORD(_S1) | 0x100000000;
      if (_S1 <= -65504.0)
        v45 = 0;
      v27 = v27 + *(float *)&v45;
      *v40++ = v27;
      LODWORD(v26) = v26 + HIDWORD(v45);
      *v39++ = v26;
      v41 += v16;
      --v42;
    }
    while (v42);
    if (HIDWORD(v6) != 1)
    {
      v46 = 0;
      v47 = v19 + 1;
      v48 = v18 + 1;
      v49 = 1;
      do
      {
        v50 = *(_DWORD *)(a2 + 40);
        v51 = &v17[*(_DWORD *)(a2 + 44) * v49];
        v52 = *(_DWORD *)(a1 + 20);
        v53 = (v52 * v49);
        v54 = *(_DWORD *)(a1 + 52);
        _H0 = *v51;
        __asm { FCVT            S0, H0 }
        if (_S0 <= -65504.0)
          v57 = 0;
        else
          v57 = LODWORD(_S0) | 0x100000000;
        v58 = HIDWORD(v57);
        v59 = *(float *)&v57;
        *(double *)((char *)v18 + v53) = *(double *)((char *)v18 + (v52 * (v49 - 1))) + *(float *)&v57;
        v60 = (v54 * v49);
        *(_DWORD *)((char *)v19 + v60) = *(_DWORD *)((char *)v19 + (v54 * (v49 - 1))) + HIDWORD(v57);
        v61 = (_DWORD *)((char *)v47 + v60);
        v62 = (_DWORD *)((char *)v47 + (v54 * v46));
        v63 = (double *)((char *)v48 + v53);
        v64 = (double *)((char *)v48 + (v52 * v46));
        v65 = v50;
        v66 = v28;
        do
        {
          _H1 = v51[v65];
          __asm { FCVT            S1, H1 }
          v69 = LODWORD(_S1) | 0x100000000;
          if (_S1 <= -65504.0)
            v69 = 0;
          v59 = v59 + *(float *)&v69;
          v70 = *v64++;
          *v63++ = v70 + v59;
          LODWORD(v70) = *v62++;
          LODWORD(v58) = v58 + HIDWORD(v69);
          *v61++ = v58 + LODWORD(v70);
          v65 += v50;
          --v66;
        }
        while (v66);
        ++v49;
        ++v46;
      }
      while (v49 != (_DWORD)v7);
    }
  }
  sub_2231DBBE0(a1, a3, 3u);
  sub_2231DBDB0(a1, a3, 3u);
  return sub_2231DC050(a1, a3, 3u);
}

uint64_t sub_2231DB82C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t (**v21)();
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int16 v27;

  v21 = &off_24EC1FE80;
  v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a1 + 24;
  v6 = *(_OWORD *)(a1 + 24);
  v22 = v4;
  v23 = v6;
  v7 = *(_OWORD *)(a1 + 56);
  v24 = *(_OWORD *)(a1 + 40);
  v25 = v7;
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_WORD *)(a1 + 80);
  v8 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_OWORD *)(a2 + 24);
  v13 = *(_OWORD *)(a2 + 40);
  v14 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(v5 + 16) = v13;
  *(_OWORD *)(v5 + 32) = v14;
  *(_OWORD *)v5 = v12;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v15 = v22;
  v22 = 0uLL;
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v24;
  *(_OWORD *)(a2 + 24) = v23;
  *(_OWORD *)(a2 + 40) = v19;
  *(_OWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 72) = v26;
  *(_WORD *)(a2 + 80) = v27;
  sub_223167354((uint64_t)&v22);
  return nullsub_30(&v21);
}

uint64_t sub_2231DB98C@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X1>, _WORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_2231DBAF4(a1, a2, &v14);
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20058;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v14 = 0;
  sub_22449BBB4((uint64_t)a3, &v15, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 104))(*(_QWORD *)a3);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a3[36] = v8 & 0xFF00 | v7;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_224485244(result);
    return MEMORY[0x227684CE8](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231DBAA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231DBAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231DBAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DBAF4@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  _OWORD v7[2];
  _QWORD v8[6];

  v8[5] = &off_24EC1FF78;
  sub_224498C44(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC1FFC0;
  *(_OWORD *)(v4 + 8) = v7[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v7 + 12);
  sub_2244E32B8((__n128 *)(v4 + 40), (__n128 *)v8);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v8[3];
  *a3 = v4;
  return sub_224485244((uint64_t)v6);
}

void sub_2231DBB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231DBBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DBBE0(uint64_t result, uint64_t a2, unsigned int a3)
{
  float v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  double v32;
  uint64_t v34;
  unsigned int v35;
  double *v36;
  int *v37;
  unsigned int v38;
  unsigned int v39;
  double v40;
  uint64_t v42;
  int v43;
  unsigned int v44;

  v3 = (float)a3 * 0.5;
  v4 = v3;
  v5 = v4 + 1;
  if ((_DWORD)v4 != -1)
  {
    v6 = 0;
    v7 = *(_DWORD *)(a2 + 32);
    v8 = v7 - v4;
    v9 = (v7 - 1);
    v10 = v3;
    do
    {
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(result + 24);
      v15 = *(_DWORD *)(result + 20);
      v16 = v14 + (v15 * (v6 + v4));
      v17 = *(_QWORD *)(result + 56);
      v18 = *(_DWORD *)(a2 + 40);
      v19 = *(_QWORD *)(a2 + 24) + 2 * (*(_DWORD *)(a2 + 44) * v6);
      v20 = *(_DWORD *)(result + 52);
      v21 = v17 + (v20 * (v6 + v4));
      do
      {
        v27 = (v4 + v13);
        v28 = *(_DWORD *)(v21 + 4 * v27);
        if (v28)
          v22 = *(double *)(v16 + 8 * v27) / (double)v28;
        else
          v22 = NAN;
        _S0 = v22;
        __asm { FCVT            H0, S0 }
        *(_WORD *)(v19 + 2 * v12) = LOWORD(_S0);
        ++v13;
        v12 += v18;
      }
      while (v4 + 1 != v13);
      if (v5 != v8)
      {
        v36 = (double *)(v14 + v15 * v10);
        v37 = (int *)(v17 + v20 * v10);
        v38 = v5 * v18;
        v39 = (2 * v4) | 1;
        do
        {
          v42 = v39;
          v43 = *v37++;
          v44 = *(_DWORD *)(v21 + 4 * v39) - v43;
          if (v44)
            v40 = (*(double *)(v16 + 8 * v42) - *v36) / (double)v44;
          else
            v40 = NAN;
          _S0 = v40;
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v19 + 2 * v38) = LOWORD(_S0);
          v39 = v42 + 1;
          ++v36;
          v38 += v18;
        }
        while (v7 != (_DWORD)v42 + 1);
      }
      if ((_DWORD)v4)
      {
        v29 = v8 * v18;
        v30 = v9 - 2 * v4;
        v31 = v4;
        do
        {
          v34 = v30;
          v35 = *(_DWORD *)(v21 + 4 * v9) - *(_DWORD *)(v21 + 4 * v30);
          if (v35)
            v32 = (*(double *)(v16 + 8 * v9) - *(double *)(v16 + 8 * v34)) / (double)v35;
          else
            v32 = NAN;
          _S0 = v32;
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v19 + 2 * v29) = LOWORD(_S0);
          v30 = v34 + 1;
          v29 += v18;
          --v31;
        }
        while (v31);
      }
      ++v10;
    }
    while (v6++ != (_DWORD)v4);
  }
  return result;
}

uint64_t sub_2231DBDB0(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  double v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  double *v41;
  double *v42;
  int *v43;
  int *v44;
  unsigned int v45;
  unsigned int v46;
  double v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;

  v3 = (float)((float)a3 * 0.5);
  v4 = v3 + 1;
  v5 = *(_DWORD *)(a2 + 36) - v3;
  if ((_DWORD)v3 + 1 != v5)
  {
    v6 = 0;
    v7 = *(_DWORD *)(a2 + 32);
    v8 = ~(_DWORD)v3;
    v9 = v7 - v3;
    v10 = (v7 - 1);
    v11 = (2 * v3) | 1;
    v12 = v3 + 1;
    do
    {
      v13 = *(_QWORD *)(result + 24);
      v14 = *(_DWORD *)(result + 20);
      v15 = v13 + (v14 * (v12 + v8));
      v16 = v13 + (v14 * (v12 + v3));
      v17 = *(_QWORD *)(result + 56);
      v18 = *(_DWORD *)(result + 52);
      v19 = v17 + (v18 * (v12 + v8));
      v20 = v17 + (v18 * (v12 + v3));
      v21 = *(_DWORD *)(a2 + 40);
      v22 = *(_QWORD *)(a2 + 24) + 2 * (*(_DWORD *)(a2 + 44) * v12);
      if ((_DWORD)v3 != -1)
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v31 = *(_DWORD *)(v20 + 4 * (v3 + v24)) - *(_DWORD *)(v19 + 4 * (v3 + v24));
          if (v31)
            v25 = (*(double *)(v16 + 8 * (v3 + v24)) - *(double *)(v15 + 8 * (v3 + v24)))
                / (double)v31;
          else
            v25 = NAN;
          _S0 = v25;
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v22 + 2 * v23) = LOWORD(_S0);
          ++v24;
          v23 += v21;
        }
        while (v3 + 1 != v24);
      }
      if (v4 != v9)
      {
        v41 = (double *)(v13 + (v14 * v11));
        v42 = (double *)(v13 + (v14 * v6));
        v43 = (int *)(v17 + (v18 * v11));
        v44 = (int *)(v17 + (v18 * v6));
        v45 = v4 * v21;
        v46 = (2 * v3) | 1;
        do
        {
          v49 = v46;
          v50 = 4 * v46;
          v51 = *v44++;
          v52 = v51 + *(_DWORD *)(v20 + v50);
          v53 = *v43++;
          v54 = v52 - (*(_DWORD *)(v19 + v50) + v53);
          if (v54)
            v47 = (*(double *)(v16 + 8 * v49) - *v41 - *(double *)(v15 + 8 * v49) + *v42) / (double)v54;
          else
            v47 = NAN;
          _S0 = v47;
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v22 + 2 * v45) = LOWORD(_S0);
          v46 = v49 + 1;
          ++v41;
          ++v42;
          v45 += v21;
        }
        while (v7 != (_DWORD)v49 + 1);
      }
      if ((_DWORD)v3)
      {
        v32 = v9 * v21;
        v33 = v10 - 2 * v3;
        v34 = (float)((float)a3 * 0.5);
        do
        {
          v37 = v33;
          v38 = 4 * v33;
          v39 = *(_DWORD *)(v19 + v38) + *(_DWORD *)(v20 + 4 * v10);
          v40 = *(_DWORD *)(v19 + 4 * v10) + *(_DWORD *)(v20 + v38);
          if (v39 == v40)
            v35 = NAN;
          else
            v35 = (*(double *)(v16 + 8 * v10)
                 - *(double *)(v16 + 8 * v37)
                 - *(double *)(v15 + 8 * v10)
                 + *(double *)(v15 + 8 * v37))
                / (double)(v39 - v40);
          _S0 = v35;
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v22 + 2 * v32) = LOWORD(_S0);
          v33 = v37 + 1;
          v32 += v21;
          --v34;
        }
        while (v34);
      }
      ++v12;
      ++v11;
      ++v6;
    }
    while (v12 != v5);
  }
  return result;
}

uint64_t sub_2231DC050(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  double *v40;
  int *v41;
  unsigned int v42;
  int *v43;
  double *v44;
  unsigned int v45;
  double v46;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;

  v3 = (float)((float)a3 * 0.5);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a2 + 32);
    v5 = *(_DWORD *)(a2 + 36);
    v6 = v5 - v3;
    v7 = ~(_DWORD)v3;
    v8 = v5 - 1;
    v9 = v3 + 1;
    v10 = v4 - v3;
    v11 = (v4 - 1);
    v12 = v5 - 1 - 2 * v3;
    do
    {
      v13 = *(_QWORD *)(result + 24);
      v14 = *(_DWORD *)(result + 20);
      v15 = v13 + (v14 * (v6 + v7));
      v16 = (double *)(v13 + (v14 * v8));
      v17 = *(_QWORD *)(result + 56);
      v18 = *(_DWORD *)(result + 52);
      v19 = v17 + (v18 * (v6 + v7));
      v20 = (int *)(v17 + (v18 * v8));
      v21 = *(_DWORD *)(a2 + 40);
      v22 = *(_QWORD *)(a2 + 24) + 2 * (*(_DWORD *)(a2 + 44) * v6);
      if ((_DWORD)v3 != -1)
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v31 = v20[(v3 + v24)] - *(_DWORD *)(v19 + 4 * (v3 + v24));
          if (v31)
            v25 = (v16[(v3 + v24)] - *(double *)(v15 + 8 * (v3 + v24))) / (double)v31;
          else
            v25 = NAN;
          _S1 = v25;
          __asm { FCVT            H1, S1 }
          *(_WORD *)(v22 + 2 * v23) = LOWORD(_S1);
          ++v24;
          v23 += v21;
        }
        while (v3 + 1 != v24);
      }
      if (v9 != v10)
      {
        v40 = (double *)(v13 + (v14 * v12));
        v41 = (int *)(v17 + (v18 * v12));
        v42 = v9 * v21;
        v43 = v20;
        v44 = v16;
        v45 = (2 * v3) | 1;
        do
        {
          v48 = v45;
          v49 = v45;
          v50 = *v41++;
          v51 = v50 + v20[v49];
          v52 = *v43++;
          v53 = v51 - (*(_DWORD *)(v19 + v49 * 4) + v52);
          if (v53)
            v46 = (v16[v48] - *v44 - *(double *)(v15 + 8 * v48) + *v40) / (double)v53;
          else
            v46 = NAN;
          _S1 = v46;
          __asm { FCVT            H1, S1 }
          *(_WORD *)(v22 + 2 * v42) = LOWORD(_S1);
          v45 = v48 + 1;
          ++v44;
          ++v40;
          v42 += v21;
        }
        while (v4 != (_DWORD)v48 + 1);
      }
      v32 = v10 * v21;
      v33 = v11 - 2 * v3;
      v34 = v3;
      do
      {
        while (1)
        {
          v36 = v33;
          v37 = v33;
          v38 = *(_DWORD *)(v19 + v37 * 4) + v20[v11];
          v39 = *(_DWORD *)(v19 + 4 * v11) + v20[v37];
          if (v38 == v39)
            break;
          _S1 = (v16[v11] - v16[v36] - *(double *)(v15 + 8 * v11) + *(double *)(v15 + 8 * v36))
              / (double)(v38 - v39);
          __asm { FCVT            H1, S1 }
          *(_WORD *)(v22 + 2 * v32) = LOWORD(_S1);
          *(_WORD *)(v22 + 2 * v32) = LOWORD(_S1);
          v32 += v21;
          v33 = v36 + 1;
          if (!--v34)
            goto LABEL_3;
        }
        *(_WORD *)(v22 + 2 * v32) = 0x7FFF;
        v32 += v21;
        v33 = v36 + 1;
        --v34;
      }
      while (v34);
LABEL_3:
      ++v6;
      ++v12;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_2231DC2F8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231DC400(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231DC3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231DC400(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 3);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231DC550(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231DC564(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    a1[1] = &v5[12 * (12 * a2 / 0xC)];
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_223174E94();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[12 * v7];
    v13 = &v12[12 * (12 * a2 / 0xC)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v15 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v12 - 12) = v14;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v15;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[12 * v10];
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_2231DC6C8@<X0>(_WORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_2231BF6E8(&v12);
  v13 = v12;
  if (v12)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v12;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20058;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v14 = v2;
  v12 = 0;
  sub_22449BBB4((uint64_t)a1, &v13, 0);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  a1[36] = v6 & 0xFF00 | v5;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v11 = sub_224485244(result);
    return MEMORY[0x227684CE8](v11, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231DC7DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231DC7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231DC814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231DC830(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231DC89C()
{
  return 32;
}

uint64_t sub_2231DC8A4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231DC8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231DC8C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_QWORD *sub_2231DC94C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[5];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[3];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[3];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[1];
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

uint64_t sub_2231DCAAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231DCB14(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231DCD38(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231DCC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2231DCC1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231DCC88()
{
  return 32;
}

uint64_t sub_2231DCC90(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231DCC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231DCCB4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_2231DCD38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 32);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231DCE88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DCE9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231DCF04(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231DD128(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231DCFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2231DD00C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231DD078()
{
  return 4;
}

uint64_t sub_2231DD080(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231DD088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_2231DD0A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_2231DD128(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 4);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231DD278(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DD28C(uint64_t a1)
{
  BOOL v2;
  int v3;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 28))
      v2 = *(_DWORD *)(a1 + 24) == 0;
    else
      v2 = 1;
    if (v2)
      v3 = 0;
    else
      v3 = *(_DWORD *)(a1 + 28);
    if (v3 * (((381774871 * (unint64_t)(*(_QWORD *)(a1 + 32) >> 34)) >> 32) >> 2) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  return sub_2244E3314(a1);
}

_QWORD *sub_2231DD328(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_22319EE1C(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231DD424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DD438(_QWORD *a1)
{
  *a1 = &off_24EC220E0;
  nullsub_30(a1 + 1);
  return nullsub_30(a1);
}

void sub_2231DD468(_QWORD *a1)
{
  *a1 = &off_24EC220E0;
  nullsub_30(a1 + 1);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231DD4AC()
{
  return 0;
}

uint64_t sub_2231DD4B4()
{
  return 11;
}

uint64_t sub_2231DD4BC(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_2231DD4C4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
    {
LABEL_11:
      v17 = 0;
      v10 = *(_QWORD *)(a2 + 8);
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v9)
        goto LABEL_16;
      goto LABEL_12;
    }
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_11;
  }
  if (!*(_BYTE *)(a1 + 61))
    goto LABEL_11;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 96))(&v17, *(_QWORD *)(a1 + 8), 0);
  v10 = *(_QWORD *)(a2 + 8);
  v9 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v9)
    goto LABEL_16;
LABEL_12:
  v11 = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_16:
    if (!v10)
      goto LABEL_20;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v10)
    goto LABEL_20;
LABEL_17:
  if (*(_BYTE *)(a2 + 61))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v16, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_21;
  }
LABEL_20:
  v16 = 0;
LABEL_21:
  sub_2231F4674(a1, a2);
  v14 = v16;
  v16 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231DD628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL sub_2231DD68C(int a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t (**v57)();
  uint64_t v58;
  std::__shared_weak_count *v59;

  switch(a1)
  {
    case 0:
      sub_2245747B4();
    case 1:
      return sub_2231DE030(a2);
    case 2:
      return sub_2231DEC3C(a2);
    case 3:
      return sub_2231DF684(a2);
    case 4:
      return sub_2231DFCEC(a2);
    case 5:
      return sub_2231E0354(a2);
    case 6:
      v3 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22468;
      sub_2231E0E04(v3, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 7:
      return sub_2231E1660(a2);
    case 8:
      return sub_2231E1FB0(a2);
    case 9:
      v7 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22750;
      sub_2231E2A60(v7, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v8 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 10:
      v9 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22848;
      sub_2231E3324(v9, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v10 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v10);
      while (__stlxr(v6 - 1, v10));
      break;
    case 11:
      v11 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22940;
      sub_2231E3BE8(v11, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v12 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v12);
      while (__stlxr(v6 - 1, v12));
      break;
    case 12:
      v13 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22A38;
      sub_2231E44AC(v13, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v14 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v14);
      while (__stlxr(v6 - 1, v14));
      break;
    case 13:
      v15 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22B30;
      sub_2231E4D70(v15, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v16 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v16);
      while (__stlxr(v6 - 1, v16));
      break;
    case 14:
      v17 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22C28;
      sub_2231E5634(v17, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v18 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v18);
      while (__stlxr(v6 - 1, v18));
      break;
    case 15:
      v19 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22D20;
      sub_2231E5EF8(v19, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v20 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v20);
      while (__stlxr(v6 - 1, v20));
      break;
    case 16:
      v21 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22E18;
      sub_2231E67BC(v21, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v22 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v22);
      while (__stlxr(v6 - 1, v22));
      break;
    case 17:
      v23 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC22F10;
      sub_2231E7080(v23, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v24 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v24);
      while (__stlxr(v6 - 1, v24));
      break;
    case 18:
      v25 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC23008;
      sub_2231E7944(v25, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v26 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v26);
      while (__stlxr(v6 - 1, v26));
      break;
    case 19:
      v27 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC23100;
      sub_2231E8208(v27, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v28 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v28);
      while (__stlxr(v6 - 1, v28));
      break;
    case 20:
      v29 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC231F8;
      sub_2231E8ACC(v29, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v30 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v30);
      while (__stlxr(v6 - 1, v30));
      break;
    case 21:
      return sub_2231E9328(a2);
    case 22:
      return sub_2231E9C78(a2);
    case 23:
      v31 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC234E0;
      sub_2231EA728(v31, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v32 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v32);
      while (__stlxr(v6 - 1, v32));
      break;
    case 24:
      v33 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC235D8;
      sub_2231EAFEC(v33, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v34 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v34);
      while (__stlxr(v6 - 1, v34));
      break;
    case 25:
      return sub_2231EB848(a2);
    case 26:
      v35 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC237C8;
      sub_2231EC2F8(v35, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v36 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v36);
      while (__stlxr(v6 - 1, v36));
      break;
    case 27:
      v37 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC238C0;
      sub_2231ECBBC(v37, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v38 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v38);
      while (__stlxr(v6 - 1, v38));
      break;
    case 28:
      v39 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC239B8;
      sub_2231ED480(v39, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v40 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v40);
      while (__stlxr(v6 - 1, v40));
      break;
    case 29:
      v41 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC23AB0;
      sub_2231EDD44(v41, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v42 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v42);
      while (__stlxr(v6 - 1, v42));
      break;
    case 30:
      v43 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC23BA8;
      sub_2231EE608(v43, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v44 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v44);
      while (__stlxr(v6 - 1, v44));
      break;
    case 31:
      return sub_2231EED6C(a2);
    case 32:
      return sub_2231EF74C(a2);
    case 33:
      v45 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC23D98;
      sub_2231EFF14(v45, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v46 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v46);
      while (__stlxr(v6 - 1, v46));
      break;
    case 34:
      v47 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC23E90;
      sub_2231F07D8(v47, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v48 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v48);
      while (__stlxr(v6 - 1, v48));
      break;
    case 35:
      v49 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC23F88;
      sub_2231F109C(v49, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v50 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v50);
      while (__stlxr(v6 - 1, v50));
      break;
    case 36:
      v51 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC24080;
      sub_2231F1960(v51, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v52 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v52);
      while (__stlxr(v6 - 1, v52));
      break;
    case 37:
      return sub_2231F21BC(a2);
    case 38:
      return sub_2231F2C04(a2);
    case 39:
      v53 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC24368;
      sub_2231F3554(v53, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v54 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v54);
      while (__stlxr(v6 - 1, v54));
      break;
    case 40:
      v55 = *(_QWORD *)(a2 + 8);
      v57 = &off_24EC24460;
      sub_2231F3E18(v55, &v58);
      v4 = v59;
      if (!v59)
        goto LABEL_121;
      v56 = (unint64_t *)&v59->__shared_owners_;
      do
        v6 = __ldaxr(v56);
      while (__stlxr(v6 - 1, v56));
      break;
    default:
      return 0;
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_121:
  nullsub_30(&v57);
  return 0;
}

void sub_2231DDE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DDFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DE008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231DE01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2231DE030(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC22138;
  sub_2231DE21C(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC711E0)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231DE1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DE1B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231DE21C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231DE4E8(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231DEAD8(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231DE378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231DE3CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231DE438()
{
  return 1;
}

uint64_t sub_2231DE440(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231DE448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_2231DE464(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231DE4E8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231DE560();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231DE560()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2557899B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557899B0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231B47AC();
    sub_2231DE764((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231DE764((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789998, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789998, &dword_22314D000);
          __cxa_guard_release(&qword_2557899B0);
          return &stru_255789998;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789998;
}

void sub_2231DE6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2557899B0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2557899B0);
  _Unwind_Resume(a1);
}

void sub_2231DE764(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231DE800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231DE81C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2557899D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557899D0))
  {
    sub_223174DE4(v7, "Image");
    v2 = sub_2231A2C78();
    sub_2231DEA20((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231DEA20((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_2557899B8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557899B8, &dword_22314D000);
          __cxa_guard_release(&qword_2557899D0);
          return &stru_2557899B8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2557899B8;
}

void sub_2231DE96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2557899D0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2557899D0);
  _Unwind_Resume(a1);
}

void sub_2231DEA20(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231DEABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2231DEAD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 1);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231DEC28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231DEC3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC22278;
  sub_2231DEE28(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6F980)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231DEDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DEDC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231DEE28(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231DF0F4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231DF520(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231DEF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231DEFD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231DF044()
{
  return 2;
}

uint64_t sub_2231DF04C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231DF054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_2231DF070(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231DF0F4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231DF16C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231DF16C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2557899F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557899F0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231DF428();
    sub_2231DF370((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231DF370((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_2557899D8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557899D8, &dword_22314D000);
          __cxa_guard_release(&qword_2557899F0);
          return &stru_2557899D8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2557899D8;
}

void sub_2231DF2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2557899F0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2557899F0);
  _Unwind_Resume(a1);
}

void sub_2231DF370(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231DF40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231DF428()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789A10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789A10))
    return &stru_2557899F8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_2557899F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557899F8, &dword_22314D000);
  __cxa_guard_release(&qword_255789A10);
  return &stru_2557899F8;
}

void sub_2231DF4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789A10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789A10);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231DF520(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 2);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231DF670(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231DF684(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC218E0;
  sub_2231DF808(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC71150)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231DF7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_2231DF808(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231DF9B8(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231DC400(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231DF964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2231DF9B8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231DFA30();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231DFA30()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789A30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789A30))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231A36D0();
    sub_2231DFC34((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231DFC34((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789A18, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789A18, &dword_22314D000);
          __cxa_guard_release(&qword_255789A30);
          return &stru_255789A18;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789A18;
}

void sub_2231DFB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789A30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789A30);
  _Unwind_Resume(a1);
}

void sub_2231DFC34(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231DFCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2231DFCEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC21FE8;
  sub_2231DFE70(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC71270)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231DFE5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_2231DFE70(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E0020(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231DD128(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231DFFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E0020(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E0098();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E0098()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789A50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789A50))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231C26A0();
    sub_2231E029C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E029C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789A38, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789A38, &dword_22314D000);
          __cxa_guard_release(&qword_255789A50);
          return &stru_255789A38;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789A38;
}

void sub_2231E01E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789A50);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789A50);
  _Unwind_Resume(a1);
}

void sub_2231E029C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E0338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2231E0354(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC22370;
  sub_2231E0540(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6FA10)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231E04C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E04D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E0540(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E080C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E0C38(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E069C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E06F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E075C()
{
  return 5;
}

uint64_t sub_2231E0764(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E076C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231E0788(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E080C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E0884();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E0884()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789A70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789A70))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E0B40();
    sub_2231E0A88((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E0A88((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789A58, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789A58, &dword_22314D000);
          __cxa_guard_release(&qword_255789A70);
          return &stru_255789A58;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789A58;
}

void sub_2231E09D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789A70);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789A70);
  _Unwind_Resume(a1);
}

void sub_2231E0A88(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E0B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E0B40()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789A90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789A90))
    return &stru_255789A78;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789A78);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789A78, &dword_22314D000);
  __cxa_guard_release(&qword_255789A90);
  return &stru_255789A78;
}

void sub_2231E0BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789A90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789A90);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E0C38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 5);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E0D88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E0D9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E0E04(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E10D0(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E14FC(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E0F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E0FB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E1020()
{
  return 6;
}

uint64_t sub_2231E1028(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E1030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E104C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E10D0(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E1148();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E1148()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789AB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789AB0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E1404();
    sub_2231E134C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E134C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789A98, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789A98, &dword_22314D000);
          __cxa_guard_release(&qword_255789AB0);
          return &stru_255789A98;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789A98;
}

void sub_2231E1298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789AB0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789AB0);
  _Unwind_Resume(a1);
}

void sub_2231E134C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E13E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E1404()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789AD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789AD0))
    return &stru_255789AB8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789AB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789AB8, &dword_22314D000);
  __cxa_guard_release(&qword_255789AD0);
  return &stru_255789AB8;
}

void sub_2231E14BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789AD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789AD0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E14FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 6);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E164C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231E1660(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC22560;
  sub_2231E184C(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6FAA0)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231E17D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E17E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E184C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E1B18(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E1E4C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E19A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E19FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E1A68()
{
  return 7;
}

uint64_t sub_2231E1A70(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E1A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E1A94(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E1B18(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E1B90();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E1B90()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789AF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789AF0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231A26C8();
    sub_2231E1D94((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E1D94((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789AD8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789AD8, &dword_22314D000);
          __cxa_guard_release(&qword_255789AF0);
          return &stru_255789AD8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789AD8;
}

void sub_2231E1CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789AF0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789AF0);
  _Unwind_Resume(a1);
}

void sub_2231E1D94(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E1E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2231E1E4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 7);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E1F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231E1FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC22658;
  sub_2231E219C(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6FB30)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231E2120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E2134(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E219C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E2468(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E2894(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E22F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E234C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E23B8()
{
  return 8;
}

uint64_t sub_2231E23C0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E23C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231E23E4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E2468(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E24E0();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E24E0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789B10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789B10))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E279C();
    sub_2231E26E4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E26E4((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789AF8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789AF8, &dword_22314D000);
          __cxa_guard_release(&qword_255789B10);
          return &stru_255789AF8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789AF8;
}

void sub_2231E2630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789B10);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789B10);
  _Unwind_Resume(a1);
}

void sub_2231E26E4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E2780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E279C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789B30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789B30))
    return &stru_255789B18;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789B18);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789B18, &dword_22314D000);
  __cxa_guard_release(&qword_255789B30);
  return &stru_255789B18;
}

void sub_2231E2854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789B30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789B30);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E2894(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 8);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E29E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E29F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E2A60(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E2D2C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E3158(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E2BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E2C10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E2C7C()
{
  return 9;
}

uint64_t sub_2231E2C84(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E2C8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231E2CA8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E2D2C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E2DA4();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E2DA4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789B50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789B50))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E3060();
    sub_2231E2FA8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E2FA8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789B38, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789B38, &dword_22314D000);
          __cxa_guard_release(&qword_255789B50);
          return &stru_255789B38;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789B38;
}

void sub_2231E2EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789B50);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789B50);
  _Unwind_Resume(a1);
}

void sub_2231E2FA8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E3044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E3060()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789B70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789B70))
    return &stru_255789B58;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789B58);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789B58, &dword_22314D000);
  __cxa_guard_release(&qword_255789B70);
  return &stru_255789B58;
}

void sub_2231E3118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789B70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789B70);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E3158(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 9);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E32A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E32BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E3324(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 10)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E35F0(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E3A1C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E3480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E34D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E3540()
{
  return 10;
}

uint64_t sub_2231E3548(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E3550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E356C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E35F0(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E3668();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E3668()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789B90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789B90))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E3924();
    sub_2231E386C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E386C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789B78, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789B78, &dword_22314D000);
          __cxa_guard_release(&qword_255789B90);
          return &stru_255789B78;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789B78;
}

void sub_2231E37B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789B90);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789B90);
  _Unwind_Resume(a1);
}

void sub_2231E386C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E3908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E3924()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789BB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789BB0))
    return &stru_255789B98;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789B98);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789B98, &dword_22314D000);
  __cxa_guard_release(&qword_255789BB0);
  return &stru_255789B98;
}

void sub_2231E39DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789BB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789BB0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E3A1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 10);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E3B6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E3B80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E3BE8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E3EB4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E42E0(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E3D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E3D98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E3E04()
{
  return 11;
}

uint64_t sub_2231E3E0C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E3E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E3E30(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E3EB4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E3F2C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E3F2C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789BD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789BD0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E41E8();
    sub_2231E4130((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E4130((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789BB8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789BB8, &dword_22314D000);
          __cxa_guard_release(&qword_255789BD0);
          return &stru_255789BB8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789BB8;
}

void sub_2231E407C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789BD0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789BD0);
  _Unwind_Resume(a1);
}

void sub_2231E4130(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E41CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E41E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789BF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789BF0))
    return &stru_255789BD8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789BD8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789BD8, &dword_22314D000);
  __cxa_guard_release(&qword_255789BF0);
  return &stru_255789BD8;
}

void sub_2231E42A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789BF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789BF0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E42E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 11);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E4430(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E4444(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E44AC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E4778(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E4BA4(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E4608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E465C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E46C8()
{
  return 12;
}

uint64_t sub_2231E46D0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E46D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231E46F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E4778(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E47F0();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E47F0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789C10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789C10))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E4AAC();
    sub_2231E49F4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E49F4((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789BF8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789BF8, &dword_22314D000);
          __cxa_guard_release(&qword_255789C10);
          return &stru_255789BF8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789BF8;
}

void sub_2231E4940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789C10);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789C10);
  _Unwind_Resume(a1);
}

void sub_2231E49F4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E4A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E4AAC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789C30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789C30))
    return &stru_255789C18;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789C18);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789C18, &dword_22314D000);
  __cxa_guard_release(&qword_255789C30);
  return &stru_255789C18;
}

void sub_2231E4B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789C30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789C30);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E4BA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 12);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E4CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E4D08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E4D70(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 13)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E503C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E5468(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E4ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E4F20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E4F8C()
{
  return 13;
}

uint64_t sub_2231E4F94(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E4F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231E4FB8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E503C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E50B4();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E50B4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789C50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789C50))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E5370();
    sub_2231E52B8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E52B8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789C38, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789C38, &dword_22314D000);
          __cxa_guard_release(&qword_255789C50);
          return &stru_255789C38;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789C38;
}

void sub_2231E5204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789C50);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789C50);
  _Unwind_Resume(a1);
}

void sub_2231E52B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E5354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E5370()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789C70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789C70))
    return &stru_255789C58;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789C58);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789C58, &dword_22314D000);
  __cxa_guard_release(&qword_255789C70);
  return &stru_255789C58;
}

void sub_2231E5428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789C70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789C70);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E5468(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 13);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E55B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E55CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E5634(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 14)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E5900(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E5D2C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E5790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E57E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E5850()
{
  return 14;
}

uint64_t sub_2231E5858(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E5860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E587C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E5900(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E5978();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E5978()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789C90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789C90))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E5C34();
    sub_2231E5B7C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E5B7C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789C78, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789C78, &dword_22314D000);
          __cxa_guard_release(&qword_255789C90);
          return &stru_255789C78;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789C78;
}

void sub_2231E5AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789C90);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789C90);
  _Unwind_Resume(a1);
}

void sub_2231E5B7C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E5C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E5C34()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789CB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789CB0))
    return &stru_255789C98;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789C98);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789C98, &dword_22314D000);
  __cxa_guard_release(&qword_255789CB0);
  return &stru_255789C98;
}

void sub_2231E5CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789CB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789CB0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E5D2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 14);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E5E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E5E90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E5EF8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 15)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E61C4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E65F0(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E6054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E60A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E6114()
{
  return 15;
}

uint64_t sub_2231E611C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E6124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E6140(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E61C4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E623C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E623C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789CD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789CD0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E64F8();
    sub_2231E6440((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E6440((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789CB8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789CB8, &dword_22314D000);
          __cxa_guard_release(&qword_255789CD0);
          return &stru_255789CB8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789CB8;
}

void sub_2231E638C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789CD0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789CD0);
  _Unwind_Resume(a1);
}

void sub_2231E6440(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E64DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E64F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789CF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789CF0))
    return &stru_255789CD8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789CD8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789CD8, &dword_22314D000);
  __cxa_guard_release(&qword_255789CF0);
  return &stru_255789CD8;
}

void sub_2231E65B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789CF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789CF0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E65F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 15);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E6740(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E6754(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E67BC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E6A88(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E6EB4(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E6918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E696C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E69D8()
{
  return 16;
}

uint64_t sub_2231E69E0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E69E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231E6A04(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E6A88(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E6B00();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E6B00()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789D10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789D10))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E6DBC();
    sub_2231E6D04((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E6D04((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789CF8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789CF8, &dword_22314D000);
          __cxa_guard_release(&qword_255789D10);
          return &stru_255789CF8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789CF8;
}

void sub_2231E6C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789D10);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789D10);
  _Unwind_Resume(a1);
}

void sub_2231E6D04(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E6DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E6DBC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789D30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789D30))
    return &stru_255789D18;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789D18);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789D18, &dword_22314D000);
  __cxa_guard_release(&qword_255789D30);
  return &stru_255789D18;
}

void sub_2231E6E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789D30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789D30);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E6EB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 16);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E7004(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E7018(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E7080(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 17)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E734C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E7778(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E71DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E7230(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E729C()
{
  return 17;
}

uint64_t sub_2231E72A4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E72AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231E72C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E734C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E73C4();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E73C4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789D50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789D50))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E7680();
    sub_2231E75C8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E75C8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789D38, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789D38, &dword_22314D000);
          __cxa_guard_release(&qword_255789D50);
          return &stru_255789D38;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789D38;
}

void sub_2231E7514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789D50);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789D50);
  _Unwind_Resume(a1);
}

void sub_2231E75C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E7664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E7680()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789D70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789D70))
    return &stru_255789D58;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789D58);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789D58, &dword_22314D000);
  __cxa_guard_release(&qword_255789D70);
  return &stru_255789D58;
}

void sub_2231E7738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789D70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789D70);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E7778(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 17);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E78C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E78DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E7944(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 18)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E7C10(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E803C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E7AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E7AF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E7B60()
{
  return 18;
}

uint64_t sub_2231E7B68(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E7B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E7B8C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E7C10(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E7C88();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E7C88()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789D90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789D90))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E7F44();
    sub_2231E7E8C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E7E8C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789D78, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789D78, &dword_22314D000);
          __cxa_guard_release(&qword_255789D90);
          return &stru_255789D78;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789D78;
}

void sub_2231E7DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789D90);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789D90);
  _Unwind_Resume(a1);
}

void sub_2231E7E8C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E7F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E7F44()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789DB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789DB0))
    return &stru_255789D98;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789D98);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789D98, &dword_22314D000);
  __cxa_guard_release(&qword_255789DB0);
  return &stru_255789D98;
}

void sub_2231E7FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789DB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789DB0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E803C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 18);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E818C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E81A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E8208(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 19)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E84D4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E8900(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E8364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E83B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E8424()
{
  return 19;
}

uint64_t sub_2231E842C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E8434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231E8450(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E84D4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E854C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E854C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789DD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789DD0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E8808();
    sub_2231E8750((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E8750((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789DB8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789DB8, &dword_22314D000);
          __cxa_guard_release(&qword_255789DD0);
          return &stru_255789DB8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789DB8;
}

void sub_2231E869C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789DD0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789DD0);
  _Unwind_Resume(a1);
}

void sub_2231E8750(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E87EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E8808()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789DF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789DF0))
    return &stru_255789DD8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789DD8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789DD8, &dword_22314D000);
  __cxa_guard_release(&qword_255789DF0);
  return &stru_255789DD8;
}

void sub_2231E88C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789DF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789DF0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E8900(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 19);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E8A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E8A64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E8ACC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 20)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E8D98(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E91C4(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E8C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E8C7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E8CE8()
{
  return 20;
}

uint64_t sub_2231E8CF0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E8CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231E8D14(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E8D98(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E8E10();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E8E10()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789E10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789E10))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231E90CC();
    sub_2231E9014((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E9014((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789DF8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789DF8, &dword_22314D000);
          __cxa_guard_release(&qword_255789E10);
          return &stru_255789DF8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789DF8;
}

void sub_2231E8F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789E10);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789E10);
  _Unwind_Resume(a1);
}

void sub_2231E9014(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E90B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231E90CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789E30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789E30))
    return &stru_255789E18;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789E18);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789E18, &dword_22314D000);
  __cxa_guard_release(&qword_255789E30);
  return &stru_255789E18;
}

void sub_2231E9184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789E30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789E30);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231E91C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 20);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E9314(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231E9328(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC232F0;
  sub_2231E9514(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC70FA0)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231E9498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E94AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E9514(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 21)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231E97E0(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231E9B14(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E9670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231E96C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231E9730()
{
  return 21;
}

uint64_t sub_2231E9738(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231E9740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231E975C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231E97E0(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E9858();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231E9858()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789E50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789E50))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231C659C();
    sub_2231E9A5C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231E9A5C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789E38, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789E38, &dword_22314D000);
          __cxa_guard_release(&qword_255789E50);
          return &stru_255789E38;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789E38;
}

void sub_2231E99A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789E50);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789E50);
  _Unwind_Resume(a1);
}

void sub_2231E9A5C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231E9AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2231E9B14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 21);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231E9C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231E9C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC233E8;
  sub_2231E9E64(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6FBC0)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231E9DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231E9DFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231E9E64(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 22)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EA130(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EA55C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231E9FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EA014(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EA080()
{
  return 22;
}

uint64_t sub_2231EA088(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EA090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231EA0AC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EA130(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EA1A8();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EA1A8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789E70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789E70))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EA464();
    sub_2231EA3AC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EA3AC((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789E58, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789E58, &dword_22314D000);
          __cxa_guard_release(&qword_255789E70);
          return &stru_255789E58;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789E58;
}

void sub_2231EA2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789E70);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789E70);
  _Unwind_Resume(a1);
}

void sub_2231EA3AC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EA448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EA464()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789E90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789E90))
    return &stru_255789E78;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789E78);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789E78, &dword_22314D000);
  __cxa_guard_release(&qword_255789E90);
  return &stru_255789E78;
}

void sub_2231EA51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789E90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789E90);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EA55C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 22);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EA6AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EA6C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231EA728(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 23)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EA9F4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EAE20(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EA884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EA8D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EA944()
{
  return 23;
}

uint64_t sub_2231EA94C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EA954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231EA970(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EA9F4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EAA6C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EAA6C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789EB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789EB0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EAD28();
    sub_2231EAC70((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EAC70((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789E98, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789E98, &dword_22314D000);
          __cxa_guard_release(&qword_255789EB0);
          return &stru_255789E98;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789E98;
}

void sub_2231EABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789EB0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789EB0);
  _Unwind_Resume(a1);
}

void sub_2231EAC70(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EAD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EAD28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789ED0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789ED0))
    return &stru_255789EB8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789EB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789EB8, &dword_22314D000);
  __cxa_guard_release(&qword_255789ED0);
  return &stru_255789EB8;
}

void sub_2231EADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789ED0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789ED0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EAE20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 23);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EAF70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EAF84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231EAFEC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EB2B8(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EB6E4(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EB148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EB19C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EB208()
{
  return 24;
}

uint64_t sub_2231EB210(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EB218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231EB234(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EB2B8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EB330();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EB330()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789EF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789EF0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EB5EC();
    sub_2231EB534((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EB534((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789ED8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789ED8, &dword_22314D000);
          __cxa_guard_release(&qword_255789EF0);
          return &stru_255789ED8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789ED8;
}

void sub_2231EB480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789EF0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789EF0);
  _Unwind_Resume(a1);
}

void sub_2231EB534(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EB5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EB5EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789F10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789F10))
    return &stru_255789EF8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789EF8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789EF8, &dword_22314D000);
  __cxa_guard_release(&qword_255789F10);
  return &stru_255789EF8;
}

void sub_2231EB6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789F10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789F10);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EB6E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 24);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EB834(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231EB848(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC236D0;
  sub_2231EBA34(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC71030)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231EB9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EB9CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231EBA34(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EBD00(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EC12C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EBB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EBBE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EBC50()
{
  return 25;
}

uint64_t sub_2231EBC58(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EBC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231EBC7C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EBD00(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EBD78();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EBD78()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789F30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789F30))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EC034();
    sub_2231EBF7C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EBF7C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789F18, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789F18, &dword_22314D000);
          __cxa_guard_release(&qword_255789F30);
          return &stru_255789F18;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789F18;
}

void sub_2231EBEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789F30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789F30);
  _Unwind_Resume(a1);
}

void sub_2231EBF7C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EC018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EC034()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789F50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789F50))
    return &stru_255789F38;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789F38);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789F38, &dword_22314D000);
  __cxa_guard_release(&qword_255789F50);
  return &stru_255789F38;
}

void sub_2231EC0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789F50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789F50);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EC12C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 25);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EC27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EC290(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231EC2F8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 26)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EC5C4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EC9F0(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EC454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EC4A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EC514()
{
  return 26;
}

uint64_t sub_2231EC51C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EC524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231EC540(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EC5C4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EC63C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EC63C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789F70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789F70))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EC8F8();
    sub_2231EC840((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EC840((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789F58, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789F58, &dword_22314D000);
          __cxa_guard_release(&qword_255789F70);
          return &stru_255789F58;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789F58;
}

void sub_2231EC78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789F70);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789F70);
  _Unwind_Resume(a1);
}

void sub_2231EC840(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EC8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EC8F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789F90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789F90))
    return &stru_255789F78;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789F78);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789F78, &dword_22314D000);
  __cxa_guard_release(&qword_255789F90);
  return &stru_255789F78;
}

void sub_2231EC9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789F90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789F90);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EC9F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 26);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231ECB40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231ECB54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231ECBBC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 27)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231ECE88(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231ED2B4(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231ECD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231ECD6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231ECDD8()
{
  return 27;
}

uint64_t sub_2231ECDE0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231ECDE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231ECE04(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231ECE88(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231ECF00();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231ECF00()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789FB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789FB0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231ED1BC();
    sub_2231ED104((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231ED104((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789F98, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789F98, &dword_22314D000);
          __cxa_guard_release(&qword_255789FB0);
          return &stru_255789F98;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789F98;
}

void sub_2231ED050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789FB0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789FB0);
  _Unwind_Resume(a1);
}

void sub_2231ED104(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231ED1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231ED1BC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789FD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789FD0))
    return &stru_255789FB8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789FB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789FB8, &dword_22314D000);
  __cxa_guard_release(&qword_255789FD0);
  return &stru_255789FB8;
}

void sub_2231ED274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789FD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789FD0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231ED2B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 27);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231ED404(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231ED418(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231ED480(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 28)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231ED74C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EDB78(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231ED5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231ED630(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231ED69C()
{
  return 28;
}

uint64_t sub_2231ED6A4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231ED6AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231ED6C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231ED74C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231ED7C4();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231ED7C4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789FF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789FF0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EDA80();
    sub_2231ED9C8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231ED9C8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789FD8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789FD8, &dword_22314D000);
          __cxa_guard_release(&qword_255789FF0);
          return &stru_255789FD8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789FD8;
}

void sub_2231ED914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789FF0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789FF0);
  _Unwind_Resume(a1);
}

void sub_2231ED9C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EDA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EDA80()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A010);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A010))
    return &stru_255789FF8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789FF8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789FF8, &dword_22314D000);
  __cxa_guard_release(&qword_25578A010);
  return &stru_255789FF8;
}

void sub_2231EDB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A010);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A010);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EDB78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 28);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EDCC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EDCDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231EDD44(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 29)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EE010(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EE43C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EDEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EDEF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EDF60()
{
  return 29;
}

uint64_t sub_2231EDF68(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EDF70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231EDF8C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EE010(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EE088();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EE088()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A030);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A030))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EE344();
    sub_2231EE28C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EE28C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A018, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A018, &dword_22314D000);
          __cxa_guard_release(&qword_25578A030);
          return &stru_25578A018;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A018;
}

void sub_2231EE1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A030);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A030);
  _Unwind_Resume(a1);
}

void sub_2231EE28C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EE328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EE344()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A050);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A050))
    return &stru_25578A038;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A038);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A038, &dword_22314D000);
  __cxa_guard_release(&qword_25578A050);
  return &stru_25578A038;
}

void sub_2231EE3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A050);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A050);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EE43C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 29);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EE58C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EE5A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231EE608(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 30)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EE8D4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EEC08(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EE764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EE7B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EE824()
{
  return 30;
}

uint64_t sub_2231EE82C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EE834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231EE850(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EE8D4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EE94C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EE94C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A070);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A070))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231A46DC();
    sub_2231EEB50((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EEB50((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A058, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A058, &dword_22314D000);
          __cxa_guard_release(&qword_25578A070);
          return &stru_25578A058;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A058;
}

void sub_2231EEA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A070);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A070);
  _Unwind_Resume(a1);
}

void sub_2231EEB50(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EEBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2231EEC08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 30);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EED58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231EED6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC23CA0;
  sub_2231EEEF0(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6FC50)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231EEEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231EEEF0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EF1BC(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231EF5E8(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EF04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231EF0A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231EF10C()
{
  return 31;
}

uint64_t sub_2231EF114(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231EF11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231EF138(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231EF1BC(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EF234();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EF234()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A090);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A090))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EF4F0();
    sub_2231EF438((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EF438((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A078, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A078, &dword_22314D000);
          __cxa_guard_release(&qword_25578A090);
          return &stru_25578A078;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A078;
}

void sub_2231EF384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A090);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A090);
  _Unwind_Resume(a1);
}

void sub_2231EF438(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EF4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EF4F0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A0B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A0B0))
    return &stru_25578A098;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A098);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A098, &dword_22314D000);
  __cxa_guard_release(&qword_25578A0B0);
  return &stru_25578A098;
}

void sub_2231EF5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A0B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A0B0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231EF5E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 31);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231EF738(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231EF74C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC21EF0;
  sub_2231EF8D0(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC710C0)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231EF8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231EF8D0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231EFA80(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231DCD38(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231EFA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EFA80(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EFAF8();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231EFAF8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A0D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A0D0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EFDB4();
    sub_2231EFCFC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231EFCFC((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A0B8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A0B8, &dword_22314D000);
          __cxa_guard_release(&qword_25578A0D0);
          return &stru_25578A0B8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A0B8;
}

void sub_2231EFC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A0D0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A0D0);
  _Unwind_Resume(a1);
}

void sub_2231EFCFC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231EFD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231EFDB4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A0F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A0F0))
    return &stru_25578A0D8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A0D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A0D8, &dword_22314D000);
  __cxa_guard_release(&qword_25578A0F0);
  return &stru_25578A0D8;
}

void sub_2231EFE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A0F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A0F0);
  _Unwind_Resume(a1);
}

uint64_t sub_2231EFEAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231EFF14(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 33)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F01E0(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F060C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F0070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F00C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F0130()
{
  return 33;
}

uint64_t sub_2231F0138(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F0140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231F015C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F01E0(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F0258();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F0258()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A110);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A110))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231F0514();
    sub_2231F045C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F045C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A0F8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A0F8, &dword_22314D000);
          __cxa_guard_release(&qword_25578A110);
          return &stru_25578A0F8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A0F8;
}

void sub_2231F03A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A110);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A110);
  _Unwind_Resume(a1);
}

void sub_2231F045C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F04F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231F0514()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A130);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A130))
    return &stru_25578A118;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A118);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A118, &dword_22314D000);
  __cxa_guard_release(&qword_25578A130);
  return &stru_25578A118;
}

void sub_2231F05CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A130);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A130);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F060C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 33);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F075C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F0770(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231F07D8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 34)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F0AA4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F0ED0(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F0934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F0988(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F09F4()
{
  return 34;
}

uint64_t sub_2231F09FC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F0A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231F0A20(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F0AA4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F0B1C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F0B1C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A150);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A150))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231F0DD8();
    sub_2231F0D20((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F0D20((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A138, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A138, &dword_22314D000);
          __cxa_guard_release(&qword_25578A150);
          return &stru_25578A138;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A138;
}

void sub_2231F0C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A150);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A150);
  _Unwind_Resume(a1);
}

void sub_2231F0D20(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F0DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231F0DD8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A170);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A170))
    return &stru_25578A158;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A158);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A158, &dword_22314D000);
  __cxa_guard_release(&qword_25578A170);
  return &stru_25578A158;
}

void sub_2231F0E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A170);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A170);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F0ED0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 34);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F1020(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F1034(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231F109C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 35)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F1368(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F1794(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F11F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F124C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F12B8()
{
  return 35;
}

uint64_t sub_2231F12C0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F12C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231F12E4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F1368(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F13E0();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F13E0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A190);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A190))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231F169C();
    sub_2231F15E4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F15E4((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A178, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A178, &dword_22314D000);
          __cxa_guard_release(&qword_25578A190);
          return &stru_25578A178;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A178;
}

void sub_2231F1530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A190);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A190);
  _Unwind_Resume(a1);
}

void sub_2231F15E4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F1680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231F169C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A1B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A1B0))
    return &stru_25578A198;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A198);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A198, &dword_22314D000);
  __cxa_guard_release(&qword_25578A1B0);
  return &stru_25578A198;
}

void sub_2231F1754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A1B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A1B0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F1794(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 35);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F18E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F18F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231F1960(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 36)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F1C2C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F2058(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F1ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F1B10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F1B7C()
{
  return 36;
}

uint64_t sub_2231F1B84(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F1B8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231F1BA8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F1C2C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F1CA4();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F1CA4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A1D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A1D0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231F1F60();
    sub_2231F1EA8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F1EA8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A1B8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A1B8, &dword_22314D000);
          __cxa_guard_release(&qword_25578A1D0);
          return &stru_25578A1B8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A1B8;
}

void sub_2231F1DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A1D0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A1D0);
  _Unwind_Resume(a1);
}

void sub_2231F1EA8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F1F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231F1F60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A1F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A1F0))
    return &stru_25578A1D8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A1D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A1D8, &dword_22314D000);
  __cxa_guard_release(&qword_25578A1F0);
  return &stru_25578A1D8;
}

void sub_2231F2018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A1F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A1F0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F2058(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 36);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F21A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231F21BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC24178;
  sub_2231F23A8(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6FCE0)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231F232C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F2340(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231F23A8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 37)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F2674(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F2AA0(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F2504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F2558(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F25C4()
{
  return 37;
}

uint64_t sub_2231F25CC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F25D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2231F25F0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F2674(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F26EC();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F26EC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A210);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A210))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231F29A8();
    sub_2231F28F0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F28F0((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A1F8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A1F8, &dword_22314D000);
          __cxa_guard_release(&qword_25578A210);
          return &stru_25578A1F8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A1F8;
}

void sub_2231F283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A210);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A210);
  _Unwind_Resume(a1);
}

void sub_2231F28F0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F298C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231F29A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A230);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A230))
    return &stru_25578A218;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A218);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A218, &dword_22314D000);
  __cxa_guard_release(&qword_25578A230);
  return &stru_25578A218;
}

void sub_2231F2A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A230);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A230);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F2AA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 37);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F2BF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2231F2C04(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (**v17)();
  uint64_t (***v18)();
  std::__shared_weak_count *v19;
  uint64_t (***v20)();
  std::__shared_weak_count *v21;
  uint64_t (***v22)();
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v17 = &off_24EC24270;
  sub_2231F2D88(v1, (uint64_t *)&v18);
  v2 = v18;
  if (v18)
  {
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v20 = v2;
    v21 = v3;
    if (*v2 == off_24EC6FD70)
    {
      v22 = v2;
      v23 = v3;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v10 = v22;
  v9 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_30(&v17);
  return v10 != 0;
}

void sub_2231F2D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231F2D88(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 38)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F3054(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F3388(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F2EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F2F38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F2FA4()
{
  return 38;
}

uint64_t sub_2231F2FAC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F2FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231F2FD0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F3054(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F30CC();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F30CC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A250);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A250))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231A5138();
    sub_2231F32D0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F32D0((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A238, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A238, &dword_22314D000);
          __cxa_guard_release(&qword_25578A250);
          return &stru_25578A238;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A238;
}

void sub_2231F321C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A250);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A250);
  _Unwind_Resume(a1);
}

void sub_2231F32D0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2231F3388(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 38);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F34D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F34EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231F3554(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 39)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F3820(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F3C4C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F36B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F3704(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F3770()
{
  return 39;
}

uint64_t sub_2231F3778(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F3780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231F379C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F3820(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F3898();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F3898()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A270);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A270))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231F3B54();
    sub_2231F3A9C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F3A9C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A258, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A258, &dword_22314D000);
          __cxa_guard_release(&qword_25578A270);
          return &stru_25578A258;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A258;
}

void sub_2231F39E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A270);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A270);
  _Unwind_Resume(a1);
}

void sub_2231F3A9C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F3B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231F3B54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A290);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A290))
    return &stru_25578A278;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A278);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A278, &dword_22314D000);
  __cxa_guard_release(&qword_25578A290);
  return &stru_25578A278;
}

void sub_2231F3C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A290);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A290);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F3C4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 39);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F3D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F3DB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231F3E18(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 40)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231F40E4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231F4510(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231F3F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_2231F3FC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F4034()
{
  return 40;
}

uint64_t sub_2231F403C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231F4044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2231F4060(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231F40E4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231F415C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231F415C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A2B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A2B0))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231F4418();
    sub_2231F4360((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231F4360((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A298, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A298, &dword_22314D000);
          __cxa_guard_release(&qword_25578A2B0);
          return &stru_25578A298;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A298;
}

void sub_2231F42AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A2B0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A2B0);
  _Unwind_Resume(a1);
}

void sub_2231F4360(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231F43FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231F4418()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A2D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A2D0))
    return &stru_25578A2B8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb32f]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578A2B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A2B8, &dword_22314D000);
  __cxa_guard_release(&qword_25578A2D0);
  return &stru_25578A2B8;
}

void sub_2231F44D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A2D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A2D0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F4510(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 40);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231F4660(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F4674(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t (**v10)();
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v14 = &off_24EC1F8C8;
  sub_2231F47D4(a1, (uint64_t)&v15);
  v10 = &off_24EC20EB8;
  sub_2231B4D38(a2, (uint64_t)&v11);
  sub_2242E43A8(&v14, &v10);
  nullsub_30(&v13);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  nullsub_30(&v10);
  nullsub_30(&v17);
  v6 = v16;
  if (!v16)
    return nullsub_30(&v14);
  v7 = (unint64_t *)&v16->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return nullsub_30(&v14);
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return nullsub_30(&v14);
}

void sub_2231F4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_2231B4CC8((uint64_t)&a9);
  sub_22319A5E0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2231F47A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  nullsub_30(&a9);
  sub_22319A5E0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2231F47C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_2231F47D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v4;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v18 = v4;
    v19 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v18 = v4;
    v19 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 40);
  sub_22319B010(a2, &v18, (uint64_t)&v16, v9, *(_DWORD *)(a1 + 56));
  nullsub_30(&v16);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2231F48E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  nullsub_30(&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231F4908(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[7];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[3];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (std::__shared_weak_count *)a1[1];
      if (v17)
        goto LABEL_26;
      return a1;
    }
  }
  v17 = (std::__shared_weak_count *)a1[1];
  if (!v17)
    return a1;
LABEL_26:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231F4AAC(unsigned int a1@<W0>, unint64_t a2@<X1>, const void **a3@<X8>)
{
  unsigned __int8 v4;
  unsigned int v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _UNKNOWN **v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  void **v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  unsigned __int8 v26;
  _DWORD *v27;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  os_log_type_t v43;
  const void *v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  void *__p[2];
  char v57;
  void **v58;
  void *v59[2];
  char v60;
  char *v61;
  char *v62;
  _QWORD v63[3];
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  __int128 v73;
  size_t v74;
  unint64_t v75;
  char v76;
  void *v77[2];
  unint64_t v78;
  char v79;
  char v80;
  _QWORD v81[2];

  v72 = a2;
  v71 = a1;
  v4 = atomic_load((unsigned __int8 *)&qword_25578A2F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A2F0))
  {
    qword_25578A2E8 = 0;
    off_25578A2E0 = 0;
    qword_25578A2D8 = (uint64_t)&off_25578A2E0;
    __cxa_atexit((void (*)(void *))sub_2231F572C, &qword_25578A2D8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A2F0);
  }
  v5 = v71;
  LODWORD(v73) = v71;
  v6 = v72;
  *(_QWORD *)((char *)&v73 + 4) = v72;
  v7 = off_25578A2E0;
  v8 = HIDWORD(v72);
  if (!off_25578A2E0)
    goto LABEL_14;
  v9 = &off_25578A2E0;
  do
  {
    while (1)
    {
      v10 = v7[8];
      if (v10 >= v73)
      {
        if (v10 > v73)
          break;
        v11 = v7[9];
        v12 = v11 >= DWORD1(v73);
        if (v11 == DWORD1(v73))
          v12 = v7[10] >= HIDWORD(v72);
        if (v12)
          break;
      }
      v7 = (_DWORD *)*((_QWORD *)v7 + 1);
      if (!v7)
        goto LABEL_12;
    }
    v9 = (_UNKNOWN **)v7;
    v7 = *(_DWORD **)v7;
  }
  while (v7);
LABEL_12:
  if (v9 == &off_25578A2E0 || (v13 = *((_DWORD *)v9 + 8), v73 < v13))
  {
LABEL_14:
    v14 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_24EC24558;
    LODWORD(v73) = v5;
    *(_QWORD *)((char *)&v73 + 4) = v6;
    v15 = v73;
    *((_QWORD *)v14 + 3) = v73;
    v16 = v14 + 24;
    *((_DWORD *)v14 + 8) = v8;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = xmmword_2245C43A0;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 120) = 0u;
    *((_QWORD *)v14 + 17) = 0;
    v17 = operator new(0x70uLL);
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &off_24EC245A8;
    v17[3] = 850045863;
    *((_OWORD *)v17 + 2) = 0u;
    *((_OWORD *)v17 + 3) = 0u;
    *((_OWORD *)v17 + 4) = 0u;
    v17[10] = 0;
    v17[11] = v14 + 24;
    v17[12] = v15;
    *((_DWORD *)v17 + 26) = v8;
    *((_QWORD *)v14 + 18) = v17 + 3;
    *((_QWORD *)v14 + 19) = v17;
    *((_DWORD *)v14 + 40) = v5;
    *(_QWORD *)(v14 + 164) = v6;
    *a3 = v14 + 24;
    a3[1] = v14;
    sub_2231F5754(&v70);
    if (**(int **)(v70 + 56) > 3
      || (v18 = *(unsigned __int8 *)(v70 + 72), v19 = sub_22455F97C(&v70), v20 = v19, !v18) && !v19)
    {
LABEL_104:
      LODWORD(v73) = v71;
      *(_QWORD *)((char *)&v73 + 4) = v72;
      v74 = (size_t)v16;
      v75 = (unint64_t)v14;
      if (v14)
      {
        v50 = (unint64_t *)(v14 + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      sub_2231F648C((uint64_t **)&qword_25578A2D8, (unsigned int *)&v73, (uint64_t)&v73);
      v52 = (std::__shared_weak_count *)v75;
      if (v75)
      {
        v53 = (unint64_t *)(v75 + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      return;
    }
    v63[0] = &v70;
    v63[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v63[2] = std::chrono::system_clock::now().__d_.__rep_;
    v64 = 3;
    v65 = "unknown file";
    v66 = 275;
    v68 = 0;
    v69 = 0;
    v67 = "unknown function";
    v62 = v14 + 24;
    LODWORD(v75) = 0;
    sub_2231A0B14((uint64_t)__p, (uint64_t)&v73, &v71);
    if ((_DWORD)v75 == -1)
      sub_22316DD70();
    __p[0] = v81;
    ((void (*)(void **__return_ptr, void **, __int128 *))off_24EC22250[v75])(v59, __p, &v73);
    if ((_DWORD)v75 != -1)
      ((void (*)(void **, __int128 *))off_24EC22220[v75])(__p, &v73);
    v21 = (char *)v59;
    if (v60 < 0)
      v21 = (char *)v59[0];
    v61 = v21;
    LODWORD(v75) = 0;
    sub_2231BFC9C((uint64_t)v81, (uint64_t)&v73, (unsigned int *)&v72);
    if ((_DWORD)v75 == -1)
      sub_22316DD70();
    v81[0] = &v80;
    ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24EC22250[v75])(__p, v81, &v73);
    if ((_DWORD)v75 != -1)
      ((void (*)(_QWORD *, __int128 *))off_24EC22220[v75])(v81, &v73);
    v22 = __p;
    if (v57 < 0)
      v22 = (void **)__p[0];
    v58 = v22;
    v23 = *(_QWORD *)v63[0];
    v24 = (const char *)(*(_QWORD *)v63[0] + 16);
    v55 = (uint64_t *)v24;
    if (*(char *)(*(_QWORD *)v63[0] + 39) < 0)
    {
      v24 = *(const char **)(v23 + 16);
      v25 = *(_QWORD *)(v23 + 24);
      v33 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v33 & 1) != 0)
        goto LABEL_48;
    }
    else
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)v63[0] + 39);
      v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v26 & 1) != 0)
        goto LABEL_48;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v73);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v73, &xmmword_255788F40);
      if ((_BYTE)v75 && SHIBYTE(v74) < 0)
        operator delete((void *)v73);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_48:
    if (byte_255788F57 >= 0)
      v34 = (const char *)&xmmword_255788F40;
    else
      v34 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v35 = byte_255788F57;
    else
      v35 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)&v73 = os_log_create(v34, v24);
    v36 = (char *)&v73 + 8;
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v35 >= 0x17)
    {
      v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v37 = v35 | 7;
      v38 = v37 + 1;
      v36 = (char *)operator new(v37 + 1);
      v74 = v35;
      v75 = v38 | 0x8000000000000000;
      *((_QWORD *)&v73 + 1) = v36;
    }
    else
    {
      HIBYTE(v75) = v35;
      if (!v35)
      {
LABEL_62:
        v36[v35] = 0;
        v76 = 1;
        v39 = v77;
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v25 >= 0x17)
        {
          v40 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v40 = v25 | 7;
          v41 = v40 + 1;
          v39 = (void **)operator new(v40 + 1);
          v77[1] = (void *)v25;
          v78 = v41 | 0x8000000000000000;
          v77[0] = v39;
        }
        else
        {
          HIBYTE(v78) = v25;
          if (!v25)
            goto LABEL_70;
        }
        memmove(v39, v24, v25);
LABEL_70:
        *((_BYTE *)v39 + v25) = 0;
        v79 = 1;
        v42 = objc_retainAutorelease((id)v73);
        if (v79 && SHIBYTE(v78) < 0)
          operator delete(v77[0]);
        if (v76 && SHIBYTE(v75) < 0)
          operator delete(*((void **)&v73 + 1));

        v43 = sub_22455F7B4(3u);
        sub_2231F5B84((uint64_t)&v73, v20, v55, v42, v43, v18 != 0, (uint64_t *)&v62, &v61, (const char **)&v58);

        if (v57 < 0)
        {
          operator delete(__p[0]);
          if ((v60 & 0x80000000) == 0)
          {
LABEL_78:
            if (!v18)
            {
LABEL_98:
              sub_223182C08((uint64_t)v63);
              v47 = v69;
              if (v69)
              {
                p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                do
                  v49 = __ldaxr(p_shared_owners);
                while (__stlxr(v49 - 1, p_shared_owners));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              v16 = (char *)*a3;
              v14 = (char *)a3[1];
              goto LABEL_104;
            }
LABEL_82:
            v44 = *a3;
            LODWORD(v75) = 0;
            sub_2231A0B14((uint64_t)__p, (uint64_t)&v73, &v71);
            if ((_DWORD)v75 == -1)
              sub_22316DD70();
            __p[0] = v81;
            ((void (*)(void **__return_ptr, void **, __int128 *))off_24EC22250[v75])(v59, __p, &v73);
            if ((_DWORD)v75 != -1)
              ((void (*)(void **, __int128 *))off_24EC22220[v75])(__p, &v73);
            if (v60 >= 0)
              v45 = v59;
            else
              v45 = (void **)v59[0];
            LODWORD(v75) = 0;
            sub_2231BFC9C((uint64_t)v81, (uint64_t)&v73, (unsigned int *)&v72);
            if ((_DWORD)v75 == -1)
              sub_22316DD70();
            v81[0] = &v62;
            ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24EC22250[v75])(__p, v81, &v73);
            if ((_DWORD)v75 != -1)
              ((void (*)(_QWORD *, __int128 *))off_24EC22220[v75])(v81, &v73);
            v46 = __p;
            if (v57 < 0)
              v46 = (void **)__p[0];
            sub_22322C138((uint64_t)v63, "New image pool %p with format %s and size %s", v44, (const char *)v45, (const char *)v46);
            if (v57 < 0)
              operator delete(__p[0]);
            if (v60 < 0)
              operator delete(v59[0]);
            sub_223182C08((uint64_t)v63);
            goto LABEL_98;
          }
        }
        else if ((v60 & 0x80000000) == 0)
        {
          goto LABEL_78;
        }
        operator delete(v59[0]);
        if (!v18)
          goto LABEL_98;
        goto LABEL_82;
      }
    }
    memmove(v36, v34, v35);
    goto LABEL_62;
  }
  if (v73 <= v13)
  {
    v32 = *((_DWORD *)v9 + 9);
    if (DWORD1(v73) == v32)
    {
      if (*((_DWORD *)v9 + 10) > HIDWORD(v72))
        goto LABEL_14;
    }
    else if (DWORD1(v73) < v32)
    {
      goto LABEL_14;
    }
  }
  v27 = v9[6];
  if ((_DWORD)v72 != v27[35] || HIDWORD(v72) != v27[36])
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 279, (uint64_t)"it->second->ImageSize() == size", 31, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_126;
    }
    v27 = v9[6];
  }
  if (v27[34] == v71)
    goto LABEL_40;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 280, (uint64_t)"it->second->ImageFormat() == format", 35, (uint64_t)"Image format mismatch", 21, (void (*)(void **))sub_22457406C))
  {
LABEL_126:
    abort();
  }
  v27 = v9[6];
LABEL_40:
  *a3 = v27;
  v29 = (unint64_t *)v9[7];
  a3[1] = v29;
  if (v29)
  {
    v30 = v29 + 1;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
}

void sub_2231F53A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  if (*(_BYTE *)(v30 - 152) && *(char *)(v30 - 153) < 0)
    operator delete(*(void **)(v30 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    sub_223182DAC((uint64_t)&a29);
    sub_223167354(v29);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)&a29);
  sub_223167354(v29);
  _Unwind_Resume(a1);
}

void sub_2231F54D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231F54E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223198118(v2 - 176);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231F5500(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231F5514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  void *v17;
  va_list va;

  va_start(va, a15);
  std::mutex::~mutex((std::mutex *)(v15 + 80));
  sub_2231F5968((void ***)va);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_2231F5540(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23[2];
  std::__shared_weak_count *v24;

  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  v23[1] = v5;
  v24 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_2231F6668(a1, v23);
  std::mutex::unlock((std::mutex *)(a1 + 56));
  v8 = v23[0];
  *((_QWORD *)&v22 + 1) = v4;
  v23[0] = 0;
  *(_QWORD *)&v22 = v5;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_2231F65C4(a2, v8, &v22);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v23[0];
  v23[0] = 0;
  if (v14)
  {
    nullsub_30(v14 + 32);
    v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = nullsub_30(v14);
    MEMORY[0x227684CE8](v18, 0x10A1C40677D5854);
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2231F56D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_223167354((uint64_t)va);
  sub_2231F5A5C((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2231F56FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2231F5718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F572C(uint64_t a1)
{
  sub_2231F5848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_2231F5754(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CA6A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA6A8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.frame");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CA6A0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CA6A8);
  }
  *a1 = qword_2540CA6A0;
}

void sub_2231F57F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CA6A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CA6A8);
  _Unwind_Resume(a1);
}

void sub_2231F5848(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_2231F5848(a1, *a2);
    sub_2231F5848(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[7];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void sub_2231F58D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231F58E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F5910(uint64_t a1)
{
  return sub_2231F5AEC(a1 + 24);
}

void sub_2231F591C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC245A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231F592C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC245A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2231F595C(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_2231F5968(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        v8 = *--v4;
        v7 = v8;
        *v4 = 0;
        if (v8)
        {
          nullsub_30(v7 + 32);
          v9 = *(std::__shared_weak_count **)(v7 + 16);
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          v6 = nullsub_30(v7);
          MEMORY[0x227684CE8](v6, 0x10A1C40677D5854);
        }
      }
      while (v4 != v2);
      v12 = **a1;
      v1[1] = v2;
      operator delete(v12);
    }
  }
}

uint64_t *sub_2231F5A5C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    nullsub_30(v2 + 32);
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = nullsub_30(v2);
    MEMORY[0x227684CE8](v6, 0x10A1C40677D5854);
  }
  return a1;
}

uint64_t sub_2231F5AEC(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void **v7;

  v2 = *(std::mutex **)(a1 + 120);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 120));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v7 = (void **)(a1 + 16);
  sub_2231F5968(&v7);
  return a1;
}

uint64_t sub_2231F5B84(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, uint64_t *a7, char **a8, const char **a9)
{
  NSObject *v14;
  NSObject *v15;
  size_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  const char *v43;
  void *v44;
  NSObject *v46;
  std::__shared_weak_count_vtbl *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  _BYTE v51[24];
  const char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = v14;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v16 = _os_log_pack_size();
    v46 = v15;
    v17 = (std::__shared_weak_count_vtbl *)operator new(v16, (std::align_val_t)8uLL);
    v18 = (std::__shared_weak_count *)operator new();
    v18->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v17;
    sub_2231F6148((uint64_t)v51, *a8, a9);
    v20 = (char *)operator new(0x50uLL);
    *((_QWORD *)v20 + 1) = 0;
    v21 = (unint64_t *)(v20 + 8);
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_24EC245F8;
    *((_QWORD *)v20 + 3) = off_24EC24648;
    *((_OWORD *)v20 + 2) = *(_OWORD *)&v51[8];
    *((_QWORD *)v20 + 6) = v52;
    *(_OWORD *)&v51[8] = 0uLL;
    *(_OWORD *)(v20 + 56) = v53;
    *((_QWORD *)v20 + 9) = v54;
    v52 = 0;
    v53 = 0uLL;
    v54 = 0;
    nullsub_30(v51);
    v47 = v17;
    *(_QWORD *)&v48 = v17;
    *((_QWORD *)&v48 + 1) = v18;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *(_QWORD *)&v49 = v20 + 24;
    *((_QWORD *)&v49 + 1) = v20;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v50 = v20 + 24;
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      (*(void (**)(char *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v27 = *a7;
    if (v20[55] >= 0)
      v28 = v20 + 32;
    else
      v28 = (char *)*((_QWORD *)v20 + 4);
    if (v50[55] >= 0)
      v29 = v50 + 32;
    else
      v29 = (char *)*((_QWORD *)v50 + 4);
    v30 = _os_log_pack_fill();
    *(_DWORD *)v30 = 134218498;
    *(_QWORD *)(v30 + 4) = v27;
    *(_WORD *)(v30 + 12) = 2080;
    *(_QWORD *)(v30 + 14) = v28;
    *(_WORD *)(v30 + 22) = 2080;
    *(_QWORD *)(v30 + 24) = v29;
    v31 = operator new();
    v32 = *((unsigned __int8 *)a3 + 23);
    if ((v32 & 0x80u) == 0)
      v33 = a3;
    else
      v33 = (uint64_t *)*a3;
    if ((v32 & 0x80u) != 0)
      v32 = a3[1];
    *(_QWORD *)v31 = v47;
    *(_OWORD *)(v31 + 8) = v48;
    *(_OWORD *)(v31 + 24) = v49;
    *(_QWORD *)(v31 + 40) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    *(_BYTE *)(v31 + 56) = a5;
    *(_QWORD *)v51 = v31;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v51);
    v34 = *(_QWORD *)v51;
    *(_QWORD *)v51 = 0;
    v15 = v46;
    if (v34)
    {
      v35 = *(std::__shared_weak_count **)(v34 + 32);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)(v34 + 16);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      MEMORY[0x227684CE8](v34, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v14, a5);
    v41 = *a7;
    v42 = *a8;
    v43 = *a9;
    *(_DWORD *)v51 = 134218498;
    *(_QWORD *)&v51[4] = v41;
    *(_WORD *)&v51[12] = 2080;
    *(_QWORD *)&v51[14] = v42;
    *(_WORD *)&v51[22] = 2080;
    v52 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }

  return 0;
}

void sub_2231F60C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);

  _Unwind_Resume(a1);
}

unint64_t sub_2231F6148(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = __dst;
  v27[0] = v25;
  *(_QWORD *)((char *)v27 + 7) = *(_QWORD *)((char *)&v25 + 7);
  v18 = HIBYTE(v25);
  v19 = v22;
  v26[0] = v23;
  *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v23 + 7);
  v20 = HIBYTE(v23);
  *(_QWORD *)a1 = off_24EC24648;
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v27 + 7);
  *(_QWORD *)(a1 + 16) = v27[0];
  *(_BYTE *)(a1 + 31) = v18;
  v21 = v26[0];
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)v26 + 7);
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v21;
  *(_BYTE *)(a1 + 55) = v20;
  return result;
}

void sub_2231F631C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231F6338(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return nullsub_30(a1);
LABEL_6:
    operator delete(*(void **)(a1 + 8));
    return nullsub_30(a1);
  }
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_6;
  return nullsub_30(a1);
}

void sub_2231F6390(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC245F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231F63A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC245F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F63D0(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return nullsub_30(a1 + 24);
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    return nullsub_30(a1 + 24);
  }
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
  return nullsub_30(a1 + 24);
}

void sub_2231F642C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
LABEL_3:
    nullsub_30(a1);
    JUMPOUT(0x227684CE8);
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_3;
}

char *sub_2231F648C(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    while (1)
    {
      v10 = v5;
      v11 = *((_DWORD *)v5 + 8);
      if (v7 < v11)
        goto LABEL_3;
      if (v7 > v11)
        goto LABEL_6;
      v12 = *((_DWORD *)v10 + 9);
      if (v8 == v12)
      {
        v13 = *((_DWORD *)v10 + 10);
        if (v9 >= v13)
        {
          if (v13 >= v9)
            return (char *)v10;
          goto LABEL_6;
        }
LABEL_3:
        v5 = (uint64_t *)*v10;
        v6 = (uint64_t **)v10;
        if (!*v10)
          goto LABEL_16;
      }
      else
      {
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return (char *)v10;
LABEL_6:
        v5 = (uint64_t *)v10[1];
        if (!v5)
        {
          v6 = (uint64_t **)(v10 + 1);
          goto LABEL_16;
        }
      }
    }
  }
  v10 = (uint64_t *)(a1 + 1);
LABEL_16:
  v15 = v10;
  v16 = (char *)operator new(0x40uLL);
  *((_DWORD *)v16 + 8) = *(_DWORD *)a3;
  *(_QWORD *)(v16 + 36) = *(_QWORD *)(a3 + 4);
  *((_OWORD *)v16 + 3) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v15;
  *v6 = (uint64_t *)v16;
  v17 = (uint64_t *)**a1;
  v18 = (uint64_t *)v16;
  if (v17)
  {
    *a1 = v17;
    v18 = *v6;
  }
  sub_2231A9A8C(a1[1], v18);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v16;
}

_QWORD *sub_2231F65C4(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  *a1 = a2;
  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)v6 = &off_24EC24698;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_OWORD *)(v6 + 32) = v7;
  a1[1] = v6;
  return a1;
}

void sub_2231F6630(void *a1)
{
  uint64_t v1;
  std::mutex **v2;
  char v3;

  __cxa_begin_catch(a1);
  v3 = sub_2231F6AD0(*v2, v1);
  sub_2245747F0(v1, v3);
  __cxa_rethrow();
}

void sub_2231F6654(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2231F6668@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::runtime_error *exception;

  v2 = result;
  v4 = *(_QWORD *)(result + 24);
  if (*(_QWORD *)(result + 16) == v4)
  {
    v14 = *(_QWORD *)(result + 40);
    if (v14 >= *(_QWORD *)(result + 48))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    *(_QWORD *)(result + 40) = v14 + 1;
    return sub_2231F6794((int *)result, a2);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = *(_QWORD *)(result + 24);
    v9 = *(_QWORD *)(v6 - 8);
    v8 = (_QWORD *)(v6 - 8);
    v7 = v9;
    *v8 = 0;
    if (v9)
    {
      nullsub_30(v7 + 32);
      v10 = *(std::__shared_weak_count **)(v7 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = nullsub_30(v7);
      result = MEMORY[0x227684CE8](v13, 0x10A1C40677D5854);
    }
    *(_QWORD *)(v2 + 24) = v8;
    *a2 = v5;
  }
  return result;
}

void sub_2231F6780(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F6794@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[22];

  v4 = operator new();
  sub_22446FCAC(*a1);
  *(_QWORD *)v4 = &off_24EC1F958;
  *(_OWORD *)(v4 + 8) = v9;
  v9 = 0uLL;
  *(_OWORD *)(v4 + 24) = v10;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v11;
  *(_QWORD *)(v4 + 54) = *(_QWORD *)&v11[14];
  nullsub_30((char *)&v10 + 8);
  if (*((_QWORD *)&v9 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  result = nullsub_30(&v8);
  *a2 = v4;
  return result;
}

void sub_2231F6870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C40677D5854);
  _Unwind_Resume(a1);
}

void sub_2231F6894(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24698;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_2231F6908(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24698;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_2231F6980(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_2231F6AD0(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    nullsub_30(v2 + 32);
    v5 = *(std::__shared_weak_count **)(v2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = nullsub_30(v2);
    MEMORY[0x227684CE8](v8, 0x10A1C40677D5854);
  }
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t sub_2231F6A60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEENS1_18AutoReturni"
                     "ngMakeTIS7_NS_5recon5frame23DynamicImageInitializerENSA_20DynamicImageReleaserEEENSt3__110shared_pt"
                     "rIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEENS1_18"
                                "AutoReturningMakeTIS7_NS_5recon5frame23DynamicImageInitializerENSA_20DynamicImageRelease"
                                "rEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSE_10unique_ptrIS7_NSE"
                                "_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame23DynamicImageInitializerENSA_20DynamicImageReleaserEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame23DynamicImageInitializerENSA_20DynamicImageReleaserEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_2231F6AD0(std::mutex *a1, uint64_t a2)
{
  uint64_t sig;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    v14 = a2;
    std::mutex::lock((std::mutex *)(sig + 56));
    v5 = *(uint64_t **)(sig + 24);
    if ((unint64_t)v5 >= *(_QWORD *)(sig + 32))
    {
      v7 = sub_2231F6C0C((_QWORD *)(sig + 16), &v14);
    }
    else
    {
      v6 = v14;
      v14 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *(_QWORD *)(sig + 24) = v7;
    std::mutex::unlock((std::mutex *)(sig + 56));
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      nullsub_30(v8 + 32);
      v9 = *(std::__shared_weak_count **)(v8 + 16);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = nullsub_30(v8);
      MEMORY[0x227684CE8](v12, 0x10A1C40677D5854);
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_2231F6BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_2231F5A5C(&a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2231F6BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2231F5A5C((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231F6C0C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_22316E078();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_223174E94();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_31;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_39;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_39:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v29 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v28 = v29;
      *(_QWORD *)v15 = 0;
      if (v29)
      {
        nullsub_30(v28 + 32);
        v30 = *(std::__shared_weak_count **)(v28 + 16);
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v27 = nullsub_30(v28);
        MEMORY[0x227684CE8](v27, 0x10A1C40677D5854);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_31:
    operator delete(v15);
  return v13;
}

void sub_2231F6E10(uint64_t *a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v13 = *(void **)(v11 - 24);
          if (v13)
          {
            *(_QWORD *)(v11 - 16) = v13;
            operator delete(v13);
          }
          v11 -= 40;
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_39;
    v20 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x333333333333333 ? 0x666666666666666 : v21;
    if (v22 > 0x666666666666666)
LABEL_39:
      sub_22316E078();
    v23 = 40 * v22;
    v24 = operator new(40 * v22);
    *a1 = (uint64_t)v24;
    a1[1] = (uint64_t)v24;
    a1[2] = (uint64_t)v24 + v23;
    v25 = sub_2231F708C(v9, v6, a3, (uint64_t)v24);
LABEL_31:
    a1[1] = v25;
    return;
  }
  v14 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 3) < __sz)
  {
    v15 = &a2[(v14 - v10) >> 3];
    if (v14 != v10)
    {
      v16 = 8 * ((v14 - v10) >> 3);
      do
      {
        v17 = *v6;
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v10 = v17;
        if (v6 != (uint64_t *)v10)
          sub_2231F71CC((char **)(v10 + 16), (uint64_t *)v6[2], (uint64_t *)v6[3], (v6[3] - v6[2]) >> 5);
        v6 += 5;
        v10 += 40;
        v16 -= 40;
      }
      while (v16);
      v10 = a1[1];
    }
    v25 = sub_2231F708C(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    v18 = *a1;
  }
  else
  {
    v18 = *a1;
    do
    {
      v19 = *v6;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)v6 + 2);
      *(_QWORD *)v10 = v19;
      if (v6 != (uint64_t *)v10)
        sub_2231F71CC((char **)(v10 + 16), (uint64_t *)v6[2], (uint64_t *)v6[3], (v6[3] - v6[2]) >> 5);
      v6 += 5;
      v10 += 40;
      v18 += 40;
    }
    while (v6 != a3);
    v14 = a1[1];
  }
  while (v14 != v18)
  {
    v26 = *(void **)(v14 - 24);
    if (v26)
    {
      *(_QWORD *)(v14 - 16) = v26;
      operator delete(v26);
    }
    v14 -= 40;
  }
  a1[1] = v18;
}

void sub_2231F707C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2231F7084(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2231F708C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_DWORD *)(a4 + 8) = *((_DWORD *)v6 + 2);
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = v7;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      v8 = v6[2];
      v9 = v6[3];
      v10 = v9 - v8;
      if (v9 != v8)
      {
        if (v10 < 0)
          sub_22316E078();
        v11 = (char *)operator new(v9 - v8);
        v12 = 0;
        *(_QWORD *)(a4 + 16) = v11;
        *(_QWORD *)(a4 + 24) = v11;
        *(_QWORD *)(a4 + 32) = &v11[32 * (v10 >> 5)];
        do
        {
          v13 = v8 + v12;
          v14 = &v11[v12];
          v15 = *(_QWORD *)(v8 + v12);
          *((_DWORD *)v14 + 2) = *(_DWORD *)(v8 + v12 + 8);
          *(_QWORD *)v14 = v15;
          v16 = *(_QWORD *)(v8 + v12 + 16);
          *((_DWORD *)v14 + 6) = *(_DWORD *)(v8 + v12 + 24);
          *((_QWORD *)v14 + 2) = v16;
          v12 += 32;
        }
        while (v13 + 32 != v9);
        *(_QWORD *)(a4 + 24) = &v11[v12];
      }
      v6 += 5;
      a4 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_2231F71A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 24) = v12;
    operator delete(v12);
  }
  sub_22319E618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_2231F71CC(char **a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (__sz <= (v8 - (uint64_t)result) >> 5)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = (v17 - result) >> 5;
    if (v18 >= __sz)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v27[2] = *((_DWORD *)v6 + 2);
          *(_QWORD *)v27 = v28;
          v29 = v6[2];
          v27[6] = *((_DWORD *)v6 + 6);
          *((_QWORD *)v27 + 2) = v29;
          v26 += 32;
          v6 += 4;
          v27 += 8;
        }
        while (v6 != a3);
      }
      *v16 = v26;
    }
    else
    {
      v19 = &a2[4 * v18];
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v20;
          v21 = v6[2];
          *((_DWORD *)result + 6) = *((_DWORD *)v6 + 6);
          *((_QWORD *)result + 2) = v21;
          v6 += 4;
          result += 32;
        }
        while (v6 != v19);
        result = *v16;
      }
      v22 = result;
      if (v19 != a3)
      {
        v22 = result;
        v23 = result;
        do
        {
          v24 = *v19;
          v23[2] = *((_DWORD *)v19 + 2);
          *(_QWORD *)v23 = v24;
          v25 = v19[2];
          v23[6] = *((_DWORD *)v19 + 6);
          *((_QWORD *)v23 + 2) = v25;
          v22 += 32;
          v19 += 4;
          v23 += 8;
        }
        while (v19 != a3);
      }
      *v16 = v22;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_26;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_26:
      sub_22316E078();
    v13 = 32 * v12;
    result = (char *)operator new(32 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *v6;
        v14[2] = *((_DWORD *)v6 + 2);
        *((_QWORD *)v14 + 2) = v6[2];
        v14[6] = *((_DWORD *)v6 + 6);
        v14 += 8;
        v6 += 4;
      }
      while (v6 != a3);
    }
    a1[1] = (char *)v14;
  }
  return result;
}

BOOL sub_2231F73E4(float **a1)
{
  float *v1;
  float *v2;

  v1 = *a1;
  v2 = a1[1];
  return **a1 == *v2
      && v1[1] == v2[1]
      && v1[2] == v2[2]
      && v1[3] == v2[3]
      && v1[4] == v2[4]
      && v1[5] == v2[5]
      && v1[6] == v2[6]
      && v1[7] == v2[7]
      && v1[8] == v2[8]
      && v1[9] == v2[9]
      && v1[10] == v2[10]
      && v1[11] == v2[11]
      && v1[12] == v2[12]
      && v1[13] == v2[13]
      && v1[14] == v2[14]
      && v1[15] == v2[15];
}

uint64_t sub_2231F74F8(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_2231F7604(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

void sub_2231F761C(NSObject *a1@<X0>, const void **a2@<X8>)
{
  unsigned __int8 v3;
  char *v4;
  uint64_t v5;
  _UNKNOWN **v6;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  char **v10;
  unsigned int v11;
  _BOOL4 v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t **v22;
  _UNKNOWN **v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  void **v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 v37;
  _DWORD *v38;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  std::__shared_weak_count *v55;
  void **v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *__p[2];
  char v64;
  void **v65;
  unsigned int v66;
  void *v67[2];
  char v68;
  char *v69;
  std::__shared_weak_count *v70;
  _QWORD v71[3];
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  char v84;
  void *v85[2];
  unint64_t v86;
  char v87;
  char v88;
  _QWORD v89[2];

  v79 = a1;
  v3 = atomic_load((unsigned __int8 *)&qword_25578A310);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578A310))
  {
    qword_25578A308 = 0;
    off_25578A300 = 0;
    off_25578A2F8 = &off_25578A300;
    __cxa_atexit((void (*)(void *))sub_2231F8214, &off_25578A2F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A310);
  }
  v4 = (char *)off_25578A300;
  v5 = (uint64_t)v79;
  if (off_25578A300)
  {
    v6 = &off_25578A300;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v9 = v7 == (_DWORD)v79;
      v8 = v7 < v79;
      if (v9)
        v8 = *((_DWORD *)v4 + 9) < HIDWORD(v79);
      v9 = !v8;
      if (v8)
        v10 = (char **)(v4 + 8);
      else
        v10 = (char **)v4;
      if (v9)
        v6 = (_UNKNOWN **)v4;
      v4 = *v10;
    }
    while (*v10);
    if (v6 != &off_25578A300)
    {
      v11 = *((_DWORD *)v6 + 8);
      v9 = (_DWORD)v79 == v11;
      v12 = v79 < v11;
      if (v9)
        v12 = HIDWORD(v79) < *((_DWORD *)v6 + 9);
      if (!v12)
      {
        v38 = v6[5];
        if ((_DWORD)v79 != v38[34] || HIDWORD(v79) != v38[35])
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 260, (uint64_t)"it->second->ImageSize() == size", 31, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v38 = v6[5];
        }
        *a2 = v38;
        v40 = (unint64_t *)v6[6];
        a2[1] = v40;
        if (v40)
        {
          v41 = v40 + 1;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        return;
      }
    }
  }
  v13 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC246E8;
  v14 = v13 + 1;
  sub_2231F8310((uint64_t)&v13[1], v5);
  *a2 = &v13[1];
  a2[1] = v13;
  sub_2231F5754(&v78);
  if (**(int **)(v78 + 56) <= 3)
  {
    v15 = *(unsigned __int8 *)(v78 + 72);
    v16 = sub_22455F97C(&v78);
    v17 = v16;
    if (v15 || v16)
    {
      v71[0] = &v78;
      v71[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v71[2] = std::chrono::system_clock::now().__d_.__rep_;
      v72 = 3;
      v73 = "unknown file";
      v74 = 256;
      v76 = 0;
      v77 = 0;
      v75 = "unknown function";
      v70 = v13 + 1;
      v66 = 1;
      LODWORD(v83) = 0;
      sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, &v66);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      __p[0] = v89;
      ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
      v32 = (char *)v67;
      if (v68 < 0)
        v32 = (char *)v67[0];
      v69 = v32;
      LODWORD(v83) = 0;
      sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      v89[0] = &v88;
      ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
      v33 = __p;
      if (v64 < 0)
        v33 = (void **)__p[0];
      v65 = v33;
      v34 = *(_QWORD *)v71[0];
      v35 = (const char *)(*(_QWORD *)v71[0] + 16);
      v61 = (uint64_t *)v35;
      if (*(char *)(*(_QWORD *)v71[0] + 39) < 0)
      {
        v35 = *(const char **)(v34 + 16);
        v36 = *(_QWORD *)(v34 + 24);
        v62 = v17;
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) != 0)
          goto LABEL_68;
      }
      else
      {
        v36 = *(unsigned __int8 *)(*(_QWORD *)v71[0] + 39);
        v62 = v17;
        v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v37 & 1) != 0)
          goto LABEL_68;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v80);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v80, &xmmword_255788F40);
        if ((_BYTE)v83 && SHIBYTE(v82) < 0)
          operator delete(v80);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_68:
      if (byte_255788F57 >= 0)
        v44 = (const char *)&xmmword_255788F40;
      else
        v44 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v45 = byte_255788F57;
      else
        v45 = *((_QWORD *)&xmmword_255788F40 + 1);
      v80 = os_log_create(v44, v35);
      v46 = (void **)&v81;
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v45 >= 0x17)
      {
        v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v47 = v45 | 7;
        v48 = v47 + 1;
        v46 = (void **)operator new(v47 + 1);
        v82 = (std::__shared_weak_count *)v45;
        v83 = v48 | 0x8000000000000000;
        v81 = (std::__shared_weak_count *)v46;
      }
      else
      {
        HIBYTE(v83) = v45;
        if (!v45)
        {
LABEL_82:
          *((_BYTE *)v46 + v45) = 0;
          v84 = 1;
          v49 = v85;
          if (v36 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v36 >= 0x17)
          {
            v51 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v51 = v36 | 7;
            v52 = v51 + 1;
            v49 = (void **)operator new(v51 + 1);
            v85[1] = (void *)v36;
            v86 = v52 | 0x8000000000000000;
            v85[0] = v49;
            v50 = v62;
          }
          else
          {
            HIBYTE(v86) = v36;
            v50 = v62;
            if (!v36)
              goto LABEL_90;
          }
          memmove(v49, v35, v36);
LABEL_90:
          *((_BYTE *)v49 + v36) = 0;
          v87 = 1;
          v53 = objc_retainAutorelease(v80);
          if (v87 && SHIBYTE(v86) < 0)
            operator delete(v85[0]);
          if (v84 && SHIBYTE(v83) < 0)
            operator delete(v81);

          v54 = sub_22455F7B4(3u);
          sub_2231F8570((uint64_t)&v80, v50, v61, v53, v54, v15 != 0, (uint64_t *)&v70, &v69, (const char **)&v65);

          if (v64 < 0)
          {
            operator delete(__p[0]);
            if ((v68 & 0x80000000) == 0)
            {
LABEL_98:
              if (!v15)
                goto LABEL_118;
LABEL_102:
              v55 = (std::__shared_weak_count *)*a2;
              LODWORD(v70) = 1;
              LODWORD(v83) = 0;
              sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, (unsigned int *)&v70);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              __p[0] = v89;
              ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
              if (v68 >= 0)
                v56 = v67;
              else
                v56 = (void **)v67[0];
              LODWORD(v83) = 0;
              sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              v89[0] = &v69;
              ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
              v57 = __p;
              if (v64 < 0)
                v57 = (void **)__p[0];
              sub_22322C138((uint64_t)v71, "New image pool %p with format %s and size %s", v55, (const char *)v56, (const char *)v57);
              if (v64 < 0)
                operator delete(__p[0]);
              if (v68 < 0)
                operator delete(v67[0]);
              sub_223182C08((uint64_t)v71);
LABEL_118:
              sub_223182C08((uint64_t)v71);
              v58 = v77;
              if (v77)
              {
                p_shared_owners = (unint64_t *)&v77->__shared_owners_;
                do
                  v60 = __ldaxr(p_shared_owners);
                while (__stlxr(v60 - 1, p_shared_owners));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v14 = (std::__shared_weak_count *)*a2;
              v13 = (std::__shared_weak_count *)a2[1];
              v18 = v79;
              v80 = v79;
              v81 = v14;
              v82 = v13;
              if (!v13)
                goto LABEL_23;
              goto LABEL_21;
            }
          }
          else if ((v68 & 0x80000000) == 0)
          {
            goto LABEL_98;
          }
          operator delete(v67[0]);
          if (!v15)
            goto LABEL_118;
          goto LABEL_102;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_82;
    }
  }
  v18 = v79;
  v80 = v79;
  v81 = v13 + 1;
  v82 = v13;
LABEL_21:
  v19 = (unint64_t *)&v13->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_23:
  v21 = off_25578A300;
  if (off_25578A300)
  {
    while (1)
    {
      while (1)
      {
        v23 = (_UNKNOWN **)v21;
        v24 = *((_DWORD *)v21 + 8);
        v25 = *((_DWORD *)v23 + 9);
        v26 = HIDWORD(v18) < v25;
        if ((_DWORD)v18 != v24)
          v26 = v18 < v24;
        if (!v26)
          break;
        v21 = *v23;
        v22 = (uint64_t **)v23;
        if (!*v23)
          goto LABEL_36;
      }
      v27 = v25 < HIDWORD(v18);
      v28 = (_DWORD)v18 == v24 ? v27 : v24 < v18;
      if (v28 != 1)
        break;
      v21 = v23[1];
      if (!v21)
      {
        v22 = (uint64_t **)(v23 + 1);
        goto LABEL_36;
      }
    }
  }
  else
  {
    v22 = (uint64_t **)&off_25578A300;
    v23 = &off_25578A300;
LABEL_36:
    v29 = (uint64_t *)operator new(0x38uLL);
    v29[4] = (uint64_t)v18;
    v29[5] = (uint64_t)v14;
    v29[6] = (uint64_t)v13;
    v81 = 0;
    v82 = 0;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t)v23;
    *v22 = v29;
    if (*(_QWORD *)off_25578A2F8)
    {
      off_25578A2F8 = *(_UNKNOWN **)off_25578A2F8;
      v29 = *v22;
    }
    sub_2231A9A8C((uint64_t *)off_25578A300, v29);
    ++qword_25578A308;
    v13 = v82;
  }
  if (v13)
  {
    v30 = (unint64_t *)&v13->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2231F7F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (*(_BYTE *)(v31 - 152) && *(char *)(v31 - 153) < 0)
    operator delete(*(void **)(v31 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a19 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  sub_223182DAC((uint64_t)&a30);
  sub_223167354(v30);
  _Unwind_Resume(a1);
}

void sub_2231F8004(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231F8018(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223197300(v2 - 176);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231F8034(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231F8048(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2231F8060(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20[2];
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  v20[1] = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_2231F8BD8((_QWORD *)a1, v20);
  std::mutex::unlock((std::mutex *)(a1 + 56));
  v8 = v20[0];
  *((_QWORD *)&v19 + 1) = v4;
  v20[0] = 0;
  *(_QWORD *)&v19 = v5;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_2231F8B34(a2, v8, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20[0];
  v20[0] = 0;
  if (v14)
  {
    sub_223167354(v14 + 8);
    v15 = nullsub_30(v14);
    MEMORY[0x227684CE8](v15, 0x10F1C405026F4E9);
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_2231F81C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_223167354((uint64_t)va);
  sub_2231F840C((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2231F81E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2231F8200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F8214(uint64_t a1)
{
  sub_2231F823C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_2231F823C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_2231F823C(a1, *a2);
    sub_2231F823C(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void sub_2231F82C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC246E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231F82D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC246E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F8304(uint64_t a1)
{
  return sub_2231F8484(a1 + 24);
}

uint64_t sub_2231F8310(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = xmmword_2245C43A0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC24738;
  v4[3] = 850045863;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = a1;
  v4[12] = a2;
  *(_QWORD *)(a1 + 120) = v4 + 3;
  *(_QWORD *)(a1 + 128) = v4;
  *(_QWORD *)(a1 + 136) = a2;
  return a1;
}

void sub_2231F8398(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_224574864(v1, v3);
  _Unwind_Resume(a1);
}

void sub_2231F83C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231F83D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2231F8400(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_2231F840C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_223167354(v2 + 8);
    v3 = nullsub_30(v2);
    MEMORY[0x227684CE8](v3, 0x10F1C405026F4E9);
  }
  return a1;
}

uint64_t sub_2231F845C(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

uint64_t sub_2231F8484(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(std::mutex **)(a1 + 120);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 120));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v6 = *(_QWORD **)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(void **)(a1 + 16);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          sub_223167354(v9 + 8);
          v11 = nullsub_30(v9);
          MEMORY[0x227684CE8](v11, 0x10F1C405026F4E9);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_2231F8570(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, uint64_t *a7, char **a8, const char **a9)
{
  NSObject *v14;
  NSObject *v15;
  size_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  const char *v43;
  void *v44;
  NSObject *v46;
  std::__shared_weak_count_vtbl *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  _BYTE v51[24];
  const char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = v14;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v16 = _os_log_pack_size();
    v46 = v15;
    v17 = (std::__shared_weak_count_vtbl *)operator new(v16, (std::align_val_t)8uLL);
    v18 = (std::__shared_weak_count *)operator new();
    v18->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v17;
    sub_2231F6148((uint64_t)v51, *a8, a9);
    v20 = (char *)operator new(0x50uLL);
    *((_QWORD *)v20 + 1) = 0;
    v21 = (unint64_t *)(v20 + 8);
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_24EC245F8;
    *((_QWORD *)v20 + 3) = off_24EC24648;
    *((_OWORD *)v20 + 2) = *(_OWORD *)&v51[8];
    *((_QWORD *)v20 + 6) = v52;
    *(_OWORD *)&v51[8] = 0uLL;
    *(_OWORD *)(v20 + 56) = v53;
    *((_QWORD *)v20 + 9) = v54;
    v52 = 0;
    v53 = 0uLL;
    v54 = 0;
    nullsub_30(v51);
    v47 = v17;
    *(_QWORD *)&v48 = v17;
    *((_QWORD *)&v48 + 1) = v18;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *(_QWORD *)&v49 = v20 + 24;
    *((_QWORD *)&v49 + 1) = v20;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v50 = v20 + 24;
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      (*(void (**)(char *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v27 = *a7;
    if (v20[55] >= 0)
      v28 = v20 + 32;
    else
      v28 = (char *)*((_QWORD *)v20 + 4);
    if (v50[55] >= 0)
      v29 = v50 + 32;
    else
      v29 = (char *)*((_QWORD *)v50 + 4);
    v30 = _os_log_pack_fill();
    *(_DWORD *)v30 = 134218498;
    *(_QWORD *)(v30 + 4) = v27;
    *(_WORD *)(v30 + 12) = 2080;
    *(_QWORD *)(v30 + 14) = v28;
    *(_WORD *)(v30 + 22) = 2080;
    *(_QWORD *)(v30 + 24) = v29;
    v31 = operator new();
    v32 = *((unsigned __int8 *)a3 + 23);
    if ((v32 & 0x80u) == 0)
      v33 = a3;
    else
      v33 = (uint64_t *)*a3;
    if ((v32 & 0x80u) != 0)
      v32 = a3[1];
    *(_QWORD *)v31 = v47;
    *(_OWORD *)(v31 + 8) = v48;
    *(_OWORD *)(v31 + 24) = v49;
    *(_QWORD *)(v31 + 40) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    *(_BYTE *)(v31 + 56) = a5;
    *(_QWORD *)v51 = v31;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v51);
    v34 = *(_QWORD *)v51;
    *(_QWORD *)v51 = 0;
    v15 = v46;
    if (v34)
    {
      v35 = *(std::__shared_weak_count **)(v34 + 32);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)(v34 + 16);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      MEMORY[0x227684CE8](v34, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v14, a5);
    v41 = *a7;
    v42 = *a8;
    v43 = *a9;
    *(_DWORD *)v51 = 134218498;
    *(_QWORD *)&v51[4] = v41;
    *(_WORD *)&v51[12] = 2080;
    *(_QWORD *)&v51[14] = v42;
    *(_WORD *)&v51[22] = 2080;
    v52 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }

  return 0;
}

void sub_2231F8AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_2231F8B34(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  *a1 = a2;
  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)v6 = &off_24EC248D0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_OWORD *)(v6 + 32) = v7;
  a1[1] = v6;
  return a1;
}

void sub_2231F8BA0(void *a1)
{
  uint64_t v1;
  std::mutex **v2;
  char v3;

  __cxa_begin_catch(a1);
  v3 = sub_2231F9358(*v2, v1);
  sub_2245748B8(v1, v3);
  __cxa_rethrow();
}

void sub_2231F8BC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_2231F8BD8@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::runtime_error *exception;

  v2 = result;
  v4 = result[3];
  if (result[2] == v4)
  {
    v11 = result[5];
    if (v11 >= result[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    result[5] = v11 + 1;
    v5 = operator new();
    *(_QWORD *)v5 = &off_24EC24788;
    result = (_QWORD *)sub_2231F8D1C(v2, (_WORD *)(v5 + 8));
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = result[3];
    v9 = *(_QWORD *)(v6 - 8);
    v8 = (_QWORD *)(v6 - 8);
    v7 = v9;
    *v8 = 0;
    if (v9)
    {
      sub_223167354(v7 + 8);
      v10 = nullsub_30(v7);
      result = (_QWORD *)MEMORY[0x227684CE8](v10, 0x10F1C405026F4E9);
    }
    v2[3] = v8;
  }
  *a2 = v5;
  return result;
}

void sub_2231F8CE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2231F8CF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = nullsub_30(v1);
  MEMORY[0x227684CE8](v3, 0x10F1C405026F4E9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F8D1C@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_2231F8F68(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24880;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_22449B91C((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[36] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_2244845F4(result);
    return MEMORY[0x227684CE8](v12, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231F8E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231F8E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231F8E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231F8E84(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F8EC0()
{
  return 1;
}

uint64_t sub_2231F8EC8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_2231F8ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 64, 2, a1 + 72, 1);
}

uint64_t sub_2231F8EEC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2231F8F68@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  _OWORD v6[2];
  _QWORD v7[6];

  v7[5] = &off_24EC20D08;
  sub_22449897C(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC20D50;
  *(_OWORD *)(v3 + 8) = v6[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v6 + 12);
  sub_2244E32B8((__n128 *)(v3 + 40), (__n128 *)v7);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)&v7[3];
  *a2 = v3;
  return sub_2244845F4((uint64_t)v5);
}

void sub_2231F900C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_2244845F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231F903C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2244845F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F9050(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2244845F4(v2);
    MEMORY[0x227684CE8](v3, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_2231F9098(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231F90BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_2244845F4(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2231F90F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2231F9160(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC248D0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_2231F91D4(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC248D0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_2231F924C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_2231F9358(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    sub_223167354(v2 + 8);
    v5 = nullsub_30(v2);
    MEMORY[0x227684CE8](v5, 0x10F1C405026F4E9);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_2231F92E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturni"
                     "ngMakeTIS7_NS_5recon5frame16ImageInitializerILS5_1EEENSA_13ImageReleaserILS5_1EEEEENSt3__110shared_"
                     "ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE"
                     "13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18"
                                "AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_1EEENSA_13ImageReleaserILS5_"
                                "1EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_N"
                                "SG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_1EEENSA_13ImageReleaserILS5_1EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_1EEENSA_13ImageReleaserILS5_1EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_2231F9358(std::mutex *a1, uint64_t a2)
{
  uint64_t sig;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    v11 = a2;
    std::mutex::lock((std::mutex *)(sig + 56));
    v5 = *(uint64_t **)(sig + 24);
    if ((unint64_t)v5 >= *(_QWORD *)(sig + 32))
    {
      v7 = sub_2231F945C((_QWORD *)(sig + 16), &v11);
    }
    else
    {
      v6 = v11;
      v11 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *(_QWORD *)(sig + 24) = v7;
    std::mutex::unlock((std::mutex *)(sig + 56));
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      sub_223167354(v8 + 8);
      v9 = nullsub_30(v8);
      MEMORY[0x227684CE8](v9, 0x10F1C405026F4E9);
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_2231F941C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_2231F840C(&a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2231F9440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2231F840C((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231F945C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_22316E078();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_223174E94();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
      {
        sub_223167354(v27 + 8);
        v29 = nullsub_30(v27);
        MEMORY[0x227684CE8](v29, 0x10F1C405026F4E9);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

_QWORD *sub_2231F9628(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  unsigned __int8 *v5;
  int v6;
  void *v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  int v17;
  int i;
  int v19;
  _BYTE *v20;
  int v21;
  BOOL v22;
  int v23;
  char *v24;
  BOOL v25;

  v1 = *result;
  v2 = *(unsigned int *)(*result + 72);
  if ((_DWORD)v2 == 1)
  {
    v3 = *(unsigned int *)(v1 + 76);
    v4 = *(unsigned int *)(v1 + 64);
    v5 = (unsigned __int8 *)result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      v6 = *(_DWORD *)(v1 + 68);
      v7 = *(void **)(v1 + 32);
      if (*(_BYTE *)(v1 + 80))
        v8 = v7 == 0;
      else
        v8 = 1;
      if (!v8)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v7 = *(void **)(v1 + 32);
      }
      return memset(v7, *v5, (v6 * v3));
    }
    else
    {
      v21 = *(_DWORD *)(v1 + 68);
      if ((_DWORD)v4)
        v22 = v21 == 0;
      else
        v22 = 1;
      if (!v22)
      {
        v23 = v21 - 1;
        v24 = *(char **)(v1 + 32);
        if (*(_BYTE *)(v1 + 80))
          v25 = v24 == 0;
        else
          v25 = 1;
        if (!v25)
        {
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
          v24 = *(char **)(v1 + 32);
        }
        for (; v23; --v23)
        {
          memset(v24, *v5, v4);
          v24 += v3;
        }
        return memset(v24, *v5, v4);
      }
    }
  }
  else
  {
    v10 = *(_DWORD *)(v1 + 64);
    v9 = *(_DWORD *)(v1 + 68);
    if (v10)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = (_BYTE *)result[1];
      v13 = v9 - 1;
      v14 = *(unsigned int *)(v1 + 76);
      v15 = *(_BYTE **)(v1 + 32);
      if (*(_BYTE *)(v1 + 80))
        v16 = v15 == 0;
      else
        v16 = 1;
      if (!v16)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v15 = *(_BYTE **)(v1 + 32);
      }
      v17 = v10 - 1;
      if (v13)
      {
        if (v10 == 1)
        {
          do
          {
            *v15 = *v12;
            v15 += v14;
            --v13;
          }
          while (v13);
        }
        else
        {
          for (i = 0; i != v13; ++i)
          {
            v19 = v10 - 1;
            v20 = v15;
            do
            {
              *v20 = *v12;
              v20 += v2;
              --v19;
            }
            while (v19);
            *v20 = *v12;
            v15 += v14;
          }
        }
      }
      if (v10 != 1)
      {
        do
        {
          *v15 = *v12;
          v15 += v2;
          --v17;
        }
        while (v17);
      }
      *v15 = *v12;
    }
  }
  return result;
}

void sub_2231F9830(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v17 = v4;
    v18 = v5;
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0;
    v15 = v4;
    v16 = 0;
  }
  sub_2231F993C(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231F9920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231F993C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v19, v3, 1);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231F9A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F9AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231F9BA8(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231F9B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231F9BA8@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_2231F9CE0(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_2231F9CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231F9CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F9CE0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_2231F9DB4(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231F9D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_2231F9D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231F9DB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::__shared_weak_count *v10;
  uint64_t v11;

  sub_2231F9E80(a2, v9);
  sub_2231C3728(a1, (uint64_t)v9, a3);
  v9[0] = &off_24EC219D8;
  nullsub_30(&v11);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_2231F9E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231F9E80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t (**v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  v7 = &off_24EC1F958;
  sub_2231FA09C(a1, (uint64_t)&v8);
  *a2 = &off_24EC219D8;
  sub_2231F9F68((uint64_t)&v7, (uint64_t)(a2 + 1));
  nullsub_30(&v10);
  v3 = v9;
  if (!v9)
    return nullsub_30(&v7);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(&v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(&v7);
}

void sub_2231F9F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  nullsub_30(v9);
  sub_22319B358((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231F9F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231F9F68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v4;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v18 = v4;
    v19 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v18 = v4;
    v19 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 40);
  sub_2231C7084(a2, &v18, (uint64_t)&v16, v9, *(_DWORD *)(a1 + 56));
  nullsub_30(&v16);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2231FA078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  nullsub_30(&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FA09C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t (**v8)();
  _WORD v9[40];
  uint64_t v10;

  v10 = a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return sub_2231FA26C((uint64_t)&v10, a2);
  }
  else
  {
    v8 = &off_24EC24788;
    sub_2231FA400(a1, v9);
    sub_2231FA198((uint64_t)&v8, a2);
    sub_223167354((uint64_t)v9);
    return nullsub_30(&v8);
  }
}

void sub_2231FA168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354(v9);
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231FA184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FA198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 8;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = v5;
  v17 = v6;
  v18 = 0;
  v19 = 0;
  v9 = sub_22449B9CC(v4);
  sub_2244E0B74((uint64_t)&v14, 2, a1 + 64, 2, a1 + 72, 1);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_WORD *)(a1 + 80);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  v12 = v14;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 48) = 1;
  *(_WORD *)(a2 + 52) = v11;
  return nullsub_30(&v14);
}

void sub_2231FA24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FA26C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v20, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  v10 = v20;
  v18 = v20;
  if (v20)
  {
    v11 = (_QWORD *)operator new();
    v12 = v20;
    *v11 = &off_24EC20DE8;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
  }
  else
  {
    v11 = 0;
  }
  v19 = v11;
  v20 = 0;
  sub_2244E0B74((uint64_t)&v16, 2, *(_QWORD *)a1 + 32, 2, *(_QWORD *)a1 + 40, 1);
  v13 = *(_WORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  v14 = v16;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 48) = 1;
  *(_WORD *)(a2 + 52) = v13;
  nullsub_30(&v16);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231FA3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_223167354((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FA400@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  BOOL v14;
  uint64_t result;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __int16 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v8 + 32))(&v24, v8);
    v22 = v24;
    if (v24)
    {
      v16 = (std::__shared_weak_count *)operator new();
      v17 = v24;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
      v16->__shared_owners_ = 0;
      v16->__shared_weak_owners_ = 0;
      v16[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
    }
    else
    {
      v16 = 0;
    }
    v23 = v16;
    v24 = 0;
    v18 = *(_WORD *)(a1 + 48);
    sub_22449B91C((uint64_t)a2, &v22, 0);
    a2[36] = v18;
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    result = v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v13 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v14 = *(_QWORD *)(a1 + 24) == 0;
    else
      v14 = 1;
    if (!v14)
      sub_2245748E8(a1);
    return sub_2231FA5FC(v13, a2);
  }
  return result;
}

void sub_2231FA5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231FA5FC@<X0>(size_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  size_t v17[2];

  v17[0] = *(_QWORD *)(a1 + 8);
  sub_2231FA7AC(v17, &v16);
  v14 = v16;
  if (v16)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v16;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24880;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v15 = v4;
  v16 = 0;
  sub_22449B91C((uint64_t)a2, &v14, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a2[36] = v8 & 0xFF00 | v7;
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17[0] = a1;
  v17[1] = (size_t)(a2 + 12);
  sub_2231FA894(v17);
  result = v16;
  v16 = 0;
  if (result)
  {
    v13 = sub_2244845F4(result);
    return MEMORY[0x227684CE8](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231FA73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231FA750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223167354(v4);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231FA76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_223167354(v12);
  sub_223167354((uint64_t)&a9);
  sub_2231F9050(&a12);
  _Unwind_Resume(a1);
}

void sub_2231FA790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_223167354((uint64_t)&a9);
  sub_2231F9050(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FA7AC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  _OWORD v6[2];
  _QWORD v7[6];

  v7[5] = &off_24EC20D08;
  sub_22449897C(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC20D50;
  *(_OWORD *)(v3 + 8) = v6[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v6 + 12);
  sub_2244E32B8((__n128 *)(v3 + 40), (__n128 *)v7);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)&v7[3];
  *a2 = v3;
  return sub_2244845F4((uint64_t)v5);
}

void sub_2231FA850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_2244845F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231FA880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2244845F4((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t *sub_2231FA894(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  size_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 20))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)v2, v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_2231FAA58(&v24, (char **)v1, (char **)v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(size_t **)v2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 20);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
          }
        }
        else
        {
          do
          {
            *(_BYTE *)v11 = *v10;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *(_BYTE *)v11 = *v10;
        v10 += v3;
        v11 = (size_t *)((char *)v11 + v4);
      }
      *(_BYTE *)v11 = *v10;
    }
  }
  return result;
}

size_t *sub_2231FAA58(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *((unsigned int *)a3 + 5);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

_QWORD *sub_2231FABA4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  int *v5;
  int v6;
  void *v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  int v17;
  int i;
  int v19;
  _BYTE *v20;
  int v21;
  BOOL v22;
  int v23;
  char *v24;
  BOOL v25;

  v1 = *result;
  v2 = *(unsigned int *)(*result + 72);
  if ((_DWORD)v2 == 1)
  {
    v3 = *(unsigned int *)(v1 + 76);
    v4 = *(unsigned int *)(v1 + 64);
    v5 = (int *)result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      v6 = *(_DWORD *)(v1 + 68);
      v7 = *(void **)(v1 + 32);
      if (*(_BYTE *)(v1 + 80))
        v8 = v7 == 0;
      else
        v8 = 1;
      if (!v8)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v7 = *(void **)(v1 + 32);
      }
      return memset(v7, *v5, (v6 * v3));
    }
    else
    {
      v21 = *(_DWORD *)(v1 + 68);
      if ((_DWORD)v4)
        v22 = v21 == 0;
      else
        v22 = 1;
      if (!v22)
      {
        v23 = v21 - 1;
        v24 = *(char **)(v1 + 32);
        if (*(_BYTE *)(v1 + 80))
          v25 = v24 == 0;
        else
          v25 = 1;
        if (!v25)
        {
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
          v24 = *(char **)(v1 + 32);
        }
        for (; v23; --v23)
        {
          memset(v24, *v5, v4);
          v24 += v3;
        }
        return memset(v24, *v5, v4);
      }
    }
  }
  else
  {
    v10 = *(_DWORD *)(v1 + 64);
    v9 = *(_DWORD *)(v1 + 68);
    if (v10)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = (_DWORD *)result[1];
      v13 = v9 - 1;
      v14 = *(unsigned int *)(v1 + 76);
      v15 = *(_BYTE **)(v1 + 32);
      if (*(_BYTE *)(v1 + 80))
        v16 = v15 == 0;
      else
        v16 = 1;
      if (!v16)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v15 = *(_BYTE **)(v1 + 32);
      }
      v17 = v10 - 1;
      if (v13)
      {
        if (v10 == 1)
        {
          do
          {
            *v15 = *v12;
            v15 += v14;
            --v13;
          }
          while (v13);
        }
        else
        {
          for (i = 0; i != v13; ++i)
          {
            v19 = v10 - 1;
            v20 = v15;
            do
            {
              *v20 = *v12;
              v20 += v2;
              --v19;
            }
            while (v19);
            *v20 = *v12;
            v15 += v14;
          }
        }
      }
      if (v10 != 1)
      {
        do
        {
          *v15 = *v12;
          v15 += v2;
          --v17;
        }
        while (v17);
      }
      *v15 = *v12;
    }
  }
  return result;
}

uint64_t sub_2231FADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231FAEB4(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231FAE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231FAEB4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_2231FAFEC(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_2231FAFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231FAFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FAFEC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_2231FB0C0(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231FB070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_2231FB09C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231FB0C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::__shared_weak_count *v10;
  uint64_t v11;

  sub_2231FB18C(a2, v9);
  sub_2231C3728(a1, (uint64_t)v9, a3);
  v9[0] = &off_24EC219D8;
  nullsub_30(&v11);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_2231FB178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FB18C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t (**v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  v7 = &off_24EC1F958;
  sub_2231FB274(a1, (uint64_t)&v8);
  *a2 = &off_24EC219D8;
  sub_2231F9F68((uint64_t)&v7, (uint64_t)(a2 + 1));
  nullsub_30(&v10);
  v3 = v9;
  if (!v9)
    return nullsub_30(&v7);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(&v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(&v7);
}

void sub_2231FB244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  nullsub_30(v9);
  sub_22319B358((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231FB260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FB274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v4 = a1 + 8;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 32))(&v22, v5);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
  v11 = v22;
  v20 = v22;
  if (v22)
  {
    v12 = (_QWORD *)operator new();
    v13 = v22;
    *v12 = &off_24EC20DE8;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v13;
  }
  else
  {
    v12 = 0;
  }
  v21 = v12;
  v22 = 0;
  v14 = sub_22449B9CC(v4);
  sub_2244E0B74((uint64_t)&v18, 2, a1 + 64, 2, a1 + 72, 1);
  v15 = *(_WORD *)(a1 + 80);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  v16 = v18;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v16;
  *(_DWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 48) = 1;
  *(_WORD *)(a2 + 52) = v15;
  nullsub_30(&v18);
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231FB3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_223167354((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

unsigned __int16 sub_2231FB418@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  unsigned int v5;
  int v6;
  unint64_t v8;
  __n128 *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  __n128 *v27;
  __n128 *v28;
  unint64_t v29;
  __n128 v30;
  unsigned __int16 v31;
  uint64_t v33;

  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 44);
  if (v6 != *(_DWORD *)(a2 + 44) || v6 != v5)
  {
    v33 = *(unsigned int *)(a1 + 32);
    sub_2231FB68C(a1, a2, &v33, a3);
    return a3.n128_u16[0];
  }
  v8 = *(unsigned int *)(a1 + 36) * (unint64_t)v5;
  v9 = *(__n128 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48))
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v9 = *(__n128 **)(a1 + 24);
  }
  if (v8
    && !v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_32:
    abort();
  }
  v16 = *(__n128 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v16)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v17 + 88))(v17, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v16 = *(__n128 **)(a2 + 24);
  }
  if (!v8 || v16)
  {
    if (!v8)
      return a3.n128_u16[0];
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_32;
  }
  v22 = (v8 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v22 < 0xF || (unint64_t)((char *)v16 - (char *)v9) < 0x20)
  {
    v25 = (unsigned __int16 *)v16;
    v26 = (unsigned __int16 *)v9;
    do
    {
LABEL_41:
      v31 = *v26++;
      a3.n128_u16[0] = v31;
      *v25++ = v31;
    }
    while (v26 != (unsigned __int16 *)((char *)v9 + 2 * v8));
    return a3.n128_u16[0];
  }
  v23 = v22 + 1;
  v24 = (v22 + 1) & 0xFFFFFFFFFFFFFFF0;
  v25 = (unsigned __int16 *)v16 + v24;
  v26 = (unsigned __int16 *)v9 + v24;
  v27 = v9 + 1;
  v28 = v16 + 1;
  v29 = v24;
  do
  {
    a3 = v27[-1];
    v30 = *v27;
    v28[-1] = a3;
    *v28 = v30;
    v27 += 2;
    v28 += 2;
    v29 -= 16;
  }
  while (v29);
  if (v23 != v24)
    goto LABEL_41;
  return a3.n128_u16[0];
}

uint64_t sub_2231FB68C(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_17;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8)
    goto LABEL_42;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v12)
    goto LABEL_42;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_42:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_17:
    v28 = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (!v16)
      goto LABEL_33;
LABEL_18:
    v17 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v17)
      goto LABEL_29;
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    v16 = *(_QWORD *)(a2 + 8);
    v21 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v21)
      goto LABEL_29;
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!*(_BYTE *)(a2 + 49))
        goto LABEL_33;
    }
    else
    {
LABEL_29:
      if (!*(_BYTE *)(a2 + 49))
        goto LABEL_33;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 96))(&v27, v16, 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_36;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v28, v7, 0);
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
    goto LABEL_18;
LABEL_33:
  v27 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_36;
LABEL_34:
  if (*(_DWORD *)(a1 + 36))
    a4.n128_f64[0] = sub_2231FB91C(a3, a1, a2);
LABEL_36:
  v25 = v27;
  v27 = 0;
  if (v25)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v25 + 8))(v25, a4);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_2231FB8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

double sub_2231FB91C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _OWORD v29[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v25 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(unsigned int *)(a3 + 44);
    v26 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a3 + 40) << 32);
    v24 = 0;
    v27 = v3 - 1;
    v28 = v9 | (v10 << 32);
    v11 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(_QWORD *)(a2 + 24);
    }
    v17 = *(_QWORD *)(a3 + 24);
    if (*(_BYTE *)(a3 + 48) && v17)
    {
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(std::__shared_weak_count **)(a3 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v17 = *(_QWORD *)(a3 + 24);
    }
    memset(v29, 0, sizeof(v29));
    *(_QWORD *)&result = sub_2231C1A98(&v24, (uint64_t)v29, a1, v11, v17);
  }
  return result;
}

void sub_2231FBAA0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231F993C(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231FBB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FBBA8(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231FBCB0(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231FBC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231FBCB0@<X0>(float *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  char v11[8];
  void *__p;
  void *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v14[0] = sub_224504D68();
  v14[1] = v8;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_22454BFA0((uint64_t)v11, 11, *a1);
  sub_2231AA8F0(v11, (uint64_t)v14, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)v14);
  return nullsub_661(&v10);
}

void sub_2231FBDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)&a15);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231FBE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FBE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231FBF28(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231FBEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231FBF28@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_2231FC060(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_2231FC030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231FC04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FC060@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_2231FC134(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231FC0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_2231FC110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231FC134(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::__shared_weak_count *v10;
  uint64_t v11;

  sub_2231FC200(a2, v9);
  sub_2231C3728(a1, (uint64_t)v9, a3);
  v9[0] = &off_24EC219D8;
  nullsub_30(&v11);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_2231FC1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FC200@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t (**v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  v7 = &off_24EC1F958;
  sub_2231FC2E8(a1, (uint64_t)&v8);
  *a2 = &off_24EC219D8;
  sub_2231F9F68((uint64_t)&v7, (uint64_t)(a2 + 1));
  nullsub_30(&v10);
  v3 = v9;
  if (!v9)
    return nullsub_30(&v7);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(&v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(&v7);
}

void sub_2231FC2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  nullsub_30(v9);
  sub_22319B358((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231FC2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FC2E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t (**v8)();
  _WORD v9[40];
  uint64_t v10;

  v10 = a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return sub_2231FC4B8((uint64_t)&v10, a2);
  }
  else
  {
    v8 = &off_24EC1FE80;
    sub_2231FC64C(a1, v9);
    sub_2231FC3E4((uint64_t)&v8, a2);
    sub_223167354((uint64_t)v9);
    return nullsub_30(&v8);
  }
}

void sub_2231FC3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354(v9);
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2231FC3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FC3E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 8;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = v5;
  v17 = v6;
  v18 = 0;
  v19 = 0;
  v9 = sub_22449BC64(v4);
  sub_2244E0B74((uint64_t)&v14, 2, a1 + 64, 2, a1 + 72, 2);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_WORD *)(a1 + 80);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  v12 = v14;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 48) = 3;
  *(_WORD *)(a2 + 52) = v11;
  return nullsub_30(&v14);
}

void sub_2231FC498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FC4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v20, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  v10 = v20;
  v18 = v20;
  if (v20)
  {
    v11 = (_QWORD *)operator new();
    v12 = v20;
    *v11 = &off_24EC20DE8;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
  }
  else
  {
    v11 = 0;
  }
  v19 = v11;
  v20 = 0;
  sub_2244E0B74((uint64_t)&v16, 2, *(_QWORD *)a1 + 32, 2, *(_QWORD *)a1 + 40, 2);
  v13 = *(_WORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  v14 = v16;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 48) = 3;
  *(_WORD *)(a2 + 52) = v13;
  nullsub_30(&v16);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231FC618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_223167354((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FC64C@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __int16 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v8 + 32))(&v24, v8);
    v22 = v24;
    if (v24)
    {
      v16 = (std::__shared_weak_count *)operator new();
      v17 = v24;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
      v16->__shared_owners_ = 0;
      v16->__shared_weak_owners_ = 0;
      v16[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
    }
    else
    {
      v16 = 0;
    }
    v23 = v16;
    v24 = 0;
    v18 = *(_WORD *)(a1 + 48);
    sub_22449BBB4((uint64_t)a2, &v22, 0);
    a2[36] = v18;
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    result = v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v13 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v14 = *(_QWORD *)(a1 + 24) == 0;
    else
      v14 = 1;
    if (!v14)
      sub_2245748E8(a1);
    return sub_2231FC848(v13, a2);
  }
  return result;
}

void sub_2231FC814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231FC848@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17[2];

  v17[0] = *(_QWORD *)(a1 + 8);
  sub_2231FC9F8(v17, &v16);
  v14 = v16;
  if (v16)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v16;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20058;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v15 = v4;
  v16 = 0;
  sub_22449BBB4((uint64_t)a2, &v14, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a2[36] = v8 & 0xFF00 | v7;
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17[0] = a1;
  v17[1] = (uint64_t)(a2 + 12);
  sub_2231FCAE0(v17);
  result = v16;
  v16 = 0;
  if (result)
  {
    v13 = sub_224485244(result);
    return MEMORY[0x227684CE8](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231FC988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231FC99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223167354(v4);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231FC9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_223167354(v12);
  sub_223167354((uint64_t)&a9);
  sub_2231A30A4(&a12);
  _Unwind_Resume(a1);
}

void sub_2231FC9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_223167354((uint64_t)&a9);
  sub_2231A30A4(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FC9F8@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  _OWORD v6[2];
  _QWORD v7[6];

  v7[5] = &off_24EC1FF78;
  sub_224498D18(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC1FFC0;
  *(_OWORD *)(v3 + 8) = v6[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v6 + 12);
  sub_2244E32B8((__n128 *)(v3 + 40), (__n128 *)v7);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)&v7[3];
  *a2 = v3;
  return sub_224485244((uint64_t)v5);
}

void sub_2231FCA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231FCACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

__int16 sub_2231FCAE0@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  _WORD *v29;
  unint64_t v30;
  __int16 *v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v2 + 16);
  v5 = *(unsigned int *)(v3 + 16);
  if ((_DWORD)v4 == 1 && (_DWORD)v5 == 1)
  {
    v24 = *(_DWORD *)(v2 + 20);
    if (v24 != *(_DWORD *)(v3 + 20) || v24 != *(_DWORD *)(v2 + 8))
    {
      LOWORD(v28) = sub_2231FCD08((uint64_t *)v2, (uint64_t *)v3);
      return v28;
    }
    v25 = (*(_DWORD *)(v2 + 12) * v24);
    v26 = *(_QWORD *)v2;
    if ((_DWORD)v25)
      v27 = v26 == 0;
    else
      v27 = 0;
    if (v27)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    else if (!(_DWORD)v25)
    {
      return v28;
    }
    v29 = *(_WORD **)v3;
    v30 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v30 < 0xF)
    {
      v31 = (__int16 *)v26;
    }
    else
    {
      v31 = (__int16 *)v26;
      if ((unint64_t)v29 - v26 >= 0x20)
      {
        v32 = v30 + 1;
        v33 = v32 & 0xFFFFFFFFFFFFFFF0;
        v34 = &v29[v33];
        v31 = (__int16 *)(v26 + v33 * 2);
        v35 = (__int128 *)(v26 + 16);
        v36 = v29 + 8;
        v37 = v32 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v28 = *(v35 - 1);
          v38 = *v35;
          *(v36 - 1) = v28;
          *v36 = v38;
          v35 += 2;
          v36 += 2;
          v37 -= 16;
        }
        while (v37);
        v29 = v34;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF0))
          return v28;
      }
    }
    do
    {
      v39 = *v31++;
      LOWORD(v28) = v39;
      *v29++ = v39;
    }
    while (v31 != (__int16 *)(v26 + 2 * v25));
    return v28;
  }
  v7 = *(_DWORD *)(v2 + 8);
  v8 = *(_DWORD *)(v2 + 12);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = v7 - 1;
    v11 = *(_WORD **)v2;
    v12 = *(_WORD **)v3;
    v13 = 2 * v4;
    v14 = 2 * v5;
    v15 = v8 - 1;
    if (v15)
    {
      v16 = *(unsigned int *)(v3 + 20);
      v17 = *(unsigned int *)(v2 + 20);
      if (v10)
      {
        v18 = 0;
        v19 = 2 * v17;
        v20 = 2 * v16;
        do
        {
          v21 = v12;
          v22 = v11;
          v23 = v10;
          do
          {
            *v21 = *v22;
            v22 = (_WORD *)((char *)v22 + v13);
            v21 = (_WORD *)((char *)v21 + v14);
            --v23;
          }
          while (v23);
          *v21 = *v22;
          v11 = (_WORD *)((char *)v11 + v19);
          v12 = (_WORD *)((char *)v12 + v20);
          ++v18;
        }
        while (v18 != v15);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v11 += v17;
          v12 += v16;
          --v15;
        }
        while (v15);
      }
    }
    for (; v10; --v10)
    {
      *v12 = *v11;
      v11 = (_WORD *)((char *)v11 + v13);
      v12 = (_WORD *)((char *)v12 + v14);
    }
    LOWORD(v28) = *v11;
    *v12 = *v11;
  }
  return v28;
}

__int16 sub_2231FCD08@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _WORD *v21;
  __int16 *v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _WORD *v33;
  __int16 *v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int16 v39;
  unint64_t v41;
  uint64_t v42;

  v3 = *((unsigned int *)a1 + 2);
  v2 = *((_DWORD *)a1 + 3);
  if ((_DWORD)v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *a1;
    v6 = *a2;
    v7 = v2 - 1;
    v42 = *((unsigned int *)a1 + 2);
    if (v2 != 1)
    {
      v8 = 2 * *((unsigned int *)a2 + 5);
      v9 = 2 * *((unsigned int *)a1 + 5);
      v10 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v10 >= 0xF)
      {
        v29 = 0;
        v41 = v10 + 1;
        v30 = (v10 + 1) & 0xFFFFFFFFFFFFFFF0;
        v31 = 2 * v30;
        v14 = *a2;
        v13 = *a1;
        while (1)
        {
          if (!v13)
          {
            v32 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v3 = v42;
            if (v32)
              break;
          }
          v33 = (_WORD *)v14;
          v34 = (__int16 *)v13;
          if ((unint64_t)(v6 + v8 * v29 - (v5 + v9 * v29)) < 0x20)
            goto LABEL_40;
          v35 = 0;
          v33 = (_WORD *)(v14 + v31);
          v34 = (__int16 *)(v13 + v31);
          v36 = v30;
          do
          {
            v37 = (_OWORD *)(v14 + v35);
            v38 = *(_OWORD *)(v13 + v35 + 16);
            *v37 = *(_OWORD *)(v13 + v35);
            v37[1] = v38;
            v35 += 32;
            v36 -= 16;
          }
          while (v36);
          if (v41 != v30)
          {
LABEL_40:
            do
            {
              v39 = *v34++;
              *v33++ = v39;
            }
            while (v34 != (__int16 *)(v13 + 2 * v3));
          }
          v13 += v9;
          v14 += v8;
          if ((_DWORD)++v29 == v7)
            goto LABEL_15;
        }
      }
      else
      {
        v11 = 0;
        v12 = 2 * v3;
        v13 = *a1;
        v14 = *a2;
        while (1)
        {
          if (!v13)
          {
            v15 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v3 = v42;
            if (v15)
              break;
          }
          v16 = 0;
          do
          {
            *(_WORD *)(v14 + v16) = *(_WORD *)(v13 + v16);
            v16 += 2;
          }
          while (v12 != v16);
          v13 += v9;
          v14 += v8;
          if (++v11 == v7)
            goto LABEL_15;
        }
      }
      goto LABEL_36;
    }
    v14 = *a2;
    v13 = *a1;
LABEL_15:
    if (!v13)
    {
      v17 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v3 = v42;
      if (v17)
LABEL_36:
        abort();
    }
    v18 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v18 < 0xF || (unint64_t)(v14 - v13) < 0x20)
    {
      v21 = (_WORD *)v14;
      v22 = (__int16 *)v13;
    }
    else
    {
      v19 = v18 + 1;
      v20 = (v18 + 1) & 0xFFFFFFFFFFFFFFF0;
      v21 = (_WORD *)(v14 + 2 * v20);
      v22 = (__int16 *)(v13 + 2 * v20);
      v23 = (__int128 *)(v13 + 16);
      v24 = (_OWORD *)(v14 + 16);
      v25 = v20;
      do
      {
        v26 = *(v23 - 1);
        v27 = *v23;
        *(v24 - 1) = v26;
        *v24 = v27;
        v23 += 2;
        v24 += 2;
        v25 -= 16;
      }
      while (v25);
      if (v19 == v20)
        return v26;
    }
    do
    {
      v28 = *v22++;
      LOWORD(v26) = v28;
      *v21++ = v28;
    }
    while (v22 != (__int16 *)(v13 + 2 * v3));
  }
  return v26;
}

BOOL sub_2231FCFB8(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v21;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_224527470(&v21, a3);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_22452C43C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2231FD108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2231FD11C(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v21;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_224527780(&v21, a3);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_22452C43C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2231FD26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int16 sub_2231FD280@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  int v5;
  unsigned int v6;
  unint64_t v8;
  __n128 *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  __n128 *v27;
  __n128 *v28;
  unint64_t v29;
  __n128 v30;
  unsigned __int16 v31;
  uint64_t v33;

  v5 = *(_DWORD *)(a1 + 52);
  v6 = 4 * *(_DWORD *)(a1 + 56);
  if (v5 != *(_DWORD *)(a2 + 52) || v5 != v6)
  {
    v33 = (4 * *(_DWORD *)(a1 + 56));
    sub_2231FD4F4(a1, a2, &v33, a3);
    return a3.n128_u16[0];
  }
  v8 = *(unsigned int *)(a1 + 60) * (unint64_t)v6;
  v9 = *(__n128 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72))
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v9 = *(__n128 **)(a1 + 24);
  }
  if (v8
    && !v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_32:
    abort();
  }
  v16 = *(__n128 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v16)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v17 + 88))(v17, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v16 = *(__n128 **)(a2 + 24);
  }
  if (!v8 || v16)
  {
    if (!v8)
      return a3.n128_u16[0];
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_32;
  }
  v22 = (v8 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v22 < 0xF || (unint64_t)((char *)v16 - (char *)v9) < 0x20)
  {
    v25 = (unsigned __int16 *)v16;
    v26 = (unsigned __int16 *)v9;
    do
    {
LABEL_41:
      v31 = *v26++;
      a3.n128_u16[0] = v31;
      *v25++ = v31;
    }
    while (v26 != (unsigned __int16 *)((char *)v9 + 2 * v8));
    return a3.n128_u16[0];
  }
  v23 = v22 + 1;
  v24 = (v22 + 1) & 0xFFFFFFFFFFFFFFF0;
  v25 = (unsigned __int16 *)v16 + v24;
  v26 = (unsigned __int16 *)v9 + v24;
  v27 = v9 + 1;
  v28 = v16 + 1;
  v29 = v24;
  do
  {
    a3 = v27[-1];
    v30 = *v27;
    v28[-1] = a3;
    *v28 = v30;
    v27 += 2;
    v28 += 2;
    v29 -= 16;
  }
  while (v29);
  if (v23 != v24)
    goto LABEL_41;
  return a3.n128_u16[0];
}

uint64_t sub_2231FD4F4(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_17;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8)
    goto LABEL_43;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v12)
    goto LABEL_43;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_43:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_14;
LABEL_17:
    v28 = 0;
    v16 = *(_QWORD *)(a2 + 8);
    if (!v16)
      goto LABEL_33;
LABEL_18:
    v17 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v17)
      goto LABEL_29;
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    v16 = *(_QWORD *)(a2 + 8);
    v21 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v21)
      goto LABEL_29;
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_33;
    }
    else
    {
LABEL_29:
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_33;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 96))(&v27, v16, 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_37;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v28, v7, 0);
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
    goto LABEL_18;
LABEL_33:
  v27 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_37;
LABEL_34:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    a4.n128_f64[0] = sub_2231FD78C(a3, a1, a2);
LABEL_37:
  v25 = v27;
  v27 = 0;
  if (v25)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v25 + 8))(v25, a4);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_2231FD728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

double sub_2231FD78C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  double result;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  _QWORD v33[6];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v27 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 48);
    v12 = *(unsigned int *)(a3 + 48);
    v28 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
    v26 = 0;
    v29 = v3 - 1;
    v30 = v11 | (v12 << 32);
    v31 = v5 - 1;
    v32 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 52) << 32);
    v13 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v13)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v14 + 88))(v14, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v13 = *(_QWORD *)(a2 + 24);
    }
    v19 = *(_QWORD *)(a3 + 24);
    if (*(_BYTE *)(a3 + 72) && v19)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v21 = *(std::__shared_weak_count **)(a3 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 - 1, v22));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v20 + 88))(v20, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v19 = *(_QWORD *)(a3 + 24);
    }
    v33[2] = 0;
    v33[3] = 0;
    v33[0] = 0;
    v33[1] = 1;
    v33[4] = 1;
    v33[5] = 0;
    *(_QWORD *)&result = sub_2231FD938((unsigned int *)&v26, (uint64_t)v33, a1, v13, v19);
  }
  return result;
}

__int16 sub_2231FD938@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _WORD *v22;
  __int16 *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  __int16 *v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int16 v40;

  v5 = a5;
  v6 = a4;
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[3] | (unint64_t)(v9 << 32);
  v12 = a1[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = a5;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  if (a1[8])
  {
    for (i = 0; i < a1[8]; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v15 = *a3;
      v16 = v5;
      v17 = *a3;
      if (!v6)
      {
        v16 = v5;
        v17 = *a3;
        if (v15)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_38;
          }
          v17 = *a3;
          v16 = *(_QWORD *)(a2 + 24);
        }
      }
      if (!v16
        && v17
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_38;
      }
      if (v15)
      {
        v19 = (v15 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v19 < 0xF || (unint64_t)(v16 - v6) < 0x20)
        {
          v22 = (_WORD *)v16;
          v23 = (__int16 *)v6;
        }
        else
        {
          v20 = v19 + 1;
          v21 = (v19 + 1) & 0xFFFFFFFFFFFFFFF0;
          v22 = (_WORD *)(v16 + 2 * v21);
          v23 = (__int16 *)(v6 + 2 * v21);
          v24 = (__int128 *)(v6 + 16);
          v25 = (_OWORD *)(v16 + 16);
          v26 = v21;
          do
          {
            v18 = *(v24 - 1);
            v27 = *v24;
            *(v25 - 1) = v18;
            *v25 = v27;
            v24 += 2;
            v25 += 2;
            v26 -= 16;
          }
          while (v26);
          if (v20 == v21)
            goto LABEL_3;
        }
        do
        {
          v28 = *v23++;
          LOWORD(v18) = v28;
          *v22++ = v28;
        }
        while (v23 != (__int16 *)(v6 + 2 * v15));
      }
LABEL_3:
      v6 += 2 * a1[9];
      v5 += 2 * a1[10];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v29 = *a3;
  v30 = *a3;
  if (!v6 && v29)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_38;
    }
    v30 = *a3;
    v5 = *(_QWORD *)(a2 + 24);
  }
  if (!v5
    && v30
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_38:
    abort();
  }
  if (!v29)
    return v18;
  v31 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v31 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v34 = (_WORD *)v5;
    v35 = (__int16 *)v6;
    do
    {
LABEL_36:
      v40 = *v35++;
      LOWORD(v18) = v40;
      *v34++ = v40;
    }
    while (v35 != (__int16 *)(v6 + 2 * v29));
    return v18;
  }
  v32 = v31 + 1;
  v33 = (v31 + 1) & 0xFFFFFFFFFFFFFFF0;
  v34 = (_WORD *)(v5 + 2 * v33);
  v35 = (__int16 *)(v6 + 2 * v33);
  v36 = (__int128 *)(v6 + 16);
  v37 = (_OWORD *)(v5 + 16);
  v38 = v33;
  do
  {
    v18 = *(v36 - 1);
    v39 = *v36;
    *(v37 - 1) = v18;
    *v37 = v39;
    v36 += 2;
    v37 += 2;
    v38 -= 16;
  }
  while (v38);
  if (v32 != v33)
    goto LABEL_36;
  return v18;
}

BOOL sub_2231FDC04(_BOOL8 result, float32x4_t **a2, float16x4_t **a3, float32x4_t *a4, float16x4_t *a5, float32x4_t *a6)
{
  float16x4_t *v7;
  float32x4_t *v8;
  _DWORD *v11;
  unsigned int i;
  float16x4_t v13;
  float16x4_t v14;

  v7 = a5;
  v8 = a4;
  *a2 = a4;
  a2[2] = (float32x4_t *)a5;
  if (*(_DWORD *)(result + 12))
  {
    v11 = (_DWORD *)result;
    for (i = 0; i < v11[3]; ++i)
    {
      *a2 = v8;
      a2[2] = (float32x4_t *)v7;
      a2[4] = a6;
      if (a6->i8[0])
      {
        v13 = **a3;
        if (v7)
          goto LABEL_3;
      }
      else
      {
        v13 = vcvt_f16_f32(*v8);
        if (v7)
          goto LABEL_3;
      }
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_9;
LABEL_3:
      *v7 = v13;
      v8 = (float32x4_t *)((char *)v8 + 4 * v11[4]);
      v7 = (float16x4_t *)((char *)v7 + 2 * v11[5]);
      a6 = (float32x4_t *)((char *)a6 + v11[6]);
    }
  }
  *a2 = v8;
  a2[2] = (float32x4_t *)v7;
  a2[4] = a6;
  if (a6->i8[0])
  {
    v14 = **a3;
    if (v7)
      goto LABEL_15;
  }
  else
  {
    v14 = vcvt_f16_f32(*v8);
    if (v7)
      goto LABEL_15;
  }
  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
  if (result)
LABEL_9:
    abort();
LABEL_15:
  *v7 = v14;
  return result;
}

uint64_t sub_2231FDD74(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_2231FDE80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231FDE98(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_2231FDFA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

void sub_2231FDFBC(NSObject *a1@<X0>, const void **a2@<X8>)
{
  unsigned __int8 v3;
  char *v4;
  uint64_t v5;
  _UNKNOWN **v6;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  char **v10;
  unsigned int v11;
  _BOOL4 v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t **v22;
  _UNKNOWN **v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  void **v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 v37;
  _DWORD *v38;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  std::__shared_weak_count *v55;
  void **v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *__p[2];
  char v64;
  void **v65;
  unsigned int v66;
  void *v67[2];
  char v68;
  char *v69;
  std::__shared_weak_count *v70;
  _QWORD v71[3];
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  char v84;
  void *v85[2];
  unint64_t v86;
  char v87;
  char v88;
  _QWORD v89[2];

  v79 = a1;
  v3 = atomic_load((unsigned __int8 *)&qword_25578A330);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578A330))
  {
    qword_25578A328 = 0;
    off_25578A320 = 0;
    off_25578A318 = &off_25578A320;
    __cxa_atexit((void (*)(void *))sub_2231FEBB4, &off_25578A318, &dword_22314D000);
    __cxa_guard_release(&qword_25578A330);
  }
  v4 = (char *)off_25578A320;
  v5 = (uint64_t)v79;
  if (off_25578A320)
  {
    v6 = &off_25578A320;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v9 = v7 == (_DWORD)v79;
      v8 = v7 < v79;
      if (v9)
        v8 = *((_DWORD *)v4 + 9) < HIDWORD(v79);
      v9 = !v8;
      if (v8)
        v10 = (char **)(v4 + 8);
      else
        v10 = (char **)v4;
      if (v9)
        v6 = (_UNKNOWN **)v4;
      v4 = *v10;
    }
    while (*v10);
    if (v6 != &off_25578A320)
    {
      v11 = *((_DWORD *)v6 + 8);
      v9 = (_DWORD)v79 == v11;
      v12 = v79 < v11;
      if (v9)
        v12 = HIDWORD(v79) < *((_DWORD *)v6 + 9);
      if (!v12)
      {
        v38 = v6[5];
        if ((_DWORD)v79 != v38[34] || HIDWORD(v79) != v38[35])
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 260, (uint64_t)"it->second->ImageSize() == size", 31, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v38 = v6[5];
        }
        *a2 = v38;
        v40 = (unint64_t *)v6[6];
        a2[1] = v40;
        if (v40)
        {
          v41 = v40 + 1;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        return;
      }
    }
  }
  v13 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24920;
  v14 = v13 + 1;
  sub_2231FEC28((uint64_t)&v13[1], v5);
  *a2 = &v13[1];
  a2[1] = v13;
  sub_2231F5754(&v78);
  if (**(int **)(v78 + 56) <= 3)
  {
    v15 = *(unsigned __int8 *)(v78 + 72);
    v16 = sub_22455F97C(&v78);
    v17 = v16;
    if (v15 || v16)
    {
      v71[0] = &v78;
      v71[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v71[2] = std::chrono::system_clock::now().__d_.__rep_;
      v72 = 3;
      v73 = "unknown file";
      v74 = 256;
      v76 = 0;
      v77 = 0;
      v75 = "unknown function";
      v70 = v13 + 1;
      v66 = 4;
      LODWORD(v83) = 0;
      sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, &v66);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      __p[0] = v89;
      ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
      v32 = (char *)v67;
      if (v68 < 0)
        v32 = (char *)v67[0];
      v69 = v32;
      LODWORD(v83) = 0;
      sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      v89[0] = &v88;
      ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
      v33 = __p;
      if (v64 < 0)
        v33 = (void **)__p[0];
      v65 = v33;
      v34 = *(_QWORD *)v71[0];
      v35 = (const char *)(*(_QWORD *)v71[0] + 16);
      v61 = (uint64_t *)v35;
      if (*(char *)(*(_QWORD *)v71[0] + 39) < 0)
      {
        v35 = *(const char **)(v34 + 16);
        v36 = *(_QWORD *)(v34 + 24);
        v62 = v17;
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) != 0)
          goto LABEL_68;
      }
      else
      {
        v36 = *(unsigned __int8 *)(*(_QWORD *)v71[0] + 39);
        v62 = v17;
        v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v37 & 1) != 0)
          goto LABEL_68;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v80);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v80, &xmmword_255788F40);
        if ((_BYTE)v83 && SHIBYTE(v82) < 0)
          operator delete(v80);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_68:
      if (byte_255788F57 >= 0)
        v44 = (const char *)&xmmword_255788F40;
      else
        v44 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v45 = byte_255788F57;
      else
        v45 = *((_QWORD *)&xmmword_255788F40 + 1);
      v80 = os_log_create(v44, v35);
      v46 = (void **)&v81;
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v45 >= 0x17)
      {
        v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v47 = v45 | 7;
        v48 = v47 + 1;
        v46 = (void **)operator new(v47 + 1);
        v82 = (std::__shared_weak_count *)v45;
        v83 = v48 | 0x8000000000000000;
        v81 = (std::__shared_weak_count *)v46;
      }
      else
      {
        HIBYTE(v83) = v45;
        if (!v45)
        {
LABEL_82:
          *((_BYTE *)v46 + v45) = 0;
          v84 = 1;
          v49 = v85;
          if (v36 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v36 >= 0x17)
          {
            v51 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v51 = v36 | 7;
            v52 = v51 + 1;
            v49 = (void **)operator new(v51 + 1);
            v85[1] = (void *)v36;
            v86 = v52 | 0x8000000000000000;
            v85[0] = v49;
            v50 = v62;
          }
          else
          {
            HIBYTE(v86) = v36;
            v50 = v62;
            if (!v36)
              goto LABEL_90;
          }
          memmove(v49, v35, v36);
LABEL_90:
          *((_BYTE *)v49 + v36) = 0;
          v87 = 1;
          v53 = objc_retainAutorelease(v80);
          if (v87 && SHIBYTE(v86) < 0)
            operator delete(v85[0]);
          if (v84 && SHIBYTE(v83) < 0)
            operator delete(v81);

          v54 = sub_22455F7B4(3u);
          sub_2231FEE60((uint64_t)&v80, v50, v61, v53, v54, v15 != 0, (uint64_t *)&v70, &v69, (const char **)&v65);

          if (v64 < 0)
          {
            operator delete(__p[0]);
            if ((v68 & 0x80000000) == 0)
            {
LABEL_98:
              if (!v15)
                goto LABEL_118;
LABEL_102:
              v55 = (std::__shared_weak_count *)*a2;
              LODWORD(v70) = 4;
              LODWORD(v83) = 0;
              sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, (unsigned int *)&v70);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              __p[0] = v89;
              ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
              if (v68 >= 0)
                v56 = v67;
              else
                v56 = (void **)v67[0];
              LODWORD(v83) = 0;
              sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              v89[0] = &v69;
              ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
              v57 = __p;
              if (v64 < 0)
                v57 = (void **)__p[0];
              sub_22322C138((uint64_t)v71, "New image pool %p with format %s and size %s", v55, (const char *)v56, (const char *)v57);
              if (v64 < 0)
                operator delete(__p[0]);
              if (v68 < 0)
                operator delete(v67[0]);
              sub_223182C08((uint64_t)v71);
LABEL_118:
              sub_223182C08((uint64_t)v71);
              v58 = v77;
              if (v77)
              {
                p_shared_owners = (unint64_t *)&v77->__shared_owners_;
                do
                  v60 = __ldaxr(p_shared_owners);
                while (__stlxr(v60 - 1, p_shared_owners));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v14 = (std::__shared_weak_count *)*a2;
              v13 = (std::__shared_weak_count *)a2[1];
              v18 = v79;
              v80 = v79;
              v81 = v14;
              v82 = v13;
              if (!v13)
                goto LABEL_23;
              goto LABEL_21;
            }
          }
          else if ((v68 & 0x80000000) == 0)
          {
            goto LABEL_98;
          }
          operator delete(v67[0]);
          if (!v15)
            goto LABEL_118;
          goto LABEL_102;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_82;
    }
  }
  v18 = v79;
  v80 = v79;
  v81 = v13 + 1;
  v82 = v13;
LABEL_21:
  v19 = (unint64_t *)&v13->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_23:
  v21 = off_25578A320;
  if (off_25578A320)
  {
    while (1)
    {
      while (1)
      {
        v23 = (_UNKNOWN **)v21;
        v24 = *((_DWORD *)v21 + 8);
        v25 = *((_DWORD *)v23 + 9);
        v26 = HIDWORD(v18) < v25;
        if ((_DWORD)v18 != v24)
          v26 = v18 < v24;
        if (!v26)
          break;
        v21 = *v23;
        v22 = (uint64_t **)v23;
        if (!*v23)
          goto LABEL_36;
      }
      v27 = v25 < HIDWORD(v18);
      v28 = (_DWORD)v18 == v24 ? v27 : v24 < v18;
      if (v28 != 1)
        break;
      v21 = v23[1];
      if (!v21)
      {
        v22 = (uint64_t **)(v23 + 1);
        goto LABEL_36;
      }
    }
  }
  else
  {
    v22 = (uint64_t **)&off_25578A320;
    v23 = &off_25578A320;
LABEL_36:
    v29 = (uint64_t *)operator new(0x38uLL);
    v29[4] = (uint64_t)v18;
    v29[5] = (uint64_t)v14;
    v29[6] = (uint64_t)v13;
    v81 = 0;
    v82 = 0;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t)v23;
    *v22 = v29;
    if (*(_QWORD *)off_25578A318)
    {
      off_25578A318 = *(_UNKNOWN **)off_25578A318;
      v29 = *v22;
    }
    sub_2231A9A8C((uint64_t *)off_25578A320, v29);
    ++qword_25578A328;
    v13 = v82;
  }
  if (v13)
  {
    v30 = (unint64_t *)&v13->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2231FE8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (*(_BYTE *)(v31 - 152) && *(char *)(v31 - 153) < 0)
    operator delete(*(void **)(v31 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a19 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  sub_223182DAC((uint64_t)&a30);
  sub_223167354(v30);
  _Unwind_Resume(a1);
}

void sub_2231FE9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231FE9B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223197300(v2 - 176);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231FE9D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231FE9E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2231FEA00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20[2];
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  v20[1] = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_2231FF4C8((_QWORD *)a1, v20);
  std::mutex::unlock((std::mutex *)(a1 + 56));
  v8 = v20[0];
  *((_QWORD *)&v19 + 1) = v4;
  v20[0] = 0;
  *(_QWORD *)&v19 = v5;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_2231FF424(a2, v8, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20[0];
  v20[0] = 0;
  if (v14)
  {
    sub_223167354(v14 + 8);
    v15 = nullsub_30(v14);
    MEMORY[0x227684CE8](v15, 0x10E1C40F356210ALL);
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_2231FEB60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_223167354((uint64_t)va);
  sub_2231FED24((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2231FEB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2231FEBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FEBB4(uint64_t a1)
{
  sub_2231F823C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_2231FEBDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231FEBEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231FEC1C(uint64_t a1)
{
  return sub_2231FED74(a1 + 24);
}

uint64_t sub_2231FEC28(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = xmmword_2245C43A0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC24970;
  v4[3] = 850045863;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = a1;
  v4[12] = a2;
  *(_QWORD *)(a1 + 120) = v4 + 3;
  *(_QWORD *)(a1 + 128) = v4;
  *(_QWORD *)(a1 + 136) = a2;
  return a1;
}

void sub_2231FECB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_224574928(v1, v3);
  _Unwind_Resume(a1);
}

void sub_2231FECD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231FECE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2231FED18(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_2231FED24(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_223167354(v2 + 8);
    v3 = nullsub_30(v2);
    MEMORY[0x227684CE8](v3, 0x10E1C40F356210ALL);
  }
  return a1;
}

uint64_t sub_2231FED74(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(std::mutex **)(a1 + 120);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 120));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v6 = *(_QWORD **)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(void **)(a1 + 16);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          sub_223167354(v9 + 8);
          v11 = nullsub_30(v9);
          MEMORY[0x227684CE8](v11, 0x10E1C40F356210ALL);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_2231FEE60(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, uint64_t *a7, char **a8, const char **a9)
{
  NSObject *v14;
  NSObject *v15;
  size_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  const char *v43;
  void *v44;
  NSObject *v46;
  std::__shared_weak_count_vtbl *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  _BYTE v51[24];
  const char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = v14;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v16 = _os_log_pack_size();
    v46 = v15;
    v17 = (std::__shared_weak_count_vtbl *)operator new(v16, (std::align_val_t)8uLL);
    v18 = (std::__shared_weak_count *)operator new();
    v18->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v17;
    sub_2231F6148((uint64_t)v51, *a8, a9);
    v20 = (char *)operator new(0x50uLL);
    *((_QWORD *)v20 + 1) = 0;
    v21 = (unint64_t *)(v20 + 8);
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_24EC245F8;
    *((_QWORD *)v20 + 3) = off_24EC24648;
    *((_OWORD *)v20 + 2) = *(_OWORD *)&v51[8];
    *((_QWORD *)v20 + 6) = v52;
    *(_OWORD *)&v51[8] = 0uLL;
    *(_OWORD *)(v20 + 56) = v53;
    *((_QWORD *)v20 + 9) = v54;
    v52 = 0;
    v53 = 0uLL;
    v54 = 0;
    nullsub_30(v51);
    v47 = v17;
    *(_QWORD *)&v48 = v17;
    *((_QWORD *)&v48 + 1) = v18;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *(_QWORD *)&v49 = v20 + 24;
    *((_QWORD *)&v49 + 1) = v20;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v50 = v20 + 24;
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      (*(void (**)(char *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v27 = *a7;
    if (v20[55] >= 0)
      v28 = v20 + 32;
    else
      v28 = (char *)*((_QWORD *)v20 + 4);
    if (v50[55] >= 0)
      v29 = v50 + 32;
    else
      v29 = (char *)*((_QWORD *)v50 + 4);
    v30 = _os_log_pack_fill();
    *(_DWORD *)v30 = 134218498;
    *(_QWORD *)(v30 + 4) = v27;
    *(_WORD *)(v30 + 12) = 2080;
    *(_QWORD *)(v30 + 14) = v28;
    *(_WORD *)(v30 + 22) = 2080;
    *(_QWORD *)(v30 + 24) = v29;
    v31 = operator new();
    v32 = *((unsigned __int8 *)a3 + 23);
    if ((v32 & 0x80u) == 0)
      v33 = a3;
    else
      v33 = (uint64_t *)*a3;
    if ((v32 & 0x80u) != 0)
      v32 = a3[1];
    *(_QWORD *)v31 = v47;
    *(_OWORD *)(v31 + 8) = v48;
    *(_OWORD *)(v31 + 24) = v49;
    *(_QWORD *)(v31 + 40) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    *(_BYTE *)(v31 + 56) = a5;
    *(_QWORD *)v51 = v31;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v51);
    v34 = *(_QWORD *)v51;
    *(_QWORD *)v51 = 0;
    v15 = v46;
    if (v34)
    {
      v35 = *(std::__shared_weak_count **)(v34 + 32);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)(v34 + 16);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      MEMORY[0x227684CE8](v34, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v14, a5);
    v41 = *a7;
    v42 = *a8;
    v43 = *a9;
    *(_DWORD *)v51 = 134218498;
    *(_QWORD *)&v51[4] = v41;
    *(_WORD *)&v51[12] = 2080;
    *(_QWORD *)&v51[14] = v42;
    *(_WORD *)&v51[22] = 2080;
    v52 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }

  return 0;
}

void sub_2231FF3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_2231FF424(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  *a1 = a2;
  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)v6 = &off_24EC249C0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_OWORD *)(v6 + 32) = v7;
  a1[1] = v6;
  return a1;
}

void sub_2231FF490(void *a1)
{
  uint64_t v1;
  std::mutex **v2;
  char v3;

  __cxa_begin_catch(a1);
  v3 = sub_2231FFA54(*v2, v1);
  sub_224574980(v1, v3);
  __cxa_rethrow();
}

void sub_2231FF4B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_2231FF4C8@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::runtime_error *exception;

  v2 = result;
  v4 = result[3];
  if (result[2] == v4)
  {
    v11 = result[5];
    if (v11 >= result[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    result[5] = v11 + 1;
    v5 = operator new();
    *(_QWORD *)v5 = &off_24EC216B8;
    result = (_QWORD *)sub_2231FF60C(v2, (_WORD *)(v5 + 8));
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = result[3];
    v9 = *(_QWORD *)(v6 - 8);
    v8 = (_QWORD *)(v6 - 8);
    v7 = v9;
    *v8 = 0;
    if (v9)
    {
      sub_223167354(v7 + 8);
      v10 = nullsub_30(v7);
      result = (_QWORD *)MEMORY[0x227684CE8](v10, 0x10E1C40F356210ALL);
    }
    v2[3] = v8;
  }
  *a2 = v5;
  return result;
}

void sub_2231FF5D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2231FF5E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = nullsub_30(v1);
  MEMORY[0x227684CE8](v3, 0x10E1C40F356210ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FF60C@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_2231FF774(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21890;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_22449BE50((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[36] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_224485C9C(result);
    return MEMORY[0x227684CE8](v12, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231FF720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231FF734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231FF758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231FF774@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  _OWORD v6[2];
  _QWORD v7[6];

  v7[5] = &off_24EC217B0;
  sub_224498F50(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC217F8;
  *(_OWORD *)(v3 + 8) = v6[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v6 + 12);
  sub_2244E32B8((__n128 *)(v3 + 40), (__n128 *)v7);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)&v7[3];
  *a2 = v3;
  return sub_224485C9C((uint64_t)v5);
}

void sub_2231FF818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_224485C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231FF848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224485C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231FF85C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC249C0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_2231FF8D0(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC249C0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_2231FF948(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_2231FFA54(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    sub_223167354(v2 + 8);
    v5 = nullsub_30(v2);
    MEMORY[0x227684CE8](v5, 0x10E1C40F356210ALL);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_2231FF9E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18AutoReturni"
                     "ngMakeTIS7_NS_5recon5frame16ImageInitializerILS5_4EEENSA_13ImageReleaserILS5_4EEEEENSt3__110shared_"
                     "ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE"
                     "13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18"
                                "AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_4EEENSA_13ImageReleaserILS5_"
                                "4EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_N"
                                "SG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_4EEENSA_13ImageReleaserILS5_4EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_4EEENSA_13ImageReleaserILS5_4EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_2231FFA54(std::mutex *a1, uint64_t a2)
{
  uint64_t sig;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    v11 = a2;
    std::mutex::lock((std::mutex *)(sig + 56));
    v5 = *(uint64_t **)(sig + 24);
    if ((unint64_t)v5 >= *(_QWORD *)(sig + 32))
    {
      v7 = sub_2231FFB58((_QWORD *)(sig + 16), &v11);
    }
    else
    {
      v6 = v11;
      v11 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *(_QWORD *)(sig + 24) = v7;
    std::mutex::unlock((std::mutex *)(sig + 56));
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      sub_223167354(v8 + 8);
      v9 = nullsub_30(v8);
      MEMORY[0x227684CE8](v9, 0x10E1C40F356210ALL);
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_2231FFB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_2231FED24(&a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2231FFB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2231FED24((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231FFB58(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_22316E078();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_223174E94();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
      {
        sub_223167354(v27 + 8);
        v29 = nullsub_30(v27);
        MEMORY[0x227684CE8](v29, 0x10E1C40F356210ALL);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

float sub_2231FFD24(_DWORD *a1, _QWORD *a2, uint64_t a3, float *a4)
{
  float *v4;
  uint64_t v5;
  unsigned int v7;
  float64x2_t *v8;
  unsigned int v10;
  float64x2_t v11;
  float v12;
  float32x2_t v13;
  uint64_t v14;
  float64x2_t v15;
  float v16;
  float64x2_t v17;
  float result;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  v7 = a1[2];
  v8 = (float64x2_t *)&unk_2245C4000;
  if (v7)
  {
    v10 = 0;
    v11 = (float64x2_t)xmmword_2245C43B0;
    do
    {
      *a2 = v5;
      a2[2] = v4;
      if (!v5)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v7 = a1[2];
        v11 = (float64x2_t)xmmword_2245C43B0;
      }
      v12 = *(float *)v5;
      v13 = *(float32x2_t *)(v5 + 4);
      v14 = a1[4];
      v5 += 4 * a1[3];
      v15 = vmulq_f64(vcvtq_f64_f32(v13), v11);
      v16 = v12 * 0.299 + 0.0 + v15.f64[0] + v15.f64[1];
      *v4 = v16;
      v4 += v14;
      ++v10;
    }
    while (v10 < v7);
    *a2 = v5;
    a2[2] = v4;
    v8 = (float64x2_t *)&unk_2245C4000;
  }
  else
  {
    *a2 = a3;
    a2[2] = a4;
    if (!a3)
      sub_2245749BC();
  }
  v17 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v5 + 4)), v8[59]);
  result = *(float *)v5 * 0.299 + 0.0 + v17.f64[0] + v17.f64[1];
  *v4 = result;
  return result;
}

uint64_t sub_2231FFEAC(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
  {
    if (!v5)
    {
LABEL_20:
      v23 = 0;
      v15 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v14)
        goto LABEL_25;
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (!v5)
      goto LABEL_20;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5)
      goto LABEL_20;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_16;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 81))
    goto LABEL_20;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(&v23, v5, 0);
  v15 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_25;
LABEL_21:
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
LABEL_25:
    if (!v15)
      goto LABEL_29;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v15)
    goto LABEL_29;
LABEL_26:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_30;
  }
LABEL_29:
  v22 = 0;
LABEL_30:
  v19.n128_u64[0] = sub_223201BE4(a1, a2, a3);
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v20 + 8))(v20, v19.n128_f32[0]);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v19);
  return result;
}

void sub_22320006C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_2232000D0(NSObject *a1@<X0>, const void **a2@<X8>)
{
  unsigned __int8 v3;
  char *v4;
  uint64_t v5;
  _UNKNOWN **v6;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  char **v10;
  unsigned int v11;
  _BOOL4 v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t **v22;
  _UNKNOWN **v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  void **v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 v37;
  _DWORD *v38;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  std::__shared_weak_count *v55;
  void **v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *__p[2];
  char v64;
  void **v65;
  unsigned int v66;
  void *v67[2];
  char v68;
  char *v69;
  std::__shared_weak_count *v70;
  _QWORD v71[3];
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  char v84;
  void *v85[2];
  unint64_t v86;
  char v87;
  char v88;
  _QWORD v89[2];

  v79 = a1;
  v3 = atomic_load((unsigned __int8 *)&qword_25578A350);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578A350))
  {
    qword_25578A348 = 0;
    off_25578A340 = 0;
    off_25578A338 = &off_25578A340;
    __cxa_atexit((void (*)(void *))sub_223200CC4, &off_25578A338, &dword_22314D000);
    __cxa_guard_release(&qword_25578A350);
  }
  v4 = (char *)off_25578A340;
  v5 = (uint64_t)v79;
  if (off_25578A340)
  {
    v6 = &off_25578A340;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v9 = v7 == (_DWORD)v79;
      v8 = v7 < v79;
      if (v9)
        v8 = *((_DWORD *)v4 + 9) < HIDWORD(v79);
      v9 = !v8;
      if (v8)
        v10 = (char **)(v4 + 8);
      else
        v10 = (char **)v4;
      if (v9)
        v6 = (_UNKNOWN **)v4;
      v4 = *v10;
    }
    while (*v10);
    if (v6 != &off_25578A340)
    {
      v11 = *((_DWORD *)v6 + 8);
      v9 = (_DWORD)v79 == v11;
      v12 = v79 < v11;
      if (v9)
        v12 = HIDWORD(v79) < *((_DWORD *)v6 + 9);
      if (!v12)
      {
        v38 = v6[5];
        if ((_DWORD)v79 != v38[34] || HIDWORD(v79) != v38[35])
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 260, (uint64_t)"it->second->ImageSize() == size", 31, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v38 = v6[5];
        }
        *a2 = v38;
        v40 = (unint64_t *)v6[6];
        a2[1] = v40;
        if (v40)
        {
          v41 = v40 + 1;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        return;
      }
    }
  }
  v13 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24A10;
  v14 = v13 + 1;
  sub_223200D38((uint64_t)&v13[1], v5);
  *a2 = &v13[1];
  a2[1] = v13;
  sub_2231F5754(&v78);
  if (**(int **)(v78 + 56) <= 3)
  {
    v15 = *(unsigned __int8 *)(v78 + 72);
    v16 = sub_22455F97C(&v78);
    v17 = v16;
    if (v15 || v16)
    {
      v71[0] = &v78;
      v71[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v71[2] = std::chrono::system_clock::now().__d_.__rep_;
      v72 = 3;
      v73 = "unknown file";
      v74 = 256;
      v76 = 0;
      v77 = 0;
      v75 = "unknown function";
      v70 = v13 + 1;
      v66 = 3;
      LODWORD(v83) = 0;
      sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, &v66);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      __p[0] = v89;
      ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
      v32 = (char *)v67;
      if (v68 < 0)
        v32 = (char *)v67[0];
      v69 = v32;
      LODWORD(v83) = 0;
      sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      v89[0] = &v88;
      ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
      v33 = __p;
      if (v64 < 0)
        v33 = (void **)__p[0];
      v65 = v33;
      v34 = *(_QWORD *)v71[0];
      v35 = (const char *)(*(_QWORD *)v71[0] + 16);
      v61 = (uint64_t *)v35;
      if (*(char *)(*(_QWORD *)v71[0] + 39) < 0)
      {
        v35 = *(const char **)(v34 + 16);
        v36 = *(_QWORD *)(v34 + 24);
        v62 = v17;
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) != 0)
          goto LABEL_68;
      }
      else
      {
        v36 = *(unsigned __int8 *)(*(_QWORD *)v71[0] + 39);
        v62 = v17;
        v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v37 & 1) != 0)
          goto LABEL_68;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v80);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v80, &xmmword_255788F40);
        if ((_BYTE)v83 && SHIBYTE(v82) < 0)
          operator delete(v80);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_68:
      if (byte_255788F57 >= 0)
        v44 = (const char *)&xmmword_255788F40;
      else
        v44 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v45 = byte_255788F57;
      else
        v45 = *((_QWORD *)&xmmword_255788F40 + 1);
      v80 = os_log_create(v44, v35);
      v46 = (void **)&v81;
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v45 >= 0x17)
      {
        v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v47 = v45 | 7;
        v48 = v47 + 1;
        v46 = (void **)operator new(v47 + 1);
        v82 = (std::__shared_weak_count *)v45;
        v83 = v48 | 0x8000000000000000;
        v81 = (std::__shared_weak_count *)v46;
      }
      else
      {
        HIBYTE(v83) = v45;
        if (!v45)
        {
LABEL_82:
          *((_BYTE *)v46 + v45) = 0;
          v84 = 1;
          v49 = v85;
          if (v36 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v36 >= 0x17)
          {
            v51 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v51 = v36 | 7;
            v52 = v51 + 1;
            v49 = (void **)operator new(v51 + 1);
            v85[1] = (void *)v36;
            v86 = v52 | 0x8000000000000000;
            v85[0] = v49;
            v50 = v62;
          }
          else
          {
            HIBYTE(v86) = v36;
            v50 = v62;
            if (!v36)
              goto LABEL_90;
          }
          memmove(v49, v35, v36);
LABEL_90:
          *((_BYTE *)v49 + v36) = 0;
          v87 = 1;
          v53 = objc_retainAutorelease(v80);
          if (v87 && SHIBYTE(v86) < 0)
            operator delete(v85[0]);
          if (v84 && SHIBYTE(v83) < 0)
            operator delete(v81);

          v54 = sub_22455F7B4(3u);
          sub_223200F70((uint64_t)&v80, v50, v61, v53, v54, v15 != 0, (uint64_t *)&v70, &v69, (const char **)&v65);

          if (v64 < 0)
          {
            operator delete(__p[0]);
            if ((v68 & 0x80000000) == 0)
            {
LABEL_98:
              if (!v15)
                goto LABEL_118;
LABEL_102:
              v55 = (std::__shared_weak_count *)*a2;
              LODWORD(v70) = 3;
              LODWORD(v83) = 0;
              sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, (unsigned int *)&v70);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              __p[0] = v89;
              ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
              if (v68 >= 0)
                v56 = v67;
              else
                v56 = (void **)v67[0];
              LODWORD(v83) = 0;
              sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              v89[0] = &v69;
              ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
              v57 = __p;
              if (v64 < 0)
                v57 = (void **)__p[0];
              sub_22322C138((uint64_t)v71, "New image pool %p with format %s and size %s", v55, (const char *)v56, (const char *)v57);
              if (v64 < 0)
                operator delete(__p[0]);
              if (v68 < 0)
                operator delete(v67[0]);
              sub_223182C08((uint64_t)v71);
LABEL_118:
              sub_223182C08((uint64_t)v71);
              v58 = v77;
              if (v77)
              {
                p_shared_owners = (unint64_t *)&v77->__shared_owners_;
                do
                  v60 = __ldaxr(p_shared_owners);
                while (__stlxr(v60 - 1, p_shared_owners));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v14 = (std::__shared_weak_count *)*a2;
              v13 = (std::__shared_weak_count *)a2[1];
              v18 = v79;
              v80 = v79;
              v81 = v14;
              v82 = v13;
              if (!v13)
                goto LABEL_23;
              goto LABEL_21;
            }
          }
          else if ((v68 & 0x80000000) == 0)
          {
            goto LABEL_98;
          }
          operator delete(v67[0]);
          if (!v15)
            goto LABEL_118;
          goto LABEL_102;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_82;
    }
  }
  v18 = v79;
  v80 = v79;
  v81 = v13 + 1;
  v82 = v13;
LABEL_21:
  v19 = (unint64_t *)&v13->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_23:
  v21 = off_25578A340;
  if (off_25578A340)
  {
    while (1)
    {
      while (1)
      {
        v23 = (_UNKNOWN **)v21;
        v24 = *((_DWORD *)v21 + 8);
        v25 = *((_DWORD *)v23 + 9);
        v26 = HIDWORD(v18) < v25;
        if ((_DWORD)v18 != v24)
          v26 = v18 < v24;
        if (!v26)
          break;
        v21 = *v23;
        v22 = (uint64_t **)v23;
        if (!*v23)
          goto LABEL_36;
      }
      v27 = v25 < HIDWORD(v18);
      v28 = (_DWORD)v18 == v24 ? v27 : v24 < v18;
      if (v28 != 1)
        break;
      v21 = v23[1];
      if (!v21)
      {
        v22 = (uint64_t **)(v23 + 1);
        goto LABEL_36;
      }
    }
  }
  else
  {
    v22 = (uint64_t **)&off_25578A340;
    v23 = &off_25578A340;
LABEL_36:
    v29 = (uint64_t *)operator new(0x38uLL);
    v29[4] = (uint64_t)v18;
    v29[5] = (uint64_t)v14;
    v29[6] = (uint64_t)v13;
    v81 = 0;
    v82 = 0;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t)v23;
    *v22 = v29;
    if (*(_QWORD *)off_25578A338)
    {
      off_25578A338 = *(_UNKNOWN **)off_25578A338;
      v29 = *v22;
    }
    sub_2231A9A8C((uint64_t *)off_25578A340, v29);
    ++qword_25578A348;
    v13 = v82;
  }
  if (v13)
  {
    v30 = (unint64_t *)&v13->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2232009B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (*(_BYTE *)(v31 - 152) && *(char *)(v31 - 153) < 0)
    operator delete(*(void **)(v31 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a19 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  sub_223182DAC((uint64_t)&a30);
  sub_223167354(v30);
  _Unwind_Resume(a1);
}

void sub_223200AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223200AC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223197300(v2 - 176);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223200AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223200AF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223200B10(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20[2];
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  v20[1] = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_2232015D8((_QWORD *)a1, v20);
  std::mutex::unlock((std::mutex *)(a1 + 56));
  v8 = v20[0];
  *((_QWORD *)&v19 + 1) = v4;
  v20[0] = 0;
  *(_QWORD *)&v19 = v5;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_223201534(a2, v8, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20[0];
  v20[0] = 0;
  if (v14)
  {
    sub_223167354(v14 + 8);
    v15 = nullsub_30(v14);
    MEMORY[0x227684CE8](v15, 0x10E1C40A1E2418FLL);
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_223200C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223200E34((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223200C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223200CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223200CC4(uint64_t a1)
{
  sub_2231F823C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_223200CEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223200CFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223200D2C(uint64_t a1)
{
  return sub_223200E84(a1 + 24);
}

uint64_t sub_223200D38(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = xmmword_2245C43A0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC24A60;
  v4[3] = 850045863;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = a1;
  v4[12] = a2;
  *(_QWORD *)(a1 + 120) = v4 + 3;
  *(_QWORD *)(a1 + 128) = v4;
  *(_QWORD *)(a1 + 136) = a2;
  return a1;
}

void sub_223200DC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_2245749F8(v1, v3);
  _Unwind_Resume(a1);
}

void sub_223200DE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223200DF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223200E28(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_223200E34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_223167354(v2 + 8);
    v3 = nullsub_30(v2);
    MEMORY[0x227684CE8](v3, 0x10E1C40A1E2418FLL);
  }
  return a1;
}

uint64_t sub_223200E84(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(std::mutex **)(a1 + 120);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 120));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v6 = *(_QWORD **)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(void **)(a1 + 16);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          sub_223167354(v9 + 8);
          v11 = nullsub_30(v9);
          MEMORY[0x227684CE8](v11, 0x10E1C40A1E2418FLL);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_223200F70(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, uint64_t *a7, char **a8, const char **a9)
{
  NSObject *v14;
  NSObject *v15;
  size_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  const char *v43;
  void *v44;
  NSObject *v46;
  std::__shared_weak_count_vtbl *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  _BYTE v51[24];
  const char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = v14;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v16 = _os_log_pack_size();
    v46 = v15;
    v17 = (std::__shared_weak_count_vtbl *)operator new(v16, (std::align_val_t)8uLL);
    v18 = (std::__shared_weak_count *)operator new();
    v18->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v17;
    sub_2231F6148((uint64_t)v51, *a8, a9);
    v20 = (char *)operator new(0x50uLL);
    *((_QWORD *)v20 + 1) = 0;
    v21 = (unint64_t *)(v20 + 8);
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_24EC245F8;
    *((_QWORD *)v20 + 3) = off_24EC24648;
    *((_OWORD *)v20 + 2) = *(_OWORD *)&v51[8];
    *((_QWORD *)v20 + 6) = v52;
    *(_OWORD *)&v51[8] = 0uLL;
    *(_OWORD *)(v20 + 56) = v53;
    *((_QWORD *)v20 + 9) = v54;
    v52 = 0;
    v53 = 0uLL;
    v54 = 0;
    nullsub_30(v51);
    v47 = v17;
    *(_QWORD *)&v48 = v17;
    *((_QWORD *)&v48 + 1) = v18;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *(_QWORD *)&v49 = v20 + 24;
    *((_QWORD *)&v49 + 1) = v20;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v50 = v20 + 24;
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      (*(void (**)(char *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v27 = *a7;
    if (v20[55] >= 0)
      v28 = v20 + 32;
    else
      v28 = (char *)*((_QWORD *)v20 + 4);
    if (v50[55] >= 0)
      v29 = v50 + 32;
    else
      v29 = (char *)*((_QWORD *)v50 + 4);
    v30 = _os_log_pack_fill();
    *(_DWORD *)v30 = 134218498;
    *(_QWORD *)(v30 + 4) = v27;
    *(_WORD *)(v30 + 12) = 2080;
    *(_QWORD *)(v30 + 14) = v28;
    *(_WORD *)(v30 + 22) = 2080;
    *(_QWORD *)(v30 + 24) = v29;
    v31 = operator new();
    v32 = *((unsigned __int8 *)a3 + 23);
    if ((v32 & 0x80u) == 0)
      v33 = a3;
    else
      v33 = (uint64_t *)*a3;
    if ((v32 & 0x80u) != 0)
      v32 = a3[1];
    *(_QWORD *)v31 = v47;
    *(_OWORD *)(v31 + 8) = v48;
    *(_OWORD *)(v31 + 24) = v49;
    *(_QWORD *)(v31 + 40) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    *(_BYTE *)(v31 + 56) = a5;
    *(_QWORD *)v51 = v31;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v51);
    v34 = *(_QWORD *)v51;
    *(_QWORD *)v51 = 0;
    v15 = v46;
    if (v34)
    {
      v35 = *(std::__shared_weak_count **)(v34 + 32);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)(v34 + 16);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      MEMORY[0x227684CE8](v34, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v14, a5);
    v41 = *a7;
    v42 = *a8;
    v43 = *a9;
    *(_DWORD *)v51 = 134218498;
    *(_QWORD *)&v51[4] = v41;
    *(_WORD *)&v51[12] = 2080;
    *(_QWORD *)&v51[14] = v42;
    *(_WORD *)&v51[22] = 2080;
    v52 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }

  return 0;
}

void sub_2232014B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_223201534(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  *a1 = a2;
  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)v6 = &off_24EC24AB0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_OWORD *)(v6 + 32) = v7;
  a1[1] = v6;
  return a1;
}

void sub_2232015A0(void *a1)
{
  uint64_t v1;
  std::mutex **v2;
  char v3;

  __cxa_begin_catch(a1);
  v3 = sub_223201914(*v2, v1);
  sub_224574A50(v1, v3);
  __cxa_rethrow();
}

void sub_2232015C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_2232015D8@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::runtime_error *exception;

  v2 = result;
  v4 = result[3];
  if (result[2] == v4)
  {
    v11 = result[5];
    if (v11 >= result[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    result[5] = v11 + 1;
    v5 = operator new();
    *(_QWORD *)v5 = &off_24EC1FE80;
    result = (_QWORD *)sub_2231A2D70(v2, (_WORD *)(v5 + 8));
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = result[3];
    v9 = *(_QWORD *)(v6 - 8);
    v8 = (_QWORD *)(v6 - 8);
    v7 = v9;
    *v8 = 0;
    if (v9)
    {
      sub_223167354(v7 + 8);
      v10 = nullsub_30(v7);
      result = (_QWORD *)MEMORY[0x227684CE8](v10, 0x10E1C40A1E2418FLL);
    }
    v2[3] = v8;
  }
  *a2 = v5;
  return result;
}

void sub_2232016E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2232016F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = nullsub_30(v1);
  MEMORY[0x227684CE8](v3, 0x10E1C40A1E2418FLL);
  _Unwind_Resume(a1);
}

void sub_22320171C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24AB0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_223201790(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24AB0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_223201808(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_223201914(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    sub_223167354(v2 + 8);
    v5 = nullsub_30(v2);
    MEMORY[0x227684CE8](v5, 0x10E1C40A1E2418FLL);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_2232018A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE3ENS3_13DynamicBufferEEENS1_18AutoReturni"
                     "ngMakeTIS7_NS_5recon5frame16ImageInitializerILS5_3EEENSA_13ImageReleaserILS5_3EEEEENSt3__110shared_"
                     "ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE"
                     "13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE3ENS3_13DynamicBufferEEENS1_18"
                                "AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_3EEENSA_13ImageReleaserILS5_"
                                "3EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_N"
                                "SG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE3ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_3EEENSA_13ImageReleaserILS5_3EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE3ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_3EEENSA_13ImageReleaserILS5_3EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_223201914(std::mutex *a1, uint64_t a2)
{
  uint64_t sig;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    v11 = a2;
    std::mutex::lock((std::mutex *)(sig + 56));
    v5 = *(uint64_t **)(sig + 24);
    if ((unint64_t)v5 >= *(_QWORD *)(sig + 32))
    {
      v7 = sub_223201A18((_QWORD *)(sig + 16), &v11);
    }
    else
    {
      v6 = v11;
      v11 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *(_QWORD *)(sig + 24) = v7;
    std::mutex::unlock((std::mutex *)(sig + 56));
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      sub_223167354(v8 + 8);
      v9 = nullsub_30(v8);
      MEMORY[0x227684CE8](v9, 0x10E1C40A1E2418FLL);
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_2232019D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_223200E34(&a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2232019FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_223200E34((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_223201A18(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_22316E078();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_223174E94();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
      {
        sub_223167354(v27 + 8);
        v29 = nullsub_30(v27);
        MEMORY[0x227684CE8](v29, 0x10E1C40A1E2418FLL);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

unsigned __int16 sub_223201BE4@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  unsigned int v5;
  int v6;
  unint64_t v8;
  __n128 *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  __n128 v25;
  unsigned __int16 v26;
  uint64_t v28;

  v5 = *(_DWORD *)(a1 + 64);
  v6 = *(_DWORD *)(a1 + 76);
  if (v6 != *(_DWORD *)(a2 + 76) || v6 != v5)
  {
    v28 = *(unsigned int *)(a1 + 64);
    sub_223201E10(a1, a2, &v28, a3);
    return a3.n128_u16[0];
  }
  v8 = *(unsigned int *)(a1 + 68) * (unint64_t)v5;
  v9 = *(__n128 **)(a1 + 56);
  if (*(_BYTE *)(a1 + 80))
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
    v9 = *(__n128 **)(a1 + 56);
  }
  if (v8
    && !v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_26:
    abort();
  }
  v16 = *(__n128 **)(a2 + 32);
  if (*(_BYTE *)(a2 + 80) && v16)
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v16 = *(__n128 **)(a2 + 32);
  }
  if (!v8 || v16)
  {
    if (!v8)
      return a3.n128_u16[0];
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_26;
  }
  v17 = (v8 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v17 < 0xF || (unint64_t)((char *)v16 - (char *)v9) < 0x20)
  {
    v20 = (unsigned __int16 *)v16;
    v21 = (unsigned __int16 *)v9;
    do
    {
LABEL_35:
      v26 = *v21++;
      a3.n128_u16[0] = v26;
      *v20++ = v26;
    }
    while (v21 != (unsigned __int16 *)((char *)v9 + 2 * v8));
    return a3.n128_u16[0];
  }
  v18 = v17 + 1;
  v19 = (v17 + 1) & 0xFFFFFFFFFFFFFFF0;
  v20 = (unsigned __int16 *)v16 + v19;
  v21 = (unsigned __int16 *)v9 + v19;
  v22 = v9 + 1;
  v23 = v16 + 1;
  v24 = v19;
  do
  {
    a3 = v22[-1];
    v25 = *v22;
    v23[-1] = a3;
    *v23 = v25;
    v22 += 2;
    v23 += 2;
    v24 -= 16;
  }
  while (v24);
  if (v18 != v19)
    goto LABEL_35;
  return a3.n128_u16[0];
}

uint64_t sub_223201E10(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
      if (!v7)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (!v7)
        goto LABEL_20;
    }
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (!*(_BYTE *)(a1 + 81))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v24, v7, 0);
        v17 = *(_QWORD *)(a2 + 8);
        v16 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v16)
          goto LABEL_25;
        goto LABEL_21;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a1 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v7)
    goto LABEL_16;
LABEL_20:
  v24 = 0;
  v17 = *(_QWORD *)(a2 + 8);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
    goto LABEL_25;
LABEL_21:
  v18 = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v17)
      goto LABEL_30;
    goto LABEL_26;
  }
LABEL_25:
  if (!v17)
    goto LABEL_30;
LABEL_26:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v23, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 64))
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_30:
  v23 = 0;
  if (!*(_DWORD *)(a1 + 64))
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)(a1 + 68))
    a4.n128_f64[0] = sub_22320205C(a3, a1, a2);
LABEL_33:
  v21 = v23;
  v23 = 0;
  if (v21)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v21 + 8))(v21, a4);
  result = v24;
  v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_223201FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_22320205C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD v24[2];

  v4 = *(_DWORD *)(a2 + 64);
  v3 = *(_DWORD *)(a2 + 68);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v20 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 76);
    v10 = *(unsigned int *)(a3 + 76);
    v21 = *(unsigned int *)(a2 + 72) | ((unint64_t)*(unsigned int *)(a3 + 72) << 32);
    v19 = 0;
    v22 = v3 - 1;
    v23 = v9 | (v10 << 32);
    v11 = *(_QWORD *)(a2 + 56);
    if (*(_BYTE *)(a2 + 80) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v11 = *(_QWORD *)(a2 + 56);
    }
    v17 = *(_QWORD *)(a3 + 32);
    if (*(_BYTE *)(a3 + 80))
    {
      if (v17)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v17 = *(_QWORD *)(a3 + 32);
      }
    }
    memset(v24, 0, sizeof(v24));
    *(_QWORD *)&result = sub_2231C1A98(&v19, (uint64_t)v24, a1, v11, v17);
  }
  return result;
}

uint64_t sub_223202198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_20:
      v21 = 0;
      v14 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v13)
        goto LABEL_25;
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_20;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_20;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 129))
      goto LABEL_20;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 129))
    goto LABEL_20;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v21, v4, 0);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_25;
LABEL_21:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_25:
    if (!v14)
      goto LABEL_29;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v20, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_30;
  }
LABEL_29:
  v20 = 0;
LABEL_30:
  sub_22320492C(a1, a2);
  v18 = v20;
  v20 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223202358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_2232023BC(NSObject *a1@<X0>, const void **a2@<X8>)
{
  unsigned __int8 v3;
  char *v4;
  uint64_t v5;
  _UNKNOWN **v6;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  char **v10;
  unsigned int v11;
  _BOOL4 v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t **v22;
  _UNKNOWN **v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  void **v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 v37;
  _DWORD *v38;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  std::__shared_weak_count *v55;
  void **v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *__p[2];
  char v64;
  void **v65;
  unsigned int v66;
  void *v67[2];
  char v68;
  char *v69;
  std::__shared_weak_count *v70;
  _QWORD v71[3];
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  char v84;
  void *v85[2];
  unint64_t v86;
  char v87;
  char v88;
  _QWORD v89[2];

  v79 = a1;
  v3 = atomic_load((unsigned __int8 *)&qword_25578A370);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578A370))
  {
    qword_25578A368 = 0;
    off_25578A360 = 0;
    off_25578A358 = &off_25578A360;
    __cxa_atexit((void (*)(void *))sub_223202FB4, &off_25578A358, &dword_22314D000);
    __cxa_guard_release(&qword_25578A370);
  }
  v4 = (char *)off_25578A360;
  v5 = (uint64_t)v79;
  if (off_25578A360)
  {
    v6 = &off_25578A360;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v9 = v7 == (_DWORD)v79;
      v8 = v7 < v79;
      if (v9)
        v8 = *((_DWORD *)v4 + 9) < HIDWORD(v79);
      v9 = !v8;
      if (v8)
        v10 = (char **)(v4 + 8);
      else
        v10 = (char **)v4;
      if (v9)
        v6 = (_UNKNOWN **)v4;
      v4 = *v10;
    }
    while (*v10);
    if (v6 != &off_25578A360)
    {
      v11 = *((_DWORD *)v6 + 8);
      v9 = (_DWORD)v79 == v11;
      v12 = v79 < v11;
      if (v9)
        v12 = HIDWORD(v79) < *((_DWORD *)v6 + 9);
      if (!v12)
      {
        v38 = v6[5];
        if ((_DWORD)v79 != v38[34] || HIDWORD(v79) != v38[35])
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 260, (uint64_t)"it->second->ImageSize() == size", 31, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v38 = v6[5];
        }
        *a2 = v38;
        v40 = (unint64_t *)v6[6];
        a2[1] = v40;
        if (v40)
        {
          v41 = v40 + 1;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        return;
      }
    }
  }
  v13 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24B00;
  v14 = v13 + 1;
  sub_223203028((uint64_t)&v13[1], v5);
  *a2 = &v13[1];
  a2[1] = v13;
  sub_2231F5754(&v78);
  if (**(int **)(v78 + 56) <= 3)
  {
    v15 = *(unsigned __int8 *)(v78 + 72);
    v16 = sub_22455F97C(&v78);
    v17 = v16;
    if (v15 || v16)
    {
      v71[0] = &v78;
      v71[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v71[2] = std::chrono::system_clock::now().__d_.__rep_;
      v72 = 3;
      v73 = "unknown file";
      v74 = 256;
      v76 = 0;
      v77 = 0;
      v75 = "unknown function";
      v70 = v13 + 1;
      v66 = 32;
      LODWORD(v83) = 0;
      sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, &v66);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      __p[0] = v89;
      ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
      v32 = (char *)v67;
      if (v68 < 0)
        v32 = (char *)v67[0];
      v69 = v32;
      LODWORD(v83) = 0;
      sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
      if ((_DWORD)v83 == -1)
        sub_22316DD70();
      v89[0] = &v88;
      ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
      if ((_DWORD)v83 != -1)
        ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
      v33 = __p;
      if (v64 < 0)
        v33 = (void **)__p[0];
      v65 = v33;
      v34 = *(_QWORD *)v71[0];
      v35 = (const char *)(*(_QWORD *)v71[0] + 16);
      v61 = (uint64_t *)v35;
      if (*(char *)(*(_QWORD *)v71[0] + 39) < 0)
      {
        v35 = *(const char **)(v34 + 16);
        v36 = *(_QWORD *)(v34 + 24);
        v62 = v17;
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) != 0)
          goto LABEL_68;
      }
      else
      {
        v36 = *(unsigned __int8 *)(*(_QWORD *)v71[0] + 39);
        v62 = v17;
        v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v37 & 1) != 0)
          goto LABEL_68;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v80);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v80, &xmmword_255788F40);
        if ((_BYTE)v83 && SHIBYTE(v82) < 0)
          operator delete(v80);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_68:
      if (byte_255788F57 >= 0)
        v44 = (const char *)&xmmword_255788F40;
      else
        v44 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v45 = byte_255788F57;
      else
        v45 = *((_QWORD *)&xmmword_255788F40 + 1);
      v80 = os_log_create(v44, v35);
      v46 = (void **)&v81;
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v45 >= 0x17)
      {
        v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v47 = v45 | 7;
        v48 = v47 + 1;
        v46 = (void **)operator new(v47 + 1);
        v82 = (std::__shared_weak_count *)v45;
        v83 = v48 | 0x8000000000000000;
        v81 = (std::__shared_weak_count *)v46;
      }
      else
      {
        HIBYTE(v83) = v45;
        if (!v45)
        {
LABEL_82:
          *((_BYTE *)v46 + v45) = 0;
          v84 = 1;
          v49 = v85;
          if (v36 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v36 >= 0x17)
          {
            v51 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v51 = v36 | 7;
            v52 = v51 + 1;
            v49 = (void **)operator new(v51 + 1);
            v85[1] = (void *)v36;
            v86 = v52 | 0x8000000000000000;
            v85[0] = v49;
            v50 = v62;
          }
          else
          {
            HIBYTE(v86) = v36;
            v50 = v62;
            if (!v36)
              goto LABEL_90;
          }
          memmove(v49, v35, v36);
LABEL_90:
          *((_BYTE *)v49 + v36) = 0;
          v87 = 1;
          v53 = objc_retainAutorelease(v80);
          if (v87 && SHIBYTE(v86) < 0)
            operator delete(v85[0]);
          if (v84 && SHIBYTE(v83) < 0)
            operator delete(v81);

          v54 = sub_22455F7B4(3u);
          sub_223203288((uint64_t)&v80, v50, v61, v53, v54, v15 != 0, (uint64_t *)&v70, &v69, (const char **)&v65);

          if (v64 < 0)
          {
            operator delete(__p[0]);
            if ((v68 & 0x80000000) == 0)
            {
LABEL_98:
              if (!v15)
                goto LABEL_118;
LABEL_102:
              v55 = (std::__shared_weak_count *)*a2;
              LODWORD(v70) = 32;
              LODWORD(v83) = 0;
              sub_2231A0B14((uint64_t)__p, (uint64_t)&v80, (unsigned int *)&v70);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              __p[0] = v89;
              ((void (*)(void **__return_ptr, void **, os_log_t *))off_24EC22250[v83])(v67, __p, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(void **, os_log_t *))off_24EC22220[v83])(__p, &v80);
              if (v68 >= 0)
                v56 = v67;
              else
                v56 = (void **)v67[0];
              LODWORD(v83) = 0;
              sub_2231BFC9C((uint64_t)v89, (uint64_t)&v80, (unsigned int *)&v79);
              if ((_DWORD)v83 == -1)
                sub_22316DD70();
              v89[0] = &v69;
              ((void (*)(void **__return_ptr, _QWORD *, os_log_t *))off_24EC22250[v83])(__p, v89, &v80);
              if ((_DWORD)v83 != -1)
                ((void (*)(_QWORD *, os_log_t *))off_24EC22220[v83])(v89, &v80);
              v57 = __p;
              if (v64 < 0)
                v57 = (void **)__p[0];
              sub_22322C138((uint64_t)v71, "New image pool %p with format %s and size %s", v55, (const char *)v56, (const char *)v57);
              if (v64 < 0)
                operator delete(__p[0]);
              if (v68 < 0)
                operator delete(v67[0]);
              sub_223182C08((uint64_t)v71);
LABEL_118:
              sub_223182C08((uint64_t)v71);
              v58 = v77;
              if (v77)
              {
                p_shared_owners = (unint64_t *)&v77->__shared_owners_;
                do
                  v60 = __ldaxr(p_shared_owners);
                while (__stlxr(v60 - 1, p_shared_owners));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v14 = (std::__shared_weak_count *)*a2;
              v13 = (std::__shared_weak_count *)a2[1];
              v18 = v79;
              v80 = v79;
              v81 = v14;
              v82 = v13;
              if (!v13)
                goto LABEL_23;
              goto LABEL_21;
            }
          }
          else if ((v68 & 0x80000000) == 0)
          {
            goto LABEL_98;
          }
          operator delete(v67[0]);
          if (!v15)
            goto LABEL_118;
          goto LABEL_102;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_82;
    }
  }
  v18 = v79;
  v80 = v79;
  v81 = v13 + 1;
  v82 = v13;
LABEL_21:
  v19 = (unint64_t *)&v13->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_23:
  v21 = off_25578A360;
  if (off_25578A360)
  {
    while (1)
    {
      while (1)
      {
        v23 = (_UNKNOWN **)v21;
        v24 = *((_DWORD *)v21 + 8);
        v25 = *((_DWORD *)v23 + 9);
        v26 = HIDWORD(v18) < v25;
        if ((_DWORD)v18 != v24)
          v26 = v18 < v24;
        if (!v26)
          break;
        v21 = *v23;
        v22 = (uint64_t **)v23;
        if (!*v23)
          goto LABEL_36;
      }
      v27 = v25 < HIDWORD(v18);
      v28 = (_DWORD)v18 == v24 ? v27 : v24 < v18;
      if (v28 != 1)
        break;
      v21 = v23[1];
      if (!v21)
      {
        v22 = (uint64_t **)(v23 + 1);
        goto LABEL_36;
      }
    }
  }
  else
  {
    v22 = (uint64_t **)&off_25578A360;
    v23 = &off_25578A360;
LABEL_36:
    v29 = (uint64_t *)operator new(0x38uLL);
    v29[4] = (uint64_t)v18;
    v29[5] = (uint64_t)v14;
    v29[6] = (uint64_t)v13;
    v81 = 0;
    v82 = 0;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t)v23;
    *v22 = v29;
    if (*(_QWORD *)off_25578A358)
    {
      off_25578A358 = *(_UNKNOWN **)off_25578A358;
      v29 = *v22;
    }
    sub_2231A9A8C((uint64_t *)off_25578A360, v29);
    ++qword_25578A368;
    v13 = v82;
  }
  if (v13)
  {
    v30 = (unint64_t *)&v13->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_223202CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (*(_BYTE *)(v31 - 152) && *(char *)(v31 - 153) < 0)
    operator delete(*(void **)(v31 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a19 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  sub_223182DAC((uint64_t)&a30);
  sub_223167354(v30);
  _Unwind_Resume(a1);
}

void sub_223202DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223202DB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223197300(v2 - 176);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223202DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223202DE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223202E00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20[2];
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  v20[1] = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_2232038F0((_QWORD *)a1, v20);
  std::mutex::unlock((std::mutex *)(a1 + 56));
  v8 = v20[0];
  *((_QWORD *)&v19 + 1) = v4;
  v20[0] = 0;
  *(_QWORD *)&v19 = v5;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_22320384C(a2, v8, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20[0];
  v20[0] = 0;
  if (v14)
  {
    sub_223167354(v14 + 8);
    v15 = nullsub_30(v14);
    MEMORY[0x227684CE8](v15, 0x10E1C404B2A450ELL);
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_223202F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223203124((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223202F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223202FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223202FB4(uint64_t a1)
{
  sub_2231F823C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_223202FDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223202FEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22320301C(uint64_t a1)
{
  return sub_22320319C(a1 + 24);
}

uint64_t sub_223203028(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = xmmword_2245C43A0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC24B50;
  v4[3] = 850045863;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = a1;
  v4[12] = a2;
  *(_QWORD *)(a1 + 120) = v4 + 3;
  *(_QWORD *)(a1 + 128) = v4;
  *(_QWORD *)(a1 + 136) = a2;
  return a1;
}

void sub_2232030B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_224574A8C(v1, v3);
  _Unwind_Resume(a1);
}

void sub_2232030D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232030E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24B50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223203118(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_223203124(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_223167354(v2 + 8);
    v3 = nullsub_30(v2);
    MEMORY[0x227684CE8](v3, 0x10E1C404B2A450ELL);
  }
  return a1;
}

uint64_t sub_223203174(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

uint64_t sub_22320319C(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(std::mutex **)(a1 + 120);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 120));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v6 = *(_QWORD **)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(void **)(a1 + 16);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          sub_223167354(v9 + 8);
          v11 = nullsub_30(v9);
          MEMORY[0x227684CE8](v11, 0x10E1C404B2A450ELL);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_223203288(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, uint64_t *a7, char **a8, const char **a9)
{
  NSObject *v14;
  NSObject *v15;
  size_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  const char *v43;
  void *v44;
  NSObject *v46;
  std::__shared_weak_count_vtbl *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  _BYTE v51[24];
  const char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = v14;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v16 = _os_log_pack_size();
    v46 = v15;
    v17 = (std::__shared_weak_count_vtbl *)operator new(v16, (std::align_val_t)8uLL);
    v18 = (std::__shared_weak_count *)operator new();
    v18->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v17;
    sub_2231F6148((uint64_t)v51, *a8, a9);
    v20 = (char *)operator new(0x50uLL);
    *((_QWORD *)v20 + 1) = 0;
    v21 = (unint64_t *)(v20 + 8);
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_24EC245F8;
    *((_QWORD *)v20 + 3) = off_24EC24648;
    *((_OWORD *)v20 + 2) = *(_OWORD *)&v51[8];
    *((_QWORD *)v20 + 6) = v52;
    *(_OWORD *)&v51[8] = 0uLL;
    *(_OWORD *)(v20 + 56) = v53;
    *((_QWORD *)v20 + 9) = v54;
    v52 = 0;
    v53 = 0uLL;
    v54 = 0;
    nullsub_30(v51);
    v47 = v17;
    *(_QWORD *)&v48 = v17;
    *((_QWORD *)&v48 + 1) = v18;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *(_QWORD *)&v49 = v20 + 24;
    *((_QWORD *)&v49 + 1) = v20;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v50 = v20 + 24;
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      (*(void (**)(char *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v27 = *a7;
    if (v20[55] >= 0)
      v28 = v20 + 32;
    else
      v28 = (char *)*((_QWORD *)v20 + 4);
    if (v50[55] >= 0)
      v29 = v50 + 32;
    else
      v29 = (char *)*((_QWORD *)v50 + 4);
    v30 = _os_log_pack_fill();
    *(_DWORD *)v30 = 134218498;
    *(_QWORD *)(v30 + 4) = v27;
    *(_WORD *)(v30 + 12) = 2080;
    *(_QWORD *)(v30 + 14) = v28;
    *(_WORD *)(v30 + 22) = 2080;
    *(_QWORD *)(v30 + 24) = v29;
    v31 = operator new();
    v32 = *((unsigned __int8 *)a3 + 23);
    if ((v32 & 0x80u) == 0)
      v33 = a3;
    else
      v33 = (uint64_t *)*a3;
    if ((v32 & 0x80u) != 0)
      v32 = a3[1];
    *(_QWORD *)v31 = v47;
    *(_OWORD *)(v31 + 8) = v48;
    *(_OWORD *)(v31 + 24) = v49;
    *(_QWORD *)(v31 + 40) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    *(_BYTE *)(v31 + 56) = a5;
    *(_QWORD *)v51 = v31;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v51);
    v34 = *(_QWORD *)v51;
    *(_QWORD *)v51 = 0;
    v15 = v46;
    if (v34)
    {
      v35 = *(std::__shared_weak_count **)(v34 + 32);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)(v34 + 16);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      MEMORY[0x227684CE8](v34, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v14, a5);
    v41 = *a7;
    v42 = *a8;
    v43 = *a9;
    *(_DWORD *)v51 = 134218498;
    *(_QWORD *)&v51[4] = v41;
    *(_WORD *)&v51[12] = 2080;
    *(_QWORD *)&v51[14] = v42;
    *(_WORD *)&v51[22] = 2080;
    v52 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }

  return 0;
}

void sub_2232037C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_22320384C(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  *a1 = a2;
  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)v6 = &off_24EC24DC8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_OWORD *)(v6 + 32) = v7;
  a1[1] = v6;
  return a1;
}

void sub_2232038B8(void *a1)
{
  uint64_t v1;
  std::mutex **v2;
  char v3;

  __cxa_begin_catch(a1);
  v3 = sub_22320465C(*v2, v1);
  sub_224574AE4(v1, v3);
  __cxa_rethrow();
}

void sub_2232038DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_2232038F0@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::runtime_error *exception;

  v2 = result;
  v4 = result[3];
  if (result[2] == v4)
  {
    v11 = result[5];
    if (v11 >= result[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    result[5] = v11 + 1;
    v5 = operator new();
    *(_QWORD *)v5 = &off_24EC24BA0;
    result = (_QWORD *)sub_223203A34(v2, (_WORD *)(v5 + 8));
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = result[3];
    v9 = *(_QWORD *)(v6 - 8);
    v8 = (_QWORD *)(v6 - 8);
    v7 = v9;
    *v8 = 0;
    if (v9)
    {
      sub_223167354(v7 + 8);
      v10 = nullsub_30(v7);
      result = (_QWORD *)MEMORY[0x227684CE8](v10, 0x10E1C404B2A450ELL);
    }
    v2[3] = v8;
  }
  *a2 = v5;
  return result;
}

void sub_2232039F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223203A0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = nullsub_30(v1);
  MEMORY[0x227684CE8](v3, 0x10E1C404B2A450ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_223203A34@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_223203C80(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24D78;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_22449C258((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_224494BA4(result);
    return MEMORY[0x227684CE8](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_223203B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223203D80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223203B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_223203D80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223203B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223203D80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223203B9C(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223203BD8()
{
  return 32;
}

uint64_t sub_223203BE0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223203BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 88, 3, a1 + 100, 4);
}

uint64_t sub_223203C04(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223203C80@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_24EC24C98;
  sub_22449AE68(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC24CE0;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_2244E32B8((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_224494BA4((uint64_t)v5);
}

void sub_223203D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C40A44A61E0);
  sub_224494BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223203D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224494BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223203D80(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224494BA4(v2);
    MEMORY[0x227684CE8](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_223203DC8()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223203DDC()
{
  return 32;
}

__int128 *sub_223203DE8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A390);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A390))
  {
    v2 = sub_223203EC0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578A378, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578A388 = *((_QWORD *)v2 + 2);
      xmmword_25578A378 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578A378, &dword_22314D000);
    __cxa_guard_release(&qword_25578A390);
  }
  if (byte_25578A38F >= 0)
    return &xmmword_25578A378;
  else
    return (__int128 *)xmmword_25578A378;
}

void sub_223203EA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A390);
  _Unwind_Resume(a1);
}

__int128 *sub_223203EC0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A3B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A3B0))
    return &xmmword_25578A398;
  v2 = sub_223203F9C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578A398, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578A3A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578A398 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578A398, &dword_22314D000);
  __cxa_guard_release(&qword_25578A3B0);
  return &xmmword_25578A398;
}

void sub_223203F84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A3B0);
  _Unwind_Resume(a1);
}

std::string *sub_223203F9C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A3D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A3D0))
    return &stru_25578A3B8;
  sub_2232041B4((uint64_t)__p);
  sub_22320408C((char *)__p, &stru_25578A3B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A3B8, &dword_22314D000);
  __cxa_guard_release(&qword_25578A3D0);
  return &stru_25578A3B8;
}

void sub_22320404C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578A3D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578A3D0);
  _Unwind_Resume(a1);
}

void sub_22320408C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231EFDB4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_223204188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232041B4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578A3F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578A3F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba32f>]", qword_25578A3D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578A3D8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A3F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578A410);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578A410))
  {
    v5 = sub_2231A38CC(qword_25578A3D8, "<", 0);
    sub_2231A37C8(qword_25578A3D8, 0, v5, qword_25578A3F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578A3F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A410);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578A430);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A430))
  {
    sub_224573040((uint64_t)qword_25578A3F8, (uint64_t)&xmmword_25578A418);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578A418, &dword_22314D000);
    __cxa_guard_release(&qword_25578A430);
  }
  if (byte_25578A42F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578A418, *((unint64_t *)&xmmword_25578A418 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578A418;
    *(_QWORD *)(a1 + 16) = unk_25578A428;
  }
}

void sub_223204350(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A430);
  _Unwind_Resume(a1);
}

void sub_223204368(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A410);
  _Unwind_Resume(a1);
}

void sub_223204380(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A3F0);
  _Unwind_Resume(a1);
}

void sub_22320439C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232043C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_224494BA4(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2232043F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223204464(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24DC8;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_2232044D8(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24DC8;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_223204550(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_22320465C(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    sub_223167354(v2 + 8);
    v5 = nullsub_30(v2);
    MEMORY[0x227684CE8](v5, 0x10E1C404B2A450ELL);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_2232045EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_18AutoReturn"
                     "ingMakeTIS7_NS_5recon5frame16ImageInitializerILS5_32EEENSA_13ImageReleaserILS5_32EEEEENSt3__110shar"
                     "ed_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_"
                     "EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_1"
                                "8AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_32EEENSA_13ImageReleaserILS"
                                "5_32EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS"
                                "7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_32EEENSA_13ImageReleaserILS5_32EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_32EEENSA_13ImageReleaserILS5_32EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_22320465C(std::mutex *a1, uint64_t a2)
{
  uint64_t sig;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    v11 = a2;
    std::mutex::lock((std::mutex *)(sig + 56));
    v5 = *(uint64_t **)(sig + 24);
    if ((unint64_t)v5 >= *(_QWORD *)(sig + 32))
    {
      v7 = sub_223204760((_QWORD *)(sig + 16), &v11);
    }
    else
    {
      v6 = v11;
      v11 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *(_QWORD *)(sig + 24) = v7;
    std::mutex::unlock((std::mutex *)(sig + 56));
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      sub_223167354(v8 + 8);
      v9 = nullsub_30(v8);
      MEMORY[0x227684CE8](v9, 0x10E1C404B2A450ELL);
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_223204720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_223203124(&a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_223204744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_223203124((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_223204760(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_22316E078();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_223174E94();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
      {
        sub_223167354(v27 + 8);
        v29 = nullsub_30(v27);
        MEMORY[0x227684CE8](v29, 0x10E1C404B2A450ELL);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

uint64_t sub_22320492C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 108);
  v5 = 4 * *(_DWORD *)(result + 112);
  if (v4 != *(_DWORD *)(a2 + 108) || v4 != v5)
  {
    v16 = (4 * *(_DWORD *)(result + 112));
    return sub_223204AE8(result, a2, (unsigned int *)&v16);
  }
  v7 = *(unsigned int *)(result + 116) * (unint64_t)v5;
  v8 = *(const void **)(result + 80);
  if (*(_BYTE *)(result + 128))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(result + 8);
    v11 = *(std::__shared_weak_count **)(result + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v10 + 88))(v10, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
    v8 = *(const void **)(v3 + 80);
  }
  if (v7)
  {
    if (!v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_27:
        abort();
    }
  }
  v15 = *(void **)(a2 + 32);
  if (*(_BYTE *)(a2 + 128) && v15)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v15 = *(void **)(a2 + 32);
  }
  if (v7 && !v15)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_27;
    }
    return (uint64_t)memmove(v15, v8, 4 * v7);
  }
  if (v7)
    return (uint64_t)memmove(v15, v8, 4 * v7);
  return result;
}

uint64_t sub_223204AE8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (!v6)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_20;
    }
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!*(_BYTE *)(a1 + 129))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
        v16 = *(_QWORD *)(a2 + 8);
        v15 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v15)
          goto LABEL_25;
        goto LABEL_21;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a1 + 129))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v6)
    goto LABEL_16;
LABEL_20:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_25;
LABEL_21:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_30;
    goto LABEL_26;
  }
LABEL_25:
  if (!v16)
    goto LABEL_30;
LABEL_26:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 88))
      goto LABEL_34;
    goto LABEL_31;
  }
LABEL_30:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 88))
    goto LABEL_34;
LABEL_31:
  if (*(_DWORD *)(a1 + 92) && *(_DWORD *)(a1 + 96))
    sub_223204D3C(a3, a1, a2);
LABEL_34:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223204CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_223204D3C(unsigned int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  _QWORD v27[6];

  v4 = *(_DWORD *)(a2 + 88);
  v3 = *(_DWORD *)(a2 + 92);
  v5 = *(_DWORD *)(a2 + 96);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v10 = (uint64_t *)result;
    v21 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 104);
    v12 = *(unsigned int *)(a3 + 104);
    v22 = *(unsigned int *)(a2 + 100) | ((unint64_t)*(unsigned int *)(a3 + 100) << 32);
    v20 = 0;
    v23 = v3 - 1;
    v24 = v11 | (v12 << 32);
    v25 = v5 - 1;
    v26 = *(unsigned int *)(a2 + 108) | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v13 = *(char **)(a2 + 80);
    if (*(_BYTE *)(a2 + 128) && v13)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v14 + 88))(v14, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v13 = *(char **)(a2 + 80);
    }
    v19 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 128))
    {
      if (v19)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v19 = *(char **)(a3 + 32);
      }
    }
    v27[2] = 0;
    v27[3] = 0;
    v27[0] = 0;
    v27[1] = 1;
    v27[4] = 1;
    v27[5] = 0;
    return sub_223204EA0((unsigned int *)&v20, (uint64_t)v27, v10, v13, v19);
  }
  return result;
}

unsigned int *sub_223204EA0(unsigned int *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = __dst;
  v6 = __src;
  v9 = result[6];
  v10 = result[7];
  v11 = result[3] | (unint64_t)(v9 << 32);
  v12 = result[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = __src;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = __dst;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  if (result[8])
  {
    v13 = result;
    v14 = 0;
    do
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v15 = *a3;
      v16 = v5;
      v17 = *a3;
      if (!v6)
      {
        v16 = v5;
        v17 = *a3;
        if (v15)
        {
          result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_23;
          v17 = *a3;
          v16 = *(void **)(a2 + 24);
        }
      }
      if (!v16)
      {
        if (v17)
        {
          result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_23;
        }
      }
      if (v15)
        result = (unsigned int *)memmove(v16, v6, 4 * v15);
      v6 += 4 * v13[9];
      v5 += 4 * v13[10];
    }
    while (++v14 < v13[8]);
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v18 = *a3;
  v19 = *a3;
  if (!v6 && v18)
  {
    result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      goto LABEL_23;
    v19 = *a3;
    v5 = *(char **)(a2 + 24);
  }
  if (!v5)
  {
    if (v19)
    {
      result = (unsigned int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_23:
        abort();
    }
  }
  if (v18)
    return (unsigned int *)memmove(v5, v6, 4 * v18);
  return result;
}

uint64_t sub_2232050AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_20:
      v21 = 0;
      v14 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v13)
        goto LABEL_25;
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_20;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_20;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 81))
    goto LABEL_20;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v21, v4, 0);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_25;
LABEL_21:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_25:
    if (!v14)
      goto LABEL_29;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v20, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_30;
  }
LABEL_29:
  v20 = 0;
LABEL_30:
  sub_2232052D0(a1, a2);
  v18 = v20;
  v20 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22320526C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232052D0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 64);
  v5 = *(_DWORD *)(result + 76);
  if (v5 != *(_DWORD *)(a2 + 76) || v5 != v4)
  {
    v16 = *(unsigned int *)(result + 64);
    return sub_22320548C(result, a2, &v16);
  }
  v7 = *(unsigned int *)(result + 68) * (unint64_t)v4;
  v8 = *(const void **)(result + 56);
  if (*(_BYTE *)(result + 80))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(result + 8);
    v11 = *(std::__shared_weak_count **)(result + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v10 + 88))(v10, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
    v8 = *(const void **)(v3 + 56);
  }
  if (v7)
  {
    if (!v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_27:
        abort();
    }
  }
  v15 = *(void **)(a2 + 32);
  if (*(_BYTE *)(a2 + 80) && v15)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v15 = *(void **)(a2 + 32);
  }
  if (v7 && !v15)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_27;
    }
    return (uint64_t)memmove(v15, v8, 4 * v7);
  }
  if (v7)
    return (uint64_t)memmove(v15, v8, 4 * v7);
  return result;
}

uint64_t sub_22320548C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (!v6)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_20;
    }
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!*(_BYTE *)(a1 + 81))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
        v16 = *(_QWORD *)(a2 + 8);
        v15 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v15)
          goto LABEL_25;
        goto LABEL_21;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a1 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v6)
    goto LABEL_16;
LABEL_20:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_25;
LABEL_21:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_30;
    goto LABEL_26;
  }
LABEL_25:
  if (!v16)
    goto LABEL_30;
LABEL_26:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 64))
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_30:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 64))
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)(a1 + 68))
    sub_2232056D8(a3, a1, a2);
LABEL_33:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223205674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2232056D8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD v23[2];

  v4 = *(_DWORD *)(a2 + 64);
  v3 = *(_DWORD *)(a2 + 68);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = result;
    v19 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 76);
    v10 = *(unsigned int *)(a3 + 76);
    v20 = *(unsigned int *)(a2 + 72) | ((unint64_t)*(unsigned int *)(a3 + 72) << 32);
    v18 = 0;
    v21 = v3 - 1;
    v22 = v9 | (v10 << 32);
    v11 = *(char **)(a2 + 56);
    if (*(_BYTE *)(a2 + 80) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v11 = *(char **)(a2 + 56);
    }
    v17 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 80))
    {
      if (v17)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v17 = *(char **)(a3 + 32);
      }
    }
    memset(v23, 0, sizeof(v23));
    return (uint64_t *)sub_223205814((uint64_t)&v18, (uint64_t)v23, v8, v11, v17);
  }
  return result;
}

uint64_t sub_223205814(uint64_t result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = __dst;
  v6 = __src;
  v9 = *(_DWORD *)(result + 12);
  v10 = *(_DWORD *)(result + 16);
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  if (*(_DWORD *)(result + 20))
  {
    v11 = (_DWORD *)result;
    v12 = 0;
    do
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v13 = *a3;
      v14 = v5;
      v15 = *a3;
      if (!v6)
      {
        v14 = v5;
        v15 = *a3;
        if (v13)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_23;
          v15 = *a3;
          v14 = *(void **)(a2 + 16);
        }
      }
      if (!v14)
      {
        if (v15)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_23;
        }
      }
      if (v13)
        result = (uint64_t)memmove(v14, v6, 4 * v13);
      v6 += 4 * v11[6];
      v5 += 4 * v11[7];
    }
    while (++v12 < v11[5]);
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v16 = *a3;
  v17 = *a3;
  if (!v6 && v16)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      goto LABEL_23;
    v17 = *a3;
    v5 = *(char **)(a2 + 16);
  }
  if (!v5)
  {
    if (v17)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_23:
        abort();
    }
  }
  if (v16)
    return (uint64_t)memmove(v5, v6, 4 * v16);
  return result;
}

uint64_t sub_223205A14(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_18;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10)
      goto LABEL_14;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v23 = 0;
    v15 = *(_QWORD *)(a2 + 8);
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(&v23, v5, 0);
  v15 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_23;
LABEL_19:
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
LABEL_23:
    if (!v15)
      goto LABEL_27;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v15)
    goto LABEL_27;
LABEL_24:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_28;
  }
LABEL_27:
  v22 = 0;
LABEL_28:
  v19.n128_u64[0] = sub_223205C38(a1, a2, a3);
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v20 + 8))(v20, v19.n128_f32[0]);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v19);
  return result;
}

void sub_223205BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int16 sub_223205C38@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  unsigned int v5;
  int v6;
  unint64_t v8;
  __n128 *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  __n128 v25;
  unsigned __int16 v26;
  uint64_t v28;

  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 44);
  if (v6 != *(_DWORD *)(a2 + 76) || v6 != v5)
  {
    v28 = *(unsigned int *)(a1 + 32);
    sub_223205E64(a1, a2, &v28, a3);
    return a3.n128_u16[0];
  }
  v8 = *(unsigned int *)(a1 + 36) * (unint64_t)v5;
  v9 = *(__n128 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48))
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v9 = *(__n128 **)(a1 + 24);
  }
  if (v8
    && !v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_26:
    abort();
  }
  v16 = *(__n128 **)(a2 + 32);
  if (*(_BYTE *)(a2 + 80) && v16)
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v16 = *(__n128 **)(a2 + 32);
  }
  if (!v8 || v16)
  {
    if (!v8)
      return a3.n128_u16[0];
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_26;
  }
  v17 = (v8 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v17 < 0xF || (unint64_t)((char *)v16 - (char *)v9) < 0x20)
  {
    v20 = (unsigned __int16 *)v16;
    v21 = (unsigned __int16 *)v9;
    do
    {
LABEL_35:
      v26 = *v21++;
      a3.n128_u16[0] = v26;
      *v20++ = v26;
    }
    while (v21 != (unsigned __int16 *)((char *)v9 + 2 * v8));
    return a3.n128_u16[0];
  }
  v18 = v17 + 1;
  v19 = (v17 + 1) & 0xFFFFFFFFFFFFFFF0;
  v20 = (unsigned __int16 *)v16 + v19;
  v21 = (unsigned __int16 *)v9 + v19;
  v22 = v9 + 1;
  v23 = v16 + 1;
  v24 = v19;
  do
  {
    a3 = v22[-1];
    v25 = *v22;
    v23[-1] = a3;
    *v23 = v25;
    v22 += 2;
    v23 += 2;
    v24 -= 16;
  }
  while (v24);
  if (v18 != v19)
    goto LABEL_35;
  return a3.n128_u16[0];
}

uint64_t sub_223205E64(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_18;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v12)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v12)
      goto LABEL_14;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(_BYTE *)(a1 + 49))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v24, v7, 0);
    v17 = *(_QWORD *)(a2 + 8);
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v16)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v24 = 0;
  v17 = *(_QWORD *)(a2 + 8);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
    goto LABEL_23;
LABEL_19:
  v18 = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v17)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v17)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v23, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_31;
    goto LABEL_29;
  }
LABEL_28:
  v23 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)(a1 + 36))
    a4.n128_f64[0] = sub_2232060B0(a3, a1, a2);
LABEL_31:
  v21 = v23;
  v23 = 0;
  if (v21)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v21 + 8))(v21, a4);
  result = v24;
  v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_22320604C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_2232060B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD v24[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v20 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(unsigned int *)(a3 + 76);
    v21 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a3 + 72) << 32);
    v19 = 0;
    v22 = v3 - 1;
    v23 = v9 | (v10 << 32);
    v11 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(_QWORD *)(a2 + 24);
    }
    v17 = *(_QWORD *)(a3 + 32);
    if (*(_BYTE *)(a3 + 80))
    {
      if (v17)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v17 = *(_QWORD *)(a3 + 32);
      }
    }
    memset(v24, 0, sizeof(v24));
    *(_QWORD *)&result = sub_2231C1A98(&v19, (uint64_t)v24, a1, v11, v17);
  }
  return result;
}

uint64_t sub_2232061EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v21 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v13)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v21, v4, 0);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_23;
LABEL_19:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_23:
    if (!v14)
      goto LABEL_27;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
    goto LABEL_27;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v20, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_28;
  }
LABEL_27:
  v20 = 0;
LABEL_28:
  sub_223206410(a1, a2);
  v18 = v20;
  v20 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2232063AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223206410(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  v5 = 4 * *(_DWORD *)(result + 56);
  if (v4 != *(_DWORD *)(a2 + 108) || v4 != v5)
  {
    v16 = (4 * *(_DWORD *)(result + 56));
    return sub_2232065CC(result, a2, (unsigned int *)&v16);
  }
  v7 = *(unsigned int *)(result + 60) * (unint64_t)v5;
  v8 = *(const void **)(result + 24);
  if (*(_BYTE *)(result + 72))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(result + 8);
    v11 = *(std::__shared_weak_count **)(result + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v10 + 88))(v10, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(const void **)(v3 + 24);
  }
  if (v7)
  {
    if (!v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_27:
        abort();
    }
  }
  v15 = *(void **)(a2 + 32);
  if (*(_BYTE *)(a2 + 128) && v15)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v15 = *(void **)(a2 + 32);
  }
  if (v7 && !v15)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_27;
    }
    return (uint64_t)memmove(v15, v8, 4 * v7);
  }
  if (v7)
    return (uint64_t)memmove(v15, v8, 4 * v7);
  return result;
}

uint64_t sub_2232065CC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_18;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
    v16 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_23;
LABEL_19:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v16)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_223206820(a3, a1, a2);
LABEL_32:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2232067BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_223206820(unsigned int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  _QWORD v27[6];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v10 = (uint64_t *)result;
    v21 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 48);
    v12 = *(unsigned int *)(a3 + 104);
    v22 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 100) << 32);
    v20 = 0;
    v23 = v3 - 1;
    v24 = v11 | (v12 << 32);
    v25 = v5 - 1;
    v26 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v13 = *(char **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v13)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v14 + 88))(v14, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v13 = *(char **)(a2 + 24);
    }
    v19 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 128))
    {
      if (v19)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v19 = *(char **)(a3 + 32);
      }
    }
    v27[2] = 0;
    v27[3] = 0;
    v27[0] = 0;
    v27[1] = 1;
    v27[4] = 1;
    v27[5] = 0;
    return sub_223204EA0((unsigned int *)&v20, (uint64_t)v27, v10, v13, v19);
  }
  return result;
}

uint64_t sub_223206984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v21 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v13)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v21, v4, 0);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_23;
LABEL_19:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_23:
    if (!v14)
      goto LABEL_27;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
    goto LABEL_27;
LABEL_24:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v20, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_28;
  }
LABEL_27:
  v20 = 0;
LABEL_28:
  sub_223206BA8(a1, a2);
  v18 = v20;
  v20 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223206B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223206BA8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 44);
  if (v5 != *(_DWORD *)(a2 + 76) || v5 != v4)
  {
    v16 = *(unsigned int *)(result + 32);
    return sub_223206D64(result, a2, &v16);
  }
  v7 = *(unsigned int *)(result + 36) * (unint64_t)v4;
  v8 = *(const void **)(result + 24);
  if (*(_BYTE *)(result + 48))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(result + 8);
    v11 = *(std::__shared_weak_count **)(result + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v10 + 88))(v10, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(const void **)(v3 + 24);
  }
  if (v7)
  {
    if (!v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_27:
        abort();
    }
  }
  v15 = *(void **)(a2 + 32);
  if (*(_BYTE *)(a2 + 80) && v15)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v15 = *(void **)(a2 + 32);
  }
  if (v7 && !v15)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_27;
    }
    return (uint64_t)memmove(v15, v8, 4 * v7);
  }
  if (v7)
    return (uint64_t)memmove(v15, v8, 4 * v7);
  return result;
}

uint64_t sub_223206D64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_18;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (*(_BYTE *)(a1 + 49))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
    v16 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_23;
LABEL_19:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v16)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_31;
    goto LABEL_29;
  }
LABEL_28:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)(a1 + 36))
    sub_223206FB0(a3, a1, a2);
LABEL_31:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223206F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223206FB0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD v23[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = result;
    v19 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(unsigned int *)(a3 + 76);
    v20 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a3 + 72) << 32);
    v18 = 0;
    v21 = v3 - 1;
    v22 = v9 | (v10 << 32);
    v11 = *(char **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(char **)(a2 + 24);
    }
    v17 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 80))
    {
      if (v17)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v17 = *(char **)(a3 + 32);
      }
    }
    memset(v23, 0, sizeof(v23));
    return (uint64_t *)sub_223205814((uint64_t)&v18, (uint64_t)v23, v8, v11, v17);
  }
  return result;
}

void sub_2232070EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232070FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22320712C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v1);
      v6 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v6);
    }
  }
}

_QWORD *sub_2232071B8(_QWORD *a1, _DWORD *a2, unint64_t *a3, char a4, __int128 *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  BOOL v49;
  uint64_t v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v80;
  _DWORD v81[3];
  unsigned int v82;
  unsigned int v83;
  char v84;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = HIDWORD(v11);
  v15 = 180 * (v12 * HIDWORD(v11));
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  sub_2244E324C(a1, v15, v19);
  v20 = *(_QWORD *)a2;
  a1[3] = *(_QWORD *)a2;
  a1[4] = (0xB400000000 * v14) | (180 * v11) & 0xFFFFFFFC;
  v21 = a1[1];
  if (v21)
  {
    v22 = 180 * (int)v11 / 0xB4u;
    v23 = (381774871 * (unint64_t)((45 * (_DWORD)v14) & 0x3FFFFFFF)) >> 34;
    if (a6)
    {
      if (HIDWORD(v20))
        v24 = (_DWORD)v20 == 0;
      else
        v24 = 1;
      if (v24)
        v25 = 0;
      else
        v25 = v20;
      if ((_DWORD)v23 * HIDWORD(v25) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if ((_DWORD)v25 && HIDWORD(v25))
      {
        v26 = v25 - 1;
        v27 = HIDWORD(v25) - 1;
        if (HIDWORD(v25) != 1)
        {
          if ((_DWORD)v25 == 1)
          {
            do
            {
              v52 = *a5;
              v53 = a5[1];
              v54 = a5[3];
              *(_OWORD *)(v21 + 32) = a5[2];
              *(_OWORD *)(v21 + 48) = v54;
              *(_OWORD *)v21 = v52;
              *(_OWORD *)(v21 + 16) = v53;
              v55 = a5[4];
              v56 = a5[5];
              v57 = a5[7];
              *(_OWORD *)(v21 + 96) = a5[6];
              *(_OWORD *)(v21 + 112) = v57;
              *(_OWORD *)(v21 + 64) = v55;
              *(_OWORD *)(v21 + 80) = v56;
              v58 = a5[8];
              v59 = a5[9];
              v60 = a5[10];
              *(_DWORD *)(v21 + 176) = *((_DWORD *)a5 + 44);
              *(_OWORD *)(v21 + 144) = v59;
              *(_OWORD *)(v21 + 160) = v60;
              *(_OWORD *)(v21 + 128) = v58;
              v21 += 180 * v23;
              --v27;
            }
            while (v27);
          }
          else
          {
            v28 = 0;
            do
            {
              v29 = v21;
              v30 = v25 - 1;
              do
              {
                v31 = *a5;
                v32 = a5[1];
                v33 = a5[3];
                *(_OWORD *)(v29 + 32) = a5[2];
                *(_OWORD *)(v29 + 48) = v33;
                *(_OWORD *)v29 = v31;
                *(_OWORD *)(v29 + 16) = v32;
                v34 = a5[4];
                v35 = a5[5];
                v36 = a5[7];
                *(_OWORD *)(v29 + 96) = a5[6];
                *(_OWORD *)(v29 + 112) = v36;
                *(_OWORD *)(v29 + 64) = v34;
                *(_OWORD *)(v29 + 80) = v35;
                v37 = a5[8];
                v38 = a5[9];
                v39 = a5[10];
                *(_DWORD *)(v29 + 176) = *((_DWORD *)a5 + 44);
                *(_OWORD *)(v29 + 144) = v38;
                *(_OWORD *)(v29 + 160) = v39;
                *(_OWORD *)(v29 + 128) = v37;
                v29 += 180 * v22;
                --v30;
              }
              while (v30);
              v40 = *a5;
              v41 = a5[1];
              v42 = a5[3];
              *(_OWORD *)(v29 + 32) = a5[2];
              *(_OWORD *)(v29 + 48) = v42;
              *(_OWORD *)v29 = v40;
              *(_OWORD *)(v29 + 16) = v41;
              v43 = a5[4];
              v44 = a5[5];
              v45 = a5[7];
              *(_OWORD *)(v29 + 96) = a5[6];
              *(_OWORD *)(v29 + 112) = v45;
              *(_OWORD *)(v29 + 64) = v43;
              *(_OWORD *)(v29 + 80) = v44;
              v46 = a5[8];
              v47 = a5[9];
              v48 = a5[10];
              *(_DWORD *)(v29 + 176) = *((_DWORD *)a5 + 44);
              *(_OWORD *)(v29 + 144) = v47;
              *(_OWORD *)(v29 + 160) = v48;
              *(_OWORD *)(v29 + 128) = v46;
              v21 += 180 * v23;
              ++v28;
            }
            while (v28 != v27);
          }
        }
        if ((_DWORD)v25 != 1)
        {
          do
          {
            v61 = *a5;
            v62 = a5[1];
            v63 = a5[3];
            *(_OWORD *)(v21 + 32) = a5[2];
            *(_OWORD *)(v21 + 48) = v63;
            *(_OWORD *)v21 = v61;
            *(_OWORD *)(v21 + 16) = v62;
            v64 = a5[4];
            v65 = a5[5];
            v66 = a5[7];
            *(_OWORD *)(v21 + 96) = a5[6];
            *(_OWORD *)(v21 + 112) = v66;
            *(_OWORD *)(v21 + 64) = v64;
            *(_OWORD *)(v21 + 80) = v65;
            v67 = a5[8];
            v68 = a5[9];
            v69 = a5[10];
            *(_DWORD *)(v21 + 176) = *((_DWORD *)a5 + 44);
            *(_OWORD *)(v21 + 144) = v68;
            *(_OWORD *)(v21 + 160) = v69;
            *(_OWORD *)(v21 + 128) = v67;
            v21 += 180 * v22;
            --v26;
          }
          while (v26);
        }
        v70 = *a5;
        v71 = a5[1];
        v72 = a5[3];
        *(_OWORD *)(v21 + 32) = a5[2];
        *(_OWORD *)(v21 + 48) = v72;
        *(_OWORD *)v21 = v70;
        *(_OWORD *)(v21 + 16) = v71;
        v73 = a5[4];
        v74 = a5[5];
        v75 = a5[7];
        *(_OWORD *)(v21 + 96) = a5[6];
        *(_OWORD *)(v21 + 112) = v75;
        *(_OWORD *)(v21 + 64) = v73;
        *(_OWORD *)(v21 + 80) = v74;
        v76 = a5[8];
        v77 = a5[9];
        v78 = a5[10];
        *(_DWORD *)(v21 + 176) = *((_DWORD *)a5 + 44);
        *(_OWORD *)(v21 + 144) = v77;
        *(_OWORD *)(v21 + 160) = v78;
        *(_OWORD *)(v21 + 128) = v76;
      }
    }
    else
    {
      if (HIDWORD(v20))
        v49 = (_DWORD)v20 == 0;
      else
        v49 = 1;
      if (v49)
        v50 = 0;
      else
        v50 = v20;
      if ((_DWORD)v23 * HIDWORD(v50) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if ((_DWORD)v50 && HIDWORD(v50))
      {
        v81[0] = 0;
        v81[1] = v50 - 1;
        v84 = 0;
        v81[2] = v22;
        v82 = HIDWORD(v50) - 1;
        v83 = v23;
        if (HIDWORD(v50) != 1)
        {
          v51 = 0;
          do
          {
            sub_2232075CC((uint64_t)v81, (uint64_t)&v84, (uint64_t)&v80, v21);
            v21 += 180 * v83;
            ++v51;
          }
          while (v51 < v82);
        }
        sub_2232075CC((uint64_t)v81, (uint64_t)&v84, (uint64_t)&v80, v21);
      }
    }
  }
  return a1;
}

void sub_22320757C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231DD28C(v1);
  _Unwind_Resume(a1);
}

void sub_223207590(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231DD28C(v1);
  _Unwind_Resume(a1);
}

void sub_2232075A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231DD28C(v1);
  _Unwind_Resume(a1);
}

void sub_2232075B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231DD28C(v1);
  _Unwind_Resume(a1);
}

double sub_2232075CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  int32x4_t v5;
  int32x4_t v6;
  double result;

  if (*(_DWORD *)(a1 + 4))
  {
    v4 = 0;
    v5 = vdupq_n_s32(0x3CF83E10u);
    do
    {
      *(_QWORD *)(a4 + 148) = 0;
      *(_QWORD *)(a4 + 140) = 0;
      *(_QWORD *)(a4 + 156) = 0;
      *(int32x4_t *)a4 = v5;
      *(int32x4_t *)(a4 + 16) = v5;
      *(int32x4_t *)(a4 + 32) = v5;
      *(int32x4_t *)(a4 + 48) = v5;
      *(int32x4_t *)(a4 + 64) = v5;
      *(int32x4_t *)(a4 + 80) = v5;
      *(int32x4_t *)(a4 + 96) = v5;
      *(int32x4_t *)(a4 + 112) = v5;
      *(_DWORD *)(a4 + 128) = 1022901776;
      *(_BYTE *)(a4 + 132) = 32;
      *(_DWORD *)(a4 + 136) = 0;
      *(_BYTE *)(a4 + 164) = 0;
      *(_QWORD *)(a4 + 168) = 1065353216;
      *(_DWORD *)(a4 + 176) = 0;
      a4 += 180 * *(unsigned int *)(a1 + 8);
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 4));
  }
  *(_QWORD *)(a4 + 148) = 0;
  *(_QWORD *)(a4 + 140) = 0;
  *(_QWORD *)(a4 + 156) = 0;
  v6 = vdupq_n_s32(0x3CF83E10u);
  *(int32x4_t *)a4 = v6;
  *(int32x4_t *)(a4 + 16) = v6;
  *(int32x4_t *)(a4 + 32) = v6;
  *(int32x4_t *)(a4 + 48) = v6;
  *(int32x4_t *)(a4 + 64) = v6;
  *(int32x4_t *)(a4 + 80) = v6;
  *(int32x4_t *)(a4 + 96) = v6;
  *(int32x4_t *)(a4 + 112) = v6;
  *(_DWORD *)(a4 + 128) = 1022901776;
  *(_BYTE *)(a4 + 132) = 32;
  *(_DWORD *)(a4 + 136) = 0;
  *(_BYTE *)(a4 + 164) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a4 + 168) = 1065353216;
  *(_DWORD *)(a4 + 176) = 0;
  return result;
}

uint64_t sub_223207688(uint64_t a1, uint64_t a2)
{
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12[3];

  v4 = sub_2244E3344(a2);
  sub_2244E324C((_QWORD *)a1, v4, *(_QWORD *)(a2 + 16));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = v5 / 0xB4uLL;
  v7 = (381774871 * (v5 >> 34)) >> 34;
  v8 = v6 | (v7 << 32);
  if (*(_DWORD *)(a2 + 28))
    v9 = *(_DWORD *)(a2 + 24) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a2 + 24);
  if (v9)
    v10 = 0;
  v12[0] = *(_QWORD *)(a2 + 8);
  v12[1] = v10;
  v12[2] = v8;
  if ((_DWORD)v7 * HIDWORD(v10) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223207788(a1, v12);
  return a1;
}

void sub_223207774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2244E3314(v1);
  _Unwind_Resume(a1);
}

__n128 sub_223207788(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  __n128 result;
  int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v2 = *((_DWORD *)a2 + 2);
  v3 = *((_DWORD *)a2 + 3);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (381774871 * (v7 >> 34)) >> 34;
    if (*(_DWORD *)(a1 + 28))
      v9 = *(_DWORD *)(a1 + 24) == 0;
    else
      v9 = 1;
    if (v9)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 28);
    if (v10 * (_DWORD)v8 == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v2 = *((_DWORD *)a2 + 2);
      v3 = *((_DWORD *)a2 + 3);
    }
    if (v2 && v3)
    {
      v12 = v2 - 1;
      v13 = *((_DWORD *)a2 + 4);
      v14 = v7 / 0xB4;
      v15 = (__int128 *)*a2;
      v16 = v3 - 1;
      if (v16)
      {
        v17 = *((_DWORD *)a2 + 5);
        if (v12)
        {
          v18 = 0;
          v19 = 180 * v17;
          do
          {
            v20 = v6;
            v21 = v15;
            v22 = v12;
            do
            {
              v23 = *v21;
              v24 = v21[1];
              v25 = v21[3];
              *(_OWORD *)(v20 + 32) = v21[2];
              *(_OWORD *)(v20 + 48) = v25;
              *(_OWORD *)v20 = v23;
              *(_OWORD *)(v20 + 16) = v24;
              v26 = v21[4];
              v27 = v21[5];
              v28 = v21[7];
              *(_OWORD *)(v20 + 96) = v21[6];
              *(_OWORD *)(v20 + 112) = v28;
              *(_OWORD *)(v20 + 64) = v26;
              *(_OWORD *)(v20 + 80) = v27;
              v29 = v21[8];
              v30 = v21[9];
              v31 = v21[10];
              *(_DWORD *)(v20 + 176) = *((_DWORD *)v21 + 44);
              *(_OWORD *)(v20 + 144) = v30;
              *(_OWORD *)(v20 + 160) = v31;
              *(_OWORD *)(v20 + 128) = v29;
              v21 = (__int128 *)((char *)v21 + 180 * v13);
              v20 += 180 * v14;
              --v22;
            }
            while (v22);
            v32 = *v21;
            v33 = v21[1];
            v34 = v21[3];
            *(_OWORD *)(v20 + 32) = v21[2];
            *(_OWORD *)(v20 + 48) = v34;
            *(_OWORD *)v20 = v32;
            *(_OWORD *)(v20 + 16) = v33;
            v35 = v21[4];
            v36 = v21[5];
            v37 = v21[7];
            *(_OWORD *)(v20 + 96) = v21[6];
            *(_OWORD *)(v20 + 112) = v37;
            *(_OWORD *)(v20 + 64) = v35;
            *(_OWORD *)(v20 + 80) = v36;
            v38 = v21[8];
            v39 = v21[9];
            v40 = v21[10];
            *(_DWORD *)(v20 + 176) = *((_DWORD *)v21 + 44);
            *(_OWORD *)(v20 + 144) = v39;
            *(_OWORD *)(v20 + 160) = v40;
            *(_OWORD *)(v20 + 128) = v38;
            v15 = (__int128 *)((char *)v15 + v19);
            v6 += 180 * v8;
            ++v18;
          }
          while (v18 != v16);
        }
        else
        {
          do
          {
            v41 = *v15;
            v42 = v15[1];
            v43 = v15[3];
            *(_OWORD *)(v6 + 32) = v15[2];
            *(_OWORD *)(v6 + 48) = v43;
            *(_OWORD *)v6 = v41;
            *(_OWORD *)(v6 + 16) = v42;
            v44 = v15[4];
            v45 = v15[5];
            v46 = v15[7];
            *(_OWORD *)(v6 + 96) = v15[6];
            *(_OWORD *)(v6 + 112) = v46;
            *(_OWORD *)(v6 + 64) = v44;
            *(_OWORD *)(v6 + 80) = v45;
            v47 = v15[8];
            v48 = v15[9];
            v49 = v15[10];
            *(_DWORD *)(v6 + 176) = *((_DWORD *)v15 + 44);
            *(_OWORD *)(v6 + 144) = v48;
            *(_OWORD *)(v6 + 160) = v49;
            *(_OWORD *)(v6 + 128) = v47;
            v15 = (__int128 *)((char *)v15 + 180 * v17);
            v6 += 180 * v8;
            --v16;
          }
          while (v16);
        }
      }
      if (v12)
      {
        v50 = 180 * v13;
        v51 = 180 * v14;
        do
        {
          v52 = *v15;
          v53 = v15[1];
          v54 = v15[3];
          *(_OWORD *)(v6 + 32) = v15[2];
          *(_OWORD *)(v6 + 48) = v54;
          *(_OWORD *)v6 = v52;
          *(_OWORD *)(v6 + 16) = v53;
          v55 = v15[4];
          v56 = v15[5];
          v57 = v15[7];
          *(_OWORD *)(v6 + 96) = v15[6];
          *(_OWORD *)(v6 + 112) = v57;
          *(_OWORD *)(v6 + 64) = v55;
          *(_OWORD *)(v6 + 80) = v56;
          v58 = v15[8];
          v59 = v15[9];
          v60 = v15[10];
          *(_DWORD *)(v6 + 176) = *((_DWORD *)v15 + 44);
          *(_OWORD *)(v6 + 144) = v59;
          *(_OWORD *)(v6 + 160) = v60;
          *(_OWORD *)(v6 + 128) = v58;
          v15 = (__int128 *)((char *)v15 + v50);
          v6 += v51;
          --v12;
        }
        while (v12);
      }
      v61 = *v15;
      v62 = v15[1];
      v63 = v15[3];
      *(_OWORD *)(v6 + 32) = v15[2];
      *(_OWORD *)(v6 + 48) = v63;
      *(_OWORD *)v6 = v61;
      *(_OWORD *)(v6 + 16) = v62;
      v64 = v15[4];
      v65 = v15[5];
      v66 = v15[7];
      *(_OWORD *)(v6 + 96) = v15[6];
      *(_OWORD *)(v6 + 112) = v66;
      *(_OWORD *)(v6 + 64) = v64;
      *(_OWORD *)(v6 + 80) = v65;
      result = (__n128)v15[8];
      v67 = v15[9];
      v68 = v15[10];
      *(_DWORD *)(v6 + 176) = *((_DWORD *)v15 + 44);
      *(_OWORD *)(v6 + 144) = v67;
      *(_OWORD *)(v6 + 160) = v68;
      *(__n128 *)(v6 + 128) = result;
    }
  }
  return result;
}

__n128 sub_223207A0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v6;
  BOOL v7;
  int v8;
  __int128 *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(_DWORD *)(*a1 + 8);
  v4 = *(_DWORD *)(v2 + 8);
  if (v3 == 1 && v4 == 1)
  {
    sub_223207BFC(a1);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 4);
    if (*(_DWORD *)v1)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *(_DWORD *)v1 - 1;
      v9 = *(__int128 **)(v1 + 40);
      v10 = *(_QWORD *)(v2 + 40);
      v11 = v6 - 1;
      if (v11)
      {
        v12 = *(_DWORD *)(v2 + 12);
        v13 = *(_DWORD *)(v1 + 12);
        if (*(_DWORD *)v1 == 1)
        {
          do
          {
            v39 = *v9;
            v40 = v9[1];
            v41 = v9[3];
            *(_OWORD *)(v10 + 32) = v9[2];
            *(_OWORD *)(v10 + 48) = v41;
            *(_OWORD *)v10 = v39;
            *(_OWORD *)(v10 + 16) = v40;
            v42 = v9[4];
            v43 = v9[5];
            v44 = v9[7];
            *(_OWORD *)(v10 + 96) = v9[6];
            *(_OWORD *)(v10 + 112) = v44;
            *(_OWORD *)(v10 + 64) = v42;
            *(_OWORD *)(v10 + 80) = v43;
            v45 = v9[8];
            v46 = v9[9];
            v47 = v9[10];
            *(_DWORD *)(v10 + 176) = *((_DWORD *)v9 + 44);
            *(_OWORD *)(v10 + 144) = v46;
            *(_OWORD *)(v10 + 160) = v47;
            *(_OWORD *)(v10 + 128) = v45;
            v9 = (__int128 *)((char *)v9 + 180 * v13);
            v10 += 180 * v12;
            --v11;
          }
          while (v11);
        }
        else
        {
          v14 = 0;
          v15 = 180 * v13;
          v16 = 180 * v12;
          do
          {
            v17 = v10;
            v18 = v9;
            v19 = v8;
            do
            {
              v20 = *v18;
              v21 = v18[1];
              v22 = v18[3];
              *(_OWORD *)(v17 + 32) = v18[2];
              *(_OWORD *)(v17 + 48) = v22;
              *(_OWORD *)v17 = v20;
              *(_OWORD *)(v17 + 16) = v21;
              v23 = v18[4];
              v24 = v18[5];
              v25 = v18[7];
              *(_OWORD *)(v17 + 96) = v18[6];
              *(_OWORD *)(v17 + 112) = v25;
              *(_OWORD *)(v17 + 64) = v23;
              *(_OWORD *)(v17 + 80) = v24;
              v26 = v18[8];
              v27 = v18[9];
              v28 = v18[10];
              *(_DWORD *)(v17 + 176) = *((_DWORD *)v18 + 44);
              *(_OWORD *)(v17 + 144) = v27;
              *(_OWORD *)(v17 + 160) = v28;
              *(_OWORD *)(v17 + 128) = v26;
              v18 = (__int128 *)((char *)v18 + 180 * v3);
              v17 += 180 * v4;
              --v19;
            }
            while (v19);
            v29 = *v18;
            v30 = v18[1];
            v31 = v18[3];
            *(_OWORD *)(v17 + 32) = v18[2];
            *(_OWORD *)(v17 + 48) = v31;
            *(_OWORD *)v17 = v29;
            *(_OWORD *)(v17 + 16) = v30;
            v32 = v18[4];
            v33 = v18[5];
            v34 = v18[7];
            *(_OWORD *)(v17 + 96) = v18[6];
            *(_OWORD *)(v17 + 112) = v34;
            *(_OWORD *)(v17 + 64) = v32;
            *(_OWORD *)(v17 + 80) = v33;
            v35 = v18[8];
            v36 = v18[9];
            v37 = v18[10];
            *(_DWORD *)(v17 + 176) = *((_DWORD *)v18 + 44);
            *(_OWORD *)(v17 + 144) = v36;
            *(_OWORD *)(v17 + 160) = v37;
            *(_OWORD *)(v17 + 128) = v35;
            v9 = (__int128 *)((char *)v9 + v15);
            v10 += v16;
            ++v14;
          }
          while (v14 != v11);
        }
      }
      if (v8)
      {
        v48 = 180 * v3;
        v49 = 180 * v4;
        do
        {
          v50 = *v9;
          v51 = v9[1];
          v52 = v9[3];
          *(_OWORD *)(v10 + 32) = v9[2];
          *(_OWORD *)(v10 + 48) = v52;
          *(_OWORD *)v10 = v50;
          *(_OWORD *)(v10 + 16) = v51;
          v53 = v9[4];
          v54 = v9[5];
          v55 = v9[7];
          *(_OWORD *)(v10 + 96) = v9[6];
          *(_OWORD *)(v10 + 112) = v55;
          *(_OWORD *)(v10 + 64) = v53;
          *(_OWORD *)(v10 + 80) = v54;
          v56 = v9[8];
          v57 = v9[9];
          v58 = v9[10];
          *(_DWORD *)(v10 + 176) = *((_DWORD *)v9 + 44);
          *(_OWORD *)(v10 + 144) = v57;
          *(_OWORD *)(v10 + 160) = v58;
          *(_OWORD *)(v10 + 128) = v56;
          v9 = (__int128 *)((char *)v9 + v48);
          v10 += v49;
          --v8;
        }
        while (v8);
      }
      v59 = *v9;
      v60 = v9[1];
      v61 = v9[3];
      *(_OWORD *)(v10 + 32) = v9[2];
      *(_OWORD *)(v10 + 48) = v61;
      *(_OWORD *)v10 = v59;
      *(_OWORD *)(v10 + 16) = v60;
      v62 = v9[4];
      v63 = v9[5];
      v64 = v9[7];
      *(_OWORD *)(v10 + 96) = v9[6];
      *(_OWORD *)(v10 + 112) = v64;
      *(_OWORD *)(v10 + 64) = v62;
      *(_OWORD *)(v10 + 80) = v63;
      result = (__n128)v9[8];
      v65 = v9[9];
      v66 = v9[10];
      *(_DWORD *)(v10 + 176) = *((_DWORD *)v9 + 44);
      *(_OWORD *)(v10 + 144) = v65;
      *(_OWORD *)(v10 + 160) = v66;
      *(__n128 *)(v10 + 128) = result;
    }
  }
  return result;
}

uint64_t *sub_223207BFC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 12))
  {
    v4 = *(_DWORD *)v1;
    if (v3 == *(_DWORD *)(v1 + 8) * *(_DWORD *)v1)
    {
      v5 = *(_DWORD *)(v1 + 4) * v4;
      v6 = *(const void **)(v1 + 40);
      if (v5)
        v7 = v6 == 0;
      else
        v7 = 0;
      if (v7)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      else if (!v5)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)(v2 + 40), v6, 180 * v5);
    }
  }
  else
  {
    v4 = *(_DWORD *)v1;
  }
  v9 = v4;
  if (v4)
    v8 = *(_DWORD *)(v1 + 4) == 0;
  else
    v8 = 1;
  if (!v8)
    return sub_223207D00(&v9, v1, v2);
  return result;
}

uint64_t *sub_223207D00(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *(char **)(a2 + 40);
    v7 = *(char **)(a3 + 40);
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 180 * *(unsigned int *)(a2 + 12);
      v10 = 180 * *(unsigned int *)(a3 + 12);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 180 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 180 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 180 * v12);
  }
  return result;
}

_QWORD *sub_223207E58(_QWORD *a1, int *a2)
{
  float *v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  std::logic_error *exception;

  *a1 = &off_24EC20868;
  a1[1] = *(_QWORD *)a2;
  v3 = (float *)(a1 + 1);
  *((_QWORD *)v3 + 1) = *((_QWORD *)a2 + 1);
  v4 = *a2;
  v5 = *((float *)a2 + 1);
  v6 = 1.0 / *(float *)a2;
  v7 = *((float *)a2 + 2);
  v8 = *((float *)a2 + 3);
  v3[4] = v6;
  v3[5] = 1.0 / v5;
  v3[6] = -(float)(v7 * v6);
  v3[7] = -(float)(v8 * (float)(1.0 / v5));
  *((_DWORD *)v3 + 8) = v4;
  *((_QWORD *)v3 + 5) = 0;
  v3[9] = 0.0;
  v3[12] = v5;
  v3[13] = 0.0;
  v3[14] = v7;
  v3[15] = v8;
  v3[16] = 1.0;
  if (!sub_223207F5C(v3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PinholeModel parameters invalid");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_223207F2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_223207F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

BOOL sub_223207F5C(float *a1)
{
  int v1;
  _BYTE v3[16];
  void *__p;
  char v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  char v11;
  char v12;
  unsigned __int8 v13;

  sub_22320802C(a1, (uint64_t)v3);
  v1 = v13;
  if (v13)
  {
    sub_22320846C((uint64_t)v3);
    if (v13)
      return v1 != 0;
  }
  if (!v12)
    return v1 != 0;
  if (v11)
  {
    if ((v10 & 0x80000000) == 0)
    {
      if ((v8 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_12:
      operator delete(v7);
      if (!v6)
        return v1 != 0;
      goto LABEL_9;
    }
    operator delete(v9);
    if (v8 < 0)
      goto LABEL_12;
  }
LABEL_8:
  if (!v6)
    return v1 != 0;
LABEL_9:
  if ((v5 & 0x80000000) == 0)
    return v1 != 0;
  operator delete(__p);
  return v1 != 0;
}

void sub_223208018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223197D38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22320802C(float *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  char v11;
  void *__dst[2];
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;

  v4 = ((_DWORD)a1[2] & 0x7FFFFFFFu) < 0x7F800000 && ((_DWORD)a1[3] & 0x7FFFFFFFu) < 0x7F800000;
  v5 = ((_DWORD)a1[1] & 0x7FFFFFFFu) < 0x7F800000 && (*(_DWORD *)a1 & 0x7FFFFFFFu) < 0x7F800000;
  if (!v5 || !v4)
  {
    sub_223208674(&v21, "focal length and principal point must be finite");
    v29 = 1;
    sub_2231A958C(0x16u, &v21, (uint64_t)&v30);
    *(_OWORD *)a2 = v30;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (!v40)
    {
      *(_BYTE *)(a2 + 120) = 0;
      goto LABEL_43;
    }
    *(_BYTE *)(a2 + 40) = 0;
    if (v33)
    {
      *(_OWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 32) = v32;
      v32 = 0;
      v31 = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!v39)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (!v33)
        goto LABEL_43;
      goto LABEL_41;
    }
    v8 = v36;
    *(_QWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 48) = v34;
    v35 = 0;
    v34 = 0uLL;
    *(_QWORD *)(a2 + 72) = v8;
    *(_OWORD *)(a2 + 80) = v37;
    *(_QWORD *)(a2 + 96) = v38;
    v38 = 0;
    v37 = 0uLL;
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (SHIBYTE(v38) < 0)
    {
      operator delete((void *)v37);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_32:
        if (!v33)
          goto LABEL_43;
        goto LABEL_41;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete((void *)v34);
    if (!v33)
      goto LABEL_43;
LABEL_41:
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
LABEL_43:
    if (!v29)
      return;
    if (v28)
    {
      if ((v27 & 0x80000000) == 0)
      {
        if ((v25 & 0x80000000) == 0)
          goto LABEL_47;
LABEL_51:
        operator delete(v24);
        if (!v23)
          return;
        goto LABEL_48;
      }
      operator delete(v26);
      if (v25 < 0)
        goto LABEL_51;
    }
LABEL_47:
    if (!v23)
      return;
LABEL_48:
    if (v22 < 0)
      operator delete((void *)v21);
    return;
  }
  if (*a1 >= 0.000001 && a1[1] >= 0.000001)
  {
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  v9 = 897988541;
  sub_22320852C("focal length must be positive (>= ", (float *)&v9, (uint64_t)")");
  sub_22456A884(__dst, &v10);
  v20 = 1;
  sub_2231A958C(0x16u, (__int128 *)__dst, (uint64_t)&v30);
  *(_OWORD *)a2 = v30;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v40)
  {
    *(_BYTE *)(a2 + 40) = 0;
    if (v33)
    {
      *(_OWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 32) = v32;
      v32 = 0;
      v31 = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!v39)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (!v33)
        goto LABEL_59;
      goto LABEL_57;
    }
    v7 = v36;
    *(_QWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 48) = v34;
    v35 = 0;
    v34 = 0uLL;
    *(_QWORD *)(a2 + 72) = v7;
    *(_OWORD *)(a2 + 80) = v37;
    *(_QWORD *)(a2 + 96) = v38;
    v38 = 0;
    v37 = 0uLL;
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (SHIBYTE(v38) < 0)
    {
      operator delete((void *)v37);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_24:
        if (!v33)
          goto LABEL_59;
LABEL_57:
        if (SHIBYTE(v32) < 0)
          operator delete((void *)v31);
        goto LABEL_59;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete((void *)v34);
    if (v33)
      goto LABEL_57;
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
LABEL_59:
  if (v20)
  {
    if (v19)
    {
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
    }
    if (v14 && v13 < 0)
      operator delete(__dst[0]);
  }
  if (v11 < 0)
    operator delete((void *)v10);
}

void sub_22320842C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_22319FD28((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22320846C(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_22319FFBC(v4, v1 + 1);
    sub_22319FED4((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FCD8, (void (*)(void *))sub_22319FF24);
  }
  return result;
}

void sub_2232084E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319723C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232084FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_22319723C((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_223208518(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22320852C(char *__s, float *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_223208A48(v7, __s);
  sub_223208764((uint64_t)&v6, (uint64_t)v7, a2);
  v9[0] = v7;
  v9[1] = a3;
  v9[2] = v7;
  v9[3] = a3;
  v9[4] = a3;
  if (v8 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(_QWORD **, _DWORD *))off_24EC24670[v8])(&v10, v7);
  if (v8 == -1)
    sub_22316DD70();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC22250[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC22220[v8])(v9, v7);
  return result;
}

void sub_223208624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223208638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22320864C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223208660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223208674(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  sub_22456A884(a1, &__dst);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_223208748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223208764(uint64_t a1, uint64_t a2, float *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  char *v8;
  int v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  std::string v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v28;

  std::to_string(&v22, *a3);
  v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v22;
        goto LABEL_17;
      }
LABEL_15:
      v23 = a2;
      v24 = &v22;
      v25 = a2;
      v26 = &v22;
      v27 = &v22;
      v10 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      goto LABEL_16;
    }
    v9 = v8[size--];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v22.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  if (strtof((const char *)v5, 0) != *a3)
  {
    v23 = a2;
    v24 = &v22;
    v25 = a2;
    v26 = &v22;
    v27 = &v22;
    v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
LABEL_16:
    __p[0] = &v23;
    ((void (*)(void **, uint64_t))off_24EC24E58[v10])(__p, a2);
    goto LABEL_40;
  }
  v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v22;
  else
    v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v22.__r_.__value_.__l.__size_;
  v13 = 1;
  if (v12->__r_.__value_.__s.__data_[size] == 46)
    v13 = 2;
  v14 = v13 + size;
  if (v11 >= v14)
    v15 = v14;
  else
    v15 = v11;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = (void *)v15;
    v21 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_37;
  }
  HIBYTE(v21) = v15;
  v16 = __p;
  if (v15)
LABEL_37:
    memmove(v16, v12, v15);
  *((_BYTE *)v16 + v15) = 0;
  v23 = a2;
  v24 = (std::string *)__p;
  v25 = a2;
  v26 = (std::string *)__p;
  v27 = (std::string *)__p;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_22316DD70();
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC22238[v19])(&v28, a2);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_43;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_2232089DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_223208A48(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC22220[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t **sub_223208B38(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24EC22220[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_223197FA4((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_223208BD4(uint64_t a1, uint64_t a2)
{
  sub_223208C7C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_223208BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223208E00((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_223197FA4(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_223208C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223208C7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_223197FA4(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24EC22220[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_223208DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223208E00(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_223208FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223208FD4(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, _BYTE *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  char v30;
  _QWORD v32[2];
  int v33;
  unint64_t v34;
  int v35;
  _QWORD v36[2];
  _BYTE *v37;

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v13 * v12;
  v19 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32);
  if (v21 + 1 > 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  sub_2244E324C((_QWORD *)a1, v18, v22);
  v23 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 36) = v11;
  *(_DWORD *)(a1 + 44) = v12;
  if (*(_QWORD *)(a1 + 8) && a6)
  {
    if (*(_DWORD *)(a1 + 24))
      v24 = *(_DWORD *)(a1 + 28) == 0;
    else
      v24 = 1;
    v25 = v24 || *(_DWORD *)(a1 + 32) == 0;
    v26 = v25;
    if (v25)
      v27 = 0;
    else
      v27 = *(_QWORD *)(a1 + 24);
    if (v25)
      v28 = 0;
    else
      v28 = *(_DWORD *)(a1 + 32);
    v32[0] = *(_QWORD *)(a1 + 8);
    v32[1] = v27;
    v33 = v28;
    v34 = v11;
    v35 = v12;
    if (v28 * v12 == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v36[0] = v32;
    v36[1] = a5;
    if ((_DWORD)v11 == 1)
    {
      sub_223209188(v36);
    }
    else
    {
      v37 = a5;
      if ((_DWORD)v27)
        v29 = HIDWORD(v27) == 0;
      else
        v29 = 1;
      if (v29)
        v30 = 1;
      else
        v30 = v26;
      if ((v30 & 1) == 0)
        sub_223209334(&v37, (uint64_t)v32);
    }
  }
  return a1;
}

void sub_223209174(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2244E3314(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223209188(_QWORD *result)
{
  char **v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  size_t v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  BOOL v21;
  char *v23;
  int v24;

  v1 = (char **)*result;
  v2 = *(unsigned int *)(*result + 8);
  v3 = *(unsigned int *)(*result + 24);
  if ((_DWORD)v3 == *(_DWORD *)(*result + 20) * (_DWORD)v2)
  {
    v4 = *((unsigned int *)v1 + 7);
    v5 = *((_DWORD *)v1 + 3);
    v6 = (unsigned __int8 *)result[1];
    v7 = (v5 * v2);
    if ((_DWORD)v4 == v5 * (_DWORD)v3)
    {
      return memset(*v1, *v6, (*((_DWORD *)v1 + 4) * v7));
    }
    else
    {
      v20 = *((_DWORD *)v1 + 4);
      if ((_DWORD)v2)
        v21 = v5 == 0;
      else
        v21 = 1;
      if (!v21 && v20 != 0)
      {
        v23 = *v1;
        v24 = v20 - 1;
        if (v20 != 1)
        {
          do
          {
            memset(v23, *v6, v7);
            v23 += v4;
            --v24;
          }
          while (v24);
        }
        return memset(v23, *v6, v7);
      }
    }
  }
  else
  {
    v9 = *((_DWORD *)v1 + 3);
    v8 = *((_DWORD *)v1 + 4);
    if ((_DWORD)v2)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10 && v8 != 0)
    {
      v12 = (unsigned __int8 *)result[1];
      v13 = v9 - 1;
      v14 = *v1;
      v15 = v8 - 1;
      if (v8 != 1)
      {
        v16 = *((unsigned int *)v1 + 7);
        if (v9 == 1)
        {
          do
          {
            memset(v14, *v12, v2);
            v14 += v16;
            --v15;
          }
          while (v15);
        }
        else
        {
          v17 = 0;
          do
          {
            v18 = v13;
            v19 = v14;
            do
            {
              memset(v19, *v12, v2);
              v19 += v3;
              --v18;
            }
            while (v18);
            memset(v19, *v12, v2);
            v14 += v16;
            ++v17;
          }
          while (v17 != v15);
        }
      }
      for (; v13; --v13)
      {
        memset(v14, *v12, v2);
        v14 += v3;
      }
      return memset(v14, *v12, v2);
    }
  }
  return result;
}

_BYTE **sub_223209334(_BYTE **result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BYTE *v16;
  int v17;
  _BYTE *v18;
  int v19;
  int v20;
  _BYTE *v21;
  int i;
  int v23;
  _BYTE *v24;
  int j;
  int v26;
  _BYTE *v27;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v2 - 1;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 20);
    v10 = *(unsigned int *)(a2 + 24);
    v11 = *(_BYTE **)a2;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a2 + 28);
      if (v8)
      {
        v14 = 0;
        if (v7)
        {
          do
          {
            v15 = 0;
            v16 = v11;
            do
            {
              v17 = v7;
              v18 = v16;
              do
              {
                *v18 = **result;
                v18 += v9;
                --v17;
              }
              while (v17);
              *v18 = **result;
              v16 += v10;
              ++v15;
            }
            while (v15 != v8);
            v19 = v7;
            do
            {
              *v16 = **result;
              v16 += v9;
              --v19;
            }
            while (v19);
            *v16 = **result;
            v11 += v13;
            ++v14;
          }
          while (v14 != v12);
        }
        else
        {
          do
          {
            v20 = v8;
            v21 = v11;
            do
            {
              *v21 = **result;
              v21 += v10;
              --v20;
            }
            while (v20);
            *v21 = **result;
            v11 += v13;
            ++v14;
          }
          while (v14 != v12);
        }
      }
      else if (v7)
      {
        for (i = 0; i != v12; ++i)
        {
          v23 = v7;
          v24 = v11;
          do
          {
            *v24 = **result;
            v24 += v9;
            --v23;
          }
          while (v23);
          *v24 = **result;
          v11 += v13;
        }
      }
      else
      {
        do
        {
          *v11 = **result;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    if (v8)
    {
      if (v7)
      {
        for (j = 0; j != v8; ++j)
        {
          v26 = v7;
          v27 = v11;
          do
          {
            *v27 = **result;
            v27 += v9;
            --v26;
          }
          while (v26);
          *v27 = **result;
          v11 += v10;
        }
      }
      else
      {
        do
        {
          *v11 = **result;
          v11 += v10;
          --v8;
        }
        while (v8);
      }
    }
    for (; v7; --v7)
    {
      *v11 = **result;
      v11 += v9;
    }
    *v11 = **result;
  }
  return result;
}

void sub_223209524(size_t *a1)
{
  unsigned int *v1;
  uint64_t v2;
  BOOL v4;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  size_t v10;
  char v11;

  v1 = (unsigned int *)*a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 12) == 1 && *(_DWORD *)(v2 + 12) == 1)
  {
    v6 = v1[4];
    if (v6 == *(_DWORD *)(v2 + 16))
    {
      v7 = *v1;
      if (v6 == *v1)
      {
        sub_2232095D4(a1);
        return;
      }
    }
    else
    {
      v7 = *v1;
    }
    v10 = v7;
    if (v7)
      v8 = v1[1] == 0;
    else
      v8 = 1;
    if (!v8 && v1[2] != 0)
      sub_223209838(&v10, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (*v1)
      v4 = v1[1] == 0;
    else
      v4 = 1;
    if (!v4 && v1[2] != 0)
      sub_223209B4C((uint64_t)&v11, (uint64_t)v1, v2);
  }
}

size_t *sub_2232095D4(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  size_t v11;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 20))
  {
    v4 = *(_DWORD *)(v1 + 4);
    if (v3 == *(_DWORD *)(v1 + 16) * v4)
    {
      v5 = (v4 * *(_DWORD *)v1 * *(_DWORD *)(v1 + 8));
      v6 = *(const void **)(v1 + 48);
      if ((_DWORD)v5)
        v7 = v6 == 0;
      else
        v7 = 0;
      if (v7)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      else if (!(_DWORD)v5)
      {
        return result;
      }
      return (size_t *)memmove(*(void **)(v2 + 48), v6, v5);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 4);
  }
  v8 = *(_DWORD *)v1;
  v11 = (v4 * *(_DWORD *)v1);
  if (v8)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9 && *(_DWORD *)(v1 + 8) != 0)
    return sub_2232096E4(&v11, v1, v2);
  return result;
}

size_t *sub_2232096E4(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  size_t *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;

  v3 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v4 = *(_DWORD *)(a2 + 4) == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = result;
    v7 = *(char **)(a2 + 48);
    v8 = *(char **)(a3 + 48);
    v9 = v3 - 1;
    if (v3 != 1)
    {
      v10 = *(unsigned int *)(a3 + 20);
      v11 = *(unsigned int *)(a2 + 20);
      do
      {
        v12 = *v6;
        if (!v7 && v12)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_22;
          }
        }
        else if (!v12)
        {
          goto LABEL_14;
        }
        result = (size_t *)memmove(v8, v7, v12);
LABEL_14:
        v7 += v11;
        v8 += v10;
        --v9;
      }
      while (v9);
    }
    v13 = *v6;
    if (!v7 && v13)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_22:
        abort();
      }
      return (size_t *)memmove(v8, v7, v13);
    }
    if (v13)
      return (size_t *)memmove(v8, v7, v13);
  }
  return result;
}

size_t *sub_223209838(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  size_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  int i;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = result;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 16);
    v10 = *(unsigned int *)(a3 + 16);
    v11 = *(char **)(a2 + 48);
    v12 = *(char **)(a3 + 48);
    v28 = v4 - 1;
    v24 = v8;
    if (v4 != 1)
    {
      v26 = *(unsigned int *)(a3 + 20);
      v25 = *(unsigned int *)(a2 + 20);
      if (v8)
      {
        v13 = 0;
        while (1)
        {
          v27 = v13;
          v14 = v24;
          v15 = v11;
          v16 = v12;
          do
          {
            v17 = v15;
            v18 = *v7;
            if (!v17 && v18)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_48;
              }
LABEL_18:
              result = (size_t *)memmove(v16, v17, v18);
              goto LABEL_19;
            }
            if (v18)
              goto LABEL_18;
LABEL_19:
            v15 = &v17[v9];
            v16 += v10;
            --v14;
          }
          while (v14);
          v19 = *v7;
          if (!v17 && v19)
          {
            if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
LABEL_14:
              result = (size_t *)memmove(v16, &v17[v9], v19);
              goto LABEL_15;
            }
LABEL_48:
            abort();
          }
          if (v19)
            goto LABEL_14;
LABEL_15:
          v11 += v25;
          v12 += v26;
          v13 = v27 + 1;
          if (v27 + 1 == v28)
            goto LABEL_36;
        }
      }
      do
      {
        v20 = *v7;
        if (!v11 && v20)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_48;
          }
        }
        else if (!v20)
        {
          goto LABEL_31;
        }
        result = (size_t *)memmove(v12, v11, v20);
LABEL_31:
        v11 += v25;
        v12 += v26;
        --v28;
      }
      while (v28);
    }
LABEL_36:
    for (i = v24; i; --i)
    {
      v22 = *v7;
      if (!v11 && v22)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_48;
        }
      }
      else if (!v22)
      {
        goto LABEL_40;
      }
      result = (size_t *)memmove(v12, v11, v22);
LABEL_40:
      v11 += v9;
      v12 += v10;
    }
    v23 = *v7;
    if (!v11 && v23)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_48;
      }
      return (size_t *)memmove(v12, v11, v23);
    }
    if (v23)
      return (size_t *)memmove(v12, v11, v23);
  }
  return result;
}

void sub_223209B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  int i;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  int j;
  int v34;
  _BYTE *v35;
  _BYTE *v36;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = *(_DWORD *)a2 - 1;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 12);
    v10 = *(unsigned int *)(a2 + 16);
    v11 = *(unsigned int *)(a3 + 12);
    v12 = *(unsigned int *)(a3 + 16);
    v13 = *(_BYTE **)(a2 + 48);
    v14 = *(_BYTE **)(a3 + 48);
    v15 = v4 - 1;
    if (v15)
    {
      v16 = *(unsigned int *)(a3 + 20);
      v17 = *(unsigned int *)(a2 + 20);
      if (v8)
      {
        v18 = 0;
        if (v7)
        {
          do
          {
            v19 = 0;
            v20 = v13;
            v21 = v14;
            do
            {
              v22 = v7;
              v23 = v20;
              v24 = v21;
              do
              {
                *v24 = *v23;
                v23 += v9;
                v24 += v11;
                --v22;
              }
              while (v22);
              *v24 = *v23;
              v20 += v10;
              v21 += v12;
              ++v19;
            }
            while (v19 != v8);
            v25 = v7;
            do
            {
              *v21 = *v20;
              v20 += v9;
              v21 += v11;
              --v25;
            }
            while (v25);
            *v21 = *v20;
            v13 += v17;
            v14 += v16;
            ++v18;
          }
          while (v18 != v15);
        }
        else
        {
          do
          {
            v26 = v8;
            v27 = v13;
            v28 = v14;
            do
            {
              *v28 = *v27;
              v27 += v10;
              v28 += v12;
              --v26;
            }
            while (v26);
            *v28 = *v27;
            v13 += v17;
            v14 += v16;
            ++v18;
          }
          while (v18 != v15);
        }
      }
      else if (*(_DWORD *)a2 == 1)
      {
        do
        {
          *v14 = *v13;
          v13 += v17;
          v14 += v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        for (i = 0; i != v15; ++i)
        {
          v30 = v7;
          v31 = v13;
          v32 = v14;
          do
          {
            *v32 = *v31;
            v31 += v9;
            v32 += v11;
            --v30;
          }
          while (v30);
          *v32 = *v31;
          v13 += v17;
          v14 += v16;
        }
      }
    }
    if (v8)
    {
      if (v7)
      {
        for (j = 0; j != v8; ++j)
        {
          v34 = v7;
          v35 = v13;
          v36 = v14;
          do
          {
            *v36 = *v35;
            v35 += v9;
            v36 += v11;
            --v34;
          }
          while (v34);
          *v36 = *v35;
          v13 += v10;
          v14 += v12;
        }
      }
      else
      {
        do
        {
          *v14 = *v13;
          v13 += v10;
          v14 += v12;
          --v8;
        }
        while (v8);
      }
    }
    for (; v7; --v7)
    {
      *v14 = *v13;
      v13 += v9;
      v14 += v11;
    }
    *v14 = *v13;
  }
}

uint64_t sub_223209D60(uint64_t a1, uint64_t a2)
{
  size_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  int v27;
  _QWORD v28[2];
  int v29;
  uint64_t v30;
  int v31;
  size_t v32[2];

  v4 = sub_2244E3344(a2);
  sub_2244E324C((_QWORD *)a1, v4, *(_QWORD *)(a2 + 16));
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 36);
  v8 = *(_DWORD *)(a2 + 44);
  v9 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 24))
    v10 = *(_DWORD *)(a2 + 28) == 0;
  else
    v10 = 1;
  v11 = v10 || v9 == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = *(_QWORD *)(a2 + 24);
  if (v11)
    v14 = 0;
  else
    v14 = v9;
  v24[0] = v6;
  v24[1] = v13;
  v25 = v14;
  v26 = v7;
  v27 = v8;
  if (v14 * v8 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_37;
  }
  if ((_DWORD)v13)
    v15 = HIDWORD(v13) == 0;
  else
    v15 = 1;
  if (v15)
    v16 = 1;
  else
    v16 = v12;
  if ((v16 & 1) == 0)
  {
    v17 = *(_QWORD *)(a1 + 36);
    v18 = *(_DWORD *)(a1 + 44);
    v19 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v20 = *(_DWORD *)(a1 + 28) == 0;
    else
      v20 = 1;
    v21 = v20 || v19 == 0;
    v22 = *(_QWORD *)(a1 + 24);
    if (v21)
    {
      v22 = 0;
      v19 = 0;
    }
    v28[0] = *(_QWORD *)(a1 + 8);
    v28[1] = v22;
    v29 = v19;
    v30 = v17;
    v31 = v18;
    if (v19 * v18 != -1
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      v32[0] = (size_t)v24;
      v32[1] = (size_t)v28;
      sub_223209EFC(v32);
      return a1;
    }
LABEL_37:
    abort();
  }
  return a1;
}

void sub_223209EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2244E3314(v1);
  _Unwind_Resume(a1);
}

void sub_223209EFC(size_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v4;
  int v6;
  unsigned int v7;
  BOOL v8;
  size_t v10;
  char v11;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v6 = *(_DWORD *)(v1 + 24);
    if (v6 == *(_DWORD *)(v2 + 24))
    {
      v7 = *(_DWORD *)(v1 + 8);
      if (v6 == v7)
      {
        sub_223209FAC(a1);
        return;
      }
    }
    else
    {
      v7 = *(_DWORD *)(v1 + 8);
    }
    v10 = v7;
    if (v7)
      v8 = *(_DWORD *)(v1 + 12) == 0;
    else
      v8 = 1;
    if (!v8 && *(_DWORD *)(v1 + 16) != 0)
      sub_22320A20C(&v10, (char **)v1, (char **)v2);
  }
  else
  {
    v11 = 0;
    if (*(_DWORD *)(v1 + 8))
      v4 = *(_DWORD *)(v1 + 12) == 0;
    else
      v4 = 1;
    if (!v4 && *(_DWORD *)(v1 + 16) != 0)
      sub_22320A520((uint64_t)&v11, v1, v2);
  }
}

size_t *sub_223209FAC(size_t *result)
{
  size_t v1;
  size_t v2;
  int v3;
  int v4;
  size_t v5;
  char *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  size_t v11;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 28);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 28) && v3 == *(_DWORD *)(v1 + 24) * v4)
  {
    v5 = (v4 * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16));
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (size_t *)memmove(*(void **)v2, v6, v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v11 = (v4 * v8);
  if (v8)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9 && *(_DWORD *)(v1 + 16) != 0)
    return sub_22320A0B8(&v11, (char **)v1, (char **)v2);
  return result;
}

size_t *sub_22320A0B8(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;

  v3 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v4 = *((_DWORD *)a2 + 3) == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = result;
    v7 = *a2;
    v8 = *a3;
    v9 = v3 - 1;
    if (v3 != 1)
    {
      v10 = *((unsigned int *)a3 + 7);
      v11 = *((unsigned int *)a2 + 7);
      do
      {
        v12 = *v6;
        if (!v7 && v12)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_22;
          }
        }
        else if (!v12)
        {
          goto LABEL_14;
        }
        result = (size_t *)memmove(v8, v7, v12);
LABEL_14:
        v7 += v11;
        v8 += v10;
        --v9;
      }
      while (v9);
    }
    v13 = *v6;
    if (!v7 && v13)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_22:
        abort();
      }
      return (size_t *)memmove(v8, v7, v13);
    }
    if (v13)
      return (size_t *)memmove(v8, v7, v13);
  }
  return result;
}

size_t *sub_22320A20C(size_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  size_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  int i;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;

  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = result;
    v8 = v3 - 1;
    v9 = *((unsigned int *)a2 + 6);
    v10 = *((unsigned int *)a3 + 6);
    v11 = *a2;
    v12 = *a3;
    v28 = v4 - 1;
    v24 = v8;
    if (v4 != 1)
    {
      v26 = *((unsigned int *)a3 + 7);
      v25 = *((unsigned int *)a2 + 7);
      if (v8)
      {
        v13 = 0;
        while (1)
        {
          v27 = v13;
          v14 = v24;
          v15 = v11;
          v16 = v12;
          do
          {
            v17 = v15;
            v18 = *v7;
            if (!v17 && v18)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_48;
              }
LABEL_18:
              result = (size_t *)memmove(v16, v17, v18);
              goto LABEL_19;
            }
            if (v18)
              goto LABEL_18;
LABEL_19:
            v15 = &v17[v9];
            v16 += v10;
            --v14;
          }
          while (v14);
          v19 = *v7;
          if (!v17 && v19)
          {
            if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
LABEL_14:
              result = (size_t *)memmove(v16, &v17[v9], v19);
              goto LABEL_15;
            }
LABEL_48:
            abort();
          }
          if (v19)
            goto LABEL_14;
LABEL_15:
          v11 += v25;
          v12 += v26;
          v13 = v27 + 1;
          if (v27 + 1 == v28)
            goto LABEL_36;
        }
      }
      do
      {
        v20 = *v7;
        if (!v11 && v20)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_48;
          }
        }
        else if (!v20)
        {
          goto LABEL_31;
        }
        result = (size_t *)memmove(v12, v11, v20);
LABEL_31:
        v11 += v25;
        v12 += v26;
        --v28;
      }
      while (v28);
    }
LABEL_36:
    for (i = v24; i; --i)
    {
      v22 = *v7;
      if (!v11 && v22)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_48;
        }
      }
      else if (!v22)
      {
        goto LABEL_40;
      }
      result = (size_t *)memmove(v12, v11, v22);
LABEL_40:
      v11 += v9;
      v12 += v10;
    }
    v23 = *v7;
    if (!v11 && v23)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_48;
      }
      return (size_t *)memmove(v12, v11, v23);
    }
    if (v23)
      return (size_t *)memmove(v12, v11, v23);
  }
  return result;
}

void sub_22320A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  int v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  int i;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  int j;
  int v35;
  _BYTE *v36;
  _BYTE *v37;

  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v3 - 1;
    v9 = v4 - 1;
    v10 = *(unsigned int *)(a2 + 20);
    v11 = *(unsigned int *)(a2 + 24);
    v12 = *(unsigned int *)(a3 + 20);
    v13 = *(unsigned int *)(a3 + 24);
    v14 = *(_BYTE **)a2;
    v15 = *(_BYTE **)a3;
    v16 = v5 - 1;
    if (v16)
    {
      v17 = *(unsigned int *)(a3 + 28);
      v18 = *(unsigned int *)(a2 + 28);
      if (v9)
      {
        v19 = 0;
        if (v8)
        {
          do
          {
            v20 = 0;
            v21 = v14;
            v22 = v15;
            do
            {
              v23 = v8;
              v24 = v21;
              v25 = v22;
              do
              {
                *v25 = *v24;
                v24 += v10;
                v25 += v12;
                --v23;
              }
              while (v23);
              *v25 = *v24;
              v21 += v11;
              v22 += v13;
              ++v20;
            }
            while (v20 != v9);
            v26 = v8;
            do
            {
              *v22 = *v21;
              v21 += v10;
              v22 += v12;
              --v26;
            }
            while (v26);
            *v22 = *v21;
            v14 += v18;
            v15 += v17;
            ++v19;
          }
          while (v19 != v16);
        }
        else
        {
          do
          {
            v27 = v9;
            v28 = v14;
            v29 = v15;
            do
            {
              *v29 = *v28;
              v28 += v11;
              v29 += v13;
              --v27;
            }
            while (v27);
            *v29 = *v28;
            v14 += v18;
            v15 += v17;
            ++v19;
          }
          while (v19 != v16);
        }
      }
      else if (v8)
      {
        for (i = 0; i != v16; ++i)
        {
          v31 = v8;
          v32 = v14;
          v33 = v15;
          do
          {
            *v33 = *v32;
            v32 += v10;
            v33 += v12;
            --v31;
          }
          while (v31);
          *v33 = *v32;
          v14 += v18;
          v15 += v17;
        }
      }
      else
      {
        do
        {
          *v15 = *v14;
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
      }
    }
    if (v9)
    {
      if (v8)
      {
        for (j = 0; j != v9; ++j)
        {
          v35 = v8;
          v36 = v14;
          v37 = v15;
          do
          {
            *v37 = *v36;
            v36 += v10;
            v37 += v12;
            --v35;
          }
          while (v35);
          *v37 = *v36;
          v14 += v11;
          v15 += v13;
        }
      }
      else
      {
        do
        {
          *v15 = *v14;
          v14 += v11;
          v15 += v13;
          --v9;
        }
        while (v9);
      }
    }
    for (; v8; --v8)
    {
      *v15 = *v14;
      v14 += v10;
      v15 += v12;
    }
    *v15 = *v14;
  }
}

uint64_t sub_22320A734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_22320A750(_DWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t (**v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  v7 = &off_24EC20EB8;
  sub_2231B4D38(a2, (uint64_t)&v8);
  sub_2242E43A8(a1, &v7);
  nullsub_30(&v10);
  v3 = v9;
  if (!v9)
    return nullsub_30(&v7);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(&v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(&v7);
}

void sub_22320A800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B4CC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22320A814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

uint64_t sub_22320A828(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = a1 + 16;
  nullsub_30(a1 + 40);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      nullsub_30(v2);
      v6 = *(std::__shared_weak_count **)(a1 + 8);
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  nullsub_30(v2);
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    return a1;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_22320A8FC(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24EC24E80;
  v2 = a1 + 3;
  nullsub_30(a1 + 6);
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      nullsub_30(v2);
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  nullsub_30(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    return a1;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22320A9DC(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24EC24E80;
  v2 = a1 + 3;
  nullsub_30(a1 + 6);
  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    nullsub_30(v2);
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    nullsub_30(v2);
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22320AAB8(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  result = operator new(0x50uLL);
  v3 = result;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC24E80;
  result[1] = v5;
  result[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result[3] = &off_24EC20EB8;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_DWORD *)(a1 + 72);
    v14 = *(_WORD *)(a1 + 76);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_DWORD *)(a1 + 72);
    v14 = *(_WORD *)(a1 + 76);
  }
  result[4] = v8;
  result[5] = v9;
  result[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)result + 14) = *(_DWORD *)(a1 + 56);
  result[8] = v12;
  *((_DWORD *)result + 18) = v13;
  *((_WORD *)result + 38) = v14;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      return v3;
    }
  }
  return result;
}

void sub_22320ABD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC24E80;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = &off_24EC20EB8;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(_DWORD *)(a1 + 72);
    v12 = *(_WORD *)(a1 + 76);
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(_DWORD *)(a1 + 72);
    v12 = *(_WORD *)(a1 + 76);
  }
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  v14 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 64) = v10;
  *(_DWORD *)(a2 + 72) = v11;
  *(_WORD *)(a2 + 76) = v12;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22320ACC8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = a1 + 24;
  nullsub_30(a1 + 48);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    nullsub_30(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6)
      return;
  }
  else
  {
LABEL_5:
    nullsub_30(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6)
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22320AD8C(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = a1 + 3;
  nullsub_30(a1 + 6);
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      nullsub_30(v2);
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        goto LABEL_6;
LABEL_9:
      operator delete(a1);
      return;
    }
  }
  nullsub_30(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_9;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  operator delete(a1);
}

uint64_t sub_22320AE60(uint64_t a1)
{
  return sub_22320AEE0(a1 + 8);
}

uint64_t sub_22320AE68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb0EvEEvRNS4_13CommandBufferERKNS4_"
                     "7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10MutabilityE1EEEEUlRT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb0EvEEvRNS4_13CommandBu"
                                "fferERKNS4_7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10Mu"
                                "tabilityE1EEEEUlRT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb0EvEEvRNS4_13CommandBufferERKNS4_7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10MutabilityE1EEEEUlRT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb0EvEEvRNS4_13CommandBufferERKNS4_7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10MutabilityE1EEEEUlRT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22320AED4()
{
  return &unk_24EC24EF0;
}

uint64_t sub_22320AEE0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3)
      goto LABEL_30;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v2 = *(_QWORD *)(a1 + 24);
    v7 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v7)
      goto LABEL_30;
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 69))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(&v23, v2, 1);
        v11 = *(_DWORD *)(a1 + 48);
        if (!*(_BYTE *)(a1 + 68))
          goto LABEL_26;
        goto LABEL_18;
      }
    }
    else
    {
LABEL_30:
      if (*(_BYTE *)(a1 + 69))
        goto LABEL_14;
    }
  }
  v23 = 0;
  v11 = *(_DWORD *)(a1 + 48);
  if (!*(_BYTE *)(a1 + 68))
    goto LABEL_26;
LABEL_18:
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(std::__shared_weak_count **)(a1 + 32);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
LABEL_26:
  v17 = *(const char **)(a1 + 56);
  v19 = 0;
  v20 = 0;
  v21 = *(_QWORD *)(a1 + 40);
  v22 = 1;
  sub_22322934C((void ***)a1, v17, v11, &v19, 0);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22320B0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

double sub_22320B0C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A470);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A470))
  {
    sub_22320B294(&qword_25578A438);
    __cxa_atexit((void (*)(void *))sub_2231BD974, &qword_25578A438, &dword_22314D000);
    __cxa_guard_release(&qword_25578A470);
  }
  v5 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)a2 = &off_24EC218E0;
  if (v5)
  {
    sub_2231DF808(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A440;
    v8 = *(std::__shared_weak_count **)algn_25578A448;
    if (*(_QWORD *)algn_25578A448)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A448 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A468;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      result = *(double *)&xmmword_25578A450;
      *(_OWORD *)(a2 + 24) = xmmword_25578A450;
      *(_QWORD *)(a2 + 40) = qword_25578A460;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 48) = v11;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v16 = word_25578A468;
      *(_QWORD *)(a2 + 8) = qword_25578A440;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(double *)&xmmword_25578A450;
      *(_OWORD *)(a2 + 24) = xmmword_25578A450;
      *(_QWORD *)(a2 + 40) = qword_25578A460;
      *(_WORD *)(a2 + 48) = v16;
    }
  }
  return result;
}

void sub_22320B268(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A470);
  _Unwind_Resume(a1);
}

void sub_22320B280(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22320B294(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC218E0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0uLL;
  sub_22320B34C((uint64_t)(a1 + 1), &v8, &v6);
  v2 = v9;
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22320B32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    sub_2245743F4();
  nullsub_30(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_22320B34C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_22320B458(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

uint64_t sub_22320B470(uint64_t a1, __int16 *a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int16 *v19[3];

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_19;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_29;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_29:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_19:
    v16 = 0;
    if (*(_DWORD *)(a1 + 40) != 1)
      goto LABEL_15;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_19;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(&v16, v5, 1);
  if (*(_DWORD *)(a1 + 40) != 1)
  {
LABEL_15:
    v19[0] = a2;
    if (*(_DWORD *)(a1 + 32) && *(_DWORD *)(a1 + 36))
      a3.n128_u64[0] = sub_22320BA94(v19, a1);
    goto LABEL_25;
  }
LABEL_20:
  v14 = *(unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 44) == (_DWORD)v14)
  {
    sub_22320B62C(a1, a2);
  }
  else
  {
    v18 = 0;
    v17 = v14;
    v19[0] = (__int16 *)&v18;
    v19[1] = (__int16 *)&v17;
    v19[2] = a2;
    if ((_DWORD)v14 && *(_DWORD *)(a1 + 36))
      a3.n128_u64[0] = sub_22320B7A0((uint64_t)v19, a1, a3);
  }
LABEL_25:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a3);
  return result;
}

void sub_22320B608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22320B62C(uint64_t result, const __int16 *a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  uint64_t v18;

  v3 = (*(_DWORD *)(result + 36) * *(_DWORD *)(result + 32));
  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(result + 48))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 8);
    v8 = *(std::__shared_weak_count **)(result + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 88))(v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v4 = *(_QWORD *)(v6 + 24);
  }
  if ((_DWORD)v3)
    v12 = v4 == 0;
  else
    v12 = 0;
  if (v12)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  else if (!(_DWORD)v3)
  {
    return result;
  }
  if (v3 < 0x10 || v4 < (unint64_t)(a2 + 1) && v4 + 2 * v3 > (unint64_t)a2)
  {
    v13 = (__int16 *)v4;
    v14 = v3;
LABEL_23:
    v15 = v14 + 1;
    do
    {
      *v13++ = *a2;
      --v15;
    }
    while (v15 > 1);
    return result;
  }
  v13 = (__int16 *)(v4 + 2 * (v3 & 0xFFFFFFF0));
  v14 = v3 & 0xF;
  v16 = vld1q_dup_s16(a2);
  v17 = (int16x8_t *)(v4 + 16);
  v18 = v3 & 0xFFFFFFF0;
  do
  {
    v17[-1] = v16;
    *v17 = v16;
    v17 += 2;
    v18 -= 16;
  }
  while (v18);
  if ((v3 & 0xFFFFFFF0) != v3)
    goto LABEL_23;
  return result;
}

unsigned __int16 sub_22320B7A0@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  int v3;
  int v4;
  BOOL v5;
  int v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _DWORD v16[5];
  _QWORD v17[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v16[0] = 0;
    v16[1] = v4 - 1;
    v8 = *(_DWORD *)(a2 + 44);
    v16[2] = *(_DWORD *)(a2 + 40);
    v16[3] = v3 - 1;
    v16[4] = v8;
    v9 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v9)
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(std::__shared_weak_count **)(a2 + 16);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v10 + 88))(v10, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v9 = *(_QWORD *)(a2 + 24);
    }
    v17[0] = 0;
    v17[1] = 0;
    a3.n128_u16[0] = sub_22320B884(v16, (uint64_t)v17, a1, v9, a3);
  }
  return a3.n128_u16[0];
}

unsigned __int16 sub_22320B884@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  int v8;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  __n128 *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  __n128 *v25;
  unint64_t v26;
  unint64_t v27;

  v5 = a4;
  v8 = a1[2];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (a1[3])
  {
    for (i = 0; i < a1[3]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v12
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_39;
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v5 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v5 + 2 * v12;
          v13 = (__int16 *)v5;
          if (v14)
          {
            v13 = (__int16 *)(v5 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v11);
            v15 = (__n128 *)(v5 + 16);
            v16 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = a5;
              *v15 = a5;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v5;
        }
        v18 = v12 + 1;
        do
        {
          a5.n128_u16[0] = *v11;
          *v13++ = *v11;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v5 += 2 * a1[4];
    }
  }
  *(_QWORD *)a2 = v5;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v5
    && v21
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_39:
    abort();
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v5 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v5 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v5;
      v24 = v21;
LABEL_36:
      v27 = v24 + 1;
      do
      {
        a5.n128_u16[0] = *v20;
        *v23++ = *v20;
        --v27;
      }
      while (v27 > 1);
      return a5.n128_u16[0];
    }
    v23 = (__int16 *)(v5 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v20);
    v25 = (__n128 *)(v5 + 16);
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = a5;
      *v25 = a5;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

__int16 sub_22320BA94@<H0>(__int16 **a1@<X0>, uint64_t a2@<X1>)
{
  int v2;
  int v3;
  BOOL v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int i;
  __int16 *v20;
  int v21;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v7 = v2 - 1;
    v9 = *(unsigned int *)(a2 + 40);
    v8 = *(unsigned int *)(a2 + 44);
    v10 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(__int16 **)(a2 + 24);
    }
    v17 = v3 - 1;
    v18 = 2 * v9;
    if (v7)
    {
      if (v3 == 1)
      {
        do
        {
          *v10 = **a1;
          v10 += v8;
          --v7;
        }
        while (v7);
      }
      else
      {
        for (i = 0; i != v7; ++i)
        {
          v20 = v10;
          v21 = v3 - 1;
          do
          {
            *v20 = **a1;
            v20 = (__int16 *)((char *)v20 + v18);
            --v21;
          }
          while (v21);
          *v20 = **a1;
          v10 += v8;
        }
      }
    }
    if (v3 != 1)
    {
      do
      {
        *v10 = **a1;
        v10 = (__int16 *)((char *)v10 + v18);
        --v17;
      }
      while (v17);
    }
    result = **a1;
    *v10 = result;
  }
  return result;
}

double sub_22320BBFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A4B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A4B0))
  {
    sub_22320B294(&qword_25578A478);
    __cxa_atexit((void (*)(void *))sub_2231BD974, &qword_25578A478, &dword_22314D000);
    __cxa_guard_release(&qword_25578A4B0);
  }
  v5 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)a2 = &off_24EC218E0;
  if (v5)
  {
    sub_2231DF808(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A480;
    v8 = *(std::__shared_weak_count **)algn_25578A488;
    if (*(_QWORD *)algn_25578A488)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A488 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A4A8;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      result = *(double *)&xmmword_25578A490;
      *(_OWORD *)(a2 + 24) = xmmword_25578A490;
      *(_QWORD *)(a2 + 40) = qword_25578A4A0;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 48) = v11;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v16 = word_25578A4A8;
      *(_QWORD *)(a2 + 8) = qword_25578A480;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(double *)&xmmword_25578A490;
      *(_OWORD *)(a2 + 24) = xmmword_25578A490;
      *(_QWORD *)(a2 + 40) = qword_25578A4A0;
      *(_WORD *)(a2 + 48) = v16;
    }
  }
  return result;
}

void sub_22320BD9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A4B0);
  _Unwind_Resume(a1);
}

void sub_22320BDB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22320BDC8(uint64_t a1, int *a2, int16x4_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int *v19[3];

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_19;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_29;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_29:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_19:
    v16 = 0;
    if (*(_DWORD *)(a1 + 40) != 1)
      goto LABEL_15;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_19;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(&v16, v5, 1);
  if (*(_DWORD *)(a1 + 40) != 1)
  {
LABEL_15:
    v19[0] = a2;
    if (*(_DWORD *)(a1 + 32) && *(_DWORD *)(a1 + 36))
      sub_22320C3C4(v19, a1);
    goto LABEL_25;
  }
LABEL_20:
  v14 = *(unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 44) == (_DWORD)v14)
  {
    sub_22320BF84(a1, a2, a3);
  }
  else
  {
    v18 = 0;
    v17 = v14;
    v19[0] = (int *)&v18;
    v19[1] = (int *)&v17;
    v19[2] = a2;
    if ((_DWORD)v14 && *(_DWORD *)(a1 + 36))
      sub_22320C0EC((uint64_t)v19, a1, a3);
  }
LABEL_25:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22320BF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22320BF84(uint64_t result, int *a2, int16x4_t _D0)
{
  uint64_t v4;
  int16x8_t *v5;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  BOOL v14;
  int16x8_t *v18;
  uint64_t v19;
  int16x8_t v20;
  int16x8_t *v21;
  uint64_t v22;
  unint64_t v23;

  v4 = (*(_DWORD *)(result + 36) * *(_DWORD *)(result + 32));
  v5 = *(int16x8_t **)(result + 24);
  if (*(_BYTE *)(result + 48))
    _ZF = v5 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 8);
    v9 = *(std::__shared_weak_count **)(result + 16);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v8 + 88))(v8, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v5 = *(int16x8_t **)(v7 + 24);
  }
  _S8 = *a2;
  if ((_DWORD)v4)
    v14 = v5 == 0;
  else
    v14 = 0;
  if (v14)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  else if (!(_DWORD)v4)
  {
    return result;
  }
  __asm { FCVT            H0, S8 }
  if (v4 < 0x10)
  {
    v18 = v5;
    v19 = v4;
LABEL_24:
    v23 = v19 + 1;
    do
    {
      v18->i16[0] = _D0.i16[0];
      v18 = (int16x8_t *)((char *)v18 + 2);
      --v23;
    }
    while (v23 > 1);
    return result;
  }
  v18 = (int16x8_t *)((char *)v5 + 2 * (v4 & 0xFFFFFFF0));
  v19 = v4 & 0xF;
  v20 = vdupq_lane_s16(_D0, 0);
  v21 = v5 + 1;
  v22 = v4 & 0xFFFFFFF0;
  do
  {
    v21[-1] = v20;
    *v21 = v20;
    v21 += 2;
    v22 -= 16;
  }
  while (v22);
  if ((v4 & 0xFFFFFFF0) != v4)
    goto LABEL_24;
  return result;
}

uint64_t sub_22320C0EC(uint64_t result, uint64_t a2, int16x4_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  int v8;
  int16x8_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _DWORD v15[5];
  _QWORD v16[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = result;
    v15[0] = 0;
    v15[1] = v4 - 1;
    v8 = *(_DWORD *)(a2 + 44);
    v15[2] = *(_DWORD *)(a2 + 40);
    v15[3] = v3 - 1;
    v15[4] = v8;
    v9 = *(int16x8_t **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v9)
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(std::__shared_weak_count **)(a2 + 16);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v10 + 88))(v10, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v9 = *(int16x8_t **)(a2 + 24);
    }
    v16[0] = 0;
    v16[1] = 0;
    return sub_22320C1D0((uint64_t)v15, (uint64_t)v16, v7, v9, a3);
  }
  return result;
}

uint64_t sub_22320C1D0(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4, int16x4_t _D0)
{
  int16x8_t *v5;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int16x8_t *v17;
  int16x8_t v18;
  int16x8_t *v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  int16x8_t *v25;
  uint64_t v26;
  int16x8_t v27;
  int16x8_t *v28;
  unint64_t v29;
  unint64_t v30;

  v5 = a4;
  v8 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (*(_DWORD *)(result + 12))
  {
    v9 = result;
    v10 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v5;
      v11 = **(_QWORD **)(a3 + 8);
      _S8 = **(_DWORD **)(a3 + 16);
      if (!v5)
      {
        if (v11)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            break;
        }
      }
      if (v11 >= 1)
      {
        __asm { FCVT            H0, S8 }
        v17 = v5;
        if ((unint64_t)v11 < 0x10)
          goto LABEL_12;
        v17 = (int16x8_t *)((char *)v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
        v18 = vdupq_lane_s16(_D0, 0);
        v19 = v5 + 1;
        v20 = v11 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v19[-1] = v18;
          *v19 = v18;
          v19 += 2;
          v20 -= 16;
        }
        while (v20);
        _ZF = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
        v11 &= 0xFu;
        if (!_ZF)
        {
LABEL_12:
          v21 = v11 + 1;
          do
          {
            v17->i16[0] = _D0.i16[0];
            v17 = (int16x8_t *)((char *)v17 + 2);
            --v21;
          }
          while (v21 > 1);
        }
      }
      v5 = (int16x8_t *)((char *)v5 + 2 * *(unsigned int *)(v9 + 16));
      if (++v10 >= *(_DWORD *)(v9 + 12))
        goto LABEL_15;
    }
LABEL_27:
    abort();
  }
LABEL_15:
  *(_QWORD *)a2 = v5;
  v22 = *(int **)(a3 + 16);
  v23 = **(_QWORD **)(a3 + 8);
  _S8 = *v22;
  if (!v5)
  {
    if (v23)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        goto LABEL_27;
    }
  }
  if (v23 >= 1)
  {
    __asm { FCVT            H0, S8 }
    if ((unint64_t)v23 < 0x10)
    {
      v25 = v5;
      v26 = v23;
LABEL_24:
      v30 = v26 + 1;
      do
      {
        v25->i16[0] = _D0.i16[0];
        v25 = (int16x8_t *)((char *)v25 + 2);
        --v30;
      }
      while (v30 > 1);
      return result;
    }
    v25 = (int16x8_t *)((char *)v5 + 2 * (v23 & 0xFFFFFFFFFFFFFFF0));
    v26 = v23 & 0xF;
    v27 = vdupq_lane_s16(_D0, 0);
    v28 = v5 + 1;
    v29 = v23 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v28[-1] = v27;
      *v28 = v27;
      v28 += 2;
      v29 -= 16;
    }
    while (v29);
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_24;
  }
  return result;
}

__int16 sub_22320C3C4@<H0>(int **a1@<X0>, uint64_t a2@<X1>)
{
  int v2;
  int v3;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int i;
  _WORD *v20;
  int v21;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    _ZF = v2 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v7 = v2 - 1;
    v9 = *(unsigned int *)(a2 + 40);
    v8 = *(unsigned int *)(a2 + 44);
    v10 = *(_WORD **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_WORD **)(a2 + 24);
    }
    v17 = v3 - 1;
    v18 = 2 * v9;
    if (v7)
    {
      if (v3 == 1)
      {
        do
        {
          _S0 = **a1;
          __asm { FCVT            H0, S0 }
          *v10 = _S0;
          v10 += v8;
          --v7;
        }
        while (v7);
      }
      else
      {
        for (i = 0; i != v7; ++i)
        {
          v20 = v10;
          v21 = v3 - 1;
          do
          {
            _S0 = **a1;
            __asm { FCVT            H0, S0 }
            *v20 = _S0;
            v20 = (_WORD *)((char *)v20 + v18);
            --v21;
          }
          while (v21);
          _S0 = **a1;
          __asm { FCVT            H0, S0 }
          *v20 = _S0;
          v10 += v8;
        }
      }
    }
    if (v3 != 1)
    {
      do
      {
        _S0 = **a1;
        __asm { FCVT            H0, S0 }
        *v10 = _S0;
        v10 = (_WORD *)((char *)v10 + v18);
        --v17;
      }
      while (v17);
    }
    _S0 = **a1;
    __asm { FCVT            H0, S0 }
    *v10 = result;
  }
  return result;
}

double sub_22320C540@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A508);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A508))
  {
    sub_22320C714(&qword_25578A4B8);
    __cxa_atexit((void (*)(void *))sub_2231CD9B0, &qword_25578A4B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A508);
  }
  v5 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)a2 = &off_24EC23CA0;
  if (v5)
  {
    sub_2231EEEF0(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A4C0;
    v8 = *(std::__shared_weak_count **)algn_25578A4C8;
    if (*(_QWORD *)algn_25578A4C8)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A4C8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A500;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = unk_25578A4E0;
      *(_OWORD *)(a2 + 24) = xmmword_25578A4D0;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A4F0;
      *(_OWORD *)(a2 + 56) = xmmword_25578A4F0;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A500;
      *(_QWORD *)(a2 + 8) = qword_25578A4C0;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = unk_25578A4E0;
      *(_OWORD *)(a2 + 24) = xmmword_25578A4D0;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A4F0;
      *(_OWORD *)(a2 + 56) = xmmword_25578A4F0;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_22320C6E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A508);
  _Unwind_Resume(a1);
}

void sub_22320C700(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22320C714(_QWORD *a1)
{
  *a1 = &off_24EC23CA0;
  sub_22320C75C((uint64_t)(a1 + 1));
  return a1;
}

void sub_22320C748(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_22320C75C(uint64_t a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = 4;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_22320C878(a1, &v10, &v4);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_22320C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22320C878(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_22320C984(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

uint64_t sub_22320C99C(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 **v19;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_20;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_26;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_26:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_14;
LABEL_20:
    v15 = 0;
    v16 = a1;
    v17 = a2;
    if (*(_DWORD *)(a1 + 44) != 1)
      goto LABEL_15;
LABEL_21:
    a3.n128_u64[0] = sub_22320CB28(&v16, a3);
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_20;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(&v15, v5, 1);
  v16 = a1;
  v17 = a2;
  if (*(_DWORD *)(a1 + 44) == 1)
    goto LABEL_21;
LABEL_15:
  v18 = a2;
  if (*(_DWORD *)(a1 + 32) && *(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
  {
    v19 = (__int16 **)&v18;
    a3.n128_f64[0] = sub_22320D3CC(&v19, a1);
  }
LABEL_22:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a3);
  return result;
}

void sub_22320CB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int16 sub_22320CB28@<H0>(uint64_t *a1@<X0>, __n128 a2@<Q0>)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  const __int16 *v7;
  uint64_t v8;
  BOOL v9;
  BOOL v11;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t *v17;
  const __int16 *v18;

  v2 = (_DWORD *)*a1;
  v3 = *(unsigned int *)(*a1 + 32);
  v4 = *(_DWORD *)(*a1 + 48);
  if (v4 == *(_DWORD *)(*a1 + 44) * (_DWORD)v3)
  {
    v5 = v2[9];
    v6 = v5 * v4;
    v7 = (const __int16 *)a1[1];
    if (v2[13] == v6)
    {
      sub_22320CC00(*a1, v7);
    }
    else
    {
      v15 = 0;
      v14 = (v5 * v3);
      v16 = &v15;
      v17 = &v14;
      v18 = v7;
      if ((_DWORD)v3)
        v11 = v5 == 0;
      else
        v11 = 1;
      if (!v11 && v2[10] != 0)
        a2.n128_u16[0] = sub_22320CD7C((uint64_t)&v16, (uint64_t)v2, a2);
    }
  }
  else
  {
    v8 = a1[1];
    v15 = 0;
    v14 = v3;
    v16 = &v15;
    v17 = &v14;
    v18 = (const __int16 *)v8;
    if ((_DWORD)v3)
      v9 = v2[9] == 0;
    else
      v9 = 1;
    if (!v9 && v2[10] != 0)
      a2.n128_u16[0] = sub_22320D094((uint64_t)&v16, (uint64_t)v2, a2);
  }
  return a2.n128_u16[0];
}

uint64_t sub_22320CC00(uint64_t result, const __int16 *a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  uint64_t v18;

  v3 = (*(_DWORD *)(result + 40) * *(_DWORD *)(result + 36) * *(_DWORD *)(result + 32));
  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(result + 72))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 8);
    v8 = *(std::__shared_weak_count **)(result + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 88))(v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v4 = *(_QWORD *)(v6 + 24);
  }
  if ((_DWORD)v3)
    v12 = v4 == 0;
  else
    v12 = 0;
  if (v12)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  else if (!(_DWORD)v3)
  {
    return result;
  }
  if (v3 < 0x10 || v4 < (unint64_t)(a2 + 1) && v4 + 2 * v3 > (unint64_t)a2)
  {
    v13 = (__int16 *)v4;
    v14 = v3;
LABEL_23:
    v15 = v14 + 1;
    do
    {
      *v13++ = *a2;
      --v15;
    }
    while (v15 > 1);
    return result;
  }
  v13 = (__int16 *)(v4 + 2 * (v3 & 0xFFFFFFF0));
  v14 = v3 & 0xF;
  v16 = vld1q_dup_s16(a2);
  v17 = (int16x8_t *)(v4 + 16);
  v18 = v3 & 0xFFFFFFF0;
  do
  {
    v17[-1] = v16;
    *v17 = v16;
    v17 += 2;
    v18 -= 16;
  }
  while (v18);
  if ((v3 & 0xFFFFFFF0) != v3)
    goto LABEL_23;
  return result;
}

unsigned __int16 sub_22320CD7C@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unsigned int v18[7];
  _QWORD v19[3];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v18[0] = 0;
    v18[1] = v4 - 1;
    v10 = *(_DWORD *)(a2 + 48);
    v18[2] = *(_DWORD *)(a2 + 44);
    v18[3] = v3 - 1;
    v18[4] = v10;
    v18[5] = v5 - 1;
    v18[6] = *(_DWORD *)(a2 + 52);
    v11 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(_QWORD *)(a2 + 24);
    }
    v19[0] = 0;
    v19[1] = 1;
    v19[2] = 0;
    a3.n128_u16[0] = sub_22320CE7C(v18, (uint64_t)v19, a1, v11, a3);
  }
  return a3.n128_u16[0];
}

unsigned __int16 sub_22320CE7C@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned int i;
  const __int16 *v12;
  uint64_t v13;
  __int16 *v14;
  BOOL v15;
  __n128 *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  __n128 *v26;
  unint64_t v27;
  unint64_t v28;

  v5 = a4;
  v8 = a1[4];
  v9 = a1[2] | (unint64_t)(v8 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v8;
  if (a1[5])
  {
    for (i = 0; i < a1[5]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v12 = *(const __int16 **)(a3 + 16);
      v13 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v13
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_39;
      }
      if (v13 >= 1)
      {
        if ((unint64_t)v13 >= 0x10)
        {
          v15 = v5 >= (unint64_t)(v12 + 1) || (unint64_t)v12 >= v5 + 2 * v13;
          v14 = (__int16 *)v5;
          if (v15)
          {
            v14 = (__int16 *)(v5 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v12);
            v16 = (__n128 *)(v5 + 16);
            v17 = v13 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = a5;
              *v16 = a5;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v13 == (v13 & 0x7FFFFFFFFFFFFFF0);
            v13 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (__int16 *)v5;
        }
        v19 = v13 + 1;
        do
        {
          a5.n128_u16[0] = *v12;
          *v14++ = *v12;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v5 += 2 * a1[6];
    }
  }
  *(_QWORD *)a2 = v5;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v5
    && v22
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_39:
    abort();
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v5 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v5 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v5;
      v25 = v22;
LABEL_36:
      v28 = v25 + 1;
      do
      {
        a5.n128_u16[0] = *v21;
        *v24++ = *v21;
        --v28;
      }
      while (v28 > 1);
      return a5.n128_u16[0];
    }
    v24 = (__int16 *)(v5 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v21);
    v26 = (__n128 *)(v5 + 16);
    v27 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = a5;
      *v26 = a5;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_22320D094@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _DWORD v20[5];
  unsigned int v21;
  unsigned int v22;
  unint64_t v23[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v20[0] = 0;
    v20[1] = v4 - 1;
    v10 = *(_DWORD *)(a2 + 48);
    v20[2] = *(_DWORD *)(a2 + 44);
    v20[3] = v3 - 1;
    v11 = v5 - 1;
    v20[4] = v10;
    v21 = v11;
    v22 = *(_DWORD *)(a2 + 52);
    v12 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v12)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v13 + 88))(v13, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v12 = *(_QWORD *)(a2 + 24);
      v11 = v21;
    }
    v23[0] = 0;
    v23[1] = 0;
    if (v11)
    {
      v18 = 0;
      do
      {
        a3.n128_u64[0] = sub_22320D1C4((uint64_t)v20, v23, a1, v12, a3);
        v12 += 2 * v22;
        ++v18;
      }
      while (v18 < v21);
    }
    a3.n128_u16[0] = sub_22320D1C4((uint64_t)v20, v23, a1, v12, a3);
  }
  return a3.n128_u16[0];
}

unsigned __int16 sub_22320D1C4@<H0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  __n128 *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;

  v5 = a4;
  *a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    for (i = 0; i < *(_DWORD *)(a1 + 12); ++i)
    {
      *a2 = v5;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v11
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_39;
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v5 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v5 + 2 * v11;
          v12 = (__int16 *)v5;
          if (v13)
          {
            v12 = (__int16 *)(v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v10);
            v14 = (__n128 *)(v5 + 16);
            v15 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = a5;
              *v14 = a5;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v5;
        }
        v17 = v11 + 1;
        do
        {
          a5.n128_u16[0] = *v10;
          *v12++ = *v10;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v5 += 2 * *(unsigned int *)(a1 + 16);
    }
  }
  *a2 = v5;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v5
    && v20
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_39:
    abort();
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v5 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v5 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v5;
      v23 = v20;
LABEL_36:
      v26 = v23 + 1;
      do
      {
        a5.n128_u16[0] = *v19;
        *v22++ = *v19;
        --v26;
      }
      while (v26 > 1);
      return a5.n128_u16[0];
    }
    v22 = (__int16 *)(v5 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v19);
    v24 = (__n128 *)(v5 + 16);
    v25 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24[-1] = a5;
      *v24 = a5;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

double sub_22320D3CC(__int16 ***a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v9;
  __int16 *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  double result;
  _DWORD v17[7];
  _QWORD v18[2];

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  v4 = *(_DWORD *)(a2 + 40);
  if (v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v17[0] = 0;
    v17[1] = v3 - 1;
    v9 = *(_DWORD *)(a2 + 48);
    v17[2] = *(_DWORD *)(a2 + 44);
    v17[3] = v2 - 1;
    v17[4] = v9;
    v17[5] = v4 - 1;
    v17[6] = *(_DWORD *)(a2 + 52);
    v10 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v10)
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v11 + 88))(v11, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(__int16 **)(a2 + 24);
    }
    v18[0] = 0;
    v18[1] = 0;
    *(_QWORD *)&result = sub_22320D4C4(v17, (uint64_t)v18, a1, v10);
  }
  return result;
}

__int16 sub_22320D4C4@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, __int16 ***a3@<X2>, __int16 *a4@<X3>)
{
  unsigned int v4;
  __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  __int16 *v8;
  __int16 result;

  if (a1[5])
  {
    v4 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      v5 = a4;
      if (a1[3])
      {
        v6 = 0;
        v5 = a4;
        do
        {
          *(_QWORD *)a2 = v5;
          *v5 = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
          v5 += a1[4];
          ++v6;
        }
        while (v6 < a1[3]);
      }
      *(_QWORD *)a2 = v5;
      *v5 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[6];
      ++v4;
    }
    while (v4 < a1[5]);
  }
  *(_QWORD *)a2 = a4;
  if (a1[3])
  {
    v7 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      *a4 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[4];
      ++v7;
    }
    while (v7 < a1[3]);
  }
  *(_QWORD *)a2 = a4;
  *a4 = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
  v8 = **a3;
  result = *v8;
  *(_WORD *)(*(_QWORD *)a2 + 6) = *v8;
  return result;
}

double sub_22320D680@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A560);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A560))
  {
    sub_22320C714(&qword_25578A510);
    __cxa_atexit((void (*)(void *))sub_2231CD9B0, &qword_25578A510, &dword_22314D000);
    __cxa_guard_release(&qword_25578A560);
  }
  v5 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)a2 = &off_24EC23CA0;
  if (v5)
  {
    sub_2231EEEF0(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A518;
    v8 = (std::__shared_weak_count *)unk_25578A520;
    if (unk_25578A520)
    {
      v9 = (unint64_t *)(unk_25578A520 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A558;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = unk_25578A538;
      *(_OWORD *)(a2 + 24) = xmmword_25578A528;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A548;
      *(_OWORD *)(a2 + 56) = xmmword_25578A548;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A558;
      *(_QWORD *)(a2 + 8) = qword_25578A518;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = unk_25578A538;
      *(_OWORD *)(a2 + 24) = xmmword_25578A528;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A548;
      *(_OWORD *)(a2 + 56) = xmmword_25578A548;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_22320D828(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A560);
  _Unwind_Resume(a1);
}

void sub_22320D840(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

double sub_22320D854(uint64_t a1, __n128 a2)
{
  _DWORD *v2;
  int v3;
  _WORD *v4;
  BOOL v5;
  char *v7;
  char *v8;
  _WORD *v10[2];
  uint64_t v11;
  char *v12;
  char v13;

  v2 = *(_DWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 44) == 1)
  {
    v3 = v2[12];
    if (v3 == v2[8])
    {
      if (v2[13] == v2[9] * v3)
      {
        sub_22320DAEC(*(_QWORD *)a1, *(int16x4_t **)(a1 + 8));
      }
      else
      {
        v8 = *(char **)(a1 + 8);
        v11 = *(_QWORD *)a1;
        v12 = v8;
        a2.n128_f64[0] = sub_22320DA08((uint64_t)&v11, a2);
      }
    }
    else
    {
      v7 = *(char **)(a1 + 8);
      v11 = *(_QWORD *)a1;
      v12 = v7;
      a2.n128_f64[0] = sub_22320D928((uint64_t)&v11, a2);
    }
  }
  else
  {
    v4 = *(_WORD **)(a1 + 8);
    v13 = 0;
    v11 = (uint64_t)v2;
    v12 = &v13;
    v10[0] = v4;
    v10[1] = &v11;
    if (v2[8])
      v5 = v2[9] == 0;
    else
      v5 = 1;
    if (!v5 && v2[10] != 0)
      a2.n128_u64[0] = sub_22320DCFC(v10, (uint64_t)v2);
  }
  return a2.n128_f64[0];
}

double sub_22320D928(uint64_t a1, __n128 _Q0)
{
  char *v2;
  _WORD *v3;
  unsigned int v4;
  _BOOL4 v11;
  BOOL v18;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t *v24;
  _WORD *v25;
  _WORD *v26[2];
  char v27;

  v2 = *(char **)a1;
  v3 = *(_WORD **)(a1 + 8);
  v22 = 0;
  v4 = *((_DWORD *)v2 + 8);
  v21 = v4;
  _H0 = *v3;
  __asm { FCVT            S0, H0 }
  _H1 = v3[1];
  __asm { FCVT            S1, H1 }
  v11 = _S1 == _Q0.n128_f32[0];
  if (_S1 == _Q0.n128_f32[0])
  {
    _H1 = v3[2];
    __asm { FCVT            S1, H1 }
    v11 = _S1 == _Q0.n128_f32[0];
    if (_S1 == _Q0.n128_f32[0])
    {
      _H1 = v3[3];
      __asm { FCVT            S1, H1 }
      v11 = _S1 == _Q0.n128_f32[0];
    }
  }
  if (v11)
  {
    v23 = &v22;
    v24 = &v21;
    v25 = v3;
    if (v4)
      _ZF = *((_DWORD *)v2 + 9) == 0;
    else
      _ZF = 1;
    if (!_ZF && *((_DWORD *)v2 + 10) != 0)
      _Q0.n128_u64[0] = sub_22320D094((uint64_t)&v23, (uint64_t)v2, _Q0);
  }
  else
  {
    v27 = 0;
    v23 = v2;
    v24 = (uint64_t *)&v27;
    v26[0] = v3;
    v26[1] = &v23;
    if (v4)
      v18 = *((_DWORD *)v2 + 9) == 0;
    else
      v18 = 1;
    if (!v18 && *((_DWORD *)v2 + 10) != 0)
      _Q0.n128_u64[0] = sub_22320DCFC(v26, (uint64_t)v2);
  }
  return _Q0.n128_f64[0];
}

double sub_22320DA08(uint64_t a1, __n128 _Q0)
{
  char *v2;
  _WORD *v3;
  int v4;
  int v5;
  _BOOL4 v12;
  BOOL v19;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t *v25;
  _WORD *v26;
  _WORD *v27[2];
  char v28;

  v2 = *(char **)a1;
  v3 = *(_WORD **)(a1 + 8);
  v23 = 0;
  v5 = *((_DWORD *)v2 + 8);
  v4 = *((_DWORD *)v2 + 9);
  v22 = (v4 * v5);
  _H0 = *v3;
  __asm { FCVT            S0, H0 }
  _H1 = v3[1];
  __asm { FCVT            S1, H1 }
  v12 = _S1 == _Q0.n128_f32[0];
  if (_S1 == _Q0.n128_f32[0])
  {
    _H1 = v3[2];
    __asm { FCVT            S1, H1 }
    v12 = _S1 == _Q0.n128_f32[0];
    if (_S1 == _Q0.n128_f32[0])
    {
      _H1 = v3[3];
      __asm { FCVT            S1, H1 }
      v12 = _S1 == _Q0.n128_f32[0];
    }
  }
  if (v12)
  {
    v24 = &v23;
    v25 = &v22;
    v26 = v3;
    if (v5)
      _ZF = v4 == 0;
    else
      _ZF = 1;
    if (!_ZF && *((_DWORD *)v2 + 10) != 0)
      _Q0.n128_u64[0] = sub_22320CD7C((uint64_t)&v24, (uint64_t)v2, _Q0);
  }
  else
  {
    v28 = 0;
    v24 = v2;
    v25 = (uint64_t *)&v28;
    v27[0] = v3;
    v27[1] = &v24;
    if (v5)
      v19 = v4 == 0;
    else
      v19 = 1;
    if (!v19 && *((_DWORD *)v2 + 10) != 0)
      _Q0.n128_u64[0] = sub_22320DCFC(v27, (uint64_t)v2);
  }
  return _Q0.n128_f64[0];
}

void sub_22320DAEC(uint64_t a1, int16x4_t *a2)
{
  _BOOL4 v12;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  _WORD *v27;
  uint64_t v28;
  unint64_t v29;
  int16x8_t v30;
  int16x8_t *v31;
  uint64_t v32;
  _WORD *v33[2];
  _QWORD v34[2];
  char v35;

  _H0 = a2->i16[0];
  __asm { FCVT            S0, H0 }
  _H1 = a2->i16[1];
  __asm { FCVT            S1, H1 }
  v12 = _S1 == _S0;
  if (_S1 == _S0)
  {
    _H1 = a2->i16[2];
    __asm { FCVT            S1, H1 }
    v12 = _S1 == _S0;
    if (_S1 == _S0)
    {
      _H1 = a2->i16[3];
      __asm { FCVT            S1, H1 }
      v12 = _S1 == _S0;
    }
  }
  v18 = *(_DWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 36);
  v19 = *(_DWORD *)(a1 + 40);
  if (v12)
  {
    v20 = (v19 * v17 * v18);
    v21 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v21)
    {
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(std::__shared_weak_count **)(a1 + 16);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v22 + 88))(v22, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v21 = *(_QWORD *)(a1 + 24);
    }
    if (!(_DWORD)v20 || v21)
    {
      if (!(_DWORD)v20)
        return;
    }
    else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (v20 < 0x10 || v21 < (unint64_t)a2 + 2 && v21 + 2 * v20 > (unint64_t)a2)
    {
      v27 = (_WORD *)v21;
      v28 = v20;
LABEL_27:
      v29 = v28 + 1;
      do
      {
        *v27++ = a2->i16[0];
        --v29;
      }
      while (v29 > 1);
      return;
    }
    v27 = (_WORD *)(v21 + 2 * (v20 & 0xFFFFFFF0));
    v28 = v20 & 0xF;
    v30 = vdupq_lane_s16(*a2, 0);
    v31 = (int16x8_t *)(v21 + 16);
    v32 = v20 & 0xFFFFFFF0;
    do
    {
      v31[-1] = v30;
      *v31 = v30;
      v31 += 2;
      v32 -= 16;
    }
    while (v32);
    if ((v20 & 0xFFFFFFF0) != v20)
      goto LABEL_27;
  }
  else
  {
    v35 = 0;
    v34[0] = a1;
    v34[1] = &v35;
    v33[0] = a2;
    v33[1] = v34;
    if (v18 && v17 && v19)
      sub_22320DCFC(v33, a1);
  }
}

__int16 sub_22320DCFC@<H0>(_WORD **a1@<X0>, uint64_t a2@<X1>)
{
  int v2;
  int v3;
  BOOL v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  BOOL v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  _WORD *v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  _WORD *v27;
  _WORD *v28;
  __int16 result;

  v2 = *(_DWORD *)(a2 + 36);
  v3 = *(_DWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 32))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v8 = v3 - 1;
    v10 = *(unsigned int *)(a2 + 48);
    v9 = *(unsigned int *)(a2 + 52);
    v11 = *(_WORD **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72))
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v13 + 88))(v13, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(_WORD **)(a2 + 24);
    }
    v18 = v2 - 1;
    v19 = 2 * v10;
    if (v8)
    {
      if (v2 == 1)
      {
        do
        {
          v26 = *a1;
          *v11 = **a1;
          v11[1] = v26[1];
          v11[2] = v26[2];
          v11[3] = v26[3];
          v11 += v9;
          --v8;
        }
        while (v8);
      }
      else
      {
        v20 = 0;
        v21 = v11 + 2;
        do
        {
          v22 = v21;
          v23 = v2 - 1;
          do
          {
            v24 = *a1;
            *(v22 - 2) = **a1;
            *(v22 - 1) = v24[1];
            *v22 = v24[2];
            v22[1] = v24[3];
            v22 = (_WORD *)((char *)v22 + v19);
            --v23;
          }
          while (v23);
          v25 = *a1;
          *(v22 - 2) = **a1;
          *(v22 - 1) = v25[1];
          *v22 = v25[2];
          v22[1] = v25[3];
          v11 += v9;
          ++v20;
          v21 += v9;
        }
        while (v20 != v8);
      }
    }
    if (v2 != 1)
    {
      do
      {
        v27 = *a1;
        *v11 = **a1;
        v11[1] = v27[1];
        v11[2] = v27[2];
        v11[3] = v27[3];
        v11 = (_WORD *)((char *)v11 + v19);
        --v18;
      }
      while (v18);
    }
    v28 = *a1;
    *v11 = **a1;
    v11[1] = v28[1];
    v11[2] = v28[2];
    result = v28[3];
    v11[3] = result;
  }
  return result;
}

double sub_22320DEEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A5B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A5B8))
  {
    sub_22320E0C0(&qword_25578A568);
    __cxa_atexit((void (*)(void *))sub_2231CDC3C, &qword_25578A568, &dword_22314D000);
    __cxa_guard_release(&qword_25578A5B8);
  }
  v5 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)a2 = &off_24EC24270;
  if (v5)
  {
    sub_2231F2D88(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A570;
    v8 = *(std::__shared_weak_count **)algn_25578A578;
    if (*(_QWORD *)algn_25578A578)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A578 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A5B0;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = *(_OWORD *)algn_25578A590;
      *(_OWORD *)(a2 + 24) = xmmword_25578A580;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A5A0;
      *(_OWORD *)(a2 + 56) = xmmword_25578A5A0;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A5B0;
      *(_QWORD *)(a2 + 8) = qword_25578A570;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = *(_OWORD *)algn_25578A590;
      *(_OWORD *)(a2 + 24) = xmmword_25578A580;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A5A0;
      *(_OWORD *)(a2 + 56) = xmmword_25578A5A0;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_22320E094(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A5B8);
  _Unwind_Resume(a1);
}

void sub_22320E0AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22320E0C0(_QWORD *a1)
{
  *a1 = &off_24EC24270;
  sub_22320E108((uint64_t)(a1 + 1));
  return a1;
}

void sub_22320E0F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_22320E108(uint64_t a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = 4;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_22320E224(a1, &v10, &v4);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_22320E210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22320E224(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_22320E330(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

uint64_t sub_22320E348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_20;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_26;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_26:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_14;
LABEL_20:
    v14 = 0;
    v15 = a1;
    v16 = a2;
    if (*(_DWORD *)(a1 + 44) != 1)
      goto LABEL_15;
LABEL_21:
    sub_22320E4D4(&v15);
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_20;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v14, v4, 1);
  v15 = a1;
  v16 = a2;
  if (*(_DWORD *)(a1 + 44) == 1)
    goto LABEL_21;
LABEL_15:
  v17 = a2;
  if (*(_DWORD *)(a1 + 32) && *(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
  {
    v18 = &v17;
    sub_22320ED78(&v18, a1);
  }
LABEL_22:
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22320E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22320E4D4(uint64_t *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  const __int16 *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v10;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t *v15;
  const __int16 *v16;

  v1 = (_DWORD *)*result;
  v2 = *(unsigned int *)(*result + 32);
  v3 = *(_DWORD *)(*result + 48);
  if (v3 == *(_DWORD *)(*result + 44) * (_DWORD)v2)
  {
    v4 = v1[9];
    v5 = v4 * v3;
    v6 = (const __int16 *)result[1];
    if (v1[13] == v5)
    {
      return (uint64_t *)sub_22320E5AC(*result, v6);
    }
    else
    {
      v13 = 0;
      v12 = (v4 * v2);
      v14 = &v13;
      v15 = &v12;
      v16 = v6;
      if ((_DWORD)v2)
        v10 = v4 == 0;
      else
        v10 = 1;
      if (!v10 && v1[10] != 0)
        return (uint64_t *)sub_22320E728((_BOOL8)&v14, (uint64_t)v1);
    }
  }
  else
  {
    v7 = result[1];
    v13 = 0;
    v12 = v2;
    v14 = &v13;
    v15 = &v12;
    v16 = (const __int16 *)v7;
    if ((_DWORD)v2)
      v8 = v1[9] == 0;
    else
      v8 = 1;
    if (!v8 && v1[10] != 0)
      return (uint64_t *)sub_22320EA40((uint64_t)&v14, (uint64_t)v1);
  }
  return result;
}

uint64_t sub_22320E5AC(uint64_t result, const __int16 *a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  uint64_t v18;

  v3 = (*(_DWORD *)(result + 40) * *(_DWORD *)(result + 36) * *(_DWORD *)(result + 32));
  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(result + 72))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 8);
    v8 = *(std::__shared_weak_count **)(result + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 88))(v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v4 = *(_QWORD *)(v6 + 24);
  }
  if ((_DWORD)v3)
    v12 = v4 == 0;
  else
    v12 = 0;
  if (v12)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  else if (!(_DWORD)v3)
  {
    return result;
  }
  if (v3 < 0x10 || v4 < (unint64_t)(a2 + 1) && v4 + 2 * v3 > (unint64_t)a2)
  {
    v13 = (__int16 *)v4;
    v14 = v3;
LABEL_23:
    v15 = v14 + 1;
    do
    {
      *v13++ = *a2;
      --v15;
    }
    while (v15 > 1);
    return result;
  }
  v13 = (__int16 *)(v4 + 2 * (v3 & 0xFFFFFFF0));
  v14 = v3 & 0xF;
  v16 = vld1q_dup_s16(a2);
  v17 = (int16x8_t *)(v4 + 16);
  v18 = v3 & 0xFFFFFFF0;
  do
  {
    v17[-1] = v16;
    *v17 = v16;
    v17 += 2;
    v18 -= 16;
  }
  while (v18);
  if ((v3 & 0xFFFFFFF0) != v3)
    goto LABEL_23;
  return result;
}

BOOL sub_22320E728(_BOOL8 result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _DWORD v16[7];
  _QWORD v17[3];

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  v4 = *(_DWORD *)(a2 + 40);
  if (v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v8 = result;
    v16[0] = 0;
    v16[1] = v3 - 1;
    v9 = *(_DWORD *)(a2 + 48);
    v16[2] = *(_DWORD *)(a2 + 44);
    v16[3] = v2 - 1;
    v16[4] = v9;
    v16[5] = v4 - 1;
    v16[6] = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v10)
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v11 + 88))(v11, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_QWORD *)(a2 + 24);
    }
    v17[0] = 0;
    v17[1] = 1;
    v17[2] = 0;
    return sub_22320E828((_BOOL8)v16, (uint64_t)v17, v8, v10);
  }
  return result;
}

BOOL sub_22320E828(_BOOL8 result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  int16x8_t v15;
  int16x8_t *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t *v27;
  unint64_t v28;
  unint64_t v29;

  v4 = a4;
  v7 = *(unsigned int *)(result + 16);
  v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    for (i = 0; i < v9[5]; ++i)
    {
      *(_QWORD *)a2 = v4;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if (result)
            goto LABEL_39;
        }
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v4 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v4 + 2 * v12;
          v13 = (__int16 *)v4;
          if (v14)
          {
            v13 = (__int16 *)(v4 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            v15 = vld1q_dup_s16(v11);
            v16 = (int16x8_t *)(v4 + 16);
            v17 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = v15;
              *v16 = v15;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v4;
        }
        v19 = v12 + 1;
        do
        {
          *v13++ = *v11;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 2 * v9[6];
    }
  }
  *(_QWORD *)a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if (result)
LABEL_39:
        abort();
    }
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v4 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v4 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v4;
      v25 = v22;
LABEL_36:
      v29 = v25 + 1;
      do
      {
        *v24++ = *v21;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v24 = (__int16 *)(v4 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    v26 = vld1q_dup_s16(v21);
    v27 = (int16x8_t *)(v4 + 16);
    v28 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_22320EA40(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _DWORD v18[5];
  unsigned int v19;
  unsigned int v20;
  unint64_t v21[2];

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  v4 = *(_DWORD *)(a2 + 40);
  if (v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v8 = result;
    v18[0] = 0;
    v18[1] = v3 - 1;
    v9 = *(_DWORD *)(a2 + 48);
    v18[2] = *(_DWORD *)(a2 + 44);
    v18[3] = v2 - 1;
    v10 = v4 - 1;
    v18[4] = v9;
    v19 = v10;
    v20 = *(_DWORD *)(a2 + 52);
    v11 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(_QWORD *)(a2 + 24);
      v10 = v19;
    }
    v21[0] = 0;
    v21[1] = 0;
    if (v10)
    {
      v17 = 0;
      do
      {
        sub_22320EB70((uint64_t)v18, v21, v8, v11);
        v11 += 2 * v20;
        ++v17;
      }
      while (v17 < v19);
    }
    return sub_22320EB70((uint64_t)v18, v21, v8, v11);
  }
  return result;
}

uint64_t sub_22320EB70(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const __int16 *v9;
  uint64_t v10;
  __int16 *v11;
  BOOL v12;
  int16x8_t v13;
  int16x8_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  int16x8_t v24;
  int16x8_t *v25;
  unint64_t v26;
  unint64_t v27;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const __int16 **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v10 >= 1)
      {
        if ((unint64_t)v10 >= 0x10)
        {
          v12 = v4 >= (unint64_t)(v9 + 1) || (unint64_t)v9 >= v4 + 2 * v10;
          v11 = (__int16 *)v4;
          if (v12)
          {
            v11 = (__int16 *)(v4 + 2 * (v10 & 0xFFFFFFFFFFFFFFF0));
            v13 = vld1q_dup_s16(v9);
            v14 = (int16x8_t *)(v4 + 16);
            v15 = v10 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = v13;
              *v14 = v13;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v10 == (v10 & 0x7FFFFFFFFFFFFFF0);
            v10 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v11 = (__int16 *)v4;
        }
        v17 = v10 + 1;
        do
        {
          *v11++ = *v9;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v4)
  {
    if (v20)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v4 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v4 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v4;
      v23 = v20;
LABEL_36:
      v27 = v23 + 1;
      do
      {
        *v22++ = *v19;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v22 = (__int16 *)(v4 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    v24 = vld1q_dup_s16(v19);
    v25 = (int16x8_t *)(v4 + 16);
    v26 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = v24;
      *v25 = v24;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

_DWORD *sub_22320ED78(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  _QWORD **v8;
  int v9;
  _WORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _WORD *v16;
  _DWORD v17[7];

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  v4 = *(_DWORD *)(a2 + 40);
  if (v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v8 = (_QWORD **)result;
    v17[0] = 0;
    v17[1] = v3 - 1;
    v9 = *(_DWORD *)(a2 + 48);
    v17[2] = *(_DWORD *)(a2 + 44);
    v17[3] = v2 - 1;
    v17[4] = v9;
    v17[5] = v4 - 1;
    v17[6] = *(_DWORD *)(a2 + 52);
    v10 = *(_WORD **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v10)
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v11 + 88))(v11, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_WORD **)(a2 + 24);
    }
    v16 = v10;
    return sub_22320EE70(v17, v8, &v16);
  }
  return result;
}

_DWORD *sub_22320EE70(_DWORD *result, _QWORD **a2, _WORD **a3)
{
  _WORD *v3;
  int v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;

  v3 = *a3;
  v4 = result[5];
  if (!v4)
  {
    v5 = result[3];
    v6 = (_WORD *)**a2;
    if (!v5)
      goto LABEL_13;
    goto LABEL_9;
  }
  v5 = result[3];
  v6 = (_WORD *)**a2;
  v7 = result[6];
  if (v5)
  {
    v8 = 0;
    v9 = v3 + 2;
    v10 = 2 * result[4];
    do
    {
      v11 = v9;
      v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *v11 = *v6;
        v11[1] = *v6;
        v11 = (_WORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    v13 = 2 * result[4];
    do
    {
      *v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      v3 = (_WORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  v3[3] = *v6;
  return result;
}

double sub_22320EFB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A610);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A610))
  {
    sub_22320E0C0(&qword_25578A5C0);
    __cxa_atexit((void (*)(void *))sub_2231CDC3C, &qword_25578A5C0, &dword_22314D000);
    __cxa_guard_release(&qword_25578A610);
  }
  v5 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)a2 = &off_24EC24270;
  if (v5)
  {
    sub_2231F2D88(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A5C8;
    v8 = (std::__shared_weak_count *)unk_25578A5D0;
    if (unk_25578A5D0)
    {
      v9 = (unint64_t *)(unk_25578A5D0 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A608;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = unk_25578A5E8;
      *(_OWORD *)(a2 + 24) = xmmword_25578A5D8;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A5F8;
      *(_OWORD *)(a2 + 56) = xmmword_25578A5F8;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A608;
      *(_QWORD *)(a2 + 8) = qword_25578A5C8;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = unk_25578A5E8;
      *(_OWORD *)(a2 + 24) = xmmword_25578A5D8;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A5F8;
      *(_OWORD *)(a2 + 56) = xmmword_25578A5F8;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_22320F158(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A610);
  _Unwind_Resume(a1);
}

void sub_22320F170(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

double sub_22320F184@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A650);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A650))
  {
    sub_2231CDB84(&qword_25578A618);
    __cxa_atexit((void (*)(void *))sub_22319EF60, &qword_25578A618, &dword_22314D000);
    __cxa_guard_release(&qword_25578A650);
  }
  v5 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)a2 = &off_24EC200A8;
  if (v5)
  {
    sub_22320F350(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A620;
    v8 = *(std::__shared_weak_count **)algn_25578A628;
    if (*(_QWORD *)algn_25578A628)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A628 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A648;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      result = *(double *)&xmmword_25578A630;
      *(_OWORD *)(a2 + 24) = xmmword_25578A630;
      *(_QWORD *)(a2 + 40) = qword_25578A640;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 48) = v11;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v16 = word_25578A648;
      *(_QWORD *)(a2 + 8) = qword_25578A620;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(double *)&xmmword_25578A630;
      *(_OWORD *)(a2 + 24) = xmmword_25578A630;
      *(_QWORD *)(a2 + 40) = qword_25578A640;
      *(_WORD *)(a2 + 48) = v16;
    }
  }
  return result;
}

void sub_22320F324(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A650);
  _Unwind_Resume(a1);
}

void sub_22320F33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_22320F350(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22320F500(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231A3CC8(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_22320F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_22320F500(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_22320F578();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_22320F578()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A670);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A670))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231A36D0();
    sub_22320F77C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_22320F77C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A658, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A658, &dword_22314D000);
          __cxa_guard_release(&qword_25578A670);
          return &stru_25578A658;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A658;
}

void sub_22320F6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A670);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A670);
  _Unwind_Resume(a1);
}

void sub_22320F77C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22320F818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22320F834(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t *sub_22320F89C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2242762F8(v2);
    MEMORY[0x227684CE8](v3, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_22320F8E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22320F94C()
{
  return 3;
}

uint64_t sub_22320F954(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_22320F95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_22320F978(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_22320F9FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_22320FB44(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_22320FB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22320FB44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC71150)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22320FC50(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_22320FC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_22320FC50@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22320FF38();
  v5 = sub_22320F578();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_22320FF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_22320FF38()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A690);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A690))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231A36D0();
    sub_22321013C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_22321013C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A678, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A678, &dword_22314D000);
          __cxa_guard_release(&qword_25578A690);
          return &stru_25578A678;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A678;
}

void sub_223210088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A690);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A690);
  _Unwind_Resume(a1);
}

void sub_22321013C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232101D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_2232101F4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A6B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A6B0))
    return &xmmword_25578A698;
  v2 = (char *)sub_2232102D0();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578A698, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578A6A8 = *((_QWORD *)v2 + 2);
    xmmword_25578A698 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578A698, &dword_22314D000);
  __cxa_guard_release(&qword_25578A6B0);
  return &xmmword_25578A698;
}

void sub_2232102B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A6B0);
  _Unwind_Resume(a1);
}

void *sub_2232102D0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578A6D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A6D0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVBuffer]", qword_25578A6B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578A6B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A6D0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578A6F0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578A6F0))
    return &unk_25578A6D8;
  sub_224573040((uint64_t)qword_25578A6B8, (uint64_t)&unk_25578A6D8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578A6D8, &dword_22314D000);
  __cxa_guard_release(&qword_25578A6F0);
  return &unk_25578A6D8;
}

void sub_2232103C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A6F0);
  _Unwind_Resume(a1);
}

void sub_2232103D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A6D0);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232103F0(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC25008;
  v10 = *a2;
  if (v10)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = *a2;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25100;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v11 = v4;
  *a2 = 0;
  sub_2232106E0((uint64_t)(a1 + 1), &v10);
  v6 = v11;
  if (!v11)
    return a1;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2232104C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_2232104DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354((uint64_t)&a9);
  nullsub_30(v9);
  _Unwind_Resume(a1);
}

void sub_2232104F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223210564()
{
  return 3;
}

uint64_t sub_22321056C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223210574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_223210590(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223210618(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22321063C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_2242762F8(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223210670(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2232106E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v15, v3, 3);
  v9 = *(_QWORD *)(v15 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v15;
  *(_QWORD *)(a1 + 32) = v9;
  v15 = 0;
  MEMORY[0x227684CE8]();
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v10)
    return a1;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_223210814(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

double sub_223210828@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A730);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A730))
  {
    sub_2231CDB84(&qword_25578A6F8);
    __cxa_atexit((void (*)(void *))sub_22319EF60, &qword_25578A6F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A730);
  }
  v5 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)a2 = &off_24EC200A8;
  if (v5)
  {
    sub_22320F350(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A700;
    v8 = *(std::__shared_weak_count **)algn_25578A708;
    if (*(_QWORD *)algn_25578A708)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A708 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A728;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      result = *(double *)&xmmword_25578A710;
      *(_OWORD *)(a2 + 24) = xmmword_25578A710;
      *(_QWORD *)(a2 + 40) = qword_25578A720;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 48) = v11;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v16 = word_25578A728;
      *(_QWORD *)(a2 + 8) = qword_25578A700;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(double *)&xmmword_25578A710;
      *(_OWORD *)(a2 + 24) = xmmword_25578A710;
      *(_QWORD *)(a2 + 40) = qword_25578A720;
      *(_WORD *)(a2 + 48) = v16;
    }
  }
  return result;
}

void sub_2232109C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A730);
  _Unwind_Resume(a1);
}

void sub_2232109E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

double sub_2232109F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A788);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A788))
  {
    sub_223210BC8(&qword_25578A738);
    __cxa_atexit((void (*)(void *))sub_2231D4840, &qword_25578A738, &dword_22314D000);
    __cxa_guard_release(&qword_25578A788);
  }
  v5 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)a2 = &off_24EC25150;
  if (v5)
  {
    sub_223210F50(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A740;
    v8 = *(std::__shared_weak_count **)algn_25578A748;
    if (*(_QWORD *)algn_25578A748)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A748 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A780;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = unk_25578A760;
      *(_OWORD *)(a2 + 24) = xmmword_25578A750;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A770;
      *(_OWORD *)(a2 + 56) = xmmword_25578A770;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A780;
      *(_QWORD *)(a2 + 8) = qword_25578A740;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = unk_25578A760;
      *(_OWORD *)(a2 + 24) = xmmword_25578A750;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A770;
      *(_OWORD *)(a2 + 56) = xmmword_25578A770;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_223210B9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A788);
  _Unwind_Resume(a1);
}

void sub_223210BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223210BC8(_QWORD *a1)
{
  *a1 = &off_24EC25150;
  sub_223210C10((uint64_t)(a1 + 1));
  return a1;
}

void sub_223210BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_223210C10(uint64_t a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = 4;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_223210E2C(a1, &v10, &v4);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_223210D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223210D2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223210D98()
{
  return 31;
}

uint64_t sub_223210DA0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223210DA8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_223210E2C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_223210F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

void sub_223210F50(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223211100(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_223211434(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232110AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223211100(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223211178();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_223211178()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A7A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A7A8))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231EF4F0();
    sub_22321137C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_22321137C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A790, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A790, &dword_22314D000);
          __cxa_guard_release(&qword_25578A7A8);
          return &stru_25578A790;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A790;
}

void sub_2232112C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A7A8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A7A8);
  _Unwind_Resume(a1);
}

void sub_22321137C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223211418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223211434(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v20, v3, 31);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_223211584(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223211598(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t *sub_223211600(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224278C60(v2);
    MEMORY[0x227684CE8](v3, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_223211644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232116B0()
{
  return 31;
}

uint64_t sub_2232116B8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232116C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2232116DC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223211760(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2232118A8(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_223211894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232118A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC6FC50)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232119B4(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_223211974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2232119B4@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223211C9C();
  v5 = sub_223211178();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223211C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_223211C9C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A7C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A7C8))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231EF4F0();
    sub_223211EA0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_223211EA0((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A7B0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A7B0, &dword_22314D000);
          __cxa_guard_release(&qword_25578A7C8);
          return &stru_25578A7B0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A7B0;
}

void sub_223211DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A7C8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A7C8);
  _Unwind_Resume(a1);
}

void sub_223211EA0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223211F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223211F58(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC25340;
  v10 = *a2;
  if (v10)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = *a2;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25438;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v11 = v4;
  *a2 = 0;
  sub_223212248((uint64_t)(a1 + 1), &v10);
  v6 = v11;
  if (!v11)
    return a1;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223212030(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_223212044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354((uint64_t)&a9);
  nullsub_30(v9);
  _Unwind_Resume(a1);
}

void sub_223212060(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232120CC()
{
  return 31;
}

uint64_t sub_2232120D4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232120DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2232120F8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223212180(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232121A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_224278C60(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2232121D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223212248(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v16;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v16, v3, 31);
  v10 = v16[1];
  v9 = v16[2];
  *(_OWORD *)(a1 + 16) = *v16;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  v16 = 0;
  MEMORY[0x227684CE8]();
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v11)
    return a1;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_22321237C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

double sub_223212390@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A820);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A820))
  {
    sub_223210BC8(&qword_25578A7D0);
    __cxa_atexit((void (*)(void *))sub_2231D4840, &qword_25578A7D0, &dword_22314D000);
    __cxa_guard_release(&qword_25578A820);
  }
  v5 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)a2 = &off_24EC25150;
  if (v5)
  {
    sub_223210F50(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A7D8;
    v8 = (std::__shared_weak_count *)unk_25578A7E0;
    if (unk_25578A7E0)
    {
      v9 = (unint64_t *)(unk_25578A7E0 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A818;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = unk_25578A7F8;
      *(_OWORD *)(a2 + 24) = xmmword_25578A7E8;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A808;
      *(_OWORD *)(a2 + 56) = xmmword_25578A808;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A818;
      *(_QWORD *)(a2 + 8) = qword_25578A7D8;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = unk_25578A7F8;
      *(_OWORD *)(a2 + 24) = xmmword_25578A7E8;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A808;
      *(_OWORD *)(a2 + 56) = xmmword_25578A808;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_223212538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A820);
  _Unwind_Resume(a1);
}

void sub_223212550(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

double sub_223212564@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A878);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A878))
  {
    sub_223212738(&qword_25578A828);
    __cxa_atexit((void (*)(void *))sub_22319F500, &qword_25578A828, &dword_22314D000);
    __cxa_guard_release(&qword_25578A878);
  }
  v5 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)a2 = &off_24EC204C0;
  if (v5)
  {
    sub_2232129C0(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A830;
    v8 = *(std::__shared_weak_count **)algn_25578A838;
    if (*(_QWORD *)algn_25578A838)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A838 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A870;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = *(_OWORD *)algn_25578A850;
      *(_OWORD *)(a2 + 24) = xmmword_25578A840;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A860;
      *(_OWORD *)(a2 + 56) = xmmword_25578A860;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A870;
      *(_QWORD *)(a2 + 8) = qword_25578A830;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = *(_OWORD *)algn_25578A850;
      *(_OWORD *)(a2 + 24) = xmmword_25578A840;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A860;
      *(_OWORD *)(a2 + 56) = xmmword_25578A860;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_22321270C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A878);
  _Unwind_Resume(a1);
}

void sub_223212724(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223212738(_QWORD *a1)
{
  *a1 = &off_24EC204C0;
  sub_223212780((uint64_t)(a1 + 1));
  return a1;
}

void sub_22321276C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_223212780(uint64_t a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = 4;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_22321289C(a1, &v10, &v4);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_223212888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22321289C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_2232129A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(exception_object);
}

void sub_2232129C0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 38)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223212B70(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231A585C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223212B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223212B70(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223212BE8();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_223212BE8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A898);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A898))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231A5138();
    sub_223212DEC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223212DEC((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A880, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A880, &dword_22314D000);
          __cxa_guard_release(&qword_25578A898);
          return &stru_25578A880;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A880;
}

void sub_223212D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A898);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A898);
  _Unwind_Resume(a1);
}

void sub_223212DEC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223212E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223212EA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t *sub_223212F0C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224274AB0(v2);
    MEMORY[0x227684CE8](v3, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_223212F50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223212FBC()
{
  return 38;
}

uint64_t sub_223212FC4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223212FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_223212FE8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_22321306C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2232131B4(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_2232131A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232131B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC6FD70)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232132C0(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_223213280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2232132C0@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232135A8();
  v5 = sub_223212BE8();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_22321357C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2232135A8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A8B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A8B8))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231A5138();
    sub_2232137AC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_2232137AC((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A8A0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A8A0, &dword_22314D000);
          __cxa_guard_release(&qword_25578A8B8);
          return &stru_25578A8A0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A8A0;
}

void sub_2232136F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A8B8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A8B8);
  _Unwind_Resume(a1);
}

void sub_2232137AC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223213848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223213864(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC25580;
  v10 = *a2;
  if (v10)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = *a2;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25678;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v11 = v4;
  *a2 = 0;
  sub_223213B54((uint64_t)(a1 + 1), &v10);
  v6 = v11;
  if (!v11)
    return a1;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22321393C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_223213950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354((uint64_t)&a9);
  nullsub_30(v9);
  _Unwind_Resume(a1);
}

void sub_22321396C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232139D8()
{
  return 38;
}

uint64_t sub_2232139E0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232139E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_223213A04(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223213A8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223213AB0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_224274AB0(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223213AE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223213B54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v16;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v16, v3, 38);
  v10 = v16[1];
  v9 = v16[2];
  *(_OWORD *)(a1 + 16) = *v16;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  v16 = 0;
  MEMORY[0x227684CE8]();
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v11)
    return a1;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_223213C88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

double sub_223213C9C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A910);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A910))
  {
    sub_223212738(&qword_25578A8C0);
    __cxa_atexit((void (*)(void *))sub_22319F500, &qword_25578A8C0, &dword_22314D000);
    __cxa_guard_release(&qword_25578A910);
  }
  v5 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)a2 = &off_24EC204C0;
  if (v5)
  {
    sub_2232129C0(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    v7 = qword_25578A8C8;
    v8 = (std::__shared_weak_count *)unk_25578A8D0;
    if (unk_25578A8D0)
    {
      v9 = (unint64_t *)(unk_25578A8D0 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = word_25578A908;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      v13 = unk_25578A8E8;
      *(_OWORD *)(a2 + 24) = xmmword_25578A8D8;
      *(_OWORD *)(a2 + 40) = v13;
      result = *(double *)&xmmword_25578A8F8;
      *(_OWORD *)(a2 + 56) = xmmword_25578A8F8;
      do
        v14 = __ldxr(v9);
      while (__stxr(v14 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_WORD *)(a2 + 72) = v11;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v16 = __ldaxr(v9);
      while (__stlxr(v16 - 1, v9));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v17 = word_25578A908;
      *(_QWORD *)(a2 + 8) = qword_25578A8C8;
      *(_QWORD *)(a2 + 16) = 0;
      v18 = unk_25578A8E8;
      *(_OWORD *)(a2 + 24) = xmmword_25578A8D8;
      *(_OWORD *)(a2 + 40) = v18;
      result = *(double *)&xmmword_25578A8F8;
      *(_OWORD *)(a2 + 56) = xmmword_25578A8F8;
      *(_WORD *)(a2 + 72) = v17;
    }
  }
  return result;
}

void sub_223213E44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578A910);
  _Unwind_Resume(a1);
}

void sub_223213E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_223213E70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_223213FB8(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_223213FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223213FB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC71150)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232140C4(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_223214084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2232140C4@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232143AC();
  v5 = sub_2231DFA30();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223214380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2232143AC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A930);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A930))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231A36D0();
    sub_2232145B0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_2232145B0((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A918, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A918, &dword_22314D000);
          __cxa_guard_release(&qword_25578A930);
          return &stru_25578A918;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A918;
}

void sub_2232144FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A930);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A930);
  _Unwind_Resume(a1);
}

void sub_2232145B0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22321464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223214668(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2232147B0(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_22321479C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232147B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC6FC50)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232148BC(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_22321487C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2232148BC@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223214BA4();
  v5 = sub_2231EF234();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223214B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_223214BA4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A950);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A950))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EF4F0();
    sub_223214DA8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_223214DA8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A938, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A938, &dword_22314D000);
          __cxa_guard_release(&qword_25578A950);
          return &stru_25578A938;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A938;
}

void sub_223214CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A950);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A950);
  _Unwind_Resume(a1);
}

void sub_223214DA8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223214E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223214E60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_223214FA8(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_223214F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223214FA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC6FD70)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232150B4(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_223215074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2232150B4@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22321539C();
  v5 = sub_2231F30CC();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223215370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_22321539C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578A970);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578A970))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231A5138();
    sub_2232155A0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_2232155A0((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578A958, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578A958, &dword_22314D000);
          __cxa_guard_release(&qword_25578A970);
          return &stru_25578A958;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578A958;
}

void sub_2232154EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578A970);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578A970);
  _Unwind_Resume(a1);
}

void sub_2232155A0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22321563C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_223215658@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A9B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A9B0))
  {
    qword_25578A978 = (uint64_t)&off_24EC24F10;
    *(_OWORD *)&qword_25578A980 = 0u;
    xmmword_25578A990 = 0u;
    qword_25578A9A0 = 0;
    __cxa_atexit((void (*)(void *))sub_2231D5D24, &qword_25578A978, &dword_22314D000);
    __cxa_guard_release(&qword_25578A9B0);
  }
  v5 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)a2 = &off_24EC24F10;
  if (v5)
  {
    sub_223215800(v5, a2 + 8);
  }
  else
  {
    v7 = qword_25578A980;
    v8 = *(std::__shared_weak_count **)algn_25578A988;
    if (*(_QWORD *)algn_25578A988)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A988 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      result = *(double *)&xmmword_25578A990;
      *(_OWORD *)(a2 + 24) = xmmword_25578A990;
      *(_QWORD *)(a2 + 40) = qword_25578A9A0;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      do
        v13 = __ldaxr(v9);
      while (__stlxr(v13 - 1, v9));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8) = qword_25578A980;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(double *)&xmmword_25578A990;
      *(_OWORD *)(a2 + 24) = xmmword_25578A990;
      *(_QWORD *)(a2 + 40) = qword_25578A9A0;
    }
  }
  return result;
}

void sub_2232157EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_223215800(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::logic_error *exception;
  uint64_t (***v14)();
  std::__shared_weak_count *v15;
  std::string v16;

  if (*(_DWORD *)(a1 + 56) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232159B0(a1);
    std::logic_error::logic_error(exception, &v16);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v16.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  v16.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_223215A28(a1, (uint64_t)&v16, &v14);
  sub_223215DD4(a2, (uint64_t *)&v14);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  size = (std::__shared_weak_count *)v16.__r_.__value_.__l.__size_;
  if (v16.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223215954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232159B0(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_22320FF38();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_223215A28@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC71150)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223215B34(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_223215AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_223215B34@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string *p_p;
  double result;
  int v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string __p;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22320FF38();
  v5 = sub_2231DE81C();
  v28 = "Attempting to create an ";
  v29 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v30 = (const char *)v7;
  v31 = size;
  v32 = " from an ";
  v33 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v34[0] = v9;
  v34[1] = v8;
  sub_2231A9820((uint64_t)&v28, (uint64_t)&v35, 0, 0, &__p);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
    {
LABEL_17:
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v17 = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      v28 = (const char *)p_p;
      v29 = v17;
      v30 = " but the other image contains an incompatible buffer type ";
      v31 = 58;
      v32 = (const char *)v15;
      v33 = v16;
      sub_2231A9820((uint64_t)&v28, (uint64_t)v34, 0, 0, a2);
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_20;
      return result;
    }
  }
  else
  {
LABEL_16:
    if (v11)
      goto LABEL_17;
  }
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  v22 = v21 + 46;
  if (v21 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v22 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v23 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v22;
LABEL_32:
    if (v20 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v26, v21);
    goto LABEL_36;
  }
  v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17)
    v24 = v22 | 7;
  v25 = v24 + 1;
  v23 = (char *)operator new(v24 + 1);
  a2->__r_.__value_.__l.__size_ = v22;
  a2->__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  a2 = (std::string *)v23;
  if (v21)
    goto LABEL_32;
LABEL_36:
  strcpy(&v23[v21], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v20 & 0x80) != 0)
LABEL_20:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223215DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223215DD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v15, v3, 3);
  v9 = *(_QWORD *)(v15 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v15;
  *(_QWORD *)(a1 + 32) = v9;
  v15 = 0;
  MEMORY[0x227684CE8]();
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v10)
    return a1;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_223215F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

double sub_223215F1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = atomic_load((unsigned __int8 *)&qword_25578A9F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578A9F0))
  {
    qword_25578A9B8 = (uint64_t)&off_24EC24F10;
    *(_OWORD *)&qword_25578A9C0 = 0u;
    xmmword_25578A9D0 = 0u;
    qword_25578A9E0 = 0;
    __cxa_atexit((void (*)(void *))sub_2231D5D24, &qword_25578A9B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578A9F0);
  }
  v5 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)a2 = &off_24EC24F10;
  if (v5)
  {
    sub_223215800(v5, a2 + 8);
  }
  else
  {
    v7 = qword_25578A9C0;
    v8 = *(std::__shared_weak_count **)algn_25578A9C8;
    if (*(_QWORD *)algn_25578A9C8)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578A9C8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      result = *(double *)&xmmword_25578A9D0;
      *(_OWORD *)(a2 + 24) = xmmword_25578A9D0;
      *(_QWORD *)(a2 + 40) = qword_25578A9E0;
      do
        v12 = __ldxr(v9);
      while (__stxr(v12 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      do
        v13 = __ldaxr(v9);
      while (__stlxr(v13 - 1, v9));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8) = qword_25578A9C0;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(double *)&xmmword_25578A9D0;
      *(_OWORD *)(a2 + 24) = xmmword_25578A9D0;
      *(_QWORD *)(a2 + 40) = qword_25578A9E0;
    }
  }
  return result;
}

void sub_2232160B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

double sub_2232160C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578AA48);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AA48))
  {
    sub_223216284((uint64_t)&unk_25578A9F8);
    __cxa_atexit((void (*)(void *))sub_2231D5F44, &unk_25578A9F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578AA48);
  }
  v5 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)a2 = &off_24EC25248;
  if (v5)
  {
    sub_223216348(v5, a2 + 8);
  }
  else
  {
    v7 = qword_25578AA00;
    v8 = *(std::__shared_weak_count **)algn_25578AA08;
    if (*(_QWORD *)algn_25578AA08)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578AA08 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      v12 = unk_25578AA20;
      *(_OWORD *)(a2 + 24) = xmmword_25578AA10;
      *(_OWORD *)(a2 + 40) = v12;
      result = *(double *)&xmmword_25578AA30;
      *(_OWORD *)(a2 + 56) = xmmword_25578AA30;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8) = qword_25578AA00;
      *(_QWORD *)(a2 + 16) = 0;
      v16 = unk_25578AA20;
      *(_OWORD *)(a2 + 24) = xmmword_25578AA10;
      *(_OWORD *)(a2 + 40) = v16;
      result = *(double *)&xmmword_25578AA30;
      *(_OWORD *)(a2 + 56) = xmmword_25578AA30;
    }
  }
  return result;
}

void sub_223216258(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AA48);
  _Unwind_Resume(a1);
}

void sub_223216270(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223216284(uint64_t result)
{
  *(_QWORD *)result = &off_24EC25248;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 4;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 44) = 1;
  *(_DWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

void sub_223216348(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::logic_error *exception;
  uint64_t (***v14)();
  std::__shared_weak_count *v15;
  std::string v16;

  if (*(_DWORD *)(a1 + 56) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232164F8(a1);
    std::logic_error::logic_error(exception, &v16);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v16.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  v16.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_223216570(a1, (uint64_t)&v16, &v14);
  sub_22321691C(a2, (uint64_t *)&v14);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  size = (std::__shared_weak_count *)v16.__r_.__value_.__l.__size_;
  if (v16.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_22321649C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232164F8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223211C9C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_223216570@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC6FC50)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22321667C(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_22321663C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_22321667C@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string *p_p;
  double result;
  int v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string __p;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223211C9C();
  v5 = sub_2231DE81C();
  v28 = "Attempting to create an ";
  v29 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v30 = (const char *)v7;
  v31 = size;
  v32 = " from an ";
  v33 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v34[0] = v9;
  v34[1] = v8;
  sub_2231A9820((uint64_t)&v28, (uint64_t)&v35, 0, 0, &__p);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
    {
LABEL_17:
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v17 = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      v28 = (const char *)p_p;
      v29 = v17;
      v30 = " but the other image contains an incompatible buffer type ";
      v31 = 58;
      v32 = (const char *)v15;
      v33 = v16;
      sub_2231A9820((uint64_t)&v28, (uint64_t)v34, 0, 0, a2);
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_20;
      return result;
    }
  }
  else
  {
LABEL_16:
    if (v11)
      goto LABEL_17;
  }
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  v22 = v21 + 46;
  if (v21 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v22 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v23 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v22;
LABEL_32:
    if (v20 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v26, v21);
    goto LABEL_36;
  }
  v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17)
    v24 = v22 | 7;
  v25 = v24 + 1;
  v23 = (char *)operator new(v24 + 1);
  a2->__r_.__value_.__l.__size_ = v22;
  a2->__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  a2 = (std::string *)v23;
  if (v21)
    goto LABEL_32;
LABEL_36:
  strcpy(&v23[v21], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v20 & 0x80) != 0)
LABEL_20:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2232168F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22321691C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v16;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v16, v3, 31);
  v10 = v16[1];
  v9 = v16[2];
  *(_OWORD *)(a1 + 16) = *v16;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  v16 = 0;
  MEMORY[0x227684CE8]();
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v11)
    return a1;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_223216A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

double sub_223216A64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578AAA0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AAA0))
  {
    sub_223216284((uint64_t)&unk_25578AA50);
    __cxa_atexit((void (*)(void *))sub_2231D5F44, &unk_25578AA50, &dword_22314D000);
    __cxa_guard_release(&qword_25578AAA0);
  }
  v5 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)a2 = &off_24EC25248;
  if (v5)
  {
    sub_223216348(v5, a2 + 8);
  }
  else
  {
    v7 = qword_25578AA58;
    v8 = (std::__shared_weak_count *)unk_25578AA60;
    if (unk_25578AA60)
    {
      v9 = (unint64_t *)(unk_25578AA60 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      v12 = unk_25578AA78;
      *(_OWORD *)(a2 + 24) = xmmword_25578AA68;
      *(_OWORD *)(a2 + 40) = v12;
      result = *(double *)&xmmword_25578AA88;
      *(_OWORD *)(a2 + 56) = xmmword_25578AA88;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8) = qword_25578AA58;
      *(_QWORD *)(a2 + 16) = 0;
      v16 = unk_25578AA78;
      *(_OWORD *)(a2 + 24) = xmmword_25578AA68;
      *(_OWORD *)(a2 + 40) = v16;
      result = *(double *)&xmmword_25578AA88;
      *(_OWORD *)(a2 + 56) = xmmword_25578AA88;
    }
  }
  return result;
}

void sub_223216BF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AAA0);
  _Unwind_Resume(a1);
}

void sub_223216C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

double sub_223216C24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578AAF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AAF8))
  {
    sub_223216DE4((uint64_t)&unk_25578AAA8);
    __cxa_atexit((void (*)(void *))sub_2231D6164, &unk_25578AAA8, &dword_22314D000);
    __cxa_guard_release(&qword_25578AAF8);
  }
  v5 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)a2 = &off_24EC25488;
  if (v5)
  {
    sub_223216EA8(v5, a2 + 8);
  }
  else
  {
    v7 = qword_25578AAB0;
    v8 = *(std::__shared_weak_count **)algn_25578AAB8;
    if (*(_QWORD *)algn_25578AAB8)
    {
      v9 = (unint64_t *)(*(_QWORD *)algn_25578AAB8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      v12 = *(_OWORD *)algn_25578AAD0;
      *(_OWORD *)(a2 + 24) = xmmword_25578AAC0;
      *(_OWORD *)(a2 + 40) = v12;
      result = *(double *)&xmmword_25578AAE0;
      *(_OWORD *)(a2 + 56) = xmmword_25578AAE0;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8) = qword_25578AAB0;
      *(_QWORD *)(a2 + 16) = 0;
      v16 = *(_OWORD *)algn_25578AAD0;
      *(_OWORD *)(a2 + 24) = xmmword_25578AAC0;
      *(_OWORD *)(a2 + 40) = v16;
      result = *(double *)&xmmword_25578AAE0;
      *(_OWORD *)(a2 + 56) = xmmword_25578AAE0;
    }
  }
  return result;
}

void sub_223216DB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AAF8);
  _Unwind_Resume(a1);
}

void sub_223216DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223216DE4(uint64_t result)
{
  *(_QWORD *)result = &off_24EC25488;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 4;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 44) = 1;
  *(_DWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

void sub_223216EA8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::logic_error *exception;
  uint64_t (***v14)();
  std::__shared_weak_count *v15;
  std::string v16;

  if (*(_DWORD *)(a1 + 56) != 38)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223217058(a1);
    std::logic_error::logic_error(exception, &v16);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v16.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  v16.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2232170D0(a1, (uint64_t)&v16, &v14);
  sub_22321747C(a2, (uint64_t *)&v14);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  size = (std::__shared_weak_count *)v16.__r_.__value_.__l.__size_;
  if (v16.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223216FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223217058(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232135A8();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_2232170D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC6FD70)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232171DC(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_22321719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2232171DC@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string *p_p;
  double result;
  int v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string __p;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232135A8();
  v5 = sub_2231DE81C();
  v28 = "Attempting to create an ";
  v29 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v30 = (const char *)v7;
  v31 = size;
  v32 = " from an ";
  v33 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v34[0] = v9;
  v34[1] = v8;
  sub_2231A9820((uint64_t)&v28, (uint64_t)&v35, 0, 0, &__p);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
    {
LABEL_17:
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v17 = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      v28 = (const char *)p_p;
      v29 = v17;
      v30 = " but the other image contains an incompatible buffer type ";
      v31 = 58;
      v32 = (const char *)v15;
      v33 = v16;
      sub_2231A9820((uint64_t)&v28, (uint64_t)v34, 0, 0, a2);
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_20;
      return result;
    }
  }
  else
  {
LABEL_16:
    if (v11)
      goto LABEL_17;
  }
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  v22 = v21 + 46;
  if (v21 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v22 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v23 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v22;
LABEL_32:
    if (v20 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v26, v21);
    goto LABEL_36;
  }
  v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17)
    v24 = v22 | 7;
  v25 = v24 + 1;
  v23 = (char *)operator new(v24 + 1);
  a2->__r_.__value_.__l.__size_ = v22;
  a2->__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  a2 = (std::string *)v23;
  if (v21)
    goto LABEL_32;
LABEL_36:
  strcpy(&v23[v21], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v20 & 0x80) != 0)
LABEL_20:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223217450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22321747C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v16;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v16, v3, 38);
  v10 = v16[1];
  v9 = v16[2];
  *(_OWORD *)(a1 + 16) = *v16;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  v16 = 0;
  MEMORY[0x227684CE8]();
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v11)
    return a1;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_2232175B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

double sub_2232175C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25578AB50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AB50))
  {
    sub_223216DE4((uint64_t)&unk_25578AB00);
    __cxa_atexit((void (*)(void *))sub_2231D6164, &unk_25578AB00, &dword_22314D000);
    __cxa_guard_release(&qword_25578AB50);
  }
  v5 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)a2 = &off_24EC25488;
  if (v5)
  {
    sub_223216EA8(v5, a2 + 8);
  }
  else
  {
    v7 = qword_25578AB08;
    v8 = (std::__shared_weak_count *)unk_25578AB10;
    if (unk_25578AB10)
    {
      v9 = (unint64_t *)(unk_25578AB10 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      v12 = unk_25578AB28;
      *(_OWORD *)(a2 + 24) = xmmword_25578AB18;
      *(_OWORD *)(a2 + 40) = v12;
      result = *(double *)&xmmword_25578AB38;
      *(_OWORD *)(a2 + 56) = xmmword_25578AB38;
      do
        v13 = __ldxr(v9);
      while (__stxr(v13 + 1, v9));
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 - 1, v9));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 - 1, v9));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8) = qword_25578AB08;
      *(_QWORD *)(a2 + 16) = 0;
      v16 = unk_25578AB28;
      *(_OWORD *)(a2 + 24) = xmmword_25578AB18;
      *(_OWORD *)(a2 + 40) = v16;
      result = *(double *)&xmmword_25578AB38;
      *(_OWORD *)(a2 + 56) = xmmword_25578AB38;
    }
  }
  return result;
}

void sub_223217758(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AB50);
  _Unwind_Resume(a1);
}

void sub_223217770(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223217784(uint64_t a1, _QWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (**v8)();
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12[5])(uint64_t);

  v12[4] = *(uint64_t (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v8 = &off_24EC20EB8;
  sub_2231B4D38(a1, (uint64_t)&v9);
  v3 = (char *)operator new(8uLL);
  *(_QWORD *)v3 = *a2;
  v12[2] = (uint64_t (*)(uint64_t))(v3 + 8);
  v12[3] = (uint64_t (*)(uint64_t))(v3 + 8);
  v12[0] = (uint64_t (*)(uint64_t))sub_223217918;
  v12[1] = (uint64_t (*)(uint64_t))v3;
  sub_2242E40D0(1, (uint64_t)&v8, v12);
  if (v12[0])
    ((void (*)(_QWORD, uint64_t (**)(uint64_t), _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  nullsub_30(&v11);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return nullsub_30(&v8);
}

void sub_22321788C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2232178C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void (**sub_2232178D4(void (**a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*a1)
    (*a1)(0, a1, 0, 0, 0);
  return a1;
}

void sub_223217918(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_223217958()
{
  _QWORD *v0;
  void *v1;
  uint64_t result;

  v1 = (void *)v0[1];
  if (v1)
  {
    v0[2] = v1;
    operator delete(v1);
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_223217984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__16vectorIN10half_float4halfENS_9allocatorIS2_EEEE"
      && (((v6 & (unint64_t)"NSt3__16vectorIN10half_float4halfENS_9allocatorIS2_EEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__16vectorIN10half_float4halfENS_9allocatorIS2_EEEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN10half_float4halfENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_2245C3EA8)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_223217AEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223217B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_223217C10(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_223217BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223217C10@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_223217D48(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_223217D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_223217D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223217D48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_223217E1C(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223217DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_223217DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD *sub_223217E1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::__shared_weak_count *v10;
  uint64_t v11;

  sub_223217EE8(a2, v9);
  sub_2231C3728(a1, (uint64_t)v9, a3);
  v9[0] = &off_24EC219D8;
  nullsub_30(&v11);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_223217ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223217EE8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t (**v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  v7 = &off_24EC1F958;
  sub_223217FD0(a1, (uint64_t)&v8);
  *a2 = &off_24EC219D8;
  sub_2231F9F68((uint64_t)&v7, (uint64_t)(a2 + 1));
  nullsub_30(&v10);
  v3 = v9;
  if (!v9)
    return nullsub_30(&v7);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(&v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(&v7);
}

void sub_223217FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  nullsub_30(v9);
  sub_22319B358((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223217FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223217FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t (**v8)();
  _WORD v9[40];
  uint64_t v10;

  v10 = a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return sub_2232180CC((uint64_t)&v10, a2);
  }
  else
  {
    v8 = &off_24EC1FE80;
    sub_223218260(a1, v9);
    sub_2231FC3E4((uint64_t)&v8, a2);
    sub_223167354((uint64_t)v9);
    return nullsub_30(&v8);
  }
}

void sub_22321809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354(v9);
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_2232180B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232180CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v20, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  v10 = v20;
  v18 = v20;
  if (v20)
  {
    v11 = (_QWORD *)operator new();
    v12 = v20;
    *v11 = &off_24EC20DE8;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
  }
  else
  {
    v11 = 0;
  }
  v19 = v11;
  v20 = 0;
  sub_2244E0B74((uint64_t)&v16, 2, *(_QWORD *)a1 + 32, 2, *(_QWORD *)a1 + 40, 2);
  v13 = *(_WORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  v14 = v16;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 48) = 3;
  *(_WORD *)(a2 + 52) = v13;
  nullsub_30(&v16);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22321822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_223167354((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_223218260@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __int16 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v8 + 32))(&v24, v8);
    v22 = v24;
    if (v24)
    {
      v16 = (std::__shared_weak_count *)operator new();
      v17 = v24;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
      v16->__shared_owners_ = 0;
      v16->__shared_weak_owners_ = 0;
      v16[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
    }
    else
    {
      v16 = 0;
    }
    v23 = v16;
    v24 = 0;
    v18 = *(_WORD *)(a1 + 48);
    sub_22449BBB4((uint64_t)a2, &v22, 0);
    a2[36] = v18;
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    result = v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v13 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v14 = *(_QWORD *)(a1 + 24) == 0;
    else
      v14 = 1;
    if (!v14)
      sub_2245748E8(a1);
    return sub_22321845C(v13, a2);
  }
  return result;
}

void sub_223218428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22321845C@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17[2];

  v17[0] = *(_QWORD *)(a1 + 8);
  sub_2231FC9F8(v17, &v16);
  v14 = v16;
  if (v16)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v16;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20058;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v15 = v4;
  v16 = 0;
  sub_22449BBB4((uint64_t)a2, &v14, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a2[36] = v8 & 0xFF00 | v7;
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17[0] = a1;
  v17[1] = (uint64_t)(a2 + 12);
  sub_2231FCAE0(v17);
  result = v16;
  v16 = 0;
  if (result)
  {
    v13 = sub_224485244(result);
    return MEMORY[0x227684CE8](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_22321859C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232185B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223167354(v4);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232185CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_223167354(v12);
  sub_223167354((uint64_t)&a9);
  sub_2231A30A4(&a12);
  _Unwind_Resume(a1);
}

void sub_2232185F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_223167354((uint64_t)&a9);
  sub_2231A30A4(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_22321860C(uint64_t a1, uint64_t a2, float **a3, __n128 a4, double a5, double a6, float32x4_t a7, double a8, float32x4_t a9)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;

  v12 = *(_QWORD *)(a1 + 8);
  if (!v12)
    goto LABEL_18;
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v13)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (v16)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v17 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v17)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v12 = *(_QWORD *)(a1 + 8);
    v17 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v17)
      goto LABEL_14;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (v20)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 96))(&v29, v12, 0);
    v22 = *(_QWORD *)(a2 + 8);
    v21 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v21)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v29 = 0;
  v22 = *(_QWORD *)(a2 + 8);
  v21 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v21)
    goto LABEL_23;
LABEL_19:
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v22)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v22)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v28, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v28 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    a4.n128_f32[0] = sub_223218860(a3, a1, a2, a4.n128_f64[0], a5, a6, a7, a8, a9);
LABEL_32:
  v26 = v28;
  v28 = 0;
  if (v26)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v26 + 8))(v26, a4);
  result = v29;
  v29 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_2232187FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float32_t sub_223218860(float **a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, float32x4_t a7, double a8, float32x4_t a9)
{
  int v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  float32_t result;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  _OWORD v34[2];

  v10 = *(_DWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 36);
  v11 = *(_DWORD *)(a2 + 40);
  if (v10)
    v12 = v9 == 0;
  else
    v12 = 1;
  if (!v12 && v11 != 0)
  {
    v28 = v10 - 1;
    v17 = *(unsigned int *)(a2 + 48);
    v18 = *(unsigned int *)(a3 + 104);
    v29 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 100) << 32);
    v27 = 0;
    v30 = v9 - 1;
    v31 = v17 | (v18 << 32);
    v32 = v11 - 1;
    v33 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v19 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v19)
    {
      v20 = *(_QWORD *)(a2 + 8);
      v21 = *(std::__shared_weak_count **)(a2 + 16);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v20 + 88))(v20, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v19 = *(_QWORD *)(a2 + 24);
    }
    v25 = *(_BYTE **)(a3 + 32);
    if (*(_BYTE *)(a3 + 128))
    {
      if (v25)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v25 = *(_BYTE **)(a3 + 32);
      }
    }
    memset(v34, 0, sizeof(v34));
    return sub_2232189BC(&v27, v34, a1, v19, v25, (float32x4_t)0, a5, a6, a7, a8, a9);
  }
  return result;
}

float32_t sub_2232189BC(_DWORD *a1, _QWORD *a2, float **a3, uint64_t a4, _BYTE *a5, float32x4_t _Q0, double a7, double a8, float32x4_t a9, double a10, float32x4_t a11)
{
  unsigned int v15;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  float32x4_t v23;
  unsigned int v24;
  float32x4_t v29;
  float32_t result;

  __asm { FMOV            V0.2S, #1.0 }
  if (a1[8])
  {
    v15 = 0;
    do
    {
      *a2 = a4;
      a2[2] = a5;
      v18 = a5;
      v19 = a4;
      if (a1[5])
      {
        v20 = 0;
        v19 = a4;
        v18 = a5;
        do
        {
          *a2 = v19;
          a2[2] = v18;
          _H3 = *(_WORD *)(v19 + 4);
          __asm { FCVT            S3, H3 }
          a11.i32[0] = *(_DWORD *)v19;
          a11 = vcvtq_f32_f16(*(float16x4_t *)a11.f32);
          *(float32x2_t *)a11.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)a11.f32);
          a11.f32[2] = 1.0 - _S3;
          v23 = vmulq_n_f32(a11, **a3 * 0.5);
          *v18 = (int)v23.f32[0];
          v18[1] = (int)v23.f32[1];
          v18[2] = (int)v23.f32[2];
          v19 += 2 * a1[6];
          v18 += a1[7];
          ++v20;
        }
        while (v20 < a1[5]);
      }
      *a2 = v19;
      a2[2] = v18;
      _H3 = *(_WORD *)(v19 + 4);
      __asm { FCVT            S3, H3 }
      a11.i32[0] = *(_DWORD *)v19;
      a11 = vcvtq_f32_f16(*(float16x4_t *)a11.f32);
      *(float32x2_t *)a11.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)a11.f32);
      a11.f32[2] = 1.0 - _S3;
      a9 = vmulq_n_f32(a11, **a3 * 0.5);
      *v18 = (int)a9.f32[0];
      v18[1] = (int)a9.f32[1];
      v18[2] = (int)a9.f32[2];
      a4 += 2 * a1[9];
      a5 += a1[10];
      ++v15;
    }
    while (v15 < a1[8]);
  }
  *a2 = a4;
  a2[2] = a5;
  if (a1[5])
  {
    v24 = 0;
    do
    {
      *a2 = a4;
      a2[2] = a5;
      _H3 = *(_WORD *)(a4 + 4);
      __asm { FCVT            S3, H3 }
      a11.i32[0] = *(_DWORD *)a4;
      a11 = vcvtq_f32_f16(*(float16x4_t *)a11.f32);
      *(float32x2_t *)a11.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)a11.f32);
      a11.f32[2] = 1.0 - _S3;
      a9 = vmulq_n_f32(a11, **a3 * 0.5);
      *a5 = (int)a9.f32[0];
      a5[1] = (int)a9.f32[1];
      a5[2] = (int)a9.f32[2];
      a4 += 2 * a1[6];
      a5 += a1[7];
      ++v24;
    }
    while (v24 < a1[5]);
  }
  *a2 = a4;
  a2[2] = a5;
  _H1 = *(_WORD *)(a4 + 4);
  __asm { FCVT            S1, H1 }
  a9.i32[0] = *(_DWORD *)a4;
  *(float32x2_t *)_Q0.f32 = vsub_f32(*(float32x2_t *)_Q0.f32, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)a9.f32));
  _Q0.f32[2] = 1.0 - _S1;
  v29 = vmulq_n_f32(_Q0, **a3 * 0.5);
  *a5 = (int)v29.f32[0];
  a5[1] = (int)v29.f32[1];
  result = v29.f32[2];
  a5[2] = (int)v29.f32[2];
  return result;
}

uint64_t sub_223218BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_223218CD4(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_223218CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223218CD4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_223218E0C(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_223218DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_223218DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223218E0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_223218EE0(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223218E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_223218EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD *sub_223218EE0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::__shared_weak_count *v10;
  uint64_t v11;

  sub_223218FAC(a2, v9);
  sub_2231C3728(a1, (uint64_t)v9, a3);
  v9[0] = &off_24EC219D8;
  nullsub_30(&v11);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_223218F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223218FAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t (**v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  v7 = &off_24EC1F958;
  sub_223219094(a1, (uint64_t)&v8);
  *a2 = &off_24EC219D8;
  sub_2231F9F68((uint64_t)&v7, (uint64_t)(a2 + 1));
  nullsub_30(&v10);
  v3 = v9;
  if (!v9)
    return nullsub_30(&v7);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(&v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(&v7);
}

void sub_223219064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  nullsub_30(v9);
  sub_22319B358((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223219080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223219094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t (**v8)();
  _WORD v9[64];
  uint64_t v10;

  v10 = a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return sub_22321928C((uint64_t)&v10, a2);
  }
  else
  {
    v8 = &off_24EC256D8;
    sub_223219504(a1, v9);
    sub_223219190((uint64_t)&v8, a2);
    sub_223167354((uint64_t)v9);
    return nullsub_30(&v8);
  }
}

void sub_223219160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354(v9);
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

void sub_22321917C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223219190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 8;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = v5;
  v17 = v6;
  v18 = 0;
  v19 = 0;
  v9 = sub_22449BC64(v4);
  sub_2244E0B74((uint64_t)&v14, 3, a1 + 88, 3, a1 + 100, 2);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_WORD *)(a1 + 128);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  v12 = v14;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 48) = 31;
  *(_WORD *)(a2 + 52) = v11;
  return nullsub_30(&v14);
}

void sub_223219244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_223219264(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

uint64_t sub_22321928C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v20, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  v10 = v20;
  v18 = v20;
  if (v20)
  {
    v11 = (_QWORD *)operator new();
    v12 = v20;
    *v11 = &off_24EC20DE8;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
  }
  else
  {
    v11 = 0;
  }
  v19 = v11;
  v20 = 0;
  sub_2244E0B74((uint64_t)&v16, 3, *(_QWORD *)a1 + 32, 3, *(_QWORD *)a1 + 44, 2);
  v13 = *(_WORD *)(*(_QWORD *)a1 + 72);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  v14 = v16;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 48) = 31;
  *(_WORD *)(a2 + 52) = v13;
  nullsub_30(&v16);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2232193EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_223167354((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_223219420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 88, 3, a1 + 100, 2);
}

void sub_22321943C(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223219478()
{
  return 31;
}

uint64_t sub_223219480(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223219488(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223219504@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __int16 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v8 + 32))(&v24, v8);
    v22 = v24;
    if (v24)
    {
      v16 = (std::__shared_weak_count *)operator new();
      v17 = v24;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
      v16->__shared_owners_ = 0;
      v16->__shared_weak_owners_ = 0;
      v16[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
    }
    else
    {
      v16 = 0;
    }
    v23 = v16;
    v24 = 0;
    v18 = *(_WORD *)(a1 + 72);
    sub_22449C19C((uint64_t)a2, &v22, 0);
    a2[60] = v18;
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    result = v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v13 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v14 = *(_QWORD *)(a1 + 24) == 0;
    else
      v14 = 1;
    if (!v14)
      sub_2245748E8(a1);
    return sub_223219700(v13, a2);
  }
  return result;
}

void sub_2232196CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223219700@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = *(_QWORD *)(a1 + 12);
  sub_2232198B0(v17, &v16);
  v14 = v16;
  if (v16)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v16;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC258B0;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v15 = v4;
  v16 = 0;
  sub_22449C19C((uint64_t)a2, &v14, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a2[60] = v8 & 0xFF00 | v7;
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17[0] = a1;
  v17[1] = a2 + 12;
  sub_22321A094(v17);
  result = v16;
  v16 = 0;
  if (result)
  {
    v13 = sub_224494480(result);
    return MEMORY[0x227684CE8](v13, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_223219840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2232199B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223219854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223167354(v4);
  sub_2232199B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223219870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_223167354(v12);
  sub_223167354((uint64_t)&a9);
  sub_2232199B0(&a12);
  _Unwind_Resume(a1);
}

void sub_223219894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_223167354((uint64_t)&a9);
  sub_2232199B0(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2232198B0@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_24EC257D0;
  sub_22449AB78(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC25818;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_2244E32B8((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_224494480((uint64_t)v5);
}

void sub_22321996C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C40A44A61E0);
  sub_224494480((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22321999C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224494480((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2232199B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224494480(v2);
    MEMORY[0x227684CE8](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_2232199F8()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223219A0C()
{
  return 31;
}

__int128 *sub_223219A18()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AB70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578AB70))
  {
    v2 = sub_223219AF0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578AB58, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578AB68 = *((_QWORD *)v2 + 2);
      xmmword_25578AB58 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AB58, &dword_22314D000);
    __cxa_guard_release(&qword_25578AB70);
  }
  if (byte_25578AB6F >= 0)
    return &xmmword_25578AB58;
  else
    return (__int128 *)xmmword_25578AB58;
}

void sub_223219AD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AB70);
  _Unwind_Resume(a1);
}

__int128 *sub_223219AF0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AB90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AB90))
    return &xmmword_25578AB78;
  v2 = sub_223219BCC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578AB78, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578AB88 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578AB78 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AB78, &dword_22314D000);
  __cxa_guard_release(&qword_25578AB90);
  return &xmmword_25578AB78;
}

void sub_223219BB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AB90);
  _Unwind_Resume(a1);
}

std::string *sub_223219BCC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578ABB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578ABB0))
    return &stru_25578AB98;
  sub_223219DE4((uint64_t)__p);
  sub_223219CBC((char *)__p, &stru_25578AB98);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AB98, &dword_22314D000);
  __cxa_guard_release(&qword_25578ABB0);
  return &stru_25578AB98;
}

void sub_223219C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578ABB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578ABB0);
  _Unwind_Resume(a1);
}

void sub_223219CBC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231EF4F0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_223219DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223219DE4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578ABD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578ABD0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16f>]", qword_25578ABB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578ABB8, &dword_22314D000);
    __cxa_guard_release(&qword_25578ABD0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578ABF0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578ABF0))
  {
    v5 = sub_2231A38CC(qword_25578ABB8, "<", 0);
    sub_2231A37C8(qword_25578ABB8, 0, v5, qword_25578ABD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578ABD8, &dword_22314D000);
    __cxa_guard_release(&qword_25578ABF0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578AC10);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AC10))
  {
    sub_224573040((uint64_t)qword_25578ABD8, (uint64_t)&xmmword_25578ABF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578ABF8, &dword_22314D000);
    __cxa_guard_release(&qword_25578AC10);
  }
  if (byte_25578AC0F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578ABF8, *((unint64_t *)&xmmword_25578ABF8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578ABF8;
    *(_QWORD *)(a1 + 16) = unk_25578AC08;
  }
}

void sub_223219F80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AC10);
  _Unwind_Resume(a1);
}

void sub_223219F98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ABF0);
  _Unwind_Resume(a1);
}

void sub_223219FB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ABD0);
  _Unwind_Resume(a1);
}

void sub_223219FCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223219FF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_224494480(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_22321A024(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

double sub_22321A094(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v2;
  BOOL v4;
  double result;
  int v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  char *v12;

  v1 = (_DWORD *)*a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v7 = v1[6];
    if (v7 == *(_DWORD *)(v2 + 24))
    {
      v8 = v1[2];
      if (v7 == v8)
        return sub_22321A14C(a1);
    }
    else
    {
      v8 = v1[2];
    }
    v12 = (char *)v8;
    if (v8)
      v9 = v1[3] == 0;
    else
      v9 = 1;
    if (!v9 && v1[4] != 0)
      return sub_22321A564((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (v1[2])
      v4 = v1[3] == 0;
    else
      v4 = 1;
    if (!v4 && v1[4] != 0)
    {
      v12 = &v11;
      *(_QWORD *)&result = sub_22321A888((uint64_t)&v12, (uint64_t)v1, v2);
    }
  }
  return result;
}

double sub_22321A14C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _WORD *v18;
  unint64_t v19;
  __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  _WORD *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  __int16 v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _OWORD v38[3];

  v1 = *a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 28);
  v4 = *(unsigned int *)(v2 + 28);
  v5 = *(_DWORD *)(*a1 + 12);
  if ((_DWORD)v3 == (_DWORD)v4 && (_DWORD)v3 == *(_DWORD *)(v1 + 24) * v5)
  {
    v6 = (v5 * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    else if (!(_DWORD)v6)
    {
      return *(double *)&v17;
    }
    v18 = *(_WORD **)v2;
    v19 = (v6 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v19 < 0xF)
    {
      v20 = (__int16 *)v7;
      do
      {
LABEL_25:
        v28 = *v20++;
        LOWORD(v17) = v28;
        *v18++ = v28;
      }
      while (v20 != (__int16 *)(v7 + 2 * v6));
      return *(double *)&v17;
    }
    v20 = (__int16 *)v7;
    if ((unint64_t)v18 - v7 < 0x20)
      goto LABEL_25;
    v21 = v19 + 1;
    v22 = v21 & 0xFFFFFFFFFFFFFFF0;
    v23 = &v18[v22];
    v20 = (__int16 *)(v7 + v22 * 2);
    v24 = (__int128 *)(v7 + 16);
    v25 = v18 + 8;
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = *(v24 - 1);
      v27 = *v24;
      *(v25 - 1) = v17;
      *v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    v18 = v23;
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_25;
  }
  else
  {
    v9 = *(_DWORD *)(v1 + 8);
    v30 = (v5 * v9);
    v10 = *(_DWORD *)(v1 + 16);
    if (v9)
      v11 = v5 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v32 = v9 - 1;
      v13 = *(unsigned int *)(v1 + 24);
      v14 = *(unsigned int *)(v2 + 24);
      v33 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
      v31 = 0;
      v34 = v5 - 1;
      v35 = v13 | (v14 << 32);
      v36 = v10 - 1;
      v37 = v3 | (v4 << 32);
      v15 = *(_QWORD *)v1;
      v16 = *(_QWORD *)v2;
      memset(v38, 0, sizeof(v38));
      *(_QWORD *)&v17 = sub_22321A314((unsigned int *)&v31, (uint64_t)v38, &v30, v15, v16);
    }
  }
  return *(double *)&v17;
}

