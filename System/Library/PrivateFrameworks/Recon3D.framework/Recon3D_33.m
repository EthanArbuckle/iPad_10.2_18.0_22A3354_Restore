uint64_t **sub_223E76B70(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  BOOL v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  BOOL v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  BOOL v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  BOOL v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t *v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  BOOL v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t *v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  BOOL v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  BOOL v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t *v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  BOOL v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unsigned int *v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t *v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  BOOL v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unsigned int *v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t *v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  BOOL v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unsigned int *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t *v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  BOOL v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unsigned int *v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t *v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  BOOL v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unsigned int *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t *v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  BOOL v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unsigned int *v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t *v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  BOOL v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unsigned int *v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t *v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  BOOL v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unsigned int *v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t *v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  BOOL v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unsigned int *v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t *v571;
  uint64_t *v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  BOOL v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unsigned int *v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t *v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  BOOL v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  unsigned int *v607;
  uint64_t v608;
  uint64_t v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t *v615;
  uint64_t *v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  BOOL v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  unsigned int *v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t *v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  BOOL v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unsigned int *v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t *v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  BOOL v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t v672;
  unsigned int *v673;
  uint64_t v674;
  uint64_t v675;
  unsigned int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t *v682;
  int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  int v688;
  uint64_t v689;
  uint64_t v690;
  BOOL v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unsigned int *v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t *v704;
  int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  BOOL v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unsigned int *v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t *v725;
  uint64_t *v726;
  int v727;
  int v728;
  int v729;
  int v730;
  int v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  BOOL v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  unsigned int *v739;
  uint64_t v740;
  uint64_t v741;
  unsigned int v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t *v747;
  uint64_t *v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  BOOL v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  unsigned int *v761;
  uint64_t v762;
  uint64_t v763;
  unsigned int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t *v770;
  int v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  uint64_t v777;
  uint64_t v778;
  BOOL v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  unsigned int *v783;
  uint64_t v784;
  uint64_t v785;
  unsigned int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t *v791;
  uint64_t *v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  int v798;
  uint64_t v799;
  uint64_t v800;
  BOOL v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  unsigned int *v805;
  uint64_t v806;
  uint64_t v807;
  unsigned int v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t *v813;
  uint64_t *v814;
  int v815;
  int v816;
  int v817;
  int v818;
  int v819;
  int v820;
  uint64_t v821;
  uint64_t v822;
  BOOL v823;
  uint64_t v824;
  unint64_t v825;
  uint64_t v826;
  unsigned int *v827;
  uint64_t v828;
  uint64_t v829;
  unsigned int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t *v835;
  uint64_t *v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  BOOL v845;
  uint64_t v846;
  unint64_t v847;
  uint64_t v848;
  unsigned int *v849;
  uint64_t v850;
  uint64_t v851;
  unsigned int v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t *v857;
  uint64_t *v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  uint64_t v865;
  uint64_t v866;
  BOOL v867;
  uint64_t v868;
  unint64_t v869;
  uint64_t v870;
  unsigned int *v871;
  uint64_t v872;
  uint64_t v873;
  unsigned int v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t *v879;
  uint64_t *v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  BOOL v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  unsigned int *v893;
  uint64_t v894;
  uint64_t v895;
  unsigned int v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t *v901;
  uint64_t *v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  BOOL v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unsigned int *v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t *v923;
  uint64_t *v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  BOOL v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  unsigned int *v937;
  uint64_t v938;
  uint64_t v939;
  unsigned int v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t *v945;
  uint64_t *v946;
  int v947;
  int v948;
  int v949;
  int v950;
  int v951;
  int v952;
  uint64_t v953;
  uint64_t v954;
  BOOL v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unsigned int *v959;
  uint64_t v960;
  uint64_t v961;
  unsigned int v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t *v967;
  uint64_t *v968;
  int v969;
  int v970;
  int v971;
  int v972;
  int v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  BOOL v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unsigned int *v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t *v989;
  uint64_t *v990;
  int v991;
  int v992;
  int v993;
  int v994;
  int v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  BOOL v999;
  uint64_t v1000;
  unint64_t v1001;
  uint64_t v1002;
  unsigned int *v1003;
  uint64_t v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t *v1011;
  uint64_t *v1012;
  int v1013;
  int v1014;
  int v1015;
  int v1016;
  int v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  BOOL v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  unsigned int *v1025;
  uint64_t v1026;
  uint64_t v1027;
  unsigned int v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t *v1033;
  uint64_t *v1034;
  int v1035;
  int v1036;
  int v1037;
  int v1038;
  int v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  BOOL v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  unsigned int *v1047;
  uint64_t v1048;
  uint64_t v1049;
  unsigned int v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t *v1055;
  uint64_t *v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  int v1061;
  int v1062;
  uint64_t v1063;
  uint64_t v1064;
  BOOL v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  unsigned int *v1069;
  uint64_t v1070;
  uint64_t v1071;
  unsigned int v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t *v1078;
  int v1079;
  int v1080;
  int v1081;
  int v1082;
  int v1083;
  int v1084;
  uint64_t v1085;
  uint64_t v1086;
  BOOL v1087;
  uint64_t v1088;
  unint64_t v1089;
  uint64_t v1090;
  unsigned int *v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t *v1099;
  uint64_t *v1100;
  int v1101;
  int v1102;
  int v1103;
  int v1104;
  int v1105;
  int v1106;
  uint64_t v1107;
  uint64_t v1108;
  BOOL v1109;
  uint64_t v1110;
  unint64_t v1111;
  uint64_t v1112;
  unsigned int *v1113;
  uint64_t v1114;
  uint64_t v1115;
  unsigned int v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t *v1121;
  uint64_t *v1122;
  int v1123;
  int v1124;
  int v1125;
  int v1126;
  int v1127;
  int v1128;
  uint64_t v1129;
  uint64_t v1130;
  BOOL v1131;
  uint64_t v1132;
  unint64_t v1133;
  uint64_t v1134;
  unsigned int *v1135;
  uint64_t v1136;
  uint64_t v1137;
  unsigned int v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t *v1143;
  uint64_t *v1144;
  int v1145;
  int v1146;
  int v1147;
  int v1148;
  int v1149;
  int v1150;
  uint64_t v1151;
  uint64_t v1152;
  BOOL v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  unsigned int *v1157;
  uint64_t v1158;
  uint64_t v1159;
  unsigned int v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t *v1165;
  uint64_t *v1166;
  int v1167;
  int v1168;
  int v1169;
  int v1170;
  int v1171;
  int v1172;
  uint64_t v1173;
  uint64_t v1174;
  BOOL v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  unsigned int *v1179;
  uint64_t v1180;
  uint64_t v1181;
  unsigned int v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t *v1187;
  uint64_t *v1188;
  int v1189;
  int v1190;
  int v1191;
  int v1192;
  int v1193;
  int v1194;
  uint64_t v1195;
  uint64_t v1196;
  BOOL v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  unsigned int *v1201;
  uint64_t v1202;
  uint64_t v1203;
  unsigned int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t *v1209;
  uint64_t *v1210;
  int v1211;
  int v1212;
  int v1213;
  int v1214;
  int v1215;
  int v1216;
  uint64_t v1217;
  uint64_t v1218;
  BOOL v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  unsigned int *v1223;
  uint64_t v1224;
  uint64_t v1225;
  unsigned int v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t *v1231;
  uint64_t *v1232;
  int v1233;
  int v1234;
  int v1235;
  int v1236;
  int v1237;
  int v1238;
  uint64_t v1239;
  uint64_t v1240;
  BOOL v1241;
  uint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  unsigned int *v1245;
  uint64_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t *v1253;
  uint64_t *v1254;
  int v1255;
  int v1256;
  int v1257;
  int v1258;
  int v1259;
  int v1260;
  uint64_t v1261;
  uint64_t v1262;
  BOOL v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  unsigned int *v1267;
  uint64_t v1268;
  uint64_t v1269;
  unsigned int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t *v1275;
  uint64_t *v1276;
  int v1277;
  int v1278;
  int v1279;
  int v1280;
  int v1281;
  int v1282;
  uint64_t v1283;
  uint64_t v1284;
  BOOL v1285;
  uint64_t v1286;
  unint64_t v1287;
  uint64_t v1288;
  unsigned int *v1289;
  uint64_t v1290;
  uint64_t v1291;
  unsigned int v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t *v1297;
  uint64_t *v1298;
  int v1299;
  int v1300;
  int v1301;
  int v1302;
  int v1303;
  int v1304;
  uint64_t v1305;
  uint64_t v1306;
  BOOL v1307;
  uint64_t v1308;
  unint64_t v1309;
  uint64_t v1310;
  unsigned int *v1311;
  uint64_t v1312;
  uint64_t v1313;
  unsigned int v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t *v1319;
  uint64_t *v1320;
  int v1321;
  int v1322;
  int v1323;
  int v1324;
  int v1325;
  int v1326;
  uint64_t v1327;
  uint64_t v1328;
  BOOL v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  unsigned int *v1333;
  uint64_t v1334;
  uint64_t v1335;
  unsigned int v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t *v1341;
  uint64_t *v1342;
  int v1343;
  int v1344;
  int v1345;
  int v1346;
  int v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  BOOL v1351;
  uint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  unsigned int *v1355;
  uint64_t v1356;
  uint64_t v1357;
  unsigned int v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t *v1363;
  uint64_t *v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  int v1370;
  uint64_t v1371;
  uint64_t v1372;
  BOOL v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  unsigned int *v1377;
  uint64_t v1378;
  uint64_t v1379;
  unsigned int v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t *v1385;
  uint64_t *v1386;
  int v1387;
  int v1388;
  int v1389;
  int v1390;
  int v1391;
  int v1392;
  uint64_t v1393;
  uint64_t v1394;
  BOOL v1395;
  uint64_t v1396;
  unint64_t v1397;
  uint64_t v1398;
  unsigned int *v1399;
  uint64_t v1400;
  uint64_t v1401;
  unsigned int v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t *v1407;
  uint64_t *v1408;
  int v1409;
  int v1410;
  int v1411;
  int v1412;
  int v1413;
  int v1414;
  uint64_t v1415;
  uint64_t v1416;
  BOOL v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  unsigned int *v1421;
  uint64_t v1422;
  uint64_t v1423;
  unsigned int v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t *v1429;
  uint64_t *v1430;
  int v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  int v1436;
  uint64_t v1437;
  uint64_t v1438;
  BOOL v1439;
  uint64_t v1440;
  unint64_t v1441;
  uint64_t v1442;
  unsigned int *v1443;
  uint64_t v1444;
  uint64_t v1445;
  unsigned int v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t *v1451;
  uint64_t *v1452;
  int v1453;
  int v1454;
  int v1455;
  int v1456;
  int v1457;
  int v1458;
  uint64_t v1459;
  uint64_t v1460;
  BOOL v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  unsigned int *v1465;
  uint64_t v1466;
  uint64_t v1467;
  unsigned int v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t *v1473;
  uint64_t *v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  uint64_t v1481;
  uint64_t v1482;
  BOOL v1483;
  uint64_t v1484;
  unint64_t v1485;
  uint64_t v1486;
  unsigned int *v1487;
  uint64_t v1488;
  uint64_t v1489;
  unsigned int v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t *v1495;
  uint64_t *v1496;
  int v1497;
  int v1498;
  int v1499;
  int v1500;
  int v1501;
  int v1502;
  uint64_t v1503;
  uint64_t v1504;
  BOOL v1505;
  uint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unsigned int *v1509;
  uint64_t v1510;
  uint64_t v1511;
  unsigned int v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t *v1517;
  uint64_t *v1518;
  int v1519;
  int v1520;
  int v1521;
  int v1522;
  int v1523;
  int v1524;
  uint64_t v1525;
  uint64_t v1526;
  BOOL v1527;
  uint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  unsigned int *v1531;
  uint64_t v1532;
  uint64_t v1533;
  unsigned int v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t *v1539;
  uint64_t *v1540;
  int v1541;
  int v1542;
  int v1543;
  int v1544;
  int v1545;
  int v1546;
  uint64_t v1547;
  uint64_t v1548;
  BOOL v1549;
  uint64_t v1550;
  unint64_t v1551;
  uint64_t v1552;
  unsigned int *v1553;
  uint64_t v1554;
  uint64_t v1555;
  unsigned int v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t *v1561;
  uint64_t *v1562;
  int v1563;
  int v1564;
  int v1565;
  int v1566;
  int v1567;
  int v1568;
  uint64_t v1569;
  uint64_t v1570;
  BOOL v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  unsigned int *v1575;
  uint64_t v1576;
  uint64_t v1577;
  unsigned int v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t *v1583;
  uint64_t *v1584;
  int v1585;
  int v1586;
  int v1587;
  int v1588;
  int v1589;
  int v1590;
  uint64_t v1591;
  uint64_t v1592;
  BOOL v1593;
  uint64_t v1594;
  unint64_t v1595;
  uint64_t v1596;
  unsigned int *v1597;
  uint64_t v1598;
  uint64_t v1599;
  unsigned int v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t *v1605;
  uint64_t *v1606;
  int v1607;
  int v1608;
  int v1609;
  int v1610;
  int v1611;
  int v1612;
  uint64_t v1613;
  uint64_t v1614;
  BOOL v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  unsigned int *v1619;
  uint64_t v1620;
  uint64_t v1621;
  unsigned int v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t *v1627;
  uint64_t *v1628;
  int v1629;
  int v1630;
  int v1631;
  int v1632;
  int v1633;
  int v1634;
  uint64_t v1635;
  uint64_t v1636;
  BOOL v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unsigned int *v1641;
  uint64_t v1642;
  uint64_t v1643;
  unsigned int v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t *v1649;
  uint64_t *v1650;
  int v1651;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  int v1656;
  uint64_t v1657;
  uint64_t v1658;
  BOOL v1659;
  uint64_t v1660;
  unint64_t v1661;
  uint64_t v1662;
  unsigned int *v1663;
  uint64_t v1664;
  uint64_t v1665;
  unsigned int v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t *v1671;
  uint64_t *v1672;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  int v1677;
  int v1678;
  uint64_t v1679;
  uint64_t v1680;
  BOOL v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  unsigned int *v1685;
  uint64_t v1686;
  uint64_t v1687;
  unsigned int v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t *v1693;
  uint64_t *v1694;
  int v1695;
  int v1696;
  int v1697;
  int v1698;
  int v1699;
  int v1700;
  uint64_t v1701;
  uint64_t v1702;
  BOOL v1703;
  uint64_t v1704;
  unint64_t v1705;
  uint64_t v1706;
  unsigned int *v1707;
  uint64_t v1708;
  uint64_t v1709;
  unsigned int v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t *v1715;
  uint64_t *v1716;
  int v1717;
  int v1718;
  int v1719;
  int v1720;
  int v1721;
  int v1722;
  uint64_t v1723;
  uint64_t v1724;
  BOOL v1725;
  uint64_t v1726;
  unint64_t v1727;
  uint64_t v1728;
  unsigned int *v1729;
  uint64_t v1730;
  uint64_t v1731;
  unsigned int v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t *v1737;
  uint64_t *v1738;
  int v1739;
  int v1740;
  int v1741;
  int v1742;
  int v1743;
  int v1744;
  uint64_t v1745;
  uint64_t v1746;
  BOOL v1747;
  uint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  unsigned int *v1751;
  uint64_t v1752;
  uint64_t v1753;
  unsigned int v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t *v1759;
  uint64_t *v1760;
  int v1761;
  int v1762;
  int v1763;
  int v1764;
  int v1765;
  int v1766;
  uint64_t v1767;
  uint64_t v1768;
  BOOL v1769;
  uint64_t v1770;
  unint64_t v1771;
  uint64_t v1772;
  unsigned int *v1773;
  uint64_t v1774;
  uint64_t v1775;
  unsigned int v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t *v1781;
  uint64_t *v1782;
  int v1783;
  int v1784;
  int v1785;
  int v1786;
  int v1787;
  int v1788;
  uint64_t v1789;
  uint64_t v1790;
  BOOL v1791;
  uint64_t v1792;
  unint64_t v1793;
  uint64_t v1794;
  unsigned int *v1795;
  uint64_t v1796;
  uint64_t v1797;
  unsigned int v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t *v1803;
  uint64_t *v1804;
  int v1805;
  int v1806;
  int v1807;
  int v1808;
  int v1809;
  int v1810;
  uint64_t v1811;
  uint64_t v1812;
  BOOL v1813;
  uint64_t v1814;
  unint64_t v1815;
  uint64_t v1816;
  unsigned int *v1817;
  uint64_t v1818;
  uint64_t v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t *v1825;
  uint64_t *v1826;
  int v1827;
  int v1828;
  int v1829;
  int v1830;
  int v1831;
  int v1832;
  uint64_t v1833;
  uint64_t v1834;
  BOOL v1835;
  uint64_t v1836;
  unint64_t v1837;
  uint64_t v1838;
  unsigned int *v1839;
  uint64_t v1840;
  uint64_t v1841;
  unsigned int v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t *v1847;
  uint64_t *v1848;
  int v1849;
  int v1850;
  int v1851;
  int v1852;
  int v1853;
  int v1854;
  uint64_t v1855;
  uint64_t v1856;
  BOOL v1857;
  uint64_t v1858;
  unint64_t v1859;
  uint64_t v1860;
  unsigned int *v1861;
  uint64_t v1862;
  uint64_t v1863;
  unsigned int v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t *v1869;
  uint64_t *v1870;
  int v1871;
  int v1872;
  int v1873;
  int v1874;
  int v1875;
  int v1876;
  uint64_t v1877;
  uint64_t v1878;
  BOOL v1879;
  uint64_t v1880;
  unint64_t v1881;
  uint64_t v1882;
  unsigned int *v1883;
  uint64_t v1884;
  uint64_t v1885;
  unsigned int v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t *v1891;
  uint64_t *v1892;
  int v1893;
  int v1894;
  int v1895;
  int v1896;
  int v1897;
  int v1898;
  uint64_t v1899;
  uint64_t v1900;
  BOOL v1901;
  uint64_t v1902;
  unint64_t v1903;
  uint64_t v1904;
  unsigned int *v1905;
  uint64_t v1906;
  uint64_t v1907;
  unsigned int v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t *v1913;
  uint64_t *v1914;
  int v1915;
  int v1916;
  int v1917;
  int v1918;
  int v1919;
  int v1920;
  uint64_t v1921;
  uint64_t v1922;
  BOOL v1923;
  uint64_t v1924;
  unint64_t v1925;
  uint64_t v1926;
  unsigned int *v1927;
  uint64_t v1928;
  uint64_t v1929;
  unsigned int v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t *v1935;
  uint64_t *v1936;
  int v1937;
  int v1938;
  int v1939;
  int v1940;
  int v1941;
  int v1942;
  uint64_t v1943;
  uint64_t v1944;
  BOOL v1945;
  uint64_t v1946;
  unint64_t v1947;
  uint64_t v1948;
  unsigned int *v1949;
  uint64_t v1950;
  uint64_t v1951;
  unsigned int v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t *v1957;
  uint64_t *v1958;
  int v1959;
  int v1960;
  int v1961;
  int v1962;
  int v1963;
  int v1964;
  uint64_t v1965;
  uint64_t v1966;
  BOOL v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  unsigned int *v1971;
  uint64_t v1972;
  uint64_t v1973;
  unsigned int v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t *v1979;
  uint64_t *v1980;
  int v1981;
  int v1982;
  int v1983;
  int v1984;
  int v1985;
  int v1986;
  uint64_t v1987;
  uint64_t v1988;
  BOOL v1989;
  uint64_t v1990;
  unint64_t v1991;
  uint64_t v1992;
  unsigned int *v1993;
  uint64_t v1994;
  uint64_t v1995;
  unsigned int v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t *v2001;
  uint64_t *v2002;
  int v2003;
  int v2004;
  int v2005;
  int v2006;
  int v2007;
  int v2008;
  uint64_t v2009;
  uint64_t v2010;
  BOOL v2011;
  uint64_t v2012;
  unint64_t v2013;
  uint64_t v2014;
  unsigned int *v2015;
  uint64_t v2016;
  uint64_t v2017;
  unsigned int v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t *v2023;
  uint64_t *v2024;
  int v2025;
  int v2026;
  int v2027;
  int v2028;
  int v2029;
  int v2030;
  uint64_t v2031;
  uint64_t v2032;
  BOOL v2033;
  uint64_t v2034;
  unint64_t v2035;
  uint64_t v2036;
  unsigned int *v2037;
  uint64_t v2038;
  uint64_t v2039;
  unsigned int v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t *v2045;
  uint64_t *v2046;
  int v2047;
  int v2048;
  int v2049;
  int v2050;
  int v2051;
  int v2052;
  uint64_t v2053;
  uint64_t v2054;
  BOOL v2055;
  uint64_t v2056;
  unint64_t v2057;
  uint64_t v2058;
  unsigned int *v2059;
  uint64_t v2060;
  uint64_t v2061;
  unsigned int v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t *v2067;
  uint64_t *v2068;
  int v2069;
  int v2070;
  int v2071;
  int v2072;
  int v2073;
  int v2074;
  uint64_t v2075;
  uint64_t v2076;
  BOOL v2077;
  uint64_t v2078;
  unint64_t v2079;
  uint64_t v2080;
  unsigned int *v2081;
  uint64_t v2082;
  uint64_t v2083;
  unsigned int v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t *v2089;
  uint64_t *v2090;
  int v2091;
  int v2092;
  int v2093;
  int v2094;
  int v2095;
  int v2096;
  uint64_t v2097;
  uint64_t v2098;
  BOOL v2099;
  uint64_t v2100;
  unint64_t v2101;
  uint64_t v2102;
  unsigned int *v2103;
  uint64_t v2104;
  uint64_t v2105;
  unsigned int v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t *v2111;
  uint64_t *v2112;
  int v2113;
  int v2114;
  int v2115;
  int v2116;
  int v2117;
  int v2118;
  uint64_t v2119;
  uint64_t v2120;
  BOOL v2121;
  uint64_t v2122;
  unint64_t v2123;
  uint64_t v2124;
  unsigned int *v2125;
  uint64_t v2126;
  uint64_t v2127;
  unsigned int v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t *v2133;
  uint64_t *v2134;
  int v2135;
  int v2136;
  int v2137;
  int v2138;
  int v2139;
  int v2140;
  uint64_t v2141;
  uint64_t v2142;
  BOOL v2143;
  uint64_t v2144;
  unint64_t v2145;
  uint64_t v2146;
  unsigned int *v2147;
  uint64_t v2148;
  uint64_t v2149;
  unsigned int v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  uint64_t *v2155;
  uint64_t *v2156;
  int v2157;
  int v2158;
  int v2159;
  int v2160;
  int v2161;
  int v2162;
  uint64_t v2163;
  uint64_t v2164;
  BOOL v2165;
  uint64_t v2166;
  unint64_t v2167;
  uint64_t v2168;
  unsigned int *v2169;
  uint64_t v2170;
  uint64_t v2171;
  unsigned int v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t *v2177;
  uint64_t *v2178;
  int v2179;
  int v2180;
  int v2181;
  int v2182;
  int v2183;
  int v2184;
  uint64_t v2185;
  uint64_t v2186;
  BOOL v2187;
  uint64_t v2188;
  unint64_t v2189;
  uint64_t v2190;
  unsigned int *v2191;
  uint64_t v2192;
  uint64_t v2193;
  unsigned int v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t *v2199;
  uint64_t *v2200;
  int v2201;
  int v2202;
  int v2203;
  int v2204;
  int v2205;
  int v2206;
  uint64_t v2207;
  uint64_t v2208;
  BOOL v2209;
  uint64_t v2210;
  unint64_t v2211;
  uint64_t v2212;
  unsigned int *v2213;
  uint64_t v2214;
  uint64_t v2215;
  unsigned int v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t *v2221;
  uint64_t *v2222;
  int v2223;
  int v2224;
  int v2225;
  int v2226;
  int v2227;
  int v2228;
  uint64_t v2229;
  uint64_t v2230;
  BOOL v2231;
  uint64_t v2232;
  unint64_t v2233;
  uint64_t v2234;
  unsigned int *v2235;
  uint64_t v2236;
  uint64_t v2237;
  unsigned int v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t *v2243;
  uint64_t *v2244;
  int v2245;
  int v2246;
  int v2247;
  int v2248;
  int v2249;
  int v2250;
  uint64_t v2251;
  uint64_t v2252;
  BOOL v2253;
  uint64_t v2254;
  unint64_t v2255;
  uint64_t v2256;
  unsigned int *v2257;
  uint64_t v2258;
  uint64_t v2259;
  unsigned int v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t *v2265;
  uint64_t *v2266;
  int v2267;
  int v2268;
  int v2269;
  int v2270;
  int v2271;
  int v2272;
  uint64_t v2273;
  uint64_t v2274;
  BOOL v2275;
  uint64_t v2276;
  unint64_t v2277;
  uint64_t v2278;
  unsigned int *v2279;
  uint64_t v2280;
  uint64_t v2281;
  unsigned int v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t *v2287;
  uint64_t *v2288;
  int v2289;
  int v2290;
  int v2291;
  int v2292;
  int v2293;
  int v2294;
  uint64_t v2295;
  uint64_t v2296;
  BOOL v2297;
  uint64_t v2298;
  unint64_t v2299;
  uint64_t v2300;
  unsigned int *v2301;
  uint64_t v2302;
  uint64_t v2303;
  unsigned int v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t *v2309;
  uint64_t *v2310;
  int v2311;
  int v2312;
  int v2313;
  int v2314;
  int v2315;
  int v2316;
  uint64_t v2317;
  uint64_t v2318;
  BOOL v2319;
  uint64_t v2320;
  unint64_t v2321;
  uint64_t v2322;
  unsigned int *v2323;
  uint64_t v2324;
  uint64_t v2325;
  unsigned int v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t *v2331;
  uint64_t *v2332;
  int v2333;
  int v2334;
  int v2335;
  int v2336;
  int v2337;
  int v2338;
  uint64_t v2339;
  uint64_t v2340;
  BOOL v2341;
  uint64_t v2342;
  unint64_t v2343;
  uint64_t v2344;
  unsigned int *v2345;
  uint64_t v2346;
  uint64_t v2347;
  unsigned int v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t *v2353;
  uint64_t *v2354;
  int v2355;
  int v2356;
  int v2357;
  int v2358;
  int v2359;
  int v2360;
  uint64_t v2361;
  uint64_t v2362;
  BOOL v2363;
  uint64_t v2364;
  unint64_t v2365;
  uint64_t v2366;
  unsigned int *v2367;
  uint64_t v2368;
  uint64_t v2369;
  unsigned int v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t *v2375;
  uint64_t *v2376;
  int v2377;
  int v2378;
  int v2379;
  int v2380;
  int v2381;
  int v2382;
  uint64_t v2383;
  uint64_t v2384;
  BOOL v2385;
  uint64_t v2386;
  unint64_t v2387;
  uint64_t v2388;
  unsigned int *v2389;
  uint64_t v2390;
  uint64_t v2391;
  unsigned int v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t *v2397;
  uint64_t *v2398;
  int v2399;
  int v2400;
  int v2401;
  int v2402;
  int v2403;
  int v2404;
  uint64_t v2405;
  uint64_t v2406;
  BOOL v2407;
  uint64_t v2408;
  unint64_t v2409;
  uint64_t v2410;
  unsigned int *v2411;
  uint64_t v2412;
  uint64_t v2413;
  unsigned int v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t *v2419;
  uint64_t *v2420;
  int v2421;
  int v2422;
  int v2423;
  int v2424;
  int v2425;
  int v2426;
  uint64_t v2427;
  uint64_t v2428;
  BOOL v2429;
  uint64_t v2430;
  unint64_t v2431;
  uint64_t v2432;
  unsigned int *v2433;
  uint64_t v2434;
  uint64_t v2435;
  unsigned int v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t *v2441;
  uint64_t *v2442;
  int v2443;
  int v2444;
  int v2445;
  int v2446;
  int v2447;
  int v2448;
  uint64_t v2449;
  uint64_t v2450;
  BOOL v2451;
  uint64_t v2452;
  unint64_t v2453;
  uint64_t v2454;
  unsigned int *v2455;
  uint64_t v2456;
  uint64_t v2457;
  unsigned int v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t *v2463;
  uint64_t *v2464;
  int v2465;
  int v2466;
  int v2467;
  int v2468;
  int v2469;
  int v2470;
  uint64_t v2471;
  uint64_t v2472;
  BOOL v2473;
  uint64_t v2474;
  unint64_t v2475;
  uint64_t v2476;
  unsigned int *v2477;
  uint64_t v2478;
  uint64_t v2479;
  unsigned int v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t *v2485;
  uint64_t *v2486;
  int v2487;
  int v2488;
  int v2489;
  int v2490;
  int v2491;
  int v2492;
  uint64_t v2493;
  uint64_t v2494;
  BOOL v2495;
  uint64_t v2496;
  unint64_t v2497;
  uint64_t v2498;
  unsigned int *v2499;
  uint64_t v2500;
  uint64_t v2501;
  unsigned int v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t *v2507;
  uint64_t *v2508;
  int v2509;
  int v2510;
  int v2511;
  int v2512;
  int v2513;
  int v2514;
  uint64_t v2515;
  uint64_t v2516;
  BOOL v2517;
  uint64_t v2518;
  unint64_t v2519;
  uint64_t v2520;
  unsigned int *v2521;
  uint64_t v2522;
  uint64_t v2523;
  unsigned int v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t *v2529;
  uint64_t *v2530;
  int v2531;
  int v2532;
  int v2533;
  int v2534;
  int v2535;
  int v2536;
  uint64_t v2537;
  uint64_t v2538;
  BOOL v2539;
  uint64_t v2540;
  unint64_t v2541;
  uint64_t v2542;
  unsigned int *v2543;
  uint64_t v2544;
  uint64_t v2545;
  unsigned int v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  uint64_t v2550;
  uint64_t *v2551;
  uint64_t *v2552;
  int v2553;
  int v2554;
  int v2555;
  int v2556;
  int v2557;
  int v2558;
  uint64_t v2559;
  uint64_t v2560;
  BOOL v2561;
  uint64_t v2562;
  unint64_t v2563;
  uint64_t v2564;
  unsigned int *v2565;
  uint64_t v2566;
  uint64_t v2567;
  unsigned int v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t *v2573;
  uint64_t *v2574;
  int v2575;
  int v2576;
  int v2577;
  int v2578;
  int v2579;
  int v2580;
  uint64_t v2581;
  uint64_t v2582;
  BOOL v2583;
  uint64_t v2584;
  unint64_t v2585;
  uint64_t v2586;
  unsigned int *v2587;
  uint64_t v2588;
  uint64_t v2589;
  unsigned int v2590;
  uint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  uint64_t *v2595;
  uint64_t *v2596;
  int v2597;
  int v2598;
  int v2599;
  int v2600;
  int v2601;
  int v2602;
  uint64_t v2603;
  uint64_t v2604;
  BOOL v2605;
  uint64_t v2606;
  unint64_t v2607;
  uint64_t v2608;
  unsigned int *v2609;
  uint64_t v2610;
  uint64_t v2611;
  unsigned int v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t v2616;
  uint64_t *v2617;
  uint64_t *v2618;
  int v2619;
  int v2620;
  int v2621;
  int v2622;
  int v2623;
  int v2624;
  uint64_t v2625;
  uint64_t v2626;
  BOOL v2627;
  uint64_t v2628;
  unint64_t v2629;
  uint64_t v2630;
  unsigned int *v2631;
  uint64_t v2632;
  uint64_t v2633;
  unsigned int v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t *v2639;
  uint64_t *v2640;
  int v2641;
  int v2642;
  int v2643;
  int v2644;
  int v2645;
  int v2646;
  uint64_t v2647;
  uint64_t v2648;
  BOOL v2649;
  uint64_t v2650;
  unint64_t v2651;
  uint64_t v2652;
  unsigned int *v2653;
  uint64_t v2654;
  uint64_t v2655;
  unsigned int v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t *v2661;
  uint64_t *v2662;
  int v2663;
  int v2664;
  int v2665;
  int v2666;
  int v2667;
  int v2668;
  uint64_t v2669;
  uint64_t v2670;
  BOOL v2671;
  uint64_t v2672;
  unint64_t v2673;
  uint64_t v2674;
  unsigned int *v2675;
  uint64_t v2676;
  uint64_t v2677;
  unsigned int v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  uint64_t v2682;
  uint64_t *v2683;
  uint64_t *v2684;
  int v2685;
  int v2686;
  int v2687;
  int v2688;
  int v2689;
  int v2690;
  uint64_t v2691;
  uint64_t v2692;
  BOOL v2693;
  uint64_t v2694;
  unint64_t v2695;
  uint64_t v2696;
  unsigned int *v2697;
  uint64_t v2698;
  uint64_t v2699;
  unsigned int v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t *v2705;
  uint64_t *v2706;
  int v2707;
  int v2708;
  int v2709;
  int v2710;
  int v2711;
  int v2712;
  uint64_t v2713;
  uint64_t v2714;
  BOOL v2715;
  uint64_t v2716;
  unint64_t v2717;
  uint64_t v2718;
  unsigned int *v2719;
  uint64_t v2720;
  uint64_t v2721;
  unsigned int v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  uint64_t v2726;
  uint64_t *v2727;
  uint64_t *v2728;
  int v2729;
  int v2730;
  int v2731;
  int v2732;
  int v2733;
  int v2734;
  uint64_t v2735;
  uint64_t v2736;
  BOOL v2737;
  uint64_t v2738;
  unint64_t v2739;
  uint64_t v2740;
  unsigned int *v2741;
  uint64_t v2742;
  uint64_t v2743;
  unsigned int v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t *v2749;
  uint64_t *v2750;
  int v2751;
  int v2752;
  int v2753;
  int v2754;
  int v2755;
  int v2756;
  uint64_t v2757;
  uint64_t v2758;
  BOOL v2759;
  uint64_t v2760;
  unint64_t v2761;
  uint64_t v2762;
  unsigned int *v2763;
  uint64_t v2764;
  uint64_t v2765;
  unsigned int v2766;
  uint64_t v2767;
  uint64_t v2768;
  uint64_t v2769;
  uint64_t v2770;
  uint64_t *v2771;
  uint64_t *v2772;
  int v2773;
  int v2774;
  int v2775;
  int v2776;
  int v2777;
  int v2778;
  uint64_t v2779;
  uint64_t v2780;
  BOOL v2781;
  uint64_t v2782;
  unint64_t v2783;
  uint64_t v2784;
  unsigned int *v2785;
  uint64_t v2786;
  uint64_t v2787;
  unsigned int v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t v2792;
  uint64_t *v2793;
  uint64_t *v2794;
  int v2795;
  int v2796;
  int v2797;
  int v2798;
  int v2799;
  int v2800;
  uint64_t v2801;
  uint64_t v2802;
  BOOL v2803;
  uint64_t v2804;
  unint64_t v2805;
  uint64_t v2806;
  unsigned int *v2807;
  uint64_t v2808;
  uint64_t v2809;
  unsigned int v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  uint64_t v2814;
  uint64_t *v2815;
  uint64_t *v2816;
  int v2817;
  int v2818;
  int v2819;
  int v2820;
  int v2821;
  int v2822;
  uint64_t v2823;
  uint64_t v2824;
  BOOL v2825;
  uint64_t v2826;
  unint64_t v2827;
  uint64_t v2828;
  unsigned int *v2829;
  uint64_t v2830;
  uint64_t v2831;
  unsigned int v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t *v2837;
  uint64_t *v2838;
  int v2839;
  int v2840;
  int v2841;
  int v2842;
  int v2843;
  int v2844;
  uint64_t v2845;
  uint64_t v2846;
  BOOL v2847;
  uint64_t v2848;
  unint64_t v2849;
  uint64_t v2850;
  unsigned int *v2851;
  uint64_t v2852;
  uint64_t v2853;
  unsigned int v2854;
  uint64_t v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t *v2859;
  uint64_t *v2860;
  int v2861;
  int v2862;
  int v2863;
  int v2864;
  int v2865;
  int v2866;
  uint64_t v2867;
  uint64_t v2868;
  BOOL v2869;
  uint64_t v2870;
  unint64_t v2871;
  uint64_t v2872;
  unsigned int *v2873;
  uint64_t v2874;
  uint64_t v2875;
  unsigned int v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t *v2881;
  uint64_t *v2882;
  int v2883;
  int v2884;
  int v2885;
  int v2886;
  int v2887;
  int v2888;
  uint64_t v2889;
  uint64_t v2890;
  BOOL v2891;
  uint64_t v2892;
  unint64_t v2893;
  uint64_t v2894;
  unsigned int *v2895;
  uint64_t v2896;
  uint64_t v2897;
  unsigned int v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  uint64_t v2902;
  uint64_t *v2903;
  uint64_t *v2904;
  int v2905;
  int v2906;
  int v2907;
  int v2908;
  int v2909;
  int v2910;
  uint64_t v2911;
  uint64_t v2912;
  BOOL v2913;
  uint64_t v2914;
  unint64_t v2915;
  uint64_t v2916;
  unsigned int *v2917;
  uint64_t v2918;
  uint64_t v2919;
  unsigned int v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t *v2925;
  uint64_t *v2926;
  int v2927;
  int v2928;
  int v2929;
  int v2930;
  int v2931;
  int v2932;
  uint64_t v2933;
  uint64_t v2934;
  BOOL v2935;
  uint64_t v2936;
  unint64_t v2937;
  uint64_t v2938;
  unsigned int *v2939;
  uint64_t v2940;
  uint64_t v2941;
  unsigned int v2942;
  uint64_t v2943;
  uint64_t v2944;
  uint64_t v2945;
  uint64_t v2946;
  uint64_t *v2947;
  uint64_t *v2948;
  int v2949;
  int v2950;
  int v2951;
  int v2952;
  int v2953;
  int v2954;
  uint64_t v2955;
  uint64_t v2956;

  v1 = *result;
  v2 = **result;
  v3 = (unsigned int *)(*result)[1];
  v4 = v3[266];
  v5 = *(_DWORD *)(v2 + 272);
  if (v4 >> 30)
    v6 = 1;
  else
    v6 = (_DWORD)v4 == v5;
  if (v6)
  {
    v7 = v3[267];
    if (v7 >> 30)
      v8 = 1;
    else
      v8 = (_DWORD)v7 == v5;
    if (!v8)
      goto LABEL_644;
LABEL_11:
    v9 = v3[268];
    if (v9 >> 30)
      v10 = 1;
    else
      v10 = (_DWORD)v9 == v5;
    if (!v10)
      goto LABEL_671;
LABEL_16:
    v11 = v3[269];
    if (v11 >> 30)
      v12 = 1;
    else
      v12 = (_DWORD)v11 == v5;
    if (!v12)
      goto LABEL_698;
LABEL_21:
    v13 = v3[270];
    if (v13 >> 30)
      v14 = 1;
    else
      v14 = (_DWORD)v13 == v5;
    if (!v14)
      goto LABEL_725;
LABEL_26:
    v15 = v3[271];
    if (v15 >> 30)
      v16 = 1;
    else
      v16 = (_DWORD)v15 == v5;
    if (!v16)
      goto LABEL_752;
LABEL_31:
    v17 = v3[272];
    if (v17 >> 30)
      v18 = 1;
    else
      v18 = (_DWORD)v17 == v5;
    if (!v18)
      goto LABEL_779;
LABEL_36:
    v19 = v3[273];
    if (v19 >> 30)
      v20 = 1;
    else
      v20 = (_DWORD)v19 == v5;
    if (!v20)
      goto LABEL_806;
LABEL_41:
    v21 = v3[274];
    if (v21 >> 30)
      v22 = 1;
    else
      v22 = (_DWORD)v21 == v5;
    if (!v22)
      goto LABEL_833;
LABEL_46:
    v23 = v3[275];
    if (v23 >> 30)
      v24 = 1;
    else
      v24 = (_DWORD)v23 == v5;
    if (!v24)
      goto LABEL_860;
LABEL_51:
    v25 = v3[276];
    if (v25 >> 30)
      v26 = 1;
    else
      v26 = (_DWORD)v25 == v5;
    if (!v26)
      goto LABEL_887;
LABEL_56:
    v27 = v3[277];
    if (v27 >> 30)
      v28 = 1;
    else
      v28 = (_DWORD)v27 == v5;
    if (!v28)
      goto LABEL_914;
LABEL_61:
    v29 = v3[278];
    if (v29 >> 30)
      v30 = 1;
    else
      v30 = (_DWORD)v29 == v5;
    if (!v30)
      goto LABEL_941;
LABEL_66:
    v31 = v3[279];
    if (v31 >> 30)
      v32 = 1;
    else
      v32 = (_DWORD)v31 == v5;
    if (!v32)
      goto LABEL_968;
LABEL_71:
    v33 = v3[280];
    if (v33 >> 30)
      v34 = 1;
    else
      v34 = (_DWORD)v33 == v5;
    if (!v34)
      goto LABEL_995;
LABEL_76:
    v35 = v3[281];
    if (v35 >> 30)
      v36 = 1;
    else
      v36 = (_DWORD)v35 == v5;
    if (!v36)
      goto LABEL_1022;
LABEL_81:
    v37 = v3[282];
    if (v37 >> 30)
      v38 = 1;
    else
      v38 = (_DWORD)v37 == v5;
    if (!v38)
      goto LABEL_1049;
LABEL_86:
    v39 = v3[283];
    if (v39 >> 30)
      v40 = 1;
    else
      v40 = (_DWORD)v39 == v5;
    if (!v40)
      goto LABEL_1076;
LABEL_91:
    v41 = v3[284];
    if (v41 >> 30)
      v42 = 1;
    else
      v42 = (_DWORD)v41 == v5;
    if (!v42)
      goto LABEL_1103;
LABEL_96:
    v43 = v3[285];
    if (v43 >> 30)
      v44 = 1;
    else
      v44 = (_DWORD)v43 == v5;
    if (!v44)
      goto LABEL_1130;
LABEL_101:
    v45 = v3[286];
    if (v45 >> 30)
      v46 = 1;
    else
      v46 = (_DWORD)v45 == v5;
    if (!v46)
      goto LABEL_1157;
LABEL_106:
    v47 = v3[287];
    if (v47 >> 30)
      v48 = 1;
    else
      v48 = (_DWORD)v47 == v5;
    if (!v48)
      goto LABEL_1184;
LABEL_111:
    v49 = v3[288];
    if (v49 >> 30)
      v50 = 1;
    else
      v50 = (_DWORD)v49 == v5;
    if (!v50)
      goto LABEL_1211;
LABEL_116:
    v51 = v3[289];
    if (v51 >> 30)
      v52 = 1;
    else
      v52 = (_DWORD)v51 == v5;
    if (!v52)
      goto LABEL_1238;
LABEL_121:
    v53 = v3[290];
    if (v53 >> 30)
      v54 = 1;
    else
      v54 = (_DWORD)v53 == v5;
    if (!v54)
      goto LABEL_1265;
LABEL_126:
    v55 = v3[291];
    if (v55 >> 30)
      v56 = 1;
    else
      v56 = (_DWORD)v55 == v5;
    if (!v56)
      goto LABEL_1292;
LABEL_131:
    v57 = v3[292];
    if (v57 >> 30)
      v58 = 1;
    else
      v58 = (_DWORD)v57 == v5;
    if (!v58)
      goto LABEL_1319;
LABEL_136:
    v59 = v3[293];
    if (v59 >> 30)
      v60 = 1;
    else
      v60 = (_DWORD)v59 == v5;
    if (!v60)
      goto LABEL_1346;
LABEL_141:
    v61 = v3[294];
    if (v61 >> 30)
      v62 = 1;
    else
      v62 = (_DWORD)v61 == v5;
    if (!v62)
      goto LABEL_1373;
LABEL_146:
    v63 = v3[295];
    if (v63 >> 30)
      v64 = 1;
    else
      v64 = (_DWORD)v63 == v5;
    if (!v64)
      goto LABEL_1400;
LABEL_151:
    v65 = v3[296];
    if (v65 >> 30)
      v66 = 1;
    else
      v66 = (_DWORD)v65 == v5;
    if (!v66)
      goto LABEL_1427;
LABEL_156:
    v67 = v3[297];
    if (v67 >> 30)
      v68 = 1;
    else
      v68 = (_DWORD)v67 == v5;
    if (!v68)
      goto LABEL_1454;
LABEL_161:
    v69 = v3[298];
    if (v69 >> 30)
      v70 = 1;
    else
      v70 = (_DWORD)v69 == v5;
    if (!v70)
      goto LABEL_1481;
LABEL_166:
    v71 = v3[299];
    if (v71 >> 30)
      v72 = 1;
    else
      v72 = (_DWORD)v71 == v5;
    if (!v72)
      goto LABEL_1508;
LABEL_171:
    v73 = v3[300];
    if (v73 >> 30)
      v74 = 1;
    else
      v74 = (_DWORD)v73 == v5;
    if (!v74)
      goto LABEL_1535;
LABEL_176:
    v75 = v3[301];
    if (v75 >> 30)
      v76 = 1;
    else
      v76 = (_DWORD)v75 == v5;
    if (!v76)
      goto LABEL_1562;
LABEL_181:
    v77 = v3[302];
    if (v77 >> 30)
      v78 = 1;
    else
      v78 = (_DWORD)v77 == v5;
    if (!v78)
      goto LABEL_1589;
LABEL_186:
    v79 = v3[303];
    if (v79 >> 30)
      v80 = 1;
    else
      v80 = (_DWORD)v79 == v5;
    if (!v80)
      goto LABEL_1616;
LABEL_191:
    v81 = v3[304];
    if (v81 >> 30)
      v82 = 1;
    else
      v82 = (_DWORD)v81 == v5;
    if (!v82)
      goto LABEL_1643;
LABEL_196:
    v83 = v3[305];
    if (v83 >> 30)
      v84 = 1;
    else
      v84 = (_DWORD)v83 == v5;
    if (!v84)
      goto LABEL_1670;
LABEL_201:
    v85 = v3[306];
    if (v85 >> 30)
      v86 = 1;
    else
      v86 = (_DWORD)v85 == v5;
    if (!v86)
      goto LABEL_1697;
LABEL_206:
    v87 = v3[307];
    if (v87 >> 30)
      v88 = 1;
    else
      v88 = (_DWORD)v87 == v5;
    if (!v88)
      goto LABEL_1724;
LABEL_211:
    v89 = v3[308];
    if (v89 >> 30)
      v90 = 1;
    else
      v90 = (_DWORD)v89 == v5;
    if (!v90)
      goto LABEL_1751;
LABEL_216:
    v91 = v3[309];
    if (v91 >> 30)
      v92 = 1;
    else
      v92 = (_DWORD)v91 == v5;
    if (!v92)
      goto LABEL_1778;
LABEL_221:
    v93 = v3[310];
    if (v93 >> 30)
      v94 = 1;
    else
      v94 = (_DWORD)v93 == v5;
    if (!v94)
      goto LABEL_1805;
LABEL_226:
    v95 = v3[311];
    if (v95 >> 30)
      v96 = 1;
    else
      v96 = (_DWORD)v95 == v5;
    if (!v96)
      goto LABEL_1832;
LABEL_231:
    v97 = v3[312];
    if (v97 >> 30)
      v98 = 1;
    else
      v98 = (_DWORD)v97 == v5;
    if (!v98)
      goto LABEL_1859;
LABEL_236:
    v99 = v3[313];
    if (v99 >> 30)
      v100 = 1;
    else
      v100 = (_DWORD)v99 == v5;
    if (!v100)
      goto LABEL_1886;
LABEL_241:
    v101 = v3[314];
    if (v101 >> 30)
      v102 = 1;
    else
      v102 = (_DWORD)v101 == v5;
    if (!v102)
      goto LABEL_1913;
LABEL_246:
    v103 = v3[315];
    if (v103 >> 30)
      v104 = 1;
    else
      v104 = (_DWORD)v103 == v5;
    if (!v104)
      goto LABEL_1940;
LABEL_251:
    v105 = v3[316];
    if (v105 >> 30)
      v106 = 1;
    else
      v106 = (_DWORD)v105 == v5;
    if (!v106)
      goto LABEL_1967;
LABEL_256:
    v107 = v3[317];
    if (v107 >> 30)
      v108 = 1;
    else
      v108 = (_DWORD)v107 == v5;
    if (!v108)
      goto LABEL_1993;
LABEL_261:
    v109 = v3[318];
    if (v109 >> 30)
      v110 = 1;
    else
      v110 = (_DWORD)v109 == v5;
    if (!v110)
      goto LABEL_2019;
LABEL_266:
    v111 = v3[319];
    if (v111 >> 30)
      v112 = 1;
    else
      v112 = (_DWORD)v111 == v5;
    if (!v112)
      goto LABEL_2045;
LABEL_271:
    v113 = v3[320];
    if (v113 >> 30)
      v114 = 1;
    else
      v114 = (_DWORD)v113 == v5;
    if (!v114)
      goto LABEL_2071;
LABEL_276:
    v115 = v3[321];
    if (v115 >> 30)
      v116 = 1;
    else
      v116 = (_DWORD)v115 == v5;
    if (!v116)
      goto LABEL_2097;
LABEL_281:
    v117 = v3[322];
    if (v117 >> 30)
      v118 = 1;
    else
      v118 = (_DWORD)v117 == v5;
    if (!v118)
      goto LABEL_2123;
LABEL_286:
    v119 = v3[323];
    if (v119 >> 30)
      v120 = 1;
    else
      v120 = (_DWORD)v119 == v5;
    if (!v120)
      goto LABEL_2149;
LABEL_291:
    v121 = v3[324];
    if (v121 >> 30)
      v122 = 1;
    else
      v122 = (_DWORD)v121 == v5;
    if (!v122)
      goto LABEL_2175;
LABEL_296:
    v123 = v3[325];
    if (v123 >> 30)
      v124 = 1;
    else
      v124 = (_DWORD)v123 == v5;
    if (!v124)
      goto LABEL_2201;
LABEL_301:
    v125 = v3[326];
    if (v125 >> 30)
      v126 = 1;
    else
      v126 = (_DWORD)v125 == v5;
    if (!v126)
      goto LABEL_2227;
LABEL_306:
    v127 = v3[327];
    if (v127 >> 30)
      v128 = 1;
    else
      v128 = (_DWORD)v127 == v5;
    if (!v128)
      goto LABEL_2253;
LABEL_311:
    v129 = v3[328];
    if (v129 >> 30)
      v130 = 1;
    else
      v130 = (_DWORD)v129 == v5;
    if (!v130)
      goto LABEL_2279;
LABEL_316:
    v131 = v3[329];
    if (v131 >> 30)
      v132 = 1;
    else
      v132 = (_DWORD)v131 == v5;
    if (!v132)
      goto LABEL_2305;
LABEL_321:
    v133 = v3[330];
    if (v133 >> 30)
      v134 = 1;
    else
      v134 = (_DWORD)v133 == v5;
    if (!v134)
      goto LABEL_2331;
LABEL_326:
    v135 = v3[331];
    if (v135 >> 30)
      v136 = 1;
    else
      v136 = (_DWORD)v135 == v5;
    if (!v136)
      goto LABEL_2357;
LABEL_331:
    v137 = v3[332];
    if (v137 >> 30)
      v138 = 1;
    else
      v138 = (_DWORD)v137 == v5;
    if (!v138)
      goto LABEL_2383;
LABEL_336:
    v139 = v3[333];
    if (v139 >> 30)
      v140 = 1;
    else
      v140 = (_DWORD)v139 == v5;
    if (!v140)
      goto LABEL_2409;
LABEL_341:
    v141 = v3[334];
    if (v141 >> 30)
      v142 = 1;
    else
      v142 = (_DWORD)v141 == v5;
    if (!v142)
      goto LABEL_2435;
LABEL_346:
    v143 = v3[335];
    if (v143 >> 30)
      v144 = 1;
    else
      v144 = (_DWORD)v143 == v5;
    if (!v144)
      goto LABEL_2461;
LABEL_351:
    v145 = v3[336];
    if (v145 >> 30)
      v146 = 1;
    else
      v146 = (_DWORD)v145 == v5;
    if (!v146)
      goto LABEL_2487;
LABEL_356:
    v147 = v3[337];
    if (v147 >> 30)
      v148 = 1;
    else
      v148 = (_DWORD)v147 == v5;
    if (!v148)
      goto LABEL_2513;
LABEL_361:
    v149 = v3[338];
    if (v149 >> 30)
      v150 = 1;
    else
      v150 = (_DWORD)v149 == v5;
    if (!v150)
      goto LABEL_2539;
LABEL_366:
    v151 = v3[339];
    if (v151 >> 30)
      v152 = 1;
    else
      v152 = (_DWORD)v151 == v5;
    if (!v152)
      goto LABEL_2565;
LABEL_371:
    v153 = v3[340];
    if (v153 >> 30)
      v154 = 1;
    else
      v154 = (_DWORD)v153 == v5;
    if (!v154)
      goto LABEL_2591;
LABEL_376:
    v155 = v3[341];
    if (v155 >> 30)
      v156 = 1;
    else
      v156 = (_DWORD)v155 == v5;
    if (!v156)
      goto LABEL_2617;
LABEL_381:
    v157 = v3[342];
    if (v157 >> 30)
      v158 = 1;
    else
      v158 = (_DWORD)v157 == v5;
    if (!v158)
      goto LABEL_2643;
LABEL_386:
    v159 = v3[343];
    if (v159 >> 30)
      v160 = 1;
    else
      v160 = (_DWORD)v159 == v5;
    if (!v160)
      goto LABEL_2669;
LABEL_391:
    v161 = v3[344];
    if (v161 >> 30)
      v162 = 1;
    else
      v162 = (_DWORD)v161 == v5;
    if (!v162)
      goto LABEL_2695;
LABEL_396:
    v163 = v3[345];
    if (v163 >> 30)
      v164 = 1;
    else
      v164 = (_DWORD)v163 == v5;
    if (!v164)
      goto LABEL_2721;
LABEL_401:
    v165 = v3[346];
    if (v165 >> 30)
      v166 = 1;
    else
      v166 = (_DWORD)v165 == v5;
    if (!v166)
      goto LABEL_2747;
LABEL_406:
    v167 = v3[347];
    if (v167 >> 30)
      v168 = 1;
    else
      v168 = (_DWORD)v167 == v5;
    if (!v168)
      goto LABEL_2773;
LABEL_411:
    v169 = v3[348];
    if (v169 >> 30)
      v170 = 1;
    else
      v170 = (_DWORD)v169 == v5;
    if (!v170)
      goto LABEL_2799;
LABEL_416:
    v171 = v3[349];
    if (v171 >> 30)
      v172 = 1;
    else
      v172 = (_DWORD)v171 == v5;
    if (!v172)
      goto LABEL_2825;
LABEL_421:
    v173 = v3[350];
    if (v173 >> 30)
      v174 = 1;
    else
      v174 = (_DWORD)v173 == v5;
    if (!v174)
      goto LABEL_2851;
LABEL_426:
    v175 = v3[351];
    if (v175 >> 30)
      v176 = 1;
    else
      v176 = (_DWORD)v175 == v5;
    if (!v176)
      goto LABEL_2877;
LABEL_431:
    v177 = v3[352];
    if (v177 >> 30)
      v178 = 1;
    else
      v178 = (_DWORD)v177 == v5;
    if (!v178)
      goto LABEL_2903;
LABEL_436:
    v179 = v3[353];
    if (v179 >> 30)
      v180 = 1;
    else
      v180 = (_DWORD)v179 == v5;
    if (!v180)
      goto LABEL_2929;
LABEL_441:
    v181 = v3[354];
    if (v181 >> 30)
      v182 = 1;
    else
      v182 = (_DWORD)v181 == v5;
    if (!v182)
      goto LABEL_2955;
LABEL_446:
    v183 = v3[355];
    if (v183 >> 30)
      v184 = 1;
    else
      v184 = (_DWORD)v183 == v5;
    if (!v184)
      goto LABEL_2981;
LABEL_451:
    v185 = v3[356];
    if (v185 >> 30)
      v186 = 1;
    else
      v186 = (_DWORD)v185 == v5;
    if (!v186)
      goto LABEL_3007;
LABEL_456:
    v187 = v3[357];
    if (v187 >> 30)
      v188 = 1;
    else
      v188 = (_DWORD)v187 == v5;
    if (!v188)
      goto LABEL_3033;
LABEL_461:
    v189 = v3[358];
    if (v189 >> 30)
      v190 = 1;
    else
      v190 = (_DWORD)v189 == v5;
    if (!v190)
      goto LABEL_3059;
LABEL_466:
    v191 = v3[359];
    if (v191 >> 30)
      v192 = 1;
    else
      v192 = (_DWORD)v191 == v5;
    if (!v192)
      goto LABEL_3085;
LABEL_471:
    v193 = v3[360];
    if (v193 >> 30)
      v194 = 1;
    else
      v194 = (_DWORD)v193 == v5;
    if (!v194)
      goto LABEL_3111;
LABEL_476:
    v195 = v3[361];
    if (v195 >> 30)
      v196 = 1;
    else
      v196 = (_DWORD)v195 == v5;
    if (!v196)
      goto LABEL_3137;
LABEL_481:
    v197 = v3[362];
    if (v197 >> 30)
      v198 = 1;
    else
      v198 = (_DWORD)v197 == v5;
    if (!v198)
      goto LABEL_3163;
LABEL_486:
    v199 = v3[363];
    if (v199 >> 30)
      v200 = 1;
    else
      v200 = (_DWORD)v199 == v5;
    if (!v200)
      goto LABEL_3189;
LABEL_491:
    v201 = v3[364];
    if (v201 >> 30)
      v202 = 1;
    else
      v202 = (_DWORD)v201 == v5;
    if (!v202)
      goto LABEL_3215;
LABEL_496:
    v203 = v3[365];
    if (v203 >> 30)
      v204 = 1;
    else
      v204 = (_DWORD)v203 == v5;
    if (!v204)
      goto LABEL_3241;
LABEL_501:
    v205 = v3[366];
    if (v205 >> 30)
      v206 = 1;
    else
      v206 = (_DWORD)v205 == v5;
    if (!v206)
      goto LABEL_3267;
LABEL_506:
    v207 = v3[367];
    if (v207 >> 30)
      v208 = 1;
    else
      v208 = (_DWORD)v207 == v5;
    if (!v208)
      goto LABEL_3293;
LABEL_511:
    v209 = v3[368];
    if (v209 >> 30)
      v210 = 1;
    else
      v210 = (_DWORD)v209 == v5;
    if (!v210)
      goto LABEL_3319;
LABEL_516:
    v211 = v3[369];
    if (v211 >> 30)
      v212 = 1;
    else
      v212 = (_DWORD)v211 == v5;
    if (!v212)
      goto LABEL_3345;
LABEL_521:
    v213 = v3[370];
    if (v213 >> 30)
      v214 = 1;
    else
      v214 = (_DWORD)v213 == v5;
    if (!v214)
      goto LABEL_3371;
LABEL_526:
    v215 = v3[371];
    if (v215 >> 30)
      v216 = 1;
    else
      v216 = (_DWORD)v215 == v5;
    if (!v216)
      goto LABEL_3397;
LABEL_531:
    v217 = v3[372];
    if (v217 >> 30)
      v218 = 1;
    else
      v218 = (_DWORD)v217 == v5;
    if (!v218)
      goto LABEL_3423;
LABEL_536:
    v219 = v3[373];
    if (v219 >> 30)
      v220 = 1;
    else
      v220 = (_DWORD)v219 == v5;
    if (!v220)
      goto LABEL_3449;
LABEL_541:
    v221 = v3[374];
    if (v221 >> 30)
      v222 = 1;
    else
      v222 = (_DWORD)v221 == v5;
    if (!v222)
      goto LABEL_3475;
LABEL_546:
    v223 = v3[375];
    if (v223 >> 30)
      v224 = 1;
    else
      v224 = (_DWORD)v223 == v5;
    if (!v224)
      goto LABEL_3501;
LABEL_551:
    v225 = v3[376];
    if (v225 >> 30)
      v226 = 1;
    else
      v226 = (_DWORD)v225 == v5;
    if (!v226)
      goto LABEL_3527;
LABEL_556:
    v227 = v3[377];
    if (v227 >> 30)
      v228 = 1;
    else
      v228 = (_DWORD)v227 == v5;
    if (!v228)
      goto LABEL_3553;
LABEL_561:
    v229 = v3[378];
    if (v229 >> 30)
      v230 = 1;
    else
      v230 = (_DWORD)v229 == v5;
    if (!v230)
      goto LABEL_3579;
LABEL_566:
    v231 = v3[379];
    if (v231 >> 30)
      v232 = 1;
    else
      v232 = (_DWORD)v231 == v5;
    if (!v232)
      goto LABEL_3605;
LABEL_571:
    v233 = v3[380];
    if (v233 >> 30)
      v234 = 1;
    else
      v234 = (_DWORD)v233 == v5;
    if (!v234)
      goto LABEL_3631;
LABEL_576:
    v235 = v3[381];
    if (v235 >> 30)
      v236 = 1;
    else
      v236 = (_DWORD)v235 == v5;
    if (!v236)
      goto LABEL_3657;
LABEL_581:
    v237 = v3[382];
    if (v237 >> 30)
      v238 = 1;
    else
      v238 = (_DWORD)v237 == v5;
    if (!v238)
      goto LABEL_3683;
LABEL_586:
    v239 = v3[383];
    if (v239 >> 30)
      v240 = 1;
    else
      v240 = (_DWORD)v239 == v5;
    if (!v240)
      goto LABEL_3709;
LABEL_591:
    v241 = v3[384];
    if (v241 >> 30)
      v242 = 1;
    else
      v242 = (_DWORD)v241 == v5;
    if (!v242)
      goto LABEL_3735;
LABEL_596:
    v243 = v3[385];
    if (v243 >> 30)
      v244 = 1;
    else
      v244 = (_DWORD)v243 == v5;
    if (!v244)
      goto LABEL_3761;
LABEL_601:
    v245 = v3[386];
    if (v245 >> 30)
      v246 = 1;
    else
      v246 = (_DWORD)v245 == v5;
    if (!v246)
      goto LABEL_3787;
LABEL_606:
    v247 = v3[387];
    if (v247 >> 30)
      v248 = 1;
    else
      v248 = (_DWORD)v247 == v5;
    if (!v248)
      goto LABEL_3813;
    goto LABEL_611;
  }
  v252 = *(_QWORD *)(v1[2] + 8);
  v253 = v4 & 0xFFFFFFFFCFFFFFFFLL;
  v254 = *(_QWORD *)(*(_QWORD *)(v252 + 8) + 2448);
  v255 = (unsigned int *)(v254 + 520 * (v4 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v256 = *v255;
  if ((_DWORD)v256)
  {
    v257 = 0;
    v258 = 0;
    v259 = **(_QWORD **)(v252 + 16);
    v260 = v254 + 520 * v253;
    v261 = v260 + 364;
    v262 = v260 + 340;
    while (1)
    {
      v263 = (uint64_t *)(v261 + 12 * v257);
      v264 = *(uint64_t **)(v259 + 2512);
      if (v264)
        break;
LABEL_636:
      *(_WORD *)(v262 + 2 * v258) = *(_WORD *)(v262 + 2 * v257);
      if (v257 != v258)
      {
        v271 = *v263;
        v272 = v261 + 12 * v258;
        *(_DWORD *)(v272 + 8) = *((_DWORD *)v263 + 2);
        *(_QWORD *)v272 = v271;
      }
      ++v258;
LABEL_620:
      if (++v257 == v256)
      {
        v1 = *result;
        v2 = **result;
        v3 = (unsigned int *)(*result)[1];
        v5 = *(_DWORD *)(v2 + 272);
        goto LABEL_640;
      }
    }
    v265 = *(_DWORD *)v263;
    v266 = *((_DWORD *)v263 + 1);
    v267 = *((_DWORD *)v263 + 2);
    while (1)
    {
      v268 = *((_DWORD *)v264 + 7);
      if (v265 == v268)
      {
        v269 = *((_DWORD *)v264 + 8);
        if (v266 == v269)
        {
          v270 = *((_DWORD *)v264 + 9);
          if (v267 < v270)
            goto LABEL_624;
          if (v270 >= v267)
            goto LABEL_620;
        }
        else
        {
          if (v266 < v269)
            goto LABEL_624;
          if (v269 >= v266)
            goto LABEL_620;
        }
      }
      else
      {
        if (v265 < v268)
          goto LABEL_624;
        if (v268 >= v265)
          goto LABEL_620;
      }
      ++v264;
LABEL_624:
      v264 = (uint64_t *)*v264;
      if (!v264)
        goto LABEL_636;
    }
  }
  v258 = 0;
LABEL_640:
  *v255 = v258;
  v7 = v3[267];
  if (v7 >> 30)
    v273 = 1;
  else
    v273 = (_DWORD)v7 == v5;
  if (v273)
    goto LABEL_11;
LABEL_644:
  v274 = *(_QWORD *)(v1[2] + 8);
  v275 = v7 & 0xFFFFFFFFCFFFFFFFLL;
  v276 = *(_QWORD *)(*(_QWORD *)(v274 + 8) + 2448);
  v277 = (unsigned int *)(v276 + 520 * (v7 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v278 = *v277;
  if ((_DWORD)v278)
  {
    v279 = 0;
    v280 = 0;
    v281 = **(_QWORD **)(v274 + 16);
    v282 = v276 + 520 * v275;
    v283 = v282 + 364;
    v284 = v282 + 340;
    while (1)
    {
      v285 = (uint64_t *)(v283 + 12 * v279);
      v286 = *(uint64_t **)(v281 + 2512);
      if (v286)
        break;
LABEL_663:
      *(_WORD *)(v284 + 2 * v280) = *(_WORD *)(v284 + 2 * v279);
      if (v279 != v280)
      {
        v293 = *v285;
        v294 = v283 + 12 * v280;
        *(_DWORD *)(v294 + 8) = *((_DWORD *)v285 + 2);
        *(_QWORD *)v294 = v293;
      }
      ++v280;
LABEL_647:
      if (++v279 == v278)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_667;
      }
    }
    v287 = *(_DWORD *)v285;
    v288 = *((_DWORD *)v285 + 1);
    v289 = *((_DWORD *)v285 + 2);
    while (1)
    {
      v290 = *((_DWORD *)v286 + 7);
      if (v287 == v290)
      {
        v291 = *((_DWORD *)v286 + 8);
        if (v288 == v291)
        {
          v292 = *((_DWORD *)v286 + 9);
          if (v289 < v292)
            goto LABEL_651;
          if (v292 >= v289)
            goto LABEL_647;
        }
        else
        {
          if (v288 < v291)
            goto LABEL_651;
          if (v291 >= v288)
            goto LABEL_647;
        }
      }
      else
      {
        if (v287 < v290)
          goto LABEL_651;
        if (v290 >= v287)
          goto LABEL_647;
      }
      ++v286;
LABEL_651:
      v286 = (uint64_t *)*v286;
      if (!v286)
        goto LABEL_663;
    }
  }
  v280 = 0;
LABEL_667:
  *v277 = v280;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v9 = v3[268];
  if (v9 >> 30)
    v295 = 1;
  else
    v295 = (_DWORD)v9 == v5;
  if (v295)
    goto LABEL_16;
LABEL_671:
  v296 = *(_QWORD *)(v1[2] + 8);
  v297 = v9 & 0xFFFFFFFFCFFFFFFFLL;
  v298 = *(_QWORD *)(*(_QWORD *)(v296 + 8) + 2448);
  v299 = (unsigned int *)(v298 + 520 * (v9 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v300 = *v299;
  if ((_DWORD)v300)
  {
    v301 = 0;
    v302 = 0;
    v303 = **(_QWORD **)(v296 + 16);
    v304 = v298 + 520 * v297;
    v305 = v304 + 364;
    v306 = v304 + 340;
    while (1)
    {
      v307 = (uint64_t *)(v305 + 12 * v301);
      v308 = *(uint64_t **)(v303 + 2512);
      if (v308)
        break;
LABEL_690:
      *(_WORD *)(v306 + 2 * v302) = *(_WORD *)(v306 + 2 * v301);
      if (v301 != v302)
      {
        v315 = *v307;
        v316 = v305 + 12 * v302;
        *(_DWORD *)(v316 + 8) = *((_DWORD *)v307 + 2);
        *(_QWORD *)v316 = v315;
      }
      ++v302;
LABEL_674:
      if (++v301 == v300)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_694;
      }
    }
    v309 = *(_DWORD *)v307;
    v310 = *((_DWORD *)v307 + 1);
    v311 = *((_DWORD *)v307 + 2);
    while (1)
    {
      v312 = *((_DWORD *)v308 + 7);
      if (v309 == v312)
      {
        v313 = *((_DWORD *)v308 + 8);
        if (v310 == v313)
        {
          v314 = *((_DWORD *)v308 + 9);
          if (v311 < v314)
            goto LABEL_678;
          if (v314 >= v311)
            goto LABEL_674;
        }
        else
        {
          if (v310 < v313)
            goto LABEL_678;
          if (v313 >= v310)
            goto LABEL_674;
        }
      }
      else
      {
        if (v309 < v312)
          goto LABEL_678;
        if (v312 >= v309)
          goto LABEL_674;
      }
      ++v308;
LABEL_678:
      v308 = (uint64_t *)*v308;
      if (!v308)
        goto LABEL_690;
    }
  }
  v302 = 0;
LABEL_694:
  *v299 = v302;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v11 = v3[269];
  if (v11 >> 30)
    v317 = 1;
  else
    v317 = (_DWORD)v11 == v5;
  if (v317)
    goto LABEL_21;
LABEL_698:
  v318 = *(_QWORD *)(v1[2] + 8);
  v319 = v11 & 0xFFFFFFFFCFFFFFFFLL;
  v320 = *(_QWORD *)(*(_QWORD *)(v318 + 8) + 2448);
  v321 = (unsigned int *)(v320 + 520 * (v11 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v322 = *v321;
  if ((_DWORD)v322)
  {
    v323 = 0;
    v324 = 0;
    v325 = **(_QWORD **)(v318 + 16);
    v326 = v320 + 520 * v319;
    v327 = v326 + 364;
    v328 = v326 + 340;
    while (1)
    {
      v329 = (uint64_t *)(v327 + 12 * v323);
      v330 = *(uint64_t **)(v325 + 2512);
      if (v330)
        break;
LABEL_717:
      *(_WORD *)(v328 + 2 * v324) = *(_WORD *)(v328 + 2 * v323);
      if (v323 != v324)
      {
        v337 = *v329;
        v338 = v327 + 12 * v324;
        *(_DWORD *)(v338 + 8) = *((_DWORD *)v329 + 2);
        *(_QWORD *)v338 = v337;
      }
      ++v324;
LABEL_701:
      if (++v323 == v322)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_721;
      }
    }
    v331 = *(_DWORD *)v329;
    v332 = *((_DWORD *)v329 + 1);
    v333 = *((_DWORD *)v329 + 2);
    while (1)
    {
      v334 = *((_DWORD *)v330 + 7);
      if (v331 == v334)
      {
        v335 = *((_DWORD *)v330 + 8);
        if (v332 == v335)
        {
          v336 = *((_DWORD *)v330 + 9);
          if (v333 < v336)
            goto LABEL_705;
          if (v336 >= v333)
            goto LABEL_701;
        }
        else
        {
          if (v332 < v335)
            goto LABEL_705;
          if (v335 >= v332)
            goto LABEL_701;
        }
      }
      else
      {
        if (v331 < v334)
          goto LABEL_705;
        if (v334 >= v331)
          goto LABEL_701;
      }
      ++v330;
LABEL_705:
      v330 = (uint64_t *)*v330;
      if (!v330)
        goto LABEL_717;
    }
  }
  v324 = 0;
LABEL_721:
  *v321 = v324;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v13 = v3[270];
  if (v13 >> 30)
    v339 = 1;
  else
    v339 = (_DWORD)v13 == v5;
  if (v339)
    goto LABEL_26;
LABEL_725:
  v340 = *(_QWORD *)(v1[2] + 8);
  v341 = v13 & 0xFFFFFFFFCFFFFFFFLL;
  v342 = *(_QWORD *)(*(_QWORD *)(v340 + 8) + 2448);
  v343 = (unsigned int *)(v342 + 520 * (v13 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v344 = *v343;
  if ((_DWORD)v344)
  {
    v345 = 0;
    v346 = 0;
    v347 = **(_QWORD **)(v340 + 16);
    v348 = v342 + 520 * v341;
    v349 = v348 + 364;
    v350 = v348 + 340;
    while (1)
    {
      v351 = (uint64_t *)(v349 + 12 * v345);
      v352 = *(uint64_t **)(v347 + 2512);
      if (v352)
        break;
LABEL_744:
      *(_WORD *)(v350 + 2 * v346) = *(_WORD *)(v350 + 2 * v345);
      if (v345 != v346)
      {
        v359 = *v351;
        v360 = v349 + 12 * v346;
        *(_DWORD *)(v360 + 8) = *((_DWORD *)v351 + 2);
        *(_QWORD *)v360 = v359;
      }
      ++v346;
LABEL_728:
      if (++v345 == v344)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_748;
      }
    }
    v353 = *(_DWORD *)v351;
    v354 = *((_DWORD *)v351 + 1);
    v355 = *((_DWORD *)v351 + 2);
    while (1)
    {
      v356 = *((_DWORD *)v352 + 7);
      if (v353 == v356)
      {
        v357 = *((_DWORD *)v352 + 8);
        if (v354 == v357)
        {
          v358 = *((_DWORD *)v352 + 9);
          if (v355 < v358)
            goto LABEL_732;
          if (v358 >= v355)
            goto LABEL_728;
        }
        else
        {
          if (v354 < v357)
            goto LABEL_732;
          if (v357 >= v354)
            goto LABEL_728;
        }
      }
      else
      {
        if (v353 < v356)
          goto LABEL_732;
        if (v356 >= v353)
          goto LABEL_728;
      }
      ++v352;
LABEL_732:
      v352 = (uint64_t *)*v352;
      if (!v352)
        goto LABEL_744;
    }
  }
  v346 = 0;
LABEL_748:
  *v343 = v346;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v15 = v3[271];
  if (v15 >> 30)
    v361 = 1;
  else
    v361 = (_DWORD)v15 == v5;
  if (v361)
    goto LABEL_31;
LABEL_752:
  v362 = *(_QWORD *)(v1[2] + 8);
  v363 = v15 & 0xFFFFFFFFCFFFFFFFLL;
  v364 = *(_QWORD *)(*(_QWORD *)(v362 + 8) + 2448);
  v365 = (unsigned int *)(v364 + 520 * (v15 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v366 = *v365;
  if ((_DWORD)v366)
  {
    v367 = 0;
    v368 = 0;
    v369 = **(_QWORD **)(v362 + 16);
    v370 = v364 + 520 * v363;
    v371 = v370 + 364;
    v372 = v370 + 340;
    while (1)
    {
      v373 = (uint64_t *)(v371 + 12 * v367);
      v374 = *(uint64_t **)(v369 + 2512);
      if (v374)
        break;
LABEL_771:
      *(_WORD *)(v372 + 2 * v368) = *(_WORD *)(v372 + 2 * v367);
      if (v367 != v368)
      {
        v381 = *v373;
        v382 = v371 + 12 * v368;
        *(_DWORD *)(v382 + 8) = *((_DWORD *)v373 + 2);
        *(_QWORD *)v382 = v381;
      }
      ++v368;
LABEL_755:
      if (++v367 == v366)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_775;
      }
    }
    v375 = *(_DWORD *)v373;
    v376 = *((_DWORD *)v373 + 1);
    v377 = *((_DWORD *)v373 + 2);
    while (1)
    {
      v378 = *((_DWORD *)v374 + 7);
      if (v375 == v378)
      {
        v379 = *((_DWORD *)v374 + 8);
        if (v376 == v379)
        {
          v380 = *((_DWORD *)v374 + 9);
          if (v377 < v380)
            goto LABEL_759;
          if (v380 >= v377)
            goto LABEL_755;
        }
        else
        {
          if (v376 < v379)
            goto LABEL_759;
          if (v379 >= v376)
            goto LABEL_755;
        }
      }
      else
      {
        if (v375 < v378)
          goto LABEL_759;
        if (v378 >= v375)
          goto LABEL_755;
      }
      ++v374;
LABEL_759:
      v374 = (uint64_t *)*v374;
      if (!v374)
        goto LABEL_771;
    }
  }
  v368 = 0;
LABEL_775:
  *v365 = v368;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v17 = v3[272];
  if (v17 >> 30)
    v383 = 1;
  else
    v383 = (_DWORD)v17 == v5;
  if (v383)
    goto LABEL_36;
LABEL_779:
  v384 = *(_QWORD *)(v1[2] + 8);
  v385 = v17 & 0xFFFFFFFFCFFFFFFFLL;
  v386 = *(_QWORD *)(*(_QWORD *)(v384 + 8) + 2448);
  v387 = (unsigned int *)(v386 + 520 * (v17 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v388 = *v387;
  if ((_DWORD)v388)
  {
    v389 = 0;
    v390 = 0;
    v391 = **(_QWORD **)(v384 + 16);
    v392 = v386 + 520 * v385;
    v393 = v392 + 364;
    v394 = v392 + 340;
    while (1)
    {
      v395 = (uint64_t *)(v393 + 12 * v389);
      v396 = *(uint64_t **)(v391 + 2512);
      if (v396)
        break;
LABEL_798:
      *(_WORD *)(v394 + 2 * v390) = *(_WORD *)(v394 + 2 * v389);
      if (v389 != v390)
      {
        v403 = *v395;
        v404 = v393 + 12 * v390;
        *(_DWORD *)(v404 + 8) = *((_DWORD *)v395 + 2);
        *(_QWORD *)v404 = v403;
      }
      ++v390;
LABEL_782:
      if (++v389 == v388)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_802;
      }
    }
    v397 = *(_DWORD *)v395;
    v398 = *((_DWORD *)v395 + 1);
    v399 = *((_DWORD *)v395 + 2);
    while (1)
    {
      v400 = *((_DWORD *)v396 + 7);
      if (v397 == v400)
      {
        v401 = *((_DWORD *)v396 + 8);
        if (v398 == v401)
        {
          v402 = *((_DWORD *)v396 + 9);
          if (v399 < v402)
            goto LABEL_786;
          if (v402 >= v399)
            goto LABEL_782;
        }
        else
        {
          if (v398 < v401)
            goto LABEL_786;
          if (v401 >= v398)
            goto LABEL_782;
        }
      }
      else
      {
        if (v397 < v400)
          goto LABEL_786;
        if (v400 >= v397)
          goto LABEL_782;
      }
      ++v396;
LABEL_786:
      v396 = (uint64_t *)*v396;
      if (!v396)
        goto LABEL_798;
    }
  }
  v390 = 0;
LABEL_802:
  *v387 = v390;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v19 = v3[273];
  if (v19 >> 30)
    v405 = 1;
  else
    v405 = (_DWORD)v19 == v5;
  if (v405)
    goto LABEL_41;
LABEL_806:
  v406 = *(_QWORD *)(v1[2] + 8);
  v407 = v19 & 0xFFFFFFFFCFFFFFFFLL;
  v408 = *(_QWORD *)(*(_QWORD *)(v406 + 8) + 2448);
  v409 = (unsigned int *)(v408 + 520 * (v19 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v410 = *v409;
  if ((_DWORD)v410)
  {
    v411 = 0;
    v412 = 0;
    v413 = **(_QWORD **)(v406 + 16);
    v414 = v408 + 520 * v407;
    v415 = v414 + 364;
    v416 = v414 + 340;
    while (1)
    {
      v417 = (uint64_t *)(v415 + 12 * v411);
      v418 = *(uint64_t **)(v413 + 2512);
      if (v418)
        break;
LABEL_825:
      *(_WORD *)(v416 + 2 * v412) = *(_WORD *)(v416 + 2 * v411);
      if (v411 != v412)
      {
        v425 = *v417;
        v426 = v415 + 12 * v412;
        *(_DWORD *)(v426 + 8) = *((_DWORD *)v417 + 2);
        *(_QWORD *)v426 = v425;
      }
      ++v412;
LABEL_809:
      if (++v411 == v410)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_829;
      }
    }
    v419 = *(_DWORD *)v417;
    v420 = *((_DWORD *)v417 + 1);
    v421 = *((_DWORD *)v417 + 2);
    while (1)
    {
      v422 = *((_DWORD *)v418 + 7);
      if (v419 == v422)
      {
        v423 = *((_DWORD *)v418 + 8);
        if (v420 == v423)
        {
          v424 = *((_DWORD *)v418 + 9);
          if (v421 < v424)
            goto LABEL_813;
          if (v424 >= v421)
            goto LABEL_809;
        }
        else
        {
          if (v420 < v423)
            goto LABEL_813;
          if (v423 >= v420)
            goto LABEL_809;
        }
      }
      else
      {
        if (v419 < v422)
          goto LABEL_813;
        if (v422 >= v419)
          goto LABEL_809;
      }
      ++v418;
LABEL_813:
      v418 = (uint64_t *)*v418;
      if (!v418)
        goto LABEL_825;
    }
  }
  v412 = 0;
LABEL_829:
  *v409 = v412;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v21 = v3[274];
  if (v21 >> 30)
    v427 = 1;
  else
    v427 = (_DWORD)v21 == v5;
  if (v427)
    goto LABEL_46;
LABEL_833:
  v428 = *(_QWORD *)(v1[2] + 8);
  v429 = v21 & 0xFFFFFFFFCFFFFFFFLL;
  v430 = *(_QWORD *)(*(_QWORD *)(v428 + 8) + 2448);
  v431 = (unsigned int *)(v430 + 520 * (v21 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v432 = *v431;
  if ((_DWORD)v432)
  {
    v433 = 0;
    v434 = 0;
    v435 = **(_QWORD **)(v428 + 16);
    v436 = v430 + 520 * v429;
    v437 = v436 + 364;
    v438 = v436 + 340;
    while (1)
    {
      v439 = (uint64_t *)(v437 + 12 * v433);
      v440 = *(uint64_t **)(v435 + 2512);
      if (v440)
        break;
LABEL_852:
      *(_WORD *)(v438 + 2 * v434) = *(_WORD *)(v438 + 2 * v433);
      if (v433 != v434)
      {
        v447 = *v439;
        v448 = v437 + 12 * v434;
        *(_DWORD *)(v448 + 8) = *((_DWORD *)v439 + 2);
        *(_QWORD *)v448 = v447;
      }
      ++v434;
LABEL_836:
      if (++v433 == v432)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_856;
      }
    }
    v441 = *(_DWORD *)v439;
    v442 = *((_DWORD *)v439 + 1);
    v443 = *((_DWORD *)v439 + 2);
    while (1)
    {
      v444 = *((_DWORD *)v440 + 7);
      if (v441 == v444)
      {
        v445 = *((_DWORD *)v440 + 8);
        if (v442 == v445)
        {
          v446 = *((_DWORD *)v440 + 9);
          if (v443 < v446)
            goto LABEL_840;
          if (v446 >= v443)
            goto LABEL_836;
        }
        else
        {
          if (v442 < v445)
            goto LABEL_840;
          if (v445 >= v442)
            goto LABEL_836;
        }
      }
      else
      {
        if (v441 < v444)
          goto LABEL_840;
        if (v444 >= v441)
          goto LABEL_836;
      }
      ++v440;
LABEL_840:
      v440 = (uint64_t *)*v440;
      if (!v440)
        goto LABEL_852;
    }
  }
  v434 = 0;
LABEL_856:
  *v431 = v434;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v23 = v3[275];
  if (v23 >> 30)
    v449 = 1;
  else
    v449 = (_DWORD)v23 == v5;
  if (v449)
    goto LABEL_51;
LABEL_860:
  v450 = *(_QWORD *)(v1[2] + 8);
  v451 = v23 & 0xFFFFFFFFCFFFFFFFLL;
  v452 = *(_QWORD *)(*(_QWORD *)(v450 + 8) + 2448);
  v453 = (unsigned int *)(v452 + 520 * (v23 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v454 = *v453;
  if ((_DWORD)v454)
  {
    v455 = 0;
    v456 = 0;
    v457 = **(_QWORD **)(v450 + 16);
    v458 = v452 + 520 * v451;
    v459 = v458 + 364;
    v460 = v458 + 340;
    while (1)
    {
      v461 = (uint64_t *)(v459 + 12 * v455);
      v462 = *(uint64_t **)(v457 + 2512);
      if (v462)
        break;
LABEL_879:
      *(_WORD *)(v460 + 2 * v456) = *(_WORD *)(v460 + 2 * v455);
      if (v455 != v456)
      {
        v469 = *v461;
        v470 = v459 + 12 * v456;
        *(_DWORD *)(v470 + 8) = *((_DWORD *)v461 + 2);
        *(_QWORD *)v470 = v469;
      }
      ++v456;
LABEL_863:
      if (++v455 == v454)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_883;
      }
    }
    v463 = *(_DWORD *)v461;
    v464 = *((_DWORD *)v461 + 1);
    v465 = *((_DWORD *)v461 + 2);
    while (1)
    {
      v466 = *((_DWORD *)v462 + 7);
      if (v463 == v466)
      {
        v467 = *((_DWORD *)v462 + 8);
        if (v464 == v467)
        {
          v468 = *((_DWORD *)v462 + 9);
          if (v465 < v468)
            goto LABEL_867;
          if (v468 >= v465)
            goto LABEL_863;
        }
        else
        {
          if (v464 < v467)
            goto LABEL_867;
          if (v467 >= v464)
            goto LABEL_863;
        }
      }
      else
      {
        if (v463 < v466)
          goto LABEL_867;
        if (v466 >= v463)
          goto LABEL_863;
      }
      ++v462;
LABEL_867:
      v462 = (uint64_t *)*v462;
      if (!v462)
        goto LABEL_879;
    }
  }
  v456 = 0;
LABEL_883:
  *v453 = v456;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v25 = v3[276];
  if (v25 >> 30)
    v471 = 1;
  else
    v471 = (_DWORD)v25 == v5;
  if (v471)
    goto LABEL_56;
LABEL_887:
  v472 = *(_QWORD *)(v1[2] + 8);
  v473 = v25 & 0xFFFFFFFFCFFFFFFFLL;
  v474 = *(_QWORD *)(*(_QWORD *)(v472 + 8) + 2448);
  v475 = (unsigned int *)(v474 + 520 * (v25 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v476 = *v475;
  if ((_DWORD)v476)
  {
    v477 = 0;
    v478 = 0;
    v479 = **(_QWORD **)(v472 + 16);
    v480 = v474 + 520 * v473;
    v481 = v480 + 364;
    v482 = v480 + 340;
    while (1)
    {
      v483 = (uint64_t *)(v481 + 12 * v477);
      v484 = *(uint64_t **)(v479 + 2512);
      if (v484)
        break;
LABEL_906:
      *(_WORD *)(v482 + 2 * v478) = *(_WORD *)(v482 + 2 * v477);
      if (v477 != v478)
      {
        v491 = *v483;
        v492 = v481 + 12 * v478;
        *(_DWORD *)(v492 + 8) = *((_DWORD *)v483 + 2);
        *(_QWORD *)v492 = v491;
      }
      ++v478;
LABEL_890:
      if (++v477 == v476)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_910;
      }
    }
    v485 = *(_DWORD *)v483;
    v486 = *((_DWORD *)v483 + 1);
    v487 = *((_DWORD *)v483 + 2);
    while (1)
    {
      v488 = *((_DWORD *)v484 + 7);
      if (v485 == v488)
      {
        v489 = *((_DWORD *)v484 + 8);
        if (v486 == v489)
        {
          v490 = *((_DWORD *)v484 + 9);
          if (v487 < v490)
            goto LABEL_894;
          if (v490 >= v487)
            goto LABEL_890;
        }
        else
        {
          if (v486 < v489)
            goto LABEL_894;
          if (v489 >= v486)
            goto LABEL_890;
        }
      }
      else
      {
        if (v485 < v488)
          goto LABEL_894;
        if (v488 >= v485)
          goto LABEL_890;
      }
      ++v484;
LABEL_894:
      v484 = (uint64_t *)*v484;
      if (!v484)
        goto LABEL_906;
    }
  }
  v478 = 0;
LABEL_910:
  *v475 = v478;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v27 = v3[277];
  if (v27 >> 30)
    v493 = 1;
  else
    v493 = (_DWORD)v27 == v5;
  if (v493)
    goto LABEL_61;
LABEL_914:
  v494 = *(_QWORD *)(v1[2] + 8);
  v495 = v27 & 0xFFFFFFFFCFFFFFFFLL;
  v496 = *(_QWORD *)(*(_QWORD *)(v494 + 8) + 2448);
  v497 = (unsigned int *)(v496 + 520 * (v27 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v498 = *v497;
  if ((_DWORD)v498)
  {
    v499 = 0;
    v500 = 0;
    v501 = **(_QWORD **)(v494 + 16);
    v502 = v496 + 520 * v495;
    v503 = v502 + 364;
    v504 = v502 + 340;
    while (1)
    {
      v505 = (uint64_t *)(v503 + 12 * v499);
      v506 = *(uint64_t **)(v501 + 2512);
      if (v506)
        break;
LABEL_933:
      *(_WORD *)(v504 + 2 * v500) = *(_WORD *)(v504 + 2 * v499);
      if (v499 != v500)
      {
        v513 = *v505;
        v514 = v503 + 12 * v500;
        *(_DWORD *)(v514 + 8) = *((_DWORD *)v505 + 2);
        *(_QWORD *)v514 = v513;
      }
      ++v500;
LABEL_917:
      if (++v499 == v498)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_937;
      }
    }
    v507 = *(_DWORD *)v505;
    v508 = *((_DWORD *)v505 + 1);
    v509 = *((_DWORD *)v505 + 2);
    while (1)
    {
      v510 = *((_DWORD *)v506 + 7);
      if (v507 == v510)
      {
        v511 = *((_DWORD *)v506 + 8);
        if (v508 == v511)
        {
          v512 = *((_DWORD *)v506 + 9);
          if (v509 < v512)
            goto LABEL_921;
          if (v512 >= v509)
            goto LABEL_917;
        }
        else
        {
          if (v508 < v511)
            goto LABEL_921;
          if (v511 >= v508)
            goto LABEL_917;
        }
      }
      else
      {
        if (v507 < v510)
          goto LABEL_921;
        if (v510 >= v507)
          goto LABEL_917;
      }
      ++v506;
LABEL_921:
      v506 = (uint64_t *)*v506;
      if (!v506)
        goto LABEL_933;
    }
  }
  v500 = 0;
LABEL_937:
  *v497 = v500;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v29 = v3[278];
  if (v29 >> 30)
    v515 = 1;
  else
    v515 = (_DWORD)v29 == v5;
  if (v515)
    goto LABEL_66;
LABEL_941:
  v516 = *(_QWORD *)(v1[2] + 8);
  v517 = v29 & 0xFFFFFFFFCFFFFFFFLL;
  v518 = *(_QWORD *)(*(_QWORD *)(v516 + 8) + 2448);
  v519 = (unsigned int *)(v518 + 520 * (v29 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v520 = *v519;
  if ((_DWORD)v520)
  {
    v521 = 0;
    v522 = 0;
    v523 = **(_QWORD **)(v516 + 16);
    v524 = v518 + 520 * v517;
    v525 = v524 + 364;
    v526 = v524 + 340;
    while (1)
    {
      v527 = (uint64_t *)(v525 + 12 * v521);
      v528 = *(uint64_t **)(v523 + 2512);
      if (v528)
        break;
LABEL_960:
      *(_WORD *)(v526 + 2 * v522) = *(_WORD *)(v526 + 2 * v521);
      if (v521 != v522)
      {
        v535 = *v527;
        v536 = v525 + 12 * v522;
        *(_DWORD *)(v536 + 8) = *((_DWORD *)v527 + 2);
        *(_QWORD *)v536 = v535;
      }
      ++v522;
LABEL_944:
      if (++v521 == v520)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_964;
      }
    }
    v529 = *(_DWORD *)v527;
    v530 = *((_DWORD *)v527 + 1);
    v531 = *((_DWORD *)v527 + 2);
    while (1)
    {
      v532 = *((_DWORD *)v528 + 7);
      if (v529 == v532)
      {
        v533 = *((_DWORD *)v528 + 8);
        if (v530 == v533)
        {
          v534 = *((_DWORD *)v528 + 9);
          if (v531 < v534)
            goto LABEL_948;
          if (v534 >= v531)
            goto LABEL_944;
        }
        else
        {
          if (v530 < v533)
            goto LABEL_948;
          if (v533 >= v530)
            goto LABEL_944;
        }
      }
      else
      {
        if (v529 < v532)
          goto LABEL_948;
        if (v532 >= v529)
          goto LABEL_944;
      }
      ++v528;
LABEL_948:
      v528 = (uint64_t *)*v528;
      if (!v528)
        goto LABEL_960;
    }
  }
  v522 = 0;
LABEL_964:
  *v519 = v522;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v31 = v3[279];
  if (v31 >> 30)
    v537 = 1;
  else
    v537 = (_DWORD)v31 == v5;
  if (v537)
    goto LABEL_71;
LABEL_968:
  v538 = *(_QWORD *)(v1[2] + 8);
  v539 = v31 & 0xFFFFFFFFCFFFFFFFLL;
  v540 = *(_QWORD *)(*(_QWORD *)(v538 + 8) + 2448);
  v541 = (unsigned int *)(v540 + 520 * (v31 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v542 = *v541;
  if ((_DWORD)v542)
  {
    v543 = 0;
    v544 = 0;
    v545 = **(_QWORD **)(v538 + 16);
    v546 = v540 + 520 * v539;
    v547 = v546 + 364;
    v548 = v546 + 340;
    while (1)
    {
      v549 = (uint64_t *)(v547 + 12 * v543);
      v550 = *(uint64_t **)(v545 + 2512);
      if (v550)
        break;
LABEL_987:
      *(_WORD *)(v548 + 2 * v544) = *(_WORD *)(v548 + 2 * v543);
      if (v543 != v544)
      {
        v557 = *v549;
        v558 = v547 + 12 * v544;
        *(_DWORD *)(v558 + 8) = *((_DWORD *)v549 + 2);
        *(_QWORD *)v558 = v557;
      }
      ++v544;
LABEL_971:
      if (++v543 == v542)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_991;
      }
    }
    v551 = *(_DWORD *)v549;
    v552 = *((_DWORD *)v549 + 1);
    v553 = *((_DWORD *)v549 + 2);
    while (1)
    {
      v554 = *((_DWORD *)v550 + 7);
      if (v551 == v554)
      {
        v555 = *((_DWORD *)v550 + 8);
        if (v552 == v555)
        {
          v556 = *((_DWORD *)v550 + 9);
          if (v553 < v556)
            goto LABEL_975;
          if (v556 >= v553)
            goto LABEL_971;
        }
        else
        {
          if (v552 < v555)
            goto LABEL_975;
          if (v555 >= v552)
            goto LABEL_971;
        }
      }
      else
      {
        if (v551 < v554)
          goto LABEL_975;
        if (v554 >= v551)
          goto LABEL_971;
      }
      ++v550;
LABEL_975:
      v550 = (uint64_t *)*v550;
      if (!v550)
        goto LABEL_987;
    }
  }
  v544 = 0;
LABEL_991:
  *v541 = v544;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v33 = v3[280];
  if (v33 >> 30)
    v559 = 1;
  else
    v559 = (_DWORD)v33 == v5;
  if (v559)
    goto LABEL_76;
LABEL_995:
  v560 = *(_QWORD *)(v1[2] + 8);
  v561 = v33 & 0xFFFFFFFFCFFFFFFFLL;
  v562 = *(_QWORD *)(*(_QWORD *)(v560 + 8) + 2448);
  v563 = (unsigned int *)(v562 + 520 * (v33 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v564 = *v563;
  if ((_DWORD)v564)
  {
    v565 = 0;
    v566 = 0;
    v567 = **(_QWORD **)(v560 + 16);
    v568 = v562 + 520 * v561;
    v569 = v568 + 364;
    v570 = v568 + 340;
    while (1)
    {
      v571 = (uint64_t *)(v569 + 12 * v565);
      v572 = *(uint64_t **)(v567 + 2512);
      if (v572)
        break;
LABEL_1014:
      *(_WORD *)(v570 + 2 * v566) = *(_WORD *)(v570 + 2 * v565);
      if (v565 != v566)
      {
        v579 = *v571;
        v580 = v569 + 12 * v566;
        *(_DWORD *)(v580 + 8) = *((_DWORD *)v571 + 2);
        *(_QWORD *)v580 = v579;
      }
      ++v566;
LABEL_998:
      if (++v565 == v564)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1018;
      }
    }
    v573 = *(_DWORD *)v571;
    v574 = *((_DWORD *)v571 + 1);
    v575 = *((_DWORD *)v571 + 2);
    while (1)
    {
      v576 = *((_DWORD *)v572 + 7);
      if (v573 == v576)
      {
        v577 = *((_DWORD *)v572 + 8);
        if (v574 == v577)
        {
          v578 = *((_DWORD *)v572 + 9);
          if (v575 < v578)
            goto LABEL_1002;
          if (v578 >= v575)
            goto LABEL_998;
        }
        else
        {
          if (v574 < v577)
            goto LABEL_1002;
          if (v577 >= v574)
            goto LABEL_998;
        }
      }
      else
      {
        if (v573 < v576)
          goto LABEL_1002;
        if (v576 >= v573)
          goto LABEL_998;
      }
      ++v572;
LABEL_1002:
      v572 = (uint64_t *)*v572;
      if (!v572)
        goto LABEL_1014;
    }
  }
  v566 = 0;
LABEL_1018:
  *v563 = v566;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v35 = v3[281];
  if (v35 >> 30)
    v581 = 1;
  else
    v581 = (_DWORD)v35 == v5;
  if (v581)
    goto LABEL_81;
LABEL_1022:
  v582 = *(_QWORD *)(v1[2] + 8);
  v583 = v35 & 0xFFFFFFFFCFFFFFFFLL;
  v584 = *(_QWORD *)(*(_QWORD *)(v582 + 8) + 2448);
  v585 = (unsigned int *)(v584 + 520 * (v35 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v586 = *v585;
  if ((_DWORD)v586)
  {
    v587 = 0;
    v588 = 0;
    v589 = **(_QWORD **)(v582 + 16);
    v590 = v584 + 520 * v583;
    v591 = v590 + 364;
    v592 = v590 + 340;
    while (1)
    {
      v593 = (uint64_t *)(v591 + 12 * v587);
      v594 = *(uint64_t **)(v589 + 2512);
      if (v594)
        break;
LABEL_1041:
      *(_WORD *)(v592 + 2 * v588) = *(_WORD *)(v592 + 2 * v587);
      if (v587 != v588)
      {
        v601 = *v593;
        v602 = v591 + 12 * v588;
        *(_DWORD *)(v602 + 8) = *((_DWORD *)v593 + 2);
        *(_QWORD *)v602 = v601;
      }
      ++v588;
LABEL_1025:
      if (++v587 == v586)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1045;
      }
    }
    v595 = *(_DWORD *)v593;
    v596 = *((_DWORD *)v593 + 1);
    v597 = *((_DWORD *)v593 + 2);
    while (1)
    {
      v598 = *((_DWORD *)v594 + 7);
      if (v595 == v598)
      {
        v599 = *((_DWORD *)v594 + 8);
        if (v596 == v599)
        {
          v600 = *((_DWORD *)v594 + 9);
          if (v597 < v600)
            goto LABEL_1029;
          if (v600 >= v597)
            goto LABEL_1025;
        }
        else
        {
          if (v596 < v599)
            goto LABEL_1029;
          if (v599 >= v596)
            goto LABEL_1025;
        }
      }
      else
      {
        if (v595 < v598)
          goto LABEL_1029;
        if (v598 >= v595)
          goto LABEL_1025;
      }
      ++v594;
LABEL_1029:
      v594 = (uint64_t *)*v594;
      if (!v594)
        goto LABEL_1041;
    }
  }
  v588 = 0;
LABEL_1045:
  *v585 = v588;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v37 = v3[282];
  if (v37 >> 30)
    v603 = 1;
  else
    v603 = (_DWORD)v37 == v5;
  if (v603)
    goto LABEL_86;
LABEL_1049:
  v604 = *(_QWORD *)(v1[2] + 8);
  v605 = v37 & 0xFFFFFFFFCFFFFFFFLL;
  v606 = *(_QWORD *)(*(_QWORD *)(v604 + 8) + 2448);
  v607 = (unsigned int *)(v606 + 520 * (v37 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v608 = *v607;
  if ((_DWORD)v608)
  {
    v609 = 0;
    v610 = 0;
    v611 = **(_QWORD **)(v604 + 16);
    v612 = v606 + 520 * v605;
    v613 = v612 + 364;
    v614 = v612 + 340;
    while (1)
    {
      v615 = (uint64_t *)(v613 + 12 * v609);
      v616 = *(uint64_t **)(v611 + 2512);
      if (v616)
        break;
LABEL_1068:
      *(_WORD *)(v614 + 2 * v610) = *(_WORD *)(v614 + 2 * v609);
      if (v609 != v610)
      {
        v623 = *v615;
        v624 = v613 + 12 * v610;
        *(_DWORD *)(v624 + 8) = *((_DWORD *)v615 + 2);
        *(_QWORD *)v624 = v623;
      }
      ++v610;
LABEL_1052:
      if (++v609 == v608)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1072;
      }
    }
    v617 = *(_DWORD *)v615;
    v618 = *((_DWORD *)v615 + 1);
    v619 = *((_DWORD *)v615 + 2);
    while (1)
    {
      v620 = *((_DWORD *)v616 + 7);
      if (v617 == v620)
      {
        v621 = *((_DWORD *)v616 + 8);
        if (v618 == v621)
        {
          v622 = *((_DWORD *)v616 + 9);
          if (v619 < v622)
            goto LABEL_1056;
          if (v622 >= v619)
            goto LABEL_1052;
        }
        else
        {
          if (v618 < v621)
            goto LABEL_1056;
          if (v621 >= v618)
            goto LABEL_1052;
        }
      }
      else
      {
        if (v617 < v620)
          goto LABEL_1056;
        if (v620 >= v617)
          goto LABEL_1052;
      }
      ++v616;
LABEL_1056:
      v616 = (uint64_t *)*v616;
      if (!v616)
        goto LABEL_1068;
    }
  }
  v610 = 0;
LABEL_1072:
  *v607 = v610;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v39 = v3[283];
  if (v39 >> 30)
    v625 = 1;
  else
    v625 = (_DWORD)v39 == v5;
  if (v625)
    goto LABEL_91;
LABEL_1076:
  v626 = *(_QWORD *)(v1[2] + 8);
  v627 = v39 & 0xFFFFFFFFCFFFFFFFLL;
  v628 = *(_QWORD *)(*(_QWORD *)(v626 + 8) + 2448);
  v629 = (unsigned int *)(v628 + 520 * (v39 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v630 = *v629;
  if ((_DWORD)v630)
  {
    v631 = 0;
    v632 = 0;
    v633 = **(_QWORD **)(v626 + 16);
    v634 = v628 + 520 * v627;
    v635 = v634 + 364;
    v636 = v634 + 340;
    while (1)
    {
      v637 = (uint64_t *)(v635 + 12 * v631);
      v638 = *(uint64_t **)(v633 + 2512);
      if (v638)
        break;
LABEL_1095:
      *(_WORD *)(v636 + 2 * v632) = *(_WORD *)(v636 + 2 * v631);
      if (v631 != v632)
      {
        v645 = *v637;
        v646 = v635 + 12 * v632;
        *(_DWORD *)(v646 + 8) = *((_DWORD *)v637 + 2);
        *(_QWORD *)v646 = v645;
      }
      ++v632;
LABEL_1079:
      if (++v631 == v630)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1099;
      }
    }
    v639 = *(_DWORD *)v637;
    v640 = *((_DWORD *)v637 + 1);
    v641 = *((_DWORD *)v637 + 2);
    while (1)
    {
      v642 = *((_DWORD *)v638 + 7);
      if (v639 == v642)
      {
        v643 = *((_DWORD *)v638 + 8);
        if (v640 == v643)
        {
          v644 = *((_DWORD *)v638 + 9);
          if (v641 < v644)
            goto LABEL_1083;
          if (v644 >= v641)
            goto LABEL_1079;
        }
        else
        {
          if (v640 < v643)
            goto LABEL_1083;
          if (v643 >= v640)
            goto LABEL_1079;
        }
      }
      else
      {
        if (v639 < v642)
          goto LABEL_1083;
        if (v642 >= v639)
          goto LABEL_1079;
      }
      ++v638;
LABEL_1083:
      v638 = (uint64_t *)*v638;
      if (!v638)
        goto LABEL_1095;
    }
  }
  v632 = 0;
LABEL_1099:
  *v629 = v632;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v41 = v3[284];
  if (v41 >> 30)
    v647 = 1;
  else
    v647 = (_DWORD)v41 == v5;
  if (v647)
    goto LABEL_96;
LABEL_1103:
  v648 = *(_QWORD *)(v1[2] + 8);
  v649 = v41 & 0xFFFFFFFFCFFFFFFFLL;
  v650 = *(_QWORD *)(*(_QWORD *)(v648 + 8) + 2448);
  v651 = (unsigned int *)(v650 + 520 * (v41 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v652 = *v651;
  if ((_DWORD)v652)
  {
    v653 = 0;
    v654 = 0;
    v655 = **(_QWORD **)(v648 + 16);
    v656 = v650 + 520 * v649;
    v657 = v656 + 364;
    v658 = v656 + 340;
    while (1)
    {
      v659 = (uint64_t *)(v657 + 12 * v653);
      v660 = *(uint64_t **)(v655 + 2512);
      if (v660)
        break;
LABEL_1122:
      *(_WORD *)(v658 + 2 * v654) = *(_WORD *)(v658 + 2 * v653);
      if (v653 != v654)
      {
        v667 = *v659;
        v668 = v657 + 12 * v654;
        *(_DWORD *)(v668 + 8) = *((_DWORD *)v659 + 2);
        *(_QWORD *)v668 = v667;
      }
      ++v654;
LABEL_1106:
      if (++v653 == v652)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1126;
      }
    }
    v661 = *(_DWORD *)v659;
    v662 = *((_DWORD *)v659 + 1);
    v663 = *((_DWORD *)v659 + 2);
    while (1)
    {
      v664 = *((_DWORD *)v660 + 7);
      if (v661 == v664)
      {
        v665 = *((_DWORD *)v660 + 8);
        if (v662 == v665)
        {
          v666 = *((_DWORD *)v660 + 9);
          if (v663 < v666)
            goto LABEL_1110;
          if (v666 >= v663)
            goto LABEL_1106;
        }
        else
        {
          if (v662 < v665)
            goto LABEL_1110;
          if (v665 >= v662)
            goto LABEL_1106;
        }
      }
      else
      {
        if (v661 < v664)
          goto LABEL_1110;
        if (v664 >= v661)
          goto LABEL_1106;
      }
      ++v660;
LABEL_1110:
      v660 = (uint64_t *)*v660;
      if (!v660)
        goto LABEL_1122;
    }
  }
  v654 = 0;
LABEL_1126:
  *v651 = v654;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v43 = v3[285];
  if (v43 >> 30)
    v669 = 1;
  else
    v669 = (_DWORD)v43 == v5;
  if (v669)
    goto LABEL_101;
LABEL_1130:
  v670 = *(_QWORD *)(v1[2] + 8);
  v671 = v43 & 0xFFFFFFFFCFFFFFFFLL;
  v672 = *(_QWORD *)(*(_QWORD *)(v670 + 8) + 2448);
  v673 = (unsigned int *)(v672 + 520 * (v43 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v674 = *v673;
  if ((_DWORD)v674)
  {
    v675 = 0;
    v676 = 0;
    v677 = **(_QWORD **)(v670 + 16);
    v678 = v672 + 520 * v671;
    v679 = v678 + 364;
    v680 = v678 + 340;
    while (1)
    {
      v681 = (uint64_t *)(v679 + 12 * v675);
      v682 = *(uint64_t **)(v677 + 2512);
      if (v682)
        break;
LABEL_1149:
      *(_WORD *)(v680 + 2 * v676) = *(_WORD *)(v680 + 2 * v675);
      if (v675 != v676)
      {
        v689 = *v681;
        v690 = v679 + 12 * v676;
        *(_DWORD *)(v690 + 8) = *((_DWORD *)v681 + 2);
        *(_QWORD *)v690 = v689;
      }
      ++v676;
LABEL_1133:
      if (++v675 == v674)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1153;
      }
    }
    v683 = *(_DWORD *)v681;
    v684 = *((_DWORD *)v681 + 1);
    v685 = *((_DWORD *)v681 + 2);
    while (1)
    {
      v686 = *((_DWORD *)v682 + 7);
      if (v683 == v686)
      {
        v687 = *((_DWORD *)v682 + 8);
        if (v684 == v687)
        {
          v688 = *((_DWORD *)v682 + 9);
          if (v685 < v688)
            goto LABEL_1137;
          if (v688 >= v685)
            goto LABEL_1133;
        }
        else
        {
          if (v684 < v687)
            goto LABEL_1137;
          if (v687 >= v684)
            goto LABEL_1133;
        }
      }
      else
      {
        if (v683 < v686)
          goto LABEL_1137;
        if (v686 >= v683)
          goto LABEL_1133;
      }
      ++v682;
LABEL_1137:
      v682 = (uint64_t *)*v682;
      if (!v682)
        goto LABEL_1149;
    }
  }
  v676 = 0;
LABEL_1153:
  *v673 = v676;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v45 = v3[286];
  if (v45 >> 30)
    v691 = 1;
  else
    v691 = (_DWORD)v45 == v5;
  if (v691)
    goto LABEL_106;
LABEL_1157:
  v692 = *(_QWORD *)(v1[2] + 8);
  v693 = v45 & 0xFFFFFFFFCFFFFFFFLL;
  v694 = *(_QWORD *)(*(_QWORD *)(v692 + 8) + 2448);
  v695 = (unsigned int *)(v694 + 520 * (v45 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v696 = *v695;
  if ((_DWORD)v696)
  {
    v697 = 0;
    v698 = 0;
    v699 = **(_QWORD **)(v692 + 16);
    v700 = v694 + 520 * v693;
    v701 = v700 + 364;
    v702 = v700 + 340;
    while (1)
    {
      v703 = (uint64_t *)(v701 + 12 * v697);
      v704 = *(uint64_t **)(v699 + 2512);
      if (v704)
        break;
LABEL_1176:
      *(_WORD *)(v702 + 2 * v698) = *(_WORD *)(v702 + 2 * v697);
      if (v697 != v698)
      {
        v711 = *v703;
        v712 = v701 + 12 * v698;
        *(_DWORD *)(v712 + 8) = *((_DWORD *)v703 + 2);
        *(_QWORD *)v712 = v711;
      }
      ++v698;
LABEL_1160:
      if (++v697 == v696)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1180;
      }
    }
    v705 = *(_DWORD *)v703;
    v706 = *((_DWORD *)v703 + 1);
    v707 = *((_DWORD *)v703 + 2);
    while (1)
    {
      v708 = *((_DWORD *)v704 + 7);
      if (v705 == v708)
      {
        v709 = *((_DWORD *)v704 + 8);
        if (v706 == v709)
        {
          v710 = *((_DWORD *)v704 + 9);
          if (v707 < v710)
            goto LABEL_1164;
          if (v710 >= v707)
            goto LABEL_1160;
        }
        else
        {
          if (v706 < v709)
            goto LABEL_1164;
          if (v709 >= v706)
            goto LABEL_1160;
        }
      }
      else
      {
        if (v705 < v708)
          goto LABEL_1164;
        if (v708 >= v705)
          goto LABEL_1160;
      }
      ++v704;
LABEL_1164:
      v704 = (uint64_t *)*v704;
      if (!v704)
        goto LABEL_1176;
    }
  }
  v698 = 0;
LABEL_1180:
  *v695 = v698;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v47 = v3[287];
  if (v47 >> 30)
    v713 = 1;
  else
    v713 = (_DWORD)v47 == v5;
  if (v713)
    goto LABEL_111;
LABEL_1184:
  v714 = *(_QWORD *)(v1[2] + 8);
  v715 = v47 & 0xFFFFFFFFCFFFFFFFLL;
  v716 = *(_QWORD *)(*(_QWORD *)(v714 + 8) + 2448);
  v717 = (unsigned int *)(v716 + 520 * (v47 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v718 = *v717;
  if ((_DWORD)v718)
  {
    v719 = 0;
    v720 = 0;
    v721 = **(_QWORD **)(v714 + 16);
    v722 = v716 + 520 * v715;
    v723 = v722 + 364;
    v724 = v722 + 340;
    while (1)
    {
      v725 = (uint64_t *)(v723 + 12 * v719);
      v726 = *(uint64_t **)(v721 + 2512);
      if (v726)
        break;
LABEL_1203:
      *(_WORD *)(v724 + 2 * v720) = *(_WORD *)(v724 + 2 * v719);
      if (v719 != v720)
      {
        v733 = *v725;
        v734 = v723 + 12 * v720;
        *(_DWORD *)(v734 + 8) = *((_DWORD *)v725 + 2);
        *(_QWORD *)v734 = v733;
      }
      ++v720;
LABEL_1187:
      if (++v719 == v718)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1207;
      }
    }
    v727 = *(_DWORD *)v725;
    v728 = *((_DWORD *)v725 + 1);
    v729 = *((_DWORD *)v725 + 2);
    while (1)
    {
      v730 = *((_DWORD *)v726 + 7);
      if (v727 == v730)
      {
        v731 = *((_DWORD *)v726 + 8);
        if (v728 == v731)
        {
          v732 = *((_DWORD *)v726 + 9);
          if (v729 < v732)
            goto LABEL_1191;
          if (v732 >= v729)
            goto LABEL_1187;
        }
        else
        {
          if (v728 < v731)
            goto LABEL_1191;
          if (v731 >= v728)
            goto LABEL_1187;
        }
      }
      else
      {
        if (v727 < v730)
          goto LABEL_1191;
        if (v730 >= v727)
          goto LABEL_1187;
      }
      ++v726;
LABEL_1191:
      v726 = (uint64_t *)*v726;
      if (!v726)
        goto LABEL_1203;
    }
  }
  v720 = 0;
LABEL_1207:
  *v717 = v720;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v49 = v3[288];
  if (v49 >> 30)
    v735 = 1;
  else
    v735 = (_DWORD)v49 == v5;
  if (v735)
    goto LABEL_116;
LABEL_1211:
  v736 = *(_QWORD *)(v1[2] + 8);
  v737 = v49 & 0xFFFFFFFFCFFFFFFFLL;
  v738 = *(_QWORD *)(*(_QWORD *)(v736 + 8) + 2448);
  v739 = (unsigned int *)(v738 + 520 * (v49 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v740 = *v739;
  if ((_DWORD)v740)
  {
    v741 = 0;
    v742 = 0;
    v743 = **(_QWORD **)(v736 + 16);
    v744 = v738 + 520 * v737;
    v745 = v744 + 364;
    v746 = v744 + 340;
    while (1)
    {
      v747 = (uint64_t *)(v745 + 12 * v741);
      v748 = *(uint64_t **)(v743 + 2512);
      if (v748)
        break;
LABEL_1230:
      *(_WORD *)(v746 + 2 * v742) = *(_WORD *)(v746 + 2 * v741);
      if (v741 != v742)
      {
        v755 = *v747;
        v756 = v745 + 12 * v742;
        *(_DWORD *)(v756 + 8) = *((_DWORD *)v747 + 2);
        *(_QWORD *)v756 = v755;
      }
      ++v742;
LABEL_1214:
      if (++v741 == v740)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1234;
      }
    }
    v749 = *(_DWORD *)v747;
    v750 = *((_DWORD *)v747 + 1);
    v751 = *((_DWORD *)v747 + 2);
    while (1)
    {
      v752 = *((_DWORD *)v748 + 7);
      if (v749 == v752)
      {
        v753 = *((_DWORD *)v748 + 8);
        if (v750 == v753)
        {
          v754 = *((_DWORD *)v748 + 9);
          if (v751 < v754)
            goto LABEL_1218;
          if (v754 >= v751)
            goto LABEL_1214;
        }
        else
        {
          if (v750 < v753)
            goto LABEL_1218;
          if (v753 >= v750)
            goto LABEL_1214;
        }
      }
      else
      {
        if (v749 < v752)
          goto LABEL_1218;
        if (v752 >= v749)
          goto LABEL_1214;
      }
      ++v748;
LABEL_1218:
      v748 = (uint64_t *)*v748;
      if (!v748)
        goto LABEL_1230;
    }
  }
  v742 = 0;
LABEL_1234:
  *v739 = v742;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v51 = v3[289];
  if (v51 >> 30)
    v757 = 1;
  else
    v757 = (_DWORD)v51 == v5;
  if (v757)
    goto LABEL_121;
LABEL_1238:
  v758 = *(_QWORD *)(v1[2] + 8);
  v759 = v51 & 0xFFFFFFFFCFFFFFFFLL;
  v760 = *(_QWORD *)(*(_QWORD *)(v758 + 8) + 2448);
  v761 = (unsigned int *)(v760 + 520 * (v51 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v762 = *v761;
  if ((_DWORD)v762)
  {
    v763 = 0;
    v764 = 0;
    v765 = **(_QWORD **)(v758 + 16);
    v766 = v760 + 520 * v759;
    v767 = v766 + 364;
    v768 = v766 + 340;
    while (1)
    {
      v769 = (uint64_t *)(v767 + 12 * v763);
      v770 = *(uint64_t **)(v765 + 2512);
      if (v770)
        break;
LABEL_1257:
      *(_WORD *)(v768 + 2 * v764) = *(_WORD *)(v768 + 2 * v763);
      if (v763 != v764)
      {
        v777 = *v769;
        v778 = v767 + 12 * v764;
        *(_DWORD *)(v778 + 8) = *((_DWORD *)v769 + 2);
        *(_QWORD *)v778 = v777;
      }
      ++v764;
LABEL_1241:
      if (++v763 == v762)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1261;
      }
    }
    v771 = *(_DWORD *)v769;
    v772 = *((_DWORD *)v769 + 1);
    v773 = *((_DWORD *)v769 + 2);
    while (1)
    {
      v774 = *((_DWORD *)v770 + 7);
      if (v771 == v774)
      {
        v775 = *((_DWORD *)v770 + 8);
        if (v772 == v775)
        {
          v776 = *((_DWORD *)v770 + 9);
          if (v773 < v776)
            goto LABEL_1245;
          if (v776 >= v773)
            goto LABEL_1241;
        }
        else
        {
          if (v772 < v775)
            goto LABEL_1245;
          if (v775 >= v772)
            goto LABEL_1241;
        }
      }
      else
      {
        if (v771 < v774)
          goto LABEL_1245;
        if (v774 >= v771)
          goto LABEL_1241;
      }
      ++v770;
LABEL_1245:
      v770 = (uint64_t *)*v770;
      if (!v770)
        goto LABEL_1257;
    }
  }
  v764 = 0;
LABEL_1261:
  *v761 = v764;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v53 = v3[290];
  if (v53 >> 30)
    v779 = 1;
  else
    v779 = (_DWORD)v53 == v5;
  if (v779)
    goto LABEL_126;
LABEL_1265:
  v780 = *(_QWORD *)(v1[2] + 8);
  v781 = v53 & 0xFFFFFFFFCFFFFFFFLL;
  v782 = *(_QWORD *)(*(_QWORD *)(v780 + 8) + 2448);
  v783 = (unsigned int *)(v782 + 520 * (v53 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v784 = *v783;
  if ((_DWORD)v784)
  {
    v785 = 0;
    v786 = 0;
    v787 = **(_QWORD **)(v780 + 16);
    v788 = v782 + 520 * v781;
    v789 = v788 + 364;
    v790 = v788 + 340;
    while (1)
    {
      v791 = (uint64_t *)(v789 + 12 * v785);
      v792 = *(uint64_t **)(v787 + 2512);
      if (v792)
        break;
LABEL_1284:
      *(_WORD *)(v790 + 2 * v786) = *(_WORD *)(v790 + 2 * v785);
      if (v785 != v786)
      {
        v799 = *v791;
        v800 = v789 + 12 * v786;
        *(_DWORD *)(v800 + 8) = *((_DWORD *)v791 + 2);
        *(_QWORD *)v800 = v799;
      }
      ++v786;
LABEL_1268:
      if (++v785 == v784)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1288;
      }
    }
    v793 = *(_DWORD *)v791;
    v794 = *((_DWORD *)v791 + 1);
    v795 = *((_DWORD *)v791 + 2);
    while (1)
    {
      v796 = *((_DWORD *)v792 + 7);
      if (v793 == v796)
      {
        v797 = *((_DWORD *)v792 + 8);
        if (v794 == v797)
        {
          v798 = *((_DWORD *)v792 + 9);
          if (v795 < v798)
            goto LABEL_1272;
          if (v798 >= v795)
            goto LABEL_1268;
        }
        else
        {
          if (v794 < v797)
            goto LABEL_1272;
          if (v797 >= v794)
            goto LABEL_1268;
        }
      }
      else
      {
        if (v793 < v796)
          goto LABEL_1272;
        if (v796 >= v793)
          goto LABEL_1268;
      }
      ++v792;
LABEL_1272:
      v792 = (uint64_t *)*v792;
      if (!v792)
        goto LABEL_1284;
    }
  }
  v786 = 0;
LABEL_1288:
  *v783 = v786;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v55 = v3[291];
  if (v55 >> 30)
    v801 = 1;
  else
    v801 = (_DWORD)v55 == v5;
  if (v801)
    goto LABEL_131;
LABEL_1292:
  v802 = *(_QWORD *)(v1[2] + 8);
  v803 = v55 & 0xFFFFFFFFCFFFFFFFLL;
  v804 = *(_QWORD *)(*(_QWORD *)(v802 + 8) + 2448);
  v805 = (unsigned int *)(v804 + 520 * (v55 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v806 = *v805;
  if ((_DWORD)v806)
  {
    v807 = 0;
    v808 = 0;
    v809 = **(_QWORD **)(v802 + 16);
    v810 = v804 + 520 * v803;
    v811 = v810 + 364;
    v812 = v810 + 340;
    while (1)
    {
      v813 = (uint64_t *)(v811 + 12 * v807);
      v814 = *(uint64_t **)(v809 + 2512);
      if (v814)
        break;
LABEL_1311:
      *(_WORD *)(v812 + 2 * v808) = *(_WORD *)(v812 + 2 * v807);
      if (v807 != v808)
      {
        v821 = *v813;
        v822 = v811 + 12 * v808;
        *(_DWORD *)(v822 + 8) = *((_DWORD *)v813 + 2);
        *(_QWORD *)v822 = v821;
      }
      ++v808;
LABEL_1295:
      if (++v807 == v806)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1315;
      }
    }
    v815 = *(_DWORD *)v813;
    v816 = *((_DWORD *)v813 + 1);
    v817 = *((_DWORD *)v813 + 2);
    while (1)
    {
      v818 = *((_DWORD *)v814 + 7);
      if (v815 == v818)
      {
        v819 = *((_DWORD *)v814 + 8);
        if (v816 == v819)
        {
          v820 = *((_DWORD *)v814 + 9);
          if (v817 < v820)
            goto LABEL_1299;
          if (v820 >= v817)
            goto LABEL_1295;
        }
        else
        {
          if (v816 < v819)
            goto LABEL_1299;
          if (v819 >= v816)
            goto LABEL_1295;
        }
      }
      else
      {
        if (v815 < v818)
          goto LABEL_1299;
        if (v818 >= v815)
          goto LABEL_1295;
      }
      ++v814;
LABEL_1299:
      v814 = (uint64_t *)*v814;
      if (!v814)
        goto LABEL_1311;
    }
  }
  v808 = 0;
LABEL_1315:
  *v805 = v808;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v57 = v3[292];
  if (v57 >> 30)
    v823 = 1;
  else
    v823 = (_DWORD)v57 == v5;
  if (v823)
    goto LABEL_136;
LABEL_1319:
  v824 = *(_QWORD *)(v1[2] + 8);
  v825 = v57 & 0xFFFFFFFFCFFFFFFFLL;
  v826 = *(_QWORD *)(*(_QWORD *)(v824 + 8) + 2448);
  v827 = (unsigned int *)(v826 + 520 * (v57 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v828 = *v827;
  if ((_DWORD)v828)
  {
    v829 = 0;
    v830 = 0;
    v831 = **(_QWORD **)(v824 + 16);
    v832 = v826 + 520 * v825;
    v833 = v832 + 364;
    v834 = v832 + 340;
    while (1)
    {
      v835 = (uint64_t *)(v833 + 12 * v829);
      v836 = *(uint64_t **)(v831 + 2512);
      if (v836)
        break;
LABEL_1338:
      *(_WORD *)(v834 + 2 * v830) = *(_WORD *)(v834 + 2 * v829);
      if (v829 != v830)
      {
        v843 = *v835;
        v844 = v833 + 12 * v830;
        *(_DWORD *)(v844 + 8) = *((_DWORD *)v835 + 2);
        *(_QWORD *)v844 = v843;
      }
      ++v830;
LABEL_1322:
      if (++v829 == v828)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1342;
      }
    }
    v837 = *(_DWORD *)v835;
    v838 = *((_DWORD *)v835 + 1);
    v839 = *((_DWORD *)v835 + 2);
    while (1)
    {
      v840 = *((_DWORD *)v836 + 7);
      if (v837 == v840)
      {
        v841 = *((_DWORD *)v836 + 8);
        if (v838 == v841)
        {
          v842 = *((_DWORD *)v836 + 9);
          if (v839 < v842)
            goto LABEL_1326;
          if (v842 >= v839)
            goto LABEL_1322;
        }
        else
        {
          if (v838 < v841)
            goto LABEL_1326;
          if (v841 >= v838)
            goto LABEL_1322;
        }
      }
      else
      {
        if (v837 < v840)
          goto LABEL_1326;
        if (v840 >= v837)
          goto LABEL_1322;
      }
      ++v836;
LABEL_1326:
      v836 = (uint64_t *)*v836;
      if (!v836)
        goto LABEL_1338;
    }
  }
  v830 = 0;
LABEL_1342:
  *v827 = v830;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v59 = v3[293];
  if (v59 >> 30)
    v845 = 1;
  else
    v845 = (_DWORD)v59 == v5;
  if (v845)
    goto LABEL_141;
LABEL_1346:
  v846 = *(_QWORD *)(v1[2] + 8);
  v847 = v59 & 0xFFFFFFFFCFFFFFFFLL;
  v848 = *(_QWORD *)(*(_QWORD *)(v846 + 8) + 2448);
  v849 = (unsigned int *)(v848 + 520 * (v59 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v850 = *v849;
  if ((_DWORD)v850)
  {
    v851 = 0;
    v852 = 0;
    v853 = **(_QWORD **)(v846 + 16);
    v854 = v848 + 520 * v847;
    v855 = v854 + 364;
    v856 = v854 + 340;
    while (1)
    {
      v857 = (uint64_t *)(v855 + 12 * v851);
      v858 = *(uint64_t **)(v853 + 2512);
      if (v858)
        break;
LABEL_1365:
      *(_WORD *)(v856 + 2 * v852) = *(_WORD *)(v856 + 2 * v851);
      if (v851 != v852)
      {
        v865 = *v857;
        v866 = v855 + 12 * v852;
        *(_DWORD *)(v866 + 8) = *((_DWORD *)v857 + 2);
        *(_QWORD *)v866 = v865;
      }
      ++v852;
LABEL_1349:
      if (++v851 == v850)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1369;
      }
    }
    v859 = *(_DWORD *)v857;
    v860 = *((_DWORD *)v857 + 1);
    v861 = *((_DWORD *)v857 + 2);
    while (1)
    {
      v862 = *((_DWORD *)v858 + 7);
      if (v859 == v862)
      {
        v863 = *((_DWORD *)v858 + 8);
        if (v860 == v863)
        {
          v864 = *((_DWORD *)v858 + 9);
          if (v861 < v864)
            goto LABEL_1353;
          if (v864 >= v861)
            goto LABEL_1349;
        }
        else
        {
          if (v860 < v863)
            goto LABEL_1353;
          if (v863 >= v860)
            goto LABEL_1349;
        }
      }
      else
      {
        if (v859 < v862)
          goto LABEL_1353;
        if (v862 >= v859)
          goto LABEL_1349;
      }
      ++v858;
LABEL_1353:
      v858 = (uint64_t *)*v858;
      if (!v858)
        goto LABEL_1365;
    }
  }
  v852 = 0;
LABEL_1369:
  *v849 = v852;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v61 = v3[294];
  if (v61 >> 30)
    v867 = 1;
  else
    v867 = (_DWORD)v61 == v5;
  if (v867)
    goto LABEL_146;
LABEL_1373:
  v868 = *(_QWORD *)(v1[2] + 8);
  v869 = v61 & 0xFFFFFFFFCFFFFFFFLL;
  v870 = *(_QWORD *)(*(_QWORD *)(v868 + 8) + 2448);
  v871 = (unsigned int *)(v870 + 520 * (v61 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v872 = *v871;
  if ((_DWORD)v872)
  {
    v873 = 0;
    v874 = 0;
    v875 = **(_QWORD **)(v868 + 16);
    v876 = v870 + 520 * v869;
    v877 = v876 + 364;
    v878 = v876 + 340;
    while (1)
    {
      v879 = (uint64_t *)(v877 + 12 * v873);
      v880 = *(uint64_t **)(v875 + 2512);
      if (v880)
        break;
LABEL_1392:
      *(_WORD *)(v878 + 2 * v874) = *(_WORD *)(v878 + 2 * v873);
      if (v873 != v874)
      {
        v887 = *v879;
        v888 = v877 + 12 * v874;
        *(_DWORD *)(v888 + 8) = *((_DWORD *)v879 + 2);
        *(_QWORD *)v888 = v887;
      }
      ++v874;
LABEL_1376:
      if (++v873 == v872)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1396;
      }
    }
    v881 = *(_DWORD *)v879;
    v882 = *((_DWORD *)v879 + 1);
    v883 = *((_DWORD *)v879 + 2);
    while (1)
    {
      v884 = *((_DWORD *)v880 + 7);
      if (v881 == v884)
      {
        v885 = *((_DWORD *)v880 + 8);
        if (v882 == v885)
        {
          v886 = *((_DWORD *)v880 + 9);
          if (v883 < v886)
            goto LABEL_1380;
          if (v886 >= v883)
            goto LABEL_1376;
        }
        else
        {
          if (v882 < v885)
            goto LABEL_1380;
          if (v885 >= v882)
            goto LABEL_1376;
        }
      }
      else
      {
        if (v881 < v884)
          goto LABEL_1380;
        if (v884 >= v881)
          goto LABEL_1376;
      }
      ++v880;
LABEL_1380:
      v880 = (uint64_t *)*v880;
      if (!v880)
        goto LABEL_1392;
    }
  }
  v874 = 0;
LABEL_1396:
  *v871 = v874;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v63 = v3[295];
  if (v63 >> 30)
    v889 = 1;
  else
    v889 = (_DWORD)v63 == v5;
  if (v889)
    goto LABEL_151;
LABEL_1400:
  v890 = *(_QWORD *)(v1[2] + 8);
  v891 = v63 & 0xFFFFFFFFCFFFFFFFLL;
  v892 = *(_QWORD *)(*(_QWORD *)(v890 + 8) + 2448);
  v893 = (unsigned int *)(v892 + 520 * (v63 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v894 = *v893;
  if ((_DWORD)v894)
  {
    v895 = 0;
    v896 = 0;
    v897 = **(_QWORD **)(v890 + 16);
    v898 = v892 + 520 * v891;
    v899 = v898 + 364;
    v900 = v898 + 340;
    while (1)
    {
      v901 = (uint64_t *)(v899 + 12 * v895);
      v902 = *(uint64_t **)(v897 + 2512);
      if (v902)
        break;
LABEL_1419:
      *(_WORD *)(v900 + 2 * v896) = *(_WORD *)(v900 + 2 * v895);
      if (v895 != v896)
      {
        v909 = *v901;
        v910 = v899 + 12 * v896;
        *(_DWORD *)(v910 + 8) = *((_DWORD *)v901 + 2);
        *(_QWORD *)v910 = v909;
      }
      ++v896;
LABEL_1403:
      if (++v895 == v894)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1423;
      }
    }
    v903 = *(_DWORD *)v901;
    v904 = *((_DWORD *)v901 + 1);
    v905 = *((_DWORD *)v901 + 2);
    while (1)
    {
      v906 = *((_DWORD *)v902 + 7);
      if (v903 == v906)
      {
        v907 = *((_DWORD *)v902 + 8);
        if (v904 == v907)
        {
          v908 = *((_DWORD *)v902 + 9);
          if (v905 < v908)
            goto LABEL_1407;
          if (v908 >= v905)
            goto LABEL_1403;
        }
        else
        {
          if (v904 < v907)
            goto LABEL_1407;
          if (v907 >= v904)
            goto LABEL_1403;
        }
      }
      else
      {
        if (v903 < v906)
          goto LABEL_1407;
        if (v906 >= v903)
          goto LABEL_1403;
      }
      ++v902;
LABEL_1407:
      v902 = (uint64_t *)*v902;
      if (!v902)
        goto LABEL_1419;
    }
  }
  v896 = 0;
LABEL_1423:
  *v893 = v896;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v65 = v3[296];
  if (v65 >> 30)
    v911 = 1;
  else
    v911 = (_DWORD)v65 == v5;
  if (v911)
    goto LABEL_156;
LABEL_1427:
  v912 = *(_QWORD *)(v1[2] + 8);
  v913 = v65 & 0xFFFFFFFFCFFFFFFFLL;
  v914 = *(_QWORD *)(*(_QWORD *)(v912 + 8) + 2448);
  v915 = (unsigned int *)(v914 + 520 * (v65 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v916 = *v915;
  if ((_DWORD)v916)
  {
    v917 = 0;
    v918 = 0;
    v919 = **(_QWORD **)(v912 + 16);
    v920 = v914 + 520 * v913;
    v921 = v920 + 364;
    v922 = v920 + 340;
    while (1)
    {
      v923 = (uint64_t *)(v921 + 12 * v917);
      v924 = *(uint64_t **)(v919 + 2512);
      if (v924)
        break;
LABEL_1446:
      *(_WORD *)(v922 + 2 * v918) = *(_WORD *)(v922 + 2 * v917);
      if (v917 != v918)
      {
        v931 = *v923;
        v932 = v921 + 12 * v918;
        *(_DWORD *)(v932 + 8) = *((_DWORD *)v923 + 2);
        *(_QWORD *)v932 = v931;
      }
      ++v918;
LABEL_1430:
      if (++v917 == v916)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1450;
      }
    }
    v925 = *(_DWORD *)v923;
    v926 = *((_DWORD *)v923 + 1);
    v927 = *((_DWORD *)v923 + 2);
    while (1)
    {
      v928 = *((_DWORD *)v924 + 7);
      if (v925 == v928)
      {
        v929 = *((_DWORD *)v924 + 8);
        if (v926 == v929)
        {
          v930 = *((_DWORD *)v924 + 9);
          if (v927 < v930)
            goto LABEL_1434;
          if (v930 >= v927)
            goto LABEL_1430;
        }
        else
        {
          if (v926 < v929)
            goto LABEL_1434;
          if (v929 >= v926)
            goto LABEL_1430;
        }
      }
      else
      {
        if (v925 < v928)
          goto LABEL_1434;
        if (v928 >= v925)
          goto LABEL_1430;
      }
      ++v924;
LABEL_1434:
      v924 = (uint64_t *)*v924;
      if (!v924)
        goto LABEL_1446;
    }
  }
  v918 = 0;
LABEL_1450:
  *v915 = v918;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v67 = v3[297];
  if (v67 >> 30)
    v933 = 1;
  else
    v933 = (_DWORD)v67 == v5;
  if (v933)
    goto LABEL_161;
LABEL_1454:
  v934 = *(_QWORD *)(v1[2] + 8);
  v935 = v67 & 0xFFFFFFFFCFFFFFFFLL;
  v936 = *(_QWORD *)(*(_QWORD *)(v934 + 8) + 2448);
  v937 = (unsigned int *)(v936 + 520 * (v67 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v938 = *v937;
  if ((_DWORD)v938)
  {
    v939 = 0;
    v940 = 0;
    v941 = **(_QWORD **)(v934 + 16);
    v942 = v936 + 520 * v935;
    v943 = v942 + 364;
    v944 = v942 + 340;
    while (1)
    {
      v945 = (uint64_t *)(v943 + 12 * v939);
      v946 = *(uint64_t **)(v941 + 2512);
      if (v946)
        break;
LABEL_1473:
      *(_WORD *)(v944 + 2 * v940) = *(_WORD *)(v944 + 2 * v939);
      if (v939 != v940)
      {
        v953 = *v945;
        v954 = v943 + 12 * v940;
        *(_DWORD *)(v954 + 8) = *((_DWORD *)v945 + 2);
        *(_QWORD *)v954 = v953;
      }
      ++v940;
LABEL_1457:
      if (++v939 == v938)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1477;
      }
    }
    v947 = *(_DWORD *)v945;
    v948 = *((_DWORD *)v945 + 1);
    v949 = *((_DWORD *)v945 + 2);
    while (1)
    {
      v950 = *((_DWORD *)v946 + 7);
      if (v947 == v950)
      {
        v951 = *((_DWORD *)v946 + 8);
        if (v948 == v951)
        {
          v952 = *((_DWORD *)v946 + 9);
          if (v949 < v952)
            goto LABEL_1461;
          if (v952 >= v949)
            goto LABEL_1457;
        }
        else
        {
          if (v948 < v951)
            goto LABEL_1461;
          if (v951 >= v948)
            goto LABEL_1457;
        }
      }
      else
      {
        if (v947 < v950)
          goto LABEL_1461;
        if (v950 >= v947)
          goto LABEL_1457;
      }
      ++v946;
LABEL_1461:
      v946 = (uint64_t *)*v946;
      if (!v946)
        goto LABEL_1473;
    }
  }
  v940 = 0;
LABEL_1477:
  *v937 = v940;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v69 = v3[298];
  if (v69 >> 30)
    v955 = 1;
  else
    v955 = (_DWORD)v69 == v5;
  if (v955)
    goto LABEL_166;
LABEL_1481:
  v956 = *(_QWORD *)(v1[2] + 8);
  v957 = v69 & 0xFFFFFFFFCFFFFFFFLL;
  v958 = *(_QWORD *)(*(_QWORD *)(v956 + 8) + 2448);
  v959 = (unsigned int *)(v958 + 520 * (v69 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v960 = *v959;
  if ((_DWORD)v960)
  {
    v961 = 0;
    v962 = 0;
    v963 = **(_QWORD **)(v956 + 16);
    v964 = v958 + 520 * v957;
    v965 = v964 + 364;
    v966 = v964 + 340;
    while (1)
    {
      v967 = (uint64_t *)(v965 + 12 * v961);
      v968 = *(uint64_t **)(v963 + 2512);
      if (v968)
        break;
LABEL_1500:
      *(_WORD *)(v966 + 2 * v962) = *(_WORD *)(v966 + 2 * v961);
      if (v961 != v962)
      {
        v975 = *v967;
        v976 = v965 + 12 * v962;
        *(_DWORD *)(v976 + 8) = *((_DWORD *)v967 + 2);
        *(_QWORD *)v976 = v975;
      }
      ++v962;
LABEL_1484:
      if (++v961 == v960)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1504;
      }
    }
    v969 = *(_DWORD *)v967;
    v970 = *((_DWORD *)v967 + 1);
    v971 = *((_DWORD *)v967 + 2);
    while (1)
    {
      v972 = *((_DWORD *)v968 + 7);
      if (v969 == v972)
      {
        v973 = *((_DWORD *)v968 + 8);
        if (v970 == v973)
        {
          v974 = *((_DWORD *)v968 + 9);
          if (v971 < v974)
            goto LABEL_1488;
          if (v974 >= v971)
            goto LABEL_1484;
        }
        else
        {
          if (v970 < v973)
            goto LABEL_1488;
          if (v973 >= v970)
            goto LABEL_1484;
        }
      }
      else
      {
        if (v969 < v972)
          goto LABEL_1488;
        if (v972 >= v969)
          goto LABEL_1484;
      }
      ++v968;
LABEL_1488:
      v968 = (uint64_t *)*v968;
      if (!v968)
        goto LABEL_1500;
    }
  }
  v962 = 0;
LABEL_1504:
  *v959 = v962;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v71 = v3[299];
  if (v71 >> 30)
    v977 = 1;
  else
    v977 = (_DWORD)v71 == v5;
  if (v977)
    goto LABEL_171;
LABEL_1508:
  v978 = *(_QWORD *)(v1[2] + 8);
  v979 = v71 & 0xFFFFFFFFCFFFFFFFLL;
  v980 = *(_QWORD *)(*(_QWORD *)(v978 + 8) + 2448);
  v981 = (unsigned int *)(v980 + 520 * (v71 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v982 = *v981;
  if ((_DWORD)v982)
  {
    v983 = 0;
    v984 = 0;
    v985 = **(_QWORD **)(v978 + 16);
    v986 = v980 + 520 * v979;
    v987 = v986 + 364;
    v988 = v986 + 340;
    while (1)
    {
      v989 = (uint64_t *)(v987 + 12 * v983);
      v990 = *(uint64_t **)(v985 + 2512);
      if (v990)
        break;
LABEL_1527:
      *(_WORD *)(v988 + 2 * v984) = *(_WORD *)(v988 + 2 * v983);
      if (v983 != v984)
      {
        v997 = *v989;
        v998 = v987 + 12 * v984;
        *(_DWORD *)(v998 + 8) = *((_DWORD *)v989 + 2);
        *(_QWORD *)v998 = v997;
      }
      ++v984;
LABEL_1511:
      if (++v983 == v982)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1531;
      }
    }
    v991 = *(_DWORD *)v989;
    v992 = *((_DWORD *)v989 + 1);
    v993 = *((_DWORD *)v989 + 2);
    while (1)
    {
      v994 = *((_DWORD *)v990 + 7);
      if (v991 == v994)
      {
        v995 = *((_DWORD *)v990 + 8);
        if (v992 == v995)
        {
          v996 = *((_DWORD *)v990 + 9);
          if (v993 < v996)
            goto LABEL_1515;
          if (v996 >= v993)
            goto LABEL_1511;
        }
        else
        {
          if (v992 < v995)
            goto LABEL_1515;
          if (v995 >= v992)
            goto LABEL_1511;
        }
      }
      else
      {
        if (v991 < v994)
          goto LABEL_1515;
        if (v994 >= v991)
          goto LABEL_1511;
      }
      ++v990;
LABEL_1515:
      v990 = (uint64_t *)*v990;
      if (!v990)
        goto LABEL_1527;
    }
  }
  v984 = 0;
LABEL_1531:
  *v981 = v984;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v73 = v3[300];
  if (v73 >> 30)
    v999 = 1;
  else
    v999 = (_DWORD)v73 == v5;
  if (v999)
    goto LABEL_176;
LABEL_1535:
  v1000 = *(_QWORD *)(v1[2] + 8);
  v1001 = v73 & 0xFFFFFFFFCFFFFFFFLL;
  v1002 = *(_QWORD *)(*(_QWORD *)(v1000 + 8) + 2448);
  v1003 = (unsigned int *)(v1002 + 520 * (v73 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1004 = *v1003;
  if ((_DWORD)v1004)
  {
    v1005 = 0;
    v1006 = 0;
    v1007 = **(_QWORD **)(v1000 + 16);
    v1008 = v1002 + 520 * v1001;
    v1009 = v1008 + 364;
    v1010 = v1008 + 340;
    while (1)
    {
      v1011 = (uint64_t *)(v1009 + 12 * v1005);
      v1012 = *(uint64_t **)(v1007 + 2512);
      if (v1012)
        break;
LABEL_1554:
      *(_WORD *)(v1010 + 2 * v1006) = *(_WORD *)(v1010 + 2 * v1005);
      if (v1005 != v1006)
      {
        v1019 = *v1011;
        v1020 = v1009 + 12 * v1006;
        *(_DWORD *)(v1020 + 8) = *((_DWORD *)v1011 + 2);
        *(_QWORD *)v1020 = v1019;
      }
      ++v1006;
LABEL_1538:
      if (++v1005 == v1004)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1558;
      }
    }
    v1013 = *(_DWORD *)v1011;
    v1014 = *((_DWORD *)v1011 + 1);
    v1015 = *((_DWORD *)v1011 + 2);
    while (1)
    {
      v1016 = *((_DWORD *)v1012 + 7);
      if (v1013 == v1016)
      {
        v1017 = *((_DWORD *)v1012 + 8);
        if (v1014 == v1017)
        {
          v1018 = *((_DWORD *)v1012 + 9);
          if (v1015 < v1018)
            goto LABEL_1542;
          if (v1018 >= v1015)
            goto LABEL_1538;
        }
        else
        {
          if (v1014 < v1017)
            goto LABEL_1542;
          if (v1017 >= v1014)
            goto LABEL_1538;
        }
      }
      else
      {
        if (v1013 < v1016)
          goto LABEL_1542;
        if (v1016 >= v1013)
          goto LABEL_1538;
      }
      ++v1012;
LABEL_1542:
      v1012 = (uint64_t *)*v1012;
      if (!v1012)
        goto LABEL_1554;
    }
  }
  v1006 = 0;
LABEL_1558:
  *v1003 = v1006;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v75 = v3[301];
  if (v75 >> 30)
    v1021 = 1;
  else
    v1021 = (_DWORD)v75 == v5;
  if (v1021)
    goto LABEL_181;
LABEL_1562:
  v1022 = *(_QWORD *)(v1[2] + 8);
  v1023 = v75 & 0xFFFFFFFFCFFFFFFFLL;
  v1024 = *(_QWORD *)(*(_QWORD *)(v1022 + 8) + 2448);
  v1025 = (unsigned int *)(v1024 + 520 * (v75 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1026 = *v1025;
  if ((_DWORD)v1026)
  {
    v1027 = 0;
    v1028 = 0;
    v1029 = **(_QWORD **)(v1022 + 16);
    v1030 = v1024 + 520 * v1023;
    v1031 = v1030 + 364;
    v1032 = v1030 + 340;
    while (1)
    {
      v1033 = (uint64_t *)(v1031 + 12 * v1027);
      v1034 = *(uint64_t **)(v1029 + 2512);
      if (v1034)
        break;
LABEL_1581:
      *(_WORD *)(v1032 + 2 * v1028) = *(_WORD *)(v1032 + 2 * v1027);
      if (v1027 != v1028)
      {
        v1041 = *v1033;
        v1042 = v1031 + 12 * v1028;
        *(_DWORD *)(v1042 + 8) = *((_DWORD *)v1033 + 2);
        *(_QWORD *)v1042 = v1041;
      }
      ++v1028;
LABEL_1565:
      if (++v1027 == v1026)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1585;
      }
    }
    v1035 = *(_DWORD *)v1033;
    v1036 = *((_DWORD *)v1033 + 1);
    v1037 = *((_DWORD *)v1033 + 2);
    while (1)
    {
      v1038 = *((_DWORD *)v1034 + 7);
      if (v1035 == v1038)
      {
        v1039 = *((_DWORD *)v1034 + 8);
        if (v1036 == v1039)
        {
          v1040 = *((_DWORD *)v1034 + 9);
          if (v1037 < v1040)
            goto LABEL_1569;
          if (v1040 >= v1037)
            goto LABEL_1565;
        }
        else
        {
          if (v1036 < v1039)
            goto LABEL_1569;
          if (v1039 >= v1036)
            goto LABEL_1565;
        }
      }
      else
      {
        if (v1035 < v1038)
          goto LABEL_1569;
        if (v1038 >= v1035)
          goto LABEL_1565;
      }
      ++v1034;
LABEL_1569:
      v1034 = (uint64_t *)*v1034;
      if (!v1034)
        goto LABEL_1581;
    }
  }
  v1028 = 0;
LABEL_1585:
  *v1025 = v1028;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v77 = v3[302];
  if (v77 >> 30)
    v1043 = 1;
  else
    v1043 = (_DWORD)v77 == v5;
  if (v1043)
    goto LABEL_186;
LABEL_1589:
  v1044 = *(_QWORD *)(v1[2] + 8);
  v1045 = v77 & 0xFFFFFFFFCFFFFFFFLL;
  v1046 = *(_QWORD *)(*(_QWORD *)(v1044 + 8) + 2448);
  v1047 = (unsigned int *)(v1046 + 520 * (v77 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1048 = *v1047;
  if ((_DWORD)v1048)
  {
    v1049 = 0;
    v1050 = 0;
    v1051 = **(_QWORD **)(v1044 + 16);
    v1052 = v1046 + 520 * v1045;
    v1053 = v1052 + 364;
    v1054 = v1052 + 340;
    while (1)
    {
      v1055 = (uint64_t *)(v1053 + 12 * v1049);
      v1056 = *(uint64_t **)(v1051 + 2512);
      if (v1056)
        break;
LABEL_1608:
      *(_WORD *)(v1054 + 2 * v1050) = *(_WORD *)(v1054 + 2 * v1049);
      if (v1049 != v1050)
      {
        v1063 = *v1055;
        v1064 = v1053 + 12 * v1050;
        *(_DWORD *)(v1064 + 8) = *((_DWORD *)v1055 + 2);
        *(_QWORD *)v1064 = v1063;
      }
      ++v1050;
LABEL_1592:
      if (++v1049 == v1048)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1612;
      }
    }
    v1057 = *(_DWORD *)v1055;
    v1058 = *((_DWORD *)v1055 + 1);
    v1059 = *((_DWORD *)v1055 + 2);
    while (1)
    {
      v1060 = *((_DWORD *)v1056 + 7);
      if (v1057 == v1060)
      {
        v1061 = *((_DWORD *)v1056 + 8);
        if (v1058 == v1061)
        {
          v1062 = *((_DWORD *)v1056 + 9);
          if (v1059 < v1062)
            goto LABEL_1596;
          if (v1062 >= v1059)
            goto LABEL_1592;
        }
        else
        {
          if (v1058 < v1061)
            goto LABEL_1596;
          if (v1061 >= v1058)
            goto LABEL_1592;
        }
      }
      else
      {
        if (v1057 < v1060)
          goto LABEL_1596;
        if (v1060 >= v1057)
          goto LABEL_1592;
      }
      ++v1056;
LABEL_1596:
      v1056 = (uint64_t *)*v1056;
      if (!v1056)
        goto LABEL_1608;
    }
  }
  v1050 = 0;
LABEL_1612:
  *v1047 = v1050;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v79 = v3[303];
  if (v79 >> 30)
    v1065 = 1;
  else
    v1065 = (_DWORD)v79 == v5;
  if (v1065)
    goto LABEL_191;
LABEL_1616:
  v1066 = *(_QWORD *)(v1[2] + 8);
  v1067 = v79 & 0xFFFFFFFFCFFFFFFFLL;
  v1068 = *(_QWORD *)(*(_QWORD *)(v1066 + 8) + 2448);
  v1069 = (unsigned int *)(v1068 + 520 * (v79 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1070 = *v1069;
  if ((_DWORD)v1070)
  {
    v1071 = 0;
    v1072 = 0;
    v1073 = **(_QWORD **)(v1066 + 16);
    v1074 = v1068 + 520 * v1067;
    v1075 = v1074 + 364;
    v1076 = v1074 + 340;
    while (1)
    {
      v1077 = (uint64_t *)(v1075 + 12 * v1071);
      v1078 = *(uint64_t **)(v1073 + 2512);
      if (v1078)
        break;
LABEL_1635:
      *(_WORD *)(v1076 + 2 * v1072) = *(_WORD *)(v1076 + 2 * v1071);
      if (v1071 != v1072)
      {
        v1085 = *v1077;
        v1086 = v1075 + 12 * v1072;
        *(_DWORD *)(v1086 + 8) = *((_DWORD *)v1077 + 2);
        *(_QWORD *)v1086 = v1085;
      }
      ++v1072;
LABEL_1619:
      if (++v1071 == v1070)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1639;
      }
    }
    v1079 = *(_DWORD *)v1077;
    v1080 = *((_DWORD *)v1077 + 1);
    v1081 = *((_DWORD *)v1077 + 2);
    while (1)
    {
      v1082 = *((_DWORD *)v1078 + 7);
      if (v1079 == v1082)
      {
        v1083 = *((_DWORD *)v1078 + 8);
        if (v1080 == v1083)
        {
          v1084 = *((_DWORD *)v1078 + 9);
          if (v1081 < v1084)
            goto LABEL_1623;
          if (v1084 >= v1081)
            goto LABEL_1619;
        }
        else
        {
          if (v1080 < v1083)
            goto LABEL_1623;
          if (v1083 >= v1080)
            goto LABEL_1619;
        }
      }
      else
      {
        if (v1079 < v1082)
          goto LABEL_1623;
        if (v1082 >= v1079)
          goto LABEL_1619;
      }
      ++v1078;
LABEL_1623:
      v1078 = (uint64_t *)*v1078;
      if (!v1078)
        goto LABEL_1635;
    }
  }
  v1072 = 0;
LABEL_1639:
  *v1069 = v1072;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v81 = v3[304];
  if (v81 >> 30)
    v1087 = 1;
  else
    v1087 = (_DWORD)v81 == v5;
  if (v1087)
    goto LABEL_196;
LABEL_1643:
  v1088 = *(_QWORD *)(v1[2] + 8);
  v1089 = v81 & 0xFFFFFFFFCFFFFFFFLL;
  v1090 = *(_QWORD *)(*(_QWORD *)(v1088 + 8) + 2448);
  v1091 = (unsigned int *)(v1090 + 520 * (v81 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1092 = *v1091;
  if ((_DWORD)v1092)
  {
    v1093 = 0;
    v1094 = 0;
    v1095 = **(_QWORD **)(v1088 + 16);
    v1096 = v1090 + 520 * v1089;
    v1097 = v1096 + 364;
    v1098 = v1096 + 340;
    while (1)
    {
      v1099 = (uint64_t *)(v1097 + 12 * v1093);
      v1100 = *(uint64_t **)(v1095 + 2512);
      if (v1100)
        break;
LABEL_1662:
      *(_WORD *)(v1098 + 2 * v1094) = *(_WORD *)(v1098 + 2 * v1093);
      if (v1093 != v1094)
      {
        v1107 = *v1099;
        v1108 = v1097 + 12 * v1094;
        *(_DWORD *)(v1108 + 8) = *((_DWORD *)v1099 + 2);
        *(_QWORD *)v1108 = v1107;
      }
      ++v1094;
LABEL_1646:
      if (++v1093 == v1092)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1666;
      }
    }
    v1101 = *(_DWORD *)v1099;
    v1102 = *((_DWORD *)v1099 + 1);
    v1103 = *((_DWORD *)v1099 + 2);
    while (1)
    {
      v1104 = *((_DWORD *)v1100 + 7);
      if (v1101 == v1104)
      {
        v1105 = *((_DWORD *)v1100 + 8);
        if (v1102 == v1105)
        {
          v1106 = *((_DWORD *)v1100 + 9);
          if (v1103 < v1106)
            goto LABEL_1650;
          if (v1106 >= v1103)
            goto LABEL_1646;
        }
        else
        {
          if (v1102 < v1105)
            goto LABEL_1650;
          if (v1105 >= v1102)
            goto LABEL_1646;
        }
      }
      else
      {
        if (v1101 < v1104)
          goto LABEL_1650;
        if (v1104 >= v1101)
          goto LABEL_1646;
      }
      ++v1100;
LABEL_1650:
      v1100 = (uint64_t *)*v1100;
      if (!v1100)
        goto LABEL_1662;
    }
  }
  v1094 = 0;
LABEL_1666:
  *v1091 = v1094;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v83 = v3[305];
  if (v83 >> 30)
    v1109 = 1;
  else
    v1109 = (_DWORD)v83 == v5;
  if (v1109)
    goto LABEL_201;
LABEL_1670:
  v1110 = *(_QWORD *)(v1[2] + 8);
  v1111 = v83 & 0xFFFFFFFFCFFFFFFFLL;
  v1112 = *(_QWORD *)(*(_QWORD *)(v1110 + 8) + 2448);
  v1113 = (unsigned int *)(v1112 + 520 * (v83 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1114 = *v1113;
  if ((_DWORD)v1114)
  {
    v1115 = 0;
    v1116 = 0;
    v1117 = **(_QWORD **)(v1110 + 16);
    v1118 = v1112 + 520 * v1111;
    v1119 = v1118 + 364;
    v1120 = v1118 + 340;
    while (1)
    {
      v1121 = (uint64_t *)(v1119 + 12 * v1115);
      v1122 = *(uint64_t **)(v1117 + 2512);
      if (v1122)
        break;
LABEL_1689:
      *(_WORD *)(v1120 + 2 * v1116) = *(_WORD *)(v1120 + 2 * v1115);
      if (v1115 != v1116)
      {
        v1129 = *v1121;
        v1130 = v1119 + 12 * v1116;
        *(_DWORD *)(v1130 + 8) = *((_DWORD *)v1121 + 2);
        *(_QWORD *)v1130 = v1129;
      }
      ++v1116;
LABEL_1673:
      if (++v1115 == v1114)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1693;
      }
    }
    v1123 = *(_DWORD *)v1121;
    v1124 = *((_DWORD *)v1121 + 1);
    v1125 = *((_DWORD *)v1121 + 2);
    while (1)
    {
      v1126 = *((_DWORD *)v1122 + 7);
      if (v1123 == v1126)
      {
        v1127 = *((_DWORD *)v1122 + 8);
        if (v1124 == v1127)
        {
          v1128 = *((_DWORD *)v1122 + 9);
          if (v1125 < v1128)
            goto LABEL_1677;
          if (v1128 >= v1125)
            goto LABEL_1673;
        }
        else
        {
          if (v1124 < v1127)
            goto LABEL_1677;
          if (v1127 >= v1124)
            goto LABEL_1673;
        }
      }
      else
      {
        if (v1123 < v1126)
          goto LABEL_1677;
        if (v1126 >= v1123)
          goto LABEL_1673;
      }
      ++v1122;
LABEL_1677:
      v1122 = (uint64_t *)*v1122;
      if (!v1122)
        goto LABEL_1689;
    }
  }
  v1116 = 0;
LABEL_1693:
  *v1113 = v1116;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v85 = v3[306];
  if (v85 >> 30)
    v1131 = 1;
  else
    v1131 = (_DWORD)v85 == v5;
  if (v1131)
    goto LABEL_206;
LABEL_1697:
  v1132 = *(_QWORD *)(v1[2] + 8);
  v1133 = v85 & 0xFFFFFFFFCFFFFFFFLL;
  v1134 = *(_QWORD *)(*(_QWORD *)(v1132 + 8) + 2448);
  v1135 = (unsigned int *)(v1134 + 520 * (v85 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1136 = *v1135;
  if ((_DWORD)v1136)
  {
    v1137 = 0;
    v1138 = 0;
    v1139 = **(_QWORD **)(v1132 + 16);
    v1140 = v1134 + 520 * v1133;
    v1141 = v1140 + 364;
    v1142 = v1140 + 340;
    while (1)
    {
      v1143 = (uint64_t *)(v1141 + 12 * v1137);
      v1144 = *(uint64_t **)(v1139 + 2512);
      if (v1144)
        break;
LABEL_1716:
      *(_WORD *)(v1142 + 2 * v1138) = *(_WORD *)(v1142 + 2 * v1137);
      if (v1137 != v1138)
      {
        v1151 = *v1143;
        v1152 = v1141 + 12 * v1138;
        *(_DWORD *)(v1152 + 8) = *((_DWORD *)v1143 + 2);
        *(_QWORD *)v1152 = v1151;
      }
      ++v1138;
LABEL_1700:
      if (++v1137 == v1136)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1720;
      }
    }
    v1145 = *(_DWORD *)v1143;
    v1146 = *((_DWORD *)v1143 + 1);
    v1147 = *((_DWORD *)v1143 + 2);
    while (1)
    {
      v1148 = *((_DWORD *)v1144 + 7);
      if (v1145 == v1148)
      {
        v1149 = *((_DWORD *)v1144 + 8);
        if (v1146 == v1149)
        {
          v1150 = *((_DWORD *)v1144 + 9);
          if (v1147 < v1150)
            goto LABEL_1704;
          if (v1150 >= v1147)
            goto LABEL_1700;
        }
        else
        {
          if (v1146 < v1149)
            goto LABEL_1704;
          if (v1149 >= v1146)
            goto LABEL_1700;
        }
      }
      else
      {
        if (v1145 < v1148)
          goto LABEL_1704;
        if (v1148 >= v1145)
          goto LABEL_1700;
      }
      ++v1144;
LABEL_1704:
      v1144 = (uint64_t *)*v1144;
      if (!v1144)
        goto LABEL_1716;
    }
  }
  v1138 = 0;
LABEL_1720:
  *v1135 = v1138;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v87 = v3[307];
  if (v87 >> 30)
    v1153 = 1;
  else
    v1153 = (_DWORD)v87 == v5;
  if (v1153)
    goto LABEL_211;
LABEL_1724:
  v1154 = *(_QWORD *)(v1[2] + 8);
  v1155 = v87 & 0xFFFFFFFFCFFFFFFFLL;
  v1156 = *(_QWORD *)(*(_QWORD *)(v1154 + 8) + 2448);
  v1157 = (unsigned int *)(v1156 + 520 * (v87 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1158 = *v1157;
  if ((_DWORD)v1158)
  {
    v1159 = 0;
    v1160 = 0;
    v1161 = **(_QWORD **)(v1154 + 16);
    v1162 = v1156 + 520 * v1155;
    v1163 = v1162 + 364;
    v1164 = v1162 + 340;
    while (1)
    {
      v1165 = (uint64_t *)(v1163 + 12 * v1159);
      v1166 = *(uint64_t **)(v1161 + 2512);
      if (v1166)
        break;
LABEL_1743:
      *(_WORD *)(v1164 + 2 * v1160) = *(_WORD *)(v1164 + 2 * v1159);
      if (v1159 != v1160)
      {
        v1173 = *v1165;
        v1174 = v1163 + 12 * v1160;
        *(_DWORD *)(v1174 + 8) = *((_DWORD *)v1165 + 2);
        *(_QWORD *)v1174 = v1173;
      }
      ++v1160;
LABEL_1727:
      if (++v1159 == v1158)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1747;
      }
    }
    v1167 = *(_DWORD *)v1165;
    v1168 = *((_DWORD *)v1165 + 1);
    v1169 = *((_DWORD *)v1165 + 2);
    while (1)
    {
      v1170 = *((_DWORD *)v1166 + 7);
      if (v1167 == v1170)
      {
        v1171 = *((_DWORD *)v1166 + 8);
        if (v1168 == v1171)
        {
          v1172 = *((_DWORD *)v1166 + 9);
          if (v1169 < v1172)
            goto LABEL_1731;
          if (v1172 >= v1169)
            goto LABEL_1727;
        }
        else
        {
          if (v1168 < v1171)
            goto LABEL_1731;
          if (v1171 >= v1168)
            goto LABEL_1727;
        }
      }
      else
      {
        if (v1167 < v1170)
          goto LABEL_1731;
        if (v1170 >= v1167)
          goto LABEL_1727;
      }
      ++v1166;
LABEL_1731:
      v1166 = (uint64_t *)*v1166;
      if (!v1166)
        goto LABEL_1743;
    }
  }
  v1160 = 0;
LABEL_1747:
  *v1157 = v1160;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v89 = v3[308];
  if (v89 >> 30)
    v1175 = 1;
  else
    v1175 = (_DWORD)v89 == v5;
  if (v1175)
    goto LABEL_216;
LABEL_1751:
  v1176 = *(_QWORD *)(v1[2] + 8);
  v1177 = v89 & 0xFFFFFFFFCFFFFFFFLL;
  v1178 = *(_QWORD *)(*(_QWORD *)(v1176 + 8) + 2448);
  v1179 = (unsigned int *)(v1178 + 520 * (v89 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1180 = *v1179;
  if ((_DWORD)v1180)
  {
    v1181 = 0;
    v1182 = 0;
    v1183 = **(_QWORD **)(v1176 + 16);
    v1184 = v1178 + 520 * v1177;
    v1185 = v1184 + 364;
    v1186 = v1184 + 340;
    while (1)
    {
      v1187 = (uint64_t *)(v1185 + 12 * v1181);
      v1188 = *(uint64_t **)(v1183 + 2512);
      if (v1188)
        break;
LABEL_1770:
      *(_WORD *)(v1186 + 2 * v1182) = *(_WORD *)(v1186 + 2 * v1181);
      if (v1181 != v1182)
      {
        v1195 = *v1187;
        v1196 = v1185 + 12 * v1182;
        *(_DWORD *)(v1196 + 8) = *((_DWORD *)v1187 + 2);
        *(_QWORD *)v1196 = v1195;
      }
      ++v1182;
LABEL_1754:
      if (++v1181 == v1180)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1774;
      }
    }
    v1189 = *(_DWORD *)v1187;
    v1190 = *((_DWORD *)v1187 + 1);
    v1191 = *((_DWORD *)v1187 + 2);
    while (1)
    {
      v1192 = *((_DWORD *)v1188 + 7);
      if (v1189 == v1192)
      {
        v1193 = *((_DWORD *)v1188 + 8);
        if (v1190 == v1193)
        {
          v1194 = *((_DWORD *)v1188 + 9);
          if (v1191 < v1194)
            goto LABEL_1758;
          if (v1194 >= v1191)
            goto LABEL_1754;
        }
        else
        {
          if (v1190 < v1193)
            goto LABEL_1758;
          if (v1193 >= v1190)
            goto LABEL_1754;
        }
      }
      else
      {
        if (v1189 < v1192)
          goto LABEL_1758;
        if (v1192 >= v1189)
          goto LABEL_1754;
      }
      ++v1188;
LABEL_1758:
      v1188 = (uint64_t *)*v1188;
      if (!v1188)
        goto LABEL_1770;
    }
  }
  v1182 = 0;
LABEL_1774:
  *v1179 = v1182;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v91 = v3[309];
  if (v91 >> 30)
    v1197 = 1;
  else
    v1197 = (_DWORD)v91 == v5;
  if (v1197)
    goto LABEL_221;
LABEL_1778:
  v1198 = *(_QWORD *)(v1[2] + 8);
  v1199 = v91 & 0xFFFFFFFFCFFFFFFFLL;
  v1200 = *(_QWORD *)(*(_QWORD *)(v1198 + 8) + 2448);
  v1201 = (unsigned int *)(v1200 + 520 * (v91 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1202 = *v1201;
  if ((_DWORD)v1202)
  {
    v1203 = 0;
    v1204 = 0;
    v1205 = **(_QWORD **)(v1198 + 16);
    v1206 = v1200 + 520 * v1199;
    v1207 = v1206 + 364;
    v1208 = v1206 + 340;
    while (1)
    {
      v1209 = (uint64_t *)(v1207 + 12 * v1203);
      v1210 = *(uint64_t **)(v1205 + 2512);
      if (v1210)
        break;
LABEL_1797:
      *(_WORD *)(v1208 + 2 * v1204) = *(_WORD *)(v1208 + 2 * v1203);
      if (v1203 != v1204)
      {
        v1217 = *v1209;
        v1218 = v1207 + 12 * v1204;
        *(_DWORD *)(v1218 + 8) = *((_DWORD *)v1209 + 2);
        *(_QWORD *)v1218 = v1217;
      }
      ++v1204;
LABEL_1781:
      if (++v1203 == v1202)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1801;
      }
    }
    v1211 = *(_DWORD *)v1209;
    v1212 = *((_DWORD *)v1209 + 1);
    v1213 = *((_DWORD *)v1209 + 2);
    while (1)
    {
      v1214 = *((_DWORD *)v1210 + 7);
      if (v1211 == v1214)
      {
        v1215 = *((_DWORD *)v1210 + 8);
        if (v1212 == v1215)
        {
          v1216 = *((_DWORD *)v1210 + 9);
          if (v1213 < v1216)
            goto LABEL_1785;
          if (v1216 >= v1213)
            goto LABEL_1781;
        }
        else
        {
          if (v1212 < v1215)
            goto LABEL_1785;
          if (v1215 >= v1212)
            goto LABEL_1781;
        }
      }
      else
      {
        if (v1211 < v1214)
          goto LABEL_1785;
        if (v1214 >= v1211)
          goto LABEL_1781;
      }
      ++v1210;
LABEL_1785:
      v1210 = (uint64_t *)*v1210;
      if (!v1210)
        goto LABEL_1797;
    }
  }
  v1204 = 0;
LABEL_1801:
  *v1201 = v1204;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v93 = v3[310];
  if (v93 >> 30)
    v1219 = 1;
  else
    v1219 = (_DWORD)v93 == v5;
  if (v1219)
    goto LABEL_226;
LABEL_1805:
  v1220 = *(_QWORD *)(v1[2] + 8);
  v1221 = v93 & 0xFFFFFFFFCFFFFFFFLL;
  v1222 = *(_QWORD *)(*(_QWORD *)(v1220 + 8) + 2448);
  v1223 = (unsigned int *)(v1222 + 520 * (v93 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1224 = *v1223;
  if ((_DWORD)v1224)
  {
    v1225 = 0;
    v1226 = 0;
    v1227 = **(_QWORD **)(v1220 + 16);
    v1228 = v1222 + 520 * v1221;
    v1229 = v1228 + 364;
    v1230 = v1228 + 340;
    while (1)
    {
      v1231 = (uint64_t *)(v1229 + 12 * v1225);
      v1232 = *(uint64_t **)(v1227 + 2512);
      if (v1232)
        break;
LABEL_1824:
      *(_WORD *)(v1230 + 2 * v1226) = *(_WORD *)(v1230 + 2 * v1225);
      if (v1225 != v1226)
      {
        v1239 = *v1231;
        v1240 = v1229 + 12 * v1226;
        *(_DWORD *)(v1240 + 8) = *((_DWORD *)v1231 + 2);
        *(_QWORD *)v1240 = v1239;
      }
      ++v1226;
LABEL_1808:
      if (++v1225 == v1224)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1828;
      }
    }
    v1233 = *(_DWORD *)v1231;
    v1234 = *((_DWORD *)v1231 + 1);
    v1235 = *((_DWORD *)v1231 + 2);
    while (1)
    {
      v1236 = *((_DWORD *)v1232 + 7);
      if (v1233 == v1236)
      {
        v1237 = *((_DWORD *)v1232 + 8);
        if (v1234 == v1237)
        {
          v1238 = *((_DWORD *)v1232 + 9);
          if (v1235 < v1238)
            goto LABEL_1812;
          if (v1238 >= v1235)
            goto LABEL_1808;
        }
        else
        {
          if (v1234 < v1237)
            goto LABEL_1812;
          if (v1237 >= v1234)
            goto LABEL_1808;
        }
      }
      else
      {
        if (v1233 < v1236)
          goto LABEL_1812;
        if (v1236 >= v1233)
          goto LABEL_1808;
      }
      ++v1232;
LABEL_1812:
      v1232 = (uint64_t *)*v1232;
      if (!v1232)
        goto LABEL_1824;
    }
  }
  v1226 = 0;
LABEL_1828:
  *v1223 = v1226;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v95 = v3[311];
  if (v95 >> 30)
    v1241 = 1;
  else
    v1241 = (_DWORD)v95 == v5;
  if (v1241)
    goto LABEL_231;
LABEL_1832:
  v1242 = *(_QWORD *)(v1[2] + 8);
  v1243 = v95 & 0xFFFFFFFFCFFFFFFFLL;
  v1244 = *(_QWORD *)(*(_QWORD *)(v1242 + 8) + 2448);
  v1245 = (unsigned int *)(v1244 + 520 * (v95 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1246 = *v1245;
  if ((_DWORD)v1246)
  {
    v1247 = 0;
    v1248 = 0;
    v1249 = **(_QWORD **)(v1242 + 16);
    v1250 = v1244 + 520 * v1243;
    v1251 = v1250 + 364;
    v1252 = v1250 + 340;
    while (1)
    {
      v1253 = (uint64_t *)(v1251 + 12 * v1247);
      v1254 = *(uint64_t **)(v1249 + 2512);
      if (v1254)
        break;
LABEL_1851:
      *(_WORD *)(v1252 + 2 * v1248) = *(_WORD *)(v1252 + 2 * v1247);
      if (v1247 != v1248)
      {
        v1261 = *v1253;
        v1262 = v1251 + 12 * v1248;
        *(_DWORD *)(v1262 + 8) = *((_DWORD *)v1253 + 2);
        *(_QWORD *)v1262 = v1261;
      }
      ++v1248;
LABEL_1835:
      if (++v1247 == v1246)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1855;
      }
    }
    v1255 = *(_DWORD *)v1253;
    v1256 = *((_DWORD *)v1253 + 1);
    v1257 = *((_DWORD *)v1253 + 2);
    while (1)
    {
      v1258 = *((_DWORD *)v1254 + 7);
      if (v1255 == v1258)
      {
        v1259 = *((_DWORD *)v1254 + 8);
        if (v1256 == v1259)
        {
          v1260 = *((_DWORD *)v1254 + 9);
          if (v1257 < v1260)
            goto LABEL_1839;
          if (v1260 >= v1257)
            goto LABEL_1835;
        }
        else
        {
          if (v1256 < v1259)
            goto LABEL_1839;
          if (v1259 >= v1256)
            goto LABEL_1835;
        }
      }
      else
      {
        if (v1255 < v1258)
          goto LABEL_1839;
        if (v1258 >= v1255)
          goto LABEL_1835;
      }
      ++v1254;
LABEL_1839:
      v1254 = (uint64_t *)*v1254;
      if (!v1254)
        goto LABEL_1851;
    }
  }
  v1248 = 0;
LABEL_1855:
  *v1245 = v1248;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v97 = v3[312];
  if (v97 >> 30)
    v1263 = 1;
  else
    v1263 = (_DWORD)v97 == v5;
  if (v1263)
    goto LABEL_236;
LABEL_1859:
  v1264 = *(_QWORD *)(v1[2] + 8);
  v1265 = v97 & 0xFFFFFFFFCFFFFFFFLL;
  v1266 = *(_QWORD *)(*(_QWORD *)(v1264 + 8) + 2448);
  v1267 = (unsigned int *)(v1266 + 520 * (v97 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1268 = *v1267;
  if ((_DWORD)v1268)
  {
    v1269 = 0;
    v1270 = 0;
    v1271 = **(_QWORD **)(v1264 + 16);
    v1272 = v1266 + 520 * v1265;
    v1273 = v1272 + 364;
    v1274 = v1272 + 340;
    while (1)
    {
      v1275 = (uint64_t *)(v1273 + 12 * v1269);
      v1276 = *(uint64_t **)(v1271 + 2512);
      if (v1276)
        break;
LABEL_1878:
      *(_WORD *)(v1274 + 2 * v1270) = *(_WORD *)(v1274 + 2 * v1269);
      if (v1269 != v1270)
      {
        v1283 = *v1275;
        v1284 = v1273 + 12 * v1270;
        *(_DWORD *)(v1284 + 8) = *((_DWORD *)v1275 + 2);
        *(_QWORD *)v1284 = v1283;
      }
      ++v1270;
LABEL_1862:
      if (++v1269 == v1268)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1882;
      }
    }
    v1277 = *(_DWORD *)v1275;
    v1278 = *((_DWORD *)v1275 + 1);
    v1279 = *((_DWORD *)v1275 + 2);
    while (1)
    {
      v1280 = *((_DWORD *)v1276 + 7);
      if (v1277 == v1280)
      {
        v1281 = *((_DWORD *)v1276 + 8);
        if (v1278 == v1281)
        {
          v1282 = *((_DWORD *)v1276 + 9);
          if (v1279 < v1282)
            goto LABEL_1866;
          if (v1282 >= v1279)
            goto LABEL_1862;
        }
        else
        {
          if (v1278 < v1281)
            goto LABEL_1866;
          if (v1281 >= v1278)
            goto LABEL_1862;
        }
      }
      else
      {
        if (v1277 < v1280)
          goto LABEL_1866;
        if (v1280 >= v1277)
          goto LABEL_1862;
      }
      ++v1276;
LABEL_1866:
      v1276 = (uint64_t *)*v1276;
      if (!v1276)
        goto LABEL_1878;
    }
  }
  v1270 = 0;
LABEL_1882:
  *v1267 = v1270;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v99 = v3[313];
  if (v99 >> 30)
    v1285 = 1;
  else
    v1285 = (_DWORD)v99 == v5;
  if (v1285)
    goto LABEL_241;
LABEL_1886:
  v1286 = *(_QWORD *)(v1[2] + 8);
  v1287 = v99 & 0xFFFFFFFFCFFFFFFFLL;
  v1288 = *(_QWORD *)(*(_QWORD *)(v1286 + 8) + 2448);
  v1289 = (unsigned int *)(v1288 + 520 * (v99 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1290 = *v1289;
  if ((_DWORD)v1290)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = **(_QWORD **)(v1286 + 16);
    v1294 = v1288 + 520 * v1287;
    v1295 = v1294 + 364;
    v1296 = v1294 + 340;
    while (1)
    {
      v1297 = (uint64_t *)(v1295 + 12 * v1291);
      v1298 = *(uint64_t **)(v1293 + 2512);
      if (v1298)
        break;
LABEL_1905:
      *(_WORD *)(v1296 + 2 * v1292) = *(_WORD *)(v1296 + 2 * v1291);
      if (v1291 != v1292)
      {
        v1305 = *v1297;
        v1306 = v1295 + 12 * v1292;
        *(_DWORD *)(v1306 + 8) = *((_DWORD *)v1297 + 2);
        *(_QWORD *)v1306 = v1305;
      }
      ++v1292;
LABEL_1889:
      if (++v1291 == v1290)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1909;
      }
    }
    v1299 = *(_DWORD *)v1297;
    v1300 = *((_DWORD *)v1297 + 1);
    v1301 = *((_DWORD *)v1297 + 2);
    while (1)
    {
      v1302 = *((_DWORD *)v1298 + 7);
      if (v1299 == v1302)
      {
        v1303 = *((_DWORD *)v1298 + 8);
        if (v1300 == v1303)
        {
          v1304 = *((_DWORD *)v1298 + 9);
          if (v1301 < v1304)
            goto LABEL_1893;
          if (v1304 >= v1301)
            goto LABEL_1889;
        }
        else
        {
          if (v1300 < v1303)
            goto LABEL_1893;
          if (v1303 >= v1300)
            goto LABEL_1889;
        }
      }
      else
      {
        if (v1299 < v1302)
          goto LABEL_1893;
        if (v1302 >= v1299)
          goto LABEL_1889;
      }
      ++v1298;
LABEL_1893:
      v1298 = (uint64_t *)*v1298;
      if (!v1298)
        goto LABEL_1905;
    }
  }
  v1292 = 0;
LABEL_1909:
  *v1289 = v1292;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v101 = v3[314];
  if (v101 >> 30)
    v1307 = 1;
  else
    v1307 = (_DWORD)v101 == v5;
  if (v1307)
    goto LABEL_246;
LABEL_1913:
  v1308 = *(_QWORD *)(v1[2] + 8);
  v1309 = v101 & 0xFFFFFFFFCFFFFFFFLL;
  v1310 = *(_QWORD *)(*(_QWORD *)(v1308 + 8) + 2448);
  v1311 = (unsigned int *)(v1310 + 520 * (v101 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1312 = *v1311;
  if ((_DWORD)v1312)
  {
    v1313 = 0;
    v1314 = 0;
    v1315 = **(_QWORD **)(v1308 + 16);
    v1316 = v1310 + 520 * v1309;
    v1317 = v1316 + 364;
    v1318 = v1316 + 340;
    while (1)
    {
      v1319 = (uint64_t *)(v1317 + 12 * v1313);
      v1320 = *(uint64_t **)(v1315 + 2512);
      if (v1320)
        break;
LABEL_1932:
      *(_WORD *)(v1318 + 2 * v1314) = *(_WORD *)(v1318 + 2 * v1313);
      if (v1313 != v1314)
      {
        v1327 = *v1319;
        v1328 = v1317 + 12 * v1314;
        *(_DWORD *)(v1328 + 8) = *((_DWORD *)v1319 + 2);
        *(_QWORD *)v1328 = v1327;
      }
      ++v1314;
LABEL_1916:
      if (++v1313 == v1312)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1936;
      }
    }
    v1321 = *(_DWORD *)v1319;
    v1322 = *((_DWORD *)v1319 + 1);
    v1323 = *((_DWORD *)v1319 + 2);
    while (1)
    {
      v1324 = *((_DWORD *)v1320 + 7);
      if (v1321 == v1324)
      {
        v1325 = *((_DWORD *)v1320 + 8);
        if (v1322 == v1325)
        {
          v1326 = *((_DWORD *)v1320 + 9);
          if (v1323 < v1326)
            goto LABEL_1920;
          if (v1326 >= v1323)
            goto LABEL_1916;
        }
        else
        {
          if (v1322 < v1325)
            goto LABEL_1920;
          if (v1325 >= v1322)
            goto LABEL_1916;
        }
      }
      else
      {
        if (v1321 < v1324)
          goto LABEL_1920;
        if (v1324 >= v1321)
          goto LABEL_1916;
      }
      ++v1320;
LABEL_1920:
      v1320 = (uint64_t *)*v1320;
      if (!v1320)
        goto LABEL_1932;
    }
  }
  v1314 = 0;
LABEL_1936:
  *v1311 = v1314;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v103 = v3[315];
  if (v103 >> 30)
    v1329 = 1;
  else
    v1329 = (_DWORD)v103 == v5;
  if (v1329)
    goto LABEL_251;
LABEL_1940:
  v1330 = *(_QWORD *)(v1[2] + 8);
  v1331 = v103 & 0xFFFFFFFFCFFFFFFFLL;
  v1332 = *(_QWORD *)(*(_QWORD *)(v1330 + 8) + 2448);
  v1333 = (unsigned int *)(v1332 + 520 * (v103 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1334 = *v1333;
  if ((_DWORD)v1334)
  {
    v1335 = 0;
    v1336 = 0;
    v1337 = **(_QWORD **)(v1330 + 16);
    v1338 = v1332 + 520 * v1331;
    v1339 = v1338 + 364;
    v1340 = v1338 + 340;
    while (1)
    {
      v1341 = (uint64_t *)(v1339 + 12 * v1335);
      v1342 = *(uint64_t **)(v1337 + 2512);
      if (v1342)
        break;
LABEL_1959:
      *(_WORD *)(v1340 + 2 * v1336) = *(_WORD *)(v1340 + 2 * v1335);
      if (v1335 != v1336)
      {
        v1349 = *v1341;
        v1350 = v1339 + 12 * v1336;
        *(_DWORD *)(v1350 + 8) = *((_DWORD *)v1341 + 2);
        *(_QWORD *)v1350 = v1349;
      }
      ++v1336;
LABEL_1943:
      if (++v1335 == v1334)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1963;
      }
    }
    v1343 = *(_DWORD *)v1341;
    v1344 = *((_DWORD *)v1341 + 1);
    v1345 = *((_DWORD *)v1341 + 2);
    while (1)
    {
      v1346 = *((_DWORD *)v1342 + 7);
      if (v1343 == v1346)
      {
        v1347 = *((_DWORD *)v1342 + 8);
        if (v1344 == v1347)
        {
          v1348 = *((_DWORD *)v1342 + 9);
          if (v1345 < v1348)
            goto LABEL_1947;
          if (v1348 >= v1345)
            goto LABEL_1943;
        }
        else
        {
          if (v1344 < v1347)
            goto LABEL_1947;
          if (v1347 >= v1344)
            goto LABEL_1943;
        }
      }
      else
      {
        if (v1343 < v1346)
          goto LABEL_1947;
        if (v1346 >= v1343)
          goto LABEL_1943;
      }
      ++v1342;
LABEL_1947:
      v1342 = (uint64_t *)*v1342;
      if (!v1342)
        goto LABEL_1959;
    }
  }
  v1336 = 0;
LABEL_1963:
  *v1333 = v1336;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v105 = v3[316];
  if (v105 >> 30)
    v1351 = 1;
  else
    v1351 = (_DWORD)v105 == v5;
  if (v1351)
    goto LABEL_256;
LABEL_1967:
  v1352 = *(_QWORD *)(v1[2] + 8);
  v1353 = v105 & 0xFFFFFFFFCFFFFFFFLL;
  v1354 = *(_QWORD *)(*(_QWORD *)(v1352 + 8) + 2448);
  v1355 = (unsigned int *)(v1354 + 520 * (v105 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1356 = *v1355;
  if ((_DWORD)v1356)
  {
    v1357 = 0;
    v1358 = 0;
    v1359 = **(_QWORD **)(v1352 + 16);
    v1360 = v1354 + 520 * v1353;
    v1361 = v1360 + 364;
    v1362 = v1360 + 340;
    while (1)
    {
      v1363 = (uint64_t *)(v1361 + 12 * v1357);
      v1364 = *(uint64_t **)(v1359 + 2512);
      if (v1364)
        break;
LABEL_1986:
      *(_WORD *)(v1362 + 2 * v1358) = *(_WORD *)(v1362 + 2 * v1357);
      if (v1357 != v1358)
      {
        v1371 = *v1363;
        v1372 = v1361 + 12 * v1358;
        *(_DWORD *)(v1372 + 8) = *((_DWORD *)v1363 + 2);
        *(_QWORD *)v1372 = v1371;
      }
      ++v1358;
LABEL_1970:
      if (++v1357 == v1356)
        goto LABEL_1989;
    }
    v1365 = *(_DWORD *)v1363;
    v1366 = *((_DWORD *)v1363 + 1);
    v1367 = *((_DWORD *)v1363 + 2);
    while (1)
    {
      v1368 = *((_DWORD *)v1364 + 7);
      if (v1365 == v1368)
      {
        v1369 = *((_DWORD *)v1364 + 8);
        if (v1366 == v1369)
        {
          v1370 = *((_DWORD *)v1364 + 9);
          if (v1367 < v1370)
            goto LABEL_1974;
          if (v1370 >= v1367)
            goto LABEL_1970;
        }
        else
        {
          if (v1366 < v1369)
            goto LABEL_1974;
          if (v1369 >= v1366)
            goto LABEL_1970;
        }
      }
      else
      {
        if (v1365 < v1368)
          goto LABEL_1974;
        if (v1368 >= v1365)
          goto LABEL_1970;
      }
      ++v1364;
LABEL_1974:
      v1364 = (uint64_t *)*v1364;
      if (!v1364)
        goto LABEL_1986;
    }
  }
  v1358 = 0;
LABEL_1989:
  *v1355 = v1358;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v107 = v3[317];
  if (v107 >> 30)
    v1373 = 1;
  else
    v1373 = (_DWORD)v107 == v5;
  if (v1373)
    goto LABEL_261;
LABEL_1993:
  v1374 = *(_QWORD *)(v1[2] + 8);
  v1375 = v107 & 0xFFFFFFFFCFFFFFFFLL;
  v1376 = *(_QWORD *)(*(_QWORD *)(v1374 + 8) + 2448);
  v1377 = (unsigned int *)(v1376 + 520 * (v107 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1378 = *v1377;
  if ((_DWORD)v1378)
  {
    v1379 = 0;
    v1380 = 0;
    v1381 = **(_QWORD **)(v1374 + 16);
    v1382 = v1376 + 520 * v1375;
    v1383 = v1382 + 364;
    v1384 = v1382 + 340;
    while (1)
    {
      v1385 = (uint64_t *)(v1383 + 12 * v1379);
      v1386 = *(uint64_t **)(v1381 + 2512);
      if (v1386)
        break;
LABEL_2012:
      *(_WORD *)(v1384 + 2 * v1380) = *(_WORD *)(v1384 + 2 * v1379);
      if (v1379 != v1380)
      {
        v1393 = *v1385;
        v1394 = v1383 + 12 * v1380;
        *(_DWORD *)(v1394 + 8) = *((_DWORD *)v1385 + 2);
        *(_QWORD *)v1394 = v1393;
      }
      ++v1380;
LABEL_1996:
      if (++v1379 == v1378)
        goto LABEL_2015;
    }
    v1387 = *(_DWORD *)v1385;
    v1388 = *((_DWORD *)v1385 + 1);
    v1389 = *((_DWORD *)v1385 + 2);
    while (1)
    {
      v1390 = *((_DWORD *)v1386 + 7);
      if (v1387 == v1390)
      {
        v1391 = *((_DWORD *)v1386 + 8);
        if (v1388 == v1391)
        {
          v1392 = *((_DWORD *)v1386 + 9);
          if (v1389 < v1392)
            goto LABEL_2000;
          if (v1392 >= v1389)
            goto LABEL_1996;
        }
        else
        {
          if (v1388 < v1391)
            goto LABEL_2000;
          if (v1391 >= v1388)
            goto LABEL_1996;
        }
      }
      else
      {
        if (v1387 < v1390)
          goto LABEL_2000;
        if (v1390 >= v1387)
          goto LABEL_1996;
      }
      ++v1386;
LABEL_2000:
      v1386 = (uint64_t *)*v1386;
      if (!v1386)
        goto LABEL_2012;
    }
  }
  v1380 = 0;
LABEL_2015:
  *v1377 = v1380;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v109 = v3[318];
  if (v109 >> 30)
    v1395 = 1;
  else
    v1395 = (_DWORD)v109 == v5;
  if (v1395)
    goto LABEL_266;
LABEL_2019:
  v1396 = *(_QWORD *)(v1[2] + 8);
  v1397 = v109 & 0xFFFFFFFFCFFFFFFFLL;
  v1398 = *(_QWORD *)(*(_QWORD *)(v1396 + 8) + 2448);
  v1399 = (unsigned int *)(v1398 + 520 * (v109 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1400 = *v1399;
  if ((_DWORD)v1400)
  {
    v1401 = 0;
    v1402 = 0;
    v1403 = **(_QWORD **)(v1396 + 16);
    v1404 = v1398 + 520 * v1397;
    v1405 = v1404 + 364;
    v1406 = v1404 + 340;
    while (1)
    {
      v1407 = (uint64_t *)(v1405 + 12 * v1401);
      v1408 = *(uint64_t **)(v1403 + 2512);
      if (v1408)
        break;
LABEL_2038:
      *(_WORD *)(v1406 + 2 * v1402) = *(_WORD *)(v1406 + 2 * v1401);
      if (v1401 != v1402)
      {
        v1415 = *v1407;
        v1416 = v1405 + 12 * v1402;
        *(_DWORD *)(v1416 + 8) = *((_DWORD *)v1407 + 2);
        *(_QWORD *)v1416 = v1415;
      }
      ++v1402;
LABEL_2022:
      if (++v1401 == v1400)
        goto LABEL_2041;
    }
    v1409 = *(_DWORD *)v1407;
    v1410 = *((_DWORD *)v1407 + 1);
    v1411 = *((_DWORD *)v1407 + 2);
    while (1)
    {
      v1412 = *((_DWORD *)v1408 + 7);
      if (v1409 == v1412)
      {
        v1413 = *((_DWORD *)v1408 + 8);
        if (v1410 == v1413)
        {
          v1414 = *((_DWORD *)v1408 + 9);
          if (v1411 < v1414)
            goto LABEL_2026;
          if (v1414 >= v1411)
            goto LABEL_2022;
        }
        else
        {
          if (v1410 < v1413)
            goto LABEL_2026;
          if (v1413 >= v1410)
            goto LABEL_2022;
        }
      }
      else
      {
        if (v1409 < v1412)
          goto LABEL_2026;
        if (v1412 >= v1409)
          goto LABEL_2022;
      }
      ++v1408;
LABEL_2026:
      v1408 = (uint64_t *)*v1408;
      if (!v1408)
        goto LABEL_2038;
    }
  }
  v1402 = 0;
LABEL_2041:
  *v1399 = v1402;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v111 = v3[319];
  if (v111 >> 30)
    v1417 = 1;
  else
    v1417 = (_DWORD)v111 == v5;
  if (v1417)
    goto LABEL_271;
LABEL_2045:
  v1418 = *(_QWORD *)(v1[2] + 8);
  v1419 = v111 & 0xFFFFFFFFCFFFFFFFLL;
  v1420 = *(_QWORD *)(*(_QWORD *)(v1418 + 8) + 2448);
  v1421 = (unsigned int *)(v1420 + 520 * (v111 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1422 = *v1421;
  if ((_DWORD)v1422)
  {
    v1423 = 0;
    v1424 = 0;
    v1425 = **(_QWORD **)(v1418 + 16);
    v1426 = v1420 + 520 * v1419;
    v1427 = v1426 + 364;
    v1428 = v1426 + 340;
    while (1)
    {
      v1429 = (uint64_t *)(v1427 + 12 * v1423);
      v1430 = *(uint64_t **)(v1425 + 2512);
      if (v1430)
        break;
LABEL_2064:
      *(_WORD *)(v1428 + 2 * v1424) = *(_WORD *)(v1428 + 2 * v1423);
      if (v1423 != v1424)
      {
        v1437 = *v1429;
        v1438 = v1427 + 12 * v1424;
        *(_DWORD *)(v1438 + 8) = *((_DWORD *)v1429 + 2);
        *(_QWORD *)v1438 = v1437;
      }
      ++v1424;
LABEL_2048:
      if (++v1423 == v1422)
        goto LABEL_2067;
    }
    v1431 = *(_DWORD *)v1429;
    v1432 = *((_DWORD *)v1429 + 1);
    v1433 = *((_DWORD *)v1429 + 2);
    while (1)
    {
      v1434 = *((_DWORD *)v1430 + 7);
      if (v1431 == v1434)
      {
        v1435 = *((_DWORD *)v1430 + 8);
        if (v1432 == v1435)
        {
          v1436 = *((_DWORD *)v1430 + 9);
          if (v1433 < v1436)
            goto LABEL_2052;
          if (v1436 >= v1433)
            goto LABEL_2048;
        }
        else
        {
          if (v1432 < v1435)
            goto LABEL_2052;
          if (v1435 >= v1432)
            goto LABEL_2048;
        }
      }
      else
      {
        if (v1431 < v1434)
          goto LABEL_2052;
        if (v1434 >= v1431)
          goto LABEL_2048;
      }
      ++v1430;
LABEL_2052:
      v1430 = (uint64_t *)*v1430;
      if (!v1430)
        goto LABEL_2064;
    }
  }
  v1424 = 0;
LABEL_2067:
  *v1421 = v1424;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v113 = v3[320];
  if (v113 >> 30)
    v1439 = 1;
  else
    v1439 = (_DWORD)v113 == v5;
  if (v1439)
    goto LABEL_276;
LABEL_2071:
  v1440 = *(_QWORD *)(v1[2] + 8);
  v1441 = v113 & 0xFFFFFFFFCFFFFFFFLL;
  v1442 = *(_QWORD *)(*(_QWORD *)(v1440 + 8) + 2448);
  v1443 = (unsigned int *)(v1442 + 520 * (v113 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1444 = *v1443;
  if ((_DWORD)v1444)
  {
    v1445 = 0;
    v1446 = 0;
    v1447 = **(_QWORD **)(v1440 + 16);
    v1448 = v1442 + 520 * v1441;
    v1449 = v1448 + 364;
    v1450 = v1448 + 340;
    while (1)
    {
      v1451 = (uint64_t *)(v1449 + 12 * v1445);
      v1452 = *(uint64_t **)(v1447 + 2512);
      if (v1452)
        break;
LABEL_2090:
      *(_WORD *)(v1450 + 2 * v1446) = *(_WORD *)(v1450 + 2 * v1445);
      if (v1445 != v1446)
      {
        v1459 = *v1451;
        v1460 = v1449 + 12 * v1446;
        *(_DWORD *)(v1460 + 8) = *((_DWORD *)v1451 + 2);
        *(_QWORD *)v1460 = v1459;
      }
      ++v1446;
LABEL_2074:
      if (++v1445 == v1444)
        goto LABEL_2093;
    }
    v1453 = *(_DWORD *)v1451;
    v1454 = *((_DWORD *)v1451 + 1);
    v1455 = *((_DWORD *)v1451 + 2);
    while (1)
    {
      v1456 = *((_DWORD *)v1452 + 7);
      if (v1453 == v1456)
      {
        v1457 = *((_DWORD *)v1452 + 8);
        if (v1454 == v1457)
        {
          v1458 = *((_DWORD *)v1452 + 9);
          if (v1455 < v1458)
            goto LABEL_2078;
          if (v1458 >= v1455)
            goto LABEL_2074;
        }
        else
        {
          if (v1454 < v1457)
            goto LABEL_2078;
          if (v1457 >= v1454)
            goto LABEL_2074;
        }
      }
      else
      {
        if (v1453 < v1456)
          goto LABEL_2078;
        if (v1456 >= v1453)
          goto LABEL_2074;
      }
      ++v1452;
LABEL_2078:
      v1452 = (uint64_t *)*v1452;
      if (!v1452)
        goto LABEL_2090;
    }
  }
  v1446 = 0;
LABEL_2093:
  *v1443 = v1446;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v115 = v3[321];
  if (v115 >> 30)
    v1461 = 1;
  else
    v1461 = (_DWORD)v115 == v5;
  if (v1461)
    goto LABEL_281;
LABEL_2097:
  v1462 = *(_QWORD *)(v1[2] + 8);
  v1463 = v115 & 0xFFFFFFFFCFFFFFFFLL;
  v1464 = *(_QWORD *)(*(_QWORD *)(v1462 + 8) + 2448);
  v1465 = (unsigned int *)(v1464 + 520 * (v115 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1466 = *v1465;
  if ((_DWORD)v1466)
  {
    v1467 = 0;
    v1468 = 0;
    v1469 = **(_QWORD **)(v1462 + 16);
    v1470 = v1464 + 520 * v1463;
    v1471 = v1470 + 364;
    v1472 = v1470 + 340;
    while (1)
    {
      v1473 = (uint64_t *)(v1471 + 12 * v1467);
      v1474 = *(uint64_t **)(v1469 + 2512);
      if (v1474)
        break;
LABEL_2116:
      *(_WORD *)(v1472 + 2 * v1468) = *(_WORD *)(v1472 + 2 * v1467);
      if (v1467 != v1468)
      {
        v1481 = *v1473;
        v1482 = v1471 + 12 * v1468;
        *(_DWORD *)(v1482 + 8) = *((_DWORD *)v1473 + 2);
        *(_QWORD *)v1482 = v1481;
      }
      ++v1468;
LABEL_2100:
      if (++v1467 == v1466)
        goto LABEL_2119;
    }
    v1475 = *(_DWORD *)v1473;
    v1476 = *((_DWORD *)v1473 + 1);
    v1477 = *((_DWORD *)v1473 + 2);
    while (1)
    {
      v1478 = *((_DWORD *)v1474 + 7);
      if (v1475 == v1478)
      {
        v1479 = *((_DWORD *)v1474 + 8);
        if (v1476 == v1479)
        {
          v1480 = *((_DWORD *)v1474 + 9);
          if (v1477 < v1480)
            goto LABEL_2104;
          if (v1480 >= v1477)
            goto LABEL_2100;
        }
        else
        {
          if (v1476 < v1479)
            goto LABEL_2104;
          if (v1479 >= v1476)
            goto LABEL_2100;
        }
      }
      else
      {
        if (v1475 < v1478)
          goto LABEL_2104;
        if (v1478 >= v1475)
          goto LABEL_2100;
      }
      ++v1474;
LABEL_2104:
      v1474 = (uint64_t *)*v1474;
      if (!v1474)
        goto LABEL_2116;
    }
  }
  v1468 = 0;
LABEL_2119:
  *v1465 = v1468;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v117 = v3[322];
  if (v117 >> 30)
    v1483 = 1;
  else
    v1483 = (_DWORD)v117 == v5;
  if (v1483)
    goto LABEL_286;
LABEL_2123:
  v1484 = *(_QWORD *)(v1[2] + 8);
  v1485 = v117 & 0xFFFFFFFFCFFFFFFFLL;
  v1486 = *(_QWORD *)(*(_QWORD *)(v1484 + 8) + 2448);
  v1487 = (unsigned int *)(v1486 + 520 * (v117 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1488 = *v1487;
  if ((_DWORD)v1488)
  {
    v1489 = 0;
    v1490 = 0;
    v1491 = **(_QWORD **)(v1484 + 16);
    v1492 = v1486 + 520 * v1485;
    v1493 = v1492 + 364;
    v1494 = v1492 + 340;
    while (1)
    {
      v1495 = (uint64_t *)(v1493 + 12 * v1489);
      v1496 = *(uint64_t **)(v1491 + 2512);
      if (v1496)
        break;
LABEL_2142:
      *(_WORD *)(v1494 + 2 * v1490) = *(_WORD *)(v1494 + 2 * v1489);
      if (v1489 != v1490)
      {
        v1503 = *v1495;
        v1504 = v1493 + 12 * v1490;
        *(_DWORD *)(v1504 + 8) = *((_DWORD *)v1495 + 2);
        *(_QWORD *)v1504 = v1503;
      }
      ++v1490;
LABEL_2126:
      if (++v1489 == v1488)
        goto LABEL_2145;
    }
    v1497 = *(_DWORD *)v1495;
    v1498 = *((_DWORD *)v1495 + 1);
    v1499 = *((_DWORD *)v1495 + 2);
    while (1)
    {
      v1500 = *((_DWORD *)v1496 + 7);
      if (v1497 == v1500)
      {
        v1501 = *((_DWORD *)v1496 + 8);
        if (v1498 == v1501)
        {
          v1502 = *((_DWORD *)v1496 + 9);
          if (v1499 < v1502)
            goto LABEL_2130;
          if (v1502 >= v1499)
            goto LABEL_2126;
        }
        else
        {
          if (v1498 < v1501)
            goto LABEL_2130;
          if (v1501 >= v1498)
            goto LABEL_2126;
        }
      }
      else
      {
        if (v1497 < v1500)
          goto LABEL_2130;
        if (v1500 >= v1497)
          goto LABEL_2126;
      }
      ++v1496;
LABEL_2130:
      v1496 = (uint64_t *)*v1496;
      if (!v1496)
        goto LABEL_2142;
    }
  }
  v1490 = 0;
LABEL_2145:
  *v1487 = v1490;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v119 = v3[323];
  if (v119 >> 30)
    v1505 = 1;
  else
    v1505 = (_DWORD)v119 == v5;
  if (v1505)
    goto LABEL_291;
LABEL_2149:
  v1506 = *(_QWORD *)(v1[2] + 8);
  v1507 = v119 & 0xFFFFFFFFCFFFFFFFLL;
  v1508 = *(_QWORD *)(*(_QWORD *)(v1506 + 8) + 2448);
  v1509 = (unsigned int *)(v1508 + 520 * (v119 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1510 = *v1509;
  if ((_DWORD)v1510)
  {
    v1511 = 0;
    v1512 = 0;
    v1513 = **(_QWORD **)(v1506 + 16);
    v1514 = v1508 + 520 * v1507;
    v1515 = v1514 + 364;
    v1516 = v1514 + 340;
    while (1)
    {
      v1517 = (uint64_t *)(v1515 + 12 * v1511);
      v1518 = *(uint64_t **)(v1513 + 2512);
      if (v1518)
        break;
LABEL_2168:
      *(_WORD *)(v1516 + 2 * v1512) = *(_WORD *)(v1516 + 2 * v1511);
      if (v1511 != v1512)
      {
        v1525 = *v1517;
        v1526 = v1515 + 12 * v1512;
        *(_DWORD *)(v1526 + 8) = *((_DWORD *)v1517 + 2);
        *(_QWORD *)v1526 = v1525;
      }
      ++v1512;
LABEL_2152:
      if (++v1511 == v1510)
        goto LABEL_2171;
    }
    v1519 = *(_DWORD *)v1517;
    v1520 = *((_DWORD *)v1517 + 1);
    v1521 = *((_DWORD *)v1517 + 2);
    while (1)
    {
      v1522 = *((_DWORD *)v1518 + 7);
      if (v1519 == v1522)
      {
        v1523 = *((_DWORD *)v1518 + 8);
        if (v1520 == v1523)
        {
          v1524 = *((_DWORD *)v1518 + 9);
          if (v1521 < v1524)
            goto LABEL_2156;
          if (v1524 >= v1521)
            goto LABEL_2152;
        }
        else
        {
          if (v1520 < v1523)
            goto LABEL_2156;
          if (v1523 >= v1520)
            goto LABEL_2152;
        }
      }
      else
      {
        if (v1519 < v1522)
          goto LABEL_2156;
        if (v1522 >= v1519)
          goto LABEL_2152;
      }
      ++v1518;
LABEL_2156:
      v1518 = (uint64_t *)*v1518;
      if (!v1518)
        goto LABEL_2168;
    }
  }
  v1512 = 0;
LABEL_2171:
  *v1509 = v1512;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v121 = v3[324];
  if (v121 >> 30)
    v1527 = 1;
  else
    v1527 = (_DWORD)v121 == v5;
  if (v1527)
    goto LABEL_296;
LABEL_2175:
  v1528 = *(_QWORD *)(v1[2] + 8);
  v1529 = v121 & 0xFFFFFFFFCFFFFFFFLL;
  v1530 = *(_QWORD *)(*(_QWORD *)(v1528 + 8) + 2448);
  v1531 = (unsigned int *)(v1530 + 520 * (v121 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1532 = *v1531;
  if ((_DWORD)v1532)
  {
    v1533 = 0;
    v1534 = 0;
    v1535 = **(_QWORD **)(v1528 + 16);
    v1536 = v1530 + 520 * v1529;
    v1537 = v1536 + 364;
    v1538 = v1536 + 340;
    while (1)
    {
      v1539 = (uint64_t *)(v1537 + 12 * v1533);
      v1540 = *(uint64_t **)(v1535 + 2512);
      if (v1540)
        break;
LABEL_2194:
      *(_WORD *)(v1538 + 2 * v1534) = *(_WORD *)(v1538 + 2 * v1533);
      if (v1533 != v1534)
      {
        v1547 = *v1539;
        v1548 = v1537 + 12 * v1534;
        *(_DWORD *)(v1548 + 8) = *((_DWORD *)v1539 + 2);
        *(_QWORD *)v1548 = v1547;
      }
      ++v1534;
LABEL_2178:
      if (++v1533 == v1532)
        goto LABEL_2197;
    }
    v1541 = *(_DWORD *)v1539;
    v1542 = *((_DWORD *)v1539 + 1);
    v1543 = *((_DWORD *)v1539 + 2);
    while (1)
    {
      v1544 = *((_DWORD *)v1540 + 7);
      if (v1541 == v1544)
      {
        v1545 = *((_DWORD *)v1540 + 8);
        if (v1542 == v1545)
        {
          v1546 = *((_DWORD *)v1540 + 9);
          if (v1543 < v1546)
            goto LABEL_2182;
          if (v1546 >= v1543)
            goto LABEL_2178;
        }
        else
        {
          if (v1542 < v1545)
            goto LABEL_2182;
          if (v1545 >= v1542)
            goto LABEL_2178;
        }
      }
      else
      {
        if (v1541 < v1544)
          goto LABEL_2182;
        if (v1544 >= v1541)
          goto LABEL_2178;
      }
      ++v1540;
LABEL_2182:
      v1540 = (uint64_t *)*v1540;
      if (!v1540)
        goto LABEL_2194;
    }
  }
  v1534 = 0;
LABEL_2197:
  *v1531 = v1534;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v123 = v3[325];
  if (v123 >> 30)
    v1549 = 1;
  else
    v1549 = (_DWORD)v123 == v5;
  if (v1549)
    goto LABEL_301;
LABEL_2201:
  v1550 = *(_QWORD *)(v1[2] + 8);
  v1551 = v123 & 0xFFFFFFFFCFFFFFFFLL;
  v1552 = *(_QWORD *)(*(_QWORD *)(v1550 + 8) + 2448);
  v1553 = (unsigned int *)(v1552 + 520 * (v123 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1554 = *v1553;
  if ((_DWORD)v1554)
  {
    v1555 = 0;
    v1556 = 0;
    v1557 = **(_QWORD **)(v1550 + 16);
    v1558 = v1552 + 520 * v1551;
    v1559 = v1558 + 364;
    v1560 = v1558 + 340;
    while (1)
    {
      v1561 = (uint64_t *)(v1559 + 12 * v1555);
      v1562 = *(uint64_t **)(v1557 + 2512);
      if (v1562)
        break;
LABEL_2220:
      *(_WORD *)(v1560 + 2 * v1556) = *(_WORD *)(v1560 + 2 * v1555);
      if (v1555 != v1556)
      {
        v1569 = *v1561;
        v1570 = v1559 + 12 * v1556;
        *(_DWORD *)(v1570 + 8) = *((_DWORD *)v1561 + 2);
        *(_QWORD *)v1570 = v1569;
      }
      ++v1556;
LABEL_2204:
      if (++v1555 == v1554)
        goto LABEL_2223;
    }
    v1563 = *(_DWORD *)v1561;
    v1564 = *((_DWORD *)v1561 + 1);
    v1565 = *((_DWORD *)v1561 + 2);
    while (1)
    {
      v1566 = *((_DWORD *)v1562 + 7);
      if (v1563 == v1566)
      {
        v1567 = *((_DWORD *)v1562 + 8);
        if (v1564 == v1567)
        {
          v1568 = *((_DWORD *)v1562 + 9);
          if (v1565 < v1568)
            goto LABEL_2208;
          if (v1568 >= v1565)
            goto LABEL_2204;
        }
        else
        {
          if (v1564 < v1567)
            goto LABEL_2208;
          if (v1567 >= v1564)
            goto LABEL_2204;
        }
      }
      else
      {
        if (v1563 < v1566)
          goto LABEL_2208;
        if (v1566 >= v1563)
          goto LABEL_2204;
      }
      ++v1562;
LABEL_2208:
      v1562 = (uint64_t *)*v1562;
      if (!v1562)
        goto LABEL_2220;
    }
  }
  v1556 = 0;
LABEL_2223:
  *v1553 = v1556;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v125 = v3[326];
  if (v125 >> 30)
    v1571 = 1;
  else
    v1571 = (_DWORD)v125 == v5;
  if (v1571)
    goto LABEL_306;
LABEL_2227:
  v1572 = *(_QWORD *)(v1[2] + 8);
  v1573 = v125 & 0xFFFFFFFFCFFFFFFFLL;
  v1574 = *(_QWORD *)(*(_QWORD *)(v1572 + 8) + 2448);
  v1575 = (unsigned int *)(v1574 + 520 * (v125 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1576 = *v1575;
  if ((_DWORD)v1576)
  {
    v1577 = 0;
    v1578 = 0;
    v1579 = **(_QWORD **)(v1572 + 16);
    v1580 = v1574 + 520 * v1573;
    v1581 = v1580 + 364;
    v1582 = v1580 + 340;
    while (1)
    {
      v1583 = (uint64_t *)(v1581 + 12 * v1577);
      v1584 = *(uint64_t **)(v1579 + 2512);
      if (v1584)
        break;
LABEL_2246:
      *(_WORD *)(v1582 + 2 * v1578) = *(_WORD *)(v1582 + 2 * v1577);
      if (v1577 != v1578)
      {
        v1591 = *v1583;
        v1592 = v1581 + 12 * v1578;
        *(_DWORD *)(v1592 + 8) = *((_DWORD *)v1583 + 2);
        *(_QWORD *)v1592 = v1591;
      }
      ++v1578;
LABEL_2230:
      if (++v1577 == v1576)
        goto LABEL_2249;
    }
    v1585 = *(_DWORD *)v1583;
    v1586 = *((_DWORD *)v1583 + 1);
    v1587 = *((_DWORD *)v1583 + 2);
    while (1)
    {
      v1588 = *((_DWORD *)v1584 + 7);
      if (v1585 == v1588)
      {
        v1589 = *((_DWORD *)v1584 + 8);
        if (v1586 == v1589)
        {
          v1590 = *((_DWORD *)v1584 + 9);
          if (v1587 < v1590)
            goto LABEL_2234;
          if (v1590 >= v1587)
            goto LABEL_2230;
        }
        else
        {
          if (v1586 < v1589)
            goto LABEL_2234;
          if (v1589 >= v1586)
            goto LABEL_2230;
        }
      }
      else
      {
        if (v1585 < v1588)
          goto LABEL_2234;
        if (v1588 >= v1585)
          goto LABEL_2230;
      }
      ++v1584;
LABEL_2234:
      v1584 = (uint64_t *)*v1584;
      if (!v1584)
        goto LABEL_2246;
    }
  }
  v1578 = 0;
LABEL_2249:
  *v1575 = v1578;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v127 = v3[327];
  if (v127 >> 30)
    v1593 = 1;
  else
    v1593 = (_DWORD)v127 == v5;
  if (v1593)
    goto LABEL_311;
LABEL_2253:
  v1594 = *(_QWORD *)(v1[2] + 8);
  v1595 = v127 & 0xFFFFFFFFCFFFFFFFLL;
  v1596 = *(_QWORD *)(*(_QWORD *)(v1594 + 8) + 2448);
  v1597 = (unsigned int *)(v1596 + 520 * (v127 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1598 = *v1597;
  if ((_DWORD)v1598)
  {
    v1599 = 0;
    v1600 = 0;
    v1601 = **(_QWORD **)(v1594 + 16);
    v1602 = v1596 + 520 * v1595;
    v1603 = v1602 + 364;
    v1604 = v1602 + 340;
    while (1)
    {
      v1605 = (uint64_t *)(v1603 + 12 * v1599);
      v1606 = *(uint64_t **)(v1601 + 2512);
      if (v1606)
        break;
LABEL_2272:
      *(_WORD *)(v1604 + 2 * v1600) = *(_WORD *)(v1604 + 2 * v1599);
      if (v1599 != v1600)
      {
        v1613 = *v1605;
        v1614 = v1603 + 12 * v1600;
        *(_DWORD *)(v1614 + 8) = *((_DWORD *)v1605 + 2);
        *(_QWORD *)v1614 = v1613;
      }
      ++v1600;
LABEL_2256:
      if (++v1599 == v1598)
        goto LABEL_2275;
    }
    v1607 = *(_DWORD *)v1605;
    v1608 = *((_DWORD *)v1605 + 1);
    v1609 = *((_DWORD *)v1605 + 2);
    while (1)
    {
      v1610 = *((_DWORD *)v1606 + 7);
      if (v1607 == v1610)
      {
        v1611 = *((_DWORD *)v1606 + 8);
        if (v1608 == v1611)
        {
          v1612 = *((_DWORD *)v1606 + 9);
          if (v1609 < v1612)
            goto LABEL_2260;
          if (v1612 >= v1609)
            goto LABEL_2256;
        }
        else
        {
          if (v1608 < v1611)
            goto LABEL_2260;
          if (v1611 >= v1608)
            goto LABEL_2256;
        }
      }
      else
      {
        if (v1607 < v1610)
          goto LABEL_2260;
        if (v1610 >= v1607)
          goto LABEL_2256;
      }
      ++v1606;
LABEL_2260:
      v1606 = (uint64_t *)*v1606;
      if (!v1606)
        goto LABEL_2272;
    }
  }
  v1600 = 0;
LABEL_2275:
  *v1597 = v1600;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v129 = v3[328];
  if (v129 >> 30)
    v1615 = 1;
  else
    v1615 = (_DWORD)v129 == v5;
  if (v1615)
    goto LABEL_316;
LABEL_2279:
  v1616 = *(_QWORD *)(v1[2] + 8);
  v1617 = v129 & 0xFFFFFFFFCFFFFFFFLL;
  v1618 = *(_QWORD *)(*(_QWORD *)(v1616 + 8) + 2448);
  v1619 = (unsigned int *)(v1618 + 520 * (v129 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1620 = *v1619;
  if ((_DWORD)v1620)
  {
    v1621 = 0;
    v1622 = 0;
    v1623 = **(_QWORD **)(v1616 + 16);
    v1624 = v1618 + 520 * v1617;
    v1625 = v1624 + 364;
    v1626 = v1624 + 340;
    while (1)
    {
      v1627 = (uint64_t *)(v1625 + 12 * v1621);
      v1628 = *(uint64_t **)(v1623 + 2512);
      if (v1628)
        break;
LABEL_2298:
      *(_WORD *)(v1626 + 2 * v1622) = *(_WORD *)(v1626 + 2 * v1621);
      if (v1621 != v1622)
      {
        v1635 = *v1627;
        v1636 = v1625 + 12 * v1622;
        *(_DWORD *)(v1636 + 8) = *((_DWORD *)v1627 + 2);
        *(_QWORD *)v1636 = v1635;
      }
      ++v1622;
LABEL_2282:
      if (++v1621 == v1620)
        goto LABEL_2301;
    }
    v1629 = *(_DWORD *)v1627;
    v1630 = *((_DWORD *)v1627 + 1);
    v1631 = *((_DWORD *)v1627 + 2);
    while (1)
    {
      v1632 = *((_DWORD *)v1628 + 7);
      if (v1629 == v1632)
      {
        v1633 = *((_DWORD *)v1628 + 8);
        if (v1630 == v1633)
        {
          v1634 = *((_DWORD *)v1628 + 9);
          if (v1631 < v1634)
            goto LABEL_2286;
          if (v1634 >= v1631)
            goto LABEL_2282;
        }
        else
        {
          if (v1630 < v1633)
            goto LABEL_2286;
          if (v1633 >= v1630)
            goto LABEL_2282;
        }
      }
      else
      {
        if (v1629 < v1632)
          goto LABEL_2286;
        if (v1632 >= v1629)
          goto LABEL_2282;
      }
      ++v1628;
LABEL_2286:
      v1628 = (uint64_t *)*v1628;
      if (!v1628)
        goto LABEL_2298;
    }
  }
  v1622 = 0;
LABEL_2301:
  *v1619 = v1622;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v131 = v3[329];
  if (v131 >> 30)
    v1637 = 1;
  else
    v1637 = (_DWORD)v131 == v5;
  if (v1637)
    goto LABEL_321;
LABEL_2305:
  v1638 = *(_QWORD *)(v1[2] + 8);
  v1639 = v131 & 0xFFFFFFFFCFFFFFFFLL;
  v1640 = *(_QWORD *)(*(_QWORD *)(v1638 + 8) + 2448);
  v1641 = (unsigned int *)(v1640 + 520 * (v131 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1642 = *v1641;
  if ((_DWORD)v1642)
  {
    v1643 = 0;
    v1644 = 0;
    v1645 = **(_QWORD **)(v1638 + 16);
    v1646 = v1640 + 520 * v1639;
    v1647 = v1646 + 364;
    v1648 = v1646 + 340;
    while (1)
    {
      v1649 = (uint64_t *)(v1647 + 12 * v1643);
      v1650 = *(uint64_t **)(v1645 + 2512);
      if (v1650)
        break;
LABEL_2324:
      *(_WORD *)(v1648 + 2 * v1644) = *(_WORD *)(v1648 + 2 * v1643);
      if (v1643 != v1644)
      {
        v1657 = *v1649;
        v1658 = v1647 + 12 * v1644;
        *(_DWORD *)(v1658 + 8) = *((_DWORD *)v1649 + 2);
        *(_QWORD *)v1658 = v1657;
      }
      ++v1644;
LABEL_2308:
      if (++v1643 == v1642)
        goto LABEL_2327;
    }
    v1651 = *(_DWORD *)v1649;
    v1652 = *((_DWORD *)v1649 + 1);
    v1653 = *((_DWORD *)v1649 + 2);
    while (1)
    {
      v1654 = *((_DWORD *)v1650 + 7);
      if (v1651 == v1654)
      {
        v1655 = *((_DWORD *)v1650 + 8);
        if (v1652 == v1655)
        {
          v1656 = *((_DWORD *)v1650 + 9);
          if (v1653 < v1656)
            goto LABEL_2312;
          if (v1656 >= v1653)
            goto LABEL_2308;
        }
        else
        {
          if (v1652 < v1655)
            goto LABEL_2312;
          if (v1655 >= v1652)
            goto LABEL_2308;
        }
      }
      else
      {
        if (v1651 < v1654)
          goto LABEL_2312;
        if (v1654 >= v1651)
          goto LABEL_2308;
      }
      ++v1650;
LABEL_2312:
      v1650 = (uint64_t *)*v1650;
      if (!v1650)
        goto LABEL_2324;
    }
  }
  v1644 = 0;
LABEL_2327:
  *v1641 = v1644;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v133 = v3[330];
  if (v133 >> 30)
    v1659 = 1;
  else
    v1659 = (_DWORD)v133 == v5;
  if (v1659)
    goto LABEL_326;
LABEL_2331:
  v1660 = *(_QWORD *)(v1[2] + 8);
  v1661 = v133 & 0xFFFFFFFFCFFFFFFFLL;
  v1662 = *(_QWORD *)(*(_QWORD *)(v1660 + 8) + 2448);
  v1663 = (unsigned int *)(v1662 + 520 * (v133 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1664 = *v1663;
  if ((_DWORD)v1664)
  {
    v1665 = 0;
    v1666 = 0;
    v1667 = **(_QWORD **)(v1660 + 16);
    v1668 = v1662 + 520 * v1661;
    v1669 = v1668 + 364;
    v1670 = v1668 + 340;
    while (1)
    {
      v1671 = (uint64_t *)(v1669 + 12 * v1665);
      v1672 = *(uint64_t **)(v1667 + 2512);
      if (v1672)
        break;
LABEL_2350:
      *(_WORD *)(v1670 + 2 * v1666) = *(_WORD *)(v1670 + 2 * v1665);
      if (v1665 != v1666)
      {
        v1679 = *v1671;
        v1680 = v1669 + 12 * v1666;
        *(_DWORD *)(v1680 + 8) = *((_DWORD *)v1671 + 2);
        *(_QWORD *)v1680 = v1679;
      }
      ++v1666;
LABEL_2334:
      if (++v1665 == v1664)
        goto LABEL_2353;
    }
    v1673 = *(_DWORD *)v1671;
    v1674 = *((_DWORD *)v1671 + 1);
    v1675 = *((_DWORD *)v1671 + 2);
    while (1)
    {
      v1676 = *((_DWORD *)v1672 + 7);
      if (v1673 == v1676)
      {
        v1677 = *((_DWORD *)v1672 + 8);
        if (v1674 == v1677)
        {
          v1678 = *((_DWORD *)v1672 + 9);
          if (v1675 < v1678)
            goto LABEL_2338;
          if (v1678 >= v1675)
            goto LABEL_2334;
        }
        else
        {
          if (v1674 < v1677)
            goto LABEL_2338;
          if (v1677 >= v1674)
            goto LABEL_2334;
        }
      }
      else
      {
        if (v1673 < v1676)
          goto LABEL_2338;
        if (v1676 >= v1673)
          goto LABEL_2334;
      }
      ++v1672;
LABEL_2338:
      v1672 = (uint64_t *)*v1672;
      if (!v1672)
        goto LABEL_2350;
    }
  }
  v1666 = 0;
LABEL_2353:
  *v1663 = v1666;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v135 = v3[331];
  if (v135 >> 30)
    v1681 = 1;
  else
    v1681 = (_DWORD)v135 == v5;
  if (v1681)
    goto LABEL_331;
LABEL_2357:
  v1682 = *(_QWORD *)(v1[2] + 8);
  v1683 = v135 & 0xFFFFFFFFCFFFFFFFLL;
  v1684 = *(_QWORD *)(*(_QWORD *)(v1682 + 8) + 2448);
  v1685 = (unsigned int *)(v1684 + 520 * (v135 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1686 = *v1685;
  if ((_DWORD)v1686)
  {
    v1687 = 0;
    v1688 = 0;
    v1689 = **(_QWORD **)(v1682 + 16);
    v1690 = v1684 + 520 * v1683;
    v1691 = v1690 + 364;
    v1692 = v1690 + 340;
    while (1)
    {
      v1693 = (uint64_t *)(v1691 + 12 * v1687);
      v1694 = *(uint64_t **)(v1689 + 2512);
      if (v1694)
        break;
LABEL_2376:
      *(_WORD *)(v1692 + 2 * v1688) = *(_WORD *)(v1692 + 2 * v1687);
      if (v1687 != v1688)
      {
        v1701 = *v1693;
        v1702 = v1691 + 12 * v1688;
        *(_DWORD *)(v1702 + 8) = *((_DWORD *)v1693 + 2);
        *(_QWORD *)v1702 = v1701;
      }
      ++v1688;
LABEL_2360:
      if (++v1687 == v1686)
        goto LABEL_2379;
    }
    v1695 = *(_DWORD *)v1693;
    v1696 = *((_DWORD *)v1693 + 1);
    v1697 = *((_DWORD *)v1693 + 2);
    while (1)
    {
      v1698 = *((_DWORD *)v1694 + 7);
      if (v1695 == v1698)
      {
        v1699 = *((_DWORD *)v1694 + 8);
        if (v1696 == v1699)
        {
          v1700 = *((_DWORD *)v1694 + 9);
          if (v1697 < v1700)
            goto LABEL_2364;
          if (v1700 >= v1697)
            goto LABEL_2360;
        }
        else
        {
          if (v1696 < v1699)
            goto LABEL_2364;
          if (v1699 >= v1696)
            goto LABEL_2360;
        }
      }
      else
      {
        if (v1695 < v1698)
          goto LABEL_2364;
        if (v1698 >= v1695)
          goto LABEL_2360;
      }
      ++v1694;
LABEL_2364:
      v1694 = (uint64_t *)*v1694;
      if (!v1694)
        goto LABEL_2376;
    }
  }
  v1688 = 0;
LABEL_2379:
  *v1685 = v1688;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v137 = v3[332];
  if (v137 >> 30)
    v1703 = 1;
  else
    v1703 = (_DWORD)v137 == v5;
  if (v1703)
    goto LABEL_336;
LABEL_2383:
  v1704 = *(_QWORD *)(v1[2] + 8);
  v1705 = v137 & 0xFFFFFFFFCFFFFFFFLL;
  v1706 = *(_QWORD *)(*(_QWORD *)(v1704 + 8) + 2448);
  v1707 = (unsigned int *)(v1706 + 520 * (v137 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1708 = *v1707;
  if ((_DWORD)v1708)
  {
    v1709 = 0;
    v1710 = 0;
    v1711 = **(_QWORD **)(v1704 + 16);
    v1712 = v1706 + 520 * v1705;
    v1713 = v1712 + 364;
    v1714 = v1712 + 340;
    while (1)
    {
      v1715 = (uint64_t *)(v1713 + 12 * v1709);
      v1716 = *(uint64_t **)(v1711 + 2512);
      if (v1716)
        break;
LABEL_2402:
      *(_WORD *)(v1714 + 2 * v1710) = *(_WORD *)(v1714 + 2 * v1709);
      if (v1709 != v1710)
      {
        v1723 = *v1715;
        v1724 = v1713 + 12 * v1710;
        *(_DWORD *)(v1724 + 8) = *((_DWORD *)v1715 + 2);
        *(_QWORD *)v1724 = v1723;
      }
      ++v1710;
LABEL_2386:
      if (++v1709 == v1708)
        goto LABEL_2405;
    }
    v1717 = *(_DWORD *)v1715;
    v1718 = *((_DWORD *)v1715 + 1);
    v1719 = *((_DWORD *)v1715 + 2);
    while (1)
    {
      v1720 = *((_DWORD *)v1716 + 7);
      if (v1717 == v1720)
      {
        v1721 = *((_DWORD *)v1716 + 8);
        if (v1718 == v1721)
        {
          v1722 = *((_DWORD *)v1716 + 9);
          if (v1719 < v1722)
            goto LABEL_2390;
          if (v1722 >= v1719)
            goto LABEL_2386;
        }
        else
        {
          if (v1718 < v1721)
            goto LABEL_2390;
          if (v1721 >= v1718)
            goto LABEL_2386;
        }
      }
      else
      {
        if (v1717 < v1720)
          goto LABEL_2390;
        if (v1720 >= v1717)
          goto LABEL_2386;
      }
      ++v1716;
LABEL_2390:
      v1716 = (uint64_t *)*v1716;
      if (!v1716)
        goto LABEL_2402;
    }
  }
  v1710 = 0;
LABEL_2405:
  *v1707 = v1710;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v139 = v3[333];
  if (v139 >> 30)
    v1725 = 1;
  else
    v1725 = (_DWORD)v139 == v5;
  if (v1725)
    goto LABEL_341;
LABEL_2409:
  v1726 = *(_QWORD *)(v1[2] + 8);
  v1727 = v139 & 0xFFFFFFFFCFFFFFFFLL;
  v1728 = *(_QWORD *)(*(_QWORD *)(v1726 + 8) + 2448);
  v1729 = (unsigned int *)(v1728 + 520 * (v139 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1730 = *v1729;
  if ((_DWORD)v1730)
  {
    v1731 = 0;
    v1732 = 0;
    v1733 = **(_QWORD **)(v1726 + 16);
    v1734 = v1728 + 520 * v1727;
    v1735 = v1734 + 364;
    v1736 = v1734 + 340;
    while (1)
    {
      v1737 = (uint64_t *)(v1735 + 12 * v1731);
      v1738 = *(uint64_t **)(v1733 + 2512);
      if (v1738)
        break;
LABEL_2428:
      *(_WORD *)(v1736 + 2 * v1732) = *(_WORD *)(v1736 + 2 * v1731);
      if (v1731 != v1732)
      {
        v1745 = *v1737;
        v1746 = v1735 + 12 * v1732;
        *(_DWORD *)(v1746 + 8) = *((_DWORD *)v1737 + 2);
        *(_QWORD *)v1746 = v1745;
      }
      ++v1732;
LABEL_2412:
      if (++v1731 == v1730)
        goto LABEL_2431;
    }
    v1739 = *(_DWORD *)v1737;
    v1740 = *((_DWORD *)v1737 + 1);
    v1741 = *((_DWORD *)v1737 + 2);
    while (1)
    {
      v1742 = *((_DWORD *)v1738 + 7);
      if (v1739 == v1742)
      {
        v1743 = *((_DWORD *)v1738 + 8);
        if (v1740 == v1743)
        {
          v1744 = *((_DWORD *)v1738 + 9);
          if (v1741 < v1744)
            goto LABEL_2416;
          if (v1744 >= v1741)
            goto LABEL_2412;
        }
        else
        {
          if (v1740 < v1743)
            goto LABEL_2416;
          if (v1743 >= v1740)
            goto LABEL_2412;
        }
      }
      else
      {
        if (v1739 < v1742)
          goto LABEL_2416;
        if (v1742 >= v1739)
          goto LABEL_2412;
      }
      ++v1738;
LABEL_2416:
      v1738 = (uint64_t *)*v1738;
      if (!v1738)
        goto LABEL_2428;
    }
  }
  v1732 = 0;
LABEL_2431:
  *v1729 = v1732;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v141 = v3[334];
  if (v141 >> 30)
    v1747 = 1;
  else
    v1747 = (_DWORD)v141 == v5;
  if (v1747)
    goto LABEL_346;
LABEL_2435:
  v1748 = *(_QWORD *)(v1[2] + 8);
  v1749 = v141 & 0xFFFFFFFFCFFFFFFFLL;
  v1750 = *(_QWORD *)(*(_QWORD *)(v1748 + 8) + 2448);
  v1751 = (unsigned int *)(v1750 + 520 * (v141 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1752 = *v1751;
  if ((_DWORD)v1752)
  {
    v1753 = 0;
    v1754 = 0;
    v1755 = **(_QWORD **)(v1748 + 16);
    v1756 = v1750 + 520 * v1749;
    v1757 = v1756 + 364;
    v1758 = v1756 + 340;
    while (1)
    {
      v1759 = (uint64_t *)(v1757 + 12 * v1753);
      v1760 = *(uint64_t **)(v1755 + 2512);
      if (v1760)
        break;
LABEL_2454:
      *(_WORD *)(v1758 + 2 * v1754) = *(_WORD *)(v1758 + 2 * v1753);
      if (v1753 != v1754)
      {
        v1767 = *v1759;
        v1768 = v1757 + 12 * v1754;
        *(_DWORD *)(v1768 + 8) = *((_DWORD *)v1759 + 2);
        *(_QWORD *)v1768 = v1767;
      }
      ++v1754;
LABEL_2438:
      if (++v1753 == v1752)
        goto LABEL_2457;
    }
    v1761 = *(_DWORD *)v1759;
    v1762 = *((_DWORD *)v1759 + 1);
    v1763 = *((_DWORD *)v1759 + 2);
    while (1)
    {
      v1764 = *((_DWORD *)v1760 + 7);
      if (v1761 == v1764)
      {
        v1765 = *((_DWORD *)v1760 + 8);
        if (v1762 == v1765)
        {
          v1766 = *((_DWORD *)v1760 + 9);
          if (v1763 < v1766)
            goto LABEL_2442;
          if (v1766 >= v1763)
            goto LABEL_2438;
        }
        else
        {
          if (v1762 < v1765)
            goto LABEL_2442;
          if (v1765 >= v1762)
            goto LABEL_2438;
        }
      }
      else
      {
        if (v1761 < v1764)
          goto LABEL_2442;
        if (v1764 >= v1761)
          goto LABEL_2438;
      }
      ++v1760;
LABEL_2442:
      v1760 = (uint64_t *)*v1760;
      if (!v1760)
        goto LABEL_2454;
    }
  }
  v1754 = 0;
LABEL_2457:
  *v1751 = v1754;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v143 = v3[335];
  if (v143 >> 30)
    v1769 = 1;
  else
    v1769 = (_DWORD)v143 == v5;
  if (v1769)
    goto LABEL_351;
LABEL_2461:
  v1770 = *(_QWORD *)(v1[2] + 8);
  v1771 = v143 & 0xFFFFFFFFCFFFFFFFLL;
  v1772 = *(_QWORD *)(*(_QWORD *)(v1770 + 8) + 2448);
  v1773 = (unsigned int *)(v1772 + 520 * (v143 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1774 = *v1773;
  if ((_DWORD)v1774)
  {
    v1775 = 0;
    v1776 = 0;
    v1777 = **(_QWORD **)(v1770 + 16);
    v1778 = v1772 + 520 * v1771;
    v1779 = v1778 + 364;
    v1780 = v1778 + 340;
    while (1)
    {
      v1781 = (uint64_t *)(v1779 + 12 * v1775);
      v1782 = *(uint64_t **)(v1777 + 2512);
      if (v1782)
        break;
LABEL_2480:
      *(_WORD *)(v1780 + 2 * v1776) = *(_WORD *)(v1780 + 2 * v1775);
      if (v1775 != v1776)
      {
        v1789 = *v1781;
        v1790 = v1779 + 12 * v1776;
        *(_DWORD *)(v1790 + 8) = *((_DWORD *)v1781 + 2);
        *(_QWORD *)v1790 = v1789;
      }
      ++v1776;
LABEL_2464:
      if (++v1775 == v1774)
        goto LABEL_2483;
    }
    v1783 = *(_DWORD *)v1781;
    v1784 = *((_DWORD *)v1781 + 1);
    v1785 = *((_DWORD *)v1781 + 2);
    while (1)
    {
      v1786 = *((_DWORD *)v1782 + 7);
      if (v1783 == v1786)
      {
        v1787 = *((_DWORD *)v1782 + 8);
        if (v1784 == v1787)
        {
          v1788 = *((_DWORD *)v1782 + 9);
          if (v1785 < v1788)
            goto LABEL_2468;
          if (v1788 >= v1785)
            goto LABEL_2464;
        }
        else
        {
          if (v1784 < v1787)
            goto LABEL_2468;
          if (v1787 >= v1784)
            goto LABEL_2464;
        }
      }
      else
      {
        if (v1783 < v1786)
          goto LABEL_2468;
        if (v1786 >= v1783)
          goto LABEL_2464;
      }
      ++v1782;
LABEL_2468:
      v1782 = (uint64_t *)*v1782;
      if (!v1782)
        goto LABEL_2480;
    }
  }
  v1776 = 0;
LABEL_2483:
  *v1773 = v1776;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v145 = v3[336];
  if (v145 >> 30)
    v1791 = 1;
  else
    v1791 = (_DWORD)v145 == v5;
  if (v1791)
    goto LABEL_356;
LABEL_2487:
  v1792 = *(_QWORD *)(v1[2] + 8);
  v1793 = v145 & 0xFFFFFFFFCFFFFFFFLL;
  v1794 = *(_QWORD *)(*(_QWORD *)(v1792 + 8) + 2448);
  v1795 = (unsigned int *)(v1794 + 520 * (v145 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1796 = *v1795;
  if ((_DWORD)v1796)
  {
    v1797 = 0;
    v1798 = 0;
    v1799 = **(_QWORD **)(v1792 + 16);
    v1800 = v1794 + 520 * v1793;
    v1801 = v1800 + 364;
    v1802 = v1800 + 340;
    while (1)
    {
      v1803 = (uint64_t *)(v1801 + 12 * v1797);
      v1804 = *(uint64_t **)(v1799 + 2512);
      if (v1804)
        break;
LABEL_2506:
      *(_WORD *)(v1802 + 2 * v1798) = *(_WORD *)(v1802 + 2 * v1797);
      if (v1797 != v1798)
      {
        v1811 = *v1803;
        v1812 = v1801 + 12 * v1798;
        *(_DWORD *)(v1812 + 8) = *((_DWORD *)v1803 + 2);
        *(_QWORD *)v1812 = v1811;
      }
      ++v1798;
LABEL_2490:
      if (++v1797 == v1796)
        goto LABEL_2509;
    }
    v1805 = *(_DWORD *)v1803;
    v1806 = *((_DWORD *)v1803 + 1);
    v1807 = *((_DWORD *)v1803 + 2);
    while (1)
    {
      v1808 = *((_DWORD *)v1804 + 7);
      if (v1805 == v1808)
      {
        v1809 = *((_DWORD *)v1804 + 8);
        if (v1806 == v1809)
        {
          v1810 = *((_DWORD *)v1804 + 9);
          if (v1807 < v1810)
            goto LABEL_2494;
          if (v1810 >= v1807)
            goto LABEL_2490;
        }
        else
        {
          if (v1806 < v1809)
            goto LABEL_2494;
          if (v1809 >= v1806)
            goto LABEL_2490;
        }
      }
      else
      {
        if (v1805 < v1808)
          goto LABEL_2494;
        if (v1808 >= v1805)
          goto LABEL_2490;
      }
      ++v1804;
LABEL_2494:
      v1804 = (uint64_t *)*v1804;
      if (!v1804)
        goto LABEL_2506;
    }
  }
  v1798 = 0;
LABEL_2509:
  *v1795 = v1798;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v147 = v3[337];
  if (v147 >> 30)
    v1813 = 1;
  else
    v1813 = (_DWORD)v147 == v5;
  if (v1813)
    goto LABEL_361;
LABEL_2513:
  v1814 = *(_QWORD *)(v1[2] + 8);
  v1815 = v147 & 0xFFFFFFFFCFFFFFFFLL;
  v1816 = *(_QWORD *)(*(_QWORD *)(v1814 + 8) + 2448);
  v1817 = (unsigned int *)(v1816 + 520 * (v147 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1818 = *v1817;
  if ((_DWORD)v1818)
  {
    v1819 = 0;
    v1820 = 0;
    v1821 = **(_QWORD **)(v1814 + 16);
    v1822 = v1816 + 520 * v1815;
    v1823 = v1822 + 364;
    v1824 = v1822 + 340;
    while (1)
    {
      v1825 = (uint64_t *)(v1823 + 12 * v1819);
      v1826 = *(uint64_t **)(v1821 + 2512);
      if (v1826)
        break;
LABEL_2532:
      *(_WORD *)(v1824 + 2 * v1820) = *(_WORD *)(v1824 + 2 * v1819);
      if (v1819 != v1820)
      {
        v1833 = *v1825;
        v1834 = v1823 + 12 * v1820;
        *(_DWORD *)(v1834 + 8) = *((_DWORD *)v1825 + 2);
        *(_QWORD *)v1834 = v1833;
      }
      ++v1820;
LABEL_2516:
      if (++v1819 == v1818)
        goto LABEL_2535;
    }
    v1827 = *(_DWORD *)v1825;
    v1828 = *((_DWORD *)v1825 + 1);
    v1829 = *((_DWORD *)v1825 + 2);
    while (1)
    {
      v1830 = *((_DWORD *)v1826 + 7);
      if (v1827 == v1830)
      {
        v1831 = *((_DWORD *)v1826 + 8);
        if (v1828 == v1831)
        {
          v1832 = *((_DWORD *)v1826 + 9);
          if (v1829 < v1832)
            goto LABEL_2520;
          if (v1832 >= v1829)
            goto LABEL_2516;
        }
        else
        {
          if (v1828 < v1831)
            goto LABEL_2520;
          if (v1831 >= v1828)
            goto LABEL_2516;
        }
      }
      else
      {
        if (v1827 < v1830)
          goto LABEL_2520;
        if (v1830 >= v1827)
          goto LABEL_2516;
      }
      ++v1826;
LABEL_2520:
      v1826 = (uint64_t *)*v1826;
      if (!v1826)
        goto LABEL_2532;
    }
  }
  v1820 = 0;
LABEL_2535:
  *v1817 = v1820;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v149 = v3[338];
  if (v149 >> 30)
    v1835 = 1;
  else
    v1835 = (_DWORD)v149 == v5;
  if (v1835)
    goto LABEL_366;
LABEL_2539:
  v1836 = *(_QWORD *)(v1[2] + 8);
  v1837 = v149 & 0xFFFFFFFFCFFFFFFFLL;
  v1838 = *(_QWORD *)(*(_QWORD *)(v1836 + 8) + 2448);
  v1839 = (unsigned int *)(v1838 + 520 * (v149 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1840 = *v1839;
  if ((_DWORD)v1840)
  {
    v1841 = 0;
    v1842 = 0;
    v1843 = **(_QWORD **)(v1836 + 16);
    v1844 = v1838 + 520 * v1837;
    v1845 = v1844 + 364;
    v1846 = v1844 + 340;
    while (1)
    {
      v1847 = (uint64_t *)(v1845 + 12 * v1841);
      v1848 = *(uint64_t **)(v1843 + 2512);
      if (v1848)
        break;
LABEL_2558:
      *(_WORD *)(v1846 + 2 * v1842) = *(_WORD *)(v1846 + 2 * v1841);
      if (v1841 != v1842)
      {
        v1855 = *v1847;
        v1856 = v1845 + 12 * v1842;
        *(_DWORD *)(v1856 + 8) = *((_DWORD *)v1847 + 2);
        *(_QWORD *)v1856 = v1855;
      }
      ++v1842;
LABEL_2542:
      if (++v1841 == v1840)
        goto LABEL_2561;
    }
    v1849 = *(_DWORD *)v1847;
    v1850 = *((_DWORD *)v1847 + 1);
    v1851 = *((_DWORD *)v1847 + 2);
    while (1)
    {
      v1852 = *((_DWORD *)v1848 + 7);
      if (v1849 == v1852)
      {
        v1853 = *((_DWORD *)v1848 + 8);
        if (v1850 == v1853)
        {
          v1854 = *((_DWORD *)v1848 + 9);
          if (v1851 < v1854)
            goto LABEL_2546;
          if (v1854 >= v1851)
            goto LABEL_2542;
        }
        else
        {
          if (v1850 < v1853)
            goto LABEL_2546;
          if (v1853 >= v1850)
            goto LABEL_2542;
        }
      }
      else
      {
        if (v1849 < v1852)
          goto LABEL_2546;
        if (v1852 >= v1849)
          goto LABEL_2542;
      }
      ++v1848;
LABEL_2546:
      v1848 = (uint64_t *)*v1848;
      if (!v1848)
        goto LABEL_2558;
    }
  }
  v1842 = 0;
LABEL_2561:
  *v1839 = v1842;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v151 = v3[339];
  if (v151 >> 30)
    v1857 = 1;
  else
    v1857 = (_DWORD)v151 == v5;
  if (v1857)
    goto LABEL_371;
LABEL_2565:
  v1858 = *(_QWORD *)(v1[2] + 8);
  v1859 = v151 & 0xFFFFFFFFCFFFFFFFLL;
  v1860 = *(_QWORD *)(*(_QWORD *)(v1858 + 8) + 2448);
  v1861 = (unsigned int *)(v1860 + 520 * (v151 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1862 = *v1861;
  if ((_DWORD)v1862)
  {
    v1863 = 0;
    v1864 = 0;
    v1865 = **(_QWORD **)(v1858 + 16);
    v1866 = v1860 + 520 * v1859;
    v1867 = v1866 + 364;
    v1868 = v1866 + 340;
    while (1)
    {
      v1869 = (uint64_t *)(v1867 + 12 * v1863);
      v1870 = *(uint64_t **)(v1865 + 2512);
      if (v1870)
        break;
LABEL_2584:
      *(_WORD *)(v1868 + 2 * v1864) = *(_WORD *)(v1868 + 2 * v1863);
      if (v1863 != v1864)
      {
        v1877 = *v1869;
        v1878 = v1867 + 12 * v1864;
        *(_DWORD *)(v1878 + 8) = *((_DWORD *)v1869 + 2);
        *(_QWORD *)v1878 = v1877;
      }
      ++v1864;
LABEL_2568:
      if (++v1863 == v1862)
        goto LABEL_2587;
    }
    v1871 = *(_DWORD *)v1869;
    v1872 = *((_DWORD *)v1869 + 1);
    v1873 = *((_DWORD *)v1869 + 2);
    while (1)
    {
      v1874 = *((_DWORD *)v1870 + 7);
      if (v1871 == v1874)
      {
        v1875 = *((_DWORD *)v1870 + 8);
        if (v1872 == v1875)
        {
          v1876 = *((_DWORD *)v1870 + 9);
          if (v1873 < v1876)
            goto LABEL_2572;
          if (v1876 >= v1873)
            goto LABEL_2568;
        }
        else
        {
          if (v1872 < v1875)
            goto LABEL_2572;
          if (v1875 >= v1872)
            goto LABEL_2568;
        }
      }
      else
      {
        if (v1871 < v1874)
          goto LABEL_2572;
        if (v1874 >= v1871)
          goto LABEL_2568;
      }
      ++v1870;
LABEL_2572:
      v1870 = (uint64_t *)*v1870;
      if (!v1870)
        goto LABEL_2584;
    }
  }
  v1864 = 0;
LABEL_2587:
  *v1861 = v1864;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v153 = v3[340];
  if (v153 >> 30)
    v1879 = 1;
  else
    v1879 = (_DWORD)v153 == v5;
  if (v1879)
    goto LABEL_376;
LABEL_2591:
  v1880 = *(_QWORD *)(v1[2] + 8);
  v1881 = v153 & 0xFFFFFFFFCFFFFFFFLL;
  v1882 = *(_QWORD *)(*(_QWORD *)(v1880 + 8) + 2448);
  v1883 = (unsigned int *)(v1882 + 520 * (v153 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1884 = *v1883;
  if ((_DWORD)v1884)
  {
    v1885 = 0;
    v1886 = 0;
    v1887 = **(_QWORD **)(v1880 + 16);
    v1888 = v1882 + 520 * v1881;
    v1889 = v1888 + 364;
    v1890 = v1888 + 340;
    while (1)
    {
      v1891 = (uint64_t *)(v1889 + 12 * v1885);
      v1892 = *(uint64_t **)(v1887 + 2512);
      if (v1892)
        break;
LABEL_2610:
      *(_WORD *)(v1890 + 2 * v1886) = *(_WORD *)(v1890 + 2 * v1885);
      if (v1885 != v1886)
      {
        v1899 = *v1891;
        v1900 = v1889 + 12 * v1886;
        *(_DWORD *)(v1900 + 8) = *((_DWORD *)v1891 + 2);
        *(_QWORD *)v1900 = v1899;
      }
      ++v1886;
LABEL_2594:
      if (++v1885 == v1884)
        goto LABEL_2613;
    }
    v1893 = *(_DWORD *)v1891;
    v1894 = *((_DWORD *)v1891 + 1);
    v1895 = *((_DWORD *)v1891 + 2);
    while (1)
    {
      v1896 = *((_DWORD *)v1892 + 7);
      if (v1893 == v1896)
      {
        v1897 = *((_DWORD *)v1892 + 8);
        if (v1894 == v1897)
        {
          v1898 = *((_DWORD *)v1892 + 9);
          if (v1895 < v1898)
            goto LABEL_2598;
          if (v1898 >= v1895)
            goto LABEL_2594;
        }
        else
        {
          if (v1894 < v1897)
            goto LABEL_2598;
          if (v1897 >= v1894)
            goto LABEL_2594;
        }
      }
      else
      {
        if (v1893 < v1896)
          goto LABEL_2598;
        if (v1896 >= v1893)
          goto LABEL_2594;
      }
      ++v1892;
LABEL_2598:
      v1892 = (uint64_t *)*v1892;
      if (!v1892)
        goto LABEL_2610;
    }
  }
  v1886 = 0;
LABEL_2613:
  *v1883 = v1886;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v155 = v3[341];
  if (v155 >> 30)
    v1901 = 1;
  else
    v1901 = (_DWORD)v155 == v5;
  if (v1901)
    goto LABEL_381;
LABEL_2617:
  v1902 = *(_QWORD *)(v1[2] + 8);
  v1903 = v155 & 0xFFFFFFFFCFFFFFFFLL;
  v1904 = *(_QWORD *)(*(_QWORD *)(v1902 + 8) + 2448);
  v1905 = (unsigned int *)(v1904 + 520 * (v155 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1906 = *v1905;
  if ((_DWORD)v1906)
  {
    v1907 = 0;
    v1908 = 0;
    v1909 = **(_QWORD **)(v1902 + 16);
    v1910 = v1904 + 520 * v1903;
    v1911 = v1910 + 364;
    v1912 = v1910 + 340;
    while (1)
    {
      v1913 = (uint64_t *)(v1911 + 12 * v1907);
      v1914 = *(uint64_t **)(v1909 + 2512);
      if (v1914)
        break;
LABEL_2636:
      *(_WORD *)(v1912 + 2 * v1908) = *(_WORD *)(v1912 + 2 * v1907);
      if (v1907 != v1908)
      {
        v1921 = *v1913;
        v1922 = v1911 + 12 * v1908;
        *(_DWORD *)(v1922 + 8) = *((_DWORD *)v1913 + 2);
        *(_QWORD *)v1922 = v1921;
      }
      ++v1908;
LABEL_2620:
      if (++v1907 == v1906)
        goto LABEL_2639;
    }
    v1915 = *(_DWORD *)v1913;
    v1916 = *((_DWORD *)v1913 + 1);
    v1917 = *((_DWORD *)v1913 + 2);
    while (1)
    {
      v1918 = *((_DWORD *)v1914 + 7);
      if (v1915 == v1918)
      {
        v1919 = *((_DWORD *)v1914 + 8);
        if (v1916 == v1919)
        {
          v1920 = *((_DWORD *)v1914 + 9);
          if (v1917 < v1920)
            goto LABEL_2624;
          if (v1920 >= v1917)
            goto LABEL_2620;
        }
        else
        {
          if (v1916 < v1919)
            goto LABEL_2624;
          if (v1919 >= v1916)
            goto LABEL_2620;
        }
      }
      else
      {
        if (v1915 < v1918)
          goto LABEL_2624;
        if (v1918 >= v1915)
          goto LABEL_2620;
      }
      ++v1914;
LABEL_2624:
      v1914 = (uint64_t *)*v1914;
      if (!v1914)
        goto LABEL_2636;
    }
  }
  v1908 = 0;
LABEL_2639:
  *v1905 = v1908;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v157 = v3[342];
  if (v157 >> 30)
    v1923 = 1;
  else
    v1923 = (_DWORD)v157 == v5;
  if (v1923)
    goto LABEL_386;
LABEL_2643:
  v1924 = *(_QWORD *)(v1[2] + 8);
  v1925 = v157 & 0xFFFFFFFFCFFFFFFFLL;
  v1926 = *(_QWORD *)(*(_QWORD *)(v1924 + 8) + 2448);
  v1927 = (unsigned int *)(v1926 + 520 * (v157 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1928 = *v1927;
  if ((_DWORD)v1928)
  {
    v1929 = 0;
    v1930 = 0;
    v1931 = **(_QWORD **)(v1924 + 16);
    v1932 = v1926 + 520 * v1925;
    v1933 = v1932 + 364;
    v1934 = v1932 + 340;
    while (1)
    {
      v1935 = (uint64_t *)(v1933 + 12 * v1929);
      v1936 = *(uint64_t **)(v1931 + 2512);
      if (v1936)
        break;
LABEL_2662:
      *(_WORD *)(v1934 + 2 * v1930) = *(_WORD *)(v1934 + 2 * v1929);
      if (v1929 != v1930)
      {
        v1943 = *v1935;
        v1944 = v1933 + 12 * v1930;
        *(_DWORD *)(v1944 + 8) = *((_DWORD *)v1935 + 2);
        *(_QWORD *)v1944 = v1943;
      }
      ++v1930;
LABEL_2646:
      if (++v1929 == v1928)
        goto LABEL_2665;
    }
    v1937 = *(_DWORD *)v1935;
    v1938 = *((_DWORD *)v1935 + 1);
    v1939 = *((_DWORD *)v1935 + 2);
    while (1)
    {
      v1940 = *((_DWORD *)v1936 + 7);
      if (v1937 == v1940)
      {
        v1941 = *((_DWORD *)v1936 + 8);
        if (v1938 == v1941)
        {
          v1942 = *((_DWORD *)v1936 + 9);
          if (v1939 < v1942)
            goto LABEL_2650;
          if (v1942 >= v1939)
            goto LABEL_2646;
        }
        else
        {
          if (v1938 < v1941)
            goto LABEL_2650;
          if (v1941 >= v1938)
            goto LABEL_2646;
        }
      }
      else
      {
        if (v1937 < v1940)
          goto LABEL_2650;
        if (v1940 >= v1937)
          goto LABEL_2646;
      }
      ++v1936;
LABEL_2650:
      v1936 = (uint64_t *)*v1936;
      if (!v1936)
        goto LABEL_2662;
    }
  }
  v1930 = 0;
LABEL_2665:
  *v1927 = v1930;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v159 = v3[343];
  if (v159 >> 30)
    v1945 = 1;
  else
    v1945 = (_DWORD)v159 == v5;
  if (v1945)
    goto LABEL_391;
LABEL_2669:
  v1946 = *(_QWORD *)(v1[2] + 8);
  v1947 = v159 & 0xFFFFFFFFCFFFFFFFLL;
  v1948 = *(_QWORD *)(*(_QWORD *)(v1946 + 8) + 2448);
  v1949 = (unsigned int *)(v1948 + 520 * (v159 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1950 = *v1949;
  if ((_DWORD)v1950)
  {
    v1951 = 0;
    v1952 = 0;
    v1953 = **(_QWORD **)(v1946 + 16);
    v1954 = v1948 + 520 * v1947;
    v1955 = v1954 + 364;
    v1956 = v1954 + 340;
    while (1)
    {
      v1957 = (uint64_t *)(v1955 + 12 * v1951);
      v1958 = *(uint64_t **)(v1953 + 2512);
      if (v1958)
        break;
LABEL_2688:
      *(_WORD *)(v1956 + 2 * v1952) = *(_WORD *)(v1956 + 2 * v1951);
      if (v1951 != v1952)
      {
        v1965 = *v1957;
        v1966 = v1955 + 12 * v1952;
        *(_DWORD *)(v1966 + 8) = *((_DWORD *)v1957 + 2);
        *(_QWORD *)v1966 = v1965;
      }
      ++v1952;
LABEL_2672:
      if (++v1951 == v1950)
        goto LABEL_2691;
    }
    v1959 = *(_DWORD *)v1957;
    v1960 = *((_DWORD *)v1957 + 1);
    v1961 = *((_DWORD *)v1957 + 2);
    while (1)
    {
      v1962 = *((_DWORD *)v1958 + 7);
      if (v1959 == v1962)
      {
        v1963 = *((_DWORD *)v1958 + 8);
        if (v1960 == v1963)
        {
          v1964 = *((_DWORD *)v1958 + 9);
          if (v1961 < v1964)
            goto LABEL_2676;
          if (v1964 >= v1961)
            goto LABEL_2672;
        }
        else
        {
          if (v1960 < v1963)
            goto LABEL_2676;
          if (v1963 >= v1960)
            goto LABEL_2672;
        }
      }
      else
      {
        if (v1959 < v1962)
          goto LABEL_2676;
        if (v1962 >= v1959)
          goto LABEL_2672;
      }
      ++v1958;
LABEL_2676:
      v1958 = (uint64_t *)*v1958;
      if (!v1958)
        goto LABEL_2688;
    }
  }
  v1952 = 0;
LABEL_2691:
  *v1949 = v1952;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v161 = v3[344];
  if (v161 >> 30)
    v1967 = 1;
  else
    v1967 = (_DWORD)v161 == v5;
  if (v1967)
    goto LABEL_396;
LABEL_2695:
  v1968 = *(_QWORD *)(v1[2] + 8);
  v1969 = v161 & 0xFFFFFFFFCFFFFFFFLL;
  v1970 = *(_QWORD *)(*(_QWORD *)(v1968 + 8) + 2448);
  v1971 = (unsigned int *)(v1970 + 520 * (v161 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1972 = *v1971;
  if ((_DWORD)v1972)
  {
    v1973 = 0;
    v1974 = 0;
    v1975 = **(_QWORD **)(v1968 + 16);
    v1976 = v1970 + 520 * v1969;
    v1977 = v1976 + 364;
    v1978 = v1976 + 340;
    while (1)
    {
      v1979 = (uint64_t *)(v1977 + 12 * v1973);
      v1980 = *(uint64_t **)(v1975 + 2512);
      if (v1980)
        break;
LABEL_2714:
      *(_WORD *)(v1978 + 2 * v1974) = *(_WORD *)(v1978 + 2 * v1973);
      if (v1973 != v1974)
      {
        v1987 = *v1979;
        v1988 = v1977 + 12 * v1974;
        *(_DWORD *)(v1988 + 8) = *((_DWORD *)v1979 + 2);
        *(_QWORD *)v1988 = v1987;
      }
      ++v1974;
LABEL_2698:
      if (++v1973 == v1972)
        goto LABEL_2717;
    }
    v1981 = *(_DWORD *)v1979;
    v1982 = *((_DWORD *)v1979 + 1);
    v1983 = *((_DWORD *)v1979 + 2);
    while (1)
    {
      v1984 = *((_DWORD *)v1980 + 7);
      if (v1981 == v1984)
      {
        v1985 = *((_DWORD *)v1980 + 8);
        if (v1982 == v1985)
        {
          v1986 = *((_DWORD *)v1980 + 9);
          if (v1983 < v1986)
            goto LABEL_2702;
          if (v1986 >= v1983)
            goto LABEL_2698;
        }
        else
        {
          if (v1982 < v1985)
            goto LABEL_2702;
          if (v1985 >= v1982)
            goto LABEL_2698;
        }
      }
      else
      {
        if (v1981 < v1984)
          goto LABEL_2702;
        if (v1984 >= v1981)
          goto LABEL_2698;
      }
      ++v1980;
LABEL_2702:
      v1980 = (uint64_t *)*v1980;
      if (!v1980)
        goto LABEL_2714;
    }
  }
  v1974 = 0;
LABEL_2717:
  *v1971 = v1974;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v163 = v3[345];
  if (v163 >> 30)
    v1989 = 1;
  else
    v1989 = (_DWORD)v163 == v5;
  if (v1989)
    goto LABEL_401;
LABEL_2721:
  v1990 = *(_QWORD *)(v1[2] + 8);
  v1991 = v163 & 0xFFFFFFFFCFFFFFFFLL;
  v1992 = *(_QWORD *)(*(_QWORD *)(v1990 + 8) + 2448);
  v1993 = (unsigned int *)(v1992 + 520 * (v163 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1994 = *v1993;
  if ((_DWORD)v1994)
  {
    v1995 = 0;
    v1996 = 0;
    v1997 = **(_QWORD **)(v1990 + 16);
    v1998 = v1992 + 520 * v1991;
    v1999 = v1998 + 364;
    v2000 = v1998 + 340;
    while (1)
    {
      v2001 = (uint64_t *)(v1999 + 12 * v1995);
      v2002 = *(uint64_t **)(v1997 + 2512);
      if (v2002)
        break;
LABEL_2740:
      *(_WORD *)(v2000 + 2 * v1996) = *(_WORD *)(v2000 + 2 * v1995);
      if (v1995 != v1996)
      {
        v2009 = *v2001;
        v2010 = v1999 + 12 * v1996;
        *(_DWORD *)(v2010 + 8) = *((_DWORD *)v2001 + 2);
        *(_QWORD *)v2010 = v2009;
      }
      ++v1996;
LABEL_2724:
      if (++v1995 == v1994)
        goto LABEL_2743;
    }
    v2003 = *(_DWORD *)v2001;
    v2004 = *((_DWORD *)v2001 + 1);
    v2005 = *((_DWORD *)v2001 + 2);
    while (1)
    {
      v2006 = *((_DWORD *)v2002 + 7);
      if (v2003 == v2006)
      {
        v2007 = *((_DWORD *)v2002 + 8);
        if (v2004 == v2007)
        {
          v2008 = *((_DWORD *)v2002 + 9);
          if (v2005 < v2008)
            goto LABEL_2728;
          if (v2008 >= v2005)
            goto LABEL_2724;
        }
        else
        {
          if (v2004 < v2007)
            goto LABEL_2728;
          if (v2007 >= v2004)
            goto LABEL_2724;
        }
      }
      else
      {
        if (v2003 < v2006)
          goto LABEL_2728;
        if (v2006 >= v2003)
          goto LABEL_2724;
      }
      ++v2002;
LABEL_2728:
      v2002 = (uint64_t *)*v2002;
      if (!v2002)
        goto LABEL_2740;
    }
  }
  v1996 = 0;
LABEL_2743:
  *v1993 = v1996;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v165 = v3[346];
  if (v165 >> 30)
    v2011 = 1;
  else
    v2011 = (_DWORD)v165 == v5;
  if (v2011)
    goto LABEL_406;
LABEL_2747:
  v2012 = *(_QWORD *)(v1[2] + 8);
  v2013 = v165 & 0xFFFFFFFFCFFFFFFFLL;
  v2014 = *(_QWORD *)(*(_QWORD *)(v2012 + 8) + 2448);
  v2015 = (unsigned int *)(v2014 + 520 * (v165 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2016 = *v2015;
  if ((_DWORD)v2016)
  {
    v2017 = 0;
    v2018 = 0;
    v2019 = **(_QWORD **)(v2012 + 16);
    v2020 = v2014 + 520 * v2013;
    v2021 = v2020 + 364;
    v2022 = v2020 + 340;
    while (1)
    {
      v2023 = (uint64_t *)(v2021 + 12 * v2017);
      v2024 = *(uint64_t **)(v2019 + 2512);
      if (v2024)
        break;
LABEL_2766:
      *(_WORD *)(v2022 + 2 * v2018) = *(_WORD *)(v2022 + 2 * v2017);
      if (v2017 != v2018)
      {
        v2031 = *v2023;
        v2032 = v2021 + 12 * v2018;
        *(_DWORD *)(v2032 + 8) = *((_DWORD *)v2023 + 2);
        *(_QWORD *)v2032 = v2031;
      }
      ++v2018;
LABEL_2750:
      if (++v2017 == v2016)
        goto LABEL_2769;
    }
    v2025 = *(_DWORD *)v2023;
    v2026 = *((_DWORD *)v2023 + 1);
    v2027 = *((_DWORD *)v2023 + 2);
    while (1)
    {
      v2028 = *((_DWORD *)v2024 + 7);
      if (v2025 == v2028)
      {
        v2029 = *((_DWORD *)v2024 + 8);
        if (v2026 == v2029)
        {
          v2030 = *((_DWORD *)v2024 + 9);
          if (v2027 < v2030)
            goto LABEL_2754;
          if (v2030 >= v2027)
            goto LABEL_2750;
        }
        else
        {
          if (v2026 < v2029)
            goto LABEL_2754;
          if (v2029 >= v2026)
            goto LABEL_2750;
        }
      }
      else
      {
        if (v2025 < v2028)
          goto LABEL_2754;
        if (v2028 >= v2025)
          goto LABEL_2750;
      }
      ++v2024;
LABEL_2754:
      v2024 = (uint64_t *)*v2024;
      if (!v2024)
        goto LABEL_2766;
    }
  }
  v2018 = 0;
LABEL_2769:
  *v2015 = v2018;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v167 = v3[347];
  if (v167 >> 30)
    v2033 = 1;
  else
    v2033 = (_DWORD)v167 == v5;
  if (v2033)
    goto LABEL_411;
LABEL_2773:
  v2034 = *(_QWORD *)(v1[2] + 8);
  v2035 = v167 & 0xFFFFFFFFCFFFFFFFLL;
  v2036 = *(_QWORD *)(*(_QWORD *)(v2034 + 8) + 2448);
  v2037 = (unsigned int *)(v2036 + 520 * (v167 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2038 = *v2037;
  if ((_DWORD)v2038)
  {
    v2039 = 0;
    v2040 = 0;
    v2041 = **(_QWORD **)(v2034 + 16);
    v2042 = v2036 + 520 * v2035;
    v2043 = v2042 + 364;
    v2044 = v2042 + 340;
    while (1)
    {
      v2045 = (uint64_t *)(v2043 + 12 * v2039);
      v2046 = *(uint64_t **)(v2041 + 2512);
      if (v2046)
        break;
LABEL_2792:
      *(_WORD *)(v2044 + 2 * v2040) = *(_WORD *)(v2044 + 2 * v2039);
      if (v2039 != v2040)
      {
        v2053 = *v2045;
        v2054 = v2043 + 12 * v2040;
        *(_DWORD *)(v2054 + 8) = *((_DWORD *)v2045 + 2);
        *(_QWORD *)v2054 = v2053;
      }
      ++v2040;
LABEL_2776:
      if (++v2039 == v2038)
        goto LABEL_2795;
    }
    v2047 = *(_DWORD *)v2045;
    v2048 = *((_DWORD *)v2045 + 1);
    v2049 = *((_DWORD *)v2045 + 2);
    while (1)
    {
      v2050 = *((_DWORD *)v2046 + 7);
      if (v2047 == v2050)
      {
        v2051 = *((_DWORD *)v2046 + 8);
        if (v2048 == v2051)
        {
          v2052 = *((_DWORD *)v2046 + 9);
          if (v2049 < v2052)
            goto LABEL_2780;
          if (v2052 >= v2049)
            goto LABEL_2776;
        }
        else
        {
          if (v2048 < v2051)
            goto LABEL_2780;
          if (v2051 >= v2048)
            goto LABEL_2776;
        }
      }
      else
      {
        if (v2047 < v2050)
          goto LABEL_2780;
        if (v2050 >= v2047)
          goto LABEL_2776;
      }
      ++v2046;
LABEL_2780:
      v2046 = (uint64_t *)*v2046;
      if (!v2046)
        goto LABEL_2792;
    }
  }
  v2040 = 0;
LABEL_2795:
  *v2037 = v2040;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v169 = v3[348];
  if (v169 >> 30)
    v2055 = 1;
  else
    v2055 = (_DWORD)v169 == v5;
  if (v2055)
    goto LABEL_416;
LABEL_2799:
  v2056 = *(_QWORD *)(v1[2] + 8);
  v2057 = v169 & 0xFFFFFFFFCFFFFFFFLL;
  v2058 = *(_QWORD *)(*(_QWORD *)(v2056 + 8) + 2448);
  v2059 = (unsigned int *)(v2058 + 520 * (v169 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2060 = *v2059;
  if ((_DWORD)v2060)
  {
    v2061 = 0;
    v2062 = 0;
    v2063 = **(_QWORD **)(v2056 + 16);
    v2064 = v2058 + 520 * v2057;
    v2065 = v2064 + 364;
    v2066 = v2064 + 340;
    while (1)
    {
      v2067 = (uint64_t *)(v2065 + 12 * v2061);
      v2068 = *(uint64_t **)(v2063 + 2512);
      if (v2068)
        break;
LABEL_2818:
      *(_WORD *)(v2066 + 2 * v2062) = *(_WORD *)(v2066 + 2 * v2061);
      if (v2061 != v2062)
      {
        v2075 = *v2067;
        v2076 = v2065 + 12 * v2062;
        *(_DWORD *)(v2076 + 8) = *((_DWORD *)v2067 + 2);
        *(_QWORD *)v2076 = v2075;
      }
      ++v2062;
LABEL_2802:
      if (++v2061 == v2060)
        goto LABEL_2821;
    }
    v2069 = *(_DWORD *)v2067;
    v2070 = *((_DWORD *)v2067 + 1);
    v2071 = *((_DWORD *)v2067 + 2);
    while (1)
    {
      v2072 = *((_DWORD *)v2068 + 7);
      if (v2069 == v2072)
      {
        v2073 = *((_DWORD *)v2068 + 8);
        if (v2070 == v2073)
        {
          v2074 = *((_DWORD *)v2068 + 9);
          if (v2071 < v2074)
            goto LABEL_2806;
          if (v2074 >= v2071)
            goto LABEL_2802;
        }
        else
        {
          if (v2070 < v2073)
            goto LABEL_2806;
          if (v2073 >= v2070)
            goto LABEL_2802;
        }
      }
      else
      {
        if (v2069 < v2072)
          goto LABEL_2806;
        if (v2072 >= v2069)
          goto LABEL_2802;
      }
      ++v2068;
LABEL_2806:
      v2068 = (uint64_t *)*v2068;
      if (!v2068)
        goto LABEL_2818;
    }
  }
  v2062 = 0;
LABEL_2821:
  *v2059 = v2062;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v171 = v3[349];
  if (v171 >> 30)
    v2077 = 1;
  else
    v2077 = (_DWORD)v171 == v5;
  if (v2077)
    goto LABEL_421;
LABEL_2825:
  v2078 = *(_QWORD *)(v1[2] + 8);
  v2079 = v171 & 0xFFFFFFFFCFFFFFFFLL;
  v2080 = *(_QWORD *)(*(_QWORD *)(v2078 + 8) + 2448);
  v2081 = (unsigned int *)(v2080 + 520 * (v171 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2082 = *v2081;
  if ((_DWORD)v2082)
  {
    v2083 = 0;
    v2084 = 0;
    v2085 = **(_QWORD **)(v2078 + 16);
    v2086 = v2080 + 520 * v2079;
    v2087 = v2086 + 364;
    v2088 = v2086 + 340;
    while (1)
    {
      v2089 = (uint64_t *)(v2087 + 12 * v2083);
      v2090 = *(uint64_t **)(v2085 + 2512);
      if (v2090)
        break;
LABEL_2844:
      *(_WORD *)(v2088 + 2 * v2084) = *(_WORD *)(v2088 + 2 * v2083);
      if (v2083 != v2084)
      {
        v2097 = *v2089;
        v2098 = v2087 + 12 * v2084;
        *(_DWORD *)(v2098 + 8) = *((_DWORD *)v2089 + 2);
        *(_QWORD *)v2098 = v2097;
      }
      ++v2084;
LABEL_2828:
      if (++v2083 == v2082)
        goto LABEL_2847;
    }
    v2091 = *(_DWORD *)v2089;
    v2092 = *((_DWORD *)v2089 + 1);
    v2093 = *((_DWORD *)v2089 + 2);
    while (1)
    {
      v2094 = *((_DWORD *)v2090 + 7);
      if (v2091 == v2094)
      {
        v2095 = *((_DWORD *)v2090 + 8);
        if (v2092 == v2095)
        {
          v2096 = *((_DWORD *)v2090 + 9);
          if (v2093 < v2096)
            goto LABEL_2832;
          if (v2096 >= v2093)
            goto LABEL_2828;
        }
        else
        {
          if (v2092 < v2095)
            goto LABEL_2832;
          if (v2095 >= v2092)
            goto LABEL_2828;
        }
      }
      else
      {
        if (v2091 < v2094)
          goto LABEL_2832;
        if (v2094 >= v2091)
          goto LABEL_2828;
      }
      ++v2090;
LABEL_2832:
      v2090 = (uint64_t *)*v2090;
      if (!v2090)
        goto LABEL_2844;
    }
  }
  v2084 = 0;
LABEL_2847:
  *v2081 = v2084;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v173 = v3[350];
  if (v173 >> 30)
    v2099 = 1;
  else
    v2099 = (_DWORD)v173 == v5;
  if (v2099)
    goto LABEL_426;
LABEL_2851:
  v2100 = *(_QWORD *)(v1[2] + 8);
  v2101 = v173 & 0xFFFFFFFFCFFFFFFFLL;
  v2102 = *(_QWORD *)(*(_QWORD *)(v2100 + 8) + 2448);
  v2103 = (unsigned int *)(v2102 + 520 * (v173 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2104 = *v2103;
  if ((_DWORD)v2104)
  {
    v2105 = 0;
    v2106 = 0;
    v2107 = **(_QWORD **)(v2100 + 16);
    v2108 = v2102 + 520 * v2101;
    v2109 = v2108 + 364;
    v2110 = v2108 + 340;
    while (1)
    {
      v2111 = (uint64_t *)(v2109 + 12 * v2105);
      v2112 = *(uint64_t **)(v2107 + 2512);
      if (v2112)
        break;
LABEL_2870:
      *(_WORD *)(v2110 + 2 * v2106) = *(_WORD *)(v2110 + 2 * v2105);
      if (v2105 != v2106)
      {
        v2119 = *v2111;
        v2120 = v2109 + 12 * v2106;
        *(_DWORD *)(v2120 + 8) = *((_DWORD *)v2111 + 2);
        *(_QWORD *)v2120 = v2119;
      }
      ++v2106;
LABEL_2854:
      if (++v2105 == v2104)
        goto LABEL_2873;
    }
    v2113 = *(_DWORD *)v2111;
    v2114 = *((_DWORD *)v2111 + 1);
    v2115 = *((_DWORD *)v2111 + 2);
    while (1)
    {
      v2116 = *((_DWORD *)v2112 + 7);
      if (v2113 == v2116)
      {
        v2117 = *((_DWORD *)v2112 + 8);
        if (v2114 == v2117)
        {
          v2118 = *((_DWORD *)v2112 + 9);
          if (v2115 < v2118)
            goto LABEL_2858;
          if (v2118 >= v2115)
            goto LABEL_2854;
        }
        else
        {
          if (v2114 < v2117)
            goto LABEL_2858;
          if (v2117 >= v2114)
            goto LABEL_2854;
        }
      }
      else
      {
        if (v2113 < v2116)
          goto LABEL_2858;
        if (v2116 >= v2113)
          goto LABEL_2854;
      }
      ++v2112;
LABEL_2858:
      v2112 = (uint64_t *)*v2112;
      if (!v2112)
        goto LABEL_2870;
    }
  }
  v2106 = 0;
LABEL_2873:
  *v2103 = v2106;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v175 = v3[351];
  if (v175 >> 30)
    v2121 = 1;
  else
    v2121 = (_DWORD)v175 == v5;
  if (v2121)
    goto LABEL_431;
LABEL_2877:
  v2122 = *(_QWORD *)(v1[2] + 8);
  v2123 = v175 & 0xFFFFFFFFCFFFFFFFLL;
  v2124 = *(_QWORD *)(*(_QWORD *)(v2122 + 8) + 2448);
  v2125 = (unsigned int *)(v2124 + 520 * (v175 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2126 = *v2125;
  if ((_DWORD)v2126)
  {
    v2127 = 0;
    v2128 = 0;
    v2129 = **(_QWORD **)(v2122 + 16);
    v2130 = v2124 + 520 * v2123;
    v2131 = v2130 + 364;
    v2132 = v2130 + 340;
    while (1)
    {
      v2133 = (uint64_t *)(v2131 + 12 * v2127);
      v2134 = *(uint64_t **)(v2129 + 2512);
      if (v2134)
        break;
LABEL_2896:
      *(_WORD *)(v2132 + 2 * v2128) = *(_WORD *)(v2132 + 2 * v2127);
      if (v2127 != v2128)
      {
        v2141 = *v2133;
        v2142 = v2131 + 12 * v2128;
        *(_DWORD *)(v2142 + 8) = *((_DWORD *)v2133 + 2);
        *(_QWORD *)v2142 = v2141;
      }
      ++v2128;
LABEL_2880:
      if (++v2127 == v2126)
        goto LABEL_2899;
    }
    v2135 = *(_DWORD *)v2133;
    v2136 = *((_DWORD *)v2133 + 1);
    v2137 = *((_DWORD *)v2133 + 2);
    while (1)
    {
      v2138 = *((_DWORD *)v2134 + 7);
      if (v2135 == v2138)
      {
        v2139 = *((_DWORD *)v2134 + 8);
        if (v2136 == v2139)
        {
          v2140 = *((_DWORD *)v2134 + 9);
          if (v2137 < v2140)
            goto LABEL_2884;
          if (v2140 >= v2137)
            goto LABEL_2880;
        }
        else
        {
          if (v2136 < v2139)
            goto LABEL_2884;
          if (v2139 >= v2136)
            goto LABEL_2880;
        }
      }
      else
      {
        if (v2135 < v2138)
          goto LABEL_2884;
        if (v2138 >= v2135)
          goto LABEL_2880;
      }
      ++v2134;
LABEL_2884:
      v2134 = (uint64_t *)*v2134;
      if (!v2134)
        goto LABEL_2896;
    }
  }
  v2128 = 0;
LABEL_2899:
  *v2125 = v2128;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v177 = v3[352];
  if (v177 >> 30)
    v2143 = 1;
  else
    v2143 = (_DWORD)v177 == v5;
  if (v2143)
    goto LABEL_436;
LABEL_2903:
  v2144 = *(_QWORD *)(v1[2] + 8);
  v2145 = v177 & 0xFFFFFFFFCFFFFFFFLL;
  v2146 = *(_QWORD *)(*(_QWORD *)(v2144 + 8) + 2448);
  v2147 = (unsigned int *)(v2146 + 520 * (v177 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2148 = *v2147;
  if ((_DWORD)v2148)
  {
    v2149 = 0;
    v2150 = 0;
    v2151 = **(_QWORD **)(v2144 + 16);
    v2152 = v2146 + 520 * v2145;
    v2153 = v2152 + 364;
    v2154 = v2152 + 340;
    while (1)
    {
      v2155 = (uint64_t *)(v2153 + 12 * v2149);
      v2156 = *(uint64_t **)(v2151 + 2512);
      if (v2156)
        break;
LABEL_2922:
      *(_WORD *)(v2154 + 2 * v2150) = *(_WORD *)(v2154 + 2 * v2149);
      if (v2149 != v2150)
      {
        v2163 = *v2155;
        v2164 = v2153 + 12 * v2150;
        *(_DWORD *)(v2164 + 8) = *((_DWORD *)v2155 + 2);
        *(_QWORD *)v2164 = v2163;
      }
      ++v2150;
LABEL_2906:
      if (++v2149 == v2148)
        goto LABEL_2925;
    }
    v2157 = *(_DWORD *)v2155;
    v2158 = *((_DWORD *)v2155 + 1);
    v2159 = *((_DWORD *)v2155 + 2);
    while (1)
    {
      v2160 = *((_DWORD *)v2156 + 7);
      if (v2157 == v2160)
      {
        v2161 = *((_DWORD *)v2156 + 8);
        if (v2158 == v2161)
        {
          v2162 = *((_DWORD *)v2156 + 9);
          if (v2159 < v2162)
            goto LABEL_2910;
          if (v2162 >= v2159)
            goto LABEL_2906;
        }
        else
        {
          if (v2158 < v2161)
            goto LABEL_2910;
          if (v2161 >= v2158)
            goto LABEL_2906;
        }
      }
      else
      {
        if (v2157 < v2160)
          goto LABEL_2910;
        if (v2160 >= v2157)
          goto LABEL_2906;
      }
      ++v2156;
LABEL_2910:
      v2156 = (uint64_t *)*v2156;
      if (!v2156)
        goto LABEL_2922;
    }
  }
  v2150 = 0;
LABEL_2925:
  *v2147 = v2150;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v179 = v3[353];
  if (v179 >> 30)
    v2165 = 1;
  else
    v2165 = (_DWORD)v179 == v5;
  if (v2165)
    goto LABEL_441;
LABEL_2929:
  v2166 = *(_QWORD *)(v1[2] + 8);
  v2167 = v179 & 0xFFFFFFFFCFFFFFFFLL;
  v2168 = *(_QWORD *)(*(_QWORD *)(v2166 + 8) + 2448);
  v2169 = (unsigned int *)(v2168 + 520 * (v179 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2170 = *v2169;
  if ((_DWORD)v2170)
  {
    v2171 = 0;
    v2172 = 0;
    v2173 = **(_QWORD **)(v2166 + 16);
    v2174 = v2168 + 520 * v2167;
    v2175 = v2174 + 364;
    v2176 = v2174 + 340;
    while (1)
    {
      v2177 = (uint64_t *)(v2175 + 12 * v2171);
      v2178 = *(uint64_t **)(v2173 + 2512);
      if (v2178)
        break;
LABEL_2948:
      *(_WORD *)(v2176 + 2 * v2172) = *(_WORD *)(v2176 + 2 * v2171);
      if (v2171 != v2172)
      {
        v2185 = *v2177;
        v2186 = v2175 + 12 * v2172;
        *(_DWORD *)(v2186 + 8) = *((_DWORD *)v2177 + 2);
        *(_QWORD *)v2186 = v2185;
      }
      ++v2172;
LABEL_2932:
      if (++v2171 == v2170)
        goto LABEL_2951;
    }
    v2179 = *(_DWORD *)v2177;
    v2180 = *((_DWORD *)v2177 + 1);
    v2181 = *((_DWORD *)v2177 + 2);
    while (1)
    {
      v2182 = *((_DWORD *)v2178 + 7);
      if (v2179 == v2182)
      {
        v2183 = *((_DWORD *)v2178 + 8);
        if (v2180 == v2183)
        {
          v2184 = *((_DWORD *)v2178 + 9);
          if (v2181 < v2184)
            goto LABEL_2936;
          if (v2184 >= v2181)
            goto LABEL_2932;
        }
        else
        {
          if (v2180 < v2183)
            goto LABEL_2936;
          if (v2183 >= v2180)
            goto LABEL_2932;
        }
      }
      else
      {
        if (v2179 < v2182)
          goto LABEL_2936;
        if (v2182 >= v2179)
          goto LABEL_2932;
      }
      ++v2178;
LABEL_2936:
      v2178 = (uint64_t *)*v2178;
      if (!v2178)
        goto LABEL_2948;
    }
  }
  v2172 = 0;
LABEL_2951:
  *v2169 = v2172;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v181 = v3[354];
  if (v181 >> 30)
    v2187 = 1;
  else
    v2187 = (_DWORD)v181 == v5;
  if (v2187)
    goto LABEL_446;
LABEL_2955:
  v2188 = *(_QWORD *)(v1[2] + 8);
  v2189 = v181 & 0xFFFFFFFFCFFFFFFFLL;
  v2190 = *(_QWORD *)(*(_QWORD *)(v2188 + 8) + 2448);
  v2191 = (unsigned int *)(v2190 + 520 * (v181 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2192 = *v2191;
  if ((_DWORD)v2192)
  {
    v2193 = 0;
    v2194 = 0;
    v2195 = **(_QWORD **)(v2188 + 16);
    v2196 = v2190 + 520 * v2189;
    v2197 = v2196 + 364;
    v2198 = v2196 + 340;
    while (1)
    {
      v2199 = (uint64_t *)(v2197 + 12 * v2193);
      v2200 = *(uint64_t **)(v2195 + 2512);
      if (v2200)
        break;
LABEL_2974:
      *(_WORD *)(v2198 + 2 * v2194) = *(_WORD *)(v2198 + 2 * v2193);
      if (v2193 != v2194)
      {
        v2207 = *v2199;
        v2208 = v2197 + 12 * v2194;
        *(_DWORD *)(v2208 + 8) = *((_DWORD *)v2199 + 2);
        *(_QWORD *)v2208 = v2207;
      }
      ++v2194;
LABEL_2958:
      if (++v2193 == v2192)
        goto LABEL_2977;
    }
    v2201 = *(_DWORD *)v2199;
    v2202 = *((_DWORD *)v2199 + 1);
    v2203 = *((_DWORD *)v2199 + 2);
    while (1)
    {
      v2204 = *((_DWORD *)v2200 + 7);
      if (v2201 == v2204)
      {
        v2205 = *((_DWORD *)v2200 + 8);
        if (v2202 == v2205)
        {
          v2206 = *((_DWORD *)v2200 + 9);
          if (v2203 < v2206)
            goto LABEL_2962;
          if (v2206 >= v2203)
            goto LABEL_2958;
        }
        else
        {
          if (v2202 < v2205)
            goto LABEL_2962;
          if (v2205 >= v2202)
            goto LABEL_2958;
        }
      }
      else
      {
        if (v2201 < v2204)
          goto LABEL_2962;
        if (v2204 >= v2201)
          goto LABEL_2958;
      }
      ++v2200;
LABEL_2962:
      v2200 = (uint64_t *)*v2200;
      if (!v2200)
        goto LABEL_2974;
    }
  }
  v2194 = 0;
LABEL_2977:
  *v2191 = v2194;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v183 = v3[355];
  if (v183 >> 30)
    v2209 = 1;
  else
    v2209 = (_DWORD)v183 == v5;
  if (v2209)
    goto LABEL_451;
LABEL_2981:
  v2210 = *(_QWORD *)(v1[2] + 8);
  v2211 = v183 & 0xFFFFFFFFCFFFFFFFLL;
  v2212 = *(_QWORD *)(*(_QWORD *)(v2210 + 8) + 2448);
  v2213 = (unsigned int *)(v2212 + 520 * (v183 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2214 = *v2213;
  if ((_DWORD)v2214)
  {
    v2215 = 0;
    v2216 = 0;
    v2217 = **(_QWORD **)(v2210 + 16);
    v2218 = v2212 + 520 * v2211;
    v2219 = v2218 + 364;
    v2220 = v2218 + 340;
    while (1)
    {
      v2221 = (uint64_t *)(v2219 + 12 * v2215);
      v2222 = *(uint64_t **)(v2217 + 2512);
      if (v2222)
        break;
LABEL_3000:
      *(_WORD *)(v2220 + 2 * v2216) = *(_WORD *)(v2220 + 2 * v2215);
      if (v2215 != v2216)
      {
        v2229 = *v2221;
        v2230 = v2219 + 12 * v2216;
        *(_DWORD *)(v2230 + 8) = *((_DWORD *)v2221 + 2);
        *(_QWORD *)v2230 = v2229;
      }
      ++v2216;
LABEL_2984:
      if (++v2215 == v2214)
        goto LABEL_3003;
    }
    v2223 = *(_DWORD *)v2221;
    v2224 = *((_DWORD *)v2221 + 1);
    v2225 = *((_DWORD *)v2221 + 2);
    while (1)
    {
      v2226 = *((_DWORD *)v2222 + 7);
      if (v2223 == v2226)
      {
        v2227 = *((_DWORD *)v2222 + 8);
        if (v2224 == v2227)
        {
          v2228 = *((_DWORD *)v2222 + 9);
          if (v2225 < v2228)
            goto LABEL_2988;
          if (v2228 >= v2225)
            goto LABEL_2984;
        }
        else
        {
          if (v2224 < v2227)
            goto LABEL_2988;
          if (v2227 >= v2224)
            goto LABEL_2984;
        }
      }
      else
      {
        if (v2223 < v2226)
          goto LABEL_2988;
        if (v2226 >= v2223)
          goto LABEL_2984;
      }
      ++v2222;
LABEL_2988:
      v2222 = (uint64_t *)*v2222;
      if (!v2222)
        goto LABEL_3000;
    }
  }
  v2216 = 0;
LABEL_3003:
  *v2213 = v2216;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v185 = v3[356];
  if (v185 >> 30)
    v2231 = 1;
  else
    v2231 = (_DWORD)v185 == v5;
  if (v2231)
    goto LABEL_456;
LABEL_3007:
  v2232 = *(_QWORD *)(v1[2] + 8);
  v2233 = v185 & 0xFFFFFFFFCFFFFFFFLL;
  v2234 = *(_QWORD *)(*(_QWORD *)(v2232 + 8) + 2448);
  v2235 = (unsigned int *)(v2234 + 520 * (v185 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2236 = *v2235;
  if ((_DWORD)v2236)
  {
    v2237 = 0;
    v2238 = 0;
    v2239 = **(_QWORD **)(v2232 + 16);
    v2240 = v2234 + 520 * v2233;
    v2241 = v2240 + 364;
    v2242 = v2240 + 340;
    while (1)
    {
      v2243 = (uint64_t *)(v2241 + 12 * v2237);
      v2244 = *(uint64_t **)(v2239 + 2512);
      if (v2244)
        break;
LABEL_3026:
      *(_WORD *)(v2242 + 2 * v2238) = *(_WORD *)(v2242 + 2 * v2237);
      if (v2237 != v2238)
      {
        v2251 = *v2243;
        v2252 = v2241 + 12 * v2238;
        *(_DWORD *)(v2252 + 8) = *((_DWORD *)v2243 + 2);
        *(_QWORD *)v2252 = v2251;
      }
      ++v2238;
LABEL_3010:
      if (++v2237 == v2236)
        goto LABEL_3029;
    }
    v2245 = *(_DWORD *)v2243;
    v2246 = *((_DWORD *)v2243 + 1);
    v2247 = *((_DWORD *)v2243 + 2);
    while (1)
    {
      v2248 = *((_DWORD *)v2244 + 7);
      if (v2245 == v2248)
      {
        v2249 = *((_DWORD *)v2244 + 8);
        if (v2246 == v2249)
        {
          v2250 = *((_DWORD *)v2244 + 9);
          if (v2247 < v2250)
            goto LABEL_3014;
          if (v2250 >= v2247)
            goto LABEL_3010;
        }
        else
        {
          if (v2246 < v2249)
            goto LABEL_3014;
          if (v2249 >= v2246)
            goto LABEL_3010;
        }
      }
      else
      {
        if (v2245 < v2248)
          goto LABEL_3014;
        if (v2248 >= v2245)
          goto LABEL_3010;
      }
      ++v2244;
LABEL_3014:
      v2244 = (uint64_t *)*v2244;
      if (!v2244)
        goto LABEL_3026;
    }
  }
  v2238 = 0;
LABEL_3029:
  *v2235 = v2238;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v187 = v3[357];
  if (v187 >> 30)
    v2253 = 1;
  else
    v2253 = (_DWORD)v187 == v5;
  if (v2253)
    goto LABEL_461;
LABEL_3033:
  v2254 = *(_QWORD *)(v1[2] + 8);
  v2255 = v187 & 0xFFFFFFFFCFFFFFFFLL;
  v2256 = *(_QWORD *)(*(_QWORD *)(v2254 + 8) + 2448);
  v2257 = (unsigned int *)(v2256 + 520 * (v187 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2258 = *v2257;
  if ((_DWORD)v2258)
  {
    v2259 = 0;
    v2260 = 0;
    v2261 = **(_QWORD **)(v2254 + 16);
    v2262 = v2256 + 520 * v2255;
    v2263 = v2262 + 364;
    v2264 = v2262 + 340;
    while (1)
    {
      v2265 = (uint64_t *)(v2263 + 12 * v2259);
      v2266 = *(uint64_t **)(v2261 + 2512);
      if (v2266)
        break;
LABEL_3052:
      *(_WORD *)(v2264 + 2 * v2260) = *(_WORD *)(v2264 + 2 * v2259);
      if (v2259 != v2260)
      {
        v2273 = *v2265;
        v2274 = v2263 + 12 * v2260;
        *(_DWORD *)(v2274 + 8) = *((_DWORD *)v2265 + 2);
        *(_QWORD *)v2274 = v2273;
      }
      ++v2260;
LABEL_3036:
      if (++v2259 == v2258)
        goto LABEL_3055;
    }
    v2267 = *(_DWORD *)v2265;
    v2268 = *((_DWORD *)v2265 + 1);
    v2269 = *((_DWORD *)v2265 + 2);
    while (1)
    {
      v2270 = *((_DWORD *)v2266 + 7);
      if (v2267 == v2270)
      {
        v2271 = *((_DWORD *)v2266 + 8);
        if (v2268 == v2271)
        {
          v2272 = *((_DWORD *)v2266 + 9);
          if (v2269 < v2272)
            goto LABEL_3040;
          if (v2272 >= v2269)
            goto LABEL_3036;
        }
        else
        {
          if (v2268 < v2271)
            goto LABEL_3040;
          if (v2271 >= v2268)
            goto LABEL_3036;
        }
      }
      else
      {
        if (v2267 < v2270)
          goto LABEL_3040;
        if (v2270 >= v2267)
          goto LABEL_3036;
      }
      ++v2266;
LABEL_3040:
      v2266 = (uint64_t *)*v2266;
      if (!v2266)
        goto LABEL_3052;
    }
  }
  v2260 = 0;
LABEL_3055:
  *v2257 = v2260;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v189 = v3[358];
  if (v189 >> 30)
    v2275 = 1;
  else
    v2275 = (_DWORD)v189 == v5;
  if (v2275)
    goto LABEL_466;
LABEL_3059:
  v2276 = *(_QWORD *)(v1[2] + 8);
  v2277 = v189 & 0xFFFFFFFFCFFFFFFFLL;
  v2278 = *(_QWORD *)(*(_QWORD *)(v2276 + 8) + 2448);
  v2279 = (unsigned int *)(v2278 + 520 * (v189 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2280 = *v2279;
  if ((_DWORD)v2280)
  {
    v2281 = 0;
    v2282 = 0;
    v2283 = **(_QWORD **)(v2276 + 16);
    v2284 = v2278 + 520 * v2277;
    v2285 = v2284 + 364;
    v2286 = v2284 + 340;
    while (1)
    {
      v2287 = (uint64_t *)(v2285 + 12 * v2281);
      v2288 = *(uint64_t **)(v2283 + 2512);
      if (v2288)
        break;
LABEL_3078:
      *(_WORD *)(v2286 + 2 * v2282) = *(_WORD *)(v2286 + 2 * v2281);
      if (v2281 != v2282)
      {
        v2295 = *v2287;
        v2296 = v2285 + 12 * v2282;
        *(_DWORD *)(v2296 + 8) = *((_DWORD *)v2287 + 2);
        *(_QWORD *)v2296 = v2295;
      }
      ++v2282;
LABEL_3062:
      if (++v2281 == v2280)
        goto LABEL_3081;
    }
    v2289 = *(_DWORD *)v2287;
    v2290 = *((_DWORD *)v2287 + 1);
    v2291 = *((_DWORD *)v2287 + 2);
    while (1)
    {
      v2292 = *((_DWORD *)v2288 + 7);
      if (v2289 == v2292)
      {
        v2293 = *((_DWORD *)v2288 + 8);
        if (v2290 == v2293)
        {
          v2294 = *((_DWORD *)v2288 + 9);
          if (v2291 < v2294)
            goto LABEL_3066;
          if (v2294 >= v2291)
            goto LABEL_3062;
        }
        else
        {
          if (v2290 < v2293)
            goto LABEL_3066;
          if (v2293 >= v2290)
            goto LABEL_3062;
        }
      }
      else
      {
        if (v2289 < v2292)
          goto LABEL_3066;
        if (v2292 >= v2289)
          goto LABEL_3062;
      }
      ++v2288;
LABEL_3066:
      v2288 = (uint64_t *)*v2288;
      if (!v2288)
        goto LABEL_3078;
    }
  }
  v2282 = 0;
LABEL_3081:
  *v2279 = v2282;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v191 = v3[359];
  if (v191 >> 30)
    v2297 = 1;
  else
    v2297 = (_DWORD)v191 == v5;
  if (v2297)
    goto LABEL_471;
LABEL_3085:
  v2298 = *(_QWORD *)(v1[2] + 8);
  v2299 = v191 & 0xFFFFFFFFCFFFFFFFLL;
  v2300 = *(_QWORD *)(*(_QWORD *)(v2298 + 8) + 2448);
  v2301 = (unsigned int *)(v2300 + 520 * (v191 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2302 = *v2301;
  if ((_DWORD)v2302)
  {
    v2303 = 0;
    v2304 = 0;
    v2305 = **(_QWORD **)(v2298 + 16);
    v2306 = v2300 + 520 * v2299;
    v2307 = v2306 + 364;
    v2308 = v2306 + 340;
    while (1)
    {
      v2309 = (uint64_t *)(v2307 + 12 * v2303);
      v2310 = *(uint64_t **)(v2305 + 2512);
      if (v2310)
        break;
LABEL_3104:
      *(_WORD *)(v2308 + 2 * v2304) = *(_WORD *)(v2308 + 2 * v2303);
      if (v2303 != v2304)
      {
        v2317 = *v2309;
        v2318 = v2307 + 12 * v2304;
        *(_DWORD *)(v2318 + 8) = *((_DWORD *)v2309 + 2);
        *(_QWORD *)v2318 = v2317;
      }
      ++v2304;
LABEL_3088:
      if (++v2303 == v2302)
        goto LABEL_3107;
    }
    v2311 = *(_DWORD *)v2309;
    v2312 = *((_DWORD *)v2309 + 1);
    v2313 = *((_DWORD *)v2309 + 2);
    while (1)
    {
      v2314 = *((_DWORD *)v2310 + 7);
      if (v2311 == v2314)
      {
        v2315 = *((_DWORD *)v2310 + 8);
        if (v2312 == v2315)
        {
          v2316 = *((_DWORD *)v2310 + 9);
          if (v2313 < v2316)
            goto LABEL_3092;
          if (v2316 >= v2313)
            goto LABEL_3088;
        }
        else
        {
          if (v2312 < v2315)
            goto LABEL_3092;
          if (v2315 >= v2312)
            goto LABEL_3088;
        }
      }
      else
      {
        if (v2311 < v2314)
          goto LABEL_3092;
        if (v2314 >= v2311)
          goto LABEL_3088;
      }
      ++v2310;
LABEL_3092:
      v2310 = (uint64_t *)*v2310;
      if (!v2310)
        goto LABEL_3104;
    }
  }
  v2304 = 0;
LABEL_3107:
  *v2301 = v2304;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v193 = v3[360];
  if (v193 >> 30)
    v2319 = 1;
  else
    v2319 = (_DWORD)v193 == v5;
  if (v2319)
    goto LABEL_476;
LABEL_3111:
  v2320 = *(_QWORD *)(v1[2] + 8);
  v2321 = v193 & 0xFFFFFFFFCFFFFFFFLL;
  v2322 = *(_QWORD *)(*(_QWORD *)(v2320 + 8) + 2448);
  v2323 = (unsigned int *)(v2322 + 520 * (v193 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2324 = *v2323;
  if ((_DWORD)v2324)
  {
    v2325 = 0;
    v2326 = 0;
    v2327 = **(_QWORD **)(v2320 + 16);
    v2328 = v2322 + 520 * v2321;
    v2329 = v2328 + 364;
    v2330 = v2328 + 340;
    while (1)
    {
      v2331 = (uint64_t *)(v2329 + 12 * v2325);
      v2332 = *(uint64_t **)(v2327 + 2512);
      if (v2332)
        break;
LABEL_3130:
      *(_WORD *)(v2330 + 2 * v2326) = *(_WORD *)(v2330 + 2 * v2325);
      if (v2325 != v2326)
      {
        v2339 = *v2331;
        v2340 = v2329 + 12 * v2326;
        *(_DWORD *)(v2340 + 8) = *((_DWORD *)v2331 + 2);
        *(_QWORD *)v2340 = v2339;
      }
      ++v2326;
LABEL_3114:
      if (++v2325 == v2324)
        goto LABEL_3133;
    }
    v2333 = *(_DWORD *)v2331;
    v2334 = *((_DWORD *)v2331 + 1);
    v2335 = *((_DWORD *)v2331 + 2);
    while (1)
    {
      v2336 = *((_DWORD *)v2332 + 7);
      if (v2333 == v2336)
      {
        v2337 = *((_DWORD *)v2332 + 8);
        if (v2334 == v2337)
        {
          v2338 = *((_DWORD *)v2332 + 9);
          if (v2335 < v2338)
            goto LABEL_3118;
          if (v2338 >= v2335)
            goto LABEL_3114;
        }
        else
        {
          if (v2334 < v2337)
            goto LABEL_3118;
          if (v2337 >= v2334)
            goto LABEL_3114;
        }
      }
      else
      {
        if (v2333 < v2336)
          goto LABEL_3118;
        if (v2336 >= v2333)
          goto LABEL_3114;
      }
      ++v2332;
LABEL_3118:
      v2332 = (uint64_t *)*v2332;
      if (!v2332)
        goto LABEL_3130;
    }
  }
  v2326 = 0;
LABEL_3133:
  *v2323 = v2326;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v195 = v3[361];
  if (v195 >> 30)
    v2341 = 1;
  else
    v2341 = (_DWORD)v195 == v5;
  if (v2341)
    goto LABEL_481;
LABEL_3137:
  v2342 = *(_QWORD *)(v1[2] + 8);
  v2343 = v195 & 0xFFFFFFFFCFFFFFFFLL;
  v2344 = *(_QWORD *)(*(_QWORD *)(v2342 + 8) + 2448);
  v2345 = (unsigned int *)(v2344 + 520 * (v195 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2346 = *v2345;
  if ((_DWORD)v2346)
  {
    v2347 = 0;
    v2348 = 0;
    v2349 = **(_QWORD **)(v2342 + 16);
    v2350 = v2344 + 520 * v2343;
    v2351 = v2350 + 364;
    v2352 = v2350 + 340;
    while (1)
    {
      v2353 = (uint64_t *)(v2351 + 12 * v2347);
      v2354 = *(uint64_t **)(v2349 + 2512);
      if (v2354)
        break;
LABEL_3156:
      *(_WORD *)(v2352 + 2 * v2348) = *(_WORD *)(v2352 + 2 * v2347);
      if (v2347 != v2348)
      {
        v2361 = *v2353;
        v2362 = v2351 + 12 * v2348;
        *(_DWORD *)(v2362 + 8) = *((_DWORD *)v2353 + 2);
        *(_QWORD *)v2362 = v2361;
      }
      ++v2348;
LABEL_3140:
      if (++v2347 == v2346)
        goto LABEL_3159;
    }
    v2355 = *(_DWORD *)v2353;
    v2356 = *((_DWORD *)v2353 + 1);
    v2357 = *((_DWORD *)v2353 + 2);
    while (1)
    {
      v2358 = *((_DWORD *)v2354 + 7);
      if (v2355 == v2358)
      {
        v2359 = *((_DWORD *)v2354 + 8);
        if (v2356 == v2359)
        {
          v2360 = *((_DWORD *)v2354 + 9);
          if (v2357 < v2360)
            goto LABEL_3144;
          if (v2360 >= v2357)
            goto LABEL_3140;
        }
        else
        {
          if (v2356 < v2359)
            goto LABEL_3144;
          if (v2359 >= v2356)
            goto LABEL_3140;
        }
      }
      else
      {
        if (v2355 < v2358)
          goto LABEL_3144;
        if (v2358 >= v2355)
          goto LABEL_3140;
      }
      ++v2354;
LABEL_3144:
      v2354 = (uint64_t *)*v2354;
      if (!v2354)
        goto LABEL_3156;
    }
  }
  v2348 = 0;
LABEL_3159:
  *v2345 = v2348;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v197 = v3[362];
  if (v197 >> 30)
    v2363 = 1;
  else
    v2363 = (_DWORD)v197 == v5;
  if (v2363)
    goto LABEL_486;
LABEL_3163:
  v2364 = *(_QWORD *)(v1[2] + 8);
  v2365 = v197 & 0xFFFFFFFFCFFFFFFFLL;
  v2366 = *(_QWORD *)(*(_QWORD *)(v2364 + 8) + 2448);
  v2367 = (unsigned int *)(v2366 + 520 * (v197 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2368 = *v2367;
  if ((_DWORD)v2368)
  {
    v2369 = 0;
    v2370 = 0;
    v2371 = **(_QWORD **)(v2364 + 16);
    v2372 = v2366 + 520 * v2365;
    v2373 = v2372 + 364;
    v2374 = v2372 + 340;
    while (1)
    {
      v2375 = (uint64_t *)(v2373 + 12 * v2369);
      v2376 = *(uint64_t **)(v2371 + 2512);
      if (v2376)
        break;
LABEL_3182:
      *(_WORD *)(v2374 + 2 * v2370) = *(_WORD *)(v2374 + 2 * v2369);
      if (v2369 != v2370)
      {
        v2383 = *v2375;
        v2384 = v2373 + 12 * v2370;
        *(_DWORD *)(v2384 + 8) = *((_DWORD *)v2375 + 2);
        *(_QWORD *)v2384 = v2383;
      }
      ++v2370;
LABEL_3166:
      if (++v2369 == v2368)
        goto LABEL_3185;
    }
    v2377 = *(_DWORD *)v2375;
    v2378 = *((_DWORD *)v2375 + 1);
    v2379 = *((_DWORD *)v2375 + 2);
    while (1)
    {
      v2380 = *((_DWORD *)v2376 + 7);
      if (v2377 == v2380)
      {
        v2381 = *((_DWORD *)v2376 + 8);
        if (v2378 == v2381)
        {
          v2382 = *((_DWORD *)v2376 + 9);
          if (v2379 < v2382)
            goto LABEL_3170;
          if (v2382 >= v2379)
            goto LABEL_3166;
        }
        else
        {
          if (v2378 < v2381)
            goto LABEL_3170;
          if (v2381 >= v2378)
            goto LABEL_3166;
        }
      }
      else
      {
        if (v2377 < v2380)
          goto LABEL_3170;
        if (v2380 >= v2377)
          goto LABEL_3166;
      }
      ++v2376;
LABEL_3170:
      v2376 = (uint64_t *)*v2376;
      if (!v2376)
        goto LABEL_3182;
    }
  }
  v2370 = 0;
LABEL_3185:
  *v2367 = v2370;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v199 = v3[363];
  if (v199 >> 30)
    v2385 = 1;
  else
    v2385 = (_DWORD)v199 == v5;
  if (v2385)
    goto LABEL_491;
LABEL_3189:
  v2386 = *(_QWORD *)(v1[2] + 8);
  v2387 = v199 & 0xFFFFFFFFCFFFFFFFLL;
  v2388 = *(_QWORD *)(*(_QWORD *)(v2386 + 8) + 2448);
  v2389 = (unsigned int *)(v2388 + 520 * (v199 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2390 = *v2389;
  if ((_DWORD)v2390)
  {
    v2391 = 0;
    v2392 = 0;
    v2393 = **(_QWORD **)(v2386 + 16);
    v2394 = v2388 + 520 * v2387;
    v2395 = v2394 + 364;
    v2396 = v2394 + 340;
    while (1)
    {
      v2397 = (uint64_t *)(v2395 + 12 * v2391);
      v2398 = *(uint64_t **)(v2393 + 2512);
      if (v2398)
        break;
LABEL_3208:
      *(_WORD *)(v2396 + 2 * v2392) = *(_WORD *)(v2396 + 2 * v2391);
      if (v2391 != v2392)
      {
        v2405 = *v2397;
        v2406 = v2395 + 12 * v2392;
        *(_DWORD *)(v2406 + 8) = *((_DWORD *)v2397 + 2);
        *(_QWORD *)v2406 = v2405;
      }
      ++v2392;
LABEL_3192:
      if (++v2391 == v2390)
        goto LABEL_3211;
    }
    v2399 = *(_DWORD *)v2397;
    v2400 = *((_DWORD *)v2397 + 1);
    v2401 = *((_DWORD *)v2397 + 2);
    while (1)
    {
      v2402 = *((_DWORD *)v2398 + 7);
      if (v2399 == v2402)
      {
        v2403 = *((_DWORD *)v2398 + 8);
        if (v2400 == v2403)
        {
          v2404 = *((_DWORD *)v2398 + 9);
          if (v2401 < v2404)
            goto LABEL_3196;
          if (v2404 >= v2401)
            goto LABEL_3192;
        }
        else
        {
          if (v2400 < v2403)
            goto LABEL_3196;
          if (v2403 >= v2400)
            goto LABEL_3192;
        }
      }
      else
      {
        if (v2399 < v2402)
          goto LABEL_3196;
        if (v2402 >= v2399)
          goto LABEL_3192;
      }
      ++v2398;
LABEL_3196:
      v2398 = (uint64_t *)*v2398;
      if (!v2398)
        goto LABEL_3208;
    }
  }
  v2392 = 0;
LABEL_3211:
  *v2389 = v2392;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v201 = v3[364];
  if (v201 >> 30)
    v2407 = 1;
  else
    v2407 = (_DWORD)v201 == v5;
  if (v2407)
    goto LABEL_496;
LABEL_3215:
  v2408 = *(_QWORD *)(v1[2] + 8);
  v2409 = v201 & 0xFFFFFFFFCFFFFFFFLL;
  v2410 = *(_QWORD *)(*(_QWORD *)(v2408 + 8) + 2448);
  v2411 = (unsigned int *)(v2410 + 520 * (v201 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2412 = *v2411;
  if ((_DWORD)v2412)
  {
    v2413 = 0;
    v2414 = 0;
    v2415 = **(_QWORD **)(v2408 + 16);
    v2416 = v2410 + 520 * v2409;
    v2417 = v2416 + 364;
    v2418 = v2416 + 340;
    while (1)
    {
      v2419 = (uint64_t *)(v2417 + 12 * v2413);
      v2420 = *(uint64_t **)(v2415 + 2512);
      if (v2420)
        break;
LABEL_3234:
      *(_WORD *)(v2418 + 2 * v2414) = *(_WORD *)(v2418 + 2 * v2413);
      if (v2413 != v2414)
      {
        v2427 = *v2419;
        v2428 = v2417 + 12 * v2414;
        *(_DWORD *)(v2428 + 8) = *((_DWORD *)v2419 + 2);
        *(_QWORD *)v2428 = v2427;
      }
      ++v2414;
LABEL_3218:
      if (++v2413 == v2412)
        goto LABEL_3237;
    }
    v2421 = *(_DWORD *)v2419;
    v2422 = *((_DWORD *)v2419 + 1);
    v2423 = *((_DWORD *)v2419 + 2);
    while (1)
    {
      v2424 = *((_DWORD *)v2420 + 7);
      if (v2421 == v2424)
      {
        v2425 = *((_DWORD *)v2420 + 8);
        if (v2422 == v2425)
        {
          v2426 = *((_DWORD *)v2420 + 9);
          if (v2423 < v2426)
            goto LABEL_3222;
          if (v2426 >= v2423)
            goto LABEL_3218;
        }
        else
        {
          if (v2422 < v2425)
            goto LABEL_3222;
          if (v2425 >= v2422)
            goto LABEL_3218;
        }
      }
      else
      {
        if (v2421 < v2424)
          goto LABEL_3222;
        if (v2424 >= v2421)
          goto LABEL_3218;
      }
      ++v2420;
LABEL_3222:
      v2420 = (uint64_t *)*v2420;
      if (!v2420)
        goto LABEL_3234;
    }
  }
  v2414 = 0;
LABEL_3237:
  *v2411 = v2414;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v203 = v3[365];
  if (v203 >> 30)
    v2429 = 1;
  else
    v2429 = (_DWORD)v203 == v5;
  if (v2429)
    goto LABEL_501;
LABEL_3241:
  v2430 = *(_QWORD *)(v1[2] + 8);
  v2431 = v203 & 0xFFFFFFFFCFFFFFFFLL;
  v2432 = *(_QWORD *)(*(_QWORD *)(v2430 + 8) + 2448);
  v2433 = (unsigned int *)(v2432 + 520 * (v203 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2434 = *v2433;
  if ((_DWORD)v2434)
  {
    v2435 = 0;
    v2436 = 0;
    v2437 = **(_QWORD **)(v2430 + 16);
    v2438 = v2432 + 520 * v2431;
    v2439 = v2438 + 364;
    v2440 = v2438 + 340;
    while (1)
    {
      v2441 = (uint64_t *)(v2439 + 12 * v2435);
      v2442 = *(uint64_t **)(v2437 + 2512);
      if (v2442)
        break;
LABEL_3260:
      *(_WORD *)(v2440 + 2 * v2436) = *(_WORD *)(v2440 + 2 * v2435);
      if (v2435 != v2436)
      {
        v2449 = *v2441;
        v2450 = v2439 + 12 * v2436;
        *(_DWORD *)(v2450 + 8) = *((_DWORD *)v2441 + 2);
        *(_QWORD *)v2450 = v2449;
      }
      ++v2436;
LABEL_3244:
      if (++v2435 == v2434)
        goto LABEL_3263;
    }
    v2443 = *(_DWORD *)v2441;
    v2444 = *((_DWORD *)v2441 + 1);
    v2445 = *((_DWORD *)v2441 + 2);
    while (1)
    {
      v2446 = *((_DWORD *)v2442 + 7);
      if (v2443 == v2446)
      {
        v2447 = *((_DWORD *)v2442 + 8);
        if (v2444 == v2447)
        {
          v2448 = *((_DWORD *)v2442 + 9);
          if (v2445 < v2448)
            goto LABEL_3248;
          if (v2448 >= v2445)
            goto LABEL_3244;
        }
        else
        {
          if (v2444 < v2447)
            goto LABEL_3248;
          if (v2447 >= v2444)
            goto LABEL_3244;
        }
      }
      else
      {
        if (v2443 < v2446)
          goto LABEL_3248;
        if (v2446 >= v2443)
          goto LABEL_3244;
      }
      ++v2442;
LABEL_3248:
      v2442 = (uint64_t *)*v2442;
      if (!v2442)
        goto LABEL_3260;
    }
  }
  v2436 = 0;
LABEL_3263:
  *v2433 = v2436;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v205 = v3[366];
  if (v205 >> 30)
    v2451 = 1;
  else
    v2451 = (_DWORD)v205 == v5;
  if (v2451)
    goto LABEL_506;
LABEL_3267:
  v2452 = *(_QWORD *)(v1[2] + 8);
  v2453 = v205 & 0xFFFFFFFFCFFFFFFFLL;
  v2454 = *(_QWORD *)(*(_QWORD *)(v2452 + 8) + 2448);
  v2455 = (unsigned int *)(v2454 + 520 * (v205 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2456 = *v2455;
  if ((_DWORD)v2456)
  {
    v2457 = 0;
    v2458 = 0;
    v2459 = **(_QWORD **)(v2452 + 16);
    v2460 = v2454 + 520 * v2453;
    v2461 = v2460 + 364;
    v2462 = v2460 + 340;
    while (1)
    {
      v2463 = (uint64_t *)(v2461 + 12 * v2457);
      v2464 = *(uint64_t **)(v2459 + 2512);
      if (v2464)
        break;
LABEL_3286:
      *(_WORD *)(v2462 + 2 * v2458) = *(_WORD *)(v2462 + 2 * v2457);
      if (v2457 != v2458)
      {
        v2471 = *v2463;
        v2472 = v2461 + 12 * v2458;
        *(_DWORD *)(v2472 + 8) = *((_DWORD *)v2463 + 2);
        *(_QWORD *)v2472 = v2471;
      }
      ++v2458;
LABEL_3270:
      if (++v2457 == v2456)
        goto LABEL_3289;
    }
    v2465 = *(_DWORD *)v2463;
    v2466 = *((_DWORD *)v2463 + 1);
    v2467 = *((_DWORD *)v2463 + 2);
    while (1)
    {
      v2468 = *((_DWORD *)v2464 + 7);
      if (v2465 == v2468)
      {
        v2469 = *((_DWORD *)v2464 + 8);
        if (v2466 == v2469)
        {
          v2470 = *((_DWORD *)v2464 + 9);
          if (v2467 < v2470)
            goto LABEL_3274;
          if (v2470 >= v2467)
            goto LABEL_3270;
        }
        else
        {
          if (v2466 < v2469)
            goto LABEL_3274;
          if (v2469 >= v2466)
            goto LABEL_3270;
        }
      }
      else
      {
        if (v2465 < v2468)
          goto LABEL_3274;
        if (v2468 >= v2465)
          goto LABEL_3270;
      }
      ++v2464;
LABEL_3274:
      v2464 = (uint64_t *)*v2464;
      if (!v2464)
        goto LABEL_3286;
    }
  }
  v2458 = 0;
LABEL_3289:
  *v2455 = v2458;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v207 = v3[367];
  if (v207 >> 30)
    v2473 = 1;
  else
    v2473 = (_DWORD)v207 == v5;
  if (v2473)
    goto LABEL_511;
LABEL_3293:
  v2474 = *(_QWORD *)(v1[2] + 8);
  v2475 = v207 & 0xFFFFFFFFCFFFFFFFLL;
  v2476 = *(_QWORD *)(*(_QWORD *)(v2474 + 8) + 2448);
  v2477 = (unsigned int *)(v2476 + 520 * (v207 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2478 = *v2477;
  if ((_DWORD)v2478)
  {
    v2479 = 0;
    v2480 = 0;
    v2481 = **(_QWORD **)(v2474 + 16);
    v2482 = v2476 + 520 * v2475;
    v2483 = v2482 + 364;
    v2484 = v2482 + 340;
    while (1)
    {
      v2485 = (uint64_t *)(v2483 + 12 * v2479);
      v2486 = *(uint64_t **)(v2481 + 2512);
      if (v2486)
        break;
LABEL_3312:
      *(_WORD *)(v2484 + 2 * v2480) = *(_WORD *)(v2484 + 2 * v2479);
      if (v2479 != v2480)
      {
        v2493 = *v2485;
        v2494 = v2483 + 12 * v2480;
        *(_DWORD *)(v2494 + 8) = *((_DWORD *)v2485 + 2);
        *(_QWORD *)v2494 = v2493;
      }
      ++v2480;
LABEL_3296:
      if (++v2479 == v2478)
        goto LABEL_3315;
    }
    v2487 = *(_DWORD *)v2485;
    v2488 = *((_DWORD *)v2485 + 1);
    v2489 = *((_DWORD *)v2485 + 2);
    while (1)
    {
      v2490 = *((_DWORD *)v2486 + 7);
      if (v2487 == v2490)
      {
        v2491 = *((_DWORD *)v2486 + 8);
        if (v2488 == v2491)
        {
          v2492 = *((_DWORD *)v2486 + 9);
          if (v2489 < v2492)
            goto LABEL_3300;
          if (v2492 >= v2489)
            goto LABEL_3296;
        }
        else
        {
          if (v2488 < v2491)
            goto LABEL_3300;
          if (v2491 >= v2488)
            goto LABEL_3296;
        }
      }
      else
      {
        if (v2487 < v2490)
          goto LABEL_3300;
        if (v2490 >= v2487)
          goto LABEL_3296;
      }
      ++v2486;
LABEL_3300:
      v2486 = (uint64_t *)*v2486;
      if (!v2486)
        goto LABEL_3312;
    }
  }
  v2480 = 0;
LABEL_3315:
  *v2477 = v2480;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v209 = v3[368];
  if (v209 >> 30)
    v2495 = 1;
  else
    v2495 = (_DWORD)v209 == v5;
  if (v2495)
    goto LABEL_516;
LABEL_3319:
  v2496 = *(_QWORD *)(v1[2] + 8);
  v2497 = v209 & 0xFFFFFFFFCFFFFFFFLL;
  v2498 = *(_QWORD *)(*(_QWORD *)(v2496 + 8) + 2448);
  v2499 = (unsigned int *)(v2498 + 520 * (v209 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2500 = *v2499;
  if ((_DWORD)v2500)
  {
    v2501 = 0;
    v2502 = 0;
    v2503 = **(_QWORD **)(v2496 + 16);
    v2504 = v2498 + 520 * v2497;
    v2505 = v2504 + 364;
    v2506 = v2504 + 340;
    while (1)
    {
      v2507 = (uint64_t *)(v2505 + 12 * v2501);
      v2508 = *(uint64_t **)(v2503 + 2512);
      if (v2508)
        break;
LABEL_3338:
      *(_WORD *)(v2506 + 2 * v2502) = *(_WORD *)(v2506 + 2 * v2501);
      if (v2501 != v2502)
      {
        v2515 = *v2507;
        v2516 = v2505 + 12 * v2502;
        *(_DWORD *)(v2516 + 8) = *((_DWORD *)v2507 + 2);
        *(_QWORD *)v2516 = v2515;
      }
      ++v2502;
LABEL_3322:
      if (++v2501 == v2500)
        goto LABEL_3341;
    }
    v2509 = *(_DWORD *)v2507;
    v2510 = *((_DWORD *)v2507 + 1);
    v2511 = *((_DWORD *)v2507 + 2);
    while (1)
    {
      v2512 = *((_DWORD *)v2508 + 7);
      if (v2509 == v2512)
      {
        v2513 = *((_DWORD *)v2508 + 8);
        if (v2510 == v2513)
        {
          v2514 = *((_DWORD *)v2508 + 9);
          if (v2511 < v2514)
            goto LABEL_3326;
          if (v2514 >= v2511)
            goto LABEL_3322;
        }
        else
        {
          if (v2510 < v2513)
            goto LABEL_3326;
          if (v2513 >= v2510)
            goto LABEL_3322;
        }
      }
      else
      {
        if (v2509 < v2512)
          goto LABEL_3326;
        if (v2512 >= v2509)
          goto LABEL_3322;
      }
      ++v2508;
LABEL_3326:
      v2508 = (uint64_t *)*v2508;
      if (!v2508)
        goto LABEL_3338;
    }
  }
  v2502 = 0;
LABEL_3341:
  *v2499 = v2502;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v211 = v3[369];
  if (v211 >> 30)
    v2517 = 1;
  else
    v2517 = (_DWORD)v211 == v5;
  if (v2517)
    goto LABEL_521;
LABEL_3345:
  v2518 = *(_QWORD *)(v1[2] + 8);
  v2519 = v211 & 0xFFFFFFFFCFFFFFFFLL;
  v2520 = *(_QWORD *)(*(_QWORD *)(v2518 + 8) + 2448);
  v2521 = (unsigned int *)(v2520 + 520 * (v211 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2522 = *v2521;
  if ((_DWORD)v2522)
  {
    v2523 = 0;
    v2524 = 0;
    v2525 = **(_QWORD **)(v2518 + 16);
    v2526 = v2520 + 520 * v2519;
    v2527 = v2526 + 364;
    v2528 = v2526 + 340;
    while (1)
    {
      v2529 = (uint64_t *)(v2527 + 12 * v2523);
      v2530 = *(uint64_t **)(v2525 + 2512);
      if (v2530)
        break;
LABEL_3364:
      *(_WORD *)(v2528 + 2 * v2524) = *(_WORD *)(v2528 + 2 * v2523);
      if (v2523 != v2524)
      {
        v2537 = *v2529;
        v2538 = v2527 + 12 * v2524;
        *(_DWORD *)(v2538 + 8) = *((_DWORD *)v2529 + 2);
        *(_QWORD *)v2538 = v2537;
      }
      ++v2524;
LABEL_3348:
      if (++v2523 == v2522)
        goto LABEL_3367;
    }
    v2531 = *(_DWORD *)v2529;
    v2532 = *((_DWORD *)v2529 + 1);
    v2533 = *((_DWORD *)v2529 + 2);
    while (1)
    {
      v2534 = *((_DWORD *)v2530 + 7);
      if (v2531 == v2534)
      {
        v2535 = *((_DWORD *)v2530 + 8);
        if (v2532 == v2535)
        {
          v2536 = *((_DWORD *)v2530 + 9);
          if (v2533 < v2536)
            goto LABEL_3352;
          if (v2536 >= v2533)
            goto LABEL_3348;
        }
        else
        {
          if (v2532 < v2535)
            goto LABEL_3352;
          if (v2535 >= v2532)
            goto LABEL_3348;
        }
      }
      else
      {
        if (v2531 < v2534)
          goto LABEL_3352;
        if (v2534 >= v2531)
          goto LABEL_3348;
      }
      ++v2530;
LABEL_3352:
      v2530 = (uint64_t *)*v2530;
      if (!v2530)
        goto LABEL_3364;
    }
  }
  v2524 = 0;
LABEL_3367:
  *v2521 = v2524;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v213 = v3[370];
  if (v213 >> 30)
    v2539 = 1;
  else
    v2539 = (_DWORD)v213 == v5;
  if (v2539)
    goto LABEL_526;
LABEL_3371:
  v2540 = *(_QWORD *)(v1[2] + 8);
  v2541 = v213 & 0xFFFFFFFFCFFFFFFFLL;
  v2542 = *(_QWORD *)(*(_QWORD *)(v2540 + 8) + 2448);
  v2543 = (unsigned int *)(v2542 + 520 * (v213 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2544 = *v2543;
  if ((_DWORD)v2544)
  {
    v2545 = 0;
    v2546 = 0;
    v2547 = **(_QWORD **)(v2540 + 16);
    v2548 = v2542 + 520 * v2541;
    v2549 = v2548 + 364;
    v2550 = v2548 + 340;
    while (1)
    {
      v2551 = (uint64_t *)(v2549 + 12 * v2545);
      v2552 = *(uint64_t **)(v2547 + 2512);
      if (v2552)
        break;
LABEL_3390:
      *(_WORD *)(v2550 + 2 * v2546) = *(_WORD *)(v2550 + 2 * v2545);
      if (v2545 != v2546)
      {
        v2559 = *v2551;
        v2560 = v2549 + 12 * v2546;
        *(_DWORD *)(v2560 + 8) = *((_DWORD *)v2551 + 2);
        *(_QWORD *)v2560 = v2559;
      }
      ++v2546;
LABEL_3374:
      if (++v2545 == v2544)
        goto LABEL_3393;
    }
    v2553 = *(_DWORD *)v2551;
    v2554 = *((_DWORD *)v2551 + 1);
    v2555 = *((_DWORD *)v2551 + 2);
    while (1)
    {
      v2556 = *((_DWORD *)v2552 + 7);
      if (v2553 == v2556)
      {
        v2557 = *((_DWORD *)v2552 + 8);
        if (v2554 == v2557)
        {
          v2558 = *((_DWORD *)v2552 + 9);
          if (v2555 < v2558)
            goto LABEL_3378;
          if (v2558 >= v2555)
            goto LABEL_3374;
        }
        else
        {
          if (v2554 < v2557)
            goto LABEL_3378;
          if (v2557 >= v2554)
            goto LABEL_3374;
        }
      }
      else
      {
        if (v2553 < v2556)
          goto LABEL_3378;
        if (v2556 >= v2553)
          goto LABEL_3374;
      }
      ++v2552;
LABEL_3378:
      v2552 = (uint64_t *)*v2552;
      if (!v2552)
        goto LABEL_3390;
    }
  }
  v2546 = 0;
LABEL_3393:
  *v2543 = v2546;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v215 = v3[371];
  if (v215 >> 30)
    v2561 = 1;
  else
    v2561 = (_DWORD)v215 == v5;
  if (v2561)
    goto LABEL_531;
LABEL_3397:
  v2562 = *(_QWORD *)(v1[2] + 8);
  v2563 = v215 & 0xFFFFFFFFCFFFFFFFLL;
  v2564 = *(_QWORD *)(*(_QWORD *)(v2562 + 8) + 2448);
  v2565 = (unsigned int *)(v2564 + 520 * (v215 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2566 = *v2565;
  if ((_DWORD)v2566)
  {
    v2567 = 0;
    v2568 = 0;
    v2569 = **(_QWORD **)(v2562 + 16);
    v2570 = v2564 + 520 * v2563;
    v2571 = v2570 + 364;
    v2572 = v2570 + 340;
    while (1)
    {
      v2573 = (uint64_t *)(v2571 + 12 * v2567);
      v2574 = *(uint64_t **)(v2569 + 2512);
      if (v2574)
        break;
LABEL_3416:
      *(_WORD *)(v2572 + 2 * v2568) = *(_WORD *)(v2572 + 2 * v2567);
      if (v2567 != v2568)
      {
        v2581 = *v2573;
        v2582 = v2571 + 12 * v2568;
        *(_DWORD *)(v2582 + 8) = *((_DWORD *)v2573 + 2);
        *(_QWORD *)v2582 = v2581;
      }
      ++v2568;
LABEL_3400:
      if (++v2567 == v2566)
        goto LABEL_3419;
    }
    v2575 = *(_DWORD *)v2573;
    v2576 = *((_DWORD *)v2573 + 1);
    v2577 = *((_DWORD *)v2573 + 2);
    while (1)
    {
      v2578 = *((_DWORD *)v2574 + 7);
      if (v2575 == v2578)
      {
        v2579 = *((_DWORD *)v2574 + 8);
        if (v2576 == v2579)
        {
          v2580 = *((_DWORD *)v2574 + 9);
          if (v2577 < v2580)
            goto LABEL_3404;
          if (v2580 >= v2577)
            goto LABEL_3400;
        }
        else
        {
          if (v2576 < v2579)
            goto LABEL_3404;
          if (v2579 >= v2576)
            goto LABEL_3400;
        }
      }
      else
      {
        if (v2575 < v2578)
          goto LABEL_3404;
        if (v2578 >= v2575)
          goto LABEL_3400;
      }
      ++v2574;
LABEL_3404:
      v2574 = (uint64_t *)*v2574;
      if (!v2574)
        goto LABEL_3416;
    }
  }
  v2568 = 0;
LABEL_3419:
  *v2565 = v2568;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v217 = v3[372];
  if (v217 >> 30)
    v2583 = 1;
  else
    v2583 = (_DWORD)v217 == v5;
  if (v2583)
    goto LABEL_536;
LABEL_3423:
  v2584 = *(_QWORD *)(v1[2] + 8);
  v2585 = v217 & 0xFFFFFFFFCFFFFFFFLL;
  v2586 = *(_QWORD *)(*(_QWORD *)(v2584 + 8) + 2448);
  v2587 = (unsigned int *)(v2586 + 520 * (v217 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2588 = *v2587;
  if ((_DWORD)v2588)
  {
    v2589 = 0;
    v2590 = 0;
    v2591 = **(_QWORD **)(v2584 + 16);
    v2592 = v2586 + 520 * v2585;
    v2593 = v2592 + 364;
    v2594 = v2592 + 340;
    while (1)
    {
      v2595 = (uint64_t *)(v2593 + 12 * v2589);
      v2596 = *(uint64_t **)(v2591 + 2512);
      if (v2596)
        break;
LABEL_3442:
      *(_WORD *)(v2594 + 2 * v2590) = *(_WORD *)(v2594 + 2 * v2589);
      if (v2589 != v2590)
      {
        v2603 = *v2595;
        v2604 = v2593 + 12 * v2590;
        *(_DWORD *)(v2604 + 8) = *((_DWORD *)v2595 + 2);
        *(_QWORD *)v2604 = v2603;
      }
      ++v2590;
LABEL_3426:
      if (++v2589 == v2588)
        goto LABEL_3445;
    }
    v2597 = *(_DWORD *)v2595;
    v2598 = *((_DWORD *)v2595 + 1);
    v2599 = *((_DWORD *)v2595 + 2);
    while (1)
    {
      v2600 = *((_DWORD *)v2596 + 7);
      if (v2597 == v2600)
      {
        v2601 = *((_DWORD *)v2596 + 8);
        if (v2598 == v2601)
        {
          v2602 = *((_DWORD *)v2596 + 9);
          if (v2599 < v2602)
            goto LABEL_3430;
          if (v2602 >= v2599)
            goto LABEL_3426;
        }
        else
        {
          if (v2598 < v2601)
            goto LABEL_3430;
          if (v2601 >= v2598)
            goto LABEL_3426;
        }
      }
      else
      {
        if (v2597 < v2600)
          goto LABEL_3430;
        if (v2600 >= v2597)
          goto LABEL_3426;
      }
      ++v2596;
LABEL_3430:
      v2596 = (uint64_t *)*v2596;
      if (!v2596)
        goto LABEL_3442;
    }
  }
  v2590 = 0;
LABEL_3445:
  *v2587 = v2590;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v219 = v3[373];
  if (v219 >> 30)
    v2605 = 1;
  else
    v2605 = (_DWORD)v219 == v5;
  if (v2605)
    goto LABEL_541;
LABEL_3449:
  v2606 = *(_QWORD *)(v1[2] + 8);
  v2607 = v219 & 0xFFFFFFFFCFFFFFFFLL;
  v2608 = *(_QWORD *)(*(_QWORD *)(v2606 + 8) + 2448);
  v2609 = (unsigned int *)(v2608 + 520 * (v219 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2610 = *v2609;
  if ((_DWORD)v2610)
  {
    v2611 = 0;
    v2612 = 0;
    v2613 = **(_QWORD **)(v2606 + 16);
    v2614 = v2608 + 520 * v2607;
    v2615 = v2614 + 364;
    v2616 = v2614 + 340;
    while (1)
    {
      v2617 = (uint64_t *)(v2615 + 12 * v2611);
      v2618 = *(uint64_t **)(v2613 + 2512);
      if (v2618)
        break;
LABEL_3468:
      *(_WORD *)(v2616 + 2 * v2612) = *(_WORD *)(v2616 + 2 * v2611);
      if (v2611 != v2612)
      {
        v2625 = *v2617;
        v2626 = v2615 + 12 * v2612;
        *(_DWORD *)(v2626 + 8) = *((_DWORD *)v2617 + 2);
        *(_QWORD *)v2626 = v2625;
      }
      ++v2612;
LABEL_3452:
      if (++v2611 == v2610)
        goto LABEL_3471;
    }
    v2619 = *(_DWORD *)v2617;
    v2620 = *((_DWORD *)v2617 + 1);
    v2621 = *((_DWORD *)v2617 + 2);
    while (1)
    {
      v2622 = *((_DWORD *)v2618 + 7);
      if (v2619 == v2622)
      {
        v2623 = *((_DWORD *)v2618 + 8);
        if (v2620 == v2623)
        {
          v2624 = *((_DWORD *)v2618 + 9);
          if (v2621 < v2624)
            goto LABEL_3456;
          if (v2624 >= v2621)
            goto LABEL_3452;
        }
        else
        {
          if (v2620 < v2623)
            goto LABEL_3456;
          if (v2623 >= v2620)
            goto LABEL_3452;
        }
      }
      else
      {
        if (v2619 < v2622)
          goto LABEL_3456;
        if (v2622 >= v2619)
          goto LABEL_3452;
      }
      ++v2618;
LABEL_3456:
      v2618 = (uint64_t *)*v2618;
      if (!v2618)
        goto LABEL_3468;
    }
  }
  v2612 = 0;
LABEL_3471:
  *v2609 = v2612;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v221 = v3[374];
  if (v221 >> 30)
    v2627 = 1;
  else
    v2627 = (_DWORD)v221 == v5;
  if (v2627)
    goto LABEL_546;
LABEL_3475:
  v2628 = *(_QWORD *)(v1[2] + 8);
  v2629 = v221 & 0xFFFFFFFFCFFFFFFFLL;
  v2630 = *(_QWORD *)(*(_QWORD *)(v2628 + 8) + 2448);
  v2631 = (unsigned int *)(v2630 + 520 * (v221 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2632 = *v2631;
  if ((_DWORD)v2632)
  {
    v2633 = 0;
    v2634 = 0;
    v2635 = **(_QWORD **)(v2628 + 16);
    v2636 = v2630 + 520 * v2629;
    v2637 = v2636 + 364;
    v2638 = v2636 + 340;
    while (1)
    {
      v2639 = (uint64_t *)(v2637 + 12 * v2633);
      v2640 = *(uint64_t **)(v2635 + 2512);
      if (v2640)
        break;
LABEL_3494:
      *(_WORD *)(v2638 + 2 * v2634) = *(_WORD *)(v2638 + 2 * v2633);
      if (v2633 != v2634)
      {
        v2647 = *v2639;
        v2648 = v2637 + 12 * v2634;
        *(_DWORD *)(v2648 + 8) = *((_DWORD *)v2639 + 2);
        *(_QWORD *)v2648 = v2647;
      }
      ++v2634;
LABEL_3478:
      if (++v2633 == v2632)
        goto LABEL_3497;
    }
    v2641 = *(_DWORD *)v2639;
    v2642 = *((_DWORD *)v2639 + 1);
    v2643 = *((_DWORD *)v2639 + 2);
    while (1)
    {
      v2644 = *((_DWORD *)v2640 + 7);
      if (v2641 == v2644)
      {
        v2645 = *((_DWORD *)v2640 + 8);
        if (v2642 == v2645)
        {
          v2646 = *((_DWORD *)v2640 + 9);
          if (v2643 < v2646)
            goto LABEL_3482;
          if (v2646 >= v2643)
            goto LABEL_3478;
        }
        else
        {
          if (v2642 < v2645)
            goto LABEL_3482;
          if (v2645 >= v2642)
            goto LABEL_3478;
        }
      }
      else
      {
        if (v2641 < v2644)
          goto LABEL_3482;
        if (v2644 >= v2641)
          goto LABEL_3478;
      }
      ++v2640;
LABEL_3482:
      v2640 = (uint64_t *)*v2640;
      if (!v2640)
        goto LABEL_3494;
    }
  }
  v2634 = 0;
LABEL_3497:
  *v2631 = v2634;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v223 = v3[375];
  if (v223 >> 30)
    v2649 = 1;
  else
    v2649 = (_DWORD)v223 == v5;
  if (v2649)
    goto LABEL_551;
LABEL_3501:
  v2650 = *(_QWORD *)(v1[2] + 8);
  v2651 = v223 & 0xFFFFFFFFCFFFFFFFLL;
  v2652 = *(_QWORD *)(*(_QWORD *)(v2650 + 8) + 2448);
  v2653 = (unsigned int *)(v2652 + 520 * (v223 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2654 = *v2653;
  if ((_DWORD)v2654)
  {
    v2655 = 0;
    v2656 = 0;
    v2657 = **(_QWORD **)(v2650 + 16);
    v2658 = v2652 + 520 * v2651;
    v2659 = v2658 + 364;
    v2660 = v2658 + 340;
    while (1)
    {
      v2661 = (uint64_t *)(v2659 + 12 * v2655);
      v2662 = *(uint64_t **)(v2657 + 2512);
      if (v2662)
        break;
LABEL_3520:
      *(_WORD *)(v2660 + 2 * v2656) = *(_WORD *)(v2660 + 2 * v2655);
      if (v2655 != v2656)
      {
        v2669 = *v2661;
        v2670 = v2659 + 12 * v2656;
        *(_DWORD *)(v2670 + 8) = *((_DWORD *)v2661 + 2);
        *(_QWORD *)v2670 = v2669;
      }
      ++v2656;
LABEL_3504:
      if (++v2655 == v2654)
        goto LABEL_3523;
    }
    v2663 = *(_DWORD *)v2661;
    v2664 = *((_DWORD *)v2661 + 1);
    v2665 = *((_DWORD *)v2661 + 2);
    while (1)
    {
      v2666 = *((_DWORD *)v2662 + 7);
      if (v2663 == v2666)
      {
        v2667 = *((_DWORD *)v2662 + 8);
        if (v2664 == v2667)
        {
          v2668 = *((_DWORD *)v2662 + 9);
          if (v2665 < v2668)
            goto LABEL_3508;
          if (v2668 >= v2665)
            goto LABEL_3504;
        }
        else
        {
          if (v2664 < v2667)
            goto LABEL_3508;
          if (v2667 >= v2664)
            goto LABEL_3504;
        }
      }
      else
      {
        if (v2663 < v2666)
          goto LABEL_3508;
        if (v2666 >= v2663)
          goto LABEL_3504;
      }
      ++v2662;
LABEL_3508:
      v2662 = (uint64_t *)*v2662;
      if (!v2662)
        goto LABEL_3520;
    }
  }
  v2656 = 0;
LABEL_3523:
  *v2653 = v2656;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v225 = v3[376];
  if (v225 >> 30)
    v2671 = 1;
  else
    v2671 = (_DWORD)v225 == v5;
  if (v2671)
    goto LABEL_556;
LABEL_3527:
  v2672 = *(_QWORD *)(v1[2] + 8);
  v2673 = v225 & 0xFFFFFFFFCFFFFFFFLL;
  v2674 = *(_QWORD *)(*(_QWORD *)(v2672 + 8) + 2448);
  v2675 = (unsigned int *)(v2674 + 520 * (v225 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2676 = *v2675;
  if ((_DWORD)v2676)
  {
    v2677 = 0;
    v2678 = 0;
    v2679 = **(_QWORD **)(v2672 + 16);
    v2680 = v2674 + 520 * v2673;
    v2681 = v2680 + 364;
    v2682 = v2680 + 340;
    while (1)
    {
      v2683 = (uint64_t *)(v2681 + 12 * v2677);
      v2684 = *(uint64_t **)(v2679 + 2512);
      if (v2684)
        break;
LABEL_3546:
      *(_WORD *)(v2682 + 2 * v2678) = *(_WORD *)(v2682 + 2 * v2677);
      if (v2677 != v2678)
      {
        v2691 = *v2683;
        v2692 = v2681 + 12 * v2678;
        *(_DWORD *)(v2692 + 8) = *((_DWORD *)v2683 + 2);
        *(_QWORD *)v2692 = v2691;
      }
      ++v2678;
LABEL_3530:
      if (++v2677 == v2676)
        goto LABEL_3549;
    }
    v2685 = *(_DWORD *)v2683;
    v2686 = *((_DWORD *)v2683 + 1);
    v2687 = *((_DWORD *)v2683 + 2);
    while (1)
    {
      v2688 = *((_DWORD *)v2684 + 7);
      if (v2685 == v2688)
      {
        v2689 = *((_DWORD *)v2684 + 8);
        if (v2686 == v2689)
        {
          v2690 = *((_DWORD *)v2684 + 9);
          if (v2687 < v2690)
            goto LABEL_3534;
          if (v2690 >= v2687)
            goto LABEL_3530;
        }
        else
        {
          if (v2686 < v2689)
            goto LABEL_3534;
          if (v2689 >= v2686)
            goto LABEL_3530;
        }
      }
      else
      {
        if (v2685 < v2688)
          goto LABEL_3534;
        if (v2688 >= v2685)
          goto LABEL_3530;
      }
      ++v2684;
LABEL_3534:
      v2684 = (uint64_t *)*v2684;
      if (!v2684)
        goto LABEL_3546;
    }
  }
  v2678 = 0;
LABEL_3549:
  *v2675 = v2678;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v227 = v3[377];
  if (v227 >> 30)
    v2693 = 1;
  else
    v2693 = (_DWORD)v227 == v5;
  if (v2693)
    goto LABEL_561;
LABEL_3553:
  v2694 = *(_QWORD *)(v1[2] + 8);
  v2695 = v227 & 0xFFFFFFFFCFFFFFFFLL;
  v2696 = *(_QWORD *)(*(_QWORD *)(v2694 + 8) + 2448);
  v2697 = (unsigned int *)(v2696 + 520 * (v227 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2698 = *v2697;
  if ((_DWORD)v2698)
  {
    v2699 = 0;
    v2700 = 0;
    v2701 = **(_QWORD **)(v2694 + 16);
    v2702 = v2696 + 520 * v2695;
    v2703 = v2702 + 364;
    v2704 = v2702 + 340;
    while (1)
    {
      v2705 = (uint64_t *)(v2703 + 12 * v2699);
      v2706 = *(uint64_t **)(v2701 + 2512);
      if (v2706)
        break;
LABEL_3572:
      *(_WORD *)(v2704 + 2 * v2700) = *(_WORD *)(v2704 + 2 * v2699);
      if (v2699 != v2700)
      {
        v2713 = *v2705;
        v2714 = v2703 + 12 * v2700;
        *(_DWORD *)(v2714 + 8) = *((_DWORD *)v2705 + 2);
        *(_QWORD *)v2714 = v2713;
      }
      ++v2700;
LABEL_3556:
      if (++v2699 == v2698)
        goto LABEL_3575;
    }
    v2707 = *(_DWORD *)v2705;
    v2708 = *((_DWORD *)v2705 + 1);
    v2709 = *((_DWORD *)v2705 + 2);
    while (1)
    {
      v2710 = *((_DWORD *)v2706 + 7);
      if (v2707 == v2710)
      {
        v2711 = *((_DWORD *)v2706 + 8);
        if (v2708 == v2711)
        {
          v2712 = *((_DWORD *)v2706 + 9);
          if (v2709 < v2712)
            goto LABEL_3560;
          if (v2712 >= v2709)
            goto LABEL_3556;
        }
        else
        {
          if (v2708 < v2711)
            goto LABEL_3560;
          if (v2711 >= v2708)
            goto LABEL_3556;
        }
      }
      else
      {
        if (v2707 < v2710)
          goto LABEL_3560;
        if (v2710 >= v2707)
          goto LABEL_3556;
      }
      ++v2706;
LABEL_3560:
      v2706 = (uint64_t *)*v2706;
      if (!v2706)
        goto LABEL_3572;
    }
  }
  v2700 = 0;
LABEL_3575:
  *v2697 = v2700;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v229 = v3[378];
  if (v229 >> 30)
    v2715 = 1;
  else
    v2715 = (_DWORD)v229 == v5;
  if (v2715)
    goto LABEL_566;
LABEL_3579:
  v2716 = *(_QWORD *)(v1[2] + 8);
  v2717 = v229 & 0xFFFFFFFFCFFFFFFFLL;
  v2718 = *(_QWORD *)(*(_QWORD *)(v2716 + 8) + 2448);
  v2719 = (unsigned int *)(v2718 + 520 * (v229 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2720 = *v2719;
  if ((_DWORD)v2720)
  {
    v2721 = 0;
    v2722 = 0;
    v2723 = **(_QWORD **)(v2716 + 16);
    v2724 = v2718 + 520 * v2717;
    v2725 = v2724 + 364;
    v2726 = v2724 + 340;
    while (1)
    {
      v2727 = (uint64_t *)(v2725 + 12 * v2721);
      v2728 = *(uint64_t **)(v2723 + 2512);
      if (v2728)
        break;
LABEL_3598:
      *(_WORD *)(v2726 + 2 * v2722) = *(_WORD *)(v2726 + 2 * v2721);
      if (v2721 != v2722)
      {
        v2735 = *v2727;
        v2736 = v2725 + 12 * v2722;
        *(_DWORD *)(v2736 + 8) = *((_DWORD *)v2727 + 2);
        *(_QWORD *)v2736 = v2735;
      }
      ++v2722;
LABEL_3582:
      if (++v2721 == v2720)
        goto LABEL_3601;
    }
    v2729 = *(_DWORD *)v2727;
    v2730 = *((_DWORD *)v2727 + 1);
    v2731 = *((_DWORD *)v2727 + 2);
    while (1)
    {
      v2732 = *((_DWORD *)v2728 + 7);
      if (v2729 == v2732)
      {
        v2733 = *((_DWORD *)v2728 + 8);
        if (v2730 == v2733)
        {
          v2734 = *((_DWORD *)v2728 + 9);
          if (v2731 < v2734)
            goto LABEL_3586;
          if (v2734 >= v2731)
            goto LABEL_3582;
        }
        else
        {
          if (v2730 < v2733)
            goto LABEL_3586;
          if (v2733 >= v2730)
            goto LABEL_3582;
        }
      }
      else
      {
        if (v2729 < v2732)
          goto LABEL_3586;
        if (v2732 >= v2729)
          goto LABEL_3582;
      }
      ++v2728;
LABEL_3586:
      v2728 = (uint64_t *)*v2728;
      if (!v2728)
        goto LABEL_3598;
    }
  }
  v2722 = 0;
LABEL_3601:
  *v2719 = v2722;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v231 = v3[379];
  if (v231 >> 30)
    v2737 = 1;
  else
    v2737 = (_DWORD)v231 == v5;
  if (v2737)
    goto LABEL_571;
LABEL_3605:
  v2738 = *(_QWORD *)(v1[2] + 8);
  v2739 = v231 & 0xFFFFFFFFCFFFFFFFLL;
  v2740 = *(_QWORD *)(*(_QWORD *)(v2738 + 8) + 2448);
  v2741 = (unsigned int *)(v2740 + 520 * (v231 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2742 = *v2741;
  if ((_DWORD)v2742)
  {
    v2743 = 0;
    v2744 = 0;
    v2745 = **(_QWORD **)(v2738 + 16);
    v2746 = v2740 + 520 * v2739;
    v2747 = v2746 + 364;
    v2748 = v2746 + 340;
    while (1)
    {
      v2749 = (uint64_t *)(v2747 + 12 * v2743);
      v2750 = *(uint64_t **)(v2745 + 2512);
      if (v2750)
        break;
LABEL_3624:
      *(_WORD *)(v2748 + 2 * v2744) = *(_WORD *)(v2748 + 2 * v2743);
      if (v2743 != v2744)
      {
        v2757 = *v2749;
        v2758 = v2747 + 12 * v2744;
        *(_DWORD *)(v2758 + 8) = *((_DWORD *)v2749 + 2);
        *(_QWORD *)v2758 = v2757;
      }
      ++v2744;
LABEL_3608:
      if (++v2743 == v2742)
        goto LABEL_3627;
    }
    v2751 = *(_DWORD *)v2749;
    v2752 = *((_DWORD *)v2749 + 1);
    v2753 = *((_DWORD *)v2749 + 2);
    while (1)
    {
      v2754 = *((_DWORD *)v2750 + 7);
      if (v2751 == v2754)
      {
        v2755 = *((_DWORD *)v2750 + 8);
        if (v2752 == v2755)
        {
          v2756 = *((_DWORD *)v2750 + 9);
          if (v2753 < v2756)
            goto LABEL_3612;
          if (v2756 >= v2753)
            goto LABEL_3608;
        }
        else
        {
          if (v2752 < v2755)
            goto LABEL_3612;
          if (v2755 >= v2752)
            goto LABEL_3608;
        }
      }
      else
      {
        if (v2751 < v2754)
          goto LABEL_3612;
        if (v2754 >= v2751)
          goto LABEL_3608;
      }
      ++v2750;
LABEL_3612:
      v2750 = (uint64_t *)*v2750;
      if (!v2750)
        goto LABEL_3624;
    }
  }
  v2744 = 0;
LABEL_3627:
  *v2741 = v2744;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v233 = v3[380];
  if (v233 >> 30)
    v2759 = 1;
  else
    v2759 = (_DWORD)v233 == v5;
  if (v2759)
    goto LABEL_576;
LABEL_3631:
  v2760 = *(_QWORD *)(v1[2] + 8);
  v2761 = v233 & 0xFFFFFFFFCFFFFFFFLL;
  v2762 = *(_QWORD *)(*(_QWORD *)(v2760 + 8) + 2448);
  v2763 = (unsigned int *)(v2762 + 520 * (v233 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2764 = *v2763;
  if ((_DWORD)v2764)
  {
    v2765 = 0;
    v2766 = 0;
    v2767 = **(_QWORD **)(v2760 + 16);
    v2768 = v2762 + 520 * v2761;
    v2769 = v2768 + 364;
    v2770 = v2768 + 340;
    while (1)
    {
      v2771 = (uint64_t *)(v2769 + 12 * v2765);
      v2772 = *(uint64_t **)(v2767 + 2512);
      if (v2772)
        break;
LABEL_3650:
      *(_WORD *)(v2770 + 2 * v2766) = *(_WORD *)(v2770 + 2 * v2765);
      if (v2765 != v2766)
      {
        v2779 = *v2771;
        v2780 = v2769 + 12 * v2766;
        *(_DWORD *)(v2780 + 8) = *((_DWORD *)v2771 + 2);
        *(_QWORD *)v2780 = v2779;
      }
      ++v2766;
LABEL_3634:
      if (++v2765 == v2764)
        goto LABEL_3653;
    }
    v2773 = *(_DWORD *)v2771;
    v2774 = *((_DWORD *)v2771 + 1);
    v2775 = *((_DWORD *)v2771 + 2);
    while (1)
    {
      v2776 = *((_DWORD *)v2772 + 7);
      if (v2773 == v2776)
      {
        v2777 = *((_DWORD *)v2772 + 8);
        if (v2774 == v2777)
        {
          v2778 = *((_DWORD *)v2772 + 9);
          if (v2775 < v2778)
            goto LABEL_3638;
          if (v2778 >= v2775)
            goto LABEL_3634;
        }
        else
        {
          if (v2774 < v2777)
            goto LABEL_3638;
          if (v2777 >= v2774)
            goto LABEL_3634;
        }
      }
      else
      {
        if (v2773 < v2776)
          goto LABEL_3638;
        if (v2776 >= v2773)
          goto LABEL_3634;
      }
      ++v2772;
LABEL_3638:
      v2772 = (uint64_t *)*v2772;
      if (!v2772)
        goto LABEL_3650;
    }
  }
  v2766 = 0;
LABEL_3653:
  *v2763 = v2766;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v235 = v3[381];
  if (v235 >> 30)
    v2781 = 1;
  else
    v2781 = (_DWORD)v235 == v5;
  if (v2781)
    goto LABEL_581;
LABEL_3657:
  v2782 = *(_QWORD *)(v1[2] + 8);
  v2783 = v235 & 0xFFFFFFFFCFFFFFFFLL;
  v2784 = *(_QWORD *)(*(_QWORD *)(v2782 + 8) + 2448);
  v2785 = (unsigned int *)(v2784 + 520 * (v235 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2786 = *v2785;
  if ((_DWORD)v2786)
  {
    v2787 = 0;
    v2788 = 0;
    v2789 = **(_QWORD **)(v2782 + 16);
    v2790 = v2784 + 520 * v2783;
    v2791 = v2790 + 364;
    v2792 = v2790 + 340;
    while (1)
    {
      v2793 = (uint64_t *)(v2791 + 12 * v2787);
      v2794 = *(uint64_t **)(v2789 + 2512);
      if (v2794)
        break;
LABEL_3676:
      *(_WORD *)(v2792 + 2 * v2788) = *(_WORD *)(v2792 + 2 * v2787);
      if (v2787 != v2788)
      {
        v2801 = *v2793;
        v2802 = v2791 + 12 * v2788;
        *(_DWORD *)(v2802 + 8) = *((_DWORD *)v2793 + 2);
        *(_QWORD *)v2802 = v2801;
      }
      ++v2788;
LABEL_3660:
      if (++v2787 == v2786)
        goto LABEL_3679;
    }
    v2795 = *(_DWORD *)v2793;
    v2796 = *((_DWORD *)v2793 + 1);
    v2797 = *((_DWORD *)v2793 + 2);
    while (1)
    {
      v2798 = *((_DWORD *)v2794 + 7);
      if (v2795 == v2798)
      {
        v2799 = *((_DWORD *)v2794 + 8);
        if (v2796 == v2799)
        {
          v2800 = *((_DWORD *)v2794 + 9);
          if (v2797 < v2800)
            goto LABEL_3664;
          if (v2800 >= v2797)
            goto LABEL_3660;
        }
        else
        {
          if (v2796 < v2799)
            goto LABEL_3664;
          if (v2799 >= v2796)
            goto LABEL_3660;
        }
      }
      else
      {
        if (v2795 < v2798)
          goto LABEL_3664;
        if (v2798 >= v2795)
          goto LABEL_3660;
      }
      ++v2794;
LABEL_3664:
      v2794 = (uint64_t *)*v2794;
      if (!v2794)
        goto LABEL_3676;
    }
  }
  v2788 = 0;
LABEL_3679:
  *v2785 = v2788;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v237 = v3[382];
  if (v237 >> 30)
    v2803 = 1;
  else
    v2803 = (_DWORD)v237 == v5;
  if (v2803)
    goto LABEL_586;
LABEL_3683:
  v2804 = *(_QWORD *)(v1[2] + 8);
  v2805 = v237 & 0xFFFFFFFFCFFFFFFFLL;
  v2806 = *(_QWORD *)(*(_QWORD *)(v2804 + 8) + 2448);
  v2807 = (unsigned int *)(v2806 + 520 * (v237 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2808 = *v2807;
  if ((_DWORD)v2808)
  {
    v2809 = 0;
    v2810 = 0;
    v2811 = **(_QWORD **)(v2804 + 16);
    v2812 = v2806 + 520 * v2805;
    v2813 = v2812 + 364;
    v2814 = v2812 + 340;
    while (1)
    {
      v2815 = (uint64_t *)(v2813 + 12 * v2809);
      v2816 = *(uint64_t **)(v2811 + 2512);
      if (v2816)
        break;
LABEL_3702:
      *(_WORD *)(v2814 + 2 * v2810) = *(_WORD *)(v2814 + 2 * v2809);
      if (v2809 != v2810)
      {
        v2823 = *v2815;
        v2824 = v2813 + 12 * v2810;
        *(_DWORD *)(v2824 + 8) = *((_DWORD *)v2815 + 2);
        *(_QWORD *)v2824 = v2823;
      }
      ++v2810;
LABEL_3686:
      if (++v2809 == v2808)
        goto LABEL_3705;
    }
    v2817 = *(_DWORD *)v2815;
    v2818 = *((_DWORD *)v2815 + 1);
    v2819 = *((_DWORD *)v2815 + 2);
    while (1)
    {
      v2820 = *((_DWORD *)v2816 + 7);
      if (v2817 == v2820)
      {
        v2821 = *((_DWORD *)v2816 + 8);
        if (v2818 == v2821)
        {
          v2822 = *((_DWORD *)v2816 + 9);
          if (v2819 < v2822)
            goto LABEL_3690;
          if (v2822 >= v2819)
            goto LABEL_3686;
        }
        else
        {
          if (v2818 < v2821)
            goto LABEL_3690;
          if (v2821 >= v2818)
            goto LABEL_3686;
        }
      }
      else
      {
        if (v2817 < v2820)
          goto LABEL_3690;
        if (v2820 >= v2817)
          goto LABEL_3686;
      }
      ++v2816;
LABEL_3690:
      v2816 = (uint64_t *)*v2816;
      if (!v2816)
        goto LABEL_3702;
    }
  }
  v2810 = 0;
LABEL_3705:
  *v2807 = v2810;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v239 = v3[383];
  if (v239 >> 30)
    v2825 = 1;
  else
    v2825 = (_DWORD)v239 == v5;
  if (v2825)
    goto LABEL_591;
LABEL_3709:
  v2826 = *(_QWORD *)(v1[2] + 8);
  v2827 = v239 & 0xFFFFFFFFCFFFFFFFLL;
  v2828 = *(_QWORD *)(*(_QWORD *)(v2826 + 8) + 2448);
  v2829 = (unsigned int *)(v2828 + 520 * (v239 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2830 = *v2829;
  if ((_DWORD)v2830)
  {
    v2831 = 0;
    v2832 = 0;
    v2833 = **(_QWORD **)(v2826 + 16);
    v2834 = v2828 + 520 * v2827;
    v2835 = v2834 + 364;
    v2836 = v2834 + 340;
    while (1)
    {
      v2837 = (uint64_t *)(v2835 + 12 * v2831);
      v2838 = *(uint64_t **)(v2833 + 2512);
      if (v2838)
        break;
LABEL_3728:
      *(_WORD *)(v2836 + 2 * v2832) = *(_WORD *)(v2836 + 2 * v2831);
      if (v2831 != v2832)
      {
        v2845 = *v2837;
        v2846 = v2835 + 12 * v2832;
        *(_DWORD *)(v2846 + 8) = *((_DWORD *)v2837 + 2);
        *(_QWORD *)v2846 = v2845;
      }
      ++v2832;
LABEL_3712:
      if (++v2831 == v2830)
        goto LABEL_3731;
    }
    v2839 = *(_DWORD *)v2837;
    v2840 = *((_DWORD *)v2837 + 1);
    v2841 = *((_DWORD *)v2837 + 2);
    while (1)
    {
      v2842 = *((_DWORD *)v2838 + 7);
      if (v2839 == v2842)
      {
        v2843 = *((_DWORD *)v2838 + 8);
        if (v2840 == v2843)
        {
          v2844 = *((_DWORD *)v2838 + 9);
          if (v2841 < v2844)
            goto LABEL_3716;
          if (v2844 >= v2841)
            goto LABEL_3712;
        }
        else
        {
          if (v2840 < v2843)
            goto LABEL_3716;
          if (v2843 >= v2840)
            goto LABEL_3712;
        }
      }
      else
      {
        if (v2839 < v2842)
          goto LABEL_3716;
        if (v2842 >= v2839)
          goto LABEL_3712;
      }
      ++v2838;
LABEL_3716:
      v2838 = (uint64_t *)*v2838;
      if (!v2838)
        goto LABEL_3728;
    }
  }
  v2832 = 0;
LABEL_3731:
  *v2829 = v2832;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v241 = v3[384];
  if (v241 >> 30)
    v2847 = 1;
  else
    v2847 = (_DWORD)v241 == v5;
  if (v2847)
    goto LABEL_596;
LABEL_3735:
  v2848 = *(_QWORD *)(v1[2] + 8);
  v2849 = v241 & 0xFFFFFFFFCFFFFFFFLL;
  v2850 = *(_QWORD *)(*(_QWORD *)(v2848 + 8) + 2448);
  v2851 = (unsigned int *)(v2850 + 520 * (v241 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2852 = *v2851;
  if ((_DWORD)v2852)
  {
    v2853 = 0;
    v2854 = 0;
    v2855 = **(_QWORD **)(v2848 + 16);
    v2856 = v2850 + 520 * v2849;
    v2857 = v2856 + 364;
    v2858 = v2856 + 340;
    while (1)
    {
      v2859 = (uint64_t *)(v2857 + 12 * v2853);
      v2860 = *(uint64_t **)(v2855 + 2512);
      if (v2860)
        break;
LABEL_3754:
      *(_WORD *)(v2858 + 2 * v2854) = *(_WORD *)(v2858 + 2 * v2853);
      if (v2853 != v2854)
      {
        v2867 = *v2859;
        v2868 = v2857 + 12 * v2854;
        *(_DWORD *)(v2868 + 8) = *((_DWORD *)v2859 + 2);
        *(_QWORD *)v2868 = v2867;
      }
      ++v2854;
LABEL_3738:
      if (++v2853 == v2852)
        goto LABEL_3757;
    }
    v2861 = *(_DWORD *)v2859;
    v2862 = *((_DWORD *)v2859 + 1);
    v2863 = *((_DWORD *)v2859 + 2);
    while (1)
    {
      v2864 = *((_DWORD *)v2860 + 7);
      if (v2861 == v2864)
      {
        v2865 = *((_DWORD *)v2860 + 8);
        if (v2862 == v2865)
        {
          v2866 = *((_DWORD *)v2860 + 9);
          if (v2863 < v2866)
            goto LABEL_3742;
          if (v2866 >= v2863)
            goto LABEL_3738;
        }
        else
        {
          if (v2862 < v2865)
            goto LABEL_3742;
          if (v2865 >= v2862)
            goto LABEL_3738;
        }
      }
      else
      {
        if (v2861 < v2864)
          goto LABEL_3742;
        if (v2864 >= v2861)
          goto LABEL_3738;
      }
      ++v2860;
LABEL_3742:
      v2860 = (uint64_t *)*v2860;
      if (!v2860)
        goto LABEL_3754;
    }
  }
  v2854 = 0;
LABEL_3757:
  *v2851 = v2854;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v243 = v3[385];
  if (v243 >> 30)
    v2869 = 1;
  else
    v2869 = (_DWORD)v243 == v5;
  if (v2869)
    goto LABEL_601;
LABEL_3761:
  v2870 = *(_QWORD *)(v1[2] + 8);
  v2871 = v243 & 0xFFFFFFFFCFFFFFFFLL;
  v2872 = *(_QWORD *)(*(_QWORD *)(v2870 + 8) + 2448);
  v2873 = (unsigned int *)(v2872 + 520 * (v243 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2874 = *v2873;
  if ((_DWORD)v2874)
  {
    v2875 = 0;
    v2876 = 0;
    v2877 = **(_QWORD **)(v2870 + 16);
    v2878 = v2872 + 520 * v2871;
    v2879 = v2878 + 364;
    v2880 = v2878 + 340;
    while (1)
    {
      v2881 = (uint64_t *)(v2879 + 12 * v2875);
      v2882 = *(uint64_t **)(v2877 + 2512);
      if (v2882)
        break;
LABEL_3780:
      *(_WORD *)(v2880 + 2 * v2876) = *(_WORD *)(v2880 + 2 * v2875);
      if (v2875 != v2876)
      {
        v2889 = *v2881;
        v2890 = v2879 + 12 * v2876;
        *(_DWORD *)(v2890 + 8) = *((_DWORD *)v2881 + 2);
        *(_QWORD *)v2890 = v2889;
      }
      ++v2876;
LABEL_3764:
      if (++v2875 == v2874)
        goto LABEL_3783;
    }
    v2883 = *(_DWORD *)v2881;
    v2884 = *((_DWORD *)v2881 + 1);
    v2885 = *((_DWORD *)v2881 + 2);
    while (1)
    {
      v2886 = *((_DWORD *)v2882 + 7);
      if (v2883 == v2886)
      {
        v2887 = *((_DWORD *)v2882 + 8);
        if (v2884 == v2887)
        {
          v2888 = *((_DWORD *)v2882 + 9);
          if (v2885 < v2888)
            goto LABEL_3768;
          if (v2888 >= v2885)
            goto LABEL_3764;
        }
        else
        {
          if (v2884 < v2887)
            goto LABEL_3768;
          if (v2887 >= v2884)
            goto LABEL_3764;
        }
      }
      else
      {
        if (v2883 < v2886)
          goto LABEL_3768;
        if (v2886 >= v2883)
          goto LABEL_3764;
      }
      ++v2882;
LABEL_3768:
      v2882 = (uint64_t *)*v2882;
      if (!v2882)
        goto LABEL_3780;
    }
  }
  v2876 = 0;
LABEL_3783:
  *v2873 = v2876;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v245 = v3[386];
  if (v245 >> 30)
    v2891 = 1;
  else
    v2891 = (_DWORD)v245 == v5;
  if (v2891)
    goto LABEL_606;
LABEL_3787:
  v2892 = *(_QWORD *)(v1[2] + 8);
  v2893 = v245 & 0xFFFFFFFFCFFFFFFFLL;
  v2894 = *(_QWORD *)(*(_QWORD *)(v2892 + 8) + 2448);
  v2895 = (unsigned int *)(v2894 + 520 * (v245 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2896 = *v2895;
  if ((_DWORD)v2896)
  {
    v2897 = 0;
    v2898 = 0;
    v2899 = **(_QWORD **)(v2892 + 16);
    v2900 = v2894 + 520 * v2893;
    v2901 = v2900 + 364;
    v2902 = v2900 + 340;
    while (1)
    {
      v2903 = (uint64_t *)(v2901 + 12 * v2897);
      v2904 = *(uint64_t **)(v2899 + 2512);
      if (v2904)
        break;
LABEL_3806:
      *(_WORD *)(v2902 + 2 * v2898) = *(_WORD *)(v2902 + 2 * v2897);
      if (v2897 != v2898)
      {
        v2911 = *v2903;
        v2912 = v2901 + 12 * v2898;
        *(_DWORD *)(v2912 + 8) = *((_DWORD *)v2903 + 2);
        *(_QWORD *)v2912 = v2911;
      }
      ++v2898;
LABEL_3790:
      if (++v2897 == v2896)
        goto LABEL_3809;
    }
    v2905 = *(_DWORD *)v2903;
    v2906 = *((_DWORD *)v2903 + 1);
    v2907 = *((_DWORD *)v2903 + 2);
    while (1)
    {
      v2908 = *((_DWORD *)v2904 + 7);
      if (v2905 == v2908)
      {
        v2909 = *((_DWORD *)v2904 + 8);
        if (v2906 == v2909)
        {
          v2910 = *((_DWORD *)v2904 + 9);
          if (v2907 < v2910)
            goto LABEL_3794;
          if (v2910 >= v2907)
            goto LABEL_3790;
        }
        else
        {
          if (v2906 < v2909)
            goto LABEL_3794;
          if (v2909 >= v2906)
            goto LABEL_3790;
        }
      }
      else
      {
        if (v2905 < v2908)
          goto LABEL_3794;
        if (v2908 >= v2905)
          goto LABEL_3790;
      }
      ++v2904;
LABEL_3794:
      v2904 = (uint64_t *)*v2904;
      if (!v2904)
        goto LABEL_3806;
    }
  }
  v2898 = 0;
LABEL_3809:
  *v2895 = v2898;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v247 = v3[387];
  if (v247 >> 30)
    v2913 = 1;
  else
    v2913 = (_DWORD)v247 == v5;
  if (!v2913)
  {
LABEL_3813:
    v2914 = *(_QWORD *)(v1[2] + 8);
    v2915 = v247 & 0xFFFFFFFFCFFFFFFFLL;
    v2916 = *(_QWORD *)(*(_QWORD *)(v2914 + 8) + 2448);
    v2917 = (unsigned int *)(v2916 + 520 * (v247 & 0xFFFFFFFFCFFFFFFFLL) + 508);
    v2918 = *v2917;
    if ((_DWORD)v2918)
    {
      v2919 = 0;
      v2920 = 0;
      v2921 = **(_QWORD **)(v2914 + 16);
      v2922 = v2916 + 520 * v2915;
      v2923 = v2922 + 364;
      v2924 = v2922 + 340;
      while (1)
      {
        v2925 = (uint64_t *)(v2923 + 12 * v2919);
        v2926 = *(uint64_t **)(v2921 + 2512);
        if (v2926)
          break;
LABEL_3832:
        *(_WORD *)(v2924 + 2 * v2920) = *(_WORD *)(v2924 + 2 * v2919);
        if (v2919 != v2920)
        {
          v2933 = *v2925;
          v2934 = v2923 + 12 * v2920;
          *(_DWORD *)(v2934 + 8) = *((_DWORD *)v2925 + 2);
          *(_QWORD *)v2934 = v2933;
        }
        ++v2920;
LABEL_3816:
        if (++v2919 == v2918)
          goto LABEL_3835;
      }
      v2927 = *(_DWORD *)v2925;
      v2928 = *((_DWORD *)v2925 + 1);
      v2929 = *((_DWORD *)v2925 + 2);
      while (1)
      {
        v2930 = *((_DWORD *)v2926 + 7);
        if (v2927 == v2930)
        {
          v2931 = *((_DWORD *)v2926 + 8);
          if (v2928 == v2931)
          {
            v2932 = *((_DWORD *)v2926 + 9);
            if (v2929 < v2932)
              goto LABEL_3820;
            if (v2932 >= v2929)
              goto LABEL_3816;
          }
          else
          {
            if (v2928 < v2931)
              goto LABEL_3820;
            if (v2931 >= v2928)
              goto LABEL_3816;
          }
        }
        else
        {
          if (v2927 < v2930)
            goto LABEL_3820;
          if (v2930 >= v2927)
            goto LABEL_3816;
        }
        ++v2926;
LABEL_3820:
        v2926 = (uint64_t *)*v2926;
        if (!v2926)
          goto LABEL_3832;
      }
    }
    v2920 = 0;
LABEL_3835:
    *v2917 = v2920;
    v1 = *result;
    v249 = *(unsigned int *)((*result)[1] + 1552);
    if (v249 >> 30)
      v2935 = 1;
    else
      v2935 = (_DWORD)v249 == *(_DWORD *)(**result + 272);
    if (v2935)
      return sub_223E804C4(result);
    goto LABEL_3839;
  }
LABEL_611:
  v249 = v3[388];
  if (v249 >> 30)
    v250 = 1;
  else
    v250 = (_DWORD)v249 == v5;
  if (v250)
    return sub_223E804C4(result);
LABEL_3839:
  v2936 = *(_QWORD *)(v1[2] + 8);
  v2937 = v249 & 0xFFFFFFFFCFFFFFFFLL;
  v2938 = *(_QWORD *)(*(_QWORD *)(v2936 + 8) + 2448);
  v2939 = (unsigned int *)(v2938 + 520 * (v249 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2940 = *v2939;
  if ((_DWORD)v2940)
  {
    v2941 = 0;
    v2942 = 0;
    v2943 = **(_QWORD **)(v2936 + 16);
    v2944 = v2938 + 520 * v2937;
    v2945 = v2944 + 364;
    v2946 = v2944 + 340;
    while (1)
    {
      v2947 = (uint64_t *)(v2945 + 12 * v2941);
      v2948 = *(uint64_t **)(v2943 + 2512);
      if (v2948)
        break;
LABEL_3858:
      *(_WORD *)(v2946 + 2 * v2942) = *(_WORD *)(v2946 + 2 * v2941);
      if (v2941 != v2942)
      {
        v2955 = *v2947;
        v2956 = v2945 + 12 * v2942;
        *(_DWORD *)(v2956 + 8) = *((_DWORD *)v2947 + 2);
        *(_QWORD *)v2956 = v2955;
      }
      ++v2942;
LABEL_3842:
      if (++v2941 == v2940)
        goto LABEL_3861;
    }
    v2949 = *(_DWORD *)v2947;
    v2950 = *((_DWORD *)v2947 + 1);
    v2951 = *((_DWORD *)v2947 + 2);
    while (1)
    {
      v2952 = *((_DWORD *)v2948 + 7);
      if (v2949 == v2952)
      {
        v2953 = *((_DWORD *)v2948 + 8);
        if (v2950 == v2953)
        {
          v2954 = *((_DWORD *)v2948 + 9);
          if (v2951 < v2954)
            goto LABEL_3846;
          if (v2954 >= v2951)
            goto LABEL_3842;
        }
        else
        {
          if (v2950 < v2953)
            goto LABEL_3846;
          if (v2953 >= v2950)
            goto LABEL_3842;
        }
      }
      else
      {
        if (v2949 < v2952)
          goto LABEL_3846;
        if (v2952 >= v2949)
          goto LABEL_3842;
      }
      ++v2948;
LABEL_3846:
      v2948 = (uint64_t *)*v2948;
      if (!v2948)
        goto LABEL_3858;
    }
  }
  v2942 = 0;
LABEL_3861:
  *v2939 = v2942;
  return sub_223E804C4(result);
}

uint64_t **sub_223E804C4(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  BOOL v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  BOOL v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  BOOL v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unsigned int *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  BOOL v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t *v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  BOOL v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t *v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  BOOL v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unsigned int *v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t *v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  BOOL v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unsigned int *v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t *v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  BOOL v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unsigned int *v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t *v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  BOOL v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unsigned int *v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t *v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  BOOL v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unsigned int *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t *v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  BOOL v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unsigned int *v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t *v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  BOOL v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unsigned int *v452;
  uint64_t v453;
  uint64_t v454;
  unsigned int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t *v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  BOOL v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unsigned int *v474;
  uint64_t v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t *v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  BOOL v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unsigned int *v496;
  uint64_t v497;
  uint64_t v498;
  unsigned int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t *v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  BOOL v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unsigned int *v518;
  uint64_t v519;
  uint64_t v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t *v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  BOOL v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unsigned int *v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t *v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  BOOL v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unsigned int *v562;
  uint64_t v563;
  uint64_t v564;
  unsigned int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t *v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  uint64_t v578;
  uint64_t v579;
  BOOL v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  unsigned int *v584;
  uint64_t v585;
  uint64_t v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t *v592;
  uint64_t *v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  BOOL v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  unsigned int *v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t *v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  uint64_t v622;
  uint64_t v623;
  BOOL v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  unsigned int *v628;
  uint64_t v629;
  uint64_t v630;
  unsigned int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t *v636;
  uint64_t *v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  BOOL v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t v649;
  unsigned int *v650;
  uint64_t v651;
  uint64_t v652;
  unsigned int v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t *v658;
  uint64_t *v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  uint64_t v666;
  uint64_t v667;
  BOOL v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  unsigned int *v672;
  uint64_t v673;
  uint64_t v674;
  unsigned int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t *v680;
  uint64_t *v681;
  int v682;
  int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  uint64_t v688;
  uint64_t v689;
  BOOL v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  unsigned int *v694;
  uint64_t v695;
  uint64_t v696;
  unsigned int v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t *v702;
  uint64_t *v703;
  int v704;
  int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  BOOL v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  unsigned int *v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t *v724;
  uint64_t *v725;
  int v726;
  int v727;
  int v728;
  int v729;
  int v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  BOOL v734;
  uint64_t v735;
  unint64_t v736;
  uint64_t v737;
  unsigned int *v738;
  uint64_t v739;
  uint64_t v740;
  unsigned int v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t *v746;
  uint64_t *v747;
  int v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  uint64_t v754;
  uint64_t v755;
  BOOL v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t v759;
  unsigned int *v760;
  uint64_t v761;
  uint64_t v762;
  unsigned int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t *v768;
  uint64_t *v769;
  int v770;
  int v771;
  int v772;
  int v773;
  int v774;
  int v775;
  uint64_t v776;
  uint64_t v777;
  BOOL v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  unsigned int *v782;
  uint64_t v783;
  uint64_t v784;
  unsigned int v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t *v790;
  uint64_t *v791;
  int v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  uint64_t v798;
  uint64_t v799;
  BOOL v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  unsigned int *v804;
  uint64_t v805;
  uint64_t v806;
  unsigned int v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t *v812;
  uint64_t *v813;
  int v814;
  int v815;
  int v816;
  int v817;
  int v818;
  int v819;
  uint64_t v820;
  uint64_t v821;
  BOOL v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  unsigned int *v826;
  uint64_t v827;
  uint64_t v828;
  unsigned int v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t *v834;
  uint64_t *v835;
  int v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  uint64_t v842;
  uint64_t v843;
  BOOL v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  unsigned int *v848;
  uint64_t v849;
  uint64_t v850;
  unsigned int v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t *v856;
  uint64_t *v857;
  int v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  uint64_t v864;
  uint64_t v865;
  BOOL v866;
  uint64_t v867;
  unint64_t v868;
  uint64_t v869;
  unsigned int *v870;
  uint64_t v871;
  uint64_t v872;
  unsigned int v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t *v878;
  uint64_t *v879;
  int v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  uint64_t v886;
  uint64_t v887;
  BOOL v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t v891;
  unsigned int *v892;
  uint64_t v893;
  uint64_t v894;
  unsigned int v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t *v900;
  uint64_t *v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  uint64_t v908;
  uint64_t v909;
  BOOL v910;
  uint64_t v911;
  unint64_t v912;
  uint64_t v913;
  unsigned int *v914;
  uint64_t v915;
  uint64_t v916;
  unsigned int v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t *v922;
  uint64_t *v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  uint64_t v930;
  uint64_t v931;
  BOOL v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  unsigned int *v936;
  uint64_t v937;
  uint64_t v938;
  unsigned int v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t *v944;
  uint64_t *v945;
  int v946;
  int v947;
  int v948;
  int v949;
  int v950;
  int v951;
  uint64_t v952;
  uint64_t v953;
  BOOL v954;
  uint64_t v955;
  unint64_t v956;
  uint64_t v957;
  unsigned int *v958;
  uint64_t v959;
  uint64_t v960;
  unsigned int v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t *v966;
  uint64_t *v967;
  int v968;
  int v969;
  int v970;
  int v971;
  int v972;
  int v973;
  uint64_t v974;
  uint64_t v975;
  BOOL v976;
  uint64_t v977;
  unint64_t v978;
  uint64_t v979;
  unsigned int *v980;
  uint64_t v981;
  uint64_t v982;
  unsigned int v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t *v988;
  uint64_t *v989;
  int v990;
  int v991;
  int v992;
  int v993;
  int v994;
  int v995;
  uint64_t v996;
  uint64_t v997;
  BOOL v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  unsigned int *v1002;
  uint64_t v1003;
  uint64_t v1004;
  unsigned int v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t *v1010;
  uint64_t *v1011;
  int v1012;
  int v1013;
  int v1014;
  int v1015;
  int v1016;
  int v1017;
  uint64_t v1018;
  uint64_t v1019;
  BOOL v1020;
  uint64_t v1021;
  unint64_t v1022;
  uint64_t v1023;
  unsigned int *v1024;
  uint64_t v1025;
  uint64_t v1026;
  unsigned int v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t *v1032;
  uint64_t *v1033;
  int v1034;
  int v1035;
  int v1036;
  int v1037;
  int v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  BOOL v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  unsigned int *v1046;
  uint64_t v1047;
  uint64_t v1048;
  unsigned int v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t *v1054;
  uint64_t *v1055;
  int v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  int v1061;
  uint64_t v1062;
  uint64_t v1063;
  BOOL v1064;
  uint64_t v1065;
  unint64_t v1066;
  uint64_t v1067;
  unsigned int *v1068;
  uint64_t v1069;
  uint64_t v1070;
  unsigned int v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t *v1076;
  uint64_t *v1077;
  int v1078;
  int v1079;
  int v1080;
  int v1081;
  int v1082;
  int v1083;
  uint64_t v1084;
  uint64_t v1085;
  BOOL v1086;
  uint64_t v1087;
  unint64_t v1088;
  uint64_t v1089;
  unsigned int *v1090;
  uint64_t v1091;
  uint64_t v1092;
  unsigned int v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t *v1098;
  uint64_t *v1099;
  int v1100;
  int v1101;
  int v1102;
  int v1103;
  int v1104;
  int v1105;
  uint64_t v1106;
  uint64_t v1107;
  BOOL v1108;
  uint64_t v1109;
  unint64_t v1110;
  uint64_t v1111;
  unsigned int *v1112;
  uint64_t v1113;
  uint64_t v1114;
  unsigned int v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t *v1120;
  uint64_t *v1121;
  int v1122;
  int v1123;
  int v1124;
  int v1125;
  int v1126;
  int v1127;
  uint64_t v1128;
  uint64_t v1129;
  BOOL v1130;
  uint64_t v1131;
  unint64_t v1132;
  uint64_t v1133;
  unsigned int *v1134;
  uint64_t v1135;
  uint64_t v1136;
  unsigned int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t *v1142;
  uint64_t *v1143;
  int v1144;
  int v1145;
  int v1146;
  int v1147;
  int v1148;
  int v1149;
  uint64_t v1150;
  uint64_t v1151;
  BOOL v1152;
  uint64_t v1153;
  unint64_t v1154;
  uint64_t v1155;
  unsigned int *v1156;
  uint64_t v1157;
  uint64_t v1158;
  unsigned int v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t *v1164;
  uint64_t *v1165;
  int v1166;
  int v1167;
  int v1168;
  int v1169;
  int v1170;
  int v1171;
  uint64_t v1172;
  uint64_t v1173;
  BOOL v1174;
  uint64_t v1175;
  unint64_t v1176;
  uint64_t v1177;
  unsigned int *v1178;
  uint64_t v1179;
  uint64_t v1180;
  unsigned int v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t *v1186;
  uint64_t *v1187;
  int v1188;
  int v1189;
  int v1190;
  int v1191;
  int v1192;
  int v1193;
  uint64_t v1194;
  uint64_t v1195;
  BOOL v1196;
  uint64_t v1197;
  unint64_t v1198;
  uint64_t v1199;
  unsigned int *v1200;
  uint64_t v1201;
  uint64_t v1202;
  unsigned int v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t *v1208;
  uint64_t *v1209;
  int v1210;
  int v1211;
  int v1212;
  int v1213;
  int v1214;
  int v1215;
  uint64_t v1216;
  uint64_t v1217;
  BOOL v1218;
  uint64_t v1219;
  unint64_t v1220;
  uint64_t v1221;
  unsigned int *v1222;
  uint64_t v1223;
  uint64_t v1224;
  unsigned int v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t *v1230;
  uint64_t *v1231;
  int v1232;
  int v1233;
  int v1234;
  int v1235;
  int v1236;
  int v1237;
  uint64_t v1238;
  uint64_t v1239;
  BOOL v1240;
  uint64_t v1241;
  unint64_t v1242;
  uint64_t v1243;
  unsigned int *v1244;
  uint64_t v1245;
  uint64_t v1246;
  unsigned int v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t *v1252;
  uint64_t *v1253;
  int v1254;
  int v1255;
  int v1256;
  int v1257;
  int v1258;
  int v1259;
  uint64_t v1260;
  uint64_t v1261;
  BOOL v1262;
  uint64_t v1263;
  unint64_t v1264;
  uint64_t v1265;
  unsigned int *v1266;
  uint64_t v1267;
  uint64_t v1268;
  unsigned int v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t *v1274;
  uint64_t *v1275;
  int v1276;
  int v1277;
  int v1278;
  int v1279;
  int v1280;
  int v1281;
  uint64_t v1282;
  uint64_t v1283;
  BOOL v1284;
  uint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  unsigned int *v1288;
  uint64_t v1289;
  uint64_t v1290;
  unsigned int v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t *v1296;
  uint64_t *v1297;
  int v1298;
  int v1299;
  int v1300;
  int v1301;
  int v1302;
  int v1303;
  uint64_t v1304;
  uint64_t v1305;
  BOOL v1306;
  uint64_t v1307;
  unint64_t v1308;
  uint64_t v1309;
  unsigned int *v1310;
  uint64_t v1311;
  uint64_t v1312;
  unsigned int v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t *v1318;
  uint64_t *v1319;
  int v1320;
  int v1321;
  int v1322;
  int v1323;
  int v1324;
  int v1325;
  uint64_t v1326;
  uint64_t v1327;
  BOOL v1328;
  uint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  unsigned int *v1332;
  uint64_t v1333;
  uint64_t v1334;
  unsigned int v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t *v1340;
  uint64_t *v1341;
  int v1342;
  int v1343;
  int v1344;
  int v1345;
  int v1346;
  int v1347;
  uint64_t v1348;
  uint64_t v1349;
  BOOL v1350;
  uint64_t v1351;
  unint64_t v1352;
  uint64_t v1353;
  unsigned int *v1354;
  uint64_t v1355;
  uint64_t v1356;
  unsigned int v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t *v1362;
  uint64_t *v1363;
  int v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  uint64_t v1370;
  uint64_t v1371;
  BOOL v1372;
  uint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  unsigned int *v1376;
  uint64_t v1377;
  uint64_t v1378;
  unsigned int v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t *v1384;
  uint64_t *v1385;
  int v1386;
  int v1387;
  int v1388;
  int v1389;
  int v1390;
  int v1391;
  uint64_t v1392;
  uint64_t v1393;
  BOOL v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  unsigned int *v1398;
  uint64_t v1399;
  uint64_t v1400;
  unsigned int v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t *v1406;
  uint64_t *v1407;
  int v1408;
  int v1409;
  int v1410;
  int v1411;
  int v1412;
  int v1413;
  uint64_t v1414;
  uint64_t v1415;
  BOOL v1416;
  uint64_t v1417;
  unint64_t v1418;
  uint64_t v1419;
  unsigned int *v1420;
  uint64_t v1421;
  uint64_t v1422;
  unsigned int v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t *v1428;
  uint64_t *v1429;
  int v1430;
  int v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  uint64_t v1436;
  uint64_t v1437;
  BOOL v1438;
  uint64_t v1439;
  unint64_t v1440;
  uint64_t v1441;
  unsigned int *v1442;
  uint64_t v1443;
  uint64_t v1444;
  unsigned int v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t *v1450;
  uint64_t *v1451;
  int v1452;
  int v1453;
  int v1454;
  int v1455;
  int v1456;
  int v1457;
  uint64_t v1458;
  uint64_t v1459;
  BOOL v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  unsigned int *v1464;
  uint64_t v1465;
  uint64_t v1466;
  unsigned int v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t *v1472;
  uint64_t *v1473;
  int v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  uint64_t v1480;
  uint64_t v1481;
  BOOL v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  unsigned int *v1486;
  uint64_t v1487;
  uint64_t v1488;
  unsigned int v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t *v1494;
  uint64_t *v1495;
  int v1496;
  int v1497;
  int v1498;
  int v1499;
  int v1500;
  int v1501;
  uint64_t v1502;
  uint64_t v1503;
  BOOL v1504;
  uint64_t v1505;
  unint64_t v1506;
  uint64_t v1507;
  unsigned int *v1508;
  uint64_t v1509;
  uint64_t v1510;
  unsigned int v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t *v1516;
  uint64_t *v1517;
  int v1518;
  int v1519;
  int v1520;
  int v1521;
  int v1522;
  int v1523;
  uint64_t v1524;
  uint64_t v1525;
  BOOL v1526;
  uint64_t v1527;
  unint64_t v1528;
  uint64_t v1529;
  unsigned int *v1530;
  uint64_t v1531;
  uint64_t v1532;
  unsigned int v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t *v1538;
  uint64_t *v1539;
  int v1540;
  int v1541;
  int v1542;
  int v1543;
  int v1544;
  int v1545;
  uint64_t v1546;
  uint64_t v1547;
  BOOL v1548;
  uint64_t v1549;
  unint64_t v1550;
  uint64_t v1551;
  unsigned int *v1552;
  uint64_t v1553;
  uint64_t v1554;
  unsigned int v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t *v1560;
  uint64_t *v1561;
  int v1562;
  int v1563;
  int v1564;
  int v1565;
  int v1566;
  int v1567;
  uint64_t v1568;
  uint64_t v1569;
  BOOL v1570;
  uint64_t v1571;
  unint64_t v1572;
  uint64_t v1573;
  unsigned int *v1574;
  uint64_t v1575;
  uint64_t v1576;
  unsigned int v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t *v1582;
  uint64_t *v1583;
  int v1584;
  int v1585;
  int v1586;
  int v1587;
  int v1588;
  int v1589;
  uint64_t v1590;
  uint64_t v1591;
  BOOL v1592;
  uint64_t v1593;
  unint64_t v1594;
  uint64_t v1595;
  unsigned int *v1596;
  uint64_t v1597;
  uint64_t v1598;
  unsigned int v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t *v1604;
  uint64_t *v1605;
  int v1606;
  int v1607;
  int v1608;
  int v1609;
  int v1610;
  int v1611;
  uint64_t v1612;
  uint64_t v1613;
  BOOL v1614;
  uint64_t v1615;
  unint64_t v1616;
  uint64_t v1617;
  unsigned int *v1618;
  uint64_t v1619;
  uint64_t v1620;
  unsigned int v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t *v1626;
  uint64_t *v1627;
  int v1628;
  int v1629;
  int v1630;
  int v1631;
  int v1632;
  int v1633;
  uint64_t v1634;
  uint64_t v1635;
  BOOL v1636;
  uint64_t v1637;
  unint64_t v1638;
  uint64_t v1639;
  unsigned int *v1640;
  uint64_t v1641;
  uint64_t v1642;
  unsigned int v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t *v1648;
  uint64_t *v1649;
  int v1650;
  int v1651;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  uint64_t v1656;
  uint64_t v1657;
  BOOL v1658;
  uint64_t v1659;
  unint64_t v1660;
  uint64_t v1661;
  unsigned int *v1662;
  uint64_t v1663;
  uint64_t v1664;
  unsigned int v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t *v1670;
  uint64_t *v1671;
  int v1672;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  int v1677;
  uint64_t v1678;
  uint64_t v1679;
  BOOL v1680;
  uint64_t v1681;
  unint64_t v1682;
  uint64_t v1683;
  unsigned int *v1684;
  uint64_t v1685;
  uint64_t v1686;
  unsigned int v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t *v1692;
  uint64_t *v1693;
  int v1694;
  int v1695;
  int v1696;
  int v1697;
  int v1698;
  int v1699;
  uint64_t v1700;
  uint64_t v1701;
  BOOL v1702;
  uint64_t v1703;
  unint64_t v1704;
  uint64_t v1705;
  unsigned int *v1706;
  uint64_t v1707;
  uint64_t v1708;
  unsigned int v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t *v1714;
  uint64_t *v1715;
  int v1716;
  int v1717;
  int v1718;
  int v1719;
  int v1720;
  int v1721;
  uint64_t v1722;
  uint64_t v1723;
  BOOL v1724;
  uint64_t v1725;
  unint64_t v1726;
  uint64_t v1727;
  unsigned int *v1728;
  uint64_t v1729;
  uint64_t v1730;
  unsigned int v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t *v1736;
  uint64_t *v1737;
  int v1738;
  int v1739;
  int v1740;
  int v1741;
  int v1742;
  int v1743;
  uint64_t v1744;
  uint64_t v1745;
  BOOL v1746;
  uint64_t v1747;
  unint64_t v1748;
  uint64_t v1749;
  unsigned int *v1750;
  uint64_t v1751;
  uint64_t v1752;
  unsigned int v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t *v1758;
  uint64_t *v1759;
  int v1760;
  int v1761;
  int v1762;
  int v1763;
  int v1764;
  int v1765;
  uint64_t v1766;
  uint64_t v1767;
  BOOL v1768;
  uint64_t v1769;
  unint64_t v1770;
  uint64_t v1771;
  unsigned int *v1772;
  uint64_t v1773;
  uint64_t v1774;
  unsigned int v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t *v1780;
  uint64_t *v1781;
  int v1782;
  int v1783;
  int v1784;
  int v1785;
  int v1786;
  int v1787;
  uint64_t v1788;
  uint64_t v1789;
  BOOL v1790;
  uint64_t v1791;
  unint64_t v1792;
  uint64_t v1793;
  unsigned int *v1794;
  uint64_t v1795;
  uint64_t v1796;
  unsigned int v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t *v1802;
  uint64_t *v1803;
  int v1804;
  int v1805;
  int v1806;
  int v1807;
  int v1808;
  int v1809;
  uint64_t v1810;
  uint64_t v1811;
  BOOL v1812;
  uint64_t v1813;
  unint64_t v1814;
  uint64_t v1815;
  unsigned int *v1816;
  uint64_t v1817;
  uint64_t v1818;
  unsigned int v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t *v1824;
  uint64_t *v1825;
  int v1826;
  int v1827;
  int v1828;
  int v1829;
  int v1830;
  int v1831;
  uint64_t v1832;
  uint64_t v1833;
  BOOL v1834;
  uint64_t v1835;
  unint64_t v1836;
  uint64_t v1837;
  unsigned int *v1838;
  uint64_t v1839;
  uint64_t v1840;
  unsigned int v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t *v1846;
  uint64_t *v1847;
  int v1848;
  int v1849;
  int v1850;
  int v1851;
  int v1852;
  int v1853;
  uint64_t v1854;
  uint64_t v1855;
  BOOL v1856;
  uint64_t v1857;
  unint64_t v1858;
  uint64_t v1859;
  unsigned int *v1860;
  uint64_t v1861;
  uint64_t v1862;
  unsigned int v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t *v1868;
  uint64_t *v1869;
  int v1870;
  int v1871;
  int v1872;
  int v1873;
  int v1874;
  int v1875;
  uint64_t v1876;
  uint64_t v1877;
  BOOL v1878;
  uint64_t v1879;
  unint64_t v1880;
  uint64_t v1881;
  unsigned int *v1882;
  uint64_t v1883;
  uint64_t v1884;
  unsigned int v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t *v1890;
  uint64_t *v1891;
  int v1892;
  int v1893;
  int v1894;
  int v1895;
  int v1896;
  int v1897;
  uint64_t v1898;
  uint64_t v1899;
  BOOL v1900;
  uint64_t v1901;
  unint64_t v1902;
  uint64_t v1903;
  unsigned int *v1904;
  uint64_t v1905;
  uint64_t v1906;
  unsigned int v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t *v1912;
  uint64_t *v1913;
  int v1914;
  int v1915;
  int v1916;
  int v1917;
  int v1918;
  int v1919;
  uint64_t v1920;
  uint64_t v1921;
  BOOL v1922;
  uint64_t v1923;
  unint64_t v1924;
  uint64_t v1925;
  unsigned int *v1926;
  uint64_t v1927;
  uint64_t v1928;
  unsigned int v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t *v1934;
  uint64_t *v1935;
  int v1936;
  int v1937;
  int v1938;
  int v1939;
  int v1940;
  int v1941;
  uint64_t v1942;
  uint64_t v1943;
  BOOL v1944;
  uint64_t v1945;
  unint64_t v1946;
  uint64_t v1947;
  unsigned int *v1948;
  uint64_t v1949;
  uint64_t v1950;
  unsigned int v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t *v1956;
  uint64_t *v1957;
  int v1958;
  int v1959;
  int v1960;
  int v1961;
  int v1962;
  int v1963;
  uint64_t v1964;
  uint64_t v1965;
  BOOL v1966;
  uint64_t v1967;
  unint64_t v1968;
  uint64_t v1969;
  unsigned int *v1970;
  uint64_t v1971;
  uint64_t v1972;
  unsigned int v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t *v1978;
  uint64_t *v1979;
  int v1980;
  int v1981;
  int v1982;
  int v1983;
  int v1984;
  int v1985;
  uint64_t v1986;
  uint64_t v1987;
  BOOL v1988;
  uint64_t v1989;
  unint64_t v1990;
  uint64_t v1991;
  unsigned int *v1992;
  uint64_t v1993;
  uint64_t v1994;
  unsigned int v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t *v2000;
  uint64_t *v2001;
  int v2002;
  int v2003;
  int v2004;
  int v2005;
  int v2006;
  int v2007;
  uint64_t v2008;
  uint64_t v2009;
  BOOL v2010;
  uint64_t v2011;
  unint64_t v2012;
  uint64_t v2013;
  unsigned int *v2014;
  uint64_t v2015;
  uint64_t v2016;
  unsigned int v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t *v2022;
  uint64_t *v2023;
  int v2024;
  int v2025;
  int v2026;
  int v2027;
  int v2028;
  int v2029;
  uint64_t v2030;
  uint64_t v2031;
  BOOL v2032;
  uint64_t v2033;
  unint64_t v2034;
  uint64_t v2035;
  unsigned int *v2036;
  uint64_t v2037;
  uint64_t v2038;
  unsigned int v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t *v2044;
  uint64_t *v2045;
  int v2046;
  int v2047;
  int v2048;
  int v2049;
  int v2050;
  int v2051;
  uint64_t v2052;
  uint64_t v2053;
  BOOL v2054;
  uint64_t v2055;
  unint64_t v2056;
  uint64_t v2057;
  unsigned int *v2058;
  uint64_t v2059;
  uint64_t v2060;
  unsigned int v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t *v2066;
  uint64_t *v2067;
  int v2068;
  int v2069;
  int v2070;
  int v2071;
  int v2072;
  int v2073;
  uint64_t v2074;
  uint64_t v2075;
  BOOL v2076;
  uint64_t v2077;
  unint64_t v2078;
  uint64_t v2079;
  unsigned int *v2080;
  uint64_t v2081;
  uint64_t v2082;
  unsigned int v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t *v2088;
  uint64_t *v2089;
  int v2090;
  int v2091;
  int v2092;
  int v2093;
  int v2094;
  int v2095;
  uint64_t v2096;
  uint64_t v2097;
  BOOL v2098;
  uint64_t v2099;
  unint64_t v2100;
  uint64_t v2101;
  unsigned int *v2102;
  uint64_t v2103;
  uint64_t v2104;
  unsigned int v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t *v2110;
  uint64_t *v2111;
  int v2112;
  int v2113;
  int v2114;
  int v2115;
  int v2116;
  int v2117;
  uint64_t v2118;
  uint64_t v2119;
  BOOL v2120;
  uint64_t v2121;
  unint64_t v2122;
  uint64_t v2123;
  unsigned int *v2124;
  uint64_t v2125;
  uint64_t v2126;
  unsigned int v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t *v2132;
  uint64_t *v2133;
  int v2134;
  int v2135;
  int v2136;
  int v2137;
  int v2138;
  int v2139;
  uint64_t v2140;
  uint64_t v2141;
  BOOL v2142;
  uint64_t v2143;
  unint64_t v2144;
  uint64_t v2145;
  unsigned int *v2146;
  uint64_t v2147;
  uint64_t v2148;
  unsigned int v2149;
  uint64_t v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t *v2154;
  uint64_t *v2155;
  int v2156;
  int v2157;
  int v2158;
  int v2159;
  int v2160;
  int v2161;
  uint64_t v2162;
  uint64_t v2163;
  BOOL v2164;
  uint64_t v2165;
  unint64_t v2166;
  uint64_t v2167;
  unsigned int *v2168;
  uint64_t v2169;
  uint64_t v2170;
  unsigned int v2171;
  uint64_t v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t *v2176;
  uint64_t *v2177;
  int v2178;
  int v2179;
  int v2180;
  int v2181;
  int v2182;
  int v2183;
  uint64_t v2184;
  uint64_t v2185;
  BOOL v2186;
  uint64_t v2187;
  unint64_t v2188;
  uint64_t v2189;
  unsigned int *v2190;
  uint64_t v2191;
  uint64_t v2192;
  unsigned int v2193;
  uint64_t v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t *v2198;
  uint64_t *v2199;
  int v2200;
  int v2201;
  int v2202;
  int v2203;
  int v2204;
  int v2205;
  uint64_t v2206;
  uint64_t v2207;
  BOOL v2208;
  uint64_t v2209;
  unint64_t v2210;
  uint64_t v2211;
  unsigned int *v2212;
  uint64_t v2213;
  uint64_t v2214;
  unsigned int v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t *v2220;
  uint64_t *v2221;
  int v2222;
  int v2223;
  int v2224;
  int v2225;
  int v2226;
  int v2227;
  uint64_t v2228;
  uint64_t v2229;
  BOOL v2230;
  uint64_t v2231;
  unint64_t v2232;
  uint64_t v2233;
  unsigned int *v2234;
  uint64_t v2235;
  uint64_t v2236;
  unsigned int v2237;
  uint64_t v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t *v2242;
  uint64_t *v2243;
  int v2244;
  int v2245;
  int v2246;
  int v2247;
  int v2248;
  int v2249;
  uint64_t v2250;
  uint64_t v2251;
  BOOL v2252;
  uint64_t v2253;
  unint64_t v2254;
  uint64_t v2255;
  unsigned int *v2256;
  uint64_t v2257;
  uint64_t v2258;
  unsigned int v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t *v2264;
  uint64_t *v2265;
  int v2266;
  int v2267;
  int v2268;
  int v2269;
  int v2270;
  int v2271;
  uint64_t v2272;
  uint64_t v2273;
  BOOL v2274;
  uint64_t v2275;
  unint64_t v2276;
  uint64_t v2277;
  unsigned int *v2278;
  uint64_t v2279;
  uint64_t v2280;
  unsigned int v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t *v2286;
  uint64_t *v2287;
  int v2288;
  int v2289;
  int v2290;
  int v2291;
  int v2292;
  int v2293;
  uint64_t v2294;
  uint64_t v2295;
  BOOL v2296;
  uint64_t v2297;
  unint64_t v2298;
  uint64_t v2299;
  unsigned int *v2300;
  uint64_t v2301;
  uint64_t v2302;
  unsigned int v2303;
  uint64_t v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t *v2308;
  uint64_t *v2309;
  int v2310;
  int v2311;
  int v2312;
  int v2313;
  int v2314;
  int v2315;
  uint64_t v2316;
  uint64_t v2317;
  BOOL v2318;
  uint64_t v2319;
  unint64_t v2320;
  uint64_t v2321;
  unsigned int *v2322;
  uint64_t v2323;
  uint64_t v2324;
  unsigned int v2325;
  uint64_t v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t *v2330;
  uint64_t *v2331;
  int v2332;
  int v2333;
  int v2334;
  int v2335;
  int v2336;
  int v2337;
  uint64_t v2338;
  uint64_t v2339;
  BOOL v2340;
  uint64_t v2341;
  unint64_t v2342;
  uint64_t v2343;
  unsigned int *v2344;
  uint64_t v2345;
  uint64_t v2346;
  unsigned int v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t *v2352;
  uint64_t *v2353;
  int v2354;
  int v2355;
  int v2356;
  int v2357;
  int v2358;
  int v2359;
  uint64_t v2360;
  uint64_t v2361;
  BOOL v2362;
  uint64_t v2363;
  unint64_t v2364;
  uint64_t v2365;
  unsigned int *v2366;
  uint64_t v2367;
  uint64_t v2368;
  unsigned int v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t *v2374;
  uint64_t *v2375;
  int v2376;
  int v2377;
  int v2378;
  int v2379;
  int v2380;
  int v2381;
  uint64_t v2382;
  uint64_t v2383;
  BOOL v2384;
  uint64_t v2385;
  unint64_t v2386;
  uint64_t v2387;
  unsigned int *v2388;
  uint64_t v2389;
  uint64_t v2390;
  unsigned int v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t *v2396;
  uint64_t *v2397;
  int v2398;
  int v2399;
  int v2400;
  int v2401;
  int v2402;
  int v2403;
  uint64_t v2404;
  uint64_t v2405;
  BOOL v2406;
  uint64_t v2407;
  unint64_t v2408;
  uint64_t v2409;
  unsigned int *v2410;
  uint64_t v2411;
  uint64_t v2412;
  unsigned int v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t *v2418;
  uint64_t *v2419;
  int v2420;
  int v2421;
  int v2422;
  int v2423;
  int v2424;
  int v2425;
  uint64_t v2426;
  uint64_t v2427;
  BOOL v2428;
  uint64_t v2429;
  unint64_t v2430;
  uint64_t v2431;
  unsigned int *v2432;
  uint64_t v2433;
  uint64_t v2434;
  unsigned int v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t *v2440;
  uint64_t *v2441;
  int v2442;
  int v2443;
  int v2444;
  int v2445;
  int v2446;
  int v2447;
  uint64_t v2448;
  uint64_t v2449;
  BOOL v2450;
  uint64_t v2451;
  unint64_t v2452;
  uint64_t v2453;
  unsigned int *v2454;
  uint64_t v2455;
  uint64_t v2456;
  unsigned int v2457;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t *v2462;
  uint64_t *v2463;
  int v2464;
  int v2465;
  int v2466;
  int v2467;
  int v2468;
  int v2469;
  uint64_t v2470;
  uint64_t v2471;
  BOOL v2472;
  uint64_t v2473;
  unint64_t v2474;
  uint64_t v2475;
  unsigned int *v2476;
  uint64_t v2477;
  uint64_t v2478;
  unsigned int v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t *v2484;
  uint64_t *v2485;
  int v2486;
  int v2487;
  int v2488;
  int v2489;
  int v2490;
  int v2491;
  uint64_t v2492;
  uint64_t v2493;
  BOOL v2494;
  uint64_t v2495;
  unint64_t v2496;
  uint64_t v2497;
  unsigned int *v2498;
  uint64_t v2499;
  uint64_t v2500;
  unsigned int v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t *v2506;
  uint64_t *v2507;
  int v2508;
  int v2509;
  int v2510;
  int v2511;
  int v2512;
  int v2513;
  uint64_t v2514;
  uint64_t v2515;
  BOOL v2516;
  uint64_t v2517;
  unint64_t v2518;
  uint64_t v2519;
  unsigned int *v2520;
  uint64_t v2521;
  uint64_t v2522;
  unsigned int v2523;
  uint64_t v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t *v2528;
  uint64_t *v2529;
  int v2530;
  int v2531;
  int v2532;
  int v2533;
  int v2534;
  int v2535;
  uint64_t v2536;
  uint64_t v2537;
  BOOL v2538;
  uint64_t v2539;
  unint64_t v2540;
  uint64_t v2541;
  unsigned int *v2542;
  uint64_t v2543;
  uint64_t v2544;
  unsigned int v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  uint64_t *v2550;
  uint64_t *v2551;
  int v2552;
  int v2553;
  int v2554;
  int v2555;
  int v2556;
  int v2557;
  uint64_t v2558;
  uint64_t v2559;
  BOOL v2560;
  uint64_t v2561;
  unint64_t v2562;
  uint64_t v2563;
  unsigned int *v2564;
  uint64_t v2565;
  uint64_t v2566;
  unsigned int v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t *v2572;
  uint64_t *v2573;
  int v2574;
  int v2575;
  int v2576;
  int v2577;
  int v2578;
  int v2579;
  uint64_t v2580;
  uint64_t v2581;
  BOOL v2582;
  uint64_t v2583;
  unint64_t v2584;
  uint64_t v2585;
  unsigned int *v2586;
  uint64_t v2587;
  uint64_t v2588;
  unsigned int v2589;
  uint64_t v2590;
  uint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t *v2594;
  uint64_t *v2595;
  int v2596;
  int v2597;
  int v2598;
  int v2599;
  int v2600;
  int v2601;
  uint64_t v2602;
  uint64_t v2603;
  BOOL v2604;
  uint64_t v2605;
  unint64_t v2606;
  uint64_t v2607;
  unsigned int *v2608;
  uint64_t v2609;
  uint64_t v2610;
  unsigned int v2611;
  uint64_t v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t *v2616;
  uint64_t *v2617;
  int v2618;
  int v2619;
  int v2620;
  int v2621;
  int v2622;
  int v2623;
  uint64_t v2624;
  uint64_t v2625;
  BOOL v2626;
  uint64_t v2627;
  unint64_t v2628;
  uint64_t v2629;
  unsigned int *v2630;
  uint64_t v2631;
  uint64_t v2632;
  unsigned int v2633;
  uint64_t v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t *v2638;
  uint64_t *v2639;
  int v2640;
  int v2641;
  int v2642;
  int v2643;
  int v2644;
  int v2645;
  uint64_t v2646;
  uint64_t v2647;
  BOOL v2648;
  uint64_t v2649;
  unint64_t v2650;
  uint64_t v2651;
  unsigned int *v2652;
  uint64_t v2653;
  uint64_t v2654;
  unsigned int v2655;
  uint64_t v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t *v2660;
  uint64_t *v2661;
  int v2662;
  int v2663;
  int v2664;
  int v2665;
  int v2666;
  int v2667;
  uint64_t v2668;
  uint64_t v2669;
  BOOL v2670;
  uint64_t v2671;
  unint64_t v2672;
  uint64_t v2673;
  unsigned int *v2674;
  uint64_t v2675;
  uint64_t v2676;
  unsigned int v2677;
  uint64_t v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  uint64_t *v2682;
  uint64_t *v2683;
  int v2684;
  int v2685;
  int v2686;
  int v2687;
  int v2688;
  int v2689;
  uint64_t v2690;
  uint64_t v2691;
  BOOL v2692;
  uint64_t v2693;
  unint64_t v2694;
  uint64_t v2695;
  unsigned int *v2696;
  uint64_t v2697;
  uint64_t v2698;
  unsigned int v2699;
  uint64_t v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t *v2704;
  uint64_t *v2705;
  int v2706;
  int v2707;
  int v2708;
  int v2709;
  int v2710;
  int v2711;
  uint64_t v2712;
  uint64_t v2713;
  BOOL v2714;
  uint64_t v2715;
  unint64_t v2716;
  uint64_t v2717;
  unsigned int *v2718;
  uint64_t v2719;
  uint64_t v2720;
  unsigned int v2721;
  uint64_t v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  uint64_t *v2726;
  uint64_t *v2727;
  int v2728;
  int v2729;
  int v2730;
  int v2731;
  int v2732;
  int v2733;
  uint64_t v2734;
  uint64_t v2735;
  BOOL v2736;
  uint64_t v2737;
  unint64_t v2738;
  uint64_t v2739;
  unsigned int *v2740;
  uint64_t v2741;
  uint64_t v2742;
  unsigned int v2743;
  uint64_t v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t *v2748;
  uint64_t *v2749;
  int v2750;
  int v2751;
  int v2752;
  int v2753;
  int v2754;
  int v2755;
  uint64_t v2756;
  uint64_t v2757;
  BOOL v2758;
  uint64_t v2759;
  unint64_t v2760;
  uint64_t v2761;
  unsigned int *v2762;
  uint64_t v2763;
  uint64_t v2764;
  unsigned int v2765;
  uint64_t v2766;
  uint64_t v2767;
  uint64_t v2768;
  uint64_t v2769;
  uint64_t *v2770;
  uint64_t *v2771;
  int v2772;
  int v2773;
  int v2774;
  int v2775;
  int v2776;
  int v2777;
  uint64_t v2778;
  uint64_t v2779;
  BOOL v2780;
  uint64_t v2781;
  unint64_t v2782;
  uint64_t v2783;
  unsigned int *v2784;
  uint64_t v2785;
  uint64_t v2786;
  unsigned int v2787;
  uint64_t v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t *v2792;
  uint64_t *v2793;
  int v2794;
  int v2795;
  int v2796;
  int v2797;
  int v2798;
  int v2799;
  uint64_t v2800;
  uint64_t v2801;
  BOOL v2802;
  uint64_t v2803;
  unint64_t v2804;
  uint64_t v2805;
  unsigned int *v2806;
  uint64_t v2807;
  uint64_t v2808;
  unsigned int v2809;
  uint64_t v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  uint64_t *v2814;
  uint64_t *v2815;
  int v2816;
  int v2817;
  int v2818;
  int v2819;
  int v2820;
  int v2821;
  uint64_t v2822;
  uint64_t v2823;
  BOOL v2824;
  uint64_t v2825;
  unint64_t v2826;
  uint64_t v2827;
  unsigned int *v2828;
  uint64_t v2829;
  uint64_t v2830;
  unsigned int v2831;
  uint64_t v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t *v2836;
  uint64_t *v2837;
  int v2838;
  int v2839;
  int v2840;
  int v2841;
  int v2842;
  int v2843;
  uint64_t v2844;
  uint64_t v2845;
  BOOL v2846;
  uint64_t v2847;
  unint64_t v2848;
  uint64_t v2849;
  unsigned int *v2850;
  uint64_t v2851;
  uint64_t v2852;
  unsigned int v2853;
  uint64_t v2854;
  uint64_t v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t *v2858;
  uint64_t *v2859;
  int v2860;
  int v2861;
  int v2862;
  int v2863;
  int v2864;
  int v2865;
  uint64_t v2866;
  uint64_t v2867;
  BOOL v2868;
  uint64_t v2869;
  unint64_t v2870;
  uint64_t v2871;
  unsigned int *v2872;
  uint64_t v2873;
  uint64_t v2874;
  unsigned int v2875;
  uint64_t v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  uint64_t *v2880;
  uint64_t *v2881;
  int v2882;
  int v2883;
  int v2884;
  int v2885;
  int v2886;
  int v2887;
  uint64_t v2888;
  uint64_t v2889;
  BOOL v2890;
  uint64_t v2891;
  unint64_t v2892;
  uint64_t v2893;
  unsigned int *v2894;
  uint64_t v2895;
  uint64_t v2896;
  unsigned int v2897;
  uint64_t v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  uint64_t *v2902;
  uint64_t *v2903;
  int v2904;
  int v2905;
  int v2906;
  int v2907;
  int v2908;
  int v2909;
  uint64_t v2910;
  uint64_t v2911;
  BOOL v2912;
  uint64_t v2913;
  unint64_t v2914;
  uint64_t v2915;
  unsigned int *v2916;
  uint64_t v2917;
  uint64_t v2918;
  unsigned int v2919;
  uint64_t v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t *v2924;
  uint64_t *v2925;
  int v2926;
  int v2927;
  int v2928;
  int v2929;
  int v2930;
  int v2931;
  uint64_t v2932;
  uint64_t v2933;
  BOOL v2934;
  uint64_t v2935;
  unint64_t v2936;
  uint64_t v2937;
  unsigned int *v2938;
  uint64_t v2939;
  uint64_t v2940;
  unsigned int v2941;
  uint64_t v2942;
  uint64_t v2943;
  uint64_t v2944;
  uint64_t v2945;
  unsigned int *v2946;
  uint64_t *v2947;
  signed int v2948;
  signed int v2949;
  int v2950;
  signed int v2951;
  signed int v2952;
  uint64_t v2953;

  v1 = *result;
  v2 = **result;
  v3 = (unsigned int *)(*result)[1];
  v4 = v3[389];
  v5 = *(_DWORD *)(v2 + 272);
  if (v4 >> 30)
    v6 = 1;
  else
    v6 = (_DWORD)v4 == v5;
  if (v6)
  {
    v7 = v3[390];
    if (v7 >> 30)
      v8 = 1;
    else
      v8 = (_DWORD)v7 == v5;
    if (!v8)
      goto LABEL_644;
LABEL_11:
    v9 = v3[391];
    if (v9 >> 30)
      v10 = 1;
    else
      v10 = (_DWORD)v9 == v5;
    if (!v10)
      goto LABEL_671;
LABEL_16:
    v11 = v3[392];
    if (v11 >> 30)
      v12 = 1;
    else
      v12 = (_DWORD)v11 == v5;
    if (!v12)
      goto LABEL_698;
LABEL_21:
    v13 = v3[393];
    if (v13 >> 30)
      v14 = 1;
    else
      v14 = (_DWORD)v13 == v5;
    if (!v14)
      goto LABEL_725;
LABEL_26:
    v15 = v3[394];
    if (v15 >> 30)
      v16 = 1;
    else
      v16 = (_DWORD)v15 == v5;
    if (!v16)
      goto LABEL_752;
LABEL_31:
    v17 = v3[395];
    if (v17 >> 30)
      v18 = 1;
    else
      v18 = (_DWORD)v17 == v5;
    if (!v18)
      goto LABEL_779;
LABEL_36:
    v19 = v3[396];
    if (v19 >> 30)
      v20 = 1;
    else
      v20 = (_DWORD)v19 == v5;
    if (!v20)
      goto LABEL_806;
LABEL_41:
    v21 = v3[397];
    if (v21 >> 30)
      v22 = 1;
    else
      v22 = (_DWORD)v21 == v5;
    if (!v22)
      goto LABEL_833;
LABEL_46:
    v23 = v3[398];
    if (v23 >> 30)
      v24 = 1;
    else
      v24 = (_DWORD)v23 == v5;
    if (!v24)
      goto LABEL_860;
LABEL_51:
    v25 = v3[399];
    if (v25 >> 30)
      v26 = 1;
    else
      v26 = (_DWORD)v25 == v5;
    if (!v26)
      goto LABEL_887;
LABEL_56:
    v27 = v3[400];
    if (v27 >> 30)
      v28 = 1;
    else
      v28 = (_DWORD)v27 == v5;
    if (!v28)
      goto LABEL_914;
LABEL_61:
    v29 = v3[401];
    if (v29 >> 30)
      v30 = 1;
    else
      v30 = (_DWORD)v29 == v5;
    if (!v30)
      goto LABEL_941;
LABEL_66:
    v31 = v3[402];
    if (v31 >> 30)
      v32 = 1;
    else
      v32 = (_DWORD)v31 == v5;
    if (!v32)
      goto LABEL_968;
LABEL_71:
    v33 = v3[403];
    if (v33 >> 30)
      v34 = 1;
    else
      v34 = (_DWORD)v33 == v5;
    if (!v34)
      goto LABEL_995;
LABEL_76:
    v35 = v3[404];
    if (v35 >> 30)
      v36 = 1;
    else
      v36 = (_DWORD)v35 == v5;
    if (!v36)
      goto LABEL_1022;
LABEL_81:
    v37 = v3[405];
    if (v37 >> 30)
      v38 = 1;
    else
      v38 = (_DWORD)v37 == v5;
    if (!v38)
      goto LABEL_1049;
LABEL_86:
    v39 = v3[406];
    if (v39 >> 30)
      v40 = 1;
    else
      v40 = (_DWORD)v39 == v5;
    if (!v40)
      goto LABEL_1076;
LABEL_91:
    v41 = v3[407];
    if (v41 >> 30)
      v42 = 1;
    else
      v42 = (_DWORD)v41 == v5;
    if (!v42)
      goto LABEL_1103;
LABEL_96:
    v43 = v3[408];
    if (v43 >> 30)
      v44 = 1;
    else
      v44 = (_DWORD)v43 == v5;
    if (!v44)
      goto LABEL_1130;
LABEL_101:
    v45 = v3[409];
    if (v45 >> 30)
      v46 = 1;
    else
      v46 = (_DWORD)v45 == v5;
    if (!v46)
      goto LABEL_1157;
LABEL_106:
    v47 = v3[410];
    if (v47 >> 30)
      v48 = 1;
    else
      v48 = (_DWORD)v47 == v5;
    if (!v48)
      goto LABEL_1184;
LABEL_111:
    v49 = v3[411];
    if (v49 >> 30)
      v50 = 1;
    else
      v50 = (_DWORD)v49 == v5;
    if (!v50)
      goto LABEL_1211;
LABEL_116:
    v51 = v3[412];
    if (v51 >> 30)
      v52 = 1;
    else
      v52 = (_DWORD)v51 == v5;
    if (!v52)
      goto LABEL_1238;
LABEL_121:
    v53 = v3[413];
    if (v53 >> 30)
      v54 = 1;
    else
      v54 = (_DWORD)v53 == v5;
    if (!v54)
      goto LABEL_1265;
LABEL_126:
    v55 = v3[414];
    if (v55 >> 30)
      v56 = 1;
    else
      v56 = (_DWORD)v55 == v5;
    if (!v56)
      goto LABEL_1292;
LABEL_131:
    v57 = v3[415];
    if (v57 >> 30)
      v58 = 1;
    else
      v58 = (_DWORD)v57 == v5;
    if (!v58)
      goto LABEL_1319;
LABEL_136:
    v59 = v3[416];
    if (v59 >> 30)
      v60 = 1;
    else
      v60 = (_DWORD)v59 == v5;
    if (!v60)
      goto LABEL_1346;
LABEL_141:
    v61 = v3[417];
    if (v61 >> 30)
      v62 = 1;
    else
      v62 = (_DWORD)v61 == v5;
    if (!v62)
      goto LABEL_1373;
LABEL_146:
    v63 = v3[418];
    if (v63 >> 30)
      v64 = 1;
    else
      v64 = (_DWORD)v63 == v5;
    if (!v64)
      goto LABEL_1400;
LABEL_151:
    v65 = v3[419];
    if (v65 >> 30)
      v66 = 1;
    else
      v66 = (_DWORD)v65 == v5;
    if (!v66)
      goto LABEL_1427;
LABEL_156:
    v67 = v3[420];
    if (v67 >> 30)
      v68 = 1;
    else
      v68 = (_DWORD)v67 == v5;
    if (!v68)
      goto LABEL_1454;
LABEL_161:
    v69 = v3[421];
    if (v69 >> 30)
      v70 = 1;
    else
      v70 = (_DWORD)v69 == v5;
    if (!v70)
      goto LABEL_1481;
LABEL_166:
    v71 = v3[422];
    if (v71 >> 30)
      v72 = 1;
    else
      v72 = (_DWORD)v71 == v5;
    if (!v72)
      goto LABEL_1508;
LABEL_171:
    v73 = v3[423];
    if (v73 >> 30)
      v74 = 1;
    else
      v74 = (_DWORD)v73 == v5;
    if (!v74)
      goto LABEL_1535;
LABEL_176:
    v75 = v3[424];
    if (v75 >> 30)
      v76 = 1;
    else
      v76 = (_DWORD)v75 == v5;
    if (!v76)
      goto LABEL_1562;
LABEL_181:
    v77 = v3[425];
    if (v77 >> 30)
      v78 = 1;
    else
      v78 = (_DWORD)v77 == v5;
    if (!v78)
      goto LABEL_1589;
LABEL_186:
    v79 = v3[426];
    if (v79 >> 30)
      v80 = 1;
    else
      v80 = (_DWORD)v79 == v5;
    if (!v80)
      goto LABEL_1616;
LABEL_191:
    v81 = v3[427];
    if (v81 >> 30)
      v82 = 1;
    else
      v82 = (_DWORD)v81 == v5;
    if (!v82)
      goto LABEL_1643;
LABEL_196:
    v83 = v3[428];
    if (v83 >> 30)
      v84 = 1;
    else
      v84 = (_DWORD)v83 == v5;
    if (!v84)
      goto LABEL_1670;
LABEL_201:
    v85 = v3[429];
    if (v85 >> 30)
      v86 = 1;
    else
      v86 = (_DWORD)v85 == v5;
    if (!v86)
      goto LABEL_1697;
LABEL_206:
    v87 = v3[430];
    if (v87 >> 30)
      v88 = 1;
    else
      v88 = (_DWORD)v87 == v5;
    if (!v88)
      goto LABEL_1724;
LABEL_211:
    v89 = v3[431];
    if (v89 >> 30)
      v90 = 1;
    else
      v90 = (_DWORD)v89 == v5;
    if (!v90)
      goto LABEL_1751;
LABEL_216:
    v91 = v3[432];
    if (v91 >> 30)
      v92 = 1;
    else
      v92 = (_DWORD)v91 == v5;
    if (!v92)
      goto LABEL_1778;
LABEL_221:
    v93 = v3[433];
    if (v93 >> 30)
      v94 = 1;
    else
      v94 = (_DWORD)v93 == v5;
    if (!v94)
      goto LABEL_1805;
LABEL_226:
    v95 = v3[434];
    if (v95 >> 30)
      v96 = 1;
    else
      v96 = (_DWORD)v95 == v5;
    if (!v96)
      goto LABEL_1832;
LABEL_231:
    v97 = v3[435];
    if (v97 >> 30)
      v98 = 1;
    else
      v98 = (_DWORD)v97 == v5;
    if (!v98)
      goto LABEL_1859;
LABEL_236:
    v99 = v3[436];
    if (v99 >> 30)
      v100 = 1;
    else
      v100 = (_DWORD)v99 == v5;
    if (!v100)
      goto LABEL_1886;
LABEL_241:
    v101 = v3[437];
    if (v101 >> 30)
      v102 = 1;
    else
      v102 = (_DWORD)v101 == v5;
    if (!v102)
      goto LABEL_1913;
LABEL_246:
    v103 = v3[438];
    if (v103 >> 30)
      v104 = 1;
    else
      v104 = (_DWORD)v103 == v5;
    if (!v104)
      goto LABEL_1940;
LABEL_251:
    v105 = v3[439];
    if (v105 >> 30)
      v106 = 1;
    else
      v106 = (_DWORD)v105 == v5;
    if (!v106)
      goto LABEL_1967;
LABEL_256:
    v107 = v3[440];
    if (v107 >> 30)
      v108 = 1;
    else
      v108 = (_DWORD)v107 == v5;
    if (!v108)
      goto LABEL_1993;
LABEL_261:
    v109 = v3[441];
    if (v109 >> 30)
      v110 = 1;
    else
      v110 = (_DWORD)v109 == v5;
    if (!v110)
      goto LABEL_2019;
LABEL_266:
    v111 = v3[442];
    if (v111 >> 30)
      v112 = 1;
    else
      v112 = (_DWORD)v111 == v5;
    if (!v112)
      goto LABEL_2045;
LABEL_271:
    v113 = v3[443];
    if (v113 >> 30)
      v114 = 1;
    else
      v114 = (_DWORD)v113 == v5;
    if (!v114)
      goto LABEL_2071;
LABEL_276:
    v115 = v3[444];
    if (v115 >> 30)
      v116 = 1;
    else
      v116 = (_DWORD)v115 == v5;
    if (!v116)
      goto LABEL_2097;
LABEL_281:
    v117 = v3[445];
    if (v117 >> 30)
      v118 = 1;
    else
      v118 = (_DWORD)v117 == v5;
    if (!v118)
      goto LABEL_2123;
LABEL_286:
    v119 = v3[446];
    if (v119 >> 30)
      v120 = 1;
    else
      v120 = (_DWORD)v119 == v5;
    if (!v120)
      goto LABEL_2149;
LABEL_291:
    v121 = v3[447];
    if (v121 >> 30)
      v122 = 1;
    else
      v122 = (_DWORD)v121 == v5;
    if (!v122)
      goto LABEL_2175;
LABEL_296:
    v123 = v3[448];
    if (v123 >> 30)
      v124 = 1;
    else
      v124 = (_DWORD)v123 == v5;
    if (!v124)
      goto LABEL_2201;
LABEL_301:
    v125 = v3[449];
    if (v125 >> 30)
      v126 = 1;
    else
      v126 = (_DWORD)v125 == v5;
    if (!v126)
      goto LABEL_2227;
LABEL_306:
    v127 = v3[450];
    if (v127 >> 30)
      v128 = 1;
    else
      v128 = (_DWORD)v127 == v5;
    if (!v128)
      goto LABEL_2253;
LABEL_311:
    v129 = v3[451];
    if (v129 >> 30)
      v130 = 1;
    else
      v130 = (_DWORD)v129 == v5;
    if (!v130)
      goto LABEL_2279;
LABEL_316:
    v131 = v3[452];
    if (v131 >> 30)
      v132 = 1;
    else
      v132 = (_DWORD)v131 == v5;
    if (!v132)
      goto LABEL_2305;
LABEL_321:
    v133 = v3[453];
    if (v133 >> 30)
      v134 = 1;
    else
      v134 = (_DWORD)v133 == v5;
    if (!v134)
      goto LABEL_2331;
LABEL_326:
    v135 = v3[454];
    if (v135 >> 30)
      v136 = 1;
    else
      v136 = (_DWORD)v135 == v5;
    if (!v136)
      goto LABEL_2357;
LABEL_331:
    v137 = v3[455];
    if (v137 >> 30)
      v138 = 1;
    else
      v138 = (_DWORD)v137 == v5;
    if (!v138)
      goto LABEL_2383;
LABEL_336:
    v139 = v3[456];
    if (v139 >> 30)
      v140 = 1;
    else
      v140 = (_DWORD)v139 == v5;
    if (!v140)
      goto LABEL_2409;
LABEL_341:
    v141 = v3[457];
    if (v141 >> 30)
      v142 = 1;
    else
      v142 = (_DWORD)v141 == v5;
    if (!v142)
      goto LABEL_2435;
LABEL_346:
    v143 = v3[458];
    if (v143 >> 30)
      v144 = 1;
    else
      v144 = (_DWORD)v143 == v5;
    if (!v144)
      goto LABEL_2461;
LABEL_351:
    v145 = v3[459];
    if (v145 >> 30)
      v146 = 1;
    else
      v146 = (_DWORD)v145 == v5;
    if (!v146)
      goto LABEL_2487;
LABEL_356:
    v147 = v3[460];
    if (v147 >> 30)
      v148 = 1;
    else
      v148 = (_DWORD)v147 == v5;
    if (!v148)
      goto LABEL_2513;
LABEL_361:
    v149 = v3[461];
    if (v149 >> 30)
      v150 = 1;
    else
      v150 = (_DWORD)v149 == v5;
    if (!v150)
      goto LABEL_2539;
LABEL_366:
    v151 = v3[462];
    if (v151 >> 30)
      v152 = 1;
    else
      v152 = (_DWORD)v151 == v5;
    if (!v152)
      goto LABEL_2565;
LABEL_371:
    v153 = v3[463];
    if (v153 >> 30)
      v154 = 1;
    else
      v154 = (_DWORD)v153 == v5;
    if (!v154)
      goto LABEL_2591;
LABEL_376:
    v155 = v3[464];
    if (v155 >> 30)
      v156 = 1;
    else
      v156 = (_DWORD)v155 == v5;
    if (!v156)
      goto LABEL_2617;
LABEL_381:
    v157 = v3[465];
    if (v157 >> 30)
      v158 = 1;
    else
      v158 = (_DWORD)v157 == v5;
    if (!v158)
      goto LABEL_2643;
LABEL_386:
    v159 = v3[466];
    if (v159 >> 30)
      v160 = 1;
    else
      v160 = (_DWORD)v159 == v5;
    if (!v160)
      goto LABEL_2669;
LABEL_391:
    v161 = v3[467];
    if (v161 >> 30)
      v162 = 1;
    else
      v162 = (_DWORD)v161 == v5;
    if (!v162)
      goto LABEL_2695;
LABEL_396:
    v163 = v3[468];
    if (v163 >> 30)
      v164 = 1;
    else
      v164 = (_DWORD)v163 == v5;
    if (!v164)
      goto LABEL_2721;
LABEL_401:
    v165 = v3[469];
    if (v165 >> 30)
      v166 = 1;
    else
      v166 = (_DWORD)v165 == v5;
    if (!v166)
      goto LABEL_2747;
LABEL_406:
    v167 = v3[470];
    if (v167 >> 30)
      v168 = 1;
    else
      v168 = (_DWORD)v167 == v5;
    if (!v168)
      goto LABEL_2773;
LABEL_411:
    v169 = v3[471];
    if (v169 >> 30)
      v170 = 1;
    else
      v170 = (_DWORD)v169 == v5;
    if (!v170)
      goto LABEL_2799;
LABEL_416:
    v171 = v3[472];
    if (v171 >> 30)
      v172 = 1;
    else
      v172 = (_DWORD)v171 == v5;
    if (!v172)
      goto LABEL_2825;
LABEL_421:
    v173 = v3[473];
    if (v173 >> 30)
      v174 = 1;
    else
      v174 = (_DWORD)v173 == v5;
    if (!v174)
      goto LABEL_2851;
LABEL_426:
    v175 = v3[474];
    if (v175 >> 30)
      v176 = 1;
    else
      v176 = (_DWORD)v175 == v5;
    if (!v176)
      goto LABEL_2877;
LABEL_431:
    v177 = v3[475];
    if (v177 >> 30)
      v178 = 1;
    else
      v178 = (_DWORD)v177 == v5;
    if (!v178)
      goto LABEL_2903;
LABEL_436:
    v179 = v3[476];
    if (v179 >> 30)
      v180 = 1;
    else
      v180 = (_DWORD)v179 == v5;
    if (!v180)
      goto LABEL_2929;
LABEL_441:
    v181 = v3[477];
    if (v181 >> 30)
      v182 = 1;
    else
      v182 = (_DWORD)v181 == v5;
    if (!v182)
      goto LABEL_2955;
LABEL_446:
    v183 = v3[478];
    if (v183 >> 30)
      v184 = 1;
    else
      v184 = (_DWORD)v183 == v5;
    if (!v184)
      goto LABEL_2981;
LABEL_451:
    v185 = v3[479];
    if (v185 >> 30)
      v186 = 1;
    else
      v186 = (_DWORD)v185 == v5;
    if (!v186)
      goto LABEL_3007;
LABEL_456:
    v187 = v3[480];
    if (v187 >> 30)
      v188 = 1;
    else
      v188 = (_DWORD)v187 == v5;
    if (!v188)
      goto LABEL_3033;
LABEL_461:
    v189 = v3[481];
    if (v189 >> 30)
      v190 = 1;
    else
      v190 = (_DWORD)v189 == v5;
    if (!v190)
      goto LABEL_3059;
LABEL_466:
    v191 = v3[482];
    if (v191 >> 30)
      v192 = 1;
    else
      v192 = (_DWORD)v191 == v5;
    if (!v192)
      goto LABEL_3085;
LABEL_471:
    v193 = v3[483];
    if (v193 >> 30)
      v194 = 1;
    else
      v194 = (_DWORD)v193 == v5;
    if (!v194)
      goto LABEL_3111;
LABEL_476:
    v195 = v3[484];
    if (v195 >> 30)
      v196 = 1;
    else
      v196 = (_DWORD)v195 == v5;
    if (!v196)
      goto LABEL_3137;
LABEL_481:
    v197 = v3[485];
    if (v197 >> 30)
      v198 = 1;
    else
      v198 = (_DWORD)v197 == v5;
    if (!v198)
      goto LABEL_3163;
LABEL_486:
    v199 = v3[486];
    if (v199 >> 30)
      v200 = 1;
    else
      v200 = (_DWORD)v199 == v5;
    if (!v200)
      goto LABEL_3189;
LABEL_491:
    v201 = v3[487];
    if (v201 >> 30)
      v202 = 1;
    else
      v202 = (_DWORD)v201 == v5;
    if (!v202)
      goto LABEL_3215;
LABEL_496:
    v203 = v3[488];
    if (v203 >> 30)
      v204 = 1;
    else
      v204 = (_DWORD)v203 == v5;
    if (!v204)
      goto LABEL_3241;
LABEL_501:
    v205 = v3[489];
    if (v205 >> 30)
      v206 = 1;
    else
      v206 = (_DWORD)v205 == v5;
    if (!v206)
      goto LABEL_3267;
LABEL_506:
    v207 = v3[490];
    if (v207 >> 30)
      v208 = 1;
    else
      v208 = (_DWORD)v207 == v5;
    if (!v208)
      goto LABEL_3293;
LABEL_511:
    v209 = v3[491];
    if (v209 >> 30)
      v210 = 1;
    else
      v210 = (_DWORD)v209 == v5;
    if (!v210)
      goto LABEL_3319;
LABEL_516:
    v211 = v3[492];
    if (v211 >> 30)
      v212 = 1;
    else
      v212 = (_DWORD)v211 == v5;
    if (!v212)
      goto LABEL_3345;
LABEL_521:
    v213 = v3[493];
    if (v213 >> 30)
      v214 = 1;
    else
      v214 = (_DWORD)v213 == v5;
    if (!v214)
      goto LABEL_3371;
LABEL_526:
    v215 = v3[494];
    if (v215 >> 30)
      v216 = 1;
    else
      v216 = (_DWORD)v215 == v5;
    if (!v216)
      goto LABEL_3397;
LABEL_531:
    v217 = v3[495];
    if (v217 >> 30)
      v218 = 1;
    else
      v218 = (_DWORD)v217 == v5;
    if (!v218)
      goto LABEL_3423;
LABEL_536:
    v219 = v3[496];
    if (v219 >> 30)
      v220 = 1;
    else
      v220 = (_DWORD)v219 == v5;
    if (!v220)
      goto LABEL_3449;
LABEL_541:
    v221 = v3[497];
    if (v221 >> 30)
      v222 = 1;
    else
      v222 = (_DWORD)v221 == v5;
    if (!v222)
      goto LABEL_3475;
LABEL_546:
    v223 = v3[498];
    if (v223 >> 30)
      v224 = 1;
    else
      v224 = (_DWORD)v223 == v5;
    if (!v224)
      goto LABEL_3501;
LABEL_551:
    v225 = v3[499];
    if (v225 >> 30)
      v226 = 1;
    else
      v226 = (_DWORD)v225 == v5;
    if (!v226)
      goto LABEL_3527;
LABEL_556:
    v227 = v3[500];
    if (v227 >> 30)
      v228 = 1;
    else
      v228 = (_DWORD)v227 == v5;
    if (!v228)
      goto LABEL_3553;
LABEL_561:
    v229 = v3[501];
    if (v229 >> 30)
      v230 = 1;
    else
      v230 = (_DWORD)v229 == v5;
    if (!v230)
      goto LABEL_3579;
LABEL_566:
    v231 = v3[502];
    if (v231 >> 30)
      v232 = 1;
    else
      v232 = (_DWORD)v231 == v5;
    if (!v232)
      goto LABEL_3605;
LABEL_571:
    v233 = v3[503];
    if (v233 >> 30)
      v234 = 1;
    else
      v234 = (_DWORD)v233 == v5;
    if (!v234)
      goto LABEL_3631;
LABEL_576:
    v235 = v3[504];
    if (v235 >> 30)
      v236 = 1;
    else
      v236 = (_DWORD)v235 == v5;
    if (!v236)
      goto LABEL_3657;
LABEL_581:
    v237 = v3[505];
    if (v237 >> 30)
      v238 = 1;
    else
      v238 = (_DWORD)v237 == v5;
    if (!v238)
      goto LABEL_3683;
LABEL_586:
    v239 = v3[506];
    if (v239 >> 30)
      v240 = 1;
    else
      v240 = (_DWORD)v239 == v5;
    if (!v240)
      goto LABEL_3709;
LABEL_591:
    v241 = v3[507];
    if (v241 >> 30)
      v242 = 1;
    else
      v242 = (_DWORD)v241 == v5;
    if (!v242)
      goto LABEL_3735;
LABEL_596:
    v243 = v3[508];
    if (v243 >> 30)
      v244 = 1;
    else
      v244 = (_DWORD)v243 == v5;
    if (!v244)
      goto LABEL_3761;
LABEL_601:
    v245 = v3[509];
    if (v245 >> 30)
      v246 = 1;
    else
      v246 = (_DWORD)v245 == v5;
    if (!v246)
      goto LABEL_3787;
LABEL_606:
    v247 = v3[510];
    if (v247 >> 30)
      v248 = 1;
    else
      v248 = (_DWORD)v247 == v5;
    if (!v248)
      goto LABEL_3813;
    goto LABEL_611;
  }
  v251 = *(_QWORD *)(v1[2] + 8);
  v252 = v4 & 0xFFFFFFFFCFFFFFFFLL;
  v253 = *(_QWORD *)(*(_QWORD *)(v251 + 8) + 2448);
  v254 = (unsigned int *)(v253 + 520 * (v4 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v255 = *v254;
  if ((_DWORD)v255)
  {
    v256 = 0;
    v257 = 0;
    v258 = **(_QWORD **)(v251 + 16);
    v259 = v253 + 520 * v252;
    v260 = v259 + 364;
    v261 = v259 + 340;
    while (1)
    {
      v262 = (uint64_t *)(v260 + 12 * v256);
      v263 = *(uint64_t **)(v258 + 2512);
      if (v263)
        break;
LABEL_636:
      *(_WORD *)(v261 + 2 * v257) = *(_WORD *)(v261 + 2 * v256);
      if (v256 != v257)
      {
        v270 = *v262;
        v271 = v260 + 12 * v257;
        *(_DWORD *)(v271 + 8) = *((_DWORD *)v262 + 2);
        *(_QWORD *)v271 = v270;
      }
      ++v257;
LABEL_620:
      if (++v256 == v255)
      {
        v1 = *result;
        v2 = **result;
        v3 = (unsigned int *)(*result)[1];
        v5 = *(_DWORD *)(v2 + 272);
        goto LABEL_640;
      }
    }
    v264 = *(_DWORD *)v262;
    v265 = *((_DWORD *)v262 + 1);
    v266 = *((_DWORD *)v262 + 2);
    while (1)
    {
      v267 = *((_DWORD *)v263 + 7);
      if (v264 == v267)
      {
        v268 = *((_DWORD *)v263 + 8);
        if (v265 == v268)
        {
          v269 = *((_DWORD *)v263 + 9);
          if (v266 < v269)
            goto LABEL_624;
          if (v269 >= v266)
            goto LABEL_620;
        }
        else
        {
          if (v265 < v268)
            goto LABEL_624;
          if (v268 >= v265)
            goto LABEL_620;
        }
      }
      else
      {
        if (v264 < v267)
          goto LABEL_624;
        if (v267 >= v264)
          goto LABEL_620;
      }
      ++v263;
LABEL_624:
      v263 = (uint64_t *)*v263;
      if (!v263)
        goto LABEL_636;
    }
  }
  v257 = 0;
LABEL_640:
  *v254 = v257;
  v7 = v3[390];
  if (v7 >> 30)
    v272 = 1;
  else
    v272 = (_DWORD)v7 == v5;
  if (v272)
    goto LABEL_11;
LABEL_644:
  v273 = *(_QWORD *)(v1[2] + 8);
  v274 = v7 & 0xFFFFFFFFCFFFFFFFLL;
  v275 = *(_QWORD *)(*(_QWORD *)(v273 + 8) + 2448);
  v276 = (unsigned int *)(v275 + 520 * (v7 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v277 = *v276;
  if ((_DWORD)v277)
  {
    v278 = 0;
    v279 = 0;
    v280 = **(_QWORD **)(v273 + 16);
    v281 = v275 + 520 * v274;
    v282 = v281 + 364;
    v283 = v281 + 340;
    while (1)
    {
      v284 = (uint64_t *)(v282 + 12 * v278);
      v285 = *(uint64_t **)(v280 + 2512);
      if (v285)
        break;
LABEL_663:
      *(_WORD *)(v283 + 2 * v279) = *(_WORD *)(v283 + 2 * v278);
      if (v278 != v279)
      {
        v292 = *v284;
        v293 = v282 + 12 * v279;
        *(_DWORD *)(v293 + 8) = *((_DWORD *)v284 + 2);
        *(_QWORD *)v293 = v292;
      }
      ++v279;
LABEL_647:
      if (++v278 == v277)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_667;
      }
    }
    v286 = *(_DWORD *)v284;
    v287 = *((_DWORD *)v284 + 1);
    v288 = *((_DWORD *)v284 + 2);
    while (1)
    {
      v289 = *((_DWORD *)v285 + 7);
      if (v286 == v289)
      {
        v290 = *((_DWORD *)v285 + 8);
        if (v287 == v290)
        {
          v291 = *((_DWORD *)v285 + 9);
          if (v288 < v291)
            goto LABEL_651;
          if (v291 >= v288)
            goto LABEL_647;
        }
        else
        {
          if (v287 < v290)
            goto LABEL_651;
          if (v290 >= v287)
            goto LABEL_647;
        }
      }
      else
      {
        if (v286 < v289)
          goto LABEL_651;
        if (v289 >= v286)
          goto LABEL_647;
      }
      ++v285;
LABEL_651:
      v285 = (uint64_t *)*v285;
      if (!v285)
        goto LABEL_663;
    }
  }
  v279 = 0;
LABEL_667:
  *v276 = v279;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v9 = v3[391];
  if (v9 >> 30)
    v294 = 1;
  else
    v294 = (_DWORD)v9 == v5;
  if (v294)
    goto LABEL_16;
LABEL_671:
  v295 = *(_QWORD *)(v1[2] + 8);
  v296 = v9 & 0xFFFFFFFFCFFFFFFFLL;
  v297 = *(_QWORD *)(*(_QWORD *)(v295 + 8) + 2448);
  v298 = (unsigned int *)(v297 + 520 * (v9 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v299 = *v298;
  if ((_DWORD)v299)
  {
    v300 = 0;
    v301 = 0;
    v302 = **(_QWORD **)(v295 + 16);
    v303 = v297 + 520 * v296;
    v304 = v303 + 364;
    v305 = v303 + 340;
    while (1)
    {
      v306 = (uint64_t *)(v304 + 12 * v300);
      v307 = *(uint64_t **)(v302 + 2512);
      if (v307)
        break;
LABEL_690:
      *(_WORD *)(v305 + 2 * v301) = *(_WORD *)(v305 + 2 * v300);
      if (v300 != v301)
      {
        v314 = *v306;
        v315 = v304 + 12 * v301;
        *(_DWORD *)(v315 + 8) = *((_DWORD *)v306 + 2);
        *(_QWORD *)v315 = v314;
      }
      ++v301;
LABEL_674:
      if (++v300 == v299)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_694;
      }
    }
    v308 = *(_DWORD *)v306;
    v309 = *((_DWORD *)v306 + 1);
    v310 = *((_DWORD *)v306 + 2);
    while (1)
    {
      v311 = *((_DWORD *)v307 + 7);
      if (v308 == v311)
      {
        v312 = *((_DWORD *)v307 + 8);
        if (v309 == v312)
        {
          v313 = *((_DWORD *)v307 + 9);
          if (v310 < v313)
            goto LABEL_678;
          if (v313 >= v310)
            goto LABEL_674;
        }
        else
        {
          if (v309 < v312)
            goto LABEL_678;
          if (v312 >= v309)
            goto LABEL_674;
        }
      }
      else
      {
        if (v308 < v311)
          goto LABEL_678;
        if (v311 >= v308)
          goto LABEL_674;
      }
      ++v307;
LABEL_678:
      v307 = (uint64_t *)*v307;
      if (!v307)
        goto LABEL_690;
    }
  }
  v301 = 0;
LABEL_694:
  *v298 = v301;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v11 = v3[392];
  if (v11 >> 30)
    v316 = 1;
  else
    v316 = (_DWORD)v11 == v5;
  if (v316)
    goto LABEL_21;
LABEL_698:
  v317 = *(_QWORD *)(v1[2] + 8);
  v318 = v11 & 0xFFFFFFFFCFFFFFFFLL;
  v319 = *(_QWORD *)(*(_QWORD *)(v317 + 8) + 2448);
  v320 = (unsigned int *)(v319 + 520 * (v11 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v321 = *v320;
  if ((_DWORD)v321)
  {
    v322 = 0;
    v323 = 0;
    v324 = **(_QWORD **)(v317 + 16);
    v325 = v319 + 520 * v318;
    v326 = v325 + 364;
    v327 = v325 + 340;
    while (1)
    {
      v328 = (uint64_t *)(v326 + 12 * v322);
      v329 = *(uint64_t **)(v324 + 2512);
      if (v329)
        break;
LABEL_717:
      *(_WORD *)(v327 + 2 * v323) = *(_WORD *)(v327 + 2 * v322);
      if (v322 != v323)
      {
        v336 = *v328;
        v337 = v326 + 12 * v323;
        *(_DWORD *)(v337 + 8) = *((_DWORD *)v328 + 2);
        *(_QWORD *)v337 = v336;
      }
      ++v323;
LABEL_701:
      if (++v322 == v321)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_721;
      }
    }
    v330 = *(_DWORD *)v328;
    v331 = *((_DWORD *)v328 + 1);
    v332 = *((_DWORD *)v328 + 2);
    while (1)
    {
      v333 = *((_DWORD *)v329 + 7);
      if (v330 == v333)
      {
        v334 = *((_DWORD *)v329 + 8);
        if (v331 == v334)
        {
          v335 = *((_DWORD *)v329 + 9);
          if (v332 < v335)
            goto LABEL_705;
          if (v335 >= v332)
            goto LABEL_701;
        }
        else
        {
          if (v331 < v334)
            goto LABEL_705;
          if (v334 >= v331)
            goto LABEL_701;
        }
      }
      else
      {
        if (v330 < v333)
          goto LABEL_705;
        if (v333 >= v330)
          goto LABEL_701;
      }
      ++v329;
LABEL_705:
      v329 = (uint64_t *)*v329;
      if (!v329)
        goto LABEL_717;
    }
  }
  v323 = 0;
LABEL_721:
  *v320 = v323;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v13 = v3[393];
  if (v13 >> 30)
    v338 = 1;
  else
    v338 = (_DWORD)v13 == v5;
  if (v338)
    goto LABEL_26;
LABEL_725:
  v339 = *(_QWORD *)(v1[2] + 8);
  v340 = v13 & 0xFFFFFFFFCFFFFFFFLL;
  v341 = *(_QWORD *)(*(_QWORD *)(v339 + 8) + 2448);
  v342 = (unsigned int *)(v341 + 520 * (v13 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v343 = *v342;
  if ((_DWORD)v343)
  {
    v344 = 0;
    v345 = 0;
    v346 = **(_QWORD **)(v339 + 16);
    v347 = v341 + 520 * v340;
    v348 = v347 + 364;
    v349 = v347 + 340;
    while (1)
    {
      v350 = (uint64_t *)(v348 + 12 * v344);
      v351 = *(uint64_t **)(v346 + 2512);
      if (v351)
        break;
LABEL_744:
      *(_WORD *)(v349 + 2 * v345) = *(_WORD *)(v349 + 2 * v344);
      if (v344 != v345)
      {
        v358 = *v350;
        v359 = v348 + 12 * v345;
        *(_DWORD *)(v359 + 8) = *((_DWORD *)v350 + 2);
        *(_QWORD *)v359 = v358;
      }
      ++v345;
LABEL_728:
      if (++v344 == v343)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_748;
      }
    }
    v352 = *(_DWORD *)v350;
    v353 = *((_DWORD *)v350 + 1);
    v354 = *((_DWORD *)v350 + 2);
    while (1)
    {
      v355 = *((_DWORD *)v351 + 7);
      if (v352 == v355)
      {
        v356 = *((_DWORD *)v351 + 8);
        if (v353 == v356)
        {
          v357 = *((_DWORD *)v351 + 9);
          if (v354 < v357)
            goto LABEL_732;
          if (v357 >= v354)
            goto LABEL_728;
        }
        else
        {
          if (v353 < v356)
            goto LABEL_732;
          if (v356 >= v353)
            goto LABEL_728;
        }
      }
      else
      {
        if (v352 < v355)
          goto LABEL_732;
        if (v355 >= v352)
          goto LABEL_728;
      }
      ++v351;
LABEL_732:
      v351 = (uint64_t *)*v351;
      if (!v351)
        goto LABEL_744;
    }
  }
  v345 = 0;
LABEL_748:
  *v342 = v345;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v15 = v3[394];
  if (v15 >> 30)
    v360 = 1;
  else
    v360 = (_DWORD)v15 == v5;
  if (v360)
    goto LABEL_31;
LABEL_752:
  v361 = *(_QWORD *)(v1[2] + 8);
  v362 = v15 & 0xFFFFFFFFCFFFFFFFLL;
  v363 = *(_QWORD *)(*(_QWORD *)(v361 + 8) + 2448);
  v364 = (unsigned int *)(v363 + 520 * (v15 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v365 = *v364;
  if ((_DWORD)v365)
  {
    v366 = 0;
    v367 = 0;
    v368 = **(_QWORD **)(v361 + 16);
    v369 = v363 + 520 * v362;
    v370 = v369 + 364;
    v371 = v369 + 340;
    while (1)
    {
      v372 = (uint64_t *)(v370 + 12 * v366);
      v373 = *(uint64_t **)(v368 + 2512);
      if (v373)
        break;
LABEL_771:
      *(_WORD *)(v371 + 2 * v367) = *(_WORD *)(v371 + 2 * v366);
      if (v366 != v367)
      {
        v380 = *v372;
        v381 = v370 + 12 * v367;
        *(_DWORD *)(v381 + 8) = *((_DWORD *)v372 + 2);
        *(_QWORD *)v381 = v380;
      }
      ++v367;
LABEL_755:
      if (++v366 == v365)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_775;
      }
    }
    v374 = *(_DWORD *)v372;
    v375 = *((_DWORD *)v372 + 1);
    v376 = *((_DWORD *)v372 + 2);
    while (1)
    {
      v377 = *((_DWORD *)v373 + 7);
      if (v374 == v377)
      {
        v378 = *((_DWORD *)v373 + 8);
        if (v375 == v378)
        {
          v379 = *((_DWORD *)v373 + 9);
          if (v376 < v379)
            goto LABEL_759;
          if (v379 >= v376)
            goto LABEL_755;
        }
        else
        {
          if (v375 < v378)
            goto LABEL_759;
          if (v378 >= v375)
            goto LABEL_755;
        }
      }
      else
      {
        if (v374 < v377)
          goto LABEL_759;
        if (v377 >= v374)
          goto LABEL_755;
      }
      ++v373;
LABEL_759:
      v373 = (uint64_t *)*v373;
      if (!v373)
        goto LABEL_771;
    }
  }
  v367 = 0;
LABEL_775:
  *v364 = v367;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v17 = v3[395];
  if (v17 >> 30)
    v382 = 1;
  else
    v382 = (_DWORD)v17 == v5;
  if (v382)
    goto LABEL_36;
LABEL_779:
  v383 = *(_QWORD *)(v1[2] + 8);
  v384 = v17 & 0xFFFFFFFFCFFFFFFFLL;
  v385 = *(_QWORD *)(*(_QWORD *)(v383 + 8) + 2448);
  v386 = (unsigned int *)(v385 + 520 * (v17 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v387 = *v386;
  if ((_DWORD)v387)
  {
    v388 = 0;
    v389 = 0;
    v390 = **(_QWORD **)(v383 + 16);
    v391 = v385 + 520 * v384;
    v392 = v391 + 364;
    v393 = v391 + 340;
    while (1)
    {
      v394 = (uint64_t *)(v392 + 12 * v388);
      v395 = *(uint64_t **)(v390 + 2512);
      if (v395)
        break;
LABEL_798:
      *(_WORD *)(v393 + 2 * v389) = *(_WORD *)(v393 + 2 * v388);
      if (v388 != v389)
      {
        v402 = *v394;
        v403 = v392 + 12 * v389;
        *(_DWORD *)(v403 + 8) = *((_DWORD *)v394 + 2);
        *(_QWORD *)v403 = v402;
      }
      ++v389;
LABEL_782:
      if (++v388 == v387)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_802;
      }
    }
    v396 = *(_DWORD *)v394;
    v397 = *((_DWORD *)v394 + 1);
    v398 = *((_DWORD *)v394 + 2);
    while (1)
    {
      v399 = *((_DWORD *)v395 + 7);
      if (v396 == v399)
      {
        v400 = *((_DWORD *)v395 + 8);
        if (v397 == v400)
        {
          v401 = *((_DWORD *)v395 + 9);
          if (v398 < v401)
            goto LABEL_786;
          if (v401 >= v398)
            goto LABEL_782;
        }
        else
        {
          if (v397 < v400)
            goto LABEL_786;
          if (v400 >= v397)
            goto LABEL_782;
        }
      }
      else
      {
        if (v396 < v399)
          goto LABEL_786;
        if (v399 >= v396)
          goto LABEL_782;
      }
      ++v395;
LABEL_786:
      v395 = (uint64_t *)*v395;
      if (!v395)
        goto LABEL_798;
    }
  }
  v389 = 0;
LABEL_802:
  *v386 = v389;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v19 = v3[396];
  if (v19 >> 30)
    v404 = 1;
  else
    v404 = (_DWORD)v19 == v5;
  if (v404)
    goto LABEL_41;
LABEL_806:
  v405 = *(_QWORD *)(v1[2] + 8);
  v406 = v19 & 0xFFFFFFFFCFFFFFFFLL;
  v407 = *(_QWORD *)(*(_QWORD *)(v405 + 8) + 2448);
  v408 = (unsigned int *)(v407 + 520 * (v19 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v409 = *v408;
  if ((_DWORD)v409)
  {
    v410 = 0;
    v411 = 0;
    v412 = **(_QWORD **)(v405 + 16);
    v413 = v407 + 520 * v406;
    v414 = v413 + 364;
    v415 = v413 + 340;
    while (1)
    {
      v416 = (uint64_t *)(v414 + 12 * v410);
      v417 = *(uint64_t **)(v412 + 2512);
      if (v417)
        break;
LABEL_825:
      *(_WORD *)(v415 + 2 * v411) = *(_WORD *)(v415 + 2 * v410);
      if (v410 != v411)
      {
        v424 = *v416;
        v425 = v414 + 12 * v411;
        *(_DWORD *)(v425 + 8) = *((_DWORD *)v416 + 2);
        *(_QWORD *)v425 = v424;
      }
      ++v411;
LABEL_809:
      if (++v410 == v409)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_829;
      }
    }
    v418 = *(_DWORD *)v416;
    v419 = *((_DWORD *)v416 + 1);
    v420 = *((_DWORD *)v416 + 2);
    while (1)
    {
      v421 = *((_DWORD *)v417 + 7);
      if (v418 == v421)
      {
        v422 = *((_DWORD *)v417 + 8);
        if (v419 == v422)
        {
          v423 = *((_DWORD *)v417 + 9);
          if (v420 < v423)
            goto LABEL_813;
          if (v423 >= v420)
            goto LABEL_809;
        }
        else
        {
          if (v419 < v422)
            goto LABEL_813;
          if (v422 >= v419)
            goto LABEL_809;
        }
      }
      else
      {
        if (v418 < v421)
          goto LABEL_813;
        if (v421 >= v418)
          goto LABEL_809;
      }
      ++v417;
LABEL_813:
      v417 = (uint64_t *)*v417;
      if (!v417)
        goto LABEL_825;
    }
  }
  v411 = 0;
LABEL_829:
  *v408 = v411;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v21 = v3[397];
  if (v21 >> 30)
    v426 = 1;
  else
    v426 = (_DWORD)v21 == v5;
  if (v426)
    goto LABEL_46;
LABEL_833:
  v427 = *(_QWORD *)(v1[2] + 8);
  v428 = v21 & 0xFFFFFFFFCFFFFFFFLL;
  v429 = *(_QWORD *)(*(_QWORD *)(v427 + 8) + 2448);
  v430 = (unsigned int *)(v429 + 520 * (v21 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v431 = *v430;
  if ((_DWORD)v431)
  {
    v432 = 0;
    v433 = 0;
    v434 = **(_QWORD **)(v427 + 16);
    v435 = v429 + 520 * v428;
    v436 = v435 + 364;
    v437 = v435 + 340;
    while (1)
    {
      v438 = (uint64_t *)(v436 + 12 * v432);
      v439 = *(uint64_t **)(v434 + 2512);
      if (v439)
        break;
LABEL_852:
      *(_WORD *)(v437 + 2 * v433) = *(_WORD *)(v437 + 2 * v432);
      if (v432 != v433)
      {
        v446 = *v438;
        v447 = v436 + 12 * v433;
        *(_DWORD *)(v447 + 8) = *((_DWORD *)v438 + 2);
        *(_QWORD *)v447 = v446;
      }
      ++v433;
LABEL_836:
      if (++v432 == v431)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_856;
      }
    }
    v440 = *(_DWORD *)v438;
    v441 = *((_DWORD *)v438 + 1);
    v442 = *((_DWORD *)v438 + 2);
    while (1)
    {
      v443 = *((_DWORD *)v439 + 7);
      if (v440 == v443)
      {
        v444 = *((_DWORD *)v439 + 8);
        if (v441 == v444)
        {
          v445 = *((_DWORD *)v439 + 9);
          if (v442 < v445)
            goto LABEL_840;
          if (v445 >= v442)
            goto LABEL_836;
        }
        else
        {
          if (v441 < v444)
            goto LABEL_840;
          if (v444 >= v441)
            goto LABEL_836;
        }
      }
      else
      {
        if (v440 < v443)
          goto LABEL_840;
        if (v443 >= v440)
          goto LABEL_836;
      }
      ++v439;
LABEL_840:
      v439 = (uint64_t *)*v439;
      if (!v439)
        goto LABEL_852;
    }
  }
  v433 = 0;
LABEL_856:
  *v430 = v433;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v23 = v3[398];
  if (v23 >> 30)
    v448 = 1;
  else
    v448 = (_DWORD)v23 == v5;
  if (v448)
    goto LABEL_51;
LABEL_860:
  v449 = *(_QWORD *)(v1[2] + 8);
  v450 = v23 & 0xFFFFFFFFCFFFFFFFLL;
  v451 = *(_QWORD *)(*(_QWORD *)(v449 + 8) + 2448);
  v452 = (unsigned int *)(v451 + 520 * (v23 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v453 = *v452;
  if ((_DWORD)v453)
  {
    v454 = 0;
    v455 = 0;
    v456 = **(_QWORD **)(v449 + 16);
    v457 = v451 + 520 * v450;
    v458 = v457 + 364;
    v459 = v457 + 340;
    while (1)
    {
      v460 = (uint64_t *)(v458 + 12 * v454);
      v461 = *(uint64_t **)(v456 + 2512);
      if (v461)
        break;
LABEL_879:
      *(_WORD *)(v459 + 2 * v455) = *(_WORD *)(v459 + 2 * v454);
      if (v454 != v455)
      {
        v468 = *v460;
        v469 = v458 + 12 * v455;
        *(_DWORD *)(v469 + 8) = *((_DWORD *)v460 + 2);
        *(_QWORD *)v469 = v468;
      }
      ++v455;
LABEL_863:
      if (++v454 == v453)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_883;
      }
    }
    v462 = *(_DWORD *)v460;
    v463 = *((_DWORD *)v460 + 1);
    v464 = *((_DWORD *)v460 + 2);
    while (1)
    {
      v465 = *((_DWORD *)v461 + 7);
      if (v462 == v465)
      {
        v466 = *((_DWORD *)v461 + 8);
        if (v463 == v466)
        {
          v467 = *((_DWORD *)v461 + 9);
          if (v464 < v467)
            goto LABEL_867;
          if (v467 >= v464)
            goto LABEL_863;
        }
        else
        {
          if (v463 < v466)
            goto LABEL_867;
          if (v466 >= v463)
            goto LABEL_863;
        }
      }
      else
      {
        if (v462 < v465)
          goto LABEL_867;
        if (v465 >= v462)
          goto LABEL_863;
      }
      ++v461;
LABEL_867:
      v461 = (uint64_t *)*v461;
      if (!v461)
        goto LABEL_879;
    }
  }
  v455 = 0;
LABEL_883:
  *v452 = v455;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v25 = v3[399];
  if (v25 >> 30)
    v470 = 1;
  else
    v470 = (_DWORD)v25 == v5;
  if (v470)
    goto LABEL_56;
LABEL_887:
  v471 = *(_QWORD *)(v1[2] + 8);
  v472 = v25 & 0xFFFFFFFFCFFFFFFFLL;
  v473 = *(_QWORD *)(*(_QWORD *)(v471 + 8) + 2448);
  v474 = (unsigned int *)(v473 + 520 * (v25 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v475 = *v474;
  if ((_DWORD)v475)
  {
    v476 = 0;
    v477 = 0;
    v478 = **(_QWORD **)(v471 + 16);
    v479 = v473 + 520 * v472;
    v480 = v479 + 364;
    v481 = v479 + 340;
    while (1)
    {
      v482 = (uint64_t *)(v480 + 12 * v476);
      v483 = *(uint64_t **)(v478 + 2512);
      if (v483)
        break;
LABEL_906:
      *(_WORD *)(v481 + 2 * v477) = *(_WORD *)(v481 + 2 * v476);
      if (v476 != v477)
      {
        v490 = *v482;
        v491 = v480 + 12 * v477;
        *(_DWORD *)(v491 + 8) = *((_DWORD *)v482 + 2);
        *(_QWORD *)v491 = v490;
      }
      ++v477;
LABEL_890:
      if (++v476 == v475)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_910;
      }
    }
    v484 = *(_DWORD *)v482;
    v485 = *((_DWORD *)v482 + 1);
    v486 = *((_DWORD *)v482 + 2);
    while (1)
    {
      v487 = *((_DWORD *)v483 + 7);
      if (v484 == v487)
      {
        v488 = *((_DWORD *)v483 + 8);
        if (v485 == v488)
        {
          v489 = *((_DWORD *)v483 + 9);
          if (v486 < v489)
            goto LABEL_894;
          if (v489 >= v486)
            goto LABEL_890;
        }
        else
        {
          if (v485 < v488)
            goto LABEL_894;
          if (v488 >= v485)
            goto LABEL_890;
        }
      }
      else
      {
        if (v484 < v487)
          goto LABEL_894;
        if (v487 >= v484)
          goto LABEL_890;
      }
      ++v483;
LABEL_894:
      v483 = (uint64_t *)*v483;
      if (!v483)
        goto LABEL_906;
    }
  }
  v477 = 0;
LABEL_910:
  *v474 = v477;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v27 = v3[400];
  if (v27 >> 30)
    v492 = 1;
  else
    v492 = (_DWORD)v27 == v5;
  if (v492)
    goto LABEL_61;
LABEL_914:
  v493 = *(_QWORD *)(v1[2] + 8);
  v494 = v27 & 0xFFFFFFFFCFFFFFFFLL;
  v495 = *(_QWORD *)(*(_QWORD *)(v493 + 8) + 2448);
  v496 = (unsigned int *)(v495 + 520 * (v27 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v497 = *v496;
  if ((_DWORD)v497)
  {
    v498 = 0;
    v499 = 0;
    v500 = **(_QWORD **)(v493 + 16);
    v501 = v495 + 520 * v494;
    v502 = v501 + 364;
    v503 = v501 + 340;
    while (1)
    {
      v504 = (uint64_t *)(v502 + 12 * v498);
      v505 = *(uint64_t **)(v500 + 2512);
      if (v505)
        break;
LABEL_933:
      *(_WORD *)(v503 + 2 * v499) = *(_WORD *)(v503 + 2 * v498);
      if (v498 != v499)
      {
        v512 = *v504;
        v513 = v502 + 12 * v499;
        *(_DWORD *)(v513 + 8) = *((_DWORD *)v504 + 2);
        *(_QWORD *)v513 = v512;
      }
      ++v499;
LABEL_917:
      if (++v498 == v497)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_937;
      }
    }
    v506 = *(_DWORD *)v504;
    v507 = *((_DWORD *)v504 + 1);
    v508 = *((_DWORD *)v504 + 2);
    while (1)
    {
      v509 = *((_DWORD *)v505 + 7);
      if (v506 == v509)
      {
        v510 = *((_DWORD *)v505 + 8);
        if (v507 == v510)
        {
          v511 = *((_DWORD *)v505 + 9);
          if (v508 < v511)
            goto LABEL_921;
          if (v511 >= v508)
            goto LABEL_917;
        }
        else
        {
          if (v507 < v510)
            goto LABEL_921;
          if (v510 >= v507)
            goto LABEL_917;
        }
      }
      else
      {
        if (v506 < v509)
          goto LABEL_921;
        if (v509 >= v506)
          goto LABEL_917;
      }
      ++v505;
LABEL_921:
      v505 = (uint64_t *)*v505;
      if (!v505)
        goto LABEL_933;
    }
  }
  v499 = 0;
LABEL_937:
  *v496 = v499;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v29 = v3[401];
  if (v29 >> 30)
    v514 = 1;
  else
    v514 = (_DWORD)v29 == v5;
  if (v514)
    goto LABEL_66;
LABEL_941:
  v515 = *(_QWORD *)(v1[2] + 8);
  v516 = v29 & 0xFFFFFFFFCFFFFFFFLL;
  v517 = *(_QWORD *)(*(_QWORD *)(v515 + 8) + 2448);
  v518 = (unsigned int *)(v517 + 520 * (v29 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v519 = *v518;
  if ((_DWORD)v519)
  {
    v520 = 0;
    v521 = 0;
    v522 = **(_QWORD **)(v515 + 16);
    v523 = v517 + 520 * v516;
    v524 = v523 + 364;
    v525 = v523 + 340;
    while (1)
    {
      v526 = (uint64_t *)(v524 + 12 * v520);
      v527 = *(uint64_t **)(v522 + 2512);
      if (v527)
        break;
LABEL_960:
      *(_WORD *)(v525 + 2 * v521) = *(_WORD *)(v525 + 2 * v520);
      if (v520 != v521)
      {
        v534 = *v526;
        v535 = v524 + 12 * v521;
        *(_DWORD *)(v535 + 8) = *((_DWORD *)v526 + 2);
        *(_QWORD *)v535 = v534;
      }
      ++v521;
LABEL_944:
      if (++v520 == v519)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_964;
      }
    }
    v528 = *(_DWORD *)v526;
    v529 = *((_DWORD *)v526 + 1);
    v530 = *((_DWORD *)v526 + 2);
    while (1)
    {
      v531 = *((_DWORD *)v527 + 7);
      if (v528 == v531)
      {
        v532 = *((_DWORD *)v527 + 8);
        if (v529 == v532)
        {
          v533 = *((_DWORD *)v527 + 9);
          if (v530 < v533)
            goto LABEL_948;
          if (v533 >= v530)
            goto LABEL_944;
        }
        else
        {
          if (v529 < v532)
            goto LABEL_948;
          if (v532 >= v529)
            goto LABEL_944;
        }
      }
      else
      {
        if (v528 < v531)
          goto LABEL_948;
        if (v531 >= v528)
          goto LABEL_944;
      }
      ++v527;
LABEL_948:
      v527 = (uint64_t *)*v527;
      if (!v527)
        goto LABEL_960;
    }
  }
  v521 = 0;
LABEL_964:
  *v518 = v521;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v31 = v3[402];
  if (v31 >> 30)
    v536 = 1;
  else
    v536 = (_DWORD)v31 == v5;
  if (v536)
    goto LABEL_71;
LABEL_968:
  v537 = *(_QWORD *)(v1[2] + 8);
  v538 = v31 & 0xFFFFFFFFCFFFFFFFLL;
  v539 = *(_QWORD *)(*(_QWORD *)(v537 + 8) + 2448);
  v540 = (unsigned int *)(v539 + 520 * (v31 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v541 = *v540;
  if ((_DWORD)v541)
  {
    v542 = 0;
    v543 = 0;
    v544 = **(_QWORD **)(v537 + 16);
    v545 = v539 + 520 * v538;
    v546 = v545 + 364;
    v547 = v545 + 340;
    while (1)
    {
      v548 = (uint64_t *)(v546 + 12 * v542);
      v549 = *(uint64_t **)(v544 + 2512);
      if (v549)
        break;
LABEL_987:
      *(_WORD *)(v547 + 2 * v543) = *(_WORD *)(v547 + 2 * v542);
      if (v542 != v543)
      {
        v556 = *v548;
        v557 = v546 + 12 * v543;
        *(_DWORD *)(v557 + 8) = *((_DWORD *)v548 + 2);
        *(_QWORD *)v557 = v556;
      }
      ++v543;
LABEL_971:
      if (++v542 == v541)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_991;
      }
    }
    v550 = *(_DWORD *)v548;
    v551 = *((_DWORD *)v548 + 1);
    v552 = *((_DWORD *)v548 + 2);
    while (1)
    {
      v553 = *((_DWORD *)v549 + 7);
      if (v550 == v553)
      {
        v554 = *((_DWORD *)v549 + 8);
        if (v551 == v554)
        {
          v555 = *((_DWORD *)v549 + 9);
          if (v552 < v555)
            goto LABEL_975;
          if (v555 >= v552)
            goto LABEL_971;
        }
        else
        {
          if (v551 < v554)
            goto LABEL_975;
          if (v554 >= v551)
            goto LABEL_971;
        }
      }
      else
      {
        if (v550 < v553)
          goto LABEL_975;
        if (v553 >= v550)
          goto LABEL_971;
      }
      ++v549;
LABEL_975:
      v549 = (uint64_t *)*v549;
      if (!v549)
        goto LABEL_987;
    }
  }
  v543 = 0;
LABEL_991:
  *v540 = v543;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v33 = v3[403];
  if (v33 >> 30)
    v558 = 1;
  else
    v558 = (_DWORD)v33 == v5;
  if (v558)
    goto LABEL_76;
LABEL_995:
  v559 = *(_QWORD *)(v1[2] + 8);
  v560 = v33 & 0xFFFFFFFFCFFFFFFFLL;
  v561 = *(_QWORD *)(*(_QWORD *)(v559 + 8) + 2448);
  v562 = (unsigned int *)(v561 + 520 * (v33 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v563 = *v562;
  if ((_DWORD)v563)
  {
    v564 = 0;
    v565 = 0;
    v566 = **(_QWORD **)(v559 + 16);
    v567 = v561 + 520 * v560;
    v568 = v567 + 364;
    v569 = v567 + 340;
    while (1)
    {
      v570 = (uint64_t *)(v568 + 12 * v564);
      v571 = *(uint64_t **)(v566 + 2512);
      if (v571)
        break;
LABEL_1014:
      *(_WORD *)(v569 + 2 * v565) = *(_WORD *)(v569 + 2 * v564);
      if (v564 != v565)
      {
        v578 = *v570;
        v579 = v568 + 12 * v565;
        *(_DWORD *)(v579 + 8) = *((_DWORD *)v570 + 2);
        *(_QWORD *)v579 = v578;
      }
      ++v565;
LABEL_998:
      if (++v564 == v563)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1018;
      }
    }
    v572 = *(_DWORD *)v570;
    v573 = *((_DWORD *)v570 + 1);
    v574 = *((_DWORD *)v570 + 2);
    while (1)
    {
      v575 = *((_DWORD *)v571 + 7);
      if (v572 == v575)
      {
        v576 = *((_DWORD *)v571 + 8);
        if (v573 == v576)
        {
          v577 = *((_DWORD *)v571 + 9);
          if (v574 < v577)
            goto LABEL_1002;
          if (v577 >= v574)
            goto LABEL_998;
        }
        else
        {
          if (v573 < v576)
            goto LABEL_1002;
          if (v576 >= v573)
            goto LABEL_998;
        }
      }
      else
      {
        if (v572 < v575)
          goto LABEL_1002;
        if (v575 >= v572)
          goto LABEL_998;
      }
      ++v571;
LABEL_1002:
      v571 = (uint64_t *)*v571;
      if (!v571)
        goto LABEL_1014;
    }
  }
  v565 = 0;
LABEL_1018:
  *v562 = v565;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v35 = v3[404];
  if (v35 >> 30)
    v580 = 1;
  else
    v580 = (_DWORD)v35 == v5;
  if (v580)
    goto LABEL_81;
LABEL_1022:
  v581 = *(_QWORD *)(v1[2] + 8);
  v582 = v35 & 0xFFFFFFFFCFFFFFFFLL;
  v583 = *(_QWORD *)(*(_QWORD *)(v581 + 8) + 2448);
  v584 = (unsigned int *)(v583 + 520 * (v35 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v585 = *v584;
  if ((_DWORD)v585)
  {
    v586 = 0;
    v587 = 0;
    v588 = **(_QWORD **)(v581 + 16);
    v589 = v583 + 520 * v582;
    v590 = v589 + 364;
    v591 = v589 + 340;
    while (1)
    {
      v592 = (uint64_t *)(v590 + 12 * v586);
      v593 = *(uint64_t **)(v588 + 2512);
      if (v593)
        break;
LABEL_1041:
      *(_WORD *)(v591 + 2 * v587) = *(_WORD *)(v591 + 2 * v586);
      if (v586 != v587)
      {
        v600 = *v592;
        v601 = v590 + 12 * v587;
        *(_DWORD *)(v601 + 8) = *((_DWORD *)v592 + 2);
        *(_QWORD *)v601 = v600;
      }
      ++v587;
LABEL_1025:
      if (++v586 == v585)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1045;
      }
    }
    v594 = *(_DWORD *)v592;
    v595 = *((_DWORD *)v592 + 1);
    v596 = *((_DWORD *)v592 + 2);
    while (1)
    {
      v597 = *((_DWORD *)v593 + 7);
      if (v594 == v597)
      {
        v598 = *((_DWORD *)v593 + 8);
        if (v595 == v598)
        {
          v599 = *((_DWORD *)v593 + 9);
          if (v596 < v599)
            goto LABEL_1029;
          if (v599 >= v596)
            goto LABEL_1025;
        }
        else
        {
          if (v595 < v598)
            goto LABEL_1029;
          if (v598 >= v595)
            goto LABEL_1025;
        }
      }
      else
      {
        if (v594 < v597)
          goto LABEL_1029;
        if (v597 >= v594)
          goto LABEL_1025;
      }
      ++v593;
LABEL_1029:
      v593 = (uint64_t *)*v593;
      if (!v593)
        goto LABEL_1041;
    }
  }
  v587 = 0;
LABEL_1045:
  *v584 = v587;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v37 = v3[405];
  if (v37 >> 30)
    v602 = 1;
  else
    v602 = (_DWORD)v37 == v5;
  if (v602)
    goto LABEL_86;
LABEL_1049:
  v603 = *(_QWORD *)(v1[2] + 8);
  v604 = v37 & 0xFFFFFFFFCFFFFFFFLL;
  v605 = *(_QWORD *)(*(_QWORD *)(v603 + 8) + 2448);
  v606 = (unsigned int *)(v605 + 520 * (v37 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v607 = *v606;
  if ((_DWORD)v607)
  {
    v608 = 0;
    v609 = 0;
    v610 = **(_QWORD **)(v603 + 16);
    v611 = v605 + 520 * v604;
    v612 = v611 + 364;
    v613 = v611 + 340;
    while (1)
    {
      v614 = (uint64_t *)(v612 + 12 * v608);
      v615 = *(uint64_t **)(v610 + 2512);
      if (v615)
        break;
LABEL_1068:
      *(_WORD *)(v613 + 2 * v609) = *(_WORD *)(v613 + 2 * v608);
      if (v608 != v609)
      {
        v622 = *v614;
        v623 = v612 + 12 * v609;
        *(_DWORD *)(v623 + 8) = *((_DWORD *)v614 + 2);
        *(_QWORD *)v623 = v622;
      }
      ++v609;
LABEL_1052:
      if (++v608 == v607)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1072;
      }
    }
    v616 = *(_DWORD *)v614;
    v617 = *((_DWORD *)v614 + 1);
    v618 = *((_DWORD *)v614 + 2);
    while (1)
    {
      v619 = *((_DWORD *)v615 + 7);
      if (v616 == v619)
      {
        v620 = *((_DWORD *)v615 + 8);
        if (v617 == v620)
        {
          v621 = *((_DWORD *)v615 + 9);
          if (v618 < v621)
            goto LABEL_1056;
          if (v621 >= v618)
            goto LABEL_1052;
        }
        else
        {
          if (v617 < v620)
            goto LABEL_1056;
          if (v620 >= v617)
            goto LABEL_1052;
        }
      }
      else
      {
        if (v616 < v619)
          goto LABEL_1056;
        if (v619 >= v616)
          goto LABEL_1052;
      }
      ++v615;
LABEL_1056:
      v615 = (uint64_t *)*v615;
      if (!v615)
        goto LABEL_1068;
    }
  }
  v609 = 0;
LABEL_1072:
  *v606 = v609;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v39 = v3[406];
  if (v39 >> 30)
    v624 = 1;
  else
    v624 = (_DWORD)v39 == v5;
  if (v624)
    goto LABEL_91;
LABEL_1076:
  v625 = *(_QWORD *)(v1[2] + 8);
  v626 = v39 & 0xFFFFFFFFCFFFFFFFLL;
  v627 = *(_QWORD *)(*(_QWORD *)(v625 + 8) + 2448);
  v628 = (unsigned int *)(v627 + 520 * (v39 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v629 = *v628;
  if ((_DWORD)v629)
  {
    v630 = 0;
    v631 = 0;
    v632 = **(_QWORD **)(v625 + 16);
    v633 = v627 + 520 * v626;
    v634 = v633 + 364;
    v635 = v633 + 340;
    while (1)
    {
      v636 = (uint64_t *)(v634 + 12 * v630);
      v637 = *(uint64_t **)(v632 + 2512);
      if (v637)
        break;
LABEL_1095:
      *(_WORD *)(v635 + 2 * v631) = *(_WORD *)(v635 + 2 * v630);
      if (v630 != v631)
      {
        v644 = *v636;
        v645 = v634 + 12 * v631;
        *(_DWORD *)(v645 + 8) = *((_DWORD *)v636 + 2);
        *(_QWORD *)v645 = v644;
      }
      ++v631;
LABEL_1079:
      if (++v630 == v629)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1099;
      }
    }
    v638 = *(_DWORD *)v636;
    v639 = *((_DWORD *)v636 + 1);
    v640 = *((_DWORD *)v636 + 2);
    while (1)
    {
      v641 = *((_DWORD *)v637 + 7);
      if (v638 == v641)
      {
        v642 = *((_DWORD *)v637 + 8);
        if (v639 == v642)
        {
          v643 = *((_DWORD *)v637 + 9);
          if (v640 < v643)
            goto LABEL_1083;
          if (v643 >= v640)
            goto LABEL_1079;
        }
        else
        {
          if (v639 < v642)
            goto LABEL_1083;
          if (v642 >= v639)
            goto LABEL_1079;
        }
      }
      else
      {
        if (v638 < v641)
          goto LABEL_1083;
        if (v641 >= v638)
          goto LABEL_1079;
      }
      ++v637;
LABEL_1083:
      v637 = (uint64_t *)*v637;
      if (!v637)
        goto LABEL_1095;
    }
  }
  v631 = 0;
LABEL_1099:
  *v628 = v631;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v41 = v3[407];
  if (v41 >> 30)
    v646 = 1;
  else
    v646 = (_DWORD)v41 == v5;
  if (v646)
    goto LABEL_96;
LABEL_1103:
  v647 = *(_QWORD *)(v1[2] + 8);
  v648 = v41 & 0xFFFFFFFFCFFFFFFFLL;
  v649 = *(_QWORD *)(*(_QWORD *)(v647 + 8) + 2448);
  v650 = (unsigned int *)(v649 + 520 * (v41 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v651 = *v650;
  if ((_DWORD)v651)
  {
    v652 = 0;
    v653 = 0;
    v654 = **(_QWORD **)(v647 + 16);
    v655 = v649 + 520 * v648;
    v656 = v655 + 364;
    v657 = v655 + 340;
    while (1)
    {
      v658 = (uint64_t *)(v656 + 12 * v652);
      v659 = *(uint64_t **)(v654 + 2512);
      if (v659)
        break;
LABEL_1122:
      *(_WORD *)(v657 + 2 * v653) = *(_WORD *)(v657 + 2 * v652);
      if (v652 != v653)
      {
        v666 = *v658;
        v667 = v656 + 12 * v653;
        *(_DWORD *)(v667 + 8) = *((_DWORD *)v658 + 2);
        *(_QWORD *)v667 = v666;
      }
      ++v653;
LABEL_1106:
      if (++v652 == v651)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1126;
      }
    }
    v660 = *(_DWORD *)v658;
    v661 = *((_DWORD *)v658 + 1);
    v662 = *((_DWORD *)v658 + 2);
    while (1)
    {
      v663 = *((_DWORD *)v659 + 7);
      if (v660 == v663)
      {
        v664 = *((_DWORD *)v659 + 8);
        if (v661 == v664)
        {
          v665 = *((_DWORD *)v659 + 9);
          if (v662 < v665)
            goto LABEL_1110;
          if (v665 >= v662)
            goto LABEL_1106;
        }
        else
        {
          if (v661 < v664)
            goto LABEL_1110;
          if (v664 >= v661)
            goto LABEL_1106;
        }
      }
      else
      {
        if (v660 < v663)
          goto LABEL_1110;
        if (v663 >= v660)
          goto LABEL_1106;
      }
      ++v659;
LABEL_1110:
      v659 = (uint64_t *)*v659;
      if (!v659)
        goto LABEL_1122;
    }
  }
  v653 = 0;
LABEL_1126:
  *v650 = v653;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v43 = v3[408];
  if (v43 >> 30)
    v668 = 1;
  else
    v668 = (_DWORD)v43 == v5;
  if (v668)
    goto LABEL_101;
LABEL_1130:
  v669 = *(_QWORD *)(v1[2] + 8);
  v670 = v43 & 0xFFFFFFFFCFFFFFFFLL;
  v671 = *(_QWORD *)(*(_QWORD *)(v669 + 8) + 2448);
  v672 = (unsigned int *)(v671 + 520 * (v43 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v673 = *v672;
  if ((_DWORD)v673)
  {
    v674 = 0;
    v675 = 0;
    v676 = **(_QWORD **)(v669 + 16);
    v677 = v671 + 520 * v670;
    v678 = v677 + 364;
    v679 = v677 + 340;
    while (1)
    {
      v680 = (uint64_t *)(v678 + 12 * v674);
      v681 = *(uint64_t **)(v676 + 2512);
      if (v681)
        break;
LABEL_1149:
      *(_WORD *)(v679 + 2 * v675) = *(_WORD *)(v679 + 2 * v674);
      if (v674 != v675)
      {
        v688 = *v680;
        v689 = v678 + 12 * v675;
        *(_DWORD *)(v689 + 8) = *((_DWORD *)v680 + 2);
        *(_QWORD *)v689 = v688;
      }
      ++v675;
LABEL_1133:
      if (++v674 == v673)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1153;
      }
    }
    v682 = *(_DWORD *)v680;
    v683 = *((_DWORD *)v680 + 1);
    v684 = *((_DWORD *)v680 + 2);
    while (1)
    {
      v685 = *((_DWORD *)v681 + 7);
      if (v682 == v685)
      {
        v686 = *((_DWORD *)v681 + 8);
        if (v683 == v686)
        {
          v687 = *((_DWORD *)v681 + 9);
          if (v684 < v687)
            goto LABEL_1137;
          if (v687 >= v684)
            goto LABEL_1133;
        }
        else
        {
          if (v683 < v686)
            goto LABEL_1137;
          if (v686 >= v683)
            goto LABEL_1133;
        }
      }
      else
      {
        if (v682 < v685)
          goto LABEL_1137;
        if (v685 >= v682)
          goto LABEL_1133;
      }
      ++v681;
LABEL_1137:
      v681 = (uint64_t *)*v681;
      if (!v681)
        goto LABEL_1149;
    }
  }
  v675 = 0;
LABEL_1153:
  *v672 = v675;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v45 = v3[409];
  if (v45 >> 30)
    v690 = 1;
  else
    v690 = (_DWORD)v45 == v5;
  if (v690)
    goto LABEL_106;
LABEL_1157:
  v691 = *(_QWORD *)(v1[2] + 8);
  v692 = v45 & 0xFFFFFFFFCFFFFFFFLL;
  v693 = *(_QWORD *)(*(_QWORD *)(v691 + 8) + 2448);
  v694 = (unsigned int *)(v693 + 520 * (v45 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v695 = *v694;
  if ((_DWORD)v695)
  {
    v696 = 0;
    v697 = 0;
    v698 = **(_QWORD **)(v691 + 16);
    v699 = v693 + 520 * v692;
    v700 = v699 + 364;
    v701 = v699 + 340;
    while (1)
    {
      v702 = (uint64_t *)(v700 + 12 * v696);
      v703 = *(uint64_t **)(v698 + 2512);
      if (v703)
        break;
LABEL_1176:
      *(_WORD *)(v701 + 2 * v697) = *(_WORD *)(v701 + 2 * v696);
      if (v696 != v697)
      {
        v710 = *v702;
        v711 = v700 + 12 * v697;
        *(_DWORD *)(v711 + 8) = *((_DWORD *)v702 + 2);
        *(_QWORD *)v711 = v710;
      }
      ++v697;
LABEL_1160:
      if (++v696 == v695)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1180;
      }
    }
    v704 = *(_DWORD *)v702;
    v705 = *((_DWORD *)v702 + 1);
    v706 = *((_DWORD *)v702 + 2);
    while (1)
    {
      v707 = *((_DWORD *)v703 + 7);
      if (v704 == v707)
      {
        v708 = *((_DWORD *)v703 + 8);
        if (v705 == v708)
        {
          v709 = *((_DWORD *)v703 + 9);
          if (v706 < v709)
            goto LABEL_1164;
          if (v709 >= v706)
            goto LABEL_1160;
        }
        else
        {
          if (v705 < v708)
            goto LABEL_1164;
          if (v708 >= v705)
            goto LABEL_1160;
        }
      }
      else
      {
        if (v704 < v707)
          goto LABEL_1164;
        if (v707 >= v704)
          goto LABEL_1160;
      }
      ++v703;
LABEL_1164:
      v703 = (uint64_t *)*v703;
      if (!v703)
        goto LABEL_1176;
    }
  }
  v697 = 0;
LABEL_1180:
  *v694 = v697;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v47 = v3[410];
  if (v47 >> 30)
    v712 = 1;
  else
    v712 = (_DWORD)v47 == v5;
  if (v712)
    goto LABEL_111;
LABEL_1184:
  v713 = *(_QWORD *)(v1[2] + 8);
  v714 = v47 & 0xFFFFFFFFCFFFFFFFLL;
  v715 = *(_QWORD *)(*(_QWORD *)(v713 + 8) + 2448);
  v716 = (unsigned int *)(v715 + 520 * (v47 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v717 = *v716;
  if ((_DWORD)v717)
  {
    v718 = 0;
    v719 = 0;
    v720 = **(_QWORD **)(v713 + 16);
    v721 = v715 + 520 * v714;
    v722 = v721 + 364;
    v723 = v721 + 340;
    while (1)
    {
      v724 = (uint64_t *)(v722 + 12 * v718);
      v725 = *(uint64_t **)(v720 + 2512);
      if (v725)
        break;
LABEL_1203:
      *(_WORD *)(v723 + 2 * v719) = *(_WORD *)(v723 + 2 * v718);
      if (v718 != v719)
      {
        v732 = *v724;
        v733 = v722 + 12 * v719;
        *(_DWORD *)(v733 + 8) = *((_DWORD *)v724 + 2);
        *(_QWORD *)v733 = v732;
      }
      ++v719;
LABEL_1187:
      if (++v718 == v717)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1207;
      }
    }
    v726 = *(_DWORD *)v724;
    v727 = *((_DWORD *)v724 + 1);
    v728 = *((_DWORD *)v724 + 2);
    while (1)
    {
      v729 = *((_DWORD *)v725 + 7);
      if (v726 == v729)
      {
        v730 = *((_DWORD *)v725 + 8);
        if (v727 == v730)
        {
          v731 = *((_DWORD *)v725 + 9);
          if (v728 < v731)
            goto LABEL_1191;
          if (v731 >= v728)
            goto LABEL_1187;
        }
        else
        {
          if (v727 < v730)
            goto LABEL_1191;
          if (v730 >= v727)
            goto LABEL_1187;
        }
      }
      else
      {
        if (v726 < v729)
          goto LABEL_1191;
        if (v729 >= v726)
          goto LABEL_1187;
      }
      ++v725;
LABEL_1191:
      v725 = (uint64_t *)*v725;
      if (!v725)
        goto LABEL_1203;
    }
  }
  v719 = 0;
LABEL_1207:
  *v716 = v719;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v49 = v3[411];
  if (v49 >> 30)
    v734 = 1;
  else
    v734 = (_DWORD)v49 == v5;
  if (v734)
    goto LABEL_116;
LABEL_1211:
  v735 = *(_QWORD *)(v1[2] + 8);
  v736 = v49 & 0xFFFFFFFFCFFFFFFFLL;
  v737 = *(_QWORD *)(*(_QWORD *)(v735 + 8) + 2448);
  v738 = (unsigned int *)(v737 + 520 * (v49 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v739 = *v738;
  if ((_DWORD)v739)
  {
    v740 = 0;
    v741 = 0;
    v742 = **(_QWORD **)(v735 + 16);
    v743 = v737 + 520 * v736;
    v744 = v743 + 364;
    v745 = v743 + 340;
    while (1)
    {
      v746 = (uint64_t *)(v744 + 12 * v740);
      v747 = *(uint64_t **)(v742 + 2512);
      if (v747)
        break;
LABEL_1230:
      *(_WORD *)(v745 + 2 * v741) = *(_WORD *)(v745 + 2 * v740);
      if (v740 != v741)
      {
        v754 = *v746;
        v755 = v744 + 12 * v741;
        *(_DWORD *)(v755 + 8) = *((_DWORD *)v746 + 2);
        *(_QWORD *)v755 = v754;
      }
      ++v741;
LABEL_1214:
      if (++v740 == v739)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1234;
      }
    }
    v748 = *(_DWORD *)v746;
    v749 = *((_DWORD *)v746 + 1);
    v750 = *((_DWORD *)v746 + 2);
    while (1)
    {
      v751 = *((_DWORD *)v747 + 7);
      if (v748 == v751)
      {
        v752 = *((_DWORD *)v747 + 8);
        if (v749 == v752)
        {
          v753 = *((_DWORD *)v747 + 9);
          if (v750 < v753)
            goto LABEL_1218;
          if (v753 >= v750)
            goto LABEL_1214;
        }
        else
        {
          if (v749 < v752)
            goto LABEL_1218;
          if (v752 >= v749)
            goto LABEL_1214;
        }
      }
      else
      {
        if (v748 < v751)
          goto LABEL_1218;
        if (v751 >= v748)
          goto LABEL_1214;
      }
      ++v747;
LABEL_1218:
      v747 = (uint64_t *)*v747;
      if (!v747)
        goto LABEL_1230;
    }
  }
  v741 = 0;
LABEL_1234:
  *v738 = v741;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v51 = v3[412];
  if (v51 >> 30)
    v756 = 1;
  else
    v756 = (_DWORD)v51 == v5;
  if (v756)
    goto LABEL_121;
LABEL_1238:
  v757 = *(_QWORD *)(v1[2] + 8);
  v758 = v51 & 0xFFFFFFFFCFFFFFFFLL;
  v759 = *(_QWORD *)(*(_QWORD *)(v757 + 8) + 2448);
  v760 = (unsigned int *)(v759 + 520 * (v51 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v761 = *v760;
  if ((_DWORD)v761)
  {
    v762 = 0;
    v763 = 0;
    v764 = **(_QWORD **)(v757 + 16);
    v765 = v759 + 520 * v758;
    v766 = v765 + 364;
    v767 = v765 + 340;
    while (1)
    {
      v768 = (uint64_t *)(v766 + 12 * v762);
      v769 = *(uint64_t **)(v764 + 2512);
      if (v769)
        break;
LABEL_1257:
      *(_WORD *)(v767 + 2 * v763) = *(_WORD *)(v767 + 2 * v762);
      if (v762 != v763)
      {
        v776 = *v768;
        v777 = v766 + 12 * v763;
        *(_DWORD *)(v777 + 8) = *((_DWORD *)v768 + 2);
        *(_QWORD *)v777 = v776;
      }
      ++v763;
LABEL_1241:
      if (++v762 == v761)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1261;
      }
    }
    v770 = *(_DWORD *)v768;
    v771 = *((_DWORD *)v768 + 1);
    v772 = *((_DWORD *)v768 + 2);
    while (1)
    {
      v773 = *((_DWORD *)v769 + 7);
      if (v770 == v773)
      {
        v774 = *((_DWORD *)v769 + 8);
        if (v771 == v774)
        {
          v775 = *((_DWORD *)v769 + 9);
          if (v772 < v775)
            goto LABEL_1245;
          if (v775 >= v772)
            goto LABEL_1241;
        }
        else
        {
          if (v771 < v774)
            goto LABEL_1245;
          if (v774 >= v771)
            goto LABEL_1241;
        }
      }
      else
      {
        if (v770 < v773)
          goto LABEL_1245;
        if (v773 >= v770)
          goto LABEL_1241;
      }
      ++v769;
LABEL_1245:
      v769 = (uint64_t *)*v769;
      if (!v769)
        goto LABEL_1257;
    }
  }
  v763 = 0;
LABEL_1261:
  *v760 = v763;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v53 = v3[413];
  if (v53 >> 30)
    v778 = 1;
  else
    v778 = (_DWORD)v53 == v5;
  if (v778)
    goto LABEL_126;
LABEL_1265:
  v779 = *(_QWORD *)(v1[2] + 8);
  v780 = v53 & 0xFFFFFFFFCFFFFFFFLL;
  v781 = *(_QWORD *)(*(_QWORD *)(v779 + 8) + 2448);
  v782 = (unsigned int *)(v781 + 520 * (v53 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v783 = *v782;
  if ((_DWORD)v783)
  {
    v784 = 0;
    v785 = 0;
    v786 = **(_QWORD **)(v779 + 16);
    v787 = v781 + 520 * v780;
    v788 = v787 + 364;
    v789 = v787 + 340;
    while (1)
    {
      v790 = (uint64_t *)(v788 + 12 * v784);
      v791 = *(uint64_t **)(v786 + 2512);
      if (v791)
        break;
LABEL_1284:
      *(_WORD *)(v789 + 2 * v785) = *(_WORD *)(v789 + 2 * v784);
      if (v784 != v785)
      {
        v798 = *v790;
        v799 = v788 + 12 * v785;
        *(_DWORD *)(v799 + 8) = *((_DWORD *)v790 + 2);
        *(_QWORD *)v799 = v798;
      }
      ++v785;
LABEL_1268:
      if (++v784 == v783)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1288;
      }
    }
    v792 = *(_DWORD *)v790;
    v793 = *((_DWORD *)v790 + 1);
    v794 = *((_DWORD *)v790 + 2);
    while (1)
    {
      v795 = *((_DWORD *)v791 + 7);
      if (v792 == v795)
      {
        v796 = *((_DWORD *)v791 + 8);
        if (v793 == v796)
        {
          v797 = *((_DWORD *)v791 + 9);
          if (v794 < v797)
            goto LABEL_1272;
          if (v797 >= v794)
            goto LABEL_1268;
        }
        else
        {
          if (v793 < v796)
            goto LABEL_1272;
          if (v796 >= v793)
            goto LABEL_1268;
        }
      }
      else
      {
        if (v792 < v795)
          goto LABEL_1272;
        if (v795 >= v792)
          goto LABEL_1268;
      }
      ++v791;
LABEL_1272:
      v791 = (uint64_t *)*v791;
      if (!v791)
        goto LABEL_1284;
    }
  }
  v785 = 0;
LABEL_1288:
  *v782 = v785;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v55 = v3[414];
  if (v55 >> 30)
    v800 = 1;
  else
    v800 = (_DWORD)v55 == v5;
  if (v800)
    goto LABEL_131;
LABEL_1292:
  v801 = *(_QWORD *)(v1[2] + 8);
  v802 = v55 & 0xFFFFFFFFCFFFFFFFLL;
  v803 = *(_QWORD *)(*(_QWORD *)(v801 + 8) + 2448);
  v804 = (unsigned int *)(v803 + 520 * (v55 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v805 = *v804;
  if ((_DWORD)v805)
  {
    v806 = 0;
    v807 = 0;
    v808 = **(_QWORD **)(v801 + 16);
    v809 = v803 + 520 * v802;
    v810 = v809 + 364;
    v811 = v809 + 340;
    while (1)
    {
      v812 = (uint64_t *)(v810 + 12 * v806);
      v813 = *(uint64_t **)(v808 + 2512);
      if (v813)
        break;
LABEL_1311:
      *(_WORD *)(v811 + 2 * v807) = *(_WORD *)(v811 + 2 * v806);
      if (v806 != v807)
      {
        v820 = *v812;
        v821 = v810 + 12 * v807;
        *(_DWORD *)(v821 + 8) = *((_DWORD *)v812 + 2);
        *(_QWORD *)v821 = v820;
      }
      ++v807;
LABEL_1295:
      if (++v806 == v805)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1315;
      }
    }
    v814 = *(_DWORD *)v812;
    v815 = *((_DWORD *)v812 + 1);
    v816 = *((_DWORD *)v812 + 2);
    while (1)
    {
      v817 = *((_DWORD *)v813 + 7);
      if (v814 == v817)
      {
        v818 = *((_DWORD *)v813 + 8);
        if (v815 == v818)
        {
          v819 = *((_DWORD *)v813 + 9);
          if (v816 < v819)
            goto LABEL_1299;
          if (v819 >= v816)
            goto LABEL_1295;
        }
        else
        {
          if (v815 < v818)
            goto LABEL_1299;
          if (v818 >= v815)
            goto LABEL_1295;
        }
      }
      else
      {
        if (v814 < v817)
          goto LABEL_1299;
        if (v817 >= v814)
          goto LABEL_1295;
      }
      ++v813;
LABEL_1299:
      v813 = (uint64_t *)*v813;
      if (!v813)
        goto LABEL_1311;
    }
  }
  v807 = 0;
LABEL_1315:
  *v804 = v807;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v57 = v3[415];
  if (v57 >> 30)
    v822 = 1;
  else
    v822 = (_DWORD)v57 == v5;
  if (v822)
    goto LABEL_136;
LABEL_1319:
  v823 = *(_QWORD *)(v1[2] + 8);
  v824 = v57 & 0xFFFFFFFFCFFFFFFFLL;
  v825 = *(_QWORD *)(*(_QWORD *)(v823 + 8) + 2448);
  v826 = (unsigned int *)(v825 + 520 * (v57 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v827 = *v826;
  if ((_DWORD)v827)
  {
    v828 = 0;
    v829 = 0;
    v830 = **(_QWORD **)(v823 + 16);
    v831 = v825 + 520 * v824;
    v832 = v831 + 364;
    v833 = v831 + 340;
    while (1)
    {
      v834 = (uint64_t *)(v832 + 12 * v828);
      v835 = *(uint64_t **)(v830 + 2512);
      if (v835)
        break;
LABEL_1338:
      *(_WORD *)(v833 + 2 * v829) = *(_WORD *)(v833 + 2 * v828);
      if (v828 != v829)
      {
        v842 = *v834;
        v843 = v832 + 12 * v829;
        *(_DWORD *)(v843 + 8) = *((_DWORD *)v834 + 2);
        *(_QWORD *)v843 = v842;
      }
      ++v829;
LABEL_1322:
      if (++v828 == v827)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1342;
      }
    }
    v836 = *(_DWORD *)v834;
    v837 = *((_DWORD *)v834 + 1);
    v838 = *((_DWORD *)v834 + 2);
    while (1)
    {
      v839 = *((_DWORD *)v835 + 7);
      if (v836 == v839)
      {
        v840 = *((_DWORD *)v835 + 8);
        if (v837 == v840)
        {
          v841 = *((_DWORD *)v835 + 9);
          if (v838 < v841)
            goto LABEL_1326;
          if (v841 >= v838)
            goto LABEL_1322;
        }
        else
        {
          if (v837 < v840)
            goto LABEL_1326;
          if (v840 >= v837)
            goto LABEL_1322;
        }
      }
      else
      {
        if (v836 < v839)
          goto LABEL_1326;
        if (v839 >= v836)
          goto LABEL_1322;
      }
      ++v835;
LABEL_1326:
      v835 = (uint64_t *)*v835;
      if (!v835)
        goto LABEL_1338;
    }
  }
  v829 = 0;
LABEL_1342:
  *v826 = v829;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v59 = v3[416];
  if (v59 >> 30)
    v844 = 1;
  else
    v844 = (_DWORD)v59 == v5;
  if (v844)
    goto LABEL_141;
LABEL_1346:
  v845 = *(_QWORD *)(v1[2] + 8);
  v846 = v59 & 0xFFFFFFFFCFFFFFFFLL;
  v847 = *(_QWORD *)(*(_QWORD *)(v845 + 8) + 2448);
  v848 = (unsigned int *)(v847 + 520 * (v59 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v849 = *v848;
  if ((_DWORD)v849)
  {
    v850 = 0;
    v851 = 0;
    v852 = **(_QWORD **)(v845 + 16);
    v853 = v847 + 520 * v846;
    v854 = v853 + 364;
    v855 = v853 + 340;
    while (1)
    {
      v856 = (uint64_t *)(v854 + 12 * v850);
      v857 = *(uint64_t **)(v852 + 2512);
      if (v857)
        break;
LABEL_1365:
      *(_WORD *)(v855 + 2 * v851) = *(_WORD *)(v855 + 2 * v850);
      if (v850 != v851)
      {
        v864 = *v856;
        v865 = v854 + 12 * v851;
        *(_DWORD *)(v865 + 8) = *((_DWORD *)v856 + 2);
        *(_QWORD *)v865 = v864;
      }
      ++v851;
LABEL_1349:
      if (++v850 == v849)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1369;
      }
    }
    v858 = *(_DWORD *)v856;
    v859 = *((_DWORD *)v856 + 1);
    v860 = *((_DWORD *)v856 + 2);
    while (1)
    {
      v861 = *((_DWORD *)v857 + 7);
      if (v858 == v861)
      {
        v862 = *((_DWORD *)v857 + 8);
        if (v859 == v862)
        {
          v863 = *((_DWORD *)v857 + 9);
          if (v860 < v863)
            goto LABEL_1353;
          if (v863 >= v860)
            goto LABEL_1349;
        }
        else
        {
          if (v859 < v862)
            goto LABEL_1353;
          if (v862 >= v859)
            goto LABEL_1349;
        }
      }
      else
      {
        if (v858 < v861)
          goto LABEL_1353;
        if (v861 >= v858)
          goto LABEL_1349;
      }
      ++v857;
LABEL_1353:
      v857 = (uint64_t *)*v857;
      if (!v857)
        goto LABEL_1365;
    }
  }
  v851 = 0;
LABEL_1369:
  *v848 = v851;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v61 = v3[417];
  if (v61 >> 30)
    v866 = 1;
  else
    v866 = (_DWORD)v61 == v5;
  if (v866)
    goto LABEL_146;
LABEL_1373:
  v867 = *(_QWORD *)(v1[2] + 8);
  v868 = v61 & 0xFFFFFFFFCFFFFFFFLL;
  v869 = *(_QWORD *)(*(_QWORD *)(v867 + 8) + 2448);
  v870 = (unsigned int *)(v869 + 520 * (v61 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v871 = *v870;
  if ((_DWORD)v871)
  {
    v872 = 0;
    v873 = 0;
    v874 = **(_QWORD **)(v867 + 16);
    v875 = v869 + 520 * v868;
    v876 = v875 + 364;
    v877 = v875 + 340;
    while (1)
    {
      v878 = (uint64_t *)(v876 + 12 * v872);
      v879 = *(uint64_t **)(v874 + 2512);
      if (v879)
        break;
LABEL_1392:
      *(_WORD *)(v877 + 2 * v873) = *(_WORD *)(v877 + 2 * v872);
      if (v872 != v873)
      {
        v886 = *v878;
        v887 = v876 + 12 * v873;
        *(_DWORD *)(v887 + 8) = *((_DWORD *)v878 + 2);
        *(_QWORD *)v887 = v886;
      }
      ++v873;
LABEL_1376:
      if (++v872 == v871)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1396;
      }
    }
    v880 = *(_DWORD *)v878;
    v881 = *((_DWORD *)v878 + 1);
    v882 = *((_DWORD *)v878 + 2);
    while (1)
    {
      v883 = *((_DWORD *)v879 + 7);
      if (v880 == v883)
      {
        v884 = *((_DWORD *)v879 + 8);
        if (v881 == v884)
        {
          v885 = *((_DWORD *)v879 + 9);
          if (v882 < v885)
            goto LABEL_1380;
          if (v885 >= v882)
            goto LABEL_1376;
        }
        else
        {
          if (v881 < v884)
            goto LABEL_1380;
          if (v884 >= v881)
            goto LABEL_1376;
        }
      }
      else
      {
        if (v880 < v883)
          goto LABEL_1380;
        if (v883 >= v880)
          goto LABEL_1376;
      }
      ++v879;
LABEL_1380:
      v879 = (uint64_t *)*v879;
      if (!v879)
        goto LABEL_1392;
    }
  }
  v873 = 0;
LABEL_1396:
  *v870 = v873;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v63 = v3[418];
  if (v63 >> 30)
    v888 = 1;
  else
    v888 = (_DWORD)v63 == v5;
  if (v888)
    goto LABEL_151;
LABEL_1400:
  v889 = *(_QWORD *)(v1[2] + 8);
  v890 = v63 & 0xFFFFFFFFCFFFFFFFLL;
  v891 = *(_QWORD *)(*(_QWORD *)(v889 + 8) + 2448);
  v892 = (unsigned int *)(v891 + 520 * (v63 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v893 = *v892;
  if ((_DWORD)v893)
  {
    v894 = 0;
    v895 = 0;
    v896 = **(_QWORD **)(v889 + 16);
    v897 = v891 + 520 * v890;
    v898 = v897 + 364;
    v899 = v897 + 340;
    while (1)
    {
      v900 = (uint64_t *)(v898 + 12 * v894);
      v901 = *(uint64_t **)(v896 + 2512);
      if (v901)
        break;
LABEL_1419:
      *(_WORD *)(v899 + 2 * v895) = *(_WORD *)(v899 + 2 * v894);
      if (v894 != v895)
      {
        v908 = *v900;
        v909 = v898 + 12 * v895;
        *(_DWORD *)(v909 + 8) = *((_DWORD *)v900 + 2);
        *(_QWORD *)v909 = v908;
      }
      ++v895;
LABEL_1403:
      if (++v894 == v893)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1423;
      }
    }
    v902 = *(_DWORD *)v900;
    v903 = *((_DWORD *)v900 + 1);
    v904 = *((_DWORD *)v900 + 2);
    while (1)
    {
      v905 = *((_DWORD *)v901 + 7);
      if (v902 == v905)
      {
        v906 = *((_DWORD *)v901 + 8);
        if (v903 == v906)
        {
          v907 = *((_DWORD *)v901 + 9);
          if (v904 < v907)
            goto LABEL_1407;
          if (v907 >= v904)
            goto LABEL_1403;
        }
        else
        {
          if (v903 < v906)
            goto LABEL_1407;
          if (v906 >= v903)
            goto LABEL_1403;
        }
      }
      else
      {
        if (v902 < v905)
          goto LABEL_1407;
        if (v905 >= v902)
          goto LABEL_1403;
      }
      ++v901;
LABEL_1407:
      v901 = (uint64_t *)*v901;
      if (!v901)
        goto LABEL_1419;
    }
  }
  v895 = 0;
LABEL_1423:
  *v892 = v895;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v65 = v3[419];
  if (v65 >> 30)
    v910 = 1;
  else
    v910 = (_DWORD)v65 == v5;
  if (v910)
    goto LABEL_156;
LABEL_1427:
  v911 = *(_QWORD *)(v1[2] + 8);
  v912 = v65 & 0xFFFFFFFFCFFFFFFFLL;
  v913 = *(_QWORD *)(*(_QWORD *)(v911 + 8) + 2448);
  v914 = (unsigned int *)(v913 + 520 * (v65 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v915 = *v914;
  if ((_DWORD)v915)
  {
    v916 = 0;
    v917 = 0;
    v918 = **(_QWORD **)(v911 + 16);
    v919 = v913 + 520 * v912;
    v920 = v919 + 364;
    v921 = v919 + 340;
    while (1)
    {
      v922 = (uint64_t *)(v920 + 12 * v916);
      v923 = *(uint64_t **)(v918 + 2512);
      if (v923)
        break;
LABEL_1446:
      *(_WORD *)(v921 + 2 * v917) = *(_WORD *)(v921 + 2 * v916);
      if (v916 != v917)
      {
        v930 = *v922;
        v931 = v920 + 12 * v917;
        *(_DWORD *)(v931 + 8) = *((_DWORD *)v922 + 2);
        *(_QWORD *)v931 = v930;
      }
      ++v917;
LABEL_1430:
      if (++v916 == v915)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1450;
      }
    }
    v924 = *(_DWORD *)v922;
    v925 = *((_DWORD *)v922 + 1);
    v926 = *((_DWORD *)v922 + 2);
    while (1)
    {
      v927 = *((_DWORD *)v923 + 7);
      if (v924 == v927)
      {
        v928 = *((_DWORD *)v923 + 8);
        if (v925 == v928)
        {
          v929 = *((_DWORD *)v923 + 9);
          if (v926 < v929)
            goto LABEL_1434;
          if (v929 >= v926)
            goto LABEL_1430;
        }
        else
        {
          if (v925 < v928)
            goto LABEL_1434;
          if (v928 >= v925)
            goto LABEL_1430;
        }
      }
      else
      {
        if (v924 < v927)
          goto LABEL_1434;
        if (v927 >= v924)
          goto LABEL_1430;
      }
      ++v923;
LABEL_1434:
      v923 = (uint64_t *)*v923;
      if (!v923)
        goto LABEL_1446;
    }
  }
  v917 = 0;
LABEL_1450:
  *v914 = v917;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v67 = v3[420];
  if (v67 >> 30)
    v932 = 1;
  else
    v932 = (_DWORD)v67 == v5;
  if (v932)
    goto LABEL_161;
LABEL_1454:
  v933 = *(_QWORD *)(v1[2] + 8);
  v934 = v67 & 0xFFFFFFFFCFFFFFFFLL;
  v935 = *(_QWORD *)(*(_QWORD *)(v933 + 8) + 2448);
  v936 = (unsigned int *)(v935 + 520 * (v67 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v937 = *v936;
  if ((_DWORD)v937)
  {
    v938 = 0;
    v939 = 0;
    v940 = **(_QWORD **)(v933 + 16);
    v941 = v935 + 520 * v934;
    v942 = v941 + 364;
    v943 = v941 + 340;
    while (1)
    {
      v944 = (uint64_t *)(v942 + 12 * v938);
      v945 = *(uint64_t **)(v940 + 2512);
      if (v945)
        break;
LABEL_1473:
      *(_WORD *)(v943 + 2 * v939) = *(_WORD *)(v943 + 2 * v938);
      if (v938 != v939)
      {
        v952 = *v944;
        v953 = v942 + 12 * v939;
        *(_DWORD *)(v953 + 8) = *((_DWORD *)v944 + 2);
        *(_QWORD *)v953 = v952;
      }
      ++v939;
LABEL_1457:
      if (++v938 == v937)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1477;
      }
    }
    v946 = *(_DWORD *)v944;
    v947 = *((_DWORD *)v944 + 1);
    v948 = *((_DWORD *)v944 + 2);
    while (1)
    {
      v949 = *((_DWORD *)v945 + 7);
      if (v946 == v949)
      {
        v950 = *((_DWORD *)v945 + 8);
        if (v947 == v950)
        {
          v951 = *((_DWORD *)v945 + 9);
          if (v948 < v951)
            goto LABEL_1461;
          if (v951 >= v948)
            goto LABEL_1457;
        }
        else
        {
          if (v947 < v950)
            goto LABEL_1461;
          if (v950 >= v947)
            goto LABEL_1457;
        }
      }
      else
      {
        if (v946 < v949)
          goto LABEL_1461;
        if (v949 >= v946)
          goto LABEL_1457;
      }
      ++v945;
LABEL_1461:
      v945 = (uint64_t *)*v945;
      if (!v945)
        goto LABEL_1473;
    }
  }
  v939 = 0;
LABEL_1477:
  *v936 = v939;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v69 = v3[421];
  if (v69 >> 30)
    v954 = 1;
  else
    v954 = (_DWORD)v69 == v5;
  if (v954)
    goto LABEL_166;
LABEL_1481:
  v955 = *(_QWORD *)(v1[2] + 8);
  v956 = v69 & 0xFFFFFFFFCFFFFFFFLL;
  v957 = *(_QWORD *)(*(_QWORD *)(v955 + 8) + 2448);
  v958 = (unsigned int *)(v957 + 520 * (v69 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v959 = *v958;
  if ((_DWORD)v959)
  {
    v960 = 0;
    v961 = 0;
    v962 = **(_QWORD **)(v955 + 16);
    v963 = v957 + 520 * v956;
    v964 = v963 + 364;
    v965 = v963 + 340;
    while (1)
    {
      v966 = (uint64_t *)(v964 + 12 * v960);
      v967 = *(uint64_t **)(v962 + 2512);
      if (v967)
        break;
LABEL_1500:
      *(_WORD *)(v965 + 2 * v961) = *(_WORD *)(v965 + 2 * v960);
      if (v960 != v961)
      {
        v974 = *v966;
        v975 = v964 + 12 * v961;
        *(_DWORD *)(v975 + 8) = *((_DWORD *)v966 + 2);
        *(_QWORD *)v975 = v974;
      }
      ++v961;
LABEL_1484:
      if (++v960 == v959)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1504;
      }
    }
    v968 = *(_DWORD *)v966;
    v969 = *((_DWORD *)v966 + 1);
    v970 = *((_DWORD *)v966 + 2);
    while (1)
    {
      v971 = *((_DWORD *)v967 + 7);
      if (v968 == v971)
      {
        v972 = *((_DWORD *)v967 + 8);
        if (v969 == v972)
        {
          v973 = *((_DWORD *)v967 + 9);
          if (v970 < v973)
            goto LABEL_1488;
          if (v973 >= v970)
            goto LABEL_1484;
        }
        else
        {
          if (v969 < v972)
            goto LABEL_1488;
          if (v972 >= v969)
            goto LABEL_1484;
        }
      }
      else
      {
        if (v968 < v971)
          goto LABEL_1488;
        if (v971 >= v968)
          goto LABEL_1484;
      }
      ++v967;
LABEL_1488:
      v967 = (uint64_t *)*v967;
      if (!v967)
        goto LABEL_1500;
    }
  }
  v961 = 0;
LABEL_1504:
  *v958 = v961;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v71 = v3[422];
  if (v71 >> 30)
    v976 = 1;
  else
    v976 = (_DWORD)v71 == v5;
  if (v976)
    goto LABEL_171;
LABEL_1508:
  v977 = *(_QWORD *)(v1[2] + 8);
  v978 = v71 & 0xFFFFFFFFCFFFFFFFLL;
  v979 = *(_QWORD *)(*(_QWORD *)(v977 + 8) + 2448);
  v980 = (unsigned int *)(v979 + 520 * (v71 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v981 = *v980;
  if ((_DWORD)v981)
  {
    v982 = 0;
    v983 = 0;
    v984 = **(_QWORD **)(v977 + 16);
    v985 = v979 + 520 * v978;
    v986 = v985 + 364;
    v987 = v985 + 340;
    while (1)
    {
      v988 = (uint64_t *)(v986 + 12 * v982);
      v989 = *(uint64_t **)(v984 + 2512);
      if (v989)
        break;
LABEL_1527:
      *(_WORD *)(v987 + 2 * v983) = *(_WORD *)(v987 + 2 * v982);
      if (v982 != v983)
      {
        v996 = *v988;
        v997 = v986 + 12 * v983;
        *(_DWORD *)(v997 + 8) = *((_DWORD *)v988 + 2);
        *(_QWORD *)v997 = v996;
      }
      ++v983;
LABEL_1511:
      if (++v982 == v981)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1531;
      }
    }
    v990 = *(_DWORD *)v988;
    v991 = *((_DWORD *)v988 + 1);
    v992 = *((_DWORD *)v988 + 2);
    while (1)
    {
      v993 = *((_DWORD *)v989 + 7);
      if (v990 == v993)
      {
        v994 = *((_DWORD *)v989 + 8);
        if (v991 == v994)
        {
          v995 = *((_DWORD *)v989 + 9);
          if (v992 < v995)
            goto LABEL_1515;
          if (v995 >= v992)
            goto LABEL_1511;
        }
        else
        {
          if (v991 < v994)
            goto LABEL_1515;
          if (v994 >= v991)
            goto LABEL_1511;
        }
      }
      else
      {
        if (v990 < v993)
          goto LABEL_1515;
        if (v993 >= v990)
          goto LABEL_1511;
      }
      ++v989;
LABEL_1515:
      v989 = (uint64_t *)*v989;
      if (!v989)
        goto LABEL_1527;
    }
  }
  v983 = 0;
LABEL_1531:
  *v980 = v983;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v73 = v3[423];
  if (v73 >> 30)
    v998 = 1;
  else
    v998 = (_DWORD)v73 == v5;
  if (v998)
    goto LABEL_176;
LABEL_1535:
  v999 = *(_QWORD *)(v1[2] + 8);
  v1000 = v73 & 0xFFFFFFFFCFFFFFFFLL;
  v1001 = *(_QWORD *)(*(_QWORD *)(v999 + 8) + 2448);
  v1002 = (unsigned int *)(v1001 + 520 * (v73 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1003 = *v1002;
  if ((_DWORD)v1003)
  {
    v1004 = 0;
    v1005 = 0;
    v1006 = **(_QWORD **)(v999 + 16);
    v1007 = v1001 + 520 * v1000;
    v1008 = v1007 + 364;
    v1009 = v1007 + 340;
    while (1)
    {
      v1010 = (uint64_t *)(v1008 + 12 * v1004);
      v1011 = *(uint64_t **)(v1006 + 2512);
      if (v1011)
        break;
LABEL_1554:
      *(_WORD *)(v1009 + 2 * v1005) = *(_WORD *)(v1009 + 2 * v1004);
      if (v1004 != v1005)
      {
        v1018 = *v1010;
        v1019 = v1008 + 12 * v1005;
        *(_DWORD *)(v1019 + 8) = *((_DWORD *)v1010 + 2);
        *(_QWORD *)v1019 = v1018;
      }
      ++v1005;
LABEL_1538:
      if (++v1004 == v1003)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1558;
      }
    }
    v1012 = *(_DWORD *)v1010;
    v1013 = *((_DWORD *)v1010 + 1);
    v1014 = *((_DWORD *)v1010 + 2);
    while (1)
    {
      v1015 = *((_DWORD *)v1011 + 7);
      if (v1012 == v1015)
      {
        v1016 = *((_DWORD *)v1011 + 8);
        if (v1013 == v1016)
        {
          v1017 = *((_DWORD *)v1011 + 9);
          if (v1014 < v1017)
            goto LABEL_1542;
          if (v1017 >= v1014)
            goto LABEL_1538;
        }
        else
        {
          if (v1013 < v1016)
            goto LABEL_1542;
          if (v1016 >= v1013)
            goto LABEL_1538;
        }
      }
      else
      {
        if (v1012 < v1015)
          goto LABEL_1542;
        if (v1015 >= v1012)
          goto LABEL_1538;
      }
      ++v1011;
LABEL_1542:
      v1011 = (uint64_t *)*v1011;
      if (!v1011)
        goto LABEL_1554;
    }
  }
  v1005 = 0;
LABEL_1558:
  *v1002 = v1005;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v75 = v3[424];
  if (v75 >> 30)
    v1020 = 1;
  else
    v1020 = (_DWORD)v75 == v5;
  if (v1020)
    goto LABEL_181;
LABEL_1562:
  v1021 = *(_QWORD *)(v1[2] + 8);
  v1022 = v75 & 0xFFFFFFFFCFFFFFFFLL;
  v1023 = *(_QWORD *)(*(_QWORD *)(v1021 + 8) + 2448);
  v1024 = (unsigned int *)(v1023 + 520 * (v75 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1025 = *v1024;
  if ((_DWORD)v1025)
  {
    v1026 = 0;
    v1027 = 0;
    v1028 = **(_QWORD **)(v1021 + 16);
    v1029 = v1023 + 520 * v1022;
    v1030 = v1029 + 364;
    v1031 = v1029 + 340;
    while (1)
    {
      v1032 = (uint64_t *)(v1030 + 12 * v1026);
      v1033 = *(uint64_t **)(v1028 + 2512);
      if (v1033)
        break;
LABEL_1581:
      *(_WORD *)(v1031 + 2 * v1027) = *(_WORD *)(v1031 + 2 * v1026);
      if (v1026 != v1027)
      {
        v1040 = *v1032;
        v1041 = v1030 + 12 * v1027;
        *(_DWORD *)(v1041 + 8) = *((_DWORD *)v1032 + 2);
        *(_QWORD *)v1041 = v1040;
      }
      ++v1027;
LABEL_1565:
      if (++v1026 == v1025)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1585;
      }
    }
    v1034 = *(_DWORD *)v1032;
    v1035 = *((_DWORD *)v1032 + 1);
    v1036 = *((_DWORD *)v1032 + 2);
    while (1)
    {
      v1037 = *((_DWORD *)v1033 + 7);
      if (v1034 == v1037)
      {
        v1038 = *((_DWORD *)v1033 + 8);
        if (v1035 == v1038)
        {
          v1039 = *((_DWORD *)v1033 + 9);
          if (v1036 < v1039)
            goto LABEL_1569;
          if (v1039 >= v1036)
            goto LABEL_1565;
        }
        else
        {
          if (v1035 < v1038)
            goto LABEL_1569;
          if (v1038 >= v1035)
            goto LABEL_1565;
        }
      }
      else
      {
        if (v1034 < v1037)
          goto LABEL_1569;
        if (v1037 >= v1034)
          goto LABEL_1565;
      }
      ++v1033;
LABEL_1569:
      v1033 = (uint64_t *)*v1033;
      if (!v1033)
        goto LABEL_1581;
    }
  }
  v1027 = 0;
LABEL_1585:
  *v1024 = v1027;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v77 = v3[425];
  if (v77 >> 30)
    v1042 = 1;
  else
    v1042 = (_DWORD)v77 == v5;
  if (v1042)
    goto LABEL_186;
LABEL_1589:
  v1043 = *(_QWORD *)(v1[2] + 8);
  v1044 = v77 & 0xFFFFFFFFCFFFFFFFLL;
  v1045 = *(_QWORD *)(*(_QWORD *)(v1043 + 8) + 2448);
  v1046 = (unsigned int *)(v1045 + 520 * (v77 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1047 = *v1046;
  if ((_DWORD)v1047)
  {
    v1048 = 0;
    v1049 = 0;
    v1050 = **(_QWORD **)(v1043 + 16);
    v1051 = v1045 + 520 * v1044;
    v1052 = v1051 + 364;
    v1053 = v1051 + 340;
    while (1)
    {
      v1054 = (uint64_t *)(v1052 + 12 * v1048);
      v1055 = *(uint64_t **)(v1050 + 2512);
      if (v1055)
        break;
LABEL_1608:
      *(_WORD *)(v1053 + 2 * v1049) = *(_WORD *)(v1053 + 2 * v1048);
      if (v1048 != v1049)
      {
        v1062 = *v1054;
        v1063 = v1052 + 12 * v1049;
        *(_DWORD *)(v1063 + 8) = *((_DWORD *)v1054 + 2);
        *(_QWORD *)v1063 = v1062;
      }
      ++v1049;
LABEL_1592:
      if (++v1048 == v1047)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1612;
      }
    }
    v1056 = *(_DWORD *)v1054;
    v1057 = *((_DWORD *)v1054 + 1);
    v1058 = *((_DWORD *)v1054 + 2);
    while (1)
    {
      v1059 = *((_DWORD *)v1055 + 7);
      if (v1056 == v1059)
      {
        v1060 = *((_DWORD *)v1055 + 8);
        if (v1057 == v1060)
        {
          v1061 = *((_DWORD *)v1055 + 9);
          if (v1058 < v1061)
            goto LABEL_1596;
          if (v1061 >= v1058)
            goto LABEL_1592;
        }
        else
        {
          if (v1057 < v1060)
            goto LABEL_1596;
          if (v1060 >= v1057)
            goto LABEL_1592;
        }
      }
      else
      {
        if (v1056 < v1059)
          goto LABEL_1596;
        if (v1059 >= v1056)
          goto LABEL_1592;
      }
      ++v1055;
LABEL_1596:
      v1055 = (uint64_t *)*v1055;
      if (!v1055)
        goto LABEL_1608;
    }
  }
  v1049 = 0;
LABEL_1612:
  *v1046 = v1049;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v79 = v3[426];
  if (v79 >> 30)
    v1064 = 1;
  else
    v1064 = (_DWORD)v79 == v5;
  if (v1064)
    goto LABEL_191;
LABEL_1616:
  v1065 = *(_QWORD *)(v1[2] + 8);
  v1066 = v79 & 0xFFFFFFFFCFFFFFFFLL;
  v1067 = *(_QWORD *)(*(_QWORD *)(v1065 + 8) + 2448);
  v1068 = (unsigned int *)(v1067 + 520 * (v79 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1069 = *v1068;
  if ((_DWORD)v1069)
  {
    v1070 = 0;
    v1071 = 0;
    v1072 = **(_QWORD **)(v1065 + 16);
    v1073 = v1067 + 520 * v1066;
    v1074 = v1073 + 364;
    v1075 = v1073 + 340;
    while (1)
    {
      v1076 = (uint64_t *)(v1074 + 12 * v1070);
      v1077 = *(uint64_t **)(v1072 + 2512);
      if (v1077)
        break;
LABEL_1635:
      *(_WORD *)(v1075 + 2 * v1071) = *(_WORD *)(v1075 + 2 * v1070);
      if (v1070 != v1071)
      {
        v1084 = *v1076;
        v1085 = v1074 + 12 * v1071;
        *(_DWORD *)(v1085 + 8) = *((_DWORD *)v1076 + 2);
        *(_QWORD *)v1085 = v1084;
      }
      ++v1071;
LABEL_1619:
      if (++v1070 == v1069)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1639;
      }
    }
    v1078 = *(_DWORD *)v1076;
    v1079 = *((_DWORD *)v1076 + 1);
    v1080 = *((_DWORD *)v1076 + 2);
    while (1)
    {
      v1081 = *((_DWORD *)v1077 + 7);
      if (v1078 == v1081)
      {
        v1082 = *((_DWORD *)v1077 + 8);
        if (v1079 == v1082)
        {
          v1083 = *((_DWORD *)v1077 + 9);
          if (v1080 < v1083)
            goto LABEL_1623;
          if (v1083 >= v1080)
            goto LABEL_1619;
        }
        else
        {
          if (v1079 < v1082)
            goto LABEL_1623;
          if (v1082 >= v1079)
            goto LABEL_1619;
        }
      }
      else
      {
        if (v1078 < v1081)
          goto LABEL_1623;
        if (v1081 >= v1078)
          goto LABEL_1619;
      }
      ++v1077;
LABEL_1623:
      v1077 = (uint64_t *)*v1077;
      if (!v1077)
        goto LABEL_1635;
    }
  }
  v1071 = 0;
LABEL_1639:
  *v1068 = v1071;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v81 = v3[427];
  if (v81 >> 30)
    v1086 = 1;
  else
    v1086 = (_DWORD)v81 == v5;
  if (v1086)
    goto LABEL_196;
LABEL_1643:
  v1087 = *(_QWORD *)(v1[2] + 8);
  v1088 = v81 & 0xFFFFFFFFCFFFFFFFLL;
  v1089 = *(_QWORD *)(*(_QWORD *)(v1087 + 8) + 2448);
  v1090 = (unsigned int *)(v1089 + 520 * (v81 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1091 = *v1090;
  if ((_DWORD)v1091)
  {
    v1092 = 0;
    v1093 = 0;
    v1094 = **(_QWORD **)(v1087 + 16);
    v1095 = v1089 + 520 * v1088;
    v1096 = v1095 + 364;
    v1097 = v1095 + 340;
    while (1)
    {
      v1098 = (uint64_t *)(v1096 + 12 * v1092);
      v1099 = *(uint64_t **)(v1094 + 2512);
      if (v1099)
        break;
LABEL_1662:
      *(_WORD *)(v1097 + 2 * v1093) = *(_WORD *)(v1097 + 2 * v1092);
      if (v1092 != v1093)
      {
        v1106 = *v1098;
        v1107 = v1096 + 12 * v1093;
        *(_DWORD *)(v1107 + 8) = *((_DWORD *)v1098 + 2);
        *(_QWORD *)v1107 = v1106;
      }
      ++v1093;
LABEL_1646:
      if (++v1092 == v1091)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1666;
      }
    }
    v1100 = *(_DWORD *)v1098;
    v1101 = *((_DWORD *)v1098 + 1);
    v1102 = *((_DWORD *)v1098 + 2);
    while (1)
    {
      v1103 = *((_DWORD *)v1099 + 7);
      if (v1100 == v1103)
      {
        v1104 = *((_DWORD *)v1099 + 8);
        if (v1101 == v1104)
        {
          v1105 = *((_DWORD *)v1099 + 9);
          if (v1102 < v1105)
            goto LABEL_1650;
          if (v1105 >= v1102)
            goto LABEL_1646;
        }
        else
        {
          if (v1101 < v1104)
            goto LABEL_1650;
          if (v1104 >= v1101)
            goto LABEL_1646;
        }
      }
      else
      {
        if (v1100 < v1103)
          goto LABEL_1650;
        if (v1103 >= v1100)
          goto LABEL_1646;
      }
      ++v1099;
LABEL_1650:
      v1099 = (uint64_t *)*v1099;
      if (!v1099)
        goto LABEL_1662;
    }
  }
  v1093 = 0;
LABEL_1666:
  *v1090 = v1093;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v83 = v3[428];
  if (v83 >> 30)
    v1108 = 1;
  else
    v1108 = (_DWORD)v83 == v5;
  if (v1108)
    goto LABEL_201;
LABEL_1670:
  v1109 = *(_QWORD *)(v1[2] + 8);
  v1110 = v83 & 0xFFFFFFFFCFFFFFFFLL;
  v1111 = *(_QWORD *)(*(_QWORD *)(v1109 + 8) + 2448);
  v1112 = (unsigned int *)(v1111 + 520 * (v83 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1113 = *v1112;
  if ((_DWORD)v1113)
  {
    v1114 = 0;
    v1115 = 0;
    v1116 = **(_QWORD **)(v1109 + 16);
    v1117 = v1111 + 520 * v1110;
    v1118 = v1117 + 364;
    v1119 = v1117 + 340;
    while (1)
    {
      v1120 = (uint64_t *)(v1118 + 12 * v1114);
      v1121 = *(uint64_t **)(v1116 + 2512);
      if (v1121)
        break;
LABEL_1689:
      *(_WORD *)(v1119 + 2 * v1115) = *(_WORD *)(v1119 + 2 * v1114);
      if (v1114 != v1115)
      {
        v1128 = *v1120;
        v1129 = v1118 + 12 * v1115;
        *(_DWORD *)(v1129 + 8) = *((_DWORD *)v1120 + 2);
        *(_QWORD *)v1129 = v1128;
      }
      ++v1115;
LABEL_1673:
      if (++v1114 == v1113)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1693;
      }
    }
    v1122 = *(_DWORD *)v1120;
    v1123 = *((_DWORD *)v1120 + 1);
    v1124 = *((_DWORD *)v1120 + 2);
    while (1)
    {
      v1125 = *((_DWORD *)v1121 + 7);
      if (v1122 == v1125)
      {
        v1126 = *((_DWORD *)v1121 + 8);
        if (v1123 == v1126)
        {
          v1127 = *((_DWORD *)v1121 + 9);
          if (v1124 < v1127)
            goto LABEL_1677;
          if (v1127 >= v1124)
            goto LABEL_1673;
        }
        else
        {
          if (v1123 < v1126)
            goto LABEL_1677;
          if (v1126 >= v1123)
            goto LABEL_1673;
        }
      }
      else
      {
        if (v1122 < v1125)
          goto LABEL_1677;
        if (v1125 >= v1122)
          goto LABEL_1673;
      }
      ++v1121;
LABEL_1677:
      v1121 = (uint64_t *)*v1121;
      if (!v1121)
        goto LABEL_1689;
    }
  }
  v1115 = 0;
LABEL_1693:
  *v1112 = v1115;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v85 = v3[429];
  if (v85 >> 30)
    v1130 = 1;
  else
    v1130 = (_DWORD)v85 == v5;
  if (v1130)
    goto LABEL_206;
LABEL_1697:
  v1131 = *(_QWORD *)(v1[2] + 8);
  v1132 = v85 & 0xFFFFFFFFCFFFFFFFLL;
  v1133 = *(_QWORD *)(*(_QWORD *)(v1131 + 8) + 2448);
  v1134 = (unsigned int *)(v1133 + 520 * (v85 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1135 = *v1134;
  if ((_DWORD)v1135)
  {
    v1136 = 0;
    v1137 = 0;
    v1138 = **(_QWORD **)(v1131 + 16);
    v1139 = v1133 + 520 * v1132;
    v1140 = v1139 + 364;
    v1141 = v1139 + 340;
    while (1)
    {
      v1142 = (uint64_t *)(v1140 + 12 * v1136);
      v1143 = *(uint64_t **)(v1138 + 2512);
      if (v1143)
        break;
LABEL_1716:
      *(_WORD *)(v1141 + 2 * v1137) = *(_WORD *)(v1141 + 2 * v1136);
      if (v1136 != v1137)
      {
        v1150 = *v1142;
        v1151 = v1140 + 12 * v1137;
        *(_DWORD *)(v1151 + 8) = *((_DWORD *)v1142 + 2);
        *(_QWORD *)v1151 = v1150;
      }
      ++v1137;
LABEL_1700:
      if (++v1136 == v1135)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1720;
      }
    }
    v1144 = *(_DWORD *)v1142;
    v1145 = *((_DWORD *)v1142 + 1);
    v1146 = *((_DWORD *)v1142 + 2);
    while (1)
    {
      v1147 = *((_DWORD *)v1143 + 7);
      if (v1144 == v1147)
      {
        v1148 = *((_DWORD *)v1143 + 8);
        if (v1145 == v1148)
        {
          v1149 = *((_DWORD *)v1143 + 9);
          if (v1146 < v1149)
            goto LABEL_1704;
          if (v1149 >= v1146)
            goto LABEL_1700;
        }
        else
        {
          if (v1145 < v1148)
            goto LABEL_1704;
          if (v1148 >= v1145)
            goto LABEL_1700;
        }
      }
      else
      {
        if (v1144 < v1147)
          goto LABEL_1704;
        if (v1147 >= v1144)
          goto LABEL_1700;
      }
      ++v1143;
LABEL_1704:
      v1143 = (uint64_t *)*v1143;
      if (!v1143)
        goto LABEL_1716;
    }
  }
  v1137 = 0;
LABEL_1720:
  *v1134 = v1137;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v87 = v3[430];
  if (v87 >> 30)
    v1152 = 1;
  else
    v1152 = (_DWORD)v87 == v5;
  if (v1152)
    goto LABEL_211;
LABEL_1724:
  v1153 = *(_QWORD *)(v1[2] + 8);
  v1154 = v87 & 0xFFFFFFFFCFFFFFFFLL;
  v1155 = *(_QWORD *)(*(_QWORD *)(v1153 + 8) + 2448);
  v1156 = (unsigned int *)(v1155 + 520 * (v87 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1157 = *v1156;
  if ((_DWORD)v1157)
  {
    v1158 = 0;
    v1159 = 0;
    v1160 = **(_QWORD **)(v1153 + 16);
    v1161 = v1155 + 520 * v1154;
    v1162 = v1161 + 364;
    v1163 = v1161 + 340;
    while (1)
    {
      v1164 = (uint64_t *)(v1162 + 12 * v1158);
      v1165 = *(uint64_t **)(v1160 + 2512);
      if (v1165)
        break;
LABEL_1743:
      *(_WORD *)(v1163 + 2 * v1159) = *(_WORD *)(v1163 + 2 * v1158);
      if (v1158 != v1159)
      {
        v1172 = *v1164;
        v1173 = v1162 + 12 * v1159;
        *(_DWORD *)(v1173 + 8) = *((_DWORD *)v1164 + 2);
        *(_QWORD *)v1173 = v1172;
      }
      ++v1159;
LABEL_1727:
      if (++v1158 == v1157)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1747;
      }
    }
    v1166 = *(_DWORD *)v1164;
    v1167 = *((_DWORD *)v1164 + 1);
    v1168 = *((_DWORD *)v1164 + 2);
    while (1)
    {
      v1169 = *((_DWORD *)v1165 + 7);
      if (v1166 == v1169)
      {
        v1170 = *((_DWORD *)v1165 + 8);
        if (v1167 == v1170)
        {
          v1171 = *((_DWORD *)v1165 + 9);
          if (v1168 < v1171)
            goto LABEL_1731;
          if (v1171 >= v1168)
            goto LABEL_1727;
        }
        else
        {
          if (v1167 < v1170)
            goto LABEL_1731;
          if (v1170 >= v1167)
            goto LABEL_1727;
        }
      }
      else
      {
        if (v1166 < v1169)
          goto LABEL_1731;
        if (v1169 >= v1166)
          goto LABEL_1727;
      }
      ++v1165;
LABEL_1731:
      v1165 = (uint64_t *)*v1165;
      if (!v1165)
        goto LABEL_1743;
    }
  }
  v1159 = 0;
LABEL_1747:
  *v1156 = v1159;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v89 = v3[431];
  if (v89 >> 30)
    v1174 = 1;
  else
    v1174 = (_DWORD)v89 == v5;
  if (v1174)
    goto LABEL_216;
LABEL_1751:
  v1175 = *(_QWORD *)(v1[2] + 8);
  v1176 = v89 & 0xFFFFFFFFCFFFFFFFLL;
  v1177 = *(_QWORD *)(*(_QWORD *)(v1175 + 8) + 2448);
  v1178 = (unsigned int *)(v1177 + 520 * (v89 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1179 = *v1178;
  if ((_DWORD)v1179)
  {
    v1180 = 0;
    v1181 = 0;
    v1182 = **(_QWORD **)(v1175 + 16);
    v1183 = v1177 + 520 * v1176;
    v1184 = v1183 + 364;
    v1185 = v1183 + 340;
    while (1)
    {
      v1186 = (uint64_t *)(v1184 + 12 * v1180);
      v1187 = *(uint64_t **)(v1182 + 2512);
      if (v1187)
        break;
LABEL_1770:
      *(_WORD *)(v1185 + 2 * v1181) = *(_WORD *)(v1185 + 2 * v1180);
      if (v1180 != v1181)
      {
        v1194 = *v1186;
        v1195 = v1184 + 12 * v1181;
        *(_DWORD *)(v1195 + 8) = *((_DWORD *)v1186 + 2);
        *(_QWORD *)v1195 = v1194;
      }
      ++v1181;
LABEL_1754:
      if (++v1180 == v1179)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1774;
      }
    }
    v1188 = *(_DWORD *)v1186;
    v1189 = *((_DWORD *)v1186 + 1);
    v1190 = *((_DWORD *)v1186 + 2);
    while (1)
    {
      v1191 = *((_DWORD *)v1187 + 7);
      if (v1188 == v1191)
      {
        v1192 = *((_DWORD *)v1187 + 8);
        if (v1189 == v1192)
        {
          v1193 = *((_DWORD *)v1187 + 9);
          if (v1190 < v1193)
            goto LABEL_1758;
          if (v1193 >= v1190)
            goto LABEL_1754;
        }
        else
        {
          if (v1189 < v1192)
            goto LABEL_1758;
          if (v1192 >= v1189)
            goto LABEL_1754;
        }
      }
      else
      {
        if (v1188 < v1191)
          goto LABEL_1758;
        if (v1191 >= v1188)
          goto LABEL_1754;
      }
      ++v1187;
LABEL_1758:
      v1187 = (uint64_t *)*v1187;
      if (!v1187)
        goto LABEL_1770;
    }
  }
  v1181 = 0;
LABEL_1774:
  *v1178 = v1181;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v91 = v3[432];
  if (v91 >> 30)
    v1196 = 1;
  else
    v1196 = (_DWORD)v91 == v5;
  if (v1196)
    goto LABEL_221;
LABEL_1778:
  v1197 = *(_QWORD *)(v1[2] + 8);
  v1198 = v91 & 0xFFFFFFFFCFFFFFFFLL;
  v1199 = *(_QWORD *)(*(_QWORD *)(v1197 + 8) + 2448);
  v1200 = (unsigned int *)(v1199 + 520 * (v91 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1201 = *v1200;
  if ((_DWORD)v1201)
  {
    v1202 = 0;
    v1203 = 0;
    v1204 = **(_QWORD **)(v1197 + 16);
    v1205 = v1199 + 520 * v1198;
    v1206 = v1205 + 364;
    v1207 = v1205 + 340;
    while (1)
    {
      v1208 = (uint64_t *)(v1206 + 12 * v1202);
      v1209 = *(uint64_t **)(v1204 + 2512);
      if (v1209)
        break;
LABEL_1797:
      *(_WORD *)(v1207 + 2 * v1203) = *(_WORD *)(v1207 + 2 * v1202);
      if (v1202 != v1203)
      {
        v1216 = *v1208;
        v1217 = v1206 + 12 * v1203;
        *(_DWORD *)(v1217 + 8) = *((_DWORD *)v1208 + 2);
        *(_QWORD *)v1217 = v1216;
      }
      ++v1203;
LABEL_1781:
      if (++v1202 == v1201)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1801;
      }
    }
    v1210 = *(_DWORD *)v1208;
    v1211 = *((_DWORD *)v1208 + 1);
    v1212 = *((_DWORD *)v1208 + 2);
    while (1)
    {
      v1213 = *((_DWORD *)v1209 + 7);
      if (v1210 == v1213)
      {
        v1214 = *((_DWORD *)v1209 + 8);
        if (v1211 == v1214)
        {
          v1215 = *((_DWORD *)v1209 + 9);
          if (v1212 < v1215)
            goto LABEL_1785;
          if (v1215 >= v1212)
            goto LABEL_1781;
        }
        else
        {
          if (v1211 < v1214)
            goto LABEL_1785;
          if (v1214 >= v1211)
            goto LABEL_1781;
        }
      }
      else
      {
        if (v1210 < v1213)
          goto LABEL_1785;
        if (v1213 >= v1210)
          goto LABEL_1781;
      }
      ++v1209;
LABEL_1785:
      v1209 = (uint64_t *)*v1209;
      if (!v1209)
        goto LABEL_1797;
    }
  }
  v1203 = 0;
LABEL_1801:
  *v1200 = v1203;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v93 = v3[433];
  if (v93 >> 30)
    v1218 = 1;
  else
    v1218 = (_DWORD)v93 == v5;
  if (v1218)
    goto LABEL_226;
LABEL_1805:
  v1219 = *(_QWORD *)(v1[2] + 8);
  v1220 = v93 & 0xFFFFFFFFCFFFFFFFLL;
  v1221 = *(_QWORD *)(*(_QWORD *)(v1219 + 8) + 2448);
  v1222 = (unsigned int *)(v1221 + 520 * (v93 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1223 = *v1222;
  if ((_DWORD)v1223)
  {
    v1224 = 0;
    v1225 = 0;
    v1226 = **(_QWORD **)(v1219 + 16);
    v1227 = v1221 + 520 * v1220;
    v1228 = v1227 + 364;
    v1229 = v1227 + 340;
    while (1)
    {
      v1230 = (uint64_t *)(v1228 + 12 * v1224);
      v1231 = *(uint64_t **)(v1226 + 2512);
      if (v1231)
        break;
LABEL_1824:
      *(_WORD *)(v1229 + 2 * v1225) = *(_WORD *)(v1229 + 2 * v1224);
      if (v1224 != v1225)
      {
        v1238 = *v1230;
        v1239 = v1228 + 12 * v1225;
        *(_DWORD *)(v1239 + 8) = *((_DWORD *)v1230 + 2);
        *(_QWORD *)v1239 = v1238;
      }
      ++v1225;
LABEL_1808:
      if (++v1224 == v1223)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1828;
      }
    }
    v1232 = *(_DWORD *)v1230;
    v1233 = *((_DWORD *)v1230 + 1);
    v1234 = *((_DWORD *)v1230 + 2);
    while (1)
    {
      v1235 = *((_DWORD *)v1231 + 7);
      if (v1232 == v1235)
      {
        v1236 = *((_DWORD *)v1231 + 8);
        if (v1233 == v1236)
        {
          v1237 = *((_DWORD *)v1231 + 9);
          if (v1234 < v1237)
            goto LABEL_1812;
          if (v1237 >= v1234)
            goto LABEL_1808;
        }
        else
        {
          if (v1233 < v1236)
            goto LABEL_1812;
          if (v1236 >= v1233)
            goto LABEL_1808;
        }
      }
      else
      {
        if (v1232 < v1235)
          goto LABEL_1812;
        if (v1235 >= v1232)
          goto LABEL_1808;
      }
      ++v1231;
LABEL_1812:
      v1231 = (uint64_t *)*v1231;
      if (!v1231)
        goto LABEL_1824;
    }
  }
  v1225 = 0;
LABEL_1828:
  *v1222 = v1225;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v95 = v3[434];
  if (v95 >> 30)
    v1240 = 1;
  else
    v1240 = (_DWORD)v95 == v5;
  if (v1240)
    goto LABEL_231;
LABEL_1832:
  v1241 = *(_QWORD *)(v1[2] + 8);
  v1242 = v95 & 0xFFFFFFFFCFFFFFFFLL;
  v1243 = *(_QWORD *)(*(_QWORD *)(v1241 + 8) + 2448);
  v1244 = (unsigned int *)(v1243 + 520 * (v95 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1245 = *v1244;
  if ((_DWORD)v1245)
  {
    v1246 = 0;
    v1247 = 0;
    v1248 = **(_QWORD **)(v1241 + 16);
    v1249 = v1243 + 520 * v1242;
    v1250 = v1249 + 364;
    v1251 = v1249 + 340;
    while (1)
    {
      v1252 = (uint64_t *)(v1250 + 12 * v1246);
      v1253 = *(uint64_t **)(v1248 + 2512);
      if (v1253)
        break;
LABEL_1851:
      *(_WORD *)(v1251 + 2 * v1247) = *(_WORD *)(v1251 + 2 * v1246);
      if (v1246 != v1247)
      {
        v1260 = *v1252;
        v1261 = v1250 + 12 * v1247;
        *(_DWORD *)(v1261 + 8) = *((_DWORD *)v1252 + 2);
        *(_QWORD *)v1261 = v1260;
      }
      ++v1247;
LABEL_1835:
      if (++v1246 == v1245)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1855;
      }
    }
    v1254 = *(_DWORD *)v1252;
    v1255 = *((_DWORD *)v1252 + 1);
    v1256 = *((_DWORD *)v1252 + 2);
    while (1)
    {
      v1257 = *((_DWORD *)v1253 + 7);
      if (v1254 == v1257)
      {
        v1258 = *((_DWORD *)v1253 + 8);
        if (v1255 == v1258)
        {
          v1259 = *((_DWORD *)v1253 + 9);
          if (v1256 < v1259)
            goto LABEL_1839;
          if (v1259 >= v1256)
            goto LABEL_1835;
        }
        else
        {
          if (v1255 < v1258)
            goto LABEL_1839;
          if (v1258 >= v1255)
            goto LABEL_1835;
        }
      }
      else
      {
        if (v1254 < v1257)
          goto LABEL_1839;
        if (v1257 >= v1254)
          goto LABEL_1835;
      }
      ++v1253;
LABEL_1839:
      v1253 = (uint64_t *)*v1253;
      if (!v1253)
        goto LABEL_1851;
    }
  }
  v1247 = 0;
LABEL_1855:
  *v1244 = v1247;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v97 = v3[435];
  if (v97 >> 30)
    v1262 = 1;
  else
    v1262 = (_DWORD)v97 == v5;
  if (v1262)
    goto LABEL_236;
LABEL_1859:
  v1263 = *(_QWORD *)(v1[2] + 8);
  v1264 = v97 & 0xFFFFFFFFCFFFFFFFLL;
  v1265 = *(_QWORD *)(*(_QWORD *)(v1263 + 8) + 2448);
  v1266 = (unsigned int *)(v1265 + 520 * (v97 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1267 = *v1266;
  if ((_DWORD)v1267)
  {
    v1268 = 0;
    v1269 = 0;
    v1270 = **(_QWORD **)(v1263 + 16);
    v1271 = v1265 + 520 * v1264;
    v1272 = v1271 + 364;
    v1273 = v1271 + 340;
    while (1)
    {
      v1274 = (uint64_t *)(v1272 + 12 * v1268);
      v1275 = *(uint64_t **)(v1270 + 2512);
      if (v1275)
        break;
LABEL_1878:
      *(_WORD *)(v1273 + 2 * v1269) = *(_WORD *)(v1273 + 2 * v1268);
      if (v1268 != v1269)
      {
        v1282 = *v1274;
        v1283 = v1272 + 12 * v1269;
        *(_DWORD *)(v1283 + 8) = *((_DWORD *)v1274 + 2);
        *(_QWORD *)v1283 = v1282;
      }
      ++v1269;
LABEL_1862:
      if (++v1268 == v1267)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1882;
      }
    }
    v1276 = *(_DWORD *)v1274;
    v1277 = *((_DWORD *)v1274 + 1);
    v1278 = *((_DWORD *)v1274 + 2);
    while (1)
    {
      v1279 = *((_DWORD *)v1275 + 7);
      if (v1276 == v1279)
      {
        v1280 = *((_DWORD *)v1275 + 8);
        if (v1277 == v1280)
        {
          v1281 = *((_DWORD *)v1275 + 9);
          if (v1278 < v1281)
            goto LABEL_1866;
          if (v1281 >= v1278)
            goto LABEL_1862;
        }
        else
        {
          if (v1277 < v1280)
            goto LABEL_1866;
          if (v1280 >= v1277)
            goto LABEL_1862;
        }
      }
      else
      {
        if (v1276 < v1279)
          goto LABEL_1866;
        if (v1279 >= v1276)
          goto LABEL_1862;
      }
      ++v1275;
LABEL_1866:
      v1275 = (uint64_t *)*v1275;
      if (!v1275)
        goto LABEL_1878;
    }
  }
  v1269 = 0;
LABEL_1882:
  *v1266 = v1269;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v99 = v3[436];
  if (v99 >> 30)
    v1284 = 1;
  else
    v1284 = (_DWORD)v99 == v5;
  if (v1284)
    goto LABEL_241;
LABEL_1886:
  v1285 = *(_QWORD *)(v1[2] + 8);
  v1286 = v99 & 0xFFFFFFFFCFFFFFFFLL;
  v1287 = *(_QWORD *)(*(_QWORD *)(v1285 + 8) + 2448);
  v1288 = (unsigned int *)(v1287 + 520 * (v99 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1289 = *v1288;
  if ((_DWORD)v1289)
  {
    v1290 = 0;
    v1291 = 0;
    v1292 = **(_QWORD **)(v1285 + 16);
    v1293 = v1287 + 520 * v1286;
    v1294 = v1293 + 364;
    v1295 = v1293 + 340;
    while (1)
    {
      v1296 = (uint64_t *)(v1294 + 12 * v1290);
      v1297 = *(uint64_t **)(v1292 + 2512);
      if (v1297)
        break;
LABEL_1905:
      *(_WORD *)(v1295 + 2 * v1291) = *(_WORD *)(v1295 + 2 * v1290);
      if (v1290 != v1291)
      {
        v1304 = *v1296;
        v1305 = v1294 + 12 * v1291;
        *(_DWORD *)(v1305 + 8) = *((_DWORD *)v1296 + 2);
        *(_QWORD *)v1305 = v1304;
      }
      ++v1291;
LABEL_1889:
      if (++v1290 == v1289)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1909;
      }
    }
    v1298 = *(_DWORD *)v1296;
    v1299 = *((_DWORD *)v1296 + 1);
    v1300 = *((_DWORD *)v1296 + 2);
    while (1)
    {
      v1301 = *((_DWORD *)v1297 + 7);
      if (v1298 == v1301)
      {
        v1302 = *((_DWORD *)v1297 + 8);
        if (v1299 == v1302)
        {
          v1303 = *((_DWORD *)v1297 + 9);
          if (v1300 < v1303)
            goto LABEL_1893;
          if (v1303 >= v1300)
            goto LABEL_1889;
        }
        else
        {
          if (v1299 < v1302)
            goto LABEL_1893;
          if (v1302 >= v1299)
            goto LABEL_1889;
        }
      }
      else
      {
        if (v1298 < v1301)
          goto LABEL_1893;
        if (v1301 >= v1298)
          goto LABEL_1889;
      }
      ++v1297;
LABEL_1893:
      v1297 = (uint64_t *)*v1297;
      if (!v1297)
        goto LABEL_1905;
    }
  }
  v1291 = 0;
LABEL_1909:
  *v1288 = v1291;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v101 = v3[437];
  if (v101 >> 30)
    v1306 = 1;
  else
    v1306 = (_DWORD)v101 == v5;
  if (v1306)
    goto LABEL_246;
LABEL_1913:
  v1307 = *(_QWORD *)(v1[2] + 8);
  v1308 = v101 & 0xFFFFFFFFCFFFFFFFLL;
  v1309 = *(_QWORD *)(*(_QWORD *)(v1307 + 8) + 2448);
  v1310 = (unsigned int *)(v1309 + 520 * (v101 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1311 = *v1310;
  if ((_DWORD)v1311)
  {
    v1312 = 0;
    v1313 = 0;
    v1314 = **(_QWORD **)(v1307 + 16);
    v1315 = v1309 + 520 * v1308;
    v1316 = v1315 + 364;
    v1317 = v1315 + 340;
    while (1)
    {
      v1318 = (uint64_t *)(v1316 + 12 * v1312);
      v1319 = *(uint64_t **)(v1314 + 2512);
      if (v1319)
        break;
LABEL_1932:
      *(_WORD *)(v1317 + 2 * v1313) = *(_WORD *)(v1317 + 2 * v1312);
      if (v1312 != v1313)
      {
        v1326 = *v1318;
        v1327 = v1316 + 12 * v1313;
        *(_DWORD *)(v1327 + 8) = *((_DWORD *)v1318 + 2);
        *(_QWORD *)v1327 = v1326;
      }
      ++v1313;
LABEL_1916:
      if (++v1312 == v1311)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1936;
      }
    }
    v1320 = *(_DWORD *)v1318;
    v1321 = *((_DWORD *)v1318 + 1);
    v1322 = *((_DWORD *)v1318 + 2);
    while (1)
    {
      v1323 = *((_DWORD *)v1319 + 7);
      if (v1320 == v1323)
      {
        v1324 = *((_DWORD *)v1319 + 8);
        if (v1321 == v1324)
        {
          v1325 = *((_DWORD *)v1319 + 9);
          if (v1322 < v1325)
            goto LABEL_1920;
          if (v1325 >= v1322)
            goto LABEL_1916;
        }
        else
        {
          if (v1321 < v1324)
            goto LABEL_1920;
          if (v1324 >= v1321)
            goto LABEL_1916;
        }
      }
      else
      {
        if (v1320 < v1323)
          goto LABEL_1920;
        if (v1323 >= v1320)
          goto LABEL_1916;
      }
      ++v1319;
LABEL_1920:
      v1319 = (uint64_t *)*v1319;
      if (!v1319)
        goto LABEL_1932;
    }
  }
  v1313 = 0;
LABEL_1936:
  *v1310 = v1313;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v103 = v3[438];
  if (v103 >> 30)
    v1328 = 1;
  else
    v1328 = (_DWORD)v103 == v5;
  if (v1328)
    goto LABEL_251;
LABEL_1940:
  v1329 = *(_QWORD *)(v1[2] + 8);
  v1330 = v103 & 0xFFFFFFFFCFFFFFFFLL;
  v1331 = *(_QWORD *)(*(_QWORD *)(v1329 + 8) + 2448);
  v1332 = (unsigned int *)(v1331 + 520 * (v103 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1333 = *v1332;
  if ((_DWORD)v1333)
  {
    v1334 = 0;
    v1335 = 0;
    v1336 = **(_QWORD **)(v1329 + 16);
    v1337 = v1331 + 520 * v1330;
    v1338 = v1337 + 364;
    v1339 = v1337 + 340;
    while (1)
    {
      v1340 = (uint64_t *)(v1338 + 12 * v1334);
      v1341 = *(uint64_t **)(v1336 + 2512);
      if (v1341)
        break;
LABEL_1959:
      *(_WORD *)(v1339 + 2 * v1335) = *(_WORD *)(v1339 + 2 * v1334);
      if (v1334 != v1335)
      {
        v1348 = *v1340;
        v1349 = v1338 + 12 * v1335;
        *(_DWORD *)(v1349 + 8) = *((_DWORD *)v1340 + 2);
        *(_QWORD *)v1349 = v1348;
      }
      ++v1335;
LABEL_1943:
      if (++v1334 == v1333)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1963;
      }
    }
    v1342 = *(_DWORD *)v1340;
    v1343 = *((_DWORD *)v1340 + 1);
    v1344 = *((_DWORD *)v1340 + 2);
    while (1)
    {
      v1345 = *((_DWORD *)v1341 + 7);
      if (v1342 == v1345)
      {
        v1346 = *((_DWORD *)v1341 + 8);
        if (v1343 == v1346)
        {
          v1347 = *((_DWORD *)v1341 + 9);
          if (v1344 < v1347)
            goto LABEL_1947;
          if (v1347 >= v1344)
            goto LABEL_1943;
        }
        else
        {
          if (v1343 < v1346)
            goto LABEL_1947;
          if (v1346 >= v1343)
            goto LABEL_1943;
        }
      }
      else
      {
        if (v1342 < v1345)
          goto LABEL_1947;
        if (v1345 >= v1342)
          goto LABEL_1943;
      }
      ++v1341;
LABEL_1947:
      v1341 = (uint64_t *)*v1341;
      if (!v1341)
        goto LABEL_1959;
    }
  }
  v1335 = 0;
LABEL_1963:
  *v1332 = v1335;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v105 = v3[439];
  if (v105 >> 30)
    v1350 = 1;
  else
    v1350 = (_DWORD)v105 == v5;
  if (v1350)
    goto LABEL_256;
LABEL_1967:
  v1351 = *(_QWORD *)(v1[2] + 8);
  v1352 = v105 & 0xFFFFFFFFCFFFFFFFLL;
  v1353 = *(_QWORD *)(*(_QWORD *)(v1351 + 8) + 2448);
  v1354 = (unsigned int *)(v1353 + 520 * (v105 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1355 = *v1354;
  if ((_DWORD)v1355)
  {
    v1356 = 0;
    v1357 = 0;
    v1358 = **(_QWORD **)(v1351 + 16);
    v1359 = v1353 + 520 * v1352;
    v1360 = v1359 + 364;
    v1361 = v1359 + 340;
    while (1)
    {
      v1362 = (uint64_t *)(v1360 + 12 * v1356);
      v1363 = *(uint64_t **)(v1358 + 2512);
      if (v1363)
        break;
LABEL_1986:
      *(_WORD *)(v1361 + 2 * v1357) = *(_WORD *)(v1361 + 2 * v1356);
      if (v1356 != v1357)
      {
        v1370 = *v1362;
        v1371 = v1360 + 12 * v1357;
        *(_DWORD *)(v1371 + 8) = *((_DWORD *)v1362 + 2);
        *(_QWORD *)v1371 = v1370;
      }
      ++v1357;
LABEL_1970:
      if (++v1356 == v1355)
        goto LABEL_1989;
    }
    v1364 = *(_DWORD *)v1362;
    v1365 = *((_DWORD *)v1362 + 1);
    v1366 = *((_DWORD *)v1362 + 2);
    while (1)
    {
      v1367 = *((_DWORD *)v1363 + 7);
      if (v1364 == v1367)
      {
        v1368 = *((_DWORD *)v1363 + 8);
        if (v1365 == v1368)
        {
          v1369 = *((_DWORD *)v1363 + 9);
          if (v1366 < v1369)
            goto LABEL_1974;
          if (v1369 >= v1366)
            goto LABEL_1970;
        }
        else
        {
          if (v1365 < v1368)
            goto LABEL_1974;
          if (v1368 >= v1365)
            goto LABEL_1970;
        }
      }
      else
      {
        if (v1364 < v1367)
          goto LABEL_1974;
        if (v1367 >= v1364)
          goto LABEL_1970;
      }
      ++v1363;
LABEL_1974:
      v1363 = (uint64_t *)*v1363;
      if (!v1363)
        goto LABEL_1986;
    }
  }
  v1357 = 0;
LABEL_1989:
  *v1354 = v1357;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v107 = v3[440];
  if (v107 >> 30)
    v1372 = 1;
  else
    v1372 = (_DWORD)v107 == v5;
  if (v1372)
    goto LABEL_261;
LABEL_1993:
  v1373 = *(_QWORD *)(v1[2] + 8);
  v1374 = v107 & 0xFFFFFFFFCFFFFFFFLL;
  v1375 = *(_QWORD *)(*(_QWORD *)(v1373 + 8) + 2448);
  v1376 = (unsigned int *)(v1375 + 520 * (v107 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1377 = *v1376;
  if ((_DWORD)v1377)
  {
    v1378 = 0;
    v1379 = 0;
    v1380 = **(_QWORD **)(v1373 + 16);
    v1381 = v1375 + 520 * v1374;
    v1382 = v1381 + 364;
    v1383 = v1381 + 340;
    while (1)
    {
      v1384 = (uint64_t *)(v1382 + 12 * v1378);
      v1385 = *(uint64_t **)(v1380 + 2512);
      if (v1385)
        break;
LABEL_2012:
      *(_WORD *)(v1383 + 2 * v1379) = *(_WORD *)(v1383 + 2 * v1378);
      if (v1378 != v1379)
      {
        v1392 = *v1384;
        v1393 = v1382 + 12 * v1379;
        *(_DWORD *)(v1393 + 8) = *((_DWORD *)v1384 + 2);
        *(_QWORD *)v1393 = v1392;
      }
      ++v1379;
LABEL_1996:
      if (++v1378 == v1377)
        goto LABEL_2015;
    }
    v1386 = *(_DWORD *)v1384;
    v1387 = *((_DWORD *)v1384 + 1);
    v1388 = *((_DWORD *)v1384 + 2);
    while (1)
    {
      v1389 = *((_DWORD *)v1385 + 7);
      if (v1386 == v1389)
      {
        v1390 = *((_DWORD *)v1385 + 8);
        if (v1387 == v1390)
        {
          v1391 = *((_DWORD *)v1385 + 9);
          if (v1388 < v1391)
            goto LABEL_2000;
          if (v1391 >= v1388)
            goto LABEL_1996;
        }
        else
        {
          if (v1387 < v1390)
            goto LABEL_2000;
          if (v1390 >= v1387)
            goto LABEL_1996;
        }
      }
      else
      {
        if (v1386 < v1389)
          goto LABEL_2000;
        if (v1389 >= v1386)
          goto LABEL_1996;
      }
      ++v1385;
LABEL_2000:
      v1385 = (uint64_t *)*v1385;
      if (!v1385)
        goto LABEL_2012;
    }
  }
  v1379 = 0;
LABEL_2015:
  *v1376 = v1379;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v109 = v3[441];
  if (v109 >> 30)
    v1394 = 1;
  else
    v1394 = (_DWORD)v109 == v5;
  if (v1394)
    goto LABEL_266;
LABEL_2019:
  v1395 = *(_QWORD *)(v1[2] + 8);
  v1396 = v109 & 0xFFFFFFFFCFFFFFFFLL;
  v1397 = *(_QWORD *)(*(_QWORD *)(v1395 + 8) + 2448);
  v1398 = (unsigned int *)(v1397 + 520 * (v109 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1399 = *v1398;
  if ((_DWORD)v1399)
  {
    v1400 = 0;
    v1401 = 0;
    v1402 = **(_QWORD **)(v1395 + 16);
    v1403 = v1397 + 520 * v1396;
    v1404 = v1403 + 364;
    v1405 = v1403 + 340;
    while (1)
    {
      v1406 = (uint64_t *)(v1404 + 12 * v1400);
      v1407 = *(uint64_t **)(v1402 + 2512);
      if (v1407)
        break;
LABEL_2038:
      *(_WORD *)(v1405 + 2 * v1401) = *(_WORD *)(v1405 + 2 * v1400);
      if (v1400 != v1401)
      {
        v1414 = *v1406;
        v1415 = v1404 + 12 * v1401;
        *(_DWORD *)(v1415 + 8) = *((_DWORD *)v1406 + 2);
        *(_QWORD *)v1415 = v1414;
      }
      ++v1401;
LABEL_2022:
      if (++v1400 == v1399)
        goto LABEL_2041;
    }
    v1408 = *(_DWORD *)v1406;
    v1409 = *((_DWORD *)v1406 + 1);
    v1410 = *((_DWORD *)v1406 + 2);
    while (1)
    {
      v1411 = *((_DWORD *)v1407 + 7);
      if (v1408 == v1411)
      {
        v1412 = *((_DWORD *)v1407 + 8);
        if (v1409 == v1412)
        {
          v1413 = *((_DWORD *)v1407 + 9);
          if (v1410 < v1413)
            goto LABEL_2026;
          if (v1413 >= v1410)
            goto LABEL_2022;
        }
        else
        {
          if (v1409 < v1412)
            goto LABEL_2026;
          if (v1412 >= v1409)
            goto LABEL_2022;
        }
      }
      else
      {
        if (v1408 < v1411)
          goto LABEL_2026;
        if (v1411 >= v1408)
          goto LABEL_2022;
      }
      ++v1407;
LABEL_2026:
      v1407 = (uint64_t *)*v1407;
      if (!v1407)
        goto LABEL_2038;
    }
  }
  v1401 = 0;
LABEL_2041:
  *v1398 = v1401;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v111 = v3[442];
  if (v111 >> 30)
    v1416 = 1;
  else
    v1416 = (_DWORD)v111 == v5;
  if (v1416)
    goto LABEL_271;
LABEL_2045:
  v1417 = *(_QWORD *)(v1[2] + 8);
  v1418 = v111 & 0xFFFFFFFFCFFFFFFFLL;
  v1419 = *(_QWORD *)(*(_QWORD *)(v1417 + 8) + 2448);
  v1420 = (unsigned int *)(v1419 + 520 * (v111 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1421 = *v1420;
  if ((_DWORD)v1421)
  {
    v1422 = 0;
    v1423 = 0;
    v1424 = **(_QWORD **)(v1417 + 16);
    v1425 = v1419 + 520 * v1418;
    v1426 = v1425 + 364;
    v1427 = v1425 + 340;
    while (1)
    {
      v1428 = (uint64_t *)(v1426 + 12 * v1422);
      v1429 = *(uint64_t **)(v1424 + 2512);
      if (v1429)
        break;
LABEL_2064:
      *(_WORD *)(v1427 + 2 * v1423) = *(_WORD *)(v1427 + 2 * v1422);
      if (v1422 != v1423)
      {
        v1436 = *v1428;
        v1437 = v1426 + 12 * v1423;
        *(_DWORD *)(v1437 + 8) = *((_DWORD *)v1428 + 2);
        *(_QWORD *)v1437 = v1436;
      }
      ++v1423;
LABEL_2048:
      if (++v1422 == v1421)
        goto LABEL_2067;
    }
    v1430 = *(_DWORD *)v1428;
    v1431 = *((_DWORD *)v1428 + 1);
    v1432 = *((_DWORD *)v1428 + 2);
    while (1)
    {
      v1433 = *((_DWORD *)v1429 + 7);
      if (v1430 == v1433)
      {
        v1434 = *((_DWORD *)v1429 + 8);
        if (v1431 == v1434)
        {
          v1435 = *((_DWORD *)v1429 + 9);
          if (v1432 < v1435)
            goto LABEL_2052;
          if (v1435 >= v1432)
            goto LABEL_2048;
        }
        else
        {
          if (v1431 < v1434)
            goto LABEL_2052;
          if (v1434 >= v1431)
            goto LABEL_2048;
        }
      }
      else
      {
        if (v1430 < v1433)
          goto LABEL_2052;
        if (v1433 >= v1430)
          goto LABEL_2048;
      }
      ++v1429;
LABEL_2052:
      v1429 = (uint64_t *)*v1429;
      if (!v1429)
        goto LABEL_2064;
    }
  }
  v1423 = 0;
LABEL_2067:
  *v1420 = v1423;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v113 = v3[443];
  if (v113 >> 30)
    v1438 = 1;
  else
    v1438 = (_DWORD)v113 == v5;
  if (v1438)
    goto LABEL_276;
LABEL_2071:
  v1439 = *(_QWORD *)(v1[2] + 8);
  v1440 = v113 & 0xFFFFFFFFCFFFFFFFLL;
  v1441 = *(_QWORD *)(*(_QWORD *)(v1439 + 8) + 2448);
  v1442 = (unsigned int *)(v1441 + 520 * (v113 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1443 = *v1442;
  if ((_DWORD)v1443)
  {
    v1444 = 0;
    v1445 = 0;
    v1446 = **(_QWORD **)(v1439 + 16);
    v1447 = v1441 + 520 * v1440;
    v1448 = v1447 + 364;
    v1449 = v1447 + 340;
    while (1)
    {
      v1450 = (uint64_t *)(v1448 + 12 * v1444);
      v1451 = *(uint64_t **)(v1446 + 2512);
      if (v1451)
        break;
LABEL_2090:
      *(_WORD *)(v1449 + 2 * v1445) = *(_WORD *)(v1449 + 2 * v1444);
      if (v1444 != v1445)
      {
        v1458 = *v1450;
        v1459 = v1448 + 12 * v1445;
        *(_DWORD *)(v1459 + 8) = *((_DWORD *)v1450 + 2);
        *(_QWORD *)v1459 = v1458;
      }
      ++v1445;
LABEL_2074:
      if (++v1444 == v1443)
        goto LABEL_2093;
    }
    v1452 = *(_DWORD *)v1450;
    v1453 = *((_DWORD *)v1450 + 1);
    v1454 = *((_DWORD *)v1450 + 2);
    while (1)
    {
      v1455 = *((_DWORD *)v1451 + 7);
      if (v1452 == v1455)
      {
        v1456 = *((_DWORD *)v1451 + 8);
        if (v1453 == v1456)
        {
          v1457 = *((_DWORD *)v1451 + 9);
          if (v1454 < v1457)
            goto LABEL_2078;
          if (v1457 >= v1454)
            goto LABEL_2074;
        }
        else
        {
          if (v1453 < v1456)
            goto LABEL_2078;
          if (v1456 >= v1453)
            goto LABEL_2074;
        }
      }
      else
      {
        if (v1452 < v1455)
          goto LABEL_2078;
        if (v1455 >= v1452)
          goto LABEL_2074;
      }
      ++v1451;
LABEL_2078:
      v1451 = (uint64_t *)*v1451;
      if (!v1451)
        goto LABEL_2090;
    }
  }
  v1445 = 0;
LABEL_2093:
  *v1442 = v1445;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v115 = v3[444];
  if (v115 >> 30)
    v1460 = 1;
  else
    v1460 = (_DWORD)v115 == v5;
  if (v1460)
    goto LABEL_281;
LABEL_2097:
  v1461 = *(_QWORD *)(v1[2] + 8);
  v1462 = v115 & 0xFFFFFFFFCFFFFFFFLL;
  v1463 = *(_QWORD *)(*(_QWORD *)(v1461 + 8) + 2448);
  v1464 = (unsigned int *)(v1463 + 520 * (v115 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1465 = *v1464;
  if ((_DWORD)v1465)
  {
    v1466 = 0;
    v1467 = 0;
    v1468 = **(_QWORD **)(v1461 + 16);
    v1469 = v1463 + 520 * v1462;
    v1470 = v1469 + 364;
    v1471 = v1469 + 340;
    while (1)
    {
      v1472 = (uint64_t *)(v1470 + 12 * v1466);
      v1473 = *(uint64_t **)(v1468 + 2512);
      if (v1473)
        break;
LABEL_2116:
      *(_WORD *)(v1471 + 2 * v1467) = *(_WORD *)(v1471 + 2 * v1466);
      if (v1466 != v1467)
      {
        v1480 = *v1472;
        v1481 = v1470 + 12 * v1467;
        *(_DWORD *)(v1481 + 8) = *((_DWORD *)v1472 + 2);
        *(_QWORD *)v1481 = v1480;
      }
      ++v1467;
LABEL_2100:
      if (++v1466 == v1465)
        goto LABEL_2119;
    }
    v1474 = *(_DWORD *)v1472;
    v1475 = *((_DWORD *)v1472 + 1);
    v1476 = *((_DWORD *)v1472 + 2);
    while (1)
    {
      v1477 = *((_DWORD *)v1473 + 7);
      if (v1474 == v1477)
      {
        v1478 = *((_DWORD *)v1473 + 8);
        if (v1475 == v1478)
        {
          v1479 = *((_DWORD *)v1473 + 9);
          if (v1476 < v1479)
            goto LABEL_2104;
          if (v1479 >= v1476)
            goto LABEL_2100;
        }
        else
        {
          if (v1475 < v1478)
            goto LABEL_2104;
          if (v1478 >= v1475)
            goto LABEL_2100;
        }
      }
      else
      {
        if (v1474 < v1477)
          goto LABEL_2104;
        if (v1477 >= v1474)
          goto LABEL_2100;
      }
      ++v1473;
LABEL_2104:
      v1473 = (uint64_t *)*v1473;
      if (!v1473)
        goto LABEL_2116;
    }
  }
  v1467 = 0;
LABEL_2119:
  *v1464 = v1467;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v117 = v3[445];
  if (v117 >> 30)
    v1482 = 1;
  else
    v1482 = (_DWORD)v117 == v5;
  if (v1482)
    goto LABEL_286;
LABEL_2123:
  v1483 = *(_QWORD *)(v1[2] + 8);
  v1484 = v117 & 0xFFFFFFFFCFFFFFFFLL;
  v1485 = *(_QWORD *)(*(_QWORD *)(v1483 + 8) + 2448);
  v1486 = (unsigned int *)(v1485 + 520 * (v117 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1487 = *v1486;
  if ((_DWORD)v1487)
  {
    v1488 = 0;
    v1489 = 0;
    v1490 = **(_QWORD **)(v1483 + 16);
    v1491 = v1485 + 520 * v1484;
    v1492 = v1491 + 364;
    v1493 = v1491 + 340;
    while (1)
    {
      v1494 = (uint64_t *)(v1492 + 12 * v1488);
      v1495 = *(uint64_t **)(v1490 + 2512);
      if (v1495)
        break;
LABEL_2142:
      *(_WORD *)(v1493 + 2 * v1489) = *(_WORD *)(v1493 + 2 * v1488);
      if (v1488 != v1489)
      {
        v1502 = *v1494;
        v1503 = v1492 + 12 * v1489;
        *(_DWORD *)(v1503 + 8) = *((_DWORD *)v1494 + 2);
        *(_QWORD *)v1503 = v1502;
      }
      ++v1489;
LABEL_2126:
      if (++v1488 == v1487)
        goto LABEL_2145;
    }
    v1496 = *(_DWORD *)v1494;
    v1497 = *((_DWORD *)v1494 + 1);
    v1498 = *((_DWORD *)v1494 + 2);
    while (1)
    {
      v1499 = *((_DWORD *)v1495 + 7);
      if (v1496 == v1499)
      {
        v1500 = *((_DWORD *)v1495 + 8);
        if (v1497 == v1500)
        {
          v1501 = *((_DWORD *)v1495 + 9);
          if (v1498 < v1501)
            goto LABEL_2130;
          if (v1501 >= v1498)
            goto LABEL_2126;
        }
        else
        {
          if (v1497 < v1500)
            goto LABEL_2130;
          if (v1500 >= v1497)
            goto LABEL_2126;
        }
      }
      else
      {
        if (v1496 < v1499)
          goto LABEL_2130;
        if (v1499 >= v1496)
          goto LABEL_2126;
      }
      ++v1495;
LABEL_2130:
      v1495 = (uint64_t *)*v1495;
      if (!v1495)
        goto LABEL_2142;
    }
  }
  v1489 = 0;
LABEL_2145:
  *v1486 = v1489;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v119 = v3[446];
  if (v119 >> 30)
    v1504 = 1;
  else
    v1504 = (_DWORD)v119 == v5;
  if (v1504)
    goto LABEL_291;
LABEL_2149:
  v1505 = *(_QWORD *)(v1[2] + 8);
  v1506 = v119 & 0xFFFFFFFFCFFFFFFFLL;
  v1507 = *(_QWORD *)(*(_QWORD *)(v1505 + 8) + 2448);
  v1508 = (unsigned int *)(v1507 + 520 * (v119 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1509 = *v1508;
  if ((_DWORD)v1509)
  {
    v1510 = 0;
    v1511 = 0;
    v1512 = **(_QWORD **)(v1505 + 16);
    v1513 = v1507 + 520 * v1506;
    v1514 = v1513 + 364;
    v1515 = v1513 + 340;
    while (1)
    {
      v1516 = (uint64_t *)(v1514 + 12 * v1510);
      v1517 = *(uint64_t **)(v1512 + 2512);
      if (v1517)
        break;
LABEL_2168:
      *(_WORD *)(v1515 + 2 * v1511) = *(_WORD *)(v1515 + 2 * v1510);
      if (v1510 != v1511)
      {
        v1524 = *v1516;
        v1525 = v1514 + 12 * v1511;
        *(_DWORD *)(v1525 + 8) = *((_DWORD *)v1516 + 2);
        *(_QWORD *)v1525 = v1524;
      }
      ++v1511;
LABEL_2152:
      if (++v1510 == v1509)
        goto LABEL_2171;
    }
    v1518 = *(_DWORD *)v1516;
    v1519 = *((_DWORD *)v1516 + 1);
    v1520 = *((_DWORD *)v1516 + 2);
    while (1)
    {
      v1521 = *((_DWORD *)v1517 + 7);
      if (v1518 == v1521)
      {
        v1522 = *((_DWORD *)v1517 + 8);
        if (v1519 == v1522)
        {
          v1523 = *((_DWORD *)v1517 + 9);
          if (v1520 < v1523)
            goto LABEL_2156;
          if (v1523 >= v1520)
            goto LABEL_2152;
        }
        else
        {
          if (v1519 < v1522)
            goto LABEL_2156;
          if (v1522 >= v1519)
            goto LABEL_2152;
        }
      }
      else
      {
        if (v1518 < v1521)
          goto LABEL_2156;
        if (v1521 >= v1518)
          goto LABEL_2152;
      }
      ++v1517;
LABEL_2156:
      v1517 = (uint64_t *)*v1517;
      if (!v1517)
        goto LABEL_2168;
    }
  }
  v1511 = 0;
LABEL_2171:
  *v1508 = v1511;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v121 = v3[447];
  if (v121 >> 30)
    v1526 = 1;
  else
    v1526 = (_DWORD)v121 == v5;
  if (v1526)
    goto LABEL_296;
LABEL_2175:
  v1527 = *(_QWORD *)(v1[2] + 8);
  v1528 = v121 & 0xFFFFFFFFCFFFFFFFLL;
  v1529 = *(_QWORD *)(*(_QWORD *)(v1527 + 8) + 2448);
  v1530 = (unsigned int *)(v1529 + 520 * (v121 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1531 = *v1530;
  if ((_DWORD)v1531)
  {
    v1532 = 0;
    v1533 = 0;
    v1534 = **(_QWORD **)(v1527 + 16);
    v1535 = v1529 + 520 * v1528;
    v1536 = v1535 + 364;
    v1537 = v1535 + 340;
    while (1)
    {
      v1538 = (uint64_t *)(v1536 + 12 * v1532);
      v1539 = *(uint64_t **)(v1534 + 2512);
      if (v1539)
        break;
LABEL_2194:
      *(_WORD *)(v1537 + 2 * v1533) = *(_WORD *)(v1537 + 2 * v1532);
      if (v1532 != v1533)
      {
        v1546 = *v1538;
        v1547 = v1536 + 12 * v1533;
        *(_DWORD *)(v1547 + 8) = *((_DWORD *)v1538 + 2);
        *(_QWORD *)v1547 = v1546;
      }
      ++v1533;
LABEL_2178:
      if (++v1532 == v1531)
        goto LABEL_2197;
    }
    v1540 = *(_DWORD *)v1538;
    v1541 = *((_DWORD *)v1538 + 1);
    v1542 = *((_DWORD *)v1538 + 2);
    while (1)
    {
      v1543 = *((_DWORD *)v1539 + 7);
      if (v1540 == v1543)
      {
        v1544 = *((_DWORD *)v1539 + 8);
        if (v1541 == v1544)
        {
          v1545 = *((_DWORD *)v1539 + 9);
          if (v1542 < v1545)
            goto LABEL_2182;
          if (v1545 >= v1542)
            goto LABEL_2178;
        }
        else
        {
          if (v1541 < v1544)
            goto LABEL_2182;
          if (v1544 >= v1541)
            goto LABEL_2178;
        }
      }
      else
      {
        if (v1540 < v1543)
          goto LABEL_2182;
        if (v1543 >= v1540)
          goto LABEL_2178;
      }
      ++v1539;
LABEL_2182:
      v1539 = (uint64_t *)*v1539;
      if (!v1539)
        goto LABEL_2194;
    }
  }
  v1533 = 0;
LABEL_2197:
  *v1530 = v1533;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v123 = v3[448];
  if (v123 >> 30)
    v1548 = 1;
  else
    v1548 = (_DWORD)v123 == v5;
  if (v1548)
    goto LABEL_301;
LABEL_2201:
  v1549 = *(_QWORD *)(v1[2] + 8);
  v1550 = v123 & 0xFFFFFFFFCFFFFFFFLL;
  v1551 = *(_QWORD *)(*(_QWORD *)(v1549 + 8) + 2448);
  v1552 = (unsigned int *)(v1551 + 520 * (v123 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1553 = *v1552;
  if ((_DWORD)v1553)
  {
    v1554 = 0;
    v1555 = 0;
    v1556 = **(_QWORD **)(v1549 + 16);
    v1557 = v1551 + 520 * v1550;
    v1558 = v1557 + 364;
    v1559 = v1557 + 340;
    while (1)
    {
      v1560 = (uint64_t *)(v1558 + 12 * v1554);
      v1561 = *(uint64_t **)(v1556 + 2512);
      if (v1561)
        break;
LABEL_2220:
      *(_WORD *)(v1559 + 2 * v1555) = *(_WORD *)(v1559 + 2 * v1554);
      if (v1554 != v1555)
      {
        v1568 = *v1560;
        v1569 = v1558 + 12 * v1555;
        *(_DWORD *)(v1569 + 8) = *((_DWORD *)v1560 + 2);
        *(_QWORD *)v1569 = v1568;
      }
      ++v1555;
LABEL_2204:
      if (++v1554 == v1553)
        goto LABEL_2223;
    }
    v1562 = *(_DWORD *)v1560;
    v1563 = *((_DWORD *)v1560 + 1);
    v1564 = *((_DWORD *)v1560 + 2);
    while (1)
    {
      v1565 = *((_DWORD *)v1561 + 7);
      if (v1562 == v1565)
      {
        v1566 = *((_DWORD *)v1561 + 8);
        if (v1563 == v1566)
        {
          v1567 = *((_DWORD *)v1561 + 9);
          if (v1564 < v1567)
            goto LABEL_2208;
          if (v1567 >= v1564)
            goto LABEL_2204;
        }
        else
        {
          if (v1563 < v1566)
            goto LABEL_2208;
          if (v1566 >= v1563)
            goto LABEL_2204;
        }
      }
      else
      {
        if (v1562 < v1565)
          goto LABEL_2208;
        if (v1565 >= v1562)
          goto LABEL_2204;
      }
      ++v1561;
LABEL_2208:
      v1561 = (uint64_t *)*v1561;
      if (!v1561)
        goto LABEL_2220;
    }
  }
  v1555 = 0;
LABEL_2223:
  *v1552 = v1555;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v125 = v3[449];
  if (v125 >> 30)
    v1570 = 1;
  else
    v1570 = (_DWORD)v125 == v5;
  if (v1570)
    goto LABEL_306;
LABEL_2227:
  v1571 = *(_QWORD *)(v1[2] + 8);
  v1572 = v125 & 0xFFFFFFFFCFFFFFFFLL;
  v1573 = *(_QWORD *)(*(_QWORD *)(v1571 + 8) + 2448);
  v1574 = (unsigned int *)(v1573 + 520 * (v125 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1575 = *v1574;
  if ((_DWORD)v1575)
  {
    v1576 = 0;
    v1577 = 0;
    v1578 = **(_QWORD **)(v1571 + 16);
    v1579 = v1573 + 520 * v1572;
    v1580 = v1579 + 364;
    v1581 = v1579 + 340;
    while (1)
    {
      v1582 = (uint64_t *)(v1580 + 12 * v1576);
      v1583 = *(uint64_t **)(v1578 + 2512);
      if (v1583)
        break;
LABEL_2246:
      *(_WORD *)(v1581 + 2 * v1577) = *(_WORD *)(v1581 + 2 * v1576);
      if (v1576 != v1577)
      {
        v1590 = *v1582;
        v1591 = v1580 + 12 * v1577;
        *(_DWORD *)(v1591 + 8) = *((_DWORD *)v1582 + 2);
        *(_QWORD *)v1591 = v1590;
      }
      ++v1577;
LABEL_2230:
      if (++v1576 == v1575)
        goto LABEL_2249;
    }
    v1584 = *(_DWORD *)v1582;
    v1585 = *((_DWORD *)v1582 + 1);
    v1586 = *((_DWORD *)v1582 + 2);
    while (1)
    {
      v1587 = *((_DWORD *)v1583 + 7);
      if (v1584 == v1587)
      {
        v1588 = *((_DWORD *)v1583 + 8);
        if (v1585 == v1588)
        {
          v1589 = *((_DWORD *)v1583 + 9);
          if (v1586 < v1589)
            goto LABEL_2234;
          if (v1589 >= v1586)
            goto LABEL_2230;
        }
        else
        {
          if (v1585 < v1588)
            goto LABEL_2234;
          if (v1588 >= v1585)
            goto LABEL_2230;
        }
      }
      else
      {
        if (v1584 < v1587)
          goto LABEL_2234;
        if (v1587 >= v1584)
          goto LABEL_2230;
      }
      ++v1583;
LABEL_2234:
      v1583 = (uint64_t *)*v1583;
      if (!v1583)
        goto LABEL_2246;
    }
  }
  v1577 = 0;
LABEL_2249:
  *v1574 = v1577;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v127 = v3[450];
  if (v127 >> 30)
    v1592 = 1;
  else
    v1592 = (_DWORD)v127 == v5;
  if (v1592)
    goto LABEL_311;
LABEL_2253:
  v1593 = *(_QWORD *)(v1[2] + 8);
  v1594 = v127 & 0xFFFFFFFFCFFFFFFFLL;
  v1595 = *(_QWORD *)(*(_QWORD *)(v1593 + 8) + 2448);
  v1596 = (unsigned int *)(v1595 + 520 * (v127 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1597 = *v1596;
  if ((_DWORD)v1597)
  {
    v1598 = 0;
    v1599 = 0;
    v1600 = **(_QWORD **)(v1593 + 16);
    v1601 = v1595 + 520 * v1594;
    v1602 = v1601 + 364;
    v1603 = v1601 + 340;
    while (1)
    {
      v1604 = (uint64_t *)(v1602 + 12 * v1598);
      v1605 = *(uint64_t **)(v1600 + 2512);
      if (v1605)
        break;
LABEL_2272:
      *(_WORD *)(v1603 + 2 * v1599) = *(_WORD *)(v1603 + 2 * v1598);
      if (v1598 != v1599)
      {
        v1612 = *v1604;
        v1613 = v1602 + 12 * v1599;
        *(_DWORD *)(v1613 + 8) = *((_DWORD *)v1604 + 2);
        *(_QWORD *)v1613 = v1612;
      }
      ++v1599;
LABEL_2256:
      if (++v1598 == v1597)
        goto LABEL_2275;
    }
    v1606 = *(_DWORD *)v1604;
    v1607 = *((_DWORD *)v1604 + 1);
    v1608 = *((_DWORD *)v1604 + 2);
    while (1)
    {
      v1609 = *((_DWORD *)v1605 + 7);
      if (v1606 == v1609)
      {
        v1610 = *((_DWORD *)v1605 + 8);
        if (v1607 == v1610)
        {
          v1611 = *((_DWORD *)v1605 + 9);
          if (v1608 < v1611)
            goto LABEL_2260;
          if (v1611 >= v1608)
            goto LABEL_2256;
        }
        else
        {
          if (v1607 < v1610)
            goto LABEL_2260;
          if (v1610 >= v1607)
            goto LABEL_2256;
        }
      }
      else
      {
        if (v1606 < v1609)
          goto LABEL_2260;
        if (v1609 >= v1606)
          goto LABEL_2256;
      }
      ++v1605;
LABEL_2260:
      v1605 = (uint64_t *)*v1605;
      if (!v1605)
        goto LABEL_2272;
    }
  }
  v1599 = 0;
LABEL_2275:
  *v1596 = v1599;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v129 = v3[451];
  if (v129 >> 30)
    v1614 = 1;
  else
    v1614 = (_DWORD)v129 == v5;
  if (v1614)
    goto LABEL_316;
LABEL_2279:
  v1615 = *(_QWORD *)(v1[2] + 8);
  v1616 = v129 & 0xFFFFFFFFCFFFFFFFLL;
  v1617 = *(_QWORD *)(*(_QWORD *)(v1615 + 8) + 2448);
  v1618 = (unsigned int *)(v1617 + 520 * (v129 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1619 = *v1618;
  if ((_DWORD)v1619)
  {
    v1620 = 0;
    v1621 = 0;
    v1622 = **(_QWORD **)(v1615 + 16);
    v1623 = v1617 + 520 * v1616;
    v1624 = v1623 + 364;
    v1625 = v1623 + 340;
    while (1)
    {
      v1626 = (uint64_t *)(v1624 + 12 * v1620);
      v1627 = *(uint64_t **)(v1622 + 2512);
      if (v1627)
        break;
LABEL_2298:
      *(_WORD *)(v1625 + 2 * v1621) = *(_WORD *)(v1625 + 2 * v1620);
      if (v1620 != v1621)
      {
        v1634 = *v1626;
        v1635 = v1624 + 12 * v1621;
        *(_DWORD *)(v1635 + 8) = *((_DWORD *)v1626 + 2);
        *(_QWORD *)v1635 = v1634;
      }
      ++v1621;
LABEL_2282:
      if (++v1620 == v1619)
        goto LABEL_2301;
    }
    v1628 = *(_DWORD *)v1626;
    v1629 = *((_DWORD *)v1626 + 1);
    v1630 = *((_DWORD *)v1626 + 2);
    while (1)
    {
      v1631 = *((_DWORD *)v1627 + 7);
      if (v1628 == v1631)
      {
        v1632 = *((_DWORD *)v1627 + 8);
        if (v1629 == v1632)
        {
          v1633 = *((_DWORD *)v1627 + 9);
          if (v1630 < v1633)
            goto LABEL_2286;
          if (v1633 >= v1630)
            goto LABEL_2282;
        }
        else
        {
          if (v1629 < v1632)
            goto LABEL_2286;
          if (v1632 >= v1629)
            goto LABEL_2282;
        }
      }
      else
      {
        if (v1628 < v1631)
          goto LABEL_2286;
        if (v1631 >= v1628)
          goto LABEL_2282;
      }
      ++v1627;
LABEL_2286:
      v1627 = (uint64_t *)*v1627;
      if (!v1627)
        goto LABEL_2298;
    }
  }
  v1621 = 0;
LABEL_2301:
  *v1618 = v1621;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v131 = v3[452];
  if (v131 >> 30)
    v1636 = 1;
  else
    v1636 = (_DWORD)v131 == v5;
  if (v1636)
    goto LABEL_321;
LABEL_2305:
  v1637 = *(_QWORD *)(v1[2] + 8);
  v1638 = v131 & 0xFFFFFFFFCFFFFFFFLL;
  v1639 = *(_QWORD *)(*(_QWORD *)(v1637 + 8) + 2448);
  v1640 = (unsigned int *)(v1639 + 520 * (v131 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1641 = *v1640;
  if ((_DWORD)v1641)
  {
    v1642 = 0;
    v1643 = 0;
    v1644 = **(_QWORD **)(v1637 + 16);
    v1645 = v1639 + 520 * v1638;
    v1646 = v1645 + 364;
    v1647 = v1645 + 340;
    while (1)
    {
      v1648 = (uint64_t *)(v1646 + 12 * v1642);
      v1649 = *(uint64_t **)(v1644 + 2512);
      if (v1649)
        break;
LABEL_2324:
      *(_WORD *)(v1647 + 2 * v1643) = *(_WORD *)(v1647 + 2 * v1642);
      if (v1642 != v1643)
      {
        v1656 = *v1648;
        v1657 = v1646 + 12 * v1643;
        *(_DWORD *)(v1657 + 8) = *((_DWORD *)v1648 + 2);
        *(_QWORD *)v1657 = v1656;
      }
      ++v1643;
LABEL_2308:
      if (++v1642 == v1641)
        goto LABEL_2327;
    }
    v1650 = *(_DWORD *)v1648;
    v1651 = *((_DWORD *)v1648 + 1);
    v1652 = *((_DWORD *)v1648 + 2);
    while (1)
    {
      v1653 = *((_DWORD *)v1649 + 7);
      if (v1650 == v1653)
      {
        v1654 = *((_DWORD *)v1649 + 8);
        if (v1651 == v1654)
        {
          v1655 = *((_DWORD *)v1649 + 9);
          if (v1652 < v1655)
            goto LABEL_2312;
          if (v1655 >= v1652)
            goto LABEL_2308;
        }
        else
        {
          if (v1651 < v1654)
            goto LABEL_2312;
          if (v1654 >= v1651)
            goto LABEL_2308;
        }
      }
      else
      {
        if (v1650 < v1653)
          goto LABEL_2312;
        if (v1653 >= v1650)
          goto LABEL_2308;
      }
      ++v1649;
LABEL_2312:
      v1649 = (uint64_t *)*v1649;
      if (!v1649)
        goto LABEL_2324;
    }
  }
  v1643 = 0;
LABEL_2327:
  *v1640 = v1643;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v133 = v3[453];
  if (v133 >> 30)
    v1658 = 1;
  else
    v1658 = (_DWORD)v133 == v5;
  if (v1658)
    goto LABEL_326;
LABEL_2331:
  v1659 = *(_QWORD *)(v1[2] + 8);
  v1660 = v133 & 0xFFFFFFFFCFFFFFFFLL;
  v1661 = *(_QWORD *)(*(_QWORD *)(v1659 + 8) + 2448);
  v1662 = (unsigned int *)(v1661 + 520 * (v133 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1663 = *v1662;
  if ((_DWORD)v1663)
  {
    v1664 = 0;
    v1665 = 0;
    v1666 = **(_QWORD **)(v1659 + 16);
    v1667 = v1661 + 520 * v1660;
    v1668 = v1667 + 364;
    v1669 = v1667 + 340;
    while (1)
    {
      v1670 = (uint64_t *)(v1668 + 12 * v1664);
      v1671 = *(uint64_t **)(v1666 + 2512);
      if (v1671)
        break;
LABEL_2350:
      *(_WORD *)(v1669 + 2 * v1665) = *(_WORD *)(v1669 + 2 * v1664);
      if (v1664 != v1665)
      {
        v1678 = *v1670;
        v1679 = v1668 + 12 * v1665;
        *(_DWORD *)(v1679 + 8) = *((_DWORD *)v1670 + 2);
        *(_QWORD *)v1679 = v1678;
      }
      ++v1665;
LABEL_2334:
      if (++v1664 == v1663)
        goto LABEL_2353;
    }
    v1672 = *(_DWORD *)v1670;
    v1673 = *((_DWORD *)v1670 + 1);
    v1674 = *((_DWORD *)v1670 + 2);
    while (1)
    {
      v1675 = *((_DWORD *)v1671 + 7);
      if (v1672 == v1675)
      {
        v1676 = *((_DWORD *)v1671 + 8);
        if (v1673 == v1676)
        {
          v1677 = *((_DWORD *)v1671 + 9);
          if (v1674 < v1677)
            goto LABEL_2338;
          if (v1677 >= v1674)
            goto LABEL_2334;
        }
        else
        {
          if (v1673 < v1676)
            goto LABEL_2338;
          if (v1676 >= v1673)
            goto LABEL_2334;
        }
      }
      else
      {
        if (v1672 < v1675)
          goto LABEL_2338;
        if (v1675 >= v1672)
          goto LABEL_2334;
      }
      ++v1671;
LABEL_2338:
      v1671 = (uint64_t *)*v1671;
      if (!v1671)
        goto LABEL_2350;
    }
  }
  v1665 = 0;
LABEL_2353:
  *v1662 = v1665;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v135 = v3[454];
  if (v135 >> 30)
    v1680 = 1;
  else
    v1680 = (_DWORD)v135 == v5;
  if (v1680)
    goto LABEL_331;
LABEL_2357:
  v1681 = *(_QWORD *)(v1[2] + 8);
  v1682 = v135 & 0xFFFFFFFFCFFFFFFFLL;
  v1683 = *(_QWORD *)(*(_QWORD *)(v1681 + 8) + 2448);
  v1684 = (unsigned int *)(v1683 + 520 * (v135 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1685 = *v1684;
  if ((_DWORD)v1685)
  {
    v1686 = 0;
    v1687 = 0;
    v1688 = **(_QWORD **)(v1681 + 16);
    v1689 = v1683 + 520 * v1682;
    v1690 = v1689 + 364;
    v1691 = v1689 + 340;
    while (1)
    {
      v1692 = (uint64_t *)(v1690 + 12 * v1686);
      v1693 = *(uint64_t **)(v1688 + 2512);
      if (v1693)
        break;
LABEL_2376:
      *(_WORD *)(v1691 + 2 * v1687) = *(_WORD *)(v1691 + 2 * v1686);
      if (v1686 != v1687)
      {
        v1700 = *v1692;
        v1701 = v1690 + 12 * v1687;
        *(_DWORD *)(v1701 + 8) = *((_DWORD *)v1692 + 2);
        *(_QWORD *)v1701 = v1700;
      }
      ++v1687;
LABEL_2360:
      if (++v1686 == v1685)
        goto LABEL_2379;
    }
    v1694 = *(_DWORD *)v1692;
    v1695 = *((_DWORD *)v1692 + 1);
    v1696 = *((_DWORD *)v1692 + 2);
    while (1)
    {
      v1697 = *((_DWORD *)v1693 + 7);
      if (v1694 == v1697)
      {
        v1698 = *((_DWORD *)v1693 + 8);
        if (v1695 == v1698)
        {
          v1699 = *((_DWORD *)v1693 + 9);
          if (v1696 < v1699)
            goto LABEL_2364;
          if (v1699 >= v1696)
            goto LABEL_2360;
        }
        else
        {
          if (v1695 < v1698)
            goto LABEL_2364;
          if (v1698 >= v1695)
            goto LABEL_2360;
        }
      }
      else
      {
        if (v1694 < v1697)
          goto LABEL_2364;
        if (v1697 >= v1694)
          goto LABEL_2360;
      }
      ++v1693;
LABEL_2364:
      v1693 = (uint64_t *)*v1693;
      if (!v1693)
        goto LABEL_2376;
    }
  }
  v1687 = 0;
LABEL_2379:
  *v1684 = v1687;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v137 = v3[455];
  if (v137 >> 30)
    v1702 = 1;
  else
    v1702 = (_DWORD)v137 == v5;
  if (v1702)
    goto LABEL_336;
LABEL_2383:
  v1703 = *(_QWORD *)(v1[2] + 8);
  v1704 = v137 & 0xFFFFFFFFCFFFFFFFLL;
  v1705 = *(_QWORD *)(*(_QWORD *)(v1703 + 8) + 2448);
  v1706 = (unsigned int *)(v1705 + 520 * (v137 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1707 = *v1706;
  if ((_DWORD)v1707)
  {
    v1708 = 0;
    v1709 = 0;
    v1710 = **(_QWORD **)(v1703 + 16);
    v1711 = v1705 + 520 * v1704;
    v1712 = v1711 + 364;
    v1713 = v1711 + 340;
    while (1)
    {
      v1714 = (uint64_t *)(v1712 + 12 * v1708);
      v1715 = *(uint64_t **)(v1710 + 2512);
      if (v1715)
        break;
LABEL_2402:
      *(_WORD *)(v1713 + 2 * v1709) = *(_WORD *)(v1713 + 2 * v1708);
      if (v1708 != v1709)
      {
        v1722 = *v1714;
        v1723 = v1712 + 12 * v1709;
        *(_DWORD *)(v1723 + 8) = *((_DWORD *)v1714 + 2);
        *(_QWORD *)v1723 = v1722;
      }
      ++v1709;
LABEL_2386:
      if (++v1708 == v1707)
        goto LABEL_2405;
    }
    v1716 = *(_DWORD *)v1714;
    v1717 = *((_DWORD *)v1714 + 1);
    v1718 = *((_DWORD *)v1714 + 2);
    while (1)
    {
      v1719 = *((_DWORD *)v1715 + 7);
      if (v1716 == v1719)
      {
        v1720 = *((_DWORD *)v1715 + 8);
        if (v1717 == v1720)
        {
          v1721 = *((_DWORD *)v1715 + 9);
          if (v1718 < v1721)
            goto LABEL_2390;
          if (v1721 >= v1718)
            goto LABEL_2386;
        }
        else
        {
          if (v1717 < v1720)
            goto LABEL_2390;
          if (v1720 >= v1717)
            goto LABEL_2386;
        }
      }
      else
      {
        if (v1716 < v1719)
          goto LABEL_2390;
        if (v1719 >= v1716)
          goto LABEL_2386;
      }
      ++v1715;
LABEL_2390:
      v1715 = (uint64_t *)*v1715;
      if (!v1715)
        goto LABEL_2402;
    }
  }
  v1709 = 0;
LABEL_2405:
  *v1706 = v1709;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v139 = v3[456];
  if (v139 >> 30)
    v1724 = 1;
  else
    v1724 = (_DWORD)v139 == v5;
  if (v1724)
    goto LABEL_341;
LABEL_2409:
  v1725 = *(_QWORD *)(v1[2] + 8);
  v1726 = v139 & 0xFFFFFFFFCFFFFFFFLL;
  v1727 = *(_QWORD *)(*(_QWORD *)(v1725 + 8) + 2448);
  v1728 = (unsigned int *)(v1727 + 520 * (v139 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1729 = *v1728;
  if ((_DWORD)v1729)
  {
    v1730 = 0;
    v1731 = 0;
    v1732 = **(_QWORD **)(v1725 + 16);
    v1733 = v1727 + 520 * v1726;
    v1734 = v1733 + 364;
    v1735 = v1733 + 340;
    while (1)
    {
      v1736 = (uint64_t *)(v1734 + 12 * v1730);
      v1737 = *(uint64_t **)(v1732 + 2512);
      if (v1737)
        break;
LABEL_2428:
      *(_WORD *)(v1735 + 2 * v1731) = *(_WORD *)(v1735 + 2 * v1730);
      if (v1730 != v1731)
      {
        v1744 = *v1736;
        v1745 = v1734 + 12 * v1731;
        *(_DWORD *)(v1745 + 8) = *((_DWORD *)v1736 + 2);
        *(_QWORD *)v1745 = v1744;
      }
      ++v1731;
LABEL_2412:
      if (++v1730 == v1729)
        goto LABEL_2431;
    }
    v1738 = *(_DWORD *)v1736;
    v1739 = *((_DWORD *)v1736 + 1);
    v1740 = *((_DWORD *)v1736 + 2);
    while (1)
    {
      v1741 = *((_DWORD *)v1737 + 7);
      if (v1738 == v1741)
      {
        v1742 = *((_DWORD *)v1737 + 8);
        if (v1739 == v1742)
        {
          v1743 = *((_DWORD *)v1737 + 9);
          if (v1740 < v1743)
            goto LABEL_2416;
          if (v1743 >= v1740)
            goto LABEL_2412;
        }
        else
        {
          if (v1739 < v1742)
            goto LABEL_2416;
          if (v1742 >= v1739)
            goto LABEL_2412;
        }
      }
      else
      {
        if (v1738 < v1741)
          goto LABEL_2416;
        if (v1741 >= v1738)
          goto LABEL_2412;
      }
      ++v1737;
LABEL_2416:
      v1737 = (uint64_t *)*v1737;
      if (!v1737)
        goto LABEL_2428;
    }
  }
  v1731 = 0;
LABEL_2431:
  *v1728 = v1731;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v141 = v3[457];
  if (v141 >> 30)
    v1746 = 1;
  else
    v1746 = (_DWORD)v141 == v5;
  if (v1746)
    goto LABEL_346;
LABEL_2435:
  v1747 = *(_QWORD *)(v1[2] + 8);
  v1748 = v141 & 0xFFFFFFFFCFFFFFFFLL;
  v1749 = *(_QWORD *)(*(_QWORD *)(v1747 + 8) + 2448);
  v1750 = (unsigned int *)(v1749 + 520 * (v141 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1751 = *v1750;
  if ((_DWORD)v1751)
  {
    v1752 = 0;
    v1753 = 0;
    v1754 = **(_QWORD **)(v1747 + 16);
    v1755 = v1749 + 520 * v1748;
    v1756 = v1755 + 364;
    v1757 = v1755 + 340;
    while (1)
    {
      v1758 = (uint64_t *)(v1756 + 12 * v1752);
      v1759 = *(uint64_t **)(v1754 + 2512);
      if (v1759)
        break;
LABEL_2454:
      *(_WORD *)(v1757 + 2 * v1753) = *(_WORD *)(v1757 + 2 * v1752);
      if (v1752 != v1753)
      {
        v1766 = *v1758;
        v1767 = v1756 + 12 * v1753;
        *(_DWORD *)(v1767 + 8) = *((_DWORD *)v1758 + 2);
        *(_QWORD *)v1767 = v1766;
      }
      ++v1753;
LABEL_2438:
      if (++v1752 == v1751)
        goto LABEL_2457;
    }
    v1760 = *(_DWORD *)v1758;
    v1761 = *((_DWORD *)v1758 + 1);
    v1762 = *((_DWORD *)v1758 + 2);
    while (1)
    {
      v1763 = *((_DWORD *)v1759 + 7);
      if (v1760 == v1763)
      {
        v1764 = *((_DWORD *)v1759 + 8);
        if (v1761 == v1764)
        {
          v1765 = *((_DWORD *)v1759 + 9);
          if (v1762 < v1765)
            goto LABEL_2442;
          if (v1765 >= v1762)
            goto LABEL_2438;
        }
        else
        {
          if (v1761 < v1764)
            goto LABEL_2442;
          if (v1764 >= v1761)
            goto LABEL_2438;
        }
      }
      else
      {
        if (v1760 < v1763)
          goto LABEL_2442;
        if (v1763 >= v1760)
          goto LABEL_2438;
      }
      ++v1759;
LABEL_2442:
      v1759 = (uint64_t *)*v1759;
      if (!v1759)
        goto LABEL_2454;
    }
  }
  v1753 = 0;
LABEL_2457:
  *v1750 = v1753;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v143 = v3[458];
  if (v143 >> 30)
    v1768 = 1;
  else
    v1768 = (_DWORD)v143 == v5;
  if (v1768)
    goto LABEL_351;
LABEL_2461:
  v1769 = *(_QWORD *)(v1[2] + 8);
  v1770 = v143 & 0xFFFFFFFFCFFFFFFFLL;
  v1771 = *(_QWORD *)(*(_QWORD *)(v1769 + 8) + 2448);
  v1772 = (unsigned int *)(v1771 + 520 * (v143 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1773 = *v1772;
  if ((_DWORD)v1773)
  {
    v1774 = 0;
    v1775 = 0;
    v1776 = **(_QWORD **)(v1769 + 16);
    v1777 = v1771 + 520 * v1770;
    v1778 = v1777 + 364;
    v1779 = v1777 + 340;
    while (1)
    {
      v1780 = (uint64_t *)(v1778 + 12 * v1774);
      v1781 = *(uint64_t **)(v1776 + 2512);
      if (v1781)
        break;
LABEL_2480:
      *(_WORD *)(v1779 + 2 * v1775) = *(_WORD *)(v1779 + 2 * v1774);
      if (v1774 != v1775)
      {
        v1788 = *v1780;
        v1789 = v1778 + 12 * v1775;
        *(_DWORD *)(v1789 + 8) = *((_DWORD *)v1780 + 2);
        *(_QWORD *)v1789 = v1788;
      }
      ++v1775;
LABEL_2464:
      if (++v1774 == v1773)
        goto LABEL_2483;
    }
    v1782 = *(_DWORD *)v1780;
    v1783 = *((_DWORD *)v1780 + 1);
    v1784 = *((_DWORD *)v1780 + 2);
    while (1)
    {
      v1785 = *((_DWORD *)v1781 + 7);
      if (v1782 == v1785)
      {
        v1786 = *((_DWORD *)v1781 + 8);
        if (v1783 == v1786)
        {
          v1787 = *((_DWORD *)v1781 + 9);
          if (v1784 < v1787)
            goto LABEL_2468;
          if (v1787 >= v1784)
            goto LABEL_2464;
        }
        else
        {
          if (v1783 < v1786)
            goto LABEL_2468;
          if (v1786 >= v1783)
            goto LABEL_2464;
        }
      }
      else
      {
        if (v1782 < v1785)
          goto LABEL_2468;
        if (v1785 >= v1782)
          goto LABEL_2464;
      }
      ++v1781;
LABEL_2468:
      v1781 = (uint64_t *)*v1781;
      if (!v1781)
        goto LABEL_2480;
    }
  }
  v1775 = 0;
LABEL_2483:
  *v1772 = v1775;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v145 = v3[459];
  if (v145 >> 30)
    v1790 = 1;
  else
    v1790 = (_DWORD)v145 == v5;
  if (v1790)
    goto LABEL_356;
LABEL_2487:
  v1791 = *(_QWORD *)(v1[2] + 8);
  v1792 = v145 & 0xFFFFFFFFCFFFFFFFLL;
  v1793 = *(_QWORD *)(*(_QWORD *)(v1791 + 8) + 2448);
  v1794 = (unsigned int *)(v1793 + 520 * (v145 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1795 = *v1794;
  if ((_DWORD)v1795)
  {
    v1796 = 0;
    v1797 = 0;
    v1798 = **(_QWORD **)(v1791 + 16);
    v1799 = v1793 + 520 * v1792;
    v1800 = v1799 + 364;
    v1801 = v1799 + 340;
    while (1)
    {
      v1802 = (uint64_t *)(v1800 + 12 * v1796);
      v1803 = *(uint64_t **)(v1798 + 2512);
      if (v1803)
        break;
LABEL_2506:
      *(_WORD *)(v1801 + 2 * v1797) = *(_WORD *)(v1801 + 2 * v1796);
      if (v1796 != v1797)
      {
        v1810 = *v1802;
        v1811 = v1800 + 12 * v1797;
        *(_DWORD *)(v1811 + 8) = *((_DWORD *)v1802 + 2);
        *(_QWORD *)v1811 = v1810;
      }
      ++v1797;
LABEL_2490:
      if (++v1796 == v1795)
        goto LABEL_2509;
    }
    v1804 = *(_DWORD *)v1802;
    v1805 = *((_DWORD *)v1802 + 1);
    v1806 = *((_DWORD *)v1802 + 2);
    while (1)
    {
      v1807 = *((_DWORD *)v1803 + 7);
      if (v1804 == v1807)
      {
        v1808 = *((_DWORD *)v1803 + 8);
        if (v1805 == v1808)
        {
          v1809 = *((_DWORD *)v1803 + 9);
          if (v1806 < v1809)
            goto LABEL_2494;
          if (v1809 >= v1806)
            goto LABEL_2490;
        }
        else
        {
          if (v1805 < v1808)
            goto LABEL_2494;
          if (v1808 >= v1805)
            goto LABEL_2490;
        }
      }
      else
      {
        if (v1804 < v1807)
          goto LABEL_2494;
        if (v1807 >= v1804)
          goto LABEL_2490;
      }
      ++v1803;
LABEL_2494:
      v1803 = (uint64_t *)*v1803;
      if (!v1803)
        goto LABEL_2506;
    }
  }
  v1797 = 0;
LABEL_2509:
  *v1794 = v1797;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v147 = v3[460];
  if (v147 >> 30)
    v1812 = 1;
  else
    v1812 = (_DWORD)v147 == v5;
  if (v1812)
    goto LABEL_361;
LABEL_2513:
  v1813 = *(_QWORD *)(v1[2] + 8);
  v1814 = v147 & 0xFFFFFFFFCFFFFFFFLL;
  v1815 = *(_QWORD *)(*(_QWORD *)(v1813 + 8) + 2448);
  v1816 = (unsigned int *)(v1815 + 520 * (v147 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1817 = *v1816;
  if ((_DWORD)v1817)
  {
    v1818 = 0;
    v1819 = 0;
    v1820 = **(_QWORD **)(v1813 + 16);
    v1821 = v1815 + 520 * v1814;
    v1822 = v1821 + 364;
    v1823 = v1821 + 340;
    while (1)
    {
      v1824 = (uint64_t *)(v1822 + 12 * v1818);
      v1825 = *(uint64_t **)(v1820 + 2512);
      if (v1825)
        break;
LABEL_2532:
      *(_WORD *)(v1823 + 2 * v1819) = *(_WORD *)(v1823 + 2 * v1818);
      if (v1818 != v1819)
      {
        v1832 = *v1824;
        v1833 = v1822 + 12 * v1819;
        *(_DWORD *)(v1833 + 8) = *((_DWORD *)v1824 + 2);
        *(_QWORD *)v1833 = v1832;
      }
      ++v1819;
LABEL_2516:
      if (++v1818 == v1817)
        goto LABEL_2535;
    }
    v1826 = *(_DWORD *)v1824;
    v1827 = *((_DWORD *)v1824 + 1);
    v1828 = *((_DWORD *)v1824 + 2);
    while (1)
    {
      v1829 = *((_DWORD *)v1825 + 7);
      if (v1826 == v1829)
      {
        v1830 = *((_DWORD *)v1825 + 8);
        if (v1827 == v1830)
        {
          v1831 = *((_DWORD *)v1825 + 9);
          if (v1828 < v1831)
            goto LABEL_2520;
          if (v1831 >= v1828)
            goto LABEL_2516;
        }
        else
        {
          if (v1827 < v1830)
            goto LABEL_2520;
          if (v1830 >= v1827)
            goto LABEL_2516;
        }
      }
      else
      {
        if (v1826 < v1829)
          goto LABEL_2520;
        if (v1829 >= v1826)
          goto LABEL_2516;
      }
      ++v1825;
LABEL_2520:
      v1825 = (uint64_t *)*v1825;
      if (!v1825)
        goto LABEL_2532;
    }
  }
  v1819 = 0;
LABEL_2535:
  *v1816 = v1819;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v149 = v3[461];
  if (v149 >> 30)
    v1834 = 1;
  else
    v1834 = (_DWORD)v149 == v5;
  if (v1834)
    goto LABEL_366;
LABEL_2539:
  v1835 = *(_QWORD *)(v1[2] + 8);
  v1836 = v149 & 0xFFFFFFFFCFFFFFFFLL;
  v1837 = *(_QWORD *)(*(_QWORD *)(v1835 + 8) + 2448);
  v1838 = (unsigned int *)(v1837 + 520 * (v149 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1839 = *v1838;
  if ((_DWORD)v1839)
  {
    v1840 = 0;
    v1841 = 0;
    v1842 = **(_QWORD **)(v1835 + 16);
    v1843 = v1837 + 520 * v1836;
    v1844 = v1843 + 364;
    v1845 = v1843 + 340;
    while (1)
    {
      v1846 = (uint64_t *)(v1844 + 12 * v1840);
      v1847 = *(uint64_t **)(v1842 + 2512);
      if (v1847)
        break;
LABEL_2558:
      *(_WORD *)(v1845 + 2 * v1841) = *(_WORD *)(v1845 + 2 * v1840);
      if (v1840 != v1841)
      {
        v1854 = *v1846;
        v1855 = v1844 + 12 * v1841;
        *(_DWORD *)(v1855 + 8) = *((_DWORD *)v1846 + 2);
        *(_QWORD *)v1855 = v1854;
      }
      ++v1841;
LABEL_2542:
      if (++v1840 == v1839)
        goto LABEL_2561;
    }
    v1848 = *(_DWORD *)v1846;
    v1849 = *((_DWORD *)v1846 + 1);
    v1850 = *((_DWORD *)v1846 + 2);
    while (1)
    {
      v1851 = *((_DWORD *)v1847 + 7);
      if (v1848 == v1851)
      {
        v1852 = *((_DWORD *)v1847 + 8);
        if (v1849 == v1852)
        {
          v1853 = *((_DWORD *)v1847 + 9);
          if (v1850 < v1853)
            goto LABEL_2546;
          if (v1853 >= v1850)
            goto LABEL_2542;
        }
        else
        {
          if (v1849 < v1852)
            goto LABEL_2546;
          if (v1852 >= v1849)
            goto LABEL_2542;
        }
      }
      else
      {
        if (v1848 < v1851)
          goto LABEL_2546;
        if (v1851 >= v1848)
          goto LABEL_2542;
      }
      ++v1847;
LABEL_2546:
      v1847 = (uint64_t *)*v1847;
      if (!v1847)
        goto LABEL_2558;
    }
  }
  v1841 = 0;
LABEL_2561:
  *v1838 = v1841;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v151 = v3[462];
  if (v151 >> 30)
    v1856 = 1;
  else
    v1856 = (_DWORD)v151 == v5;
  if (v1856)
    goto LABEL_371;
LABEL_2565:
  v1857 = *(_QWORD *)(v1[2] + 8);
  v1858 = v151 & 0xFFFFFFFFCFFFFFFFLL;
  v1859 = *(_QWORD *)(*(_QWORD *)(v1857 + 8) + 2448);
  v1860 = (unsigned int *)(v1859 + 520 * (v151 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1861 = *v1860;
  if ((_DWORD)v1861)
  {
    v1862 = 0;
    v1863 = 0;
    v1864 = **(_QWORD **)(v1857 + 16);
    v1865 = v1859 + 520 * v1858;
    v1866 = v1865 + 364;
    v1867 = v1865 + 340;
    while (1)
    {
      v1868 = (uint64_t *)(v1866 + 12 * v1862);
      v1869 = *(uint64_t **)(v1864 + 2512);
      if (v1869)
        break;
LABEL_2584:
      *(_WORD *)(v1867 + 2 * v1863) = *(_WORD *)(v1867 + 2 * v1862);
      if (v1862 != v1863)
      {
        v1876 = *v1868;
        v1877 = v1866 + 12 * v1863;
        *(_DWORD *)(v1877 + 8) = *((_DWORD *)v1868 + 2);
        *(_QWORD *)v1877 = v1876;
      }
      ++v1863;
LABEL_2568:
      if (++v1862 == v1861)
        goto LABEL_2587;
    }
    v1870 = *(_DWORD *)v1868;
    v1871 = *((_DWORD *)v1868 + 1);
    v1872 = *((_DWORD *)v1868 + 2);
    while (1)
    {
      v1873 = *((_DWORD *)v1869 + 7);
      if (v1870 == v1873)
      {
        v1874 = *((_DWORD *)v1869 + 8);
        if (v1871 == v1874)
        {
          v1875 = *((_DWORD *)v1869 + 9);
          if (v1872 < v1875)
            goto LABEL_2572;
          if (v1875 >= v1872)
            goto LABEL_2568;
        }
        else
        {
          if (v1871 < v1874)
            goto LABEL_2572;
          if (v1874 >= v1871)
            goto LABEL_2568;
        }
      }
      else
      {
        if (v1870 < v1873)
          goto LABEL_2572;
        if (v1873 >= v1870)
          goto LABEL_2568;
      }
      ++v1869;
LABEL_2572:
      v1869 = (uint64_t *)*v1869;
      if (!v1869)
        goto LABEL_2584;
    }
  }
  v1863 = 0;
LABEL_2587:
  *v1860 = v1863;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v153 = v3[463];
  if (v153 >> 30)
    v1878 = 1;
  else
    v1878 = (_DWORD)v153 == v5;
  if (v1878)
    goto LABEL_376;
LABEL_2591:
  v1879 = *(_QWORD *)(v1[2] + 8);
  v1880 = v153 & 0xFFFFFFFFCFFFFFFFLL;
  v1881 = *(_QWORD *)(*(_QWORD *)(v1879 + 8) + 2448);
  v1882 = (unsigned int *)(v1881 + 520 * (v153 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1883 = *v1882;
  if ((_DWORD)v1883)
  {
    v1884 = 0;
    v1885 = 0;
    v1886 = **(_QWORD **)(v1879 + 16);
    v1887 = v1881 + 520 * v1880;
    v1888 = v1887 + 364;
    v1889 = v1887 + 340;
    while (1)
    {
      v1890 = (uint64_t *)(v1888 + 12 * v1884);
      v1891 = *(uint64_t **)(v1886 + 2512);
      if (v1891)
        break;
LABEL_2610:
      *(_WORD *)(v1889 + 2 * v1885) = *(_WORD *)(v1889 + 2 * v1884);
      if (v1884 != v1885)
      {
        v1898 = *v1890;
        v1899 = v1888 + 12 * v1885;
        *(_DWORD *)(v1899 + 8) = *((_DWORD *)v1890 + 2);
        *(_QWORD *)v1899 = v1898;
      }
      ++v1885;
LABEL_2594:
      if (++v1884 == v1883)
        goto LABEL_2613;
    }
    v1892 = *(_DWORD *)v1890;
    v1893 = *((_DWORD *)v1890 + 1);
    v1894 = *((_DWORD *)v1890 + 2);
    while (1)
    {
      v1895 = *((_DWORD *)v1891 + 7);
      if (v1892 == v1895)
      {
        v1896 = *((_DWORD *)v1891 + 8);
        if (v1893 == v1896)
        {
          v1897 = *((_DWORD *)v1891 + 9);
          if (v1894 < v1897)
            goto LABEL_2598;
          if (v1897 >= v1894)
            goto LABEL_2594;
        }
        else
        {
          if (v1893 < v1896)
            goto LABEL_2598;
          if (v1896 >= v1893)
            goto LABEL_2594;
        }
      }
      else
      {
        if (v1892 < v1895)
          goto LABEL_2598;
        if (v1895 >= v1892)
          goto LABEL_2594;
      }
      ++v1891;
LABEL_2598:
      v1891 = (uint64_t *)*v1891;
      if (!v1891)
        goto LABEL_2610;
    }
  }
  v1885 = 0;
LABEL_2613:
  *v1882 = v1885;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v155 = v3[464];
  if (v155 >> 30)
    v1900 = 1;
  else
    v1900 = (_DWORD)v155 == v5;
  if (v1900)
    goto LABEL_381;
LABEL_2617:
  v1901 = *(_QWORD *)(v1[2] + 8);
  v1902 = v155 & 0xFFFFFFFFCFFFFFFFLL;
  v1903 = *(_QWORD *)(*(_QWORD *)(v1901 + 8) + 2448);
  v1904 = (unsigned int *)(v1903 + 520 * (v155 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1905 = *v1904;
  if ((_DWORD)v1905)
  {
    v1906 = 0;
    v1907 = 0;
    v1908 = **(_QWORD **)(v1901 + 16);
    v1909 = v1903 + 520 * v1902;
    v1910 = v1909 + 364;
    v1911 = v1909 + 340;
    while (1)
    {
      v1912 = (uint64_t *)(v1910 + 12 * v1906);
      v1913 = *(uint64_t **)(v1908 + 2512);
      if (v1913)
        break;
LABEL_2636:
      *(_WORD *)(v1911 + 2 * v1907) = *(_WORD *)(v1911 + 2 * v1906);
      if (v1906 != v1907)
      {
        v1920 = *v1912;
        v1921 = v1910 + 12 * v1907;
        *(_DWORD *)(v1921 + 8) = *((_DWORD *)v1912 + 2);
        *(_QWORD *)v1921 = v1920;
      }
      ++v1907;
LABEL_2620:
      if (++v1906 == v1905)
        goto LABEL_2639;
    }
    v1914 = *(_DWORD *)v1912;
    v1915 = *((_DWORD *)v1912 + 1);
    v1916 = *((_DWORD *)v1912 + 2);
    while (1)
    {
      v1917 = *((_DWORD *)v1913 + 7);
      if (v1914 == v1917)
      {
        v1918 = *((_DWORD *)v1913 + 8);
        if (v1915 == v1918)
        {
          v1919 = *((_DWORD *)v1913 + 9);
          if (v1916 < v1919)
            goto LABEL_2624;
          if (v1919 >= v1916)
            goto LABEL_2620;
        }
        else
        {
          if (v1915 < v1918)
            goto LABEL_2624;
          if (v1918 >= v1915)
            goto LABEL_2620;
        }
      }
      else
      {
        if (v1914 < v1917)
          goto LABEL_2624;
        if (v1917 >= v1914)
          goto LABEL_2620;
      }
      ++v1913;
LABEL_2624:
      v1913 = (uint64_t *)*v1913;
      if (!v1913)
        goto LABEL_2636;
    }
  }
  v1907 = 0;
LABEL_2639:
  *v1904 = v1907;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v157 = v3[465];
  if (v157 >> 30)
    v1922 = 1;
  else
    v1922 = (_DWORD)v157 == v5;
  if (v1922)
    goto LABEL_386;
LABEL_2643:
  v1923 = *(_QWORD *)(v1[2] + 8);
  v1924 = v157 & 0xFFFFFFFFCFFFFFFFLL;
  v1925 = *(_QWORD *)(*(_QWORD *)(v1923 + 8) + 2448);
  v1926 = (unsigned int *)(v1925 + 520 * (v157 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1927 = *v1926;
  if ((_DWORD)v1927)
  {
    v1928 = 0;
    v1929 = 0;
    v1930 = **(_QWORD **)(v1923 + 16);
    v1931 = v1925 + 520 * v1924;
    v1932 = v1931 + 364;
    v1933 = v1931 + 340;
    while (1)
    {
      v1934 = (uint64_t *)(v1932 + 12 * v1928);
      v1935 = *(uint64_t **)(v1930 + 2512);
      if (v1935)
        break;
LABEL_2662:
      *(_WORD *)(v1933 + 2 * v1929) = *(_WORD *)(v1933 + 2 * v1928);
      if (v1928 != v1929)
      {
        v1942 = *v1934;
        v1943 = v1932 + 12 * v1929;
        *(_DWORD *)(v1943 + 8) = *((_DWORD *)v1934 + 2);
        *(_QWORD *)v1943 = v1942;
      }
      ++v1929;
LABEL_2646:
      if (++v1928 == v1927)
        goto LABEL_2665;
    }
    v1936 = *(_DWORD *)v1934;
    v1937 = *((_DWORD *)v1934 + 1);
    v1938 = *((_DWORD *)v1934 + 2);
    while (1)
    {
      v1939 = *((_DWORD *)v1935 + 7);
      if (v1936 == v1939)
      {
        v1940 = *((_DWORD *)v1935 + 8);
        if (v1937 == v1940)
        {
          v1941 = *((_DWORD *)v1935 + 9);
          if (v1938 < v1941)
            goto LABEL_2650;
          if (v1941 >= v1938)
            goto LABEL_2646;
        }
        else
        {
          if (v1937 < v1940)
            goto LABEL_2650;
          if (v1940 >= v1937)
            goto LABEL_2646;
        }
      }
      else
      {
        if (v1936 < v1939)
          goto LABEL_2650;
        if (v1939 >= v1936)
          goto LABEL_2646;
      }
      ++v1935;
LABEL_2650:
      v1935 = (uint64_t *)*v1935;
      if (!v1935)
        goto LABEL_2662;
    }
  }
  v1929 = 0;
LABEL_2665:
  *v1926 = v1929;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v159 = v3[466];
  if (v159 >> 30)
    v1944 = 1;
  else
    v1944 = (_DWORD)v159 == v5;
  if (v1944)
    goto LABEL_391;
LABEL_2669:
  v1945 = *(_QWORD *)(v1[2] + 8);
  v1946 = v159 & 0xFFFFFFFFCFFFFFFFLL;
  v1947 = *(_QWORD *)(*(_QWORD *)(v1945 + 8) + 2448);
  v1948 = (unsigned int *)(v1947 + 520 * (v159 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1949 = *v1948;
  if ((_DWORD)v1949)
  {
    v1950 = 0;
    v1951 = 0;
    v1952 = **(_QWORD **)(v1945 + 16);
    v1953 = v1947 + 520 * v1946;
    v1954 = v1953 + 364;
    v1955 = v1953 + 340;
    while (1)
    {
      v1956 = (uint64_t *)(v1954 + 12 * v1950);
      v1957 = *(uint64_t **)(v1952 + 2512);
      if (v1957)
        break;
LABEL_2688:
      *(_WORD *)(v1955 + 2 * v1951) = *(_WORD *)(v1955 + 2 * v1950);
      if (v1950 != v1951)
      {
        v1964 = *v1956;
        v1965 = v1954 + 12 * v1951;
        *(_DWORD *)(v1965 + 8) = *((_DWORD *)v1956 + 2);
        *(_QWORD *)v1965 = v1964;
      }
      ++v1951;
LABEL_2672:
      if (++v1950 == v1949)
        goto LABEL_2691;
    }
    v1958 = *(_DWORD *)v1956;
    v1959 = *((_DWORD *)v1956 + 1);
    v1960 = *((_DWORD *)v1956 + 2);
    while (1)
    {
      v1961 = *((_DWORD *)v1957 + 7);
      if (v1958 == v1961)
      {
        v1962 = *((_DWORD *)v1957 + 8);
        if (v1959 == v1962)
        {
          v1963 = *((_DWORD *)v1957 + 9);
          if (v1960 < v1963)
            goto LABEL_2676;
          if (v1963 >= v1960)
            goto LABEL_2672;
        }
        else
        {
          if (v1959 < v1962)
            goto LABEL_2676;
          if (v1962 >= v1959)
            goto LABEL_2672;
        }
      }
      else
      {
        if (v1958 < v1961)
          goto LABEL_2676;
        if (v1961 >= v1958)
          goto LABEL_2672;
      }
      ++v1957;
LABEL_2676:
      v1957 = (uint64_t *)*v1957;
      if (!v1957)
        goto LABEL_2688;
    }
  }
  v1951 = 0;
LABEL_2691:
  *v1948 = v1951;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v161 = v3[467];
  if (v161 >> 30)
    v1966 = 1;
  else
    v1966 = (_DWORD)v161 == v5;
  if (v1966)
    goto LABEL_396;
LABEL_2695:
  v1967 = *(_QWORD *)(v1[2] + 8);
  v1968 = v161 & 0xFFFFFFFFCFFFFFFFLL;
  v1969 = *(_QWORD *)(*(_QWORD *)(v1967 + 8) + 2448);
  v1970 = (unsigned int *)(v1969 + 520 * (v161 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1971 = *v1970;
  if ((_DWORD)v1971)
  {
    v1972 = 0;
    v1973 = 0;
    v1974 = **(_QWORD **)(v1967 + 16);
    v1975 = v1969 + 520 * v1968;
    v1976 = v1975 + 364;
    v1977 = v1975 + 340;
    while (1)
    {
      v1978 = (uint64_t *)(v1976 + 12 * v1972);
      v1979 = *(uint64_t **)(v1974 + 2512);
      if (v1979)
        break;
LABEL_2714:
      *(_WORD *)(v1977 + 2 * v1973) = *(_WORD *)(v1977 + 2 * v1972);
      if (v1972 != v1973)
      {
        v1986 = *v1978;
        v1987 = v1976 + 12 * v1973;
        *(_DWORD *)(v1987 + 8) = *((_DWORD *)v1978 + 2);
        *(_QWORD *)v1987 = v1986;
      }
      ++v1973;
LABEL_2698:
      if (++v1972 == v1971)
        goto LABEL_2717;
    }
    v1980 = *(_DWORD *)v1978;
    v1981 = *((_DWORD *)v1978 + 1);
    v1982 = *((_DWORD *)v1978 + 2);
    while (1)
    {
      v1983 = *((_DWORD *)v1979 + 7);
      if (v1980 == v1983)
      {
        v1984 = *((_DWORD *)v1979 + 8);
        if (v1981 == v1984)
        {
          v1985 = *((_DWORD *)v1979 + 9);
          if (v1982 < v1985)
            goto LABEL_2702;
          if (v1985 >= v1982)
            goto LABEL_2698;
        }
        else
        {
          if (v1981 < v1984)
            goto LABEL_2702;
          if (v1984 >= v1981)
            goto LABEL_2698;
        }
      }
      else
      {
        if (v1980 < v1983)
          goto LABEL_2702;
        if (v1983 >= v1980)
          goto LABEL_2698;
      }
      ++v1979;
LABEL_2702:
      v1979 = (uint64_t *)*v1979;
      if (!v1979)
        goto LABEL_2714;
    }
  }
  v1973 = 0;
LABEL_2717:
  *v1970 = v1973;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v163 = v3[468];
  if (v163 >> 30)
    v1988 = 1;
  else
    v1988 = (_DWORD)v163 == v5;
  if (v1988)
    goto LABEL_401;
LABEL_2721:
  v1989 = *(_QWORD *)(v1[2] + 8);
  v1990 = v163 & 0xFFFFFFFFCFFFFFFFLL;
  v1991 = *(_QWORD *)(*(_QWORD *)(v1989 + 8) + 2448);
  v1992 = (unsigned int *)(v1991 + 520 * (v163 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1993 = *v1992;
  if ((_DWORD)v1993)
  {
    v1994 = 0;
    v1995 = 0;
    v1996 = **(_QWORD **)(v1989 + 16);
    v1997 = v1991 + 520 * v1990;
    v1998 = v1997 + 364;
    v1999 = v1997 + 340;
    while (1)
    {
      v2000 = (uint64_t *)(v1998 + 12 * v1994);
      v2001 = *(uint64_t **)(v1996 + 2512);
      if (v2001)
        break;
LABEL_2740:
      *(_WORD *)(v1999 + 2 * v1995) = *(_WORD *)(v1999 + 2 * v1994);
      if (v1994 != v1995)
      {
        v2008 = *v2000;
        v2009 = v1998 + 12 * v1995;
        *(_DWORD *)(v2009 + 8) = *((_DWORD *)v2000 + 2);
        *(_QWORD *)v2009 = v2008;
      }
      ++v1995;
LABEL_2724:
      if (++v1994 == v1993)
        goto LABEL_2743;
    }
    v2002 = *(_DWORD *)v2000;
    v2003 = *((_DWORD *)v2000 + 1);
    v2004 = *((_DWORD *)v2000 + 2);
    while (1)
    {
      v2005 = *((_DWORD *)v2001 + 7);
      if (v2002 == v2005)
      {
        v2006 = *((_DWORD *)v2001 + 8);
        if (v2003 == v2006)
        {
          v2007 = *((_DWORD *)v2001 + 9);
          if (v2004 < v2007)
            goto LABEL_2728;
          if (v2007 >= v2004)
            goto LABEL_2724;
        }
        else
        {
          if (v2003 < v2006)
            goto LABEL_2728;
          if (v2006 >= v2003)
            goto LABEL_2724;
        }
      }
      else
      {
        if (v2002 < v2005)
          goto LABEL_2728;
        if (v2005 >= v2002)
          goto LABEL_2724;
      }
      ++v2001;
LABEL_2728:
      v2001 = (uint64_t *)*v2001;
      if (!v2001)
        goto LABEL_2740;
    }
  }
  v1995 = 0;
LABEL_2743:
  *v1992 = v1995;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v165 = v3[469];
  if (v165 >> 30)
    v2010 = 1;
  else
    v2010 = (_DWORD)v165 == v5;
  if (v2010)
    goto LABEL_406;
LABEL_2747:
  v2011 = *(_QWORD *)(v1[2] + 8);
  v2012 = v165 & 0xFFFFFFFFCFFFFFFFLL;
  v2013 = *(_QWORD *)(*(_QWORD *)(v2011 + 8) + 2448);
  v2014 = (unsigned int *)(v2013 + 520 * (v165 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2015 = *v2014;
  if ((_DWORD)v2015)
  {
    v2016 = 0;
    v2017 = 0;
    v2018 = **(_QWORD **)(v2011 + 16);
    v2019 = v2013 + 520 * v2012;
    v2020 = v2019 + 364;
    v2021 = v2019 + 340;
    while (1)
    {
      v2022 = (uint64_t *)(v2020 + 12 * v2016);
      v2023 = *(uint64_t **)(v2018 + 2512);
      if (v2023)
        break;
LABEL_2766:
      *(_WORD *)(v2021 + 2 * v2017) = *(_WORD *)(v2021 + 2 * v2016);
      if (v2016 != v2017)
      {
        v2030 = *v2022;
        v2031 = v2020 + 12 * v2017;
        *(_DWORD *)(v2031 + 8) = *((_DWORD *)v2022 + 2);
        *(_QWORD *)v2031 = v2030;
      }
      ++v2017;
LABEL_2750:
      if (++v2016 == v2015)
        goto LABEL_2769;
    }
    v2024 = *(_DWORD *)v2022;
    v2025 = *((_DWORD *)v2022 + 1);
    v2026 = *((_DWORD *)v2022 + 2);
    while (1)
    {
      v2027 = *((_DWORD *)v2023 + 7);
      if (v2024 == v2027)
      {
        v2028 = *((_DWORD *)v2023 + 8);
        if (v2025 == v2028)
        {
          v2029 = *((_DWORD *)v2023 + 9);
          if (v2026 < v2029)
            goto LABEL_2754;
          if (v2029 >= v2026)
            goto LABEL_2750;
        }
        else
        {
          if (v2025 < v2028)
            goto LABEL_2754;
          if (v2028 >= v2025)
            goto LABEL_2750;
        }
      }
      else
      {
        if (v2024 < v2027)
          goto LABEL_2754;
        if (v2027 >= v2024)
          goto LABEL_2750;
      }
      ++v2023;
LABEL_2754:
      v2023 = (uint64_t *)*v2023;
      if (!v2023)
        goto LABEL_2766;
    }
  }
  v2017 = 0;
LABEL_2769:
  *v2014 = v2017;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v167 = v3[470];
  if (v167 >> 30)
    v2032 = 1;
  else
    v2032 = (_DWORD)v167 == v5;
  if (v2032)
    goto LABEL_411;
LABEL_2773:
  v2033 = *(_QWORD *)(v1[2] + 8);
  v2034 = v167 & 0xFFFFFFFFCFFFFFFFLL;
  v2035 = *(_QWORD *)(*(_QWORD *)(v2033 + 8) + 2448);
  v2036 = (unsigned int *)(v2035 + 520 * (v167 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2037 = *v2036;
  if ((_DWORD)v2037)
  {
    v2038 = 0;
    v2039 = 0;
    v2040 = **(_QWORD **)(v2033 + 16);
    v2041 = v2035 + 520 * v2034;
    v2042 = v2041 + 364;
    v2043 = v2041 + 340;
    while (1)
    {
      v2044 = (uint64_t *)(v2042 + 12 * v2038);
      v2045 = *(uint64_t **)(v2040 + 2512);
      if (v2045)
        break;
LABEL_2792:
      *(_WORD *)(v2043 + 2 * v2039) = *(_WORD *)(v2043 + 2 * v2038);
      if (v2038 != v2039)
      {
        v2052 = *v2044;
        v2053 = v2042 + 12 * v2039;
        *(_DWORD *)(v2053 + 8) = *((_DWORD *)v2044 + 2);
        *(_QWORD *)v2053 = v2052;
      }
      ++v2039;
LABEL_2776:
      if (++v2038 == v2037)
        goto LABEL_2795;
    }
    v2046 = *(_DWORD *)v2044;
    v2047 = *((_DWORD *)v2044 + 1);
    v2048 = *((_DWORD *)v2044 + 2);
    while (1)
    {
      v2049 = *((_DWORD *)v2045 + 7);
      if (v2046 == v2049)
      {
        v2050 = *((_DWORD *)v2045 + 8);
        if (v2047 == v2050)
        {
          v2051 = *((_DWORD *)v2045 + 9);
          if (v2048 < v2051)
            goto LABEL_2780;
          if (v2051 >= v2048)
            goto LABEL_2776;
        }
        else
        {
          if (v2047 < v2050)
            goto LABEL_2780;
          if (v2050 >= v2047)
            goto LABEL_2776;
        }
      }
      else
      {
        if (v2046 < v2049)
          goto LABEL_2780;
        if (v2049 >= v2046)
          goto LABEL_2776;
      }
      ++v2045;
LABEL_2780:
      v2045 = (uint64_t *)*v2045;
      if (!v2045)
        goto LABEL_2792;
    }
  }
  v2039 = 0;
LABEL_2795:
  *v2036 = v2039;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v169 = v3[471];
  if (v169 >> 30)
    v2054 = 1;
  else
    v2054 = (_DWORD)v169 == v5;
  if (v2054)
    goto LABEL_416;
LABEL_2799:
  v2055 = *(_QWORD *)(v1[2] + 8);
  v2056 = v169 & 0xFFFFFFFFCFFFFFFFLL;
  v2057 = *(_QWORD *)(*(_QWORD *)(v2055 + 8) + 2448);
  v2058 = (unsigned int *)(v2057 + 520 * (v169 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2059 = *v2058;
  if ((_DWORD)v2059)
  {
    v2060 = 0;
    v2061 = 0;
    v2062 = **(_QWORD **)(v2055 + 16);
    v2063 = v2057 + 520 * v2056;
    v2064 = v2063 + 364;
    v2065 = v2063 + 340;
    while (1)
    {
      v2066 = (uint64_t *)(v2064 + 12 * v2060);
      v2067 = *(uint64_t **)(v2062 + 2512);
      if (v2067)
        break;
LABEL_2818:
      *(_WORD *)(v2065 + 2 * v2061) = *(_WORD *)(v2065 + 2 * v2060);
      if (v2060 != v2061)
      {
        v2074 = *v2066;
        v2075 = v2064 + 12 * v2061;
        *(_DWORD *)(v2075 + 8) = *((_DWORD *)v2066 + 2);
        *(_QWORD *)v2075 = v2074;
      }
      ++v2061;
LABEL_2802:
      if (++v2060 == v2059)
        goto LABEL_2821;
    }
    v2068 = *(_DWORD *)v2066;
    v2069 = *((_DWORD *)v2066 + 1);
    v2070 = *((_DWORD *)v2066 + 2);
    while (1)
    {
      v2071 = *((_DWORD *)v2067 + 7);
      if (v2068 == v2071)
      {
        v2072 = *((_DWORD *)v2067 + 8);
        if (v2069 == v2072)
        {
          v2073 = *((_DWORD *)v2067 + 9);
          if (v2070 < v2073)
            goto LABEL_2806;
          if (v2073 >= v2070)
            goto LABEL_2802;
        }
        else
        {
          if (v2069 < v2072)
            goto LABEL_2806;
          if (v2072 >= v2069)
            goto LABEL_2802;
        }
      }
      else
      {
        if (v2068 < v2071)
          goto LABEL_2806;
        if (v2071 >= v2068)
          goto LABEL_2802;
      }
      ++v2067;
LABEL_2806:
      v2067 = (uint64_t *)*v2067;
      if (!v2067)
        goto LABEL_2818;
    }
  }
  v2061 = 0;
LABEL_2821:
  *v2058 = v2061;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v171 = v3[472];
  if (v171 >> 30)
    v2076 = 1;
  else
    v2076 = (_DWORD)v171 == v5;
  if (v2076)
    goto LABEL_421;
LABEL_2825:
  v2077 = *(_QWORD *)(v1[2] + 8);
  v2078 = v171 & 0xFFFFFFFFCFFFFFFFLL;
  v2079 = *(_QWORD *)(*(_QWORD *)(v2077 + 8) + 2448);
  v2080 = (unsigned int *)(v2079 + 520 * (v171 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2081 = *v2080;
  if ((_DWORD)v2081)
  {
    v2082 = 0;
    v2083 = 0;
    v2084 = **(_QWORD **)(v2077 + 16);
    v2085 = v2079 + 520 * v2078;
    v2086 = v2085 + 364;
    v2087 = v2085 + 340;
    while (1)
    {
      v2088 = (uint64_t *)(v2086 + 12 * v2082);
      v2089 = *(uint64_t **)(v2084 + 2512);
      if (v2089)
        break;
LABEL_2844:
      *(_WORD *)(v2087 + 2 * v2083) = *(_WORD *)(v2087 + 2 * v2082);
      if (v2082 != v2083)
      {
        v2096 = *v2088;
        v2097 = v2086 + 12 * v2083;
        *(_DWORD *)(v2097 + 8) = *((_DWORD *)v2088 + 2);
        *(_QWORD *)v2097 = v2096;
      }
      ++v2083;
LABEL_2828:
      if (++v2082 == v2081)
        goto LABEL_2847;
    }
    v2090 = *(_DWORD *)v2088;
    v2091 = *((_DWORD *)v2088 + 1);
    v2092 = *((_DWORD *)v2088 + 2);
    while (1)
    {
      v2093 = *((_DWORD *)v2089 + 7);
      if (v2090 == v2093)
      {
        v2094 = *((_DWORD *)v2089 + 8);
        if (v2091 == v2094)
        {
          v2095 = *((_DWORD *)v2089 + 9);
          if (v2092 < v2095)
            goto LABEL_2832;
          if (v2095 >= v2092)
            goto LABEL_2828;
        }
        else
        {
          if (v2091 < v2094)
            goto LABEL_2832;
          if (v2094 >= v2091)
            goto LABEL_2828;
        }
      }
      else
      {
        if (v2090 < v2093)
          goto LABEL_2832;
        if (v2093 >= v2090)
          goto LABEL_2828;
      }
      ++v2089;
LABEL_2832:
      v2089 = (uint64_t *)*v2089;
      if (!v2089)
        goto LABEL_2844;
    }
  }
  v2083 = 0;
LABEL_2847:
  *v2080 = v2083;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v173 = v3[473];
  if (v173 >> 30)
    v2098 = 1;
  else
    v2098 = (_DWORD)v173 == v5;
  if (v2098)
    goto LABEL_426;
LABEL_2851:
  v2099 = *(_QWORD *)(v1[2] + 8);
  v2100 = v173 & 0xFFFFFFFFCFFFFFFFLL;
  v2101 = *(_QWORD *)(*(_QWORD *)(v2099 + 8) + 2448);
  v2102 = (unsigned int *)(v2101 + 520 * (v173 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2103 = *v2102;
  if ((_DWORD)v2103)
  {
    v2104 = 0;
    v2105 = 0;
    v2106 = **(_QWORD **)(v2099 + 16);
    v2107 = v2101 + 520 * v2100;
    v2108 = v2107 + 364;
    v2109 = v2107 + 340;
    while (1)
    {
      v2110 = (uint64_t *)(v2108 + 12 * v2104);
      v2111 = *(uint64_t **)(v2106 + 2512);
      if (v2111)
        break;
LABEL_2870:
      *(_WORD *)(v2109 + 2 * v2105) = *(_WORD *)(v2109 + 2 * v2104);
      if (v2104 != v2105)
      {
        v2118 = *v2110;
        v2119 = v2108 + 12 * v2105;
        *(_DWORD *)(v2119 + 8) = *((_DWORD *)v2110 + 2);
        *(_QWORD *)v2119 = v2118;
      }
      ++v2105;
LABEL_2854:
      if (++v2104 == v2103)
        goto LABEL_2873;
    }
    v2112 = *(_DWORD *)v2110;
    v2113 = *((_DWORD *)v2110 + 1);
    v2114 = *((_DWORD *)v2110 + 2);
    while (1)
    {
      v2115 = *((_DWORD *)v2111 + 7);
      if (v2112 == v2115)
      {
        v2116 = *((_DWORD *)v2111 + 8);
        if (v2113 == v2116)
        {
          v2117 = *((_DWORD *)v2111 + 9);
          if (v2114 < v2117)
            goto LABEL_2858;
          if (v2117 >= v2114)
            goto LABEL_2854;
        }
        else
        {
          if (v2113 < v2116)
            goto LABEL_2858;
          if (v2116 >= v2113)
            goto LABEL_2854;
        }
      }
      else
      {
        if (v2112 < v2115)
          goto LABEL_2858;
        if (v2115 >= v2112)
          goto LABEL_2854;
      }
      ++v2111;
LABEL_2858:
      v2111 = (uint64_t *)*v2111;
      if (!v2111)
        goto LABEL_2870;
    }
  }
  v2105 = 0;
LABEL_2873:
  *v2102 = v2105;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v175 = v3[474];
  if (v175 >> 30)
    v2120 = 1;
  else
    v2120 = (_DWORD)v175 == v5;
  if (v2120)
    goto LABEL_431;
LABEL_2877:
  v2121 = *(_QWORD *)(v1[2] + 8);
  v2122 = v175 & 0xFFFFFFFFCFFFFFFFLL;
  v2123 = *(_QWORD *)(*(_QWORD *)(v2121 + 8) + 2448);
  v2124 = (unsigned int *)(v2123 + 520 * (v175 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2125 = *v2124;
  if ((_DWORD)v2125)
  {
    v2126 = 0;
    v2127 = 0;
    v2128 = **(_QWORD **)(v2121 + 16);
    v2129 = v2123 + 520 * v2122;
    v2130 = v2129 + 364;
    v2131 = v2129 + 340;
    while (1)
    {
      v2132 = (uint64_t *)(v2130 + 12 * v2126);
      v2133 = *(uint64_t **)(v2128 + 2512);
      if (v2133)
        break;
LABEL_2896:
      *(_WORD *)(v2131 + 2 * v2127) = *(_WORD *)(v2131 + 2 * v2126);
      if (v2126 != v2127)
      {
        v2140 = *v2132;
        v2141 = v2130 + 12 * v2127;
        *(_DWORD *)(v2141 + 8) = *((_DWORD *)v2132 + 2);
        *(_QWORD *)v2141 = v2140;
      }
      ++v2127;
LABEL_2880:
      if (++v2126 == v2125)
        goto LABEL_2899;
    }
    v2134 = *(_DWORD *)v2132;
    v2135 = *((_DWORD *)v2132 + 1);
    v2136 = *((_DWORD *)v2132 + 2);
    while (1)
    {
      v2137 = *((_DWORD *)v2133 + 7);
      if (v2134 == v2137)
      {
        v2138 = *((_DWORD *)v2133 + 8);
        if (v2135 == v2138)
        {
          v2139 = *((_DWORD *)v2133 + 9);
          if (v2136 < v2139)
            goto LABEL_2884;
          if (v2139 >= v2136)
            goto LABEL_2880;
        }
        else
        {
          if (v2135 < v2138)
            goto LABEL_2884;
          if (v2138 >= v2135)
            goto LABEL_2880;
        }
      }
      else
      {
        if (v2134 < v2137)
          goto LABEL_2884;
        if (v2137 >= v2134)
          goto LABEL_2880;
      }
      ++v2133;
LABEL_2884:
      v2133 = (uint64_t *)*v2133;
      if (!v2133)
        goto LABEL_2896;
    }
  }
  v2127 = 0;
LABEL_2899:
  *v2124 = v2127;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v177 = v3[475];
  if (v177 >> 30)
    v2142 = 1;
  else
    v2142 = (_DWORD)v177 == v5;
  if (v2142)
    goto LABEL_436;
LABEL_2903:
  v2143 = *(_QWORD *)(v1[2] + 8);
  v2144 = v177 & 0xFFFFFFFFCFFFFFFFLL;
  v2145 = *(_QWORD *)(*(_QWORD *)(v2143 + 8) + 2448);
  v2146 = (unsigned int *)(v2145 + 520 * (v177 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2147 = *v2146;
  if ((_DWORD)v2147)
  {
    v2148 = 0;
    v2149 = 0;
    v2150 = **(_QWORD **)(v2143 + 16);
    v2151 = v2145 + 520 * v2144;
    v2152 = v2151 + 364;
    v2153 = v2151 + 340;
    while (1)
    {
      v2154 = (uint64_t *)(v2152 + 12 * v2148);
      v2155 = *(uint64_t **)(v2150 + 2512);
      if (v2155)
        break;
LABEL_2922:
      *(_WORD *)(v2153 + 2 * v2149) = *(_WORD *)(v2153 + 2 * v2148);
      if (v2148 != v2149)
      {
        v2162 = *v2154;
        v2163 = v2152 + 12 * v2149;
        *(_DWORD *)(v2163 + 8) = *((_DWORD *)v2154 + 2);
        *(_QWORD *)v2163 = v2162;
      }
      ++v2149;
LABEL_2906:
      if (++v2148 == v2147)
        goto LABEL_2925;
    }
    v2156 = *(_DWORD *)v2154;
    v2157 = *((_DWORD *)v2154 + 1);
    v2158 = *((_DWORD *)v2154 + 2);
    while (1)
    {
      v2159 = *((_DWORD *)v2155 + 7);
      if (v2156 == v2159)
      {
        v2160 = *((_DWORD *)v2155 + 8);
        if (v2157 == v2160)
        {
          v2161 = *((_DWORD *)v2155 + 9);
          if (v2158 < v2161)
            goto LABEL_2910;
          if (v2161 >= v2158)
            goto LABEL_2906;
        }
        else
        {
          if (v2157 < v2160)
            goto LABEL_2910;
          if (v2160 >= v2157)
            goto LABEL_2906;
        }
      }
      else
      {
        if (v2156 < v2159)
          goto LABEL_2910;
        if (v2159 >= v2156)
          goto LABEL_2906;
      }
      ++v2155;
LABEL_2910:
      v2155 = (uint64_t *)*v2155;
      if (!v2155)
        goto LABEL_2922;
    }
  }
  v2149 = 0;
LABEL_2925:
  *v2146 = v2149;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v179 = v3[476];
  if (v179 >> 30)
    v2164 = 1;
  else
    v2164 = (_DWORD)v179 == v5;
  if (v2164)
    goto LABEL_441;
LABEL_2929:
  v2165 = *(_QWORD *)(v1[2] + 8);
  v2166 = v179 & 0xFFFFFFFFCFFFFFFFLL;
  v2167 = *(_QWORD *)(*(_QWORD *)(v2165 + 8) + 2448);
  v2168 = (unsigned int *)(v2167 + 520 * (v179 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2169 = *v2168;
  if ((_DWORD)v2169)
  {
    v2170 = 0;
    v2171 = 0;
    v2172 = **(_QWORD **)(v2165 + 16);
    v2173 = v2167 + 520 * v2166;
    v2174 = v2173 + 364;
    v2175 = v2173 + 340;
    while (1)
    {
      v2176 = (uint64_t *)(v2174 + 12 * v2170);
      v2177 = *(uint64_t **)(v2172 + 2512);
      if (v2177)
        break;
LABEL_2948:
      *(_WORD *)(v2175 + 2 * v2171) = *(_WORD *)(v2175 + 2 * v2170);
      if (v2170 != v2171)
      {
        v2184 = *v2176;
        v2185 = v2174 + 12 * v2171;
        *(_DWORD *)(v2185 + 8) = *((_DWORD *)v2176 + 2);
        *(_QWORD *)v2185 = v2184;
      }
      ++v2171;
LABEL_2932:
      if (++v2170 == v2169)
        goto LABEL_2951;
    }
    v2178 = *(_DWORD *)v2176;
    v2179 = *((_DWORD *)v2176 + 1);
    v2180 = *((_DWORD *)v2176 + 2);
    while (1)
    {
      v2181 = *((_DWORD *)v2177 + 7);
      if (v2178 == v2181)
      {
        v2182 = *((_DWORD *)v2177 + 8);
        if (v2179 == v2182)
        {
          v2183 = *((_DWORD *)v2177 + 9);
          if (v2180 < v2183)
            goto LABEL_2936;
          if (v2183 >= v2180)
            goto LABEL_2932;
        }
        else
        {
          if (v2179 < v2182)
            goto LABEL_2936;
          if (v2182 >= v2179)
            goto LABEL_2932;
        }
      }
      else
      {
        if (v2178 < v2181)
          goto LABEL_2936;
        if (v2181 >= v2178)
          goto LABEL_2932;
      }
      ++v2177;
LABEL_2936:
      v2177 = (uint64_t *)*v2177;
      if (!v2177)
        goto LABEL_2948;
    }
  }
  v2171 = 0;
LABEL_2951:
  *v2168 = v2171;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v181 = v3[477];
  if (v181 >> 30)
    v2186 = 1;
  else
    v2186 = (_DWORD)v181 == v5;
  if (v2186)
    goto LABEL_446;
LABEL_2955:
  v2187 = *(_QWORD *)(v1[2] + 8);
  v2188 = v181 & 0xFFFFFFFFCFFFFFFFLL;
  v2189 = *(_QWORD *)(*(_QWORD *)(v2187 + 8) + 2448);
  v2190 = (unsigned int *)(v2189 + 520 * (v181 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2191 = *v2190;
  if ((_DWORD)v2191)
  {
    v2192 = 0;
    v2193 = 0;
    v2194 = **(_QWORD **)(v2187 + 16);
    v2195 = v2189 + 520 * v2188;
    v2196 = v2195 + 364;
    v2197 = v2195 + 340;
    while (1)
    {
      v2198 = (uint64_t *)(v2196 + 12 * v2192);
      v2199 = *(uint64_t **)(v2194 + 2512);
      if (v2199)
        break;
LABEL_2974:
      *(_WORD *)(v2197 + 2 * v2193) = *(_WORD *)(v2197 + 2 * v2192);
      if (v2192 != v2193)
      {
        v2206 = *v2198;
        v2207 = v2196 + 12 * v2193;
        *(_DWORD *)(v2207 + 8) = *((_DWORD *)v2198 + 2);
        *(_QWORD *)v2207 = v2206;
      }
      ++v2193;
LABEL_2958:
      if (++v2192 == v2191)
        goto LABEL_2977;
    }
    v2200 = *(_DWORD *)v2198;
    v2201 = *((_DWORD *)v2198 + 1);
    v2202 = *((_DWORD *)v2198 + 2);
    while (1)
    {
      v2203 = *((_DWORD *)v2199 + 7);
      if (v2200 == v2203)
      {
        v2204 = *((_DWORD *)v2199 + 8);
        if (v2201 == v2204)
        {
          v2205 = *((_DWORD *)v2199 + 9);
          if (v2202 < v2205)
            goto LABEL_2962;
          if (v2205 >= v2202)
            goto LABEL_2958;
        }
        else
        {
          if (v2201 < v2204)
            goto LABEL_2962;
          if (v2204 >= v2201)
            goto LABEL_2958;
        }
      }
      else
      {
        if (v2200 < v2203)
          goto LABEL_2962;
        if (v2203 >= v2200)
          goto LABEL_2958;
      }
      ++v2199;
LABEL_2962:
      v2199 = (uint64_t *)*v2199;
      if (!v2199)
        goto LABEL_2974;
    }
  }
  v2193 = 0;
LABEL_2977:
  *v2190 = v2193;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v183 = v3[478];
  if (v183 >> 30)
    v2208 = 1;
  else
    v2208 = (_DWORD)v183 == v5;
  if (v2208)
    goto LABEL_451;
LABEL_2981:
  v2209 = *(_QWORD *)(v1[2] + 8);
  v2210 = v183 & 0xFFFFFFFFCFFFFFFFLL;
  v2211 = *(_QWORD *)(*(_QWORD *)(v2209 + 8) + 2448);
  v2212 = (unsigned int *)(v2211 + 520 * (v183 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2213 = *v2212;
  if ((_DWORD)v2213)
  {
    v2214 = 0;
    v2215 = 0;
    v2216 = **(_QWORD **)(v2209 + 16);
    v2217 = v2211 + 520 * v2210;
    v2218 = v2217 + 364;
    v2219 = v2217 + 340;
    while (1)
    {
      v2220 = (uint64_t *)(v2218 + 12 * v2214);
      v2221 = *(uint64_t **)(v2216 + 2512);
      if (v2221)
        break;
LABEL_3000:
      *(_WORD *)(v2219 + 2 * v2215) = *(_WORD *)(v2219 + 2 * v2214);
      if (v2214 != v2215)
      {
        v2228 = *v2220;
        v2229 = v2218 + 12 * v2215;
        *(_DWORD *)(v2229 + 8) = *((_DWORD *)v2220 + 2);
        *(_QWORD *)v2229 = v2228;
      }
      ++v2215;
LABEL_2984:
      if (++v2214 == v2213)
        goto LABEL_3003;
    }
    v2222 = *(_DWORD *)v2220;
    v2223 = *((_DWORD *)v2220 + 1);
    v2224 = *((_DWORD *)v2220 + 2);
    while (1)
    {
      v2225 = *((_DWORD *)v2221 + 7);
      if (v2222 == v2225)
      {
        v2226 = *((_DWORD *)v2221 + 8);
        if (v2223 == v2226)
        {
          v2227 = *((_DWORD *)v2221 + 9);
          if (v2224 < v2227)
            goto LABEL_2988;
          if (v2227 >= v2224)
            goto LABEL_2984;
        }
        else
        {
          if (v2223 < v2226)
            goto LABEL_2988;
          if (v2226 >= v2223)
            goto LABEL_2984;
        }
      }
      else
      {
        if (v2222 < v2225)
          goto LABEL_2988;
        if (v2225 >= v2222)
          goto LABEL_2984;
      }
      ++v2221;
LABEL_2988:
      v2221 = (uint64_t *)*v2221;
      if (!v2221)
        goto LABEL_3000;
    }
  }
  v2215 = 0;
LABEL_3003:
  *v2212 = v2215;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v185 = v3[479];
  if (v185 >> 30)
    v2230 = 1;
  else
    v2230 = (_DWORD)v185 == v5;
  if (v2230)
    goto LABEL_456;
LABEL_3007:
  v2231 = *(_QWORD *)(v1[2] + 8);
  v2232 = v185 & 0xFFFFFFFFCFFFFFFFLL;
  v2233 = *(_QWORD *)(*(_QWORD *)(v2231 + 8) + 2448);
  v2234 = (unsigned int *)(v2233 + 520 * (v185 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2235 = *v2234;
  if ((_DWORD)v2235)
  {
    v2236 = 0;
    v2237 = 0;
    v2238 = **(_QWORD **)(v2231 + 16);
    v2239 = v2233 + 520 * v2232;
    v2240 = v2239 + 364;
    v2241 = v2239 + 340;
    while (1)
    {
      v2242 = (uint64_t *)(v2240 + 12 * v2236);
      v2243 = *(uint64_t **)(v2238 + 2512);
      if (v2243)
        break;
LABEL_3026:
      *(_WORD *)(v2241 + 2 * v2237) = *(_WORD *)(v2241 + 2 * v2236);
      if (v2236 != v2237)
      {
        v2250 = *v2242;
        v2251 = v2240 + 12 * v2237;
        *(_DWORD *)(v2251 + 8) = *((_DWORD *)v2242 + 2);
        *(_QWORD *)v2251 = v2250;
      }
      ++v2237;
LABEL_3010:
      if (++v2236 == v2235)
        goto LABEL_3029;
    }
    v2244 = *(_DWORD *)v2242;
    v2245 = *((_DWORD *)v2242 + 1);
    v2246 = *((_DWORD *)v2242 + 2);
    while (1)
    {
      v2247 = *((_DWORD *)v2243 + 7);
      if (v2244 == v2247)
      {
        v2248 = *((_DWORD *)v2243 + 8);
        if (v2245 == v2248)
        {
          v2249 = *((_DWORD *)v2243 + 9);
          if (v2246 < v2249)
            goto LABEL_3014;
          if (v2249 >= v2246)
            goto LABEL_3010;
        }
        else
        {
          if (v2245 < v2248)
            goto LABEL_3014;
          if (v2248 >= v2245)
            goto LABEL_3010;
        }
      }
      else
      {
        if (v2244 < v2247)
          goto LABEL_3014;
        if (v2247 >= v2244)
          goto LABEL_3010;
      }
      ++v2243;
LABEL_3014:
      v2243 = (uint64_t *)*v2243;
      if (!v2243)
        goto LABEL_3026;
    }
  }
  v2237 = 0;
LABEL_3029:
  *v2234 = v2237;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v187 = v3[480];
  if (v187 >> 30)
    v2252 = 1;
  else
    v2252 = (_DWORD)v187 == v5;
  if (v2252)
    goto LABEL_461;
LABEL_3033:
  v2253 = *(_QWORD *)(v1[2] + 8);
  v2254 = v187 & 0xFFFFFFFFCFFFFFFFLL;
  v2255 = *(_QWORD *)(*(_QWORD *)(v2253 + 8) + 2448);
  v2256 = (unsigned int *)(v2255 + 520 * (v187 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2257 = *v2256;
  if ((_DWORD)v2257)
  {
    v2258 = 0;
    v2259 = 0;
    v2260 = **(_QWORD **)(v2253 + 16);
    v2261 = v2255 + 520 * v2254;
    v2262 = v2261 + 364;
    v2263 = v2261 + 340;
    while (1)
    {
      v2264 = (uint64_t *)(v2262 + 12 * v2258);
      v2265 = *(uint64_t **)(v2260 + 2512);
      if (v2265)
        break;
LABEL_3052:
      *(_WORD *)(v2263 + 2 * v2259) = *(_WORD *)(v2263 + 2 * v2258);
      if (v2258 != v2259)
      {
        v2272 = *v2264;
        v2273 = v2262 + 12 * v2259;
        *(_DWORD *)(v2273 + 8) = *((_DWORD *)v2264 + 2);
        *(_QWORD *)v2273 = v2272;
      }
      ++v2259;
LABEL_3036:
      if (++v2258 == v2257)
        goto LABEL_3055;
    }
    v2266 = *(_DWORD *)v2264;
    v2267 = *((_DWORD *)v2264 + 1);
    v2268 = *((_DWORD *)v2264 + 2);
    while (1)
    {
      v2269 = *((_DWORD *)v2265 + 7);
      if (v2266 == v2269)
      {
        v2270 = *((_DWORD *)v2265 + 8);
        if (v2267 == v2270)
        {
          v2271 = *((_DWORD *)v2265 + 9);
          if (v2268 < v2271)
            goto LABEL_3040;
          if (v2271 >= v2268)
            goto LABEL_3036;
        }
        else
        {
          if (v2267 < v2270)
            goto LABEL_3040;
          if (v2270 >= v2267)
            goto LABEL_3036;
        }
      }
      else
      {
        if (v2266 < v2269)
          goto LABEL_3040;
        if (v2269 >= v2266)
          goto LABEL_3036;
      }
      ++v2265;
LABEL_3040:
      v2265 = (uint64_t *)*v2265;
      if (!v2265)
        goto LABEL_3052;
    }
  }
  v2259 = 0;
LABEL_3055:
  *v2256 = v2259;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v189 = v3[481];
  if (v189 >> 30)
    v2274 = 1;
  else
    v2274 = (_DWORD)v189 == v5;
  if (v2274)
    goto LABEL_466;
LABEL_3059:
  v2275 = *(_QWORD *)(v1[2] + 8);
  v2276 = v189 & 0xFFFFFFFFCFFFFFFFLL;
  v2277 = *(_QWORD *)(*(_QWORD *)(v2275 + 8) + 2448);
  v2278 = (unsigned int *)(v2277 + 520 * (v189 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2279 = *v2278;
  if ((_DWORD)v2279)
  {
    v2280 = 0;
    v2281 = 0;
    v2282 = **(_QWORD **)(v2275 + 16);
    v2283 = v2277 + 520 * v2276;
    v2284 = v2283 + 364;
    v2285 = v2283 + 340;
    while (1)
    {
      v2286 = (uint64_t *)(v2284 + 12 * v2280);
      v2287 = *(uint64_t **)(v2282 + 2512);
      if (v2287)
        break;
LABEL_3078:
      *(_WORD *)(v2285 + 2 * v2281) = *(_WORD *)(v2285 + 2 * v2280);
      if (v2280 != v2281)
      {
        v2294 = *v2286;
        v2295 = v2284 + 12 * v2281;
        *(_DWORD *)(v2295 + 8) = *((_DWORD *)v2286 + 2);
        *(_QWORD *)v2295 = v2294;
      }
      ++v2281;
LABEL_3062:
      if (++v2280 == v2279)
        goto LABEL_3081;
    }
    v2288 = *(_DWORD *)v2286;
    v2289 = *((_DWORD *)v2286 + 1);
    v2290 = *((_DWORD *)v2286 + 2);
    while (1)
    {
      v2291 = *((_DWORD *)v2287 + 7);
      if (v2288 == v2291)
      {
        v2292 = *((_DWORD *)v2287 + 8);
        if (v2289 == v2292)
        {
          v2293 = *((_DWORD *)v2287 + 9);
          if (v2290 < v2293)
            goto LABEL_3066;
          if (v2293 >= v2290)
            goto LABEL_3062;
        }
        else
        {
          if (v2289 < v2292)
            goto LABEL_3066;
          if (v2292 >= v2289)
            goto LABEL_3062;
        }
      }
      else
      {
        if (v2288 < v2291)
          goto LABEL_3066;
        if (v2291 >= v2288)
          goto LABEL_3062;
      }
      ++v2287;
LABEL_3066:
      v2287 = (uint64_t *)*v2287;
      if (!v2287)
        goto LABEL_3078;
    }
  }
  v2281 = 0;
LABEL_3081:
  *v2278 = v2281;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v191 = v3[482];
  if (v191 >> 30)
    v2296 = 1;
  else
    v2296 = (_DWORD)v191 == v5;
  if (v2296)
    goto LABEL_471;
LABEL_3085:
  v2297 = *(_QWORD *)(v1[2] + 8);
  v2298 = v191 & 0xFFFFFFFFCFFFFFFFLL;
  v2299 = *(_QWORD *)(*(_QWORD *)(v2297 + 8) + 2448);
  v2300 = (unsigned int *)(v2299 + 520 * (v191 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2301 = *v2300;
  if ((_DWORD)v2301)
  {
    v2302 = 0;
    v2303 = 0;
    v2304 = **(_QWORD **)(v2297 + 16);
    v2305 = v2299 + 520 * v2298;
    v2306 = v2305 + 364;
    v2307 = v2305 + 340;
    while (1)
    {
      v2308 = (uint64_t *)(v2306 + 12 * v2302);
      v2309 = *(uint64_t **)(v2304 + 2512);
      if (v2309)
        break;
LABEL_3104:
      *(_WORD *)(v2307 + 2 * v2303) = *(_WORD *)(v2307 + 2 * v2302);
      if (v2302 != v2303)
      {
        v2316 = *v2308;
        v2317 = v2306 + 12 * v2303;
        *(_DWORD *)(v2317 + 8) = *((_DWORD *)v2308 + 2);
        *(_QWORD *)v2317 = v2316;
      }
      ++v2303;
LABEL_3088:
      if (++v2302 == v2301)
        goto LABEL_3107;
    }
    v2310 = *(_DWORD *)v2308;
    v2311 = *((_DWORD *)v2308 + 1);
    v2312 = *((_DWORD *)v2308 + 2);
    while (1)
    {
      v2313 = *((_DWORD *)v2309 + 7);
      if (v2310 == v2313)
      {
        v2314 = *((_DWORD *)v2309 + 8);
        if (v2311 == v2314)
        {
          v2315 = *((_DWORD *)v2309 + 9);
          if (v2312 < v2315)
            goto LABEL_3092;
          if (v2315 >= v2312)
            goto LABEL_3088;
        }
        else
        {
          if (v2311 < v2314)
            goto LABEL_3092;
          if (v2314 >= v2311)
            goto LABEL_3088;
        }
      }
      else
      {
        if (v2310 < v2313)
          goto LABEL_3092;
        if (v2313 >= v2310)
          goto LABEL_3088;
      }
      ++v2309;
LABEL_3092:
      v2309 = (uint64_t *)*v2309;
      if (!v2309)
        goto LABEL_3104;
    }
  }
  v2303 = 0;
LABEL_3107:
  *v2300 = v2303;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v193 = v3[483];
  if (v193 >> 30)
    v2318 = 1;
  else
    v2318 = (_DWORD)v193 == v5;
  if (v2318)
    goto LABEL_476;
LABEL_3111:
  v2319 = *(_QWORD *)(v1[2] + 8);
  v2320 = v193 & 0xFFFFFFFFCFFFFFFFLL;
  v2321 = *(_QWORD *)(*(_QWORD *)(v2319 + 8) + 2448);
  v2322 = (unsigned int *)(v2321 + 520 * (v193 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2323 = *v2322;
  if ((_DWORD)v2323)
  {
    v2324 = 0;
    v2325 = 0;
    v2326 = **(_QWORD **)(v2319 + 16);
    v2327 = v2321 + 520 * v2320;
    v2328 = v2327 + 364;
    v2329 = v2327 + 340;
    while (1)
    {
      v2330 = (uint64_t *)(v2328 + 12 * v2324);
      v2331 = *(uint64_t **)(v2326 + 2512);
      if (v2331)
        break;
LABEL_3130:
      *(_WORD *)(v2329 + 2 * v2325) = *(_WORD *)(v2329 + 2 * v2324);
      if (v2324 != v2325)
      {
        v2338 = *v2330;
        v2339 = v2328 + 12 * v2325;
        *(_DWORD *)(v2339 + 8) = *((_DWORD *)v2330 + 2);
        *(_QWORD *)v2339 = v2338;
      }
      ++v2325;
LABEL_3114:
      if (++v2324 == v2323)
        goto LABEL_3133;
    }
    v2332 = *(_DWORD *)v2330;
    v2333 = *((_DWORD *)v2330 + 1);
    v2334 = *((_DWORD *)v2330 + 2);
    while (1)
    {
      v2335 = *((_DWORD *)v2331 + 7);
      if (v2332 == v2335)
      {
        v2336 = *((_DWORD *)v2331 + 8);
        if (v2333 == v2336)
        {
          v2337 = *((_DWORD *)v2331 + 9);
          if (v2334 < v2337)
            goto LABEL_3118;
          if (v2337 >= v2334)
            goto LABEL_3114;
        }
        else
        {
          if (v2333 < v2336)
            goto LABEL_3118;
          if (v2336 >= v2333)
            goto LABEL_3114;
        }
      }
      else
      {
        if (v2332 < v2335)
          goto LABEL_3118;
        if (v2335 >= v2332)
          goto LABEL_3114;
      }
      ++v2331;
LABEL_3118:
      v2331 = (uint64_t *)*v2331;
      if (!v2331)
        goto LABEL_3130;
    }
  }
  v2325 = 0;
LABEL_3133:
  *v2322 = v2325;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v195 = v3[484];
  if (v195 >> 30)
    v2340 = 1;
  else
    v2340 = (_DWORD)v195 == v5;
  if (v2340)
    goto LABEL_481;
LABEL_3137:
  v2341 = *(_QWORD *)(v1[2] + 8);
  v2342 = v195 & 0xFFFFFFFFCFFFFFFFLL;
  v2343 = *(_QWORD *)(*(_QWORD *)(v2341 + 8) + 2448);
  v2344 = (unsigned int *)(v2343 + 520 * (v195 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2345 = *v2344;
  if ((_DWORD)v2345)
  {
    v2346 = 0;
    v2347 = 0;
    v2348 = **(_QWORD **)(v2341 + 16);
    v2349 = v2343 + 520 * v2342;
    v2350 = v2349 + 364;
    v2351 = v2349 + 340;
    while (1)
    {
      v2352 = (uint64_t *)(v2350 + 12 * v2346);
      v2353 = *(uint64_t **)(v2348 + 2512);
      if (v2353)
        break;
LABEL_3156:
      *(_WORD *)(v2351 + 2 * v2347) = *(_WORD *)(v2351 + 2 * v2346);
      if (v2346 != v2347)
      {
        v2360 = *v2352;
        v2361 = v2350 + 12 * v2347;
        *(_DWORD *)(v2361 + 8) = *((_DWORD *)v2352 + 2);
        *(_QWORD *)v2361 = v2360;
      }
      ++v2347;
LABEL_3140:
      if (++v2346 == v2345)
        goto LABEL_3159;
    }
    v2354 = *(_DWORD *)v2352;
    v2355 = *((_DWORD *)v2352 + 1);
    v2356 = *((_DWORD *)v2352 + 2);
    while (1)
    {
      v2357 = *((_DWORD *)v2353 + 7);
      if (v2354 == v2357)
      {
        v2358 = *((_DWORD *)v2353 + 8);
        if (v2355 == v2358)
        {
          v2359 = *((_DWORD *)v2353 + 9);
          if (v2356 < v2359)
            goto LABEL_3144;
          if (v2359 >= v2356)
            goto LABEL_3140;
        }
        else
        {
          if (v2355 < v2358)
            goto LABEL_3144;
          if (v2358 >= v2355)
            goto LABEL_3140;
        }
      }
      else
      {
        if (v2354 < v2357)
          goto LABEL_3144;
        if (v2357 >= v2354)
          goto LABEL_3140;
      }
      ++v2353;
LABEL_3144:
      v2353 = (uint64_t *)*v2353;
      if (!v2353)
        goto LABEL_3156;
    }
  }
  v2347 = 0;
LABEL_3159:
  *v2344 = v2347;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v197 = v3[485];
  if (v197 >> 30)
    v2362 = 1;
  else
    v2362 = (_DWORD)v197 == v5;
  if (v2362)
    goto LABEL_486;
LABEL_3163:
  v2363 = *(_QWORD *)(v1[2] + 8);
  v2364 = v197 & 0xFFFFFFFFCFFFFFFFLL;
  v2365 = *(_QWORD *)(*(_QWORD *)(v2363 + 8) + 2448);
  v2366 = (unsigned int *)(v2365 + 520 * (v197 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2367 = *v2366;
  if ((_DWORD)v2367)
  {
    v2368 = 0;
    v2369 = 0;
    v2370 = **(_QWORD **)(v2363 + 16);
    v2371 = v2365 + 520 * v2364;
    v2372 = v2371 + 364;
    v2373 = v2371 + 340;
    while (1)
    {
      v2374 = (uint64_t *)(v2372 + 12 * v2368);
      v2375 = *(uint64_t **)(v2370 + 2512);
      if (v2375)
        break;
LABEL_3182:
      *(_WORD *)(v2373 + 2 * v2369) = *(_WORD *)(v2373 + 2 * v2368);
      if (v2368 != v2369)
      {
        v2382 = *v2374;
        v2383 = v2372 + 12 * v2369;
        *(_DWORD *)(v2383 + 8) = *((_DWORD *)v2374 + 2);
        *(_QWORD *)v2383 = v2382;
      }
      ++v2369;
LABEL_3166:
      if (++v2368 == v2367)
        goto LABEL_3185;
    }
    v2376 = *(_DWORD *)v2374;
    v2377 = *((_DWORD *)v2374 + 1);
    v2378 = *((_DWORD *)v2374 + 2);
    while (1)
    {
      v2379 = *((_DWORD *)v2375 + 7);
      if (v2376 == v2379)
      {
        v2380 = *((_DWORD *)v2375 + 8);
        if (v2377 == v2380)
        {
          v2381 = *((_DWORD *)v2375 + 9);
          if (v2378 < v2381)
            goto LABEL_3170;
          if (v2381 >= v2378)
            goto LABEL_3166;
        }
        else
        {
          if (v2377 < v2380)
            goto LABEL_3170;
          if (v2380 >= v2377)
            goto LABEL_3166;
        }
      }
      else
      {
        if (v2376 < v2379)
          goto LABEL_3170;
        if (v2379 >= v2376)
          goto LABEL_3166;
      }
      ++v2375;
LABEL_3170:
      v2375 = (uint64_t *)*v2375;
      if (!v2375)
        goto LABEL_3182;
    }
  }
  v2369 = 0;
LABEL_3185:
  *v2366 = v2369;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v199 = v3[486];
  if (v199 >> 30)
    v2384 = 1;
  else
    v2384 = (_DWORD)v199 == v5;
  if (v2384)
    goto LABEL_491;
LABEL_3189:
  v2385 = *(_QWORD *)(v1[2] + 8);
  v2386 = v199 & 0xFFFFFFFFCFFFFFFFLL;
  v2387 = *(_QWORD *)(*(_QWORD *)(v2385 + 8) + 2448);
  v2388 = (unsigned int *)(v2387 + 520 * (v199 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2389 = *v2388;
  if ((_DWORD)v2389)
  {
    v2390 = 0;
    v2391 = 0;
    v2392 = **(_QWORD **)(v2385 + 16);
    v2393 = v2387 + 520 * v2386;
    v2394 = v2393 + 364;
    v2395 = v2393 + 340;
    while (1)
    {
      v2396 = (uint64_t *)(v2394 + 12 * v2390);
      v2397 = *(uint64_t **)(v2392 + 2512);
      if (v2397)
        break;
LABEL_3208:
      *(_WORD *)(v2395 + 2 * v2391) = *(_WORD *)(v2395 + 2 * v2390);
      if (v2390 != v2391)
      {
        v2404 = *v2396;
        v2405 = v2394 + 12 * v2391;
        *(_DWORD *)(v2405 + 8) = *((_DWORD *)v2396 + 2);
        *(_QWORD *)v2405 = v2404;
      }
      ++v2391;
LABEL_3192:
      if (++v2390 == v2389)
        goto LABEL_3211;
    }
    v2398 = *(_DWORD *)v2396;
    v2399 = *((_DWORD *)v2396 + 1);
    v2400 = *((_DWORD *)v2396 + 2);
    while (1)
    {
      v2401 = *((_DWORD *)v2397 + 7);
      if (v2398 == v2401)
      {
        v2402 = *((_DWORD *)v2397 + 8);
        if (v2399 == v2402)
        {
          v2403 = *((_DWORD *)v2397 + 9);
          if (v2400 < v2403)
            goto LABEL_3196;
          if (v2403 >= v2400)
            goto LABEL_3192;
        }
        else
        {
          if (v2399 < v2402)
            goto LABEL_3196;
          if (v2402 >= v2399)
            goto LABEL_3192;
        }
      }
      else
      {
        if (v2398 < v2401)
          goto LABEL_3196;
        if (v2401 >= v2398)
          goto LABEL_3192;
      }
      ++v2397;
LABEL_3196:
      v2397 = (uint64_t *)*v2397;
      if (!v2397)
        goto LABEL_3208;
    }
  }
  v2391 = 0;
LABEL_3211:
  *v2388 = v2391;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v201 = v3[487];
  if (v201 >> 30)
    v2406 = 1;
  else
    v2406 = (_DWORD)v201 == v5;
  if (v2406)
    goto LABEL_496;
LABEL_3215:
  v2407 = *(_QWORD *)(v1[2] + 8);
  v2408 = v201 & 0xFFFFFFFFCFFFFFFFLL;
  v2409 = *(_QWORD *)(*(_QWORD *)(v2407 + 8) + 2448);
  v2410 = (unsigned int *)(v2409 + 520 * (v201 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2411 = *v2410;
  if ((_DWORD)v2411)
  {
    v2412 = 0;
    v2413 = 0;
    v2414 = **(_QWORD **)(v2407 + 16);
    v2415 = v2409 + 520 * v2408;
    v2416 = v2415 + 364;
    v2417 = v2415 + 340;
    while (1)
    {
      v2418 = (uint64_t *)(v2416 + 12 * v2412);
      v2419 = *(uint64_t **)(v2414 + 2512);
      if (v2419)
        break;
LABEL_3234:
      *(_WORD *)(v2417 + 2 * v2413) = *(_WORD *)(v2417 + 2 * v2412);
      if (v2412 != v2413)
      {
        v2426 = *v2418;
        v2427 = v2416 + 12 * v2413;
        *(_DWORD *)(v2427 + 8) = *((_DWORD *)v2418 + 2);
        *(_QWORD *)v2427 = v2426;
      }
      ++v2413;
LABEL_3218:
      if (++v2412 == v2411)
        goto LABEL_3237;
    }
    v2420 = *(_DWORD *)v2418;
    v2421 = *((_DWORD *)v2418 + 1);
    v2422 = *((_DWORD *)v2418 + 2);
    while (1)
    {
      v2423 = *((_DWORD *)v2419 + 7);
      if (v2420 == v2423)
      {
        v2424 = *((_DWORD *)v2419 + 8);
        if (v2421 == v2424)
        {
          v2425 = *((_DWORD *)v2419 + 9);
          if (v2422 < v2425)
            goto LABEL_3222;
          if (v2425 >= v2422)
            goto LABEL_3218;
        }
        else
        {
          if (v2421 < v2424)
            goto LABEL_3222;
          if (v2424 >= v2421)
            goto LABEL_3218;
        }
      }
      else
      {
        if (v2420 < v2423)
          goto LABEL_3222;
        if (v2423 >= v2420)
          goto LABEL_3218;
      }
      ++v2419;
LABEL_3222:
      v2419 = (uint64_t *)*v2419;
      if (!v2419)
        goto LABEL_3234;
    }
  }
  v2413 = 0;
LABEL_3237:
  *v2410 = v2413;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v203 = v3[488];
  if (v203 >> 30)
    v2428 = 1;
  else
    v2428 = (_DWORD)v203 == v5;
  if (v2428)
    goto LABEL_501;
LABEL_3241:
  v2429 = *(_QWORD *)(v1[2] + 8);
  v2430 = v203 & 0xFFFFFFFFCFFFFFFFLL;
  v2431 = *(_QWORD *)(*(_QWORD *)(v2429 + 8) + 2448);
  v2432 = (unsigned int *)(v2431 + 520 * (v203 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2433 = *v2432;
  if ((_DWORD)v2433)
  {
    v2434 = 0;
    v2435 = 0;
    v2436 = **(_QWORD **)(v2429 + 16);
    v2437 = v2431 + 520 * v2430;
    v2438 = v2437 + 364;
    v2439 = v2437 + 340;
    while (1)
    {
      v2440 = (uint64_t *)(v2438 + 12 * v2434);
      v2441 = *(uint64_t **)(v2436 + 2512);
      if (v2441)
        break;
LABEL_3260:
      *(_WORD *)(v2439 + 2 * v2435) = *(_WORD *)(v2439 + 2 * v2434);
      if (v2434 != v2435)
      {
        v2448 = *v2440;
        v2449 = v2438 + 12 * v2435;
        *(_DWORD *)(v2449 + 8) = *((_DWORD *)v2440 + 2);
        *(_QWORD *)v2449 = v2448;
      }
      ++v2435;
LABEL_3244:
      if (++v2434 == v2433)
        goto LABEL_3263;
    }
    v2442 = *(_DWORD *)v2440;
    v2443 = *((_DWORD *)v2440 + 1);
    v2444 = *((_DWORD *)v2440 + 2);
    while (1)
    {
      v2445 = *((_DWORD *)v2441 + 7);
      if (v2442 == v2445)
      {
        v2446 = *((_DWORD *)v2441 + 8);
        if (v2443 == v2446)
        {
          v2447 = *((_DWORD *)v2441 + 9);
          if (v2444 < v2447)
            goto LABEL_3248;
          if (v2447 >= v2444)
            goto LABEL_3244;
        }
        else
        {
          if (v2443 < v2446)
            goto LABEL_3248;
          if (v2446 >= v2443)
            goto LABEL_3244;
        }
      }
      else
      {
        if (v2442 < v2445)
          goto LABEL_3248;
        if (v2445 >= v2442)
          goto LABEL_3244;
      }
      ++v2441;
LABEL_3248:
      v2441 = (uint64_t *)*v2441;
      if (!v2441)
        goto LABEL_3260;
    }
  }
  v2435 = 0;
LABEL_3263:
  *v2432 = v2435;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v205 = v3[489];
  if (v205 >> 30)
    v2450 = 1;
  else
    v2450 = (_DWORD)v205 == v5;
  if (v2450)
    goto LABEL_506;
LABEL_3267:
  v2451 = *(_QWORD *)(v1[2] + 8);
  v2452 = v205 & 0xFFFFFFFFCFFFFFFFLL;
  v2453 = *(_QWORD *)(*(_QWORD *)(v2451 + 8) + 2448);
  v2454 = (unsigned int *)(v2453 + 520 * (v205 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2455 = *v2454;
  if ((_DWORD)v2455)
  {
    v2456 = 0;
    v2457 = 0;
    v2458 = **(_QWORD **)(v2451 + 16);
    v2459 = v2453 + 520 * v2452;
    v2460 = v2459 + 364;
    v2461 = v2459 + 340;
    while (1)
    {
      v2462 = (uint64_t *)(v2460 + 12 * v2456);
      v2463 = *(uint64_t **)(v2458 + 2512);
      if (v2463)
        break;
LABEL_3286:
      *(_WORD *)(v2461 + 2 * v2457) = *(_WORD *)(v2461 + 2 * v2456);
      if (v2456 != v2457)
      {
        v2470 = *v2462;
        v2471 = v2460 + 12 * v2457;
        *(_DWORD *)(v2471 + 8) = *((_DWORD *)v2462 + 2);
        *(_QWORD *)v2471 = v2470;
      }
      ++v2457;
LABEL_3270:
      if (++v2456 == v2455)
        goto LABEL_3289;
    }
    v2464 = *(_DWORD *)v2462;
    v2465 = *((_DWORD *)v2462 + 1);
    v2466 = *((_DWORD *)v2462 + 2);
    while (1)
    {
      v2467 = *((_DWORD *)v2463 + 7);
      if (v2464 == v2467)
      {
        v2468 = *((_DWORD *)v2463 + 8);
        if (v2465 == v2468)
        {
          v2469 = *((_DWORD *)v2463 + 9);
          if (v2466 < v2469)
            goto LABEL_3274;
          if (v2469 >= v2466)
            goto LABEL_3270;
        }
        else
        {
          if (v2465 < v2468)
            goto LABEL_3274;
          if (v2468 >= v2465)
            goto LABEL_3270;
        }
      }
      else
      {
        if (v2464 < v2467)
          goto LABEL_3274;
        if (v2467 >= v2464)
          goto LABEL_3270;
      }
      ++v2463;
LABEL_3274:
      v2463 = (uint64_t *)*v2463;
      if (!v2463)
        goto LABEL_3286;
    }
  }
  v2457 = 0;
LABEL_3289:
  *v2454 = v2457;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v207 = v3[490];
  if (v207 >> 30)
    v2472 = 1;
  else
    v2472 = (_DWORD)v207 == v5;
  if (v2472)
    goto LABEL_511;
LABEL_3293:
  v2473 = *(_QWORD *)(v1[2] + 8);
  v2474 = v207 & 0xFFFFFFFFCFFFFFFFLL;
  v2475 = *(_QWORD *)(*(_QWORD *)(v2473 + 8) + 2448);
  v2476 = (unsigned int *)(v2475 + 520 * (v207 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2477 = *v2476;
  if ((_DWORD)v2477)
  {
    v2478 = 0;
    v2479 = 0;
    v2480 = **(_QWORD **)(v2473 + 16);
    v2481 = v2475 + 520 * v2474;
    v2482 = v2481 + 364;
    v2483 = v2481 + 340;
    while (1)
    {
      v2484 = (uint64_t *)(v2482 + 12 * v2478);
      v2485 = *(uint64_t **)(v2480 + 2512);
      if (v2485)
        break;
LABEL_3312:
      *(_WORD *)(v2483 + 2 * v2479) = *(_WORD *)(v2483 + 2 * v2478);
      if (v2478 != v2479)
      {
        v2492 = *v2484;
        v2493 = v2482 + 12 * v2479;
        *(_DWORD *)(v2493 + 8) = *((_DWORD *)v2484 + 2);
        *(_QWORD *)v2493 = v2492;
      }
      ++v2479;
LABEL_3296:
      if (++v2478 == v2477)
        goto LABEL_3315;
    }
    v2486 = *(_DWORD *)v2484;
    v2487 = *((_DWORD *)v2484 + 1);
    v2488 = *((_DWORD *)v2484 + 2);
    while (1)
    {
      v2489 = *((_DWORD *)v2485 + 7);
      if (v2486 == v2489)
      {
        v2490 = *((_DWORD *)v2485 + 8);
        if (v2487 == v2490)
        {
          v2491 = *((_DWORD *)v2485 + 9);
          if (v2488 < v2491)
            goto LABEL_3300;
          if (v2491 >= v2488)
            goto LABEL_3296;
        }
        else
        {
          if (v2487 < v2490)
            goto LABEL_3300;
          if (v2490 >= v2487)
            goto LABEL_3296;
        }
      }
      else
      {
        if (v2486 < v2489)
          goto LABEL_3300;
        if (v2489 >= v2486)
          goto LABEL_3296;
      }
      ++v2485;
LABEL_3300:
      v2485 = (uint64_t *)*v2485;
      if (!v2485)
        goto LABEL_3312;
    }
  }
  v2479 = 0;
LABEL_3315:
  *v2476 = v2479;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v209 = v3[491];
  if (v209 >> 30)
    v2494 = 1;
  else
    v2494 = (_DWORD)v209 == v5;
  if (v2494)
    goto LABEL_516;
LABEL_3319:
  v2495 = *(_QWORD *)(v1[2] + 8);
  v2496 = v209 & 0xFFFFFFFFCFFFFFFFLL;
  v2497 = *(_QWORD *)(*(_QWORD *)(v2495 + 8) + 2448);
  v2498 = (unsigned int *)(v2497 + 520 * (v209 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2499 = *v2498;
  if ((_DWORD)v2499)
  {
    v2500 = 0;
    v2501 = 0;
    v2502 = **(_QWORD **)(v2495 + 16);
    v2503 = v2497 + 520 * v2496;
    v2504 = v2503 + 364;
    v2505 = v2503 + 340;
    while (1)
    {
      v2506 = (uint64_t *)(v2504 + 12 * v2500);
      v2507 = *(uint64_t **)(v2502 + 2512);
      if (v2507)
        break;
LABEL_3338:
      *(_WORD *)(v2505 + 2 * v2501) = *(_WORD *)(v2505 + 2 * v2500);
      if (v2500 != v2501)
      {
        v2514 = *v2506;
        v2515 = v2504 + 12 * v2501;
        *(_DWORD *)(v2515 + 8) = *((_DWORD *)v2506 + 2);
        *(_QWORD *)v2515 = v2514;
      }
      ++v2501;
LABEL_3322:
      if (++v2500 == v2499)
        goto LABEL_3341;
    }
    v2508 = *(_DWORD *)v2506;
    v2509 = *((_DWORD *)v2506 + 1);
    v2510 = *((_DWORD *)v2506 + 2);
    while (1)
    {
      v2511 = *((_DWORD *)v2507 + 7);
      if (v2508 == v2511)
      {
        v2512 = *((_DWORD *)v2507 + 8);
        if (v2509 == v2512)
        {
          v2513 = *((_DWORD *)v2507 + 9);
          if (v2510 < v2513)
            goto LABEL_3326;
          if (v2513 >= v2510)
            goto LABEL_3322;
        }
        else
        {
          if (v2509 < v2512)
            goto LABEL_3326;
          if (v2512 >= v2509)
            goto LABEL_3322;
        }
      }
      else
      {
        if (v2508 < v2511)
          goto LABEL_3326;
        if (v2511 >= v2508)
          goto LABEL_3322;
      }
      ++v2507;
LABEL_3326:
      v2507 = (uint64_t *)*v2507;
      if (!v2507)
        goto LABEL_3338;
    }
  }
  v2501 = 0;
LABEL_3341:
  *v2498 = v2501;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v211 = v3[492];
  if (v211 >> 30)
    v2516 = 1;
  else
    v2516 = (_DWORD)v211 == v5;
  if (v2516)
    goto LABEL_521;
LABEL_3345:
  v2517 = *(_QWORD *)(v1[2] + 8);
  v2518 = v211 & 0xFFFFFFFFCFFFFFFFLL;
  v2519 = *(_QWORD *)(*(_QWORD *)(v2517 + 8) + 2448);
  v2520 = (unsigned int *)(v2519 + 520 * (v211 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2521 = *v2520;
  if ((_DWORD)v2521)
  {
    v2522 = 0;
    v2523 = 0;
    v2524 = **(_QWORD **)(v2517 + 16);
    v2525 = v2519 + 520 * v2518;
    v2526 = v2525 + 364;
    v2527 = v2525 + 340;
    while (1)
    {
      v2528 = (uint64_t *)(v2526 + 12 * v2522);
      v2529 = *(uint64_t **)(v2524 + 2512);
      if (v2529)
        break;
LABEL_3364:
      *(_WORD *)(v2527 + 2 * v2523) = *(_WORD *)(v2527 + 2 * v2522);
      if (v2522 != v2523)
      {
        v2536 = *v2528;
        v2537 = v2526 + 12 * v2523;
        *(_DWORD *)(v2537 + 8) = *((_DWORD *)v2528 + 2);
        *(_QWORD *)v2537 = v2536;
      }
      ++v2523;
LABEL_3348:
      if (++v2522 == v2521)
        goto LABEL_3367;
    }
    v2530 = *(_DWORD *)v2528;
    v2531 = *((_DWORD *)v2528 + 1);
    v2532 = *((_DWORD *)v2528 + 2);
    while (1)
    {
      v2533 = *((_DWORD *)v2529 + 7);
      if (v2530 == v2533)
      {
        v2534 = *((_DWORD *)v2529 + 8);
        if (v2531 == v2534)
        {
          v2535 = *((_DWORD *)v2529 + 9);
          if (v2532 < v2535)
            goto LABEL_3352;
          if (v2535 >= v2532)
            goto LABEL_3348;
        }
        else
        {
          if (v2531 < v2534)
            goto LABEL_3352;
          if (v2534 >= v2531)
            goto LABEL_3348;
        }
      }
      else
      {
        if (v2530 < v2533)
          goto LABEL_3352;
        if (v2533 >= v2530)
          goto LABEL_3348;
      }
      ++v2529;
LABEL_3352:
      v2529 = (uint64_t *)*v2529;
      if (!v2529)
        goto LABEL_3364;
    }
  }
  v2523 = 0;
LABEL_3367:
  *v2520 = v2523;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v213 = v3[493];
  if (v213 >> 30)
    v2538 = 1;
  else
    v2538 = (_DWORD)v213 == v5;
  if (v2538)
    goto LABEL_526;
LABEL_3371:
  v2539 = *(_QWORD *)(v1[2] + 8);
  v2540 = v213 & 0xFFFFFFFFCFFFFFFFLL;
  v2541 = *(_QWORD *)(*(_QWORD *)(v2539 + 8) + 2448);
  v2542 = (unsigned int *)(v2541 + 520 * (v213 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2543 = *v2542;
  if ((_DWORD)v2543)
  {
    v2544 = 0;
    v2545 = 0;
    v2546 = **(_QWORD **)(v2539 + 16);
    v2547 = v2541 + 520 * v2540;
    v2548 = v2547 + 364;
    v2549 = v2547 + 340;
    while (1)
    {
      v2550 = (uint64_t *)(v2548 + 12 * v2544);
      v2551 = *(uint64_t **)(v2546 + 2512);
      if (v2551)
        break;
LABEL_3390:
      *(_WORD *)(v2549 + 2 * v2545) = *(_WORD *)(v2549 + 2 * v2544);
      if (v2544 != v2545)
      {
        v2558 = *v2550;
        v2559 = v2548 + 12 * v2545;
        *(_DWORD *)(v2559 + 8) = *((_DWORD *)v2550 + 2);
        *(_QWORD *)v2559 = v2558;
      }
      ++v2545;
LABEL_3374:
      if (++v2544 == v2543)
        goto LABEL_3393;
    }
    v2552 = *(_DWORD *)v2550;
    v2553 = *((_DWORD *)v2550 + 1);
    v2554 = *((_DWORD *)v2550 + 2);
    while (1)
    {
      v2555 = *((_DWORD *)v2551 + 7);
      if (v2552 == v2555)
      {
        v2556 = *((_DWORD *)v2551 + 8);
        if (v2553 == v2556)
        {
          v2557 = *((_DWORD *)v2551 + 9);
          if (v2554 < v2557)
            goto LABEL_3378;
          if (v2557 >= v2554)
            goto LABEL_3374;
        }
        else
        {
          if (v2553 < v2556)
            goto LABEL_3378;
          if (v2556 >= v2553)
            goto LABEL_3374;
        }
      }
      else
      {
        if (v2552 < v2555)
          goto LABEL_3378;
        if (v2555 >= v2552)
          goto LABEL_3374;
      }
      ++v2551;
LABEL_3378:
      v2551 = (uint64_t *)*v2551;
      if (!v2551)
        goto LABEL_3390;
    }
  }
  v2545 = 0;
LABEL_3393:
  *v2542 = v2545;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v215 = v3[494];
  if (v215 >> 30)
    v2560 = 1;
  else
    v2560 = (_DWORD)v215 == v5;
  if (v2560)
    goto LABEL_531;
LABEL_3397:
  v2561 = *(_QWORD *)(v1[2] + 8);
  v2562 = v215 & 0xFFFFFFFFCFFFFFFFLL;
  v2563 = *(_QWORD *)(*(_QWORD *)(v2561 + 8) + 2448);
  v2564 = (unsigned int *)(v2563 + 520 * (v215 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2565 = *v2564;
  if ((_DWORD)v2565)
  {
    v2566 = 0;
    v2567 = 0;
    v2568 = **(_QWORD **)(v2561 + 16);
    v2569 = v2563 + 520 * v2562;
    v2570 = v2569 + 364;
    v2571 = v2569 + 340;
    while (1)
    {
      v2572 = (uint64_t *)(v2570 + 12 * v2566);
      v2573 = *(uint64_t **)(v2568 + 2512);
      if (v2573)
        break;
LABEL_3416:
      *(_WORD *)(v2571 + 2 * v2567) = *(_WORD *)(v2571 + 2 * v2566);
      if (v2566 != v2567)
      {
        v2580 = *v2572;
        v2581 = v2570 + 12 * v2567;
        *(_DWORD *)(v2581 + 8) = *((_DWORD *)v2572 + 2);
        *(_QWORD *)v2581 = v2580;
      }
      ++v2567;
LABEL_3400:
      if (++v2566 == v2565)
        goto LABEL_3419;
    }
    v2574 = *(_DWORD *)v2572;
    v2575 = *((_DWORD *)v2572 + 1);
    v2576 = *((_DWORD *)v2572 + 2);
    while (1)
    {
      v2577 = *((_DWORD *)v2573 + 7);
      if (v2574 == v2577)
      {
        v2578 = *((_DWORD *)v2573 + 8);
        if (v2575 == v2578)
        {
          v2579 = *((_DWORD *)v2573 + 9);
          if (v2576 < v2579)
            goto LABEL_3404;
          if (v2579 >= v2576)
            goto LABEL_3400;
        }
        else
        {
          if (v2575 < v2578)
            goto LABEL_3404;
          if (v2578 >= v2575)
            goto LABEL_3400;
        }
      }
      else
      {
        if (v2574 < v2577)
          goto LABEL_3404;
        if (v2577 >= v2574)
          goto LABEL_3400;
      }
      ++v2573;
LABEL_3404:
      v2573 = (uint64_t *)*v2573;
      if (!v2573)
        goto LABEL_3416;
    }
  }
  v2567 = 0;
LABEL_3419:
  *v2564 = v2567;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v217 = v3[495];
  if (v217 >> 30)
    v2582 = 1;
  else
    v2582 = (_DWORD)v217 == v5;
  if (v2582)
    goto LABEL_536;
LABEL_3423:
  v2583 = *(_QWORD *)(v1[2] + 8);
  v2584 = v217 & 0xFFFFFFFFCFFFFFFFLL;
  v2585 = *(_QWORD *)(*(_QWORD *)(v2583 + 8) + 2448);
  v2586 = (unsigned int *)(v2585 + 520 * (v217 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2587 = *v2586;
  if ((_DWORD)v2587)
  {
    v2588 = 0;
    v2589 = 0;
    v2590 = **(_QWORD **)(v2583 + 16);
    v2591 = v2585 + 520 * v2584;
    v2592 = v2591 + 364;
    v2593 = v2591 + 340;
    while (1)
    {
      v2594 = (uint64_t *)(v2592 + 12 * v2588);
      v2595 = *(uint64_t **)(v2590 + 2512);
      if (v2595)
        break;
LABEL_3442:
      *(_WORD *)(v2593 + 2 * v2589) = *(_WORD *)(v2593 + 2 * v2588);
      if (v2588 != v2589)
      {
        v2602 = *v2594;
        v2603 = v2592 + 12 * v2589;
        *(_DWORD *)(v2603 + 8) = *((_DWORD *)v2594 + 2);
        *(_QWORD *)v2603 = v2602;
      }
      ++v2589;
LABEL_3426:
      if (++v2588 == v2587)
        goto LABEL_3445;
    }
    v2596 = *(_DWORD *)v2594;
    v2597 = *((_DWORD *)v2594 + 1);
    v2598 = *((_DWORD *)v2594 + 2);
    while (1)
    {
      v2599 = *((_DWORD *)v2595 + 7);
      if (v2596 == v2599)
      {
        v2600 = *((_DWORD *)v2595 + 8);
        if (v2597 == v2600)
        {
          v2601 = *((_DWORD *)v2595 + 9);
          if (v2598 < v2601)
            goto LABEL_3430;
          if (v2601 >= v2598)
            goto LABEL_3426;
        }
        else
        {
          if (v2597 < v2600)
            goto LABEL_3430;
          if (v2600 >= v2597)
            goto LABEL_3426;
        }
      }
      else
      {
        if (v2596 < v2599)
          goto LABEL_3430;
        if (v2599 >= v2596)
          goto LABEL_3426;
      }
      ++v2595;
LABEL_3430:
      v2595 = (uint64_t *)*v2595;
      if (!v2595)
        goto LABEL_3442;
    }
  }
  v2589 = 0;
LABEL_3445:
  *v2586 = v2589;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v219 = v3[496];
  if (v219 >> 30)
    v2604 = 1;
  else
    v2604 = (_DWORD)v219 == v5;
  if (v2604)
    goto LABEL_541;
LABEL_3449:
  v2605 = *(_QWORD *)(v1[2] + 8);
  v2606 = v219 & 0xFFFFFFFFCFFFFFFFLL;
  v2607 = *(_QWORD *)(*(_QWORD *)(v2605 + 8) + 2448);
  v2608 = (unsigned int *)(v2607 + 520 * (v219 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2609 = *v2608;
  if ((_DWORD)v2609)
  {
    v2610 = 0;
    v2611 = 0;
    v2612 = **(_QWORD **)(v2605 + 16);
    v2613 = v2607 + 520 * v2606;
    v2614 = v2613 + 364;
    v2615 = v2613 + 340;
    while (1)
    {
      v2616 = (uint64_t *)(v2614 + 12 * v2610);
      v2617 = *(uint64_t **)(v2612 + 2512);
      if (v2617)
        break;
LABEL_3468:
      *(_WORD *)(v2615 + 2 * v2611) = *(_WORD *)(v2615 + 2 * v2610);
      if (v2610 != v2611)
      {
        v2624 = *v2616;
        v2625 = v2614 + 12 * v2611;
        *(_DWORD *)(v2625 + 8) = *((_DWORD *)v2616 + 2);
        *(_QWORD *)v2625 = v2624;
      }
      ++v2611;
LABEL_3452:
      if (++v2610 == v2609)
        goto LABEL_3471;
    }
    v2618 = *(_DWORD *)v2616;
    v2619 = *((_DWORD *)v2616 + 1);
    v2620 = *((_DWORD *)v2616 + 2);
    while (1)
    {
      v2621 = *((_DWORD *)v2617 + 7);
      if (v2618 == v2621)
      {
        v2622 = *((_DWORD *)v2617 + 8);
        if (v2619 == v2622)
        {
          v2623 = *((_DWORD *)v2617 + 9);
          if (v2620 < v2623)
            goto LABEL_3456;
          if (v2623 >= v2620)
            goto LABEL_3452;
        }
        else
        {
          if (v2619 < v2622)
            goto LABEL_3456;
          if (v2622 >= v2619)
            goto LABEL_3452;
        }
      }
      else
      {
        if (v2618 < v2621)
          goto LABEL_3456;
        if (v2621 >= v2618)
          goto LABEL_3452;
      }
      ++v2617;
LABEL_3456:
      v2617 = (uint64_t *)*v2617;
      if (!v2617)
        goto LABEL_3468;
    }
  }
  v2611 = 0;
LABEL_3471:
  *v2608 = v2611;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v221 = v3[497];
  if (v221 >> 30)
    v2626 = 1;
  else
    v2626 = (_DWORD)v221 == v5;
  if (v2626)
    goto LABEL_546;
LABEL_3475:
  v2627 = *(_QWORD *)(v1[2] + 8);
  v2628 = v221 & 0xFFFFFFFFCFFFFFFFLL;
  v2629 = *(_QWORD *)(*(_QWORD *)(v2627 + 8) + 2448);
  v2630 = (unsigned int *)(v2629 + 520 * (v221 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2631 = *v2630;
  if ((_DWORD)v2631)
  {
    v2632 = 0;
    v2633 = 0;
    v2634 = **(_QWORD **)(v2627 + 16);
    v2635 = v2629 + 520 * v2628;
    v2636 = v2635 + 364;
    v2637 = v2635 + 340;
    while (1)
    {
      v2638 = (uint64_t *)(v2636 + 12 * v2632);
      v2639 = *(uint64_t **)(v2634 + 2512);
      if (v2639)
        break;
LABEL_3494:
      *(_WORD *)(v2637 + 2 * v2633) = *(_WORD *)(v2637 + 2 * v2632);
      if (v2632 != v2633)
      {
        v2646 = *v2638;
        v2647 = v2636 + 12 * v2633;
        *(_DWORD *)(v2647 + 8) = *((_DWORD *)v2638 + 2);
        *(_QWORD *)v2647 = v2646;
      }
      ++v2633;
LABEL_3478:
      if (++v2632 == v2631)
        goto LABEL_3497;
    }
    v2640 = *(_DWORD *)v2638;
    v2641 = *((_DWORD *)v2638 + 1);
    v2642 = *((_DWORD *)v2638 + 2);
    while (1)
    {
      v2643 = *((_DWORD *)v2639 + 7);
      if (v2640 == v2643)
      {
        v2644 = *((_DWORD *)v2639 + 8);
        if (v2641 == v2644)
        {
          v2645 = *((_DWORD *)v2639 + 9);
          if (v2642 < v2645)
            goto LABEL_3482;
          if (v2645 >= v2642)
            goto LABEL_3478;
        }
        else
        {
          if (v2641 < v2644)
            goto LABEL_3482;
          if (v2644 >= v2641)
            goto LABEL_3478;
        }
      }
      else
      {
        if (v2640 < v2643)
          goto LABEL_3482;
        if (v2643 >= v2640)
          goto LABEL_3478;
      }
      ++v2639;
LABEL_3482:
      v2639 = (uint64_t *)*v2639;
      if (!v2639)
        goto LABEL_3494;
    }
  }
  v2633 = 0;
LABEL_3497:
  *v2630 = v2633;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v223 = v3[498];
  if (v223 >> 30)
    v2648 = 1;
  else
    v2648 = (_DWORD)v223 == v5;
  if (v2648)
    goto LABEL_551;
LABEL_3501:
  v2649 = *(_QWORD *)(v1[2] + 8);
  v2650 = v223 & 0xFFFFFFFFCFFFFFFFLL;
  v2651 = *(_QWORD *)(*(_QWORD *)(v2649 + 8) + 2448);
  v2652 = (unsigned int *)(v2651 + 520 * (v223 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2653 = *v2652;
  if ((_DWORD)v2653)
  {
    v2654 = 0;
    v2655 = 0;
    v2656 = **(_QWORD **)(v2649 + 16);
    v2657 = v2651 + 520 * v2650;
    v2658 = v2657 + 364;
    v2659 = v2657 + 340;
    while (1)
    {
      v2660 = (uint64_t *)(v2658 + 12 * v2654);
      v2661 = *(uint64_t **)(v2656 + 2512);
      if (v2661)
        break;
LABEL_3520:
      *(_WORD *)(v2659 + 2 * v2655) = *(_WORD *)(v2659 + 2 * v2654);
      if (v2654 != v2655)
      {
        v2668 = *v2660;
        v2669 = v2658 + 12 * v2655;
        *(_DWORD *)(v2669 + 8) = *((_DWORD *)v2660 + 2);
        *(_QWORD *)v2669 = v2668;
      }
      ++v2655;
LABEL_3504:
      if (++v2654 == v2653)
        goto LABEL_3523;
    }
    v2662 = *(_DWORD *)v2660;
    v2663 = *((_DWORD *)v2660 + 1);
    v2664 = *((_DWORD *)v2660 + 2);
    while (1)
    {
      v2665 = *((_DWORD *)v2661 + 7);
      if (v2662 == v2665)
      {
        v2666 = *((_DWORD *)v2661 + 8);
        if (v2663 == v2666)
        {
          v2667 = *((_DWORD *)v2661 + 9);
          if (v2664 < v2667)
            goto LABEL_3508;
          if (v2667 >= v2664)
            goto LABEL_3504;
        }
        else
        {
          if (v2663 < v2666)
            goto LABEL_3508;
          if (v2666 >= v2663)
            goto LABEL_3504;
        }
      }
      else
      {
        if (v2662 < v2665)
          goto LABEL_3508;
        if (v2665 >= v2662)
          goto LABEL_3504;
      }
      ++v2661;
LABEL_3508:
      v2661 = (uint64_t *)*v2661;
      if (!v2661)
        goto LABEL_3520;
    }
  }
  v2655 = 0;
LABEL_3523:
  *v2652 = v2655;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v225 = v3[499];
  if (v225 >> 30)
    v2670 = 1;
  else
    v2670 = (_DWORD)v225 == v5;
  if (v2670)
    goto LABEL_556;
LABEL_3527:
  v2671 = *(_QWORD *)(v1[2] + 8);
  v2672 = v225 & 0xFFFFFFFFCFFFFFFFLL;
  v2673 = *(_QWORD *)(*(_QWORD *)(v2671 + 8) + 2448);
  v2674 = (unsigned int *)(v2673 + 520 * (v225 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2675 = *v2674;
  if ((_DWORD)v2675)
  {
    v2676 = 0;
    v2677 = 0;
    v2678 = **(_QWORD **)(v2671 + 16);
    v2679 = v2673 + 520 * v2672;
    v2680 = v2679 + 364;
    v2681 = v2679 + 340;
    while (1)
    {
      v2682 = (uint64_t *)(v2680 + 12 * v2676);
      v2683 = *(uint64_t **)(v2678 + 2512);
      if (v2683)
        break;
LABEL_3546:
      *(_WORD *)(v2681 + 2 * v2677) = *(_WORD *)(v2681 + 2 * v2676);
      if (v2676 != v2677)
      {
        v2690 = *v2682;
        v2691 = v2680 + 12 * v2677;
        *(_DWORD *)(v2691 + 8) = *((_DWORD *)v2682 + 2);
        *(_QWORD *)v2691 = v2690;
      }
      ++v2677;
LABEL_3530:
      if (++v2676 == v2675)
        goto LABEL_3549;
    }
    v2684 = *(_DWORD *)v2682;
    v2685 = *((_DWORD *)v2682 + 1);
    v2686 = *((_DWORD *)v2682 + 2);
    while (1)
    {
      v2687 = *((_DWORD *)v2683 + 7);
      if (v2684 == v2687)
      {
        v2688 = *((_DWORD *)v2683 + 8);
        if (v2685 == v2688)
        {
          v2689 = *((_DWORD *)v2683 + 9);
          if (v2686 < v2689)
            goto LABEL_3534;
          if (v2689 >= v2686)
            goto LABEL_3530;
        }
        else
        {
          if (v2685 < v2688)
            goto LABEL_3534;
          if (v2688 >= v2685)
            goto LABEL_3530;
        }
      }
      else
      {
        if (v2684 < v2687)
          goto LABEL_3534;
        if (v2687 >= v2684)
          goto LABEL_3530;
      }
      ++v2683;
LABEL_3534:
      v2683 = (uint64_t *)*v2683;
      if (!v2683)
        goto LABEL_3546;
    }
  }
  v2677 = 0;
LABEL_3549:
  *v2674 = v2677;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v227 = v3[500];
  if (v227 >> 30)
    v2692 = 1;
  else
    v2692 = (_DWORD)v227 == v5;
  if (v2692)
    goto LABEL_561;
LABEL_3553:
  v2693 = *(_QWORD *)(v1[2] + 8);
  v2694 = v227 & 0xFFFFFFFFCFFFFFFFLL;
  v2695 = *(_QWORD *)(*(_QWORD *)(v2693 + 8) + 2448);
  v2696 = (unsigned int *)(v2695 + 520 * (v227 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2697 = *v2696;
  if ((_DWORD)v2697)
  {
    v2698 = 0;
    v2699 = 0;
    v2700 = **(_QWORD **)(v2693 + 16);
    v2701 = v2695 + 520 * v2694;
    v2702 = v2701 + 364;
    v2703 = v2701 + 340;
    while (1)
    {
      v2704 = (uint64_t *)(v2702 + 12 * v2698);
      v2705 = *(uint64_t **)(v2700 + 2512);
      if (v2705)
        break;
LABEL_3572:
      *(_WORD *)(v2703 + 2 * v2699) = *(_WORD *)(v2703 + 2 * v2698);
      if (v2698 != v2699)
      {
        v2712 = *v2704;
        v2713 = v2702 + 12 * v2699;
        *(_DWORD *)(v2713 + 8) = *((_DWORD *)v2704 + 2);
        *(_QWORD *)v2713 = v2712;
      }
      ++v2699;
LABEL_3556:
      if (++v2698 == v2697)
        goto LABEL_3575;
    }
    v2706 = *(_DWORD *)v2704;
    v2707 = *((_DWORD *)v2704 + 1);
    v2708 = *((_DWORD *)v2704 + 2);
    while (1)
    {
      v2709 = *((_DWORD *)v2705 + 7);
      if (v2706 == v2709)
      {
        v2710 = *((_DWORD *)v2705 + 8);
        if (v2707 == v2710)
        {
          v2711 = *((_DWORD *)v2705 + 9);
          if (v2708 < v2711)
            goto LABEL_3560;
          if (v2711 >= v2708)
            goto LABEL_3556;
        }
        else
        {
          if (v2707 < v2710)
            goto LABEL_3560;
          if (v2710 >= v2707)
            goto LABEL_3556;
        }
      }
      else
      {
        if (v2706 < v2709)
          goto LABEL_3560;
        if (v2709 >= v2706)
          goto LABEL_3556;
      }
      ++v2705;
LABEL_3560:
      v2705 = (uint64_t *)*v2705;
      if (!v2705)
        goto LABEL_3572;
    }
  }
  v2699 = 0;
LABEL_3575:
  *v2696 = v2699;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v229 = v3[501];
  if (v229 >> 30)
    v2714 = 1;
  else
    v2714 = (_DWORD)v229 == v5;
  if (v2714)
    goto LABEL_566;
LABEL_3579:
  v2715 = *(_QWORD *)(v1[2] + 8);
  v2716 = v229 & 0xFFFFFFFFCFFFFFFFLL;
  v2717 = *(_QWORD *)(*(_QWORD *)(v2715 + 8) + 2448);
  v2718 = (unsigned int *)(v2717 + 520 * (v229 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2719 = *v2718;
  if ((_DWORD)v2719)
  {
    v2720 = 0;
    v2721 = 0;
    v2722 = **(_QWORD **)(v2715 + 16);
    v2723 = v2717 + 520 * v2716;
    v2724 = v2723 + 364;
    v2725 = v2723 + 340;
    while (1)
    {
      v2726 = (uint64_t *)(v2724 + 12 * v2720);
      v2727 = *(uint64_t **)(v2722 + 2512);
      if (v2727)
        break;
LABEL_3598:
      *(_WORD *)(v2725 + 2 * v2721) = *(_WORD *)(v2725 + 2 * v2720);
      if (v2720 != v2721)
      {
        v2734 = *v2726;
        v2735 = v2724 + 12 * v2721;
        *(_DWORD *)(v2735 + 8) = *((_DWORD *)v2726 + 2);
        *(_QWORD *)v2735 = v2734;
      }
      ++v2721;
LABEL_3582:
      if (++v2720 == v2719)
        goto LABEL_3601;
    }
    v2728 = *(_DWORD *)v2726;
    v2729 = *((_DWORD *)v2726 + 1);
    v2730 = *((_DWORD *)v2726 + 2);
    while (1)
    {
      v2731 = *((_DWORD *)v2727 + 7);
      if (v2728 == v2731)
      {
        v2732 = *((_DWORD *)v2727 + 8);
        if (v2729 == v2732)
        {
          v2733 = *((_DWORD *)v2727 + 9);
          if (v2730 < v2733)
            goto LABEL_3586;
          if (v2733 >= v2730)
            goto LABEL_3582;
        }
        else
        {
          if (v2729 < v2732)
            goto LABEL_3586;
          if (v2732 >= v2729)
            goto LABEL_3582;
        }
      }
      else
      {
        if (v2728 < v2731)
          goto LABEL_3586;
        if (v2731 >= v2728)
          goto LABEL_3582;
      }
      ++v2727;
LABEL_3586:
      v2727 = (uint64_t *)*v2727;
      if (!v2727)
        goto LABEL_3598;
    }
  }
  v2721 = 0;
LABEL_3601:
  *v2718 = v2721;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v231 = v3[502];
  if (v231 >> 30)
    v2736 = 1;
  else
    v2736 = (_DWORD)v231 == v5;
  if (v2736)
    goto LABEL_571;
LABEL_3605:
  v2737 = *(_QWORD *)(v1[2] + 8);
  v2738 = v231 & 0xFFFFFFFFCFFFFFFFLL;
  v2739 = *(_QWORD *)(*(_QWORD *)(v2737 + 8) + 2448);
  v2740 = (unsigned int *)(v2739 + 520 * (v231 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2741 = *v2740;
  if ((_DWORD)v2741)
  {
    v2742 = 0;
    v2743 = 0;
    v2744 = **(_QWORD **)(v2737 + 16);
    v2745 = v2739 + 520 * v2738;
    v2746 = v2745 + 364;
    v2747 = v2745 + 340;
    while (1)
    {
      v2748 = (uint64_t *)(v2746 + 12 * v2742);
      v2749 = *(uint64_t **)(v2744 + 2512);
      if (v2749)
        break;
LABEL_3624:
      *(_WORD *)(v2747 + 2 * v2743) = *(_WORD *)(v2747 + 2 * v2742);
      if (v2742 != v2743)
      {
        v2756 = *v2748;
        v2757 = v2746 + 12 * v2743;
        *(_DWORD *)(v2757 + 8) = *((_DWORD *)v2748 + 2);
        *(_QWORD *)v2757 = v2756;
      }
      ++v2743;
LABEL_3608:
      if (++v2742 == v2741)
        goto LABEL_3627;
    }
    v2750 = *(_DWORD *)v2748;
    v2751 = *((_DWORD *)v2748 + 1);
    v2752 = *((_DWORD *)v2748 + 2);
    while (1)
    {
      v2753 = *((_DWORD *)v2749 + 7);
      if (v2750 == v2753)
      {
        v2754 = *((_DWORD *)v2749 + 8);
        if (v2751 == v2754)
        {
          v2755 = *((_DWORD *)v2749 + 9);
          if (v2752 < v2755)
            goto LABEL_3612;
          if (v2755 >= v2752)
            goto LABEL_3608;
        }
        else
        {
          if (v2751 < v2754)
            goto LABEL_3612;
          if (v2754 >= v2751)
            goto LABEL_3608;
        }
      }
      else
      {
        if (v2750 < v2753)
          goto LABEL_3612;
        if (v2753 >= v2750)
          goto LABEL_3608;
      }
      ++v2749;
LABEL_3612:
      v2749 = (uint64_t *)*v2749;
      if (!v2749)
        goto LABEL_3624;
    }
  }
  v2743 = 0;
LABEL_3627:
  *v2740 = v2743;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v233 = v3[503];
  if (v233 >> 30)
    v2758 = 1;
  else
    v2758 = (_DWORD)v233 == v5;
  if (v2758)
    goto LABEL_576;
LABEL_3631:
  v2759 = *(_QWORD *)(v1[2] + 8);
  v2760 = v233 & 0xFFFFFFFFCFFFFFFFLL;
  v2761 = *(_QWORD *)(*(_QWORD *)(v2759 + 8) + 2448);
  v2762 = (unsigned int *)(v2761 + 520 * (v233 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2763 = *v2762;
  if ((_DWORD)v2763)
  {
    v2764 = 0;
    v2765 = 0;
    v2766 = **(_QWORD **)(v2759 + 16);
    v2767 = v2761 + 520 * v2760;
    v2768 = v2767 + 364;
    v2769 = v2767 + 340;
    while (1)
    {
      v2770 = (uint64_t *)(v2768 + 12 * v2764);
      v2771 = *(uint64_t **)(v2766 + 2512);
      if (v2771)
        break;
LABEL_3650:
      *(_WORD *)(v2769 + 2 * v2765) = *(_WORD *)(v2769 + 2 * v2764);
      if (v2764 != v2765)
      {
        v2778 = *v2770;
        v2779 = v2768 + 12 * v2765;
        *(_DWORD *)(v2779 + 8) = *((_DWORD *)v2770 + 2);
        *(_QWORD *)v2779 = v2778;
      }
      ++v2765;
LABEL_3634:
      if (++v2764 == v2763)
        goto LABEL_3653;
    }
    v2772 = *(_DWORD *)v2770;
    v2773 = *((_DWORD *)v2770 + 1);
    v2774 = *((_DWORD *)v2770 + 2);
    while (1)
    {
      v2775 = *((_DWORD *)v2771 + 7);
      if (v2772 == v2775)
      {
        v2776 = *((_DWORD *)v2771 + 8);
        if (v2773 == v2776)
        {
          v2777 = *((_DWORD *)v2771 + 9);
          if (v2774 < v2777)
            goto LABEL_3638;
          if (v2777 >= v2774)
            goto LABEL_3634;
        }
        else
        {
          if (v2773 < v2776)
            goto LABEL_3638;
          if (v2776 >= v2773)
            goto LABEL_3634;
        }
      }
      else
      {
        if (v2772 < v2775)
          goto LABEL_3638;
        if (v2775 >= v2772)
          goto LABEL_3634;
      }
      ++v2771;
LABEL_3638:
      v2771 = (uint64_t *)*v2771;
      if (!v2771)
        goto LABEL_3650;
    }
  }
  v2765 = 0;
LABEL_3653:
  *v2762 = v2765;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v235 = v3[504];
  if (v235 >> 30)
    v2780 = 1;
  else
    v2780 = (_DWORD)v235 == v5;
  if (v2780)
    goto LABEL_581;
LABEL_3657:
  v2781 = *(_QWORD *)(v1[2] + 8);
  v2782 = v235 & 0xFFFFFFFFCFFFFFFFLL;
  v2783 = *(_QWORD *)(*(_QWORD *)(v2781 + 8) + 2448);
  v2784 = (unsigned int *)(v2783 + 520 * (v235 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2785 = *v2784;
  if ((_DWORD)v2785)
  {
    v2786 = 0;
    v2787 = 0;
    v2788 = **(_QWORD **)(v2781 + 16);
    v2789 = v2783 + 520 * v2782;
    v2790 = v2789 + 364;
    v2791 = v2789 + 340;
    while (1)
    {
      v2792 = (uint64_t *)(v2790 + 12 * v2786);
      v2793 = *(uint64_t **)(v2788 + 2512);
      if (v2793)
        break;
LABEL_3676:
      *(_WORD *)(v2791 + 2 * v2787) = *(_WORD *)(v2791 + 2 * v2786);
      if (v2786 != v2787)
      {
        v2800 = *v2792;
        v2801 = v2790 + 12 * v2787;
        *(_DWORD *)(v2801 + 8) = *((_DWORD *)v2792 + 2);
        *(_QWORD *)v2801 = v2800;
      }
      ++v2787;
LABEL_3660:
      if (++v2786 == v2785)
        goto LABEL_3679;
    }
    v2794 = *(_DWORD *)v2792;
    v2795 = *((_DWORD *)v2792 + 1);
    v2796 = *((_DWORD *)v2792 + 2);
    while (1)
    {
      v2797 = *((_DWORD *)v2793 + 7);
      if (v2794 == v2797)
      {
        v2798 = *((_DWORD *)v2793 + 8);
        if (v2795 == v2798)
        {
          v2799 = *((_DWORD *)v2793 + 9);
          if (v2796 < v2799)
            goto LABEL_3664;
          if (v2799 >= v2796)
            goto LABEL_3660;
        }
        else
        {
          if (v2795 < v2798)
            goto LABEL_3664;
          if (v2798 >= v2795)
            goto LABEL_3660;
        }
      }
      else
      {
        if (v2794 < v2797)
          goto LABEL_3664;
        if (v2797 >= v2794)
          goto LABEL_3660;
      }
      ++v2793;
LABEL_3664:
      v2793 = (uint64_t *)*v2793;
      if (!v2793)
        goto LABEL_3676;
    }
  }
  v2787 = 0;
LABEL_3679:
  *v2784 = v2787;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v237 = v3[505];
  if (v237 >> 30)
    v2802 = 1;
  else
    v2802 = (_DWORD)v237 == v5;
  if (v2802)
    goto LABEL_586;
LABEL_3683:
  v2803 = *(_QWORD *)(v1[2] + 8);
  v2804 = v237 & 0xFFFFFFFFCFFFFFFFLL;
  v2805 = *(_QWORD *)(*(_QWORD *)(v2803 + 8) + 2448);
  v2806 = (unsigned int *)(v2805 + 520 * (v237 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2807 = *v2806;
  if ((_DWORD)v2807)
  {
    v2808 = 0;
    v2809 = 0;
    v2810 = **(_QWORD **)(v2803 + 16);
    v2811 = v2805 + 520 * v2804;
    v2812 = v2811 + 364;
    v2813 = v2811 + 340;
    while (1)
    {
      v2814 = (uint64_t *)(v2812 + 12 * v2808);
      v2815 = *(uint64_t **)(v2810 + 2512);
      if (v2815)
        break;
LABEL_3702:
      *(_WORD *)(v2813 + 2 * v2809) = *(_WORD *)(v2813 + 2 * v2808);
      if (v2808 != v2809)
      {
        v2822 = *v2814;
        v2823 = v2812 + 12 * v2809;
        *(_DWORD *)(v2823 + 8) = *((_DWORD *)v2814 + 2);
        *(_QWORD *)v2823 = v2822;
      }
      ++v2809;
LABEL_3686:
      if (++v2808 == v2807)
        goto LABEL_3705;
    }
    v2816 = *(_DWORD *)v2814;
    v2817 = *((_DWORD *)v2814 + 1);
    v2818 = *((_DWORD *)v2814 + 2);
    while (1)
    {
      v2819 = *((_DWORD *)v2815 + 7);
      if (v2816 == v2819)
      {
        v2820 = *((_DWORD *)v2815 + 8);
        if (v2817 == v2820)
        {
          v2821 = *((_DWORD *)v2815 + 9);
          if (v2818 < v2821)
            goto LABEL_3690;
          if (v2821 >= v2818)
            goto LABEL_3686;
        }
        else
        {
          if (v2817 < v2820)
            goto LABEL_3690;
          if (v2820 >= v2817)
            goto LABEL_3686;
        }
      }
      else
      {
        if (v2816 < v2819)
          goto LABEL_3690;
        if (v2819 >= v2816)
          goto LABEL_3686;
      }
      ++v2815;
LABEL_3690:
      v2815 = (uint64_t *)*v2815;
      if (!v2815)
        goto LABEL_3702;
    }
  }
  v2809 = 0;
LABEL_3705:
  *v2806 = v2809;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v239 = v3[506];
  if (v239 >> 30)
    v2824 = 1;
  else
    v2824 = (_DWORD)v239 == v5;
  if (v2824)
    goto LABEL_591;
LABEL_3709:
  v2825 = *(_QWORD *)(v1[2] + 8);
  v2826 = v239 & 0xFFFFFFFFCFFFFFFFLL;
  v2827 = *(_QWORD *)(*(_QWORD *)(v2825 + 8) + 2448);
  v2828 = (unsigned int *)(v2827 + 520 * (v239 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2829 = *v2828;
  if ((_DWORD)v2829)
  {
    v2830 = 0;
    v2831 = 0;
    v2832 = **(_QWORD **)(v2825 + 16);
    v2833 = v2827 + 520 * v2826;
    v2834 = v2833 + 364;
    v2835 = v2833 + 340;
    while (1)
    {
      v2836 = (uint64_t *)(v2834 + 12 * v2830);
      v2837 = *(uint64_t **)(v2832 + 2512);
      if (v2837)
        break;
LABEL_3728:
      *(_WORD *)(v2835 + 2 * v2831) = *(_WORD *)(v2835 + 2 * v2830);
      if (v2830 != v2831)
      {
        v2844 = *v2836;
        v2845 = v2834 + 12 * v2831;
        *(_DWORD *)(v2845 + 8) = *((_DWORD *)v2836 + 2);
        *(_QWORD *)v2845 = v2844;
      }
      ++v2831;
LABEL_3712:
      if (++v2830 == v2829)
        goto LABEL_3731;
    }
    v2838 = *(_DWORD *)v2836;
    v2839 = *((_DWORD *)v2836 + 1);
    v2840 = *((_DWORD *)v2836 + 2);
    while (1)
    {
      v2841 = *((_DWORD *)v2837 + 7);
      if (v2838 == v2841)
      {
        v2842 = *((_DWORD *)v2837 + 8);
        if (v2839 == v2842)
        {
          v2843 = *((_DWORD *)v2837 + 9);
          if (v2840 < v2843)
            goto LABEL_3716;
          if (v2843 >= v2840)
            goto LABEL_3712;
        }
        else
        {
          if (v2839 < v2842)
            goto LABEL_3716;
          if (v2842 >= v2839)
            goto LABEL_3712;
        }
      }
      else
      {
        if (v2838 < v2841)
          goto LABEL_3716;
        if (v2841 >= v2838)
          goto LABEL_3712;
      }
      ++v2837;
LABEL_3716:
      v2837 = (uint64_t *)*v2837;
      if (!v2837)
        goto LABEL_3728;
    }
  }
  v2831 = 0;
LABEL_3731:
  *v2828 = v2831;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v241 = v3[507];
  if (v241 >> 30)
    v2846 = 1;
  else
    v2846 = (_DWORD)v241 == v5;
  if (v2846)
    goto LABEL_596;
LABEL_3735:
  v2847 = *(_QWORD *)(v1[2] + 8);
  v2848 = v241 & 0xFFFFFFFFCFFFFFFFLL;
  v2849 = *(_QWORD *)(*(_QWORD *)(v2847 + 8) + 2448);
  v2850 = (unsigned int *)(v2849 + 520 * (v241 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2851 = *v2850;
  if ((_DWORD)v2851)
  {
    v2852 = 0;
    v2853 = 0;
    v2854 = **(_QWORD **)(v2847 + 16);
    v2855 = v2849 + 520 * v2848;
    v2856 = v2855 + 364;
    v2857 = v2855 + 340;
    while (1)
    {
      v2858 = (uint64_t *)(v2856 + 12 * v2852);
      v2859 = *(uint64_t **)(v2854 + 2512);
      if (v2859)
        break;
LABEL_3754:
      *(_WORD *)(v2857 + 2 * v2853) = *(_WORD *)(v2857 + 2 * v2852);
      if (v2852 != v2853)
      {
        v2866 = *v2858;
        v2867 = v2856 + 12 * v2853;
        *(_DWORD *)(v2867 + 8) = *((_DWORD *)v2858 + 2);
        *(_QWORD *)v2867 = v2866;
      }
      ++v2853;
LABEL_3738:
      if (++v2852 == v2851)
        goto LABEL_3757;
    }
    v2860 = *(_DWORD *)v2858;
    v2861 = *((_DWORD *)v2858 + 1);
    v2862 = *((_DWORD *)v2858 + 2);
    while (1)
    {
      v2863 = *((_DWORD *)v2859 + 7);
      if (v2860 == v2863)
      {
        v2864 = *((_DWORD *)v2859 + 8);
        if (v2861 == v2864)
        {
          v2865 = *((_DWORD *)v2859 + 9);
          if (v2862 < v2865)
            goto LABEL_3742;
          if (v2865 >= v2862)
            goto LABEL_3738;
        }
        else
        {
          if (v2861 < v2864)
            goto LABEL_3742;
          if (v2864 >= v2861)
            goto LABEL_3738;
        }
      }
      else
      {
        if (v2860 < v2863)
          goto LABEL_3742;
        if (v2863 >= v2860)
          goto LABEL_3738;
      }
      ++v2859;
LABEL_3742:
      v2859 = (uint64_t *)*v2859;
      if (!v2859)
        goto LABEL_3754;
    }
  }
  v2853 = 0;
LABEL_3757:
  *v2850 = v2853;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v243 = v3[508];
  if (v243 >> 30)
    v2868 = 1;
  else
    v2868 = (_DWORD)v243 == v5;
  if (v2868)
    goto LABEL_601;
LABEL_3761:
  v2869 = *(_QWORD *)(v1[2] + 8);
  v2870 = v243 & 0xFFFFFFFFCFFFFFFFLL;
  v2871 = *(_QWORD *)(*(_QWORD *)(v2869 + 8) + 2448);
  v2872 = (unsigned int *)(v2871 + 520 * (v243 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2873 = *v2872;
  if ((_DWORD)v2873)
  {
    v2874 = 0;
    v2875 = 0;
    v2876 = **(_QWORD **)(v2869 + 16);
    v2877 = v2871 + 520 * v2870;
    v2878 = v2877 + 364;
    v2879 = v2877 + 340;
    while (1)
    {
      v2880 = (uint64_t *)(v2878 + 12 * v2874);
      v2881 = *(uint64_t **)(v2876 + 2512);
      if (v2881)
        break;
LABEL_3780:
      *(_WORD *)(v2879 + 2 * v2875) = *(_WORD *)(v2879 + 2 * v2874);
      if (v2874 != v2875)
      {
        v2888 = *v2880;
        v2889 = v2878 + 12 * v2875;
        *(_DWORD *)(v2889 + 8) = *((_DWORD *)v2880 + 2);
        *(_QWORD *)v2889 = v2888;
      }
      ++v2875;
LABEL_3764:
      if (++v2874 == v2873)
        goto LABEL_3783;
    }
    v2882 = *(_DWORD *)v2880;
    v2883 = *((_DWORD *)v2880 + 1);
    v2884 = *((_DWORD *)v2880 + 2);
    while (1)
    {
      v2885 = *((_DWORD *)v2881 + 7);
      if (v2882 == v2885)
      {
        v2886 = *((_DWORD *)v2881 + 8);
        if (v2883 == v2886)
        {
          v2887 = *((_DWORD *)v2881 + 9);
          if (v2884 < v2887)
            goto LABEL_3768;
          if (v2887 >= v2884)
            goto LABEL_3764;
        }
        else
        {
          if (v2883 < v2886)
            goto LABEL_3768;
          if (v2886 >= v2883)
            goto LABEL_3764;
        }
      }
      else
      {
        if (v2882 < v2885)
          goto LABEL_3768;
        if (v2885 >= v2882)
          goto LABEL_3764;
      }
      ++v2881;
LABEL_3768:
      v2881 = (uint64_t *)*v2881;
      if (!v2881)
        goto LABEL_3780;
    }
  }
  v2875 = 0;
LABEL_3783:
  *v2872 = v2875;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v245 = v3[509];
  if (v245 >> 30)
    v2890 = 1;
  else
    v2890 = (_DWORD)v245 == v5;
  if (v2890)
    goto LABEL_606;
LABEL_3787:
  v2891 = *(_QWORD *)(v1[2] + 8);
  v2892 = v245 & 0xFFFFFFFFCFFFFFFFLL;
  v2893 = *(_QWORD *)(*(_QWORD *)(v2891 + 8) + 2448);
  v2894 = (unsigned int *)(v2893 + 520 * (v245 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2895 = *v2894;
  if ((_DWORD)v2895)
  {
    v2896 = 0;
    v2897 = 0;
    v2898 = **(_QWORD **)(v2891 + 16);
    v2899 = v2893 + 520 * v2892;
    v2900 = v2899 + 364;
    v2901 = v2899 + 340;
    while (1)
    {
      v2902 = (uint64_t *)(v2900 + 12 * v2896);
      v2903 = *(uint64_t **)(v2898 + 2512);
      if (v2903)
        break;
LABEL_3806:
      *(_WORD *)(v2901 + 2 * v2897) = *(_WORD *)(v2901 + 2 * v2896);
      if (v2896 != v2897)
      {
        v2910 = *v2902;
        v2911 = v2900 + 12 * v2897;
        *(_DWORD *)(v2911 + 8) = *((_DWORD *)v2902 + 2);
        *(_QWORD *)v2911 = v2910;
      }
      ++v2897;
LABEL_3790:
      if (++v2896 == v2895)
        goto LABEL_3809;
    }
    v2904 = *(_DWORD *)v2902;
    v2905 = *((_DWORD *)v2902 + 1);
    v2906 = *((_DWORD *)v2902 + 2);
    while (1)
    {
      v2907 = *((_DWORD *)v2903 + 7);
      if (v2904 == v2907)
      {
        v2908 = *((_DWORD *)v2903 + 8);
        if (v2905 == v2908)
        {
          v2909 = *((_DWORD *)v2903 + 9);
          if (v2906 < v2909)
            goto LABEL_3794;
          if (v2909 >= v2906)
            goto LABEL_3790;
        }
        else
        {
          if (v2905 < v2908)
            goto LABEL_3794;
          if (v2908 >= v2905)
            goto LABEL_3790;
        }
      }
      else
      {
        if (v2904 < v2907)
          goto LABEL_3794;
        if (v2907 >= v2904)
          goto LABEL_3790;
      }
      ++v2903;
LABEL_3794:
      v2903 = (uint64_t *)*v2903;
      if (!v2903)
        goto LABEL_3806;
    }
  }
  v2897 = 0;
LABEL_3809:
  *v2894 = v2897;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v247 = v3[510];
  if (v247 >> 30)
    v2912 = 1;
  else
    v2912 = (_DWORD)v247 == v5;
  if (!v2912)
  {
LABEL_3813:
    v2913 = *(_QWORD *)(v1[2] + 8);
    v2914 = v247 & 0xFFFFFFFFCFFFFFFFLL;
    v2915 = *(_QWORD *)(*(_QWORD *)(v2913 + 8) + 2448);
    v2916 = (unsigned int *)(v2915 + 520 * (v247 & 0xFFFFFFFFCFFFFFFFLL) + 508);
    v2917 = *v2916;
    if ((_DWORD)v2917)
    {
      v2918 = 0;
      v2919 = 0;
      v2920 = **(_QWORD **)(v2913 + 16);
      v2921 = v2915 + 520 * v2914;
      v2922 = v2921 + 364;
      v2923 = v2921 + 340;
      while (1)
      {
        v2924 = (uint64_t *)(v2922 + 12 * v2918);
        v2925 = *(uint64_t **)(v2920 + 2512);
        if (v2925)
          break;
LABEL_3832:
        *(_WORD *)(v2923 + 2 * v2919) = *(_WORD *)(v2923 + 2 * v2918);
        if (v2918 != v2919)
        {
          v2932 = *v2924;
          v2933 = v2922 + 12 * v2919;
          *(_DWORD *)(v2933 + 8) = *((_DWORD *)v2924 + 2);
          *(_QWORD *)v2933 = v2932;
        }
        ++v2919;
LABEL_3816:
        if (++v2918 == v2917)
          goto LABEL_3835;
      }
      v2926 = *(_DWORD *)v2924;
      v2927 = *((_DWORD *)v2924 + 1);
      v2928 = *((_DWORD *)v2924 + 2);
      while (1)
      {
        v2929 = *((_DWORD *)v2925 + 7);
        if (v2926 == v2929)
        {
          v2930 = *((_DWORD *)v2925 + 8);
          if (v2927 == v2930)
          {
            v2931 = *((_DWORD *)v2925 + 9);
            if (v2928 < v2931)
              goto LABEL_3820;
            if (v2931 >= v2928)
              goto LABEL_3816;
          }
          else
          {
            if (v2927 < v2930)
              goto LABEL_3820;
            if (v2930 >= v2927)
              goto LABEL_3816;
          }
        }
        else
        {
          if (v2926 < v2929)
            goto LABEL_3820;
          if (v2929 >= v2926)
            goto LABEL_3816;
        }
        ++v2925;
LABEL_3820:
        v2925 = (uint64_t *)*v2925;
        if (!v2925)
          goto LABEL_3832;
      }
    }
    v2919 = 0;
LABEL_3835:
    *v2916 = v2919;
    v1 = *result;
    v249 = *(unsigned int *)((*result)[1] + 2044);
    if (v249 >> 30)
      v2934 = 1;
    else
      v2934 = (_DWORD)v249 == *(_DWORD *)(**result + 272);
    if (v2934)
      return result;
    goto LABEL_3839;
  }
LABEL_611:
  v249 = v3[511];
  if (v249 >> 30)
    v250 = 1;
  else
    v250 = (_DWORD)v249 == v5;
  if (v250)
    return result;
LABEL_3839:
  v2935 = *(_QWORD *)(v1[2] + 8);
  v2936 = v249 & 0xFFFFFFFFCFFFFFFFLL;
  v2937 = *(_QWORD *)(*(_QWORD *)(v2935 + 8) + 2448);
  v2938 = (unsigned int *)(v2937 + 520 * (v249 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2939 = *v2938;
  if ((_DWORD)v2939)
  {
    v2940 = 0;
    v2941 = 0;
    v2942 = **(_QWORD **)(v2935 + 16);
    v2943 = v2937 + 520 * v2936;
    v2944 = v2943 + 364;
    v2945 = v2943 + 340;
    while (1)
    {
      v2946 = (unsigned int *)(v2944 + 12 * v2940);
      v2947 = *(uint64_t **)(v2942 + 2512);
      if (v2947)
        break;
LABEL_3858:
      result = (uint64_t **)*(unsigned __int16 *)(v2945 + 2 * v2940);
      *(_WORD *)(v2945 + 2 * v2941) = (_WORD)result;
      if (v2940 != v2941)
      {
        result = *(uint64_t ***)v2946;
        v2953 = v2944 + 12 * v2941;
        *(_DWORD *)(v2953 + 8) = v2946[2];
        *(_QWORD *)v2953 = result;
      }
      ++v2941;
LABEL_3842:
      if (++v2940 == v2939)
        goto LABEL_3861;
    }
    result = (uint64_t **)*v2946;
    v2948 = v2946[1];
    v2949 = v2946[2];
    while (1)
    {
      v2950 = *((_DWORD *)v2947 + 7);
      if ((_DWORD)result == v2950)
      {
        v2951 = *((_DWORD *)v2947 + 8);
        if (v2948 == v2951)
        {
          v2952 = *((_DWORD *)v2947 + 9);
          if (v2949 < v2952)
            goto LABEL_3846;
          if (v2952 >= v2949)
            goto LABEL_3842;
        }
        else
        {
          if (v2948 < v2951)
            goto LABEL_3846;
          if (v2951 >= v2948)
            goto LABEL_3842;
        }
      }
      else
      {
        if ((int)result < v2950)
          goto LABEL_3846;
        if (v2950 >= (int)result)
          goto LABEL_3842;
      }
      ++v2947;
LABEL_3846:
      v2947 = (uint64_t *)*v2947;
      if (!v2947)
        goto LABEL_3858;
    }
  }
  v2941 = 0;
LABEL_3861:
  *v2938 = v2941;
  return result;
}

float32x4_t sub_223E89E18(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float32x4_t a5, double a6, float32x4_t a7)
{
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float32x4_t v11;
  int8x8_t v12;
  float32x2_t v18;
  int v19;
  __int8 v20;
  float v21;
  char v22;
  int v24;
  float v25;
  char v26;
  int v27;
  char v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v32;
  float32x4_t v33;
  unsigned int v34;
  float32x4_t v35;
  int32x2_t v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t result;

  *(int32x2_t *)a1 = vdup_n_s32(0x358637BDu);
  *(_DWORD *)(a1 + 8) = 897988541;
  v7 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = v7;
  v8 = *(_QWORD *)a3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = 1.0;
  a7.i64[0] = v8;
  a7.i32[2] = *(_DWORD *)(a1 + 32);
  a5.i64[0] = v7;
  a5.i32[2] = *(_DWORD *)(a1 + 20);
  v10 = 1.0 / a4;
  v11 = vsubq_f32(a7, a5);
  *(_DWORD *)(a1 + 52) = v11.i32[2];
  *(float *)(a1 + 36) = a4;
  *(float *)(a1 + 40) = 1.0 / a4;
  *(_QWORD *)(a1 + 44) = v11.i64[0];
  if (v11.f32[0] < 0.0)
    v9 = -1.0;
  *(float *)(a1 + 56) = v9;
  *(_DWORD *)(a1 + 68) = (int)v9;
  v12 = (int8x8_t)vcltz_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL));
  __asm
  {
    FMOV            V6.2S, #1.0
    FMOV            V7.2S, #-1.0
  }
  v18 = (float32x2_t)vbsl_s8(v12, _D7, _D6);
  *(float32x2_t *)(a1 + 60) = v18;
  *(int32x2_t *)(a1 + 72) = vcvt_s32_f32(v18);
  if (_NF)
    v19 = -1;
  else
    v19 = 1;
  *(_DWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 84) = 0;
  v20 = v12.i8[0];
  *(float *)v12.i32 = -a4;
  if (_NF)
    v21 = -a4;
  else
    v21 = a4;
  if (_NF)
    v22 = 4;
  else
    v22 = 22;
  _ZF = (v20 & 1) == 0;
  if ((v20 & 1) != 0)
    v24 = -1;
  else
    v24 = 1;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = v24;
  if (_ZF)
    v25 = a4;
  else
    v25 = -a4;
  if (_ZF)
    v26 = 16;
  else
    v26 = 10;
  if ((v12.i8[4] & 1) != 0)
    v27 = -1;
  else
    v27 = 1;
  *(_QWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = v27;
  *(float *)(a1 + 116) = v21;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(float *)(a1 + 132) = v25;
  if ((v12.i8[4] & 1) == 0)
    *(float *)v12.i32 = a4;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = v12.i32[0];
  *(_BYTE *)(a1 + 152) = v22;
  *(_BYTE *)(a1 + 153) = v26;
  if ((v12.i8[4] & 1) != 0)
    v28 = 12;
  else
    v28 = 14;
  *(_BYTE *)(a1 + 154) = v28;
  v11.i64[0] = *(_QWORD *)a1;
  v11.i32[2] = *(_DWORD *)(a1 + 8);
  v29 = vmaxnmq_f32(vabdq_f32(a7, a5), v11);
  *(_DWORD *)(a1 + 164) = v29.i32[2];
  *(_QWORD *)(a1 + 156) = v29.i64[0];
  v11.i64[0] = *(_QWORD *)(a1 + 56);
  v11.i32[2] = *(_DWORD *)(a1 + 64);
  v30 = vmulq_f32(v29, v11);
  *(_DWORD *)(a1 + 176) = v30.i32[2];
  *(_QWORD *)(a1 + 168) = v30.i64[0];
  __asm { FMOV            V6.4S, #1.0 }
  v32 = vdivq_f32(_Q6, v30);
  *(_DWORD *)(a1 + 188) = v32.i32[2];
  *(_QWORD *)(a1 + 180) = v32.i64[0];
  v33 = vmulq_n_f32(v11, a4 * 0.5);
  *(_DWORD *)(a1 + 200) = v33.i32[2];
  *(_QWORD *)(a1 + 192) = v33.i64[0];
  v34 = (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v34 = (*(_DWORD *)(a1 + 48) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a1 + 48) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v34 = (*(_DWORD *)(a1 + 52) & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (v34)
  {
    v35 = vmulq_n_f32(a7, v10);
    v36 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v35.f32));
    v34 = vcvtms_s32_f32(v35.f32[2]);
  }
  else
  {
    v36 = 0;
  }
  *(int32x2_t *)(a1 + 204) = v36;
  *(_DWORD *)(a1 + 212) = v34;
  v37 = (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v37 = (*(_DWORD *)(a1 + 48) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a1 + 48) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v37 = (*(_DWORD *)(a1 + 52) & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (v37)
  {
    v38 = vmulq_n_f32(a5, v10);
    *(int32x2_t *)a5.f32 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v38.f32));
    v37 = vcvtms_s32_f32(v38.f32[2]);
  }
  else
  {
    a5.i16[0] = 0;
    a5.i8[2] = 0;
    a5.i8[3] = 0;
    a5.i8[4] = 0;
    a5.i8[5] = 0;
    a5.i8[6] = 0;
    a5.i8[7] = 0;
    a5.i8[12] = 0;
    a5.i8[13] = 0;
    a5.i8[14] = 0;
    a5.i8[15] = 0;
  }
  *(_QWORD *)(a1 + 216) = a5.i64[0];
  *(_DWORD *)(a1 + 224) = v37;
  *(float32x2_t *)a5.f32 = vcvt_f32_s32(*(int32x2_t *)a5.f32);
  a5.f32[2] = (float)v37;
  v39.i64[0] = 0x3F0000003F000000;
  v39.i64[1] = 0x3F0000003F000000;
  result = vmulq_n_f32(vaddq_f32(a5, v39), a4);
  *(_DWORD *)(a1 + 236) = result.i32[2];
  *(_QWORD *)(a1 + 228) = result.i64[0];
  return result;
}

BOOL sub_223E8A0B8(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  _BOOL4 v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  float32x4_t v17;
  uint64_t v18;

  v5 = (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v5 = (*(_DWORD *)(a1 + 48) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a1 + 48) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v5 = (*(_DWORD *)(a1 + 52) & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v5)
    return 0;
  v6 = (uint64_t *)(a1 + 216);
  v7 = *(_DWORD *)(a1 + 216);
  v8 = *(_DWORD *)(a1 + 204);
  if (v8 == v7)
  {
    v9 = *(_DWORD *)(a1 + 220);
    if (*(_DWORD *)(a1 + 208) == v9)
    {
      v9 = *(_DWORD *)(a1 + 208);
      if (*(_DWORD *)(a1 + 212) == *(_DWORD *)(a1 + 224))
        return 0;
    }
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 220);
  }
  a3.i64[0] = *(_QWORD *)(a1 + 228);
  a3.i32[2] = *(_DWORD *)(a1 + 236);
  a4.i64[0] = *(_QWORD *)(a1 + 192);
  a4.i32[2] = *(_DWORD *)(a1 + 200);
  a5.i64[0] = *(_QWORD *)(a1 + 12);
  a5.i32[2] = *(_DWORD *)(a1 + 20);
  v10 = vsubq_f32(vaddq_f32(a3, a4), a5);
  a5.i64[0] = *(_QWORD *)(a1 + 180);
  a5.i32[2] = *(_DWORD *)(a1 + 188);
  v11 = vmulq_f32(v10, a5);
  v12 = v11.f32[1];
  v13 = v11.f32[1] < v11.f32[0];
  if (v11.f32[1] >= v11.f32[0])
    v12 = v11.f32[0];
  if (v11.f32[2] < v12)
    v13 = 2;
  v14 = a1 + 12 * v13;
  v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80) + v7;
  *(_DWORD *)(a1 + 216) = v16;
  *(_DWORD *)(a1 + 220) = v15 + v9;
  v11.i64[0] = *(_QWORD *)(v14 + 116);
  v11.i32[2] = *(_DWORD *)(v14 + 124);
  *(_DWORD *)(a1 + 224) += *(_DWORD *)(v14 + 88);
  v17 = vaddq_f32(a3, v11);
  *(_DWORD *)(a1 + 236) = v17.i32[2];
  *(_QWORD *)(a1 + 228) = v17.i64[0];
  if (v6 != (uint64_t *)a2)
  {
    v18 = *v6;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 224);
    *(_QWORD *)a2 = v18;
    v16 = *(_DWORD *)(a1 + 216);
    v8 = *(_DWORD *)(a1 + 204);
  }
  if (*(_DWORD *)(a1 + 68) * (v16 - v8) > 0
    || *(_DWORD *)(a1 + 72) * (*(_DWORD *)(a1 + 220) - *(_DWORD *)(a1 + 208)) > 0)
  {
    return 0;
  }
  return *(_DWORD *)(a1 + 76) * (*(_DWORD *)(a1 + 224) - *(_DWORD *)(a1 + 212)) < 1;
}

uint64_t sub_223E8A268(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  *(_QWORD *)a1 = &off_24EC63C00;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(float *)(a1 + 128) = a4;
  *(float *)(a1 + 132) = 1.0 / a4;
  *(_DWORD *)(a1 + 136) = a2;
  *(_DWORD *)(a1 + 140) = log2((double)a2);
  *(_DWORD *)(a1 + 144) = a3;
  *(_DWORD *)(a1 + 148) = log2((double)(a3 / a2));
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 176) = 0x80000000;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v7 = (char *)operator new(0x462000uLL);
  *(_QWORD *)(a1 + 184) = v7;
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 200) = v7 + 4595712;
  v8 = (char *)operator new(0x708uLL);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v8 + 1800;
  v9 = (char *)operator new(0x708uLL);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v9 + 1800;
  v10 = (char *)operator new(0x708uLL);
  *(_QWORD *)(a1 + 104) = v10;
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v10 + 1800;
  v11 = (char *)operator new(0x258uLL);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v11 + 600;
  v12 = (char *)operator new(0x258uLL);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v12 + 600;
  return a1;
}

void sub_223E8A3AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = (void *)v1[13];
  if (v4)
  {
    v1[14] = v4;
    operator delete(v4);
    v5 = (void *)v1[10];
    if (!v5)
    {
LABEL_3:
      v6 = (void *)v1[7];
      if (!v6)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = (void *)v1[10];
    if (!v5)
      goto LABEL_3;
  }
  v1[11] = v5;
  operator delete(v5);
  v6 = (void *)v1[7];
  if (!v6)
  {
LABEL_4:
    v7 = (void *)v1[4];
    if (!v7)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v1[8] = v6;
  operator delete(v6);
  v7 = (void *)v1[4];
  if (!v7)
  {
LABEL_5:
    v8 = *v2;
    if (!*v2)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v1[5] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  v1[2] = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223E8A464(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *a1 = &off_24EC63C00;
  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[23];
  if (v3)
  {
    a1[24] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_223E8A514(_QWORD *a1)
{
  sub_223E8A464(a1);
  JUMPOUT(0x227684CE8);
}

double sub_223E8A538(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0x80000000;
  *(_QWORD *)(a1 + 176) = 0x80000000;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  return result;
}

uint64_t sub_223E8A58C(uint64_t a1, unsigned int a2, int32x2_t *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 208) == v8)
  {
    v10 = *(_QWORD *)(a1 + 192);
    v11 = *(_QWORD *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 140);
    if (v10 >= v11)
    {
      v14 = *(_QWORD *)(a1 + 184);
      v15 = 0x2E16D0FF8B2E16D1 * ((uint64_t)(v10 - v14) >> 3);
      if ((unint64_t)(v15 + 1) > 0xE9A3D25E00E9ALL)
        sub_22316E078();
      v16 = 0x2E16D0FF8B2E16D1 * ((uint64_t)(v11 - v14) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v15 + 1)
        v17 = v15 + 1;
      if (v16 >= 0x74D1E92F0074DLL)
        v18 = 0xE9A3D25E00E9ALL;
      else
        v18 = v17;
      if (v18)
      {
        if (v18 > 0xE9A3D25E00E9ALL)
          sub_223174E94();
        v19 = (char *)operator new(4488 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t)&v19[4488 * v15];
      v21 = &v19[4488 * v18];
      sub_223E992DC(v20, a2, a3, a4, v12);
      v13 = v20 + 4488;
      v23 = *(char **)(a1 + 184);
      v22 = *(_QWORD **)(a1 + 192);
      if (v22 != (_QWORD *)v23)
      {
        do
        {
          v24 = v20 - 4476;
          v25 = (void *)(v20 - 4464);
          v20 -= 4488;
          v26 = (char *)(v22 - 561);
          v27 = *(v22 - 561);
          *(_DWORD *)(v24 - 4) = *((_DWORD *)v22 - 1120);
          *(_QWORD *)(v24 - 12) = v27;
          v28 = *(_QWORD *)((char *)v22 - 4476);
          *(_DWORD *)(v24 + 8) = *((_DWORD *)v22 - 1117);
          *(_QWORD *)v24 = v28;
          memcpy(v25, v22 - 558, 0x1170uLL);
          v22 = v26;
        }
        while (v26 != v23);
        v22 = *(_QWORD **)(a1 + 184);
      }
      *(_QWORD *)(a1 + 184) = v20;
      *(_QWORD *)(a1 + 192) = v13;
      *(_QWORD *)(a1 + 200) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      v13 = sub_223E992DC(v10, a2, a3, a4, *(_DWORD *)(a1 + 140)) + 4488;
    }
    *(_QWORD *)(a1 + 192) = v13;
    return -1959913775 * ((unint64_t)(v13 - *(_QWORD *)(a1 + 184)) >> 3) - 1;
  }
  else
  {
    v9 = *(unsigned int *)(v8 - 4);
    *(_QWORD *)(a1 + 216) = v8 - 4;
    sub_223E99400(*(_QWORD *)(a1 + 184) + 4488 * v9, a2, a3, a4, *(_DWORD *)(a1 + 140));
  }
  return v9;
}

uint64_t sub_223E8A798(uint64_t a1, int8x8_t *a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  int *v9;
  __int32 v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int32 v16;
  int v17;
  __int32 v18;
  int v19;
  __int32 v20;
  uint64_t result;
  int8x8_t v22;
  int v23;

  *a4 = 1;
  a4[20] = 1;
  a4[40] = 1;
  a4[60] = 1;
  a4[80] = 1;
  a4[100] = 1;
  a4[120] = 1;
  a4[140] = 1;
  a4[160] = 1;
  a4[180] = 1;
  a4[200] = 1;
  a4[220] = 1;
  a4[240] = 1;
  a4[260] = 1;
  a4[280] = 1;
  a4[300] = 1;
  a4[320] = 1;
  a4[340] = 1;
  a4[360] = 1;
  a4[380] = 1;
  a4[400] = 1;
  a4[420] = 1;
  a4[440] = 1;
  a4[460] = 1;
  a4[480] = 1;
  a4[500] = 1;
  a4[520] = 1;
  v8 = *(unsigned int *)(a1 + 176);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = (int *)(*(_QWORD *)(a1 + 184) + 4488 * (v8 & 0xFFFFFFFFCFFFFFFFLL));
    v10 = a2->i32[0];
    v11 = *v9;
    if (a2->i32[0] < *v9)
      goto LABEL_12;
    goto LABEL_6;
  }
  if ((a3 & 0x80000000) != 0)
    return 0;
  v12 = -2 * (*(_DWORD *)(a1 + 136) & 0x7FFF);
  v13 = a2[1].i32[0] & v12;
  v22 = vand_s8(*a2, (int8x8_t)vdup_n_s32(v12));
  v23 = v13;
  *(_DWORD *)(a1 + 180) = 1;
  LODWORD(v8) = sub_223E8A58C(a1, 1u, (int32x2_t *)&v22, 0x80000000);
  *(_DWORD *)(a1 + 176) = v8;
  v14 = v8 & 0xCFFFFFFF;
  v15 = *(_QWORD *)(a1 + 184);
  *(_DWORD *)(v15 + 4488 * v14 + 4484) = v8;
  v9 = (int *)(v15 + 4488 * v14);
  v10 = a2->i32[0];
  v11 = *v9;
  if (a2->i32[0] >= *v9)
  {
LABEL_6:
    v16 = a2->i32[1];
    v17 = v9[1];
    if (v16 >= v17)
    {
      v18 = a2[1].i32[0];
      v19 = v9[2];
      if (v18 >= v19)
      {
        v20 = v9[3];
        if (v10 < v20 && v16 < v9[4] && v18 < v9[5])
          return sub_223E8B198(a1, (int *)a2, a3, (((v10 - v11 - ((v20 - v11) >> 1)) >> 29) & 4 | ((int)(v18- v19- ((v20 - v11) >> 1)) >= 0) | (2 * ((v16 - v17 - ((v20 - v11) >> 1)) >> 31))) ^ 6, v8, *(_DWORD *)(a1 + 180), a4);
      }
    }
  }
LABEL_12:
  if ((a3 & 0x80000000) != 0)
    return 0;
  result = sub_223E8AF24(a1, a2);
  if ((_DWORD)result)
    return sub_223E8A798(a1, a2, a3, a4);
  return result;
}

uint64_t sub_223E8A9D8(uint64_t a1, int *a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char __src[4];
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  char v63;
  uint64_t v64;
  int v65;
  char v66;
  char v67;
  int v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  int v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  int v81;
  char v82;
  char v83;
  int v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  int v89;
  char v90;
  char v91;
  int v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  int v97;
  char v98;
  char v99;
  int v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  int v105;
  char v106;
  char v107;
  int v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  int v113;
  char v114;
  char v115;
  int v116;
  uint64_t v117;
  char v118;

  v12 = -1;
  v13 = -1;
  v14 = 8;
  v16 = -1;
  v17 = -1;
  v18 = 8;
  v20 = -1;
  v21 = -1;
  v22 = 8;
  v24 = -1;
  v25 = -1;
  v26 = 8;
  v28 = -1;
  v29 = -1;
  v30 = 8;
  v32 = -1;
  v33 = -1;
  v34 = 8;
  v36 = -1;
  v37 = -1;
  v38 = 8;
  v40 = -1;
  v41 = -1;
  v42 = 8;
  v44 = -1;
  v45 = -1;
  v46 = 8;
  v48 = -1;
  v49 = -1;
  v50 = 8;
  v52 = -1;
  v53 = -1;
  v54 = 8;
  v56 = -1;
  v57 = -1;
  v58 = 8;
  v60 = -1;
  v61 = -1;
  v62 = 8;
  v64 = -1;
  v65 = -1;
  v66 = 8;
  v68 = -1;
  v69 = -1;
  v70 = 8;
  v72 = -1;
  v73 = -1;
  v74 = 8;
  v76 = -1;
  v77 = -1;
  v78 = 8;
  v80 = -1;
  v81 = -1;
  v82 = 8;
  v84 = -1;
  v85 = -1;
  v86 = 8;
  v88 = -1;
  v89 = -1;
  v90 = 8;
  v92 = -1;
  v93 = -1;
  v94 = 8;
  v96 = -1;
  v97 = -1;
  v98 = 8;
  v100 = -1;
  v101 = -1;
  v102 = 8;
  v104 = -1;
  v105 = -1;
  v106 = 8;
  v108 = -1;
  v109 = -1;
  v110 = 8;
  v112 = -1;
  v113 = -1;
  v114 = 8;
  v116 = -1;
  v117 = -1;
  v118 = 8;
  __src[0] = 1;
  v15 = 1;
  v19 = 1;
  v23 = 1;
  v27 = 1;
  v31 = 1;
  v35 = 1;
  v39 = 1;
  v43 = 1;
  v47 = 1;
  v51 = 1;
  v55 = 1;
  v59 = 1;
  v63 = 1;
  v67 = 1;
  v71 = 1;
  v75 = 1;
  v79 = 1;
  v83 = 1;
  v87 = 1;
  v91 = 1;
  v95 = 1;
  v99 = 1;
  v103 = 1;
  v107 = 1;
  v111 = 1;
  v115 = 1;
  v2 = *(unsigned int *)(a1 + 176);
  if ((v2 & 0x80000000) != 0)
    return 0;
  v3 = (int *)(*(_QWORD *)(a1 + 184) + 4488 * (v2 & 0xFFFFFFFFCFFFFFFFLL));
  v4 = *a2;
  if (*a2 < *v3)
    return 0;
  v6 = a2[1];
  v7 = v3[1];
  if (v6 < v7)
    return 0;
  v8 = a2[2];
  v9 = v3[2];
  if (v8 < v9)
    return 0;
  v10 = v3[3];
  if (v4 >= v10 || v6 >= v3[4])
    return 0;
  if (v8 >= v3[5])
    return 0;
  else
    return sub_223E8B198(a1, a2, 0x80000000, (((v4 - *v3 - ((v10 - *v3) >> 1)) >> 29) & 4 | ((int)(v8- v9- ((v10 - *v3) >> 1)) >= 0) | (2 * ((v6 - v7 - ((v10 - *v3) >> 1)) >> 31))) ^ 6, v2, *(_DWORD *)(a1 + 180), __src);
}

uint64_t sub_223E8AD00(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  char v4[4];
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  int v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  int v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  int v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  int v82;
  char v83;
  char v84;
  int v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  int v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  char v100;
  int v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  int v106;
  char v107;
  char v108;
  int v109;
  uint64_t v110;
  char v111;

  v4[0] = 1;
  v5 = -1;
  v6 = -1;
  v7 = 8;
  v8 = 1;
  v9 = -1;
  v10 = -1;
  v11 = 8;
  v12 = 1;
  v13 = -1;
  v14 = -1;
  v15 = 8;
  v16 = 1;
  v17 = -1;
  v18 = -1;
  v19 = 8;
  v20 = 1;
  v21 = -1;
  v22 = -1;
  v23 = 8;
  v24 = 1;
  v25 = -1;
  v26 = -1;
  v27 = 8;
  v28 = 1;
  v29 = -1;
  v30 = -1;
  v31 = 8;
  v32 = 1;
  v33 = -1;
  v34 = -1;
  v35 = 8;
  v36 = 1;
  v37 = -1;
  v38 = -1;
  v39 = 8;
  v40 = 1;
  v41 = -1;
  v42 = -1;
  v43 = 8;
  v44 = 1;
  v45 = -1;
  v46 = -1;
  v47 = 8;
  v48 = 1;
  v49 = -1;
  v50 = -1;
  v51 = 8;
  v52 = 1;
  v53 = -1;
  v54 = -1;
  v55 = 8;
  v56 = 1;
  v57 = -1;
  v58 = -1;
  v59 = 8;
  v60 = 1;
  v61 = -1;
  v62 = -1;
  v63 = 8;
  v64 = 1;
  v65 = -1;
  v66 = -1;
  v67 = 8;
  v68 = 1;
  v69 = -1;
  v70 = -1;
  v71 = 8;
  v72 = 1;
  v73 = -1;
  v74 = -1;
  v75 = 8;
  v76 = 1;
  v77 = -1;
  v78 = -1;
  v79 = 8;
  v80 = 1;
  v81 = -1;
  v82 = -1;
  v83 = 8;
  v84 = 1;
  v85 = -1;
  v86 = -1;
  v87 = 8;
  v88 = 1;
  v89 = -1;
  v90 = -1;
  v91 = 8;
  v92 = 1;
  v93 = -1;
  v94 = -1;
  v95 = 8;
  v96 = 1;
  v97 = -1;
  v98 = -1;
  v99 = 8;
  v100 = 1;
  v101 = -1;
  v102 = -1;
  v103 = 8;
  v104 = 1;
  v105 = -1;
  v106 = -1;
  v107 = 8;
  v108 = 1;
  v109 = -1;
  v110 = -1;
  v111 = 8;
  return sub_223E8A798(a1, a2, a3, v4);
}

uint64_t sub_223E8AF24(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  __int32 v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;

  v3 = *(unsigned int *)(a1 + 176);
  if ((v3 & 0x80000000) != 0)
  {
    v9 = -2 * (*(_DWORD *)(a1 + 136) & 0x7FFF);
    v10 = a2[1].i32[0] & v9;
    v44 = (unint64_t)vand_s8(*a2, (int8x8_t)vdup_n_s32(v9));
    v45 = v10;
    v11 = 1;
    *(_DWORD *)(a1 + 180) = 1;
    v12 = sub_223E8A58C(a1, 1u, (int32x2_t *)&v44, 0x80000000);
    *(_DWORD *)(a1 + 176) = v12;
    *(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * (v12 & 0xCFFFFFFF) + 4484) = v12;
    return v11;
  }
  v4 = (int *)(*(_QWORD *)(a1 + 184) + 4488 * (v3 & 0xFFFFFFFFCFFFFFFFLL));
  v5 = a2->i32[0];
  v6 = *v4;
  if (a2->i32[0] >= (int)v6)
  {
    v8 = a2->i32[1];
    v7 = v4[1];
    if (v8 >= v7)
    {
      v14 = a2[1].i32[0];
      if (v14 >= v4[2])
      {
        v15 = v5 < v4[3] && v8 < v4[4];
        if (v15 && v14 < v4[5])
          return 1;
      }
    }
  }
  else
  {
    v7 = v4[1];
    v8 = a2->i32[1];
  }
  v16 = v4[2];
  v17 = *(_DWORD *)(a1 + 180);
  if (v17 >= *(_DWORD *)(a1 + 148))
  {
    v19 = a2[1].i32[0];
  }
  else
  {
    v18 = -(unsigned __int16)(1 << (v17 + *(_DWORD *)(a1 + 140) + 1));
    v5 = v6 & v18;
    v8 = v7 & v18;
    v19 = v16 & v18;
  }
  v11 = 0;
  v20 = v4[3] - v6;
  if (v5 >= (int)v6)
    v21 = 0;
  else
    v21 = v20;
  v22 = v6 - v21;
  if (v8 >= v7)
    v23 = 0;
  else
    v23 = v20;
  v24 = v7 - v23;
  if (v19 >= (int)v16)
    v25 = 0;
  else
    v25 = v20;
  v26 = v16 - v25;
  v44 = __PAIR64__(v24, v22);
  v45 = v26;
  v27 = 2 * v20;
  v28 = v22 + 0x80000000;
  v29 = v24 + 0x80000000;
  v30 = v28 + v27;
  v31 = HIDWORD(v28);
  v32 = v27 == (int)v27 && v31 == 0;
  v33 = v29 + v27;
  v34 = HIDWORD(v29);
  if (!v32 || v34 != 0 || (unint64_t)(v26 + 0x80000000) >> 32 != 0 || HIDWORD(v30) != 0 || HIDWORD(v33) != 0)
    return v11;
  if (v26 + v27 != (_DWORD)v26 + (_DWORD)v27)
    return 0;
  v39 = (4 * (v5 < (int)v6)) | (2 * (v8 < v7)) | (v19 < (int)v16);
  v40 = sub_223E8A58C(a1, v17 + 1, (int32x2_t *)&v44, 0x80000000);
  v41 = *(_QWORD *)(a1 + 184);
  v42 = v41 + 4488 * (v40 & 0xCFFFFFFF);
  *(_DWORD *)(v42 + 4484) = v40;
  v43 = *(unsigned int *)(a1 + 176);
  *(_DWORD *)(v41 + 4488 * (v43 & 0xFFFFFFFFCFFFFFFFLL) + 4484) = v40;
  *(_DWORD *)(v42 + 4 * v39 + 24) = v43;
  LODWORD(v42) = *(_DWORD *)(a1 + 180) + 1;
  *(_DWORD *)(a1 + 176) = v40;
  *(_DWORD *)(a1 + 180) = v42;
  sub_223E97348(v41, v40);
  return 1;
}

uint64_t sub_223E8B198(uint64_t a1, int *a2, int a3, unsigned int a4, int a5, int a6, char *__src)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  int32x2_t *v15;
  uint64_t v16;
  unsigned int v17;
  __int128 *v18;
  int v20;
  _BYTE *v21;
  BOOL v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  __int32 v32;
  unsigned int v33;
  int32x2_t v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  int v65;
  int v66;
  _DWORD *v67;
  _DWORD *v68;
  int32x2_t *v69;
  unint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  unint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  _DWORD *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  _DWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int v106;
  char *v107;
  char *v108;
  uint64_t v109;
  int v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  _BYTE *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v133;
  int32x2_t v136;
  unsigned __int32 v137;
  int32x2_t v138;
  unsigned __int32 v139;
  _BYTE v140[4];
  uint64_t v141;
  int v142;
  char v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  char v148;
  uint64_t v149;
  int v150;
  char v151;
  char v152;
  uint64_t v153;
  int v154;
  char v155;
  char v156;
  uint64_t v157;
  int v158;
  char v159;
  char v160;
  uint64_t v161;
  int v162;
  char v163;
  char v164;
  uint64_t v165;
  int v166;
  char v167;
  char v168;
  uint64_t v169;
  int v170;
  char v171;
  char v172;
  uint64_t v173;
  int v174;
  char v175;
  char v176;
  uint64_t v177;
  int v178;
  char v179;
  char v180;
  uint64_t v181;
  int v182;
  char v183;
  char v184;
  uint64_t v185;
  int v186;
  char v187;
  char v188;
  uint64_t v189;
  int v190;
  char v191;
  char v192;
  uint64_t v193;
  int v194;
  char v195;
  char v196;
  int v197;
  uint64_t v198;
  char v199;
  char v200;
  uint64_t v201;
  int v202;
  char v203;
  char v204;
  int v205;
  uint64_t v206;
  char v207;
  char v208;
  uint64_t v209;
  int v210;
  char v211;
  char v212;
  int v213;
  uint64_t v214;
  char v215;
  char v216;
  uint64_t v217;
  int v218;
  char v219;
  char v220;
  int v221;
  uint64_t v222;
  char v223;
  char v224;
  uint64_t v225;
  int v226;
  char v227;
  char v228;
  int v229;
  uint64_t v230;
  char v231;
  char v232;
  uint64_t v233;
  int v234;
  char v235;
  char v236;
  int v237;
  uint64_t v238;
  char v239;
  char v240;
  uint64_t v241;
  int v242;
  char v243;
  char v244;
  int v245;
  uint64_t v246;
  char v247;
  _QWORD __dst[68];

  LOBYTE(__dst[0]) = 1;
  *(_QWORD *)((char *)__dst + 4) = -1;
  HIDWORD(__dst[1]) = -1;
  LOBYTE(__dst[2]) = 8;
  BYTE4(__dst[2]) = 1;
  __dst[3] = -1;
  LODWORD(__dst[4]) = -1;
  BYTE4(__dst[4]) = 8;
  LOBYTE(__dst[5]) = 1;
  *(_QWORD *)((char *)&__dst[5] + 4) = -1;
  HIDWORD(__dst[6]) = -1;
  LOBYTE(__dst[7]) = 8;
  BYTE4(__dst[7]) = 1;
  __dst[8] = -1;
  LODWORD(__dst[9]) = -1;
  BYTE4(__dst[9]) = 8;
  LOBYTE(__dst[10]) = 1;
  *(_QWORD *)((char *)&__dst[10] + 4) = -1;
  HIDWORD(__dst[11]) = -1;
  LOBYTE(__dst[12]) = 8;
  BYTE4(__dst[12]) = 1;
  __dst[13] = -1;
  LODWORD(__dst[14]) = -1;
  BYTE4(__dst[14]) = 8;
  LOBYTE(__dst[15]) = 1;
  *(_QWORD *)((char *)&__dst[15] + 4) = -1;
  HIDWORD(__dst[16]) = -1;
  LOBYTE(__dst[17]) = 8;
  BYTE4(__dst[17]) = 1;
  __dst[18] = -1;
  LODWORD(__dst[19]) = -1;
  BYTE4(__dst[19]) = 8;
  LOBYTE(__dst[20]) = 1;
  *(_QWORD *)((char *)&__dst[20] + 4) = -1;
  HIDWORD(__dst[21]) = -1;
  LOBYTE(__dst[22]) = 8;
  BYTE4(__dst[22]) = 1;
  __dst[23] = -1;
  LODWORD(__dst[24]) = -1;
  BYTE4(__dst[24]) = 8;
  LOBYTE(__dst[25]) = 1;
  *(_QWORD *)((char *)&__dst[25] + 4) = -1;
  HIDWORD(__dst[26]) = -1;
  LOBYTE(__dst[27]) = 8;
  BYTE4(__dst[27]) = 1;
  __dst[28] = -1;
  LODWORD(__dst[29]) = -1;
  BYTE4(__dst[29]) = 8;
  LOBYTE(__dst[30]) = 1;
  *(_QWORD *)((char *)&__dst[30] + 4) = -1;
  HIDWORD(__dst[31]) = -1;
  LOBYTE(__dst[32]) = 8;
  BYTE4(__dst[32]) = 1;
  __dst[33] = -1;
  LODWORD(__dst[34]) = -1;
  BYTE4(__dst[34]) = 8;
  LOBYTE(__dst[35]) = 1;
  HIDWORD(__dst[35]) = -1;
  __dst[36] = -1;
  LOBYTE(__dst[37]) = 8;
  BYTE4(__dst[37]) = 1;
  __dst[38] = -1;
  LODWORD(__dst[39]) = -1;
  BYTE4(__dst[39]) = 8;
  LOBYTE(__dst[40]) = 1;
  HIDWORD(__dst[40]) = -1;
  __dst[41] = -1;
  LOBYTE(__dst[42]) = 8;
  BYTE4(__dst[42]) = 1;
  __dst[43] = -1;
  LODWORD(__dst[44]) = -1;
  BYTE4(__dst[44]) = 8;
  LOBYTE(__dst[45]) = 1;
  HIDWORD(__dst[45]) = -1;
  __dst[46] = -1;
  LOBYTE(__dst[47]) = 8;
  BYTE4(__dst[47]) = 1;
  __dst[48] = -1;
  LODWORD(__dst[49]) = -1;
  BYTE4(__dst[49]) = 8;
  LOBYTE(__dst[50]) = 1;
  HIDWORD(__dst[50]) = -1;
  __dst[51] = -1;
  LOBYTE(__dst[52]) = 8;
  BYTE4(__dst[52]) = 1;
  __dst[53] = -1;
  LODWORD(__dst[54]) = -1;
  BYTE4(__dst[54]) = 8;
  LOBYTE(__dst[55]) = 1;
  HIDWORD(__dst[55]) = -1;
  __dst[56] = -1;
  LOBYTE(__dst[57]) = 8;
  BYTE4(__dst[57]) = 1;
  __dst[58] = -1;
  LODWORD(__dst[59]) = -1;
  BYTE4(__dst[59]) = 8;
  LOBYTE(__dst[60]) = 1;
  HIDWORD(__dst[60]) = -1;
  __dst[61] = -1;
  LOBYTE(__dst[62]) = 8;
  BYTE4(__dst[62]) = 1;
  __dst[63] = -1;
  LODWORD(__dst[64]) = -1;
  BYTE4(__dst[64]) = 8;
  LOBYTE(__dst[65]) = 1;
  HIDWORD(__dst[65]) = -1;
  __dst[66] = -1;
  LOBYTE(__dst[67]) = 8;
  v140[0] = 1;
  v141 = -1;
  v142 = -1;
  v143 = 8;
  v144 = 1;
  v145 = -1;
  v146 = -1;
  v147 = 8;
  v148 = 1;
  v149 = -1;
  v150 = -1;
  v151 = 8;
  v152 = 1;
  v153 = -1;
  v154 = -1;
  v155 = 8;
  v156 = 1;
  v157 = -1;
  v158 = -1;
  v159 = 8;
  v160 = 1;
  v161 = -1;
  v162 = -1;
  v163 = 8;
  v164 = 1;
  v165 = -1;
  v166 = -1;
  v167 = 8;
  v168 = 1;
  v169 = -1;
  v170 = -1;
  v171 = 8;
  v172 = 1;
  v173 = -1;
  v174 = -1;
  v175 = 8;
  v176 = 1;
  v177 = -1;
  v178 = -1;
  v179 = 8;
  v180 = 1;
  v181 = -1;
  v182 = -1;
  v183 = 8;
  v184 = 1;
  v185 = -1;
  v186 = -1;
  v187 = 8;
  v188 = 1;
  v189 = -1;
  v190 = -1;
  v191 = 8;
  v192 = 1;
  v193 = -1;
  v194 = -1;
  v195 = 8;
  v196 = 1;
  v197 = -1;
  v198 = -1;
  v199 = 8;
  v200 = 1;
  v201 = -1;
  v202 = -1;
  v203 = 8;
  v204 = 1;
  v205 = -1;
  v206 = -1;
  v207 = 8;
  v208 = 1;
  v209 = -1;
  v210 = -1;
  v211 = 8;
  v212 = 1;
  v213 = -1;
  v214 = -1;
  v215 = 8;
  v216 = 1;
  v217 = -1;
  v218 = -1;
  v219 = 8;
  v220 = 1;
  v221 = -1;
  v222 = -1;
  v223 = 8;
  v224 = 1;
  v225 = -1;
  v226 = -1;
  v227 = 8;
  v228 = 1;
  v229 = -1;
  v230 = -1;
  v231 = 8;
  v232 = 1;
  v233 = -1;
  v234 = -1;
  v235 = 8;
  v236 = 1;
  v237 = -1;
  v238 = -1;
  v239 = 8;
  v240 = 1;
  v241 = -1;
  v242 = -1;
  v243 = 8;
  v244 = 1;
  v245 = -1;
  v246 = -1;
  v247 = 8;
  memcpy(__dst, __src, 0x21CuLL);
  v11 = a5;
  v12 = a5 & 0xCFFFFFFF;
  v133 = a1;
  v13 = *(_QWORD *)(a1 + 184);
  v14 = (int32x2_t *)(v13 + 4488 * v12);
  v15 = v14 + 3;
  v16 = a4;
  v17 = v14[3].u32[a4];
  if (a6 == 1)
  {
    v18 = (__int128 *)__dst;
  }
  else
  {
    v20 = 1;
    v21 = v140;
    v18 = (__int128 *)__dst;
    do
    {
      if (v17 >> 30)
      {
        if (v17 == a3)
          return 0;
        sub_223E8C14C(v14, a4, a6, v18, (uint64_t)v21);
        v32 = v14[1].i32[0];
        v33 = (v14[1].i32[1] - v14->u32[0]) >> 1;
        v34 = vdup_n_s32(v33);
        v136 = vmla_s32(*v14, v34, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a4), (int8x8_t)0xFF000000FFLL), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
        v137 = v32 + v33 * (a4 & 1);
        v138 = vadd_s32(v136, v34);
        v139 = v137 + v33;
        v17 = sub_223E8A58C(v133, --a6, &v136, v17);
        v23 = v17 & 0xCFFFFFFF;
        v13 = *(_QWORD *)(v133 + 184);
        v35 = (int *)(v13 + 4488 * v23);
        v35[1121] = v11;
        *(_DWORD *)(v13 + 4488 * v12 + 4 * v16 + 24) = v17;
        v36 = *a2;
        if (*a2 >= *v35
          && (v37 = a2[1], v38 = v35[1], v37 >= v38)
          && (v39 = a2[2], v40 = v35[2], v39 >= v40)
          && ((v41 = v35[3], v36 < v41) ? (v42 = v37 < v35[4]) : (v42 = 0), v42 && v39 < v35[5]))
        {
          a4 = (((v36 - *v35 - ((v41 - *v35) >> 1)) >> 29) & 4 | ((int)(v39
                                                                                    - v40
                                                                                    - ((v41 - *v35) >> 1)) >= 0) | (2 * ((v37 - v38 - ((v41 - *v35) >> 1)) >> 31))) ^ 6;
        }
        else
        {
          a4 = 8;
        }
      }
      else
      {
        sub_223E8C14C(v14, a4, a6, v18, (uint64_t)v21);
        v23 = v17 & 0xCFFFFFFF;
        if (a3 < 0
          && !*(_DWORD *)(v13 + 4488 * v23 + 56)
          && !*(_DWORD *)(v13 + 4488 * v23 + 64))
        {
          return 0;
        }
        v24 = (int *)(v13 + 4488 * v23);
        v25 = *a2;
        if (*a2 >= *v24
          && (v26 = a2[1], v27 = v24[1], v26 >= v27)
          && (v28 = a2[2], v29 = v24[2], v28 >= v29)
          && ((v30 = v24[3], v25 < v30) ? (v31 = v26 < v24[4]) : (v31 = 0), v31 && v28 < v24[5]))
        {
          a4 = (((v25 - *v24 - ((v30 - *v24) >> 1)) >> 29) & 4 | ((int)(v28
                                                                                    - v29
                                                                                    - ((v30 - *v24) >> 1)) >= 0) | (2 * ((v26 - v27 - ((v30 - *v24) >> 1)) >> 31))) ^ 6;
        }
        else
        {
          a4 = 8;
        }
        --a6;
      }
      v11 = v17;
      v22 = (v20 & 1) == 0;
      v20 ^= 1u;
      v14 = (int32x2_t *)(v13 + 4488 * v23);
      if (v22)
        v18 = (__int128 *)__dst;
      else
        v18 = (__int128 *)v140;
      if (v22)
        v21 = v140;
      else
        v21 = __dst;
      v15 = v14 + 3;
      v16 = a4;
      v17 = v14[3].u32[a4];
      v12 = v23;
    }
    while (a6 != 1);
  }
  if (v17 == a3)
    return 0;
  v43 = v11;
  sub_223E8C14C(v14, a4, 1, v18, (uint64_t)__src);
  v15->i32[v16] = a3;
  sub_223E8E698(v133, a4, a3, a2, v11, (uint64_t)__src);
  for (i = 0; i != 27; ++i)
  {
    if (!__src[20 * byte_22468FC83[i]])
    {
      v47 = &__src[20 * byte_22468FC83[i]];
      v48 = *((_DWORD *)v47 + 2) & 0xCFFFFFFF;
      v49 = *(_QWORD *)(v133 + 184);
      v50 = v47[16];
      if ((*(_DWORD *)(v49 + 4488 * v48 + 4 * v50 + 24) & 0x80000000) == 0)
      {
        v51 = v49
            + 4488 * v48
            + 540 * v50
            + 20
            * (-3 * byte_22468FCA0[12 * byte_22468FC83[i] + 4]
                              - 9 * byte_22468FCA0[12 * byte_22468FC83[i]]
                              - byte_22468FCA0[12 * byte_22468FC83[i] + 8]
                              + 13);
        v53 = *(unsigned __int8 *)(v51 + 68);
        v52 = v51 + 68;
        if (v53)
          v54 = 0x80000000;
        else
          v54 = *(_DWORD *)(v52 + 12);
        if (-3 * byte_22468FCA0[12 * byte_22468FC83[i] + 4]
           - 9 * byte_22468FCA0[12 * byte_22468FC83[i]] == byte_22468FCA0[12
                                                                                         * byte_22468FC83[i]
                                                                                         + 8])
          goto LABEL_45;
        if ((v54 & 0x80000000) != 0)
        {
          if (a3 < 0)
            goto LABEL_45;
          --*(_DWORD *)(v49 + 4488 * v48 + 4 * v50 + 4420);
          v56 = v49 + 4488 * v48 + 4452;
          v46 = v49 + 4488 * v48 + 4388;
          if ((a3 & 0x40000000) == 0)
            v46 = v56;
          goto LABEL_44;
        }
        if ((v54 & 0x40000000) != 0)
        {
          if ((a3 & 0x80000000) == 0)
          {
            if ((a3 & 0x40000000) != 0)
              goto LABEL_45;
            v57 = v49 + 4488 * v48;
            --*(_DWORD *)(v57 + 4 * v50 + 4388);
            v46 = v57 + 4452;
            goto LABEL_44;
          }
          v45 = v49 + 4488 * v48;
          --*(_DWORD *)(v45 + 4 * v50 + 4388);
        }
        else
        {
          if ((a3 & 0x80000000) == 0)
          {
            if ((a3 & 0x40000000) == 0)
              goto LABEL_45;
            v55 = v49 + 4488 * v48;
            --*(_DWORD *)(v55 + 4 * v50 + 4452);
            v46 = v55 + 4388;
LABEL_44:
            ++*(_DWORD *)(v46 + 4 * v50);
LABEL_45:
            *(_BYTE *)v52 = 0;
            *(_DWORD *)(v52 + 4) = 0;
            *(_DWORD *)(v52 + 8) = v11;
            *(_DWORD *)(v52 + 12) = a3;
            *(_BYTE *)(v52 + 16) = a4;
            continue;
          }
          v45 = v49 + 4488 * v48;
          --*(_DWORD *)(v45 + 4 * v50 + 4452);
        }
        v46 = v45 + 4420;
        goto LABEL_44;
      }
    }
  }
  v58 = 0;
  v59 = (_DWORD *)v14 + a4;
  v59[1105] = 0;
  v59[1097] = 0;
  v59[1113] = 0;
  do
  {
    v60 = byte_22468FDEC[v58];
    if (v60 != 13)
    {
      v61 = 20 * v60;
      v62 = &__src[v61];
      v63 = (char *)&v14[8] + 540 * a4 + v61 + 4;
      v64 = *(_OWORD *)v62;
      v63[16] = v62[16];
      *(_OWORD *)v63 = v64;
      LODWORD(v63) = *v62;
      v65 = *((_DWORD *)v62 + 3);
      if ((_DWORD)v63)
        v66 = 0x80000000;
      else
        v66 = v65;
      if ((v66 & 0x40000000) != 0)
        v67 = v59 + 1097;
      else
        v67 = v59 + 1113;
      if (v66 >= 0)
        v68 = v67;
      else
        v68 = v59 + 1105;
      ++*v68;
    }
    ++v58;
  }
  while (v58 != 27);
  if (a3 < 0)
  {
    if ((v17 & 0x80000000) != 0)
      return 0;
    v69 = (int32x2_t *)((char *)v14 + 60);
    if ((v17 & 0x40000000) != 0)
    {
      ++*(_DWORD *)(v133 + 252);
      --v14[7].i32[0];
    }
    else
    {
      ++*(_DWORD *)(v133 + 244);
      --v14[8].i32[0];
    }
    goto LABEL_199;
  }
  if ((a3 & 0x40000000) != 0)
  {
    if ((v17 & 0x80000000) != 0)
    {
      ++*(_DWORD *)(v133 + 236);
      v77 = *(_DWORD **)(v133 + 40);
      v76 = *(_QWORD *)(v133 + 48);
      if ((unint64_t)v77 >= v76)
      {
        v88 = *(_DWORD **)(v133 + 32);
        v89 = 0xAAAAAAAAAAAAAAABLL * (v77 - v88) + 1;
        if (v89 > 0x1555555555555555)
          goto LABEL_203;
        v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (_QWORD)v88) >> 2);
        if (2 * v90 > v89)
          v89 = 2 * v90;
        if (v90 >= 0xAAAAAAAAAAAAAAALL)
          v91 = 0x1555555555555555;
        else
          v91 = v89;
        if (v91)
        {
          if (v91 > 0x1555555555555555)
            goto LABEL_204;
          v92 = (char *)operator new(12 * v91);
        }
        else
        {
          v92 = 0;
        }
        v107 = &v92[4 * (v77 - v88)];
        *(_QWORD *)v107 = *(_QWORD *)a2;
        *((_DWORD *)v107 + 2) = a2[2];
        v108 = v107 + 12;
        if (v77 != v88)
        {
          do
          {
            v109 = *(_QWORD *)(v77 - 3);
            v77 -= 3;
            v110 = v77[2];
            *(_QWORD *)(v107 - 12) = v109;
            v107 -= 12;
            *((_DWORD *)v107 + 2) = v110;
          }
          while (v77 != v88);
          v77 = *(_DWORD **)(v133 + 32);
        }
        *(_QWORD *)(v133 + 32) = v107;
        *(_QWORD *)(v133 + 40) = v108;
        *(_QWORD *)(v133 + 48) = &v92[12 * v91];
        if (v77)
          operator delete(v77);
        *(_QWORD *)(v133 + 40) = v108;
      }
      else
      {
        v78 = *(_QWORD *)a2;
        v77[2] = a2[2];
        *(_QWORD *)v77 = v78;
        *(_QWORD *)(v133 + 40) = v77 + 3;
      }
    }
    else
    {
      if ((v17 & 0x40000000) != 0)
      {
        if ((a3 & 0x20000000) != 0 || (v17 & 0x20000000) == 0)
          goto LABEL_195;
        goto LABEL_170;
      }
      ++*(_DWORD *)(v133 + 240);
      v71 = *(_DWORD **)(v133 + 88);
      v70 = *(_QWORD *)(v133 + 96);
      if ((unint64_t)v71 >= v70)
      {
        v93 = *(_DWORD **)(v133 + 80);
        v94 = 0xAAAAAAAAAAAAAAABLL * (v71 - v93) + 1;
        if (v94 > 0x1555555555555555)
          goto LABEL_203;
        v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)v93) >> 2);
        if (2 * v95 > v94)
          v94 = 2 * v95;
        if (v95 >= 0xAAAAAAAAAAAAAAALL)
          v96 = 0x1555555555555555;
        else
          v96 = v94;
        if (v96)
        {
          if (v96 > 0x1555555555555555)
            goto LABEL_204;
          v97 = (char *)operator new(12 * v96);
        }
        else
        {
          v97 = 0;
        }
        v111 = &v97[4 * (v71 - v93)];
        *(_QWORD *)v111 = *(_QWORD *)a2;
        *((_DWORD *)v111 + 2) = a2[2];
        v112 = v111 + 12;
        if (v71 != v93)
        {
          do
          {
            v113 = *(_QWORD *)(v71 - 3);
            v71 -= 3;
            v114 = v71[2];
            *(_QWORD *)(v111 - 12) = v113;
            v111 -= 12;
            *((_DWORD *)v111 + 2) = v114;
          }
          while (v71 != v93);
          v71 = *(_DWORD **)(v133 + 80);
        }
        *(_QWORD *)(v133 + 80) = v111;
        *(_QWORD *)(v133 + 88) = v112;
        *(_QWORD *)(v133 + 96) = &v97[12 * v96];
        if (v71)
          operator delete(v71);
        *(_QWORD *)(v133 + 88) = v112;
      }
      else
      {
        v72 = *(_QWORD *)a2;
        v71[2] = a2[2];
        *(_QWORD *)v71 = v72;
        *(_QWORD *)(v133 + 88) = v71 + 3;
      }
    }
LABEL_167:
    if ((a3 & 0x20000000) != 0 || ((v17 | a3) & 0x80000000) != 0 || (v17 & 0x20000000) == 0)
    {
LABEL_172:
      if ((a3 & 0x40000000) == 0)
        goto LABEL_173;
      goto LABEL_194;
    }
LABEL_170:
    ++*(_DWORD *)(v133 + 256);
    v119 = *(char **)(v133 + 112);
    v118 = *(_QWORD *)(v133 + 120);
    if ((unint64_t)v119 < v118)
    {
      v120 = *(_QWORD *)a2;
      *((_DWORD *)v119 + 2) = a2[2];
      *(_QWORD *)v119 = v120;
      *(_QWORD *)(v133 + 112) = v119 + 12;
      goto LABEL_172;
    }
    v121 = *(_BYTE **)(v133 + 104);
    v122 = 0xAAAAAAAAAAAAAAABLL * ((v119 - v121) >> 2) + 1;
    if (v122 <= 0x1555555555555555)
    {
      v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - (_QWORD)v121) >> 2);
      if (2 * v123 > v122)
        v122 = 2 * v123;
      if (v123 >= 0xAAAAAAAAAAAAAAALL)
        v124 = 0x1555555555555555;
      else
        v124 = v122;
      if (!v124)
      {
        v125 = 0;
LABEL_188:
        v126 = &v125[4 * ((v119 - v121) >> 2)];
        *(_QWORD *)v126 = *(_QWORD *)a2;
        *((_DWORD *)v126 + 2) = a2[2];
        v127 = v126 + 12;
        if (v119 != v121)
        {
          do
          {
            v128 = *(_QWORD *)(v119 - 12);
            v119 -= 12;
            v129 = *((_DWORD *)v119 + 2);
            *(_QWORD *)(v126 - 12) = v128;
            v126 -= 12;
            *((_DWORD *)v126 + 2) = v129;
          }
          while (v119 != v121);
          v119 = *(char **)(v133 + 104);
        }
        *(_QWORD *)(v133 + 104) = v126;
        *(_QWORD *)(v133 + 112) = v127;
        *(_QWORD *)(v133 + 120) = &v125[12 * v124];
        if (v119)
          operator delete(v119);
        *(_QWORD *)(v133 + 112) = v127;
        if ((a3 & 0x40000000) == 0)
        {
LABEL_173:
          if ((v17 & 0x80000000) == 0)
            goto LABEL_174;
          --v14[7].i32[1];
LABEL_186:
          v69 = v14 + 8;
          goto LABEL_199;
        }
LABEL_194:
        if ((v17 & 0x80000000) != 0)
        {
          --v14[7].i32[1];
LABEL_198:
          v69 = v14 + 7;
LABEL_199:
          ++v69->i32[0];
          v130 = *(_QWORD *)(v133 + 184);
          v131 = *(_DWORD *)(v130 + 4488 * (v43 & 0xCFFFFFFF) + 4484);
          if (v131 != v43)
          {
            do
            {
              sub_223E97348(v130, v131);
              v130 = *(_QWORD *)(v133 + 184);
              v22 = *(_DWORD *)(v130 + 4488 * (v131 & 0xCFFFFFFF) + 4484) == v131;
              v131 = *(_DWORD *)(v130 + 4488 * (v131 & 0xCFFFFFFF) + 4484);
            }
            while (!v22);
          }
          return 1;
        }
LABEL_195:
        if ((v17 & 0x40000000) != 0)
          return 0;
        --v14[8].i32[0];
        goto LABEL_198;
      }
      if (v124 <= 0x1555555555555555)
      {
        v125 = (char *)operator new(12 * v124);
        goto LABEL_188;
      }
LABEL_204:
      sub_223174E94();
    }
LABEL_203:
    sub_22316E078();
  }
  if ((v17 & 0x80000000) != 0)
  {
    ++*(_DWORD *)(v133 + 232);
    v74 = *(_DWORD **)(v133 + 16);
    v73 = *(_QWORD *)(v133 + 24);
    if ((unint64_t)v74 >= v73)
    {
      v83 = *(_DWORD **)(v133 + 8);
      v84 = 0xAAAAAAAAAAAAAAABLL * (v74 - v83) + 1;
      if (v84 > 0x1555555555555555)
        goto LABEL_203;
      v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v83) >> 2);
      if (2 * v85 > v84)
        v84 = 2 * v85;
      if (v85 >= 0xAAAAAAAAAAAAAAALL)
        v86 = 0x1555555555555555;
      else
        v86 = v84;
      if (v86)
      {
        if (v86 > 0x1555555555555555)
          goto LABEL_204;
        v87 = (char *)operator new(12 * v86);
      }
      else
      {
        v87 = 0;
      }
      v103 = &v87[4 * (v74 - v83)];
      *(_QWORD *)v103 = *(_QWORD *)a2;
      *((_DWORD *)v103 + 2) = a2[2];
      v104 = v103 + 12;
      if (v74 != v83)
      {
        do
        {
          v105 = *(_QWORD *)(v74 - 3);
          v74 -= 3;
          v106 = v74[2];
          *(_QWORD *)(v103 - 12) = v105;
          v103 -= 12;
          *((_DWORD *)v103 + 2) = v106;
        }
        while (v74 != v83);
        v74 = *(_DWORD **)(v133 + 8);
      }
      *(_QWORD *)(v133 + 8) = v103;
      *(_QWORD *)(v133 + 16) = v104;
      *(_QWORD *)(v133 + 24) = &v87[12 * v86];
      if (v74)
        operator delete(v74);
      *(_QWORD *)(v133 + 16) = v104;
    }
    else
    {
      v75 = *(_QWORD *)a2;
      v74[2] = a2[2];
      *(_QWORD *)v74 = v75;
      *(_QWORD *)(v133 + 16) = v74 + 3;
    }
    goto LABEL_167;
  }
  if ((v17 & 0x40000000) != 0)
  {
    ++*(_DWORD *)(v133 + 248);
    v80 = *(_DWORD **)(v133 + 64);
    v79 = *(_QWORD *)(v133 + 72);
    if ((unint64_t)v80 >= v79)
    {
      v98 = *(_DWORD **)(v133 + 56);
      v99 = 0xAAAAAAAAAAAAAAABLL * (v80 - v98) + 1;
      if (v99 > 0x1555555555555555)
        goto LABEL_203;
      v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v98) >> 2);
      if (2 * v100 > v99)
        v99 = 2 * v100;
      if (v100 >= 0xAAAAAAAAAAAAAAALL)
        v101 = 0x1555555555555555;
      else
        v101 = v99;
      if (v101)
      {
        if (v101 > 0x1555555555555555)
          goto LABEL_204;
        v102 = (char *)operator new(12 * v101);
      }
      else
      {
        v102 = 0;
      }
      v115 = &v102[4 * (v80 - v98)];
      *(_QWORD *)v115 = *(_QWORD *)a2;
      *((_DWORD *)v115 + 2) = a2[2];
      v82 = v115 + 12;
      if (v80 != v98)
      {
        do
        {
          v116 = *(_QWORD *)(v80 - 3);
          v80 -= 3;
          v117 = v80[2];
          *(_QWORD *)(v115 - 12) = v116;
          v115 -= 12;
          *((_DWORD *)v115 + 2) = v117;
        }
        while (v80 != v98);
        v80 = *(_DWORD **)(v133 + 56);
      }
      *(_QWORD *)(v133 + 56) = v115;
      *(_QWORD *)(v133 + 64) = v82;
      *(_QWORD *)(v133 + 72) = &v102[12 * v101];
      if (v80)
        operator delete(v80);
    }
    else
    {
      v81 = *(_QWORD *)a2;
      v80[2] = a2[2];
      *(_QWORD *)v80 = v81;
      v82 = v80 + 3;
    }
    *(_QWORD *)(v133 + 64) = v82;
    goto LABEL_167;
  }
  if ((a3 & 0x20000000) == 0 && (v17 & 0x20000000) != 0)
    goto LABEL_170;
LABEL_174:
  if ((v17 & 0x40000000) != 0)
  {
    --v14[7].i32[0];
    goto LABEL_186;
  }
  return 0;
}

_DWORD *sub_223E8C14C(_DWORD *result, int a2, int a3, __int128 *a4, uint64_t a5)
{
  unsigned int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  char v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  char v80;
  unsigned int v81;
  unsigned int v82;
  char v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  char v97;
  char v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104;
  int v105;
  uint64_t v106;
  int v107;
  unsigned int v108;
  int v109;
  char v110;
  char v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  int v117;
  char v118;
  char v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  int v125;
  char v126;
  char v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  int v131;
  char v132;
  char v133;
  int v134;
  uint64_t v135;
  int v136;
  char v137;
  char v138;
  int v139;
  uint64_t v140;
  int v141;
  char v142;
  char v143;
  int v144;
  int v145;
  char v146;
  char v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  char v152;
  char v153;
  int v154;
  int v155;
  char v156;
  char v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  char v162;
  char v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  int v167;
  char v168;
  char v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  char v175;
  char v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  char v182;
  char v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  int v187;
  char v188;
  char v189;
  int v190;
  int v191;
  char v192;
  char v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  char v199;
  char v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  int v226;
  char v227;
  char v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;

  switch(a2)
  {
    case 0:
      v5 = result[10];
      if (a3 == 1)
      {
        v6 = 0;
        v7 = 0;
        *(_BYTE *)(a5 + 440) = 0;
        *(_QWORD *)(a5 + 444) = 0x8000000000000000;
        *(_DWORD *)(a5 + 452) = v5;
        *(_BYTE *)(a5 + 456) = 4;
        v8 = result[8];
        *(_BYTE *)(a5 + 320) = 0;
        *(_QWORD *)(a5 + 324) = 0x8000000000000000;
        *(_DWORD *)(a5 + 332) = v8;
        *(_BYTE *)(a5 + 336) = 2;
        v9 = result[7];
        *(_BYTE *)(a5 + 280) = 0;
        *(_QWORD *)(a5 + 284) = 0x8000000000000000;
        *(_DWORD *)(a5 + 292) = v9;
        *(_BYTE *)(a5 + 296) = 1;
        v10 = result[12];
        *(_BYTE *)(a5 + 500) = 0;
        *(_QWORD *)(a5 + 504) = 0x8000000000000000;
        *(_DWORD *)(a5 + 512) = v10;
        *(_BYTE *)(a5 + 516) = 6;
        v11 = result[9];
        *(_BYTE *)(a5 + 340) = 0;
        *(_QWORD *)(a5 + 344) = 0x8000000000000000;
        *(_DWORD *)(a5 + 352) = v11;
        *(_BYTE *)(a5 + 356) = 3;
        v12 = result[11];
        *(_BYTE *)(a5 + 460) = 0;
        *(_QWORD *)(a5 + 464) = 0x8000000000000000;
        *(_DWORD *)(a5 + 472) = v12;
        *(_BYTE *)(a5 + 476) = 5;
        v13 = result[13];
        v14 = 7;
        v15 = 0x80000000;
        goto LABEL_179;
      }
      HIDWORD(v93) = 0x80000000;
      if ((v5 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 443) = 0;
        *(_WORD *)(a5 + 441) = 0;
        *(_BYTE *)(a5 + 440) = 1;
        *(_DWORD *)(a5 + 444) = -1;
        *(_QWORD *)(a5 + 448) = -1;
        *(_BYTE *)(a5 + 456) = 8;
        v94 = result[8];
        if ((v94 & 0x80000000) == 0)
        {
LABEL_20:
          LODWORD(v93) = v94;
          *(_BYTE *)(a5 + 320) = 0;
          *(_DWORD *)(a5 + 324) = a3;
          *(_QWORD *)(a5 + 328) = v93;
          *(_BYTE *)(a5 + 336) = 2;
          v95 = result[7];
          if ((v95 & 0x80000000) == 0)
            goto LABEL_21;
          goto LABEL_52;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 440) = 0;
        *(_DWORD *)(a5 + 444) = a3;
        *(_QWORD *)(a5 + 448) = v5 | 0x8000000000000000;
        *(_BYTE *)(a5 + 456) = 4;
        v94 = result[8];
        if ((v94 & 0x80000000) == 0)
          goto LABEL_20;
      }
      *(_BYTE *)(a5 + 323) = 0;
      *(_WORD *)(a5 + 321) = 0;
      *(_BYTE *)(a5 + 320) = 1;
      *(_DWORD *)(a5 + 324) = -1;
      *(_QWORD *)(a5 + 328) = -1;
      *(_BYTE *)(a5 + 336) = 8;
      v95 = result[7];
      if ((v95 & 0x80000000) == 0)
      {
LABEL_21:
        *(_BYTE *)(a5 + 280) = 0;
        *(_DWORD *)(a5 + 284) = a3;
        *(_QWORD *)(a5 + 288) = v95 | 0x8000000000000000;
        *(_BYTE *)(a5 + 296) = 1;
        v96 = result[12];
        if ((v96 & 0x80000000) == 0)
        {
LABEL_22:
          v97 = 0;
          v98 = 6;
          v99 = 0x80000000;
          v100 = a3;
LABEL_54:
          *(_BYTE *)(a5 + 500) = v97;
          *(_DWORD *)(a5 + 504) = v100;
          *(_DWORD *)(a5 + 508) = v96;
          *(_DWORD *)(a5 + 512) = v99;
          *(_BYTE *)(a5 + 516) = v98;
          v145 = result[9];
          if (v145 < 0)
          {
            v147 = 8;
            *(_BYTE *)(a5 + 343) = 0;
            *(_WORD *)(a5 + 341) = 0;
            v149 = -1;
            v146 = 1;
            v145 = -1;
            v148 = -1;
          }
          else
          {
            v146 = 0;
            v147 = 3;
            v148 = 0x80000000;
            v149 = a3;
          }
          *(_BYTE *)(a5 + 340) = v146;
          *(_DWORD *)(a5 + 344) = v149;
          *(_DWORD *)(a5 + 348) = v145;
          *(_DWORD *)(a5 + 352) = v148;
          *(_BYTE *)(a5 + 356) = v147;
          v191 = result[11];
          if (v191 < 0)
          {
            v193 = 8;
            *(_BYTE *)(a5 + 463) = 0;
            *(_WORD *)(a5 + 461) = 0;
            v195 = -1;
            v192 = 1;
            v191 = -1;
            v194 = -1;
          }
          else
          {
            v192 = 0;
            v193 = 5;
            v194 = 0x80000000;
            v195 = a3;
          }
          *(_BYTE *)(a5 + 460) = v192;
          *(_DWORD *)(a5 + 464) = v195;
          *(_DWORD *)(a5 + 468) = v191;
          *(_DWORD *)(a5 + 472) = v194;
          *(_BYTE *)(a5 + 476) = v193;
          v15 = result[13];
          if ((v15 & 0x80000000) != 0)
          {
            v14 = 8;
            *(_BYTE *)(a5 + 523) = 0;
            *(_WORD *)(a5 + 521) = 0;
            v7 = -1;
            v6 = 1;
            v15 = -1;
            v13 = -1;
          }
          else
          {
            v6 = 0;
            v14 = 7;
            v13 = 0x80000000;
            v7 = a3;
          }
LABEL_179:
          *(_BYTE *)(a5 + 520) = v6;
          *(_DWORD *)(a5 + 524) = v7;
          *(_DWORD *)(a5 + 528) = v15;
          *(_DWORD *)(a5 + 532) = v13;
          *(_BYTE *)(a5 + 536) = v14;
          v324 = a4[5];
          *(_BYTE *)(a5 + 96) = *((_BYTE *)a4 + 96);
          *(_OWORD *)(a5 + 80) = v324;
          v325 = a4[5];
          *(_BYTE *)(a5 + 156) = *((_BYTE *)a4 + 96);
          *(_OWORD *)(a5 + 140) = v325;
          v326 = a4[5];
          *(_BYTE *)(a5 + 176) = *((_BYTE *)a4 + 96);
          *(_OWORD *)(a5 + 160) = v326;
          v327 = a4[5];
          *(_BYTE *)(a5 + 116) = *((_BYTE *)a4 + 96);
          *(_OWORD *)(a5 + 100) = v327;
          v328 = *(__int128 *)((char *)a4 + 200);
          *(_BYTE *)(a5 + 216) = *((_BYTE *)a4 + 216);
          *(_OWORD *)(a5 + 200) = v328;
          v329 = *(__int128 *)((char *)a4 + 200);
          *(_BYTE *)(a5 + 396) = *((_BYTE *)a4 + 216);
          *(_OWORD *)(a5 + 380) = v329;
          v330 = *(__int128 *)((char *)a4 + 200);
          *(_BYTE *)(a5 + 416) = *((_BYTE *)a4 + 216);
          *(_OWORD *)(a5 + 400) = v330;
          v331 = *(__int128 *)((char *)a4 + 200);
          *(_BYTE *)(a5 + 236) = *((_BYTE *)a4 + 216);
          *(_OWORD *)(a5 + 220) = v331;
          v332 = a4[15];
          *(_BYTE *)(a5 + 256) = *((_BYTE *)a4 + 256);
          *(_OWORD *)(a5 + 240) = v332;
          v333 = a4[15];
          *(_BYTE *)(a5 + 436) = *((_BYTE *)a4 + 256);
          *(_OWORD *)(a5 + 420) = v333;
          v334 = a4[15];
          *(_BYTE *)(a5 + 496) = *((_BYTE *)a4 + 256);
          *(_OWORD *)(a5 + 480) = v334;
          v335 = a4[15];
          *(_BYTE *)(a5 + 316) = *((_BYTE *)a4 + 256);
          *(_OWORD *)(a5 + 300) = v335;
          v336 = *(__int128 *)((char *)a4 + 20);
          *(_BYTE *)(a5 + 36) = *((_BYTE *)a4 + 36);
          *(_OWORD *)(a5 + 20) = v336;
          v337 = *(__int128 *)((char *)a4 + 20);
          *(_BYTE *)(a5 + 56) = *((_BYTE *)a4 + 36);
          *(_OWORD *)(a5 + 40) = v337;
          v338 = *(__int128 *)((char *)a4 + 60);
          *(_BYTE *)(a5 + 76) = *((_BYTE *)a4 + 76);
          *(_OWORD *)(a5 + 60) = v338;
          v339 = *(__int128 *)((char *)a4 + 60);
          *(_BYTE *)(a5 + 136) = *((_BYTE *)a4 + 76);
          *(_OWORD *)(a5 + 120) = v339;
          v340 = *(__int128 *)((char *)a4 + 180);
          *(_BYTE *)(a5 + 196) = *((_BYTE *)a4 + 196);
          *(_OWORD *)(a5 + 180) = v340;
          v341 = *(__int128 *)((char *)a4 + 180);
          *(_BYTE *)(a5 + 376) = *((_BYTE *)a4 + 196);
          *(_OWORD *)(a5 + 360) = v341;
          v342 = *a4;
          *(_BYTE *)(a5 + 16) = *((_BYTE *)a4 + 16);
          *(_OWORD *)a5 = v342;
          v226 = result[6];
          if (a3 == 1)
          {
            v227 = 0;
            goto LABEL_186;
          }
          if ((v226 & 0x80000000) == 0)
          {
            v228 = 0;
            goto LABEL_189;
          }
          goto LABEL_190;
        }
LABEL_53:
        v98 = 8;
        *(_BYTE *)(a5 + 503) = 0;
        *(_WORD *)(a5 + 501) = 0;
        v100 = -1;
        v97 = 1;
        v96 = -1;
        v99 = -1;
        goto LABEL_54;
      }
LABEL_52:
      *(_BYTE *)(a5 + 283) = 0;
      *(_WORD *)(a5 + 281) = 0;
      *(_BYTE *)(a5 + 280) = 1;
      *(_DWORD *)(a5 + 284) = -1;
      *(_QWORD *)(a5 + 288) = -1;
      *(_BYTE *)(a5 + 296) = 8;
      v96 = result[12];
      if ((v96 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_53;
    case 1:
      v27 = result[11];
      if (a3 == 1)
      {
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a5 + 440) = 0;
        *(_QWORD *)(a5 + 444) = 0x8000000000000000;
        *(_DWORD *)(a5 + 452) = v27;
        *(_BYTE *)(a5 + 456) = 5;
        v30 = result[9];
        *(_BYTE *)(a5 + 320) = 0;
        *(_QWORD *)(a5 + 324) = 0x8000000000000000;
        *(_DWORD *)(a5 + 332) = v30;
        *(_BYTE *)(a5 + 336) = 3;
        v31 = result[6];
        *(_BYTE *)(a5 + 240) = 0;
        *(_QWORD *)(a5 + 244) = 0x8000000000000000;
        *(_DWORD *)(a5 + 252) = v31;
        *(_BYTE *)(a5 + 256) = 0;
        v32 = result[13];
        *(_BYTE *)(a5 + 500) = 0;
        *(_QWORD *)(a5 + 504) = 0x8000000000000000;
        *(_DWORD *)(a5 + 512) = v32;
        *(_BYTE *)(a5 + 516) = 7;
        v33 = result[8];
        *(_BYTE *)(a5 + 300) = 0;
        *(_QWORD *)(a5 + 304) = 0x8000000000000000;
        *(_DWORD *)(a5 + 312) = v33;
        *(_BYTE *)(a5 + 316) = 2;
        v34 = result[10];
        *(_BYTE *)(a5 + 420) = 0;
        *(_QWORD *)(a5 + 424) = 0x8000000000000000;
        *(_DWORD *)(a5 + 432) = v34;
        *(_BYTE *)(a5 + 436) = 4;
        v35 = result[12];
        v36 = 6;
        v37 = 0x80000000;
        goto LABEL_184;
      }
      HIDWORD(v106) = 0x80000000;
      if ((v27 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 443) = 0;
        *(_WORD *)(a5 + 441) = 0;
        *(_BYTE *)(a5 + 440) = 1;
        *(_DWORD *)(a5 + 444) = -1;
        *(_QWORD *)(a5 + 448) = -1;
        *(_BYTE *)(a5 + 456) = 8;
        v107 = result[9];
        if ((v107 & 0x80000000) == 0)
        {
LABEL_28:
          LODWORD(v106) = v107;
          *(_BYTE *)(a5 + 320) = 0;
          *(_DWORD *)(a5 + 324) = a3;
          *(_QWORD *)(a5 + 328) = v106;
          *(_BYTE *)(a5 + 336) = 3;
          v108 = result[6];
          if ((v108 & 0x80000000) == 0)
            goto LABEL_29;
LABEL_63:
          *(_BYTE *)(a5 + 243) = 0;
          *(_WORD *)(a5 + 241) = 0;
          *(_BYTE *)(a5 + 240) = 1;
          *(_DWORD *)(a5 + 244) = -1;
          *(_QWORD *)(a5 + 248) = -1;
          *(_BYTE *)(a5 + 256) = 8;
          v109 = result[13];
          if ((v109 & 0x80000000) == 0)
            goto LABEL_30;
          goto LABEL_64;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 440) = 0;
        *(_DWORD *)(a5 + 444) = a3;
        *(_QWORD *)(a5 + 448) = v27 | 0x8000000000000000;
        *(_BYTE *)(a5 + 456) = 5;
        v107 = result[9];
        if ((v107 & 0x80000000) == 0)
          goto LABEL_28;
      }
      *(_BYTE *)(a5 + 323) = 0;
      *(_WORD *)(a5 + 321) = 0;
      *(_BYTE *)(a5 + 320) = 1;
      *(_DWORD *)(a5 + 324) = -1;
      *(_QWORD *)(a5 + 328) = -1;
      *(_BYTE *)(a5 + 336) = 8;
      v108 = result[6];
      if ((v108 & 0x80000000) != 0)
        goto LABEL_63;
LABEL_29:
      *(_BYTE *)(a5 + 240) = 0;
      *(_DWORD *)(a5 + 244) = a3;
      *(_QWORD *)(a5 + 248) = v108 | 0x8000000000000000;
      *(_BYTE *)(a5 + 256) = 0;
      v109 = result[13];
      if ((v109 & 0x80000000) == 0)
      {
LABEL_30:
        v110 = 0;
        v111 = 7;
        v112 = 0x80000000;
        v113 = a3;
        goto LABEL_65;
      }
LABEL_64:
      v111 = 8;
      *(_BYTE *)(a5 + 503) = 0;
      *(_WORD *)(a5 + 501) = 0;
      v113 = -1;
      v110 = 1;
      v109 = -1;
      v112 = -1;
LABEL_65:
      *(_BYTE *)(a5 + 500) = v110;
      *(_DWORD *)(a5 + 504) = v113;
      *(_DWORD *)(a5 + 508) = v109;
      *(_DWORD *)(a5 + 512) = v112;
      *(_BYTE *)(a5 + 516) = v111;
      v155 = result[8];
      if (v155 < 0)
      {
        v157 = 8;
        *(_BYTE *)(a5 + 303) = 0;
        *(_WORD *)(a5 + 301) = 0;
        v159 = -1;
        v156 = 1;
        v155 = -1;
        v158 = -1;
      }
      else
      {
        v156 = 0;
        v157 = 2;
        v158 = 0x80000000;
        v159 = a3;
      }
      *(_BYTE *)(a5 + 300) = v156;
      *(_DWORD *)(a5 + 304) = v159;
      *(_DWORD *)(a5 + 308) = v155;
      *(_DWORD *)(a5 + 312) = v158;
      *(_BYTE *)(a5 + 316) = v157;
      v198 = result[10];
      if (v198 < 0)
      {
        v200 = 8;
        *(_BYTE *)(a5 + 423) = 0;
        *(_WORD *)(a5 + 421) = 0;
        v202 = -1;
        v199 = 1;
        v198 = -1;
        v201 = -1;
      }
      else
      {
        v199 = 0;
        v200 = 4;
        v201 = 0x80000000;
        v202 = a3;
      }
      *(_BYTE *)(a5 + 420) = v199;
      *(_DWORD *)(a5 + 424) = v202;
      *(_DWORD *)(a5 + 428) = v198;
      *(_DWORD *)(a5 + 432) = v201;
      *(_BYTE *)(a5 + 436) = v200;
      v37 = result[12];
      if ((v37 & 0x80000000) != 0)
      {
        v36 = 8;
        *(_BYTE *)(a5 + 483) = 0;
        *(_WORD *)(a5 + 481) = 0;
        v29 = -1;
        v28 = 1;
        v37 = -1;
        v35 = -1;
      }
      else
      {
        v28 = 0;
        v36 = 6;
        v35 = 0x80000000;
        v29 = a3;
      }
LABEL_184:
      *(_BYTE *)(a5 + 480) = v28;
      *(_DWORD *)(a5 + 484) = v29;
      *(_DWORD *)(a5 + 488) = v37;
      *(_DWORD *)(a5 + 492) = v35;
      *(_BYTE *)(a5 + 496) = v36;
      v343 = a4[5];
      *(_BYTE *)(a5 + 96) = *((_BYTE *)a4 + 96);
      *(_OWORD *)(a5 + 80) = v343;
      v344 = a4[5];
      *(_BYTE *)(a5 + 156) = *((_BYTE *)a4 + 96);
      *(_OWORD *)(a5 + 140) = v344;
      v345 = a4[5];
      *(_BYTE *)(a5 + 136) = *((_BYTE *)a4 + 96);
      *(_OWORD *)(a5 + 120) = v345;
      v346 = a4[5];
      *(_BYTE *)(a5 + 76) = *((_BYTE *)a4 + 96);
      *(_OWORD *)(a5 + 60) = v346;
      v347 = *(__int128 *)((char *)a4 + 200);
      *(_BYTE *)(a5 + 216) = *((_BYTE *)a4 + 216);
      *(_OWORD *)(a5 + 200) = v347;
      v348 = *(__int128 *)((char *)a4 + 200);
      *(_BYTE *)(a5 + 396) = *((_BYTE *)a4 + 216);
      *(_OWORD *)(a5 + 380) = v348;
      v349 = *(__int128 *)((char *)a4 + 200);
      *(_BYTE *)(a5 + 376) = *((_BYTE *)a4 + 216);
      *(_OWORD *)(a5 + 360) = v349;
      v350 = *(__int128 *)((char *)a4 + 200);
      *(_BYTE *)(a5 + 196) = *((_BYTE *)a4 + 216);
      *(_OWORD *)(a5 + 180) = v350;
      v351 = *(__int128 *)((char *)a4 + 280);
      *(_BYTE *)(a5 + 296) = *((_BYTE *)a4 + 296);
      *(_OWORD *)(a5 + 280) = v351;
      v352 = *(__int128 *)((char *)a4 + 280);
      *(_BYTE *)(a5 + 476) = *((_BYTE *)a4 + 296);
      *(_OWORD *)(a5 + 460) = v352;
      v353 = *(__int128 *)((char *)a4 + 280);
      *(_BYTE *)(a5 + 536) = *((_BYTE *)a4 + 296);
      *(_OWORD *)(a5 + 520) = v353;
      v354 = *(__int128 *)((char *)a4 + 280);
      *(_BYTE *)(a5 + 356) = *((_BYTE *)a4 + 296);
      *(_OWORD *)(a5 + 340) = v354;
      v355 = *(__int128 *)((char *)a4 + 20);
      *(_BYTE *)(a5 + 36) = *((_BYTE *)a4 + 36);
      *(_OWORD *)(a5 + 20) = v355;
      v356 = *(__int128 *)((char *)a4 + 20);
      *(_BYTE *)(a5 + 16) = *((_BYTE *)a4 + 36);
      *(_OWORD *)a5 = v356;
      v357 = *(__int128 *)((char *)a4 + 100);
      *(_BYTE *)(a5 + 116) = *((_BYTE *)a4 + 116);
      *(_OWORD *)(a5 + 100) = v357;
      v358 = *(__int128 *)((char *)a4 + 100);
      *(_BYTE *)(a5 + 176) = *((_BYTE *)a4 + 116);
      *(_OWORD *)(a5 + 160) = v358;
      v359 = *(__int128 *)((char *)a4 + 220);
      *(_BYTE *)(a5 + 236) = *((_BYTE *)a4 + 236);
      *(_OWORD *)(a5 + 220) = v359;
      v360 = *(__int128 *)((char *)a4 + 220);
      *(_BYTE *)(a5 + 416) = *((_BYTE *)a4 + 236);
      *(_OWORD *)(a5 + 400) = v360;
      v361 = *(__int128 *)((char *)a4 + 40);
      *(_BYTE *)(a5 + 56) = *((_BYTE *)a4 + 56);
      *(_OWORD *)(a5 + 40) = v361;
      v226 = result[7];
      if (a3 == 1)
      {
        v227 = 1;
        goto LABEL_186;
      }
      if ((v226 & 0x80000000) == 0)
      {
        v228 = 1;
        goto LABEL_189;
      }
LABEL_190:
      *(_BYTE *)(a5 + 263) = 0;
      *(_WORD *)(a5 + 261) = 0;
      *(_BYTE *)(a5 + 260) = 1;
      *(_DWORD *)(a5 + 264) = -1;
      *(_DWORD *)(a5 + 268) = -1;
      *(_DWORD *)(a5 + 272) = -1;
      *(_BYTE *)(a5 + 276) = 8;
      return result;
    case 2:
      v38 = result[12];
      if (a3 == 1)
      {
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a5 + 440) = 0;
        *(_QWORD *)(a5 + 444) = 0x8000000000000000;
        *(_DWORD *)(a5 + 452) = v38;
        *(_BYTE *)(a5 + 456) = 6;
        v41 = result[6];
        *(_BYTE *)(a5 + 200) = 0;
        *(_QWORD *)(a5 + 204) = 0x8000000000000000;
        *(_DWORD *)(a5 + 212) = v41;
        *(_BYTE *)(a5 + 216) = 0;
        v42 = result[9];
        *(_BYTE *)(a5 + 280) = 0;
        *(_QWORD *)(a5 + 284) = 0x8000000000000000;
        *(_DWORD *)(a5 + 292) = v42;
        *(_BYTE *)(a5 + 296) = 3;
        v43 = result[10];
        *(_BYTE *)(a5 + 380) = 0;
        *(_QWORD *)(a5 + 384) = 0x8000000000000000;
        *(_DWORD *)(a5 + 392) = v43;
        *(_BYTE *)(a5 + 396) = 4;
        v44 = result[7];
        *(_BYTE *)(a5 + 220) = 0;
        *(_QWORD *)(a5 + 224) = 0x8000000000000000;
        *(_DWORD *)(a5 + 232) = v44;
        *(_BYTE *)(a5 + 236) = 1;
        v45 = result[13];
        *(_BYTE *)(a5 + 460) = 0;
        *(_QWORD *)(a5 + 464) = 0x8000000000000000;
        *(_DWORD *)(a5 + 472) = v45;
        *(_BYTE *)(a5 + 476) = 7;
        v46 = result[11];
        v47 = 5;
        v48 = 0x80000000;
        goto LABEL_150;
      }
      HIDWORD(v114) = 0x80000000;
      if ((v38 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 443) = 0;
        *(_WORD *)(a5 + 441) = 0;
        *(_BYTE *)(a5 + 440) = 1;
        *(_DWORD *)(a5 + 444) = -1;
        *(_QWORD *)(a5 + 448) = -1;
        *(_BYTE *)(a5 + 456) = 8;
        v115 = result[6];
        if ((v115 & 0x80000000) == 0)
        {
LABEL_33:
          LODWORD(v114) = v115;
          *(_BYTE *)(a5 + 200) = 0;
          *(_DWORD *)(a5 + 204) = a3;
          *(_QWORD *)(a5 + 208) = v114;
          *(_BYTE *)(a5 + 216) = 0;
          v116 = result[9];
          if ((v116 & 0x80000000) == 0)
            goto LABEL_34;
          goto LABEL_69;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 440) = 0;
        *(_DWORD *)(a5 + 444) = a3;
        *(_QWORD *)(a5 + 448) = v38 | 0x8000000000000000;
        *(_BYTE *)(a5 + 456) = 6;
        v115 = result[6];
        if ((v115 & 0x80000000) == 0)
          goto LABEL_33;
      }
      *(_BYTE *)(a5 + 203) = 0;
      *(_WORD *)(a5 + 201) = 0;
      *(_BYTE *)(a5 + 200) = 1;
      *(_DWORD *)(a5 + 204) = -1;
      *(_QWORD *)(a5 + 208) = -1;
      *(_BYTE *)(a5 + 216) = 8;
      v116 = result[9];
      if ((v116 & 0x80000000) == 0)
      {
LABEL_34:
        *(_BYTE *)(a5 + 280) = 0;
        *(_DWORD *)(a5 + 284) = a3;
        *(_QWORD *)(a5 + 288) = v116 | 0x8000000000000000;
        *(_BYTE *)(a5 + 296) = 3;
        v117 = result[10];
        if ((v117 & 0x80000000) == 0)
        {
LABEL_35:
          v118 = 0;
          v119 = 4;
          v120 = 0x80000000;
          v121 = a3;
          goto LABEL_71;
        }
LABEL_70:
        v119 = 8;
        *(_BYTE *)(a5 + 383) = 0;
        *(_WORD *)(a5 + 381) = 0;
        v121 = -1;
        v118 = 1;
        v117 = -1;
        v120 = -1;
LABEL_71:
        *(_BYTE *)(a5 + 380) = v118;
        *(_DWORD *)(a5 + 384) = v121;
        *(_DWORD *)(a5 + 388) = v117;
        *(_DWORD *)(a5 + 392) = v120;
        *(_BYTE *)(a5 + 396) = v119;
        v160 = result[7];
        if ((v160 & 0x80000000) != 0)
        {
          *(_BYTE *)(a5 + 223) = 0;
          *(_WORD *)(a5 + 221) = 0;
          *(_BYTE *)(a5 + 220) = 1;
          *(_DWORD *)(a5 + 224) = -1;
          *(_QWORD *)(a5 + 228) = -1;
          *(_BYTE *)(a5 + 236) = 8;
          v161 = result[13];
          if ((v161 & 0x80000000) == 0)
            goto LABEL_73;
        }
        else
        {
          *(_BYTE *)(a5 + 220) = 0;
          *(_DWORD *)(a5 + 224) = a3;
          *(_QWORD *)(a5 + 228) = v160 | 0x8000000000000000;
          *(_BYTE *)(a5 + 236) = 1;
          v161 = result[13];
          if ((v161 & 0x80000000) == 0)
          {
LABEL_73:
            v162 = 0;
            v163 = 7;
            v164 = 0x80000000;
            v165 = a3;
LABEL_112:
            *(_BYTE *)(a5 + 460) = v162;
            *(_DWORD *)(a5 + 464) = v165;
            *(_DWORD *)(a5 + 468) = v161;
            *(_DWORD *)(a5 + 472) = v164;
            *(_BYTE *)(a5 + 476) = v163;
            v48 = result[11];
            if ((v48 & 0x80000000) != 0)
            {
              v47 = 8;
              *(_BYTE *)(a5 + 403) = 0;
              *(_WORD *)(a5 + 401) = 0;
              v40 = -1;
              v39 = 1;
              v48 = -1;
              v46 = -1;
            }
            else
            {
              v39 = 0;
              v47 = 5;
              v46 = 0x80000000;
              v40 = a3;
            }
LABEL_150:
            *(_BYTE *)(a5 + 400) = v39;
            *(_DWORD *)(a5 + 404) = v40;
            *(_DWORD *)(a5 + 408) = v48;
            *(_DWORD *)(a5 + 412) = v46;
            *(_BYTE *)(a5 + 416) = v47;
            v229 = a4[5];
            *(_BYTE *)(a5 + 96) = *((_BYTE *)a4 + 96);
            *(_OWORD *)(a5 + 80) = v229;
            v230 = a4[5];
            *(_BYTE *)(a5 + 36) = *((_BYTE *)a4 + 96);
            *(_OWORD *)(a5 + 20) = v230;
            v231 = a4[5];
            *(_BYTE *)(a5 + 56) = *((_BYTE *)a4 + 96);
            *(_OWORD *)(a5 + 40) = v231;
            v232 = a4[5];
            *(_BYTE *)(a5 + 116) = *((_BYTE *)a4 + 96);
            *(_OWORD *)(a5 + 100) = v232;
            v233 = a4[20];
            *(_BYTE *)(a5 + 336) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 320) = v233;
            v234 = a4[20];
            *(_BYTE *)(a5 + 516) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 500) = v234;
            v235 = a4[20];
            *(_BYTE *)(a5 + 536) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 520) = v235;
            v236 = a4[20];
            *(_BYTE *)(a5 + 356) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 340) = v236;
            v237 = a4[15];
            *(_BYTE *)(a5 + 256) = *((_BYTE *)a4 + 256);
            *(_OWORD *)(a5 + 240) = v237;
            v238 = a4[15];
            *(_BYTE *)(a5 + 436) = *((_BYTE *)a4 + 256);
            *(_OWORD *)(a5 + 420) = v238;
            v239 = a4[15];
            *(_BYTE *)(a5 + 376) = *((_BYTE *)a4 + 256);
            *(_OWORD *)(a5 + 360) = v239;
            v240 = a4[15];
            *(_BYTE *)(a5 + 196) = *((_BYTE *)a4 + 256);
            *(_OWORD *)(a5 + 180) = v240;
            v241 = *(__int128 *)((char *)a4 + 140);
            *(_BYTE *)(a5 + 156) = *((_BYTE *)a4 + 156);
            *(_OWORD *)(a5 + 140) = v241;
            v242 = *(__int128 *)((char *)a4 + 140);
            *(_BYTE *)(a5 + 176) = *((_BYTE *)a4 + 156);
            *(_OWORD *)(a5 + 160) = v242;
            v243 = *(__int128 *)((char *)a4 + 60);
            *(_BYTE *)(a5 + 76) = *((_BYTE *)a4 + 76);
            *(_OWORD *)(a5 + 60) = v243;
            v244 = *(__int128 *)((char *)a4 + 60);
            *(_BYTE *)(a5 + 16) = *((_BYTE *)a4 + 76);
            *(_OWORD *)a5 = v244;
            v245 = *(__int128 *)((char *)a4 + 300);
            *(_BYTE *)(a5 + 316) = *((_BYTE *)a4 + 316);
            *(_OWORD *)(a5 + 300) = v245;
            v246 = *(__int128 *)((char *)a4 + 300);
            *(_BYTE *)(a5 + 496) = *((_BYTE *)a4 + 316);
            *(_OWORD *)(a5 + 480) = v246;
            v247 = *(__int128 *)((char *)a4 + 120);
            *(_BYTE *)(a5 + 136) = *((_BYTE *)a4 + 136);
            *(_OWORD *)(a5 + 120) = v247;
            v226 = result[8];
            if (a3 == 1)
            {
              v227 = 2;
              goto LABEL_186;
            }
            if (v226 < 0)
              goto LABEL_190;
            v228 = 2;
            goto LABEL_189;
          }
        }
        v163 = 8;
        *(_BYTE *)(a5 + 463) = 0;
        *(_WORD *)(a5 + 461) = 0;
        v165 = -1;
        v162 = 1;
        v161 = -1;
        v164 = -1;
        goto LABEL_112;
      }
LABEL_69:
      *(_BYTE *)(a5 + 283) = 0;
      *(_WORD *)(a5 + 281) = 0;
      *(_BYTE *)(a5 + 280) = 1;
      *(_DWORD *)(a5 + 284) = -1;
      *(_QWORD *)(a5 + 288) = -1;
      *(_BYTE *)(a5 + 296) = 8;
      v117 = result[10];
      if ((v117 & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_70;
    case 3:
      v49 = result[13];
      if (a3 == 1)
      {
        v50 = 0;
        v51 = 0;
        *(_BYTE *)(a5 + 440) = 0;
        *(_QWORD *)(a5 + 444) = 0x8000000000000000;
        *(_DWORD *)(a5 + 452) = v49;
        *(_BYTE *)(a5 + 456) = 7;
        v52 = result[7];
        *(_BYTE *)(a5 + 200) = 0;
        *(_QWORD *)(a5 + 204) = 0x8000000000000000;
        *(_DWORD *)(a5 + 212) = v52;
        *(_BYTE *)(a5 + 216) = 1;
        v53 = result[8];
        *(_BYTE *)(a5 + 240) = 0;
        *(_QWORD *)(a5 + 244) = 0x8000000000000000;
        *(_DWORD *)(a5 + 252) = v53;
        *(_BYTE *)(a5 + 256) = 2;
        v54 = result[11];
        *(_BYTE *)(a5 + 380) = 0;
        *(_QWORD *)(a5 + 384) = 0x8000000000000000;
        *(_DWORD *)(a5 + 392) = v54;
        *(_BYTE *)(a5 + 396) = 5;
        v55 = result[6];
        *(_BYTE *)(a5 + 180) = 0;
        *(_QWORD *)(a5 + 184) = 0x8000000000000000;
        *(_DWORD *)(a5 + 192) = v55;
        *(_BYTE *)(a5 + 196) = 0;
        v56 = result[12];
        *(_BYTE *)(a5 + 420) = 0;
        *(_QWORD *)(a5 + 424) = 0x8000000000000000;
        *(_DWORD *)(a5 + 432) = v56;
        *(_BYTE *)(a5 + 436) = 6;
        v57 = result[10];
        v58 = 4;
        v59 = 0x80000000;
        goto LABEL_155;
      }
      HIDWORD(v122) = 0x80000000;
      if ((v49 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 443) = 0;
        *(_WORD *)(a5 + 441) = 0;
        *(_BYTE *)(a5 + 440) = 1;
        *(_DWORD *)(a5 + 444) = -1;
        *(_QWORD *)(a5 + 448) = -1;
        *(_BYTE *)(a5 + 456) = 8;
        v123 = result[7];
        if ((v123 & 0x80000000) == 0)
        {
LABEL_38:
          LODWORD(v122) = v123;
          *(_BYTE *)(a5 + 200) = 0;
          *(_DWORD *)(a5 + 204) = a3;
          *(_QWORD *)(a5 + 208) = v122;
          *(_BYTE *)(a5 + 216) = 1;
          v124 = result[8];
          if ((v124 & 0x80000000) == 0)
            goto LABEL_39;
          goto LABEL_76;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 440) = 0;
        *(_DWORD *)(a5 + 444) = a3;
        *(_QWORD *)(a5 + 448) = v49 | 0x8000000000000000;
        *(_BYTE *)(a5 + 456) = 7;
        v123 = result[7];
        if ((v123 & 0x80000000) == 0)
          goto LABEL_38;
      }
      *(_BYTE *)(a5 + 203) = 0;
      *(_WORD *)(a5 + 201) = 0;
      *(_BYTE *)(a5 + 200) = 1;
      *(_DWORD *)(a5 + 204) = -1;
      *(_QWORD *)(a5 + 208) = -1;
      *(_BYTE *)(a5 + 216) = 8;
      v124 = result[8];
      if ((v124 & 0x80000000) == 0)
      {
LABEL_39:
        *(_BYTE *)(a5 + 240) = 0;
        *(_DWORD *)(a5 + 244) = a3;
        *(_QWORD *)(a5 + 248) = v124 | 0x8000000000000000;
        *(_BYTE *)(a5 + 256) = 2;
        v125 = result[11];
        if ((v125 & 0x80000000) == 0)
        {
LABEL_40:
          v126 = 0;
          v127 = 5;
          v128 = 0x80000000;
          v129 = a3;
          goto LABEL_78;
        }
LABEL_77:
        v127 = 8;
        *(_BYTE *)(a5 + 383) = 0;
        *(_WORD *)(a5 + 381) = 0;
        v129 = -1;
        v126 = 1;
        v125 = -1;
        v128 = -1;
LABEL_78:
        *(_BYTE *)(a5 + 380) = v126;
        *(_DWORD *)(a5 + 384) = v129;
        *(_DWORD *)(a5 + 388) = v125;
        *(_DWORD *)(a5 + 392) = v128;
        *(_BYTE *)(a5 + 396) = v127;
        v166 = result[6];
        if ((v166 & 0x80000000) != 0)
        {
          *(_BYTE *)(a5 + 183) = 0;
          *(_WORD *)(a5 + 181) = 0;
          *(_BYTE *)(a5 + 180) = 1;
          *(_DWORD *)(a5 + 184) = -1;
          *(_QWORD *)(a5 + 188) = -1;
          *(_BYTE *)(a5 + 196) = 8;
          v167 = result[12];
          if ((v167 & 0x80000000) == 0)
            goto LABEL_80;
        }
        else
        {
          *(_BYTE *)(a5 + 180) = 0;
          *(_DWORD *)(a5 + 184) = a3;
          *(_QWORD *)(a5 + 188) = v166 | 0x8000000000000000;
          *(_BYTE *)(a5 + 196) = 0;
          v167 = result[12];
          if ((v167 & 0x80000000) == 0)
          {
LABEL_80:
            v168 = 0;
            v169 = 6;
            v170 = 0x80000000;
            v171 = a3;
LABEL_116:
            *(_BYTE *)(a5 + 420) = v168;
            *(_DWORD *)(a5 + 424) = v171;
            *(_DWORD *)(a5 + 428) = v167;
            *(_DWORD *)(a5 + 432) = v170;
            *(_BYTE *)(a5 + 436) = v169;
            v59 = result[10];
            if ((v59 & 0x80000000) != 0)
            {
              v58 = 8;
              *(_BYTE *)(a5 + 363) = 0;
              *(_WORD *)(a5 + 361) = 0;
              v51 = -1;
              v50 = 1;
              v59 = -1;
              v57 = -1;
            }
            else
            {
              v50 = 0;
              v58 = 4;
              v57 = 0x80000000;
              v51 = a3;
            }
LABEL_155:
            *(_BYTE *)(a5 + 360) = v50;
            *(_DWORD *)(a5 + 364) = v51;
            *(_DWORD *)(a5 + 368) = v59;
            *(_DWORD *)(a5 + 372) = v57;
            *(_BYTE *)(a5 + 376) = v58;
            v248 = a4[5];
            *(_BYTE *)(a5 + 96) = *((_BYTE *)a4 + 96);
            *(_OWORD *)(a5 + 80) = v248;
            v249 = a4[5];
            *(_BYTE *)(a5 + 36) = *((_BYTE *)a4 + 96);
            *(_OWORD *)(a5 + 20) = v249;
            v250 = a4[5];
            *(_BYTE *)(a5 + 16) = *((_BYTE *)a4 + 96);
            *(_OWORD *)a5 = v250;
            v251 = a4[5];
            *(_BYTE *)(a5 + 76) = *((_BYTE *)a4 + 96);
            *(_OWORD *)(a5 + 60) = v251;
            v252 = a4[20];
            *(_BYTE *)(a5 + 336) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 320) = v252;
            v253 = a4[20];
            *(_BYTE *)(a5 + 516) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 500) = v253;
            v254 = a4[20];
            *(_BYTE *)(a5 + 496) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 480) = v254;
            v255 = a4[20];
            *(_BYTE *)(a5 + 316) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 300) = v255;
            v256 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 296) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 280) = v256;
            v257 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 476) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 460) = v257;
            v258 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 416) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 400) = v258;
            v259 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 236) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 220) = v259;
            v260 = *(__int128 *)((char *)a4 + 140);
            *(_BYTE *)(a5 + 156) = *((_BYTE *)a4 + 156);
            *(_OWORD *)(a5 + 140) = v260;
            v261 = *(__int128 *)((char *)a4 + 140);
            *(_BYTE *)(a5 + 136) = *((_BYTE *)a4 + 156);
            *(_OWORD *)(a5 + 120) = v261;
            v262 = *(__int128 *)((char *)a4 + 100);
            *(_BYTE *)(a5 + 116) = *((_BYTE *)a4 + 116);
            *(_OWORD *)(a5 + 100) = v262;
            v263 = *(__int128 *)((char *)a4 + 100);
            *(_BYTE *)(a5 + 56) = *((_BYTE *)a4 + 116);
            *(_OWORD *)(a5 + 40) = v263;
            v264 = *(__int128 *)((char *)a4 + 340);
            *(_BYTE *)(a5 + 356) = *((_BYTE *)a4 + 356);
            *(_OWORD *)(a5 + 340) = v264;
            v265 = *(__int128 *)((char *)a4 + 340);
            *(_BYTE *)(a5 + 536) = *((_BYTE *)a4 + 356);
            *(_OWORD *)(a5 + 520) = v265;
            v266 = a4[10];
            *(_BYTE *)(a5 + 176) = *((_BYTE *)a4 + 176);
            *(_OWORD *)(a5 + 160) = v266;
            v226 = result[9];
            if (a3 == 1)
            {
              v227 = 3;
              goto LABEL_186;
            }
            if (v226 < 0)
              goto LABEL_190;
            v228 = 3;
            goto LABEL_189;
          }
        }
        v169 = 8;
        *(_BYTE *)(a5 + 423) = 0;
        *(_WORD *)(a5 + 421) = 0;
        v171 = -1;
        v168 = 1;
        v167 = -1;
        v170 = -1;
        goto LABEL_116;
      }
LABEL_76:
      *(_BYTE *)(a5 + 243) = 0;
      *(_WORD *)(a5 + 241) = 0;
      *(_BYTE *)(a5 + 240) = 1;
      *(_DWORD *)(a5 + 244) = -1;
      *(_QWORD *)(a5 + 248) = -1;
      *(_BYTE *)(a5 + 256) = 8;
      v125 = result[11];
      if ((v125 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_77;
    case 4:
      v60 = result[6];
      if (a3 == 1)
      {
        v61 = 0;
        v62 = 0;
        *(_BYTE *)(a5 + 80) = 0;
        *(_QWORD *)(a5 + 84) = 0x8000000000000000;
        *(_DWORD *)(a5 + 92) = v60;
        *(_BYTE *)(a5 + 96) = 0;
        v63 = result[12];
        *(_BYTE *)(a5 + 320) = 0;
        *(_QWORD *)(a5 + 324) = 0x8000000000000000;
        *(_DWORD *)(a5 + 332) = v63;
        *(_BYTE *)(a5 + 336) = 6;
        v64 = result[11];
        *(_BYTE *)(a5 + 280) = 0;
        *(_QWORD *)(a5 + 284) = 0x8000000000000000;
        *(_DWORD *)(a5 + 292) = v64;
        *(_BYTE *)(a5 + 296) = 5;
        v65 = result[8];
        *(_BYTE *)(a5 + 140) = 0;
        *(_QWORD *)(a5 + 144) = 0x8000000000000000;
        *(_DWORD *)(a5 + 152) = v65;
        *(_BYTE *)(a5 + 156) = 2;
        v66 = result[13];
        *(_BYTE *)(a5 + 340) = 0;
        *(_QWORD *)(a5 + 344) = 0x8000000000000000;
        *(_DWORD *)(a5 + 352) = v66;
        *(_BYTE *)(a5 + 356) = 7;
        v67 = result[7];
        *(_BYTE *)(a5 + 100) = 0;
        *(_QWORD *)(a5 + 104) = 0x8000000000000000;
        *(_DWORD *)(a5 + 112) = v67;
        *(_BYTE *)(a5 + 116) = 1;
        v68 = result[9];
        v69 = 3;
        v70 = 0x80000000;
        goto LABEL_161;
      }
      HIDWORD(v130) = 0x80000000;
      if ((v60 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 83) = 0;
        *(_WORD *)(a5 + 81) = 0;
        *(_BYTE *)(a5 + 80) = 1;
        *(_DWORD *)(a5 + 84) = -1;
        *(_QWORD *)(a5 + 88) = -1;
        *(_BYTE *)(a5 + 96) = 8;
        v131 = result[12];
        if ((v131 & 0x80000000) == 0)
          goto LABEL_43;
      }
      else
      {
        *(_BYTE *)(a5 + 80) = 0;
        *(_DWORD *)(a5 + 84) = a3;
        *(_QWORD *)(a5 + 88) = v60 | 0x8000000000000000;
        *(_BYTE *)(a5 + 96) = 0;
        v131 = result[12];
        if ((v131 & 0x80000000) == 0)
        {
LABEL_43:
          v132 = 0;
          LODWORD(v130) = v131;
          v133 = 6;
          v134 = a3;
          goto LABEL_83;
        }
      }
      *(_BYTE *)(a5 + 323) = 0;
      *(_WORD *)(a5 + 321) = 0;
      v130 = -1;
      v133 = 8;
      v134 = -1;
      v132 = 1;
LABEL_83:
      *(_BYTE *)(a5 + 320) = v132;
      *(_DWORD *)(a5 + 324) = v134;
      *(_QWORD *)(a5 + 328) = v130;
      *(_BYTE *)(a5 + 336) = v133;
      HIDWORD(v130) = 0x80000000;
      v172 = result[11];
      if ((v172 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 283) = 0;
        *(_WORD *)(a5 + 281) = 0;
        *(_BYTE *)(a5 + 280) = 1;
        *(_DWORD *)(a5 + 284) = -1;
        *(_QWORD *)(a5 + 288) = -1;
        *(_BYTE *)(a5 + 296) = 8;
        v173 = result[8];
        if ((v173 & 0x80000000) == 0)
        {
LABEL_85:
          LODWORD(v130) = v173;
          *(_BYTE *)(a5 + 140) = 0;
          *(_DWORD *)(a5 + 144) = a3;
          *(_QWORD *)(a5 + 148) = v130;
          *(_BYTE *)(a5 + 156) = 2;
          v174 = result[13];
          if ((v174 & 0x80000000) == 0)
          {
LABEL_86:
            v175 = 0;
            v176 = 7;
            v177 = 0x80000000;
            v178 = a3;
            goto LABEL_121;
          }
LABEL_120:
          v176 = 8;
          *(_BYTE *)(a5 + 343) = 0;
          *(_WORD *)(a5 + 341) = 0;
          v178 = -1;
          v175 = 1;
          v174 = -1;
          v177 = -1;
LABEL_121:
          *(_BYTE *)(a5 + 340) = v175;
          *(_DWORD *)(a5 + 344) = v178;
          *(_DWORD *)(a5 + 348) = v174;
          *(_DWORD *)(a5 + 352) = v177;
          *(_BYTE *)(a5 + 356) = v176;
          v203 = result[7];
          if ((v203 & 0x80000000) != 0)
          {
            *(_BYTE *)(a5 + 103) = 0;
            *(_WORD *)(a5 + 101) = 0;
            *(_BYTE *)(a5 + 100) = 1;
            *(_DWORD *)(a5 + 104) = -1;
            *(_QWORD *)(a5 + 108) = -1;
            *(_BYTE *)(a5 + 116) = 8;
            v70 = result[9];
            if ((v70 & 0x80000000) == 0)
              goto LABEL_123;
          }
          else
          {
            *(_BYTE *)(a5 + 100) = 0;
            *(_DWORD *)(a5 + 104) = a3;
            *(_QWORD *)(a5 + 108) = v203 | 0x8000000000000000;
            *(_BYTE *)(a5 + 116) = 1;
            v70 = result[9];
            if ((v70 & 0x80000000) == 0)
            {
LABEL_123:
              v61 = 0;
              v69 = 3;
              v68 = 0x80000000;
              v62 = a3;
LABEL_161:
              *(_BYTE *)(a5 + 160) = v61;
              *(_DWORD *)(a5 + 164) = v62;
              *(_DWORD *)(a5 + 168) = v70;
              *(_DWORD *)(a5 + 172) = v68;
              *(_BYTE *)(a5 + 176) = v69;
              v267 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 456) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 440) = v267;
              v268 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 516) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 500) = v268;
              v269 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 536) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 520) = v269;
              v270 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 476) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 460) = v270;
              v271 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 216) = *((_BYTE *)a4 + 216);
              *(_OWORD *)(a5 + 200) = v271;
              v272 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 36) = *((_BYTE *)a4 + 216);
              *(_OWORD *)(a5 + 20) = v272;
              v273 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 56) = *((_BYTE *)a4 + 216);
              *(_OWORD *)(a5 + 40) = v273;
              v274 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 236) = *((_BYTE *)a4 + 216);
              *(_OWORD *)(a5 + 220) = v274;
              v275 = a4[15];
              *(_BYTE *)(a5 + 256) = *((_BYTE *)a4 + 256);
              *(_OWORD *)(a5 + 240) = v275;
              v276 = a4[15];
              *(_BYTE *)(a5 + 76) = *((_BYTE *)a4 + 256);
              *(_OWORD *)(a5 + 60) = v276;
              v277 = a4[15];
              *(_BYTE *)(a5 + 136) = *((_BYTE *)a4 + 256);
              *(_OWORD *)(a5 + 120) = v277;
              v278 = a4[15];
              *(_BYTE *)(a5 + 316) = *((_BYTE *)a4 + 256);
              *(_OWORD *)(a5 + 300) = v278;
              v279 = *(__int128 *)((char *)a4 + 380);
              *(_BYTE *)(a5 + 396) = *((_BYTE *)a4 + 396);
              *(_OWORD *)(a5 + 380) = v279;
              v280 = *(__int128 *)((char *)a4 + 380);
              *(_BYTE *)(a5 + 416) = *((_BYTE *)a4 + 396);
              *(_OWORD *)(a5 + 400) = v280;
              v281 = *(__int128 *)((char *)a4 + 420);
              *(_BYTE *)(a5 + 436) = *((_BYTE *)a4 + 436);
              *(_OWORD *)(a5 + 420) = v281;
              v282 = *(__int128 *)((char *)a4 + 420);
              *(_BYTE *)(a5 + 496) = *((_BYTE *)a4 + 436);
              *(_OWORD *)(a5 + 480) = v282;
              v283 = *(__int128 *)((char *)a4 + 180);
              *(_BYTE *)(a5 + 196) = *((_BYTE *)a4 + 196);
              *(_OWORD *)(a5 + 180) = v283;
              v284 = *(__int128 *)((char *)a4 + 180);
              *(_BYTE *)(a5 + 16) = *((_BYTE *)a4 + 196);
              *(_OWORD *)a5 = v284;
              v285 = *(__int128 *)((char *)a4 + 360);
              *(_BYTE *)(a5 + 376) = *((_BYTE *)a4 + 376);
              *(_OWORD *)(a5 + 360) = v285;
              v226 = result[10];
              if (a3 == 1)
              {
                v227 = 4;
                goto LABEL_186;
              }
              if (v226 < 0)
                goto LABEL_190;
              v228 = 4;
              goto LABEL_189;
            }
          }
          v69 = 8;
          *(_BYTE *)(a5 + 163) = 0;
          *(_WORD *)(a5 + 161) = 0;
          v62 = -1;
          v61 = 1;
          v70 = -1;
          v68 = -1;
          goto LABEL_161;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 280) = 0;
        *(_DWORD *)(a5 + 284) = a3;
        *(_QWORD *)(a5 + 288) = v172 | 0x8000000000000000;
        *(_BYTE *)(a5 + 296) = 5;
        v173 = result[8];
        if ((v173 & 0x80000000) == 0)
          goto LABEL_85;
      }
      *(_BYTE *)(a5 + 143) = 0;
      *(_WORD *)(a5 + 141) = 0;
      *(_BYTE *)(a5 + 140) = 1;
      *(_DWORD *)(a5 + 144) = -1;
      *(_QWORD *)(a5 + 148) = -1;
      *(_BYTE *)(a5 + 156) = 8;
      v174 = result[13];
      if ((v174 & 0x80000000) == 0)
        goto LABEL_86;
      goto LABEL_120;
    case 5:
      v71 = result[7];
      if (a3 == 1)
      {
        v72 = 0;
        v73 = 0;
        *(_BYTE *)(a5 + 80) = 0;
        *(_QWORD *)(a5 + 84) = 0x8000000000000000;
        *(_DWORD *)(a5 + 92) = v71;
        *(_BYTE *)(a5 + 96) = 1;
        v74 = result[13];
        *(_BYTE *)(a5 + 320) = 0;
        *(_QWORD *)(a5 + 324) = 0x8000000000000000;
        *(_DWORD *)(a5 + 332) = v74;
        *(_BYTE *)(a5 + 336) = 7;
        v75 = result[10];
        *(_BYTE *)(a5 + 240) = 0;
        *(_QWORD *)(a5 + 244) = 0x8000000000000000;
        *(_DWORD *)(a5 + 252) = v75;
        *(_BYTE *)(a5 + 256) = 4;
        v76 = result[9];
        *(_BYTE *)(a5 + 140) = 0;
        *(_QWORD *)(a5 + 144) = 0x8000000000000000;
        *(_DWORD *)(a5 + 152) = v76;
        *(_BYTE *)(a5 + 156) = 3;
        v77 = result[12];
        *(_BYTE *)(a5 + 300) = 0;
        *(_QWORD *)(a5 + 304) = 0x8000000000000000;
        *(_DWORD *)(a5 + 312) = v77;
        *(_BYTE *)(a5 + 316) = 6;
        v78 = result[6];
        *(_BYTE *)(a5 + 60) = 0;
        *(_QWORD *)(a5 + 64) = 0x8000000000000000;
        *(_DWORD *)(a5 + 72) = v78;
        *(_BYTE *)(a5 + 76) = 0;
        v79 = result[8];
        v80 = 2;
        v81 = 0x80000000;
        goto LABEL_167;
      }
      HIDWORD(v135) = 0x80000000;
      if ((v71 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 83) = 0;
        *(_WORD *)(a5 + 81) = 0;
        *(_BYTE *)(a5 + 80) = 1;
        *(_DWORD *)(a5 + 84) = -1;
        *(_QWORD *)(a5 + 88) = -1;
        *(_BYTE *)(a5 + 96) = 8;
        v136 = result[13];
        if ((v136 & 0x80000000) == 0)
          goto LABEL_46;
      }
      else
      {
        *(_BYTE *)(a5 + 80) = 0;
        *(_DWORD *)(a5 + 84) = a3;
        *(_QWORD *)(a5 + 88) = v71 | 0x8000000000000000;
        *(_BYTE *)(a5 + 96) = 1;
        v136 = result[13];
        if ((v136 & 0x80000000) == 0)
        {
LABEL_46:
          v137 = 0;
          LODWORD(v135) = v136;
          v138 = 7;
          v139 = a3;
          goto LABEL_89;
        }
      }
      *(_BYTE *)(a5 + 323) = 0;
      *(_WORD *)(a5 + 321) = 0;
      v135 = -1;
      v138 = 8;
      v139 = -1;
      v137 = 1;
LABEL_89:
      *(_BYTE *)(a5 + 320) = v137;
      *(_DWORD *)(a5 + 324) = v139;
      *(_QWORD *)(a5 + 328) = v135;
      *(_BYTE *)(a5 + 336) = v138;
      HIDWORD(v135) = 0x80000000;
      v179 = result[10];
      if ((v179 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 243) = 0;
        *(_WORD *)(a5 + 241) = 0;
        *(_BYTE *)(a5 + 240) = 1;
        *(_DWORD *)(a5 + 244) = -1;
        *(_QWORD *)(a5 + 248) = -1;
        *(_BYTE *)(a5 + 256) = 8;
        v180 = result[9];
        if ((v180 & 0x80000000) == 0)
        {
LABEL_91:
          LODWORD(v135) = v180;
          *(_BYTE *)(a5 + 140) = 0;
          *(_DWORD *)(a5 + 144) = a3;
          *(_QWORD *)(a5 + 148) = v135;
          *(_BYTE *)(a5 + 156) = 3;
          v181 = result[12];
          if ((v181 & 0x80000000) == 0)
          {
LABEL_92:
            v182 = 0;
            v183 = 6;
            v184 = 0x80000000;
            v185 = a3;
            goto LABEL_127;
          }
LABEL_126:
          v183 = 8;
          *(_BYTE *)(a5 + 303) = 0;
          *(_WORD *)(a5 + 301) = 0;
          v185 = -1;
          v182 = 1;
          v181 = -1;
          v184 = -1;
LABEL_127:
          *(_BYTE *)(a5 + 300) = v182;
          *(_DWORD *)(a5 + 304) = v185;
          *(_DWORD *)(a5 + 308) = v181;
          *(_DWORD *)(a5 + 312) = v184;
          *(_BYTE *)(a5 + 316) = v183;
          v204 = result[6];
          if ((v204 & 0x80000000) != 0)
          {
            *(_BYTE *)(a5 + 63) = 0;
            *(_WORD *)(a5 + 61) = 0;
            *(_BYTE *)(a5 + 60) = 1;
            *(_DWORD *)(a5 + 64) = -1;
            *(_QWORD *)(a5 + 68) = -1;
            *(_BYTE *)(a5 + 76) = 8;
            v81 = result[8];
            if ((v81 & 0x80000000) == 0)
              goto LABEL_129;
          }
          else
          {
            *(_BYTE *)(a5 + 60) = 0;
            *(_DWORD *)(a5 + 64) = a3;
            *(_QWORD *)(a5 + 68) = v204 | 0x8000000000000000;
            *(_BYTE *)(a5 + 76) = 0;
            v81 = result[8];
            if ((v81 & 0x80000000) == 0)
            {
LABEL_129:
              v72 = 0;
              v80 = 2;
              v79 = 0x80000000;
              v73 = a3;
LABEL_167:
              *(_BYTE *)(a5 + 120) = v72;
              *(_DWORD *)(a5 + 124) = v73;
              *(_DWORD *)(a5 + 128) = v81;
              *(_DWORD *)(a5 + 132) = v79;
              *(_BYTE *)(a5 + 136) = v80;
              v286 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 456) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 440) = v286;
              v287 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 516) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 500) = v287;
              v288 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 496) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 480) = v288;
              v289 = *(__int128 *)((char *)a4 + 440);
              *(_BYTE *)(a5 + 436) = *((_BYTE *)a4 + 456);
              *(_OWORD *)(a5 + 420) = v289;
              v290 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 216) = *((_BYTE *)a4 + 216);
              *(_OWORD *)(a5 + 200) = v290;
              v291 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 36) = *((_BYTE *)a4 + 216);
              *(_OWORD *)(a5 + 20) = v291;
              v292 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 16) = *((_BYTE *)a4 + 216);
              *(_OWORD *)a5 = v292;
              v293 = *(__int128 *)((char *)a4 + 200);
              *(_BYTE *)(a5 + 196) = *((_BYTE *)a4 + 216);
              *(_OWORD *)(a5 + 180) = v293;
              v294 = *(__int128 *)((char *)a4 + 280);
              *(_BYTE *)(a5 + 296) = *((_BYTE *)a4 + 296);
              *(_OWORD *)(a5 + 280) = v294;
              v295 = *(__int128 *)((char *)a4 + 280);
              *(_BYTE *)(a5 + 116) = *((_BYTE *)a4 + 296);
              *(_OWORD *)(a5 + 100) = v295;
              v296 = *(__int128 *)((char *)a4 + 280);
              *(_BYTE *)(a5 + 176) = *((_BYTE *)a4 + 296);
              *(_OWORD *)(a5 + 160) = v296;
              v297 = *(__int128 *)((char *)a4 + 280);
              *(_BYTE *)(a5 + 356) = *((_BYTE *)a4 + 296);
              *(_OWORD *)(a5 + 340) = v297;
              v298 = *(__int128 *)((char *)a4 + 380);
              *(_BYTE *)(a5 + 396) = *((_BYTE *)a4 + 396);
              *(_OWORD *)(a5 + 380) = v298;
              v299 = *(__int128 *)((char *)a4 + 380);
              *(_BYTE *)(a5 + 376) = *((_BYTE *)a4 + 396);
              *(_OWORD *)(a5 + 360) = v299;
              v300 = *(__int128 *)((char *)a4 + 460);
              *(_BYTE *)(a5 + 476) = *((_BYTE *)a4 + 476);
              *(_OWORD *)(a5 + 460) = v300;
              v301 = *(__int128 *)((char *)a4 + 460);
              *(_BYTE *)(a5 + 536) = *((_BYTE *)a4 + 476);
              *(_OWORD *)(a5 + 520) = v301;
              v302 = *(__int128 *)((char *)a4 + 220);
              *(_BYTE *)(a5 + 236) = *((_BYTE *)a4 + 236);
              *(_OWORD *)(a5 + 220) = v302;
              v303 = *(__int128 *)((char *)a4 + 220);
              *(_BYTE *)(a5 + 56) = *((_BYTE *)a4 + 236);
              *(_OWORD *)(a5 + 40) = v303;
              v304 = a4[25];
              *(_BYTE *)(a5 + 416) = *((_BYTE *)a4 + 416);
              *(_OWORD *)(a5 + 400) = v304;
              v226 = result[11];
              if (a3 == 1)
              {
                v227 = 5;
                goto LABEL_186;
              }
              if (v226 < 0)
                goto LABEL_190;
              v228 = 5;
              goto LABEL_189;
            }
          }
          v80 = 8;
          *(_BYTE *)(a5 + 123) = 0;
          *(_WORD *)(a5 + 121) = 0;
          v73 = -1;
          v72 = 1;
          v81 = -1;
          v79 = -1;
          goto LABEL_167;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 240) = 0;
        *(_DWORD *)(a5 + 244) = a3;
        *(_QWORD *)(a5 + 248) = v179 | 0x8000000000000000;
        *(_BYTE *)(a5 + 256) = 4;
        v180 = result[9];
        if ((v180 & 0x80000000) == 0)
          goto LABEL_91;
      }
      *(_BYTE *)(a5 + 143) = 0;
      *(_WORD *)(a5 + 141) = 0;
      *(_BYTE *)(a5 + 140) = 1;
      *(_DWORD *)(a5 + 144) = -1;
      *(_QWORD *)(a5 + 148) = -1;
      *(_BYTE *)(a5 + 156) = 8;
      v181 = result[12];
      if ((v181 & 0x80000000) == 0)
        goto LABEL_92;
      goto LABEL_126;
    case 6:
      v82 = result[8];
      if (a3 == 1)
      {
        v83 = 0;
        v84 = 0;
        *(_BYTE *)(a5 + 80) = 0;
        *(_QWORD *)(a5 + 84) = 0x8000000000000000;
        *(_DWORD *)(a5 + 92) = v82;
        *(_BYTE *)(a5 + 96) = 2;
        v85 = result[10];
        *(_BYTE *)(a5 + 200) = 0;
        *(_QWORD *)(a5 + 204) = 0x8000000000000000;
        *(_DWORD *)(a5 + 212) = v85;
        *(_BYTE *)(a5 + 216) = 4;
        v86 = result[13];
        *(_BYTE *)(a5 + 280) = 0;
        *(_QWORD *)(a5 + 284) = 0x8000000000000000;
        *(_DWORD *)(a5 + 292) = v86;
        *(_BYTE *)(a5 + 296) = 7;
        v87 = result[6];
        *(_BYTE *)(a5 + 20) = 0;
        *(_QWORD *)(a5 + 24) = 0x8000000000000000;
        *(_DWORD *)(a5 + 32) = v87;
        *(_BYTE *)(a5 + 36) = 0;
        v88 = result[11];
        *(_BYTE *)(a5 + 220) = 0;
        *(_QWORD *)(a5 + 224) = 0x8000000000000000;
        *(_DWORD *)(a5 + 232) = v88;
        *(_BYTE *)(a5 + 236) = 5;
        v89 = result[9];
        *(_BYTE *)(a5 + 100) = 0;
        *(_QWORD *)(a5 + 104) = 0x8000000000000000;
        *(_DWORD *)(a5 + 112) = v89;
        *(_BYTE *)(a5 + 116) = 3;
        v90 = result[7];
        v91 = 1;
        v92 = 0x80000000;
        goto LABEL_174;
      }
      HIDWORD(v140) = 0x80000000;
      if ((v82 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 83) = 0;
        *(_WORD *)(a5 + 81) = 0;
        *(_BYTE *)(a5 + 80) = 1;
        *(_DWORD *)(a5 + 84) = -1;
        *(_QWORD *)(a5 + 88) = -1;
        *(_BYTE *)(a5 + 96) = 8;
        v141 = result[10];
        if ((v141 & 0x80000000) == 0)
          goto LABEL_49;
      }
      else
      {
        *(_BYTE *)(a5 + 80) = 0;
        *(_DWORD *)(a5 + 84) = a3;
        *(_QWORD *)(a5 + 88) = v82 | 0x8000000000000000;
        *(_BYTE *)(a5 + 96) = 2;
        v141 = result[10];
        if ((v141 & 0x80000000) == 0)
        {
LABEL_49:
          v142 = 0;
          LODWORD(v140) = v141;
          v143 = 4;
          v144 = a3;
          goto LABEL_95;
        }
      }
      *(_BYTE *)(a5 + 203) = 0;
      *(_WORD *)(a5 + 201) = 0;
      v140 = -1;
      v143 = 8;
      v144 = -1;
      v142 = 1;
LABEL_95:
      *(_BYTE *)(a5 + 200) = v142;
      *(_DWORD *)(a5 + 204) = v144;
      *(_QWORD *)(a5 + 208) = v140;
      *(_BYTE *)(a5 + 216) = v143;
      HIDWORD(v140) = 0x80000000;
      v186 = result[13];
      if ((v186 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 283) = 0;
        *(_WORD *)(a5 + 281) = 0;
        *(_BYTE *)(a5 + 280) = 1;
        *(_DWORD *)(a5 + 284) = -1;
        *(_QWORD *)(a5 + 288) = -1;
        *(_BYTE *)(a5 + 296) = 8;
        v187 = result[6];
        if ((v187 & 0x80000000) == 0)
          goto LABEL_97;
      }
      else
      {
        *(_BYTE *)(a5 + 280) = 0;
        *(_DWORD *)(a5 + 284) = a3;
        *(_QWORD *)(a5 + 288) = v186 | 0x8000000000000000;
        *(_BYTE *)(a5 + 296) = 7;
        v187 = result[6];
        if ((v187 & 0x80000000) == 0)
        {
LABEL_97:
          v188 = 0;
          v189 = 0;
          LODWORD(v140) = v187;
          v190 = a3;
          goto LABEL_132;
        }
      }
      *(_BYTE *)(a5 + 23) = 0;
      *(_WORD *)(a5 + 21) = 0;
      v140 = -1;
      v189 = 8;
      v190 = -1;
      v188 = 1;
LABEL_132:
      *(_BYTE *)(a5 + 20) = v188;
      *(_DWORD *)(a5 + 24) = v190;
      *(_QWORD *)(a5 + 28) = v140;
      *(_BYTE *)(a5 + 36) = v189;
      HIDWORD(v140) = 0x80000000;
      v205 = result[11];
      if ((v205 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 223) = 0;
        *(_WORD *)(a5 + 221) = 0;
        *(_BYTE *)(a5 + 220) = 1;
        *(_DWORD *)(a5 + 224) = -1;
        *(_QWORD *)(a5 + 228) = -1;
        *(_BYTE *)(a5 + 236) = 8;
        v206 = result[9];
        if ((v206 & 0x80000000) == 0)
        {
LABEL_134:
          LODWORD(v140) = v206;
          *(_BYTE *)(a5 + 100) = 0;
          *(_DWORD *)(a5 + 104) = a3;
          *(_QWORD *)(a5 + 108) = v140;
          *(_BYTE *)(a5 + 116) = 3;
          v92 = result[7];
          if ((v92 & 0x80000000) == 0)
          {
LABEL_135:
            v83 = 0;
            v91 = 1;
            v90 = 0x80000000;
            v84 = a3;
LABEL_174:
            *(_BYTE *)(a5 + 40) = v83;
            *(_DWORD *)(a5 + 44) = v84;
            *(_DWORD *)(a5 + 48) = v92;
            *(_DWORD *)(a5 + 52) = v90;
            *(_BYTE *)(a5 + 56) = v91;
            v305 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 456) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 440) = v305;
            v306 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 396) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 380) = v306;
            v307 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 416) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 400) = v307;
            v308 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 476) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 460) = v308;
            v309 = a4[20];
            *(_BYTE *)(a5 + 336) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 320) = v309;
            v310 = a4[20];
            *(_BYTE *)(a5 + 156) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 140) = v310;
            v311 = a4[20];
            *(_BYTE *)(a5 + 176) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 160) = v311;
            v312 = a4[20];
            *(_BYTE *)(a5 + 356) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 340) = v312;
            v313 = a4[15];
            *(_BYTE *)(a5 + 256) = *((_BYTE *)a4 + 256);
            *(_OWORD *)(a5 + 240) = v313;
            v314 = a4[15];
            *(_BYTE *)(a5 + 76) = *((_BYTE *)a4 + 256);
            *(_OWORD *)(a5 + 60) = v314;
            v315 = a4[15];
            *(_BYTE *)(a5 + 16) = *((_BYTE *)a4 + 256);
            *(_OWORD *)a5 = v315;
            v316 = a4[15];
            *(_BYTE *)(a5 + 196) = *((_BYTE *)a4 + 256);
            *(_OWORD *)(a5 + 180) = v316;
            v317 = *(__int128 *)((char *)a4 + 500);
            *(_BYTE *)(a5 + 516) = *((_BYTE *)a4 + 516);
            *(_OWORD *)(a5 + 500) = v317;
            v318 = *(__int128 *)((char *)a4 + 500);
            *(_BYTE *)(a5 + 536) = *((_BYTE *)a4 + 516);
            *(_OWORD *)(a5 + 520) = v318;
            v319 = *(__int128 *)((char *)a4 + 420);
            *(_BYTE *)(a5 + 436) = *((_BYTE *)a4 + 436);
            *(_OWORD *)(a5 + 420) = v319;
            v320 = *(__int128 *)((char *)a4 + 420);
            *(_BYTE *)(a5 + 376) = *((_BYTE *)a4 + 436);
            *(_OWORD *)(a5 + 360) = v320;
            v321 = *(__int128 *)((char *)a4 + 300);
            *(_BYTE *)(a5 + 316) = *((_BYTE *)a4 + 316);
            *(_OWORD *)(a5 + 300) = v321;
            v322 = *(__int128 *)((char *)a4 + 300);
            *(_BYTE *)(a5 + 136) = *((_BYTE *)a4 + 316);
            *(_OWORD *)(a5 + 120) = v322;
            v323 = a4[30];
            *(_BYTE *)(a5 + 496) = *((_BYTE *)a4 + 496);
            *(_OWORD *)(a5 + 480) = v323;
            v226 = result[12];
            if (a3 == 1)
            {
              v227 = 6;
              goto LABEL_186;
            }
            if (v226 < 0)
              goto LABEL_190;
            v228 = 6;
            goto LABEL_189;
          }
LABEL_173:
          v91 = 8;
          *(_BYTE *)(a5 + 43) = 0;
          *(_WORD *)(a5 + 41) = 0;
          v84 = -1;
          v83 = 1;
          v92 = -1;
          v90 = -1;
          goto LABEL_174;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 220) = 0;
        *(_DWORD *)(a5 + 224) = a3;
        *(_QWORD *)(a5 + 228) = v205 | 0x8000000000000000;
        *(_BYTE *)(a5 + 236) = 5;
        v206 = result[9];
        if ((v206 & 0x80000000) == 0)
          goto LABEL_134;
      }
      *(_BYTE *)(a5 + 103) = 0;
      *(_WORD *)(a5 + 101) = 0;
      *(_BYTE *)(a5 + 100) = 1;
      *(_DWORD *)(a5 + 104) = -1;
      *(_QWORD *)(a5 + 108) = -1;
      *(_BYTE *)(a5 + 116) = 8;
      v92 = result[7];
      if ((v92 & 0x80000000) == 0)
        goto LABEL_135;
      goto LABEL_173;
    default:
      v16 = result[9];
      if (a3 == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a5 + 80) = 0;
        *(_QWORD *)(a5 + 84) = 0x8000000000000000;
        *(_DWORD *)(a5 + 92) = v16;
        *(_BYTE *)(a5 + 96) = 3;
        v20 = result[11];
        *(_BYTE *)(a5 + 200) = 0;
        *(_QWORD *)(a5 + 204) = 0x8000000000000000;
        *(_DWORD *)(a5 + 212) = v20;
        *(_BYTE *)(a5 + 216) = 5;
        v21 = result[12];
        *(_BYTE *)(a5 + 240) = 0;
        *(_QWORD *)(a5 + 244) = 0x8000000000000000;
        *(_DWORD *)(a5 + 252) = v21;
        *(_BYTE *)(a5 + 256) = 6;
        v22 = result[7];
        *(_BYTE *)(a5 + 20) = 0;
        *(_QWORD *)(a5 + 24) = 0x8000000000000000;
        *(_DWORD *)(a5 + 32) = v22;
        *(_BYTE *)(a5 + 36) = 1;
        v23 = result[10];
        *(_BYTE *)(a5 + 180) = 0;
        *(_QWORD *)(a5 + 184) = 0x8000000000000000;
        *(_DWORD *)(a5 + 192) = v23;
        *(_BYTE *)(a5 + 196) = 4;
        v24 = result[8];
        *(_BYTE *)(a5 + 60) = 0;
        *(_QWORD *)(a5 + 64) = 0x8000000000000000;
        *(_DWORD *)(a5 + 72) = v24;
        *(_BYTE *)(a5 + 76) = 2;
        v25 = result[6];
        v26 = 0x80000000;
        goto LABEL_142;
      }
      HIDWORD(v101) = 0x80000000;
      if ((v16 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 83) = 0;
        *(_WORD *)(a5 + 81) = 0;
        *(_BYTE *)(a5 + 80) = 1;
        *(_DWORD *)(a5 + 84) = -1;
        *(_QWORD *)(a5 + 88) = -1;
        *(_BYTE *)(a5 + 96) = 8;
        v102 = result[11];
        if ((v102 & 0x80000000) == 0)
          goto LABEL_25;
      }
      else
      {
        *(_BYTE *)(a5 + 80) = 0;
        *(_DWORD *)(a5 + 84) = a3;
        *(_QWORD *)(a5 + 88) = v16 | 0x8000000000000000;
        *(_BYTE *)(a5 + 96) = 3;
        v102 = result[11];
        if ((v102 & 0x80000000) == 0)
        {
LABEL_25:
          v103 = 0;
          LODWORD(v101) = v102;
          v104 = 5;
          v105 = a3;
          goto LABEL_58;
        }
      }
      *(_BYTE *)(a5 + 203) = 0;
      *(_WORD *)(a5 + 201) = 0;
      v101 = -1;
      v104 = 8;
      v105 = -1;
      v103 = 1;
LABEL_58:
      *(_BYTE *)(a5 + 200) = v103;
      *(_DWORD *)(a5 + 204) = v105;
      *(_QWORD *)(a5 + 208) = v101;
      *(_BYTE *)(a5 + 216) = v104;
      HIDWORD(v101) = 0x80000000;
      v150 = result[12];
      if ((v150 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 243) = 0;
        *(_WORD *)(a5 + 241) = 0;
        *(_BYTE *)(a5 + 240) = 1;
        *(_DWORD *)(a5 + 244) = -1;
        *(_QWORD *)(a5 + 248) = -1;
        *(_BYTE *)(a5 + 256) = 8;
        v151 = result[7];
        if ((v151 & 0x80000000) == 0)
          goto LABEL_60;
      }
      else
      {
        *(_BYTE *)(a5 + 240) = 0;
        *(_DWORD *)(a5 + 244) = a3;
        *(_QWORD *)(a5 + 248) = v150 | 0x8000000000000000;
        *(_BYTE *)(a5 + 256) = 6;
        v151 = result[7];
        if ((v151 & 0x80000000) == 0)
        {
LABEL_60:
          v152 = 0;
          LODWORD(v101) = v151;
          v153 = 1;
          v154 = a3;
          goto LABEL_103;
        }
      }
      *(_BYTE *)(a5 + 23) = 0;
      *(_WORD *)(a5 + 21) = 0;
      v101 = -1;
      v153 = 8;
      v154 = -1;
      v152 = 1;
LABEL_103:
      *(_BYTE *)(a5 + 20) = v152;
      *(_DWORD *)(a5 + 24) = v154;
      *(_QWORD *)(a5 + 28) = v101;
      *(_BYTE *)(a5 + 36) = v153;
      HIDWORD(v101) = 0x80000000;
      v196 = result[10];
      if ((v196 & 0x80000000) != 0)
      {
        *(_BYTE *)(a5 + 183) = 0;
        *(_WORD *)(a5 + 181) = 0;
        *(_BYTE *)(a5 + 180) = 1;
        *(_DWORD *)(a5 + 184) = -1;
        *(_QWORD *)(a5 + 188) = -1;
        *(_BYTE *)(a5 + 196) = 8;
        v197 = result[8];
        if ((v197 & 0x80000000) == 0)
        {
LABEL_105:
          LODWORD(v101) = v197;
          *(_BYTE *)(a5 + 60) = 0;
          *(_DWORD *)(a5 + 64) = a3;
          *(_QWORD *)(a5 + 68) = v101;
          *(_BYTE *)(a5 + 76) = 2;
          v26 = result[6];
          if ((v26 & 0x80000000) == 0)
          {
LABEL_106:
            v17 = 0;
            v19 = 0;
            v25 = 0x80000000;
            v18 = a3;
LABEL_142:
            *(_BYTE *)a5 = v17;
            *(_DWORD *)(a5 + 4) = v18;
            *(_DWORD *)(a5 + 8) = v26;
            *(_DWORD *)(a5 + 12) = v25;
            *(_BYTE *)(a5 + 16) = v19;
            v207 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 456) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 440) = v207;
            v208 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 396) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 380) = v208;
            v209 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 376) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 360) = v209;
            v210 = *(__int128 *)((char *)a4 + 440);
            *(_BYTE *)(a5 + 436) = *((_BYTE *)a4 + 456);
            *(_OWORD *)(a5 + 420) = v210;
            v211 = a4[20];
            *(_BYTE *)(a5 + 336) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 320) = v211;
            v212 = a4[20];
            *(_BYTE *)(a5 + 156) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 140) = v212;
            v213 = a4[20];
            *(_BYTE *)(a5 + 136) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 120) = v213;
            v214 = a4[20];
            *(_BYTE *)(a5 + 316) = *((_BYTE *)a4 + 336);
            *(_OWORD *)(a5 + 300) = v214;
            v215 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 296) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 280) = v215;
            v216 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 116) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 100) = v216;
            v217 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 56) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 40) = v217;
            v218 = *(__int128 *)((char *)a4 + 280);
            *(_BYTE *)(a5 + 236) = *((_BYTE *)a4 + 296);
            *(_OWORD *)(a5 + 220) = v218;
            v219 = *(__int128 *)((char *)a4 + 500);
            *(_BYTE *)(a5 + 516) = *((_BYTE *)a4 + 516);
            *(_OWORD *)(a5 + 500) = v219;
            v220 = *(__int128 *)((char *)a4 + 500);
            *(_BYTE *)(a5 + 496) = *((_BYTE *)a4 + 516);
            *(_OWORD *)(a5 + 480) = v220;
            v221 = *(__int128 *)((char *)a4 + 460);
            *(_BYTE *)(a5 + 476) = *((_BYTE *)a4 + 476);
            *(_OWORD *)(a5 + 460) = v221;
            v222 = *(__int128 *)((char *)a4 + 460);
            *(_BYTE *)(a5 + 416) = *((_BYTE *)a4 + 476);
            *(_OWORD *)(a5 + 400) = v222;
            v223 = *(__int128 *)((char *)a4 + 340);
            *(_BYTE *)(a5 + 356) = *((_BYTE *)a4 + 356);
            *(_OWORD *)(a5 + 340) = v223;
            v224 = *(__int128 *)((char *)a4 + 340);
            *(_BYTE *)(a5 + 176) = *((_BYTE *)a4 + 356);
            *(_OWORD *)(a5 + 160) = v224;
            v225 = *(__int128 *)((char *)a4 + 520);
            *(_BYTE *)(a5 + 536) = *((_BYTE *)a4 + 536);
            *(_OWORD *)(a5 + 520) = v225;
            v226 = result[13];
            if (a3 == 1)
            {
              v227 = 7;
LABEL_186:
              *(_BYTE *)(a5 + 260) = 0;
              *(_DWORD *)(a5 + 264) = 0;
              *(_DWORD *)(a5 + 268) = 0x80000000;
              *(_DWORD *)(a5 + 272) = v226;
              *(_BYTE *)(a5 + 276) = v227;
              return result;
            }
            if (v226 < 0)
              goto LABEL_190;
            v228 = 7;
LABEL_189:
            *(_BYTE *)(a5 + 260) = 0;
            *(_DWORD *)(a5 + 264) = a3;
            *(_DWORD *)(a5 + 268) = v226;
            *(_DWORD *)(a5 + 272) = 0x80000000;
            *(_BYTE *)(a5 + 276) = v228;
            return result;
          }
LABEL_141:
          v19 = 8;
          *(_BYTE *)(a5 + 3) = 0;
          *(_WORD *)(a5 + 1) = 0;
          v18 = -1;
          v17 = 1;
          v26 = -1;
          v25 = -1;
          goto LABEL_142;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 180) = 0;
        *(_DWORD *)(a5 + 184) = a3;
        *(_QWORD *)(a5 + 188) = v196 | 0x8000000000000000;
        *(_BYTE *)(a5 + 196) = 4;
        v197 = result[8];
        if ((v197 & 0x80000000) == 0)
          goto LABEL_105;
      }
      *(_BYTE *)(a5 + 63) = 0;
      *(_WORD *)(a5 + 61) = 0;
      *(_BYTE *)(a5 + 60) = 1;
      *(_DWORD *)(a5 + 64) = -1;
      *(_QWORD *)(a5 + 68) = -1;
      *(_BYTE *)(a5 + 76) = 8;
      v26 = result[6];
      if ((v26 & 0x80000000) == 0)
        goto LABEL_106;
      goto LABEL_141;
  }
}

uint64_t sub_223E8E698(uint64_t result, int a2, int a3, _DWORD *a4, int a5, uint64_t a6)
{
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  BOOL v62;
  int v63;
  int v64;
  _DWORD *v65;
  BOOL v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  _DWORD *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  int *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  BOOL v91;
  int v92;
  int v93;
  _DWORD *v94;
  BOOL v95;
  BOOL v96;
  int v97;
  int v98;
  int v99;
  _DWORD *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  int *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  BOOL v120;
  int v121;
  int v122;
  _DWORD *v123;
  BOOL v124;
  BOOL v125;
  int v126;
  int v127;
  int v128;
  _DWORD *v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  BOOL v149;
  int v150;
  int v151;
  _DWORD *v152;
  BOOL v153;
  BOOL v154;
  int v155;
  int v156;
  int v157;
  _DWORD *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  int *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  BOOL v178;
  int v179;
  int v180;
  _DWORD *v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  _DWORD *v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  int *v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  BOOL v207;
  int v208;
  int v209;
  _DWORD *v210;
  BOOL v211;
  BOOL v212;
  int v213;
  int v214;
  int v215;
  _DWORD *v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  unint64_t v227;
  uint64_t v228;
  int *v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  BOOL v236;
  int v237;
  int v238;
  _DWORD *v239;
  BOOL v240;
  BOOL v241;
  int v242;
  int v243;
  int v244;
  _DWORD *v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  unint64_t v256;
  uint64_t v257;
  int *v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  BOOL v265;
  int v266;
  int v267;
  _DWORD *v268;
  BOOL v269;
  BOOL v270;
  int v271;
  int v272;
  int v273;
  _DWORD *v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  _DWORD *v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  char v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unint64_t v297;
  uint64_t v298;
  int *v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  _DWORD *v308;
  int v309;
  int v310;
  int v311;
  _DWORD *v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  char v321;
  uint64_t v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  unint64_t v328;
  uint64_t v329;
  int *v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int *v336;
  int v337;
  int v338;
  int v339;
  _DWORD *v340;
  int v341;
  int v342;
  int v343;
  _DWORD *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  char v353;
  uint64_t v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  unint64_t v360;
  uint64_t v361;
  int *v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int *v368;
  int v369;
  int v370;
  int v371;
  _DWORD *v372;
  int v373;
  int v374;
  int v375;
  _DWORD *v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  char v385;
  uint64_t v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  unint64_t v392;
  uint64_t v393;
  int *v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int *v400;
  int v401;
  int v402;
  int v403;
  _DWORD *v404;
  int v405;
  int v406;
  int v407;
  _DWORD *v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  char v417;
  uint64_t v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  unint64_t v424;
  uint64_t v425;
  int *v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int *v432;
  int v433;
  int v434;
  int v435;
  _DWORD *v436;
  int v437;
  int v438;
  int v439;
  _DWORD *v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  char v449;
  uint64_t v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  unint64_t v456;
  uint64_t v457;
  int *v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int *v464;
  int v465;
  int v466;
  int v467;
  _DWORD *v468;
  int v469;
  int v470;
  int v471;
  _DWORD *v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  char v481;
  uint64_t v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  unint64_t v488;
  uint64_t v489;
  int *v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int *v496;
  int v497;
  int v498;
  int v499;
  _DWORD *v500;
  int v501;
  int v502;
  _DWORD *v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  char v512;
  uint64_t v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  unint64_t v519;
  uint64_t v520;
  int *v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int *v527;
  int v528;
  int v529;
  int v530;
  _DWORD *v531;
  int v532;
  int v533;
  int v534;
  _DWORD *v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  char v541;
  uint64_t v542;
  int v543;
  int v544;
  int v545;
  int v546;
  unint64_t v547;
  uint64_t v548;
  int *v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  BOOL v556;
  int v557;
  int v558;
  _DWORD *v559;
  BOOL v560;
  BOOL v561;
  int v562;
  int v563;
  int v564;
  _DWORD *v565;
  int v566;
  int v567;
  int v568;
  _DWORD *v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  char v575;
  uint64_t v576;
  int v577;
  int v578;
  int v579;
  int v580;
  unint64_t v581;
  uint64_t v582;
  int *v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  BOOL v590;
  int v591;
  int v592;
  _DWORD *v593;
  BOOL v594;
  BOOL v595;
  int *v596;
  int v597;
  int v598;
  int v599;
  _DWORD *v600;
  int v601;
  int v602;
  int v603;
  _DWORD *v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  char v610;
  uint64_t v611;
  int v612;
  int v613;
  int v614;
  int v615;
  unint64_t v616;
  uint64_t v617;
  int *v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  BOOL v625;
  int v626;
  int v627;
  _DWORD *v628;
  BOOL v629;
  BOOL v630;
  int *v631;
  int v632;
  int v633;
  int v634;
  _DWORD *v635;
  int v636;
  int v637;
  int v638;
  _DWORD *v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  char v645;
  uint64_t v646;
  int v647;
  int v648;
  int v649;
  int v650;
  unint64_t v651;
  uint64_t v652;
  int *v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  BOOL v660;
  int v661;
  int v662;
  _DWORD *v663;
  BOOL v664;
  BOOL v665;
  int *v666;
  int v667;
  int v668;
  int v669;
  _DWORD *v670;
  int v671;
  int v672;
  int v673;
  _DWORD *v674;
  int v675;
  int v676;
  int v677;
  int v678;
  int v679;
  char v680;
  uint64_t v681;
  int v682;
  int v683;
  int v684;
  int v685;
  unint64_t v686;
  uint64_t v687;
  int *v688;
  int v689;
  int v690;
  int v691;
  int v692;
  int v693;
  BOOL v695;
  int v696;
  int v697;
  _DWORD *v698;
  BOOL v699;
  BOOL v700;
  int *v701;
  int v702;
  int v703;
  int v704;
  _DWORD *v705;
  int v706;
  int v707;
  _DWORD *v708;
  int v709;
  int v710;
  int v711;
  int v712;
  int v713;
  char v714;
  uint64_t v715;
  int v716;
  int v717;
  int v718;
  int v719;
  unint64_t v720;
  uint64_t v721;
  int *v722;
  int v723;
  int v724;
  int v725;
  int v726;
  int v727;
  BOOL v729;
  int v730;
  int v731;
  _DWORD *v732;
  BOOL v733;
  BOOL v734;
  int v735;
  int v736;
  int v737;
  _DWORD *v738;
  int v739;
  int v740;
  int v741;
  _DWORD *v742;
  int v743;
  int v744;
  int v745;
  int v746;
  int v747;
  char v748;
  uint64_t v749;
  int v750;
  int v751;
  int v752;
  int v753;
  unint64_t v754;
  uint64_t v755;
  int *v756;
  int v757;
  int v758;
  int v759;
  int v760;
  int v761;
  BOOL v763;
  int v764;
  int v765;
  _DWORD *v766;
  BOOL v767;
  BOOL v768;
  int *v769;
  int v770;
  int v771;
  int v772;
  _DWORD *v773;
  int v774;
  int v775;
  int v776;
  _DWORD *v777;
  int v778;
  int v779;
  int v780;
  int v781;
  int v782;
  char v783;
  uint64_t v784;
  int v785;
  int v786;
  int v787;
  int v788;
  unint64_t v789;
  uint64_t v790;
  int *v791;
  int v792;
  int v793;
  int v794;
  int v795;
  int v796;
  BOOL v798;
  int v799;
  int v800;
  _DWORD *v801;
  BOOL v802;
  BOOL v803;
  int *v804;
  int v805;
  int v806;
  int v807;
  _DWORD *v808;
  int v809;
  int v810;
  int v811;
  _DWORD *v812;
  int v813;
  int v814;
  int v815;
  int v816;
  int v817;
  char v818;
  uint64_t v819;
  int v820;
  int v821;
  int v822;
  int v823;
  unint64_t v824;
  uint64_t v825;
  int *v826;
  int v827;
  int v828;
  int v829;
  int v830;
  int v831;
  BOOL v833;
  int v834;
  int v835;
  _DWORD *v836;
  BOOL v837;
  BOOL v838;
  int v839;
  int v840;
  int v841;
  _DWORD *v842;
  int v843;
  int v844;
  int v845;
  _DWORD *v846;
  int v847;
  int v848;
  int v849;
  int v850;
  int v851;
  char v852;
  uint64_t v853;
  int v854;
  int v855;
  int v856;
  int v857;
  unint64_t v858;
  uint64_t v859;
  int *v860;
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  BOOL v867;
  int v868;
  int v869;
  _DWORD *v870;
  BOOL v871;
  BOOL v872;
  int *v873;
  int v874;
  int v875;
  int v876;
  _DWORD *v877;
  int v878;
  int v879;
  int v880;
  _DWORD *v881;
  int v882;
  int v883;
  int v884;
  int v885;
  int v886;
  char v887;
  uint64_t v888;
  int v889;
  int v890;
  int v891;
  int v892;
  unint64_t v893;
  uint64_t v894;
  int *v895;
  int v896;
  int v897;
  int v898;
  int v899;
  int v900;
  BOOL v902;
  int v903;
  int v904;
  _DWORD *v905;
  BOOL v906;
  BOOL v907;
  int *v908;
  int v909;
  int v910;
  int v911;
  _DWORD *v912;
  int v913;
  int v914;
  int v915;
  _DWORD *v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  char v922;
  uint64_t v923;
  int v924;
  int v925;
  int v926;
  int v927;
  unint64_t v928;
  uint64_t v929;
  int *v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  BOOL v937;
  int v938;
  int v939;
  _DWORD *v940;
  BOOL v941;
  BOOL v942;
  int v943;
  int v944;
  int v945;
  _DWORD *v946;
  int v947;
  int v948;
  int v949;
  _DWORD *v950;
  int v951;
  int v952;
  int v953;
  int v954;
  int v955;
  char v956;
  uint64_t v957;
  int v958;
  int v959;
  int v960;
  int v961;
  unint64_t v962;
  uint64_t v963;
  int *v964;
  int v965;
  int v966;
  int v967;
  int v968;
  int v969;
  BOOL v971;
  int v972;
  int v973;
  _DWORD *v974;
  BOOL v975;
  BOOL v976;
  int *v977;
  int v978;
  int v979;
  int v980;
  _DWORD *v981;
  int v982;
  int v983;
  _DWORD *v984;
  int v985;
  int v986;
  int v987;
  int v988;
  int v989;
  char v990;
  uint64_t v991;
  int v992;
  int v993;
  int v994;
  int v995;
  unint64_t v996;
  uint64_t v997;
  int *v998;
  int v999;
  int v1000;
  int v1001;
  int v1002;
  int v1003;
  BOOL v1005;
  int v1006;
  int v1007;
  _DWORD *v1008;
  BOOL v1009;
  BOOL v1010;
  int v1011;
  int v1012;
  int v1013;
  _DWORD *v1014;
  int v1015;
  int v1016;
  int v1017;
  _DWORD *v1018;
  int v1019;
  int v1020;
  int v1021;
  int v1022;
  int v1023;
  char v1024;
  uint64_t v1025;
  int v1026;
  int v1027;
  int v1028;
  int v1029;
  unint64_t v1030;
  uint64_t v1031;
  int *v1032;
  int v1033;
  int v1034;
  int v1035;
  int v1036;
  int v1037;
  BOOL v1039;
  int v1040;
  int v1041;
  _DWORD *v1042;
  BOOL v1043;
  BOOL v1044;
  int *v1045;
  int v1046;
  int v1047;
  int v1048;
  _DWORD *v1049;
  int v1050;
  int v1051;
  int v1052;
  _DWORD *v1053;
  int v1054;
  int v1055;
  int v1056;
  int v1057;
  int v1058;
  char v1059;
  uint64_t v1060;
  int v1061;
  int v1062;
  int v1063;
  int v1064;
  unint64_t v1065;
  uint64_t v1066;
  int *v1067;
  int v1068;
  int v1069;
  int v1070;
  int v1071;
  int v1072;
  BOOL v1074;
  int v1075;
  int v1076;
  _DWORD *v1077;
  BOOL v1078;
  BOOL v1079;
  int v1080;
  int v1081;
  int v1082;
  _DWORD *v1083;
  int v1084;
  int v1085;
  int v1086;
  _DWORD *v1087;
  int v1088;
  int v1089;
  int v1090;
  char v1091;
  int v1092;
  char v1093;
  uint64_t v1094;
  int v1095;
  int v1096;
  int v1097;
  int v1098;
  int v1099;
  unint64_t v1100;
  uint64_t v1101;
  int *v1102;
  int v1103;
  int v1104;
  int v1105;
  int v1106;
  int v1107;
  BOOL v1109;
  int v1110;
  int v1111;
  _DWORD *v1112;
  BOOL v1113;
  BOOL v1114;
  int v1115;
  int v1116;
  int v1117;
  uint64_t v1118;
  int v1119;
  _DWORD *v1120;
  int v1121;
  int v1122;
  int v1123;
  char v1124;
  int v1125;
  char v1126;
  uint64_t v1127;
  int v1128;
  int v1129;
  int v1130;
  int v1131;
  int v1132;
  unint64_t v1133;
  uint64_t v1134;
  int *v1135;
  int v1136;
  int v1137;
  int v1138;
  int v1139;
  int v1140;
  BOOL v1142;
  int v1143;
  int v1144;
  _DWORD *v1145;
  BOOL v1146;
  BOOL v1147;
  int v1148;
  int v1149;
  int v1150;
  uint64_t v1151;
  int v1152;
  _DWORD *v1153;
  int v1154;
  int v1155;
  int v1156;
  char v1157;
  int v1158;
  char v1159;
  uint64_t v1160;
  int v1161;
  int v1162;
  int v1163;
  int v1164;
  int v1165;
  unint64_t v1166;
  uint64_t v1167;
  int *v1168;
  int v1169;
  int v1170;
  int v1171;
  int v1172;
  int v1173;
  BOOL v1175;
  int v1176;
  int v1177;
  _DWORD *v1178;
  BOOL v1179;
  BOOL v1180;
  int v1181;
  int v1182;
  int v1183;
  uint64_t v1184;
  int v1185;
  _DWORD *v1186;
  int v1187;
  int v1188;
  int v1189;
  char v1190;
  int v1191;
  char v1192;
  uint64_t v1193;
  int v1194;
  int v1195;
  int v1196;
  int v1197;
  int v1198;
  unint64_t v1199;
  uint64_t v1200;
  int *v1201;
  int v1202;
  int v1203;
  int v1204;
  int v1205;
  int v1206;
  BOOL v1208;
  int v1209;
  int v1210;
  _DWORD *v1211;
  BOOL v1212;
  BOOL v1213;
  int v1214;
  int v1215;
  int v1216;
  uint64_t v1217;
  int v1218;
  _DWORD *v1219;
  int v1220;
  int v1221;
  int v1222;
  char v1223;
  int v1224;
  char v1225;
  uint64_t v1226;
  int v1227;
  int v1228;
  int v1229;
  int v1230;
  int v1231;
  unint64_t v1232;
  uint64_t v1233;
  int *v1234;
  int v1235;
  int v1236;
  int v1237;
  int v1238;
  int v1239;
  BOOL v1241;
  int v1242;
  int v1243;
  _DWORD *v1244;
  BOOL v1245;
  BOOL v1246;
  int v1247;
  int v1248;
  int v1249;
  uint64_t v1250;
  int v1251;
  _DWORD *v1252;
  int v1253;
  int v1254;
  int v1255;
  char v1256;
  int v1257;
  char v1258;
  uint64_t v1259;
  int v1260;
  int v1261;
  int v1262;
  int v1263;
  int v1264;
  unint64_t v1265;
  uint64_t v1266;
  int *v1267;
  int v1268;
  int v1269;
  int v1270;
  int v1271;
  int v1272;
  BOOL v1274;
  int v1275;
  int v1276;
  _DWORD *v1277;
  BOOL v1278;
  BOOL v1279;
  int v1280;
  int v1281;
  int v1282;
  uint64_t v1283;
  int v1284;
  _DWORD *v1285;
  int v1286;
  int v1287;
  int v1288;
  char v1289;
  int v1290;
  char v1291;
  uint64_t v1292;
  int v1293;
  int v1294;
  int v1295;
  int v1296;
  int v1297;
  unint64_t v1298;
  uint64_t v1299;
  int *v1300;
  int v1301;
  int v1302;
  int v1303;
  int v1304;
  int v1305;
  BOOL v1307;
  int v1308;
  int v1309;
  _DWORD *v1310;
  BOOL v1311;
  BOOL v1312;
  int v1313;
  int v1314;
  int v1315;
  uint64_t v1316;
  int v1317;
  _DWORD *v1318;
  int v1319;
  int v1320;
  int v1321;
  char v1322;
  int v1323;
  char v1324;
  uint64_t v1325;
  int v1326;
  int v1327;
  int v1328;
  int v1329;
  int v1330;
  unint64_t v1331;
  uint64_t v1332;
  int *v1333;
  int v1334;
  int v1335;
  int v1336;
  int v1337;
  int v1338;
  BOOL v1340;
  int v1341;
  int v1342;
  _DWORD *v1343;
  BOOL v1344;
  BOOL v1345;
  int v1346;
  int v1347;
  int v1348;
  uint64_t v1349;
  int v1350;
  uint64_t v1351;
  int v1352;
  char v1353;
  int v1354;
  char v1355;
  uint64_t v1356;
  int v1357;
  int v1358;
  int v1359;
  int v1360;
  int v1361;
  unint64_t v1362;
  uint64_t v1363;
  int *v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  BOOL v1371;
  int v1372;
  int v1373;
  _DWORD *v1374;
  BOOL v1375;
  BOOL v1376;
  int v1377;
  int v1378;
  int v1379;
  uint64_t v1380;
  int v1381;
  uint64_t v1382;
  int v1383;
  char v1384;
  int v1385;
  char v1386;
  uint64_t v1387;
  int v1388;
  int v1389;
  int v1390;
  int v1391;
  int v1392;
  unint64_t v1393;
  uint64_t v1394;
  int *v1395;
  int v1396;
  int v1397;
  int v1398;
  int v1399;
  int v1400;
  BOOL v1402;
  int v1403;
  int v1404;
  _DWORD *v1405;
  BOOL v1406;
  BOOL v1407;
  int v1408;
  int v1409;
  int v1410;
  uint64_t v1411;
  int v1412;
  uint64_t v1413;
  int v1414;
  char v1415;
  int v1416;
  char v1417;
  uint64_t v1418;
  int v1419;
  int v1420;
  int v1421;
  int v1422;
  int v1423;
  unint64_t v1424;
  uint64_t v1425;
  int *v1426;
  int v1427;
  int v1428;
  int v1429;
  int v1430;
  int v1431;
  BOOL v1433;
  int v1434;
  int v1435;
  _DWORD *v1436;
  BOOL v1437;
  BOOL v1438;
  int v1439;
  int v1440;
  int v1441;
  uint64_t v1442;
  int v1443;
  uint64_t v1444;
  int v1445;
  char v1446;
  int v1447;
  char v1448;
  uint64_t v1449;
  int v1450;
  int v1451;
  int v1452;
  int v1453;
  int v1454;
  unint64_t v1455;
  uint64_t v1456;
  int *v1457;
  int v1458;
  int v1459;
  int v1460;
  int v1461;
  int v1462;
  BOOL v1464;
  int v1465;
  int v1466;
  _DWORD *v1467;
  BOOL v1468;
  BOOL v1469;
  int v1470;
  int v1471;
  int v1472;
  uint64_t v1473;
  int v1474;
  uint64_t v1475;
  int v1476;
  char v1477;
  int v1478;
  char v1479;
  uint64_t v1480;
  int v1481;
  int v1482;
  int v1483;
  int v1484;
  int v1485;
  unint64_t v1486;
  uint64_t v1487;
  int *v1488;
  int v1489;
  int v1490;
  int v1491;
  int v1492;
  int v1493;
  BOOL v1495;
  int v1496;
  int v1497;
  _DWORD *v1498;
  BOOL v1499;
  BOOL v1500;
  int v1501;
  int v1502;
  int v1503;
  uint64_t v1504;
  int v1505;
  uint64_t v1506;
  int v1507;
  char v1508;
  int v1509;
  char v1510;
  uint64_t v1511;
  int v1512;
  int v1513;
  int v1514;
  int v1515;
  int v1516;
  unint64_t v1517;
  uint64_t v1518;
  int *v1519;
  int v1520;
  int v1521;
  int v1522;
  int v1523;
  int v1524;
  BOOL v1526;
  int v1527;
  int v1528;
  _DWORD *v1529;
  BOOL v1530;
  BOOL v1531;
  int v1532;
  int v1533;
  int v1534;
  uint64_t v1535;
  int v1536;
  uint64_t v1537;
  int v1538;
  char v1539;
  int v1540;
  char v1541;
  uint64_t v1542;
  int v1543;
  int v1544;
  int v1545;
  int v1546;
  int v1547;
  unint64_t v1548;
  uint64_t v1549;
  int *v1550;
  int v1551;
  int v1552;
  int v1553;
  int v1554;
  int v1555;
  BOOL v1557;
  int v1558;
  int v1559;
  _DWORD *v1560;
  BOOL v1561;
  BOOL v1562;
  int v1563;
  int v1564;
  int v1565;
  uint64_t v1566;
  int v1567;
  uint64_t v1568;
  int v1569;
  char v1570;
  int v1571;
  char v1572;
  uint64_t v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  unint64_t v1579;
  uint64_t v1580;
  int *v1581;
  int v1582;
  int v1583;
  int v1584;
  int v1585;
  int v1586;
  BOOL v1588;
  int v1589;
  int v1590;
  _DWORD *v1591;
  BOOL v1592;
  BOOL v1593;
  int v1594;
  int v1595;
  int v1596;
  uint64_t v1597;
  int v1598;
  uint64_t v1599;
  int v1600;
  char v1601;
  int v1602;
  char v1603;
  uint64_t v1604;
  int v1605;
  int v1606;
  int v1607;
  int v1608;
  unint64_t v1609;
  uint64_t v1610;
  int *v1611;
  int v1612;
  int v1613;
  int v1614;
  int v1615;
  int v1616;
  BOOL v1618;
  int v1619;
  int v1620;
  _DWORD *v1621;
  BOOL v1622;
  BOOL v1623;
  int v1624;
  int v1625;
  int v1626;
  uint64_t v1627;
  int v1628;
  uint64_t v1629;
  int v1630;
  char v1631;
  int v1632;
  char v1633;
  uint64_t v1634;
  int v1635;
  int v1636;
  int v1637;
  int v1638;
  unint64_t v1639;
  uint64_t v1640;
  int *v1641;
  int v1642;
  int v1643;
  int v1644;
  int v1645;
  int v1646;
  BOOL v1648;
  int v1649;
  int v1650;
  _DWORD *v1651;
  BOOL v1652;
  BOOL v1653;
  int v1654;
  int v1655;
  int v1656;
  uint64_t v1657;
  int v1658;
  uint64_t v1659;
  int v1660;
  char v1661;
  int v1662;
  char v1663;
  uint64_t v1664;
  int v1665;
  int v1666;
  int v1667;
  int v1668;
  unint64_t v1669;
  uint64_t v1670;
  int *v1671;
  int v1672;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  BOOL v1678;
  int v1679;
  int v1680;
  _DWORD *v1681;
  BOOL v1682;
  BOOL v1683;
  int v1684;
  int v1685;
  int v1686;
  uint64_t v1687;
  int v1688;
  uint64_t v1689;
  int v1690;
  char v1691;
  int v1692;
  char v1693;
  uint64_t v1694;
  int v1695;
  int v1696;
  int v1697;
  int v1698;
  unint64_t v1699;
  uint64_t v1700;
  int *v1701;
  int v1702;
  int v1703;
  int v1704;
  int v1705;
  int v1706;
  BOOL v1708;
  int v1709;
  int v1710;
  _DWORD *v1711;
  BOOL v1712;
  BOOL v1713;
  int v1714;
  int v1715;
  int v1716;
  uint64_t v1717;
  int v1718;
  uint64_t v1719;
  int v1720;
  char v1721;
  int v1722;
  char v1723;
  uint64_t v1724;
  int v1725;
  int v1726;
  int v1727;
  int v1728;
  unint64_t v1729;
  uint64_t v1730;
  int *v1731;
  int v1732;
  int v1733;
  int v1734;
  int v1735;
  int v1736;
  BOOL v1738;
  int v1739;
  int v1740;
  _DWORD *v1741;
  BOOL v1742;
  BOOL v1743;
  int v1744;
  int v1745;
  int v1746;
  uint64_t v1747;
  int v1748;
  uint64_t v1749;
  int v1750;
  char v1751;
  int v1752;
  char v1753;
  uint64_t v1754;
  int v1755;
  int v1756;
  int v1757;
  int v1758;
  unint64_t v1759;
  uint64_t v1760;
  int *v1761;
  int v1762;
  int v1763;
  int v1764;
  int v1765;
  int v1766;
  BOOL v1768;
  int v1769;
  int v1770;
  _DWORD *v1771;
  BOOL v1772;
  BOOL v1773;
  int v1774;
  int v1775;
  int v1776;
  uint64_t v1777;
  int v1778;
  uint64_t v1779;
  int v1780;
  char v1781;
  int v1782;
  char v1783;
  uint64_t v1784;
  int v1785;
  int v1786;
  int v1787;
  int v1788;
  unint64_t v1789;
  uint64_t v1790;
  int *v1791;
  int v1792;
  int v1793;
  int v1794;
  int v1795;
  int v1796;
  BOOL v1798;
  int v1799;
  int v1800;
  _DWORD *v1801;
  BOOL v1802;
  BOOL v1803;
  int v1804;
  int v1805;
  int v1806;
  uint64_t v1807;
  int v1808;
  uint64_t v1809;
  int v1810;
  char v1811;
  int v1812;
  char v1813;
  uint64_t v1814;
  int v1815;
  int v1816;
  int v1817;
  int v1818;
  unint64_t v1819;
  uint64_t v1820;
  int *v1821;
  int v1822;
  int v1823;
  int v1824;
  int v1825;
  int v1826;
  BOOL v1828;
  int v1829;
  int v1830;
  _DWORD *v1831;
  BOOL v1832;
  BOOL v1833;
  int v1834;
  int v1835;
  int v1836;
  uint64_t v1837;
  int v1838;
  uint64_t v1839;
  int v1840;
  char v1841;
  int v1842;
  int v1843;
  int v1844;
  int v1845;
  int v1846;
  uint64_t v1847;
  unint64_t v1848;
  uint64_t v1849;
  int *v1850;
  int v1851;
  int v1852;
  int v1853;
  int v1854;
  int v1855;
  int v1858;
  int v1859;
  _DWORD *v1860;
  BOOL v1861;
  int v1863;
  uint64_t v1864;
  int v1865;
  char v1866;
  int v1867;
  int v1868;
  int v1869;
  int v1870;
  int v1871;
  uint64_t v1872;
  unint64_t v1873;
  uint64_t v1874;
  int *v1875;
  int v1876;
  int v1877;
  int v1878;
  int v1879;
  int v1880;
  BOOL v1882;
  int v1883;
  int v1884;
  _DWORD *v1885;
  BOOL v1886;
  BOOL v1887;
  int v1888;
  uint64_t v1889;
  int v1890;
  char v1891;
  int v1892;
  int v1893;
  int v1894;
  int v1895;
  int v1896;
  uint64_t v1897;
  unint64_t v1898;
  uint64_t v1899;
  int *v1900;
  int v1901;
  int v1902;
  int v1903;
  int v1904;
  int v1905;
  BOOL v1907;
  int v1908;
  int v1909;
  _DWORD *v1910;
  BOOL v1911;
  BOOL v1912;
  int v1913;
  uint64_t v1914;
  int v1915;
  char v1916;
  int v1917;
  int v1918;
  int v1919;
  int v1920;
  int v1921;
  uint64_t v1922;
  unint64_t v1923;
  uint64_t v1924;
  int *v1925;
  int v1926;
  int v1927;
  int v1928;
  int v1929;
  int v1930;
  BOOL v1932;
  int v1933;
  int v1934;
  _DWORD *v1935;
  BOOL v1936;
  BOOL v1937;
  int v1938;
  uint64_t v1939;
  int v1940;
  char v1941;
  int v1942;
  int v1943;
  int v1944;
  int v1945;
  int v1946;
  uint64_t v1947;
  unint64_t v1948;
  uint64_t v1949;
  int *v1950;
  int v1951;
  int v1952;
  int v1953;
  int v1954;
  int v1955;
  BOOL v1957;
  int v1958;
  int v1959;
  _DWORD *v1960;
  BOOL v1961;
  BOOL v1962;
  int v1963;
  uint64_t v1964;
  int v1965;
  char v1966;
  int v1967;
  int v1968;
  int v1969;
  int v1970;
  int v1971;
  uint64_t v1972;
  unint64_t v1973;
  uint64_t v1974;
  int *v1975;
  int v1976;
  int v1977;
  int v1978;
  int v1979;
  int v1980;
  BOOL v1982;
  int v1983;
  int v1984;
  _DWORD *v1985;
  BOOL v1986;
  BOOL v1987;
  int v1988;
  uint64_t v1989;
  int v1990;
  char v1991;
  int v1992;
  int v1993;
  int v1994;
  int v1995;
  int v1996;
  uint64_t v1997;
  unint64_t v1998;
  uint64_t v1999;
  int *v2000;
  int v2001;
  int v2002;
  int v2003;
  int v2004;
  int v2005;
  BOOL v2007;
  int v2008;
  int v2009;
  _DWORD *v2010;
  BOOL v2011;
  BOOL v2012;
  int v2013;
  uint64_t v2014;
  int v2015;
  char v2016;
  int v2017;
  int v2018;
  int v2019;
  int v2020;
  int v2021;
  uint64_t v2022;
  unint64_t v2023;
  uint64_t v2024;
  int *v2025;
  int v2026;
  int v2027;
  int v2028;
  int v2029;
  int v2030;
  BOOL v2032;
  int v2033;
  int v2034;
  _DWORD *v2035;
  BOOL v2036;
  BOOL v2037;
  int v2038;
  int v2039;
  int v2040;
  char v2041;
  int v2042;
  int v2043;
  int v2044;
  char v2045;
  int v2046;
  int v2047;
  int v2048;
  char v2049;
  int v2050;
  int v2051;
  int v2052;
  char v2053;
  int v2054;
  int v2055;
  int v2056;
  char v2057;
  int v2058;
  int v2059;
  int v2060;
  char v2061;
  int v2062;
  int v2063;
  int v2064;
  char v2065;
  int v2066;
  int v2067;
  int v2068;
  char v2069;
  int v2070;
  char v2071;
  int v2072;
  int v2073;
  int v2074;
  int v2075;
  int v2076;
  int v2077;
  int v2078;
  int v2079;
  int v2080;
  int v2081;
  int v2082;
  int v2083;
  int v2084;
  int v2085;
  int v2086;
  int v2087;
  int v2088;
  int v2089;
  _DWORD *v2091;
  uint64_t v2092;
  int v2093;

  v7 = result;
  v8 = (int *)(a6 + 284);
  v2093 = a5;
  v2091 = a4;
  v2092 = result;
  switch(a2)
  {
    case 0:
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v9) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v10 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_4:
        v11 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 320) = 1;
        *(_DWORD *)(a6 + 324) = -1;
        *(_QWORD *)(a6 + 328) = -1;
        *(_BYTE *)(a6 + 336) = 8;
        *(_BYTE *)(a6 + 280) = 1;
        *(_DWORD *)(a6 + 284) = -1;
        *(_QWORD *)(a6 + 288) = -1;
        *(_BYTE *)(a6 + 296) = 8;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        *(_DWORD *)(a6 + 512) = -1;
        *(_BYTE *)(a6 + 516) = 8;
        *(_BYTE *)(a6 + 340) = 1;
        *(_QWORD *)(a6 + 344) = -1;
        *(_DWORD *)(a6 + 352) = -1;
        *(_BYTE *)(a6 + 356) = 8;
        *(_BYTE *)(a6 + 460) = 1;
        *(_QWORD *)(a6 + 464) = -1;
        *(_DWORD *)(a6 + 472) = -1;
        LODWORD(v12) = -1;
        v13 = -1;
        *(_BYTE *)(a6 + 476) = 8;
        goto LABEL_207;
      }
      v9 = *(_DWORD *)(a6 + 444);
      if (v9)
      {
        v49 = *(_DWORD *)(result + 136);
        v50 = a4[1];
        v51 = *a4 + (unsigned __int16)v49;
        v52 = a4[2];
        v12 = *(unsigned int *)(a6 + 448);
        v53 = v12 & 0xFFFFFFFFCFFFFFFFLL;
        v54 = *(_QWORD *)(result + 184);
        v55 = (int *)(v54 + 4488 * (v12 & 0xFFFFFFFFCFFFFFFFLL));
        v57 = *v55;
        v56 = v55[1];
        v58 = v55[2];
        v59 = v55[3];
        v60 = v51 - *v55;
        v62 = v51 < *v55 || v50 < v56 || v52 < v58;
        if (v62
          || ((v65 = v55 + 4, v63 = v55[4], v64 = v65[1], v51 < v59) ? (v66 = v50 < v63) : (v66 = 0),
              v66 ? (v67 = v52 < v64) : (v67 = 0),
              !v67))
        {
          v2072 = v56;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v49 = *(_DWORD *)(v2092 + 136);
          v54 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v56 = v2072;
        }
        v68 = (v59 - v57) >> 1;
        if (v68 != v49)
        {
          v69 = v52 - v58;
          v70 = v50 - v56;
          while (1)
          {
            result = (4 * ((v69 & v68) != 0)) | (8 * ((v70 & v68) != 0));
            LODWORD(v12) = *(_DWORD *)(v54
                                     + 4488 * (v12 & 0xCFFFFFFF)
                                     + (result | (16 * ((v60 & v68) != 0)))
                                     + 24);
            if ((v12 & 0x80000000) != 0)
              break;
            v60 -= v60 & v68;
            v70 -= v70 & v68;
            v69 -= v69 & v68;
            v68 >>= 1;
            if (v68 == v49)
            {
              v53 = v12 & 0xCFFFFFFF;
              goto LABEL_44;
            }
          }
          LOBYTE(v9) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v10 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_4;
        }
LABEL_44:
        LOBYTE(v9) = 0;
        v10 = 0;
        v71 = (_DWORD *)(v54 + 4488 * v53);
        v72 = v71[10];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v12;
        *(_DWORD *)(a6 + 452) = v72;
        *(_BYTE *)(a6 + 456) = 4;
        v73 = v71[8];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v12;
        *(_DWORD *)(a6 + 332) = v73;
        *(_BYTE *)(a6 + 336) = 2;
        v74 = v71[7];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v12;
        *(_DWORD *)(a6 + 292) = v74;
        *(_BYTE *)(a6 + 296) = 1;
        v75 = v71[12];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v12;
        *(_DWORD *)(a6 + 512) = v75;
        *(_BYTE *)(a6 + 516) = 6;
        v76 = v71[9];
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = v12;
        *(_DWORD *)(a6 + 352) = v76;
        *(_BYTE *)(a6 + 356) = 3;
        v77 = v71[11];
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = v12;
        *(_DWORD *)(a6 + 472) = v77;
        *(_BYTE *)(a6 + 476) = 5;
        v13 = v71[13];
        v11 = 7;
      }
      else
      {
        v10 = 0;
        v281 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v282 = v281[10];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v282;
        *(_BYTE *)(a6 + 456) = 4;
        v283 = v281[8];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v283;
        *(_BYTE *)(a6 + 336) = 2;
        v284 = v281[7];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v284;
        *(_BYTE *)(a6 + 296) = 1;
        v285 = v281[12];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v285;
        *(_BYTE *)(a6 + 516) = 6;
        v286 = v281[9];
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = a5;
        *(_DWORD *)(a6 + 352) = v286;
        *(_BYTE *)(a6 + 356) = 3;
        v287 = v281[11];
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = a5;
        *(_DWORD *)(a6 + 472) = v287;
        *(_BYTE *)(a6 + 476) = 5;
        v13 = v281[13];
        v11 = 7;
        LODWORD(v12) = a5;
      }
LABEL_207:
      *(_BYTE *)(a6 + 520) = v9;
      *(_DWORD *)(a6 + 524) = v10;
      *(_DWORD *)(a6 + 528) = v12;
      *(_DWORD *)(a6 + 532) = v13;
      *(_BYTE *)(a6 + 536) = v11;
      if (*(_BYTE *)(a6 + 80))
        goto LABEL_208;
      v288 = *(_DWORD *)(a6 + 84);
      if (v288)
      {
        v293 = *(_DWORD *)(v7 + 136);
        v294 = a4[1];
        v295 = *a4 - (unsigned __int16)v293;
        v296 = a4[2];
        v291 = *(unsigned int *)(a6 + 88);
        v297 = v291 & 0xFFFFFFFFCFFFFFFFLL;
        v298 = *(_QWORD *)(v7 + 184);
        v299 = (int *)(v298 + 4488 * (v291 & 0xFFFFFFFFCFFFFFFFLL));
        v300 = *v299;
        v301 = v299[1];
        v302 = v299[2];
        v303 = v299[3];
        v304 = v295 - *v299;
        if (v295 < *v299 || v294 < v301 || v296 < v302 || v295 >= v303 || v294 >= v299[4] || v296 >= v299[5])
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v293 = *(_DWORD *)(v2092 + 136);
          v298 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v305 = (v303 - v300) >> 1;
        if (v305 == v293)
        {
LABEL_223:
          LOBYTE(v288) = 0;
          v289 = 0;
          v308 = (_DWORD *)(v298 + 4488 * v297);
          v309 = v308[10];
          *(_BYTE *)(a6 + 80) = 0;
          *(_DWORD *)(a6 + 84) = 0;
          *(_DWORD *)(a6 + 88) = v291;
          *(_DWORD *)(a6 + 92) = v309;
          *(_BYTE *)(a6 + 96) = 4;
          v310 = v308[12];
          *(_BYTE *)(a6 + 140) = 0;
          *(_DWORD *)(a6 + 144) = 0;
          *(_DWORD *)(a6 + 148) = v291;
          *(_DWORD *)(a6 + 152) = v310;
          *(_BYTE *)(a6 + 156) = 6;
          v311 = v308[13];
          *(_BYTE *)(a6 + 160) = 0;
          *(_DWORD *)(a6 + 164) = 0;
          *(_DWORD *)(a6 + 168) = v291;
          *(_DWORD *)(a6 + 172) = v311;
          *(_BYTE *)(a6 + 176) = 7;
          v292 = v308[11];
          v290 = 5;
        }
        else
        {
          v306 = v296 - v302;
          v307 = v294 - v301;
          while (1)
          {
            result = (4 * ((v306 & v305) != 0)) | (8 * ((v307 & v305) != 0));
            LODWORD(v291) = *(_DWORD *)(v298
                                      + 4488 * (v291 & 0xCFFFFFFF)
                                      + (result | (16 * ((v304 & v305) != 0)))
                                      + 24);
            if ((v291 & 0x80000000) != 0)
              break;
            v304 -= v304 & v305;
            v307 -= v307 & v305;
            v306 -= v306 & v305;
            v305 >>= 1;
            if (v305 == v293)
            {
              v297 = v291 & 0xCFFFFFFF;
              goto LABEL_223;
            }
          }
LABEL_208:
          LOBYTE(v288) = 1;
          *(_BYTE *)(a6 + 80) = 1;
          *(_QWORD *)(a6 + 84) = -1;
          v289 = -1;
          *(_DWORD *)(a6 + 92) = -1;
          v290 = 8;
          *(_BYTE *)(a6 + 96) = 8;
          *(_BYTE *)(a6 + 140) = 1;
          *(_QWORD *)(a6 + 144) = -1;
          *(_DWORD *)(a6 + 152) = -1;
          *(_BYTE *)(a6 + 156) = 8;
          *(_BYTE *)(a6 + 160) = 1;
          *(_QWORD *)(a6 + 164) = -1;
          *(_DWORD *)(a6 + 172) = -1;
          LODWORD(v291) = -1;
          v292 = -1;
          *(_BYTE *)(a6 + 176) = 8;
        }
      }
      else
      {
        v289 = 0;
        v535 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v536 = v535[10];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v536;
        *(_BYTE *)(a6 + 96) = 4;
        v537 = v535[12];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v537;
        *(_BYTE *)(a6 + 156) = 6;
        v538 = v535[13];
        *(_BYTE *)(a6 + 160) = 0;
        *(_DWORD *)(a6 + 164) = 0;
        *(_DWORD *)(a6 + 168) = a5;
        *(_DWORD *)(a6 + 172) = v538;
        *(_BYTE *)(a6 + 176) = 7;
        v292 = v535[11];
        v290 = 5;
        LODWORD(v291) = a5;
      }
      *(_BYTE *)(a6 + 100) = v288;
      *(_DWORD *)(a6 + 104) = v289;
      *(_DWORD *)(a6 + 108) = v291;
      *(_DWORD *)(a6 + 112) = v292;
      *(_BYTE *)(a6 + 116) = v290;
      if (*(_BYTE *)(a6 + 200))
        goto LABEL_356;
      v539 = *(_DWORD *)(a6 + 204);
      if (v539)
      {
        v544 = *(_DWORD *)(v7 + 136);
        v545 = a4[1] - (unsigned __int16)v544;
        v546 = a4[2];
        v542 = *(unsigned int *)(a6 + 208);
        v547 = v542 & 0xFFFFFFFFCFFFFFFFLL;
        v548 = *(_QWORD *)(v7 + 184);
        v549 = (int *)(v548 + 4488 * (v542 & 0xFFFFFFFFCFFFFFFFLL));
        v551 = *v549;
        v550 = v549[1];
        v552 = v549[2];
        v553 = v549[3];
        v554 = *a4 - *v549;
        v556 = *a4 < *v549 || v545 < v550 || v546 < v552;
        if (v556
          || ((v559 = v549 + 4, v557 = v549[4], v558 = v559[1], *a4 < v553) ? (v560 = v545 < v557) : (v560 = 0),
              v560 ? (v561 = v546 < v558) : (v561 = 0),
              !v561))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v544 = *(_DWORD *)(v2092 + 136);
          v548 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v562 = (v553 - v551) >> 1;
        if (v562 == v544)
        {
LABEL_379:
          LOBYTE(v539) = 0;
          v540 = 0;
          v565 = (_DWORD *)(v548 + 4488 * v547);
          v566 = v565[8];
          *(_BYTE *)(a6 + 200) = 0;
          *(_DWORD *)(a6 + 204) = 0;
          *(_DWORD *)(a6 + 208) = v542;
          *(_DWORD *)(a6 + 212) = v566;
          *(_BYTE *)(a6 + 216) = 2;
          v567 = v565[12];
          *(_BYTE *)(a6 + 380) = 0;
          *(_DWORD *)(a6 + 384) = 0;
          *(_DWORD *)(a6 + 388) = v542;
          *(_DWORD *)(a6 + 392) = v567;
          *(_BYTE *)(a6 + 396) = 6;
          v568 = v565[13];
          *(_BYTE *)(a6 + 400) = 0;
          *(_DWORD *)(a6 + 404) = 0;
          *(_DWORD *)(a6 + 408) = v542;
          *(_DWORD *)(a6 + 412) = v568;
          *(_BYTE *)(a6 + 416) = 7;
          v543 = v565[9];
          v541 = 3;
        }
        else
        {
          v563 = v546 - v552;
          v564 = v545 - v550;
          while (1)
          {
            result = (4 * ((v563 & v562) != 0)) | (8 * ((v564 & v562) != 0));
            LODWORD(v542) = *(_DWORD *)(v548
                                      + 4488 * (v542 & 0xCFFFFFFF)
                                      + (result | (16 * ((v554 & v562) != 0)))
                                      + 24);
            if ((v542 & 0x80000000) != 0)
              break;
            v554 -= v554 & v562;
            v564 -= v564 & v562;
            v563 -= v563 & v562;
            v562 >>= 1;
            if (v562 == v544)
            {
              v547 = v542 & 0xCFFFFFFF;
              goto LABEL_379;
            }
          }
LABEL_356:
          LOBYTE(v539) = 1;
          *(_BYTE *)(a6 + 200) = 1;
          *(_QWORD *)(a6 + 204) = -1;
          v540 = -1;
          *(_DWORD *)(a6 + 212) = -1;
          v541 = 8;
          *(_BYTE *)(a6 + 216) = 8;
          *(_BYTE *)(a6 + 380) = 1;
          *(_QWORD *)(a6 + 384) = -1;
          *(_DWORD *)(a6 + 392) = -1;
          *(_BYTE *)(a6 + 396) = 8;
          *(_BYTE *)(a6 + 400) = 1;
          *(_DWORD *)(a6 + 404) = -1;
          *(_QWORD *)(a6 + 408) = -1;
          LODWORD(v542) = -1;
          v543 = -1;
          *(_BYTE *)(a6 + 416) = 8;
        }
      }
      else
      {
        v540 = 0;
        v812 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v813 = v812[8];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v813;
        *(_BYTE *)(a6 + 216) = 2;
        v814 = v812[12];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v814;
        *(_BYTE *)(a6 + 396) = 6;
        v815 = v812[13];
        *(_BYTE *)(a6 + 400) = 0;
        *(_DWORD *)(a6 + 404) = 0;
        *(_DWORD *)(a6 + 408) = a5;
        *(_DWORD *)(a6 + 412) = v815;
        *(_BYTE *)(a6 + 416) = 7;
        v543 = v812[9];
        v541 = 3;
        LODWORD(v542) = a5;
      }
      *(_BYTE *)(a6 + 220) = v539;
      *(_DWORD *)(a6 + 224) = v540;
      *(_DWORD *)(a6 + 228) = v542;
      *(_DWORD *)(a6 + 232) = v543;
      *(_BYTE *)(a6 + 236) = v541;
      if (*(_BYTE *)(a6 + 240))
        goto LABEL_568;
      v816 = *(_DWORD *)(a6 + 244);
      if (v816)
      {
        v821 = *(_DWORD *)(v7 + 136);
        v822 = a4[1];
        v823 = a4[2] - (unsigned __int16)v821;
        v819 = *(unsigned int *)(a6 + 248);
        v824 = v819 & 0xFFFFFFFFCFFFFFFFLL;
        v825 = *(_QWORD *)(v7 + 184);
        v826 = (int *)(v825 + 4488 * (v819 & 0xFFFFFFFFCFFFFFFFLL));
        v828 = *v826;
        v827 = v826[1];
        v829 = v826[2];
        v830 = v826[3];
        v831 = *a4 - *v826;
        v833 = *a4 < *v826 || v822 < v827 || v823 < v829;
        if (v833
          || ((v836 = v826 + 4, v834 = v826[4], v835 = v836[1], *a4 < v830) ? (v837 = v822 < v834) : (v837 = 0),
              v837 ? (v838 = v823 < v835) : (v838 = 0),
              !v838))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v821 = *(_DWORD *)(v2092 + 136);
          v825 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v839 = (v830 - v828) >> 1;
        if (v839 == v821)
        {
LABEL_591:
          LOBYTE(v816) = 0;
          v817 = 0;
          v842 = (_DWORD *)(v825 + 4488 * v824);
          v843 = v842[7];
          *(_BYTE *)(a6 + 240) = 0;
          *(_DWORD *)(a6 + 244) = 0;
          *(_DWORD *)(a6 + 248) = v819;
          *(_DWORD *)(a6 + 252) = v843;
          *(_BYTE *)(a6 + 256) = 1;
          v844 = v842[11];
          *(_BYTE *)(a6 + 420) = 0;
          *(_DWORD *)(a6 + 424) = 0;
          *(_DWORD *)(a6 + 428) = v819;
          *(_DWORD *)(a6 + 432) = v844;
          *(_BYTE *)(a6 + 436) = 5;
          v845 = v842[13];
          *(_BYTE *)(a6 + 480) = 0;
          *(_DWORD *)(a6 + 484) = 0;
          *(_DWORD *)(a6 + 488) = v819;
          *(_DWORD *)(a6 + 492) = v845;
          *(_BYTE *)(a6 + 496) = 7;
          v820 = v842[9];
          v818 = 3;
        }
        else
        {
          v840 = v823 - v829;
          v841 = v822 - v827;
          while (1)
          {
            result = (4 * ((v840 & v839) != 0)) | (8 * ((v841 & v839) != 0));
            LODWORD(v819) = *(_DWORD *)(v825
                                      + 4488 * (v819 & 0xCFFFFFFF)
                                      + (result | (16 * ((v831 & v839) != 0)))
                                      + 24);
            if ((v819 & 0x80000000) != 0)
              break;
            v831 -= v831 & v839;
            v841 -= v841 & v839;
            v840 -= v840 & v839;
            v839 >>= 1;
            if (v839 == v821)
            {
              v824 = v819 & 0xCFFFFFFF;
              goto LABEL_591;
            }
          }
LABEL_568:
          LOBYTE(v816) = 1;
          *(_BYTE *)(a6 + 240) = 1;
          *(_QWORD *)(a6 + 244) = -1;
          v817 = -1;
          *(_DWORD *)(a6 + 252) = -1;
          v818 = 8;
          *(_BYTE *)(a6 + 256) = 8;
          *(_BYTE *)(a6 + 420) = 1;
          *(_QWORD *)(a6 + 424) = -1;
          *(_DWORD *)(a6 + 432) = -1;
          *(_BYTE *)(a6 + 436) = 8;
          *(_BYTE *)(a6 + 480) = 1;
          *(_DWORD *)(a6 + 484) = -1;
          *(_QWORD *)(a6 + 488) = -1;
          LODWORD(v819) = -1;
          v820 = -1;
          *(_BYTE *)(a6 + 496) = 8;
        }
      }
      else
      {
        v817 = 0;
        v1087 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1088 = v1087[7];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v1088;
        *(_BYTE *)(a6 + 256) = 1;
        v1089 = v1087[11];
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = a5;
        *(_DWORD *)(a6 + 432) = v1089;
        *(_BYTE *)(a6 + 436) = 5;
        v1090 = v1087[13];
        *(_BYTE *)(a6 + 480) = 0;
        *(_DWORD *)(a6 + 484) = 0;
        *(_DWORD *)(a6 + 488) = a5;
        *(_DWORD *)(a6 + 492) = v1090;
        *(_BYTE *)(a6 + 496) = 7;
        v820 = v1087[9];
        v818 = 3;
        LODWORD(v819) = a5;
      }
      *(_BYTE *)(a6 + 300) = v816;
      *(_DWORD *)(a6 + 304) = v817;
      *(_DWORD *)(a6 + 308) = v819;
      *(_DWORD *)(a6 + 312) = v820;
      *(_BYTE *)(a6 + 316) = v818;
      if (*(_BYTE *)(a6 + 20))
        goto LABEL_780;
      if (*(_DWORD *)(a6 + 24))
      {
        v1096 = *(_DWORD *)(v7 + 136);
        v1097 = *a4 - (unsigned __int16)v1096;
        v1098 = a4[1] - (unsigned __int16)v1096;
        v1099 = a4[2];
        v1094 = *(unsigned int *)(a6 + 28);
        v1100 = v1094 & 0xFFFFFFFFCFFFFFFFLL;
        v1101 = *(_QWORD *)(v7 + 184);
        v1102 = (int *)(v1101 + 4488 * (v1094 & 0xFFFFFFFFCFFFFFFFLL));
        v1104 = *v1102;
        v1103 = v1102[1];
        v1105 = v1102[2];
        v1106 = v1102[3];
        v1107 = v1097 - *v1102;
        v1109 = v1097 < *v1102 || v1098 < v1103 || v1099 < v1105;
        if (v1109
          || ((v1112 = v1102 + 4, v1110 = v1102[4], v1111 = v1112[1], v1097 < v1106)
            ? (v1113 = v1098 < v1110)
            : (v1113 = 0),
              v1113 ? (v1114 = v1099 < v1111) : (v1114 = 0),
              !v1114))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1096 = *(_DWORD *)(v2092 + 136);
          v1101 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1115 = (v1106 - v1104) >> 1;
        if (v1115 == v1096)
        {
LABEL_803:
          v1091 = 0;
          v1092 = 0;
          v1118 = v1101 + 4488 * v1100;
          v1119 = *(_DWORD *)(v1118 + 48);
          *(_BYTE *)(a6 + 20) = 0;
          *(_DWORD *)(a6 + 24) = 0;
          *(_DWORD *)(a6 + 28) = v1094;
          *(_DWORD *)(a6 + 32) = v1119;
          *(_BYTE *)(a6 + 36) = 6;
          v1095 = *(_DWORD *)(v1118 + 52);
          v1093 = 7;
        }
        else
        {
          v1116 = v1099 - v1105;
          v1117 = v1098 - v1103;
          while (1)
          {
            result = (4 * ((v1116 & v1115) != 0)) | (8 * ((v1117 & v1115) != 0));
            LODWORD(v1094) = *(_DWORD *)(v1101
                                       + 4488 * (v1094 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1107 & v1115) != 0)))
                                       + 24);
            if ((v1094 & 0x80000000) != 0)
              break;
            v1107 -= v1107 & v1115;
            v1117 -= v1117 & v1115;
            v1116 -= v1116 & v1115;
            v1115 >>= 1;
            if (v1115 == v1096)
            {
              v1100 = v1094 & 0xCFFFFFFF;
              goto LABEL_803;
            }
          }
LABEL_780:
          v1091 = 1;
          *(_BYTE *)(a6 + 20) = 1;
          *(_QWORD *)(a6 + 24) = -1;
          v1092 = -1;
          *(_DWORD *)(a6 + 32) = -1;
          v1093 = 8;
          *(_BYTE *)(a6 + 36) = 8;
          LODWORD(v1094) = -1;
          v1095 = -1;
        }
      }
      else
      {
        v1091 = 0;
        v1092 = 0;
        v1351 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1352 = *(_DWORD *)(v1351 + 48);
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v1352;
        *(_BYTE *)(a6 + 36) = 6;
        v1095 = *(_DWORD *)(v1351 + 52);
        v1093 = 7;
        LODWORD(v1094) = a5;
      }
      *(_BYTE *)(a6 + 40) = v1091;
      *(_DWORD *)(a6 + 44) = v1092;
      *(_DWORD *)(a6 + 48) = v1094;
      *(_DWORD *)(a6 + 52) = v1095;
      *(_BYTE *)(a6 + 56) = v1093;
      if (*(_BYTE *)(a6 + 60))
        goto LABEL_988;
      if (*(_DWORD *)(a6 + 64))
      {
        v1358 = *(_DWORD *)(v7 + 136);
        v1359 = a4[1];
        v1360 = *a4 - (unsigned __int16)v1358;
        v1361 = a4[2] - (unsigned __int16)v1358;
        v1356 = *(unsigned int *)(a6 + 68);
        v1362 = v1356 & 0xFFFFFFFFCFFFFFFFLL;
        v1363 = *(_QWORD *)(v7 + 184);
        v1364 = (int *)(v1363 + 4488 * (v1356 & 0xFFFFFFFFCFFFFFFFLL));
        v1366 = *v1364;
        v1365 = v1364[1];
        v1367 = v1364[2];
        v1368 = v1364[3];
        v1369 = v1360 - *v1364;
        v1371 = v1360 < *v1364 || v1359 < v1365 || v1361 < v1367;
        if (v1371
          || ((v1374 = v1364 + 4, v1372 = v1364[4], v1373 = v1374[1], v1360 < v1368)
            ? (v1375 = v1359 < v1372)
            : (v1375 = 0),
              v1375 ? (v1376 = v1361 < v1373) : (v1376 = 0),
              !v1376))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1358 = *(_DWORD *)(v2092 + 136);
          v1363 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1377 = (v1368 - v1366) >> 1;
        if (v1377 == v1358)
        {
LABEL_1011:
          v1353 = 0;
          v1354 = 0;
          v1380 = v1363 + 4488 * v1362;
          v1381 = *(_DWORD *)(v1380 + 44);
          *(_BYTE *)(a6 + 60) = 0;
          *(_DWORD *)(a6 + 64) = 0;
          *(_DWORD *)(a6 + 68) = v1356;
          *(_DWORD *)(a6 + 72) = v1381;
          *(_BYTE *)(a6 + 76) = 5;
          v1357 = *(_DWORD *)(v1380 + 52);
          v1355 = 7;
        }
        else
        {
          v1378 = v1361 - v1367;
          v1379 = v1359 - v1365;
          while (1)
          {
            result = (4 * ((v1378 & v1377) != 0)) | (8 * ((v1379 & v1377) != 0));
            LODWORD(v1356) = *(_DWORD *)(v1363
                                       + 4488 * (v1356 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1369 & v1377) != 0)))
                                       + 24);
            if ((v1356 & 0x80000000) != 0)
              break;
            v1369 -= v1369 & v1377;
            v1379 -= v1379 & v1377;
            v1378 -= v1378 & v1377;
            v1377 >>= 1;
            if (v1377 == v1358)
            {
              v1362 = v1356 & 0xCFFFFFFF;
              goto LABEL_1011;
            }
          }
LABEL_988:
          v1353 = 1;
          *(_BYTE *)(a6 + 60) = 1;
          *(_QWORD *)(a6 + 64) = -1;
          v1354 = -1;
          *(_DWORD *)(a6 + 72) = -1;
          v1355 = 8;
          *(_BYTE *)(a6 + 76) = 8;
          LODWORD(v1356) = -1;
          v1357 = -1;
        }
      }
      else
      {
        v1353 = 0;
        v1354 = 0;
        v1599 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1600 = *(_DWORD *)(v1599 + 44);
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = a5;
        *(_DWORD *)(a6 + 72) = v1600;
        *(_BYTE *)(a6 + 76) = 5;
        v1357 = *(_DWORD *)(v1599 + 52);
        v1355 = 7;
        LODWORD(v1356) = a5;
      }
      *(_BYTE *)(a6 + 120) = v1353;
      *(_DWORD *)(a6 + 124) = v1354;
      *(_DWORD *)(a6 + 128) = v1356;
      *(_DWORD *)(a6 + 132) = v1357;
      *(_BYTE *)(a6 + 136) = v1355;
      if (*(_BYTE *)(a6 + 180))
        goto LABEL_1196;
      if (*(_DWORD *)(a6 + 184))
      {
        v1606 = *(_DWORD *)(v7 + 136);
        v1607 = a4[1] - (unsigned __int16)v1606;
        v1608 = a4[2] - (unsigned __int16)v1606;
        v1604 = *(unsigned int *)(a6 + 188);
        v1609 = v1604 & 0xFFFFFFFFCFFFFFFFLL;
        v1610 = *(_QWORD *)(v7 + 184);
        v1611 = (int *)(v1610 + 4488 * (v1604 & 0xFFFFFFFFCFFFFFFFLL));
        v1613 = *v1611;
        v1612 = v1611[1];
        v1614 = v1611[2];
        v1615 = v1611[3];
        v1616 = *a4 - *v1611;
        v1618 = *a4 < *v1611 || v1607 < v1612 || v1608 < v1614;
        if (v1618
          || ((v1621 = v1611 + 4, v1619 = v1611[4], v1620 = v1621[1], *a4 < v1615)
            ? (v1622 = v1607 < v1619)
            : (v1622 = 0),
              v1622 ? (v1623 = v1608 < v1620) : (v1623 = 0),
              !v1623))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1606 = *(_DWORD *)(v2092 + 136);
          v1610 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1624 = (v1615 - v1613) >> 1;
        if (v1624 == v1606)
        {
LABEL_1219:
          v1601 = 0;
          v1602 = 0;
          v1627 = v1610 + 4488 * v1609;
          v1628 = *(_DWORD *)(v1627 + 36);
          *(_BYTE *)(a6 + 180) = 0;
          *(_DWORD *)(a6 + 184) = 0;
          *(_DWORD *)(a6 + 188) = v1604;
          *(_DWORD *)(a6 + 192) = v1628;
          *(_BYTE *)(a6 + 196) = 3;
          v1605 = *(_DWORD *)(v1627 + 52);
          v1603 = 7;
        }
        else
        {
          v1625 = v1608 - v1614;
          v1626 = v1607 - v1612;
          while (1)
          {
            result = (4 * ((v1625 & v1624) != 0)) | (8 * ((v1626 & v1624) != 0));
            LODWORD(v1604) = *(_DWORD *)(v1610
                                       + 4488 * (v1604 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1616 & v1624) != 0)))
                                       + 24);
            if ((v1604 & 0x80000000) != 0)
              break;
            v1616 -= v1616 & v1624;
            v1626 -= v1626 & v1624;
            v1625 -= v1625 & v1624;
            v1624 >>= 1;
            if (v1624 == v1606)
            {
              v1609 = v1604 & 0xCFFFFFFF;
              goto LABEL_1219;
            }
          }
LABEL_1196:
          v1601 = 1;
          *(_BYTE *)(a6 + 180) = 1;
          *(_QWORD *)(a6 + 184) = -1;
          v1602 = -1;
          *(_DWORD *)(a6 + 192) = -1;
          v1603 = 8;
          *(_BYTE *)(a6 + 196) = 8;
          LODWORD(v1604) = -1;
          v1605 = -1;
        }
      }
      else
      {
        v1601 = 0;
        v1602 = 0;
        v1839 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1840 = *(_DWORD *)(v1839 + 36);
        *(_BYTE *)(a6 + 180) = 0;
        *(_DWORD *)(a6 + 184) = 0;
        *(_DWORD *)(a6 + 188) = a5;
        *(_DWORD *)(a6 + 192) = v1840;
        *(_BYTE *)(a6 + 196) = 3;
        v1605 = *(_DWORD *)(v1839 + 52);
        v1603 = 7;
        LODWORD(v1604) = a5;
      }
      *(_BYTE *)(a6 + 360) = v1601;
      *(_DWORD *)(a6 + 364) = v1602;
      *(_DWORD *)(a6 + 368) = v1604;
      *(_DWORD *)(a6 + 372) = v1605;
      *(_BYTE *)(a6 + 376) = v1603;
      if (!*(_BYTE *)a6)
      {
        if (!*(_DWORD *)(a6 + 4))
        {
          v1842 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 52);
          *(_BYTE *)a6 = 0;
          *(_DWORD *)(a6 + 4) = 0;
          *(_DWORD *)(a6 + 8) = a5;
          v1841 = 7;
          goto LABEL_1644;
        }
        v1843 = *(_DWORD *)(v7 + 136);
        v1844 = *a4 - (unsigned __int16)v1843;
        v1845 = a4[1] - (unsigned __int16)v1843;
        v1846 = a4[2] - (unsigned __int16)v1843;
        v1847 = *(unsigned int *)(a6 + 8);
        v1848 = v1847 & 0xFFFFFFFFCFFFFFFFLL;
        v1849 = *(_QWORD *)(v7 + 184);
        v1850 = (int *)(v1849 + 4488 * (v1847 & 0xFFFFFFFFCFFFFFFFLL));
        v1852 = *v1850;
        v1851 = v1850[1];
        v1853 = v1850[2];
        v1854 = v1850[3];
        v1855 = v1844 - *v1850;
        if (v1844 >= *v1850 && v1845 >= v1851 && v1846 >= v1853)
        {
          v1860 = v1850 + 4;
          v1858 = v1850[4];
          v1859 = v1860[1];
          v1861 = v1844 < v1854 && v1845 < v1858;
          if (v1861 && v1846 < v1859)
          {
LABEL_1422:
            v1863 = (v1854 - v1852) >> 1;
            if (v1863 == v1843)
            {
              a5 = v2093;
LABEL_1590:
              v2041 = 0;
              v2042 = 0;
              v1842 = *(_DWORD *)(v1849 + 4488 * v1848 + 52);
              v1841 = 7;
            }
            else
            {
              v2039 = v1846 - v1853;
              v2040 = v1845 - v1851;
              a5 = v2093;
              while (1)
              {
                result = (4 * ((v2039 & v1863) != 0)) | (8 * ((v2040 & v1863) != 0));
                LODWORD(v1847) = *(_DWORD *)(v1849
                                           + 4488 * (v1847 & 0xCFFFFFFF)
                                           + (result | (16 * ((v1855 & v1863) != 0)))
                                           + 24);
                if ((v1847 & 0x80000000) != 0)
                  break;
                v1855 -= v1855 & v1863;
                v2040 -= v2040 & v1863;
                v2039 -= v2039 & v1863;
                v1863 >>= 1;
                if (v1863 == v1843)
                {
                  v1848 = v1847 & 0xCFFFFFFF;
                  goto LABEL_1590;
                }
              }
              v1841 = 8;
              v2042 = -1;
              v2041 = 1;
              LODWORD(v1847) = -1;
              v1842 = -1;
            }
            *(_BYTE *)a6 = v2041;
            *(_DWORD *)(a6 + 4) = v2042;
            *(_DWORD *)(a6 + 8) = v1847;
            goto LABEL_1644;
          }
        }
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
        if ((result & 1) == 0)
        {
          v1843 = *(_DWORD *)(v2092 + 136);
          v1849 = *(_QWORD *)(v2092 + 184);
          goto LABEL_1422;
        }
LABEL_1667:
        abort();
      }
      *(_BYTE *)a6 = 1;
      *(_QWORD *)(a6 + 4) = -1;
      v1841 = 8;
      v1842 = -1;
LABEL_1644:
      v2071 = 0;
      *(_DWORD *)(a6 + 12) = v1842;
      *(_BYTE *)(a6 + 16) = v1841;
LABEL_1666:
      *(_BYTE *)(a6 + 260) = 0;
      *(_DWORD *)(a6 + 264) = 0;
      *(_DWORD *)(a6 + 268) = a5;
      *(_DWORD *)(a6 + 272) = a3;
      *(_BYTE *)(a6 + 276) = v2071;
      return result;
    case 1:
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v19) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v20 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_9:
        v21 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 320) = 1;
        *(_DWORD *)(a6 + 324) = -1;
        *(_QWORD *)(a6 + 328) = -1;
        *(_BYTE *)(a6 + 336) = 8;
        *(_BYTE *)(a6 + 240) = 1;
        *(_QWORD *)(a6 + 244) = -1;
        *(_DWORD *)(a6 + 252) = -1;
        *(_BYTE *)(a6 + 256) = 8;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        *(_DWORD *)(a6 + 512) = -1;
        *(_BYTE *)(a6 + 516) = 8;
        *(_BYTE *)(a6 + 300) = 1;
        *(_QWORD *)(a6 + 304) = -1;
        *(_DWORD *)(a6 + 312) = -1;
        *(_BYTE *)(a6 + 316) = 8;
        *(_BYTE *)(a6 + 420) = 1;
        *(_QWORD *)(a6 + 424) = -1;
        *(_DWORD *)(a6 + 432) = -1;
        LODWORD(v22) = -1;
        v23 = -1;
        *(_BYTE *)(a6 + 436) = 8;
        goto LABEL_244;
      }
      v19 = *(_DWORD *)(a6 + 444);
      if (v19)
      {
        v107 = *(_DWORD *)(result + 136);
        v108 = a4[1];
        v109 = *a4 + (unsigned __int16)v107;
        v110 = a4[2];
        v22 = *(unsigned int *)(a6 + 448);
        v111 = v22 & 0xFFFFFFFFCFFFFFFFLL;
        v112 = *(_QWORD *)(result + 184);
        v113 = (int *)(v112 + 4488 * (v22 & 0xFFFFFFFFCFFFFFFFLL));
        v115 = *v113;
        v114 = v113[1];
        v116 = v113[2];
        v117 = v113[3];
        v118 = v109 - *v113;
        v120 = v109 < *v113 || v108 < v114 || v110 < v116;
        if (v120
          || ((v123 = v113 + 4, v121 = v113[4], v122 = v123[1], v109 < v117) ? (v124 = v108 < v121) : (v124 = 0),
              v124 ? (v125 = v110 < v122) : (v125 = 0),
              !v125))
        {
          v2074 = v114;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v107 = *(_DWORD *)(v2092 + 136);
          v112 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v114 = v2074;
        }
        v126 = (v117 - v115) >> 1;
        if (v126 != v107)
        {
          v127 = v110 - v116;
          v128 = v108 - v114;
          while (1)
          {
            result = (4 * ((v127 & v126) != 0)) | (8 * ((v128 & v126) != 0));
            LODWORD(v22) = *(_DWORD *)(v112
                                     + 4488 * (v22 & 0xCFFFFFFF)
                                     + (result | (16 * ((v118 & v126) != 0)))
                                     + 24);
            if ((v22 & 0x80000000) != 0)
              break;
            v118 -= v118 & v126;
            v128 -= v128 & v126;
            v127 -= v127 & v126;
            v126 >>= 1;
            if (v126 == v107)
            {
              v111 = v22 & 0xCFFFFFFF;
              goto LABEL_90;
            }
          }
          LOBYTE(v19) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v20 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_9;
        }
LABEL_90:
        LOBYTE(v19) = 0;
        v20 = 0;
        v129 = (_DWORD *)(v112 + 4488 * v111);
        v130 = v129[11];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v22;
        *(_DWORD *)(a6 + 452) = v130;
        *(_BYTE *)(a6 + 456) = 5;
        v131 = v129[9];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v22;
        *(_DWORD *)(a6 + 332) = v131;
        *(_BYTE *)(a6 + 336) = 3;
        v132 = v129[6];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = v22;
        *(_DWORD *)(a6 + 252) = v132;
        *(_BYTE *)(a6 + 256) = 0;
        v133 = v129[13];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v22;
        *(_DWORD *)(a6 + 512) = v133;
        *(_BYTE *)(a6 + 516) = 7;
        v134 = v129[8];
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = v22;
        *(_DWORD *)(a6 + 312) = v134;
        *(_BYTE *)(a6 + 316) = 2;
        v135 = v129[10];
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = v22;
        *(_DWORD *)(a6 + 432) = v135;
        *(_BYTE *)(a6 + 436) = 4;
        v23 = v129[12];
        v21 = 6;
      }
      else
      {
        v20 = 0;
        v344 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v345 = v344[11];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v345;
        *(_BYTE *)(a6 + 456) = 5;
        v346 = v344[9];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v346;
        *(_BYTE *)(a6 + 336) = 3;
        v347 = v344[6];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v347;
        *(_BYTE *)(a6 + 256) = 0;
        v348 = v344[13];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v348;
        *(_BYTE *)(a6 + 516) = 7;
        v349 = v344[8];
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = a5;
        *(_DWORD *)(a6 + 312) = v349;
        *(_BYTE *)(a6 + 316) = 2;
        v350 = v344[10];
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = a5;
        *(_DWORD *)(a6 + 432) = v350;
        *(_BYTE *)(a6 + 436) = 4;
        v23 = v344[12];
        v21 = 6;
        LODWORD(v22) = a5;
      }
LABEL_244:
      *(_BYTE *)(a6 + 480) = v19;
      *(_DWORD *)(a6 + 484) = v20;
      *(_DWORD *)(a6 + 488) = v22;
      *(_DWORD *)(a6 + 492) = v23;
      *(_BYTE *)(a6 + 496) = v21;
      if (*(_BYTE *)(a6 + 80))
      {
LABEL_245:
        LOBYTE(v351) = 1;
        *(_BYTE *)(a6 + 80) = 1;
        *(_QWORD *)(a6 + 84) = -1;
        v352 = -1;
        *(_DWORD *)(a6 + 92) = -1;
        v353 = 8;
        *(_BYTE *)(a6 + 96) = 8;
        *(_BYTE *)(a6 + 140) = 1;
        *(_QWORD *)(a6 + 144) = -1;
        *(_DWORD *)(a6 + 152) = -1;
        *(_BYTE *)(a6 + 156) = 8;
        *(_BYTE *)(a6 + 120) = 1;
        *(_QWORD *)(a6 + 124) = -1;
        *(_DWORD *)(a6 + 132) = -1;
        LODWORD(v354) = -1;
        v355 = -1;
        *(_BYTE *)(a6 + 136) = 8;
        goto LABEL_408;
      }
      v351 = *(_DWORD *)(a6 + 84);
      if (v351)
      {
        v356 = *(_DWORD *)(v7 + 136);
        v357 = a4[1];
        v358 = *a4 - (unsigned __int16)v356;
        v359 = a4[2];
        v354 = *(unsigned int *)(a6 + 88);
        v360 = v354 & 0xFFFFFFFFCFFFFFFFLL;
        v361 = *(_QWORD *)(v7 + 184);
        v362 = (int *)(v361 + 4488 * (v354 & 0xFFFFFFFFCFFFFFFFLL));
        v364 = *v362;
        v363 = v362[1];
        v366 = v362[2];
        v365 = v362[3];
        v367 = v358 - *v362;
        if (v358 < *v362 || v357 < v363 || v359 < v366 || v358 >= v365 || v357 >= v362[4] || v359 >= v362[5])
        {
          v368 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v356 = *(_DWORD *)(v2092 + 136);
          v361 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v368;
          v360 = v354 & 0xCFFFFFFF;
        }
        v369 = (v365 - v364) >> 1;
        if (v369 != v356)
        {
          v370 = v359 - v366;
          v371 = v357 - v363;
          while (1)
          {
            result = (4 * ((v370 & v369) != 0)) | (8 * ((v371 & v369) != 0));
            LODWORD(v354) = *(_DWORD *)(v361
                                      + 4488 * (v354 & 0xCFFFFFFF)
                                      + (result | (16 * ((v367 & v369) != 0)))
                                      + 24);
            if ((v354 & 0x80000000) != 0)
              goto LABEL_245;
            v367 -= v367 & v369;
            v371 -= v371 & v369;
            v370 -= v370 & v369;
            v369 >>= 1;
            if (v369 == v356)
            {
              v360 = v354 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v351) = 0;
        v352 = 0;
        v372 = (_DWORD *)(v361 + 4488 * v360);
        v373 = v372[11];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = v354;
        *(_DWORD *)(a6 + 92) = v373;
        *(_BYTE *)(a6 + 96) = 5;
        v374 = v372[13];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = v354;
        *(_DWORD *)(a6 + 152) = v374;
        *(_BYTE *)(a6 + 156) = 7;
        v375 = v372[12];
        *(_BYTE *)(a6 + 120) = 0;
        *(_DWORD *)(a6 + 124) = 0;
        *(_DWORD *)(a6 + 128) = v354;
        *(_DWORD *)(a6 + 132) = v375;
        *(_BYTE *)(a6 + 136) = 6;
        v355 = v372[10];
        v353 = 4;
      }
      else
      {
        v352 = 0;
        v604 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v605 = v604[11];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v605;
        *(_BYTE *)(a6 + 96) = 5;
        v606 = v604[13];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v606;
        *(_BYTE *)(a6 + 156) = 7;
        v607 = v604[12];
        *(_BYTE *)(a6 + 120) = 0;
        *(_DWORD *)(a6 + 124) = 0;
        *(_DWORD *)(a6 + 128) = a5;
        *(_DWORD *)(a6 + 132) = v607;
        *(_BYTE *)(a6 + 136) = 6;
        v355 = v604[10];
        v353 = 4;
        LODWORD(v354) = a5;
      }
LABEL_408:
      *(_BYTE *)(a6 + 60) = v351;
      *(_DWORD *)(a6 + 64) = v352;
      *(_DWORD *)(a6 + 68) = v354;
      *(_DWORD *)(a6 + 72) = v355;
      *(_BYTE *)(a6 + 76) = v353;
      if (*(_BYTE *)(a6 + 200))
      {
LABEL_409:
        LOBYTE(v608) = 1;
        *(_BYTE *)(a6 + 200) = 1;
        *(_QWORD *)(a6 + 204) = -1;
        v609 = -1;
        *(_DWORD *)(a6 + 212) = -1;
        v610 = 8;
        *(_BYTE *)(a6 + 216) = 8;
        *(_BYTE *)(a6 + 380) = 1;
        *(_QWORD *)(a6 + 384) = -1;
        *(_DWORD *)(a6 + 392) = -1;
        *(_BYTE *)(a6 + 396) = 8;
        *(_BYTE *)(a6 + 360) = 1;
        *(_DWORD *)(a6 + 364) = -1;
        *(_QWORD *)(a6 + 368) = -1;
        LODWORD(v611) = -1;
        v612 = -1;
        *(_BYTE *)(a6 + 376) = 8;
        goto LABEL_620;
      }
      v608 = *(_DWORD *)(a6 + 204);
      if (v608)
      {
        v613 = *(_DWORD *)(v7 + 136);
        v614 = a4[1] - (unsigned __int16)v613;
        v615 = a4[2];
        v611 = *(unsigned int *)(a6 + 208);
        v616 = v611 & 0xFFFFFFFFCFFFFFFFLL;
        v617 = *(_QWORD *)(v7 + 184);
        v618 = (int *)(v617 + 4488 * (v611 & 0xFFFFFFFFCFFFFFFFLL));
        v620 = *v618;
        v619 = v618[1];
        v621 = v618[2];
        v622 = v618[3];
        v623 = *a4 - *v618;
        v625 = *a4 < *v618 || v614 < v619 || v615 < v621;
        if (v625
          || ((v628 = v618 + 4, v626 = v618[4], v627 = v628[1], *a4 < v622) ? (v629 = v614 < v626) : (v629 = 0),
              v629 ? (v630 = v615 < v627) : (v630 = 0),
              !v630))
        {
          v2081 = v619;
          v631 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v613 = *(_DWORD *)(v2092 + 136);
          v617 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v631;
          v619 = v2081;
        }
        v632 = (v622 - v620) >> 1;
        if (v632 != v613)
        {
          v633 = v615 - v621;
          v634 = v614 - v619;
          while (1)
          {
            result = (4 * ((v633 & v632) != 0)) | (8 * ((v634 & v632) != 0));
            LODWORD(v611) = *(_DWORD *)(v617
                                      + 4488 * (v611 & 0xCFFFFFFF)
                                      + (result | (16 * ((v623 & v632) != 0)))
                                      + 24);
            if ((v611 & 0x80000000) != 0)
              goto LABEL_409;
            v623 -= v623 & v632;
            v634 -= v634 & v632;
            v633 -= v633 & v632;
            v632 >>= 1;
            if (v632 == v613)
            {
              v616 = v611 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v608) = 0;
        v609 = 0;
        v635 = (_DWORD *)(v617 + 4488 * v616);
        v636 = v635[9];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = v611;
        *(_DWORD *)(a6 + 212) = v636;
        *(_BYTE *)(a6 + 216) = 3;
        v637 = v635[13];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = v611;
        *(_DWORD *)(a6 + 392) = v637;
        *(_BYTE *)(a6 + 396) = 7;
        v638 = v635[12];
        *(_BYTE *)(a6 + 360) = 0;
        *(_DWORD *)(a6 + 364) = 0;
        *(_DWORD *)(a6 + 368) = v611;
        *(_DWORD *)(a6 + 372) = v638;
        *(_BYTE *)(a6 + 376) = 6;
        v612 = v635[8];
        v610 = 2;
      }
      else
      {
        v609 = 0;
        v881 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v882 = v881[9];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v882;
        *(_BYTE *)(a6 + 216) = 3;
        v883 = v881[13];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v883;
        *(_BYTE *)(a6 + 396) = 7;
        v884 = v881[12];
        *(_BYTE *)(a6 + 360) = 0;
        *(_DWORD *)(a6 + 364) = 0;
        *(_DWORD *)(a6 + 368) = a5;
        *(_DWORD *)(a6 + 372) = v884;
        *(_BYTE *)(a6 + 376) = 6;
        v612 = v881[8];
        v610 = 2;
        LODWORD(v611) = a5;
      }
LABEL_620:
      *(_BYTE *)(a6 + 180) = v608;
      *(_DWORD *)(a6 + 184) = v609;
      *(_DWORD *)(a6 + 188) = v611;
      *(_DWORD *)(a6 + 192) = v612;
      *(_BYTE *)(a6 + 196) = v610;
      if (*(_BYTE *)(a6 + 280))
      {
        LOBYTE(v885) = 1;
        *(_BYTE *)(a6 + 280) = 1;
        v886 = -1;
        *(_DWORD *)(a6 + 284) = -1;
        *(_QWORD *)(a6 + 288) = -1;
LABEL_622:
        v887 = 8;
        *(_BYTE *)(a6 + 296) = 8;
        *(_BYTE *)(a6 + 460) = 1;
        *(_QWORD *)(a6 + 464) = -1;
        *(_DWORD *)(a6 + 472) = -1;
        *(_BYTE *)(a6 + 476) = 8;
        *(_BYTE *)(a6 + 520) = 1;
        *(_DWORD *)(a6 + 524) = -1;
        *(_QWORD *)(a6 + 528) = -1;
        LODWORD(v888) = -1;
        v889 = -1;
        *(_BYTE *)(a6 + 536) = 8;
        goto LABEL_831;
      }
      v885 = *v8;
      if (*v8)
      {
        v890 = *(_DWORD *)(v7 + 136);
        v891 = a4[1];
        v892 = a4[2] + (unsigned __int16)v890;
        v888 = *(unsigned int *)(a6 + 288);
        v893 = v888 & 0xFFFFFFFFCFFFFFFFLL;
        v894 = *(_QWORD *)(v7 + 184);
        v895 = (int *)(v894 + 4488 * (v888 & 0xFFFFFFFFCFFFFFFFLL));
        v897 = *v895;
        v896 = v895[1];
        v898 = v895[2];
        v899 = v895[3];
        v900 = *a4 - *v895;
        v902 = *a4 < *v895 || v891 < v896 || v892 < v898;
        if (v902
          || ((v905 = v895 + 4, v903 = v895[4], v904 = v905[1], *a4 < v899) ? (v906 = v891 < v903) : (v906 = 0),
              v906 ? (v907 = v892 < v904) : (v907 = 0),
              !v907))
        {
          v2087 = v896;
          v908 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v890 = *(_DWORD *)(v2092 + 136);
          v894 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v908;
          v896 = v2087;
        }
        v909 = (v899 - v897) >> 1;
        if (v909 != v890)
        {
          v910 = v892 - v898;
          v911 = v891 - v896;
          while (1)
          {
            result = (4 * ((v910 & v909) != 0)) | (8 * ((v911 & v909) != 0));
            LODWORD(v888) = *(_DWORD *)(v894
                                      + 4488 * (v888 & 0xCFFFFFFF)
                                      + (result | (16 * ((v900 & v909) != 0)))
                                      + 24);
            if ((v888 & 0x80000000) != 0)
              break;
            v900 -= v900 & v909;
            v911 -= v911 & v909;
            v910 -= v910 & v909;
            v909 >>= 1;
            if (v909 == v890)
            {
              v893 = v888 & 0xCFFFFFFF;
              goto LABEL_645;
            }
          }
          LOBYTE(v885) = 1;
          *(_BYTE *)(a6 + 280) = 1;
          *(_QWORD *)v8 = -1;
          v886 = -1;
          *(_DWORD *)(a6 + 292) = -1;
          goto LABEL_622;
        }
LABEL_645:
        LOBYTE(v885) = 0;
        v886 = 0;
        v912 = (_DWORD *)(v894 + 4488 * v893);
        v913 = v912[6];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v888;
        *(_DWORD *)(a6 + 292) = v913;
        *(_BYTE *)(a6 + 296) = 0;
        v914 = v912[10];
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = v888;
        *(_DWORD *)(a6 + 472) = v914;
        *(_BYTE *)(a6 + 476) = 4;
        v915 = v912[12];
        *(_BYTE *)(a6 + 520) = 0;
        *(_DWORD *)(a6 + 524) = 0;
        *(_DWORD *)(a6 + 528) = v888;
        *(_DWORD *)(a6 + 532) = v915;
        *(_BYTE *)(a6 + 536) = 6;
        v889 = v912[8];
        v887 = 2;
      }
      else
      {
        v886 = 0;
        v1153 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1154 = v1153[6];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v1154;
        *(_BYTE *)(a6 + 296) = 0;
        v1155 = v1153[10];
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = a5;
        *(_DWORD *)(a6 + 472) = v1155;
        *(_BYTE *)(a6 + 476) = 4;
        v1156 = v1153[12];
        *(_BYTE *)(a6 + 520) = 0;
        *(_DWORD *)(a6 + 524) = 0;
        *(_DWORD *)(a6 + 528) = a5;
        *(_DWORD *)(a6 + 532) = v1156;
        *(_BYTE *)(a6 + 536) = 6;
        v889 = v1153[8];
        v887 = 2;
        LODWORD(v888) = a5;
      }
LABEL_831:
      *(_BYTE *)(a6 + 340) = v885;
      *(_DWORD *)(a6 + 344) = v886;
      *(_DWORD *)(a6 + 348) = v888;
      *(_DWORD *)(a6 + 352) = v889;
      *(_BYTE *)(a6 + 356) = v887;
      if (*(_BYTE *)(a6 + 20))
      {
LABEL_832:
        v1157 = 1;
        *(_BYTE *)(a6 + 20) = 1;
        *(_QWORD *)(a6 + 24) = -1;
        v1158 = -1;
        *(_DWORD *)(a6 + 32) = -1;
        v1159 = 8;
        *(_BYTE *)(a6 + 36) = 8;
        LODWORD(v1160) = -1;
        v1161 = -1;
        goto LABEL_1039;
      }
      if (*(_DWORD *)(a6 + 24))
      {
        v1162 = *(_DWORD *)(v7 + 136);
        v1163 = *a4 - (unsigned __int16)v1162;
        v1164 = a4[1] - (unsigned __int16)v1162;
        v1165 = a4[2];
        v1160 = *(unsigned int *)(a6 + 28);
        v1166 = v1160 & 0xFFFFFFFFCFFFFFFFLL;
        v1167 = *(_QWORD *)(v7 + 184);
        v1168 = (int *)(v1167 + 4488 * (v1160 & 0xFFFFFFFFCFFFFFFFLL));
        v1170 = *v1168;
        v1169 = v1168[1];
        v1171 = v1168[2];
        v1172 = v1168[3];
        v1173 = v1163 - *v1168;
        v1175 = v1163 < *v1168 || v1164 < v1169 || v1165 < v1171;
        if (v1175
          || ((v1178 = v1168 + 4, v1176 = v1168[4], v1177 = v1178[1], v1163 < v1172)
            ? (v1179 = v1164 < v1176)
            : (v1179 = 0),
              v1179 ? (v1180 = v1165 < v1177) : (v1180 = 0),
              !v1180))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1162 = *(_DWORD *)(v2092 + 136);
          v1167 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1181 = (v1172 - v1170) >> 1;
        if (v1181 != v1162)
        {
          v1182 = v1165 - v1171;
          v1183 = v1164 - v1169;
          while (1)
          {
            result = (4 * ((v1182 & v1181) != 0)) | (8 * ((v1183 & v1181) != 0));
            LODWORD(v1160) = *(_DWORD *)(v1167
                                       + 4488 * (v1160 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1173 & v1181) != 0)))
                                       + 24);
            if ((v1160 & 0x80000000) != 0)
              goto LABEL_832;
            v1173 -= v1173 & v1181;
            v1183 -= v1183 & v1181;
            v1182 -= v1182 & v1181;
            v1181 >>= 1;
            if (v1181 == v1162)
            {
              v1166 = v1160 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1157 = 0;
        v1158 = 0;
        v1184 = v1167 + 4488 * v1166;
        v1185 = *(_DWORD *)(v1184 + 52);
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = v1160;
        *(_DWORD *)(a6 + 32) = v1185;
        *(_BYTE *)(a6 + 36) = 7;
        v1161 = *(_DWORD *)(v1184 + 48);
        v1159 = 6;
      }
      else
      {
        v1157 = 0;
        v1158 = 0;
        v1413 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1414 = *(_DWORD *)(v1413 + 52);
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v1414;
        *(_BYTE *)(a6 + 36) = 7;
        v1161 = *(_DWORD *)(v1413 + 48);
        v1159 = 6;
        LODWORD(v1160) = a5;
      }
LABEL_1039:
      *(_BYTE *)a6 = v1157;
      *(_DWORD *)(a6 + 4) = v1158;
      *(_DWORD *)(a6 + 8) = v1160;
      *(_DWORD *)(a6 + 12) = v1161;
      *(_BYTE *)(a6 + 16) = v1159;
      if (*(_BYTE *)(a6 + 100))
      {
LABEL_1040:
        v1415 = 1;
        *(_BYTE *)(a6 + 100) = 1;
        *(_QWORD *)(a6 + 104) = -1;
        v1416 = -1;
        *(_DWORD *)(a6 + 112) = -1;
        v1417 = 8;
        *(_BYTE *)(a6 + 116) = 8;
        LODWORD(v1418) = -1;
        v1419 = -1;
        goto LABEL_1247;
      }
      if (*(_DWORD *)(a6 + 104))
      {
        v1420 = *(_DWORD *)(v7 + 136);
        v1421 = a4[1];
        v1422 = *a4 - (unsigned __int16)v1420;
        v1423 = a4[2] + (unsigned __int16)v1420;
        v1418 = *(unsigned int *)(a6 + 108);
        v1424 = v1418 & 0xFFFFFFFFCFFFFFFFLL;
        v1425 = *(_QWORD *)(v7 + 184);
        v1426 = (int *)(v1425 + 4488 * (v1418 & 0xFFFFFFFFCFFFFFFFLL));
        v1428 = *v1426;
        v1427 = v1426[1];
        v1429 = v1426[2];
        v1430 = v1426[3];
        v1431 = v1422 - *v1426;
        v1433 = v1422 < *v1426 || v1421 < v1427 || v1423 < v1429;
        if (v1433
          || ((v1436 = v1426 + 4, v1434 = v1426[4], v1435 = v1436[1], v1422 < v1430)
            ? (v1437 = v1421 < v1434)
            : (v1437 = 0),
              v1437 ? (v1438 = v1423 < v1435) : (v1438 = 0),
              !v1438))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1420 = *(_DWORD *)(v2092 + 136);
          v1425 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1439 = (v1430 - v1428) >> 1;
        if (v1439 != v1420)
        {
          v1440 = v1423 - v1429;
          v1441 = v1421 - v1427;
          while (1)
          {
            result = (4 * ((v1440 & v1439) != 0)) | (8 * ((v1441 & v1439) != 0));
            LODWORD(v1418) = *(_DWORD *)(v1425
                                       + 4488 * (v1418 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1431 & v1439) != 0)))
                                       + 24);
            if ((v1418 & 0x80000000) != 0)
              goto LABEL_1040;
            v1431 -= v1431 & v1439;
            v1441 -= v1441 & v1439;
            v1440 -= v1440 & v1439;
            v1439 >>= 1;
            if (v1439 == v1420)
            {
              v1424 = v1418 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1415 = 0;
        v1416 = 0;
        v1442 = v1425 + 4488 * v1424;
        v1443 = *(_DWORD *)(v1442 + 40);
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = v1418;
        *(_DWORD *)(a6 + 112) = v1443;
        *(_BYTE *)(a6 + 116) = 4;
        v1419 = *(_DWORD *)(v1442 + 48);
        v1417 = 6;
      }
      else
      {
        v1415 = 0;
        v1416 = 0;
        v1659 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1660 = *(_DWORD *)(v1659 + 40);
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = a5;
        *(_DWORD *)(a6 + 112) = v1660;
        *(_BYTE *)(a6 + 116) = 4;
        v1419 = *(_DWORD *)(v1659 + 48);
        v1417 = 6;
        LODWORD(v1418) = a5;
      }
LABEL_1247:
      *(_BYTE *)(a6 + 160) = v1415;
      *(_DWORD *)(a6 + 164) = v1416;
      *(_DWORD *)(a6 + 168) = v1418;
      *(_DWORD *)(a6 + 172) = v1419;
      *(_BYTE *)(a6 + 176) = v1417;
      if (*(_BYTE *)(a6 + 220))
      {
LABEL_1248:
        v1661 = 1;
        *(_BYTE *)(a6 + 220) = 1;
        *(_QWORD *)(a6 + 224) = -1;
        v1662 = -1;
        *(_DWORD *)(a6 + 232) = -1;
        v1663 = 8;
        *(_BYTE *)(a6 + 236) = 8;
        LODWORD(v1664) = -1;
        v1665 = -1;
        goto LABEL_1447;
      }
      if (*(_DWORD *)(a6 + 224))
      {
        v1666 = *(_DWORD *)(v7 + 136);
        v1667 = a4[1] - (unsigned __int16)v1666;
        v1668 = a4[2] + (unsigned __int16)v1666;
        v1664 = *(unsigned int *)(a6 + 228);
        v1669 = v1664 & 0xFFFFFFFFCFFFFFFFLL;
        v1670 = *(_QWORD *)(v7 + 184);
        v1671 = (int *)(v1670 + 4488 * (v1664 & 0xFFFFFFFFCFFFFFFFLL));
        v1673 = *v1671;
        v1672 = v1671[1];
        v1674 = v1671[2];
        v1675 = v1671[3];
        v1676 = *a4 - *v1671;
        v1678 = *a4 < *v1671 || v1667 < v1672 || v1668 < v1674;
        if (v1678
          || ((v1681 = v1671 + 4, v1679 = v1671[4], v1680 = v1681[1], *a4 < v1675)
            ? (v1682 = v1667 < v1679)
            : (v1682 = 0),
              v1682 ? (v1683 = v1668 < v1680) : (v1683 = 0),
              !v1683))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1666 = *(_DWORD *)(v2092 + 136);
          v1670 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1684 = (v1675 - v1673) >> 1;
        if (v1684 != v1666)
        {
          v1685 = v1668 - v1674;
          v1686 = v1667 - v1672;
          while (1)
          {
            result = (4 * ((v1685 & v1684) != 0)) | (8 * ((v1686 & v1684) != 0));
            LODWORD(v1664) = *(_DWORD *)(v1670
                                       + 4488 * (v1664 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1676 & v1684) != 0)))
                                       + 24);
            if ((v1664 & 0x80000000) != 0)
              goto LABEL_1248;
            v1676 -= v1676 & v1684;
            v1686 -= v1686 & v1684;
            v1685 -= v1685 & v1684;
            v1684 >>= 1;
            if (v1684 == v1666)
            {
              v1669 = v1664 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1661 = 0;
        v1662 = 0;
        v1687 = v1670 + 4488 * v1669;
        v1688 = *(_DWORD *)(v1687 + 32);
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = v1664;
        *(_DWORD *)(a6 + 232) = v1688;
        *(_BYTE *)(a6 + 236) = 2;
        v1665 = *(_DWORD *)(v1687 + 48);
        v1663 = 6;
      }
      else
      {
        v1661 = 0;
        v1662 = 0;
        v1889 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1890 = *(_DWORD *)(v1889 + 32);
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = a5;
        *(_DWORD *)(a6 + 232) = v1890;
        *(_BYTE *)(a6 + 236) = 2;
        v1665 = *(_DWORD *)(v1889 + 48);
        v1663 = 6;
        LODWORD(v1664) = a5;
      }
LABEL_1447:
      *(_BYTE *)(a6 + 400) = v1661;
      *(_DWORD *)(a6 + 404) = v1662;
      *(_DWORD *)(a6 + 408) = v1664;
      *(_DWORD *)(a6 + 412) = v1665;
      *(_BYTE *)(a6 + 416) = v1663;
      if (*(_BYTE *)(a6 + 40))
      {
        *(_BYTE *)(a6 + 40) = 1;
        *(_QWORD *)(a6 + 44) = -1;
        v1891 = 8;
        v1892 = -1;
      }
      else if (*(_DWORD *)(a6 + 44))
      {
        v1893 = *(_DWORD *)(v7 + 136);
        v1894 = *a4 - (unsigned __int16)v1893;
        v1895 = a4[1] - (unsigned __int16)v1893;
        v1896 = a4[2] + (unsigned __int16)v1893;
        v1897 = *(unsigned int *)(a6 + 48);
        v1898 = v1897 & 0xFFFFFFFFCFFFFFFFLL;
        v1899 = *(_QWORD *)(v7 + 184);
        v1900 = (int *)(v1899 + 4488 * (v1897 & 0xFFFFFFFFCFFFFFFFLL));
        v1902 = *v1900;
        v1901 = v1900[1];
        v1903 = v1900[2];
        v1904 = v1900[3];
        v1905 = v1894 - *v1900;
        v1907 = v1894 < *v1900 || v1895 < v1901 || v1896 < v1903;
        if (v1907
          || ((v1910 = v1900 + 4, v1908 = v1900[4], v1909 = v1910[1], v1894 < v1904)
            ? (v1911 = v1895 < v1908)
            : (v1911 = 0),
              v1911 ? (v1912 = v1896 < v1909) : (v1912 = 0),
              !v1912))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          v1893 = *(_DWORD *)(v2092 + 136);
          v1899 = *(_QWORD *)(v2092 + 184);
        }
        v1913 = (v1904 - v1902) >> 1;
        if (v1913 == v1893)
        {
          a5 = v2093;
LABEL_1600:
          v2049 = 0;
          v2050 = 0;
          v1892 = *(_DWORD *)(v1899 + 4488 * v1898 + 48);
          v1891 = 6;
        }
        else
        {
          v2047 = v1896 - v1903;
          v2048 = v1895 - v1901;
          a5 = v2093;
          while (1)
          {
            result = (4 * ((v2047 & v1913) != 0)) | (8 * ((v2048 & v1913) != 0));
            LODWORD(v1897) = *(_DWORD *)(v1899
                                       + 4488 * (v1897 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1905 & v1913) != 0)))
                                       + 24);
            if ((v1897 & 0x80000000) != 0)
              break;
            v1905 -= v1905 & v1913;
            v2048 -= v2048 & v1913;
            v2047 -= v2047 & v1913;
            v1913 >>= 1;
            if (v1913 == v1893)
            {
              v1898 = v1897 & 0xCFFFFFFF;
              goto LABEL_1600;
            }
          }
          v1891 = 8;
          v2050 = -1;
          v2049 = 1;
          LODWORD(v1897) = -1;
          v1892 = -1;
        }
        *(_BYTE *)(a6 + 40) = v2049;
        *(_DWORD *)(a6 + 44) = v2050;
        *(_DWORD *)(a6 + 48) = v1897;
      }
      else
      {
        v1892 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 48);
        *(_BYTE *)(a6 + 40) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_DWORD *)(a6 + 48) = a5;
        v1891 = 6;
      }
      *(_DWORD *)(a6 + 52) = v1892;
      *(_BYTE *)(a6 + 56) = v1891;
      v2071 = 1;
      goto LABEL_1666;
    case 2:
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v24) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v25 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_12:
        v26 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 200) = 1;
        *(_QWORD *)(a6 + 204) = -1;
        *(_DWORD *)(a6 + 212) = -1;
        *(_BYTE *)(a6 + 216) = 8;
        *(_BYTE *)(a6 + 280) = 1;
        *(_DWORD *)(a6 + 284) = -1;
        *(_QWORD *)(a6 + 288) = -1;
        *(_BYTE *)(a6 + 296) = 8;
        *(_BYTE *)(a6 + 380) = 1;
        *(_QWORD *)(a6 + 384) = -1;
        *(_DWORD *)(a6 + 392) = -1;
        *(_BYTE *)(a6 + 396) = 8;
        *(_BYTE *)(a6 + 220) = 1;
        *(_QWORD *)(a6 + 224) = -1;
        *(_DWORD *)(a6 + 232) = -1;
        *(_BYTE *)(a6 + 236) = 8;
        *(_BYTE *)(a6 + 460) = 1;
        *(_QWORD *)(a6 + 464) = -1;
        *(_DWORD *)(a6 + 472) = -1;
        LODWORD(v27) = -1;
        v28 = -1;
        *(_BYTE *)(a6 + 476) = 8;
        goto LABEL_262;
      }
      v24 = *(_DWORD *)(a6 + 444);
      if (v24)
      {
        v136 = *(_DWORD *)(result + 136);
        v137 = a4[1];
        v138 = *a4 + (unsigned __int16)v136;
        v139 = a4[2];
        v27 = *(unsigned int *)(a6 + 448);
        v140 = v27 & 0xFFFFFFFFCFFFFFFFLL;
        v141 = *(_QWORD *)(result + 184);
        v142 = (int *)(v141 + 4488 * (v27 & 0xFFFFFFFFCFFFFFFFLL));
        v144 = *v142;
        v143 = v142[1];
        v145 = v142[2];
        v146 = v142[3];
        v147 = v138 - *v142;
        v149 = v138 < *v142 || v137 < v143 || v139 < v145;
        if (v149
          || ((v152 = v142 + 4, v150 = v142[4], v151 = v152[1], v138 < v146) ? (v153 = v137 < v150) : (v153 = 0),
              v153 ? (v154 = v139 < v151) : (v154 = 0),
              !v154))
        {
          v2075 = v143;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v136 = *(_DWORD *)(v2092 + 136);
          v141 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v143 = v2075;
        }
        v155 = (v146 - v144) >> 1;
        if (v155 != v136)
        {
          v156 = v139 - v145;
          v157 = v137 - v143;
          while (1)
          {
            result = (4 * ((v156 & v155) != 0)) | (8 * ((v157 & v155) != 0));
            LODWORD(v27) = *(_DWORD *)(v141
                                     + 4488 * (v27 & 0xCFFFFFFF)
                                     + (result | (16 * ((v147 & v155) != 0)))
                                     + 24);
            if ((v27 & 0x80000000) != 0)
              break;
            v147 -= v147 & v155;
            v157 -= v157 & v155;
            v156 -= v156 & v155;
            v155 >>= 1;
            if (v155 == v136)
            {
              v140 = v27 & 0xCFFFFFFF;
              goto LABEL_113;
            }
          }
          LOBYTE(v24) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v25 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_12;
        }
LABEL_113:
        LOBYTE(v24) = 0;
        v25 = 0;
        v158 = (_DWORD *)(v141 + 4488 * v140);
        v159 = v158[12];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v27;
        *(_DWORD *)(a6 + 452) = v159;
        *(_BYTE *)(a6 + 456) = 6;
        v160 = v158[6];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = v27;
        *(_DWORD *)(a6 + 212) = v160;
        *(_BYTE *)(a6 + 216) = 0;
        v161 = v158[9];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v27;
        *(_DWORD *)(a6 + 292) = v161;
        *(_BYTE *)(a6 + 296) = 3;
        v162 = v158[10];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = v27;
        *(_DWORD *)(a6 + 392) = v162;
        *(_BYTE *)(a6 + 396) = 4;
        v163 = v158[7];
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = v27;
        *(_DWORD *)(a6 + 232) = v163;
        *(_BYTE *)(a6 + 236) = 1;
        v164 = v158[13];
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = v27;
        *(_DWORD *)(a6 + 472) = v164;
        *(_BYTE *)(a6 + 476) = 7;
        v28 = v158[11];
        v26 = 5;
      }
      else
      {
        v25 = 0;
        v376 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v377 = v376[12];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v377;
        *(_BYTE *)(a6 + 456) = 6;
        v378 = v376[6];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v378;
        *(_BYTE *)(a6 + 216) = 0;
        v379 = v376[9];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v379;
        *(_BYTE *)(a6 + 296) = 3;
        v380 = v376[10];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v380;
        *(_BYTE *)(a6 + 396) = 4;
        v381 = v376[7];
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = a5;
        *(_DWORD *)(a6 + 232) = v381;
        *(_BYTE *)(a6 + 236) = 1;
        v382 = v376[13];
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = a5;
        *(_DWORD *)(a6 + 472) = v382;
        *(_BYTE *)(a6 + 476) = 7;
        v28 = v376[11];
        v26 = 5;
        LODWORD(v27) = a5;
      }
LABEL_262:
      *(_BYTE *)(a6 + 400) = v24;
      *(_DWORD *)(a6 + 404) = v25;
      *(_DWORD *)(a6 + 408) = v27;
      *(_DWORD *)(a6 + 412) = v28;
      *(_BYTE *)(a6 + 416) = v26;
      if (*(_BYTE *)(a6 + 80))
      {
LABEL_263:
        LOBYTE(v383) = 1;
        *(_BYTE *)(a6 + 80) = 1;
        *(_QWORD *)(a6 + 84) = -1;
        v384 = -1;
        *(_DWORD *)(a6 + 92) = -1;
        v385 = 8;
        *(_BYTE *)(a6 + 96) = 8;
        *(_BYTE *)(a6 + 20) = 1;
        *(_QWORD *)(a6 + 24) = -1;
        *(_DWORD *)(a6 + 32) = -1;
        *(_BYTE *)(a6 + 36) = 8;
        *(_BYTE *)(a6 + 40) = 1;
        *(_QWORD *)(a6 + 44) = -1;
        *(_DWORD *)(a6 + 52) = -1;
        LODWORD(v386) = -1;
        v387 = -1;
        *(_BYTE *)(a6 + 56) = 8;
        goto LABEL_434;
      }
      v383 = *(_DWORD *)(a6 + 84);
      if (v383)
      {
        v388 = *(_DWORD *)(v7 + 136);
        v389 = a4[1];
        v390 = *a4 - (unsigned __int16)v388;
        v391 = a4[2];
        v386 = *(unsigned int *)(a6 + 88);
        v392 = v386 & 0xFFFFFFFFCFFFFFFFLL;
        v393 = *(_QWORD *)(v7 + 184);
        v394 = (int *)(v393 + 4488 * (v386 & 0xFFFFFFFFCFFFFFFFLL));
        v396 = *v394;
        v395 = v394[1];
        v398 = v394[2];
        v397 = v394[3];
        v399 = v390 - *v394;
        if (v390 < *v394 || v389 < v395 || v391 < v398 || v390 >= v397 || v389 >= v394[4] || v391 >= v394[5])
        {
          v400 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v388 = *(_DWORD *)(v2092 + 136);
          v393 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v400;
          v392 = v386 & 0xCFFFFFFF;
        }
        v401 = (v397 - v396) >> 1;
        if (v401 != v388)
        {
          v402 = v391 - v398;
          v403 = v389 - v395;
          while (1)
          {
            result = (4 * ((v402 & v401) != 0)) | (8 * ((v403 & v401) != 0));
            LODWORD(v386) = *(_DWORD *)(v393
                                      + 4488 * (v386 & 0xCFFFFFFF)
                                      + (result | (16 * ((v399 & v401) != 0)))
                                      + 24);
            if ((v386 & 0x80000000) != 0)
              goto LABEL_263;
            v399 -= v399 & v401;
            v403 -= v403 & v401;
            v402 -= v402 & v401;
            v401 >>= 1;
            if (v401 == v388)
            {
              v392 = v386 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v383) = 0;
        v384 = 0;
        v404 = (_DWORD *)(v393 + 4488 * v392);
        v405 = v404[12];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = v386;
        *(_DWORD *)(a6 + 92) = v405;
        *(_BYTE *)(a6 + 96) = 6;
        v406 = v404[10];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = v386;
        *(_DWORD *)(a6 + 32) = v406;
        *(_BYTE *)(a6 + 36) = 4;
        v407 = v404[11];
        *(_BYTE *)(a6 + 40) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_DWORD *)(a6 + 48) = v386;
        *(_DWORD *)(a6 + 52) = v407;
        *(_BYTE *)(a6 + 56) = 5;
        v387 = v404[13];
        v385 = 7;
      }
      else
      {
        v384 = 0;
        v639 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v640 = v639[12];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v640;
        *(_BYTE *)(a6 + 96) = 6;
        v641 = v639[10];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v641;
        *(_BYTE *)(a6 + 36) = 4;
        v642 = v639[11];
        *(_BYTE *)(a6 + 40) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_DWORD *)(a6 + 48) = a5;
        *(_DWORD *)(a6 + 52) = v642;
        *(_BYTE *)(a6 + 56) = 5;
        v387 = v639[13];
        v385 = 7;
        LODWORD(v386) = a5;
      }
LABEL_434:
      *(_BYTE *)(a6 + 100) = v383;
      *(_DWORD *)(a6 + 104) = v384;
      *(_DWORD *)(a6 + 108) = v386;
      *(_DWORD *)(a6 + 112) = v387;
      *(_BYTE *)(a6 + 116) = v385;
      if (*(_BYTE *)(a6 + 320))
      {
        LOBYTE(v643) = 1;
        *(_BYTE *)(a6 + 320) = 1;
        v644 = -1;
        *(_DWORD *)(a6 + 324) = -1;
        *(_QWORD *)(a6 + 328) = -1;
LABEL_436:
        v645 = 8;
        *(_BYTE *)(a6 + 336) = 8;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        *(_DWORD *)(a6 + 512) = -1;
        *(_BYTE *)(a6 + 516) = 8;
        *(_BYTE *)(a6 + 520) = 1;
        *(_DWORD *)(a6 + 524) = -1;
        *(_QWORD *)(a6 + 528) = -1;
        LODWORD(v646) = -1;
        v647 = -1;
        *(_BYTE *)(a6 + 536) = 8;
        goto LABEL_647;
      }
      v643 = v8[10];
      if (v643)
      {
        v648 = *(_DWORD *)(v7 + 136);
        v649 = a4[1] + (unsigned __int16)v648;
        v650 = a4[2];
        v646 = *(unsigned int *)(a6 + 328);
        v651 = v646 & 0xFFFFFFFFCFFFFFFFLL;
        v652 = *(_QWORD *)(v7 + 184);
        v653 = (int *)(v652 + 4488 * (v646 & 0xFFFFFFFFCFFFFFFFLL));
        v655 = *v653;
        v654 = v653[1];
        v656 = v653[2];
        v657 = v653[3];
        v658 = *a4 - *v653;
        v660 = *a4 < *v653 || v649 < v654 || v650 < v656;
        if (v660
          || ((v663 = v653 + 4, v661 = v653[4], v662 = v663[1], *a4 < v657) ? (v664 = v649 < v661) : (v664 = 0),
              v664 ? (v665 = v650 < v662) : (v665 = 0),
              !v665))
        {
          v2082 = v654;
          v666 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v648 = *(_DWORD *)(v2092 + 136);
          v652 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v666;
          v654 = v2082;
        }
        v667 = (v657 - v655) >> 1;
        if (v667 != v648)
        {
          v668 = v650 - v656;
          v669 = v649 - v654;
          while (1)
          {
            result = (4 * ((v668 & v667) != 0)) | (8 * ((v669 & v667) != 0));
            LODWORD(v646) = *(_DWORD *)(v652
                                      + 4488 * (v646 & 0xCFFFFFFF)
                                      + (result | (16 * ((v658 & v667) != 0)))
                                      + 24);
            if ((v646 & 0x80000000) != 0)
              break;
            v658 -= v658 & v667;
            v669 -= v669 & v667;
            v668 -= v668 & v667;
            v667 >>= 1;
            if (v667 == v648)
            {
              v651 = v646 & 0xCFFFFFFF;
              goto LABEL_459;
            }
          }
          LOBYTE(v643) = 1;
          *(_BYTE *)(a6 + 320) = 1;
          *((_QWORD *)v8 + 5) = -1;
          v644 = -1;
          *(_DWORD *)(a6 + 332) = -1;
          goto LABEL_436;
        }
LABEL_459:
        LOBYTE(v643) = 0;
        v644 = 0;
        v670 = (_DWORD *)(v652 + 4488 * v651);
        v671 = v670[6];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v646;
        *(_DWORD *)(a6 + 332) = v671;
        *(_BYTE *)(a6 + 336) = 0;
        v672 = v670[10];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v646;
        *(_DWORD *)(a6 + 512) = v672;
        *(_BYTE *)(a6 + 516) = 4;
        v673 = v670[11];
        *(_BYTE *)(a6 + 520) = 0;
        *(_DWORD *)(a6 + 524) = 0;
        *(_DWORD *)(a6 + 528) = v646;
        *(_DWORD *)(a6 + 532) = v673;
        *(_BYTE *)(a6 + 536) = 5;
        v647 = v670[7];
        v645 = 1;
      }
      else
      {
        v644 = 0;
        v916 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v917 = v916[6];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v917;
        *(_BYTE *)(a6 + 336) = 0;
        v918 = v916[10];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v918;
        *(_BYTE *)(a6 + 516) = 4;
        v919 = v916[11];
        *(_BYTE *)(a6 + 520) = 0;
        *(_DWORD *)(a6 + 524) = 0;
        *(_DWORD *)(a6 + 528) = a5;
        *(_DWORD *)(a6 + 532) = v919;
        *(_BYTE *)(a6 + 536) = 5;
        v647 = v916[7];
        v645 = 1;
        LODWORD(v646) = a5;
      }
LABEL_647:
      *(_BYTE *)(a6 + 340) = v643;
      *(_DWORD *)(a6 + 344) = v644;
      *(_DWORD *)(a6 + 348) = v646;
      *(_DWORD *)(a6 + 352) = v647;
      *(_BYTE *)(a6 + 356) = v645;
      if (*(_BYTE *)(a6 + 240))
      {
LABEL_648:
        LOBYTE(v920) = 1;
        *(_BYTE *)(a6 + 240) = 1;
        *(_QWORD *)(a6 + 244) = -1;
        v921 = -1;
        *(_DWORD *)(a6 + 252) = -1;
        v922 = 8;
        *(_BYTE *)(a6 + 256) = 8;
        *(_BYTE *)(a6 + 420) = 1;
        *(_QWORD *)(a6 + 424) = -1;
        *(_DWORD *)(a6 + 432) = -1;
        *(_BYTE *)(a6 + 436) = 8;
        *(_BYTE *)(a6 + 360) = 1;
        *(_DWORD *)(a6 + 364) = -1;
        *(_QWORD *)(a6 + 368) = -1;
        LODWORD(v923) = -1;
        v924 = -1;
        *(_BYTE *)(a6 + 376) = 8;
        goto LABEL_857;
      }
      v920 = *(_DWORD *)(a6 + 244);
      if (v920)
      {
        v925 = *(_DWORD *)(v7 + 136);
        v926 = a4[1];
        v927 = a4[2] - (unsigned __int16)v925;
        v923 = *(unsigned int *)(a6 + 248);
        v928 = v923 & 0xFFFFFFFFCFFFFFFFLL;
        v929 = *(_QWORD *)(v7 + 184);
        v930 = (int *)(v929 + 4488 * (v923 & 0xFFFFFFFFCFFFFFFFLL));
        v932 = *v930;
        v931 = v930[1];
        v933 = v930[2];
        v934 = v930[3];
        v935 = *a4 - *v930;
        v937 = *a4 < *v930 || v926 < v931 || v927 < v933;
        if (v937
          || ((v940 = v930 + 4, v938 = v930[4], v939 = v940[1], *a4 < v934) ? (v941 = v926 < v938) : (v941 = 0),
              v941 ? (v942 = v927 < v939) : (v942 = 0),
              !v942))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v925 = *(_DWORD *)(v2092 + 136);
          v929 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v943 = (v934 - v932) >> 1;
        if (v943 != v925)
        {
          v944 = v927 - v933;
          v945 = v926 - v931;
          while (1)
          {
            result = (4 * ((v944 & v943) != 0)) | (8 * ((v945 & v943) != 0));
            LODWORD(v923) = *(_DWORD *)(v929
                                      + 4488 * (v923 & 0xCFFFFFFF)
                                      + (result | (16 * ((v935 & v943) != 0)))
                                      + 24);
            if ((v923 & 0x80000000) != 0)
              goto LABEL_648;
            v935 -= v935 & v943;
            v945 -= v945 & v943;
            v944 -= v944 & v943;
            v943 >>= 1;
            if (v943 == v925)
            {
              v928 = v923 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v920) = 0;
        v921 = 0;
        v946 = (_DWORD *)(v929 + 4488 * v928);
        v947 = v946[9];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = v923;
        *(_DWORD *)(a6 + 252) = v947;
        *(_BYTE *)(a6 + 256) = 3;
        v948 = v946[13];
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = v923;
        *(_DWORD *)(a6 + 432) = v948;
        *(_BYTE *)(a6 + 436) = 7;
        v949 = v946[11];
        *(_BYTE *)(a6 + 360) = 0;
        *(_DWORD *)(a6 + 364) = 0;
        *(_DWORD *)(a6 + 368) = v923;
        *(_DWORD *)(a6 + 372) = v949;
        *(_BYTE *)(a6 + 376) = 5;
        v924 = v946[7];
        v922 = 1;
      }
      else
      {
        v921 = 0;
        v1186 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1187 = v1186[9];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v1187;
        *(_BYTE *)(a6 + 256) = 3;
        v1188 = v1186[13];
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = a5;
        *(_DWORD *)(a6 + 432) = v1188;
        *(_BYTE *)(a6 + 436) = 7;
        v1189 = v1186[11];
        *(_BYTE *)(a6 + 360) = 0;
        *(_DWORD *)(a6 + 364) = 0;
        *(_DWORD *)(a6 + 368) = a5;
        *(_DWORD *)(a6 + 372) = v1189;
        *(_BYTE *)(a6 + 376) = 5;
        v924 = v1186[7];
        v922 = 1;
        LODWORD(v923) = a5;
      }
LABEL_857:
      *(_BYTE *)(a6 + 180) = v920;
      *(_DWORD *)(a6 + 184) = v921;
      *(_DWORD *)(a6 + 188) = v923;
      *(_DWORD *)(a6 + 192) = v924;
      *(_BYTE *)(a6 + 196) = v922;
      if (*(_BYTE *)(a6 + 140))
      {
LABEL_858:
        v1190 = 1;
        *(_BYTE *)(a6 + 140) = 1;
        *(_QWORD *)(a6 + 144) = -1;
        v1191 = -1;
        *(_DWORD *)(a6 + 152) = -1;
        v1192 = 8;
        *(_BYTE *)(a6 + 156) = 8;
        LODWORD(v1193) = -1;
        v1194 = -1;
        goto LABEL_1065;
      }
      if (*(_DWORD *)(a6 + 144))
      {
        v1195 = *(_DWORD *)(v7 + 136);
        v1196 = *a4 - (unsigned __int16)v1195;
        v1197 = a4[1] + (unsigned __int16)v1195;
        v1198 = a4[2];
        v1193 = *(unsigned int *)(a6 + 148);
        v1199 = v1193 & 0xFFFFFFFFCFFFFFFFLL;
        v1200 = *(_QWORD *)(v7 + 184);
        v1201 = (int *)(v1200 + 4488 * (v1193 & 0xFFFFFFFFCFFFFFFFLL));
        v1203 = *v1201;
        v1202 = v1201[1];
        v1204 = v1201[2];
        v1205 = v1201[3];
        v1206 = v1196 - *v1201;
        v1208 = v1196 < *v1201 || v1197 < v1202 || v1198 < v1204;
        if (v1208
          || ((v1211 = v1201 + 4, v1209 = v1201[4], v1210 = v1211[1], v1196 < v1205)
            ? (v1212 = v1197 < v1209)
            : (v1212 = 0),
              v1212 ? (v1213 = v1198 < v1210) : (v1213 = 0),
              !v1213))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1195 = *(_DWORD *)(v2092 + 136);
          v1200 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1214 = (v1205 - v1203) >> 1;
        if (v1214 != v1195)
        {
          v1215 = v1198 - v1204;
          v1216 = v1197 - v1202;
          while (1)
          {
            result = (4 * ((v1215 & v1214) != 0)) | (8 * ((v1216 & v1214) != 0));
            LODWORD(v1193) = *(_DWORD *)(v1200
                                       + 4488 * (v1193 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1206 & v1214) != 0)))
                                       + 24);
            if ((v1193 & 0x80000000) != 0)
              goto LABEL_858;
            v1206 -= v1206 & v1214;
            v1216 -= v1216 & v1214;
            v1215 -= v1215 & v1214;
            v1214 >>= 1;
            if (v1214 == v1195)
            {
              v1199 = v1193 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1190 = 0;
        v1191 = 0;
        v1217 = v1200 + 4488 * v1199;
        v1218 = *(_DWORD *)(v1217 + 40);
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = v1193;
        *(_DWORD *)(a6 + 152) = v1218;
        *(_BYTE *)(a6 + 156) = 4;
        v1194 = *(_DWORD *)(v1217 + 44);
        v1192 = 5;
      }
      else
      {
        v1190 = 0;
        v1191 = 0;
        v1444 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1445 = *(_DWORD *)(v1444 + 40);
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v1445;
        *(_BYTE *)(a6 + 156) = 4;
        v1194 = *(_DWORD *)(v1444 + 44);
        v1192 = 5;
        LODWORD(v1193) = a5;
      }
LABEL_1065:
      *(_BYTE *)(a6 + 160) = v1190;
      *(_DWORD *)(a6 + 164) = v1191;
      *(_DWORD *)(a6 + 168) = v1193;
      *(_DWORD *)(a6 + 172) = v1194;
      *(_BYTE *)(a6 + 176) = v1192;
      if (*(_BYTE *)(a6 + 60))
      {
LABEL_1066:
        v1446 = 1;
        *(_BYTE *)(a6 + 60) = 1;
        *(_QWORD *)(a6 + 64) = -1;
        v1447 = -1;
        *(_DWORD *)(a6 + 72) = -1;
        v1448 = 8;
        *(_BYTE *)(a6 + 76) = 8;
        LODWORD(v1449) = -1;
        v1450 = -1;
        goto LABEL_1273;
      }
      if (*(_DWORD *)(a6 + 64))
      {
        v1451 = *(_DWORD *)(v7 + 136);
        v1452 = a4[1];
        v1453 = *a4 - (unsigned __int16)v1451;
        v1454 = a4[2] - (unsigned __int16)v1451;
        v1449 = *(unsigned int *)(a6 + 68);
        v1455 = v1449 & 0xFFFFFFFFCFFFFFFFLL;
        v1456 = *(_QWORD *)(v7 + 184);
        v1457 = (int *)(v1456 + 4488 * (v1449 & 0xFFFFFFFFCFFFFFFFLL));
        v1459 = *v1457;
        v1458 = v1457[1];
        v1460 = v1457[2];
        v1461 = v1457[3];
        v1462 = v1453 - *v1457;
        v1464 = v1453 < *v1457 || v1452 < v1458 || v1454 < v1460;
        if (v1464
          || ((v1467 = v1457 + 4, v1465 = v1457[4], v1466 = v1467[1], v1453 < v1461)
            ? (v1468 = v1452 < v1465)
            : (v1468 = 0),
              v1468 ? (v1469 = v1454 < v1466) : (v1469 = 0),
              !v1469))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1451 = *(_DWORD *)(v2092 + 136);
          v1456 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1470 = (v1461 - v1459) >> 1;
        if (v1470 != v1451)
        {
          v1471 = v1454 - v1460;
          v1472 = v1452 - v1458;
          while (1)
          {
            result = (4 * ((v1471 & v1470) != 0)) | (8 * ((v1472 & v1470) != 0));
            LODWORD(v1449) = *(_DWORD *)(v1456
                                       + 4488 * (v1449 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1462 & v1470) != 0)))
                                       + 24);
            if ((v1449 & 0x80000000) != 0)
              goto LABEL_1066;
            v1462 -= v1462 & v1470;
            v1472 -= v1472 & v1470;
            v1471 -= v1471 & v1470;
            v1470 >>= 1;
            if (v1470 == v1451)
            {
              v1455 = v1449 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1446 = 0;
        v1447 = 0;
        v1473 = v1456 + 4488 * v1455;
        v1474 = *(_DWORD *)(v1473 + 52);
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = v1449;
        *(_DWORD *)(a6 + 72) = v1474;
        *(_BYTE *)(a6 + 76) = 7;
        v1450 = *(_DWORD *)(v1473 + 44);
        v1448 = 5;
      }
      else
      {
        v1446 = 0;
        v1447 = 0;
        v1689 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1690 = *(_DWORD *)(v1689 + 52);
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = a5;
        *(_DWORD *)(a6 + 72) = v1690;
        *(_BYTE *)(a6 + 76) = 7;
        v1450 = *(_DWORD *)(v1689 + 44);
        v1448 = 5;
        LODWORD(v1449) = a5;
      }
LABEL_1273:
      *(_BYTE *)a6 = v1446;
      *(_DWORD *)(a6 + 4) = v1447;
      *(_DWORD *)(a6 + 8) = v1449;
      *(_DWORD *)(a6 + 12) = v1450;
      *(_BYTE *)(a6 + 16) = v1448;
      if (*(_BYTE *)(a6 + 300))
      {
LABEL_1274:
        v1691 = 1;
        *(_BYTE *)(a6 + 300) = 1;
        *(_QWORD *)(a6 + 304) = -1;
        v1692 = -1;
        *(_DWORD *)(a6 + 312) = -1;
        v1693 = 8;
        *(_BYTE *)(a6 + 316) = 8;
        LODWORD(v1694) = -1;
        v1695 = -1;
        goto LABEL_1469;
      }
      if (*(_DWORD *)(a6 + 304))
      {
        v1696 = *(_DWORD *)(v7 + 136);
        v1697 = a4[1] + (unsigned __int16)v1696;
        v1698 = a4[2] - (unsigned __int16)v1696;
        v1694 = *(unsigned int *)(a6 + 308);
        v1699 = v1694 & 0xFFFFFFFFCFFFFFFFLL;
        v1700 = *(_QWORD *)(v7 + 184);
        v1701 = (int *)(v1700 + 4488 * (v1694 & 0xFFFFFFFFCFFFFFFFLL));
        v1703 = *v1701;
        v1702 = v1701[1];
        v1704 = v1701[2];
        v1705 = v1701[3];
        v1706 = *a4 - *v1701;
        v1708 = *a4 < *v1701 || v1697 < v1702 || v1698 < v1704;
        if (v1708
          || ((v1711 = v1701 + 4, v1709 = v1701[4], v1710 = v1711[1], *a4 < v1705)
            ? (v1712 = v1697 < v1709)
            : (v1712 = 0),
              v1712 ? (v1713 = v1698 < v1710) : (v1713 = 0),
              !v1713))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1696 = *(_DWORD *)(v2092 + 136);
          v1700 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1714 = (v1705 - v1703) >> 1;
        if (v1714 != v1696)
        {
          v1715 = v1698 - v1704;
          v1716 = v1697 - v1702;
          while (1)
          {
            result = (4 * ((v1715 & v1714) != 0)) | (8 * ((v1716 & v1714) != 0));
            LODWORD(v1694) = *(_DWORD *)(v1700
                                       + 4488 * (v1694 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1706 & v1714) != 0)))
                                       + 24);
            if ((v1694 & 0x80000000) != 0)
              goto LABEL_1274;
            v1706 -= v1706 & v1714;
            v1716 -= v1716 & v1714;
            v1715 -= v1715 & v1714;
            v1714 >>= 1;
            if (v1714 == v1696)
            {
              v1699 = v1694 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1691 = 0;
        v1692 = 0;
        v1717 = v1700 + 4488 * v1699;
        v1718 = *(_DWORD *)(v1717 + 28);
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = v1694;
        *(_DWORD *)(a6 + 312) = v1718;
        *(_BYTE *)(a6 + 316) = 1;
        v1695 = *(_DWORD *)(v1717 + 44);
        v1693 = 5;
      }
      else
      {
        v1691 = 0;
        v1692 = 0;
        v1914 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1915 = *(_DWORD *)(v1914 + 28);
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = a5;
        *(_DWORD *)(a6 + 312) = v1915;
        *(_BYTE *)(a6 + 316) = 1;
        v1695 = *(_DWORD *)(v1914 + 44);
        v1693 = 5;
        LODWORD(v1694) = a5;
      }
LABEL_1469:
      *(_BYTE *)(a6 + 480) = v1691;
      *(_DWORD *)(a6 + 484) = v1692;
      *(_DWORD *)(a6 + 488) = v1694;
      *(_DWORD *)(a6 + 492) = v1695;
      *(_BYTE *)(a6 + 496) = v1693;
      if (*(_BYTE *)(a6 + 120))
      {
        *(_BYTE *)(a6 + 120) = 1;
        *(_QWORD *)(a6 + 124) = -1;
        v1916 = 8;
        v1917 = -1;
      }
      else if (*(_DWORD *)(a6 + 124))
      {
        v1918 = *(_DWORD *)(v7 + 136);
        v1919 = *a4 - (unsigned __int16)v1918;
        v1920 = a4[1] + (unsigned __int16)v1918;
        v1921 = a4[2] - (unsigned __int16)v1918;
        v1922 = *(unsigned int *)(a6 + 128);
        v1923 = v1922 & 0xFFFFFFFFCFFFFFFFLL;
        v1924 = *(_QWORD *)(v7 + 184);
        v1925 = (int *)(v1924 + 4488 * (v1922 & 0xFFFFFFFFCFFFFFFFLL));
        v1927 = *v1925;
        v1926 = v1925[1];
        v1928 = v1925[2];
        v1929 = v1925[3];
        v1930 = v1919 - *v1925;
        v1932 = v1919 < *v1925 || v1920 < v1926 || v1921 < v1928;
        if (v1932
          || ((v1935 = v1925 + 4, v1933 = v1925[4], v1934 = v1935[1], v1919 < v1929)
            ? (v1936 = v1920 < v1933)
            : (v1936 = 0),
              v1936 ? (v1937 = v1921 < v1934) : (v1937 = 0),
              !v1937))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          v1918 = *(_DWORD *)(v2092 + 136);
          v1924 = *(_QWORD *)(v2092 + 184);
        }
        v1938 = (v1929 - v1927) >> 1;
        if (v1938 == v1918)
        {
          a5 = v2093;
LABEL_1605:
          v2053 = 0;
          v2054 = 0;
          v1917 = *(_DWORD *)(v1924 + 4488 * v1923 + 44);
          v1916 = 5;
        }
        else
        {
          v2051 = v1921 - v1928;
          v2052 = v1920 - v1926;
          a5 = v2093;
          while (1)
          {
            result = (4 * ((v2051 & v1938) != 0)) | (8 * ((v2052 & v1938) != 0));
            LODWORD(v1922) = *(_DWORD *)(v1924
                                       + 4488 * (v1922 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1930 & v1938) != 0)))
                                       + 24);
            if ((v1922 & 0x80000000) != 0)
              break;
            v1930 -= v1930 & v1938;
            v2052 -= v2052 & v1938;
            v2051 -= v2051 & v1938;
            v1938 >>= 1;
            if (v1938 == v1918)
            {
              v1923 = v1922 & 0xCFFFFFFF;
              goto LABEL_1605;
            }
          }
          v1916 = 8;
          v2054 = -1;
          v2053 = 1;
          LODWORD(v1922) = -1;
          v1917 = -1;
        }
        *(_BYTE *)(a6 + 120) = v2053;
        *(_DWORD *)(a6 + 124) = v2054;
        *(_DWORD *)(a6 + 128) = v1922;
      }
      else
      {
        v1917 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 44);
        *(_BYTE *)(a6 + 120) = 0;
        *(_DWORD *)(a6 + 124) = 0;
        *(_DWORD *)(a6 + 128) = a5;
        v1916 = 5;
      }
      *(_DWORD *)(a6 + 132) = v1917;
      *(_BYTE *)(a6 + 136) = v1916;
      v2071 = 2;
      goto LABEL_1666;
    case 3:
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v29) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v30 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_15:
        v31 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 200) = 1;
        *(_QWORD *)(a6 + 204) = -1;
        *(_DWORD *)(a6 + 212) = -1;
        *(_BYTE *)(a6 + 216) = 8;
        *(_BYTE *)(a6 + 240) = 1;
        *(_QWORD *)(a6 + 244) = -1;
        *(_DWORD *)(a6 + 252) = -1;
        *(_BYTE *)(a6 + 256) = 8;
        *(_BYTE *)(a6 + 380) = 1;
        *(_QWORD *)(a6 + 384) = -1;
        *(_DWORD *)(a6 + 392) = -1;
        *(_BYTE *)(a6 + 396) = 8;
        *(_BYTE *)(a6 + 180) = 1;
        *(_QWORD *)(a6 + 184) = -1;
        *(_DWORD *)(a6 + 192) = -1;
        *(_BYTE *)(a6 + 196) = 8;
        *(_BYTE *)(a6 + 420) = 1;
        *(_QWORD *)(a6 + 424) = -1;
        *(_DWORD *)(a6 + 432) = -1;
        LODWORD(v32) = -1;
        v33 = -1;
        *(_BYTE *)(a6 + 436) = 8;
        goto LABEL_280;
      }
      v29 = *(_DWORD *)(a6 + 444);
      if (v29)
      {
        v165 = *(_DWORD *)(result + 136);
        v166 = a4[1];
        v167 = *a4 + (unsigned __int16)v165;
        v168 = a4[2];
        v32 = *(unsigned int *)(a6 + 448);
        v169 = v32 & 0xFFFFFFFFCFFFFFFFLL;
        v170 = *(_QWORD *)(result + 184);
        v171 = (int *)(v170 + 4488 * (v32 & 0xFFFFFFFFCFFFFFFFLL));
        v173 = *v171;
        v172 = v171[1];
        v174 = v171[2];
        v175 = v171[3];
        v176 = v167 - *v171;
        v178 = v167 < *v171 || v166 < v172 || v168 < v174;
        if (v178
          || ((v181 = v171 + 4, v179 = v171[4], v180 = v181[1], v167 < v175) ? (v182 = v166 < v179) : (v182 = 0),
              v182 ? (v183 = v168 < v180) : (v183 = 0),
              !v183))
        {
          v2076 = v172;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v165 = *(_DWORD *)(v2092 + 136);
          v170 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v172 = v2076;
        }
        v184 = (v175 - v173) >> 1;
        if (v184 != v165)
        {
          v185 = v168 - v174;
          v186 = v166 - v172;
          while (1)
          {
            result = (4 * ((v185 & v184) != 0)) | (8 * ((v186 & v184) != 0));
            LODWORD(v32) = *(_DWORD *)(v170
                                     + 4488 * (v32 & 0xCFFFFFFF)
                                     + (result | (16 * ((v176 & v184) != 0)))
                                     + 24);
            if ((v32 & 0x80000000) != 0)
              break;
            v176 -= v176 & v184;
            v186 -= v186 & v184;
            v185 -= v185 & v184;
            v184 >>= 1;
            if (v184 == v165)
            {
              v169 = v32 & 0xCFFFFFFF;
              goto LABEL_136;
            }
          }
          LOBYTE(v29) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v30 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_15;
        }
LABEL_136:
        LOBYTE(v29) = 0;
        v30 = 0;
        v187 = (_DWORD *)(v170 + 4488 * v169);
        v188 = v187[13];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v32;
        *(_DWORD *)(a6 + 452) = v188;
        *(_BYTE *)(a6 + 456) = 7;
        v189 = v187[7];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = v32;
        *(_DWORD *)(a6 + 212) = v189;
        *(_BYTE *)(a6 + 216) = 1;
        v190 = v187[8];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = v32;
        *(_DWORD *)(a6 + 252) = v190;
        *(_BYTE *)(a6 + 256) = 2;
        v191 = v187[11];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = v32;
        *(_DWORD *)(a6 + 392) = v191;
        *(_BYTE *)(a6 + 396) = 5;
        v192 = v187[6];
        *(_BYTE *)(a6 + 180) = 0;
        *(_DWORD *)(a6 + 184) = 0;
        *(_DWORD *)(a6 + 188) = v32;
        *(_DWORD *)(a6 + 192) = v192;
        *(_BYTE *)(a6 + 196) = 0;
        v193 = v187[12];
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = v32;
        *(_DWORD *)(a6 + 432) = v193;
        *(_BYTE *)(a6 + 436) = 6;
        v33 = v187[10];
        v31 = 4;
      }
      else
      {
        v30 = 0;
        v408 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v409 = v408[13];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v409;
        *(_BYTE *)(a6 + 456) = 7;
        v410 = v408[7];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v410;
        *(_BYTE *)(a6 + 216) = 1;
        v411 = v408[8];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v411;
        *(_BYTE *)(a6 + 256) = 2;
        v412 = v408[11];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v412;
        *(_BYTE *)(a6 + 396) = 5;
        v413 = v408[6];
        *(_BYTE *)(a6 + 180) = 0;
        *(_DWORD *)(a6 + 184) = 0;
        *(_DWORD *)(a6 + 188) = a5;
        *(_DWORD *)(a6 + 192) = v413;
        *(_BYTE *)(a6 + 196) = 0;
        v414 = v408[12];
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = a5;
        *(_DWORD *)(a6 + 432) = v414;
        *(_BYTE *)(a6 + 436) = 6;
        v33 = v408[10];
        v31 = 4;
        LODWORD(v32) = a5;
      }
LABEL_280:
      *(_BYTE *)(a6 + 360) = v29;
      *(_DWORD *)(a6 + 364) = v30;
      *(_DWORD *)(a6 + 368) = v32;
      *(_DWORD *)(a6 + 372) = v33;
      *(_BYTE *)(a6 + 376) = v31;
      if (*(_BYTE *)(a6 + 80))
      {
LABEL_281:
        LOBYTE(v415) = 1;
        *(_BYTE *)(a6 + 80) = 1;
        *(_QWORD *)(a6 + 84) = -1;
        v416 = -1;
        *(_DWORD *)(a6 + 92) = -1;
        v417 = 8;
        *(_BYTE *)(a6 + 96) = 8;
        *(_BYTE *)(a6 + 20) = 1;
        *(_QWORD *)(a6 + 24) = -1;
        *(_DWORD *)(a6 + 32) = -1;
        *(_BYTE *)(a6 + 36) = 8;
        *(_BYTE *)a6 = 1;
        *(_QWORD *)(a6 + 4) = -1;
        *(_DWORD *)(a6 + 12) = -1;
        LODWORD(v418) = -1;
        v419 = -1;
        *(_BYTE *)(a6 + 16) = 8;
        goto LABEL_461;
      }
      v415 = *(_DWORD *)(a6 + 84);
      if (v415)
      {
        v420 = *(_DWORD *)(v7 + 136);
        v421 = a4[1];
        v422 = *a4 - (unsigned __int16)v420;
        v423 = a4[2];
        v418 = *(unsigned int *)(a6 + 88);
        v424 = v418 & 0xFFFFFFFFCFFFFFFFLL;
        v425 = *(_QWORD *)(v7 + 184);
        v426 = (int *)(v425 + 4488 * (v418 & 0xFFFFFFFFCFFFFFFFLL));
        v428 = *v426;
        v427 = v426[1];
        v430 = v426[2];
        v429 = v426[3];
        v431 = v422 - *v426;
        if (v422 < *v426 || v421 < v427 || v423 < v430 || v422 >= v429 || v421 >= v426[4] || v423 >= v426[5])
        {
          v432 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v420 = *(_DWORD *)(v2092 + 136);
          v425 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v432;
          v424 = v418 & 0xCFFFFFFF;
        }
        v433 = (v429 - v428) >> 1;
        if (v433 != v420)
        {
          v434 = v423 - v430;
          v435 = v421 - v427;
          while (1)
          {
            result = (4 * ((v434 & v433) != 0)) | (8 * ((v435 & v433) != 0));
            LODWORD(v418) = *(_DWORD *)(v425
                                      + 4488 * (v418 & 0xCFFFFFFF)
                                      + (result | (16 * ((v431 & v433) != 0)))
                                      + 24);
            if ((v418 & 0x80000000) != 0)
              goto LABEL_281;
            v431 -= v431 & v433;
            v435 -= v435 & v433;
            v434 -= v434 & v433;
            v433 >>= 1;
            if (v433 == v420)
            {
              v424 = v418 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v415) = 0;
        v416 = 0;
        v436 = (_DWORD *)(v425 + 4488 * v424);
        v437 = v436[13];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = v418;
        *(_DWORD *)(a6 + 92) = v437;
        *(_BYTE *)(a6 + 96) = 7;
        v438 = v436[11];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = v418;
        *(_DWORD *)(a6 + 32) = v438;
        *(_BYTE *)(a6 + 36) = 5;
        v439 = v436[10];
        *(_BYTE *)a6 = 0;
        *(_DWORD *)(a6 + 4) = 0;
        *(_DWORD *)(a6 + 8) = v418;
        *(_DWORD *)(a6 + 12) = v439;
        *(_BYTE *)(a6 + 16) = 4;
        v419 = v436[12];
        v417 = 6;
      }
      else
      {
        v416 = 0;
        v674 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v675 = v674[13];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v675;
        *(_BYTE *)(a6 + 96) = 7;
        v676 = v674[11];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v676;
        *(_BYTE *)(a6 + 36) = 5;
        v677 = v674[10];
        *(_BYTE *)a6 = 0;
        *(_DWORD *)(a6 + 4) = 0;
        *(_DWORD *)(a6 + 8) = a5;
        *(_DWORD *)(a6 + 12) = v677;
        *(_BYTE *)(a6 + 16) = 4;
        v419 = v674[12];
        v417 = 6;
        LODWORD(v418) = a5;
      }
LABEL_461:
      *(_BYTE *)(a6 + 60) = v415;
      *(_DWORD *)(a6 + 64) = v416;
      *(_DWORD *)(a6 + 68) = v418;
      *(_DWORD *)(a6 + 72) = v419;
      *(_BYTE *)(a6 + 76) = v417;
      if (*(_BYTE *)(a6 + 320))
      {
        LOBYTE(v678) = 1;
        *(_BYTE *)(a6 + 320) = 1;
        v679 = -1;
        *(_DWORD *)(a6 + 324) = -1;
        *(_QWORD *)(a6 + 328) = -1;
LABEL_463:
        v680 = 8;
        *(_BYTE *)(a6 + 336) = 8;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        *(_DWORD *)(a6 + 512) = -1;
        *(_BYTE *)(a6 + 516) = 8;
        *(_BYTE *)(a6 + 480) = 1;
        *(_DWORD *)(a6 + 484) = -1;
        *(_QWORD *)(a6 + 488) = -1;
        LODWORD(v681) = -1;
        v682 = -1;
        *(_BYTE *)(a6 + 496) = 8;
        goto LABEL_673;
      }
      v678 = v8[10];
      if (v678)
      {
        v683 = *(_DWORD *)(v7 + 136);
        v684 = a4[1] + (unsigned __int16)v683;
        v685 = a4[2];
        v681 = *(unsigned int *)(a6 + 328);
        v686 = v681 & 0xFFFFFFFFCFFFFFFFLL;
        v687 = *(_QWORD *)(v7 + 184);
        v688 = (int *)(v687 + 4488 * (v681 & 0xFFFFFFFFCFFFFFFFLL));
        v690 = *v688;
        v689 = v688[1];
        v691 = v688[2];
        v692 = v688[3];
        v693 = *a4 - *v688;
        v695 = *a4 < *v688 || v684 < v689 || v685 < v691;
        if (v695
          || ((v698 = v688 + 4, v696 = v688[4], v697 = v698[1], *a4 < v692) ? (v699 = v684 < v696) : (v699 = 0),
              v699 ? (v700 = v685 < v697) : (v700 = 0),
              !v700))
        {
          v2083 = v689;
          v701 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v683 = *(_DWORD *)(v2092 + 136);
          v687 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v701;
          v689 = v2083;
        }
        v702 = (v692 - v690) >> 1;
        if (v702 != v683)
        {
          v703 = v685 - v691;
          v704 = v684 - v689;
          while (1)
          {
            result = (4 * ((v703 & v702) != 0)) | (8 * ((v704 & v702) != 0));
            LODWORD(v681) = *(_DWORD *)(v687
                                      + 4488 * (v681 & 0xCFFFFFFF)
                                      + (result | (16 * ((v693 & v702) != 0)))
                                      + 24);
            if ((v681 & 0x80000000) != 0)
              break;
            v693 -= v693 & v702;
            v704 -= v704 & v702;
            v703 -= v703 & v702;
            v702 >>= 1;
            if (v702 == v683)
            {
              v686 = v681 & 0xCFFFFFFF;
              goto LABEL_486;
            }
          }
          LOBYTE(v678) = 1;
          *(_BYTE *)(a6 + 320) = 1;
          *((_QWORD *)v8 + 5) = -1;
          v679 = -1;
          *(_DWORD *)(a6 + 332) = -1;
          goto LABEL_463;
        }
LABEL_486:
        LOBYTE(v678) = 0;
        v679 = 0;
        v680 = 0;
        v705 = (_DWORD *)(v687 + 4488 * v686);
        v706 = v705[7];
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v681;
        *(_DWORD *)(a6 + 332) = v706;
        *(_BYTE *)(a6 + 336) = 1;
        v707 = v705[11];
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v681;
        *(_DWORD *)(a6 + 512) = v707;
        *(_BYTE *)(a6 + 516) = 5;
        *(_DWORD *)(a6 + 492) = v705[10];
        *(_BYTE *)(a6 + 496) = 4;
        *(_BYTE *)(a6 + 320) = 0;
        *(_BYTE *)(a6 + 500) = 0;
        *(_BYTE *)(a6 + 480) = 0;
        *(_DWORD *)(a6 + 484) = 0;
        *(_DWORD *)(a6 + 488) = v681;
        v682 = v705[6];
      }
      else
      {
        v679 = 0;
        v680 = 0;
        v950 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v951 = v950[7];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v951;
        *(_BYTE *)(a6 + 336) = 1;
        v952 = v950[11];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v952;
        *(_BYTE *)(a6 + 516) = 5;
        v953 = v950[10];
        *(_BYTE *)(a6 + 480) = 0;
        *(_DWORD *)(a6 + 484) = 0;
        *(_DWORD *)(a6 + 488) = a5;
        *(_DWORD *)(a6 + 492) = v953;
        *(_BYTE *)(a6 + 496) = 4;
        v682 = v950[6];
        LODWORD(v681) = a5;
      }
LABEL_673:
      *(_BYTE *)(a6 + 300) = v678;
      *(_DWORD *)(a6 + 304) = v679;
      *(_DWORD *)(a6 + 308) = v681;
      *(_DWORD *)(a6 + 312) = v682;
      *(_BYTE *)(a6 + 316) = v680;
      if (*(_BYTE *)(a6 + 280))
      {
        LOBYTE(v954) = 1;
        *(_BYTE *)(a6 + 280) = 1;
        v955 = -1;
        *(_DWORD *)(a6 + 284) = -1;
        *(_QWORD *)(a6 + 288) = -1;
LABEL_675:
        v956 = 8;
        *(_BYTE *)(a6 + 296) = 8;
        *(_BYTE *)(a6 + 460) = 1;
        *(_QWORD *)(a6 + 464) = -1;
        *(_DWORD *)(a6 + 472) = -1;
        *(_BYTE *)(a6 + 476) = 8;
        *(_BYTE *)(a6 + 400) = 1;
        *(_DWORD *)(a6 + 404) = -1;
        *(_QWORD *)(a6 + 408) = -1;
        LODWORD(v957) = -1;
        v958 = -1;
        *(_BYTE *)(a6 + 416) = 8;
        goto LABEL_883;
      }
      v954 = *v8;
      if (*v8)
      {
        v959 = *(_DWORD *)(v7 + 136);
        v960 = a4[1];
        v961 = a4[2] + (unsigned __int16)v959;
        v957 = *(unsigned int *)(a6 + 288);
        v962 = v957 & 0xFFFFFFFFCFFFFFFFLL;
        v963 = *(_QWORD *)(v7 + 184);
        v964 = (int *)(v963 + 4488 * (v957 & 0xFFFFFFFFCFFFFFFFLL));
        v966 = *v964;
        v965 = v964[1];
        v967 = v964[2];
        v968 = v964[3];
        v969 = *a4 - *v964;
        v971 = *a4 < *v964 || v960 < v965 || v961 < v967;
        if (v971
          || ((v974 = v964 + 4, v972 = v964[4], v973 = v974[1], *a4 < v968) ? (v975 = v960 < v972) : (v975 = 0),
              v975 ? (v976 = v961 < v973) : (v976 = 0),
              !v976))
        {
          v2088 = v965;
          v977 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v959 = *(_DWORD *)(v2092 + 136);
          v963 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v977;
          v965 = v2088;
        }
        v978 = (v968 - v966) >> 1;
        if (v978 != v959)
        {
          v979 = v961 - v967;
          v980 = v960 - v965;
          while (1)
          {
            result = (4 * ((v979 & v978) != 0)) | (8 * ((v980 & v978) != 0));
            LODWORD(v957) = *(_DWORD *)(v963
                                      + 4488 * (v957 & 0xCFFFFFFF)
                                      + (result | (16 * ((v969 & v978) != 0)))
                                      + 24);
            if ((v957 & 0x80000000) != 0)
              break;
            v969 -= v969 & v978;
            v980 -= v980 & v978;
            v979 -= v979 & v978;
            v978 >>= 1;
            if (v978 == v959)
            {
              v962 = v957 & 0xCFFFFFFF;
              goto LABEL_698;
            }
          }
          LOBYTE(v954) = 1;
          *(_BYTE *)(a6 + 280) = 1;
          *(_QWORD *)v8 = -1;
          v955 = -1;
          *(_DWORD *)(a6 + 292) = -1;
          goto LABEL_675;
        }
LABEL_698:
        LOBYTE(v954) = 0;
        v955 = 0;
        v956 = 0;
        v981 = (_DWORD *)(v963 + 4488 * v962);
        v982 = v981[8];
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v957;
        *(_DWORD *)(a6 + 292) = v982;
        *(_BYTE *)(a6 + 296) = 2;
        v983 = v981[12];
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = v957;
        *(_DWORD *)(a6 + 472) = v983;
        *(_BYTE *)(a6 + 476) = 6;
        *(_DWORD *)(a6 + 412) = v981[10];
        *(_BYTE *)(a6 + 416) = 4;
        *(_BYTE *)(a6 + 280) = 0;
        *(_BYTE *)(a6 + 460) = 0;
        *(_BYTE *)(a6 + 400) = 0;
        *(_DWORD *)(a6 + 404) = 0;
        *(_DWORD *)(a6 + 408) = v957;
        v958 = v981[6];
      }
      else
      {
        v955 = 0;
        v956 = 0;
        v1219 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1220 = v1219[8];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v1220;
        *(_BYTE *)(a6 + 296) = 2;
        v1221 = v1219[12];
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = a5;
        *(_DWORD *)(a6 + 472) = v1221;
        *(_BYTE *)(a6 + 476) = 6;
        v1222 = v1219[10];
        *(_BYTE *)(a6 + 400) = 0;
        *(_DWORD *)(a6 + 404) = 0;
        *(_DWORD *)(a6 + 408) = a5;
        *(_DWORD *)(a6 + 412) = v1222;
        *(_BYTE *)(a6 + 416) = 4;
        v958 = v1219[6];
        LODWORD(v957) = a5;
      }
LABEL_883:
      *(_BYTE *)(a6 + 220) = v954;
      *(_DWORD *)(a6 + 224) = v955;
      *(_DWORD *)(a6 + 228) = v957;
      *(_DWORD *)(a6 + 232) = v958;
      *(_BYTE *)(a6 + 236) = v956;
      if (*(_BYTE *)(a6 + 140))
      {
LABEL_884:
        v1223 = 1;
        *(_BYTE *)(a6 + 140) = 1;
        *(_QWORD *)(a6 + 144) = -1;
        v1224 = -1;
        *(_DWORD *)(a6 + 152) = -1;
        v1225 = 8;
        *(_BYTE *)(a6 + 156) = 8;
        LODWORD(v1226) = -1;
        v1227 = -1;
        goto LABEL_1091;
      }
      if (*(_DWORD *)(a6 + 144))
      {
        v1228 = *(_DWORD *)(v7 + 136);
        v1229 = *a4 - (unsigned __int16)v1228;
        v1230 = a4[1] + (unsigned __int16)v1228;
        v1231 = a4[2];
        v1226 = *(unsigned int *)(a6 + 148);
        v1232 = v1226 & 0xFFFFFFFFCFFFFFFFLL;
        v1233 = *(_QWORD *)(v7 + 184);
        v1234 = (int *)(v1233 + 4488 * (v1226 & 0xFFFFFFFFCFFFFFFFLL));
        v1236 = *v1234;
        v1235 = v1234[1];
        v1237 = v1234[2];
        v1238 = v1234[3];
        v1239 = v1229 - *v1234;
        v1241 = v1229 < *v1234 || v1230 < v1235 || v1231 < v1237;
        if (v1241
          || ((v1244 = v1234 + 4, v1242 = v1234[4], v1243 = v1244[1], v1229 < v1238)
            ? (v1245 = v1230 < v1242)
            : (v1245 = 0),
              v1245 ? (v1246 = v1231 < v1243) : (v1246 = 0),
              !v1246))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1228 = *(_DWORD *)(v2092 + 136);
          v1233 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1247 = (v1238 - v1236) >> 1;
        if (v1247 != v1228)
        {
          v1248 = v1231 - v1237;
          v1249 = v1230 - v1235;
          while (1)
          {
            result = (4 * ((v1248 & v1247) != 0)) | (8 * ((v1249 & v1247) != 0));
            LODWORD(v1226) = *(_DWORD *)(v1233
                                       + 4488 * (v1226 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1239 & v1247) != 0)))
                                       + 24);
            if ((v1226 & 0x80000000) != 0)
              goto LABEL_884;
            v1239 -= v1239 & v1247;
            v1249 -= v1249 & v1247;
            v1248 -= v1248 & v1247;
            v1247 >>= 1;
            if (v1247 == v1228)
            {
              v1232 = v1226 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1223 = 0;
        v1224 = 0;
        v1250 = v1233 + 4488 * v1232;
        v1251 = *(_DWORD *)(v1250 + 44);
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = v1226;
        *(_DWORD *)(a6 + 152) = v1251;
        *(_BYTE *)(a6 + 156) = 5;
        v1227 = *(_DWORD *)(v1250 + 40);
        v1225 = 4;
      }
      else
      {
        v1223 = 0;
        v1224 = 0;
        v1475 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1476 = *(_DWORD *)(v1475 + 44);
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v1476;
        *(_BYTE *)(a6 + 156) = 5;
        v1227 = *(_DWORD *)(v1475 + 40);
        v1225 = 4;
        LODWORD(v1226) = a5;
      }
LABEL_1091:
      *(_BYTE *)(a6 + 120) = v1223;
      *(_DWORD *)(a6 + 124) = v1224;
      *(_DWORD *)(a6 + 128) = v1226;
      *(_DWORD *)(a6 + 132) = v1227;
      *(_BYTE *)(a6 + 136) = v1225;
      if (*(_BYTE *)(a6 + 100))
      {
LABEL_1092:
        v1477 = 1;
        *(_BYTE *)(a6 + 100) = 1;
        *(_QWORD *)(a6 + 104) = -1;
        v1478 = -1;
        *(_DWORD *)(a6 + 112) = -1;
        v1479 = 8;
        *(_BYTE *)(a6 + 116) = 8;
        LODWORD(v1480) = -1;
        v1481 = -1;
        goto LABEL_1299;
      }
      if (*(_DWORD *)(a6 + 104))
      {
        v1482 = *(_DWORD *)(v7 + 136);
        v1483 = a4[1];
        v1484 = *a4 - (unsigned __int16)v1482;
        v1485 = a4[2] + (unsigned __int16)v1482;
        v1480 = *(unsigned int *)(a6 + 108);
        v1486 = v1480 & 0xFFFFFFFFCFFFFFFFLL;
        v1487 = *(_QWORD *)(v7 + 184);
        v1488 = (int *)(v1487 + 4488 * (v1480 & 0xFFFFFFFFCFFFFFFFLL));
        v1490 = *v1488;
        v1489 = v1488[1];
        v1491 = v1488[2];
        v1492 = v1488[3];
        v1493 = v1484 - *v1488;
        v1495 = v1484 < *v1488 || v1483 < v1489 || v1485 < v1491;
        if (v1495
          || ((v1498 = v1488 + 4, v1496 = v1488[4], v1497 = v1498[1], v1484 < v1492)
            ? (v1499 = v1483 < v1496)
            : (v1499 = 0),
              v1499 ? (v1500 = v1485 < v1497) : (v1500 = 0),
              !v1500))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1482 = *(_DWORD *)(v2092 + 136);
          v1487 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1501 = (v1492 - v1490) >> 1;
        if (v1501 != v1482)
        {
          v1502 = v1485 - v1491;
          v1503 = v1483 - v1489;
          while (1)
          {
            result = (4 * ((v1502 & v1501) != 0)) | (8 * ((v1503 & v1501) != 0));
            LODWORD(v1480) = *(_DWORD *)(v1487
                                       + 4488 * (v1480 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1493 & v1501) != 0)))
                                       + 24);
            if ((v1480 & 0x80000000) != 0)
              goto LABEL_1092;
            v1493 -= v1493 & v1501;
            v1503 -= v1503 & v1501;
            v1502 -= v1502 & v1501;
            v1501 >>= 1;
            if (v1501 == v1482)
            {
              v1486 = v1480 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1477 = 0;
        v1478 = 0;
        v1504 = v1487 + 4488 * v1486;
        v1505 = *(_DWORD *)(v1504 + 48);
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = v1480;
        *(_DWORD *)(a6 + 112) = v1505;
        *(_BYTE *)(a6 + 116) = 6;
        v1481 = *(_DWORD *)(v1504 + 40);
        v1479 = 4;
      }
      else
      {
        v1477 = 0;
        v1478 = 0;
        v1719 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1720 = *(_DWORD *)(v1719 + 48);
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = a5;
        *(_DWORD *)(a6 + 112) = v1720;
        *(_BYTE *)(a6 + 116) = 6;
        v1481 = *(_DWORD *)(v1719 + 40);
        v1479 = 4;
        LODWORD(v1480) = a5;
      }
LABEL_1299:
      *(_BYTE *)(a6 + 40) = v1477;
      *(_DWORD *)(a6 + 44) = v1478;
      *(_DWORD *)(a6 + 48) = v1480;
      *(_DWORD *)(a6 + 52) = v1481;
      *(_BYTE *)(a6 + 56) = v1479;
      if (*(_BYTE *)(a6 + 340))
      {
LABEL_1300:
        v1721 = 1;
        *(_BYTE *)(a6 + 340) = 1;
        *(_QWORD *)(a6 + 344) = -1;
        v1722 = -1;
        *(_DWORD *)(a6 + 352) = -1;
        v1723 = 8;
        *(_BYTE *)(a6 + 356) = 8;
        LODWORD(v1724) = -1;
        v1725 = -1;
        goto LABEL_1491;
      }
      if (*(_DWORD *)(a6 + 344))
      {
        v1726 = *(_DWORD *)(v7 + 136);
        v1727 = a4[1] + (unsigned __int16)v1726;
        v1728 = a4[2] + (unsigned __int16)v1726;
        v1724 = *(unsigned int *)(a6 + 348);
        v1729 = v1724 & 0xFFFFFFFFCFFFFFFFLL;
        v1730 = *(_QWORD *)(v7 + 184);
        v1731 = (int *)(v1730 + 4488 * (v1724 & 0xFFFFFFFFCFFFFFFFLL));
        v1733 = *v1731;
        v1732 = v1731[1];
        v1734 = v1731[2];
        v1735 = v1731[3];
        v1736 = *a4 - *v1731;
        v1738 = *a4 < *v1731 || v1727 < v1732 || v1728 < v1734;
        if (v1738
          || ((v1741 = v1731 + 4, v1739 = v1731[4], v1740 = v1741[1], *a4 < v1735)
            ? (v1742 = v1727 < v1739)
            : (v1742 = 0),
              v1742 ? (v1743 = v1728 < v1740) : (v1743 = 0),
              !v1743))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1726 = *(_DWORD *)(v2092 + 136);
          v1730 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1744 = (v1735 - v1733) >> 1;
        if (v1744 != v1726)
        {
          v1745 = v1728 - v1734;
          v1746 = v1727 - v1732;
          while (1)
          {
            result = (4 * ((v1745 & v1744) != 0)) | (8 * ((v1746 & v1744) != 0));
            LODWORD(v1724) = *(_DWORD *)(v1730
                                       + 4488 * (v1724 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1736 & v1744) != 0)))
                                       + 24);
            if ((v1724 & 0x80000000) != 0)
              goto LABEL_1300;
            v1736 -= v1736 & v1744;
            v1746 -= v1746 & v1744;
            v1745 -= v1745 & v1744;
            v1744 >>= 1;
            if (v1744 == v1726)
            {
              v1729 = v1724 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1721 = 0;
        v1722 = 0;
        v1747 = v1730 + 4488 * v1729;
        v1748 = *(_DWORD *)(v1747 + 24);
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = v1724;
        *(_DWORD *)(a6 + 352) = v1748;
        *(_BYTE *)(a6 + 356) = 0;
        v1725 = *(_DWORD *)(v1747 + 40);
        v1723 = 4;
      }
      else
      {
        v1721 = 0;
        v1722 = 0;
        v1939 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1940 = *(_DWORD *)(v1939 + 24);
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = a5;
        *(_DWORD *)(a6 + 352) = v1940;
        *(_BYTE *)(a6 + 356) = 0;
        v1725 = *(_DWORD *)(v1939 + 40);
        v1723 = 4;
        LODWORD(v1724) = a5;
      }
LABEL_1491:
      *(_BYTE *)(a6 + 520) = v1721;
      *(_DWORD *)(a6 + 524) = v1722;
      *(_DWORD *)(a6 + 528) = v1724;
      *(_DWORD *)(a6 + 532) = v1725;
      *(_BYTE *)(a6 + 536) = v1723;
      if (*(_BYTE *)(a6 + 160))
      {
        *(_BYTE *)(a6 + 160) = 1;
        *(_QWORD *)(a6 + 164) = -1;
        v1941 = 8;
        v1942 = -1;
      }
      else if (*(_DWORD *)(a6 + 164))
      {
        v1943 = *(_DWORD *)(v7 + 136);
        v1944 = *a4 - (unsigned __int16)v1943;
        v1945 = a4[1] + (unsigned __int16)v1943;
        v1946 = a4[2] + (unsigned __int16)v1943;
        v1947 = *(unsigned int *)(a6 + 168);
        v1948 = v1947 & 0xFFFFFFFFCFFFFFFFLL;
        v1949 = *(_QWORD *)(v7 + 184);
        v1950 = (int *)(v1949 + 4488 * (v1947 & 0xFFFFFFFFCFFFFFFFLL));
        v1952 = *v1950;
        v1951 = v1950[1];
        v1953 = v1950[2];
        v1954 = v1950[3];
        v1955 = v1944 - *v1950;
        v1957 = v1944 < *v1950 || v1945 < v1951 || v1946 < v1953;
        if (v1957
          || ((v1960 = v1950 + 4, v1958 = v1950[4], v1959 = v1960[1], v1944 < v1954)
            ? (v1961 = v1945 < v1958)
            : (v1961 = 0),
              v1961 ? (v1962 = v1946 < v1959) : (v1962 = 0),
              !v1962))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          v1943 = *(_DWORD *)(v2092 + 136);
          v1949 = *(_QWORD *)(v2092 + 184);
        }
        v1963 = (v1954 - v1952) >> 1;
        if (v1963 == v1943)
        {
          a5 = v2093;
LABEL_1610:
          v2057 = 0;
          v2058 = 0;
          v1942 = *(_DWORD *)(v1949 + 4488 * v1948 + 40);
          v1941 = 4;
        }
        else
        {
          v2055 = v1946 - v1953;
          v2056 = v1945 - v1951;
          a5 = v2093;
          while (1)
          {
            result = (4 * ((v2055 & v1963) != 0)) | (8 * ((v2056 & v1963) != 0));
            LODWORD(v1947) = *(_DWORD *)(v1949
                                       + 4488 * (v1947 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1955 & v1963) != 0)))
                                       + 24);
            if ((v1947 & 0x80000000) != 0)
              break;
            v1955 -= v1955 & v1963;
            v2056 -= v2056 & v1963;
            v2055 -= v2055 & v1963;
            v1963 >>= 1;
            if (v1963 == v1943)
            {
              v1948 = v1947 & 0xCFFFFFFF;
              goto LABEL_1610;
            }
          }
          v1941 = 8;
          v2058 = -1;
          v2057 = 1;
          LODWORD(v1947) = -1;
          v1942 = -1;
        }
        *(_BYTE *)(a6 + 160) = v2057;
        *(_DWORD *)(a6 + 164) = v2058;
        *(_DWORD *)(a6 + 168) = v1947;
      }
      else
      {
        v1942 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 40);
        *(_BYTE *)(a6 + 160) = 0;
        *(_DWORD *)(a6 + 164) = 0;
        *(_DWORD *)(a6 + 168) = a5;
        v1941 = 4;
      }
      *(_DWORD *)(a6 + 172) = v1942;
      *(_BYTE *)(a6 + 176) = v1941;
      v2071 = 3;
      goto LABEL_1666;
    case 4:
      if (*(_BYTE *)(a6 + 80))
        goto LABEL_17;
      v34 = *(_DWORD *)(a6 + 84);
      if (v34)
      {
        v194 = *(_DWORD *)(result + 136);
        v195 = a4[1];
        v196 = *a4 - (unsigned __int16)v194;
        v197 = a4[2];
        v37 = *(unsigned int *)(a6 + 88);
        v198 = v37 & 0xFFFFFFFFCFFFFFFFLL;
        v199 = *(_QWORD *)(result + 184);
        v200 = (int *)(v199 + 4488 * (v37 & 0xFFFFFFFFCFFFFFFFLL));
        v202 = *v200;
        v201 = v200[1];
        v203 = v200[2];
        v204 = v200[3];
        v205 = v196 - *v200;
        v207 = v196 < *v200 || v195 < v201 || v197 < v203;
        if (v207
          || ((v210 = v200 + 4, v208 = v200[4], v209 = v210[1], v196 < v204) ? (v211 = v195 < v208) : (v211 = 0),
              v211 ? (v212 = v197 < v209) : (v212 = 0),
              !v212))
        {
          v2077 = v201;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v194 = *(_DWORD *)(v2092 + 136);
          v199 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v201 = v2077;
        }
        v213 = (v204 - v202) >> 1;
        if (v213 != v194)
        {
          v214 = v197 - v203;
          v215 = v195 - v201;
          do
          {
            result = (4 * ((v214 & v213) != 0)) | (8 * ((v215 & v213) != 0));
            LODWORD(v37) = *(_DWORD *)(v199
                                     + 4488 * (v37 & 0xCFFFFFFF)
                                     + (result | (16 * ((v205 & v213) != 0)))
                                     + 24);
            if ((v37 & 0x80000000) != 0)
            {
LABEL_17:
              LOBYTE(v34) = 1;
              *(_BYTE *)(a6 + 80) = 1;
              *(_QWORD *)(a6 + 84) = -1;
              v35 = -1;
              *(_DWORD *)(a6 + 92) = -1;
              v36 = 8;
              *(_BYTE *)(a6 + 96) = 8;
              *(_BYTE *)(a6 + 320) = 1;
              *(_DWORD *)(a6 + 324) = -1;
              *(_QWORD *)(a6 + 328) = -1;
              *(_BYTE *)(a6 + 336) = 8;
              *(_BYTE *)(a6 + 280) = 1;
              *(_DWORD *)(a6 + 284) = -1;
              *(_QWORD *)(a6 + 288) = -1;
              *(_BYTE *)(a6 + 296) = 8;
              *(_BYTE *)(a6 + 140) = 1;
              *(_QWORD *)(a6 + 144) = -1;
              *(_DWORD *)(a6 + 152) = -1;
              *(_BYTE *)(a6 + 156) = 8;
              *(_BYTE *)(a6 + 340) = 1;
              *(_QWORD *)(a6 + 344) = -1;
              *(_DWORD *)(a6 + 352) = -1;
              *(_BYTE *)(a6 + 356) = 8;
              *(_BYTE *)(a6 + 100) = 1;
              *(_QWORD *)(a6 + 104) = -1;
              *(_DWORD *)(a6 + 112) = -1;
              LODWORD(v37) = -1;
              v38 = -1;
              *(_BYTE *)(a6 + 116) = 8;
              goto LABEL_298;
            }
            v205 -= v205 & v213;
            v215 -= v215 & v213;
            v214 -= v214 & v213;
            v213 >>= 1;
          }
          while (v213 != v194);
          v198 = v37 & 0xCFFFFFFF;
        }
        LOBYTE(v34) = 0;
        v35 = 0;
        v216 = (_DWORD *)(v199 + 4488 * v198);
        v217 = v216[6];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = v37;
        *(_DWORD *)(a6 + 92) = v217;
        *(_BYTE *)(a6 + 96) = 0;
        v218 = v216[12];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v37;
        *(_DWORD *)(a6 + 332) = v218;
        *(_BYTE *)(a6 + 336) = 6;
        v219 = v216[11];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v37;
        *(_DWORD *)(a6 + 292) = v219;
        *(_BYTE *)(a6 + 296) = 5;
        v220 = v216[8];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = v37;
        *(_DWORD *)(a6 + 152) = v220;
        *(_BYTE *)(a6 + 156) = 2;
        v221 = v216[13];
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = v37;
        *(_DWORD *)(a6 + 352) = v221;
        *(_BYTE *)(a6 + 356) = 7;
        v222 = v216[7];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = v37;
        *(_DWORD *)(a6 + 112) = v222;
        *(_BYTE *)(a6 + 116) = 1;
        v38 = v216[9];
        v36 = 3;
      }
      else
      {
        v35 = 0;
        v440 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v441 = v440[6];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v441;
        *(_BYTE *)(a6 + 96) = 0;
        v442 = v440[12];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v442;
        *(_BYTE *)(a6 + 336) = 6;
        v443 = v440[11];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v443;
        *(_BYTE *)(a6 + 296) = 5;
        v444 = v440[8];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v444;
        *(_BYTE *)(a6 + 156) = 2;
        v445 = v440[13];
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = a5;
        *(_DWORD *)(a6 + 352) = v445;
        *(_BYTE *)(a6 + 356) = 7;
        v446 = v440[7];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = a5;
        *(_DWORD *)(a6 + 112) = v446;
        *(_BYTE *)(a6 + 116) = 1;
        v38 = v440[9];
        v36 = 3;
        LODWORD(v37) = a5;
      }
LABEL_298:
      *(_BYTE *)(a6 + 160) = v34;
      *(_DWORD *)(a6 + 164) = v35;
      *(_DWORD *)(a6 + 168) = v37;
      *(_DWORD *)(a6 + 172) = v38;
      *(_BYTE *)(a6 + 176) = v36;
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v447) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v448 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_300:
        v449 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        *(_DWORD *)(a6 + 512) = -1;
        *(_BYTE *)(a6 + 516) = 8;
        *(_BYTE *)(a6 + 520) = 1;
        *(_DWORD *)(a6 + 524) = -1;
        *(_QWORD *)(a6 + 528) = -1;
        LODWORD(v450) = -1;
        v451 = -1;
        *(_BYTE *)(a6 + 536) = 8;
        goto LABEL_488;
      }
      v447 = v8[40];
      if (v447)
      {
        v452 = *(_DWORD *)(v7 + 136);
        v453 = a4[1];
        v454 = *a4 + (unsigned __int16)v452;
        v455 = a4[2];
        v450 = *(unsigned int *)(a6 + 448);
        v456 = v450 & 0xFFFFFFFFCFFFFFFFLL;
        v457 = *(_QWORD *)(v7 + 184);
        v458 = (int *)(v457 + 4488 * (v450 & 0xFFFFFFFFCFFFFFFFLL));
        v460 = *v458;
        v459 = v458[1];
        v462 = v458[2];
        v461 = v458[3];
        v463 = v454 - *v458;
        if (v454 < *v458 || v453 < v459 || v455 < v462 || v454 >= v461 || v453 >= v458[4] || v455 >= v458[5])
        {
          v464 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v452 = *(_DWORD *)(v2092 + 136);
          v457 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v464;
          v456 = v450 & 0xCFFFFFFF;
        }
        v465 = (v461 - v460) >> 1;
        if (v465 != v452)
        {
          v466 = v455 - v462;
          v467 = v453 - v459;
          while (1)
          {
            result = (4 * ((v466 & v465) != 0)) | (8 * ((v467 & v465) != 0));
            LODWORD(v450) = *(_DWORD *)(v457
                                      + 4488 * (v450 & 0xCFFFFFFF)
                                      + (result | (16 * ((v463 & v465) != 0)))
                                      + 24);
            if ((v450 & 0x80000000) != 0)
              break;
            v463 -= v463 & v465;
            v467 -= v467 & v465;
            v466 -= v466 & v465;
            v465 >>= 1;
            if (v465 == v452)
            {
              v456 = v450 & 0xCFFFFFFF;
              goto LABEL_315;
            }
          }
          LOBYTE(v447) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v448 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_300;
        }
LABEL_315:
        LOBYTE(v447) = 0;
        v448 = 0;
        v468 = (_DWORD *)(v457 + 4488 * v456);
        v469 = v468[6];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v450;
        *(_DWORD *)(a6 + 452) = v469;
        *(_BYTE *)(a6 + 456) = 0;
        v470 = v468[8];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v450;
        *(_DWORD *)(a6 + 512) = v470;
        *(_BYTE *)(a6 + 516) = 2;
        v471 = v468[9];
        *(_BYTE *)(a6 + 520) = 0;
        *(_DWORD *)(a6 + 524) = 0;
        *(_DWORD *)(a6 + 528) = v450;
        *(_DWORD *)(a6 + 532) = v471;
        *(_BYTE *)(a6 + 536) = 3;
        v451 = v468[7];
        v449 = 1;
      }
      else
      {
        v448 = 0;
        v708 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v709 = v708[6];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v709;
        *(_BYTE *)(a6 + 456) = 0;
        v710 = v708[8];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v710;
        *(_BYTE *)(a6 + 516) = 2;
        v711 = v708[9];
        *(_BYTE *)(a6 + 520) = 0;
        *(_DWORD *)(a6 + 524) = 0;
        *(_DWORD *)(a6 + 528) = a5;
        *(_DWORD *)(a6 + 532) = v711;
        *(_BYTE *)(a6 + 536) = 3;
        v451 = v708[7];
        v449 = 1;
        LODWORD(v450) = a5;
      }
LABEL_488:
      *(_BYTE *)(a6 + 460) = v447;
      *(_DWORD *)(a6 + 464) = v448;
      *(_DWORD *)(a6 + 468) = v450;
      *(_DWORD *)(a6 + 472) = v451;
      *(_BYTE *)(a6 + 476) = v449;
      if (*(_BYTE *)(a6 + 200))
      {
LABEL_489:
        LOBYTE(v712) = 1;
        *(_BYTE *)(a6 + 200) = 1;
        *(_QWORD *)(a6 + 204) = -1;
        v713 = -1;
        *(_DWORD *)(a6 + 212) = -1;
        v714 = 8;
        *(_BYTE *)(a6 + 216) = 8;
        *(_BYTE *)(a6 + 20) = 1;
        *(_QWORD *)(a6 + 24) = -1;
        *(_DWORD *)(a6 + 32) = -1;
        *(_BYTE *)(a6 + 36) = 8;
        *(_BYTE *)(a6 + 40) = 1;
        *(_QWORD *)(a6 + 44) = -1;
        *(_DWORD *)(a6 + 52) = -1;
        LODWORD(v715) = -1;
        v716 = -1;
        *(_BYTE *)(a6 + 56) = 8;
        goto LABEL_700;
      }
      v712 = *(_DWORD *)(a6 + 204);
      if (v712)
      {
        v717 = *(_DWORD *)(v7 + 136);
        v718 = a4[1] - (unsigned __int16)v717;
        v719 = a4[2];
        v715 = *(unsigned int *)(a6 + 208);
        v720 = v715 & 0xFFFFFFFFCFFFFFFFLL;
        v721 = *(_QWORD *)(v7 + 184);
        v722 = (int *)(v721 + 4488 * (v715 & 0xFFFFFFFFCFFFFFFFLL));
        v724 = *v722;
        v723 = v722[1];
        v725 = v722[2];
        v726 = v722[3];
        v727 = *a4 - *v722;
        v729 = *a4 < *v722 || v718 < v723 || v719 < v725;
        if (v729
          || ((v732 = v722 + 4, v730 = v722[4], v731 = v732[1], *a4 < v726) ? (v733 = v718 < v730) : (v733 = 0),
              v733 ? (v734 = v719 < v731) : (v734 = 0),
              !v734))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v717 = *(_DWORD *)(v2092 + 136);
          v721 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v735 = (v726 - v724) >> 1;
        if (v735 != v717)
        {
          v736 = v719 - v725;
          v737 = v718 - v723;
          while (1)
          {
            result = (4 * ((v736 & v735) != 0)) | (8 * ((v737 & v735) != 0));
            LODWORD(v715) = *(_DWORD *)(v721
                                      + 4488 * (v715 & 0xCFFFFFFF)
                                      + (result | (16 * ((v727 & v735) != 0)))
                                      + 24);
            if ((v715 & 0x80000000) != 0)
              goto LABEL_489;
            v727 -= v727 & v735;
            v737 -= v737 & v735;
            v736 -= v736 & v735;
            v735 >>= 1;
            if (v735 == v717)
            {
              v720 = v715 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v712) = 0;
        v713 = 0;
        v738 = (_DWORD *)(v721 + 4488 * v720);
        v739 = v738[12];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = v715;
        *(_DWORD *)(a6 + 212) = v739;
        *(_BYTE *)(a6 + 216) = 6;
        v740 = v738[8];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = v715;
        *(_DWORD *)(a6 + 32) = v740;
        *(_BYTE *)(a6 + 36) = 2;
        v741 = v738[9];
        *(_BYTE *)(a6 + 40) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_DWORD *)(a6 + 48) = v715;
        *(_DWORD *)(a6 + 52) = v741;
        *(_BYTE *)(a6 + 56) = 3;
        v716 = v738[13];
        v714 = 7;
      }
      else
      {
        v713 = 0;
        v984 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v985 = v984[12];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v985;
        *(_BYTE *)(a6 + 216) = 6;
        v986 = v984[8];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v986;
        *(_BYTE *)(a6 + 36) = 2;
        v987 = v984[9];
        *(_BYTE *)(a6 + 40) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_DWORD *)(a6 + 48) = a5;
        *(_DWORD *)(a6 + 52) = v987;
        *(_BYTE *)(a6 + 56) = 3;
        v716 = v984[13];
        v714 = 7;
        LODWORD(v715) = a5;
      }
LABEL_700:
      *(_BYTE *)(a6 + 220) = v712;
      *(_DWORD *)(a6 + 224) = v713;
      *(_DWORD *)(a6 + 228) = v715;
      *(_DWORD *)(a6 + 232) = v716;
      *(_BYTE *)(a6 + 236) = v714;
      if (*(_BYTE *)(a6 + 240))
      {
LABEL_701:
        LOBYTE(v988) = 1;
        *(_BYTE *)(a6 + 240) = 1;
        *(_QWORD *)(a6 + 244) = -1;
        v989 = -1;
        *(_DWORD *)(a6 + 252) = -1;
        v990 = 8;
        *(_BYTE *)(a6 + 256) = 8;
        *(_BYTE *)(a6 + 60) = 1;
        *(_QWORD *)(a6 + 64) = -1;
        *(_DWORD *)(a6 + 72) = -1;
        *(_BYTE *)(a6 + 76) = 8;
        *(_BYTE *)(a6 + 120) = 1;
        *(_QWORD *)(a6 + 124) = -1;
        *(_DWORD *)(a6 + 132) = -1;
        LODWORD(v991) = -1;
        v992 = -1;
        *(_BYTE *)(a6 + 136) = 8;
        goto LABEL_909;
      }
      v988 = *(_DWORD *)(a6 + 244);
      if (v988)
      {
        v993 = *(_DWORD *)(v7 + 136);
        v994 = a4[1];
        v995 = a4[2] - (unsigned __int16)v993;
        v991 = *(unsigned int *)(a6 + 248);
        v996 = v991 & 0xFFFFFFFFCFFFFFFFLL;
        v997 = *(_QWORD *)(v7 + 184);
        v998 = (int *)(v997 + 4488 * (v991 & 0xFFFFFFFFCFFFFFFFLL));
        v1000 = *v998;
        v999 = v998[1];
        v1001 = v998[2];
        v1002 = v998[3];
        v1003 = *a4 - *v998;
        v1005 = *a4 < *v998 || v994 < v999 || v995 < v1001;
        if (v1005
          || ((v1008 = v998 + 4, v1006 = v998[4], v1007 = v1008[1], *a4 < v1002) ? (v1009 = v994 < v1006) : (v1009 = 0),
              v1009 ? (v1010 = v995 < v1007) : (v1010 = 0),
              !v1010))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v993 = *(_DWORD *)(v2092 + 136);
          v997 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1011 = (v1002 - v1000) >> 1;
        if (v1011 != v993)
        {
          v1012 = v995 - v1001;
          v1013 = v994 - v999;
          while (1)
          {
            result = (4 * ((v1012 & v1011) != 0)) | (8 * ((v1013 & v1011) != 0));
            LODWORD(v991) = *(_DWORD *)(v997
                                      + 4488 * (v991 & 0xCFFFFFFF)
                                      + (result | (16 * ((v1003 & v1011) != 0)))
                                      + 24);
            if ((v991 & 0x80000000) != 0)
              goto LABEL_701;
            v1003 -= v1003 & v1011;
            v1013 -= v1013 & v1011;
            v1012 -= v1012 & v1011;
            v1011 >>= 1;
            if (v1011 == v993)
            {
              v996 = v991 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v988) = 0;
        v989 = 0;
        v1014 = (_DWORD *)(v997 + 4488 * v996);
        v1015 = v1014[11];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = v991;
        *(_DWORD *)(a6 + 252) = v1015;
        *(_BYTE *)(a6 + 256) = 5;
        v1016 = v1014[7];
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = v991;
        *(_DWORD *)(a6 + 72) = v1016;
        *(_BYTE *)(a6 + 76) = 1;
        v1017 = v1014[9];
        *(_BYTE *)(a6 + 120) = 0;
        *(_DWORD *)(a6 + 124) = 0;
        *(_DWORD *)(a6 + 128) = v991;
        *(_DWORD *)(a6 + 132) = v1017;
        *(_BYTE *)(a6 + 136) = 3;
        v992 = v1014[13];
        v990 = 7;
      }
      else
      {
        v989 = 0;
        v1252 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1253 = v1252[11];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v1253;
        *(_BYTE *)(a6 + 256) = 5;
        v1254 = v1252[7];
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = a5;
        *(_DWORD *)(a6 + 72) = v1254;
        *(_BYTE *)(a6 + 76) = 1;
        v1255 = v1252[9];
        *(_BYTE *)(a6 + 120) = 0;
        *(_DWORD *)(a6 + 124) = 0;
        *(_DWORD *)(a6 + 128) = a5;
        *(_DWORD *)(a6 + 132) = v1255;
        *(_BYTE *)(a6 + 136) = 3;
        v992 = v1252[13];
        v990 = 7;
        LODWORD(v991) = a5;
      }
LABEL_909:
      *(_BYTE *)(a6 + 300) = v988;
      *(_DWORD *)(a6 + 304) = v989;
      *(_DWORD *)(a6 + 308) = v991;
      *(_DWORD *)(a6 + 312) = v992;
      *(_BYTE *)(a6 + 316) = v990;
      if (*(_BYTE *)(a6 + 380))
      {
LABEL_910:
        v1256 = 1;
        *(_BYTE *)(a6 + 380) = 1;
        *(_QWORD *)(a6 + 384) = -1;
        v1257 = -1;
        *(_DWORD *)(a6 + 392) = -1;
        v1258 = 8;
        *(_BYTE *)(a6 + 396) = 8;
        LODWORD(v1259) = -1;
        v1260 = -1;
        goto LABEL_1117;
      }
      if (*(_DWORD *)(a6 + 384))
      {
        v1261 = *(_DWORD *)(v7 + 136);
        v1262 = (unsigned __int16)v1261 + *a4;
        v1263 = a4[1] - (unsigned __int16)v1261;
        v1264 = a4[2];
        v1259 = *(unsigned int *)(a6 + 388);
        v1265 = v1259 & 0xFFFFFFFFCFFFFFFFLL;
        v1266 = *(_QWORD *)(v7 + 184);
        v1267 = (int *)(v1266 + 4488 * (v1259 & 0xFFFFFFFFCFFFFFFFLL));
        v1269 = *v1267;
        v1268 = v1267[1];
        v1270 = v1267[2];
        v1271 = v1267[3];
        v1272 = v1262 - *v1267;
        v1274 = v1262 < *v1267 || v1263 < v1268 || v1264 < v1270;
        if (v1274
          || ((v1277 = v1267 + 4, v1275 = v1267[4], v1276 = v1277[1], v1262 < v1271)
            ? (v1278 = v1263 < v1275)
            : (v1278 = 0),
              v1278 ? (v1279 = v1264 < v1276) : (v1279 = 0),
              !v1279))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1261 = *(_DWORD *)(v2092 + 136);
          v1266 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1280 = (v1271 - v1269) >> 1;
        if (v1280 != v1261)
        {
          v1281 = v1264 - v1270;
          v1282 = v1263 - v1268;
          while (1)
          {
            result = (4 * ((v1281 & v1280) != 0)) | (8 * ((v1282 & v1280) != 0));
            LODWORD(v1259) = *(_DWORD *)(v1266
                                       + 4488 * (v1259 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1272 & v1280) != 0)))
                                       + 24);
            if ((v1259 & 0x80000000) != 0)
              goto LABEL_910;
            v1272 -= v1272 & v1280;
            v1282 -= v1282 & v1280;
            v1281 -= v1281 & v1280;
            v1280 >>= 1;
            if (v1280 == v1261)
            {
              v1265 = v1259 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1256 = 0;
        v1257 = 0;
        v1283 = v1266 + 4488 * v1265;
        v1284 = *(_DWORD *)(v1283 + 32);
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = v1259;
        *(_DWORD *)(a6 + 392) = v1284;
        *(_BYTE *)(a6 + 396) = 2;
        v1260 = *(_DWORD *)(v1283 + 36);
        v1258 = 3;
      }
      else
      {
        v1256 = 0;
        v1257 = 0;
        v1506 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1507 = *(_DWORD *)(v1506 + 32);
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v1507;
        *(_BYTE *)(a6 + 396) = 2;
        v1260 = *(_DWORD *)(v1506 + 36);
        v1258 = 3;
        LODWORD(v1259) = a5;
      }
LABEL_1117:
      *(_BYTE *)(a6 + 400) = v1256;
      *(_DWORD *)(a6 + 404) = v1257;
      *(_DWORD *)(a6 + 408) = v1259;
      *(_DWORD *)(a6 + 412) = v1260;
      *(_BYTE *)(a6 + 416) = v1258;
      if (*(_BYTE *)(a6 + 420))
      {
LABEL_1118:
        v1508 = 1;
        *(_BYTE *)(a6 + 420) = 1;
        *(_QWORD *)(a6 + 424) = -1;
        v1509 = -1;
        *(_DWORD *)(a6 + 432) = -1;
        v1510 = 8;
        *(_BYTE *)(a6 + 436) = 8;
        LODWORD(v1511) = -1;
        v1512 = -1;
        goto LABEL_1325;
      }
      if (*(_DWORD *)(a6 + 424))
      {
        v1513 = *(_DWORD *)(v7 + 136);
        v1514 = a4[1];
        v1515 = (unsigned __int16)v1513 + *a4;
        v1516 = a4[2] - (unsigned __int16)v1513;
        v1511 = *(unsigned int *)(a6 + 428);
        v1517 = v1511 & 0xFFFFFFFFCFFFFFFFLL;
        v1518 = *(_QWORD *)(v7 + 184);
        v1519 = (int *)(v1518 + 4488 * (v1511 & 0xFFFFFFFFCFFFFFFFLL));
        v1521 = *v1519;
        v1520 = v1519[1];
        v1522 = v1519[2];
        v1523 = v1519[3];
        v1524 = v1515 - *v1519;
        v1526 = v1515 < *v1519 || v1514 < v1520 || v1516 < v1522;
        if (v1526
          || ((v1529 = v1519 + 4, v1527 = v1519[4], v1528 = v1529[1], v1515 < v1523)
            ? (v1530 = v1514 < v1527)
            : (v1530 = 0),
              v1530 ? (v1531 = v1516 < v1528) : (v1531 = 0),
              !v1531))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1513 = *(_DWORD *)(v2092 + 136);
          v1518 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1532 = (v1523 - v1521) >> 1;
        if (v1532 != v1513)
        {
          v1533 = v1516 - v1522;
          v1534 = v1514 - v1520;
          while (1)
          {
            result = (4 * ((v1533 & v1532) != 0)) | (8 * ((v1534 & v1532) != 0));
            LODWORD(v1511) = *(_DWORD *)(v1518
                                       + 4488 * (v1511 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1524 & v1532) != 0)))
                                       + 24);
            if ((v1511 & 0x80000000) != 0)
              goto LABEL_1118;
            v1524 -= v1524 & v1532;
            v1534 -= v1534 & v1532;
            v1533 -= v1533 & v1532;
            v1532 >>= 1;
            if (v1532 == v1513)
            {
              v1517 = v1511 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1508 = 0;
        v1509 = 0;
        v1535 = v1518 + 4488 * v1517;
        v1536 = *(_DWORD *)(v1535 + 28);
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = v1511;
        *(_DWORD *)(a6 + 432) = v1536;
        *(_BYTE *)(a6 + 436) = 1;
        v1512 = *(_DWORD *)(v1535 + 36);
        v1510 = 3;
      }
      else
      {
        v1508 = 0;
        v1509 = 0;
        v1749 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1750 = *(_DWORD *)(v1749 + 28);
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = a5;
        *(_DWORD *)(a6 + 432) = v1750;
        *(_BYTE *)(a6 + 436) = 1;
        v1512 = *(_DWORD *)(v1749 + 36);
        v1510 = 3;
        LODWORD(v1511) = a5;
      }
LABEL_1325:
      *(_BYTE *)(a6 + 480) = v1508;
      *(_DWORD *)(a6 + 484) = v1509;
      *(_DWORD *)(a6 + 488) = v1511;
      *(_DWORD *)(a6 + 492) = v1512;
      *(_BYTE *)(a6 + 496) = v1510;
      if (*(_BYTE *)(a6 + 180))
      {
LABEL_1326:
        v1751 = 1;
        *(_BYTE *)(a6 + 180) = 1;
        *(_QWORD *)(a6 + 184) = -1;
        v1752 = -1;
        *(_DWORD *)(a6 + 192) = -1;
        v1753 = 8;
        *(_BYTE *)(a6 + 196) = 8;
        LODWORD(v1754) = -1;
        v1755 = -1;
        goto LABEL_1513;
      }
      if (*(_DWORD *)(a6 + 184))
      {
        v1756 = *(_DWORD *)(v7 + 136);
        v1757 = a4[1] - (unsigned __int16)v1756;
        v1758 = a4[2] - (unsigned __int16)v1756;
        v1754 = *(unsigned int *)(a6 + 188);
        v1759 = v1754 & 0xFFFFFFFFCFFFFFFFLL;
        v1760 = *(_QWORD *)(v7 + 184);
        v1761 = (int *)(v1760 + 4488 * (v1754 & 0xFFFFFFFFCFFFFFFFLL));
        v1763 = *v1761;
        v1762 = v1761[1];
        v1764 = v1761[2];
        v1765 = v1761[3];
        v1766 = *a4 - *v1761;
        v1768 = *a4 < *v1761 || v1757 < v1762 || v1758 < v1764;
        if (v1768
          || ((v1771 = v1761 + 4, v1769 = v1761[4], v1770 = v1771[1], *a4 < v1765)
            ? (v1772 = v1757 < v1769)
            : (v1772 = 0),
              v1772 ? (v1773 = v1758 < v1770) : (v1773 = 0),
              !v1773))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1756 = *(_DWORD *)(v2092 + 136);
          v1760 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1774 = (v1765 - v1763) >> 1;
        if (v1774 != v1756)
        {
          v1775 = v1758 - v1764;
          v1776 = v1757 - v1762;
          while (1)
          {
            result = (4 * ((v1775 & v1774) != 0)) | (8 * ((v1776 & v1774) != 0));
            LODWORD(v1754) = *(_DWORD *)(v1760
                                       + 4488 * (v1754 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1766 & v1774) != 0)))
                                       + 24);
            if ((v1754 & 0x80000000) != 0)
              goto LABEL_1326;
            v1766 -= v1766 & v1774;
            v1776 -= v1776 & v1774;
            v1775 -= v1775 & v1774;
            v1774 >>= 1;
            if (v1774 == v1756)
            {
              v1759 = v1754 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1751 = 0;
        v1752 = 0;
        v1777 = v1760 + 4488 * v1759;
        v1778 = *(_DWORD *)(v1777 + 52);
        *(_BYTE *)(a6 + 180) = 0;
        *(_DWORD *)(a6 + 184) = 0;
        *(_DWORD *)(a6 + 188) = v1754;
        *(_DWORD *)(a6 + 192) = v1778;
        *(_BYTE *)(a6 + 196) = 7;
        v1755 = *(_DWORD *)(v1777 + 36);
        v1753 = 3;
      }
      else
      {
        v1751 = 0;
        v1752 = 0;
        v1964 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1965 = *(_DWORD *)(v1964 + 52);
        *(_BYTE *)(a6 + 180) = 0;
        *(_DWORD *)(a6 + 184) = 0;
        *(_DWORD *)(a6 + 188) = a5;
        *(_DWORD *)(a6 + 192) = v1965;
        *(_BYTE *)(a6 + 196) = 7;
        v1755 = *(_DWORD *)(v1964 + 36);
        v1753 = 3;
        LODWORD(v1754) = a5;
      }
LABEL_1513:
      *(_BYTE *)a6 = v1751;
      *(_DWORD *)(a6 + 4) = v1752;
      *(_DWORD *)(a6 + 8) = v1754;
      *(_DWORD *)(a6 + 12) = v1755;
      *(_BYTE *)(a6 + 16) = v1753;
      if (*(_BYTE *)(a6 + 360))
      {
        *(_BYTE *)(a6 + 360) = 1;
        *(_QWORD *)(a6 + 364) = -1;
        v1966 = 8;
        v1967 = -1;
      }
      else if (*(_DWORD *)(a6 + 364))
      {
        v1968 = *(_DWORD *)(v7 + 136);
        v1969 = (unsigned __int16)v1968 + *a4;
        v1970 = a4[1] - (unsigned __int16)v1968;
        v1971 = a4[2] - (unsigned __int16)v1968;
        v1972 = *(unsigned int *)(a6 + 368);
        v1973 = v1972 & 0xFFFFFFFFCFFFFFFFLL;
        v1974 = *(_QWORD *)(v7 + 184);
        v1975 = (int *)(v1974 + 4488 * (v1972 & 0xFFFFFFFFCFFFFFFFLL));
        v1977 = *v1975;
        v1976 = v1975[1];
        v1978 = v1975[2];
        v1979 = v1975[3];
        v1980 = v1969 - *v1975;
        v1982 = v1969 < *v1975 || v1970 < v1976 || v1971 < v1978;
        if (v1982
          || ((v1985 = v1975 + 4, v1983 = v1975[4], v1984 = v1985[1], v1969 < v1979)
            ? (v1986 = v1970 < v1983)
            : (v1986 = 0),
              v1986 ? (v1987 = v1971 < v1984) : (v1987 = 0),
              !v1987))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          v1968 = *(_DWORD *)(v2092 + 136);
          v1974 = *(_QWORD *)(v2092 + 184);
        }
        v1988 = (v1979 - v1977) >> 1;
        if (v1988 == v1968)
        {
          a5 = v2093;
LABEL_1615:
          v2061 = 0;
          v2062 = 0;
          v1967 = *(_DWORD *)(v1974 + 4488 * v1973 + 36);
          v1966 = 3;
        }
        else
        {
          v2059 = v1971 - v1978;
          v2060 = v1970 - v1976;
          a5 = v2093;
          while (1)
          {
            result = (4 * ((v2059 & v1988) != 0)) | (8 * ((v2060 & v1988) != 0));
            LODWORD(v1972) = *(_DWORD *)(v1974
                                       + 4488 * (v1972 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1980 & v1988) != 0)))
                                       + 24);
            if ((v1972 & 0x80000000) != 0)
              break;
            v1980 -= v1980 & v1988;
            v2060 -= v2060 & v1988;
            v2059 -= v2059 & v1988;
            v1988 >>= 1;
            if (v1988 == v1968)
            {
              v1973 = v1972 & 0xCFFFFFFF;
              goto LABEL_1615;
            }
          }
          v1966 = 8;
          v2062 = -1;
          v2061 = 1;
          LODWORD(v1972) = -1;
          v1967 = -1;
        }
        *(_BYTE *)(a6 + 360) = v2061;
        *(_DWORD *)(a6 + 364) = v2062;
        *(_DWORD *)(a6 + 368) = v1972;
      }
      else
      {
        v1967 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 36);
        *(_BYTE *)(a6 + 360) = 0;
        *(_DWORD *)(a6 + 364) = 0;
        *(_DWORD *)(a6 + 368) = a5;
        v1966 = 3;
      }
      *(_DWORD *)(a6 + 372) = v1967;
      *(_BYTE *)(a6 + 376) = v1966;
      v2071 = 4;
      goto LABEL_1666;
    case 5:
      if (*(_BYTE *)(a6 + 80))
        goto LABEL_19;
      v39 = *(_DWORD *)(a6 + 84);
      if (v39)
      {
        v223 = *(_DWORD *)(result + 136);
        v224 = a4[1];
        v225 = *a4 - (unsigned __int16)v223;
        v226 = a4[2];
        v42 = *(unsigned int *)(a6 + 88);
        v227 = v42 & 0xFFFFFFFFCFFFFFFFLL;
        v228 = *(_QWORD *)(result + 184);
        v229 = (int *)(v228 + 4488 * (v42 & 0xFFFFFFFFCFFFFFFFLL));
        v231 = *v229;
        v230 = v229[1];
        v232 = v229[2];
        v233 = v229[3];
        v234 = v225 - *v229;
        v236 = v225 < *v229 || v224 < v230 || v226 < v232;
        if (v236
          || ((v239 = v229 + 4, v237 = v229[4], v238 = v239[1], v225 < v233) ? (v240 = v224 < v237) : (v240 = 0),
              v240 ? (v241 = v226 < v238) : (v241 = 0),
              !v241))
        {
          v2078 = v230;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v223 = *(_DWORD *)(v2092 + 136);
          v228 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v230 = v2078;
        }
        v242 = (v233 - v231) >> 1;
        if (v242 != v223)
        {
          v243 = v226 - v232;
          v244 = v224 - v230;
          do
          {
            result = (4 * ((v243 & v242) != 0)) | (8 * ((v244 & v242) != 0));
            LODWORD(v42) = *(_DWORD *)(v228
                                     + 4488 * (v42 & 0xCFFFFFFF)
                                     + (result | (16 * ((v234 & v242) != 0)))
                                     + 24);
            if ((v42 & 0x80000000) != 0)
            {
LABEL_19:
              LOBYTE(v39) = 1;
              *(_BYTE *)(a6 + 80) = 1;
              *(_QWORD *)(a6 + 84) = -1;
              v40 = -1;
              *(_DWORD *)(a6 + 92) = -1;
              v41 = 8;
              *(_BYTE *)(a6 + 96) = 8;
              *(_BYTE *)(a6 + 320) = 1;
              *(_DWORD *)(a6 + 324) = -1;
              *(_QWORD *)(a6 + 328) = -1;
              *(_BYTE *)(a6 + 336) = 8;
              *(_BYTE *)(a6 + 240) = 1;
              *(_QWORD *)(a6 + 244) = -1;
              *(_DWORD *)(a6 + 252) = -1;
              *(_BYTE *)(a6 + 256) = 8;
              *(_BYTE *)(a6 + 140) = 1;
              *(_QWORD *)(a6 + 144) = -1;
              *(_DWORD *)(a6 + 152) = -1;
              *(_BYTE *)(a6 + 156) = 8;
              *(_BYTE *)(a6 + 300) = 1;
              *(_QWORD *)(a6 + 304) = -1;
              *(_DWORD *)(a6 + 312) = -1;
              *(_BYTE *)(a6 + 316) = 8;
              *(_BYTE *)(a6 + 60) = 1;
              *(_QWORD *)(a6 + 64) = -1;
              *(_DWORD *)(a6 + 72) = -1;
              LODWORD(v42) = -1;
              v43 = -1;
              *(_BYTE *)(a6 + 76) = 8;
              goto LABEL_317;
            }
            v234 -= v234 & v242;
            v244 -= v244 & v242;
            v243 -= v243 & v242;
            v242 >>= 1;
          }
          while (v242 != v223);
          v227 = v42 & 0xCFFFFFFF;
        }
        LOBYTE(v39) = 0;
        v40 = 0;
        v245 = (_DWORD *)(v228 + 4488 * v227);
        v246 = v245[7];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = v42;
        *(_DWORD *)(a6 + 92) = v246;
        *(_BYTE *)(a6 + 96) = 1;
        v247 = v245[13];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v42;
        *(_DWORD *)(a6 + 332) = v247;
        *(_BYTE *)(a6 + 336) = 7;
        v248 = v245[10];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = v42;
        *(_DWORD *)(a6 + 252) = v248;
        *(_BYTE *)(a6 + 256) = 4;
        v249 = v245[9];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = v42;
        *(_DWORD *)(a6 + 152) = v249;
        *(_BYTE *)(a6 + 156) = 3;
        v250 = v245[12];
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = v42;
        *(_DWORD *)(a6 + 312) = v250;
        *(_BYTE *)(a6 + 316) = 6;
        v251 = v245[6];
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = v42;
        *(_DWORD *)(a6 + 72) = v251;
        *(_BYTE *)(a6 + 76) = 0;
        v43 = v245[8];
        v41 = 2;
      }
      else
      {
        v40 = 0;
        v472 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v473 = v472[7];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v473;
        *(_BYTE *)(a6 + 96) = 1;
        v474 = v472[13];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v474;
        *(_BYTE *)(a6 + 336) = 7;
        v475 = v472[10];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v475;
        *(_BYTE *)(a6 + 256) = 4;
        v476 = v472[9];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v476;
        *(_BYTE *)(a6 + 156) = 3;
        v477 = v472[12];
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = a5;
        *(_DWORD *)(a6 + 312) = v477;
        *(_BYTE *)(a6 + 316) = 6;
        v478 = v472[6];
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = a5;
        *(_DWORD *)(a6 + 72) = v478;
        *(_BYTE *)(a6 + 76) = 0;
        v43 = v472[8];
        v41 = 2;
        LODWORD(v42) = a5;
      }
LABEL_317:
      *(_BYTE *)(a6 + 120) = v39;
      *(_DWORD *)(a6 + 124) = v40;
      *(_DWORD *)(a6 + 128) = v42;
      *(_DWORD *)(a6 + 132) = v43;
      *(_BYTE *)(a6 + 136) = v41;
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v479) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v480 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_319:
        v481 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        *(_DWORD *)(a6 + 512) = -1;
        *(_BYTE *)(a6 + 516) = 8;
        *(_BYTE *)(a6 + 480) = 1;
        *(_DWORD *)(a6 + 484) = -1;
        *(_QWORD *)(a6 + 488) = -1;
        LODWORD(v482) = -1;
        v483 = -1;
        *(_BYTE *)(a6 + 496) = 8;
        goto LABEL_514;
      }
      v479 = v8[40];
      if (v479)
      {
        v484 = *(_DWORD *)(v7 + 136);
        v485 = a4[1];
        v486 = *a4 + (unsigned __int16)v484;
        v487 = a4[2];
        v482 = *(unsigned int *)(a6 + 448);
        v488 = v482 & 0xFFFFFFFFCFFFFFFFLL;
        v489 = *(_QWORD *)(v7 + 184);
        v490 = (int *)(v489 + 4488 * (v482 & 0xFFFFFFFFCFFFFFFFLL));
        v492 = *v490;
        v491 = v490[1];
        v494 = v490[2];
        v493 = v490[3];
        v495 = v486 - *v490;
        if (v486 < *v490 || v485 < v491 || v487 < v494 || v486 >= v493 || v485 >= v490[4] || v487 >= v490[5])
        {
          v496 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v484 = *(_DWORD *)(v2092 + 136);
          v489 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v496;
          v488 = v482 & 0xCFFFFFFF;
        }
        v497 = (v493 - v492) >> 1;
        if (v497 != v484)
        {
          v498 = v487 - v494;
          v499 = v485 - v491;
          while (1)
          {
            result = (4 * ((v498 & v497) != 0)) | (8 * ((v499 & v497) != 0));
            LODWORD(v482) = *(_DWORD *)(v489
                                      + 4488 * (v482 & 0xCFFFFFFF)
                                      + (result | (16 * ((v495 & v497) != 0)))
                                      + 24);
            if ((v482 & 0x80000000) != 0)
              break;
            v495 -= v495 & v497;
            v499 -= v499 & v497;
            v498 -= v498 & v497;
            v497 >>= 1;
            if (v497 == v484)
            {
              v488 = v482 & 0xCFFFFFFF;
              goto LABEL_334;
            }
          }
          LOBYTE(v479) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v480 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_319;
        }
LABEL_334:
        LOBYTE(v479) = 0;
        v480 = 0;
        v481 = 0;
        v500 = (_DWORD *)(v489 + 4488 * v488);
        v501 = v500[7];
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v482;
        *(_DWORD *)(a6 + 452) = v501;
        *(_BYTE *)(a6 + 456) = 1;
        v502 = v500[9];
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v482;
        *(_DWORD *)(a6 + 512) = v502;
        *(_BYTE *)(a6 + 516) = 3;
        *(_DWORD *)(a6 + 492) = v500[8];
        *(_BYTE *)(a6 + 496) = 2;
        *(_BYTE *)(a6 + 440) = 0;
        *(_BYTE *)(a6 + 500) = 0;
        *(_BYTE *)(a6 + 480) = 0;
        *(_DWORD *)(a6 + 484) = 0;
        *(_DWORD *)(a6 + 488) = v482;
        v483 = v500[6];
      }
      else
      {
        v480 = 0;
        v481 = 0;
        v742 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v743 = v742[7];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v743;
        *(_BYTE *)(a6 + 456) = 1;
        v744 = v742[9];
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v744;
        *(_BYTE *)(a6 + 516) = 3;
        v745 = v742[8];
        *(_BYTE *)(a6 + 480) = 0;
        *(_DWORD *)(a6 + 484) = 0;
        *(_DWORD *)(a6 + 488) = a5;
        *(_DWORD *)(a6 + 492) = v745;
        *(_BYTE *)(a6 + 496) = 2;
        v483 = v742[6];
        LODWORD(v482) = a5;
      }
LABEL_514:
      *(_BYTE *)(a6 + 420) = v479;
      *(_DWORD *)(a6 + 424) = v480;
      *(_DWORD *)(a6 + 428) = v482;
      *(_DWORD *)(a6 + 432) = v483;
      *(_BYTE *)(a6 + 436) = v481;
      if (*(_BYTE *)(a6 + 200))
      {
LABEL_515:
        LOBYTE(v746) = 1;
        *(_BYTE *)(a6 + 200) = 1;
        *(_QWORD *)(a6 + 204) = -1;
        v747 = -1;
        *(_DWORD *)(a6 + 212) = -1;
        v748 = 8;
        *(_BYTE *)(a6 + 216) = 8;
        *(_BYTE *)(a6 + 20) = 1;
        *(_QWORD *)(a6 + 24) = -1;
        *(_DWORD *)(a6 + 32) = -1;
        *(_BYTE *)(a6 + 36) = 8;
        *(_BYTE *)a6 = 1;
        *(_QWORD *)(a6 + 4) = -1;
        *(_DWORD *)(a6 + 12) = -1;
        LODWORD(v749) = -1;
        v750 = -1;
        *(_BYTE *)(a6 + 16) = 8;
        goto LABEL_726;
      }
      v746 = *(_DWORD *)(a6 + 204);
      if (v746)
      {
        v751 = *(_DWORD *)(v7 + 136);
        v752 = a4[1] - (unsigned __int16)v751;
        v753 = a4[2];
        v749 = *(unsigned int *)(a6 + 208);
        v754 = v749 & 0xFFFFFFFFCFFFFFFFLL;
        v755 = *(_QWORD *)(v7 + 184);
        v756 = (int *)(v755 + 4488 * (v749 & 0xFFFFFFFFCFFFFFFFLL));
        v758 = *v756;
        v757 = v756[1];
        v759 = v756[2];
        v760 = v756[3];
        v761 = *a4 - *v756;
        v763 = *a4 < *v756 || v752 < v757 || v753 < v759;
        if (v763
          || ((v766 = v756 + 4, v764 = v756[4], v765 = v766[1], *a4 < v760) ? (v767 = v752 < v764) : (v767 = 0),
              v767 ? (v768 = v753 < v765) : (v768 = 0),
              !v768))
        {
          v2084 = v757;
          v769 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v751 = *(_DWORD *)(v2092 + 136);
          v755 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v769;
          v757 = v2084;
        }
        v770 = (v760 - v758) >> 1;
        if (v770 != v751)
        {
          v771 = v753 - v759;
          v772 = v752 - v757;
          while (1)
          {
            result = (4 * ((v771 & v770) != 0)) | (8 * ((v772 & v770) != 0));
            LODWORD(v749) = *(_DWORD *)(v755
                                      + 4488 * (v749 & 0xCFFFFFFF)
                                      + (result | (16 * ((v761 & v770) != 0)))
                                      + 24);
            if ((v749 & 0x80000000) != 0)
              goto LABEL_515;
            v761 -= v761 & v770;
            v772 -= v772 & v770;
            v771 -= v771 & v770;
            v770 >>= 1;
            if (v770 == v751)
            {
              v754 = v749 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v746) = 0;
        v747 = 0;
        v773 = (_DWORD *)(v755 + 4488 * v754);
        v774 = v773[13];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = v749;
        *(_DWORD *)(a6 + 212) = v774;
        *(_BYTE *)(a6 + 216) = 7;
        v775 = v773[9];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = v749;
        *(_DWORD *)(a6 + 32) = v775;
        *(_BYTE *)(a6 + 36) = 3;
        v776 = v773[8];
        *(_BYTE *)a6 = 0;
        *(_DWORD *)(a6 + 4) = 0;
        *(_DWORD *)(a6 + 8) = v749;
        *(_DWORD *)(a6 + 12) = v776;
        *(_BYTE *)(a6 + 16) = 2;
        v750 = v773[12];
        v748 = 6;
      }
      else
      {
        v747 = 0;
        v1018 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1019 = v1018[13];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v1019;
        *(_BYTE *)(a6 + 216) = 7;
        v1020 = v1018[9];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v1020;
        *(_BYTE *)(a6 + 36) = 3;
        v1021 = v1018[8];
        *(_BYTE *)a6 = 0;
        *(_DWORD *)(a6 + 4) = 0;
        *(_DWORD *)(a6 + 8) = a5;
        *(_DWORD *)(a6 + 12) = v1021;
        *(_BYTE *)(a6 + 16) = 2;
        v750 = v1018[12];
        v748 = 6;
        LODWORD(v749) = a5;
      }
LABEL_726:
      *(_BYTE *)(a6 + 180) = v746;
      *(_DWORD *)(a6 + 184) = v747;
      *(_DWORD *)(a6 + 188) = v749;
      *(_DWORD *)(a6 + 192) = v750;
      *(_BYTE *)(a6 + 196) = v748;
      if (*(_BYTE *)(a6 + 280))
      {
        LOBYTE(v1022) = 1;
        *(_BYTE *)(a6 + 280) = 1;
        v1023 = -1;
        *(_DWORD *)(a6 + 284) = -1;
        *(_QWORD *)(a6 + 288) = -1;
LABEL_728:
        v1024 = 8;
        *(_BYTE *)(a6 + 296) = 8;
        *(_BYTE *)(a6 + 100) = 1;
        *(_QWORD *)(a6 + 104) = -1;
        *(_DWORD *)(a6 + 112) = -1;
        *(_BYTE *)(a6 + 116) = 8;
        *(_BYTE *)(a6 + 160) = 1;
        *(_QWORD *)(a6 + 164) = -1;
        *(_DWORD *)(a6 + 172) = -1;
        LODWORD(v1025) = -1;
        v1026 = -1;
        *(_BYTE *)(a6 + 176) = 8;
        goto LABEL_935;
      }
      v1022 = *v8;
      if (*v8)
      {
        v1027 = *(_DWORD *)(v7 + 136);
        v1028 = a4[1];
        v1029 = a4[2] + (unsigned __int16)v1027;
        v1025 = *(unsigned int *)(a6 + 288);
        v1030 = v1025 & 0xFFFFFFFFCFFFFFFFLL;
        v1031 = *(_QWORD *)(v7 + 184);
        v1032 = (int *)(v1031 + 4488 * (v1025 & 0xFFFFFFFFCFFFFFFFLL));
        v1034 = *v1032;
        v1033 = v1032[1];
        v1035 = v1032[2];
        v1036 = v1032[3];
        v1037 = *a4 - *v1032;
        v1039 = *a4 < *v1032 || v1028 < v1033 || v1029 < v1035;
        if (v1039
          || ((v1042 = v1032 + 4, v1040 = v1032[4], v1041 = v1042[1], *a4 < v1036)
            ? (v1043 = v1028 < v1040)
            : (v1043 = 0),
              v1043 ? (v1044 = v1029 < v1041) : (v1044 = 0),
              !v1044))
        {
          v2089 = v1033;
          v1045 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1027 = *(_DWORD *)(v2092 + 136);
          v1031 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v1045;
          v1033 = v2089;
        }
        v1046 = (v1036 - v1034) >> 1;
        if (v1046 != v1027)
        {
          v1047 = v1029 - v1035;
          v1048 = v1028 - v1033;
          while (1)
          {
            result = (4 * ((v1047 & v1046) != 0)) | (8 * ((v1048 & v1046) != 0));
            LODWORD(v1025) = *(_DWORD *)(v1031
                                       + 4488 * (v1025 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1037 & v1046) != 0)))
                                       + 24);
            if ((v1025 & 0x80000000) != 0)
              break;
            v1037 -= v1037 & v1046;
            v1048 -= v1048 & v1046;
            v1047 -= v1047 & v1046;
            v1046 >>= 1;
            if (v1046 == v1027)
            {
              v1030 = v1025 & 0xCFFFFFFF;
              goto LABEL_751;
            }
          }
          LOBYTE(v1022) = 1;
          *(_BYTE *)(a6 + 280) = 1;
          *(_QWORD *)v8 = -1;
          v1023 = -1;
          *(_DWORD *)(a6 + 292) = -1;
          goto LABEL_728;
        }
LABEL_751:
        LOBYTE(v1022) = 0;
        v1023 = 0;
        v1049 = (_DWORD *)(v1031 + 4488 * v1030);
        v1050 = v1049[10];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v1025;
        *(_DWORD *)(a6 + 292) = v1050;
        *(_BYTE *)(a6 + 296) = 4;
        v1051 = v1049[6];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = v1025;
        *(_DWORD *)(a6 + 112) = v1051;
        *(_BYTE *)(a6 + 116) = 0;
        v1052 = v1049[8];
        *(_BYTE *)(a6 + 160) = 0;
        *(_DWORD *)(a6 + 164) = 0;
        *(_DWORD *)(a6 + 168) = v1025;
        *(_DWORD *)(a6 + 172) = v1052;
        *(_BYTE *)(a6 + 176) = 2;
        v1026 = v1049[12];
        v1024 = 6;
      }
      else
      {
        v1023 = 0;
        v1285 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1286 = v1285[10];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v1286;
        *(_BYTE *)(a6 + 296) = 4;
        v1287 = v1285[6];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = a5;
        *(_DWORD *)(a6 + 112) = v1287;
        *(_BYTE *)(a6 + 116) = 0;
        v1288 = v1285[8];
        *(_BYTE *)(a6 + 160) = 0;
        *(_DWORD *)(a6 + 164) = 0;
        *(_DWORD *)(a6 + 168) = a5;
        *(_DWORD *)(a6 + 172) = v1288;
        *(_BYTE *)(a6 + 176) = 2;
        v1026 = v1285[12];
        v1024 = 6;
        LODWORD(v1025) = a5;
      }
LABEL_935:
      *(_BYTE *)(a6 + 340) = v1022;
      *(_DWORD *)(a6 + 344) = v1023;
      *(_DWORD *)(a6 + 348) = v1025;
      *(_DWORD *)(a6 + 352) = v1026;
      *(_BYTE *)(a6 + 356) = v1024;
      if (*(_BYTE *)(a6 + 380))
      {
LABEL_936:
        v1289 = 1;
        *(_BYTE *)(a6 + 380) = 1;
        *(_QWORD *)(a6 + 384) = -1;
        v1290 = -1;
        *(_DWORD *)(a6 + 392) = -1;
        v1291 = 8;
        *(_BYTE *)(a6 + 396) = 8;
        LODWORD(v1292) = -1;
        v1293 = -1;
        goto LABEL_1143;
      }
      if (*(_DWORD *)(a6 + 384))
      {
        v1294 = *(_DWORD *)(v7 + 136);
        v1295 = (unsigned __int16)v1294 + *a4;
        v1296 = a4[1] - (unsigned __int16)v1294;
        v1297 = a4[2];
        v1292 = *(unsigned int *)(a6 + 388);
        v1298 = v1292 & 0xFFFFFFFFCFFFFFFFLL;
        v1299 = *(_QWORD *)(v7 + 184);
        v1300 = (int *)(v1299 + 4488 * (v1292 & 0xFFFFFFFFCFFFFFFFLL));
        v1302 = *v1300;
        v1301 = v1300[1];
        v1303 = v1300[2];
        v1304 = v1300[3];
        v1305 = v1295 - *v1300;
        v1307 = v1295 < *v1300 || v1296 < v1301 || v1297 < v1303;
        if (v1307
          || ((v1310 = v1300 + 4, v1308 = v1300[4], v1309 = v1310[1], v1295 < v1304)
            ? (v1311 = v1296 < v1308)
            : (v1311 = 0),
              v1311 ? (v1312 = v1297 < v1309) : (v1312 = 0),
              !v1312))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1294 = *(_DWORD *)(v2092 + 136);
          v1299 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1313 = (v1304 - v1302) >> 1;
        if (v1313 != v1294)
        {
          v1314 = v1297 - v1303;
          v1315 = v1296 - v1301;
          while (1)
          {
            result = (4 * ((v1314 & v1313) != 0)) | (8 * ((v1315 & v1313) != 0));
            LODWORD(v1292) = *(_DWORD *)(v1299
                                       + 4488 * (v1292 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1305 & v1313) != 0)))
                                       + 24);
            if ((v1292 & 0x80000000) != 0)
              goto LABEL_936;
            v1305 -= v1305 & v1313;
            v1315 -= v1315 & v1313;
            v1314 -= v1314 & v1313;
            v1313 >>= 1;
            if (v1313 == v1294)
            {
              v1298 = v1292 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1289 = 0;
        v1290 = 0;
        v1316 = v1299 + 4488 * v1298;
        v1317 = *(_DWORD *)(v1316 + 36);
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = v1292;
        *(_DWORD *)(a6 + 392) = v1317;
        *(_BYTE *)(a6 + 396) = 3;
        v1293 = *(_DWORD *)(v1316 + 32);
        v1291 = 2;
      }
      else
      {
        v1289 = 0;
        v1290 = 0;
        v1537 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1538 = *(_DWORD *)(v1537 + 36);
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v1538;
        *(_BYTE *)(a6 + 396) = 3;
        v1293 = *(_DWORD *)(v1537 + 32);
        v1291 = 2;
        LODWORD(v1292) = a5;
      }
LABEL_1143:
      *(_BYTE *)(a6 + 360) = v1289;
      *(_DWORD *)(a6 + 364) = v1290;
      *(_DWORD *)(a6 + 368) = v1292;
      *(_DWORD *)(a6 + 372) = v1293;
      *(_BYTE *)(a6 + 376) = v1291;
      if (*(_BYTE *)(a6 + 460))
      {
LABEL_1144:
        v1539 = 1;
        *(_BYTE *)(a6 + 460) = 1;
        *(_QWORD *)(a6 + 464) = -1;
        v1540 = -1;
        *(_DWORD *)(a6 + 472) = -1;
        v1541 = 8;
        *(_BYTE *)(a6 + 476) = 8;
        LODWORD(v1542) = -1;
        v1543 = -1;
        goto LABEL_1351;
      }
      if (*(_DWORD *)(a6 + 464))
      {
        v1544 = *(_DWORD *)(v7 + 136);
        v1545 = a4[1];
        v1546 = (unsigned __int16)v1544 + *a4;
        v1547 = a4[2] + (unsigned __int16)v1544;
        v1542 = *(unsigned int *)(a6 + 468);
        v1548 = v1542 & 0xFFFFFFFFCFFFFFFFLL;
        v1549 = *(_QWORD *)(v7 + 184);
        v1550 = (int *)(v1549 + 4488 * (v1542 & 0xFFFFFFFFCFFFFFFFLL));
        v1552 = *v1550;
        v1551 = v1550[1];
        v1553 = v1550[2];
        v1554 = v1550[3];
        v1555 = v1546 - *v1550;
        v1557 = v1546 < *v1550 || v1545 < v1551 || v1547 < v1553;
        if (v1557
          || ((v1560 = v1550 + 4, v1558 = v1550[4], v1559 = v1560[1], v1546 < v1554)
            ? (v1561 = v1545 < v1558)
            : (v1561 = 0),
              v1561 ? (v1562 = v1547 < v1559) : (v1562 = 0),
              !v1562))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1544 = *(_DWORD *)(v2092 + 136);
          v1549 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1563 = (v1554 - v1552) >> 1;
        if (v1563 != v1544)
        {
          v1564 = v1547 - v1553;
          v1565 = v1545 - v1551;
          while (1)
          {
            result = (4 * ((v1564 & v1563) != 0)) | (8 * ((v1565 & v1563) != 0));
            LODWORD(v1542) = *(_DWORD *)(v1549
                                       + 4488 * (v1542 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1555 & v1563) != 0)))
                                       + 24);
            if ((v1542 & 0x80000000) != 0)
              goto LABEL_1144;
            v1555 -= v1555 & v1563;
            v1565 -= v1565 & v1563;
            v1564 -= v1564 & v1563;
            v1563 >>= 1;
            if (v1563 == v1544)
            {
              v1548 = v1542 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1539 = 0;
        v1540 = 0;
        v1566 = v1549 + 4488 * v1548;
        v1567 = *(_DWORD *)(v1566 + 24);
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = v1542;
        *(_DWORD *)(a6 + 472) = v1567;
        *(_BYTE *)(a6 + 476) = 0;
        v1543 = *(_DWORD *)(v1566 + 32);
        v1541 = 2;
      }
      else
      {
        v1539 = 0;
        v1540 = 0;
        v1779 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1780 = *(_DWORD *)(v1779 + 24);
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = a5;
        *(_DWORD *)(a6 + 472) = v1780;
        *(_BYTE *)(a6 + 476) = 0;
        v1543 = *(_DWORD *)(v1779 + 32);
        v1541 = 2;
        LODWORD(v1542) = a5;
      }
LABEL_1351:
      *(_BYTE *)(a6 + 520) = v1539;
      *(_DWORD *)(a6 + 524) = v1540;
      *(_DWORD *)(a6 + 528) = v1542;
      *(_DWORD *)(a6 + 532) = v1543;
      *(_BYTE *)(a6 + 536) = v1541;
      if (*(_BYTE *)(a6 + 220))
      {
LABEL_1352:
        v1781 = 1;
        *(_BYTE *)(a6 + 220) = 1;
        *(_QWORD *)(a6 + 224) = -1;
        v1782 = -1;
        *(_DWORD *)(a6 + 232) = -1;
        v1783 = 8;
        *(_BYTE *)(a6 + 236) = 8;
        LODWORD(v1784) = -1;
        v1785 = -1;
        goto LABEL_1535;
      }
      if (*(_DWORD *)(a6 + 224))
      {
        v1786 = *(_DWORD *)(v7 + 136);
        v1787 = a4[1] - (unsigned __int16)v1786;
        v1788 = a4[2] + (unsigned __int16)v1786;
        v1784 = *(unsigned int *)(a6 + 228);
        v1789 = v1784 & 0xFFFFFFFFCFFFFFFFLL;
        v1790 = *(_QWORD *)(v7 + 184);
        v1791 = (int *)(v1790 + 4488 * (v1784 & 0xFFFFFFFFCFFFFFFFLL));
        v1793 = *v1791;
        v1792 = v1791[1];
        v1794 = v1791[2];
        v1795 = v1791[3];
        v1796 = *a4 - *v1791;
        v1798 = *a4 < *v1791 || v1787 < v1792 || v1788 < v1794;
        if (v1798
          || ((v1801 = v1791 + 4, v1799 = v1791[4], v1800 = v1801[1], *a4 < v1795)
            ? (v1802 = v1787 < v1799)
            : (v1802 = 0),
              v1802 ? (v1803 = v1788 < v1800) : (v1803 = 0),
              !v1803))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1786 = *(_DWORD *)(v2092 + 136);
          v1790 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1804 = (v1795 - v1793) >> 1;
        if (v1804 != v1786)
        {
          v1805 = v1788 - v1794;
          v1806 = v1787 - v1792;
          while (1)
          {
            result = (4 * ((v1805 & v1804) != 0)) | (8 * ((v1806 & v1804) != 0));
            LODWORD(v1784) = *(_DWORD *)(v1790
                                       + 4488 * (v1784 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1796 & v1804) != 0)))
                                       + 24);
            if ((v1784 & 0x80000000) != 0)
              goto LABEL_1352;
            v1796 -= v1796 & v1804;
            v1806 -= v1806 & v1804;
            v1805 -= v1805 & v1804;
            v1804 >>= 1;
            if (v1804 == v1786)
            {
              v1789 = v1784 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1781 = 0;
        v1782 = 0;
        v1807 = v1790 + 4488 * v1789;
        v1808 = *(_DWORD *)(v1807 + 48);
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = v1784;
        *(_DWORD *)(a6 + 232) = v1808;
        *(_BYTE *)(a6 + 236) = 6;
        v1785 = *(_DWORD *)(v1807 + 32);
        v1783 = 2;
      }
      else
      {
        v1781 = 0;
        v1782 = 0;
        v1989 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1990 = *(_DWORD *)(v1989 + 48);
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = a5;
        *(_DWORD *)(a6 + 232) = v1990;
        *(_BYTE *)(a6 + 236) = 6;
        v1785 = *(_DWORD *)(v1989 + 32);
        v1783 = 2;
        LODWORD(v1784) = a5;
      }
LABEL_1535:
      *(_BYTE *)(a6 + 40) = v1781;
      *(_DWORD *)(a6 + 44) = v1782;
      *(_DWORD *)(a6 + 48) = v1784;
      *(_DWORD *)(a6 + 52) = v1785;
      *(_BYTE *)(a6 + 56) = v1783;
      if (*(_BYTE *)(a6 + 400))
      {
        *(_BYTE *)(a6 + 400) = 1;
        *(_QWORD *)(a6 + 404) = -1;
        v1991 = 8;
        v1992 = -1;
      }
      else if (*(_DWORD *)(a6 + 404))
      {
        v1993 = *(_DWORD *)(v7 + 136);
        v1994 = (unsigned __int16)v1993 + *a4;
        v1995 = a4[1] - (unsigned __int16)v1993;
        v1996 = a4[2] + (unsigned __int16)v1993;
        v1997 = *(unsigned int *)(a6 + 408);
        v1998 = v1997 & 0xFFFFFFFFCFFFFFFFLL;
        v1999 = *(_QWORD *)(v7 + 184);
        v2000 = (int *)(v1999 + 4488 * (v1997 & 0xFFFFFFFFCFFFFFFFLL));
        v2002 = *v2000;
        v2001 = v2000[1];
        v2003 = v2000[2];
        v2004 = v2000[3];
        v2005 = v1994 - *v2000;
        v2007 = v1994 < *v2000 || v1995 < v2001 || v1996 < v2003;
        if (v2007
          || ((v2010 = v2000 + 4, v2008 = v2000[4], v2009 = v2010[1], v1994 < v2004)
            ? (v2011 = v1995 < v2008)
            : (v2011 = 0),
              v2011 ? (v2012 = v1996 < v2009) : (v2012 = 0),
              !v2012))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          v1993 = *(_DWORD *)(v2092 + 136);
          v1999 = *(_QWORD *)(v2092 + 184);
        }
        v2013 = (v2004 - v2002) >> 1;
        if (v2013 == v1993)
        {
          a5 = v2093;
LABEL_1620:
          v2065 = 0;
          v2066 = 0;
          v1992 = *(_DWORD *)(v1999 + 4488 * v1998 + 32);
          v1991 = 2;
        }
        else
        {
          v2063 = v1996 - v2003;
          v2064 = v1995 - v2001;
          a5 = v2093;
          while (1)
          {
            result = (4 * ((v2063 & v2013) != 0)) | (8 * ((v2064 & v2013) != 0));
            LODWORD(v1997) = *(_DWORD *)(v1999
                                       + 4488 * (v1997 & 0xCFFFFFFF)
                                       + (result | (16 * ((v2005 & v2013) != 0)))
                                       + 24);
            if ((v1997 & 0x80000000) != 0)
              break;
            v2005 -= v2005 & v2013;
            v2064 -= v2064 & v2013;
            v2063 -= v2063 & v2013;
            v2013 >>= 1;
            if (v2013 == v1993)
            {
              v1998 = v1997 & 0xCFFFFFFF;
              goto LABEL_1620;
            }
          }
          v1991 = 8;
          v2066 = -1;
          v2065 = 1;
          LODWORD(v1997) = -1;
          v1992 = -1;
        }
        *(_BYTE *)(a6 + 400) = v2065;
        *(_DWORD *)(a6 + 404) = v2066;
        *(_DWORD *)(a6 + 408) = v1997;
      }
      else
      {
        v1992 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 32);
        *(_BYTE *)(a6 + 400) = 0;
        *(_DWORD *)(a6 + 404) = 0;
        *(_DWORD *)(a6 + 408) = a5;
        v1991 = 2;
      }
      *(_DWORD *)(a6 + 412) = v1992;
      *(_BYTE *)(a6 + 416) = v1991;
      v2071 = 5;
      goto LABEL_1666;
    case 6:
      if (*(_BYTE *)(a6 + 80))
        goto LABEL_21;
      v44 = *(_DWORD *)(a6 + 84);
      if (v44)
      {
        v252 = *(_DWORD *)(result + 136);
        v253 = a4[1];
        v254 = *a4 - (unsigned __int16)v252;
        v255 = a4[2];
        v47 = *(unsigned int *)(a6 + 88);
        v256 = v47 & 0xFFFFFFFFCFFFFFFFLL;
        v257 = *(_QWORD *)(result + 184);
        v258 = (int *)(v257 + 4488 * (v47 & 0xFFFFFFFFCFFFFFFFLL));
        v260 = *v258;
        v259 = v258[1];
        v261 = v258[2];
        v262 = v258[3];
        v263 = v254 - *v258;
        v265 = v254 < *v258 || v253 < v259 || v255 < v261;
        if (v265
          || ((v268 = v258 + 4, v266 = v258[4], v267 = v268[1], v254 < v262) ? (v269 = v253 < v266) : (v269 = 0),
              v269 ? (v270 = v255 < v267) : (v270 = 0),
              !v270))
        {
          v2079 = v259;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v252 = *(_DWORD *)(v2092 + 136);
          v257 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v259 = v2079;
        }
        v271 = (v262 - v260) >> 1;
        if (v271 != v252)
        {
          v272 = v255 - v261;
          v273 = v253 - v259;
          do
          {
            result = (4 * ((v272 & v271) != 0)) | (8 * ((v273 & v271) != 0));
            LODWORD(v47) = *(_DWORD *)(v257
                                     + 4488 * (v47 & 0xCFFFFFFF)
                                     + (result | (16 * ((v263 & v271) != 0)))
                                     + 24);
            if ((v47 & 0x80000000) != 0)
            {
LABEL_21:
              LOBYTE(v44) = 1;
              *(_BYTE *)(a6 + 80) = 1;
              *(_QWORD *)(a6 + 84) = -1;
              v45 = -1;
              *(_DWORD *)(a6 + 92) = -1;
              v46 = 8;
              *(_BYTE *)(a6 + 96) = 8;
              *(_BYTE *)(a6 + 200) = 1;
              *(_QWORD *)(a6 + 204) = -1;
              *(_DWORD *)(a6 + 212) = -1;
              *(_BYTE *)(a6 + 216) = 8;
              *(_BYTE *)(a6 + 280) = 1;
              *(_DWORD *)(a6 + 284) = -1;
              *(_QWORD *)(a6 + 288) = -1;
              *(_BYTE *)(a6 + 296) = 8;
              *(_BYTE *)(a6 + 20) = 1;
              *(_QWORD *)(a6 + 24) = -1;
              *(_DWORD *)(a6 + 32) = -1;
              *(_BYTE *)(a6 + 36) = 8;
              *(_BYTE *)(a6 + 220) = 1;
              *(_QWORD *)(a6 + 224) = -1;
              *(_DWORD *)(a6 + 232) = -1;
              *(_BYTE *)(a6 + 236) = 8;
              *(_BYTE *)(a6 + 100) = 1;
              *(_QWORD *)(a6 + 104) = -1;
              *(_DWORD *)(a6 + 112) = -1;
              LODWORD(v47) = -1;
              v48 = -1;
              *(_BYTE *)(a6 + 116) = 8;
              goto LABEL_336;
            }
            v263 -= v263 & v271;
            v273 -= v273 & v271;
            v272 -= v272 & v271;
            v271 >>= 1;
          }
          while (v271 != v252);
          v256 = v47 & 0xCFFFFFFF;
        }
        LOBYTE(v44) = 0;
        v45 = 0;
        v274 = (_DWORD *)(v257 + 4488 * v256);
        v275 = v274[8];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = v47;
        *(_DWORD *)(a6 + 92) = v275;
        *(_BYTE *)(a6 + 96) = 2;
        v276 = v274[10];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = v47;
        *(_DWORD *)(a6 + 212) = v276;
        *(_BYTE *)(a6 + 216) = 4;
        v277 = v274[13];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v47;
        *(_DWORD *)(a6 + 292) = v277;
        *(_BYTE *)(a6 + 296) = 7;
        v278 = v274[6];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = v47;
        *(_DWORD *)(a6 + 32) = v278;
        *(_BYTE *)(a6 + 36) = 0;
        v279 = v274[11];
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = v47;
        *(_DWORD *)(a6 + 232) = v279;
        *(_BYTE *)(a6 + 236) = 5;
        v280 = v274[9];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = v47;
        *(_DWORD *)(a6 + 112) = v280;
        *(_BYTE *)(a6 + 116) = 3;
        v48 = v274[7];
        v46 = 1;
      }
      else
      {
        v45 = 0;
        v503 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v504 = v503[8];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v504;
        *(_BYTE *)(a6 + 96) = 2;
        v505 = v503[10];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v505;
        *(_BYTE *)(a6 + 216) = 4;
        v506 = v503[13];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v506;
        *(_BYTE *)(a6 + 296) = 7;
        v507 = v503[6];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v507;
        *(_BYTE *)(a6 + 36) = 0;
        v508 = v503[11];
        *(_BYTE *)(a6 + 220) = 0;
        *(_DWORD *)(a6 + 224) = 0;
        *(_DWORD *)(a6 + 228) = a5;
        *(_DWORD *)(a6 + 232) = v508;
        *(_BYTE *)(a6 + 236) = 5;
        v509 = v503[9];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = a5;
        *(_DWORD *)(a6 + 112) = v509;
        *(_BYTE *)(a6 + 116) = 3;
        v48 = v503[7];
        v46 = 1;
        LODWORD(v47) = a5;
      }
LABEL_336:
      *(_BYTE *)(a6 + 40) = v44;
      *(_DWORD *)(a6 + 44) = v45;
      *(_DWORD *)(a6 + 48) = v47;
      *(_DWORD *)(a6 + 52) = v48;
      *(_BYTE *)(a6 + 56) = v46;
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v510) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v511 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_338:
        v512 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 380) = 1;
        *(_QWORD *)(a6 + 384) = -1;
        *(_DWORD *)(a6 + 392) = -1;
        *(_BYTE *)(a6 + 396) = 8;
        *(_BYTE *)(a6 + 400) = 1;
        *(_DWORD *)(a6 + 404) = -1;
        *(_QWORD *)(a6 + 408) = -1;
        LODWORD(v513) = -1;
        v514 = -1;
        *(_BYTE *)(a6 + 416) = 8;
        goto LABEL_540;
      }
      v510 = v8[40];
      if (v510)
      {
        v515 = *(_DWORD *)(v7 + 136);
        v516 = a4[1];
        v517 = *a4 + (unsigned __int16)v515;
        v518 = a4[2];
        v513 = *(unsigned int *)(a6 + 448);
        v519 = v513 & 0xFFFFFFFFCFFFFFFFLL;
        v520 = *(_QWORD *)(v7 + 184);
        v521 = (int *)(v520 + 4488 * (v513 & 0xFFFFFFFFCFFFFFFFLL));
        v523 = *v521;
        v522 = v521[1];
        v525 = v521[2];
        v524 = v521[3];
        v526 = v517 - *v521;
        if (v517 < *v521 || v516 < v522 || v518 < v525 || v517 >= v524 || v516 >= v521[4] || v518 >= v521[5])
        {
          v527 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v515 = *(_DWORD *)(v2092 + 136);
          v520 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v527;
          v519 = v513 & 0xCFFFFFFF;
        }
        v528 = (v524 - v523) >> 1;
        if (v528 != v515)
        {
          v529 = v518 - v525;
          v530 = v516 - v522;
          while (1)
          {
            result = (4 * ((v529 & v528) != 0)) | (8 * ((v530 & v528) != 0));
            LODWORD(v513) = *(_DWORD *)(v520
                                      + 4488 * (v513 & 0xCFFFFFFF)
                                      + (result | (16 * ((v526 & v528) != 0)))
                                      + 24);
            if ((v513 & 0x80000000) != 0)
              break;
            v526 -= v526 & v528;
            v530 -= v530 & v528;
            v529 -= v529 & v528;
            v528 >>= 1;
            if (v528 == v515)
            {
              v519 = v513 & 0xCFFFFFFF;
              goto LABEL_353;
            }
          }
          LOBYTE(v510) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v511 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_338;
        }
LABEL_353:
        LOBYTE(v510) = 0;
        v511 = 0;
        v531 = (_DWORD *)(v520 + 4488 * v519);
        v532 = v531[8];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v513;
        *(_DWORD *)(a6 + 452) = v532;
        *(_BYTE *)(a6 + 456) = 2;
        v533 = v531[6];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = v513;
        *(_DWORD *)(a6 + 392) = v533;
        *(_BYTE *)(a6 + 396) = 0;
        v534 = v531[7];
        *(_BYTE *)(a6 + 400) = 0;
        *(_DWORD *)(a6 + 404) = 0;
        *(_DWORD *)(a6 + 408) = v513;
        *(_DWORD *)(a6 + 412) = v534;
        *(_BYTE *)(a6 + 416) = 1;
        v514 = v531[9];
        v512 = 3;
      }
      else
      {
        v511 = 0;
        v777 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v778 = v777[8];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v778;
        *(_BYTE *)(a6 + 456) = 2;
        v779 = v777[6];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v779;
        *(_BYTE *)(a6 + 396) = 0;
        v780 = v777[7];
        *(_BYTE *)(a6 + 400) = 0;
        *(_DWORD *)(a6 + 404) = 0;
        *(_DWORD *)(a6 + 408) = a5;
        *(_DWORD *)(a6 + 412) = v780;
        *(_BYTE *)(a6 + 416) = 1;
        v514 = v777[9];
        v512 = 3;
        LODWORD(v513) = a5;
      }
LABEL_540:
      *(_BYTE *)(a6 + 460) = v510;
      *(_DWORD *)(a6 + 464) = v511;
      *(_DWORD *)(a6 + 468) = v513;
      *(_DWORD *)(a6 + 472) = v514;
      *(_BYTE *)(a6 + 476) = v512;
      if (*(_BYTE *)(a6 + 320))
      {
        LOBYTE(v781) = 1;
        *(_BYTE *)(a6 + 320) = 1;
        v782 = -1;
        *(_DWORD *)(a6 + 324) = -1;
        *(_QWORD *)(a6 + 328) = -1;
LABEL_542:
        v783 = 8;
        *(_BYTE *)(a6 + 336) = 8;
        *(_BYTE *)(a6 + 140) = 1;
        *(_QWORD *)(a6 + 144) = -1;
        *(_DWORD *)(a6 + 152) = -1;
        *(_BYTE *)(a6 + 156) = 8;
        *(_BYTE *)(a6 + 160) = 1;
        *(_QWORD *)(a6 + 164) = -1;
        *(_DWORD *)(a6 + 172) = -1;
        LODWORD(v784) = -1;
        v785 = -1;
        *(_BYTE *)(a6 + 176) = 8;
        goto LABEL_753;
      }
      v781 = v8[10];
      if (v781)
      {
        v786 = *(_DWORD *)(v7 + 136);
        v787 = a4[1] + (unsigned __int16)v786;
        v788 = a4[2];
        v784 = *(unsigned int *)(a6 + 328);
        v789 = v784 & 0xFFFFFFFFCFFFFFFFLL;
        v790 = *(_QWORD *)(v7 + 184);
        v791 = (int *)(v790 + 4488 * (v784 & 0xFFFFFFFFCFFFFFFFLL));
        v793 = *v791;
        v792 = v791[1];
        v794 = v791[2];
        v795 = v791[3];
        v796 = *a4 - *v791;
        v798 = *a4 < *v791 || v787 < v792 || v788 < v794;
        if (v798
          || ((v801 = v791 + 4, v799 = v791[4], v800 = v801[1], *a4 < v795) ? (v802 = v787 < v799) : (v802 = 0),
              v802 ? (v803 = v788 < v800) : (v803 = 0),
              !v803))
        {
          v2085 = v792;
          v804 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v786 = *(_DWORD *)(v2092 + 136);
          v790 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v804;
          v792 = v2085;
        }
        v805 = (v795 - v793) >> 1;
        if (v805 != v786)
        {
          v806 = v788 - v794;
          v807 = v787 - v792;
          while (1)
          {
            result = (4 * ((v806 & v805) != 0)) | (8 * ((v807 & v805) != 0));
            LODWORD(v784) = *(_DWORD *)(v790
                                      + 4488 * (v784 & 0xCFFFFFFF)
                                      + (result | (16 * ((v796 & v805) != 0)))
                                      + 24);
            if ((v784 & 0x80000000) != 0)
              break;
            v796 -= v796 & v805;
            v807 -= v807 & v805;
            v806 -= v806 & v805;
            v805 >>= 1;
            if (v805 == v786)
            {
              v789 = v784 & 0xCFFFFFFF;
              goto LABEL_565;
            }
          }
          LOBYTE(v781) = 1;
          *(_BYTE *)(a6 + 320) = 1;
          *((_QWORD *)v8 + 5) = -1;
          v782 = -1;
          *(_DWORD *)(a6 + 332) = -1;
          goto LABEL_542;
        }
LABEL_565:
        LOBYTE(v781) = 0;
        v782 = 0;
        v808 = (_DWORD *)(v790 + 4488 * v789);
        v809 = v808[10];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v784;
        *(_DWORD *)(a6 + 332) = v809;
        *(_BYTE *)(a6 + 336) = 4;
        v810 = v808[6];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = v784;
        *(_DWORD *)(a6 + 152) = v810;
        *(_BYTE *)(a6 + 156) = 0;
        v811 = v808[7];
        *(_BYTE *)(a6 + 160) = 0;
        *(_DWORD *)(a6 + 164) = 0;
        *(_DWORD *)(a6 + 168) = v784;
        *(_DWORD *)(a6 + 172) = v811;
        *(_BYTE *)(a6 + 176) = 1;
        v785 = v808[11];
        v783 = 5;
      }
      else
      {
        v782 = 0;
        v1053 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1054 = v1053[10];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v1054;
        *(_BYTE *)(a6 + 336) = 4;
        v1055 = v1053[6];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v1055;
        *(_BYTE *)(a6 + 156) = 0;
        v1056 = v1053[7];
        *(_BYTE *)(a6 + 160) = 0;
        *(_DWORD *)(a6 + 164) = 0;
        *(_DWORD *)(a6 + 168) = a5;
        *(_DWORD *)(a6 + 172) = v1056;
        *(_BYTE *)(a6 + 176) = 1;
        v785 = v1053[11];
        v783 = 5;
        LODWORD(v784) = a5;
      }
LABEL_753:
      *(_BYTE *)(a6 + 340) = v781;
      *(_DWORD *)(a6 + 344) = v782;
      *(_DWORD *)(a6 + 348) = v784;
      *(_DWORD *)(a6 + 352) = v785;
      *(_BYTE *)(a6 + 356) = v783;
      if (*(_BYTE *)(a6 + 240))
      {
LABEL_754:
        LOBYTE(v1057) = 1;
        *(_BYTE *)(a6 + 240) = 1;
        *(_QWORD *)(a6 + 244) = -1;
        v1058 = -1;
        *(_DWORD *)(a6 + 252) = -1;
        v1059 = 8;
        *(_BYTE *)(a6 + 256) = 8;
        *(_BYTE *)(a6 + 60) = 1;
        *(_QWORD *)(a6 + 64) = -1;
        *(_DWORD *)(a6 + 72) = -1;
        *(_BYTE *)(a6 + 76) = 8;
        *(_BYTE *)a6 = 1;
        *(_QWORD *)(a6 + 4) = -1;
        *(_DWORD *)(a6 + 12) = -1;
        LODWORD(v1060) = -1;
        v1061 = -1;
        *(_BYTE *)(a6 + 16) = 8;
        goto LABEL_961;
      }
      v1057 = *(_DWORD *)(a6 + 244);
      if (v1057)
      {
        v1062 = *(_DWORD *)(v7 + 136);
        v1063 = a4[1];
        v1064 = a4[2] - (unsigned __int16)v1062;
        v1060 = *(unsigned int *)(a6 + 248);
        v1065 = v1060 & 0xFFFFFFFFCFFFFFFFLL;
        v1066 = *(_QWORD *)(v7 + 184);
        v1067 = (int *)(v1066 + 4488 * (v1060 & 0xFFFFFFFFCFFFFFFFLL));
        v1069 = *v1067;
        v1068 = v1067[1];
        v1070 = v1067[2];
        v1071 = v1067[3];
        v1072 = *a4 - *v1067;
        v1074 = *a4 < *v1067 || v1063 < v1068 || v1064 < v1070;
        if (v1074
          || ((v1077 = v1067 + 4, v1075 = v1067[4], v1076 = v1077[1], *a4 < v1071)
            ? (v1078 = v1063 < v1075)
            : (v1078 = 0),
              v1078 ? (v1079 = v1064 < v1076) : (v1079 = 0),
              !v1079))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1062 = *(_DWORD *)(v2092 + 136);
          v1066 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1080 = (v1071 - v1069) >> 1;
        if (v1080 != v1062)
        {
          v1081 = v1064 - v1070;
          v1082 = v1063 - v1068;
          while (1)
          {
            result = (4 * ((v1081 & v1080) != 0)) | (8 * ((v1082 & v1080) != 0));
            LODWORD(v1060) = *(_DWORD *)(v1066
                                       + 4488 * (v1060 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1072 & v1080) != 0)))
                                       + 24);
            if ((v1060 & 0x80000000) != 0)
              goto LABEL_754;
            v1072 -= v1072 & v1080;
            v1082 -= v1082 & v1080;
            v1081 -= v1081 & v1080;
            v1080 >>= 1;
            if (v1080 == v1062)
            {
              v1065 = v1060 & 0xCFFFFFFF;
              break;
            }
          }
        }
        LOBYTE(v1057) = 0;
        v1058 = 0;
        v1083 = (_DWORD *)(v1066 + 4488 * v1065);
        v1084 = v1083[13];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = v1060;
        *(_DWORD *)(a6 + 252) = v1084;
        *(_BYTE *)(a6 + 256) = 7;
        v1085 = v1083[9];
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = v1060;
        *(_DWORD *)(a6 + 72) = v1085;
        *(_BYTE *)(a6 + 76) = 3;
        v1086 = v1083[7];
        *(_BYTE *)a6 = 0;
        *(_DWORD *)(a6 + 4) = 0;
        *(_DWORD *)(a6 + 8) = v1060;
        *(_DWORD *)(a6 + 12) = v1086;
        *(_BYTE *)(a6 + 16) = 1;
        v1061 = v1083[11];
        v1059 = 5;
      }
      else
      {
        v1058 = 0;
        v1318 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1319 = v1318[13];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v1319;
        *(_BYTE *)(a6 + 256) = 7;
        v1320 = v1318[9];
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = a5;
        *(_DWORD *)(a6 + 72) = v1320;
        *(_BYTE *)(a6 + 76) = 3;
        v1321 = v1318[7];
        *(_BYTE *)a6 = 0;
        *(_DWORD *)(a6 + 4) = 0;
        *(_DWORD *)(a6 + 8) = a5;
        *(_DWORD *)(a6 + 12) = v1321;
        *(_BYTE *)(a6 + 16) = 1;
        v1061 = v1318[11];
        v1059 = 5;
        LODWORD(v1060) = a5;
      }
LABEL_961:
      *(_BYTE *)(a6 + 180) = v1057;
      *(_DWORD *)(a6 + 184) = v1058;
      *(_DWORD *)(a6 + 188) = v1060;
      *(_DWORD *)(a6 + 192) = v1061;
      *(_BYTE *)(a6 + 196) = v1059;
      if (*(_BYTE *)(a6 + 500))
      {
LABEL_962:
        v1322 = 1;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        v1323 = -1;
        *(_DWORD *)(a6 + 512) = -1;
        v1324 = 8;
        *(_BYTE *)(a6 + 516) = 8;
        LODWORD(v1325) = -1;
        v1326 = -1;
        goto LABEL_1169;
      }
      if (*(_DWORD *)(a6 + 504))
      {
        v1327 = *(_DWORD *)(v7 + 136);
        v1328 = (unsigned __int16)v1327 + *a4;
        v1329 = a4[1] + (unsigned __int16)v1327;
        v1330 = a4[2];
        v1325 = *(unsigned int *)(a6 + 508);
        v1331 = v1325 & 0xFFFFFFFFCFFFFFFFLL;
        v1332 = *(_QWORD *)(v7 + 184);
        v1333 = (int *)(v1332 + 4488 * (v1325 & 0xFFFFFFFFCFFFFFFFLL));
        v1335 = *v1333;
        v1334 = v1333[1];
        v1336 = v1333[2];
        v1337 = v1333[3];
        v1338 = v1328 - *v1333;
        v1340 = v1328 < *v1333 || v1329 < v1334 || v1330 < v1336;
        if (v1340
          || ((v1343 = v1333 + 4, v1341 = v1333[4], v1342 = v1343[1], v1328 < v1337)
            ? (v1344 = v1329 < v1341)
            : (v1344 = 0),
              v1344 ? (v1345 = v1330 < v1342) : (v1345 = 0),
              !v1345))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1327 = *(_DWORD *)(v2092 + 136);
          v1332 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1346 = (v1337 - v1335) >> 1;
        if (v1346 != v1327)
        {
          v1347 = v1330 - v1336;
          v1348 = v1329 - v1334;
          while (1)
          {
            result = (4 * ((v1347 & v1346) != 0)) | (8 * ((v1348 & v1346) != 0));
            LODWORD(v1325) = *(_DWORD *)(v1332
                                       + 4488 * (v1325 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1338 & v1346) != 0)))
                                       + 24);
            if ((v1325 & 0x80000000) != 0)
              goto LABEL_962;
            v1338 -= v1338 & v1346;
            v1348 -= v1348 & v1346;
            v1347 -= v1347 & v1346;
            v1346 >>= 1;
            if (v1346 == v1327)
            {
              v1331 = v1325 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1322 = 0;
        v1323 = 0;
        v1349 = v1332 + 4488 * v1331;
        v1350 = *(_DWORD *)(v1349 + 24);
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v1325;
        *(_DWORD *)(a6 + 512) = v1350;
        *(_BYTE *)(a6 + 516) = 0;
        v1326 = *(_DWORD *)(v1349 + 28);
        v1324 = 1;
      }
      else
      {
        v1322 = 0;
        v1323 = 0;
        v1568 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1569 = *(_DWORD *)(v1568 + 24);
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v1569;
        *(_BYTE *)(a6 + 516) = 0;
        v1326 = *(_DWORD *)(v1568 + 28);
        v1324 = 1;
        LODWORD(v1325) = a5;
      }
LABEL_1169:
      *(_BYTE *)(a6 + 520) = v1322;
      *(_DWORD *)(a6 + 524) = v1323;
      *(_DWORD *)(a6 + 528) = v1325;
      *(_DWORD *)(a6 + 532) = v1326;
      *(_BYTE *)(a6 + 536) = v1324;
      if (*(_BYTE *)(a6 + 420))
      {
LABEL_1170:
        v1570 = 1;
        *(_BYTE *)(a6 + 420) = 1;
        *(_QWORD *)(a6 + 424) = -1;
        v1571 = -1;
        *(_DWORD *)(a6 + 432) = -1;
        v1572 = 8;
        *(_BYTE *)(a6 + 436) = 8;
        LODWORD(v1573) = -1;
        v1574 = -1;
        goto LABEL_1377;
      }
      if (*(_DWORD *)(a6 + 424))
      {
        v1575 = *(_DWORD *)(v7 + 136);
        v1576 = a4[1];
        v1577 = (unsigned __int16)v1575 + *a4;
        v1578 = a4[2] - (unsigned __int16)v1575;
        v1573 = *(unsigned int *)(a6 + 428);
        v1579 = v1573 & 0xFFFFFFFFCFFFFFFFLL;
        v1580 = *(_QWORD *)(v7 + 184);
        v1581 = (int *)(v1580 + 4488 * (v1573 & 0xFFFFFFFFCFFFFFFFLL));
        v1583 = *v1581;
        v1582 = v1581[1];
        v1584 = v1581[2];
        v1585 = v1581[3];
        v1586 = v1577 - *v1581;
        v1588 = v1577 < *v1581 || v1576 < v1582 || v1578 < v1584;
        if (v1588
          || ((v1591 = v1581 + 4, v1589 = v1581[4], v1590 = v1591[1], v1577 < v1585)
            ? (v1592 = v1576 < v1589)
            : (v1592 = 0),
              v1592 ? (v1593 = v1578 < v1590) : (v1593 = 0),
              !v1593))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1575 = *(_DWORD *)(v2092 + 136);
          v1580 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1594 = (v1585 - v1583) >> 1;
        if (v1594 != v1575)
        {
          v1595 = v1578 - v1584;
          v1596 = v1576 - v1582;
          while (1)
          {
            result = (4 * ((v1595 & v1594) != 0)) | (8 * ((v1596 & v1594) != 0));
            LODWORD(v1573) = *(_DWORD *)(v1580
                                       + 4488 * (v1573 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1586 & v1594) != 0)))
                                       + 24);
            if ((v1573 & 0x80000000) != 0)
              goto LABEL_1170;
            v1586 -= v1586 & v1594;
            v1596 -= v1596 & v1594;
            v1595 -= v1595 & v1594;
            v1594 >>= 1;
            if (v1594 == v1575)
            {
              v1579 = v1573 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1570 = 0;
        v1571 = 0;
        v1597 = v1580 + 4488 * v1579;
        v1598 = *(_DWORD *)(v1597 + 36);
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = v1573;
        *(_DWORD *)(a6 + 432) = v1598;
        *(_BYTE *)(a6 + 436) = 3;
        v1574 = *(_DWORD *)(v1597 + 28);
        v1572 = 1;
      }
      else
      {
        v1570 = 0;
        v1571 = 0;
        v1809 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1810 = *(_DWORD *)(v1809 + 36);
        *(_BYTE *)(a6 + 420) = 0;
        *(_DWORD *)(a6 + 424) = 0;
        *(_DWORD *)(a6 + 428) = a5;
        *(_DWORD *)(a6 + 432) = v1810;
        *(_BYTE *)(a6 + 436) = 3;
        v1574 = *(_DWORD *)(v1809 + 28);
        v1572 = 1;
        LODWORD(v1573) = a5;
      }
LABEL_1377:
      *(_BYTE *)(a6 + 360) = v1570;
      *(_DWORD *)(a6 + 364) = v1571;
      *(_DWORD *)(a6 + 368) = v1573;
      *(_DWORD *)(a6 + 372) = v1574;
      *(_BYTE *)(a6 + 376) = v1572;
      if (*(_BYTE *)(a6 + 300))
      {
LABEL_1378:
        v1811 = 1;
        *(_BYTE *)(a6 + 300) = 1;
        *(_QWORD *)(a6 + 304) = -1;
        v1812 = -1;
        *(_DWORD *)(a6 + 312) = -1;
        v1813 = 8;
        *(_BYTE *)(a6 + 316) = 8;
        LODWORD(v1814) = -1;
        v1815 = -1;
        goto LABEL_1557;
      }
      if (*(_DWORD *)(a6 + 304))
      {
        v1816 = *(_DWORD *)(v7 + 136);
        v1817 = a4[1] + (unsigned __int16)v1816;
        v1818 = a4[2] - (unsigned __int16)v1816;
        v1814 = *(unsigned int *)(a6 + 308);
        v1819 = v1814 & 0xFFFFFFFFCFFFFFFFLL;
        v1820 = *(_QWORD *)(v7 + 184);
        v1821 = (int *)(v1820 + 4488 * (v1814 & 0xFFFFFFFFCFFFFFFFLL));
        v1823 = *v1821;
        v1822 = v1821[1];
        v1824 = v1821[2];
        v1825 = v1821[3];
        v1826 = *a4 - *v1821;
        v1828 = *a4 < *v1821 || v1817 < v1822 || v1818 < v1824;
        if (v1828
          || ((v1831 = v1821 + 4, v1829 = v1821[4], v1830 = v1831[1], *a4 < v1825)
            ? (v1832 = v1817 < v1829)
            : (v1832 = 0),
              v1832 ? (v1833 = v1818 < v1830) : (v1833 = 0),
              !v1833))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1816 = *(_DWORD *)(v2092 + 136);
          v1820 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1834 = (v1825 - v1823) >> 1;
        if (v1834 != v1816)
        {
          v1835 = v1818 - v1824;
          v1836 = v1817 - v1822;
          while (1)
          {
            result = (4 * ((v1835 & v1834) != 0)) | (8 * ((v1836 & v1834) != 0));
            LODWORD(v1814) = *(_DWORD *)(v1820
                                       + 4488 * (v1814 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1826 & v1834) != 0)))
                                       + 24);
            if ((v1814 & 0x80000000) != 0)
              goto LABEL_1378;
            v1826 -= v1826 & v1834;
            v1836 -= v1836 & v1834;
            v1835 -= v1835 & v1834;
            v1834 >>= 1;
            if (v1834 == v1816)
            {
              v1819 = v1814 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1811 = 0;
        v1812 = 0;
        v1837 = v1820 + 4488 * v1819;
        v1838 = *(_DWORD *)(v1837 + 44);
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = v1814;
        *(_DWORD *)(a6 + 312) = v1838;
        *(_BYTE *)(a6 + 316) = 5;
        v1815 = *(_DWORD *)(v1837 + 28);
        v1813 = 1;
      }
      else
      {
        v1811 = 0;
        v1812 = 0;
        v2014 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v2015 = *(_DWORD *)(v2014 + 44);
        *(_BYTE *)(a6 + 300) = 0;
        *(_DWORD *)(a6 + 304) = 0;
        *(_DWORD *)(a6 + 308) = a5;
        *(_DWORD *)(a6 + 312) = v2015;
        *(_BYTE *)(a6 + 316) = 5;
        v1815 = *(_DWORD *)(v2014 + 28);
        v1813 = 1;
        LODWORD(v1814) = a5;
      }
LABEL_1557:
      *(_BYTE *)(a6 + 120) = v1811;
      *(_DWORD *)(a6 + 124) = v1812;
      *(_DWORD *)(a6 + 128) = v1814;
      *(_DWORD *)(a6 + 132) = v1815;
      *(_BYTE *)(a6 + 136) = v1813;
      if (*(_BYTE *)(a6 + 480))
      {
        *(_BYTE *)(a6 + 480) = 1;
        *(_QWORD *)(a6 + 484) = -1;
        v2016 = 8;
        v2017 = -1;
      }
      else if (*(_DWORD *)(a6 + 484))
      {
        v2018 = *(_DWORD *)(v7 + 136);
        v2019 = (unsigned __int16)v2018 + *a4;
        v2020 = a4[1] + (unsigned __int16)v2018;
        v2021 = a4[2] - (unsigned __int16)v2018;
        v2022 = *(unsigned int *)(a6 + 488);
        v2023 = v2022 & 0xFFFFFFFFCFFFFFFFLL;
        v2024 = *(_QWORD *)(v7 + 184);
        v2025 = (int *)(v2024 + 4488 * (v2022 & 0xFFFFFFFFCFFFFFFFLL));
        v2027 = *v2025;
        v2026 = v2025[1];
        v2028 = v2025[2];
        v2029 = v2025[3];
        v2030 = v2019 - *v2025;
        v2032 = v2019 < *v2025 || v2020 < v2026 || v2021 < v2028;
        if (v2032
          || ((v2035 = v2025 + 4, v2033 = v2025[4], v2034 = v2035[1], v2019 < v2029)
            ? (v2036 = v2020 < v2033)
            : (v2036 = 0),
              v2036 ? (v2037 = v2021 < v2034) : (v2037 = 0),
              !v2037))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          v2018 = *(_DWORD *)(v2092 + 136);
          v2024 = *(_QWORD *)(v2092 + 184);
        }
        v2038 = (v2029 - v2027) >> 1;
        if (v2038 == v2018)
        {
          a5 = v2093;
LABEL_1625:
          v2069 = 0;
          v2070 = 0;
          v2017 = *(_DWORD *)(v2024 + 4488 * v2023 + 28);
          v2016 = 1;
        }
        else
        {
          v2067 = v2021 - v2028;
          v2068 = v2020 - v2026;
          a5 = v2093;
          while (1)
          {
            result = (4 * ((v2067 & v2038) != 0)) | (8 * ((v2068 & v2038) != 0));
            LODWORD(v2022) = *(_DWORD *)(v2024
                                       + 4488 * (v2022 & 0xCFFFFFFF)
                                       + (result | (16 * ((v2030 & v2038) != 0)))
                                       + 24);
            if ((v2022 & 0x80000000) != 0)
              break;
            v2030 -= v2030 & v2038;
            v2068 -= v2068 & v2038;
            v2067 -= v2067 & v2038;
            v2038 >>= 1;
            if (v2038 == v2018)
            {
              v2023 = v2022 & 0xCFFFFFFF;
              goto LABEL_1625;
            }
          }
          v2016 = 8;
          v2070 = -1;
          v2069 = 1;
          LODWORD(v2022) = -1;
          v2017 = -1;
        }
        *(_BYTE *)(a6 + 480) = v2069;
        *(_DWORD *)(a6 + 484) = v2070;
        *(_DWORD *)(a6 + 488) = v2022;
      }
      else
      {
        v2017 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 28);
        *(_BYTE *)(a6 + 480) = 0;
        *(_DWORD *)(a6 + 484) = 0;
        *(_DWORD *)(a6 + 488) = a5;
        v2016 = 1;
      }
      *(_DWORD *)(a6 + 492) = v2017;
      *(_BYTE *)(a6 + 496) = v2016;
      v2071 = 6;
      goto LABEL_1666;
    default:
      if (*(_BYTE *)(a6 + 80))
        goto LABEL_6;
      v14 = *(_DWORD *)(a6 + 84);
      if (v14)
      {
        v78 = *(_DWORD *)(result + 136);
        v79 = a4[1];
        v80 = *a4 - (unsigned __int16)v78;
        v81 = a4[2];
        v17 = *(unsigned int *)(a6 + 88);
        v82 = v17 & 0xFFFFFFFFCFFFFFFFLL;
        v83 = *(_QWORD *)(result + 184);
        v84 = (int *)(v83 + 4488 * (v17 & 0xFFFFFFFFCFFFFFFFLL));
        v86 = *v84;
        v85 = v84[1];
        v87 = v84[2];
        v88 = v84[3];
        v89 = v80 - *v84;
        v91 = v80 < *v84 || v79 < v85 || v81 < v87;
        if (v91
          || ((v94 = v84 + 4, v92 = v84[4], v93 = v94[1], v80 < v88) ? (v95 = v79 < v92) : (v95 = 0),
              v95 ? (v96 = v81 < v93) : (v96 = 0),
              !v96))
        {
          v2073 = v85;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v78 = *(_DWORD *)(v2092 + 136);
          v83 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = (int *)(a6 + 284);
          v85 = v2073;
        }
        v97 = (v88 - v86) >> 1;
        if (v97 != v78)
        {
          v98 = v81 - v87;
          v99 = v79 - v85;
          do
          {
            result = (4 * ((v98 & v97) != 0)) | (8 * ((v99 & v97) != 0));
            LODWORD(v17) = *(_DWORD *)(v83
                                     + 4488 * (v17 & 0xCFFFFFFF)
                                     + (result | (16 * ((v89 & v97) != 0)))
                                     + 24);
            if ((v17 & 0x80000000) != 0)
            {
LABEL_6:
              LOBYTE(v14) = 1;
              *(_BYTE *)(a6 + 80) = 1;
              *(_QWORD *)(a6 + 84) = -1;
              v15 = -1;
              *(_DWORD *)(a6 + 92) = -1;
              v16 = 8;
              *(_BYTE *)(a6 + 96) = 8;
              *(_BYTE *)(a6 + 200) = 1;
              *(_QWORD *)(a6 + 204) = -1;
              *(_DWORD *)(a6 + 212) = -1;
              *(_BYTE *)(a6 + 216) = 8;
              *(_BYTE *)(a6 + 240) = 1;
              *(_QWORD *)(a6 + 244) = -1;
              *(_DWORD *)(a6 + 252) = -1;
              *(_BYTE *)(a6 + 256) = 8;
              *(_BYTE *)(a6 + 20) = 1;
              *(_QWORD *)(a6 + 24) = -1;
              *(_DWORD *)(a6 + 32) = -1;
              *(_BYTE *)(a6 + 36) = 8;
              *(_BYTE *)(a6 + 180) = 1;
              *(_QWORD *)(a6 + 184) = -1;
              *(_DWORD *)(a6 + 192) = -1;
              *(_BYTE *)(a6 + 196) = 8;
              *(_BYTE *)(a6 + 60) = 1;
              *(_QWORD *)(a6 + 64) = -1;
              *(_DWORD *)(a6 + 72) = -1;
              LODWORD(v17) = -1;
              v18 = -1;
              *(_BYTE *)(a6 + 76) = 8;
              goto LABEL_225;
            }
            v89 -= v89 & v97;
            v99 -= v99 & v97;
            v98 -= v98 & v97;
            v97 >>= 1;
          }
          while (v97 != v78);
          v82 = v17 & 0xCFFFFFFF;
        }
        LOBYTE(v14) = 0;
        v15 = 0;
        v16 = 0;
        v100 = (_DWORD *)(v83 + 4488 * v82);
        v101 = v100[9];
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = v17;
        *(_DWORD *)(a6 + 92) = v101;
        *(_BYTE *)(a6 + 96) = 3;
        v102 = v100[11];
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = v17;
        *(_DWORD *)(a6 + 212) = v102;
        *(_BYTE *)(a6 + 216) = 5;
        v103 = v100[12];
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = v17;
        *(_DWORD *)(a6 + 252) = v103;
        *(_BYTE *)(a6 + 256) = 6;
        v104 = v100[7];
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = v17;
        *(_DWORD *)(a6 + 32) = v104;
        *(_BYTE *)(a6 + 36) = 1;
        v105 = v100[10];
        *(_DWORD *)(a6 + 184) = 0;
        *(_DWORD *)(a6 + 188) = v17;
        *(_DWORD *)(a6 + 192) = v105;
        *(_BYTE *)(a6 + 196) = 4;
        v106 = v100[8];
        *(_DWORD *)(a6 + 68) = v17;
        *(_DWORD *)(a6 + 72) = v106;
        *(_BYTE *)(a6 + 76) = 2;
        *(_BYTE *)(a6 + 80) = 0;
        *(_BYTE *)(a6 + 200) = 0;
        *(_BYTE *)(a6 + 240) = 0;
        *(_BYTE *)(a6 + 20) = 0;
        *(_BYTE *)(a6 + 180) = 0;
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        v18 = v100[6];
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v312 = (_DWORD *)(*(_QWORD *)(result + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v313 = v312[9];
        *(_BYTE *)(a6 + 80) = 0;
        *(_DWORD *)(a6 + 84) = 0;
        *(_DWORD *)(a6 + 88) = a5;
        *(_DWORD *)(a6 + 92) = v313;
        *(_BYTE *)(a6 + 96) = 3;
        v314 = v312[11];
        *(_BYTE *)(a6 + 200) = 0;
        *(_DWORD *)(a6 + 204) = 0;
        *(_DWORD *)(a6 + 208) = a5;
        *(_DWORD *)(a6 + 212) = v314;
        *(_BYTE *)(a6 + 216) = 5;
        v315 = v312[12];
        *(_BYTE *)(a6 + 240) = 0;
        *(_DWORD *)(a6 + 244) = 0;
        *(_DWORD *)(a6 + 248) = a5;
        *(_DWORD *)(a6 + 252) = v315;
        *(_BYTE *)(a6 + 256) = 6;
        v316 = v312[7];
        *(_BYTE *)(a6 + 20) = 0;
        *(_DWORD *)(a6 + 24) = 0;
        *(_DWORD *)(a6 + 28) = a5;
        *(_DWORD *)(a6 + 32) = v316;
        *(_BYTE *)(a6 + 36) = 1;
        v317 = v312[10];
        *(_BYTE *)(a6 + 180) = 0;
        *(_DWORD *)(a6 + 184) = 0;
        *(_DWORD *)(a6 + 188) = a5;
        *(_DWORD *)(a6 + 192) = v317;
        *(_BYTE *)(a6 + 196) = 4;
        v318 = v312[8];
        *(_BYTE *)(a6 + 60) = 0;
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 68) = a5;
        *(_DWORD *)(a6 + 72) = v318;
        *(_BYTE *)(a6 + 76) = 2;
        v18 = v312[6];
        LODWORD(v17) = a5;
      }
LABEL_225:
      *(_BYTE *)a6 = v14;
      *(_DWORD *)(a6 + 4) = v15;
      *(_DWORD *)(a6 + 8) = v17;
      *(_DWORD *)(a6 + 12) = v18;
      *(_BYTE *)(a6 + 16) = v16;
      if (*(_BYTE *)(a6 + 440))
      {
        LOBYTE(v319) = 1;
        *(_BYTE *)(a6 + 440) = 1;
        v320 = -1;
        *(_DWORD *)(a6 + 444) = -1;
        *(_QWORD *)(a6 + 448) = -1;
LABEL_227:
        v321 = 8;
        *(_BYTE *)(a6 + 456) = 8;
        *(_BYTE *)(a6 + 380) = 1;
        *(_QWORD *)(a6 + 384) = -1;
        *(_DWORD *)(a6 + 392) = -1;
        *(_BYTE *)(a6 + 396) = 8;
        *(_BYTE *)(a6 + 360) = 1;
        *(_DWORD *)(a6 + 364) = -1;
        *(_QWORD *)(a6 + 368) = -1;
        LODWORD(v322) = -1;
        v323 = -1;
        *(_BYTE *)(a6 + 376) = 8;
        goto LABEL_381;
      }
      v319 = v8[40];
      if (v319)
      {
        v324 = *(_DWORD *)(v7 + 136);
        v325 = a4[1];
        v326 = *a4 + (unsigned __int16)v324;
        v327 = a4[2];
        v322 = *(unsigned int *)(a6 + 448);
        v328 = v322 & 0xFFFFFFFFCFFFFFFFLL;
        v329 = *(_QWORD *)(v7 + 184);
        v330 = (int *)(v329 + 4488 * (v322 & 0xFFFFFFFFCFFFFFFFLL));
        v332 = *v330;
        v331 = v330[1];
        v334 = v330[2];
        v333 = v330[3];
        v335 = v326 - *v330;
        if (v326 < *v330 || v325 < v331 || v327 < v334 || v326 >= v333 || v325 >= v330[4] || v327 >= v330[5])
        {
          v336 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v324 = *(_DWORD *)(v2092 + 136);
          v329 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v336;
          v328 = v322 & 0xCFFFFFFF;
        }
        v337 = (v333 - v332) >> 1;
        if (v337 != v324)
        {
          v338 = v327 - v334;
          v339 = v325 - v331;
          while (1)
          {
            result = (4 * ((v338 & v337) != 0)) | (8 * ((v339 & v337) != 0));
            LODWORD(v322) = *(_DWORD *)(v329
                                      + 4488 * (v322 & 0xCFFFFFFF)
                                      + (result | (16 * ((v335 & v337) != 0)))
                                      + 24);
            if ((v322 & 0x80000000) != 0)
              break;
            v335 -= v335 & v337;
            v339 -= v339 & v337;
            v338 -= v338 & v337;
            v337 >>= 1;
            if (v337 == v324)
            {
              v328 = v322 & 0xCFFFFFFF;
              goto LABEL_242;
            }
          }
          LOBYTE(v319) = 1;
          *(_BYTE *)(a6 + 440) = 1;
          *((_QWORD *)v8 + 20) = -1;
          v320 = -1;
          *(_DWORD *)(a6 + 452) = -1;
          goto LABEL_227;
        }
LABEL_242:
        LOBYTE(v319) = 0;
        v320 = 0;
        v340 = (_DWORD *)(v329 + 4488 * v328);
        v341 = v340[9];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = v322;
        *(_DWORD *)(a6 + 452) = v341;
        *(_BYTE *)(a6 + 456) = 3;
        v342 = v340[7];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = v322;
        *(_DWORD *)(a6 + 392) = v342;
        *(_BYTE *)(a6 + 396) = 1;
        v343 = v340[6];
        *(_BYTE *)(a6 + 360) = 0;
        *(_DWORD *)(a6 + 364) = 0;
        *(_DWORD *)(a6 + 368) = v322;
        *(_DWORD *)(a6 + 372) = v343;
        *(_BYTE *)(a6 + 376) = 0;
        v323 = v340[8];
        v321 = 2;
      }
      else
      {
        v320 = 0;
        v569 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v570 = v569[9];
        *(_BYTE *)(a6 + 440) = 0;
        *(_DWORD *)(a6 + 444) = 0;
        *(_DWORD *)(a6 + 448) = a5;
        *(_DWORD *)(a6 + 452) = v570;
        *(_BYTE *)(a6 + 456) = 3;
        v571 = v569[7];
        *(_BYTE *)(a6 + 380) = 0;
        *(_DWORD *)(a6 + 384) = 0;
        *(_DWORD *)(a6 + 388) = a5;
        *(_DWORD *)(a6 + 392) = v571;
        *(_BYTE *)(a6 + 396) = 1;
        v572 = v569[6];
        *(_BYTE *)(a6 + 360) = 0;
        *(_DWORD *)(a6 + 364) = 0;
        *(_DWORD *)(a6 + 368) = a5;
        *(_DWORD *)(a6 + 372) = v572;
        *(_BYTE *)(a6 + 376) = 0;
        v323 = v569[8];
        v321 = 2;
        LODWORD(v322) = a5;
      }
LABEL_381:
      *(_BYTE *)(a6 + 420) = v319;
      *(_DWORD *)(a6 + 424) = v320;
      *(_DWORD *)(a6 + 428) = v322;
      *(_DWORD *)(a6 + 432) = v323;
      *(_BYTE *)(a6 + 436) = v321;
      if (*(_BYTE *)(a6 + 320))
      {
        LOBYTE(v573) = 1;
        *(_BYTE *)(a6 + 320) = 1;
        v574 = -1;
        *(_DWORD *)(a6 + 324) = -1;
        *(_QWORD *)(a6 + 328) = -1;
LABEL_383:
        v575 = 8;
        *(_BYTE *)(a6 + 336) = 8;
        *(_BYTE *)(a6 + 140) = 1;
        *(_QWORD *)(a6 + 144) = -1;
        *(_DWORD *)(a6 + 152) = -1;
        *(_BYTE *)(a6 + 156) = 8;
        *(_BYTE *)(a6 + 120) = 1;
        *(_QWORD *)(a6 + 124) = -1;
        *(_DWORD *)(a6 + 132) = -1;
        LODWORD(v576) = -1;
        v577 = -1;
        *(_BYTE *)(a6 + 136) = 8;
        goto LABEL_593;
      }
      v573 = v8[10];
      if (v573)
      {
        v578 = *(_DWORD *)(v7 + 136);
        v579 = a4[1] + (unsigned __int16)v578;
        v580 = a4[2];
        v576 = *(unsigned int *)(a6 + 328);
        v581 = v576 & 0xFFFFFFFFCFFFFFFFLL;
        v582 = *(_QWORD *)(v7 + 184);
        v583 = (int *)(v582 + 4488 * (v576 & 0xFFFFFFFFCFFFFFFFLL));
        v585 = *v583;
        v584 = v583[1];
        v586 = v583[2];
        v587 = v583[3];
        v588 = *a4 - *v583;
        v590 = *a4 < *v583 || v579 < v584 || v580 < v586;
        if (v590
          || ((v593 = v583 + 4, v591 = v583[4], v592 = v593[1], *a4 < v587) ? (v594 = v579 < v591) : (v594 = 0),
              v594 ? (v595 = v580 < v592) : (v595 = 0),
              !v595))
        {
          v2080 = v584;
          v596 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v578 = *(_DWORD *)(v2092 + 136);
          v582 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v596;
          v584 = v2080;
        }
        v597 = (v587 - v585) >> 1;
        if (v597 != v578)
        {
          v598 = v580 - v586;
          v599 = v579 - v584;
          while (1)
          {
            result = (4 * ((v598 & v597) != 0)) | (8 * ((v599 & v597) != 0));
            LODWORD(v576) = *(_DWORD *)(v582
                                      + 4488 * (v576 & 0xCFFFFFFF)
                                      + (result | (16 * ((v588 & v597) != 0)))
                                      + 24);
            if ((v576 & 0x80000000) != 0)
              break;
            v588 -= v588 & v597;
            v599 -= v599 & v597;
            v598 -= v598 & v597;
            v597 >>= 1;
            if (v597 == v578)
            {
              v581 = v576 & 0xCFFFFFFF;
              goto LABEL_406;
            }
          }
          LOBYTE(v573) = 1;
          *(_BYTE *)(a6 + 320) = 1;
          *((_QWORD *)v8 + 5) = -1;
          v574 = -1;
          *(_DWORD *)(a6 + 332) = -1;
          goto LABEL_383;
        }
LABEL_406:
        LOBYTE(v573) = 0;
        v574 = 0;
        v600 = (_DWORD *)(v582 + 4488 * v581);
        v601 = v600[11];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = v576;
        *(_DWORD *)(a6 + 332) = v601;
        *(_BYTE *)(a6 + 336) = 5;
        v602 = v600[7];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = v576;
        *(_DWORD *)(a6 + 152) = v602;
        *(_BYTE *)(a6 + 156) = 1;
        v603 = v600[6];
        *(_BYTE *)(a6 + 120) = 0;
        *(_DWORD *)(a6 + 124) = 0;
        *(_DWORD *)(a6 + 128) = v576;
        *(_DWORD *)(a6 + 132) = v603;
        *(_BYTE *)(a6 + 136) = 0;
        v577 = v600[10];
        v575 = 4;
      }
      else
      {
        v574 = 0;
        v846 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v847 = v846[11];
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 324) = 0;
        *(_DWORD *)(a6 + 328) = a5;
        *(_DWORD *)(a6 + 332) = v847;
        *(_BYTE *)(a6 + 336) = 5;
        v848 = v846[7];
        *(_BYTE *)(a6 + 140) = 0;
        *(_DWORD *)(a6 + 144) = 0;
        *(_DWORD *)(a6 + 148) = a5;
        *(_DWORD *)(a6 + 152) = v848;
        *(_BYTE *)(a6 + 156) = 1;
        v849 = v846[6];
        *(_BYTE *)(a6 + 120) = 0;
        *(_DWORD *)(a6 + 124) = 0;
        *(_DWORD *)(a6 + 128) = a5;
        *(_DWORD *)(a6 + 132) = v849;
        *(_BYTE *)(a6 + 136) = 0;
        v577 = v846[10];
        v575 = 4;
        LODWORD(v576) = a5;
      }
LABEL_593:
      *(_BYTE *)(a6 + 300) = v573;
      *(_DWORD *)(a6 + 304) = v574;
      *(_DWORD *)(a6 + 308) = v576;
      *(_DWORD *)(a6 + 312) = v577;
      *(_BYTE *)(a6 + 316) = v575;
      if (*(_BYTE *)(a6 + 280))
      {
        LOBYTE(v850) = 1;
        *(_BYTE *)(a6 + 280) = 1;
        v851 = -1;
        *(_DWORD *)(a6 + 284) = -1;
        *(_QWORD *)(a6 + 288) = -1;
LABEL_595:
        v852 = 8;
        *(_BYTE *)(a6 + 296) = 8;
        *(_BYTE *)(a6 + 100) = 1;
        *(_QWORD *)(a6 + 104) = -1;
        *(_DWORD *)(a6 + 112) = -1;
        *(_BYTE *)(a6 + 116) = 8;
        *(_BYTE *)(a6 + 40) = 1;
        *(_QWORD *)(a6 + 44) = -1;
        *(_DWORD *)(a6 + 52) = -1;
        LODWORD(v853) = -1;
        v854 = -1;
        *(_BYTE *)(a6 + 56) = 8;
        goto LABEL_805;
      }
      v850 = *v8;
      if (*v8)
      {
        v855 = *(_DWORD *)(v7 + 136);
        v856 = a4[1];
        v857 = a4[2] + (unsigned __int16)v855;
        v853 = *(unsigned int *)(a6 + 288);
        v858 = v853 & 0xFFFFFFFFCFFFFFFFLL;
        v859 = *(_QWORD *)(v7 + 184);
        v860 = (int *)(v859 + 4488 * (v853 & 0xFFFFFFFFCFFFFFFFLL));
        v862 = *v860;
        v861 = v860[1];
        v863 = v860[2];
        v864 = v860[3];
        v865 = *a4 - *v860;
        v867 = *a4 < *v860 || v856 < v861 || v857 < v863;
        if (v867
          || ((v870 = v860 + 4, v868 = v860[4], v869 = v870[1], *a4 < v864) ? (v871 = v856 < v868) : (v871 = 0),
              v871 ? (v872 = v857 < v869) : (v872 = 0),
              !v872))
        {
          v2086 = v861;
          v873 = v8;
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v855 = *(_DWORD *)(v2092 + 136);
          v859 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
          v8 = v873;
          v861 = v2086;
        }
        v874 = (v864 - v862) >> 1;
        if (v874 != v855)
        {
          v875 = v857 - v863;
          v876 = v856 - v861;
          while (1)
          {
            result = (4 * ((v875 & v874) != 0)) | (8 * ((v876 & v874) != 0));
            LODWORD(v853) = *(_DWORD *)(v859
                                      + 4488 * (v853 & 0xCFFFFFFF)
                                      + (result | (16 * ((v865 & v874) != 0)))
                                      + 24);
            if ((v853 & 0x80000000) != 0)
              break;
            v865 -= v865 & v874;
            v876 -= v876 & v874;
            v875 -= v875 & v874;
            v874 >>= 1;
            if (v874 == v855)
            {
              v858 = v853 & 0xCFFFFFFF;
              goto LABEL_618;
            }
          }
          LOBYTE(v850) = 1;
          *(_BYTE *)(a6 + 280) = 1;
          *(_QWORD *)v8 = -1;
          v851 = -1;
          *(_DWORD *)(a6 + 292) = -1;
          goto LABEL_595;
        }
LABEL_618:
        LOBYTE(v850) = 0;
        v851 = 0;
        v877 = (_DWORD *)(v859 + 4488 * v858);
        v878 = v877[12];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = v853;
        *(_DWORD *)(a6 + 292) = v878;
        *(_BYTE *)(a6 + 296) = 6;
        v879 = v877[8];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = v853;
        *(_DWORD *)(a6 + 112) = v879;
        *(_BYTE *)(a6 + 116) = 2;
        v880 = v877[6];
        *(_BYTE *)(a6 + 40) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_DWORD *)(a6 + 48) = v853;
        *(_DWORD *)(a6 + 52) = v880;
        *(_BYTE *)(a6 + 56) = 0;
        v854 = v877[10];
        v852 = 4;
      }
      else
      {
        v851 = 0;
        v1120 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF));
        v1121 = v1120[12];
        *(_BYTE *)(a6 + 280) = 0;
        *(_DWORD *)(a6 + 284) = 0;
        *(_DWORD *)(a6 + 288) = a5;
        *(_DWORD *)(a6 + 292) = v1121;
        *(_BYTE *)(a6 + 296) = 6;
        v1122 = v1120[8];
        *(_BYTE *)(a6 + 100) = 0;
        *(_DWORD *)(a6 + 104) = 0;
        *(_DWORD *)(a6 + 108) = a5;
        *(_DWORD *)(a6 + 112) = v1122;
        *(_BYTE *)(a6 + 116) = 2;
        v1123 = v1120[6];
        *(_BYTE *)(a6 + 40) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_DWORD *)(a6 + 48) = a5;
        *(_DWORD *)(a6 + 52) = v1123;
        *(_BYTE *)(a6 + 56) = 0;
        v854 = v1120[10];
        v852 = 4;
        LODWORD(v853) = a5;
      }
LABEL_805:
      *(_BYTE *)(a6 + 220) = v850;
      *(_DWORD *)(a6 + 224) = v851;
      *(_DWORD *)(a6 + 228) = v853;
      *(_DWORD *)(a6 + 232) = v854;
      *(_BYTE *)(a6 + 236) = v852;
      if (*(_BYTE *)(a6 + 500))
      {
LABEL_806:
        v1124 = 1;
        *(_BYTE *)(a6 + 500) = 1;
        *(_QWORD *)(a6 + 504) = -1;
        v1125 = -1;
        *(_DWORD *)(a6 + 512) = -1;
        v1126 = 8;
        *(_BYTE *)(a6 + 516) = 8;
        LODWORD(v1127) = -1;
        v1128 = -1;
        goto LABEL_1013;
      }
      if (*(_DWORD *)(a6 + 504))
      {
        v1129 = *(_DWORD *)(v7 + 136);
        v1130 = (unsigned __int16)v1129 + *a4;
        v1131 = a4[1] + (unsigned __int16)v1129;
        v1132 = a4[2];
        v1127 = *(unsigned int *)(a6 + 508);
        v1133 = v1127 & 0xFFFFFFFFCFFFFFFFLL;
        v1134 = *(_QWORD *)(v7 + 184);
        v1135 = (int *)(v1134 + 4488 * (v1127 & 0xFFFFFFFFCFFFFFFFLL));
        v1137 = *v1135;
        v1136 = v1135[1];
        v1138 = v1135[2];
        v1139 = v1135[3];
        v1140 = v1130 - *v1135;
        v1142 = v1130 < *v1135 || v1131 < v1136 || v1132 < v1138;
        if (v1142
          || ((v1145 = v1135 + 4, v1143 = v1135[4], v1144 = v1145[1], v1130 < v1139)
            ? (v1146 = v1131 < v1143)
            : (v1146 = 0),
              v1146 ? (v1147 = v1132 < v1144) : (v1147 = 0),
              !v1147))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1129 = *(_DWORD *)(v2092 + 136);
          v1134 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1148 = (v1139 - v1137) >> 1;
        if (v1148 != v1129)
        {
          v1149 = v1132 - v1138;
          v1150 = v1131 - v1136;
          while (1)
          {
            result = (4 * ((v1149 & v1148) != 0)) | (8 * ((v1150 & v1148) != 0));
            LODWORD(v1127) = *(_DWORD *)(v1134
                                       + 4488 * (v1127 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1140 & v1148) != 0)))
                                       + 24);
            if ((v1127 & 0x80000000) != 0)
              goto LABEL_806;
            v1140 -= v1140 & v1148;
            v1150 -= v1150 & v1148;
            v1149 -= v1149 & v1148;
            v1148 >>= 1;
            if (v1148 == v1129)
            {
              v1133 = v1127 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1124 = 0;
        v1125 = 0;
        v1126 = 0;
        v1151 = v1134 + 4488 * v1133;
        v1152 = *(_DWORD *)(v1151 + 28);
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = v1127;
        *(_DWORD *)(a6 + 512) = v1152;
        *(_BYTE *)(a6 + 516) = 1;
        v1128 = *(_DWORD *)(v1151 + 24);
      }
      else
      {
        v1124 = 0;
        v1125 = 0;
        v1126 = 0;
        v1382 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1383 = *(_DWORD *)(v1382 + 28);
        *(_BYTE *)(a6 + 500) = 0;
        *(_DWORD *)(a6 + 504) = 0;
        *(_DWORD *)(a6 + 508) = a5;
        *(_DWORD *)(a6 + 512) = v1383;
        *(_BYTE *)(a6 + 516) = 1;
        v1128 = *(_DWORD *)(v1382 + 24);
        LODWORD(v1127) = a5;
      }
LABEL_1013:
      *(_BYTE *)(a6 + 480) = v1124;
      *(_DWORD *)(a6 + 484) = v1125;
      *(_DWORD *)(a6 + 488) = v1127;
      *(_DWORD *)(a6 + 492) = v1128;
      *(_BYTE *)(a6 + 496) = v1126;
      if (*(_BYTE *)(a6 + 460))
      {
LABEL_1014:
        v1384 = 1;
        *(_BYTE *)(a6 + 460) = 1;
        *(_QWORD *)(a6 + 464) = -1;
        v1385 = -1;
        *(_DWORD *)(a6 + 472) = -1;
        v1386 = 8;
        *(_BYTE *)(a6 + 476) = 8;
        LODWORD(v1387) = -1;
        v1388 = -1;
        goto LABEL_1221;
      }
      if (*(_DWORD *)(a6 + 464))
      {
        v1389 = *(_DWORD *)(v7 + 136);
        v1390 = a4[1];
        v1391 = (unsigned __int16)v1389 + *a4;
        v1392 = a4[2] + (unsigned __int16)v1389;
        v1387 = *(unsigned int *)(a6 + 468);
        v1393 = v1387 & 0xFFFFFFFFCFFFFFFFLL;
        v1394 = *(_QWORD *)(v7 + 184);
        v1395 = (int *)(v1394 + 4488 * (v1387 & 0xFFFFFFFFCFFFFFFFLL));
        v1397 = *v1395;
        v1396 = v1395[1];
        v1398 = v1395[2];
        v1399 = v1395[3];
        v1400 = v1391 - *v1395;
        v1402 = v1391 < *v1395 || v1390 < v1396 || v1392 < v1398;
        if (v1402
          || ((v1405 = v1395 + 4, v1403 = v1395[4], v1404 = v1405[1], v1391 < v1399)
            ? (v1406 = v1390 < v1403)
            : (v1406 = 0),
              v1406 ? (v1407 = v1392 < v1404) : (v1407 = 0),
              !v1407))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1389 = *(_DWORD *)(v2092 + 136);
          v1394 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1408 = (v1399 - v1397) >> 1;
        if (v1408 != v1389)
        {
          v1409 = v1392 - v1398;
          v1410 = v1390 - v1396;
          while (1)
          {
            result = (4 * ((v1409 & v1408) != 0)) | (8 * ((v1410 & v1408) != 0));
            LODWORD(v1387) = *(_DWORD *)(v1394
                                       + 4488 * (v1387 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1400 & v1408) != 0)))
                                       + 24);
            if ((v1387 & 0x80000000) != 0)
              goto LABEL_1014;
            v1400 -= v1400 & v1408;
            v1410 -= v1410 & v1408;
            v1409 -= v1409 & v1408;
            v1408 >>= 1;
            if (v1408 == v1389)
            {
              v1393 = v1387 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1384 = 0;
        v1385 = 0;
        v1386 = 0;
        v1411 = v1394 + 4488 * v1393;
        v1412 = *(_DWORD *)(v1411 + 32);
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = v1387;
        *(_DWORD *)(a6 + 472) = v1412;
        *(_BYTE *)(a6 + 476) = 2;
        v1388 = *(_DWORD *)(v1411 + 24);
      }
      else
      {
        v1384 = 0;
        v1385 = 0;
        v1386 = 0;
        v1629 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1630 = *(_DWORD *)(v1629 + 32);
        *(_BYTE *)(a6 + 460) = 0;
        *(_DWORD *)(a6 + 464) = 0;
        *(_DWORD *)(a6 + 468) = a5;
        *(_DWORD *)(a6 + 472) = v1630;
        *(_BYTE *)(a6 + 476) = 2;
        v1388 = *(_DWORD *)(v1629 + 24);
        LODWORD(v1387) = a5;
      }
LABEL_1221:
      *(_BYTE *)(a6 + 400) = v1384;
      *(_DWORD *)(a6 + 404) = v1385;
      *(_DWORD *)(a6 + 408) = v1387;
      *(_DWORD *)(a6 + 412) = v1388;
      *(_BYTE *)(a6 + 416) = v1386;
      if (*(_BYTE *)(a6 + 340))
      {
LABEL_1222:
        v1631 = 1;
        *(_BYTE *)(a6 + 340) = 1;
        *(_QWORD *)(a6 + 344) = -1;
        v1632 = -1;
        *(_DWORD *)(a6 + 352) = -1;
        v1633 = 8;
        *(_BYTE *)(a6 + 356) = 8;
        LODWORD(v1634) = -1;
        v1635 = -1;
        goto LABEL_1425;
      }
      if (*(_DWORD *)(a6 + 344))
      {
        v1636 = *(_DWORD *)(v7 + 136);
        v1637 = a4[1] + (unsigned __int16)v1636;
        v1638 = a4[2] + (unsigned __int16)v1636;
        v1634 = *(unsigned int *)(a6 + 348);
        v1639 = v1634 & 0xFFFFFFFFCFFFFFFFLL;
        v1640 = *(_QWORD *)(v7 + 184);
        v1641 = (int *)(v1640 + 4488 * (v1634 & 0xFFFFFFFFCFFFFFFFLL));
        v1643 = *v1641;
        v1642 = v1641[1];
        v1644 = v1641[2];
        v1645 = v1641[3];
        v1646 = *a4 - *v1641;
        v1648 = *a4 < *v1641 || v1637 < v1642 || v1638 < v1644;
        if (v1648
          || ((v1651 = v1641 + 4, v1649 = v1641[4], v1650 = v1651[1], *a4 < v1645)
            ? (v1652 = v1637 < v1649)
            : (v1652 = 0),
              v1652 ? (v1653 = v1638 < v1650) : (v1653 = 0),
              !v1653))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          a4 = v2091;
          v7 = v2092;
          v1636 = *(_DWORD *)(v2092 + 136);
          v1640 = *(_QWORD *)(v2092 + 184);
          a5 = v2093;
        }
        v1654 = (v1645 - v1643) >> 1;
        if (v1654 != v1636)
        {
          v1655 = v1638 - v1644;
          v1656 = v1637 - v1642;
          while (1)
          {
            result = (4 * ((v1655 & v1654) != 0)) | (8 * ((v1656 & v1654) != 0));
            LODWORD(v1634) = *(_DWORD *)(v1640
                                       + 4488 * (v1634 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1646 & v1654) != 0)))
                                       + 24);
            if ((v1634 & 0x80000000) != 0)
              goto LABEL_1222;
            v1646 -= v1646 & v1654;
            v1656 -= v1656 & v1654;
            v1655 -= v1655 & v1654;
            v1654 >>= 1;
            if (v1654 == v1636)
            {
              v1639 = v1634 & 0xCFFFFFFF;
              break;
            }
          }
        }
        v1631 = 0;
        v1632 = 0;
        v1633 = 0;
        v1657 = v1640 + 4488 * v1639;
        v1658 = *(_DWORD *)(v1657 + 40);
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = v1634;
        *(_DWORD *)(a6 + 352) = v1658;
        *(_BYTE *)(a6 + 356) = 4;
        v1635 = *(_DWORD *)(v1657 + 24);
      }
      else
      {
        v1631 = 0;
        v1632 = 0;
        v1633 = 0;
        v1864 = *(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF);
        v1865 = *(_DWORD *)(v1864 + 40);
        *(_BYTE *)(a6 + 340) = 0;
        *(_DWORD *)(a6 + 344) = 0;
        *(_DWORD *)(a6 + 348) = a5;
        *(_DWORD *)(a6 + 352) = v1865;
        *(_BYTE *)(a6 + 356) = 4;
        v1635 = *(_DWORD *)(v1864 + 24);
        LODWORD(v1634) = a5;
      }
LABEL_1425:
      *(_BYTE *)(a6 + 160) = v1631;
      *(_DWORD *)(a6 + 164) = v1632;
      *(_DWORD *)(a6 + 168) = v1634;
      *(_DWORD *)(a6 + 172) = v1635;
      *(_BYTE *)(a6 + 176) = v1633;
      if (*(_BYTE *)(a6 + 520))
      {
        *(_BYTE *)(a6 + 520) = 1;
        *(_QWORD *)(a6 + 524) = -1;
        v1866 = 8;
        v1867 = -1;
      }
      else if (*(_DWORD *)(a6 + 524))
      {
        v1868 = *(_DWORD *)(v7 + 136);
        v1869 = (unsigned __int16)v1868 + *a4;
        v1870 = a4[1] + (unsigned __int16)v1868;
        v1871 = a4[2] + (unsigned __int16)v1868;
        v1872 = *(unsigned int *)(a6 + 528);
        v1873 = v1872 & 0xFFFFFFFFCFFFFFFFLL;
        v1874 = *(_QWORD *)(v7 + 184);
        v1875 = (int *)(v1874 + 4488 * (v1872 & 0xFFFFFFFFCFFFFFFFLL));
        v1877 = *v1875;
        v1876 = v1875[1];
        v1878 = v1875[2];
        v1879 = v1875[3];
        v1880 = v1869 - *v1875;
        v1882 = v1869 < *v1875 || v1870 < v1876 || v1871 < v1878;
        if (v1882
          || ((v1885 = v1875 + 4, v1883 = v1875[4], v1884 = v1885[1], v1869 < v1879)
            ? (v1886 = v1870 < v1883)
            : (v1886 = 0),
              v1886 ? (v1887 = v1871 < v1884) : (v1887 = 0),
              !v1887))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelBlockOctree.hpp", 1735, (uint64_t)"BlockPositionRangeContains(node_range, neighbor_position)", 57, (uint64_t)"Invalid block neighborhood information", 38, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_1667;
          v1868 = *(_DWORD *)(v2092 + 136);
          v1874 = *(_QWORD *)(v2092 + 184);
        }
        v1888 = (v1879 - v1877) >> 1;
        if (v1888 == v1868)
        {
          a5 = v2093;
LABEL_1595:
          v2045 = 0;
          v2046 = 0;
          v1866 = 0;
          v1867 = *(_DWORD *)(v1874 + 4488 * v1873 + 24);
        }
        else
        {
          v2043 = v1871 - v1878;
          v2044 = v1870 - v1876;
          a5 = v2093;
          while (1)
          {
            result = (4 * ((v2043 & v1888) != 0)) | (8 * ((v2044 & v1888) != 0));
            LODWORD(v1872) = *(_DWORD *)(v1874
                                       + 4488 * (v1872 & 0xCFFFFFFF)
                                       + (result | (16 * ((v1880 & v1888) != 0)))
                                       + 24);
            if ((v1872 & 0x80000000) != 0)
              break;
            v1880 -= v1880 & v1888;
            v2044 -= v2044 & v1888;
            v2043 -= v2043 & v1888;
            v1888 >>= 1;
            if (v1888 == v1868)
            {
              v1873 = v1872 & 0xCFFFFFFF;
              goto LABEL_1595;
            }
          }
          v1866 = 8;
          v2046 = -1;
          v2045 = 1;
          LODWORD(v1872) = -1;
          v1867 = -1;
        }
        *(_BYTE *)(a6 + 520) = v2045;
        *(_DWORD *)(a6 + 524) = v2046;
        *(_DWORD *)(a6 + 528) = v1872;
      }
      else
      {
        v1866 = 0;
        v1867 = *(_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (a5 & 0xCFFFFFFF) + 24);
        *(_BYTE *)(a6 + 520) = 0;
        *(_DWORD *)(a6 + 524) = 0;
        *(_DWORD *)(a6 + 528) = a5;
      }
      *(_DWORD *)(a6 + 532) = v1867;
      *(_BYTE *)(a6 + 536) = v1866;
      v2071 = 7;
      goto LABEL_1666;
  }
}

uint64_t sub_223E97348(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = a2 & 0xCFFFFFFF;
  v7 = result + 4488 * (a2 & 0xCFFFFFFF);
  v10 = *(_DWORD *)(v7 + 64);
  v8 = (int *)(v7 + 64);
  v9 = v10;
  v11 = *(v8 - 2);
  v12 = v11 + v10;
  if ((v11 | v10) < 0)
    v13 = -1;
  else
    v13 = v12;
  if (v9)
    v14 = v11 == 0;
  else
    v14 = 1;
  if (v14)
    v15 = v12;
  else
    v15 = v13;
  v16 = result + 4488 * v6;
  v19 = *(_DWORD *)(v16 + 60);
  v18 = (int *)(v16 + 60);
  v17 = v19;
  v20 = v19 + v15;
  if ((v19 | v15) < 0)
    v21 = -1;
  else
    v21 = v20;
  if (v15)
    v22 = v17 == 0;
  else
    v22 = 1;
  if (v22)
    v23 = v20;
  else
    v23 = v21;
  if (v23 == -1)
    v24 = -1;
  else
    v24 = v23 >> 3;
  v25 = result + 4488 * v6 + 24;
  do
  {
    v26 = *(_DWORD *)(v25 + 4 * byte_22468FDE4[v2]);
    if (v26 < 0)
    {
      if (v24 && v4)
      {
        v31 = v4 | v24;
        v4 += v24;
        if (v31 < 0)
          v4 = -1;
      }
      else
      {
        v4 += v24;
      }
      goto LABEL_24;
    }
    if ((v26 & 0x40000000) != 0)
    {
      if (v24 && v3)
      {
        v32 = v3 | v24;
        v3 += v24;
        if (v32 < 0)
          v3 = -1;
      }
      else
      {
        v3 += v24;
      }
      goto LABEL_24;
    }
    v27 = v26 & 0xCFFFFFFF;
    v28 = *(_DWORD *)(result + 4488 * v27 + 60);
    if (v4 && v28)
    {
      v29 = v28 | v4;
      v4 += v28;
      if (v29 < 0)
        v4 = -1;
      v30 = *(_DWORD *)(result + 4488 * v27 + 56);
      if (!v3)
        goto LABEL_48;
    }
    else
    {
      v4 += v28;
      v30 = *(_DWORD *)(result + 4488 * v27 + 56);
      if (!v3)
        goto LABEL_48;
    }
    if (v30)
    {
      v33 = v30 | v3;
      v3 += v30;
      if (v33 < 0)
        v3 = -1;
      v34 = *(_DWORD *)(result + 4488 * v27 + 64);
      if (!v5)
      {
LABEL_52:
        v5 += v34;
        goto LABEL_24;
      }
      goto LABEL_49;
    }
LABEL_48:
    v3 += v30;
    v34 = *(_DWORD *)(result + 4488 * v27 + 64);
    if (!v5)
      goto LABEL_52;
LABEL_49:
    if (!v34)
      goto LABEL_52;
    v35 = v34 | v5;
    v5 += v34;
    if (v35 < 0)
      v5 = -1;
LABEL_24:
    ++v2;
  }
  while (v2 != 8);
  *v8 = v5;
  *(v8 - 2) = v3;
  *v18 = v4;
  return result;
}

uint64_t sub_223E974E0(uint64_t a1, int *a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;

  result = *(unsigned int *)(a1 + 176);
  if ((result & 0x80000000) != 0)
    return 0x80000000;
  v5 = *(_QWORD *)(a1 + 184);
  v6 = (int *)(v5 + 4488 * (result & 0xFFFFFFFFCFFFFFFFLL));
  v7 = *v6;
  v8 = *a2;
  v9 = *a2 - *v6;
  if (*a2 < *v6)
    return 0x80000000;
  v10 = v6[1];
  v11 = a2[1];
  v12 = __OFSUB__(v11, v10);
  v13 = v11 - v10;
  if (v13 < 0 != v12)
    return 0x80000000;
  v14 = v6[2];
  v15 = a2[2];
  v12 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v16 < 0 != v12)
    return 0x80000000;
  v18 = v6[3];
  v17 = v6[4];
  v19 = v6[5];
  v20 = v8 < v18 && v11 < v17;
  if (!v20 || v15 >= v19)
    return 0x80000000;
  v22 = v18 - v7;
  v23 = *(_DWORD *)(a1 + 136);
  while (1)
  {
    v22 >>= 1;
    v24 = (4 * ((v22 & v9) != 0)) | (2 * ((v22 & v13) != 0)) | ((v22 & v16) != 0);
    v25 = result & 0xCFFFFFFF;
    result = *(unsigned int *)(v5 + 4488 * (result & 0xCFFFFFFF) + 4 * v24 + 24);
    if (v22 == v23 || result >> 30)
      break;
    v9 -= v22 & v9;
    v13 -= v22 & v13;
    v16 -= v22 & v16;
  }
  if ((result & 0x80000000) == 0)
  {
    v26 = v5 + 4488 * v25 + 540 * v24;
    v27 = *(_DWORD *)(v26 + 80);
    if (*(_BYTE *)(v26 + 68))
      v27 = 0x80000000;
    *a3 = v27;
    if (*(_BYTE *)(v26 + 88))
      v28 = 0x80000000;
    else
      v28 = *(_DWORD *)(v26 + 100);
    a3[1] = v28;
    if (*(_BYTE *)(v26 + 108))
      v29 = 0x80000000;
    else
      v29 = *(_DWORD *)(v26 + 120);
    a3[2] = v29;
    if (*(_BYTE *)(v26 + 128))
      v30 = 0x80000000;
    else
      v30 = *(_DWORD *)(v26 + 140);
    a3[3] = v30;
    if (*(_BYTE *)(v26 + 148))
      v31 = 0x80000000;
    else
      v31 = *(_DWORD *)(v26 + 160);
    a3[4] = v31;
    if (*(_BYTE *)(v26 + 168))
      v32 = 0x80000000;
    else
      v32 = *(_DWORD *)(v26 + 180);
    a3[5] = v32;
    if (*(_BYTE *)(v26 + 188))
      v33 = 0x80000000;
    else
      v33 = *(_DWORD *)(v26 + 200);
    a3[6] = v33;
    if (*(_BYTE *)(v26 + 208))
      v34 = 0x80000000;
    else
      v34 = *(_DWORD *)(v26 + 220);
    a3[7] = v34;
    if (*(_BYTE *)(v26 + 228))
      v35 = 0x80000000;
    else
      v35 = *(_DWORD *)(v26 + 240);
    a3[8] = v35;
    if (*(_BYTE *)(v26 + 248))
      v36 = 0x80000000;
    else
      v36 = *(_DWORD *)(v26 + 260);
    a3[9] = v36;
    if (*(_BYTE *)(v26 + 268))
      v37 = 0x80000000;
    else
      v37 = *(_DWORD *)(v26 + 280);
    a3[10] = v37;
    if (*(_BYTE *)(v26 + 288))
      v38 = 0x80000000;
    else
      v38 = *(_DWORD *)(v26 + 300);
    a3[11] = v38;
    if (*(_BYTE *)(v26 + 308))
      v39 = 0x80000000;
    else
      v39 = *(_DWORD *)(v26 + 320);
    a3[12] = v39;
    if (*(_BYTE *)(v26 + 328))
      v40 = 0x80000000;
    else
      v40 = *(_DWORD *)(v26 + 340);
    a3[13] = v40;
    if (*(_BYTE *)(v26 + 348))
      v41 = 0x80000000;
    else
      v41 = *(_DWORD *)(v26 + 360);
    a3[14] = v41;
    if (*(_BYTE *)(v26 + 368))
      v42 = 0x80000000;
    else
      v42 = *(_DWORD *)(v26 + 380);
    a3[15] = v42;
    if (*(_BYTE *)(v26 + 388))
      v43 = 0x80000000;
    else
      v43 = *(_DWORD *)(v26 + 400);
    a3[16] = v43;
    if (*(_BYTE *)(v26 + 408))
      v44 = 0x80000000;
    else
      v44 = *(_DWORD *)(v26 + 420);
    a3[17] = v44;
    if (*(_BYTE *)(v26 + 428))
      v45 = 0x80000000;
    else
      v45 = *(_DWORD *)(v26 + 440);
    a3[18] = v45;
    if (*(_BYTE *)(v26 + 448))
      v46 = 0x80000000;
    else
      v46 = *(_DWORD *)(v26 + 460);
    a3[19] = v46;
    if (*(_BYTE *)(v26 + 468))
      v47 = 0x80000000;
    else
      v47 = *(_DWORD *)(v26 + 480);
    a3[20] = v47;
    if (*(_BYTE *)(v26 + 488))
      v48 = 0x80000000;
    else
      v48 = *(_DWORD *)(v26 + 500);
    a3[21] = v48;
    if (*(_BYTE *)(v26 + 508))
      v49 = 0x80000000;
    else
      v49 = *(_DWORD *)(v26 + 520);
    a3[22] = v49;
    if (*(_BYTE *)(v26 + 528))
      v50 = 0x80000000;
    else
      v50 = *(_DWORD *)(v26 + 540);
    a3[23] = v50;
    if (*(_BYTE *)(v26 + 548))
      v51 = 0x80000000;
    else
      v51 = *(_DWORD *)(v26 + 560);
    a3[24] = v51;
    if (*(_BYTE *)(v26 + 568))
      v52 = 0x80000000;
    else
      v52 = *(_DWORD *)(v26 + 580);
    a3[25] = v52;
    v53 = *(unsigned __int8 *)(v26 + 588);
    v54 = *(_DWORD *)(v26 + 600);
    if (v53)
      v54 = 0x80000000;
    a3[26] = v54;
  }
  return result;
}

uint64_t sub_223E977E8(uint64_t result, uint64_t a2, uint64_t a3, double a4, float32x4_t a5, double a6, float32x4_t a7)
{
  uint64_t v7;
  float v8;
  unsigned int v9;
  float32x4_t v10;
  unsigned int v11;
  signed int v12;
  int8x8_t v13;
  float32x4_t v14;
  signed int v15;
  __int32 v16;
  __int32 v17;
  uint64_t v18;
  __int32 *v19;
  BOOL v20;
  uint64_t v21;
  _DWORD *v22;
  BOOL v23;
  int32x2_t v24;
  int8x8_t v25;
  signed int v26;
  int8x8_t v27;
  signed int v28;

  v7 = result;
  v8 = *(float *)(result + 132);
  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  v9 = *(_DWORD *)(result + 136);
  v10 = vmulq_n_f32(a5, v8);
  v11 = -(unsigned __int16)v9;
  v12 = vcvtms_s32_f32(v10.f32[2]) & v11;
  v13 = (int8x8_t)vdup_n_s32(v11);
  v27 = vand_s8(v13, (int8x8_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v10.f32)));
  v28 = v12;
  a7.i64[0] = *(_QWORD *)a3;
  a7.i32[2] = *(_DWORD *)(a3 + 8);
  v14 = vmulq_n_f32(a7, v8);
  v24 = vadd_s32((int32x2_t)vand_s8(v13, (int8x8_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v14.f32))), vdup_n_s32(v9));
  v25 = (int8x8_t)v24;
  v15 = (vcvtms_s32_f32(v14.f32[2]) & v11) + v9;
  v26 = v15;
  v16 = v27.i32[1];
  v17 = v27.i32[0];
  do
  {
    v18 = *(unsigned int *)(v7 + 176);
    if ((v18 & 0x80000000) == 0)
    {
      v19 = (__int32 *)(*(_QWORD *)(v7 + 184) + 4488 * (v18 & 0xFFFFFFFFCFFFFFFFLL));
      if (v17 >= *v19 && v16 >= v19[1] && v12 >= v19[2])
      {
        v20 = v17 < v19[3] && v16 < v19[4];
        if (v20 && v12 < v19[5])
          break;
      }
    }
    result = sub_223E8AF24(v7, &v27);
  }
  while ((result & 1) != 0);
  do
  {
    v21 = *(unsigned int *)(v7 + 176);
    if ((v21 & 0x80000000) == 0)
    {
      v22 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 4488 * (v21 & 0xFFFFFFFFCFFFFFFFLL));
      if (v24.i32[0] >= *v22 && v24.i32[1] >= v22[1] && v15 >= v22[2])
      {
        v23 = v24.i32[0] < v22[3] && v24.i32[1] < v22[4];
        if (v23 && v15 < v22[5])
          break;
      }
    }
    result = sub_223E8AF24(v7, &v25);
  }
  while ((result & 1) != 0);
  return result;
}

void sub_223E9798C(uint64_t a1, int a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  signed int v27[6];
  unsigned int v28;

  v26 = a1;
  if (a2)
  {
    v3 = *(_DWORD **)(a1 + 152);
    v4 = *(_DWORD **)(a1 + 160);
    if (v3 != v4 && (*(_DWORD *)(a1 + 176) & 0x80000000) == 0)
    {
      do
      {
        v6 = *(_DWORD *)(a1 + 144);
        v7 = -(unsigned __int16)v6;
        v8 = v3[1] & v7;
        v9 = v3[2];
        v27[0] = *v3 & v7;
        v27[1] = v8;
        v27[2] = v9 & v7;
        v27[3] = v27[0] + v6;
        v27[4] = v8 + v6;
        v27[5] = (v9 & v7) + v6;
        v28 = 0x80000000;
        v10 = *(_DWORD *)(a1 + 176);
        if ((v10 & 0x80000000) == 0)
        {
          sub_223E987A0(a1, *(_DWORD *)(a1 + 180), v10, v27, &v28);
          v11 = v28;
          if (!(v28 >> 30))
          {
            v12 = v28 & 0xCFFFFFFF;
            v13 = *(_QWORD *)(a1 + 184);
            v14 = (int *)(v13 + 4488 * v12);
            if (!v14[14] && !*(_DWORD *)(v13 + 4488 * v12 + 64))
            {
              v15 = *(_DWORD *)(a1 + 148);
              if (*(_DWORD *)(a1 + 176) == v28)
              {
                *(_DWORD *)(a1 + 176) = 0x80000000;
              }
              else
              {
                v16 = *(_DWORD *)(v13 + 4488 * v12 + 4484) & 0xCFFFFFFF;
                v17 = (int *)(v13 + 4488 * v16);
                v18 = *v14;
                if (*v14 >= *v17
                  && (v19 = v14[1], v20 = v17[1], v19 >= v20)
                  && (v21 = v14[2], v22 = v17[2], v21 >= v22)
                  && ((v23 = v17[3], v18 < v23) ? (v24 = v19 < v17[4]) : (v24 = 0), v24 && v21 < v17[5]))
                {
                  v25 = (((v18 - *v17 - ((v23 - *v17) >> 1)) >> 29) & 4 | ((v19
                                                                                        - v20
                                                                                        - ((v23 - *v17) >> 1)) >> 30) & 0xFFFFFFFE | ((int)(v21 - v22 - ((v23 - *v17) >> 1)) >= 0)) ^ 6;
                }
                else
                {
                  v25 = 8;
                }
                *(_DWORD *)(v13 + 4488 * v16 + 4 * v25 + 24) = 0x80000000;
              }
              sub_223E97B60((_QWORD *)a1, v11, v15);
            }
          }
        }
        v3 += 3;
      }
      while (v3 != v4);
    }
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 0x80000000) == 0)
      sub_223E98548(a1, *(_DWORD *)(a1 + 180), v5, &v26);
  }
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
}

void sub_223E97B60(_QWORD *a1, int a2, int a3)
{
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;

  if (a3 == 1)
    goto LABEL_11;
  v5 = a1[23] + 4488 * (a2 & 0xCFFFFFFF);
  v7 = *(_DWORD *)(v5 + 24);
  v6 = (_DWORD *)(v5 + 24);
  if (v7 >> 30)
  {
    if (v6[1] >> 30)
      goto LABEL_4;
  }
  else
  {
    sub_223E97B60(a1);
    if (v6[1] >> 30)
    {
LABEL_4:
      if (v6[2] >> 30)
        goto LABEL_5;
      goto LABEL_25;
    }
  }
  sub_223E97B60(a1);
  if (v6[2] >> 30)
  {
LABEL_5:
    if (v6[3] >> 30)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  sub_223E97B60(a1);
  if (v6[3] >> 30)
  {
LABEL_6:
    if (v6[4] >> 30)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  sub_223E97B60(a1);
  if (v6[4] >> 30)
  {
LABEL_7:
    if (v6[5] >> 30)
      goto LABEL_8;
LABEL_28:
    sub_223E97B60(a1);
    if (v6[6] >> 30)
    {
LABEL_9:
      if (v6[7] >> 30)
        goto LABEL_11;
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_27:
  sub_223E97B60(a1);
  if (!(v6[5] >> 30))
    goto LABEL_28;
LABEL_8:
  if (v6[6] >> 30)
    goto LABEL_9;
LABEL_29:
  sub_223E97B60(a1);
  if (!(v6[7] >> 30))
LABEL_10:
    sub_223E97B60(a1);
LABEL_11:
  v9 = (char *)a1[27];
  v8 = a1[28];
  if ((unint64_t)v9 < v8)
  {
    *(_DWORD *)v9 = a2;
    v10 = (uint64_t)(v9 + 4);
    goto LABEL_40;
  }
  v11 = (char *)a1[26];
  v12 = (v9 - v11) >> 2;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 62)
    sub_22316E078();
  v14 = v8 - (_QWORD)v11;
  if (v14 >> 1 > v13)
    v13 = v14 >> 1;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
    v15 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 62)
      sub_223174E94();
    v16 = operator new(4 * v15);
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *v17 = a2;
    v10 = (uint64_t)(v17 + 1);
    v19 = v9 - v11;
    if (v9 == v11)
      goto LABEL_38;
    goto LABEL_32;
  }
  v16 = 0;
  v17 = (_DWORD *)(4 * v12);
  v18 = 0;
  *(_DWORD *)(4 * v12) = a2;
  v10 = 4 * v12 + 4;
  v19 = v9 - v11;
  if (v9 != v11)
  {
LABEL_32:
    v20 = v19 - 4;
    if (v20 < 0x2C)
      goto LABEL_45;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_45;
    v21 = (v20 >> 2) + 1;
    v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v23 = &v9[-v22];
    v17 = (_DWORD *)((char *)v17 - v22);
    v24 = &v16[4 * v12 - 16];
    v25 = v9 - 16;
    v26 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 8;
    }
    while (v26);
    v9 = v23;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_45:
      do
      {
        v28 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--v17 = v28;
      }
      while (v9 != v11);
    }
  }
LABEL_38:
  a1[26] = v17;
  a1[27] = v10;
  a1[28] = v18;
  if (v11)
    operator delete(v11);
LABEL_40:
  a1[27] = v10;
}

uint64_t sub_223E97E00(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  __int32 v15;
  int v16;
  int v17;
  _BOOL4 v18;
  unsigned int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int32x2_t v40;
  unsigned int v41;
  unsigned int v42;
  int32x2_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int32x2_t v59;
  int v60;
  int32x2_t v61;
  unsigned int v62;
  int32x2_t v63;
  int v64;
  uint64_t v65;
  int v66;

  v9 = a3 & 0xCFFFFFFF;
  v10 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v11 = *(int32x2_t *)v10;
  v64 = *(_DWORD *)(v10 + 8);
  v63 = v11;
  v12 = *(_QWORD *)(v10 + 12);
  v66 = *(_DWORD *)(v10 + 20);
  v65 = v12;
  result = sub_223E990E0(a5, a2, (int *)&v63, *(_DWORD *)(v10 + 64), *(_DWORD *)(v10 + 56));
  if (a2 && (_DWORD)result != 3)
  {
    v14 = v65 + v63.i32[0];
    if ((int)v65 + v63.i32[0] < 0 != __OFADD__((_DWORD)v65, v63.i32[0]))
      ++v14;
    v15 = HIDWORD(v65) + v63.i32[1];
    if (HIDWORD(v65) + v63.i32[1] < 0 != __OFADD__(HIDWORD(v65), v63.i32[1]))
      ++v15;
    v16 = v66 + v64;
    if (v66 + v64 < 0 != __OFADD__(v66, v64))
      ++v16;
    v17 = a4[67] - (v16 >> 1);
    v18 = v17 >= 0;
    v19 = (((a4[66] - (v15 >> 1)) >> 30) & 2 | (4 * ((a4[65] - (v14 >> 1)) >> 31)) | v18) ^ 6;
    v20 = v19 < 4;
    v21 = v19 > 3;
    v22 = v19 & 2;
    v23 = (v22 ^ 2) & 0xFFFFFFFA | (4 * v21) | (v17 >> 31);
    v56 = (v22 ^ 2) & 0xFFFFFFFB | (4 * v21) | v18;
    v57 = v22 | (4 * v20) | v18;
    v58 = v22 & 0xFFFFFFFB | (4 * v21) | v18;
    v55 = (v22 ^ 2) & 0xFFFFFFFB | (4 * v20) | v18;
    result = (v55 << 32) | ((unint64_t)(v22 & 0xFFFFFFFA | (4 * v21) | (v17 >> 31)) << 24);
    v24 = (v56 << 40) | (v58 << 56) | (v57 << 48) | result;
    v25 = ((v22 & 0xFFFFFFFA | (4 * v21) | (v17 >> 31)) << 24) | ((v22 & 0xFFFFFFFE | (4 * v20) | (v17 >> 31)) << 16);
    v26 = *(_QWORD *)(a1 + 184);
    v27 = *(_DWORD *)(v26 + 4488 * v9 + 4 * ((v22 ^ 2) & 0xFFFFFFFA | (4 * v20) | (v17 >> 31)) + 24);
    v28 = a2 - 1;
    if ((_DWORD)v28)
    {
      if ((v27 & 0x80000000) == 0)
      {
        result = sub_223E97E00(a1, v28);
        v26 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v26 + 4488 * v9 + 4 * v23 + 24) & 0x80000000) == 0)
      {
        result = sub_223E97E00(a1, v28);
        v26 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v26 + 4488 * v9 + 4 * BYTE2(v25) + 24) & 0x80000000) == 0)
      {
        result = sub_223E97E00(a1, v28);
        v26 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v26 + 4488 * v9 + 4 * BYTE3(v24) + 24) & 0x80000000) == 0)
      {
        result = sub_223E97E00(a1, v28);
        v26 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v26 + 4488 * v9 + 4 * v55 + 24) & 0x80000000) == 0)
      {
        result = sub_223E97E00(a1, v28);
        v26 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v26 + 4488 * v9 + 4 * v56 + 24) & 0x80000000) == 0)
      {
        result = sub_223E97E00(a1, v28);
        v26 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v26 + 4488 * v9 + 4 * v57 + 24) & 0x80000000) == 0)
      {
        result = sub_223E97E00(a1, v28);
        v26 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v26 + 4488 * v9 + 4 * v58 + 24) & 0x80000000) == 0)
        return sub_223E97E00(a1, v28);
    }
    else
    {
      v53 = v24 | ((unint64_t)(v22 & 0xFFFFFFFE | (4 * v20) | (v17 >> 31)) << 16);
      v29 = 4 * v21;
      v30 = (v22 ^ 2) >> 1;
      v31 = (4 * v20) >> 2;
      if ((v27 & 0x80000000) == 0)
      {
        v32 = (v65 - v63.i32[0]) >> 1;
        v59.i32[0] = v63.i32[0] + v32 * v31;
        v59.i32[1] = v63.i32[1] + v32 * v30;
        if (v17 < 0)
          v33 = (v65 - v63.i32[0]) >> 1;
        else
          v33 = 0;
        v60 = v33 + v64;
        v61.i32[0] = v63.i32[0] + v32 * v31 + v32;
        v61.i32[1] = v63.i32[1] + v32 * v30 + v32;
        v62 = v33 + v64 + v32;
        result = sub_223E990E0(a5, 0, (int *)&v59, v27 >> 30 == 0, v27 >> 30);
        v26 = *(_QWORD *)(a1 + 184);
      }
      v54 = v31;
      v34 = *(_DWORD *)(v26 + 4488 * v9 + 4 * v23 + 24);
      v35 = v29 >> 2;
      if ((v34 & 0x80000000) == 0)
      {
        v36 = (v65 - v63.i32[0]) >> 1;
        v59.i32[0] = v63.i32[0] + v36 * v35;
        v59.i32[1] = v63.i32[1] + v36 * v30;
        if (v17 < 0)
          v37 = (v65 - v63.i32[0]) >> 1;
        else
          v37 = 0;
        v60 = v64 + v37;
        v61.i32[0] = v63.i32[0] + v36 * v35 + v36;
        v61.i32[1] = v63.i32[1] + v36 * v30 + v36;
        v62 = v64 + v37 + v36;
        result = sub_223E990E0(a5, 0, (int *)&v59, v34 >> 30 == 0, v34 >> 30);
        v26 = *(_QWORD *)(a1 + 184);
      }
      v38 = *(_DWORD *)(v26 + 4488 * v9 + 4 * BYTE2(v53) + 24);
      if ((v38 & 0x80000000) == 0)
      {
        v39 = (v65 - v63.i32[0]) >> 1;
        v40 = vdup_n_s32(v39);
        v59 = vmla_s32(v63, v40, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(v53 >> 16), (int8x8_t)0xFF000000FFLL), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
        v60 = v64 + v39 * ((v53 >> 16) & 1);
        v61 = vadd_s32(v59, v40);
        v62 = v60 + v39;
        result = sub_223E990E0(a5, 0, (int *)&v59, v38 >> 30 == 0, v38 >> 30);
        v26 = *(_QWORD *)(a1 + 184);
      }
      v41 = *(_DWORD *)(v26 + 4488 * v9 + 4 * BYTE3(v24) + 24);
      if ((v41 & 0x80000000) == 0)
      {
        v42 = (v65 - v63.i32[0]) >> 1;
        v43 = vdup_n_s32(v42);
        v59 = vmla_s32(v63, v43, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(v24 >> 24), (int8x8_t)0xFF000000FFLL), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
        v60 = v64 + v42 * ((v24 >> 24) & 1);
        v61 = vadd_s32(v59, v43);
        v62 = v60 + v42;
        result = sub_223E990E0(a5, 0, (int *)&v59, v41 >> 30 == 0, v41 >> 30);
        v26 = *(_QWORD *)(a1 + 184);
      }
      v44 = *(_DWORD *)(v26 + 4488 * v9 + 4 * v55 + 24);
      if ((v44 & 0x80000000) == 0)
      {
        v45 = (v65 - v63.i32[0]) >> 1;
        v59.i32[0] = v63.i32[0] + v45 * v31;
        v59.i32[1] = v63.i32[1] + v45 * v30;
        v60 = v64 + (v45 & ~(v17 >> 31));
        v61.i32[0] = v59.i32[0] + v45;
        v61.i32[1] = v59.i32[1] + v45;
        v62 = v60 + v45;
        result = sub_223E990E0(a5, 0, (int *)&v59, v44 >> 30 == 0, v44 >> 30);
        v26 = *(_QWORD *)(a1 + 184);
      }
      v46 = *(_DWORD *)(v26 + 4488 * v9 + 4 * v56 + 24);
      if ((v46 & 0x80000000) == 0)
      {
        v47 = (v65 - v63.i32[0]) >> 1;
        v59.i32[0] = v63.i32[0] + v47 * v35;
        v59.i32[1] = v63.i32[1] + v47 * v30;
        v60 = v64 + (v47 & ~(v17 >> 31));
        v61.i32[0] = v59.i32[0] + v47;
        v61.i32[1] = v59.i32[1] + v47;
        v62 = v60 + v47;
        result = sub_223E990E0(a5, 0, (int *)&v59, v46 >> 30 == 0, v46 >> 30);
        v26 = *(_QWORD *)(a1 + 184);
      }
      v48 = *(_DWORD *)(v26 + 4488 * v9 + 4 * v57 + 24);
      v49 = v22 >> 1;
      if ((v48 & 0x80000000) == 0)
      {
        v50 = (v65 - v63.i32[0]) >> 1;
        v59.i32[0] = v63.i32[0] + v50 * v54;
        v59.i32[1] = v63.i32[1] + v50 * v49;
        v60 = v64 + (v50 & ~(v17 >> 31));
        v61.i32[0] = v59.i32[0] + v50;
        v61.i32[1] = v59.i32[1] + v50;
        v62 = v60 + v50;
        result = sub_223E990E0(a5, 0, (int *)&v59, v48 >> 30 == 0, v48 >> 30);
        v26 = *(_QWORD *)(a1 + 184);
      }
      v51 = *(_DWORD *)(v26 + 4488 * v9 + 4 * v58 + 24);
      if ((v51 & 0x80000000) == 0)
      {
        v52 = (v65 - v63.i32[0]) >> 1;
        v59.i32[0] = v63.i32[0] + v52 * v35;
        v59.i32[1] = v63.i32[1] + v52 * v49;
        v60 = v64 + (v52 & ~(v17 >> 31));
        v61.i32[0] = v59.i32[0] + v52;
        v61.i32[1] = v59.i32[1] + v52;
        v62 = v60 + v52;
        return sub_223E990E0(a5, 0, (int *)&v59, v51 >> 30 == 0, v51 >> 30);
      }
    }
  }
  return result;
}

void sub_223E98548(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;

  LODWORD(v5) = a2;
  v7 = *(_QWORD *)(a1 + 184);
  while (!(a3 >> 30))
  {
    v8 = a3 & 0xCFFFFFFF;
    v9 = *a4;
    v10 = *(_QWORD *)(*a4 + 184);
    if (!*(_DWORD *)(v10 + 4488 * (a3 & 0xCFFFFFFF) + 56) && !*(_DWORD *)(v10 + 4488 * v8 + 64))
    {
      if (*(_DWORD *)(v9 + 176) == a3)
      {
        *(_DWORD *)(v9 + 176) = 0x80000000;
      }
      else
      {
        v11 = (int *)(v10 + 4488 * v8);
        v12 = v11[1121] & 0xCFFFFFFF;
        v13 = (int *)(v10 + 4488 * v12);
        v14 = *v11;
        if (*v11 >= *v13
          && (v15 = v11[1], v16 = v13[1], v15 >= v16)
          && (v17 = v11[2], v18 = v13[2], v17 >= v18)
          && ((v19 = v13[3], v14 < v19) ? (v20 = v15 < v13[4]) : (v20 = 0), v20 && v17 < v13[5]))
        {
          v21 = (((v14 - *v13 - ((v19 - *v13) >> 1)) >> 29) & 4 | ((v15
                                                                                - v16
                                                                                - ((v19 - *v13) >> 1)) >> 30) & 0xFFFFFFFE | ((int)(v17 - v18 - ((v19 - *v13) >> 1)) >= 0)) ^ 6;
        }
        else
        {
          v21 = 8;
        }
        *(_DWORD *)(v10 + 4488 * v12 + 4 * v21 + 24) = 0x80000000;
      }
      sub_223E97B60((_QWORD *)v9, a3, v5);
      return;
    }
    if (v5 >= 2)
    {
      v5 = (v5 - 1);
      if ((*(_DWORD *)(v7 + 4488 * v8 + 24) & 0x80000000) == 0)
      {
        sub_223E98548(a1, v5);
        v7 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v7 + 4488 * v8 + 28) & 0x80000000) == 0)
      {
        sub_223E98548(a1, v5);
        v7 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v7 + 4488 * v8 + 32) & 0x80000000) == 0)
      {
        sub_223E98548(a1, v5);
        v7 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v7 + 4488 * v8 + 36) & 0x80000000) == 0)
      {
        sub_223E98548(a1, v5);
        v7 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v7 + 4488 * v8 + 40) & 0x80000000) == 0)
      {
        sub_223E98548(a1, v5);
        v7 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v7 + 4488 * v8 + 44) & 0x80000000) == 0)
      {
        sub_223E98548(a1, v5);
        v7 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v7 + 4488 * v8 + 48) & 0x80000000) == 0)
      {
        sub_223E98548(a1, v5);
        v7 = *(_QWORD *)(a1 + 184);
      }
      a3 = *(_DWORD *)(v7 + 4488 * v8 + 52);
      if ((a3 & 0x80000000) == 0)
        continue;
    }
    return;
  }
}

uint64_t sub_223E987A0(uint64_t a1, int a2, int a3, signed int *a4, _DWORD *a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  signed int v8;
  signed int v9;
  signed int v11;
  signed int v12;
  signed int v13;
  signed int v14;
  unsigned int v15;
  signed int v16;
  signed int v17;
  signed int v18;
  signed int v19;
  signed int v20;
  unsigned int v22;
  uint64_t result;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  signed int v36;
  signed int v37;
  signed int v38;
  signed int v39;
  signed int v40;
  signed int v41;
  signed int v42;
  signed int v43;
  signed int v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  signed int v50;
  signed int v51;
  signed int v52;
  signed int v53;
  signed int v54;
  signed int v55;
  signed int v56;
  signed int v57;
  signed int v58;
  signed int v59;
  signed int v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  unsigned int v66;
  signed int v67;
  signed int v68;
  unsigned int v69;
  int v70;
  int v71;

  v5 = a3 & 0xCFFFFFFF;
  v6 = *(_QWORD *)(a1 + 184);
  v7 = (unsigned int *)(v6 + 4488 * (a3 & 0xCFFFFFFF));
  v8 = v7[3];
  v9 = *a4;
  if (v8 <= *a4)
    return 1;
  v11 = v7[4];
  v12 = a4[1];
  if (v11 <= v12)
    return 1;
  v13 = v7[5];
  v14 = a4[2];
  if (v13 <= v14)
    return 1;
  v15 = *v7;
  v16 = a4[3];
  if ((int)*v7 >= v16)
    return 1;
  v17 = v7[1];
  v18 = a4[4];
  if (v17 >= v18)
    return 1;
  v19 = v7[2];
  v20 = a4[5];
  if (v19 >= v20)
    return 1;
  v22 = v8 - v15;
  if (v16 - v9 > (int)(v8 - v15))
    return 0;
  if (v9 == v15 && v12 == v17 && v16 == v8 && v14 == v19 && v18 == v11 && v20 == v13)
  {
    result = 0;
    *a5 = a3;
    return result;
  }
  if (!a2)
    return 1;
  v30 = (_DWORD *)(v6 + 4488 * v5 + 24);
  v31 = (a2 - 1);
  if (a2 == 1)
  {
    v32 = 0;
    v33 = v22 >> 1;
    while (1)
    {
      v34 = byte_22468FDE4[v32];
      v35 = (v34 >> 1) & 1;
      if ((v30[v34] & 0x80000000) != 0)
      {
        v50 = v15 + v33 * ((v34 >> 2) & 1);
        v51 = v17 + v33 * v35;
        v66 = v50;
        v67 = v51;
        v52 = v19 + v33 * (v34 & 1);
        v68 = v52;
        v69 = v50 + v33;
        v53 = v51 + v33;
        v54 = v52 + v33;
        v70 = v51 + v33;
        v71 = v52 + v33;
        v55 = *a4;
        if (v50 + v33 > *a4)
        {
          v56 = a4[1];
          if (v53 > v56)
          {
            v57 = a4[2];
            if (v54 > v57)
            {
              v58 = a4[3];
              if (v50 < v58)
              {
                v59 = a4[4];
                if (v51 < v59)
                {
                  v60 = a4[5];
                  if (v52 < v60)
                  {
                    if (v58 - v55 > v33)
                      return 0;
                    v61 = v55 == v50 && v56 == v51;
                    v62 = v61 && v60 == v54;
                    v63 = v62 && v59 == v53;
                    v64 = v63 && v58 == v50 + v33;
                    if (v64 && v57 == v52)
                    {
                      *a5 = 0x80000000;
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v36 = v15 + v33 * ((v34 >> 2) & 1);
        v37 = *a4;
        if (v36 + v33 > *a4)
        {
          v38 = v17 + v33 * v35;
          v39 = a4[1];
          if (v38 + v33 > v39)
          {
            v40 = v19 + v33 * (v34 & 1);
            v41 = a4[2];
            if (v40 + v33 > v41)
            {
              v42 = a4[3];
              if (v36 < v42)
              {
                v43 = a4[4];
                if (v38 < v43)
                {
                  v44 = a4[5];
                  if (v40 < v44)
                  {
                    if (v42 - v37 > v33)
                      return 0;
                    v45 = v37 == v36 && v39 == v38;
                    v46 = v45 && v42 == v36 + v33;
                    v47 = v46 && v41 == v40;
                    v48 = v47 && v43 == v38 + v33;
                    if (v48 && v44 == v40 + v33)
                    {
                      result = 0;
                      *a5 = 0x80000000;
                      return result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v32;
      result = 1;
      if (v32 == 8)
        return result;
    }
  }
  if ((*v30 & 0x80000000) != 0)
  {
    v66 = v15;
    v67 = v17;
    v68 = v19;
    v69 = (v22 >> 1) + v15;
    v70 = (v22 >> 1) + v17;
    v71 = (v22 >> 1) + v19;
    if ((sub_223E98D7C(v31, &v66, a4, a5) & 1) == 0)
      return 0;
  }
  else if ((sub_223E987A0(a1, (a2 - 1)) & 1) == 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v5 + 28) & 0x80000000) != 0)
  {
    v66 = v15;
    v67 = v17;
    v68 = (v22 >> 1) + v19;
    v69 = (v22 >> 1) + v15;
    v70 = (v22 >> 1) + v17;
    v71 = v68 + (v22 >> 1);
    result = sub_223E98D7C(v31, &v66, a4, a5);
    if (!(_DWORD)result)
      return result;
  }
  else if ((sub_223E987A0(a1, v31) & 1) == 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v5 + 32) & 0x80000000) != 0)
  {
    v66 = v15;
    v67 = (v22 >> 1) + v17;
    v68 = v19;
    v69 = (v22 >> 1) + v15;
    v70 = v67 + (v22 >> 1);
    v71 = (v22 >> 1) + v19;
    result = sub_223E98D7C(v31, &v66, a4, a5);
    if (!(_DWORD)result)
      return result;
  }
  else if ((sub_223E987A0(a1, v31) & 1) == 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v5 + 36) & 0x80000000) != 0)
  {
    v66 = v15;
    v67 = (v22 >> 1) + v17;
    v68 = (v22 >> 1) + v19;
    v69 = (v22 >> 1) + v15;
    v70 = v67 + (v22 >> 1);
    v71 = v68 + (v22 >> 1);
    result = sub_223E98D7C(v31, &v66, a4, a5);
    if (!(_DWORD)result)
      return result;
  }
  else if ((sub_223E987A0(a1, v31) & 1) == 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v5 + 40) & 0x80000000) != 0)
  {
    v66 = (v22 >> 1) + v15;
    v67 = v17;
    v68 = v19;
    v69 = v66 + (v22 >> 1);
    v70 = (v22 >> 1) + v17;
    v71 = (v22 >> 1) + v19;
    result = sub_223E98D7C(v31, &v66, a4, a5);
    if (!(_DWORD)result)
      return result;
  }
  else if ((sub_223E987A0(a1, v31) & 1) == 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v5 + 44) & 0x80000000) != 0)
  {
    v66 = (v22 >> 1) + v15;
    v67 = v17;
    v68 = (v22 >> 1) + v19;
    v69 = v66 + (v22 >> 1);
    v70 = (v22 >> 1) + v17;
    v71 = v68 + (v22 >> 1);
    result = sub_223E98D7C(v31, &v66, a4, a5);
    if (!(_DWORD)result)
      return result;
  }
  else if ((sub_223E987A0(a1, v31) & 1) == 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v5 + 48) & 0x80000000) != 0)
  {
    v66 = (v22 >> 1) + v15;
    v67 = (v22 >> 1) + v17;
    v68 = v19;
    v69 = v66 + (v22 >> 1);
    v70 = v67 + (v22 >> 1);
    v71 = (v22 >> 1) + v19;
    result = sub_223E98D7C(v31, &v66, a4, a5);
    if (!(_DWORD)result)
      return result;
  }
  else if ((sub_223E987A0(a1, v31) & 1) == 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v5 + 52) & 0x80000000) != 0)
  {
    v66 = (v22 >> 1) + v15;
    v67 = (v22 >> 1) + v17;
    v68 = (v22 >> 1) + v19;
    v69 = v66 + (v22 >> 1);
    v70 = v67 + (v22 >> 1);
    v71 = v68 + (v22 >> 1);
    result = sub_223E98D7C(v31, &v66, a4, a5);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return (sub_223E987A0(a1, v31) & 1) != 0;
}

uint64_t sub_223E98D7C(int a1, unsigned int *a2, signed int *a3, _DWORD *a4)
{
  signed int v4;
  int v5;
  signed int v8;
  int v9;
  signed int v10;
  int v11;
  unsigned int v13;
  int v14;
  signed int v15;
  int v16;
  signed int v17;
  int v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;

  v4 = a2[3];
  v5 = *a3;
  if (v4 <= *a3)
    return 1;
  v8 = a2[4];
  v9 = a3[1];
  if (v8 <= v9)
    return 1;
  v10 = a2[5];
  v11 = a3[2];
  if (v10 <= v11)
    return 1;
  v13 = *a2;
  v14 = a3[3];
  if ((int)*a2 >= v14)
    return 1;
  v15 = a2[1];
  v16 = a3[4];
  if (v15 >= v16)
    return 1;
  v17 = a2[2];
  v18 = a3[5];
  if (v17 >= v18)
    return 1;
  v19 = v4 - v13;
  if (v14 - v5 > (int)(v4 - v13))
    return 0;
  if (v5 == v13 && v9 == v15 && v14 == v4 && v11 == v17 && v16 == v8 && v18 == v10)
  {
    result = 0;
    *a4 = 0x80000000;
    return result;
  }
  if (!a1)
    return 1;
  v21 = (a1 - 1);
  v43 = v13;
  v44 = v15;
  v45 = v17;
  v46 = (v19 >> 1) + v13;
  v47 = v15 + (v19 >> 1);
  v48 = v17 + (v19 >> 1);
  result = sub_223E98D7C(v21, &v43, a3, a4);
  if ((_DWORD)result)
  {
    v22 = a2[1];
    v23 = a2[2];
    v24 = (a2[3] - *a2) >> 1;
    v43 = *a2;
    v44 = v22;
    v45 = v23 + v24;
    v46 = v24 + v43;
    v47 = v22 + v24;
    v48 = v23 + v24 + v24;
    result = sub_223E98D7C(v21, &v43, a3, a4);
    if ((_DWORD)result)
    {
      v25 = a2[2];
      v26 = (a2[3] - *a2) >> 1;
      v27 = v26 + a2[1];
      v43 = *a2;
      v44 = v27;
      v45 = v25;
      v46 = v26 + v43;
      v47 = v27 + v26;
      v48 = v25 + v26;
      result = sub_223E98D7C(v21, &v43, a3, a4);
      if ((_DWORD)result)
      {
        v28 = a2[2];
        v29 = (a2[3] - *a2) >> 1;
        v30 = v29 + a2[1];
        v43 = *a2;
        v44 = v30;
        v45 = v28 + v29;
        v46 = v29 + v43;
        v47 = v30 + v29;
        v48 = v28 + v29 + v29;
        result = sub_223E98D7C(v21, &v43, a3, a4);
        if ((_DWORD)result)
        {
          v31 = a2[1];
          v32 = a2[2];
          v33 = (a2[3] - *a2) >> 1;
          v43 = v33 + *a2;
          v44 = v31;
          v45 = v32;
          v46 = v43 + v33;
          v47 = v31 + v33;
          v48 = v32 + v33;
          result = sub_223E98D7C(v21, &v43, a3, a4);
          if ((_DWORD)result)
          {
            v34 = a2[1];
            v35 = a2[2];
            v36 = (a2[3] - *a2) >> 1;
            v43 = v36 + *a2;
            v44 = v34;
            v45 = v35 + v36;
            v46 = v43 + v36;
            v47 = v34 + v36;
            v48 = v35 + v36 + v36;
            result = sub_223E98D7C(v21, &v43, a3, a4);
            if ((_DWORD)result)
            {
              v37 = a2[2];
              v38 = (a2[3] - *a2) >> 1;
              v39 = v38 + a2[1];
              v43 = v38 + *a2;
              v44 = v39;
              v45 = v37;
              v46 = v43 + v38;
              v47 = v39 + v38;
              v48 = v37 + v38;
              result = sub_223E98D7C(v21, &v43, a3, a4);
              if ((_DWORD)result)
              {
                v40 = a2[2];
                v41 = (a2[3] - *a2) >> 1;
                v42 = v41 + a2[1];
                v43 = v41 + *a2;
                v44 = v42;
                v45 = v40 + v41;
                v46 = v43 + v41;
                v47 = v42 + v41;
                v48 = v40 + v41 + v41;
                return sub_223E98D7C(v21, &v43, a3, a4);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223E990E0(uint64_t a1, unsigned int a2, int *a3, int a4, int a5)
{
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  _DWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!(a5 | a4))
    return 3;
  v5 = *(_DWORD **)a1;
  v6 = *a3;
  v7 = a3[1];
  v9 = a3[2];
  v8 = a3[3];
  v10 = v8 + *a3;
  if (v8 + v6 < 0 != __OFADD__(v8, v6))
    ++v10;
  v11 = v10 >> 1;
  v13 = a3[4];
  v12 = a3[5];
  v14 = v13 + v7;
  if (v13 + v7 < 0 != __OFADD__(v13, v7))
    ++v14;
  v15 = v14 >> 1;
  v16 = v12 + v9;
  if (v12 + v9 < 0 != __OFADD__(v12, v9))
    ++v16;
  v17 = v16 >> 1;
  if (v5[37] >= a2)
  {
    v30 = **(int ***)(a1 + 8);
    v31 = v30[65];
    v32 = v30[66];
    v33 = v30[67];
    v34 = v5[65];
    if (v34 < v6 || (v35 = v5[66], v35 < v7) || (v36 = v5[67], v36 < v9) || v34 >= v8 || v35 >= v13 || v36 >= v12)
    {
      v37 = *(_DWORD **)(a1 + 24);
      if (*v37 < v6 || (v38 = v37[1], v38 < v7) || (v39 = v37[2], v39 < v9) || *v37 >= v8 || v38 >= v13 || v39 >= v12)
      {
        v40 = (v11 - v31) * (v11 - v31) + (v15 - v32) * (v15 - v32) + (v17 - v33) * (v17 - v33);
        v41 = *(uint64_t **)(a1 + 16);
        if (v40 > *v41)
        {
          *v41 = v40;
          v42 = *(_QWORD *)(a1 + 32);
          if (!*(_BYTE *)(v42 + 12))
          {
            v44 = *(_QWORD *)a3;
            *(_DWORD *)(v42 + 8) = a3[2];
            *(_QWORD *)v42 = v44;
            *(_BYTE *)(v42 + 12) = 1;
            return 3;
          }
          if ((int *)v42 != a3)
          {
            v43 = *(_QWORD *)a3;
            *(_DWORD *)(v42 + 8) = a3[2];
            *(_QWORD *)v42 = v43;
            return 3;
          }
        }
      }
    }
    return 3;
  }
  v18 = __OFSUB__(v8, v6);
  v19 = v8 - v6;
  if (v19 < 0 != v18)
    ++v19;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v13, v7);
  v21 = v13 - v7;
  if (v21 < 0 != v18)
    ++v21;
  v22 = v21 >> 1;
  v18 = __OFSUB__(v12, v9);
  v23 = v12 - v9;
  if (v23 < 0 != v18)
    ++v23;
  v24 = v23 >> 1;
  if (v11 < v5[65])
    v20 = -v20;
  v25 = v20 + v11;
  if (v15 < v5[66])
    v22 = -v22;
  v26 = v22 + v15;
  if (v17 < v5[67])
    v24 = -v24;
  v27 = v24 + v17;
  v28 = **(_DWORD ***)(a1 + 8);
  if ((v26 - v28[66]) * (uint64_t)(v26 - v28[66])
     + (v25 - v28[65]) * (uint64_t)(v25 - v28[65])
     + (v27 - v28[67]) * (uint64_t)(v27 - v28[67]) >= **(_QWORD **)(a1 + 16))
    return 1;
  else
    return 3;
}

uint64_t sub_223E992DC(uint64_t a1, unsigned int a2, int32x2_t *a3, unsigned int a4, char a5)
{
  _OWORD *v10;
  unsigned int v11;
  __int32 v12;
  unsigned __int32 v13;
  int32x2_t v14;
  int32x2_t v15;
  int v16;
  int v17;
  int32x4_t v18;
  __int128 v19;

  v10 = (_OWORD *)(a1 + 4388);
  sub_223E994A4(a1 + 68);
  sub_223E994A4(a1 + 608);
  sub_223E994A4(a1 + 1148);
  sub_223E994A4(a1 + 1688);
  sub_223E994A4(a1 + 2228);
  sub_223E994A4(a1 + 2768);
  sub_223E994A4(a1 + 3308);
  sub_223E994A4(a1 + 3848);
  v11 = 1 << (a5 + a2);
  v12 = a3[1].i32[0];
  v13 = v12 + v11;
  v14 = vadd_s32(*a3, vdup_n_s32(v11));
  v15 = *a3;
  *(_DWORD *)(a1 + 8) = v12;
  *(int32x2_t *)a1 = v15;
  *(int32x2_t *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 20) = v13;
  *(_DWORD *)(a1 + 64) = 0;
  if ((a4 & 0x80000000) != 0)
  {
    *(_DWORD *)(a1 + 56) = 0;
    if (a2 > 0xA)
      v16 = -1;
    else
      v16 = 1 << (3 * a2);
  }
  else
  {
    v16 = 0;
    v17 = 1 << (3 * a2);
    if (a2 >= 0xB)
      v17 = -1;
    *(_DWORD *)(a1 + 56) = v17;
  }
  *(_DWORD *)(a1 + 60) = v16;
  v18 = vdupq_n_s32(a4);
  *(int32x4_t *)(a1 + 24) = v18;
  *(_QWORD *)&v19 = 0x1A0000001ALL;
  *((_QWORD *)&v19 + 1) = 0x1A0000001ALL;
  *(int32x4_t *)(a1 + 40) = v18;
  *v10 = 0u;
  v10[1] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[2] = v19;
  v10[3] = v19;
  *(_DWORD *)(a1 + 4484) = 0;
  return a1;
}

int32x4_t sub_223E99400(uint64_t a1, unsigned int a2, int32x2_t *a3, unsigned int a4, char a5)
{
  unsigned int v5;
  __int32 v6;
  unsigned __int32 v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int v11;
  int v12;
  int32x4_t result;
  __int128 v14;

  v5 = 1 << (a5 + a2);
  v6 = a3[1].i32[0];
  v7 = v6 + v5;
  v8 = *a3;
  v9 = vdup_n_s32(v5);
  v10 = *a3;
  *(_DWORD *)(a1 + 8) = v6;
  *(int32x2_t *)a1 = v10;
  *(int32x2_t *)(a1 + 12) = vadd_s32(v8, v9);
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 64) = 0;
  if ((a4 & 0x80000000) != 0)
  {
    *(_DWORD *)(a1 + 56) = 0;
    if (a2 <= 0xA)
      v11 = 1 << (3 * a2);
    else
      v11 = -1;
  }
  else
  {
    v11 = 0;
    v12 = 1 << (3 * a2);
    if (a2 >= 0xB)
      v12 = -1;
    *(_DWORD *)(a1 + 56) = v12;
  }
  result = vdupq_n_s32(a4);
  *(_DWORD *)(a1 + 60) = v11;
  *(int32x4_t *)(a1 + 24) = result;
  *(_QWORD *)&v14 = 0x1A0000001ALL;
  *((_QWORD *)&v14 + 1) = 0x1A0000001ALL;
  *(int32x4_t *)(a1 + 40) = result;
  *(_OWORD *)(a1 + 4388) = 0u;
  *(_OWORD *)(a1 + 4404) = 0u;
  *(_OWORD *)(a1 + 4452) = 0u;
  *(_OWORD *)(a1 + 4468) = 0u;
  *(_OWORD *)(a1 + 4420) = v14;
  *(_OWORD *)(a1 + 4436) = v14;
  *(_DWORD *)(a1 + 4484) = 0;
  return result;
}

double sub_223E994A4(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 1;
  result = NAN;
  *(_QWORD *)(a1 + 4) = -1;
  *(_DWORD *)(a1 + 12) = -1;
  *(_BYTE *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 36) = 8;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 44) = -1;
  *(_DWORD *)(a1 + 52) = -1;
  *(_BYTE *)(a1 + 56) = 8;
  *(_BYTE *)(a1 + 60) = 1;
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = -1;
  *(_BYTE *)(a1 + 76) = 8;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 84) = -1;
  *(_DWORD *)(a1 + 92) = -1;
  *(_BYTE *)(a1 + 96) = 8;
  *(_BYTE *)(a1 + 100) = 1;
  *(_QWORD *)(a1 + 104) = -1;
  *(_DWORD *)(a1 + 112) = -1;
  *(_BYTE *)(a1 + 116) = 8;
  *(_BYTE *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 124) = -1;
  *(_DWORD *)(a1 + 132) = -1;
  *(_BYTE *)(a1 + 136) = 8;
  *(_BYTE *)(a1 + 140) = 1;
  *(_QWORD *)(a1 + 144) = -1;
  *(_DWORD *)(a1 + 152) = -1;
  *(_BYTE *)(a1 + 156) = 8;
  *(_BYTE *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 164) = -1;
  *(_DWORD *)(a1 + 172) = -1;
  *(_BYTE *)(a1 + 176) = 8;
  *(_BYTE *)(a1 + 180) = 1;
  *(_QWORD *)(a1 + 184) = -1;
  *(_DWORD *)(a1 + 192) = -1;
  *(_BYTE *)(a1 + 196) = 8;
  *(_BYTE *)(a1 + 200) = 1;
  *(_QWORD *)(a1 + 204) = -1;
  *(_DWORD *)(a1 + 212) = -1;
  *(_BYTE *)(a1 + 216) = 8;
  *(_BYTE *)(a1 + 220) = 1;
  *(_QWORD *)(a1 + 224) = -1;
  *(_DWORD *)(a1 + 232) = -1;
  *(_BYTE *)(a1 + 236) = 8;
  *(_BYTE *)(a1 + 240) = 1;
  *(_QWORD *)(a1 + 244) = -1;
  *(_DWORD *)(a1 + 252) = -1;
  *(_BYTE *)(a1 + 256) = 8;
  *(_BYTE *)(a1 + 260) = 1;
  *(_QWORD *)(a1 + 264) = -1;
  *(_DWORD *)(a1 + 272) = -1;
  *(_BYTE *)(a1 + 276) = 8;
  *(_BYTE *)(a1 + 280) = 1;
  *(_DWORD *)(a1 + 284) = -1;
  *(_QWORD *)(a1 + 288) = -1;
  *(_BYTE *)(a1 + 296) = 8;
  *(_BYTE *)(a1 + 300) = 1;
  *(_QWORD *)(a1 + 304) = -1;
  *(_DWORD *)(a1 + 312) = -1;
  *(_BYTE *)(a1 + 316) = 8;
  *(_BYTE *)(a1 + 320) = 1;
  *(_DWORD *)(a1 + 324) = -1;
  *(_QWORD *)(a1 + 328) = -1;
  *(_BYTE *)(a1 + 336) = 8;
  *(_BYTE *)(a1 + 340) = 1;
  *(_QWORD *)(a1 + 344) = -1;
  *(_DWORD *)(a1 + 352) = -1;
  *(_BYTE *)(a1 + 356) = 8;
  *(_BYTE *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 364) = -1;
  *(_QWORD *)(a1 + 368) = -1;
  *(_BYTE *)(a1 + 376) = 8;
  *(_BYTE *)(a1 + 380) = 1;
  *(_QWORD *)(a1 + 384) = -1;
  *(_DWORD *)(a1 + 392) = -1;
  *(_BYTE *)(a1 + 396) = 8;
  *(_BYTE *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 404) = -1;
  *(_QWORD *)(a1 + 408) = -1;
  *(_BYTE *)(a1 + 416) = 8;
  *(_BYTE *)(a1 + 420) = 1;
  *(_QWORD *)(a1 + 424) = -1;
  *(_DWORD *)(a1 + 432) = -1;
  *(_BYTE *)(a1 + 436) = 8;
  *(_BYTE *)(a1 + 440) = 1;
  *(_DWORD *)(a1 + 444) = -1;
  *(_QWORD *)(a1 + 448) = -1;
  *(_BYTE *)(a1 + 456) = 8;
  *(_BYTE *)(a1 + 460) = 1;
  *(_QWORD *)(a1 + 464) = -1;
  *(_DWORD *)(a1 + 472) = -1;
  *(_BYTE *)(a1 + 476) = 8;
  *(_BYTE *)(a1 + 480) = 1;
  *(_DWORD *)(a1 + 484) = -1;
  *(_QWORD *)(a1 + 488) = -1;
  *(_BYTE *)(a1 + 496) = 8;
  *(_BYTE *)(a1 + 500) = 1;
  *(_QWORD *)(a1 + 504) = -1;
  *(_DWORD *)(a1 + 512) = -1;
  *(_BYTE *)(a1 + 516) = 8;
  *(_BYTE *)(a1 + 520) = 1;
  *(_DWORD *)(a1 + 524) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_BYTE *)(a1 + 536) = 8;
  return result;
}

uint64_t sub_223E99668(float *a1, float *a2, float a3, float a4, float32x4_t a5, float32x4_t a6)
{
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v43;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  BOOL v49;
  float v50;
  float v51;
  BOOL v52;
  float v53;
  BOOL v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  BOOL v59;

  v6 = *a2;
  v7 = a1[3];
  if (*a2 > v7)
    return 0;
  v8 = v6 + a4;
  if ((float)(v6 + a4) < *a1)
    return 0;
  v10 = a1[4];
  v11 = a1[1];
  v12 = a1[2];
  v13 = v10 - v11;
  v14 = a2[1];
  v15 = a2[2];
  v16 = a3 * a3;
  if ((float)((float)((float)(v14 - (float)(v11 + (float)((float)(v10 - v11) * 0.5)))
                     * (float)(v14 - (float)(v11 + (float)((float)(v10 - v11) * 0.5))))
             + (float)((float)(v15 - (float)((float)((float)(v10 - v11) * 0.5) + v12))
                     * (float)(v15 - (float)((float)((float)(v10 - v11) * 0.5) + v12)))) >= v16)
  {
    v25 = v14 < v11 || v14 >= v10 || v15 < v12;
    if (v25 || v15 >= a1[5])
    {
      v26 = v13 + v13;
      v27 = (float)(v13 * v13) * 4.0;
      v28 = 1.0 / (float)((float)(v13 * v13) + (float)(v13 * v13));
      v29 = v11 - v14;
      v30 = v12 - v15;
      v31 = (float)(v13 + v13) * v29;
      v32 = v29 * v29;
      v33 = v30 * v30;
      v34 = v27 * (float)((float)(v32 + (float)(v30 * v30)) - v16);
      v35 = (float)(v31 * v31) - v34;
      if (v35 < 0.0
        || ((v45 = sqrtf(v35), v46 = v28 * (float)(v45 - v31), v46 >= 0.0) ? (v47 = v46 < 1.0) : (v47 = 0),
            !v47 && ((v48 = v28 * (float)((float)-v31 - v45), v48 >= 0.0) ? (v49 = v48 < 1.0) : (v49 = 0), !v49)))
      {
        v36 = (float)(v31 * v31)
            - (float)(v27 * (float)((float)(v32 + (float)((float)(a1[5] - v15) * (float)(a1[5] - v15))) - v16));
        if (v36 < 0.0
          || ((v50 = sqrtf(v36), v51 = v28 * (float)(v50 - v31), v51 >= 0.0) ? (v52 = v51 < 1.0) : (v52 = 0),
              !v52 && ((v53 = v28 * (float)((float)-v31 - v50), v53 >= 0.0) ? (v54 = v53 < 1.0) : (v54 = 0), !v54)))
        {
          v37 = v26 * v30;
          v38 = (float)(v37 * v37) - v34;
          if (v38 < 0.0
            || ((v55 = sqrtf(v38), v56 = v28 * (float)(v55 - v37), v56 >= 0.0) ? (v57 = v56 < 1.0) : (v57 = 0),
                !v57 && ((v58 = v28 * (float)((float)-v37 - v55), v58 >= 0.0) ? (v59 = v58 < 1.0) : (v59 = 0), !v59)))
          {
            v39 = (float)(v37 * v37)
                - (float)(v27 * (float)((float)((float)((float)(v10 - v14) * (float)(v10 - v14)) + v33) - v16));
            if (v39 < 0.0)
              return 0;
            v40 = sqrtf(v39);
            v41 = v28 * (float)(v40 - v37);
            if (v41 < 0.0 || v41 >= 1.0)
            {
              v43 = v28 * (float)((float)-v37 - v40);
              if (v43 < 0.0 || v43 >= 1.0)
                return 0;
            }
          }
        }
      }
    }
  }
  else if (v8 >= v7 && v6 <= *a1)
  {
    a5.i64[0] = *(_QWORD *)a1;
    a5.f32[2] = a1[2];
    a6.i64[0] = *(_QWORD *)(a1 + 3);
    a6.f32[2] = a1[5];
    v18 = vaddq_f32(a5, a6);
    v19.i64[0] = 0x3F0000003F000000;
    v19.i64[1] = 0x3F0000003F000000;
    v20 = vmulq_f32(v18, v19);
    v21 = 4;
    if (v14 > v20.f32[1])
      v21 = 1;
    v22 = a1[v21];
    v23 = 5;
    if (v15 > v20.f32[2])
      v23 = 2;
    if ((float)((float)((float)(v14 - v22) * (float)(v14 - v22))
               + (float)((float)(v15 - a1[v23]) * (float)(v15 - a1[v23]))) <= v16)
      return 2;
  }
  return 1;
}

uint64_t sub_223E998FC(float *a1, float *a2, float a3, float a4, float32x4_t a5, double a6, double a7, float32x4_t a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float v26;
  BOOL v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  BOOL v53;
  float v54;
  float v55;
  BOOL v56;
  float v57;
  BOOL v58;
  float v59;
  float v60;
  BOOL v61;
  float v62;
  BOOL v63;

  v8 = a2[1];
  v9 = a1[4];
  if (v8 > v9)
    return 0;
  v10 = v8 + a4;
  v11 = a1[1];
  if ((float)(v8 + a4) < v11)
    return 0;
  v13 = a1[5];
  v14 = a1[2];
  v15 = v13 - v14;
  v16 = a2[2];
  v17 = *a2;
  v18 = *a1;
  v19 = a3 * a3;
  if ((float)((float)((float)(v16 - (float)(v14 + (float)((float)(v13 - v14) * 0.5)))
                     * (float)(v16 - (float)(v14 + (float)((float)(v13 - v14) * 0.5))))
             + (float)((float)(*a2 - (float)((float)((float)(v13 - v14) * 0.5) + *a1))
                     * (float)(*a2 - (float)((float)((float)(v13 - v14) * 0.5) + *a1)))) >= v19)
  {
    v28 = v16 < v14 || v16 >= v13 || v17 < v18;
    if (v28 || v17 >= a1[3])
    {
      v29 = v15 * v15;
      v30 = v15 + v15;
      v31 = v29 * 4.0;
      v32 = 1.0 / (float)(v29 + v29);
      v33 = v14 - v16;
      v34 = v18 - v17;
      v35 = v30 * v33;
      v36 = v33 * v33;
      v37 = v34 * v34;
      v38 = v31 * (float)((float)(v36 + (float)(v34 * v34)) - v19);
      v39 = (float)(v35 * v35) - v38;
      if (v39 < 0.0
        || ((v49 = sqrtf(v39), v50 = v32 * (float)(v49 - v35), v50 >= 0.0) ? (v51 = v50 < 1.0) : (v51 = 0),
            !v51 && ((v52 = v32 * (float)((float)-v35 - v49), v52 >= 0.0) ? (v53 = v52 < 1.0) : (v53 = 0), !v53)))
      {
        v40 = (float)(v35 * v35)
            - (float)(v31 * (float)((float)(v36 + (float)((float)(a1[3] - v17) * (float)(a1[3] - v17))) - v19));
        if (v40 < 0.0
          || ((v54 = sqrtf(v40), v55 = v32 * (float)(v54 - v35), v55 >= 0.0) ? (v56 = v55 < 1.0) : (v56 = 0),
              !v56 && ((v57 = v32 * (float)((float)-v35 - v54), v57 >= 0.0) ? (v58 = v57 < 1.0) : (v58 = 0), !v58)))
        {
          v41 = v30 * v34;
          v42 = (float)(v41 * v41) - v38;
          if (v42 < 0.0
            || ((v59 = sqrtf(v42), v60 = v32 * (float)(v59 - v41), v60 >= 0.0) ? (v61 = v60 < 1.0) : (v61 = 0),
                !v61 && ((v62 = v32 * (float)((float)-v41 - v59), v62 >= 0.0) ? (v63 = v62 < 1.0) : (v63 = 0), !v63)))
          {
            v43 = (float)(v41 * v41)
                - (float)(v31 * (float)((float)((float)((float)(v13 - v16) * (float)(v13 - v16)) + v37) - v19));
            if (v43 < 0.0)
              return 0;
            v44 = sqrtf(v43);
            v45 = v32 * (float)(v44 - v41);
            if (v45 < 0.0 || v45 >= 1.0)
            {
              v47 = v32 * (float)((float)-v41 - v44);
              if (v47 < 0.0 || v47 >= 1.0)
                return 0;
            }
          }
        }
      }
    }
  }
  else if (v10 >= v9 && v8 <= v11)
  {
    a5.i64[0] = *(_QWORD *)a1;
    v21 = a5;
    v21.f32[2] = a1[2];
    a8.i64[0] = *(_QWORD *)(a1 + 3);
    v22 = a8;
    v22.f32[2] = a1[5];
    v23 = vaddq_f32(v21, v22);
    v22.i64[0] = 0x3F0000003F000000;
    v22.i64[1] = 0x3F0000003F000000;
    v24 = vmulq_f32(v23, v22);
    v25 = 5;
    if (v16 > v24.f32[2])
      v25 = 2;
    v26 = v16 - a1[v25];
    if (v17 <= v24.f32[0])
      a5.f32[0] = a8.f32[0];
    if ((float)((float)(v26 * v26) + (float)((float)(v17 - a5.f32[0]) * (float)(v17 - a5.f32[0]))) <= v19)
      return 2;
  }
  return 1;
}

uint64_t sub_223E99B90(float *a1, float *a2, float a3, float a4, float32x4_t a5, float32x4_t a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x4_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float v44;
  float v45;
  BOOL v46;
  float v47;
  BOOL v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  BOOL v53;
  float v54;
  float v55;
  BOOL v56;
  float v57;
  BOOL v58;

  v6 = a2[2];
  v7 = a1[5];
  if (v6 > v7)
    return 0;
  v8 = v6 + a4;
  v9 = a1[2];
  if ((float)(v6 + a4) < v9)
    return 0;
  v11 = a1[3];
  v12 = *a1;
  v13 = a1[1];
  v14 = v11 - *a1;
  v15 = *a2;
  v16 = a2[1];
  v17 = *a2 - (float)(*a1 + (float)(v14 * 0.5));
  v18 = a3 * a3;
  if ((float)((float)(v17 * v17)
             + (float)((float)(v16 - (float)((float)(v14 * 0.5) + v13))
                     * (float)(v16 - (float)((float)(v14 * 0.5) + v13)))) >= v18)
  {
    v24 = v15 < v12 || v15 >= v11 || v16 < v13;
    if (v24 || v16 >= a1[4])
    {
      v25 = v14 + v14;
      v26 = (float)(v14 * v14) * 4.0;
      v27 = 1.0 / (float)((float)(v14 * v14) + (float)(v14 * v14));
      v28 = v12 - v15;
      v29 = v13 - v16;
      v30 = (float)(v14 + v14) * v28;
      v31 = v28 * v28;
      v32 = v29 * v29;
      v33 = v26 * (float)((float)(v31 + (float)(v29 * v29)) - v18);
      v34 = (float)(v30 * v30) - v33;
      if (v34 < 0.0
        || ((v44 = sqrtf(v34), v45 = v27 * (float)(v44 - v30), v45 >= 0.0) ? (v46 = v45 < 1.0) : (v46 = 0),
            !v46 && ((v47 = v27 * (float)((float)-v30 - v44), v47 >= 0.0) ? (v48 = v47 < 1.0) : (v48 = 0), !v48)))
      {
        v35 = (float)(v30 * v30)
            - (float)(v26 * (float)((float)(v31 + (float)((float)(a1[4] - v16) * (float)(a1[4] - v16))) - v18));
        if (v35 < 0.0
          || ((v49 = sqrtf(v35), v50 = v27 * (float)(v49 - v30), v50 >= 0.0) ? (v51 = v50 < 1.0) : (v51 = 0),
              !v51 && ((v52 = v27 * (float)((float)-v30 - v49), v52 >= 0.0) ? (v53 = v52 < 1.0) : (v53 = 0), !v53)))
        {
          v36 = v25 * v29;
          v37 = (float)(v36 * v36) - v33;
          if (v37 < 0.0
            || ((v54 = sqrtf(v37), v55 = v27 * (float)(v54 - v36), v55 >= 0.0) ? (v56 = v55 < 1.0) : (v56 = 0),
                !v56 && ((v57 = v27 * (float)((float)-v36 - v54), v57 >= 0.0) ? (v58 = v57 < 1.0) : (v58 = 0), !v58)))
          {
            v38 = (float)(v36 * v36)
                - (float)(v26 * (float)((float)((float)((float)(v11 - v15) * (float)(v11 - v15)) + v32) - v18));
            if (v38 < 0.0)
              return 0;
            v39 = sqrtf(v38);
            v40 = v27 * (float)(v39 - v36);
            if (v40 < 0.0 || v40 >= 1.0)
            {
              v42 = v27 * (float)((float)-v36 - v39);
              if (v42 < 0.0 || v42 >= 1.0)
                return 0;
            }
          }
        }
      }
    }
  }
  else if (v8 >= v7 && v6 <= v9)
  {
    a5.i64[0] = *(_QWORD *)a1;
    a6.i64[0] = *(_QWORD *)(a1 + 3);
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    v21 = vmulq_f32(vaddq_f32(a5, a6), v20).u64[0];
    if (v15 <= *(float *)&v21)
      a5.f32[0] = a6.f32[0];
    v22 = 4;
    if (v16 > *((float *)&v21 + 1))
      v22 = 1;
    if ((float)((float)((float)(v16 - a1[v22]) * (float)(v16 - a1[v22]))
               + (float)((float)(v15 - a5.f32[0]) * (float)(v15 - a5.f32[0]))) <= v18)
      return 2;
  }
  return 1;
}

uint64_t sub_223E99E04@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>, float32x4_t a7@<Q5>, int8x16_t a8@<Q6>, int8x16_t a9@<Q7>)
{
  float32x2_t v9;
  int8x16_t v10;
  unsigned __int32 v11;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x2_t v26;
  unsigned __int32 v27;
  float32x2_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float32x2_t v32;
  float *i;
  __int32 **j;
  __int32 *k;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float v49;
  BOOL v50;
  float32x4_t v51;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float v61;
  float v62;
  float32x4_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float v81;
  float32x4_t v82;
  float v83;
  _BYTE v84[20];
  unsigned __int32 v85;
  _BYTE v86[20];
  uint64_t v87;
  float v88;
  unint64_t v89;
  __int32 v90;
  __int32 v91;
  char v92;
  int8x16_t v93;

  v11 = a4.u32[0];
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v13 = a3 + 8;
  *(_QWORD *)(a3 + 13) = 0;
  *(_QWORD *)v84 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)&v84[8] = *(_DWORD *)(a2 + 80);
  v14 = (unint64_t)v84 | 0xC;
  *(_QWORD *)&v84[12] = *(_QWORD *)(a2 + 84);
  v85 = *(_DWORD *)(a2 + 92);
  v15 = *(_DWORD *)(a2 + 104);
  if (v15 >= 4)
    v16 = 0;
  else
    v16 = (0x2020101u >> (8 * v15)) & 3;
  *(float *)((unint64_t)v84 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16 & 3))) = *(float *)((unint64_t)v84 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16 & 3)))
                                                                               - a4.f32[0];
  if (v16 == 2)
    v17 = 0;
  else
    v17 = v16 + 1;
  v18 = 4 * v17;
  *(float *)&v84[v18] = *(float *)&v84[v18] - a4.f32[0];
  *(float *)(v14 + 4 * v16) = *(float *)(v14 + 4 * v16) + a4.f32[0];
  *(float *)(v14 + v18) = *(float *)(v14 + v18) + a4.f32[0];
  a5.i64[0] = *(_QWORD *)result;
  a5.i32[2] = *(_DWORD *)(result + 8);
  a4.i64[0] = *(_QWORD *)&v84[12];
  a4.i32[2] = v85;
  v19 = (int8x16_t)vsubq_f32(a5, a4);
  if (*(float *)v19.i32 <= 0.0)
  {
    v19.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0];
    *(int32x2_t *)v19.i8 = vcgtz_f32(*(float32x2_t *)v19.i8);
    if ((v19.i8[4] & 1) == 0 && (v19.i8[0] & 1) == 0)
    {
      v20 = result;
      a6.i64[0] = *(_QWORD *)(result + 12);
      a6.i32[2] = *(_DWORD *)(result + 20);
      v21 = (int8x16_t)vsubq_f32(*(float32x4_t *)v84, a6);
      if (*(float *)v21.i32 <= 0.0)
      {
        v21.i32[0] = vextq_s8(v21, v21, 8uLL).u32[0];
        *(int8x8_t *)v21.i8 = vmvn_s8((int8x8_t)vcgtz_f32(*(float32x2_t *)v21.i8));
        if ((v21.i8[4] & 1) != 0 && (v21.i8[0] & 1) != 0)
        {
          v81 = *(float *)&v11;
          a7.i32[0] = *(_DWORD *)(a2 + 116);
          a8.i64[0] = *(_QWORD *)(a2 + 108);
          a9.i64[0] = *(_QWORD *)(a2 + 120);
          v32 = (float32x2_t)vzip1_s32(*(int32x2_t *)a8.i8, *(int32x2_t *)a9.i8);
          v23 = a8;
          v23.i32[2] = a7.i32[0];
          v24 = a9;
          v24.i32[2] = *(_DWORD *)(a2 + 128);
          v9.i32[0] = *(_DWORD *)(a2 + 140);
          v10.i64[0] = *(_QWORD *)(a2 + 132);
          v25 = v10;
          v25.i32[2] = v9.i32[0];
          *(int32x2_t *)a8.i8 = vzip2_s32(*(int32x2_t *)a8.i8, *(int32x2_t *)a9.i8);
          a7.i32[1] = v24.i32[2];
          v26 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v32, a5.f32[0]), *(float32x2_t *)a8.i8, *(float32x2_t *)a5.f32, 1), *(float32x2_t *)a7.f32, a5, 2);
          v27 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)a5.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1), *(float32x2_t *)v10.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL), v9).u32[0];
          v28 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v32, a6.f32[0]), *(float32x2_t *)a8.i8, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, a6, 2);
          v29 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
          *(float32x2_t *)a7.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v29.f32, v9);
          v82 = a7;
          v83 = *(float *)&v27;
          v30 = fminf(v26.f32[0], 3.4028e38);
          *(float *)a8.i32 = fmaxf(v26.f32[0], -3.4028e38);
          v80 = v26;
          v31 = fminf(v26.f32[1], 3.4028e38);
          v32.f32[0] = fmaxf(v26.f32[1], -3.4028e38);
          if (v28.f32[0] >= v30)
            v29.f32[0] = v30;
          else
            v29.f32[0] = v28.f32[0];
          if (*(float *)a8.i32 >= v28.f32[0])
            a6.f32[0] = *(float *)a8.i32;
          else
            a6.f32[0] = v28.f32[0];
          a8.i32[0] = v28.i32[1];
          if (v28.f32[1] >= v31)
            a7.f32[0] = v31;
          else
            a7.f32[0] = v28.f32[1];
          if (v32.f32[0] >= v28.f32[1])
            *(float *)a8.i32 = v32.f32[0];
          for (i = *(float **)a2; i != *(float **)(a2 + 8); i += 2)
          {
            v28.f32[0] = *i;
            if (*i >= v29.f32[0] && v28.f32[0] <= a6.f32[0])
            {
              v32.f32[0] = i[1];
              if (v32.f32[0] >= a7.f32[0] && v32.f32[0] <= *(float *)a8.i32)
              {
LABEL_50:
                v29.i32[0] = *(_DWORD *)(a2 + 96);
                v40 = v29.f32[0] + *(float *)(a2 + 100);
                if (v82.f32[0] < v40)
                  v40 = v82.f32[0];
                if (v29.f32[0] < v83)
                  v29.f32[0] = v83;
                v29.f32[0] = (float)(v40 + v29.f32[0]) * 0.5;
                *(_DWORD *)a3 = 1;
                *(_DWORD *)(a3 + 16) = vmla_f32(vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), v28), v32, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), *(float32x2_t *)v29.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).u32[0];
                *(float32x2_t *)(a3 + 8) = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v23.i8, v28.f32[0]), *(float32x2_t *)v24.i8, v32.f32[0]), *(float32x2_t *)v25.i8, v29.f32[0]);
                return result;
              }
            }
          }
          for (j = *(__int32 ***)(a2 + 24); j != *(__int32 ***)(a2 + 32); j += 3)
          {
            for (k = *j; k != j[1]; k += 2)
            {
              v28.i32[0] = *k;
              if (*(float *)k >= v29.f32[0] && v28.f32[0] <= a6.f32[0])
              {
                v32.i32[0] = k[1];
                if (v32.f32[0] >= a7.f32[0] && v32.f32[0] <= *(float *)a8.i32)
                  goto LABEL_50;
              }
            }
          }
          v41 = *(_QWORD *)(a2 + 48);
          v42 = *(_QWORD *)(a2 + 56);
          if (v41 == v42)
          {
LABEL_64:
            v87 = (uint64_t)v80;
            result = sub_223EA98C0((float *)&v87, (float **)a2);
            if ((result & 0x80000000) != 0)
            {
              v64 = v81;
              if (v81 > 0.0)
              {
                v66 = *(_QWORD *)(a2 + 48);
                v65 = *(_QWORD *)(a2 + 56);
                if (v66 != v65)
                {
                  while (1)
                  {
                    v93.i64[0] = 0;
                    v93.i32[2] = 0;
                    v67 = *(unsigned __int8 *)(v66 + 28);
                    v93.i32[*(unsigned __int8 *)(v66 + 28)] = 1065353216;
                    v44.i64[0] = *(_QWORD *)(v66 + 12);
                    v44.i32[2] = *(_DWORD *)(v66 + 20);
                    v43.i64[0] = *(_QWORD *)v66;
                    v43.i32[2] = *(_DWORD *)(v66 + 8);
                    v68 = (int8x16_t)vsubq_f32(v44, v43);
                    v69 = v93;
                    v73 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), v69, 0xCuLL);
                    v70 = vextq_s8(v69, v69, 0xCuLL);
                    v71 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v68, v68, 0xCuLL), v68, 8uLL), v73), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), v68, 0xCuLL), (float32x4_t)vextq_s8(v70, v93, 8uLL));
                    v72 = (float32x4_t)vextq_s8(v71, v71, 8uLL);
                    *(float32x2_t *)v73.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v71.i8, *(float32x2_t *)v71.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1), *(float32x2_t *)v71.i8, 1), *(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
                    v74 = vmulq_n_f32(vmulq_n_f32((float32x4_t)v71, 1.0 / sqrtf(v73.f32[0])), v64);
                    v75 = vaddq_f32(v43, v74);
                    v76 = vaddq_f32(v44, v74);
                    v44.i32[0] = *(_DWORD *)(v66 + 24);
                    if (v67)
                    {
                      if (v67 == 1)
                      {
                        v88 = v75.f32[2];
                        v87 = v75.i64[0];
                        v90 = v76.i32[2];
                        v89 = __PAIR64__(v75.u32[1], v76.u32[0]);
                        v91 = v44.i32[0];
                        v92 = 1;
                        result = sub_223E9ABCC((uint64_t)v86, v20, (uint64_t)&v87, *(double *)v75.i64, *(double *)v44.i64, *(double *)v76.i64, (float32x4_t)v71, v72, v73, v70);
                      }
                      else
                      {
                        if (v67 != 2)
                        {
                          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Axis.cpp", 84, (uint64_t)&unk_2245A9627, 0, (uint64_t)"Invalid Axis value", 18, (void (*)(void **))sub_22457406C);
                          abort();
                        }
                        v88 = v75.f32[2];
                        v87 = v75.i64[0];
                        v89 = v76.i64[0];
                        v91 = v44.i32[0];
                        v92 = 2;
                        v90 = v75.i32[2];
                        result = sub_223E9AD2C((uint64_t)v86, v20, (uint64_t)&v87, *(double *)v75.i64, *(double *)v44.i64, *(double *)v76.i64, (float32x4_t)v71, v72, v73, v70);
                      }
                    }
                    else
                    {
                      v88 = v75.f32[2];
                      v87 = v75.i64[0];
                      v90 = v76.i32[2];
                      v92 = 0;
                      v91 = v44.i32[0];
                      v89 = __PAIR64__(v76.u32[1], v75.u32[0]);
                      result = sub_223E9AA6C((uint64_t)v86, v20, (uint64_t)&v87, *(double *)v75.i64, *(double *)v44.i64, *(double *)v76.i64, (float32x4_t)v71, v72, v73, v70);
                    }
                    if (v86[0])
                      break;
                    v66 += 32;
                    v64 = v81;
                    if (v66 == v65)
                      return result;
                  }
                  *(_BYTE *)(a3 + 20) = 1;
                }
              }
            }
            else
            {
              *(_BYTE *)(a3 + 4) = 1;
              v43.i32[0] = *(_DWORD *)(a2 + 96);
              v49 = v43.f32[0] + *(float *)(a2 + 100);
              v50 = v83 < v43.f32[0] || v83 > v49;
              v51.i32[3] = v82.i32[3];
              if (v50 || v82.f32[0] < v43.f32[0] || v82.f32[0] > v49)
              {
                v51.i64[0] = *(_QWORD *)(v20 + 12);
                v51.i32[2] = *(_DWORD *)(v20 + 20);
                v45.i64[0] = *(_QWORD *)v20;
                v45.i32[2] = *(_DWORD *)(v20 + 8);
                v54 = vaddq_f32(v51, v45);
                v55.i64[0] = 0x3F0000003F000000;
                v55.i64[1] = 0x3F0000003F000000;
                v56 = (int8x16_t)vmulq_f32(v54, v55);
                v57 = *(float32x2_t *)(a2 + 108);
                v46.i32[0] = *(_DWORD *)(a2 + 116);
                v58 = *(float32x2_t *)(a2 + 120);
                v47.i32[0] = *(_DWORD *)(a2 + 128);
                v59 = *(float32x2_t *)(a2 + 132);
                v48.i32[0] = *(_DWORD *)(a2 + 140);
                v60 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v57, (int32x2_t)v58), *(float *)v56.i32), (float32x2_t)vzip2_s32((int32x2_t)v57, (int32x2_t)v58), *(float32x2_t *)v56.i8, 1), (float32x2_t)__PAIR64__(v47.u32[0], v46.u32[0]), (float32x4_t)v56, 2);
                v61 = vmla_f32(vmla_lane_f32(vmul_f32(v59, *(float32x2_t *)v56.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v56.i8, 1), v59, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), v48).f32[0];
                if (v61 >= v43.f32[0])
                  v43.f32[0] = v61;
                if (v49 < v43.f32[0])
                  v43.f32[0] = v49;
                *(_DWORD *)a3 = 1;
                *(_DWORD *)(a3 + 16) = vmla_f32(vmla_lane_f32(vmul_f32(v46, v60), v47, v60, 1), *(float32x2_t *)v43.f32, v48).u32[0];
                *(float32x2_t *)(a3 + 8) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v57, v60.f32[0]), v58, v60, 1), v59, v43.f32[0]);
              }
              else
              {
                v43.i64[0] = *(_QWORD *)(v20 + 12);
                v43.i32[2] = *(_DWORD *)(v20 + 20);
                *(_DWORD *)a3 = 2;
                v44.i64[0] = *(_QWORD *)v20;
                v44.i32[2] = *(_DWORD *)(v20 + 8);
                v77 = vaddq_f32(v43, v44);
                v78.i64[0] = 0x3F0000003F000000;
                v78.i64[1] = 0x3F0000003F000000;
                v79 = vmulq_f32(v77, v78);
                *(_DWORD *)(a3 + 16) = v79.i32[2];
                *(_QWORD *)(a3 + 8) = v79.i64[0];
              }
            }
          }
          else
          {
            while (1)
            {
              if (*(_BYTE *)(v41 + 28) == 1)
                result = sub_223E9ABCC((uint64_t)&v87, v20, v41, *(double *)v25.i64, *(double *)v24.i64, *(double *)v23.i64, v29, a6, a7, a8);
              else
                result = *(_BYTE *)(v41 + 28)
                       ? sub_223E9AD2C((uint64_t)&v87, v20, v41, *(double *)v25.i64, *(double *)v24.i64, *(double *)v23.i64, v29, a6, a7, a8): sub_223E9AA6C((uint64_t)&v87, v20, v41, *(double *)v25.i64, *(double *)v24.i64, *(double *)v23.i64, v29, a6,
                           a7,
                           a8);
              if ((_BYTE)v87)
                break;
              v41 += 32;
              if (v41 == v42)
                goto LABEL_64;
            }
            *(_DWORD *)a3 = 1;
            v62 = (float)(*(float *)&v89 + *((float *)&v89 + 1)) * 0.5;
            v23.i64[0] = *(_QWORD *)(v41 + 12);
            v23.i32[2] = *(_DWORD *)(v41 + 20);
            v29.i64[0] = *(_QWORD *)v41;
            v29.i32[2] = *(_DWORD *)(v41 + 8);
            v63 = vaddq_f32(v29, vmulq_n_f32(vsubq_f32((float32x4_t)v23, v29), (float)(*((float *)&v87 + 1) + v88) * 0.5));
            *(_DWORD *)(a3 + 16) = v63.i32[2];
            *(_QWORD *)(a3 + 8) = v63.i64[0];
            *(float *)(v13 + 4 * *(unsigned __int8 *)(v41 + 28)) = (float)(v62 * *(float *)(v41 + 24))
                                                                   + *(float *)(v13
                                                                              + 4 * *(unsigned __int8 *)(v41 + 28));
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223E9A510(uint64_t a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  float v17;
  int16x4_t v18;
  int16x4_t v19;
  int v20;
  int v21;
  char v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 *v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  unsigned __int32 v33;
  int16x4_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;

  v7 = 0;
  a6.i64[0] = *(_QWORD *)a2;
  a7.i64[0] = *(_QWORD *)a1;
  a7.i32[2] = *(_DWORD *)(a1 + 8);
  v8 = a6;
  v8.i32[2] = *(_DWORD *)(a2 + 8);
  v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v10 = (int8x16_t)vsubq_f32(a7, vaddq_f32(v9, v8));
  if (*(float *)v10.i32 >= 0.0)
    return v7;
  v10.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
  *(int8x8_t *)v10.i8 = vmvn_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v10.i8));
  if ((v10.i8[4] & 1) == 0)
    return v7;
  if ((v10.i8[0] & 1) == 0)
    return v7;
  v7 = 0;
  v11 = vsubq_f32(v8, v9);
  v9.i64[0] = *(_QWORD *)(a1 + 12);
  v9.i32[2] = *(_DWORD *)(a1 + 20);
  v12 = (int8x16_t)vsubq_f32(v9, v11);
  if (*(float *)v12.i32 <= 0.0)
    return v7;
  v12.i32[0] = vextq_s8(v12, v12, 8uLL).u32[0];
  *(int8x8_t *)v12.i8 = vmvn_s8((int8x8_t)vclez_f32(*(float32x2_t *)v12.i8));
  if ((v12.i8[4] & 1) == 0 || (v12.i8[0] & 1) == 0)
    return v7;
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = vmulq_f32(vaddq_f32(a7, v9), v13);
  v15 = (int8x16_t)vsubq_f32(v14, v8);
  v16 = (float32x2_t)vextq_s8(v15, v15, 8uLL).u64[0];
  v17 = *(float *)&a3 * *(float *)&a3;
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), *(float32x2_t *)v15.i8, 1), v16, v16).f32[0] > v17)
  {
    v18 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v8, a7)));
    v19 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v9, v8)));
    v20 = v18.u16[0] | v19.u16[0];
    v21 = v18.u16[1] | v19.u16[1];
    v7 = 1;
    if (v18.i8[0] & 1 | v19.i8[0] & 1 | v18.i8[2] & 1 | v19.i8[2] & 1)
    {
      v22 = v18.i8[4] | v19.i8[4];
      if (v20 & v21 & 1 | v18.i8[4] & 1 | v19.i8[4] & 1)
      {
        v23 = (float32x4_t)vcgtq_f32(v8, v14);
        *(int16x4_t *)v23.f32 = vmovn_s32((int32x4_t)v23);
        v24 = 12;
        if ((v23.i8[0] & 1) == 0)
          v24 = 0;
        v25 = 4;
        if ((v23.i8[2] & 1) != 0)
          v25 = 16;
        v26 = (__int32 *)(a1 + v25);
        v27 = 8;
        if ((v23.i8[4] & 1) != 0)
          v27 = 20;
        v23.i32[0] = *(_DWORD *)(a1 + v24);
        v23.i32[1] = *v26;
        v23.i32[2] = *(_DWORD *)(a1 + v27);
        v28 = vsubq_f32(v23, v8);
        v29 = vmulq_f32(v28, v28);
        if ((v20 & 1) != 0)
        {
          v30 = vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1));
          v31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2);
          LODWORD(v32) = vaddq_f32(v31, v30).u32[0];
          if ((v22 & 1) != 0)
            v30.f32[0] = v32;
          v33 = vaddq_f32(v29, v31).u32[0];
          if ((v21 & 1) != 0)
            v33 = v30.u32[0];
        }
        else
        {
          v33 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)).u32[0];
        }
        return *(float *)&v33 < v17;
      }
    }
    return v7;
  }
  v34 = vmovn_s32(vcgtq_f32(v8, v14));
  v35 = 12;
  if ((v34.i8[0] & 1) != 0)
    v35 = 0;
  v36 = a6.f32[0] - *(float *)(a1 + v35);
  v37 = 16;
  if ((v34.i8[2] & 1) != 0)
    v37 = 4;
  v38 = a6.f32[1] - *(float *)(a1 + v37);
  v39 = 20;
  if ((v34.i8[4] & 1) != 0)
    v39 = 8;
  v40 = *(float *)(a2 + 8) - *(float *)(a1 + v39);
  if ((float)((float)((float)(v36 * v36) + (float)(v38 * v38)) + (float)(v40 * v40)) > v17)
    return 1;
  else
    return 2;
}

uint64_t sub_223E9A750(uint64_t a1, uint64_t a2, float *a3, double a4, double a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, int8x16_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  int16x4_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float32x4_t v36;
  int16x4_t v37;
  int16x4_t v38;

  a8.i64[0] = *(_QWORD *)a1;
  v11 = a8;
  v11.i32[2] = *(_DWORD *)(a1 + 8);
  a7.i64[0] = *(_QWORD *)a2;
  v12 = a7;
  v12.i32[2] = *(_DWORD *)(a2 + 8);
  v13 = vsubq_f32(v11, v12);
  if (v13.f32[0] <= 0.0)
  {
    a9 = (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
    a10 = (int8x16_t)v13;
    a10.i32[0] = a9.i32[0];
    *(int8x8_t *)a9.f32 = vmvn_s8((int8x8_t)vclez_f32(*(float32x2_t *)a10.i8));
    if ((a9.i8[4] & 1) == 0 && (a9.i8[0] & 1) == 0)
    {
      a9.i64[0] = *(_QWORD *)(a1 + 12);
      a9.i32[2] = *(_DWORD *)(a1 + 20);
      a9 = vsubq_f32(a9, v12);
      if (a9.f32[0] >= 0.0)
      {
        a10 = vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL);
        a9.i32[0] = a10.i32[0];
        *(int8x8_t *)a9.f32 = vmvn_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a9.f32));
        if ((a9.i8[4] & 1) == 0 && (a9.i8[0] & 1) == 0)
          return 1;
      }
    }
  }
  v15 = *a3;
  if (*a3 <= 0.0)
  {
    if (*a3 >= 0.0)
    {
      v24 = a3[1];
      goto LABEL_20;
    }
    a8.i32[0] = *(_DWORD *)(a1 + 12);
  }
  v16 = a8.f32[0] - a7.f32[0];
  v17 = -v16;
  v18 = -v15;
  if (v15 >= 0.0)
  {
    v18 = *a3;
    v17 = v16;
  }
  v19 = v17 / v18;
  LODWORD(v24) = HIDWORD(*(_QWORD *)a3);
  if ((float)(v17 / v18) < 0.0)
    goto LABEL_20;
  v20 = vmulq_n_f32(v13, v18);
  v10.f32[2] = a3[2];
  v10.i64[0] = *(_QWORD *)a3;
  v21 = vmulq_n_f32(v10, v17);
  v22 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v21, v20)));
  if ((v22.i8[2] & 1) != 0
    || (v20.i64[0] = *(_QWORD *)(a1 + 12),
        v20.i32[2] = *(_DWORD *)(a1 + 20),
        a10 = vmvnq_s8((int8x16_t)vcgeq_f32(vmulq_n_f32(vsubq_f32(v20, v12), v18), v21)),
        *(int16x4_t *)a10.i8 = vmovn_s32((int32x4_t)a10),
        (a10.i8[2] & 1) != 0)
    || (v22.i8[4] & 1) != 0
    || (a10.i8[4] & 1) != 0)
  {
LABEL_20:
    v25 = a1;
    if (v24 <= 0.0)
    {
      if (v24 >= 0.0)
        goto LABEL_28;
      v25 = a1 + 12;
    }
    v26 = -(float)(*(float *)(v25 + 4) - a7.f32[1]);
    if (v24 >= 0.0)
      v26 = *(float *)(v25 + 4) - a7.f32[1];
    else
      v24 = -v24;
    v27 = v26 / v24;
    if ((float)(v26 / v24) >= 0.0)
    {
      a10.i64[0] = *(_QWORD *)a3;
      a10.i32[2] = (__int32)a3[2];
      v28 = (int32x4_t)vmulq_n_f32((float32x4_t)a10, v26);
      a10.i64[0] = *(_QWORD *)(a1 + 12);
      a10.i32[2] = *(_DWORD *)(a1 + 20);
      v29 = (int32x4_t)vmulq_n_f32(vsubq_f32((float32x4_t)a10, v12), v24);
      v30 = vuzp1q_s32(v28, (int32x4_t)vmulq_n_f32(v13, v24));
      v31 = vuzp1q_s32(v29, v28);
      a9 = (float32x4_t)vuzp2q_s32(v31, (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL));
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(a9, (float32x4_t)vuzp2q_s32(v30, (int32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL))))), 0xFuLL))) & 1) == 0)
      {
        v23 = LODWORD(v27);
        return (v23 << 32) | 1;
      }
    }
LABEL_28:
    v32 = a3[2];
    v33 = a1;
    if (v32 <= 0.0)
    {
      if (v32 >= 0.0)
        return 0;
      v33 = a1 + 12;
    }
    v34 = -(float)(*(float *)(v33 + 8) - *(float *)(a2 + 8));
    if (v32 >= 0.0)
      v34 = *(float *)(v33 + 8) - *(float *)(a2 + 8);
    else
      v32 = -v32;
    v35 = v34 / v32;
    if ((float)(v34 / v32) < 0.0)
      return 0;
    a9.i64[0] = *(_QWORD *)a3;
    a9.f32[2] = a3[2];
    v36 = vmulq_n_f32(a9, v34);
    v37 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v36, vmulq_n_f32(v13, v32))));
    if ((v37.i8[0] & 1) != 0)
      return 0;
    a9.i64[0] = *(_QWORD *)(a1 + 12);
    a9.i32[2] = *(_DWORD *)(a1 + 20);
    v38 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(vmulq_n_f32(vsubq_f32(a9, v12), v32), v36)));
    if ((v38.i8[0] & 1) != 0)
      return 0;
    if ((v37.i8[2] & 1) != 0)
      return 0;
    if ((v38.i8[2] & 1) == 0)
    {
      v23 = LODWORD(v35);
      return (v23 << 32) | 1;
    }
    return 0;
  }
  v23 = LODWORD(v19);
  return (v23 << 32) | 1;
}

uint64_t sub_223E9AA6C(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, int8x16_t a10)
{
  float v10;
  float v11;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v17;
  double v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float v23;
  float32x4_t v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  __int32 v30;
  float32x4_t v31;
  float32x4_t v32;

  *(_BYTE *)result = 0;
  v10 = fmaxf(*(float *)a2 - *(float *)a3, 0.0);
  v11 = *(float *)(a3 + 24);
  a7.i32[0] = *(_DWORD *)(a2 + 12);
  *(float *)&a6 = a7.f32[0] - *(float *)a3;
  if (*(float *)&a6 >= v11)
    LODWORD(a6) = *(_DWORD *)(a3 + 24);
  *(float *)(result + 12) = v10;
  *(_DWORD *)(result + 16) = LODWORD(a6);
  if (v10 <= v11 && *(float *)&a6 >= 0.0)
  {
    v13 = result;
    v14 = 1.0 / v11;
    *(float *)(result + 12) = v10 * v14;
    *(float *)(result + 16) = v14 * *(float *)&a6;
    v15 = *(float *)(a2 + 12);
    v16 = *(float *)a2;
    v32.i64[0] = *(_QWORD *)a3;
    v32.i32[2] = *(_DWORD *)(a3 + 8);
    v32.f32[0] = (float)(v15 + v16) * 0.5;
    v31.i64[0] = *(_QWORD *)(a3 + 12);
    v31.i32[2] = *(_DWORD *)(a3 + 20);
    v31.f32[0] = v32.f32[0];
    v27 = v32;
    v28 = v31;
    v17 = vsubq_f32(v31, v32);
    v30 = v17.i32[2];
    v29 = v17.i64[0];
    result = sub_223E9A750(a2, (uint64_t)&v32, (float *)&v29, *(double *)v17.i64, *(double *)v32.i64, a6, a7, a8, a9, a10);
    if ((result & 1) != 0)
    {
      v23 = *((float *)&result + 1);
      if (*((float *)&result + 1) <= 1.0)
      {
        v24 = vsubq_f32(v27, v28);
        v30 = v24.i32[2];
        v29 = v24.i64[0];
        result = sub_223E9A750(a2, (uint64_t)&v31, (float *)&v29, *(double *)v24.i64, *(double *)v27.i64, v18, v19, v20, v21, v22);
        if ((result & 1) != 0 && *((float *)&result + 1) <= 1.0)
        {
          v25 = 1.0 - *((float *)&result + 1);
          *(_BYTE *)v13 = 1;
          if ((float)(1.0 - *((float *)&result + 1)) >= v23)
            v26 = v23;
          else
            v26 = 1.0 - *((float *)&result + 1);
          if (v25 <= v23)
            v25 = v23;
          *(float *)(v13 + 4) = v26;
          *(float *)(v13 + 8) = v25;
        }
      }
    }
  }
  return result;
}

uint64_t sub_223E9ABCC(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, int8x16_t a10)
{
  float v10;
  float v11;
  float v12;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float32x4_t v18;
  double v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  __int32 v31;
  float32x4_t v32;
  float32x4_t v33;

  *(_BYTE *)result = 0;
  v10 = *(float *)(a3 + 4);
  v11 = fmaxf(*(float *)(a2 + 4) - v10, 0.0);
  v12 = *(float *)(a3 + 24);
  a7.i32[0] = *(_DWORD *)(a2 + 16);
  *(float *)&a6 = a7.f32[0] - v10;
  if (*(float *)&a6 >= v12)
    LODWORD(a6) = *(_DWORD *)(a3 + 24);
  *(float *)(result + 12) = v11;
  *(_DWORD *)(result + 16) = LODWORD(a6);
  if (v11 <= v12 && *(float *)&a6 >= 0.0)
  {
    v14 = result;
    v15 = 1.0 / v12;
    *(float *)(result + 12) = v11 * v15;
    *(float *)(result + 16) = v15 * *(float *)&a6;
    v16 = *(float *)(a2 + 16);
    v17 = *(float *)(a2 + 4);
    v33.i64[0] = *(_QWORD *)a3;
    v33.i32[2] = *(_DWORD *)(a3 + 8);
    v33.f32[1] = (float)(v16 + v17) * 0.5;
    v32.i64[0] = *(_QWORD *)(a3 + 12);
    v32.i32[2] = *(_DWORD *)(a3 + 20);
    v32.f32[1] = v33.f32[1];
    v28 = v33;
    v29 = v32;
    v18 = vsubq_f32(v32, v33);
    v31 = v18.i32[2];
    v30 = v18.i64[0];
    result = sub_223E9A750(a2, (uint64_t)&v33, (float *)&v30, *(double *)v18.i64, *(double *)v33.i64, a6, a7, a8, a9, a10);
    if ((result & 1) != 0)
    {
      v24 = *((float *)&result + 1);
      if (*((float *)&result + 1) <= 1.0)
      {
        v25 = vsubq_f32(v28, v29);
        v31 = v25.i32[2];
        v30 = v25.i64[0];
        result = sub_223E9A750(a2, (uint64_t)&v32, (float *)&v30, *(double *)v25.i64, *(double *)v28.i64, v19, v20, v21, v22, v23);
        if ((result & 1) != 0 && *((float *)&result + 1) <= 1.0)
        {
          v26 = 1.0 - *((float *)&result + 1);
          *(_BYTE *)v14 = 1;
          if ((float)(1.0 - *((float *)&result + 1)) >= v24)
            v27 = v24;
          else
            v27 = 1.0 - *((float *)&result + 1);
          if (v26 <= v24)
            v26 = v24;
          *(float *)(v14 + 4) = v27;
          *(float *)(v14 + 8) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t sub_223E9AD2C(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, int8x16_t a10)
{
  float v10;
  float v11;
  float v12;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float32x4_t v18;
  double v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  __int32 v31;
  float32x4_t v32;
  float32x4_t v33;

  *(_BYTE *)result = 0;
  v10 = *(float *)(a3 + 8);
  v11 = fmaxf(*(float *)(a2 + 8) - v10, 0.0);
  v12 = *(float *)(a3 + 24);
  a7.i32[0] = *(_DWORD *)(a2 + 20);
  *(float *)&a6 = a7.f32[0] - v10;
  if (*(float *)&a6 >= v12)
    LODWORD(a6) = *(_DWORD *)(a3 + 24);
  *(float *)(result + 12) = v11;
  *(_DWORD *)(result + 16) = LODWORD(a6);
  if (v11 <= v12 && *(float *)&a6 >= 0.0)
  {
    v14 = result;
    v15 = 1.0 / v12;
    *(float *)(result + 12) = v11 * v15;
    *(float *)(result + 16) = v15 * *(float *)&a6;
    v16 = *(float *)(a2 + 20);
    v17 = *(float *)(a2 + 8);
    v33.i64[0] = *(_QWORD *)a3;
    v33.f32[2] = (float)(v16 + v17) * 0.5;
    v32.i64[0] = *(_QWORD *)(a3 + 12);
    v32.f32[2] = v33.f32[2];
    v28 = v33;
    v29 = v32;
    v18 = vsubq_f32(v32, v33);
    v31 = v18.i32[2];
    v30 = v18.i64[0];
    result = sub_223E9A750(a2, (uint64_t)&v33, (float *)&v30, *(double *)v18.i64, *(double *)v33.i64, a6, a7, a8, a9, a10);
    if ((result & 1) != 0)
    {
      v24 = *((float *)&result + 1);
      if (*((float *)&result + 1) <= 1.0)
      {
        v25 = vsubq_f32(v28, v29);
        v31 = v25.i32[2];
        v30 = v25.i64[0];
        result = sub_223E9A750(a2, (uint64_t)&v32, (float *)&v30, *(double *)v25.i64, *(double *)v28.i64, v19, v20, v21, v22, v23);
        if ((result & 1) != 0 && *((float *)&result + 1) <= 1.0)
        {
          v26 = 1.0 - *((float *)&result + 1);
          *(_BYTE *)v14 = 1;
          if ((float)(1.0 - *((float *)&result + 1)) >= v24)
            v27 = v24;
          else
            v27 = 1.0 - *((float *)&result + 1);
          if (v26 <= v24)
            v26 = v24;
          *(float *)(v14 + 4) = v27;
          *(float *)(v14 + 8) = v26;
        }
      }
    }
  }
  return result;
}

void sub_223E9AE7C(float *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  float v5;
  int32x2_t v6;
  int32x2_t v7;
  unint64_t v10;
  _OWORD *v11;
  char *v12;
  float32x4_t v13;
  float32x4_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  _DWORD *v33;
  float32x4_t v34;
  uint64_t v35;
  _DWORD *v36;
  __int32 v37;
  __int32 v38;
  float32x4_t v39;
  __int32 v40;
  float32x4_t v41;
  __int32 v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __n128 v48;
  int v49;
  BOOL v50;
  unint64_t *v51;
  char *v52;
  int8x16_t v53;
  __int8 v54;
  int8x16_t v55;
  int v56;
  unint64_t v57;
  size_t v58;
  char *v59;
  char *v60;
  size_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  std::__shared_weak_count *v84;
  __n128 v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  __n128 v90;
  int32x2_t v91;
  float32x4_t v92;
  int v93;
  char *v94;
  char *v95;
  uint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  int64_t v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count_vtbl *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x2_t *v116;
  uint64_t v117;
  unsigned int v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  unsigned int v122;
  float32x4_t *v123;
  char *v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  float32x2_t *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x4_t v137;
  int8x16_t v138;
  float32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int8x16_t v148;
  float v149;
  unsigned int v150;
  float v151;
  float v152;
  unsigned int v153;
  unsigned int v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  size_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float v170;
  float32x4_t v171;
  float v172;
  float v173;
  float v174;
  float32x4_t v175;
  float v176;
  float v177;
  float v178;
  float32x4_t v179;
  float v180;
  float v181;
  float v182;
  float32x4_t v183;
  float v184;
  float v185;
  float v186;
  float32x4_t v187;
  float v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  float v193;
  float32x4_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  float32x4_t v198;
  float32x4_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int32x4_t v202;
  float32x4_t *v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t v210;
  float *v211;
  int *v212;
  int v213;
  float32x4_t *v214;
  float v215;
  __n128 v216;
  char *v217;
  char *v218;
  void *v219;
  char *v220;
  void *v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  void *v227;
  void *v228;
  unint64_t v229;
  char *v231;
  unint64_t v232;
  unsigned int *v233;
  uint64_t v236;
  float v237;
  _QWORD *v238;
  _QWORD *v239;
  float32x2_t v240;
  float v241;
  int8x16_t v242;
  float v243;
  float32x2_t v244;
  __n128 v245;
  float32x2_t v246;
  float v247;
  int8x16_t v248;
  float v249;
  int32x4_t v250;
  float v251;
  float32x2_t v252;
  float v253;
  __n128 v254;
  uint64_t v255;
  float32x2_t v256;
  __n128 v257;
  float32x4_t v258;
  float32x2_t v259;
  float v260;
  char *v261;
  char *v262;
  unint64_t v263;
  uint64_t v264;
  std::__shared_weak_count_vtbl *v265;
  int v266;
  void *v267;
  char *v268;
  void *v269;
  _BYTE *v270;
  _QWORD v271[3];
  char v272;
  unint64_t v273;
  int v274;
  void *v275;
  char *v276;
  char *v277;
  uint64_t v278;
  void *__p;
  std::__shared_weak_count *v280;
  char *v281;
  void *v282;
  char *v283;
  char *v284;
  __int32 v285;
  __int32 v286;
  unsigned __int32 v287;
  unsigned __int8 v288;
  unsigned __int16 v289;
  unsigned __int8 v290;
  float v291;
  uint64_t v292;
  char v293;
  float32x4_t v294;
  float32x4_t v295;
  unsigned __int32 v296;

  sub_223E9C880((uint64_t)&v265, a2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  if (v10 <= 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FPFHDescriptor.cpp", 235, (uint64_t)"vertices.size() > 2", 19, (uint64_t)"verteics.size() must be large than 2.", 37, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  }
  HIDWORD(v264) = 0;
  v262 = 0;
  v263 = 0;
  v261 = 0;
  sub_22339E3C8((uint64_t)&v261, v10);
  v11 = operator new(0x78uLL);
  v280 = (std::__shared_weak_count *)((char *)v11 + 120);
  v281 = (char *)v11 + 120;
  *v11 = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[6] = 0u;
  *((_QWORD *)v11 + 14) = 0;
  __p = v11;
  HIDWORD(v278) = 0;
  v12 = (char *)operator new(0x168uLL);
  v276 = v12 + 360;
  v277 = v12 + 360;
  v275 = v12;
  v15.n128_u64[0] = (unint64_t)vdup_n_s32(0x7FC00000u);
  v273 = v15.n128_u64[0];
  v274 = 2143289344;
  v17 = *a2;
  v16 = a2[1];
  if (*a2 == v16)
  {
    v56 = 0;
    v276 = v12;
    v282 = v12;
    LODWORD(v283) = 30;
    goto LABEL_35;
  }
  v18 = 0;
  v15.n128_u32[0] = 1053609165;
  v254 = v15;
  do
  {
    v15.n128_f32[0] = a5 * 0.4;
    v21 = sub_223983D78((uint64_t)&v265, v17, 0x1Eu, (unint64_t *)&__p, v15, v13, v14);
    if (!v21)
      goto LABEL_27;
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = *a2 + 12 * *(unsigned int *)((char *)__p + v25);
      v27 = (char *)v275 + v24;
      v28 = *(_QWORD *)v26;
      *((_DWORD *)v27 + 2) = *(_DWORD *)(v26 + 8);
      *(_QWORD *)v27 = v28;
      v25 += 4;
      v24 += 12;
    }
    while (4 * v21 != v25);
    v29 = v275;
    v30 = 12 * v21;
    v31 = 0uLL;
    v32 = v30;
    v33 = v275;
    do
    {
      v13.i64[0] = *(_QWORD *)v33;
      v13.i32[2] = v33[2];
      v31 = vaddq_f32(v31, v13);
      v33 += 3;
      v32 -= 12;
    }
    while (v32);
    v13.f32[0] = (float)v21;
    v41 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
    v258 = v41;
    v34 = vdivq_f32(v31, v41);
    v31.i32[0] = 0;
    v35 = 12 * v21;
    v36 = v275;
    v37 = 0;
    v38 = 0;
    v14.i32[0] = 0;
    v39.i32[0] = 0;
    v40 = 0;
    v41.i32[0] = 0;
    v42 = 0;
    v22.i32[0] = 0;
    do
    {
      v23.i64[0] = *(_QWORD *)v36;
      v23.i32[2] = v36[2];
      v43 = vsubq_f32(v23, v34);
      *(float32x2_t *)v44.f32 = vmul_n_f32(*(float32x2_t *)v43.f32, v43.f32[0]);
      v45 = (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL);
      *(float32x2_t *)&v44.u32[2] = vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v43.f32);
      *(float32x2_t *)v46.f32 = vmul_lane_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32, 1);
      *(float32x2_t *)&v46.u32[2] = vmul_lane_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v43.f32, 1);
      *(float32x2_t *)v45.f32 = vmul_laneq_f32(*(float32x2_t *)v43.f32, v43, 2);
      v23 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v43, v43), 2);
      v45.i32[2] = v23.i32[0];
      v31.i32[1] = v37;
      v31.i32[2] = v38;
      v14.i32[1] = v39.i32[0];
      v14.i32[2] = v40;
      v41.i32[1] = v42;
      v41.i32[2] = v22.i32[0];
      v31 = vaddq_f32(v31, v44);
      v14 = vaddq_f32(v14, v46);
      v41 = vaddq_f32(v41, v45);
      v40 = v14.i32[2];
      v39.i32[0] = v14.i32[1];
      v38 = v31.i32[2];
      v37 = v31.i32[1];
      v22.i32[0] = v41.i32[2];
      v42 = v41.i32[1];
      v36 += 3;
      v35 -= 12;
    }
    while (v35);
    v34.f32[0] = (float)((12 * (unint64_t)v21 - 12) / 0xC + 1);
    v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0);
    v31.i64[1] = __PAIR64__(v14.u32[0], v31.u32[2]);
    v39.i32[1] = v14.i32[2];
    v39.i64[1] = v41.i64[0];
    v293 = 0;
    v292 = 0x300000003;
    v296 = vdivq_f32(v22, v34).u32[0];
    v294 = vdivq_f32(v31, v47);
    v295 = vdivq_f32(v39, v47);
    sub_223CD406C((uint64_t)&v282);
    if (v293)
    {
      v49 = v288;
      v18 = v289 | (v290 << 16);
      v5 = v291;
      v6.i32[0] = v285;
      v7.i32[0] = v286;
      v48.n128_u32[0] = v287;
      v254 = v48;
    }
    else
    {
      v49 = 0;
    }
    v15 = 0uLL;
    do
    {
      v13.i64[0] = *(_QWORD *)v29;
      v13.i32[2] = v29[2];
      v15 = (__n128)vaddq_f32((float32x4_t)v15, v13);
      v29 += 3;
      v30 -= 12;
    }
    while (v30);
    if (!v293)
      goto LABEL_27;
    v13.i32[0] = v49 | (v18 << 8);
    v14.f32[0] = fabsf(v13.f32[0]);
    v50 = v13.f32[0] != 0.0 && v14.f32[0] > 0.000001;
    if (v50 && (v13.f32[0] = v5 / v13.f32[0], v14.i32[0] = 1008981770, v13.f32[0] >= 0.01))
    {
      v13.i64[1] = v258.i64[1];
      v53 = (int8x16_t)vdivq_f32((float32x4_t)v15, v258);
      v54 = v53.i8[0];
      v55 = vextq_s8(v53, v53, 1uLL);
      LOBYTE(v271[0]) = v54;
      BYTE3(v271[1]) = v55.i8[10];
      *(_WORD *)((char *)&v271[1] + 1) = v55.i16[4];
      *(int32x2_t *)v13.f32 = vzip1_s32(v6, v7);
      *(_QWORD *)((char *)v271 + 1) = v55.i64[0];
      v15 = v254;
      HIDWORD(v271[2]) = v254.n128_u32[0];
      *(_QWORD *)((char *)&v271[1] + 4) = v13.i64[0];
      v51 = (_QWORD *)((char *)&v271[1] + 4);
      v272 = 1;
      v52 = v262;
      if ((unint64_t)v262 < v263)
      {
LABEL_6:
        v19 = *v51;
        *((_DWORD *)v52 + 2) = *((_DWORD *)v51 + 2);
        *(_QWORD *)v52 = v19;
        v20 = (unint64_t)(v52 + 12);
        goto LABEL_7;
      }
    }
    else
    {
LABEL_27:
      LOBYTE(v271[0]) = 0;
      v51 = &v273;
      v272 = 0;
      v52 = v262;
      if ((unint64_t)v262 < v263)
        goto LABEL_6;
    }
    v20 = sub_2233B2B48((unint64_t *)&v261, (uint64_t *)v51);
LABEL_7:
    v262 = (char *)v20;
    v17 += 12;
  }
  while (v17 != v16);
  if (v275)
  {
    v56 = HIDWORD(v278);
    v276 = (char *)v275;
    v282 = v275;
    LODWORD(v283) = -1431655765 * ((unint64_t)(v277 - (_BYTE *)v275) >> 2);
    if (HIDWORD(v278) == -1)
      sub_22316DD70();
LABEL_35:
    v294.i64[0] = (uint64_t)&v282;
    ((void (*)(float32x4_t *, uint64_t *))off_24EC63C28[v56])(&v294, &v278);
  }
  if (__p)
  {
    v280 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  v57 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  if (v57 != 0xAAAAAAAAAAAAAAABLL * ((v262 - v261) >> 2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FPFHDescriptor.cpp", 162, (uint64_t)"num_descriptors == normals.size()", 33, (uint64_t)"vertices and normals size mismatch.", 35, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (v57 <= 1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_141;
  }
  v58 = 4 * a3;
  if (a3)
  {
    v59 = (char *)operator new(4 * a3);
    v60 = &v59[4 * a3];
    memset(v59, 255, v58);
  }
  else
  {
    v59 = 0;
    v60 = 0;
  }
  v294 = 0uLL;
  v295.i64[0] = 0;
  v282 = &v294;
  LOBYTE(v283) = 0;
  if (v57 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v61 = 24 * v57;
  v62 = operator new(24 * v57);
  v63 = v62;
  v294.i64[0] = (uint64_t)v62;
  v294.i64[1] = (uint64_t)v62;
  v64 = &v62[3 * v57];
  v295.i64[0] = (uint64_t)v64;
  v65 = v60 - v59;
  v229 = v57;
  if (v60 == v59)
  {
    bzero(v62, 24 * ((v61 - 24) / 0x18) + 24);
    v294.i64[1] = (uint64_t)v64;
    if (v59)
      goto LABEL_51;
  }
  else
  {
    if (v65 < 0)
    {
      *v62 = 0;
      v62[1] = 0;
      v62[2] = 0;
      sub_22316E078();
    }
    v66 = 24 * v57;
    do
    {
      *v63 = 0;
      v63[1] = 0;
      v63[2] = 0;
      v67 = (char *)operator new(v60 - v59);
      *v63 = v67;
      v68 = &v67[4 * (v65 >> 2)];
      v63[2] = v68;
      memcpy(v67, v59, v60 - v59);
      v63[1] = v68;
      v63 += 3;
      v66 -= 24;
    }
    while (v66);
    v294.i64[1] = (uint64_t)v64;
    if (v59)
LABEL_51:
      operator delete(v59);
  }
  if (a3)
  {
    v69 = (char *)operator new(v58);
    v70 = &v69[4 * a3];
    memset_pattern16(v69, &unk_22468FE10, v58);
  }
  else
  {
    v69 = 0;
    v70 = 0;
  }
  v275 = 0;
  v276 = 0;
  v277 = 0;
  v282 = &v275;
  LOBYTE(v283) = 0;
  v71 = operator new(v61);
  v72 = v71;
  v275 = v71;
  v276 = (char *)v71;
  v73 = (char *)&v71[3 * v229];
  v277 = v73;
  v74 = v70 - v69;
  if (v70 == v69)
  {
    bzero(v71, 24 * ((v61 - 24) / 0x18) + 24);
    v276 = v73;
    if (v69)
      goto LABEL_62;
  }
  else
  {
    if (v74 < 0)
    {
      *v71 = 0;
      v71[1] = 0;
      v71[2] = 0;
      sub_22316E078();
    }
    v75 = 24 * v229;
    do
    {
      *v72 = 0;
      v72[1] = 0;
      v72[2] = 0;
      v76 = (char *)operator new(v70 - v69);
      *v72 = v76;
      v77 = &v76[4 * (v74 >> 2)];
      v72[2] = v77;
      memcpy(v76, v69, v70 - v69);
      v72[1] = v77;
      v72 += 3;
      v75 -= 24;
    }
    while (v75);
    v276 = v73;
    if (v69)
LABEL_62:
      operator delete(v69);
  }
  v233 = (unsigned int *)operator new(4 * v229);
  bzero(v233, 4 * v229);
  v79 = *a2;
  v78 = a2[1];
  v80 = 0xAAAAAAAAAAAAAAABLL * ((v78 - *a2) >> 2);
  v81 = v294.i64[1] - v294.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * ((v294.i64[1] - v294.i64[0]) >> 3) < v80)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FPFHDescriptor.cpp", 65, (uint64_t)"cache_neighbors.size() >= num_descriptors", 41, (uint64_t)"Invalid cache_neighbors size.", 29, (void (*)(void **))sub_22457406C))
    {
      v81 = v294.i64[1] - v294.i64[0];
      goto LABEL_66;
    }
    goto LABEL_149;
  }
LABEL_66:
  if (v81 != v276 - (_BYTE *)v275)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FPFHDescriptor.cpp", 66, (uint64_t)"cache_neighbors.size() == cache_weights.size()", 46, (uint64_t)"Invalid cache_weights size.", 27, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_149;
    }
    v81 = v294.i64[1] - v294.i64[0];
  }
  if (0xAAAAAAAAAAAAAAABLL * (v81 >> 3) != v229
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FPFHDescriptor.cpp", 68, (uint64_t)"cache_neighbors.size() == cache_num_neighbors.size()", 52, (uint64_t)"Invalid cache_num_neighbors size.", 33, (void (*)(void **))sub_22457406C))
  {
LABEL_149:
    abort();
  }
  memset(v271, 0, sizeof(v271));
  v255 = v78;
  if (v78 == v79)
  {
    v82 = 0;
    v282 = 0;
    v283 = 0;
    v284 = 0;
    if (!a3)
      goto LABEL_79;
    goto LABEL_78;
  }
  if (v80 > 0x1F07C1F07C1F07CLL)
    sub_22316E078();
  v82 = (char *)operator new(132 * v80);
  v271[0] = v82;
  v271[2] = &v82[132 * v80];
  bzero(v82, 132 * ((132 * v80 - 132) / 0x84) + 132);
  v271[1] = &v82[132 * v80];
  v282 = 0;
  v283 = 0;
  v284 = 0;
  if (a3)
  {
LABEL_78:
    v83 = (char *)operator new(v58);
    v282 = v83;
    v284 = &v83[4 * a3];
    bzero(v83, v58);
    v283 = &v83[v58];
  }
LABEL_79:
  v232 = v80;
  __p = 0;
  v280 = 0;
  v84 = (std::__shared_weak_count *)operator new(0x58uLL);
  v84->__shared_owners_ = 0;
  v84->__shared_weak_owners_ = 0;
  v84->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63C48;
  v84[1].__vftable = v265;
  v93 = v266;
  v84[1].__shared_weak_owners_ = 0;
  LODWORD(v84[1].__shared_owners_) = v93;
  v84[2].__vftable = 0;
  v84[2].__shared_owners_ = 0;
  v94 = (char *)v267;
  v95 = v268;
  v96 = v268 - (_BYTE *)v267;
  if (v268 != v267)
  {
    if (v96 < 0)
      sub_22316E078();
    v97 = (std::__shared_weak_count_vtbl *)operator new(v268 - (_BYTE *)v267);
    v98 = 0;
    v84[1].__shared_weak_owners_ = (uint64_t)v97;
    v84[2].__vftable = v97;
    v84[2].__shared_owners_ = (uint64_t)v97 + 16 * (v96 >> 4);
    do
    {
      v99 = &v94[v98];
      v100 = (char *)v97 + v98;
      v101 = *(_QWORD *)&v94[v98];
      *((_DWORD *)v100 + 2) = *(_DWORD *)&v94[v98 + 8];
      *(_QWORD *)v100 = v101;
      *((_DWORD *)v100 + 3) = *(_DWORD *)&v94[v98 + 12];
      v98 += 16;
    }
    while (v99 + 16 != v95);
    v84[2].__vftable = (std::__shared_weak_count_vtbl *)((char *)v97 + v98);
  }
  v231 = v82;
  v84[2].__shared_weak_owners_ = 0;
  v84[3].__vftable = 0;
  v84[3].__shared_owners_ = 0;
  v102 = v269;
  v103 = v270 - (_BYTE *)v269;
  if (v270 != v269)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v103 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v104 = (std::__shared_weak_count_vtbl *)operator new(v270 - (_BYTE *)v269);
    v84[2].__shared_weak_owners_ = (uint64_t)v104;
    v84[3].__vftable = v104;
    v105 = (std::__shared_weak_count_vtbl *)((char *)v104 + 8 * (v103 >> 3));
    v84[3].__shared_owners_ = (uint64_t)v105;
    memcpy(v104, v102, v103);
    v84[3].__vftable = v105;
  }
  __p = &v84[1];
  v280 = v84;
  v106 = v229;
  if (v255 == v79)
    goto LABEL_103;
  v107 = 0;
  v108 = v232;
  do
  {
    v116 = (float32x2_t *)&v261[12 * v107];
    v117 = *a2 + 12 * v107;
    v85.n128_f32[0] = a5;
    v86.i32[0] = v116->i32[1];
    v118 = sub_223983D78((uint64_t)__p, v117, a3, (unint64_t *)&v282, v85, v86, v87);
    if (v118 < 2)
    {
      v122 = 0;
    }
    else
    {
      v122 = 0;
      v123 = (float32x4_t *)&v231[132 * v107];
      v239 = (char *)v275 + 24 * v107;
      v238 = (_QWORD *)(v294.i64[0] + 24 * v107);
      v236 = *a2;
      v124 = v261;
      v125 = v118 - 1;
      v126 = (unsigned int *)((char *)v282 + 4);
      do
      {
        v127 = *v126++;
        v128 = 12 * v127;
        v129 = (float32x2_t *)&v124[v128];
        v130 = v236 + v128;
        v131 = 4 * v122;
        *(_DWORD *)(*v238 + v131) = v127;
        v85.n128_u64[0] = *(_QWORD *)v130;
        v85.n128_u32[2] = *(_DWORD *)(v130 + 8);
        v86.i64[0] = *(_QWORD *)v117;
        v86.i32[2] = *(_DWORD *)(v117 + 8);
        v132 = v122 + 1;
        v87.i32[0] = v116[1].i32[0];
        *(float32x2_t *)v119.f32 = *v116;
        v133 = v119;
        v133.i32[2] = v87.i32[0];
        v134 = vsubq_f32((float32x4_t)v85, v86);
        v135 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v134.f32, 1);
        v136 = (float32x2_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
        *(float32x2_t *)v86.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*v116, *(float32x2_t *)v134.f32), v135, *v116, 1), v136, *(float32x2_t *)v87.f32);
        v87.i32[0] = v129[1].i32[0];
        *(float32x2_t *)v120.f32 = *v129;
        v137 = v120;
        v137.i32[2] = v87.i32[0];
        v120.i32[0] = 0;
        *(float32x2_t *)v121.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*v129, *(float32x2_t *)v134.f32), v135, *v129, 1), v136, *(float32x2_t *)v87.f32);
        v138 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v86, v120)), 0), (int8x16_t)vnegq_f32(v133), (int8x16_t)v133);
        v139 = vnegq_f32(v137);
        v140 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v121, v120)), 0), (int8x16_t)v139, (int8x16_t)v137);
        v139.f32[0] = fabsf(v121.f32[0]);
        v86.f32[0] = fabsf(v86.f32[0]);
        v141 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v86, v139), 0);
        v142 = vbslq_s8(v141, v138, v140);
        v143 = (int32x4_t)vbslq_s8(v141, v140, v138);
        v144 = (float32x4_t)vbslq_s8(v141, (int8x16_t)vnegq_f32(v134), (int8x16_t)v134);
        v145 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v143, v143), (int8x16_t)v143, 0xCuLL);
        v146 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v143, (int8x16_t)v143, 0xCuLL), (int8x16_t)v143, 8uLL);
        v147 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v144, (int8x16_t)v144, 0xCuLL), (int8x16_t)v144, 8uLL), v145), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v144, (int32x4_t)v144), (int8x16_t)v144, 0xCuLL), v146);
        *(int32x2_t *)v141.i8 = vdup_lane_s32(*(int32x2_t *)v147.f32, 1);
        v256 = *(float32x2_t *)v147.f32;
        v259 = (float32x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u64[0];
        *(float *)v141.i32 = 1.0
                           / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32), *(float32x2_t *)v141.i8, *(float32x2_t *)v147.f32, 1), v259, v259).f32[0]);
        v250 = (int32x4_t)vmulq_n_f32(v147, *(float *)v141.i32);
        v252 = *(float32x2_t *)v141.i8;
        v148 = (int8x16_t)vmlsq_f32(vmulq_f32(v146, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v250, v250), (int8x16_t)v250, 0xCuLL)), v145, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v250, (int8x16_t)v250, 0xCuLL), (int8x16_t)v250, 8uLL));
        v140.i64[0] = vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL).u64[0];
        v145.f32[0] = 1.0
                    / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v144.f32, 1), *(float32x2_t *)v144.f32, 1), *(float32x2_t *)v140.i8, *(float32x2_t *)v140.i8).f32[0]);
        *(_DWORD *)(*v239 + v131) = v145.i32[0];
        *(int32x2_t *)v140.i8 = vdup_lane_s32(*(int32x2_t *)v142.i8, 1);
        v240 = *(float32x2_t *)v142.i8;
        v242 = vextq_s8(v142, v142, 8uLL);
        v244 = *(float32x2_t *)v143.i8;
        v246 = (float32x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
        v248 = (int8x16_t)vmulq_n_f32(v144, v145.f32[0]);
        v85.n128_f32[0] = atan2f(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v142.i8), *(float32x2_t *)v140.i8, *(float32x2_t *)v148.i8, 1), *(float32x2_t *)v242.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL)).f32[0], vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v143.i8, *(float32x2_t *)v142.i8), *(float32x2_t *)v140.i8, *(float32x2_t *)v143.i8, 1), *(float32x2_t *)v242.i8, v246).f32[0]);
        v119.i64[1] = v250.i64[1];
        v86.i64[1] = v242.i64[1];
        v119.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v250.i8, v240), vmul_lane_f32(v252, v256, 1), v240, 1), *(float32x2_t *)v242.i8, vmul_f32(v259, v252)).u32[0];
        v87.i64[0] = vextq_s8(v248, v248, 8uLL).u64[0];
        *(float32x2_t *)v86.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v244, *(float32x2_t *)v248.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v248.i8, 1), v244, 1), *(float32x2_t *)v87.f32, v246);
        v149 = a1[3];
        v150 = vcvtms_u32_f32((float)(v85.n128_f32[0] - *a1) * a1[2]);
        if (v150 >= 0xA)
          v150 = 10;
        v123->f32[v150] = v123->f32[v150] + 1.0;
        v151 = v119.f32[0] - v149;
        v152 = a1[6];
        v153 = vcvtms_u32_f32(a1[5] * v151);
        if (v153 >= 0xA)
          v153 = 10;
        v123[2].f32[v153 + 3] = v123[2].f32[v153 + 3] + 1.0;
        v154 = vcvtms_u32_f32(a1[8] * (float)(v86.f32[0] - v152));
        if (v154 >= 0xA)
          v154 = 10;
        v123[5].f32[v154 + 2] = v123[5].f32[v154 + 2] + 1.0;
        v122 = v132;
        --v125;
      }
      while (v125);
      v86.i32[0] = v123[8].i32[0];
      v109 = v123[2];
      v110 = v123[3];
      v111 = v123[4];
      v112 = v123[5];
      v113 = v123[6];
      v114 = v123[7];
      v85.n128_f32[0] = (float)a3 / (float)v132;
      v115 = vmulq_n_f32(v123[1], v85.n128_f32[0]);
      *v123 = vmulq_n_f32(*v123, v85.n128_f32[0]);
      v123[1] = v115;
      v86 = vmulq_f32((float32x4_t)v85, v86);
      v87 = vmulq_n_f32(v114, v85.n128_f32[0]);
      v123[2] = vmulq_n_f32(v109, v85.n128_f32[0]);
      v123[3] = vmulq_n_f32(v110, v85.n128_f32[0]);
      v123[4] = vmulq_n_f32(v111, v85.n128_f32[0]);
      v123[5] = vmulq_n_f32(v112, v85.n128_f32[0]);
      v85 = (__n128)vmulq_n_f32(v113, v85.n128_f32[0]);
      v123[6] = (float32x4_t)v85;
      v123[7] = v87;
      v123[8].i32[0] = v86.i32[0];
      v108 = v232;
    }
    v233[v107++] = v122;
  }
  while (v107 != v108);
  v84 = v280;
  v106 = v229;
  if (v280)
  {
LABEL_103:
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v156 = __ldaxr(p_shared_owners);
    while (__stlxr(v156 - 1, p_shared_owners));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v282)
  {
    v283 = (char *)v282;
    operator delete(v282);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v158 = (char *)v271[0];
  v157 = (char *)v271[1];
  v159 = v271[1] - v271[0];
  v160 = 0xF83E0F83E0F83E1 * ((uint64_t)(v271[1] - v271[0]) >> 2);
  if (v271[1] == v271[0])
  {
    v161 = 0;
    v163 = v233;
    if (v106 != v160)
      goto LABEL_114;
  }
  else
  {
    if (v160 > 0x1F07C1F07C1F07CLL)
      sub_22316E078();
    v161 = (char *)operator new(v271[1] - v271[0]);
    *a4 = v161;
    a4[2] = &v161[132 * v160];
    v162 = 132 * ((v159 - 132) / 0x84uLL) + 132;
    memcpy(v161, v158, v162);
    a4[1] = &v161[v162];
    v163 = v233;
    if (v106 == v160)
      goto LABEL_115;
LABEL_114:
    v106 = v160;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FPFHDescriptor.cpp", 183, (uint64_t)"num_descriptors == spfhs.size()", 31, (uint64_t)"pointcloud and spfhs size mismatch.", 35, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
LABEL_115:
  if (v157 != v158)
  {
    v164 = 0;
    v165 = v294.i64[0];
    v166 = v275;
    v237 = (float)a3;
    do
    {
      v210 = v163[v164];
      if ((_DWORD)v210)
      {
        v167.i32[0] = 0;
        v241 = 0.0;
        v249 = 0.0;
        v253 = 0.0;
        v168.i32[0] = 0;
        v211 = (float *)v166[3 * v164];
        v243 = 0.0;
        v85.n128_u32[0] = 0;
        v245 = v85;
        v212 = *(int **)(v165 + 24 * v164);
        v251 = 0.0;
        v87.i32[0] = 0;
        v247 = 0.0;
        v260 = 0.0;
        v91.i32[0] = 0;
        v169.i32[0] = 0;
        v85.n128_u32[0] = 0;
        v257 = v85;
        v170 = 0.0;
        v90.n128_u32[0] = 0;
        v171.i32[0] = 0;
        v172 = 0.0;
        v173 = 0.0;
        v174 = 0.0;
        v175.i32[0] = 0;
        v176 = 0.0;
        v177 = 0.0;
        v178 = 0.0;
        v179.i32[0] = 0;
        v180 = 0.0;
        v181 = 0.0;
        v182 = 0.0;
        v183.i32[0] = 0;
        v184 = 0.0;
        v185 = 0.0;
        v186 = 0.0;
        v92.i32[0] = 0;
        do
        {
          v213 = *v212++;
          v214 = (float32x4_t *)&v158[132 * v213];
          v215 = *v211++;
          v89.f32[0] = v215;
          v88.i32[0] = v214[8].i32[0];
          v88 = vmulq_f32(v88, v89);
          v216 = v90;
          v167.f32[1] = v241;
          v167.i64[1] = __PAIR64__(LODWORD(v253), LODWORD(v249));
          v168.f32[1] = v243;
          v90 = v245;
          v168.i64[1] = __PAIR64__(LODWORD(v251), v245.n128_u32[0]);
          v167 = vaddq_f32(v167, vmulq_n_f32(*v214, v215));
          v168 = vaddq_f32(v168, vmulq_n_f32(v214[1], v215));
          v87.f32[1] = v247;
          v87.i64[1] = __PAIR64__(v91.u32[0], LODWORD(v260));
          v253 = v167.f32[3];
          v249 = v167.f32[2];
          v89 = (float32x4_t)v257;
          v169.i32[1] = v257.n128_u32[0];
          v241 = v167.f32[1];
          v169.i64[1] = __PAIR64__(v216.n128_u32[0], LODWORD(v170));
          v251 = v168.f32[3];
          v87 = vaddq_f32(v87, vmulq_n_f32(v214[2], v215));
          v89.i32[0] = v168.i32[2];
          v243 = v168.f32[1];
          v245 = (__n128)v89;
          v169 = vaddq_f32(v169, vmulq_n_f32(v214[3], v215));
          v91.i32[0] = v87.i32[3];
          v171.f32[1] = v172;
          v260 = v87.f32[2];
          v171.i64[1] = __PAIR64__(LODWORD(v174), LODWORD(v173));
          v247 = v87.f32[1];
          v90.n128_u32[0] = v169.u32[3];
          v171 = vaddq_f32(v171, vmulq_n_f32(v214[4], v215));
          v170 = v169.f32[2];
          v175.f32[1] = v176;
          v216.n128_u32[0] = v169.u32[1];
          v257 = v216;
          v175.i64[1] = __PAIR64__(LODWORD(v178), LODWORD(v177));
          v174 = v171.f32[3];
          v173 = v171.f32[2];
          v179.f32[1] = v180;
          v172 = v171.f32[1];
          v175 = vaddq_f32(v175, vmulq_n_f32(v214[5], v215));
          v178 = v175.f32[3];
          v179.i64[1] = __PAIR64__(LODWORD(v182), LODWORD(v181));
          v177 = v175.f32[2];
          v176 = v175.f32[1];
          v179 = vaddq_f32(v179, vmulq_n_f32(v214[6], v215));
          v182 = v179.f32[3];
          v183.f32[1] = v184;
          v181 = v179.f32[2];
          v183.i64[1] = __PAIR64__(LODWORD(v186), LODWORD(v185));
          v180 = v179.f32[1];
          v183 = vaddq_f32(v183, vmulq_n_f32(v214[7], v215));
          v186 = v183.f32[3];
          v185 = v183.f32[2];
          v92 = vaddq_f32(v92, v88);
          v184 = v183.f32[1];
          --v210;
        }
        while (v210);
      }
      else
      {
        v167.i32[0] = 0;
        v241 = 0.0;
        v249 = 0.0;
        v253 = 0.0;
        v168.i32[0] = 0;
        v243 = 0.0;
        v245.n128_u32[0] = 0;
        v251 = 0.0;
        v87.i32[0] = 0;
        v247 = 0.0;
        v260 = 0.0;
        v91.i32[0] = 0;
        v169.i32[0] = 0;
        v257.n128_u32[0] = 0;
        v170 = 0.0;
        v90.n128_u32[0] = 0;
        v171.i32[0] = 0;
        v172 = 0.0;
        v173 = 0.0;
        v174 = 0.0;
        v175.i32[0] = 0;
        v176 = 0.0;
        v177 = 0.0;
        v178 = 0.0;
        v179.i32[0] = 0;
        v180 = 0.0;
        v181 = 0.0;
        v182 = 0.0;
        v183.i32[0] = 0;
        v184 = 0.0;
        v185 = 0.0;
        v186 = 0.0;
        v92.i32[0] = 0;
      }
      v187.i64[0] = __PAIR64__(LODWORD(v241), v167.u32[0]);
      v187.i64[1] = __PAIR64__(LODWORD(v253), LODWORD(v249));
      v168.f32[1] = v243;
      v168.i64[1] = __PAIR64__(LODWORD(v251), v245.n128_u32[0]);
      v87.f32[1] = v247;
      v87.f32[2] = v260;
      v188 = v237
           / (float)(v260
                   + (float)(v247
                           + (float)(v87.f32[0]
                                   + (float)(v251
                                           + (float)(v245.n128_f32[0]
                                                   + (float)(v243
                                                           + (float)(v168.f32[0]
                                                                   + (float)(v253
                                                                           + (float)(v249 + (float)(v167.f32[0] + v241))))))))));
      v189 = vmulq_n_f32(v187, v188);
      v190 = vmulq_n_f32(v168, v188);
      v191 = vmulq_n_f32(v87, v188);
      v192.i64[0] = __PAIR64__(v257.n128_u32[0], v169.u32[0]);
      v192.i64[1] = __PAIR64__(v90.n128_u32[0], LODWORD(v170));
      v171.f32[1] = v172;
      v171.i64[1] = __PAIR64__(LODWORD(v174), LODWORD(v173));
      v175.f32[1] = v176;
      v175.i64[1] = __PAIR64__(LODWORD(v178), LODWORD(v177));
      v193 = v237
           / (float)(v176
                   + (float)(v175.f32[0]
                           + (float)(v174
                                   + (float)(v173
                                           + (float)(v172
                                                   + (float)(v171.f32[0]
                                                           + (float)(v90.n128_f32[0]
                                                                   + (float)(v170
                                                                           + (float)(v257.n128_f32[0]
                                                                                   + (float)(*(float *)v91.i32
                                                                                           + v169.f32[0]))))))))));
      v194 = (float32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(v91, 0), v192, 0xCuLL);
      v195 = (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v192, (int8x16_t)v171, 0xCuLL), v193);
      v196 = (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v171, (int8x16_t)v175, 0xCuLL), v193);
      v197 = (int8x16_t)vmulq_n_f32(v194, v193);
      v179.f32[1] = v180;
      v179.i64[1] = __PAIR64__(LODWORD(v182), LODWORD(v181));
      v183.f32[1] = v184;
      v183.i64[1] = __PAIR64__(LODWORD(v186), LODWORD(v185));
      v88 = (float32x4_t)vextq_s8((int8x16_t)v175, (int8x16_t)v179, 8uLL);
      v191.i32[3] = v197.i32[0];
      v198 = (float32x4_t)vextq_s8(v197, v195, 4uLL);
      v199 = (float32x4_t)vextq_s8(v195, v196, 4uLL);
      v194.f32[0] = v237
                  / (float)(v92.f32[0]
                          + (float)(v186
                                  + (float)(v185
                                          + (float)(v184
                                                  + (float)(v183.f32[0]
                                                          + (float)(v182
                                                                  + (float)(v181
                                                                          + (float)(v180
                                                                                  + (float)(v179.f32[0]
                                                                                          + (float)(v177 + v178))))))))));
      v200 = (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v179, (int8x16_t)v183, 8uLL), v194.f32[0]);
      v201 = (int8x16_t)vmulq_n_f32(v88, v194.f32[0]);
      v202 = (int32x4_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v183, (int8x16_t)v92, 8uLL), v194.f32[0]);
      v203 = (float32x4_t *)&v161[132 * v164];
      v204 = vaddq_f32(v203[6], (float32x4_t)vextq_s8(v201, v200, 8uLL));
      v205 = vaddq_f32(v203[5], (float32x4_t)vextq_s8(vextq_s8(v196, v196, 0xCuLL), v201, 8uLL));
      v206 = vaddq_f32(v203[4], v199);
      v207 = vaddq_f32(v203[7], (float32x4_t)vextq_s8(v200, (int8x16_t)v202, 8uLL));
      v208 = vaddq_f32(v203[3], v198);
      v87 = vaddq_f32(v203[2], v191);
      v209 = vaddq_f32(v203[1], v190);
      *v203 = vaddq_f32(*v203, v189);
      v203[1] = v209;
      v203[2] = v87;
      v203[3] = v208;
      v209.i32[0] = v203[8].i32[0];
      v85 = (__n128)vaddq_f32(v209, (float32x4_t)vdupq_laneq_s32(v202, 2));
      v203[4] = v206;
      v203[5] = v205;
      v203[6] = v204;
      v203[7] = v207;
      v203[8].i32[0] = v85.n128_u32[0];
      ++v164;
    }
    while (v164 != v106);
  }
  if (v158)
    operator delete(v158);
  operator delete(v163);
  v217 = (char *)v275;
  if (v275)
  {
    v218 = v276;
    v219 = v275;
    if (v276 != v275)
    {
      v220 = v276;
      do
      {
        v222 = (void *)*((_QWORD *)v220 - 3);
        v220 -= 24;
        v221 = v222;
        if (v222)
        {
          *((_QWORD *)v218 - 2) = v221;
          operator delete(v221);
        }
        v218 = v220;
      }
      while (v220 != v217);
      v219 = v275;
    }
    v276 = v217;
    operator delete(v219);
  }
  v223 = v294.i64[0];
  if (v294.i64[0])
  {
    v224 = v294.i64[1];
    v225 = (void *)v294.i64[0];
    if (v294.i64[1] != v294.i64[0])
    {
      v226 = v294.i64[1];
      do
      {
        v228 = *(void **)(v226 - 24);
        v226 -= 24;
        v227 = v228;
        if (v228)
        {
          *(_QWORD *)(v224 - 16) = v227;
          operator delete(v227);
        }
        v224 = v226;
      }
      while (v226 != v223);
      v225 = (void *)v294.i64[0];
    }
    v294.i64[1] = v223;
    operator delete(v225);
  }
LABEL_141:
  if (v261)
  {
    v262 = v261;
    v282 = v261;
    LODWORD(v283) = -1431655765 * ((v263 - (unint64_t)v261) >> 2);
    if (HIDWORD(v264) == -1)
      sub_22316DD70();
    v294.i64[0] = (uint64_t)&v282;
    ((void (*)(float32x4_t *, uint64_t *))off_24EC63C28[HIDWORD(v264)])(&v294, &v264);
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (v267)
  {
    v268 = (char *)v267;
    operator delete(v267);
  }
}

void sub_223E9C518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;

  if (__p)
    operator delete(__p);
  operator delete(a15);
  sub_22317C838(&a60);
  sub_22317C838((void **)(v60 - 192));
  sub_22317EEA4(&a42);
  sub_223E9C720(&a46);
  _Unwind_Resume(a1);
}

void sub_223E9C6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  sub_22317EEA4(&a60);
  if (a64)
    JUMPOUT(0x223E9C6FCLL);
  JUMPOUT(0x223E9C708);
}

_QWORD *sub_223E9C720(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void ***sub_223E9C760(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = (char *)v2[1];
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_223E9C7F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223E9C808(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223E9C838(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

uint64_t sub_223E9C880(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;

  *(_QWORD *)a1 = 0xA0000000ALL;
  *(_DWORD *)(a1 + 8) = 0;
  v5 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = v4 - v5;
  if (v7)
  {
    v8 = v7 / 12;
    if ((unint64_t)(v7 / 12) >> 60)
      sub_22316E078();
    v9 = (char *)operator new(16 * v8);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v9;
    v10 = &v9[16 * v8];
    *(_QWORD *)(a1 + 32) = v10;
    v11 = v9;
    if (((v8 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_36;
    v12 = ((v8 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v11 = &v9[16 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
    v13 = v9 + 28;
    v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v13 - 4) = 0;
      *v13 = 0;
      v13 += 8;
      v14 -= 2;
    }
    while (v14);
    if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_36:
      do
      {
        *((_DWORD *)v11 + 3) = 0;
        v11 += 16;
      }
      while (v11 != v10);
    }
    *(_QWORD *)(a1 + 24) = v10;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v15 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  v16 = -1431655765 * ((a2[1] - *a2) >> 2);
  if (v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (uint64_t *)(*a2 + v17);
      v21 = *v6 + v18;
      v22 = *v20;
      LODWORD(v20) = *((_DWORD *)v20 + 2);
      *(_QWORD *)v21 = v22;
      *(_DWORD *)(v21 + 8) = (_DWORD)v20;
      *(_DWORD *)(v21 + 12) = v19++;
      v18 += 16;
      v17 += 12;
    }
    while (v16 != v19);
    v24 = *(_DWORD **)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v24 >= v23)
    {
      v26 = (_DWORD *)*v15;
      v27 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *v15) >> 3);
      v28 = v27 + 1;
      if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v26) >> 3);
      if (2 * v29 > v28)
        v28 = 2 * v29;
      if (v29 >= 0x555555555555555)
        v30 = 0xAAAAAAAAAAAAAAALL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v31 = (char *)operator new(24 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[24 * v27];
      *(_DWORD *)v32 = 2139095039;
      v32[4] = -1;
      *(_DWORD *)(v32 + 5) = 0;
      *((_DWORD *)v32 + 2) = 0;
      *(_QWORD *)(v32 + 12) = -1;
      *((_DWORD *)v32 + 5) = -1;
      v25 = v32 + 24;
      if (v24 != v26)
      {
        do
        {
          v33 = *(_OWORD *)(v24 - 6);
          *((_QWORD *)v32 - 1) = *((_QWORD *)v24 - 1);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          v24 -= 6;
        }
        while (v24 != v26);
        v24 = (_DWORD *)*v15;
      }
      *(_QWORD *)(a1 + 40) = v32;
      *(_QWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 56) = &v31[24 * v30];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v24 = 2139095039;
      *((_BYTE *)v24 + 4) = -1;
      *(_DWORD *)((char *)v24 + 5) = 0;
      v24[2] = 0;
      *(_QWORD *)(v24 + 3) = -1;
      v24[5] = -1;
      v25 = v24 + 6;
    }
    *(_QWORD *)(a1 + 48) = v25;
    sub_223984CE0(a1, v16, 0, 0, 0);
  }
  return a1;
}

void sub_223E9CB38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_223E9CB70(unint64_t **a1, uint64_t a2, uint64_t a3, float32x4_t **a4)
{
  unint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  float32x4_t v10;
  unsigned int v11;
  unint64_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t *v42;
  char *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  float32x4_t *v51;
  uint64_t v52;
  float32x4_t v53;
  unint64_t **v54;
  float32x2_t v55;

  v4 = a1;
  if (a2 != a3 && *a4 != a4[1])
  {
    v6 = a3;
    v7 = a2;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    if ((unint64_t)(0xF83E0F83E0F83E1 * ((a3 - a2) >> 2)) >> 61)
      sub_22316E078();
    v8 = 0xF83E0F83E0F83E1 * ((a3 - a2) >> 2);
    v9 = (unint64_t *)operator new(v8 * 8);
    v11 = 0;
    *v4 = v9;
    v4[1] = v9;
    v4[2] = &v9[v8];
    v54 = v4;
    while (1)
    {
      v13 = *a4;
      v14 = a4[1];
      if (*a4 == v14)
      {
        v17 = v11;
        v33 = (unint64_t)v4[2];
        if ((unint64_t)v9 >= v33)
          goto LABEL_15;
      }
      else
      {
        v15 = 0;
        v10.i32[0] = *(_DWORD *)(v7 + 128);
        v55 = *(float32x2_t *)v10.f32;
        v16 = 3.4028e38;
        v17 = v11;
        do
        {
          v18.i32[0] = *(_OWORD *)(v7 + 96);
          v19.i32[0] = *(_OWORD *)(v7 + 48);
          v18.i32[1] = HIDWORD(*(_QWORD *)(v7 + 96));
          v19.i32[1] = HIDWORD(*(_QWORD *)(v7 + 48));
          v20.i32[0] = *(_OWORD *)(v7 + 16);
          v21.i32[0] = *(_OWORD *)v7;
          v20.i32[1] = HIDWORD(*(_QWORD *)(v7 + 16));
          v21.i32[1] = HIDWORD(*(_QWORD *)v7);
          v21.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)v7), *(_QWORD *)(v7 + 8));
          v19.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)(v7 + 48)), *(_QWORD *)(v7 + 56));
          v20.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)(v7 + 16)), *(_QWORD *)(v7 + 24));
          v22 = vsubq_f32(v21, *v13);
          v23 = vsubq_f32(v20, v13[1]);
          v24 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
          *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 1), *(float32x2_t *)v22.f32, 1), v24, v24), (float32x2_t)vdup_laneq_s32((int32x4_t)v22, 3), v22, 3);
          v25 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
          *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 1), *(float32x2_t *)v23.f32, 1), v25, v25), (float32x2_t)vdup_laneq_s32((int32x4_t)v23, 3), v23, 3);
          v23.i32[0] = *(_OWORD *)(v7 + 32);
          v23.i32[1] = HIDWORD(*(_QWORD *)(v7 + 32));
          v23.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)(v7 + 32)), *(_QWORD *)(v7 + 40));
          v26 = vsubq_f32(v23, v13[2]);
          v27 = vsubq_f32(v19, v13[3]);
          v28 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
          *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.f32, 1), *(float32x2_t *)v26.f32, 1), v28, v28), (float32x2_t)vdup_laneq_s32((int32x4_t)v26, 3), v26, 3);
          v26.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
          *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1), *(float32x2_t *)v27.f32, 1), *(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32), (float32x2_t)vdup_laneq_s32((int32x4_t)v27, 3), v27, 3);
          v27.i64[0] = *(_QWORD *)(v7 + 80);
          v18.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)(v7 + 96)), *(_QWORD *)(v7 + 104));
          v29 = vsubq_f32(*(float32x4_t *)(v7 + 64), v13[4]);
          v27.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)(v7 + 80)), *(_QWORD *)(v7 + 88));
          v30 = vsubq_f32(v27, v13[5]);
          v26.i64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
          *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1), *(float32x2_t *)v29.f32, 1), *(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32), (float32x2_t)vdup_laneq_s32((int32x4_t)v29, 3), v29, 3);
          v26.i32[0] = *(_OWORD *)(v7 + 112);
          v29.i64[0] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
          v26.i32[1] = HIDWORD(*(_QWORD *)(v7 + 112));
          v31 = vsubq_f32(v18, v13[6]);
          *(float32x2_t *)v20.f32 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.f32, 1), *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (float32x2_t)vdup_laneq_s32((int32x4_t)v30, 3), v30, 3), *(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1),
                                      *(float32x2_t *)v31.f32,
                                      1);
          v30.i64[0] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), (float32x2_t)vdup_laneq_s32((int32x4_t)v31, 3), v31, 3);
          v26.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)(v7 + 112)), *(_QWORD *)(v7 + 120));
          v10 = vsubq_f32(v26, v13[7]);
          v30.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
          *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 1), *(float32x2_t *)v10.f32, 1), *(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), (float32x2_t)vdup_laneq_s32((int32x4_t)v10, 3), v10, 3);
          v10.i32[0] = v13[8].i32[0];
          *(float32x2_t *)v10.f32 = vsub_f32(v55, *(float32x2_t *)v10.f32);
          v32 = vmla_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32).f32[0];
          if (v32 < v16)
          {
            v16 = v32;
            v17 = v15;
          }
          v13 = (float32x4_t *)((char *)v13 + 132);
          ++v15;
        }
        while (v13 != v14);
        v33 = (unint64_t)v4[2];
        if ((unint64_t)v9 >= v33)
        {
LABEL_15:
          v34 = *v4;
          v35 = (char *)v9 - (char *)*v4;
          v36 = v35 >> 3;
          v37 = (v35 >> 3) + 1;
          if (v37 >> 61)
            sub_22316E078();
          v38 = v6;
          v39 = v33 - (_QWORD)v34;
          if (v39 >> 2 > v37)
            v37 = v39 >> 2;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v37;
          if (v40)
          {
            if (v40 >> 61)
              sub_223174E94();
            v41 = operator new(8 * v40);
          }
          else
          {
            v41 = 0;
          }
          v42 = (unint64_t *)&v41[8 * v36];
          v43 = &v41[8 * v40];
          *v42 = v11 | ((unint64_t)v17 << 32);
          v12 = v42 + 1;
          if (v9 == v34)
          {
            v4 = v54;
            *v54 = v42;
            v54[1] = v12;
            v54[2] = (unint64_t *)v43;
            v6 = v38;
          }
          else
          {
            v44 = (char *)v9 - (char *)v34 - 8;
            if (v44 < 0x168
              || (v47 = ((char *)(v9 - 1) - (char *)v34) & 0xFFFFFFFFFFFFFFF8, &v41[v35 - 8 - v47] > &v41[v35 - 8])
              || (unint64_t *)((char *)v9 - v47 - 8) > v9 - 1
              || (unint64_t)((char *)v9 - v41 - v35) < 0x20)
            {
              v45 = v9;
              v6 = v38;
              v4 = v54;
            }
            else
            {
              v48 = (v44 >> 3) + 1;
              v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v9[v49 / 0xFFFFFFFFFFFFFFF8];
              v42 = (unint64_t *)((char *)v42 - v49);
              v50 = (float32x4_t *)&v41[8 * v36 - 16];
              v51 = (float32x4_t *)(v9 - 2);
              v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v10 = v51[-1];
                v53 = *v51;
                v50[-1] = v10;
                *v50 = v53;
                v50 -= 2;
                v51 -= 2;
                v52 -= 4;
              }
              while (v52);
              v6 = v38;
              v4 = v54;
              if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_29;
            }
            do
            {
              v46 = *--v45;
              *--v42 = v46;
            }
            while (v45 != v34);
LABEL_29:
            v9 = *v4;
            *v4 = v42;
            v4[1] = v12;
            v4[2] = (unint64_t *)v43;
            if (!v9)
              goto LABEL_6;
          }
          operator delete(v9);
          goto LABEL_6;
        }
      }
      *v9 = v11 | ((unint64_t)v17 << 32);
      v12 = v9 + 1;
LABEL_6:
      v4[1] = v12;
      v7 += 132;
      ++v11;
      v9 = v12;
      if (v7 == v6)
        return;
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_223E9D098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
  {
    *(_QWORD *)(a10 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_223E9D0BC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _DWORD *v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;

  v5 = a1[1] - *a1;
  if (v5)
  {
    v7 = a3 + 1;
    v6 = a3[1];
    if (v6)
    {
      v8 = 0;
      v9 = 0xF83E0F83E0F83E1 * (v5 >> 2);
      v77 = v9;
      v78 = a2;
LABEL_4:
      v10 = *(unsigned __int8 *)(*a2 + v8);
      v11 = v7;
      do
      {
        v12 = *(unsigned __int8 *)(v6 + 25);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v6;
        else
          v14 = (uint64_t *)(v6 + 8);
        if (v13)
          v11 = (_QWORD *)v6;
        v6 = *v14;
      }
      while (*v14);
      if (v11 != v7 && v10 >= *((unsigned __int8 *)v11 + 25))
      {
        v15 = (_QWORD *)*a3;
        if ((_QWORD *)*a3 == v11)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          do
          {
            v17 = (_QWORD *)v15[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v15[2];
                v19 = *v18 == (_QWORD)v15;
                v15 = v18;
              }
              while (!v19);
            }
            ++v16;
            v15 = v18;
          }
          while (v18 != v11);
        }
        v20 = (char **)(*a4 + 24 * v16);
        v21 = *a1 + 132 * v8;
        v22 = v20 + 1;
        v23 = v20[1];
        v24 = (unint64_t)v20[2];
        if ((unint64_t)v23 >= v24)
        {
          v32 = *v20;
          v33 = 0xF83E0F83E0F83E1 * ((v23 - *v20) >> 2);
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) > 0x1F07C1F07C1F07CLL)
            sub_22316E078();
          v35 = 0xF83E0F83E0F83E1 * ((uint64_t)(v24 - (_QWORD)v32) >> 2);
          if (2 * v35 > v34)
            v34 = 2 * v35;
          if (v35 >= 0xF83E0F83E0F83ELL)
            v36 = 0x1F07C1F07C1F07CLL;
          else
            v36 = v34;
          v75 = v36;
          if (v36)
          {
            if (v36 > 0x1F07C1F07C1F07CLL)
              goto LABEL_70;
            v37 = (char *)operator new(132 * v36);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[132 * v33];
          *(_OWORD *)v38 = *(_OWORD *)v21;
          v39 = *(_OWORD *)(v21 + 16);
          v40 = *(_OWORD *)(v21 + 32);
          v41 = *(_OWORD *)(v21 + 64);
          *((_OWORD *)v38 + 3) = *(_OWORD *)(v21 + 48);
          *((_OWORD *)v38 + 4) = v41;
          *((_OWORD *)v38 + 1) = v39;
          *((_OWORD *)v38 + 2) = v40;
          v42 = *(_OWORD *)(v21 + 80);
          v43 = *(_OWORD *)(v21 + 96);
          v44 = *(_OWORD *)(v21 + 112);
          *((_DWORD *)v38 + 32) = *(_DWORD *)(v21 + 128);
          *((_OWORD *)v38 + 6) = v43;
          *((_OWORD *)v38 + 7) = v44;
          *((_OWORD *)v38 + 5) = v42;
          v45 = v38;
          if (v23 == v32)
          {
            v46 = v75;
          }
          else
          {
            v46 = v75;
            do
            {
              *(_OWORD *)(v45 - 132) = *(_OWORD *)(v23 - 132);
              v47 = *(_OWORD *)(v23 - 116);
              v48 = *(_OWORD *)(v23 - 100);
              v49 = *(_OWORD *)(v23 - 84);
              *(_OWORD *)(v45 - 68) = *(_OWORD *)(v23 - 68);
              *(_OWORD *)(v45 - 84) = v49;
              *(_OWORD *)(v45 - 100) = v48;
              *(_OWORD *)(v45 - 116) = v47;
              v50 = *(_OWORD *)(v23 - 52);
              v51 = *(_OWORD *)(v23 - 36);
              v52 = *(_OWORD *)(v23 - 20);
              *((_DWORD *)v45 - 1) = *((_DWORD *)v23 - 1);
              *(_OWORD *)(v45 - 20) = v52;
              *(_OWORD *)(v45 - 36) = v51;
              *(_OWORD *)(v45 - 52) = v50;
              v45 -= 132;
              v23 -= 132;
            }
            while (v23 != v32);
            v23 = *v20;
          }
          *v20 = v45;
          v31 = v38 + 132;
          *v22 = v38 + 132;
          v20[2] = &v37[132 * v46];
          if (v23)
            operator delete(v23);
          v9 = v77;
        }
        else
        {
          *(_OWORD *)v23 = *(_OWORD *)v21;
          v25 = *(_OWORD *)(v21 + 16);
          v26 = *(_OWORD *)(v21 + 32);
          v27 = *(_OWORD *)(v21 + 64);
          *((_OWORD *)v23 + 3) = *(_OWORD *)(v21 + 48);
          *((_OWORD *)v23 + 4) = v27;
          *((_OWORD *)v23 + 1) = v25;
          *((_OWORD *)v23 + 2) = v26;
          v28 = *(_OWORD *)(v21 + 80);
          v29 = *(_OWORD *)(v21 + 96);
          v30 = *(_OWORD *)(v21 + 112);
          *((_DWORD *)v23 + 32) = *(_DWORD *)(v21 + 128);
          *((_OWORD *)v23 + 6) = v29;
          *((_OWORD *)v23 + 7) = v30;
          *((_OWORD *)v23 + 5) = v28;
          v31 = v23 + 132;
        }
        *v22 = v31;
        v53 = *a5 + 24 * v16;
        v54 = (uint64_t *)(v53 + 8);
        v55 = *(char **)(v53 + 8);
        v56 = *(_QWORD *)(v53 + 16);
        if ((unint64_t)v55 < v56)
        {
          *(_DWORD *)v55 = v8;
          v57 = (uint64_t)(v55 + 4);
          a2 = v78;
LABEL_65:
          *v54 = v57;
          goto LABEL_66;
        }
        v58 = *(char **)v53;
        v59 = (uint64_t)&v55[-*(_QWORD *)v53];
        v60 = v59 >> 2;
        v61 = (v59 >> 2) + 1;
        if (v61 >> 62)
          sub_22316E078();
        v62 = v56 - (_QWORD)v58;
        if (v62 >> 1 > v61)
          v61 = v62 >> 1;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
          v61 = 0x3FFFFFFFFFFFFFFFLL;
        v76 = v61;
        if (!v61)
        {
          v63 = 0;
          v64 = (_DWORD *)(4 * v60);
          *(_DWORD *)(4 * v60) = v8;
          v57 = 4 * v60 + 4;
          v65 = v55 - v58;
          if (v55 == v58)
          {
LABEL_62:
            *(_QWORD *)v53 = v64;
            *v54 = v57;
            *(_QWORD *)(v53 + 16) = &v63[4 * v76];
            if (v58)
              operator delete(v58);
            v9 = v77;
            a2 = v78;
            goto LABEL_65;
          }
LABEL_56:
          v66 = v65 - 4;
          if (v66 < 0x2C)
            goto LABEL_75;
          if ((unint64_t)(v55 - &v63[v59]) < 0x20)
            goto LABEL_75;
          v67 = (v66 >> 2) + 1;
          v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
          v69 = &v55[-v68];
          v64 = (_DWORD *)((char *)v64 - v68);
          v70 = &v63[4 * v60 - 16];
          v71 = v55 - 16;
          v72 = v67 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v73 = *(_OWORD *)v71;
            *(v70 - 1) = *((_OWORD *)v71 - 1);
            *v70 = v73;
            v70 -= 2;
            v71 -= 32;
            v72 -= 8;
          }
          while (v72);
          v55 = v69;
          if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_75:
            do
            {
              v74 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *--v64 = v74;
            }
            while (v55 != v58);
          }
          goto LABEL_62;
        }
        if (!(v61 >> 62))
        {
          v63 = operator new(4 * v61);
          v64 = &v63[4 * v60];
          *v64 = v8;
          v57 = (uint64_t)(v64 + 1);
          v65 = v55 - v58;
          if (v55 == v58)
            goto LABEL_62;
          goto LABEL_56;
        }
LABEL_70:
        sub_223174E94();
      }
LABEL_66:
      while (++v8 != v9)
      {
        v6 = *v7;
        if (*v7)
          goto LABEL_4;
      }
    }
  }
}

void sub_223E9D53C(uint64_t *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  std::chrono::steady_clock::time_point v36;
  uint64_t v37;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  unint64_t v45;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  double v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v94;
  _QWORD v95[3];
  int v96;
  const char *v97;
  int v98;
  const char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE object[24];
  __int128 v109;
  void *__p[2];
  unint64_t v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (*a1 == a1[1] || *(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  sub_223E9CB70((unint64_t **)&v104, *a1, a1[1], (float32x4_t **)a2);
  v94 = rep;
  sub_223E9CB70((unint64_t **)&v103, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (float32x4_t **)a1);
  v7 = (uint64_t *)v104;
  v8 = v105;
  if (v104 != v105)
  {
    v9 = 0;
    do
    {
      v11 = *v7;
      if (*((_DWORD *)v103 + 2 * HIDWORD(*v7) + 1) != *v7)
        goto LABEL_7;
      v12 = (unint64_t)a3[2];
      if ((unint64_t)v9 < v12)
      {
        *(_QWORD *)v9 = v11;
        v10 = (uint64_t)(v9 + 8);
      }
      else
      {
        v13 = *a3;
        v14 = v9 - *a3;
        v15 = v14 >> 3;
        v16 = (v14 >> 3) + 1;
        if (v16 >> 61)
          sub_22316E078();
        v17 = v12 - (_QWORD)v13;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 61)
            sub_223174E94();
          v19 = operator new(8 * v18);
          v20 = &v19[8 * v15];
          *(_QWORD *)v20 = v11;
          v10 = (uint64_t)(v20 + 8);
          v21 = (char *)(v9 - v13);
          if (v9 != v13)
          {
LABEL_19:
            v22 = (unint64_t)(v21 - 8);
            if (v22 < 0x168)
            {
              v23 = v9;
              goto LABEL_21;
            }
            v25 = (v9 - 8 - v13) & 0xFFFFFFFFFFFFFFF8;
            if (&v19[v14 - 8 - v25] > &v19[v14 - 8])
            {
              v23 = v9;
              goto LABEL_21;
            }
            if (&v9[-v25 - 8] > v9 - 8)
            {
              v23 = v9;
              goto LABEL_21;
            }
            if ((unint64_t)(v9 - &v19[v14]) < 0x20)
            {
              v23 = v9;
              goto LABEL_21;
            }
            v26 = (v22 >> 3) + 1;
            v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
            v23 = &v9[-v27];
            v20 -= v27;
            v28 = &v19[8 * v15 - 16];
            v29 = v9 - 16;
            v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              *v28 = v31;
              v28 -= 2;
              v29 -= 32;
              v30 -= 4;
            }
            while (v30);
            if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_21:
                v24 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v20 - 1) = v24;
                v20 -= 8;
              }
              while (v23 != v13);
            }
            v9 = *a3;
            *a3 = v20;
            a3[1] = (char *)v10;
            a3[2] = &v19[8 * v18];
            if (!v9)
              goto LABEL_6;
LABEL_26:
            operator delete(v9);
            goto LABEL_6;
          }
        }
        else
        {
          v19 = 0;
          v20 = (char *)(8 * v15);
          *(_QWORD *)(8 * v15) = v11;
          v10 = 8 * v15 + 8;
          v21 = (char *)(v9 - v13);
          if (v9 != v13)
            goto LABEL_19;
        }
        *a3 = v20;
        a3[1] = (char *)v10;
        a3[2] = &v19[8 * v18];
        if (v9)
          goto LABEL_26;
      }
LABEL_6:
      a3[1] = (char *)v10;
      v9 = (char *)v10;
LABEL_7:
      ++v7;
    }
    while (v7 != v8);
  }
  sub_223E9E02C(&v102);
  if (**(int **)(v102 + 56) <= 3)
  {
    v32 = *(unsigned __int8 *)(v102 + 72);
    v33 = sub_22322F254(v102, "OSLogSurrogateAppender", 1, 0);
    v34 = v33;
    if (v32 || v33 != 0)
    {
      v95[0] = &v102;
      v95[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v95[2] = std::chrono::system_clock::now().__d_.__rep_;
      v96 = 3;
      v97 = "unknown file";
      v98 = 175;
      v100 = 0;
      v101 = 0;
      v99 = "unknown function";
      v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v37 = v102;
      if (*(char *)(v102 + 39) < 0)
      {
        v39 = *(const char **)(v102 + 16);
        v38 = *(_QWORD *)(v102 + 24);
        v93 = *(_QWORD *)v95[0] + 16;
        v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v41 & 1) != 0)
          goto LABEL_47;
      }
      else
      {
        v38 = *(unsigned __int8 *)(v102 + 39);
        v39 = (const char *)(*(_QWORD *)v95[0] + 16);
        v93 = (uint64_t)v39;
        v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v40 & 1) != 0)
          goto LABEL_47;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v109 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_47:
      if (byte_255788F57 >= 0)
        v42 = (const char *)&xmmword_255788F40;
      else
        v42 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v43 = byte_255788F57;
      else
        v43 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v42, v39);
      v44 = &object[8];
      if (v43 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v43 >= 0x17)
      {
        v92 = v39;
        v45 = v34;
        v46 = v36.__d_.__rep_;
        v47 = v37;
        v48 = v32;
        v49 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v43 | 7) != 0x17)
          v49 = v43 | 7;
        v50 = v49 + 1;
        v44 = operator new(v49 + 1);
        *(_QWORD *)&object[16] = v43;
        *(_QWORD *)&v109 = v50 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v44;
        v32 = v48;
        v37 = v47;
        v36.__d_.__rep_ = v46;
        v34 = v45;
        v39 = v92;
      }
      else
      {
        BYTE7(v109) = v43;
        if (!v43)
        {
LABEL_61:
          v44[v43] = 0;
          BYTE8(v109) = 1;
          v51 = __p;
          if (v38 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v38 >= 0x17)
          {
            v52 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17)
              v52 = v38 | 7;
            v53 = v52 + 1;
            v51 = operator new(v52 + 1);
            __p[1] = (void *)v38;
            v111 = v53 | 0x8000000000000000;
            __p[0] = v51;
          }
          else
          {
            HIBYTE(v111) = v38;
            if (!v38)
              goto LABEL_69;
          }
          memmove(v51, v39, v38);
LABEL_69:
          *((_BYTE *)v51 + v38) = 0;
          v112 = 1;
          v54 = *(NSObject **)object;
          if (SHIBYTE(v111) < 0)
            operator delete(__p[0]);
          if (BYTE8(v109) && SBYTE7(v109) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          v55 = (double)(v36.__d_.__rep_ - v94) / 1000000000.0;
          if (v34 && *(_QWORD *)(v34 + 24))
          {
            v56 = _os_log_pack_size();
            v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
            v58 = (std::__shared_weak_count *)operator new();
            v59 = v58;
            v58->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v58->__shared_owners_;
            v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v58->__shared_weak_owners_ = 0;
            v58[1].__vftable = v57;
            *(_QWORD *)object = v57;
            *(_QWORD *)&object[8] = v57;
            *(_QWORD *)&object[16] = v58;
            do
              v61 = __ldxr(p_shared_owners);
            while (__stxr(v61 + 1, p_shared_owners));
            v109 = 0uLL;
            __p[0] = 0;
            do
              v62 = __ldaxr(p_shared_owners);
            while (__stlxr(v62 - 1, p_shared_owners));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v59);
            }
            v63 = *(_QWORD *)object;
            v64 = _os_log_pack_fill();
            *(_DWORD *)v64 = 134217984;
            *(double *)(v64 + 4) = v55;
            v65 = operator new();
            v66 = *(unsigned __int8 *)(v37 + 39);
            v67 = v93;
            if ((v66 & 0x80u) != 0)
            {
              v67 = *(_QWORD *)(v37 + 16);
              v66 = *(_QWORD *)(v37 + 24);
            }
            *(_QWORD *)v65 = v63;
            *(_OWORD *)(v65 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v65 + 24) = v109;
            v109 = 0uLL;
            *(_QWORD *)(v65 + 40) = v67;
            *(_QWORD *)(v65 + 48) = v66;
            *(_BYTE *)(v65 + 56) = 1;
            v106 = 0;
            v107 = v65;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v107);
            v68 = v107;
            v107 = 0;
            if (v68)
            {
              v69 = *(std::__shared_weak_count **)(v68 + 32);
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              v72 = *(std::__shared_weak_count **)(v68 + 16);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              MEMORY[0x227684CE8](v68, 0x10F0C40B62ED6C6);
              v75 = v106;
              v106 = 0;
              if (v75)
              {
                v76 = *(std::__shared_weak_count **)(v75 + 32);
                if (v76)
                {
                  v77 = (unint64_t *)&v76->__shared_owners_;
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                v79 = *(std::__shared_weak_count **)(v75 + 16);
                if (v79)
                {
                  v80 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }
                MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
              }
            }
            v82 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
            if (*((_QWORD *)&v109 + 1))
            {
              v83 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v85 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v86 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          else
          {
            os_log_type_enabled(v54, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134217984;
            *(double *)&object[4] = (double)(v36.__d_.__rep_ - v94) / 1000000000.0;
            v88 = (void *)_os_log_send_and_compose_impl();
            if (v88)
              free(v88);
          }
          if (v32)
          {
            sub_22322C138((uint64_t)v95, "Time finding mutual correspondences %f seconds", v55);
            sub_223182C08((uint64_t)v95);
          }
          sub_223182C08((uint64_t)v95);
          v89 = v101;
          if (v101)
          {
            v90 = (unint64_t *)&v101->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          goto LABEL_128;
        }
      }
      memmove(v44, v42, v43);
      goto LABEL_61;
    }
  }
LABEL_128:
  if (v103)
    operator delete(v103);
  if (v104)
    operator delete(v104);
}

void sub_223E9DED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35,void *__p,void *a37,int a38,__int16 a39,char a40,char a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  void *v48;
  void *v49;

  if (a42)
  {
    if (a41 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  if (a25)
  {
    operator delete(a25);
    v48 = a28;
    if (!a28)
    {
LABEL_6:
      v49 = *(void **)v46;
      if (!*(_QWORD *)v46)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    v48 = a28;
    if (!a28)
      goto LABEL_6;
  }
  operator delete(v48);
  v49 = *(void **)v46;
  if (!*(_QWORD *)v46)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_7:
  *(_QWORD *)(v46 + 8) = v49;
  operator delete(v49);
  goto LABEL_8;
}

void sub_223E9E02C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDFB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDFB8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.geometry");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CDFB0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CDFB8);
  }
  *a1 = qword_2540CDFB0;
}

void sub_223E9E0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDFB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDFB8);
  _Unwind_Resume(a1);
}

void sub_223E9E120(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 **a3@<X2>, unsigned __int8 **a4@<X3>, char **a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  std::chrono::steady_clock::time_point v14;
  int v15;
  unint64_t v16;
  void *v17;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  double v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  _QWORD *v71;
  BOOL v72;
  unsigned int v73;
  unsigned int v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  unsigned __int8 **v87;
  int v88;
  unint64_t v89;
  std::chrono::steady_clock::time_point v91;
  void *v92;
  size_t v93;
  const char *v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  const char *v97;
  size_t v98;
  _BYTE *v99;
  const char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  const char *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  double v110;
  size_t v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  size_t v148;
  char *v149;
  size_t v150;
  char *v151;
  char **v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int *v159;
  _QWORD *v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _BYTE *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  char *v183;
  uint64_t v184;
  __int128 v185;
  unsigned __int8 *v186;
  const char *v187;
  size_t v188;
  unsigned __int8 v189;
  unsigned __int8 v190;
  const char *v191;
  size_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  size_t v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  double v233;
  std::chrono::steady_clock::time_point v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  std::chrono::steady_clock::time_point v241;
  unsigned __int8 *v242;
  const char *v243;
  size_t v244;
  unsigned __int8 v245;
  unsigned __int8 v246;
  const char *v247;
  size_t v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  void **v252;
  uint64_t v253;
  uint64_t v254;
  NSObject *v255;
  double v256;
  size_t v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  const char *v268;
  uint64_t v269;
  int v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  void *v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  char *v294;
  char *v295;
  void *v296;
  char *v297;
  void *v298;
  void *v299;
  char *v300;
  char *v301;
  void *v302;
  char *v303;
  void *v304;
  void *v305;
  char *v306;
  char *v307;
  char *v308;
  void *v309;
  void *v310;
  char *v311;
  char *v312;
  char *v313;
  void *v314;
  void *v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  std::chrono::steady_clock::time_point v319;
  _QWORD *v320;
  std::chrono::steady_clock::time_point v321;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v322;
  const char *v323;
  unint64_t v324;
  std::chrono::steady_clock::time_point v325;
  unint64_t v326;
  unint64_t v327;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v329;
  uint64_t v330;
  std::chrono::steady_clock::time_point v331;
  const char *v332;
  unsigned __int8 **v334;
  char *v335;
  std::chrono::steady_clock::time_point v336;
  int v337;
  uint64_t v338;
  void *__p;
  char *v340;
  void *v341;
  char *v342;
  void *v343;
  char *v344;
  char *v345;
  void *v346;
  char *v347;
  char *v348;
  uint64_t **v349;
  uint64_t *v350;
  unint64_t v351;
  void **v352;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v353;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v354;
  int v355;
  const char *v356;
  int v357;
  const char *v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  _QWORD *v361;
  _QWORD *v362[2];
  _QWORD *v363;
  _QWORD *v364[2];
  uint64_t v365;
  uint64_t v366;
  _BYTE v367[24];
  __int128 v368;
  void **v369;
  size_t v370;
  unint64_t v371;
  char v372;
  uint64_t v373;

  v373 = *MEMORY[0x24BDAC8D0];
  if (0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 2) != a3[1] - *a3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FeatureMatcher.cpp", 185, (uint64_t)"fpfhs_src.size() == semantics_src.size()", 40, (uint64_t)"Source FPFH features and semantics size must match.", 51, (void (*)(void **))sub_22457406C)|| 0xF83E0F83E0F83E1 * ((uint64_t)(a2[1] - *a2) >> 2) != a4[1] - *a4&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/FeatureMatcher.cpp", 188, (uint64_t)"fpfhs_dst.size() == semantics_dst.size()", 40, (uint64_t)"Destination FPFH features and semantics size must match.", 56, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v9 = *a1;
  v10 = a1[1];
  if (*a1 == v10 || *a2 == a2[1])
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v11 = 0xF83E0F83E0F83E1 * ((v10 - v9) >> 2);
  if (v11 >> 61)
    sub_22316E078();
  v12 = 8 * v11;
  v13 = (char *)operator new(8 * v11);
  *a5 = v13;
  a5[1] = v13;
  a5[2] = &v13[v12];
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_223EA08D0(&v363, *a3, a3[1]);
  sub_223EA08D0(&v361, *a4, a4[1]);
  sub_223E9E02C(&v343);
  v334 = a4;
  if (**((int **)v343 + 7) <= 3)
  {
    v15 = *((unsigned __int8 *)v343 + 72);
    v16 = sub_22322F254((uint64_t)v343, "OSLogSurrogateAppender", 1, 0);
    if (v15 || v16)
    {
      v326 = v16;
      rep = v14.__d_.__rep_;
      v352 = &v343;
      v353 = std::chrono::steady_clock::now().__d_.__rep_;
      v354 = std::chrono::system_clock::now().__d_.__rep_;
      v355 = 3;
      v356 = "unknown file";
      v357 = 202;
      v359 = 0;
      v360 = 0;
      v358 = "unknown function";
      v321.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v319.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v17 = *v352;
      if (*((char *)*v352 + 39) < 0)
      {
        v19 = (const char *)*((_QWORD *)v17 + 2);
        v18 = *((_QWORD *)v17 + 3);
        v316 = (uint64_t)*v352 + 16;
        v317 = *v352;
        v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v21 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        v18 = *((unsigned __int8 *)*v352 + 39);
        v19 = (char *)*v352 + 16;
        v316 = (uint64_t)v19;
        v317 = *v352;
        v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v20 & 1) != 0)
          goto LABEL_16;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v367);
        sub_223199C58("com.apple.cv3d", (unint64_t)v367, &xmmword_255788F40);
        if ((_BYTE)v368 && (v367[23] & 0x80000000) != 0)
          operator delete(*(void **)v367);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_16:
      if (byte_255788F57 >= 0)
        v22 = (const char *)&xmmword_255788F40;
      else
        v22 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v23 = byte_255788F57;
      else
        v23 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v367 = os_log_create(v22, v19);
      v24 = &v367[8];
      if (v23 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v23 >= 0x17)
      {
        v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v25 = v23 | 7;
        v26 = v25 + 1;
        v24 = operator new(v25 + 1);
        *(_QWORD *)&v367[16] = v23;
        *(_QWORD *)&v368 = v26 | 0x8000000000000000;
        *(_QWORD *)&v367[8] = v24;
      }
      else
      {
        BYTE7(v368) = v23;
        if (!v23)
        {
LABEL_30:
          v24[v23] = 0;
          BYTE8(v368) = 1;
          v27 = (void **)&v369;
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v18 >= 0x17)
          {
            v28 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v28 = v18 | 7;
            v29 = v28 + 1;
            v27 = (void **)operator new(v28 + 1);
            v370 = v18;
            v371 = v29 | 0x8000000000000000;
            v369 = v27;
          }
          else
          {
            HIBYTE(v371) = v18;
            if (!v18)
              goto LABEL_38;
          }
          memmove(v27, v19, v18);
LABEL_38:
          *((_BYTE *)v27 + v18) = 0;
          v372 = 1;
          v30 = *(NSObject **)v367;
          if (SHIBYTE(v371) < 0)
            operator delete(v369);
          if (BYTE8(v368) && SBYTE7(v368) < 0)
            operator delete(*(void **)&v367[8]);
          if (*(_QWORD *)v367)
            os_release(*(void **)v367);
          if (v326 && *(_QWORD *)(v326 + 24))
          {
            v31 = _os_log_pack_size();
            v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
            v33 = (std::__shared_weak_count *)operator new();
            v34 = v33;
            v33->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v33->__shared_weak_owners_ = 0;
            v33[1].__vftable = v32;
            *(_QWORD *)v367 = v32;
            *(_QWORD *)&v367[8] = v32;
            *(_QWORD *)&v367[16] = v33;
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
            v368 = 0uLL;
            v369 = 0;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v34);
            }
            v38 = *(_QWORD *)v367;
            v39 = _os_log_pack_fill();
            *(_DWORD *)v39 = 134217984;
            *(double *)(v39 + 4) = (double)(v321.__d_.__rep_ - rep) / 1000000000.0;
            v40 = operator new();
            v41 = *((unsigned __int8 *)v317 + 39);
            v42 = v316;
            if ((v41 & 0x80u) != 0)
            {
              v42 = v317[2];
              v41 = v317[3];
            }
            *(_QWORD *)v40 = v38;
            *(_OWORD *)(v40 + 8) = *(_OWORD *)&v367[8];
            *(_QWORD *)&v367[8] = 0;
            *(_QWORD *)&v367[16] = 0;
            *(_OWORD *)(v40 + 24) = v368;
            v368 = 0uLL;
            *(_QWORD *)(v40 + 40) = v42;
            *(_QWORD *)(v40 + 48) = v41;
            *(_BYTE *)(v40 + 56) = 1;
            v346 = 0;
            v349 = (uint64_t **)v40;
            (*(void (**)(_QWORD, uint64_t ***))(**(_QWORD **)(v326 + 24) + 40))(*(_QWORD *)(v326 + 24), &v349);
            v43 = v349;
            v349 = 0;
            if (v43)
            {
              v44 = (std::__shared_weak_count *)v43[4];
              if (v44)
              {
                v45 = (unint64_t *)&v44->__shared_owners_;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              v47 = (std::__shared_weak_count *)v43[2];
              if (v47)
              {
                v48 = (unint64_t *)&v47->__shared_owners_;
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              MEMORY[0x227684CE8](v43, 0x10F0C40B62ED6C6);
              v50 = v346;
              v346 = 0;
              if (v50)
              {
                v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 4);
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = (std::__shared_weak_count *)*((_QWORD *)v50 + 2);
                if (v54)
                {
                  v55 = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                MEMORY[0x227684CE8](v50, 0x10F0C40B62ED6C6);
              }
            }
            v57 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
            if (*((_QWORD *)&v368 + 1))
            {
              v58 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = *(std::__shared_weak_count **)&v367[16];
            if (*(_QWORD *)&v367[16])
            {
              v61 = (unint64_t *)(*(_QWORD *)&v367[16] + 8);
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
          }
          else
          {
            os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
            *(_DWORD *)v367 = 134217984;
            *(double *)&v367[4] = (double)(v321.__d_.__rep_ - rep) / 1000000000.0;
            v63 = (void *)_os_log_send_and_compose_impl();
            if (v63)
              free(v63);
          }
          if (v15)
          {
            v64 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v319.__d_.__rep_) / 1000000000.0;
            v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            sub_22322C138((uint64_t)&v352, "Time creating unique labels %f seconds", v64);
            sub_223182C08((uint64_t)&v352);
          }
          else
          {
            v14.__d_.__rep_ = v319.__d_.__rep_;
          }
          sub_223182C08((uint64_t)&v352);
          v65 = v360;
          if (v360)
          {
            v66 = (unint64_t *)&v360->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          goto LABEL_98;
        }
      }
      memmove(v24, v22, v23);
      goto LABEL_30;
    }
  }
LABEL_98:
  v329 = v14.__d_.__rep_;
  v68 = 0;
  v69 = (uint64_t *)&v350;
  v350 = 0;
  v351 = 0;
  v349 = &v350;
  v70 = v363;
  v71 = v361;
  v72 = v363 == v364 || v361 == v362;
  if (!v72)
  {
    while (1)
    {
      v73 = *((unsigned __int8 *)v70 + 25);
      v74 = *((unsigned __int8 *)v71 + 25);
      if (v73 >= v74)
        break;
      v75 = (_QWORD *)v70[1];
      if (v75)
      {
        do
        {
          v70 = v75;
          v75 = (_QWORD *)*v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = v70;
          v70 = (_QWORD *)v70[2];
        }
        while ((_QWORD *)*v70 != v76);
      }
LABEL_127:
      if (v70 == v364 || v71 == v362)
      {
        v68 = v351;
        goto LABEL_130;
      }
    }
    if (v74 < v73)
    {
LABEL_123:
      v85 = (_QWORD *)v71[1];
      if (v85)
      {
        do
        {
          v71 = v85;
          v85 = (_QWORD *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = v71;
          v71 = (_QWORD *)v71[2];
        }
        while ((_QWORD *)*v71 != v86);
      }
      goto LABEL_127;
    }
    v77 = sub_223EA09C0(&v349, v69, (uint64_t **)v367, (uint64_t **)&v352, v73);
    v78 = *v77;
    if (*v77)
    {
      v79 = *(uint64_t **)(v78 + 8);
      if (!v79)
      {
        do
        {
LABEL_117:
          v69 = *(uint64_t **)(v78 + 16);
          v72 = *v69 == v78;
          v78 = (uint64_t)v69;
        }
        while (!v72);
LABEL_119:
        v83 = (_QWORD *)v70[1];
        if (v83)
        {
          do
          {
            v70 = v83;
            v83 = (_QWORD *)*v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            v84 = v70;
            v70 = (_QWORD *)v70[2];
          }
          while ((_QWORD *)*v70 != v84);
        }
        goto LABEL_123;
      }
    }
    else
    {
      v80 = v77;
      v78 = (uint64_t)operator new(0x20uLL);
      *(_BYTE *)(v78 + 25) = *((_BYTE *)v70 + 25);
      v81 = *(_QWORD *)v367;
      *(_QWORD *)v78 = 0;
      *(_QWORD *)(v78 + 8) = 0;
      *(_QWORD *)(v78 + 16) = v81;
      *v80 = v78;
      v82 = (uint64_t *)v78;
      if (*v349)
      {
        v349 = (uint64_t **)*v349;
        v82 = (uint64_t *)*v80;
      }
      sub_2231A9A8C(v350, v82);
      ++v351;
      v79 = *(uint64_t **)(v78 + 8);
      if (!v79)
        goto LABEL_117;
    }
    do
    {
      v69 = v79;
      v79 = (uint64_t *)*v79;
    }
    while (v79);
    goto LABEL_119;
  }
LABEL_130:
  sub_223E9E02C(&v341);
  v87 = v334;
  v327 = v68;
  if (**((int **)v341 + 7) <= 3)
  {
    v88 = *((unsigned __int8 *)v341 + 72);
    v89 = sub_22322F254((uint64_t)v341, "OSLogSurrogateAppender", 1, 0);
    if (v88 || v89 != 0)
    {
      v324 = v89;
      v352 = &v341;
      v353 = std::chrono::steady_clock::now().__d_.__rep_;
      v354 = std::chrono::system_clock::now().__d_.__rep_;
      v355 = 3;
      v356 = "unknown file";
      v357 = 209;
      v359 = 0;
      v360 = 0;
      v358 = "unknown function";
      v91.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v92 = *v352;
      v320 = *v352;
      v322 = v91.__d_.__rep_;
      if (*((char *)*v352 + 39) < 0)
      {
        v94 = (const char *)*((_QWORD *)v92 + 2);
        v93 = *((_QWORD *)v92 + 3);
        v318 = (uint64_t)*v352 + 16;
        v96 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v96 & 1) != 0)
          goto LABEL_139;
      }
      else
      {
        v93 = *((unsigned __int8 *)*v352 + 39);
        v94 = (char *)*v352 + 16;
        v318 = (uint64_t)v94;
        v95 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v95 & 1) != 0)
          goto LABEL_139;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v367);
        sub_223199C58("com.apple.cv3d", (unint64_t)v367, &xmmword_255788F40);
        if ((_BYTE)v368 && (v367[23] & 0x80000000) != 0)
          operator delete(*(void **)v367);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_139:
      if (byte_255788F57 >= 0)
        v97 = (const char *)&xmmword_255788F40;
      else
        v97 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v98 = byte_255788F57;
      else
        v98 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v367 = os_log_create(v97, v94);
      v99 = &v367[8];
      if (v98 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v98 >= 0x17)
      {
        v100 = v94;
        v101 = v88;
        v102 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v98 | 7) != 0x17)
          v102 = v98 | 7;
        v103 = v102 + 1;
        v99 = operator new(v102 + 1);
        *(_QWORD *)&v367[16] = v98;
        *(_QWORD *)&v368 = v103 | 0x8000000000000000;
        *(_QWORD *)&v367[8] = v99;
        v88 = v101;
        v94 = v100;
      }
      else
      {
        BYTE7(v368) = v98;
        if (!v98)
        {
LABEL_153:
          v99[v98] = 0;
          BYTE8(v368) = 1;
          v104 = (void **)&v369;
          if (v93 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v93 >= 0x17)
          {
            v105 = v94;
            v106 = v88;
            v107 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v93 | 7) != 0x17)
              v107 = v93 | 7;
            v108 = v107 + 1;
            v104 = (void **)operator new(v107 + 1);
            v370 = v93;
            v371 = v108 | 0x8000000000000000;
            v369 = v104;
            v88 = v106;
            v94 = v105;
          }
          else
          {
            HIBYTE(v371) = v93;
            if (!v93)
              goto LABEL_161;
          }
          memmove(v104, v94, v93);
LABEL_161:
          *((_BYTE *)v104 + v93) = 0;
          v372 = 1;
          v109 = *(NSObject **)v367;
          if (SHIBYTE(v371) < 0)
            operator delete(v369);
          v87 = v334;
          if (BYTE8(v368) && SBYTE7(v368) < 0)
            operator delete(*(void **)&v367[8]);
          if (*(_QWORD *)v367)
            os_release(*(void **)v367);
          v110 = (double)(v322 - v329) / 1000000000.0;
          if (v324 && *(_QWORD *)(v324 + 24))
          {
            v111 = _os_log_pack_size();
            v112 = (std::__shared_weak_count_vtbl *)operator new(v111, (std::align_val_t)8uLL);
            v113 = (std::__shared_weak_count *)operator new();
            v114 = v113;
            v113->__shared_owners_ = 0;
            v115 = (unint64_t *)&v113->__shared_owners_;
            v113->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v113->__shared_weak_owners_ = 0;
            v113[1].__vftable = v112;
            *(_QWORD *)v367 = v112;
            *(_QWORD *)&v367[8] = v112;
            *(_QWORD *)&v367[16] = v113;
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
            v368 = 0uLL;
            v369 = 0;
            do
              v117 = __ldaxr(v115);
            while (__stlxr(v117 - 1, v115));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v114);
            }
            v118 = *(_QWORD *)v367;
            v119 = _os_log_pack_fill();
            *(_DWORD *)v119 = 134217984;
            *(double *)(v119 + 4) = v110;
            v120 = (char *)operator new();
            v121 = *((unsigned __int8 *)v320 + 39);
            v122 = v318;
            if ((v121 & 0x80u) != 0)
            {
              v122 = v320[2];
              v121 = v320[3];
            }
            *(_QWORD *)v120 = v118;
            *(_OWORD *)(v120 + 8) = *(_OWORD *)&v367[8];
            *(_QWORD *)&v367[8] = 0;
            *(_QWORD *)&v367[16] = 0;
            *(_OWORD *)(v120 + 24) = v368;
            v368 = 0uLL;
            *((_QWORD *)v120 + 5) = v122;
            *((_QWORD *)v120 + 6) = v121;
            v120[56] = 1;
            v343 = 0;
            v346 = v120;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v324 + 24) + 40))(*(_QWORD *)(v324 + 24), &v346);
            v123 = v346;
            v346 = 0;
            if (v123)
            {
              v124 = (std::__shared_weak_count *)*((_QWORD *)v123 + 4);
              if (v124)
              {
                v125 = (unint64_t *)&v124->__shared_owners_;
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 - 1, v125));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                  std::__shared_weak_count::__release_weak(v124);
                }
              }
              v127 = (std::__shared_weak_count *)*((_QWORD *)v123 + 2);
              if (v127)
              {
                v128 = (unint64_t *)&v127->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              MEMORY[0x227684CE8](v123, 0x10F0C40B62ED6C6);
              v130 = v343;
              v343 = 0;
              if (v130)
              {
                v131 = (std::__shared_weak_count *)*((_QWORD *)v130 + 4);
                if (v131)
                {
                  v132 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                v134 = (std::__shared_weak_count *)*((_QWORD *)v130 + 2);
                if (v134)
                {
                  v135 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v136 = __ldaxr(v135);
                  while (__stlxr(v136 - 1, v135));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                }
                MEMORY[0x227684CE8](v130, 0x10F0C40B62ED6C6);
              }
            }
            v137 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
            if (*((_QWORD *)&v368 + 1))
            {
              v138 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
              do
                v139 = __ldaxr(v138);
              while (__stlxr(v139 - 1, v138));
              if (!v139)
              {
                ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                std::__shared_weak_count::__release_weak(v137);
              }
            }
            v140 = *(std::__shared_weak_count **)&v367[16];
            if (*(_QWORD *)&v367[16])
            {
              v141 = (unint64_t *)(*(_QWORD *)&v367[16] + 8);
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v140);
              }
            }
          }
          else
          {
            os_log_type_enabled(v109, OS_LOG_TYPE_INFO);
            *(_DWORD *)v367 = 134217984;
            *(double *)&v367[4] = (double)(v322 - v329) / 1000000000.0;
            v143 = (void *)_os_log_send_and_compose_impl();
            if (v143)
              free(v143);
          }
          if (v88)
          {
            sub_22322C138((uint64_t)&v352, "Time collecting common labels %f seconds", v110);
            sub_223182C08((uint64_t)&v352);
          }
          sub_223182C08((uint64_t)&v352);
          v144 = v360;
          if (v360)
          {
            v145 = (unint64_t *)&v360->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v68 = v327;
          goto LABEL_221;
        }
      }
      memmove(v99, v97, v98);
      goto LABEL_153;
    }
  }
LABEL_221:
  v346 = 0;
  v347 = 0;
  v348 = 0;
  if (v68)
  {
    if (v68 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v147 = v68;
    v148 = 24 * v68;
    v149 = (char *)operator new(v148);
    v346 = v149;
    v348 = &v149[24 * v147];
    v150 = 24 * ((v148 - 24) / 0x18) + 24;
    bzero(v149, v150);
    v347 = &v149[v150];
    v151 = (char *)operator new(v148);
    v343 = v151;
    v345 = &v151[24 * v147];
    bzero(v151, v150);
    v344 = &v151[v150];
    v68 = v147;
  }
  else
  {
    v343 = 0;
    v344 = 0;
    v345 = 0;
  }
  sub_223CD8618(&v341, v68);
  sub_223CD8618(&__p, v68);
  v325.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_223E9D0BC(a1, a3, &v349, &v346, &v341);
  sub_223E9D0BC(a2, v87, &v349, &v343, &__p);
  v152 = a5;
  sub_223E9E02C(&v338);
  if (**(int **)(v338 + 56) <= 3)
  {
    v153 = *(unsigned __int8 *)(v338 + 72);
    v154 = sub_22322F254(v338, "OSLogSurrogateAppender", 1, 0);
    v155 = v154;
    if (v153 || v154)
    {
      v352 = (void **)&v338;
      v353 = std::chrono::steady_clock::now().__d_.__rep_;
      v354 = std::chrono::system_clock::now().__d_.__rep_;
      v355 = 3;
      v356 = "unknown file";
      v357 = 224;
      v359 = 0;
      v360 = 0;
      v358 = "unknown function";
      v336.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v331.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v186 = (unsigned __int8 *)*v352;
      v187 = (char *)*v352 + 16;
      v323 = v187;
      if (*((char *)*v352 + 39) < 0)
      {
        v187 = (const char *)*((_QWORD *)v186 + 2);
        v188 = *((_QWORD *)v186 + 3);
        v190 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v190 & 1) != 0)
          goto LABEL_268;
      }
      else
      {
        v188 = *((unsigned __int8 *)*v352 + 39);
        v189 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v189 & 1) != 0)
          goto LABEL_268;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v367);
        sub_223199C58("com.apple.cv3d", (unint64_t)v367, &xmmword_255788F40);
        if ((_BYTE)v368 && (v367[23] & 0x80000000) != 0)
          operator delete(*(void **)v367);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v68 = v327;
      }
LABEL_268:
      if (byte_255788F57 >= 0)
        v191 = (const char *)&xmmword_255788F40;
      else
        v191 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v192 = byte_255788F57;
      else
        v192 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v367 = os_log_create(v191, v187);
      v193 = &v367[8];
      if (v192 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v192 >= 0x17)
      {
        v194 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v192 | 7) != 0x17)
          v194 = v192 | 7;
        v195 = v194 + 1;
        v193 = operator new(v194 + 1);
        *(_QWORD *)&v367[16] = v192;
        *(_QWORD *)&v368 = v195 | 0x8000000000000000;
        *(_QWORD *)&v367[8] = v193;
        v68 = v327;
      }
      else
      {
        BYTE7(v368) = v192;
        if (!v192)
        {
LABEL_282:
          v193[v192] = 0;
          BYTE8(v368) = 1;
          v196 = (void **)&v369;
          if (v188 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v188 >= 0x17)
          {
            v197 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v188 | 7) != 0x17)
              v197 = v188 | 7;
            v198 = v197 + 1;
            v196 = (void **)operator new(v197 + 1);
            v370 = v188;
            v371 = v198 | 0x8000000000000000;
            v369 = v196;
            v68 = v327;
          }
          else
          {
            HIBYTE(v371) = v188;
            if (!v188)
            {
LABEL_290:
              *((_BYTE *)v196 + v188) = 0;
              v372 = 1;
              v199 = *(NSObject **)v367;
              if (SHIBYTE(v371) < 0)
                operator delete(v369);
              if (BYTE8(v368) && SBYTE7(v368) < 0)
                operator delete(*(void **)&v367[8]);
              if (*(_QWORD *)v367)
                os_release(*(void **)v367);
              if (v155 && *(_QWORD *)(v155 + 24))
              {
                v200 = _os_log_pack_size();
                v201 = (std::__shared_weak_count_vtbl *)operator new(v200, (std::align_val_t)8uLL);
                v202 = (std::__shared_weak_count *)operator new();
                v203 = v202;
                v202->__shared_owners_ = 0;
                v204 = (unint64_t *)&v202->__shared_owners_;
                v202->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v202->__shared_weak_owners_ = 0;
                v202[1].__vftable = v201;
                *(_QWORD *)v367 = v201;
                *(_QWORD *)&v367[8] = v201;
                *(_QWORD *)&v367[16] = v202;
                do
                  v205 = __ldxr(v204);
                while (__stxr(v205 + 1, v204));
                v368 = 0uLL;
                v369 = 0;
                do
                  v206 = __ldaxr(v204);
                while (__stlxr(v206 - 1, v204));
                if (!v206)
                {
                  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                  std::__shared_weak_count::__release_weak(v203);
                }
                v207 = *(_QWORD *)v367;
                v208 = _os_log_pack_fill();
                *(_DWORD *)v208 = 134217984;
                *(double *)(v208 + 4) = (double)(v336.__d_.__rep_ - v325.__d_.__rep_) / 1000000000.0;
                v209 = operator new();
                v210 = v186[39];
                v211 = v323;
                if ((v210 & 0x80u) != 0)
                {
                  v211 = (const char *)*((_QWORD *)v186 + 2);
                  v210 = *((_QWORD *)v186 + 3);
                }
                *(_QWORD *)v209 = v207;
                *(_OWORD *)(v209 + 8) = *(_OWORD *)&v367[8];
                *(_QWORD *)&v367[8] = 0;
                *(_QWORD *)&v367[16] = 0;
                *(_OWORD *)(v209 + 24) = v368;
                v368 = 0uLL;
                *(_QWORD *)(v209 + 40) = v211;
                *(_QWORD *)(v209 + 48) = v210;
                *(_BYTE *)(v209 + 56) = 1;
                v365 = 0;
                v366 = v209;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v155 + 24) + 40))(*(_QWORD *)(v155 + 24), &v366);
                v212 = v366;
                v366 = 0;
                v152 = a5;
                v68 = v327;
                if (v212)
                {
                  v213 = *(std::__shared_weak_count **)(v212 + 32);
                  if (v213)
                  {
                    v214 = (unint64_t *)&v213->__shared_owners_;
                    do
                      v215 = __ldaxr(v214);
                    while (__stlxr(v215 - 1, v214));
                    if (!v215)
                    {
                      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                      std::__shared_weak_count::__release_weak(v213);
                    }
                  }
                  v216 = *(std::__shared_weak_count **)(v212 + 16);
                  if (v216)
                  {
                    v217 = (unint64_t *)&v216->__shared_owners_;
                    do
                      v218 = __ldaxr(v217);
                    while (__stlxr(v218 - 1, v217));
                    if (!v218)
                    {
                      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                      std::__shared_weak_count::__release_weak(v216);
                    }
                  }
                  MEMORY[0x227684CE8](v212, 0x10F0C40B62ED6C6);
                  v219 = v365;
                  v365 = 0;
                  if (v219)
                  {
                    v220 = *(std::__shared_weak_count **)(v219 + 32);
                    if (v220)
                    {
                      v221 = (unint64_t *)&v220->__shared_owners_;
                      do
                        v222 = __ldaxr(v221);
                      while (__stlxr(v222 - 1, v221));
                      if (!v222)
                      {
                        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                        std::__shared_weak_count::__release_weak(v220);
                      }
                    }
                    v223 = *(std::__shared_weak_count **)(v219 + 16);
                    if (v223)
                    {
                      v224 = (unint64_t *)&v223->__shared_owners_;
                      do
                        v225 = __ldaxr(v224);
                      while (__stlxr(v225 - 1, v224));
                      if (!v225)
                      {
                        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                        std::__shared_weak_count::__release_weak(v223);
                      }
                    }
                    MEMORY[0x227684CE8](v219, 0x10F0C40B62ED6C6);
                  }
                }
                v226 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                if (*((_QWORD *)&v368 + 1))
                {
                  v227 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
                  do
                    v228 = __ldaxr(v227);
                  while (__stlxr(v228 - 1, v227));
                  if (!v228)
                  {
                    ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                    std::__shared_weak_count::__release_weak(v226);
                  }
                }
                v229 = *(std::__shared_weak_count **)&v367[16];
                if (*(_QWORD *)&v367[16])
                {
                  v230 = (unint64_t *)(*(_QWORD *)&v367[16] + 8);
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 - 1, v230));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                    std::__shared_weak_count::__release_weak(v229);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v199, OS_LOG_TYPE_INFO);
                *(_DWORD *)v367 = 134217984;
                *(double *)&v367[4] = (double)(v336.__d_.__rep_ - v325.__d_.__rep_) / 1000000000.0;
                v232 = (void *)_os_log_send_and_compose_impl();
                v152 = a5;
                if (v232)
                  free(v232);
              }
              if (v153)
              {
                v233 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v331.__d_.__rep_) / 1000000000.0;
                v234.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                sub_22322C138((uint64_t)&v352, "Time regrouping features per label %f seconds", v233);
                sub_223182C08((uint64_t)&v352);
              }
              else
              {
                v234.__d_.__rep_ = v331.__d_.__rep_;
              }
              sub_223182C08((uint64_t)&v352);
              v235 = v360;
              if (v360)
              {
                v236 = (unint64_t *)&v360->__shared_owners_;
                do
                  v237 = __ldaxr(v236);
                while (__stlxr(v237 - 1, v236));
                if (!v237)
                {
                  ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                  std::__shared_weak_count::__release_weak(v235);
                }
              }
              v325.__d_.__rep_ = v234.__d_.__rep_;
              if (!v68)
                goto LABEL_351;
              goto LABEL_229;
            }
          }
          memmove(v196, v187, v188);
          goto LABEL_290;
        }
      }
      memmove(v193, v191, v192);
      goto LABEL_282;
    }
  }
  if (!v68)
    goto LABEL_351;
LABEL_229:
  v156 = 0;
  while (2)
  {
    v157 = 24 * v156;
    sub_223E9D53C((uint64_t *)v346 + 3 * v156, (uint64_t)v343 + 24 * v156, (char **)v367);
    v158 = *(unsigned int **)v367;
    v159 = *(unsigned int **)&v367[8];
    if (*(_QWORD *)v367 == *(_QWORD *)&v367[8])
      goto LABEL_262;
    v330 = v156;
    v160 = (char *)v341 + v157;
    v161 = (char *)__p + v157;
    v162 = v152[1];
    v335 = (char *)v341 + v157;
    do
    {
      while (1)
      {
        v163 = *(unsigned int *)(*v160 + 4 * *v158);
        v164 = *(unsigned int *)(*v161 + 4 * v158[1]);
        v165 = (unint64_t)v152[2];
        if ((unint64_t)v162 >= v165)
          break;
        *(_QWORD *)v162 = v163 | (v164 << 32);
        v162 += 8;
        v152[1] = v162;
        v158 += 2;
        if (v158 == v159)
          goto LABEL_261;
      }
      v166 = *v152;
      v167 = v162 - *v152;
      v168 = v167 >> 3;
      v169 = (v167 >> 3) + 1;
      if (v169 >> 61)
        sub_22316E078();
      v170 = v165 - (_QWORD)v166;
      if (v170 >> 2 > v169)
        v169 = v170 >> 2;
      if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
        v171 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v171 = v169;
      if (v171)
      {
        if (v171 >> 61)
          sub_223174E94();
        v172 = operator new(8 * v171);
        v173 = &v172[8 * v168];
        *(_QWORD *)v173 = v163 | (v164 << 32);
        v174 = (uint64_t)(v173 + 8);
        v175 = (char *)(v162 - v166);
        if (v162 != v166)
        {
LABEL_244:
          v176 = (unint64_t)(v175 - 8);
          if (v176 < 0x168
            || (v179 = (v162 - 8 - v166) & 0xFFFFFFFFFFFFFFF8, &v172[v167 - 8 - v179] > &v172[v167 - 8])
            || &v162[-v179 - 8] > v162 - 8
            || (unint64_t)(v162 - v172 - v167) < 0x20)
          {
            v177 = v162;
            v152 = a5;
          }
          else
          {
            v180 = (v176 >> 3) + 1;
            v181 = 8 * (v180 & 0x3FFFFFFFFFFFFFFCLL);
            v177 = &v162[-v181];
            v173 -= v181;
            v182 = &v172[8 * v168 - 16];
            v183 = v162 - 16;
            v184 = v180 & 0x3FFFFFFFFFFFFFFCLL;
            v152 = a5;
            do
            {
              v185 = *(_OWORD *)v183;
              *(v182 - 1) = *((_OWORD *)v183 - 1);
              *v182 = v185;
              v182 -= 2;
              v183 -= 32;
              v184 -= 4;
            }
            while (v184);
            if (v180 == (v180 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_247:
              v162 = *v152;
              *v152 = v173;
              v152[1] = (char *)v174;
              v152[2] = &v172[8 * v171];
              if (!v162)
                goto LABEL_249;
LABEL_248:
              operator delete(v162);
              goto LABEL_249;
            }
          }
          do
          {
            v178 = *((_QWORD *)v177 - 1);
            v177 -= 8;
            *((_QWORD *)v173 - 1) = v178;
            v173 -= 8;
          }
          while (v177 != v166);
          goto LABEL_247;
        }
      }
      else
      {
        v172 = 0;
        v173 = (char *)(8 * v168);
        *(_QWORD *)(8 * v168) = v163 | (v164 << 32);
        v174 = 8 * v168 + 8;
        v175 = (char *)(v162 - v166);
        if (v162 != v166)
          goto LABEL_244;
      }
      v152 = a5;
      *a5 = v173;
      a5[1] = (char *)v174;
      a5[2] = &v172[8 * v171];
      if (v162)
        goto LABEL_248;
LABEL_249:
      v160 = v335;
      v152[1] = (char *)v174;
      v158 += 2;
      v162 = (char *)v174;
    }
    while (v158 != v159);
LABEL_261:
    v158 = *(unsigned int **)v367;
    v68 = v327;
    v156 = v330;
LABEL_262:
    if (v158)
      operator delete(v158);
    if (++v156 != v68)
      continue;
    break;
  }
LABEL_351:
  sub_223E9E02C(&v338);
  if (**(int **)(v338 + 56) <= 3)
  {
    v238 = *(unsigned __int8 *)(v338 + 72);
    v239 = sub_22322F254(v338, "OSLogSurrogateAppender", 1, 0);
    v240 = v239;
    if (v238 || v239)
    {
      v337 = v238;
      v352 = (void **)&v338;
      v353 = std::chrono::steady_clock::now().__d_.__rep_;
      v354 = std::chrono::system_clock::now().__d_.__rep_;
      v355 = 3;
      v356 = "unknown file";
      v357 = 236;
      v359 = 0;
      v360 = 0;
      v358 = "unknown function";
      v241.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v242 = (unsigned __int8 *)*v352;
      v243 = (char *)*v352 + 16;
      v332 = v243;
      if (*((char *)*v352 + 39) < 0)
      {
        v243 = (const char *)*((_QWORD *)v242 + 2);
        v244 = *((_QWORD *)v242 + 3);
        v246 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v246 & 1) == 0)
        {
LABEL_496:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v367);
            sub_223199C58("com.apple.cv3d", (unint64_t)v367, &xmmword_255788F40);
            if ((_BYTE)v368 && (v367[23] & 0x80000000) != 0)
              operator delete(*(void **)v367);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
        }
      }
      else
      {
        v244 = *((unsigned __int8 *)*v352 + 39);
        v245 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v245 & 1) == 0)
          goto LABEL_496;
      }
      if (byte_255788F57 >= 0)
        v247 = (const char *)&xmmword_255788F40;
      else
        v247 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v248 = byte_255788F57;
      else
        v248 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v367 = os_log_create(v247, v243);
      v249 = &v367[8];
      if (v248 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v248 >= 0x17)
      {
        v250 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v248 | 7) != 0x17)
          v250 = v248 | 7;
        v251 = v250 + 1;
        v249 = operator new(v250 + 1);
        *(_QWORD *)&v367[16] = v248;
        *(_QWORD *)&v368 = v251 | 0x8000000000000000;
        *(_QWORD *)&v367[8] = v249;
      }
      else
      {
        BYTE7(v368) = v248;
        if (!v248)
        {
LABEL_372:
          v249[v248] = 0;
          BYTE8(v368) = 1;
          v252 = (void **)&v369;
          if (v244 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v244 >= 0x17)
          {
            v253 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v244 | 7) != 0x17)
              v253 = v244 | 7;
            v254 = v253 + 1;
            v252 = (void **)operator new(v253 + 1);
            v370 = v244;
            v371 = v254 | 0x8000000000000000;
            v369 = v252;
          }
          else
          {
            HIBYTE(v371) = v244;
            if (!v244)
            {
LABEL_380:
              *((_BYTE *)v252 + v244) = 0;
              v372 = 1;
              v255 = *(NSObject **)v367;
              if (SHIBYTE(v371) < 0)
                operator delete(v369);
              if (BYTE8(v368) && SBYTE7(v368) < 0)
                operator delete(*(void **)&v367[8]);
              if (*(_QWORD *)v367)
                os_release(*(void **)v367);
              v256 = (double)(v241.__d_.__rep_ - v325.__d_.__rep_) / 1000000000.0;
              if (v240 && *(_QWORD *)(v240 + 24))
              {
                v257 = _os_log_pack_size();
                v258 = (std::__shared_weak_count_vtbl *)operator new(v257, (std::align_val_t)8uLL);
                v259 = (std::__shared_weak_count *)operator new();
                v260 = v259;
                v259->__shared_owners_ = 0;
                v261 = (unint64_t *)&v259->__shared_owners_;
                v259->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v259->__shared_weak_owners_ = 0;
                v259[1].__vftable = v258;
                *(_QWORD *)v367 = v258;
                *(_QWORD *)&v367[8] = v258;
                *(_QWORD *)&v367[16] = v259;
                do
                  v262 = __ldxr(v261);
                while (__stxr(v262 + 1, v261));
                v368 = 0uLL;
                v369 = 0;
                do
                  v263 = __ldaxr(v261);
                while (__stlxr(v263 - 1, v261));
                if (!v263)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v260);
                }
                v264 = *(_QWORD *)v367;
                v265 = _os_log_pack_fill();
                *(_DWORD *)v265 = 134217984;
                *(double *)(v265 + 4) = v256;
                v266 = operator new();
                v267 = v242[39];
                v268 = v332;
                if ((v267 & 0x80u) != 0)
                {
                  v268 = (const char *)*((_QWORD *)v242 + 2);
                  v267 = *((_QWORD *)v242 + 3);
                }
                *(_QWORD *)v266 = v264;
                *(_OWORD *)(v266 + 8) = *(_OWORD *)&v367[8];
                *(_QWORD *)&v367[8] = 0;
                *(_QWORD *)&v367[16] = 0;
                *(_OWORD *)(v266 + 24) = v368;
                v368 = 0uLL;
                *(_QWORD *)(v266 + 40) = v268;
                *(_QWORD *)(v266 + 48) = v267;
                *(_BYTE *)(v266 + 56) = 1;
                v365 = 0;
                v366 = v266;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v240 + 24) + 40))(*(_QWORD *)(v240 + 24), &v366);
                v269 = v366;
                v366 = 0;
                v270 = v337;
                if (v269)
                {
                  v271 = *(std::__shared_weak_count **)(v269 + 32);
                  if (v271)
                  {
                    v272 = (unint64_t *)&v271->__shared_owners_;
                    do
                      v273 = __ldaxr(v272);
                    while (__stlxr(v273 - 1, v272));
                    if (!v273)
                    {
                      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                      std::__shared_weak_count::__release_weak(v271);
                    }
                  }
                  v274 = *(std::__shared_weak_count **)(v269 + 16);
                  if (v274)
                  {
                    v275 = (unint64_t *)&v274->__shared_owners_;
                    do
                      v276 = __ldaxr(v275);
                    while (__stlxr(v276 - 1, v275));
                    if (!v276)
                    {
                      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                      std::__shared_weak_count::__release_weak(v274);
                    }
                  }
                  MEMORY[0x227684CE8](v269, 0x10F0C40B62ED6C6);
                  v277 = v365;
                  v365 = 0;
                  if (v277)
                  {
                    v278 = *(std::__shared_weak_count **)(v277 + 32);
                    if (v278)
                    {
                      v279 = (unint64_t *)&v278->__shared_owners_;
                      do
                        v280 = __ldaxr(v279);
                      while (__stlxr(v280 - 1, v279));
                      if (!v280)
                      {
                        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                        std::__shared_weak_count::__release_weak(v278);
                      }
                    }
                    v281 = *(std::__shared_weak_count **)(v277 + 16);
                    if (v281)
                    {
                      v282 = (unint64_t *)&v281->__shared_owners_;
                      do
                        v283 = __ldaxr(v282);
                      while (__stlxr(v283 - 1, v282));
                      if (!v283)
                      {
                        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                        std::__shared_weak_count::__release_weak(v281);
                      }
                    }
                    MEMORY[0x227684CE8](v277, 0x10F0C40B62ED6C6);
                  }
                }
                v284 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                if (*((_QWORD *)&v368 + 1))
                {
                  v285 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
                  do
                    v286 = __ldaxr(v285);
                  while (__stlxr(v286 - 1, v285));
                  if (!v286)
                  {
                    ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                    std::__shared_weak_count::__release_weak(v284);
                  }
                }
                v287 = *(std::__shared_weak_count **)&v367[16];
                if (*(_QWORD *)&v367[16])
                {
                  v288 = (unint64_t *)(*(_QWORD *)&v367[16] + 8);
                  do
                    v289 = __ldaxr(v288);
                  while (__stlxr(v289 - 1, v288));
                  if (!v289)
                  {
                    ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                    std::__shared_weak_count::__release_weak(v287);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v255, OS_LOG_TYPE_INFO);
                *(_DWORD *)v367 = 134217984;
                *(double *)&v367[4] = (double)(v241.__d_.__rep_ - v325.__d_.__rep_) / 1000000000.0;
                v290 = (void *)_os_log_send_and_compose_impl();
                v270 = v337;
                if (v290)
                  free(v290);
              }
              if (v270)
              {
                sub_22322C138((uint64_t)&v352, "Time matching features per label %f seconds", v256);
                sub_223182C08((uint64_t)&v352);
              }
              sub_223182C08((uint64_t)&v352);
              v291 = v360;
              if (v360)
              {
                v292 = (unint64_t *)&v360->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                  std::__shared_weak_count::__release_weak(v291);
                }
              }
              goto LABEL_439;
            }
          }
          memmove(v252, v243, v244);
          goto LABEL_380;
        }
      }
      memmove(v249, v247, v248);
      goto LABEL_372;
    }
  }
LABEL_439:
  v294 = (char *)__p;
  if (__p)
  {
    v295 = v340;
    v296 = __p;
    if (v340 != __p)
    {
      v297 = v340;
      do
      {
        v299 = (void *)*((_QWORD *)v297 - 3);
        v297 -= 24;
        v298 = v299;
        if (v299)
        {
          *((_QWORD *)v295 - 2) = v298;
          operator delete(v298);
        }
        v295 = v297;
      }
      while (v297 != v294);
      v296 = __p;
    }
    v340 = v294;
    operator delete(v296);
  }
  v300 = (char *)v341;
  if (v341)
  {
    v301 = v342;
    v302 = v341;
    if (v342 != v341)
    {
      v303 = v342;
      do
      {
        v305 = (void *)*((_QWORD *)v303 - 3);
        v303 -= 24;
        v304 = v305;
        if (v305)
        {
          *((_QWORD *)v301 - 2) = v304;
          operator delete(v304);
        }
        v301 = v303;
      }
      while (v303 != v300);
      v302 = v341;
    }
    v342 = v300;
    operator delete(v302);
  }
  v306 = (char *)v343;
  if (v343)
  {
    v307 = v344;
    if (v344 != v343)
    {
      v308 = v344;
      do
      {
        v310 = (void *)*((_QWORD *)v308 - 3);
        v308 -= 24;
        v309 = v310;
        if (v310)
        {
          *((_QWORD *)v307 - 2) = v309;
          operator delete(v309);
        }
        v307 = v308;
      }
      while (v308 != v306);
    }
    v344 = v306;
    operator delete(v306);
  }
  v311 = (char *)v346;
  if (v346)
  {
    v312 = v347;
    if (v347 != v346)
    {
      v313 = v347;
      do
      {
        v315 = (void *)*((_QWORD *)v313 - 3);
        v313 -= 24;
        v314 = v315;
        if (v315)
        {
          *((_QWORD *)v312 - 2) = v314;
          operator delete(v314);
        }
        v312 = v313;
      }
      while (v313 != v311);
    }
    operator delete(v311);
  }
  sub_2233FADDC(v350);
  sub_2233FADDC(v362[0]);
  sub_2233FADDC(v364[0]);
}

void sub_223EA04D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD *a34,uint64_t a35,char a36)
{
  uint64_t v36;
  void *v38;

  if (*(_BYTE *)(v36 - 168) && *(char *)(v36 - 169) < 0)
    operator delete(*(void **)(v36 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a36);
  sub_22317C838(&a21);
  sub_22317C838(&a24);
  sub_22317C838(&a27);
  sub_22317C838(&a30);
  sub_2233FADDC(a34);
  sub_2233FADDC(*(_QWORD **)(v36 - 248));
  v38 = *(void **)a18;
  sub_2233FADDC(*(_QWORD **)(v36 - 224));
  if (v38)
  {
    *(_QWORD *)(a18 + 8) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

_QWORD **sub_223EA08D0(_QWORD **a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t *v4;
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t *v14;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = sub_223EA09C0(a1, v4, &v14, &v13, *v6);
      if (!*v7)
      {
        v8 = v7;
        v9 = operator new(0x20uLL);
        v9[25] = *v6;
        v10 = v14;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v10;
        *v8 = (uint64_t)v9;
        v11 = (_QWORD *)**a1;
        if (v11)
        {
          *a1 = v11;
          v9 = (_BYTE *)*v8;
        }
        sub_2231A9A8C(a1[1], (uint64_t *)v9);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223EA09AC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_2233FADDC(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223EA09C0(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int8 a5)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *((unsigned __int8 *)a2 + 25), v6 > a5))
  {
    v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v13 = a2;
      do
      {
        v9 = (uint64_t *)v13[2];
        v14 = *v9 == (_QWORD)v13;
        v13 = v9;
      }
      while (v14);
    }
    if (*((unsigned __int8 *)v9 + 25) < a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 25);
          if (v18 <= a5)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_21;
        }
        if (v18 >= a5)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_21:
    *a3 = v17;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (uint64_t *)a2[1];
    do
    {
      v12 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v19 = a2;
    do
    {
      v12 = (uint64_t *)v19[2];
      v14 = *v12 == (_QWORD)v19;
      v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && *((unsigned __int8 *)v12 + 25) <= a5)
  {
    v20 = *v5;
    if (!*v5)
    {
      *a3 = v5;
      return a1 + 1;
    }
    do
    {
      while (1)
      {
        v17 = (uint64_t *)v20;
        v21 = *(unsigned __int8 *)(v20 + 25);
        if (v21 <= a5)
          break;
        v20 = *v17;
        v5 = v17;
        if (!*v17)
          goto LABEL_21;
      }
      if (v21 >= a5)
        break;
      v5 = v17 + 1;
      v20 = v17[1];
    }
    while (v20);
    goto LABEL_21;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

uint64_t *sub_223EA0B54(uint64_t *a1, float32x2_t *a2, uint64_t a3, float *a4, float *a5, float32x4_t a6, float a7, double a8, double a9, float32x4_t a10, double a11, double a12)
{
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float *v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float *v33;
  float32x4_t v34;
  float *v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float *v39;
  float *v40;
  float32x4_t v41;
  float *v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  char *v66;
  int *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  void *v81;
  __int128 *i;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  int32x4_t v100;
  int32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  float32x4_t v127;
  uint64_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int32x4_t v156;
  int32x4_t v157;
  float32x4_t v158;
  int8x16_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t v163;
  uint64_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  float32x4_t v185;
  uint64_t v186;
  float32x4_t v187;
  char *v188;
  int32x4_t v189;
  uint64_t v190;
  float32x4_t v191;
  int32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int32x4_t v215;
  int32x4_t v216;
  float32x4_t v217;
  int8x16_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  uint64_t v222;
  uint64_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  unint64_t v235;
  unint64_t v236;
  void *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  float32x4_t v244;
  uint64_t v245;
  float32x4_t v246;
  char *v247;
  int32x4_t v248;
  uint64_t v249;
  float32x4_t v250;
  int32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int32x4_t v274;
  int32x4_t v275;
  float32x4_t v276;
  int8x16_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  uint64_t v281;
  uint64_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  unint64_t v294;
  unint64_t v295;
  void *v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  float32x4_t v303;
  uint64_t v304;
  float32x4_t v305;
  char *v306;
  int32x4_t v307;
  uint64_t v308;
  float32x4_t v309;
  int32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int32x4_t v333;
  int32x4_t v334;
  float32x4_t v335;
  int8x16_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  uint64_t v340;
  uint64_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  unint64_t v353;
  unint64_t v354;
  void *v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  float32x4_t v362;
  uint64_t v363;
  float32x4_t v364;
  char *v365;
  int32x4_t v366;
  uint64_t v367;
  float32x4_t v368;
  int32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int32x4_t v392;
  int32x4_t v393;
  float32x4_t v394;
  int8x16_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  uint64_t v399;
  uint64_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  _QWORD *v412;
  void *v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  float32x4_t v420;
  uint64_t v421;
  float32x4_t v422;
  char *v423;
  int32x4_t v424;
  uint64_t v425;
  float32x4_t v426;
  int32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  int32x4_t v432;
  int32x4_t v433;
  int32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int8x16_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  uint64_t v457;
  uint64_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  uint64_t *v470;
  unint64_t v471;
  _BYTE *v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  char *v476;
  char *v477;
  float32x4_t v478;
  uint64_t v479;
  float32x4_t v480;
  float32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  char *v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  uint64_t v495;
  int v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int8x16_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t *v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  char *v533;
  char *v534;
  float32x4_t v535;
  uint64_t v536;
  float32x4_t v537;
  float32x4_t v538;
  int32x4_t v539;
  int32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  char *v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  uint64_t v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int32x4_t v564;
  int32x4_t v565;
  float32x4_t v566;
  int8x16_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  uint64_t v571;
  uint64_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  uint64_t *v584;
  unint64_t v585;
  void *v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t v589;
  char *v590;
  char *v591;
  uint64_t v592;
  float32x4_t v593;
  uint64_t v594;
  float32x4_t v595;
  char *v596;
  int32x4_t v597;
  uint64_t v598;
  float32x4_t v599;
  int32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  int32x4_t v605;
  int32x4_t v606;
  int32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  int32x4_t v623;
  int32x4_t v624;
  float32x4_t v625;
  int8x16_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  uint64_t v630;
  uint64_t v631;
  int32x4_t v632;
  int32x4_t v633;
  int32x4_t v634;
  int32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  unint64_t v643;
  unint64_t v644;
  uint64_t *v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  char *v649;
  char *v650;
  uint64_t v651;
  float32x4_t v652;
  uint64_t v653;
  float32x4_t v654;
  char *v655;
  int32x4_t v656;
  uint64_t v657;
  float32x4_t v658;
  int32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  int32x4_t v664;
  int32x4_t v665;
  int32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int32x4_t v682;
  int32x4_t v683;
  float32x4_t v684;
  int8x16_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  uint64_t v689;
  uint64_t v690;
  int32x4_t v691;
  int32x4_t v692;
  int32x4_t v693;
  int32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  unint64_t v702;
  unint64_t v703;
  void *v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  char *v708;
  char *v709;
  float32x4_t v710;
  uint64_t v711;
  float32x4_t v712;
  float32x4_t v713;
  int32x4_t v714;
  int32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  char *v720;
  int32x4_t v721;
  int32x4_t v722;
  int32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int32x4_t v739;
  int32x4_t v740;
  float32x4_t v741;
  int8x16_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  uint64_t v746;
  uint64_t v747;
  int32x4_t v748;
  int32x4_t v749;
  int32x4_t v750;
  int32x4_t v751;
  float32x4_t v752;
  float32x4_t v753;
  char *v754;
  void *v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  char *v759;
  char *v760;
  float32x4_t v761;
  uint64_t v762;
  float32x4_t v763;
  float32x4_t v764;
  int32x4_t v765;
  int32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x4_t v770;
  char *v771;
  int32x4_t v772;
  int32x4_t v773;
  int32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  uint64_t v778;
  int v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  float32x4_t *v790;
  uint64_t v791;
  float32x4_t v792;
  float v793;
  unint64_t v794;
  float *v795;
  uint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  char *v800;
  uint64_t v801;
  uint64_t v802;
  float32x4_t *v803;
  float *v804;
  uint64_t v805;
  __int32 v806;
  float32x4_t v807;
  float v808;
  unint64_t v809;
  float32x4_t *v810;
  float *v811;
  uint64_t v812;
  unint64_t v813;
  uint64_t v814;
  unint64_t v815;
  char *v816;
  float32x4_t *v817;
  char *v818;
  float *v819;
  uint64_t v820;
  float v821;
  float v822;
  float v823;
  float v824;
  float v825;
  unint64_t v826;
  float *v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  unint64_t v832;
  _BYTE *v833;
  float *v834;
  int64_t v835;
  unint64_t v836;
  float *v837;
  int v838;
  unint64_t v839;
  uint64_t v840;
  uint64_t v841;
  _OWORD *v842;
  float *v843;
  uint64_t v844;
  __int128 v845;
  uint64_t v847;
  uint64_t v848;
  uint64_t *v849;
  uint64_t *v850;
  uint64_t *v851;
  void **v852;
  uint64_t v853;
  float32x4_t v854;
  uint64_t v855;
  uint64_t v856;
  float32x4_t v857;
  __int32 v858;
  float **v859;
  void **v860;

  *((_OWORD *)a1 + 6) = xmmword_224656660;
  a1[14] = 0x80000000800000;
  v46.i32[3] = 0;
  *((_OWORD *)a1 + 8) = 0u;
  v859 = (float **)(a1 + 16);
  *((_OWORD *)a1 + 11) = 0u;
  v860 = (void **)(a1 + 22);
  *((_BYTE *)a1 + 120) = a6.f32[0] == 0.0;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  a10.i32[0] = *(_DWORD *)(a3 + 32);
  LODWORD(a12) = *(_DWORD *)(a3 + 36);
  LODWORD(a11) = *(_DWORD *)(a3 + 40);
  v18 = *(float *)(a3 + 44);
  v12.f32[0] = (float)(a10.f32[0] * 0.0) + *(float *)&a11;
  v13.f32[0] = (float)(*(float *)&a12 * 0.0) + v18;
  v14.i32[0] = a2[1].i32[0];
  v19 = a2[2];
  v15.i32[0] = a2[3].i32[0];
  v20 = a2[4];
  v16.i32[0] = a2[5].i32[0];
  v21 = vmul_n_f32(*a2, v12.f32[0]);
  *(float32x2_t *)v22.f32 = vadd_f32(v20, vmla_n_f32(v21, v19, v13.f32[0]));
  v23 = vmul_f32(v14, v12);
  *(float32x2_t *)&v22.u32[2] = vadd_f32(v16, vmla_f32(v23, v13, v15));
  v24 = a10.f32[0] * (float)*(int *)(a3 + 88);
  *(float32x2_t *)a10.f32 = a2[6];
  a10.i32[2] = a2[7].i32[0];
  *(float *)&a11 = v24 + *(float *)&a11;
  *(float32x2_t *)v25.f32 = vadd_f32(v20, vmla_n_f32(vmul_n_f32(*a2, *(float *)&a11), v19, v13.f32[0]));
  *(float32x2_t *)&v25.u32[2] = vadd_f32(v16, vmla_f32(vmul_f32(v14, *(float32x2_t *)&a11), v13, v15));
  v45 = vsubq_f32(v25, v22);
  *(float *)&a12 = (float)(*(float *)&a12 * (float)*(int *)(a3 + 92)) + v18;
  *(float32x2_t *)v26.f32 = vadd_f32(v20, vmla_n_f32(v21, v19, *(float *)&a12));
  *(float32x2_t *)&v26.u32[2] = vadd_f32(v16, vmla_f32(v23, *(float32x2_t *)&a12, v15));
  v27 = vsubq_f32(v26, v22);
  *(_OWORD *)a1 = xmmword_2245F53D0;
  *((_OWORD *)a1 + 1) = xmmword_224657E00;
  *((_OWORD *)a1 + 2) = xmmword_2245C76E0;
  *((_OWORD *)a1 + 3) = xmmword_224657E00;
  v28 = (float *)(a1 + 6);
  *((_OWORD *)a1 + 4) = xmmword_224657FC0;
  *((_OWORD *)a1 + 5) = xmmword_22468FE90;
  v29 = a7 - a6.f32[0];
  v26.f32[0] = (float)(v29 * 0.0) + a6.f32[0];
  v30 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + (float)(*a5 * 0.0)), v27, a4[1] + (float)(a5[1] * 0.0)), v26.f32[0]);
  *((_DWORD *)a1 + 2) = v30.i32[2];
  *a1 = v30.i64[0];
  v31 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + *a5), v27, a4[1] + (float)(a5[1] * 0.0)), v26.f32[0]);
  *((_DWORD *)a1 + 5) = v31.i32[2];
  *(uint64_t *)((char *)a1 + 12) = v31.i64[0];
  v32 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + *a5), v27, a4[1] + a5[1]), v26.f32[0]);
  *((_DWORD *)a1 + 8) = v32.i32[2];
  a1[3] = v32.i64[0];
  v33 = (float *)(a1 + 3);
  v34 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + (float)(*a5 * 0.0)), v27, a4[1] + a5[1]), v26.f32[0]);
  *((_DWORD *)a1 + 11) = v34.i32[2];
  *(uint64_t *)((char *)a1 + 36) = v34.i64[0];
  v35 = (float *)a1 + 9;
  v36 = v29 + a6.f32[0];
  v37 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + (float)(*a5 * 0.0)), v27, a4[1] + (float)(a5[1] * 0.0)), v36);
  *((_DWORD *)a1 + 14) = v37.i32[2];
  a1[6] = v37.i64[0];
  v38 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + *a5), v27, a4[1] + (float)(a5[1] * 0.0)), v36);
  *((_DWORD *)a1 + 17) = v38.i32[2];
  *(uint64_t *)((char *)a1 + 60) = v38.i64[0];
  v39 = (float *)a1 + 15;
  v44 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + *a5), v27, a4[1] + a5[1]), v36);
  *((_DWORD *)a1 + 20) = v44.i32[2];
  a1[9] = v44.i64[0];
  v40 = (float *)(a1 + 9);
  v41 = vmlaq_n_f32(a10, vmlaq_n_f32(vmlaq_n_f32(v22, v45, *a4 + (float)(*a5 * 0.0)), v27, a4[1] + a5[1]), v36);
  *((_DWORD *)a1 + 23) = v41.i32[2];
  *(uint64_t *)((char *)a1 + 84) = v41.i64[0];
  v42 = (float *)a1 + 21;
  v852 = (void **)(a1 + 19);
  v46.i32[0] = *((_DWORD *)a1 + 1);
  v43 = fminf(*(float *)a1, 3.4028e38);
  v44.f32[0] = fmaxf(*(float *)a1, -3.4028e38);
  v45.f32[0] = fminf(v46.f32[0], 3.4028e38);
  v46.f32[0] = fmaxf(v46.f32[0], -3.4028e38);
  v27.i32[0] = *((_DWORD *)a1 + 2);
  v47 = fminf(v27.f32[0], 3.4028e38);
  v48 = fmaxf(v27.f32[0], -3.4028e38);
  v848 = (uint64_t)a1 + 12;
  v849 = a1 + 3;
  v49 = *((float *)a1 + 3);
  if (v49 < v43)
    v43 = *((float *)a1 + 3);
  if (v44.f32[0] < v49)
    v44.i32[0] = *((_DWORD *)a1 + 3);
  v50 = *((float *)a1 + 4);
  v51 = *((float *)a1 + 5);
  if (v50 < v45.f32[0])
    v45.i32[0] = *((_DWORD *)a1 + 4);
  if (v46.f32[0] < v50)
    v46.i32[0] = *((_DWORD *)a1 + 4);
  if (v51 < v47)
    v47 = *((float *)a1 + 5);
  if (v48 < v51)
    v48 = *((float *)a1 + 5);
  if (*v33 < v43)
    v43 = *v33;
  if (v44.f32[0] < *v33)
    v44.f32[0] = *v33;
  v52 = *((float *)a1 + 7);
  v53 = *((float *)a1 + 8);
  if (v52 < v45.f32[0])
    v45.i32[0] = *((_DWORD *)a1 + 7);
  if (v46.f32[0] < v52)
    v46.i32[0] = *((_DWORD *)a1 + 7);
  if (v53 < v47)
    v47 = *((float *)a1 + 8);
  if (v48 < v53)
    v48 = *((float *)a1 + 8);
  v847 = (uint64_t)a1 + 36;
  if (*v35 < v43)
    v43 = *v35;
  if (v44.f32[0] < *v35)
    v44.f32[0] = *v35;
  v54 = *((float *)a1 + 10);
  v55 = *((float *)a1 + 11);
  if (v54 < v45.f32[0])
    v45.i32[0] = *((_DWORD *)a1 + 10);
  if (v46.f32[0] < v54)
    v46.i32[0] = *((_DWORD *)a1 + 10);
  if (v55 < v47)
    v47 = *((float *)a1 + 11);
  if (v48 < v55)
    v48 = *((float *)a1 + 11);
  v851 = a1 + 6;
  if (*v28 < v43)
    v43 = *v28;
  if (v44.f32[0] < *v28)
    v44.f32[0] = *v28;
  v56 = *((float *)a1 + 13);
  v57 = *((float *)a1 + 14);
  if (v56 < v45.f32[0])
    v45.i32[0] = *((_DWORD *)a1 + 13);
  if (v46.f32[0] < v56)
    v46.i32[0] = *((_DWORD *)a1 + 13);
  if (v57 < v47)
    v47 = *((float *)a1 + 14);
  if (v48 < v57)
    v48 = *((float *)a1 + 14);
  v853 = (uint64_t)a1 + 60;
  if (*v39 < v43)
    v43 = *v39;
  if (v44.f32[0] < *v39)
    v44.f32[0] = *v39;
  v58 = *((float *)a1 + 16);
  v59 = *((float *)a1 + 17);
  if (v58 < v45.f32[0])
    v45.i32[0] = *((_DWORD *)a1 + 16);
  if (v46.f32[0] < v58)
    v46.i32[0] = *((_DWORD *)a1 + 16);
  if (v59 < v47)
    v47 = *((float *)a1 + 17);
  if (v48 < v59)
    v48 = *((float *)a1 + 17);
  v850 = a1 + 9;
  if (*v40 < v43)
    v43 = *v40;
  if (v44.f32[0] < *v40)
    v44.f32[0] = *v40;
  v60 = *((float *)a1 + 19);
  v61 = *((float *)a1 + 20);
  if (v60 < v45.f32[0])
    v45.i32[0] = *((_DWORD *)a1 + 19);
  if (v46.f32[0] < v60)
    v46.i32[0] = *((_DWORD *)a1 + 19);
  if (v61 < v47)
    v47 = *((float *)a1 + 20);
  if (v48 < v61)
    v48 = *((float *)a1 + 20);
  v856 = (uint64_t)a1 + 84;
  v62 = *v42;
  if (*v42 < v43)
    v43 = *v42;
  *((float *)a1 + 24) = v43;
  if (v44.f32[0] < v62)
    v44.f32[0] = v62;
  *((_DWORD *)a1 + 27) = v44.i32[0];
  v63 = *((float *)a1 + 22);
  v64 = *((float *)a1 + 23);
  if (v63 < v45.f32[0])
    v45.i32[0] = *((_DWORD *)a1 + 22);
  *((_DWORD *)a1 + 25) = v45.i32[0];
  if (v46.f32[0] >= v63)
    v63 = v46.f32[0];
  *((float *)a1 + 28) = v63;
  if (v64 < v47)
    v47 = v64;
  *((float *)a1 + 26) = v47;
  if (v48 >= v64)
    v65 = v48;
  else
    v65 = v64;
  *((float *)a1 + 29) = v65;
  v66 = (char *)a1[23];
  v67 = &dword_22468FEA0;
  do
  {
    while (1)
    {
      v69 = (uint64_t *)((char *)a1 + 12 * *v67);
      v70 = a1[24];
      if ((unint64_t)v66 >= v70)
        break;
      v68 = *v69;
      *((_DWORD *)v66 + 2) = *((_DWORD *)v69 + 2);
      *(_QWORD *)v66 = v68;
      v66 += 12;
      a1[23] = (uint64_t)v66;
      if (++v67 == &dword_22468FEE0)
        goto LABEL_108;
    }
    v71 = (char *)*v860;
    v72 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (_BYTE *)*v860) >> 2);
    v73 = v72 + 1;
    if (v72 + 1 > 0x1555555555555555)
LABEL_391:
      sub_22316E078();
    v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)v71) >> 2);
    if (2 * v74 > v73)
      v73 = 2 * v74;
    if (v74 >= 0xAAAAAAAAAAAAAAALL)
      v75 = 0x1555555555555555;
    else
      v75 = v73;
    if (v75)
    {
      if (v75 > 0x1555555555555555)
        goto LABEL_390;
      v76 = (char *)operator new(12 * v75);
    }
    else
    {
      v76 = 0;
    }
    v77 = &v76[12 * v72];
    *(_QWORD *)v77 = *v69;
    *((_DWORD *)v77 + 2) = *((_DWORD *)v69 + 2);
    if (v66 == v71)
    {
      v81 = v66;
      v66 = v77 + 12;
      a1[22] = (uint64_t)v77;
      a1[23] = (uint64_t)(v77 + 12);
      a1[24] = (uint64_t)&v76[12 * v75];
      if (v81)
        goto LABEL_103;
    }
    else
    {
      v78 = &v76[12 * v72];
      do
      {
        v79 = *(_QWORD *)(v66 - 12);
        v66 -= 12;
        v80 = *((_DWORD *)v66 + 2);
        *(_QWORD *)(v78 - 12) = v79;
        v78 -= 12;
        *((_DWORD *)v78 + 2) = v80;
      }
      while (v66 != v71);
      v81 = *v860;
      v66 = v77 + 12;
      a1[22] = (uint64_t)v78;
      a1[23] = (uint64_t)(v77 + 12);
      a1[24] = (uint64_t)&v76[12 * v75];
      if (v81)
LABEL_103:
        operator delete(v81);
    }
    a1[23] = (uint64_t)v66;
    ++v67;
  }
  while (v67 != &dword_22468FEE0);
LABEL_108:
  if (!*((_BYTE *)a1 + 120))
  {
    for (i = (__int128 *)&dword_22468FEE0; i != &xmmword_22468FF00; i = (__int128 *)((char *)i + 4))
    {
      while (1)
      {
        v84 = (uint64_t *)((char *)a1 + 12 * *(unsigned int *)i);
        v85 = a1[24];
        if ((unint64_t)v66 >= v85)
          break;
        v83 = *v84;
        *((_DWORD *)v66 + 2) = *((_DWORD *)v84 + 2);
        *(_QWORD *)v66 = v83;
        a1[23] = (uint64_t)(v66 + 12);
        i = (__int128 *)((char *)i + 4);
        v66 += 12;
        if (i == &xmmword_22468FF00)
          goto LABEL_129;
      }
      v86 = (char *)*v860;
      v87 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (_BYTE *)*v860) >> 2);
      v88 = v87 + 1;
      if (v87 + 1 > 0x1555555555555555)
        goto LABEL_391;
      v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v86) >> 2);
      if (2 * v89 > v88)
        v88 = 2 * v89;
      if (v89 >= 0xAAAAAAAAAAAAAAALL)
        v90 = 0x1555555555555555;
      else
        v90 = v88;
      if (v90)
      {
        if (v90 > 0x1555555555555555)
          goto LABEL_390;
        v91 = (char *)operator new(12 * v90);
      }
      else
      {
        v91 = 0;
      }
      v92 = &v91[12 * v87];
      v93 = &v91[12 * v90];
      *(_QWORD *)v92 = *v84;
      *((_DWORD *)v92 + 2) = *((_DWORD *)v84 + 2);
      v94 = v92 + 12;
      if (v66 == v86)
      {
        a1[22] = (uint64_t)v92;
        a1[23] = (uint64_t)v94;
        a1[24] = (uint64_t)v93;
      }
      else
      {
        do
        {
          v95 = *(_QWORD *)(v66 - 12);
          v66 -= 12;
          v96 = *((_DWORD *)v66 + 2);
          *(_QWORD *)(v92 - 12) = v95;
          v92 -= 12;
          *((_DWORD *)v92 + 2) = v96;
        }
        while (v66 != v86);
        v66 = (char *)a1[22];
        a1[22] = (uint64_t)v92;
        a1[23] = (uint64_t)v94;
        a1[24] = (uint64_t)v93;
        if (!v66)
          goto LABEL_128;
      }
      operator delete(v66);
LABEL_128:
      a1[23] = (uint64_t)v94;
      v66 = v94;
    }
  }
LABEL_129:
  v98 = (char *)a1[26];
  v97 = a1[27];
  if ((unint64_t)v98 < v97)
  {
    a6.i64[0] = *(uint64_t *)((char *)a1 + 84);
    a6.i32[2] = *((_DWORD *)a1 + 23);
    v99 = *a1;
    v44.i64[0] = *a1;
    v44.i32[2] = *((_DWORD *)a1 + 2);
    v100 = (int32x4_t)vsubq_f32(a6, v44);
    v46.i64[0] = a1[6];
    v46.i32[2] = *((_DWORD *)a1 + 14);
    v101 = (int32x4_t)vsubq_f32(v46, v44);
    v102 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v101, v101), (int8x16_t)v101, 0xCuLL);
    v103 = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 0xCuLL);
    v104 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v100, (int8x16_t)v100, 0xCuLL), (int8x16_t)v100, 8uLL), v102), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v100, v100), (int8x16_t)v100, 0xCuLL), (float32x4_t)vextq_s8(v103, (int8x16_t)v101, 8uLL)));
    v105 = vmulq_f32(v104, v104);
    v106 = vaddq_f32(v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1));
    v105.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), v106).u64[0];
    v105.f32[0] = sqrtf(v105.f32[0]);
    *((_DWORD *)v98 + 2) = *((_DWORD *)a1 + 2);
    *(_QWORD *)v98 = v99;
    v107 = *(_QWORD *)v856;
    *((_DWORD *)v98 + 5) = *(_DWORD *)(v856 + 8);
    *(_QWORD *)(v98 + 12) = v107;
    v108 = *v851;
    *((_DWORD *)v98 + 8) = *((_DWORD *)v851 + 2);
    *((_QWORD *)v98 + 3) = v108;
    v106.i64[0] = *(uint64_t *)((char *)a1 + 84);
    v106.i32[2] = *((_DWORD *)a1 + 23);
    v102.i64[0] = *a1;
    v102.i32[2] = *((_DWORD *)a1 + 2);
    v109 = (int32x4_t)vsubq_f32(v106, v102);
    *((_DWORD *)v98 + 11) = v109.i32[2];
    *(_QWORD *)(v98 + 36) = v109.i64[0];
    v102.i64[0] = a1[6];
    v102.i32[2] = *((_DWORD *)a1 + 14);
    v103.i64[0] = *(uint64_t *)((char *)a1 + 84);
    v103.i32[2] = *((_DWORD *)a1 + 23);
    v110 = (int32x4_t)vsubq_f32(v102, (float32x4_t)v103);
    *((_DWORD *)v98 + 14) = v110.i32[2];
    *((_QWORD *)v98 + 6) = v110.i64[0];
    v103.i64[0] = *a1;
    v103.i32[2] = *((_DWORD *)a1 + 2);
    v45.i64[0] = a1[6];
    v45.i32[2] = *((_DWORD *)a1 + 14);
    v111 = (int32x4_t)vdivq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 0));
    v112 = (int32x4_t)vsubq_f32((float32x4_t)v103, v45);
    *((_DWORD *)v98 + 17) = v112.i32[2];
    *(_QWORD *)(v98 + 60) = v112.i64[0];
    *(_QWORD *)(v98 + 108) = v111.i64[0];
    *((_DWORD *)v98 + 29) = v111.i32[2];
    v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL);
    v114 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v111, (int8x16_t)v111, 0xCuLL), (int8x16_t)v111, 8uLL);
    v115 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v109, (int8x16_t)v109, 0xCuLL), (int8x16_t)v109, 8uLL), v113), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v109, v109), (int8x16_t)v109, 0xCuLL), v114));
    v116 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v110, (int8x16_t)v110, 0xCuLL), (int8x16_t)v110, 8uLL), v113), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v110, v110), (int8x16_t)v110, 0xCuLL), v114));
    v117 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v112, (int8x16_t)v112, 0xCuLL), (int8x16_t)v112, 8uLL);
    v118 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL);
    *((_QWORD *)v98 + 9) = v115.i64[0];
    *((_DWORD *)v98 + 20) = v115.i32[2];
    v119 = vsubq_f32(vmulq_f32(v117, v113), vmulq_f32(v118, v114));
    *((_DWORD *)v98 + 23) = v116.i32[2];
    *(_QWORD *)(v98 + 84) = v116.i64[0];
    *((_DWORD *)v98 + 26) = v119.i32[2];
    *((_QWORD *)v98 + 12) = v119.i64[0];
    v120 = (uint64_t *)(v98 + 120);
    goto LABEL_143;
  }
  v121 = (char *)a1[25];
  v122 = 0xEEEEEEEEEEEEEEEFLL * ((v98 - v121) >> 3) + 1;
  if (v122 > 0x222222222222222)
    goto LABEL_394;
  v123 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v97 - (_QWORD)v121) >> 3);
  if (2 * v123 > v122)
    v122 = 2 * v123;
  if (v123 >= 0x111111111111111)
    v124 = 0x222222222222222;
  else
    v124 = v122;
  if (v124 > 0x222222222222222)
    goto LABEL_390;
  v125 = (char *)operator new(120 * v124);
  v126 = &v125[8 * ((v98 - v121) >> 3)];
  v127.i64[0] = *(uint64_t *)((char *)a1 + 84);
  v127.i32[2] = *((_DWORD *)a1 + 23);
  v128 = *a1;
  *(_QWORD *)v126 = *a1;
  v129.i64[0] = v128;
  v129.i32[2] = *((_DWORD *)a1 + 2);
  v130.i64[0] = a1[6];
  v130.i32[2] = *((_DWORD *)a1 + 14);
  v131 = (int32x4_t)vsubq_f32(v127, v129);
  v132 = (int32x4_t)vsubq_f32(v130, v129);
  v133 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v131, (int8x16_t)v131, 0xCuLL), (int8x16_t)v131, 8uLL);
  v134 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v131, v131), (int8x16_t)v131, 0xCuLL);
  v135 = vsubq_f32(vmulq_f32(v133, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v132, v132), (int8x16_t)v132, 0xCuLL)), vmulq_f32(v134, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v132, (int8x16_t)v132, 0xCuLL), (int8x16_t)v132, 8uLL)));
  v136 = vmulq_f32(v135, v135);
  v136.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).u64[0];
  v136.f32[0] = sqrtf(v136.f32[0]);
  v137 = (int32x4_t)vdivq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 0));
  *((_DWORD *)v126 + 2) = v129.i32[2];
  *(_QWORD *)(v126 + 12) = *(_QWORD *)v856;
  *((_DWORD *)v126 + 5) = *(_DWORD *)(v856 + 8);
  *((_QWORD *)v126 + 3) = *v851;
  *((_DWORD *)v126 + 8) = *((_DWORD *)v851 + 2);
  *((_DWORD *)v126 + 11) = v131.i32[2];
  *(_QWORD *)(v126 + 36) = v131.i64[0];
  v138 = (int32x4_t)vsubq_f32(v130, v127);
  *((_DWORD *)v126 + 14) = v138.i32[2];
  *((_QWORD *)v126 + 6) = v138.i64[0];
  v139 = (int32x4_t)vsubq_f32(v129, v130);
  *((_DWORD *)v126 + 17) = v139.i32[2];
  *(_QWORD *)(v126 + 60) = v139.i64[0];
  *((_DWORD *)v126 + 29) = v137.i32[2];
  *(_QWORD *)(v126 + 108) = v137.i64[0];
  v140 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v137, v137), (int8x16_t)v137, 0xCuLL);
  v141 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v137, (int8x16_t)v137, 0xCuLL), (int8x16_t)v137, 8uLL);
  v142 = vsubq_f32(vmulq_f32(v133, v140), vmulq_f32(v134, v141));
  v119 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v138, (int8x16_t)v138, 0xCuLL), (int8x16_t)v138, 8uLL), v140), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v138, v138), (int8x16_t)v138, 0xCuLL), v141));
  v113 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v139, (int8x16_t)v139, 0xCuLL), (int8x16_t)v139, 8uLL);
  v115 = vmulq_f32(v113, v140);
  *((_DWORD *)v126 + 20) = v142.i32[2];
  *((_QWORD *)v126 + 9) = v142.i64[0];
  v118 = vsubq_f32(v115, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v139, v139), (int8x16_t)v139, 0xCuLL), v141));
  *((_DWORD *)v126 + 23) = v119.i32[2];
  *(_QWORD *)(v126 + 84) = v119.i64[0];
  *((_DWORD *)v126 + 26) = v118.i32[2];
  *((_QWORD *)v126 + 12) = v118.i64[0];
  v120 = (uint64_t *)(v126 + 120);
  if (v98 != v121)
  {
    do
    {
      v143 = *((_QWORD *)v98 - 15);
      v98 -= 120;
      v144 = *((_DWORD *)v98 + 2);
      *((_QWORD *)v126 - 15) = v143;
      v126 -= 120;
      *((_DWORD *)v126 + 2) = v144;
      v145 = *(_QWORD *)(v98 + 12);
      *((_DWORD *)v126 + 5) = *((_DWORD *)v98 + 5);
      *(_QWORD *)(v126 + 12) = v145;
      v146 = *((_QWORD *)v98 + 3);
      *((_DWORD *)v126 + 8) = *((_DWORD *)v98 + 8);
      *((_QWORD *)v126 + 3) = v146;
      v147 = *(_QWORD *)(v98 + 36);
      *((_DWORD *)v126 + 11) = *((_DWORD *)v98 + 11);
      *(_QWORD *)(v126 + 36) = v147;
      v148 = *((_QWORD *)v98 + 6);
      *((_DWORD *)v126 + 14) = *((_DWORD *)v98 + 14);
      *((_QWORD *)v126 + 6) = v148;
      v149 = *(_QWORD *)(v98 + 60);
      *((_DWORD *)v126 + 17) = *((_DWORD *)v98 + 17);
      *(_QWORD *)(v126 + 60) = v149;
      v150 = *((_QWORD *)v98 + 9);
      *((_DWORD *)v126 + 20) = *((_DWORD *)v98 + 20);
      *((_QWORD *)v126 + 9) = v150;
      v151 = *(_QWORD *)(v98 + 84);
      *((_DWORD *)v126 + 23) = *((_DWORD *)v98 + 23);
      *(_QWORD *)(v126 + 84) = v151;
      v152 = *((_QWORD *)v98 + 12);
      *((_DWORD *)v126 + 26) = *((_DWORD *)v98 + 26);
      *((_QWORD *)v126 + 12) = v152;
      v153 = *(_QWORD *)(v98 + 108);
      *((_DWORD *)v126 + 29) = *((_DWORD *)v98 + 29);
      *(_QWORD *)(v126 + 108) = v153;
    }
    while (v98 != v121);
    v98 = v121;
  }
  a1[25] = (uint64_t)v126;
  a1[26] = (uint64_t)v120;
  a1[27] = (uint64_t)&v125[120 * v124];
  if (v98)
    operator delete(v98);
LABEL_143:
  a1[26] = (uint64_t)v120;
  v154 = a1[27];
  if ((unint64_t)v120 >= v154)
  {
    v178 = (uint64_t *)a1[25];
    v179 = 0xEEEEEEEEEEEEEEEFLL * (v120 - v178) + 1;
    if (v179 > 0x222222222222222)
      goto LABEL_394;
    v180 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v154 - (_QWORD)v178) >> 3);
    if (2 * v180 > v179)
      v179 = 2 * v180;
    if (v180 >= 0x111111111111111)
      v181 = 0x222222222222222;
    else
      v181 = v179;
    if (v181 > 0x222222222222222)
      goto LABEL_390;
    v182 = (char *)operator new(120 * v181);
    v183 = &v182[8 * (v120 - v178)];
    v184 = *(_QWORD *)v848;
    *(_QWORD *)v183 = *(_QWORD *)v848;
    v185.i64[0] = v184;
    v185.i32[2] = *(_DWORD *)(v848 + 8);
    v186 = *v851;
    *(_QWORD *)(v183 + 12) = *v851;
    v187.i64[0] = v186;
    v187.i32[2] = *((_DWORD *)v851 + 2);
    v188 = &v182[120 * v181];
    v189 = (int32x4_t)vsubq_f32(v187, v185);
    v190 = *(_QWORD *)v853;
    *((_QWORD *)v183 + 3) = *(_QWORD *)v853;
    v191.i64[0] = v190;
    v191.i32[2] = *(_DWORD *)(v853 + 8);
    v192 = (int32x4_t)vsubq_f32(v191, v185);
    v193 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v189, (int8x16_t)v189, 0xCuLL), (int8x16_t)v189, 8uLL);
    v194 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v189, v189), (int8x16_t)v189, 0xCuLL);
    v195 = vsubq_f32(vmulq_f32(v193, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v192, v192), (int8x16_t)v192, 0xCuLL)), vmulq_f32(v194, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v192, (int8x16_t)v192, 0xCuLL), (int8x16_t)v192, 8uLL)));
    v196 = vmulq_f32(v195, v195);
    v196.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v196, 2), vaddq_f32(v196, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v196.f32, 1))).u64[0];
    v196.f32[0] = sqrtf(v196.f32[0]);
    v197 = (int32x4_t)vdivq_f32(v195, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v196.f32, 0));
    *((_DWORD *)v183 + 2) = *(_DWORD *)(v848 + 8);
    *((_DWORD *)v183 + 5) = *((_DWORD *)v851 + 2);
    *((_DWORD *)v183 + 8) = *(_DWORD *)(v853 + 8);
    *((_DWORD *)v183 + 11) = v189.i32[2];
    *(_QWORD *)(v183 + 36) = v189.i64[0];
    v198 = (int32x4_t)vsubq_f32(v191, v187);
    *((_DWORD *)v183 + 14) = v198.i32[2];
    *((_QWORD *)v183 + 6) = v198.i64[0];
    v199 = (int32x4_t)vsubq_f32(v185, v191);
    *((_DWORD *)v183 + 17) = v199.i32[2];
    *(_QWORD *)(v183 + 60) = v199.i64[0];
    *((_DWORD *)v183 + 29) = v197.i32[2];
    *(_QWORD *)(v183 + 108) = v197.i64[0];
    v200 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v197, v197), (int8x16_t)v197, 0xCuLL);
    v201 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v197, (int8x16_t)v197, 0xCuLL), (int8x16_t)v197, 8uLL);
    v202 = vsubq_f32(vmulq_f32(v193, v200), vmulq_f32(v194, v201));
    v174 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v198, (int8x16_t)v198, 0xCuLL), (int8x16_t)v198, 8uLL), v200), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v198, v198), (int8x16_t)v198, 0xCuLL), v201));
    v169 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v199, (int8x16_t)v199, 0xCuLL), (int8x16_t)v199, 8uLL);
    v171 = vmulq_f32(v169, v200);
    *((_DWORD *)v183 + 20) = v202.i32[2];
    *((_QWORD *)v183 + 9) = v202.i64[0];
    v175 = vsubq_f32(v171, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v199, v199), (int8x16_t)v199, 0xCuLL), v201));
    *((_DWORD *)v183 + 23) = v174.i32[2];
    *(_QWORD *)(v183 + 84) = v174.i64[0];
    *((_DWORD *)v183 + 26) = v175.i32[2];
    *((_QWORD *)v183 + 12) = v175.i64[0];
    v176 = (unint64_t)(v183 + 120);
    if (v120 == v178)
    {
      a1[25] = (uint64_t)v183;
      a1[26] = v176;
      v178 = v120;
      a1[27] = (uint64_t)v188;
    }
    else
    {
      do
      {
        v203 = *(v120 - 15);
        v120 -= 15;
        v204 = *((_DWORD *)v120 + 2);
        *((_QWORD *)v183 - 15) = v203;
        v183 -= 120;
        *((_DWORD *)v183 + 2) = v204;
        v205 = *(uint64_t *)((char *)v120 + 12);
        *((_DWORD *)v183 + 5) = *((_DWORD *)v120 + 5);
        *(_QWORD *)(v183 + 12) = v205;
        v206 = v120[3];
        *((_DWORD *)v183 + 8) = *((_DWORD *)v120 + 8);
        *((_QWORD *)v183 + 3) = v206;
        v207 = *(uint64_t *)((char *)v120 + 36);
        *((_DWORD *)v183 + 11) = *((_DWORD *)v120 + 11);
        *(_QWORD *)(v183 + 36) = v207;
        v208 = v120[6];
        *((_DWORD *)v183 + 14) = *((_DWORD *)v120 + 14);
        *((_QWORD *)v183 + 6) = v208;
        v209 = *(uint64_t *)((char *)v120 + 60);
        *((_DWORD *)v183 + 17) = *((_DWORD *)v120 + 17);
        *(_QWORD *)(v183 + 60) = v209;
        v210 = v120[9];
        *((_DWORD *)v183 + 20) = *((_DWORD *)v120 + 20);
        *((_QWORD *)v183 + 9) = v210;
        v211 = *(uint64_t *)((char *)v120 + 84);
        *((_DWORD *)v183 + 23) = *((_DWORD *)v120 + 23);
        *(_QWORD *)(v183 + 84) = v211;
        v212 = v120[12];
        *((_DWORD *)v183 + 26) = *((_DWORD *)v120 + 26);
        *((_QWORD *)v183 + 12) = v212;
        v213 = *(uint64_t *)((char *)v120 + 108);
        *((_DWORD *)v183 + 29) = *((_DWORD *)v120 + 29);
        *(_QWORD *)(v183 + 108) = v213;
      }
      while (v120 != v178);
      a1[25] = (uint64_t)v183;
      a1[26] = v176;
      a1[27] = (uint64_t)v188;
      if (!v178)
      {
        a1[26] = v176;
        v177 = a1[27];
        if (v176 >= v177)
          goto LABEL_161;
        goto LABEL_157;
      }
    }
    operator delete(v178);
    a1[26] = v176;
    v177 = a1[27];
    if (v176 >= v177)
      goto LABEL_161;
LABEL_157:
    v175.i64[0] = *(_QWORD *)v853;
    v175.i32[2] = *(_DWORD *)(v853 + 8);
    v214 = *v849;
    v174.i64[0] = *v849;
    v174.i32[2] = *((_DWORD *)v849 + 2);
    v215 = (int32x4_t)vsubq_f32(v175, v174);
    v171.i64[0] = *v850;
    v171.i32[2] = *((_DWORD *)v850 + 2);
    v216 = (int32x4_t)vsubq_f32(v171, v174);
    v217 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v216, v216), (int8x16_t)v216, 0xCuLL);
    v218 = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 0xCuLL);
    v219 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v215, (int8x16_t)v215, 0xCuLL), (int8x16_t)v215, 8uLL), v217), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v215, v215), (int8x16_t)v215, 0xCuLL), (float32x4_t)vextq_s8(v218, (int8x16_t)v216, 8uLL)));
    v220 = vmulq_f32(v219, v219);
    v221 = vaddq_f32(v220, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v220.f32, 1));
    v220.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v220, 2), v221).u64[0];
    v220.f32[0] = sqrtf(v220.f32[0]);
    *(_DWORD *)(v176 + 8) = *((_DWORD *)v849 + 2);
    *(_QWORD *)v176 = v214;
    v222 = *(_QWORD *)v853;
    *(_DWORD *)(v176 + 20) = *(_DWORD *)(v853 + 8);
    *(_QWORD *)(v176 + 12) = v222;
    v223 = *v850;
    *(_DWORD *)(v176 + 32) = *((_DWORD *)v850 + 2);
    *(_QWORD *)(v176 + 24) = v223;
    v221.i64[0] = *(_QWORD *)v853;
    v221.i32[2] = *(_DWORD *)(v853 + 8);
    v217.i64[0] = *v849;
    v217.i32[2] = *((_DWORD *)v849 + 2);
    v224 = (int32x4_t)vsubq_f32(v221, v217);
    *(_DWORD *)(v176 + 44) = v224.i32[2];
    *(_QWORD *)(v176 + 36) = v224.i64[0];
    v217.i64[0] = *v850;
    v217.i32[2] = *((_DWORD *)v850 + 2);
    v218.i64[0] = *(_QWORD *)v853;
    v218.i32[2] = *(_DWORD *)(v853 + 8);
    v225 = (int32x4_t)vsubq_f32(v217, (float32x4_t)v218);
    *(_DWORD *)(v176 + 56) = v225.i32[2];
    *(_QWORD *)(v176 + 48) = v225.i64[0];
    v218.i64[0] = *v849;
    v218.i32[2] = *((_DWORD *)v849 + 2);
    v169.i64[0] = *v850;
    v169.i32[2] = *((_DWORD *)v850 + 2);
    v226 = (int32x4_t)vdivq_f32(v219, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v220.f32, 0));
    v227 = (int32x4_t)vsubq_f32((float32x4_t)v218, v169);
    *(_DWORD *)(v176 + 68) = v227.i32[2];
    *(_QWORD *)(v176 + 60) = v227.i64[0];
    *(_QWORD *)(v176 + 108) = v226.i64[0];
    *(_DWORD *)(v176 + 116) = v226.i32[2];
    v228 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v226, v226), (int8x16_t)v226, 0xCuLL);
    v229 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v226, (int8x16_t)v226, 0xCuLL), (int8x16_t)v226, 8uLL);
    v230 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v224, (int8x16_t)v224, 0xCuLL), (int8x16_t)v224, 8uLL), v228), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v224, v224), (int8x16_t)v224, 0xCuLL), v229));
    v231 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v225, (int8x16_t)v225, 0xCuLL), (int8x16_t)v225, 8uLL), v228), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v225, v225), (int8x16_t)v225, 0xCuLL), v229));
    v232 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v227, (int8x16_t)v227, 0xCuLL), (int8x16_t)v227, 8uLL);
    v233 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v227, v227), (int8x16_t)v227, 0xCuLL);
    *(_QWORD *)(v176 + 72) = v230.i64[0];
    *(_DWORD *)(v176 + 80) = v230.i32[2];
    v234 = vsubq_f32(vmulq_f32(v232, v228), vmulq_f32(v233, v229));
    *(_DWORD *)(v176 + 92) = v231.i32[2];
    *(_QWORD *)(v176 + 84) = v231.i64[0];
    *(_DWORD *)(v176 + 104) = v234.i32[2];
    *(_QWORD *)(v176 + 96) = v234.i64[0];
    v235 = v176 + 120;
    a1[26] = v176 + 120;
    v236 = a1[27];
    if (v176 + 120 < v236)
      goto LABEL_172;
    goto LABEL_176;
  }
  v119.i64[0] = *v851;
  v119.i32[2] = *((_DWORD *)v851 + 2);
  v155 = *(_QWORD *)v848;
  v118.i64[0] = *(_QWORD *)v848;
  v118.i32[2] = *(_DWORD *)(v848 + 8);
  v156 = (int32x4_t)vsubq_f32(v119, v118);
  v115.i64[0] = *(_QWORD *)v853;
  v115.i32[2] = *(_DWORD *)(v853 + 8);
  v157 = (int32x4_t)vsubq_f32(v115, v118);
  v158 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v157, v157), (int8x16_t)v157, 0xCuLL);
  v159 = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 0xCuLL);
  v160 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v156, (int8x16_t)v156, 0xCuLL), (int8x16_t)v156, 8uLL), v158), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v156, v156), (int8x16_t)v156, 0xCuLL), (float32x4_t)vextq_s8(v159, (int8x16_t)v157, 8uLL)));
  v161 = vmulq_f32(v160, v160);
  v162 = vaddq_f32(v161, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v161.f32, 1));
  v161.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v161, 2), v162).u64[0];
  v161.f32[0] = sqrtf(v161.f32[0]);
  *((_DWORD *)v120 + 2) = *(_DWORD *)(v848 + 8);
  *v120 = v155;
  v163 = *v851;
  *((_DWORD *)v120 + 5) = *((_DWORD *)v851 + 2);
  *(uint64_t *)((char *)v120 + 12) = v163;
  v164 = *(_QWORD *)v853;
  *((_DWORD *)v120 + 8) = *(_DWORD *)(v853 + 8);
  v120[3] = v164;
  v162.i64[0] = *v851;
  v162.i32[2] = *((_DWORD *)v851 + 2);
  v158.i64[0] = *(_QWORD *)v848;
  v158.i32[2] = *(_DWORD *)(v848 + 8);
  v165 = (int32x4_t)vsubq_f32(v162, v158);
  *((_DWORD *)v120 + 11) = v165.i32[2];
  *(uint64_t *)((char *)v120 + 36) = v165.i64[0];
  v158.i64[0] = *(_QWORD *)v853;
  v158.i32[2] = *(_DWORD *)(v853 + 8);
  v159.i64[0] = *v851;
  v159.i32[2] = *((_DWORD *)v851 + 2);
  v166 = (int32x4_t)vsubq_f32(v158, (float32x4_t)v159);
  *((_DWORD *)v120 + 14) = v166.i32[2];
  v120[6] = v166.i64[0];
  v159.i64[0] = *(_QWORD *)v848;
  v159.i32[2] = *(_DWORD *)(v848 + 8);
  v113.i64[0] = *(_QWORD *)v853;
  v113.i32[2] = *(_DWORD *)(v853 + 8);
  v167 = (int32x4_t)vdivq_f32(v160, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v161.f32, 0));
  v168 = (int32x4_t)vsubq_f32((float32x4_t)v159, v113);
  *((_DWORD *)v120 + 17) = v168.i32[2];
  *(uint64_t *)((char *)v120 + 60) = v168.i64[0];
  *(uint64_t *)((char *)v120 + 108) = v167.i64[0];
  *((_DWORD *)v120 + 29) = v167.i32[2];
  v169 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v167, v167), (int8x16_t)v167, 0xCuLL);
  v170 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v167, (int8x16_t)v167, 0xCuLL), (int8x16_t)v167, 8uLL);
  v171 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v165, (int8x16_t)v165, 0xCuLL), (int8x16_t)v165, 8uLL), v169), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v165, v165), (int8x16_t)v165, 0xCuLL), v170));
  v172 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v166, (int8x16_t)v166, 0xCuLL), (int8x16_t)v166, 8uLL), v169), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v166, v166), (int8x16_t)v166, 0xCuLL), v170));
  v173 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v168, (int8x16_t)v168, 0xCuLL), (int8x16_t)v168, 8uLL);
  v174 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v168, v168), (int8x16_t)v168, 0xCuLL);
  v120[9] = v171.i64[0];
  *((_DWORD *)v120 + 20) = v171.i32[2];
  v175 = vsubq_f32(vmulq_f32(v173, v169), vmulq_f32(v174, v170));
  *((_DWORD *)v120 + 23) = v172.i32[2];
  *(uint64_t *)((char *)v120 + 84) = v172.i64[0];
  *((_DWORD *)v120 + 26) = v175.i32[2];
  v120[12] = v175.i64[0];
  v176 = (unint64_t)(v120 + 15);
  a1[26] = (uint64_t)(v120 + 15);
  v177 = a1[27];
  if ((unint64_t)(v120 + 15) < v177)
    goto LABEL_157;
LABEL_161:
  v237 = (void *)a1[25];
  v238 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v176 - (_QWORD)v237) >> 3) + 1;
  if (v238 > 0x222222222222222)
    goto LABEL_394;
  v239 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v177 - (_QWORD)v237) >> 3);
  if (2 * v239 > v238)
    v238 = 2 * v239;
  if (v239 >= 0x111111111111111)
    v240 = 0x222222222222222;
  else
    v240 = v238;
  if (v240 > 0x222222222222222)
    goto LABEL_390;
  v241 = (char *)operator new(120 * v240);
  v242 = &v241[8 * ((uint64_t)(v176 - (_QWORD)v237) >> 3)];
  v243 = *v849;
  *(_QWORD *)v242 = *v849;
  v244.i64[0] = v243;
  v244.i32[2] = *((_DWORD *)v849 + 2);
  v245 = *(_QWORD *)v853;
  *(_QWORD *)(v242 + 12) = *(_QWORD *)v853;
  v246.i64[0] = v245;
  v246.i32[2] = *(_DWORD *)(v853 + 8);
  v247 = &v241[120 * v240];
  v248 = (int32x4_t)vsubq_f32(v246, v244);
  v249 = *v850;
  *((_QWORD *)v242 + 3) = *v850;
  v250.i64[0] = v249;
  v250.i32[2] = *((_DWORD *)v850 + 2);
  v251 = (int32x4_t)vsubq_f32(v250, v244);
  v252 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v248, (int8x16_t)v248, 0xCuLL), (int8x16_t)v248, 8uLL);
  v253 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v248, v248), (int8x16_t)v248, 0xCuLL);
  v254 = vsubq_f32(vmulq_f32(v252, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v251, v251), (int8x16_t)v251, 0xCuLL)), vmulq_f32(v253, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v251, (int8x16_t)v251, 0xCuLL), (int8x16_t)v251, 8uLL)));
  v255 = vmulq_f32(v254, v254);
  v255.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v255, 2), vaddq_f32(v255, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 1))).u64[0];
  v255.f32[0] = sqrtf(v255.f32[0]);
  v256 = (int32x4_t)vdivq_f32(v254, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 0));
  *((_DWORD *)v242 + 2) = *((_DWORD *)v849 + 2);
  *((_DWORD *)v242 + 5) = *(_DWORD *)(v853 + 8);
  *((_DWORD *)v242 + 8) = *((_DWORD *)v850 + 2);
  *((_DWORD *)v242 + 11) = v248.i32[2];
  *(_QWORD *)(v242 + 36) = v248.i64[0];
  v257 = (int32x4_t)vsubq_f32(v250, v246);
  *((_DWORD *)v242 + 14) = v257.i32[2];
  *((_QWORD *)v242 + 6) = v257.i64[0];
  v258 = (int32x4_t)vsubq_f32(v244, v250);
  *((_DWORD *)v242 + 17) = v258.i32[2];
  *(_QWORD *)(v242 + 60) = v258.i64[0];
  *((_DWORD *)v242 + 29) = v256.i32[2];
  *(_QWORD *)(v242 + 108) = v256.i64[0];
  v259 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v256, v256), (int8x16_t)v256, 0xCuLL);
  v260 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v256, (int8x16_t)v256, 0xCuLL), (int8x16_t)v256, 8uLL);
  v261 = vsubq_f32(vmulq_f32(v252, v259), vmulq_f32(v253, v260));
  v233 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v257, (int8x16_t)v257, 0xCuLL), (int8x16_t)v257, 8uLL), v259), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v257, v257), (int8x16_t)v257, 0xCuLL), v260));
  v228 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v258, (int8x16_t)v258, 0xCuLL), (int8x16_t)v258, 8uLL);
  v230 = vmulq_f32(v228, v259);
  *((_DWORD *)v242 + 20) = v261.i32[2];
  *((_QWORD *)v242 + 9) = v261.i64[0];
  v234 = vsubq_f32(v230, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v258, v258), (int8x16_t)v258, 0xCuLL), v260));
  *((_DWORD *)v242 + 23) = v233.i32[2];
  *(_QWORD *)(v242 + 84) = v233.i64[0];
  *((_DWORD *)v242 + 26) = v234.i32[2];
  *((_QWORD *)v242 + 12) = v234.i64[0];
  v235 = (unint64_t)(v242 + 120);
  if ((void *)v176 == v237)
  {
    a1[25] = (uint64_t)v242;
    a1[26] = v235;
    v237 = (void *)v176;
    a1[27] = (uint64_t)v247;
    goto LABEL_175;
  }
  do
  {
    v262 = *(_QWORD *)(v176 - 120);
    v176 -= 120;
    v263 = *(_DWORD *)(v176 + 8);
    *((_QWORD *)v242 - 15) = v262;
    v242 -= 120;
    *((_DWORD *)v242 + 2) = v263;
    v264 = *(_QWORD *)(v176 + 12);
    *((_DWORD *)v242 + 5) = *(_DWORD *)(v176 + 20);
    *(_QWORD *)(v242 + 12) = v264;
    v265 = *(_QWORD *)(v176 + 24);
    *((_DWORD *)v242 + 8) = *(_DWORD *)(v176 + 32);
    *((_QWORD *)v242 + 3) = v265;
    v266 = *(_QWORD *)(v176 + 36);
    *((_DWORD *)v242 + 11) = *(_DWORD *)(v176 + 44);
    *(_QWORD *)(v242 + 36) = v266;
    v267 = *(_QWORD *)(v176 + 48);
    *((_DWORD *)v242 + 14) = *(_DWORD *)(v176 + 56);
    *((_QWORD *)v242 + 6) = v267;
    v268 = *(_QWORD *)(v176 + 60);
    *((_DWORD *)v242 + 17) = *(_DWORD *)(v176 + 68);
    *(_QWORD *)(v242 + 60) = v268;
    v269 = *(_QWORD *)(v176 + 72);
    *((_DWORD *)v242 + 20) = *(_DWORD *)(v176 + 80);
    *((_QWORD *)v242 + 9) = v269;
    v270 = *(_QWORD *)(v176 + 84);
    *((_DWORD *)v242 + 23) = *(_DWORD *)(v176 + 92);
    *(_QWORD *)(v242 + 84) = v270;
    v271 = *(_QWORD *)(v176 + 96);
    *((_DWORD *)v242 + 26) = *(_DWORD *)(v176 + 104);
    *((_QWORD *)v242 + 12) = v271;
    v272 = *(_QWORD *)(v176 + 108);
    *((_DWORD *)v242 + 29) = *(_DWORD *)(v176 + 116);
    *(_QWORD *)(v242 + 108) = v272;
  }
  while ((void *)v176 != v237);
  a1[25] = (uint64_t)v242;
  a1[26] = v235;
  a1[27] = (uint64_t)v247;
  if (v237)
  {
LABEL_175:
    operator delete(v237);
    a1[26] = v235;
    v236 = a1[27];
    if (v235 >= v236)
      goto LABEL_176;
LABEL_172:
    v234.i64[0] = *v850;
    v234.i32[2] = *((_DWORD *)v850 + 2);
    v273 = *(_QWORD *)v847;
    v233.i64[0] = *(_QWORD *)v847;
    v233.i32[2] = *(_DWORD *)(v847 + 8);
    v274 = (int32x4_t)vsubq_f32(v234, v233);
    v230.i64[0] = *(_QWORD *)v856;
    v230.i32[2] = *(_DWORD *)(v856 + 8);
    v275 = (int32x4_t)vsubq_f32(v230, v233);
    v276 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v275, v275), (int8x16_t)v275, 0xCuLL);
    v277 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 0xCuLL);
    v278 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v274, (int8x16_t)v274, 0xCuLL), (int8x16_t)v274, 8uLL), v276), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v274, v274), (int8x16_t)v274, 0xCuLL), (float32x4_t)vextq_s8(v277, (int8x16_t)v275, 8uLL)));
    v279 = vmulq_f32(v278, v278);
    v280 = vaddq_f32(v279, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v279.f32, 1));
    v279.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v279, 2), v280).u64[0];
    v279.f32[0] = sqrtf(v279.f32[0]);
    *(_DWORD *)(v235 + 8) = *(_DWORD *)(v847 + 8);
    *(_QWORD *)v235 = v273;
    v281 = *v850;
    *(_DWORD *)(v235 + 20) = *((_DWORD *)v850 + 2);
    *(_QWORD *)(v235 + 12) = v281;
    v282 = *(_QWORD *)v856;
    *(_DWORD *)(v235 + 32) = *(_DWORD *)(v856 + 8);
    *(_QWORD *)(v235 + 24) = v282;
    v280.i64[0] = *v850;
    v280.i32[2] = *((_DWORD *)v850 + 2);
    v276.i64[0] = *(_QWORD *)v847;
    v276.i32[2] = *(_DWORD *)(v847 + 8);
    v283 = (int32x4_t)vsubq_f32(v280, v276);
    *(_DWORD *)(v235 + 44) = v283.i32[2];
    *(_QWORD *)(v235 + 36) = v283.i64[0];
    v276.i64[0] = *(_QWORD *)v856;
    v276.i32[2] = *(_DWORD *)(v856 + 8);
    v277.i64[0] = *v850;
    v277.i32[2] = *((_DWORD *)v850 + 2);
    v284 = (int32x4_t)vsubq_f32(v276, (float32x4_t)v277);
    *(_DWORD *)(v235 + 56) = v284.i32[2];
    *(_QWORD *)(v235 + 48) = v284.i64[0];
    v277.i64[0] = *(_QWORD *)v847;
    v277.i32[2] = *(_DWORD *)(v847 + 8);
    v228.i64[0] = *(_QWORD *)v856;
    v228.i32[2] = *(_DWORD *)(v856 + 8);
    v285 = (int32x4_t)vdivq_f32(v278, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v279.f32, 0));
    v286 = (int32x4_t)vsubq_f32((float32x4_t)v277, v228);
    *(_DWORD *)(v235 + 68) = v286.i32[2];
    *(_QWORD *)(v235 + 60) = v286.i64[0];
    *(_QWORD *)(v235 + 108) = v285.i64[0];
    *(_DWORD *)(v235 + 116) = v285.i32[2];
    v287 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v285, v285), (int8x16_t)v285, 0xCuLL);
    v288 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v285, (int8x16_t)v285, 0xCuLL), (int8x16_t)v285, 8uLL);
    v289 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v283, (int8x16_t)v283, 0xCuLL), (int8x16_t)v283, 8uLL), v287), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v283, v283), (int8x16_t)v283, 0xCuLL), v288));
    v290 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v284, (int8x16_t)v284, 0xCuLL), (int8x16_t)v284, 8uLL), v287), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v284, v284), (int8x16_t)v284, 0xCuLL), v288));
    v291 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v286, (int8x16_t)v286, 0xCuLL), (int8x16_t)v286, 8uLL);
    v292 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v286, v286), (int8x16_t)v286, 0xCuLL);
    *(_QWORD *)(v235 + 72) = v289.i64[0];
    *(_DWORD *)(v235 + 80) = v289.i32[2];
    v293 = vsubq_f32(vmulq_f32(v291, v287), vmulq_f32(v292, v288));
    *(_DWORD *)(v235 + 92) = v290.i32[2];
    *(_QWORD *)(v235 + 84) = v290.i64[0];
    *(_DWORD *)(v235 + 104) = v293.i32[2];
    *(_QWORD *)(v235 + 96) = v293.i64[0];
    v294 = v235 + 120;
    a1[26] = v235 + 120;
    v295 = a1[27];
    if (v235 + 120 >= v295)
      goto LABEL_191;
LABEL_187:
    v293.i64[0] = *(_QWORD *)v856;
    v293.i32[2] = *(_DWORD *)(v856 + 8);
    v332 = *v851;
    v292.i64[0] = *v851;
    v292.i32[2] = *((_DWORD *)v851 + 2);
    v333 = (int32x4_t)vsubq_f32(v293, v292);
    v289.i64[0] = *(_QWORD *)v853;
    v289.i32[2] = *(_DWORD *)(v853 + 8);
    v334 = (int32x4_t)vsubq_f32(v289, v292);
    v335 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v334, v334), (int8x16_t)v334, 0xCuLL);
    v336 = vextq_s8((int8x16_t)v334, (int8x16_t)v334, 0xCuLL);
    v337 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v333, (int8x16_t)v333, 0xCuLL), (int8x16_t)v333, 8uLL), v335), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v333, v333), (int8x16_t)v333, 0xCuLL), (float32x4_t)vextq_s8(v336, (int8x16_t)v334, 8uLL)));
    v338 = vmulq_f32(v337, v337);
    v339 = vaddq_f32(v338, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v338.f32, 1));
    v338.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v338, 2), v339).u64[0];
    v338.f32[0] = sqrtf(v338.f32[0]);
    *(_DWORD *)(v294 + 8) = *((_DWORD *)v851 + 2);
    *(_QWORD *)v294 = v332;
    v340 = *(_QWORD *)v856;
    *(_DWORD *)(v294 + 20) = *(_DWORD *)(v856 + 8);
    *(_QWORD *)(v294 + 12) = v340;
    v341 = *(_QWORD *)v853;
    *(_DWORD *)(v294 + 32) = *(_DWORD *)(v853 + 8);
    *(_QWORD *)(v294 + 24) = v341;
    v339.i64[0] = *(_QWORD *)v856;
    v339.i32[2] = *(_DWORD *)(v856 + 8);
    v335.i64[0] = *v851;
    v335.i32[2] = *((_DWORD *)v851 + 2);
    v342 = (int32x4_t)vsubq_f32(v339, v335);
    *(_DWORD *)(v294 + 44) = v342.i32[2];
    *(_QWORD *)(v294 + 36) = v342.i64[0];
    v335.i64[0] = *(_QWORD *)v853;
    v335.i32[2] = *(_DWORD *)(v853 + 8);
    v336.i64[0] = *(_QWORD *)v856;
    v336.i32[2] = *(_DWORD *)(v856 + 8);
    v343 = (int32x4_t)vsubq_f32(v335, (float32x4_t)v336);
    *(_DWORD *)(v294 + 56) = v343.i32[2];
    *(_QWORD *)(v294 + 48) = v343.i64[0];
    v336.i64[0] = *v851;
    v336.i32[2] = *((_DWORD *)v851 + 2);
    v287.i64[0] = *(_QWORD *)v853;
    v287.i32[2] = *(_DWORD *)(v853 + 8);
    v344 = (int32x4_t)vdivq_f32(v337, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v338.f32, 0));
    v345 = (int32x4_t)vsubq_f32((float32x4_t)v336, v287);
    *(_DWORD *)(v294 + 68) = v345.i32[2];
    *(_QWORD *)(v294 + 60) = v345.i64[0];
    *(_QWORD *)(v294 + 108) = v344.i64[0];
    *(_DWORD *)(v294 + 116) = v344.i32[2];
    v346 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v344, v344), (int8x16_t)v344, 0xCuLL);
    v347 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v344, (int8x16_t)v344, 0xCuLL), (int8x16_t)v344, 8uLL);
    v348 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v342, (int8x16_t)v342, 0xCuLL), (int8x16_t)v342, 8uLL), v346), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v342, v342), (int8x16_t)v342, 0xCuLL), v347));
    v349 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v343, (int8x16_t)v343, 0xCuLL), (int8x16_t)v343, 8uLL), v346), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v343, v343), (int8x16_t)v343, 0xCuLL), v347));
    v350 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v345, (int8x16_t)v345, 0xCuLL), (int8x16_t)v345, 8uLL);
    v351 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v345, v345), (int8x16_t)v345, 0xCuLL);
    *(_QWORD *)(v294 + 72) = v348.i64[0];
    *(_DWORD *)(v294 + 80) = v348.i32[2];
    v352 = vsubq_f32(vmulq_f32(v350, v346), vmulq_f32(v351, v347));
    *(_DWORD *)(v294 + 92) = v349.i32[2];
    *(_QWORD *)(v294 + 84) = v349.i64[0];
    *(_DWORD *)(v294 + 104) = v352.i32[2];
    *(_QWORD *)(v294 + 96) = v352.i64[0];
    v353 = v294 + 120;
    a1[26] = v294 + 120;
    v354 = a1[27];
    if (v294 + 120 < v354)
      goto LABEL_202;
    goto LABEL_206;
  }
  a1[26] = v235;
  v236 = a1[27];
  if (v235 < v236)
    goto LABEL_172;
LABEL_176:
  v296 = (void *)a1[25];
  v297 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v235 - (_QWORD)v296) >> 3) + 1;
  if (v297 > 0x222222222222222)
    goto LABEL_394;
  v298 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v236 - (_QWORD)v296) >> 3);
  if (2 * v298 > v297)
    v297 = 2 * v298;
  if (v298 >= 0x111111111111111)
    v299 = 0x222222222222222;
  else
    v299 = v297;
  if (v299 > 0x222222222222222)
    goto LABEL_390;
  v300 = (char *)operator new(120 * v299);
  v301 = &v300[8 * ((uint64_t)(v235 - (_QWORD)v296) >> 3)];
  v302 = *(_QWORD *)v847;
  *(_QWORD *)v301 = *(_QWORD *)v847;
  v303.i64[0] = v302;
  v303.i32[2] = *(_DWORD *)(v847 + 8);
  v304 = *v850;
  *(_QWORD *)(v301 + 12) = *v850;
  v305.i64[0] = v304;
  v305.i32[2] = *((_DWORD *)v850 + 2);
  v306 = &v300[120 * v299];
  v307 = (int32x4_t)vsubq_f32(v305, v303);
  v308 = *(_QWORD *)v856;
  *((_QWORD *)v301 + 3) = *(_QWORD *)v856;
  v309.i64[0] = v308;
  v309.i32[2] = *(_DWORD *)(v856 + 8);
  v310 = (int32x4_t)vsubq_f32(v309, v303);
  v311 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v307, (int8x16_t)v307, 0xCuLL), (int8x16_t)v307, 8uLL);
  v312 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v307, v307), (int8x16_t)v307, 0xCuLL);
  v313 = vsubq_f32(vmulq_f32(v311, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v310, v310), (int8x16_t)v310, 0xCuLL)), vmulq_f32(v312, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v310, (int8x16_t)v310, 0xCuLL), (int8x16_t)v310, 8uLL)));
  v314 = vmulq_f32(v313, v313);
  v314.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v314, 2), vaddq_f32(v314, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v314.f32, 1))).u64[0];
  v314.f32[0] = sqrtf(v314.f32[0]);
  v315 = (int32x4_t)vdivq_f32(v313, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v314.f32, 0));
  *((_DWORD *)v301 + 2) = *(_DWORD *)(v847 + 8);
  *((_DWORD *)v301 + 5) = *((_DWORD *)v850 + 2);
  *((_DWORD *)v301 + 8) = *(_DWORD *)(v856 + 8);
  *((_DWORD *)v301 + 11) = v307.i32[2];
  *(_QWORD *)(v301 + 36) = v307.i64[0];
  v316 = (int32x4_t)vsubq_f32(v309, v305);
  *((_DWORD *)v301 + 14) = v316.i32[2];
  *((_QWORD *)v301 + 6) = v316.i64[0];
  v317 = (int32x4_t)vsubq_f32(v303, v309);
  *((_DWORD *)v301 + 17) = v317.i32[2];
  *(_QWORD *)(v301 + 60) = v317.i64[0];
  *((_DWORD *)v301 + 29) = v315.i32[2];
  *(_QWORD *)(v301 + 108) = v315.i64[0];
  v318 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v315, v315), (int8x16_t)v315, 0xCuLL);
  v319 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v315, (int8x16_t)v315, 0xCuLL), (int8x16_t)v315, 8uLL);
  v320 = vsubq_f32(vmulq_f32(v311, v318), vmulq_f32(v312, v319));
  v292 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v316, (int8x16_t)v316, 0xCuLL), (int8x16_t)v316, 8uLL), v318), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v316, v316), (int8x16_t)v316, 0xCuLL), v319));
  v287 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v317, (int8x16_t)v317, 0xCuLL), (int8x16_t)v317, 8uLL);
  v289 = vmulq_f32(v287, v318);
  *((_DWORD *)v301 + 20) = v320.i32[2];
  *((_QWORD *)v301 + 9) = v320.i64[0];
  v293 = vsubq_f32(v289, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v317, v317), (int8x16_t)v317, 0xCuLL), v319));
  *((_DWORD *)v301 + 23) = v292.i32[2];
  *(_QWORD *)(v301 + 84) = v292.i64[0];
  *((_DWORD *)v301 + 26) = v293.i32[2];
  *((_QWORD *)v301 + 12) = v293.i64[0];
  v294 = (unint64_t)(v301 + 120);
  if ((void *)v235 == v296)
  {
    a1[25] = (uint64_t)v301;
    a1[26] = v294;
    v296 = (void *)v235;
    a1[27] = (uint64_t)v306;
    goto LABEL_190;
  }
  do
  {
    v321 = *(_QWORD *)(v235 - 120);
    v235 -= 120;
    v322 = *(_DWORD *)(v235 + 8);
    *((_QWORD *)v301 - 15) = v321;
    v301 -= 120;
    *((_DWORD *)v301 + 2) = v322;
    v323 = *(_QWORD *)(v235 + 12);
    *((_DWORD *)v301 + 5) = *(_DWORD *)(v235 + 20);
    *(_QWORD *)(v301 + 12) = v323;
    v324 = *(_QWORD *)(v235 + 24);
    *((_DWORD *)v301 + 8) = *(_DWORD *)(v235 + 32);
    *((_QWORD *)v301 + 3) = v324;
    v325 = *(_QWORD *)(v235 + 36);
    *((_DWORD *)v301 + 11) = *(_DWORD *)(v235 + 44);
    *(_QWORD *)(v301 + 36) = v325;
    v326 = *(_QWORD *)(v235 + 48);
    *((_DWORD *)v301 + 14) = *(_DWORD *)(v235 + 56);
    *((_QWORD *)v301 + 6) = v326;
    v327 = *(_QWORD *)(v235 + 60);
    *((_DWORD *)v301 + 17) = *(_DWORD *)(v235 + 68);
    *(_QWORD *)(v301 + 60) = v327;
    v328 = *(_QWORD *)(v235 + 72);
    *((_DWORD *)v301 + 20) = *(_DWORD *)(v235 + 80);
    *((_QWORD *)v301 + 9) = v328;
    v329 = *(_QWORD *)(v235 + 84);
    *((_DWORD *)v301 + 23) = *(_DWORD *)(v235 + 92);
    *(_QWORD *)(v301 + 84) = v329;
    v330 = *(_QWORD *)(v235 + 96);
    *((_DWORD *)v301 + 26) = *(_DWORD *)(v235 + 104);
    *((_QWORD *)v301 + 12) = v330;
    v331 = *(_QWORD *)(v235 + 108);
    *((_DWORD *)v301 + 29) = *(_DWORD *)(v235 + 116);
    *(_QWORD *)(v301 + 108) = v331;
  }
  while ((void *)v235 != v296);
  a1[25] = (uint64_t)v301;
  a1[26] = v294;
  a1[27] = (uint64_t)v306;
  if (v296)
  {
LABEL_190:
    operator delete(v296);
    a1[26] = v294;
    v295 = a1[27];
    if (v294 >= v295)
      goto LABEL_191;
    goto LABEL_187;
  }
  a1[26] = v294;
  v295 = a1[27];
  if (v294 < v295)
    goto LABEL_187;
LABEL_191:
  v355 = (void *)a1[25];
  v356 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v294 - (_QWORD)v355) >> 3) + 1;
  if (v356 > 0x222222222222222)
    goto LABEL_394;
  v357 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v295 - (_QWORD)v355) >> 3);
  if (2 * v357 > v356)
    v356 = 2 * v357;
  if (v357 >= 0x111111111111111)
    v358 = 0x222222222222222;
  else
    v358 = v356;
  if (v358 > 0x222222222222222)
    goto LABEL_390;
  v359 = (char *)operator new(120 * v358);
  v360 = &v359[8 * ((uint64_t)(v294 - (_QWORD)v355) >> 3)];
  v361 = *v851;
  *(_QWORD *)v360 = *v851;
  v362.i64[0] = v361;
  v362.i32[2] = *((_DWORD *)v851 + 2);
  v363 = *(_QWORD *)v856;
  *(_QWORD *)(v360 + 12) = *(_QWORD *)v856;
  v364.i64[0] = v363;
  v364.i32[2] = *(_DWORD *)(v856 + 8);
  v365 = &v359[120 * v358];
  v366 = (int32x4_t)vsubq_f32(v364, v362);
  v367 = *(_QWORD *)v853;
  *((_QWORD *)v360 + 3) = *(_QWORD *)v853;
  v368.i64[0] = v367;
  v368.i32[2] = *(_DWORD *)(v853 + 8);
  v369 = (int32x4_t)vsubq_f32(v368, v362);
  v370 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v366, (int8x16_t)v366, 0xCuLL), (int8x16_t)v366, 8uLL);
  v371 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v366, v366), (int8x16_t)v366, 0xCuLL);
  v372 = vsubq_f32(vmulq_f32(v370, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v369, v369), (int8x16_t)v369, 0xCuLL)), vmulq_f32(v371, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v369, (int8x16_t)v369, 0xCuLL), (int8x16_t)v369, 8uLL)));
  v373 = vmulq_f32(v372, v372);
  v373.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v373, 2), vaddq_f32(v373, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v373.f32, 1))).u64[0];
  v373.f32[0] = sqrtf(v373.f32[0]);
  v374 = (int32x4_t)vdivq_f32(v372, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v373.f32, 0));
  *((_DWORD *)v360 + 2) = *((_DWORD *)v851 + 2);
  *((_DWORD *)v360 + 5) = *(_DWORD *)(v856 + 8);
  *((_DWORD *)v360 + 8) = *(_DWORD *)(v853 + 8);
  *((_DWORD *)v360 + 11) = v366.i32[2];
  *(_QWORD *)(v360 + 36) = v366.i64[0];
  v375 = (int32x4_t)vsubq_f32(v368, v364);
  *((_DWORD *)v360 + 14) = v375.i32[2];
  *((_QWORD *)v360 + 6) = v375.i64[0];
  v376 = (int32x4_t)vsubq_f32(v362, v368);
  *((_DWORD *)v360 + 17) = v376.i32[2];
  *(_QWORD *)(v360 + 60) = v376.i64[0];
  *((_DWORD *)v360 + 29) = v374.i32[2];
  *(_QWORD *)(v360 + 108) = v374.i64[0];
  v377 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v374, v374), (int8x16_t)v374, 0xCuLL);
  v378 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v374, (int8x16_t)v374, 0xCuLL), (int8x16_t)v374, 8uLL);
  v379 = vsubq_f32(vmulq_f32(v370, v377), vmulq_f32(v371, v378));
  v351 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v375, (int8x16_t)v375, 0xCuLL), (int8x16_t)v375, 8uLL), v377), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v375, v375), (int8x16_t)v375, 0xCuLL), v378));
  v346 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v376, (int8x16_t)v376, 0xCuLL), (int8x16_t)v376, 8uLL);
  v348 = vmulq_f32(v346, v377);
  *((_DWORD *)v360 + 20) = v379.i32[2];
  *((_QWORD *)v360 + 9) = v379.i64[0];
  v352 = vsubq_f32(v348, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v376, v376), (int8x16_t)v376, 0xCuLL), v378));
  *((_DWORD *)v360 + 23) = v351.i32[2];
  *(_QWORD *)(v360 + 84) = v351.i64[0];
  *((_DWORD *)v360 + 26) = v352.i32[2];
  *((_QWORD *)v360 + 12) = v352.i64[0];
  v353 = (unint64_t)(v360 + 120);
  if ((void *)v294 == v355)
  {
    a1[25] = (uint64_t)v360;
    a1[26] = v353;
    v355 = (void *)v294;
    a1[27] = (uint64_t)v365;
    goto LABEL_205;
  }
  do
  {
    v380 = *(_QWORD *)(v294 - 120);
    v294 -= 120;
    v381 = *(_DWORD *)(v294 + 8);
    *((_QWORD *)v360 - 15) = v380;
    v360 -= 120;
    *((_DWORD *)v360 + 2) = v381;
    v382 = *(_QWORD *)(v294 + 12);
    *((_DWORD *)v360 + 5) = *(_DWORD *)(v294 + 20);
    *(_QWORD *)(v360 + 12) = v382;
    v383 = *(_QWORD *)(v294 + 24);
    *((_DWORD *)v360 + 8) = *(_DWORD *)(v294 + 32);
    *((_QWORD *)v360 + 3) = v383;
    v384 = *(_QWORD *)(v294 + 36);
    *((_DWORD *)v360 + 11) = *(_DWORD *)(v294 + 44);
    *(_QWORD *)(v360 + 36) = v384;
    v385 = *(_QWORD *)(v294 + 48);
    *((_DWORD *)v360 + 14) = *(_DWORD *)(v294 + 56);
    *((_QWORD *)v360 + 6) = v385;
    v386 = *(_QWORD *)(v294 + 60);
    *((_DWORD *)v360 + 17) = *(_DWORD *)(v294 + 68);
    *(_QWORD *)(v360 + 60) = v386;
    v387 = *(_QWORD *)(v294 + 72);
    *((_DWORD *)v360 + 20) = *(_DWORD *)(v294 + 80);
    *((_QWORD *)v360 + 9) = v387;
    v388 = *(_QWORD *)(v294 + 84);
    *((_DWORD *)v360 + 23) = *(_DWORD *)(v294 + 92);
    *(_QWORD *)(v360 + 84) = v388;
    v389 = *(_QWORD *)(v294 + 96);
    *((_DWORD *)v360 + 26) = *(_DWORD *)(v294 + 104);
    *((_QWORD *)v360 + 12) = v389;
    v390 = *(_QWORD *)(v294 + 108);
    *((_DWORD *)v360 + 29) = *(_DWORD *)(v294 + 116);
    *(_QWORD *)(v360 + 108) = v390;
  }
  while ((void *)v294 != v355);
  a1[25] = (uint64_t)v360;
  a1[26] = v353;
  a1[27] = (uint64_t)v365;
  if (v355)
  {
LABEL_205:
    operator delete(v355);
    a1[26] = v353;
    v354 = a1[27];
    if (v353 >= v354)
      goto LABEL_206;
LABEL_202:
    v352.i64[0] = *(_QWORD *)v856;
    v352.i32[2] = *(_DWORD *)(v856 + 8);
    v391 = *(_QWORD *)v853;
    v351.i64[0] = *(_QWORD *)v853;
    v351.i32[2] = *(_DWORD *)(v853 + 8);
    v392 = (int32x4_t)vsubq_f32(v352, v351);
    v348.i64[0] = *v850;
    v348.i32[2] = *((_DWORD *)v850 + 2);
    v393 = (int32x4_t)vsubq_f32(v348, v351);
    v394 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v393, v393), (int8x16_t)v393, 0xCuLL);
    v395 = vextq_s8((int8x16_t)v393, (int8x16_t)v393, 0xCuLL);
    v396 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v392, (int8x16_t)v392, 0xCuLL), (int8x16_t)v392, 8uLL), v394), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v392, v392), (int8x16_t)v392, 0xCuLL), (float32x4_t)vextq_s8(v395, (int8x16_t)v393, 8uLL)));
    v397 = vmulq_f32(v396, v396);
    v398 = vaddq_f32(v397, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v397.f32, 1));
    v397.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v397, 2), v398).u64[0];
    v397.f32[0] = sqrtf(v397.f32[0]);
    *(_DWORD *)(v353 + 8) = *(_DWORD *)(v853 + 8);
    *(_QWORD *)v353 = v391;
    v399 = *(_QWORD *)v856;
    *(_DWORD *)(v353 + 20) = *(_DWORD *)(v856 + 8);
    *(_QWORD *)(v353 + 12) = v399;
    v400 = *v850;
    *(_DWORD *)(v353 + 32) = *((_DWORD *)v850 + 2);
    *(_QWORD *)(v353 + 24) = v400;
    v398.i64[0] = *(_QWORD *)v856;
    v398.i32[2] = *(_DWORD *)(v856 + 8);
    v394.i64[0] = *(_QWORD *)v853;
    v394.i32[2] = *(_DWORD *)(v853 + 8);
    v401 = (int32x4_t)vsubq_f32(v398, v394);
    *(_DWORD *)(v353 + 44) = v401.i32[2];
    *(_QWORD *)(v353 + 36) = v401.i64[0];
    v394.i64[0] = *v850;
    v394.i32[2] = *((_DWORD *)v850 + 2);
    v395.i64[0] = *(_QWORD *)v856;
    v395.i32[2] = *(_DWORD *)(v856 + 8);
    v402 = (int32x4_t)vsubq_f32(v394, (float32x4_t)v395);
    *(_DWORD *)(v353 + 56) = v402.i32[2];
    *(_QWORD *)(v353 + 48) = v402.i64[0];
    v395.i64[0] = *(_QWORD *)v853;
    v395.i32[2] = *(_DWORD *)(v853 + 8);
    v346.i64[0] = *v850;
    v346.i32[2] = *((_DWORD *)v850 + 2);
    v403 = (int32x4_t)vdivq_f32(v396, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v397.f32, 0));
    v404 = (int32x4_t)vsubq_f32((float32x4_t)v395, v346);
    *(_DWORD *)(v353 + 68) = v404.i32[2];
    *(_QWORD *)(v353 + 60) = v404.i64[0];
    *(_QWORD *)(v353 + 108) = v403.i64[0];
    *(_DWORD *)(v353 + 116) = v403.i32[2];
    v405 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v403, v403), (int8x16_t)v403, 0xCuLL);
    v406 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v403, (int8x16_t)v403, 0xCuLL), (int8x16_t)v403, 8uLL);
    v407 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v401, (int8x16_t)v401, 0xCuLL), (int8x16_t)v401, 8uLL), v405), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v401, v401), (int8x16_t)v401, 0xCuLL), v406));
    v408 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v402, (int8x16_t)v402, 0xCuLL), (int8x16_t)v402, 8uLL), v405), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v402, v402), (int8x16_t)v402, 0xCuLL), v406));
    v409 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v404, (int8x16_t)v404, 0xCuLL), (int8x16_t)v404, 8uLL);
    v410 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v404, v404), (int8x16_t)v404, 0xCuLL);
    *(_QWORD *)(v353 + 72) = v407.i64[0];
    *(_DWORD *)(v353 + 80) = v407.i32[2];
    v411 = vsubq_f32(vmulq_f32(v409, v405), vmulq_f32(v410, v406));
    *(_DWORD *)(v353 + 92) = v408.i32[2];
    *(_QWORD *)(v353 + 84) = v408.i64[0];
    *(_DWORD *)(v353 + 104) = v411.i32[2];
    *(_QWORD *)(v353 + 96) = v411.i64[0];
    v412 = (_QWORD *)(v353 + 120);
    a1[26] = v353 + 120;
    if (*((_BYTE *)a1 + 120))
      goto LABEL_311;
LABEL_220:
    v448 = a1[27];
    if ((unint64_t)v412 >= v448)
    {
      v472 = (_BYTE *)a1[25];
      v473 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v412 - v472) >> 3) + 1;
      if (v473 > 0x222222222222222)
        goto LABEL_394;
      v474 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v448 - (_QWORD)v472) >> 3);
      if (2 * v474 > v473)
        v473 = 2 * v474;
      if (v474 >= 0x111111111111111)
        v475 = 0x222222222222222;
      else
        v475 = v473;
      if (v475 > 0x222222222222222)
        goto LABEL_390;
      v476 = (char *)operator new(120 * v475);
      v477 = &v476[8 * (((char *)v412 - v472) >> 3)];
      v478.i64[0] = *(uint64_t *)((char *)a1 + 36);
      v478.i32[2] = *((_DWORD *)a1 + 11);
      v479 = *a1;
      *(_QWORD *)v477 = *a1;
      v480.i64[0] = v479;
      v480.i32[2] = *((_DWORD *)a1 + 2);
      v481.i64[0] = *(uint64_t *)((char *)a1 + 84);
      v481.i32[2] = *((_DWORD *)a1 + 23);
      v482 = (int32x4_t)vsubq_f32(v478, v480);
      v483 = (int32x4_t)vsubq_f32(v481, v480);
      v484 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v482, (int8x16_t)v482, 0xCuLL), (int8x16_t)v482, 8uLL);
      v485 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v482, v482), (int8x16_t)v482, 0xCuLL);
      v486 = vsubq_f32(vmulq_f32(v484, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v483, v483), (int8x16_t)v483, 0xCuLL)), vmulq_f32(v485, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v483, (int8x16_t)v483, 0xCuLL), (int8x16_t)v483, 8uLL)));
      v487 = vmulq_f32(v486, v486);
      v488 = &v476[120 * v475];
      v487.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v487, 2), vaddq_f32(v487, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v487.f32, 1))).u64[0];
      v487.f32[0] = sqrtf(v487.f32[0]);
      v489 = (int32x4_t)vdivq_f32(v486, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v487.f32, 0));
      *((_DWORD *)v477 + 2) = v480.i32[2];
      *(_QWORD *)(v477 + 12) = *(_QWORD *)v847;
      *((_DWORD *)v477 + 5) = *(_DWORD *)(v847 + 8);
      *((_QWORD *)v477 + 3) = *(_QWORD *)v856;
      *((_DWORD *)v477 + 8) = *(_DWORD *)(v856 + 8);
      *((_DWORD *)v477 + 11) = v482.i32[2];
      *(_QWORD *)(v477 + 36) = v482.i64[0];
      v490 = (int32x4_t)vsubq_f32(v481, v478);
      *((_DWORD *)v477 + 14) = v490.i32[2];
      *((_QWORD *)v477 + 6) = v490.i64[0];
      v491 = (int32x4_t)vsubq_f32(v480, v481);
      *((_DWORD *)v477 + 17) = v491.i32[2];
      *(_QWORD *)(v477 + 60) = v491.i64[0];
      *((_DWORD *)v477 + 29) = v489.i32[2];
      *(_QWORD *)(v477 + 108) = v489.i64[0];
      v492 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v489, v489), (int8x16_t)v489, 0xCuLL);
      v493 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v489, (int8x16_t)v489, 0xCuLL), (int8x16_t)v489, 8uLL);
      v494 = vsubq_f32(vmulq_f32(v484, v492), vmulq_f32(v485, v493));
      v469 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v490, (int8x16_t)v490, 0xCuLL), (int8x16_t)v490, 8uLL), v492), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v490, v490), (int8x16_t)v490, 0xCuLL), v493));
      v463 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v491, (int8x16_t)v491, 0xCuLL), (int8x16_t)v491, 8uLL);
      v465 = vmulq_f32(v463, v492);
      *((_DWORD *)v477 + 20) = v494.i32[2];
      *((_QWORD *)v477 + 9) = v494.i64[0];
      v468 = vsubq_f32(v465, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v491, v491), (int8x16_t)v491, 0xCuLL), v493));
      *((_DWORD *)v477 + 23) = v469.i32[2];
      *(_QWORD *)(v477 + 84) = v469.i64[0];
      *((_DWORD *)v477 + 26) = v468.i32[2];
      *((_QWORD *)v477 + 12) = v468.i64[0];
      v470 = (uint64_t *)(v477 + 120);
      if (v412 == (_QWORD *)v472)
      {
        a1[25] = (uint64_t)v477;
        a1[26] = (uint64_t)v470;
        v472 = v412;
        a1[27] = (uint64_t)v488;
      }
      else
      {
        do
        {
          v495 = *(v412 - 15);
          v412 -= 15;
          v496 = *((_DWORD *)v412 + 2);
          *((_QWORD *)v477 - 15) = v495;
          v477 -= 120;
          *((_DWORD *)v477 + 2) = v496;
          v497 = *(_QWORD *)((char *)v412 + 12);
          *((_DWORD *)v477 + 5) = *((_DWORD *)v412 + 5);
          *(_QWORD *)(v477 + 12) = v497;
          v498 = v412[3];
          *((_DWORD *)v477 + 8) = *((_DWORD *)v412 + 8);
          *((_QWORD *)v477 + 3) = v498;
          v499 = *(_QWORD *)((char *)v412 + 36);
          *((_DWORD *)v477 + 11) = *((_DWORD *)v412 + 11);
          *(_QWORD *)(v477 + 36) = v499;
          v500 = v412[6];
          *((_DWORD *)v477 + 14) = *((_DWORD *)v412 + 14);
          *((_QWORD *)v477 + 6) = v500;
          v501 = *(_QWORD *)((char *)v412 + 60);
          *((_DWORD *)v477 + 17) = *((_DWORD *)v412 + 17);
          *(_QWORD *)(v477 + 60) = v501;
          v502 = v412[9];
          *((_DWORD *)v477 + 20) = *((_DWORD *)v412 + 20);
          *((_QWORD *)v477 + 9) = v502;
          v503 = *(_QWORD *)((char *)v412 + 84);
          *((_DWORD *)v477 + 23) = *((_DWORD *)v412 + 23);
          *(_QWORD *)(v477 + 84) = v503;
          v504 = v412[12];
          *((_DWORD *)v477 + 26) = *((_DWORD *)v412 + 26);
          *((_QWORD *)v477 + 12) = v504;
          v505 = *(_QWORD *)((char *)v412 + 108);
          *((_DWORD *)v477 + 29) = *((_DWORD *)v412 + 29);
          *(_QWORD *)(v477 + 108) = v505;
        }
        while (v412 != (_QWORD *)v472);
        a1[25] = (uint64_t)v477;
        a1[26] = (uint64_t)v470;
        a1[27] = (uint64_t)v488;
        if (!v472)
        {
          a1[26] = (uint64_t)v470;
          v471 = a1[27];
          if ((unint64_t)v470 >= v471)
            goto LABEL_238;
          goto LABEL_234;
        }
      }
      operator delete(v472);
      a1[26] = (uint64_t)v470;
      v471 = a1[27];
      if ((unint64_t)v470 >= v471)
        goto LABEL_238;
    }
    else
    {
      v411.i64[0] = *(uint64_t *)((char *)a1 + 36);
      v411.i32[2] = *((_DWORD *)a1 + 11);
      v449 = *a1;
      v410.i64[0] = *a1;
      v410.i32[2] = *((_DWORD *)a1 + 2);
      v407.i64[0] = *(uint64_t *)((char *)a1 + 84);
      v407.i32[2] = *((_DWORD *)a1 + 23);
      v450 = (int32x4_t)vsubq_f32(v411, v410);
      v451 = (int32x4_t)vsubq_f32(v407, v410);
      v452 = vextq_s8((int8x16_t)v451, (int8x16_t)v451, 0xCuLL);
      v453 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v450, (int8x16_t)v450, 0xCuLL), (int8x16_t)v450, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v451, v451), (int8x16_t)v451, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v450, v450), (int8x16_t)v450, 0xCuLL), (float32x4_t)vextq_s8(v452, (int8x16_t)v451, 8uLL)));
      v454 = vmulq_f32(v453, v453);
      v455 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v454.f32, 1);
      v456 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v454, 2);
      v454.i64[0] = vaddq_f32(v456, vaddq_f32(v454, v455)).u64[0];
      v454.f32[0] = sqrtf(v454.f32[0]);
      *((_DWORD *)v412 + 2) = *((_DWORD *)a1 + 2);
      *v412 = v449;
      v457 = *(_QWORD *)v847;
      *((_DWORD *)v412 + 5) = *(_DWORD *)(v847 + 8);
      *(_QWORD *)((char *)v412 + 12) = v457;
      v458 = *(_QWORD *)v856;
      *((_DWORD *)v412 + 8) = *(_DWORD *)(v856 + 8);
      v412[3] = v458;
      v455.i64[0] = *(uint64_t *)((char *)a1 + 36);
      v455.i32[2] = *((_DWORD *)a1 + 11);
      v456.i64[0] = *a1;
      v456.i32[2] = *((_DWORD *)a1 + 2);
      v459 = (int32x4_t)vsubq_f32(v455, v456);
      *((_DWORD *)v412 + 11) = v459.i32[2];
      *(_QWORD *)((char *)v412 + 36) = v459.i64[0];
      v456.i64[0] = *(uint64_t *)((char *)a1 + 84);
      v456.i32[2] = *((_DWORD *)a1 + 23);
      v452.i64[0] = *(uint64_t *)((char *)a1 + 36);
      v452.i32[2] = *((_DWORD *)a1 + 11);
      v460 = (int32x4_t)vsubq_f32(v456, (float32x4_t)v452);
      *((_DWORD *)v412 + 14) = v460.i32[2];
      v412[6] = v460.i64[0];
      v452.i64[0] = *a1;
      v452.i32[2] = *((_DWORD *)a1 + 2);
      v405.i64[0] = *(uint64_t *)((char *)a1 + 84);
      v405.i32[2] = *((_DWORD *)a1 + 23);
      v461 = (int32x4_t)vdivq_f32(v453, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v454.f32, 0));
      v462 = (int32x4_t)vsubq_f32((float32x4_t)v452, v405);
      *((_DWORD *)v412 + 17) = v462.i32[2];
      *(_QWORD *)((char *)v412 + 60) = v462.i64[0];
      *(_QWORD *)((char *)v412 + 108) = v461.i64[0];
      *((_DWORD *)v412 + 29) = v461.i32[2];
      v463 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v461, v461), (int8x16_t)v461, 0xCuLL);
      v464 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v461, (int8x16_t)v461, 0xCuLL), (int8x16_t)v461, 8uLL);
      v465 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v459, (int8x16_t)v459, 0xCuLL), (int8x16_t)v459, 8uLL), v463), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v459, v459), (int8x16_t)v459, 0xCuLL), v464));
      v466 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v460, (int8x16_t)v460, 0xCuLL), (int8x16_t)v460, 8uLL), v463), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v460, v460), (int8x16_t)v460, 0xCuLL), v464));
      v467 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v462, (int8x16_t)v462, 0xCuLL), (int8x16_t)v462, 8uLL);
      v468 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v462, v462), (int8x16_t)v462, 0xCuLL);
      v412[9] = v465.i64[0];
      *((_DWORD *)v412 + 20) = v465.i32[2];
      v469 = vsubq_f32(vmulq_f32(v467, v463), vmulq_f32(v468, v464));
      *((_DWORD *)v412 + 23) = v466.i32[2];
      *(_QWORD *)((char *)v412 + 84) = v466.i64[0];
      *((_DWORD *)v412 + 26) = v469.i32[2];
      v412[12] = v469.i64[0];
      v470 = v412 + 15;
      a1[26] = (uint64_t)(v412 + 15);
      v471 = a1[27];
      if ((unint64_t)(v412 + 15) >= v471)
      {
LABEL_238:
        v529 = (uint64_t *)a1[25];
        v530 = 0xEEEEEEEEEEEEEEEFLL * (v470 - v529) + 1;
        if (v530 > 0x222222222222222)
          goto LABEL_394;
        v531 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v471 - (_QWORD)v529) >> 3);
        if (2 * v531 > v530)
          v530 = 2 * v531;
        if (v531 >= 0x111111111111111)
          v532 = 0x222222222222222;
        else
          v532 = v530;
        if (v532 > 0x222222222222222)
          goto LABEL_390;
        v533 = (char *)operator new(120 * v532);
        v534 = &v533[8 * (v470 - v529)];
        v535.i64[0] = *(uint64_t *)((char *)a1 + 12);
        v535.i32[2] = *((_DWORD *)a1 + 5);
        v536 = *a1;
        *(_QWORD *)(v534 + 12) = *a1;
        v537.i64[0] = v536;
        v537.i32[2] = *((_DWORD *)a1 + 2);
        v538.i64[0] = a1[6];
        v538.i32[2] = *((_DWORD *)a1 + 14);
        v539 = (int32x4_t)vsubq_f32(v537, v535);
        v540 = (int32x4_t)vsubq_f32(v538, v535);
        v541 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v539, (int8x16_t)v539, 0xCuLL), (int8x16_t)v539, 8uLL);
        v542 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v539, v539), (int8x16_t)v539, 0xCuLL);
        v543 = vsubq_f32(vmulq_f32(v541, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v540, v540), (int8x16_t)v540, 0xCuLL)), vmulq_f32(v542, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v540, (int8x16_t)v540, 0xCuLL), (int8x16_t)v540, 8uLL)));
        v544 = vmulq_f32(v543, v543);
        v545 = &v533[120 * v532];
        v544.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v544, 2), vaddq_f32(v544, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v544.f32, 1))).u64[0];
        v544.f32[0] = sqrtf(v544.f32[0]);
        v546 = (int32x4_t)vdivq_f32(v543, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v544.f32, 0));
        *(_QWORD *)v534 = *(_QWORD *)v848;
        *((_DWORD *)v534 + 2) = *(_DWORD *)(v848 + 8);
        *((_DWORD *)v534 + 5) = *((_DWORD *)a1 + 2);
        *((_QWORD *)v534 + 3) = *v851;
        *((_DWORD *)v534 + 8) = *((_DWORD *)v851 + 2);
        *((_DWORD *)v534 + 11) = v539.i32[2];
        *(_QWORD *)(v534 + 36) = v539.i64[0];
        v547 = (int32x4_t)vsubq_f32(v538, v537);
        *((_DWORD *)v534 + 14) = v547.i32[2];
        *((_QWORD *)v534 + 6) = v547.i64[0];
        v548 = (int32x4_t)vsubq_f32(v535, v538);
        *((_DWORD *)v534 + 17) = v548.i32[2];
        *(_QWORD *)(v534 + 60) = v548.i64[0];
        *((_DWORD *)v534 + 29) = v546.i32[2];
        *(_QWORD *)(v534 + 108) = v546.i64[0];
        v549 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v546, v546), (int8x16_t)v546, 0xCuLL);
        v550 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v546, (int8x16_t)v546, 0xCuLL), (int8x16_t)v546, 8uLL);
        v551 = vsubq_f32(vmulq_f32(v541, v549), vmulq_f32(v542, v550));
        v525 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v547, (int8x16_t)v547, 0xCuLL), (int8x16_t)v547, 8uLL), v549), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v547, v547), (int8x16_t)v547, 0xCuLL), v550));
        v520 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v548, (int8x16_t)v548, 0xCuLL), (int8x16_t)v548, 8uLL);
        v522 = vmulq_f32(v520, v549);
        *((_DWORD *)v534 + 20) = v551.i32[2];
        *((_QWORD *)v534 + 9) = v551.i64[0];
        v526 = vsubq_f32(v522, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v548, v548), (int8x16_t)v548, 0xCuLL), v550));
        *((_DWORD *)v534 + 23) = v525.i32[2];
        *(_QWORD *)(v534 + 84) = v525.i64[0];
        *((_DWORD *)v534 + 26) = v526.i32[2];
        *((_QWORD *)v534 + 12) = v526.i64[0];
        v527 = (unint64_t)(v534 + 120);
        if (v470 == v529)
        {
          a1[25] = (uint64_t)v534;
          a1[26] = v527;
          v529 = v470;
          a1[27] = (uint64_t)v545;
        }
        else
        {
          do
          {
            v552 = *(v470 - 15);
            v470 -= 15;
            v553 = *((_DWORD *)v470 + 2);
            *((_QWORD *)v534 - 15) = v552;
            v534 -= 120;
            *((_DWORD *)v534 + 2) = v553;
            v554 = *(uint64_t *)((char *)v470 + 12);
            *((_DWORD *)v534 + 5) = *((_DWORD *)v470 + 5);
            *(_QWORD *)(v534 + 12) = v554;
            v555 = v470[3];
            *((_DWORD *)v534 + 8) = *((_DWORD *)v470 + 8);
            *((_QWORD *)v534 + 3) = v555;
            v556 = *(uint64_t *)((char *)v470 + 36);
            *((_DWORD *)v534 + 11) = *((_DWORD *)v470 + 11);
            *(_QWORD *)(v534 + 36) = v556;
            v557 = v470[6];
            *((_DWORD *)v534 + 14) = *((_DWORD *)v470 + 14);
            *((_QWORD *)v534 + 6) = v557;
            v558 = *(uint64_t *)((char *)v470 + 60);
            *((_DWORD *)v534 + 17) = *((_DWORD *)v470 + 17);
            *(_QWORD *)(v534 + 60) = v558;
            v559 = v470[9];
            *((_DWORD *)v534 + 20) = *((_DWORD *)v470 + 20);
            *((_QWORD *)v534 + 9) = v559;
            v560 = *(uint64_t *)((char *)v470 + 84);
            *((_DWORD *)v534 + 23) = *((_DWORD *)v470 + 23);
            *(_QWORD *)(v534 + 84) = v560;
            v561 = v470[12];
            *((_DWORD *)v534 + 26) = *((_DWORD *)v470 + 26);
            *((_QWORD *)v534 + 12) = v561;
            v562 = *(uint64_t *)((char *)v470 + 108);
            *((_DWORD *)v534 + 29) = *((_DWORD *)v470 + 29);
            *(_QWORD *)(v534 + 108) = v562;
          }
          while (v470 != v529);
          a1[25] = (uint64_t)v534;
          a1[26] = v527;
          a1[27] = (uint64_t)v545;
          if (!v529)
          {
            a1[26] = v527;
            v528 = a1[27];
            if (v527 < v528)
              goto LABEL_249;
            goto LABEL_253;
          }
        }
        operator delete(v529);
        a1[26] = v527;
        v528 = a1[27];
        if (v527 < v528)
        {
LABEL_249:
          v526.i64[0] = *(_QWORD *)v848;
          v526.i32[2] = *(_DWORD *)(v848 + 8);
          v563 = *v849;
          v525.i64[0] = *v849;
          v525.i32[2] = *((_DWORD *)v849 + 2);
          v564 = (int32x4_t)vsubq_f32(v526, v525);
          v522.i64[0] = *(_QWORD *)v853;
          v522.i32[2] = *(_DWORD *)(v853 + 8);
          v565 = (int32x4_t)vsubq_f32(v522, v525);
          v566 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v565, v565), (int8x16_t)v565, 0xCuLL);
          v567 = vextq_s8((int8x16_t)v565, (int8x16_t)v565, 0xCuLL);
          v568 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v564, (int8x16_t)v564, 0xCuLL), (int8x16_t)v564, 8uLL), v566), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v564, v564), (int8x16_t)v564, 0xCuLL), (float32x4_t)vextq_s8(v567, (int8x16_t)v565, 8uLL)));
          v569 = vmulq_f32(v568, v568);
          v570 = vaddq_f32(v569, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v569.f32, 1));
          v569.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v569, 2), v570).u64[0];
          v569.f32[0] = sqrtf(v569.f32[0]);
          *(_DWORD *)(v527 + 8) = *((_DWORD *)v849 + 2);
          *(_QWORD *)v527 = v563;
          v571 = *(_QWORD *)v848;
          *(_DWORD *)(v527 + 20) = *(_DWORD *)(v848 + 8);
          *(_QWORD *)(v527 + 12) = v571;
          v572 = *(_QWORD *)v853;
          *(_DWORD *)(v527 + 32) = *(_DWORD *)(v853 + 8);
          *(_QWORD *)(v527 + 24) = v572;
          v570.i64[0] = *(_QWORD *)v848;
          v570.i32[2] = *(_DWORD *)(v848 + 8);
          v566.i64[0] = *v849;
          v566.i32[2] = *((_DWORD *)v849 + 2);
          v573 = (int32x4_t)vsubq_f32(v570, v566);
          *(_DWORD *)(v527 + 44) = v573.i32[2];
          *(_QWORD *)(v527 + 36) = v573.i64[0];
          v566.i64[0] = *(_QWORD *)v853;
          v566.i32[2] = *(_DWORD *)(v853 + 8);
          v567.i64[0] = *(_QWORD *)v848;
          v567.i32[2] = *(_DWORD *)(v848 + 8);
          v574 = (int32x4_t)vsubq_f32(v566, (float32x4_t)v567);
          *(_DWORD *)(v527 + 56) = v574.i32[2];
          *(_QWORD *)(v527 + 48) = v574.i64[0];
          v567.i64[0] = *v849;
          v567.i32[2] = *((_DWORD *)v849 + 2);
          v520.i64[0] = *(_QWORD *)v853;
          v520.i32[2] = *(_DWORD *)(v853 + 8);
          v575 = (int32x4_t)vdivq_f32(v568, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v569.f32, 0));
          v576 = (int32x4_t)vsubq_f32((float32x4_t)v567, v520);
          *(_DWORD *)(v527 + 68) = v576.i32[2];
          *(_QWORD *)(v527 + 60) = v576.i64[0];
          *(_QWORD *)(v527 + 108) = v575.i64[0];
          *(_DWORD *)(v527 + 116) = v575.i32[2];
          v577 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v575, v575), (int8x16_t)v575, 0xCuLL);
          v578 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v575, (int8x16_t)v575, 0xCuLL), (int8x16_t)v575, 8uLL);
          v579 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v573, (int8x16_t)v573, 0xCuLL), (int8x16_t)v573, 8uLL), v577), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v573, v573), (int8x16_t)v573, 0xCuLL), v578));
          v580 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v574, (int8x16_t)v574, 0xCuLL), (int8x16_t)v574, 8uLL), v577), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v574, v574), (int8x16_t)v574, 0xCuLL), v578));
          v581 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v576, (int8x16_t)v576, 0xCuLL), (int8x16_t)v576, 8uLL);
          v582 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v576, v576), (int8x16_t)v576, 0xCuLL);
          *(_QWORD *)(v527 + 72) = v579.i64[0];
          *(_DWORD *)(v527 + 80) = v579.i32[2];
          v583 = vsubq_f32(vmulq_f32(v581, v577), vmulq_f32(v582, v578));
          *(_DWORD *)(v527 + 92) = v580.i32[2];
          *(_QWORD *)(v527 + 84) = v580.i64[0];
          *(_DWORD *)(v527 + 104) = v583.i32[2];
          *(_QWORD *)(v527 + 96) = v583.i64[0];
          v584 = (uint64_t *)(v527 + 120);
          a1[26] = v527 + 120;
          v585 = a1[27];
          if (v527 + 120 >= v585)
          {
LABEL_268:
            v645 = (uint64_t *)a1[25];
            v646 = 0xEEEEEEEEEEEEEEEFLL * (v584 - v645) + 1;
            if (v646 > 0x222222222222222)
              goto LABEL_394;
            v647 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v585 - (_QWORD)v645) >> 3);
            if (2 * v647 > v646)
              v646 = 2 * v647;
            if (v647 >= 0x111111111111111)
              v648 = 0x222222222222222;
            else
              v648 = v646;
            if (v648 > 0x222222222222222)
              goto LABEL_390;
            v649 = (char *)operator new(120 * v648);
            v650 = &v649[8 * (v584 - v645)];
            v651 = *(_QWORD *)v847;
            *(_QWORD *)v650 = *(_QWORD *)v847;
            v652.i64[0] = v651;
            v652.i32[2] = *(_DWORD *)(v847 + 8);
            v653 = *v849;
            *(_QWORD *)(v650 + 12) = *v849;
            v654.i64[0] = v653;
            v654.i32[2] = *((_DWORD *)v849 + 2);
            v655 = &v649[120 * v648];
            v656 = (int32x4_t)vsubq_f32(v654, v652);
            v657 = *v850;
            *((_QWORD *)v650 + 3) = *v850;
            v658.i64[0] = v657;
            v658.i32[2] = *((_DWORD *)v850 + 2);
            v659 = (int32x4_t)vsubq_f32(v658, v652);
            v660 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v656, (int8x16_t)v656, 0xCuLL), (int8x16_t)v656, 8uLL);
            v661 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v656, v656), (int8x16_t)v656, 0xCuLL);
            v662 = vsubq_f32(vmulq_f32(v660, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v659, v659), (int8x16_t)v659, 0xCuLL)), vmulq_f32(v661, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v659, (int8x16_t)v659, 0xCuLL), (int8x16_t)v659, 8uLL)));
            v663 = vmulq_f32(v662, v662);
            v663.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v663, 2), vaddq_f32(v663, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v663.f32, 1))).u64[0];
            v663.f32[0] = sqrtf(v663.f32[0]);
            v664 = (int32x4_t)vdivq_f32(v662, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v663.f32, 0));
            *((_DWORD *)v650 + 2) = *(_DWORD *)(v847 + 8);
            *((_DWORD *)v650 + 5) = *((_DWORD *)v849 + 2);
            *((_DWORD *)v650 + 8) = *((_DWORD *)v850 + 2);
            *((_DWORD *)v650 + 11) = v656.i32[2];
            *(_QWORD *)(v650 + 36) = v656.i64[0];
            v665 = (int32x4_t)vsubq_f32(v658, v654);
            *((_DWORD *)v650 + 14) = v665.i32[2];
            *((_QWORD *)v650 + 6) = v665.i64[0];
            v666 = (int32x4_t)vsubq_f32(v652, v658);
            *((_DWORD *)v650 + 17) = v666.i32[2];
            *(_QWORD *)(v650 + 60) = v666.i64[0];
            *((_DWORD *)v650 + 29) = v664.i32[2];
            *(_QWORD *)(v650 + 108) = v664.i64[0];
            v667 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v664, v664), (int8x16_t)v664, 0xCuLL);
            v668 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v664, (int8x16_t)v664, 0xCuLL), (int8x16_t)v664, 8uLL);
            v669 = vsubq_f32(vmulq_f32(v660, v667), vmulq_f32(v661, v668));
            v641 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v665, (int8x16_t)v665, 0xCuLL), (int8x16_t)v665, 8uLL), v667), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v665, v665), (int8x16_t)v665, 0xCuLL), v668));
            v636 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v666, (int8x16_t)v666, 0xCuLL), (int8x16_t)v666, 8uLL);
            v638 = vmulq_f32(v636, v667);
            *((_DWORD *)v650 + 20) = v669.i32[2];
            *((_QWORD *)v650 + 9) = v669.i64[0];
            v642 = vsubq_f32(v638, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v666, v666), (int8x16_t)v666, 0xCuLL), v668));
            *((_DWORD *)v650 + 23) = v641.i32[2];
            *(_QWORD *)(v650 + 84) = v641.i64[0];
            *((_DWORD *)v650 + 26) = v642.i32[2];
            *((_QWORD *)v650 + 12) = v642.i64[0];
            v643 = (unint64_t)(v650 + 120);
            if (v584 == v645)
            {
              a1[25] = (uint64_t)v650;
              a1[26] = v643;
              v645 = v584;
              a1[27] = (uint64_t)v655;
            }
            else
            {
              do
              {
                v670 = *(v584 - 15);
                v584 -= 15;
                v671 = *((_DWORD *)v584 + 2);
                *((_QWORD *)v650 - 15) = v670;
                v650 -= 120;
                *((_DWORD *)v650 + 2) = v671;
                v672 = *(uint64_t *)((char *)v584 + 12);
                *((_DWORD *)v650 + 5) = *((_DWORD *)v584 + 5);
                *(_QWORD *)(v650 + 12) = v672;
                v673 = v584[3];
                *((_DWORD *)v650 + 8) = *((_DWORD *)v584 + 8);
                *((_QWORD *)v650 + 3) = v673;
                v674 = *(uint64_t *)((char *)v584 + 36);
                *((_DWORD *)v650 + 11) = *((_DWORD *)v584 + 11);
                *(_QWORD *)(v650 + 36) = v674;
                v675 = v584[6];
                *((_DWORD *)v650 + 14) = *((_DWORD *)v584 + 14);
                *((_QWORD *)v650 + 6) = v675;
                v676 = *(uint64_t *)((char *)v584 + 60);
                *((_DWORD *)v650 + 17) = *((_DWORD *)v584 + 17);
                *(_QWORD *)(v650 + 60) = v676;
                v677 = v584[9];
                *((_DWORD *)v650 + 20) = *((_DWORD *)v584 + 20);
                *((_QWORD *)v650 + 9) = v677;
                v678 = *(uint64_t *)((char *)v584 + 84);
                *((_DWORD *)v650 + 23) = *((_DWORD *)v584 + 23);
                *(_QWORD *)(v650 + 84) = v678;
                v679 = v584[12];
                *((_DWORD *)v650 + 26) = *((_DWORD *)v584 + 26);
                *((_QWORD *)v650 + 12) = v679;
                v680 = *(uint64_t *)((char *)v584 + 108);
                *((_DWORD *)v650 + 29) = *((_DWORD *)v584 + 29);
                *(_QWORD *)(v650 + 108) = v680;
              }
              while (v584 != v645);
              a1[25] = (uint64_t)v650;
              a1[26] = v643;
              a1[27] = (uint64_t)v655;
              if (!v645)
              {
                a1[26] = v643;
                v644 = a1[27];
                if (v643 < v644)
                  goto LABEL_279;
                goto LABEL_283;
              }
            }
            operator delete(v645);
            a1[26] = v643;
            v644 = a1[27];
            if (v643 < v644)
            {
LABEL_279:
              v642.i64[0] = *(uint64_t *)((char *)a1 + 12);
              v642.i32[2] = *((_DWORD *)a1 + 5);
              v681 = *a1;
              v641.i64[0] = *a1;
              v641.i32[2] = *((_DWORD *)a1 + 2);
              v682 = (int32x4_t)vsubq_f32(v642, v641);
              v638.i64[0] = a1[3];
              v638.i32[2] = *((_DWORD *)a1 + 8);
              v683 = (int32x4_t)vsubq_f32(v638, v641);
              v684 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v683, v683), (int8x16_t)v683, 0xCuLL);
              v685 = vextq_s8((int8x16_t)v683, (int8x16_t)v683, 0xCuLL);
              v686 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v682, (int8x16_t)v682, 0xCuLL), (int8x16_t)v682, 8uLL), v684), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v682, v682), (int8x16_t)v682, 0xCuLL), (float32x4_t)vextq_s8(v685, (int8x16_t)v683, 8uLL)));
              v687 = vmulq_f32(v686, v686);
              v688 = vaddq_f32(v687, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v687.f32, 1));
              v687.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v687, 2), v688).u64[0];
              v687.f32[0] = sqrtf(v687.f32[0]);
              *(_DWORD *)(v643 + 8) = *((_DWORD *)a1 + 2);
              *(_QWORD *)v643 = v681;
              v689 = *(_QWORD *)v848;
              *(_DWORD *)(v643 + 20) = *(_DWORD *)(v848 + 8);
              *(_QWORD *)(v643 + 12) = v689;
              v690 = *v849;
              *(_DWORD *)(v643 + 32) = *((_DWORD *)v849 + 2);
              *(_QWORD *)(v643 + 24) = v690;
              v688.i64[0] = *(uint64_t *)((char *)a1 + 12);
              v688.i32[2] = *((_DWORD *)a1 + 5);
              v684.i64[0] = *a1;
              v684.i32[2] = *((_DWORD *)a1 + 2);
              v691 = (int32x4_t)vsubq_f32(v688, v684);
              *(_DWORD *)(v643 + 44) = v691.i32[2];
              *(_QWORD *)(v643 + 36) = v691.i64[0];
              v684.i64[0] = a1[3];
              v684.i32[2] = *((_DWORD *)a1 + 8);
              v685.i64[0] = *(uint64_t *)((char *)a1 + 12);
              v685.i32[2] = *((_DWORD *)a1 + 5);
              v692 = (int32x4_t)vsubq_f32(v684, (float32x4_t)v685);
              *(_DWORD *)(v643 + 56) = v692.i32[2];
              *(_QWORD *)(v643 + 48) = v692.i64[0];
              v685.i64[0] = *a1;
              v685.i32[2] = *((_DWORD *)a1 + 2);
              v636.i64[0] = a1[3];
              v636.i32[2] = *((_DWORD *)a1 + 8);
              v693 = (int32x4_t)vdivq_f32(v686, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v687.f32, 0));
              v694 = (int32x4_t)vsubq_f32((float32x4_t)v685, v636);
              *(_DWORD *)(v643 + 68) = v694.i32[2];
              *(_QWORD *)(v643 + 60) = v694.i64[0];
              *(_QWORD *)(v643 + 108) = v693.i64[0];
              *(_DWORD *)(v643 + 116) = v693.i32[2];
              v695 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v693, v693), (int8x16_t)v693, 0xCuLL);
              v696 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v693, (int8x16_t)v693, 0xCuLL), (int8x16_t)v693, 8uLL);
              v697 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v691, (int8x16_t)v691, 0xCuLL), (int8x16_t)v691, 8uLL), v695), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v691, v691), (int8x16_t)v691, 0xCuLL), v696));
              v698 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v692, (int8x16_t)v692, 0xCuLL), (int8x16_t)v692, 8uLL), v695), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v692, v692), (int8x16_t)v692, 0xCuLL), v696));
              v699 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v694, (int8x16_t)v694, 0xCuLL), (int8x16_t)v694, 8uLL);
              v700 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v694, v694), (int8x16_t)v694, 0xCuLL);
              *(_QWORD *)(v643 + 72) = v697.i64[0];
              *(_DWORD *)(v643 + 80) = v697.i32[2];
              v701 = vsubq_f32(vmulq_f32(v699, v695), vmulq_f32(v700, v696));
              *(_DWORD *)(v643 + 92) = v698.i32[2];
              *(_QWORD *)(v643 + 84) = v698.i64[0];
              *(_DWORD *)(v643 + 104) = v701.i32[2];
              *(_QWORD *)(v643 + 96) = v701.i64[0];
              v702 = v643 + 120;
              a1[26] = v643 + 120;
              v703 = a1[27];
              if (v643 + 120 >= v703)
                goto LABEL_297;
LABEL_294:
              v701.i64[0] = a1[3];
              v701.i32[2] = *((_DWORD *)a1 + 8);
              v738 = *a1;
              v700.i64[0] = *a1;
              v700.i32[2] = *((_DWORD *)a1 + 2);
              v739 = (int32x4_t)vsubq_f32(v701, v700);
              v697.i64[0] = *(uint64_t *)((char *)a1 + 36);
              v697.i32[2] = *((_DWORD *)a1 + 11);
              v740 = (int32x4_t)vsubq_f32(v697, v700);
              v741 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v740, v740), (int8x16_t)v740, 0xCuLL);
              v742 = vextq_s8((int8x16_t)v740, (int8x16_t)v740, 0xCuLL);
              v743 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v739, (int8x16_t)v739, 0xCuLL), (int8x16_t)v739, 8uLL), v741), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v739, v739), (int8x16_t)v739, 0xCuLL), (float32x4_t)vextq_s8(v742, (int8x16_t)v740, 8uLL)));
              v744 = vmulq_f32(v743, v743);
              v745 = vaddq_f32(v744, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v744.f32, 1));
              v744.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v744, 2), v745).u64[0];
              v744.f32[0] = sqrtf(v744.f32[0]);
              *(_DWORD *)(v702 + 8) = *((_DWORD *)a1 + 2);
              *(_QWORD *)v702 = v738;
              v746 = *v849;
              *(_DWORD *)(v702 + 20) = *((_DWORD *)v849 + 2);
              *(_QWORD *)(v702 + 12) = v746;
              v747 = *(_QWORD *)v847;
              *(_DWORD *)(v702 + 32) = *(_DWORD *)(v847 + 8);
              *(_QWORD *)(v702 + 24) = v747;
              v745.i64[0] = a1[3];
              v745.i32[2] = *((_DWORD *)a1 + 8);
              v741.i64[0] = *a1;
              v741.i32[2] = *((_DWORD *)a1 + 2);
              v748 = (int32x4_t)vsubq_f32(v745, v741);
              *(_DWORD *)(v702 + 44) = v748.i32[2];
              *(_QWORD *)(v702 + 36) = v748.i64[0];
              v741.i64[0] = *(uint64_t *)((char *)a1 + 36);
              v741.i32[2] = *((_DWORD *)a1 + 11);
              v742.i64[0] = a1[3];
              v742.i32[2] = *((_DWORD *)a1 + 8);
              v749 = (int32x4_t)vsubq_f32(v741, (float32x4_t)v742);
              *(_DWORD *)(v702 + 56) = v749.i32[2];
              *(_QWORD *)(v702 + 48) = v749.i64[0];
              v742.i64[0] = *a1;
              v742.i32[2] = *((_DWORD *)a1 + 2);
              v695.i64[0] = *(uint64_t *)((char *)a1 + 36);
              v695.i32[2] = *((_DWORD *)a1 + 11);
              v750 = (int32x4_t)vdivq_f32(v743, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v744.f32, 0));
              v751 = (int32x4_t)vsubq_f32((float32x4_t)v742, v695);
              *(_DWORD *)(v702 + 68) = v751.i32[2];
              *(_QWORD *)(v702 + 60) = v751.i64[0];
              *(_QWORD *)(v702 + 108) = v750.i64[0];
              *(_DWORD *)(v702 + 116) = v750.i32[2];
              v752 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v750, v750), (int8x16_t)v750, 0xCuLL);
              v753 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v750, (int8x16_t)v750, 0xCuLL), (int8x16_t)v750, 8uLL);
              v407 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v748, (int8x16_t)v748, 0xCuLL), (int8x16_t)v748, 8uLL), v752), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v748, v748), (int8x16_t)v748, 0xCuLL), v753));
              v408 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v749, (int8x16_t)v749, 0xCuLL), (int8x16_t)v749, 8uLL), v752), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v749, v749), (int8x16_t)v749, 0xCuLL), v753));
              *(_QWORD *)(v702 + 72) = v407.i64[0];
              *(_DWORD *)(v702 + 80) = v407.i32[2];
              v411 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v751, (int8x16_t)v751, 0xCuLL), (int8x16_t)v751, 8uLL), v752), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v751, v751), (int8x16_t)v751, 0xCuLL), v753));
              *(_DWORD *)(v702 + 92) = v408.i32[2];
              *(_QWORD *)(v702 + 84) = v408.i64[0];
              *(_DWORD *)(v702 + 104) = v411.i32[2];
              *(_QWORD *)(v702 + 96) = v411.i64[0];
              v754 = (char *)(v702 + 120);
              goto LABEL_310;
            }
LABEL_283:
            v704 = (void *)a1[25];
            v705 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v643 - (_QWORD)v704) >> 3) + 1;
            if (v705 > 0x222222222222222)
              goto LABEL_394;
            v706 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v644 - (_QWORD)v704) >> 3);
            if (2 * v706 > v705)
              v705 = 2 * v706;
            if (v706 >= 0x111111111111111)
              v707 = 0x222222222222222;
            else
              v707 = v705;
            if (v707 > 0x222222222222222)
              goto LABEL_390;
            v708 = (char *)operator new(120 * v707);
            v709 = &v708[8 * ((uint64_t)(v643 - (_QWORD)v704) >> 3)];
            v710.i64[0] = *(uint64_t *)((char *)a1 + 12);
            v710.i32[2] = *((_DWORD *)a1 + 5);
            v711 = *a1;
            *(_QWORD *)v709 = *a1;
            v712.i64[0] = v711;
            v712.i32[2] = *((_DWORD *)a1 + 2);
            v713.i64[0] = a1[3];
            v713.i32[2] = *((_DWORD *)a1 + 8);
            v714 = (int32x4_t)vsubq_f32(v710, v712);
            v715 = (int32x4_t)vsubq_f32(v713, v712);
            v716 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v714, (int8x16_t)v714, 0xCuLL), (int8x16_t)v714, 8uLL);
            v717 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v714, v714), (int8x16_t)v714, 0xCuLL);
            v718 = vsubq_f32(vmulq_f32(v716, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v715, v715), (int8x16_t)v715, 0xCuLL)), vmulq_f32(v717, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v715, (int8x16_t)v715, 0xCuLL), (int8x16_t)v715, 8uLL)));
            v719 = vmulq_f32(v718, v718);
            v720 = &v708[120 * v707];
            v719.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v719, 2), vaddq_f32(v719, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v719.f32, 1))).u64[0];
            v719.f32[0] = sqrtf(v719.f32[0]);
            v721 = (int32x4_t)vdivq_f32(v718, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v719.f32, 0));
            *((_DWORD *)v709 + 2) = v712.i32[2];
            *(_QWORD *)(v709 + 12) = *(_QWORD *)v848;
            *((_DWORD *)v709 + 5) = *(_DWORD *)(v848 + 8);
            *((_QWORD *)v709 + 3) = *v849;
            *((_DWORD *)v709 + 8) = *((_DWORD *)v849 + 2);
            *((_DWORD *)v709 + 11) = v714.i32[2];
            *(_QWORD *)(v709 + 36) = v714.i64[0];
            v722 = (int32x4_t)vsubq_f32(v713, v710);
            *((_DWORD *)v709 + 14) = v722.i32[2];
            *((_QWORD *)v709 + 6) = v722.i64[0];
            v723 = (int32x4_t)vsubq_f32(v712, v713);
            *((_DWORD *)v709 + 17) = v723.i32[2];
            *(_QWORD *)(v709 + 60) = v723.i64[0];
            *((_DWORD *)v709 + 29) = v721.i32[2];
            *(_QWORD *)(v709 + 108) = v721.i64[0];
            v724 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v721, v721), (int8x16_t)v721, 0xCuLL);
            v725 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v721, (int8x16_t)v721, 0xCuLL), (int8x16_t)v721, 8uLL);
            v726 = vsubq_f32(vmulq_f32(v716, v724), vmulq_f32(v717, v725));
            v701 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v722, (int8x16_t)v722, 0xCuLL), (int8x16_t)v722, 8uLL), v724), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v722, v722), (int8x16_t)v722, 0xCuLL), v725));
            v695 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v723, (int8x16_t)v723, 0xCuLL), (int8x16_t)v723, 8uLL);
            v697 = vmulq_f32(v695, v724);
            *((_DWORD *)v709 + 20) = v726.i32[2];
            *((_QWORD *)v709 + 9) = v726.i64[0];
            v700 = vsubq_f32(v697, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v723, v723), (int8x16_t)v723, 0xCuLL), v725));
            *((_DWORD *)v709 + 23) = v701.i32[2];
            *(_QWORD *)(v709 + 84) = v701.i64[0];
            *((_DWORD *)v709 + 26) = v700.i32[2];
            *((_QWORD *)v709 + 12) = v700.i64[0];
            v702 = (unint64_t)(v709 + 120);
            if ((void *)v643 == v704)
            {
              a1[25] = (uint64_t)v709;
              a1[26] = v702;
              v704 = (void *)v643;
              a1[27] = (uint64_t)v720;
            }
            else
            {
              do
              {
                v727 = *(_QWORD *)(v643 - 120);
                v643 -= 120;
                v728 = *(_DWORD *)(v643 + 8);
                *((_QWORD *)v709 - 15) = v727;
                v709 -= 120;
                *((_DWORD *)v709 + 2) = v728;
                v729 = *(_QWORD *)(v643 + 12);
                *((_DWORD *)v709 + 5) = *(_DWORD *)(v643 + 20);
                *(_QWORD *)(v709 + 12) = v729;
                v730 = *(_QWORD *)(v643 + 24);
                *((_DWORD *)v709 + 8) = *(_DWORD *)(v643 + 32);
                *((_QWORD *)v709 + 3) = v730;
                v731 = *(_QWORD *)(v643 + 36);
                *((_DWORD *)v709 + 11) = *(_DWORD *)(v643 + 44);
                *(_QWORD *)(v709 + 36) = v731;
                v732 = *(_QWORD *)(v643 + 48);
                *((_DWORD *)v709 + 14) = *(_DWORD *)(v643 + 56);
                *((_QWORD *)v709 + 6) = v732;
                v733 = *(_QWORD *)(v643 + 60);
                *((_DWORD *)v709 + 17) = *(_DWORD *)(v643 + 68);
                *(_QWORD *)(v709 + 60) = v733;
                v734 = *(_QWORD *)(v643 + 72);
                *((_DWORD *)v709 + 20) = *(_DWORD *)(v643 + 80);
                *((_QWORD *)v709 + 9) = v734;
                v735 = *(_QWORD *)(v643 + 84);
                *((_DWORD *)v709 + 23) = *(_DWORD *)(v643 + 92);
                *(_QWORD *)(v709 + 84) = v735;
                v736 = *(_QWORD *)(v643 + 96);
                *((_DWORD *)v709 + 26) = *(_DWORD *)(v643 + 104);
                *((_QWORD *)v709 + 12) = v736;
                v737 = *(_QWORD *)(v643 + 108);
                *((_DWORD *)v709 + 29) = *(_DWORD *)(v643 + 116);
                *(_QWORD *)(v709 + 108) = v737;
              }
              while ((void *)v643 != v704);
              a1[25] = (uint64_t)v709;
              a1[26] = v702;
              a1[27] = (uint64_t)v720;
              if (!v704)
              {
                a1[26] = v702;
                v703 = a1[27];
                if (v702 < v703)
                  goto LABEL_294;
LABEL_297:
                v755 = (void *)a1[25];
                v756 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v702 - (_QWORD)v755) >> 3) + 1;
                if (v756 > 0x222222222222222)
                  goto LABEL_394;
                v757 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v703 - (_QWORD)v755) >> 3);
                if (2 * v757 > v756)
                  v756 = 2 * v757;
                if (v757 >= 0x111111111111111)
                  v758 = 0x222222222222222;
                else
                  v758 = v756;
                if (v758 > 0x222222222222222)
                  goto LABEL_390;
                v759 = (char *)operator new(120 * v758);
                v760 = &v759[8 * ((uint64_t)(v702 - (_QWORD)v755) >> 3)];
                v761.i64[0] = a1[3];
                v761.i32[2] = *((_DWORD *)a1 + 8);
                v762 = *a1;
                *(_QWORD *)v760 = *a1;
                v763.i64[0] = v762;
                v763.i32[2] = *((_DWORD *)a1 + 2);
                v764.i64[0] = *(uint64_t *)((char *)a1 + 36);
                v764.i32[2] = *((_DWORD *)a1 + 11);
                v765 = (int32x4_t)vsubq_f32(v761, v763);
                v766 = (int32x4_t)vsubq_f32(v764, v763);
                v767 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v765, (int8x16_t)v765, 0xCuLL), (int8x16_t)v765, 8uLL);
                v768 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v765, v765), (int8x16_t)v765, 0xCuLL);
                v769 = vsubq_f32(vmulq_f32(v767, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v766, v766), (int8x16_t)v766, 0xCuLL)), vmulq_f32(v768, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v766, (int8x16_t)v766, 0xCuLL), (int8x16_t)v766, 8uLL)));
                v770 = vmulq_f32(v769, v769);
                v771 = &v759[120 * v758];
                v770.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v770, 2), vaddq_f32(v770, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v770.f32, 1))).u64[0];
                v770.f32[0] = sqrtf(v770.f32[0]);
                v772 = (int32x4_t)vdivq_f32(v769, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v770.f32, 0));
                *((_DWORD *)v760 + 2) = v763.i32[2];
                *(_QWORD *)(v760 + 12) = *v849;
                *((_DWORD *)v760 + 5) = *((_DWORD *)v849 + 2);
                *((_QWORD *)v760 + 3) = *(_QWORD *)v847;
                *((_DWORD *)v760 + 8) = *(_DWORD *)(v847 + 8);
                *((_DWORD *)v760 + 11) = v765.i32[2];
                *(_QWORD *)(v760 + 36) = v765.i64[0];
                v773 = (int32x4_t)vsubq_f32(v764, v761);
                *((_DWORD *)v760 + 14) = v773.i32[2];
                *((_QWORD *)v760 + 6) = v773.i64[0];
                v774 = (int32x4_t)vsubq_f32(v763, v764);
                *((_DWORD *)v760 + 17) = v774.i32[2];
                *(_QWORD *)(v760 + 60) = v774.i64[0];
                *((_DWORD *)v760 + 29) = v772.i32[2];
                *(_QWORD *)(v760 + 108) = v772.i64[0];
                v775 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v772, v772), (int8x16_t)v772, 0xCuLL);
                v408 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v772, (int8x16_t)v772, 0xCuLL), (int8x16_t)v772, 8uLL);
                v776 = vsubq_f32(vmulq_f32(v767, v775), vmulq_f32(v768, v408));
                v411 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v773, (int8x16_t)v773, 0xCuLL), (int8x16_t)v773, 8uLL), v775), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v773, v773), (int8x16_t)v773, 0xCuLL), v408));
                v407 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v774, (int8x16_t)v774, 0xCuLL), (int8x16_t)v774, 8uLL), v775);
                *((_DWORD *)v760 + 20) = v776.i32[2];
                *((_QWORD *)v760 + 9) = v776.i64[0];
                v777 = vsubq_f32(v407, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v774, v774), (int8x16_t)v774, 0xCuLL), v408));
                *((_DWORD *)v760 + 23) = v411.i32[2];
                *(_QWORD *)(v760 + 84) = v411.i64[0];
                *((_DWORD *)v760 + 26) = v777.i32[2];
                *((_QWORD *)v760 + 12) = v777.i64[0];
                v754 = v760 + 120;
                if ((void *)v702 == v755)
                {
                  a1[25] = (uint64_t)v760;
                  a1[26] = (uint64_t)v754;
                  v755 = (void *)v702;
                  a1[27] = (uint64_t)v771;
                }
                else
                {
                  do
                  {
                    v778 = *(_QWORD *)(v702 - 120);
                    v702 -= 120;
                    v779 = *(_DWORD *)(v702 + 8);
                    *((_QWORD *)v760 - 15) = v778;
                    v760 -= 120;
                    *((_DWORD *)v760 + 2) = v779;
                    v780 = *(_QWORD *)(v702 + 12);
                    *((_DWORD *)v760 + 5) = *(_DWORD *)(v702 + 20);
                    *(_QWORD *)(v760 + 12) = v780;
                    v781 = *(_QWORD *)(v702 + 24);
                    *((_DWORD *)v760 + 8) = *(_DWORD *)(v702 + 32);
                    *((_QWORD *)v760 + 3) = v781;
                    v782 = *(_QWORD *)(v702 + 36);
                    *((_DWORD *)v760 + 11) = *(_DWORD *)(v702 + 44);
                    *(_QWORD *)(v760 + 36) = v782;
                    v783 = *(_QWORD *)(v702 + 48);
                    *((_DWORD *)v760 + 14) = *(_DWORD *)(v702 + 56);
                    *((_QWORD *)v760 + 6) = v783;
                    v784 = *(_QWORD *)(v702 + 60);
                    *((_DWORD *)v760 + 17) = *(_DWORD *)(v702 + 68);
                    *(_QWORD *)(v760 + 60) = v784;
                    v785 = *(_QWORD *)(v702 + 72);
                    *((_DWORD *)v760 + 20) = *(_DWORD *)(v702 + 80);
                    *((_QWORD *)v760 + 9) = v785;
                    v786 = *(_QWORD *)(v702 + 84);
                    *((_DWORD *)v760 + 23) = *(_DWORD *)(v702 + 92);
                    *(_QWORD *)(v760 + 84) = v786;
                    v787 = *(_QWORD *)(v702 + 96);
                    *((_DWORD *)v760 + 26) = *(_DWORD *)(v702 + 104);
                    *((_QWORD *)v760 + 12) = v787;
                    v788 = *(_QWORD *)(v702 + 108);
                    *((_DWORD *)v760 + 29) = *(_DWORD *)(v702 + 116);
                    *(_QWORD *)(v760 + 108) = v788;
                  }
                  while ((void *)v702 != v755);
                  a1[25] = (uint64_t)v760;
                  a1[26] = (uint64_t)v754;
                  a1[27] = (uint64_t)v771;
                  if (!v755)
                    goto LABEL_310;
                }
                operator delete(v755);
LABEL_310:
                a1[26] = (uint64_t)v754;
                goto LABEL_311;
              }
            }
            operator delete(v704);
            a1[26] = v702;
            v703 = a1[27];
            if (v702 < v703)
              goto LABEL_294;
            goto LABEL_297;
          }
          goto LABEL_264;
        }
LABEL_253:
        v586 = (void *)a1[25];
        v587 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v527 - (_QWORD)v586) >> 3) + 1;
        if (v587 > 0x222222222222222)
          goto LABEL_394;
        v588 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v528 - (_QWORD)v586) >> 3);
        if (2 * v588 > v587)
          v587 = 2 * v588;
        if (v588 >= 0x111111111111111)
          v589 = 0x222222222222222;
        else
          v589 = v587;
        if (v589 > 0x222222222222222)
          goto LABEL_390;
        v590 = (char *)operator new(120 * v589);
        v591 = &v590[8 * ((uint64_t)(v527 - (_QWORD)v586) >> 3)];
        v592 = *v849;
        *(_QWORD *)v591 = *v849;
        v593.i64[0] = v592;
        v593.i32[2] = *((_DWORD *)v849 + 2);
        v594 = *(_QWORD *)v848;
        *(_QWORD *)(v591 + 12) = *(_QWORD *)v848;
        v595.i64[0] = v594;
        v595.i32[2] = *(_DWORD *)(v848 + 8);
        v596 = &v590[120 * v589];
        v597 = (int32x4_t)vsubq_f32(v595, v593);
        v598 = *(_QWORD *)v853;
        *((_QWORD *)v591 + 3) = *(_QWORD *)v853;
        v599.i64[0] = v598;
        v599.i32[2] = *(_DWORD *)(v853 + 8);
        v600 = (int32x4_t)vsubq_f32(v599, v593);
        v601 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v597, (int8x16_t)v597, 0xCuLL), (int8x16_t)v597, 8uLL);
        v602 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v597, v597), (int8x16_t)v597, 0xCuLL);
        v603 = vsubq_f32(vmulq_f32(v601, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v600, v600), (int8x16_t)v600, 0xCuLL)), vmulq_f32(v602, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v600, (int8x16_t)v600, 0xCuLL), (int8x16_t)v600, 8uLL)));
        v604 = vmulq_f32(v603, v603);
        v604.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v604, 2), vaddq_f32(v604, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v604.f32, 1))).u64[0];
        v604.f32[0] = sqrtf(v604.f32[0]);
        v605 = (int32x4_t)vdivq_f32(v603, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v604.f32, 0));
        *((_DWORD *)v591 + 2) = *((_DWORD *)v849 + 2);
        *((_DWORD *)v591 + 5) = *(_DWORD *)(v848 + 8);
        *((_DWORD *)v591 + 8) = *(_DWORD *)(v853 + 8);
        *((_DWORD *)v591 + 11) = v597.i32[2];
        *(_QWORD *)(v591 + 36) = v597.i64[0];
        v606 = (int32x4_t)vsubq_f32(v599, v595);
        *((_DWORD *)v591 + 14) = v606.i32[2];
        *((_QWORD *)v591 + 6) = v606.i64[0];
        v607 = (int32x4_t)vsubq_f32(v593, v599);
        *((_DWORD *)v591 + 17) = v607.i32[2];
        *(_QWORD *)(v591 + 60) = v607.i64[0];
        *((_DWORD *)v591 + 29) = v605.i32[2];
        *(_QWORD *)(v591 + 108) = v605.i64[0];
        v608 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v605, v605), (int8x16_t)v605, 0xCuLL);
        v609 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v605, (int8x16_t)v605, 0xCuLL), (int8x16_t)v605, 8uLL);
        v610 = vsubq_f32(vmulq_f32(v601, v608), vmulq_f32(v602, v609));
        v582 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v606, (int8x16_t)v606, 0xCuLL), (int8x16_t)v606, 8uLL), v608), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v606, v606), (int8x16_t)v606, 0xCuLL), v609));
        v577 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v607, (int8x16_t)v607, 0xCuLL), (int8x16_t)v607, 8uLL);
        v579 = vmulq_f32(v577, v608);
        *((_DWORD *)v591 + 20) = v610.i32[2];
        *((_QWORD *)v591 + 9) = v610.i64[0];
        v583 = vsubq_f32(v579, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v607, v607), (int8x16_t)v607, 0xCuLL), v609));
        *((_DWORD *)v591 + 23) = v582.i32[2];
        *(_QWORD *)(v591 + 84) = v582.i64[0];
        *((_DWORD *)v591 + 26) = v583.i32[2];
        *((_QWORD *)v591 + 12) = v583.i64[0];
        v584 = (uint64_t *)(v591 + 120);
        if ((void *)v527 == v586)
        {
          a1[25] = (uint64_t)v591;
          a1[26] = (uint64_t)v584;
          v586 = (void *)v527;
          a1[27] = (uint64_t)v596;
        }
        else
        {
          do
          {
            v611 = *(_QWORD *)(v527 - 120);
            v527 -= 120;
            v612 = *(_DWORD *)(v527 + 8);
            *((_QWORD *)v591 - 15) = v611;
            v591 -= 120;
            *((_DWORD *)v591 + 2) = v612;
            v613 = *(_QWORD *)(v527 + 12);
            *((_DWORD *)v591 + 5) = *(_DWORD *)(v527 + 20);
            *(_QWORD *)(v591 + 12) = v613;
            v614 = *(_QWORD *)(v527 + 24);
            *((_DWORD *)v591 + 8) = *(_DWORD *)(v527 + 32);
            *((_QWORD *)v591 + 3) = v614;
            v615 = *(_QWORD *)(v527 + 36);
            *((_DWORD *)v591 + 11) = *(_DWORD *)(v527 + 44);
            *(_QWORD *)(v591 + 36) = v615;
            v616 = *(_QWORD *)(v527 + 48);
            *((_DWORD *)v591 + 14) = *(_DWORD *)(v527 + 56);
            *((_QWORD *)v591 + 6) = v616;
            v617 = *(_QWORD *)(v527 + 60);
            *((_DWORD *)v591 + 17) = *(_DWORD *)(v527 + 68);
            *(_QWORD *)(v591 + 60) = v617;
            v618 = *(_QWORD *)(v527 + 72);
            *((_DWORD *)v591 + 20) = *(_DWORD *)(v527 + 80);
            *((_QWORD *)v591 + 9) = v618;
            v619 = *(_QWORD *)(v527 + 84);
            *((_DWORD *)v591 + 23) = *(_DWORD *)(v527 + 92);
            *(_QWORD *)(v591 + 84) = v619;
            v620 = *(_QWORD *)(v527 + 96);
            *((_DWORD *)v591 + 26) = *(_DWORD *)(v527 + 104);
            *((_QWORD *)v591 + 12) = v620;
            v621 = *(_QWORD *)(v527 + 108);
            *((_DWORD *)v591 + 29) = *(_DWORD *)(v527 + 116);
            *(_QWORD *)(v591 + 108) = v621;
          }
          while ((void *)v527 != v586);
          a1[25] = (uint64_t)v591;
          a1[26] = (uint64_t)v584;
          a1[27] = (uint64_t)v596;
          if (!v586)
          {
            a1[26] = (uint64_t)v584;
            v585 = a1[27];
            if ((unint64_t)v584 >= v585)
              goto LABEL_268;
            goto LABEL_264;
          }
        }
        operator delete(v586);
        a1[26] = (uint64_t)v584;
        v585 = a1[27];
        if ((unint64_t)v584 >= v585)
          goto LABEL_268;
LABEL_264:
        v583.i64[0] = *v849;
        v583.i32[2] = *((_DWORD *)v849 + 2);
        v622 = *(_QWORD *)v847;
        v582.i64[0] = *(_QWORD *)v847;
        v582.i32[2] = *(_DWORD *)(v847 + 8);
        v623 = (int32x4_t)vsubq_f32(v583, v582);
        v579.i64[0] = *v850;
        v579.i32[2] = *((_DWORD *)v850 + 2);
        v624 = (int32x4_t)vsubq_f32(v579, v582);
        v625 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v624, v624), (int8x16_t)v624, 0xCuLL);
        v626 = vextq_s8((int8x16_t)v624, (int8x16_t)v624, 0xCuLL);
        v627 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v623, (int8x16_t)v623, 0xCuLL), (int8x16_t)v623, 8uLL), v625), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v623, v623), (int8x16_t)v623, 0xCuLL), (float32x4_t)vextq_s8(v626, (int8x16_t)v624, 8uLL)));
        v628 = vmulq_f32(v627, v627);
        v629 = vaddq_f32(v628, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v628.f32, 1));
        v628.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v628, 2), v629).u64[0];
        v628.f32[0] = sqrtf(v628.f32[0]);
        *((_DWORD *)v584 + 2) = *(_DWORD *)(v847 + 8);
        *v584 = v622;
        v630 = *v849;
        *((_DWORD *)v584 + 5) = *((_DWORD *)v849 + 2);
        *(uint64_t *)((char *)v584 + 12) = v630;
        v631 = *v850;
        *((_DWORD *)v584 + 8) = *((_DWORD *)v850 + 2);
        v584[3] = v631;
        v629.i64[0] = *v849;
        v629.i32[2] = *((_DWORD *)v849 + 2);
        v625.i64[0] = *(_QWORD *)v847;
        v625.i32[2] = *(_DWORD *)(v847 + 8);
        v632 = (int32x4_t)vsubq_f32(v629, v625);
        *((_DWORD *)v584 + 11) = v632.i32[2];
        *(uint64_t *)((char *)v584 + 36) = v632.i64[0];
        v625.i64[0] = *v850;
        v625.i32[2] = *((_DWORD *)v850 + 2);
        v626.i64[0] = *v849;
        v626.i32[2] = *((_DWORD *)v849 + 2);
        v633 = (int32x4_t)vsubq_f32(v625, (float32x4_t)v626);
        *((_DWORD *)v584 + 14) = v633.i32[2];
        v584[6] = v633.i64[0];
        v626.i64[0] = *(_QWORD *)v847;
        v626.i32[2] = *(_DWORD *)(v847 + 8);
        v577.i64[0] = *v850;
        v577.i32[2] = *((_DWORD *)v850 + 2);
        v634 = (int32x4_t)vdivq_f32(v627, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v628.f32, 0));
        v635 = (int32x4_t)vsubq_f32((float32x4_t)v626, v577);
        *((_DWORD *)v584 + 17) = v635.i32[2];
        *(uint64_t *)((char *)v584 + 60) = v635.i64[0];
        *(uint64_t *)((char *)v584 + 108) = v634.i64[0];
        *((_DWORD *)v584 + 29) = v634.i32[2];
        v636 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v634, v634), (int8x16_t)v634, 0xCuLL);
        v637 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v634, (int8x16_t)v634, 0xCuLL), (int8x16_t)v634, 8uLL);
        v638 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v632, (int8x16_t)v632, 0xCuLL), (int8x16_t)v632, 8uLL), v636), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v632, v632), (int8x16_t)v632, 0xCuLL), v637));
        v639 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v633, (int8x16_t)v633, 0xCuLL), (int8x16_t)v633, 8uLL), v636), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v633, v633), (int8x16_t)v633, 0xCuLL), v637));
        v640 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v635, (int8x16_t)v635, 0xCuLL), (int8x16_t)v635, 8uLL);
        v641 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v635, v635), (int8x16_t)v635, 0xCuLL);
        v584[9] = v638.i64[0];
        *((_DWORD *)v584 + 20) = v638.i32[2];
        v642 = vsubq_f32(vmulq_f32(v640, v636), vmulq_f32(v641, v637));
        *((_DWORD *)v584 + 23) = v639.i32[2];
        *(uint64_t *)((char *)v584 + 84) = v639.i64[0];
        *((_DWORD *)v584 + 26) = v642.i32[2];
        v584[12] = v642.i64[0];
        v643 = (unint64_t)(v584 + 15);
        a1[26] = (uint64_t)(v584 + 15);
        v644 = a1[27];
        if ((unint64_t)(v584 + 15) < v644)
          goto LABEL_279;
        goto LABEL_283;
      }
    }
LABEL_234:
    v469.i64[0] = *a1;
    v469.i32[2] = *((_DWORD *)a1 + 2);
    v468.i64[0] = *(uint64_t *)((char *)a1 + 12);
    v468.i32[2] = *((_DWORD *)a1 + 5);
    v465.i64[0] = a1[6];
    v465.i32[2] = *((_DWORD *)a1 + 14);
    v506 = (int32x4_t)vsubq_f32(v469, v468);
    v507 = (int32x4_t)vsubq_f32(v465, v468);
    v508 = vextq_s8((int8x16_t)v507, (int8x16_t)v507, 0xCuLL);
    v509 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v506, (int8x16_t)v506, 0xCuLL), (int8x16_t)v506, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v507, v507), (int8x16_t)v507, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v506, v506), (int8x16_t)v506, 0xCuLL), (float32x4_t)vextq_s8(v508, (int8x16_t)v507, 8uLL)));
    v510 = vmulq_f32(v509, v509);
    v511 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v510.f32, 1);
    v512 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v510, 2);
    v510.i64[0] = vaddq_f32(v512, vaddq_f32(v510, v511)).u64[0];
    v510.f32[0] = sqrtf(v510.f32[0]);
    v513 = *(_QWORD *)v848;
    *((_DWORD *)v470 + 2) = *(_DWORD *)(v848 + 8);
    *v470 = v513;
    v514 = *a1;
    *((_DWORD *)v470 + 5) = *((_DWORD *)a1 + 2);
    *(uint64_t *)((char *)v470 + 12) = v514;
    v515 = *v851;
    *((_DWORD *)v470 + 8) = *((_DWORD *)v851 + 2);
    v470[3] = v515;
    v511.i64[0] = *a1;
    v511.i32[2] = *((_DWORD *)a1 + 2);
    v512.i64[0] = *(uint64_t *)((char *)a1 + 12);
    v512.i32[2] = *((_DWORD *)a1 + 5);
    v516 = (int32x4_t)vsubq_f32(v511, v512);
    *((_DWORD *)v470 + 11) = v516.i32[2];
    *(uint64_t *)((char *)v470 + 36) = v516.i64[0];
    v512.i64[0] = a1[6];
    v512.i32[2] = *((_DWORD *)a1 + 14);
    v508.i64[0] = *a1;
    v508.i32[2] = *((_DWORD *)a1 + 2);
    v517 = (int32x4_t)vsubq_f32(v512, (float32x4_t)v508);
    *((_DWORD *)v470 + 14) = v517.i32[2];
    v470[6] = v517.i64[0];
    v508.i64[0] = *(uint64_t *)((char *)a1 + 12);
    v508.i32[2] = *((_DWORD *)a1 + 5);
    v463.i64[0] = a1[6];
    v463.i32[2] = *((_DWORD *)a1 + 14);
    v518 = (int32x4_t)vdivq_f32(v509, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v510.f32, 0));
    v519 = (int32x4_t)vsubq_f32((float32x4_t)v508, v463);
    *((_DWORD *)v470 + 17) = v519.i32[2];
    *(uint64_t *)((char *)v470 + 60) = v519.i64[0];
    *(uint64_t *)((char *)v470 + 108) = v518.i64[0];
    *((_DWORD *)v470 + 29) = v518.i32[2];
    v520 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v518, v518), (int8x16_t)v518, 0xCuLL);
    v521 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v518, (int8x16_t)v518, 0xCuLL), (int8x16_t)v518, 8uLL);
    v522 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v516, (int8x16_t)v516, 0xCuLL), (int8x16_t)v516, 8uLL), v520), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v516, v516), (int8x16_t)v516, 0xCuLL), v521));
    v523 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v517, (int8x16_t)v517, 0xCuLL), (int8x16_t)v517, 8uLL), v520), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v517, v517), (int8x16_t)v517, 0xCuLL), v521));
    v524 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v519, (int8x16_t)v519, 0xCuLL), (int8x16_t)v519, 8uLL);
    v525 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v519, v519), (int8x16_t)v519, 0xCuLL);
    v526 = vsubq_f32(vmulq_f32(v524, v520), vmulq_f32(v525, v521));
    v470[9] = v522.i64[0];
    *((_DWORD *)v470 + 20) = v522.i32[2];
    *((_DWORD *)v470 + 23) = v523.i32[2];
    *(uint64_t *)((char *)v470 + 84) = v523.i64[0];
    *((_DWORD *)v470 + 26) = v526.i32[2];
    v470[12] = v526.i64[0];
    v527 = (unint64_t)(v470 + 15);
    a1[26] = (uint64_t)(v470 + 15);
    v528 = a1[27];
    if ((unint64_t)(v470 + 15) < v528)
      goto LABEL_249;
    goto LABEL_253;
  }
  a1[26] = v353;
  v354 = a1[27];
  if (v353 < v354)
    goto LABEL_202;
LABEL_206:
  v413 = (void *)a1[25];
  v414 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v353 - (_QWORD)v413) >> 3) + 1;
  if (v414 > 0x222222222222222)
LABEL_394:
    sub_22316E078();
  v415 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v354 - (_QWORD)v413) >> 3);
  if (2 * v415 > v414)
    v414 = 2 * v415;
  if (v415 >= 0x111111111111111)
    v416 = 0x222222222222222;
  else
    v416 = v414;
  if (v416 > 0x222222222222222)
    goto LABEL_390;
  v417 = (char *)operator new(120 * v416);
  v418 = &v417[8 * ((uint64_t)(v353 - (_QWORD)v413) >> 3)];
  v419 = *(_QWORD *)v853;
  *(_QWORD *)v418 = *(_QWORD *)v853;
  v420.i64[0] = v419;
  v420.i32[2] = *(_DWORD *)(v853 + 8);
  v421 = *(_QWORD *)v856;
  *(_QWORD *)(v418 + 12) = *(_QWORD *)v856;
  v422.i64[0] = v421;
  v422.i32[2] = *(_DWORD *)(v856 + 8);
  v423 = &v417[120 * v416];
  v424 = (int32x4_t)vsubq_f32(v422, v420);
  v425 = *v850;
  *((_QWORD *)v418 + 3) = *v850;
  v426.i64[0] = v425;
  v426.i32[2] = *((_DWORD *)v850 + 2);
  v427 = (int32x4_t)vsubq_f32(v426, v420);
  v428 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v424, (int8x16_t)v424, 0xCuLL), (int8x16_t)v424, 8uLL);
  v429 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v424, v424), (int8x16_t)v424, 0xCuLL);
  v430 = vsubq_f32(vmulq_f32(v428, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v427, v427), (int8x16_t)v427, 0xCuLL)), vmulq_f32(v429, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v427, (int8x16_t)v427, 0xCuLL), (int8x16_t)v427, 8uLL)));
  v431 = vmulq_f32(v430, v430);
  v431.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v431, 2), vaddq_f32(v431, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v431.f32, 1))).u64[0];
  v431.f32[0] = sqrtf(v431.f32[0]);
  v432 = (int32x4_t)vdivq_f32(v430, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v431.f32, 0));
  *((_DWORD *)v418 + 2) = *(_DWORD *)(v853 + 8);
  *((_DWORD *)v418 + 5) = *(_DWORD *)(v856 + 8);
  *((_DWORD *)v418 + 8) = *((_DWORD *)v850 + 2);
  *((_DWORD *)v418 + 11) = v424.i32[2];
  *(_QWORD *)(v418 + 36) = v424.i64[0];
  v433 = (int32x4_t)vsubq_f32(v426, v422);
  *((_DWORD *)v418 + 14) = v433.i32[2];
  *((_QWORD *)v418 + 6) = v433.i64[0];
  v434 = (int32x4_t)vsubq_f32(v420, v426);
  *((_DWORD *)v418 + 17) = v434.i32[2];
  *(_QWORD *)(v418 + 60) = v434.i64[0];
  *((_DWORD *)v418 + 29) = v432.i32[2];
  *(_QWORD *)(v418 + 108) = v432.i64[0];
  v435 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v432, v432), (int8x16_t)v432, 0xCuLL);
  v408 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v432, (int8x16_t)v432, 0xCuLL), (int8x16_t)v432, 8uLL);
  v436 = vsubq_f32(vmulq_f32(v428, v435), vmulq_f32(v429, v408));
  v410 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v433, (int8x16_t)v433, 0xCuLL), (int8x16_t)v433, 8uLL), v435), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v433, v433), (int8x16_t)v433, 0xCuLL), v408));
  v405 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v434, (int8x16_t)v434, 0xCuLL), (int8x16_t)v434, 8uLL);
  v407 = vmulq_f32(v405, v435);
  *((_DWORD *)v418 + 20) = v436.i32[2];
  *((_QWORD *)v418 + 9) = v436.i64[0];
  v411 = vsubq_f32(v407, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v434, v434), (int8x16_t)v434, 0xCuLL), v408));
  *((_DWORD *)v418 + 23) = v410.i32[2];
  *(_QWORD *)(v418 + 84) = v410.i64[0];
  *((_DWORD *)v418 + 26) = v411.i32[2];
  *((_QWORD *)v418 + 12) = v411.i64[0];
  v412 = v418 + 120;
  if ((void *)v353 == v413)
  {
    a1[25] = (uint64_t)v418;
    a1[26] = (uint64_t)v412;
    v413 = (void *)v353;
    a1[27] = (uint64_t)v423;
    goto LABEL_219;
  }
  do
  {
    v437 = *(_QWORD *)(v353 - 120);
    v353 -= 120;
    v438 = *(_DWORD *)(v353 + 8);
    *((_QWORD *)v418 - 15) = v437;
    v418 -= 120;
    *((_DWORD *)v418 + 2) = v438;
    v439 = *(_QWORD *)(v353 + 12);
    *((_DWORD *)v418 + 5) = *(_DWORD *)(v353 + 20);
    *(_QWORD *)(v418 + 12) = v439;
    v440 = *(_QWORD *)(v353 + 24);
    *((_DWORD *)v418 + 8) = *(_DWORD *)(v353 + 32);
    *((_QWORD *)v418 + 3) = v440;
    v441 = *(_QWORD *)(v353 + 36);
    *((_DWORD *)v418 + 11) = *(_DWORD *)(v353 + 44);
    *(_QWORD *)(v418 + 36) = v441;
    v442 = *(_QWORD *)(v353 + 48);
    *((_DWORD *)v418 + 14) = *(_DWORD *)(v353 + 56);
    *((_QWORD *)v418 + 6) = v442;
    v443 = *(_QWORD *)(v353 + 60);
    *((_DWORD *)v418 + 17) = *(_DWORD *)(v353 + 68);
    *(_QWORD *)(v418 + 60) = v443;
    v444 = *(_QWORD *)(v353 + 72);
    *((_DWORD *)v418 + 20) = *(_DWORD *)(v353 + 80);
    *((_QWORD *)v418 + 9) = v444;
    v445 = *(_QWORD *)(v353 + 84);
    *((_DWORD *)v418 + 23) = *(_DWORD *)(v353 + 92);
    *(_QWORD *)(v418 + 84) = v445;
    v446 = *(_QWORD *)(v353 + 96);
    *((_DWORD *)v418 + 26) = *(_DWORD *)(v353 + 104);
    *((_QWORD *)v418 + 12) = v446;
    v447 = *(_QWORD *)(v353 + 108);
    *((_DWORD *)v418 + 29) = *(_DWORD *)(v353 + 116);
    *(_QWORD *)(v418 + 108) = v447;
  }
  while ((void *)v353 != v413);
  a1[25] = (uint64_t)v418;
  a1[26] = (uint64_t)v412;
  a1[27] = (uint64_t)v423;
  if (v413)
  {
LABEL_219:
    operator delete(v413);
    a1[26] = (uint64_t)v412;
    if (!*((_BYTE *)a1 + 120))
      goto LABEL_220;
    goto LABEL_311;
  }
  a1[26] = (uint64_t)v412;
  if (!*((_BYTE *)a1 + 120))
    goto LABEL_220;
LABEL_311:
  v789 = 0;
  v790 = (float32x4_t *)a1[17];
  while (2)
  {
    v791 = a1[25] + 120 * v789;
    v407.i32[0] = *(_DWORD *)(v791 + 116);
    v408.i64[0] = *(_QWORD *)(v791 + 108);
    v408.i32[2] = v407.i32[0];
    v411.i64[0] = *(_QWORD *)v791;
    v411.i32[2] = *(_DWORD *)(v791 + 8);
    v792 = vmulq_f32(v408, v411);
    v411 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v792, 2), vaddq_f32(v792, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v792.f32, 1)));
    v793 = -v411.f32[0];
    v794 = a1[18];
    if ((unint64_t)v790 < v794)
    {
      v790->i64[0] = v408.i64[0];
      v790->i32[2] = v407.i32[0];
      v790->f32[3] = v793;
      ++v790;
      goto LABEL_313;
    }
    v795 = *v859;
    v796 = ((char *)v790 - (char *)*v859) >> 4;
    v797 = v796 + 1;
    if ((unint64_t)(v796 + 1) >> 60)
      goto LABEL_392;
    v798 = v794 - (_QWORD)v795;
    if (v798 >> 3 > v797)
      v797 = v798 >> 3;
    if ((unint64_t)v798 >= 0x7FFFFFFFFFFFFFF0)
      v799 = 0xFFFFFFFFFFFFFFFLL;
    else
      v799 = v797;
    if (!v799)
    {
      v800 = 0;
      v801 = 16 * v796;
      *(_QWORD *)v801 = v408.i64[0];
      *(_DWORD *)(v801 + 8) = v407.i32[0];
      *(float *)(v801 + 12) = v793;
      if (v790 != (float32x4_t *)v795)
        goto LABEL_324;
LABEL_329:
      v803 = v790;
      v790 = (float32x4_t *)(v801 + 16);
      a1[16] = v801;
      a1[17] = v801 + 16;
      a1[18] = (uint64_t)&v800[16 * v799];
      if (!v803)
        goto LABEL_313;
      goto LABEL_330;
    }
    v854 = v408;
    v857 = v407;
    if (v799 >> 60)
      goto LABEL_390;
    v800 = (char *)operator new(16 * v799);
    v408.i32[3] = v854.i32[3];
    v407 = v857;
    v801 = (uint64_t)&v800[16 * v796];
    *(_QWORD *)v801 = v854.i64[0];
    *(_DWORD *)(v801 + 8) = v857.i32[0];
    *(float *)(v801 + 12) = v793;
    if (v790 == (float32x4_t *)v795)
      goto LABEL_329;
LABEL_324:
    v802 = v801;
    do
    {
      v411 = v790[-1];
      *(float32x4_t *)(v802 - 16) = v411;
      v802 -= 16;
      --v790;
    }
    while (v790 != (float32x4_t *)v795);
    v803 = (float32x4_t *)*v859;
    v790 = (float32x4_t *)(v801 + 16);
    a1[16] = v802;
    a1[17] = v801 + 16;
    a1[18] = (uint64_t)&v800[16 * v799];
    if (v803)
LABEL_330:
      operator delete(v803);
LABEL_313:
    a1[17] = (uint64_t)v790;
    if (++v789 != 5)
      continue;
    break;
  }
  if (*((_BYTE *)a1 + 120))
  {
    v804 = *v859;
    if (*v859 == (float *)v790)
      return a1;
LABEL_353:
    v819 = (float *)a1[20];
    while (2)
    {
      v821 = *v804;
      v822 = v804[1];
      if (*v804 < 0.0)
        v821 = -*v804;
      if (v822 < 0.0)
        v822 = -v822;
      v823 = v821 + v822;
      v824 = v804[2];
      if (v824 < 0.0)
        v824 = -v824;
      v825 = (float)(v823 + v824) * 0.5;
      v826 = a1[21];
      if ((unint64_t)v819 < v826)
      {
        *v819 = v825;
        v820 = (uint64_t)(v819 + 1);
      }
      else
      {
        v827 = (float *)*v852;
        v828 = (char *)v819 - (_BYTE *)*v852;
        v829 = v828 >> 2;
        v830 = (v828 >> 2) + 1;
        if (v830 >> 62)
          sub_22316E078();
        v831 = v826 - (_QWORD)v827;
        if (v831 >> 1 > v830)
          v830 = v831 >> 1;
        if ((unint64_t)v831 >= 0x7FFFFFFFFFFFFFFCLL)
          v832 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v832 = v830;
        if (v832)
        {
          if (v832 >> 62)
            goto LABEL_390;
          v833 = operator new(4 * v832);
          v834 = (float *)&v833[4 * v829];
          *v834 = v825;
          v820 = (uint64_t)(v834 + 1);
          v835 = (char *)v819 - (char *)v827;
          if (v819 == v827)
            goto LABEL_377;
        }
        else
        {
          v833 = 0;
          v834 = (float *)(4 * v829);
          *(float *)(4 * v829) = v825;
          v820 = 4 * v829 + 4;
          v835 = (char *)v819 - (char *)v827;
          if (v819 == v827)
            goto LABEL_377;
        }
        v836 = v835 - 4;
        if (v836 >= 0xBC)
        {
          v839 = ((char *)(v819 - 1) - (char *)v827) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v833[v828 - 4 - v839] > &v833[v828 - 4])
          {
            v837 = v819;
          }
          else if ((float *)((char *)v819 - v839 - 4) > v819 - 1)
          {
            v837 = v819;
          }
          else if ((unint64_t)((char *)v819 - v833 - v828) >= 0x20)
          {
            v840 = (v836 >> 2) + 1;
            v841 = 4 * (v840 & 0x7FFFFFFFFFFFFFF8);
            v837 = &v819[v841 / 0xFFFFFFFFFFFFFFFCLL];
            v834 = (float *)((char *)v834 - v841);
            v842 = &v833[4 * v829 - 16];
            v843 = v819 - 4;
            v844 = v840 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v845 = *(_OWORD *)v843;
              *(v842 - 1) = *((_OWORD *)v843 - 1);
              *v842 = v845;
              v842 -= 2;
              v843 -= 8;
              v844 -= 8;
            }
            while (v844);
            if (v840 == (v840 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_377;
          }
          else
          {
            v837 = v819;
          }
        }
        else
        {
          v837 = v819;
        }
        do
        {
          v838 = *((_DWORD *)v837-- - 1);
          *((_DWORD *)v834-- - 1) = v838;
        }
        while (v837 != v827);
LABEL_377:
        a1[19] = (uint64_t)v834;
        a1[20] = v820;
        a1[21] = (uint64_t)&v833[4 * v832];
        if (v827)
          operator delete(v827);
      }
      a1[20] = v820;
      v804 += 4;
      v819 = (float *)v820;
      if (v804 == (float *)v790)
        return a1;
      continue;
    }
  }
  v805 = a1[26];
  v806 = *(_DWORD *)(v805 - 4);
  v408.i64[0] = *(_QWORD *)(v805 - 12);
  v408.i32[2] = v806;
  v411.i64[0] = *(_QWORD *)(v805 - 120);
  v411.i32[2] = *(_DWORD *)(v805 - 112);
  v807 = vmulq_f32(v408, v411);
  v808 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v807, 2), vaddq_f32(v807, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v807.f32, 1))).f32[0];
  v809 = a1[18];
  if ((unint64_t)v790 < v809)
  {
    v790->i64[0] = v408.i64[0];
    v810 = v790 + 1;
    v790->i32[2] = v806;
    v790->f32[3] = v808;
    goto LABEL_352;
  }
  v811 = *v859;
  v812 = ((char *)v790 - (char *)*v859) >> 4;
  v813 = v812 + 1;
  if ((unint64_t)(v812 + 1) >> 60)
LABEL_392:
    sub_22316E078();
  v814 = v809 - (_QWORD)v811;
  if (v814 >> 3 > v813)
    v813 = v814 >> 3;
  if ((unint64_t)v814 >= 0x7FFFFFFFFFFFFFF0)
    v815 = 0xFFFFFFFFFFFFFFFLL;
  else
    v815 = v813;
  if (v815)
  {
    v855 = v408.i64[0];
    v858 = v806;
    if (!(v815 >> 60))
    {
      v816 = (char *)operator new(16 * v815);
      v408.i64[0] = v855;
      v806 = v858;
      goto LABEL_346;
    }
LABEL_390:
    sub_223174E94();
  }
  v816 = 0;
LABEL_346:
  v817 = (float32x4_t *)&v816[16 * v812];
  v817->i64[0] = v408.i64[0];
  v818 = &v816[16 * v815];
  v817->i32[2] = v806;
  v817->f32[3] = v808;
  v810 = v817 + 1;
  if (v790 == (float32x4_t *)v811)
  {
    a1[16] = (uint64_t)v817;
    a1[17] = (uint64_t)v810;
    a1[18] = (uint64_t)v818;
LABEL_351:
    operator delete(v790);
    goto LABEL_352;
  }
  do
  {
    v817[-1] = v790[-1];
    --v817;
    --v790;
  }
  while (v790 != (float32x4_t *)v811);
  v790 = (float32x4_t *)a1[16];
  a1[16] = (uint64_t)v817;
  a1[17] = (uint64_t)v810;
  a1[18] = (uint64_t)v818;
  if (v790)
    goto LABEL_351;
LABEL_352:
  a1[17] = (uint64_t)v810;
  v790 = v810;
  v804 = *v859;
  if (*v859 != (float *)v790)
    goto LABEL_353;
  return a1;
}

void sub_223EA4DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, void **a20)
{
  _QWORD *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v22 = (void *)v20[25];
  if (v22)
  {
    v20[26] = v22;
    operator delete(v22);
    v23 = *a20;
    if (!*a20)
    {
LABEL_3:
      v24 = *a14;
      if (!*a14)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v23 = *a20;
    if (!*a20)
      goto LABEL_3;
  }
  v20[23] = v23;
  operator delete(v23);
  v24 = *a14;
  if (!*a14)
  {
LABEL_4:
    v25 = *a19;
    if (!*a19)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v20[20] = v24;
  operator delete(v24);
  v25 = *a19;
  if (!*a19)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  v20[17] = v25;
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EA4E3C(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, double a6, double a7, __n128 a8, __n128 a9)
{
  float32x4_t v9;
  uint64_t result;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int32 v21;
  __int32 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float v33;
  uint64_t v34;
  float32x4_t v35;
  float v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  double v40;
  float32x2_t v41;
  double v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  _DWORD *v47;
  float32x4_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  float32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  uint64_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  uint64_t v76;
  float32x4_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  uint64_t v84;
  float32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  double v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int8x16_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x4_t v102;
  uint64_t v103;
  BOOL v104;
  float32x4_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  __n128 v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unsigned __int32 v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  unsigned __int32 v117;
  uint64_t v118;
  __int32 v119;

  result = 0;
  a3.i64[0] = *(_QWORD *)a2;
  v12 = a3;
  v12.i32[2] = *(_DWORD *)(a2 + 8);
  a4.i64[0] = *(_QWORD *)(a1 + 108);
  a4.i32[2] = *(_DWORD *)(a1 + 116);
  v13 = (int8x16_t)vsubq_f32(v12, a4);
  if (*(float *)v13.i32 > 0.0)
    return result;
  v13.i32[0] = vextq_s8(v13, v13, 8uLL).u32[0];
  *(int32x2_t *)v13.i8 = vcgtz_f32(*(float32x2_t *)v13.i8);
  if ((v13.i8[4] & 1) != 0)
    return result;
  if ((v13.i8[0] & 1) != 0)
    return result;
  result = 0;
  v13.i64[0] = *(_QWORD *)(a1 + 96);
  v13.i32[2] = *(_DWORD *)(a1 + 104);
  v9.i64[0] = *(_QWORD *)(a2 + 12);
  v15 = v9;
  v15.i32[2] = *(_DWORD *)(a2 + 20);
  v16 = (int8x16_t)vsubq_f32((float32x4_t)v13, v15);
  if (*(float *)v16.i32 > 0.0)
    return result;
  v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
  *(int8x8_t *)v16.i8 = vmvn_s8((int8x8_t)vcgtz_f32(*(float32x2_t *)v16.i8));
  if ((v16.i8[4] & 1) == 0 || (v16.i8[0] & 1) == 0)
    return result;
  v17 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 136);
  v19 = v18 - v17;
  if (v18 == v17)
    return 2;
  v20 = 0;
  v21 = a3.u32[1];
  v22 = v9.i32[1];
  v23 = vsubq_f32(v15, v12);
  v24.i64[0] = 0x3F0000003F000000;
  v24.i64[1] = 0x3F0000003F000000;
  v25 = vmulq_f32(vaddq_f32(v15, v12), v24);
  v26 = v19 >> 4;
  v27 = *(_QWORD *)(a1 + 152);
  LOBYTE(v28) = 1;
  v29 = 1;
LABEL_9:
  v30 = v20;
  v20 += 2;
  do
  {
    v31 = v17 + 16 * v30;
    v24.i64[0] = *(_QWORD *)v31;
    v24.i32[2] = *(_DWORD *)(v31 + 8);
    v32 = vmulq_f32(v25, v24);
    v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1)));
    v24.f32[0] = *(float *)(v31 + 12) + v24.f32[0];
    v33 = *(float *)(v27 + 4 * v30);
    if (v24.f32[0] < (float)-(float)(v23.f32[0] * v33))
      return 0;
    if (v24.f32[0] < 0.0)
    {
      if (v26 - 1 != v30)
      {
        do
        {
          v34 = v17 + 16 * (v20 - 1);
          v24.i64[0] = *(_QWORD *)v34;
          v24.i32[2] = *(_DWORD *)(v34 + 8);
          v35 = vmulq_f32(v25, v24);
          v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)));
          v24.f32[0] = *(float *)(v34 + 12) + v24.f32[0];
          v36 = *(float *)(v27 + 4 * (v20 - 1));
          if (v24.f32[0] < (float)-(float)(v23.f32[0] * v36))
            return 0;
          if (v24.f32[0] >= 0.0)
          {
            v29 = 0;
            LOBYTE(v28) = (v24.f32[0] >= (float)(v23.f32[0] * v36)) & v28;
            if (v20 != v26)
              goto LABEL_9;
            break;
          }
        }
        while (++v20 - v26 != 1);
      }
LABEL_24:
      v23.i64[0] = *(_QWORD *)(a1 + 48);
      v23.i32[2] = *(_DWORD *)(a1 + 56);
      v37 = (int8x16_t)vsubq_f32(v23, v12);
      if (*(float *)v37.i32 >= 0.0)
      {
        v37.i32[0] = vextq_s8(v37, v37, 8uLL).u32[0];
        *(int8x8_t *)v37.i8 = vmvn_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v37.i8));
        if ((v37.i8[4] & 1) == 0 && (v37.i8[0] & 1) == 0)
        {
          v38 = (int8x16_t)vsubq_f32(v15, v23);
          if (*(float *)v38.i32 >= 0.0)
          {
            v38.i32[0] = vextq_s8(v38, v38, 8uLL).u32[0];
            *(int32x2_t *)v38.i8 = vcgez_f32(*(float32x2_t *)v38.i8);
            if ((v38.i8[4] & 1) != 0 && (v38.i8[0] & 1) != 0)
              return 1;
          }
        }
      }
      a9.n128_u32[0] = *(_DWORD *)(a2 + 20);
      v108 = a9;
      a8.n128_u32[0] = *(_DWORD *)(a2 + 8);
      v109 = a8;
      v105 = v12;
      v106 = *(_QWORD *)(a2 + 12);
      v39 = (char *)operator new(0x30uLL);
      v46 = (float32x4_t)v109;
      v47 = v39;
      v48 = v105;
      v48.i32[3] = v105.i32[0];
      *(float32x4_t *)v39 = v48;
      *((_DWORD *)v39 + 4) = v22;
      *((_DWORD *)v39 + 5) = v109.n128_u32[0];
      *((_QWORD *)v39 + 3) = v106;
      v49 = v39 + 24;
      *((_DWORD *)v39 + 9) = v106;
      v50 = v39 + 36;
      *((_DWORD *)v39 + 8) = v109.n128_u32[0];
      *((_DWORD *)v39 + 10) = v21;
      *((_DWORD *)v39 + 11) = v109.n128_u32[0];
      v51 = *(_QWORD *)(a1 + 200);
      v52 = *(_QWORD *)(a1 + 208);
      if (v51 != v52)
      {
        v53 = (uint64_t *)(v39 + 12);
        v114 = *(_QWORD *)v39;
        v115 = *((_DWORD *)v39 + 2);
        v54 = *(_QWORD *)(v39 + 12);
        v107 = *(_QWORD *)v39;
        v112 = *(_QWORD *)v39;
        v55 = (float32x4_t)v108;
        v113 = v108.n128_u32[0];
        v110 = *(_QWORD *)v39;
        v111 = *((_DWORD *)v39 + 2);
        v116 = v54;
        v56 = v51;
        v117 = v109.n128_u32[0];
        while (1)
        {
          v57 = v56 + 108;
          if (sub_223ED29D8(v56, v56 + 12, v56 + 24, (float32x2_t *)(v56 + 108), (uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v118, v46, v55, v40, v41, v42, v43, v44, v45))
          {
            break;
          }
          v56 = v57 + 12;
          if (v57 + 12 == v52)
          {
            v116 = v54;
            v58 = (float32x4_t)v108;
            v117 = v108.n128_u32[0];
            v59 = v51;
            while (1)
            {
              v60 = v59 + 108;
              if (sub_223ED29D8(v59, v59 + 12, v59 + 24, (float32x2_t *)(v59 + 108), (uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v118, v58, v55, v40, v41, v42, v43, v44, v45))
              {
                goto LABEL_69;
              }
              v59 = v60 + 12;
              if (v60 + 12 == v52)
              {
                v116 = v112;
                v117 = v113;
                v61 = v51;
                while (1)
                {
                  v62 = v61 + 108;
                  if (sub_223ED29D8(v61, v61 + 12, v61 + 24, (float32x2_t *)(v61 + 108), (uint64_t)&v110, (uint64_t)&v116, (uint64_t)&v118, v58, v55, v40, v41, v42, v43, v44, v45))
                  {
                    goto LABEL_69;
                  }
                  v61 = v62 + 12;
                  if (v62 + 12 == v52)
                  {
                    v114 = *v53;
                    v115 = v47[5];
                    v63 = *(_QWORD *)v49;
                    v112 = v54;
                    v113 = v108.n128_u32[0];
                    v110 = *v53;
                    v64 = v63;
                    v111 = v47[5];
                    v116 = v63;
                    v65 = v51;
                    v66 = (float32x4_t)v109;
                    v117 = v109.n128_u32[0];
                    while (1)
                    {
                      v67 = v65 + 108;
                      if (sub_223ED29D8(v65, v65 + 12, v65 + 24, (float32x2_t *)(v65 + 108), (uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v118, v66, v55, v40, v41, v42, v43, v44, v45))
                      {
                        goto LABEL_69;
                      }
                      v65 = v67 + 12;
                      if (v67 + 12 == v52)
                      {
                        v116 = v64;
                        v68 = (float32x4_t)v108;
                        v117 = v108.n128_u32[0];
                        v69 = v51;
                        while (1)
                        {
                          v70 = v69 + 108;
                          if (sub_223ED29D8(v69, v69 + 12, v69 + 24, (float32x2_t *)(v69 + 108), (uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v118, v68, v55, v40, v41, v42, v43, v44, v45))
                          {
                            goto LABEL_69;
                          }
                          v69 = v70 + 12;
                          if (v70 + 12 == v52)
                          {
                            v116 = v112;
                            v117 = v113;
                            v71 = v51;
                            while (1)
                            {
                              v72 = v71 + 108;
                              if (sub_223ED29D8(v71, v71 + 12, v71 + 24, (float32x2_t *)(v71 + 108), (uint64_t)&v110, (uint64_t)&v116, (uint64_t)&v118, v68, v55, v40, v41, v42, v43, v44, v45))
                              {
                                goto LABEL_69;
                              }
                              v71 = v72 + 12;
                              if (v72 + 12 == v52)
                              {
                                v114 = *(_QWORD *)v49;
                                v115 = *((_DWORD *)v49 + 2);
                                v73 = *(_QWORD *)v50;
                                v112 = v64;
                                v113 = v108.n128_u32[0];
                                v110 = *(_QWORD *)v49;
                                v111 = *((_DWORD *)v49 + 2);
                                v116 = v73;
                                v74 = v51;
                                v75 = (float32x4_t)v109;
                                v117 = v109.n128_u32[0];
                                while (1)
                                {
                                  v76 = v74 + 108;
                                  if (sub_223ED29D8(v74, v74 + 12, v74 + 24, (float32x2_t *)(v74 + 108), (uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v118, v75, v55, v40, v41, v42, v43, v44, v45))
                                  {
                                    goto LABEL_69;
                                  }
                                  v74 = v76 + 12;
                                  if (v76 + 12 == v52)
                                  {
                                    v116 = v73;
                                    v77 = (float32x4_t)v108;
                                    v117 = v108.n128_u32[0];
                                    v78 = v51;
                                    while (1)
                                    {
                                      v79 = v78 + 108;
                                      if (sub_223ED29D8(v78, v78 + 12, v78 + 24, (float32x2_t *)(v78 + 108), (uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v118, v77, v55, v40, v41, v42, v43, v44, v45))
                                      {
                                        goto LABEL_69;
                                      }
                                      v78 = v79 + 12;
                                      if (v79 + 12 == v52)
                                      {
                                        v116 = v112;
                                        v117 = v113;
                                        v80 = v51;
                                        while (1)
                                        {
                                          v81 = v80 + 108;
                                          if (sub_223ED29D8(v80, v80 + 12, v80 + 24, (float32x2_t *)(v80 + 108), (uint64_t)&v110, (uint64_t)&v116, (uint64_t)&v118, v77, v55, v40, v41, v42, v43, v44, v45))
                                          {
                                            goto LABEL_69;
                                          }
                                          v80 = v81 + 12;
                                          if (v81 + 12 == v52)
                                          {
                                            v114 = *(_QWORD *)v50;
                                            v115 = *((_DWORD *)v50 + 2);
                                            v112 = v73;
                                            v113 = v108.n128_u32[0];
                                            v110 = *(_QWORD *)v50;
                                            v111 = *((_DWORD *)v50 + 2);
                                            v116 = v107;
                                            v82 = v51;
                                            v83 = (float32x4_t)v109;
                                            v117 = v109.n128_u32[0];
                                            while (1)
                                            {
                                              v84 = v82 + 108;
                                              if (sub_223ED29D8(v82, v82 + 12, v82 + 24, (float32x2_t *)(v82 + 108), (uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v118, v83, v55, v40, v41, v42, v43, v44, v45))
                                              {
                                                goto LABEL_69;
                                              }
                                              v82 = v84 + 12;
                                              if (v84 + 12 == v52)
                                              {
                                                v116 = v107;
                                                v85 = (float32x4_t)v108;
                                                v117 = v108.n128_u32[0];
                                                v86 = v51;
                                                while (1)
                                                {
                                                  v87 = v86 + 108;
                                                  if (sub_223ED29D8(v86, v86 + 12, v86 + 24, (float32x2_t *)(v86 + 108), (uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v118, v85, v55, v40, v41, v42, v43, v44, v45))
                                                  {
                                                    goto LABEL_69;
                                                  }
                                                  v86 = v87 + 12;
                                                  if (v87 + 12 == v52)
                                                  {
                                                    v116 = v112;
                                                    v117 = v113;
                                                    while (1)
                                                    {
                                                      v88 = v51 + 108;
                                                      if (sub_223ED29D8(v51, v51 + 12, v51 + 24, (float32x2_t *)(v51 + 108), (uint64_t)&v110, (uint64_t)&v116, (uint64_t)&v118, v85, v55, v40, v41, v42, v43, v44, v45))
                                                      {
                                                        goto LABEL_69;
                                                      }
                                                      v51 += 120;
                                                      if (v88 + 12 == v52)
                                                        goto LABEL_67;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_69:
        operator delete(v47);
        return 1;
      }
LABEL_67:
      operator delete(v47);
      v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 2);
      if (v96 >= 2)
      {
        v97 = v96 >> 1;
        for (i = 1; ; i += 2)
        {
          v99 = *(_QWORD *)(a1 + 176);
          v100 = v99 + 12 * (i - 1);
          v101 = v99 + 12 * i;
          v89.i64[0] = *(_QWORD *)v101;
          v89.i32[2] = *(_DWORD *)(v101 + 8);
          v90.i64[0] = *(_QWORD *)v100;
          v90.i32[2] = *(_DWORD *)(v100 + 8);
          v102 = vsubq_f32(v89, v90);
          v119 = v102.i32[2];
          v118 = v102.i64[0];
          v103 = sub_223E9A750(a2, v100, (float *)&v118, *(double *)v102.i64, *(double *)v90.i64, v91, v92, v93, v94, v95);
          v104 = *((float *)&v103 + 1) > 1.0 || (v103 & 1) == 0;
          if (!v104 && *((float *)&v103 + 1) >= 0.0)
            break;
          result = 0;
          if (!--v97)
            return result;
        }
        return 1;
      }
      return 0;
    }
    v28 = (v24.f32[0] >= (float)(v23.f32[0] * v33)) & v28;
    ++v30;
    ++v20;
  }
  while (v26 != v30);
  if ((v29 & 1) == 0)
    goto LABEL_24;
  if (v28)
    return 2;
  return 1;
}

BOOL sub_223EA55CC(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v12;
  uint64_t v13;
  float32x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  __n128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  __n128 v24;
  float32x2_t v25;
  float32x4_t v26;
  int8x16_t *v27;
  float32x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32_t v35;
  double v36;
  int8x16_t v37;
  float32x2_t v38;
  float32x2_t v39;
  _BYTE *v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  int8x16_t v67;
  int8x16_t v68;
  BOOL v69;
  float v70;
  BOOL v71;
  _BOOL8 v72;
  uint64_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int8x16_t v94;
  float32x2_t v95;
  _BOOL4 v96;
  float v97;
  __n128 v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108[12];
  float32x2_t v109;
  __int32 v110;
  unint64_t v111;
  float32_t v112;
  unint64_t v113;
  _BYTE v114[32];
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int32x4_t v119;
  int8x16_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int32x4_t v127;
  int8x16_t v128;
  __int128 v129;
  __int128 v130;
  int v131;

  v129 = 0u;
  v130 = 0u;
  v131 = 728303192;
  kdebug_trace();
  v13 = 0;
  v14 = *a2;
  v15.i32[0] = a2[1].i32[0];
  *(float32x2_t *)v16.i8 = a2[2];
  v17.i32[0] = a2[3].i32[0];
  v18 = a2[4];
  v19.i32[0] = a2[5].i32[0];
  v20.n128_u64[0] = (unint64_t)a2[6];
  v20.n128_u32[2] = a2[7].u32[0];
  v21.i64[0] = *(_QWORD *)a5;
  v21.i32[2] = *(_DWORD *)(a5 + 8);
  v22.i64[0] = *(_QWORD *)(a5 + 16);
  v22.i32[2] = *(_DWORD *)(a5 + 24);
  v23.i64[0] = *(_QWORD *)(a5 + 32);
  v23.i32[2] = *(_DWORD *)(a5 + 40);
  v24.n128_u64[0] = *(_QWORD *)(a5 + 48);
  v24.n128_u32[2] = *(_DWORD *)(a5 + 56);
  v99 = v24;
  v26.f32[0] = (float)a3[11].u32[1] + -0.5;
  *(float *)v114 = (float)a3[11].u32[0] + -0.5;
  *(_DWORD *)&v114[4] = v26.i32[0];
  *(_DWORD *)&v114[8] = *(_DWORD *)v114;
  *(_QWORD *)&v114[12] = 0xBF000000BF000000;
  *(_DWORD *)&v114[20] = v26.i32[0];
  *(_QWORD *)&v114[24] = 0xBF000000BF000000;
  v25 = a3[4];
  *(float32x2_t *)v26.f32 = a3[5];
  v27 = &v122;
  v28 = *a1;
  do
  {
    *(float32x2_t *)v12.f32 = vadd_f32(*(float32x2_t *)v26.f32, vmul_f32(v25, *(float32x2_t *)&v114[v13]));
    v12.i32[2] = 1.0;
    v29 = (int8x16_t)vmulq_n_f32(v12, v28.f32[0]);
    v30 = (int8x16_t)vmulq_lane_f32(v12, v28, 1);
    *(float32x2_t *)v31.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, *(float *)v29.i32), *(float32x2_t *)v16.i8, *(float32x2_t *)v29.i8, 1), v18, (float32x4_t)v29, 2);
    *(float32x2_t *)v32.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, *(float *)v30.i32), *(float32x2_t *)v16.i8, *(float32x2_t *)v30.i8, 1), v18, (float32x4_t)v30, 2);
    *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v29.i8), v17, *(float32x2_t *)v29.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v19);
    *(float32x2_t *)&v32.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v30.i8), v17, *(float32x2_t *)v30.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), v19);
    v33 = vaddq_f32((float32x4_t)v20, v32);
    v27[-1].i64[0] = v33.i64[0];
    v27[-1].i32[2] = v33.i32[2];
    v12 = vaddq_f32((float32x4_t)v20, v31);
    v27[-1].i32[3] = 1065353216;
    v27->i64[0] = v12.i64[0];
    v27->i32[2] = v12.i32[2];
    v27->i32[3] = 1065353216;
    v13 += 8;
    v27 += 2;
  }
  while (v13 != 32);
  v34 = 0;
  v35 = (float)*(unsigned int *)(a6 + 92) + -0.5;
  v109.f32[0] = (float)*(unsigned int *)(a6 + 88) + -0.5;
  v109.f32[1] = v35;
  v110 = v109.i32[0];
  v111 = 0xBF000000BF000000;
  v112 = v35;
  v113 = 0xBF000000BF000000;
  v36 = *(double *)(a6 + 32);
  v15.i64[0] = *(_QWORD *)(a6 + 40);
  v16.i64[0] = *a4;
  v37 = vextq_s8(v21, v21, 8uLL);
  v38 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
  v39 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
  v40 = &v114[16];
  do
  {
    *(float32x2_t *)v26.f32 = vadd_f32(*(float32x2_t *)v15.i8, vmul_f32(*(float32x2_t *)&v36, *(float32x2_t *)((char *)&v109 + v34)));
    v26.i32[2] = 1.0;
    v41 = (int8x16_t)vmulq_n_f32(v26, *(float *)v16.i32);
    v42 = (int8x16_t)vmulq_lane_f32(v26, *(float32x2_t *)v16.i8, 1);
    *(float32x2_t *)v43.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v21.i8, *(float *)v41.i32), *(float32x2_t *)v22.i8, *(float32x2_t *)v41.i8, 1), *(float32x2_t *)v23.i8, (float32x4_t)v41, 2);
    *(float32x2_t *)v44.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v21.i8, *(float *)v42.i32), *(float32x2_t *)v22.i8, *(float32x2_t *)v42.i8, 1), *(float32x2_t *)v23.i8, (float32x4_t)v42, 2);
    *(float32x2_t *)&v43.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v41.i8), v38, *(float32x2_t *)v41.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), v39);
    *(float32x2_t *)&v44.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v42.i8), v38, *(float32x2_t *)v42.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), v39);
    v45 = vaddq_f32((float32x4_t)v99, v44);
    *((_QWORD *)v40 - 2) = v45.i64[0];
    *((_DWORD *)v40 - 2) = v45.i32[2];
    v26 = vaddq_f32((float32x4_t)v99, v43);
    *((_DWORD *)v40 - 1) = 1065353216;
    *(_QWORD *)v40 = v26.i64[0];
    *((_DWORD *)v40 + 2) = v26.i32[2];
    *((_DWORD *)v40 + 3) = 1065353216;
    v34 += 8;
    v40 += 32;
  }
  while (v34 != 32);
  sub_223EA5BF8((float32x2_t *)&v121, &v109, v20, *(double *)v21.i64, *(double *)v22.i64, *(double *)v23.i64, v36, v15, v16, v37);
  v46 = 0;
  v104 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v114, 3);
  v106 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v114, 1);
  v102 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v114[16], 1);
  v100 = (float32x2_t)vextq_s8(*(int8x16_t *)v114, *(int8x16_t *)v114, 8uLL).u64[0];
  v47 = (float32x2_t)vextq_s8(*(int8x16_t *)&v114[16], *(int8x16_t *)&v114[16], 8uLL).u64[0];
  v48 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v114[16], 3);
  v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 1);
  v50 = (float32x2_t)vextq_s8(v115, v115, 8uLL).u64[0];
  v51 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 3);
  v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.i8, 1);
  v53 = (float32x2_t)vextq_s8(v116, v116, 8uLL).u64[0];
  v54 = (float32x2_t)vdup_laneq_s32((int32x4_t)v116, 3);
  v55 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v117.i8, 1);
  v56 = (float32x2_t)vextq_s8(v117, v117, 8uLL).u64[0];
  v57 = (float32x2_t)vdup_laneq_s32((int32x4_t)v117, 3);
  v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1);
  v59 = (float32x2_t)vextq_s8(v118, v118, 8uLL).u64[0];
  v60 = (float32x2_t)vdup_laneq_s32((int32x4_t)v118, 3);
  v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v119.i8, 1);
  v62 = (float32x2_t)vdup_laneq_s32(v119, 3);
  v63 = (float32x2_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u64[0];
  v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.i8, 1);
  v65 = (float32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
  v66 = (float32x2_t)vdup_laneq_s32((int32x4_t)v120, 3);
  do
  {
    v67 = *(int8x16_t *)&v109.f32[v46];
    v68 = vextq_s8(v67, v67, 8uLL);
    v69 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v114), v106, *(float32x2_t *)v67.i8, 1), v100, *(float32x2_t *)v68.i8), v104, (float32x4_t)v67, 3).f32[0] <= 0.0;
    if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)&v114[16]), v102, *(float32x2_t *)v67.i8, 1), v47, *(float32x2_t *)v68.i8), v48, (float32x4_t)v67, 3).f32[0] > 0.0)v69 = 0;
    if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v115.i8), v49, *(float32x2_t *)v67.i8, 1), v50, *(float32x2_t *)v68.i8), v51, (float32x4_t)v67, 3).f32[0] > 0.0)v69 = 0;
    if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v116.i8), v52, *(float32x2_t *)v67.i8, 1), v53, *(float32x2_t *)v68.i8), v54, (float32x4_t)v67, 3).f32[0] > 0.0)v69 = 0;
    if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v117.i8), v55, *(float32x2_t *)v67.i8, 1), v56, *(float32x2_t *)v68.i8), v57, (float32x4_t)v67, 3).f32[0] > 0.0)v69 = 0;
    if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v118.i8), v58, *(float32x2_t *)v67.i8, 1), v59, *(float32x2_t *)v68.i8), v60, (float32x4_t)v67, 3).f32[0] > 0.0)v69 = 0;
    LODWORD(v70) = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v120.i8), v64, *(float32x2_t *)v67.i8, 1), v65, *(float32x2_t *)v68.i8), v66, (float32x4_t)v67, 3).u32[0];
    if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v119.i8), v61, *(float32x2_t *)v67.i8, 1), v63, *(float32x2_t *)v68.i8), v62, (float32x4_t)v67, 3).f32[0] > 0.0)v69 = 0;
    if (v70 > 0.0)
      v69 = 0;
    if (v69)
      break;
    v71 = v46 == 20;
    v46 += 4;
  }
  while (!v71);
  if (v69)
  {
    v72 = 0;
  }
  else
  {
    sub_223EA5BF8((float32x2_t *)v114, v108, v99, *(double *)&v114[16], *(double *)v115.i64, *(double *)v116.i64, *(double *)v117.i64, v118, v67, v68);
    v73 = 0;
    v105 = (float32x2_t)vdup_laneq_s32(v121, 3);
    v107 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v121.i8, 1);
    v103 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v122.i8, 1);
    v101 = (float32x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
    v74 = (float32x2_t)vextq_s8(v122, v122, 8uLL).u64[0];
    v75 = (float32x2_t)vdup_laneq_s32((int32x4_t)v122, 3);
    v76 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.i8, 1);
    v77 = (float32x2_t)vextq_s8(v123, v123, 8uLL).u64[0];
    v78 = (float32x2_t)vdup_laneq_s32((int32x4_t)v123, 3);
    v79 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v124.i8, 1);
    v80 = (float32x2_t)vextq_s8(v124, v124, 8uLL).u64[0];
    v81 = (float32x2_t)vdup_laneq_s32((int32x4_t)v124, 3);
    v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v125.i8, 1);
    v83 = (float32x2_t)vextq_s8(v125, v125, 8uLL).u64[0];
    v84 = (float32x2_t)vdup_laneq_s32((int32x4_t)v125, 3);
    v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.i8, 1);
    v86 = (float32x2_t)vextq_s8(v126, v126, 8uLL).u64[0];
    v87 = (float32x2_t)vdup_laneq_s32((int32x4_t)v126, 3);
    v88 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1);
    v89 = (float32x2_t)vdup_laneq_s32(v127, 3);
    v90 = (float32x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
    v91 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.i8, 1);
    v92 = (float32x2_t)vextq_s8(v128, v128, 8uLL).u64[0];
    v93 = (float32x2_t)vdup_laneq_s32((int32x4_t)v128, 3);
    do
    {
      v94 = *(int8x16_t *)v108[v73].f32;
      v95 = (float32x2_t)vextq_s8(v94, v94, 8uLL).u64[0];
      v96 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v121.i8), v107, *(float32x2_t *)v94.i8, 1), v101, v95), v105, (float32x4_t)v94, 3).f32[0] <= 0.0;
      if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v122.i8), v103, *(float32x2_t *)v94.i8, 1), v74, v95), v75, (float32x4_t)v94, 3).f32[0] > 0.0)v96 = 0;
      if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v123.i8), v76, *(float32x2_t *)v94.i8, 1), v77, v95), v78, (float32x4_t)v94, 3).f32[0] > 0.0)v96 = 0;
      if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v124.i8), v79, *(float32x2_t *)v94.i8, 1), v80, v95), v81, (float32x4_t)v94, 3).f32[0] > 0.0)v96 = 0;
      if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v125.i8), v82, *(float32x2_t *)v94.i8, 1), v83, v95), v84, (float32x4_t)v94, 3).f32[0] > 0.0)v96 = 0;
      if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v126.i8), v85, *(float32x2_t *)v94.i8, 1), v86, v95), v87, (float32x4_t)v94, 3).f32[0] > 0.0)v96 = 0;
      LODWORD(v97) = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v128.i8), v91, *(float32x2_t *)v94.i8, 1), v92, v95), v93, (float32x4_t)v94, 3).u32[0];
      if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v127.i8), v88, *(float32x2_t *)v94.i8, 1), v90, v95), v89, (float32x4_t)v94, 3).f32[0] > 0.0)v96 = 0;
      if (v97 > 0.0)
        v96 = 0;
      if (v96)
        break;
      v71 = v73 == 10;
      v73 += 2;
    }
    while (!v71);
    v72 = !v96;
  }
  kdebug_trace();
  return v72;
}

void sub_223EA5BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231874DC(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_223EA5BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231874DC(v1 - 176);
  _Unwind_Resume(a1);
}

float sub_223EA5BF8(float32x2_t *a1, float32x2_t *a2, __n128 a3, double a4, double a5, double a6, double a7, int8x16_t a8, int8x16_t a9, int8x16_t a10)
{
  float32x4_t v10;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x2_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x2_t *v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x2_t *v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x2_t *v36;
  float32x2_t *v37;
  float result;
  int v39;
  float32x2_t *v40;
  int v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float v45;
  float32x2_t *v46;
  float v47;
  _BYTE v48[8];
  float32x2_t **v49;
  int *v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v12 = a1[1].f32[0];
  *(float32x2_t *)a9.i8 = vsub_f32(a1[12], (float32x2_t)a3.n128_u64[0]);
  *(float *)&a9.i32[2] = a1[13].f32[0] - a3.n128_f32[2];
  *(float32x2_t *)a10.i8 = vsub_f32(*a1, (float32x2_t)a3.n128_u64[0]);
  *(float *)&a10.i32[2] = v12 - a3.n128_f32[2];
  *(float32x2_t *)a8.i8 = vsub_f32(*a1, a1[8]);
  *(float *)&a8.i32[2] = v12 - a1[9].f32[0];
  *(float32x2_t *)v10.f32 = vsub_f32(*a1, a1[4]);
  v10.f32[2] = v12 - a1[5].f32[0];
  v13 = (float32x4_t)vextq_s8(vextq_s8(a10, a10, 0xCuLL), a10, 8uLL);
  v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a10, (int32x4_t)a10), a10, 0xCuLL);
  v16 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v10, (int8x16_t)v10, 0xCuLL), (int8x16_t)v10, 8uLL);
  v17 = (int8x16_t)vmlsq_f32(vmulq_f32(v13, v14), v15, v16);
  v18 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
  v19 = vmulq_n_f32((float32x4_t)v17, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v17.i8, 1), v18, v18).f32[0]));
  a2[1].i32[0] = v19.i32[2];
  v20 = (int32x4_t)vnegq_f32(v10);
  v21 = (float32x4_t)vextq_s8(vextq_s8(a9, a9, 0xCuLL), a9, 8uLL);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a9, (int32x4_t)a9), a9, 0xCuLL);
  v23 = (int8x16_t)vmlsq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL)), v22, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL));
  v20.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
  v24 = vmulq_n_f32((float32x4_t)v23, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v23.i8, 1), *(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8).f32[0]));
  a2[3].i32[0] = v24.i32[2];
  a2[2] = *(float32x2_t *)v24.f32;
  v25 = a2 + 2;
  v26 = (float32x4_t)vextq_s8(vextq_s8(a8, a8, 0xCuLL), a8, 8uLL);
  v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a8, (int32x4_t)a8), a8, 0xCuLL);
  v28 = (int8x16_t)vmlsq_f32(vmulq_f32(v22, v26), v21, v27);
  *a2 = *(float32x2_t *)v19.f32;
  v19.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
  v29 = vmulq_n_f32((float32x4_t)v28, -1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1), *(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).f32[0]));
  a2[5].i32[0] = v29.i32[2];
  a2[4] = *(float32x2_t *)v29.f32;
  v30 = a2 + 4;
  v31 = (int8x16_t)vmlsq_f32(vmulq_f32(v15, v26), v13, v27);
  v29.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
  v32 = vmulq_n_f32((float32x4_t)v31, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), *(float32x2_t *)v31.i8, 1), *(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]));
  a2[7].i32[0] = v32.i32[2];
  a2[6] = *(float32x2_t *)v32.f32;
  v33 = a2 + 6;
  v34 = (int8x16_t)vmlsq_f32(vmulq_f32(v26, v14), v27, v16);
  v32.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
  v35 = vmulq_n_f32((float32x4_t)v34, -1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), *(float32x2_t *)v34.i8, 1), *(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]));
  a2[9].i32[0] = v35.i32[2];
  a2[8] = *(float32x2_t *)v35.f32;
  v36 = a2 + 8;
  a2[10] = vneg_f32(a2[8]);
  v37 = a2 + 10;
  a2[11].f32[0] = -v35.f32[2];
  v44 = vneg_f32(a1[14]);
  v45 = -a1[15].f32[0];
  v42 = vneg_f32(*a1);
  v43 = -a1[1].f32[0];
  v39 = 3;
  v40 = a2;
  v41 = 0;
  v46 = &v42;
  v49 = &v46;
  v50 = &v39;
  v51 = 1065353216;
  sub_223EA6B44(&v47, (uint64_t)v48);
  a2[1].f32[1] = v47;
  v39 = 3;
  v40 = v25;
  v41 = 0;
  v46 = &v44;
  v49 = &v46;
  v50 = &v39;
  v51 = 1065353216;
  sub_223EA6B44(&v47, (uint64_t)v48);
  a2[3].f32[1] = v47;
  v39 = 3;
  v40 = v30;
  v41 = 0;
  v46 = &v44;
  v49 = &v46;
  v50 = &v39;
  v51 = 1065353216;
  sub_223EA6B44(&v47, (uint64_t)v48);
  a2[5].f32[1] = v47;
  v39 = 3;
  v40 = v33;
  v41 = 0;
  v46 = &v42;
  v49 = &v46;
  v50 = &v39;
  v51 = 1065353216;
  sub_223EA6B44(&v47, (uint64_t)v48);
  a2[7].f32[1] = v47;
  v39 = 3;
  v40 = v36;
  v41 = 0;
  v46 = &v42;
  v49 = &v46;
  v50 = &v39;
  v51 = 1065353216;
  sub_223EA6B44(&v47, (uint64_t)v48);
  a2[9].f32[1] = v47;
  v39 = 3;
  v40 = v37;
  v41 = 0;
  v46 = &v44;
  v49 = &v46;
  v50 = &v39;
  v51 = 1065353216;
  sub_223EA6B44(&v47, (uint64_t)v48);
  result = v47;
  a2[11].f32[1] = v47;
  return result;
}

float32x2_t *sub_223EA5FD0@<X0>(float32x2_t *result@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X8>, float32x2_t a5@<D4>, float32x2_t a6@<D6>)
{
  float32x4_t v6;
  float32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float v26;
  int8x8_t v27;
  float v28;
  int8x8_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int8x8_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int8x8_t v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float v45;
  float32x2_t v46;
  float v47;
  float32x2_t v48;
  float v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float v53;
  float32x2_t v54;
  float v55;
  float32x2_t v56;
  float v57;
  float v58[3];
  unint64_t v59;
  float v60;
  unint64_t v61;

  v9 = 0;
  v10 = (float)a3[11].u32[1] + -0.5;
  v58[0] = (float)a3[11].u32[0] + -0.5;
  v58[1] = v10;
  v58[2] = v58[0];
  v59 = 0xBF000000BF000000;
  v60 = v10;
  v61 = 0xBF000000BF000000;
  v11 = a3[4];
  v12 = a3[5];
  v13 = *result;
  v14 = *a2;
  a5.i32[0] = a2[1].i32[0];
  v15 = a2[2];
  a6.i32[0] = a2[3].i32[0];
  v16 = a2[4];
  *(float32x2_t *)v6.f32 = a2[6];
  v6.i32[2] = a2[7].i32[0];
  v7.i32[0] = a2[5].i32[0];
  v17 = &v44;
  do
  {
    *(float32x2_t *)v8.f32 = vadd_f32(v12, vmul_f32(v11, *(float32x2_t *)&v58[v9]));
    v8.i32[2] = 1.0;
    v18 = vmulq_n_f32(v8, v13.f32[0]);
    v19 = vmulq_lane_f32(v8, v13, 1);
    *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, v18.f32[0]), v15, *(float32x2_t *)v18.f32, 1), v16, v18, 2);
    *(float32x2_t *)v21.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, v19.f32[0]), v15, *(float32x2_t *)v19.f32, 1), v16, v19, 2);
    *(float32x2_t *)&v20.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a5, *(float32x2_t *)v18.f32), a6, *(float32x2_t *)v18.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), v7);
    *(float32x2_t *)&v21.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a5, *(float32x2_t *)v19.f32), a6, *(float32x2_t *)v19.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), v7);
    v22 = vaddq_f32(v6, v21);
    v17[-2] = *(float32x2_t *)v22.f32;
    v17[-1].i32[0] = v22.i32[2];
    v8 = vaddq_f32(v6, v20);
    v17[-1].i32[1] = 1065353216;
    *v17 = *(float32x2_t *)v8.f32;
    v17[1].i32[0] = v8.i32[2];
    v17[1].i32[1] = 1065353216;
    v9 += 2;
    v17 += 4;
  }
  while (v9 != 8);
  v23 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v42, v44), (int8x8_t)v44, (int8x8_t)v42);
  if (v45 >= v43)
    v24 = v43;
  else
    v24 = v45;
  v25 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v44, v42), (int8x8_t)v44, (int8x8_t)v42);
  if (v43 >= v45)
    v26 = v43;
  else
    v26 = v45;
  v27 = (int8x8_t)vcgt_f32(v23, v46);
  if (v47 < v24)
    v24 = v47;
  if (v26 < v47)
    v26 = v47;
  if (v49 < v24)
    v24 = v49;
  if (v26 < v49)
    v26 = v49;
  if (v51 < v24)
    v24 = v51;
  if (v26 < v51)
    v26 = v51;
  if (v53 < v24)
    v24 = v53;
  if (v26 < v53)
    v26 = v53;
  v28 = v57;
  if (v55 < v24)
    v24 = v55;
  if (v26 < v55)
    v26 = v55;
  v29 = (int8x8_t)vcgt_f32(v46, v25);
  v30 = (float32x2_t)vbsl_s8(v27, (int8x8_t)v46, (int8x8_t)v23);
  v31 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v30, v48), (int8x8_t)v48, (int8x8_t)v30);
  v32 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v31, v50), (int8x8_t)v50, (int8x8_t)v31);
  v33 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v32, v52), (int8x8_t)v52, (int8x8_t)v32);
  v34 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v33, v54), (int8x8_t)v54, (int8x8_t)v33);
  v35 = vbsl_s8((int8x8_t)vcgt_f32(v34, v56), (int8x8_t)v56, (int8x8_t)v34);
  if (v57 < v24)
    v24 = v57;
  v36 = (float32x2_t)vbsl_s8(v29, (int8x8_t)v46, (int8x8_t)v25);
  v37 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v48, v36), (int8x8_t)v48, (int8x8_t)v36);
  v38 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v50, v37), (int8x8_t)v50, (int8x8_t)v37);
  v39 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v52, v38), (int8x8_t)v52, (int8x8_t)v38);
  v40 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v54, v39), (int8x8_t)v54, (int8x8_t)v39);
  v41 = vbsl_s8((int8x8_t)vcgt_f32(v56, v40), (int8x8_t)v56, (int8x8_t)v40);
  *(float *)(a4 + 8) = v24;
  *(int8x8_t *)a4 = v35;
  if (v26 < v28)
    v26 = v28;
  *(float *)(a4 + 20) = v26;
  *(int8x8_t *)(a4 + 12) = v41;
  return result;
}

BOOL sub_223EA6200(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, float32x4_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, double a11, int8x16_t a12, int8x16_t a13, float32x2_t a14)
{
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t *v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  float v34;
  double v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  _BYTE *v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  int8x16_t v65;
  float32x2_t v66;
  float v67;
  _BOOL8 result;
  float v69;
  float v70;
  float v71;
  _BOOL4 v72;
  BOOL v73;
  _BYTE v74[32];
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x2_t v79[2];
  _BYTE v80[128];
  uint64_t v81;

  v18 = a7.f32[0];
  v19 = 0;
  v20 = *a2;
  a12.i32[0] = a2[1].i32[0];
  v21 = a2[2];
  a14.i32[0] = a2[3].i32[0];
  v22 = a2[4];
  v14.i32[0] = a2[5].i32[0];
  *(float32x2_t *)v15.f32 = a2[6];
  v15.i32[2] = a2[7].i32[0];
  a8.i64[0] = *(_QWORD *)a5;
  a8.i32[2] = *(_DWORD *)(a5 + 8);
  a9.i64[0] = *(_QWORD *)(a5 + 16);
  a9.i32[2] = *(_DWORD *)(a5 + 24);
  a10.i64[0] = *(_QWORD *)(a5 + 32);
  a10.i32[2] = *(_DWORD *)(a5 + 40);
  v23 = &v81;
  a7.i64[0] = *(_QWORD *)(a5 + 48);
  a7.i32[2] = *(_DWORD *)(a5 + 56);
  v24 = (float)a3[11].u32[1] + -0.5;
  *(float *)v74 = (float)a3[11].u32[0] + -0.5;
  *(float *)&v74[4] = v24;
  *(_DWORD *)&v74[8] = *(_DWORD *)v74;
  *(_QWORD *)&v74[12] = 0xBF000000BF000000;
  *(float *)&v74[20] = v24;
  *(_QWORD *)&v74[24] = 0xBF000000BF000000;
  v25 = a3[4];
  v26 = a3[5];
  v27 = *a1;
  do
  {
    *(float32x2_t *)v17.f32 = vadd_f32(v26, vmul_f32(v25, *(float32x2_t *)&v74[v19]));
    v17.i32[2] = 1.0;
    v28 = (int8x16_t)vmulq_n_f32(v17, v27.f32[0]);
    v29 = (int8x16_t)vmulq_lane_f32(v17, v27, 1);
    *(float32x2_t *)v30.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v20, *(float *)v28.i32), v21, *(float32x2_t *)v28.i8, 1), v22, (float32x4_t)v28, 2);
    *(float32x2_t *)v31.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v20, *(float *)v29.i32), v21, *(float32x2_t *)v29.i8, 1), v22, (float32x4_t)v29, 2);
    *(float32x2_t *)&v30.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a12.i8, *(float32x2_t *)v28.i8), a14, *(float32x2_t *)v28.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), v14);
    *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a12.i8, *(float32x2_t *)v29.i8), a14, *(float32x2_t *)v29.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v14);
    v32 = vaddq_f32(v15, v31);
    *(v23 - 2) = v32.i64[0];
    *((_DWORD *)v23 - 2) = v32.i32[2];
    v17 = vaddq_f32(v15, v30);
    *((_DWORD *)v23 - 1) = 1065353216;
    *v23 = v17.i64[0];
    *((_DWORD *)v23 + 2) = v17.i32[2];
    *((_DWORD *)v23 + 3) = 1065353216;
    v19 += 8;
    v23 += 4;
  }
  while (v19 != 32);
  v33 = 0;
  v34 = (float)*(unsigned int *)(a6 + 92) + -0.5;
  *(float *)v74 = (float)*(unsigned int *)(a6 + 88) + -0.5;
  *(float *)&v74[4] = v34;
  *(_DWORD *)&v74[8] = *(_DWORD *)v74;
  *(_QWORD *)&v74[12] = 0xBF000000BF000000;
  *(float *)&v74[20] = v34;
  *(_QWORD *)&v74[24] = 0xBF000000BF000000;
  v35 = *(double *)(a6 + 32);
  a12.i64[0] = *(_QWORD *)(a6 + 40);
  a13.i64[0] = *a4;
  v36 = vextq_s8(a8, a8, 8uLL);
  v37 = (float32x2_t)vextq_s8(a9, a9, 8uLL).u64[0];
  v38 = (float32x2_t)vextq_s8(a10, a10, 8uLL).u64[0];
  v39 = v80;
  do
  {
    *(float32x2_t *)v16.f32 = vadd_f32(*(float32x2_t *)a12.i8, vmul_f32(*(float32x2_t *)&v35, *(float32x2_t *)&v74[v33]));
    v16.i32[2] = 1.0;
    v40 = (int8x16_t)vmulq_n_f32(v16, *(float *)a13.i32);
    v41 = (int8x16_t)vmulq_lane_f32(v16, *(float32x2_t *)a13.i8, 1);
    *(float32x2_t *)v42.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a8.i8, *(float *)v40.i32), *(float32x2_t *)a9.i8, *(float32x2_t *)v40.i8, 1), *(float32x2_t *)a10.i8, (float32x4_t)v40, 2);
    *(float32x2_t *)v43.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a8.i8, *(float *)v41.i32), *(float32x2_t *)a9.i8, *(float32x2_t *)v41.i8, 1), *(float32x2_t *)a10.i8, (float32x4_t)v41, 2);
    *(float32x2_t *)&v42.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v40.i8), v37, *(float32x2_t *)v40.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), v38);
    *(float32x2_t *)&v43.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v41.i8), v37, *(float32x2_t *)v41.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), v38);
    v44 = vaddq_f32(a7, v43);
    *((_QWORD *)v39 - 2) = v44.i64[0];
    *((_DWORD *)v39 - 2) = v44.i32[2];
    v16 = vaddq_f32(a7, v42);
    *((_DWORD *)v39 - 1) = 1065353216;
    *(_QWORD *)v39 = v16.i64[0];
    *((_DWORD *)v39 + 2) = v16.i32[2];
    *((_DWORD *)v39 + 3) = 1065353216;
    v33 += 8;
    v39 += 32;
  }
  while (v33 != 32);
  sub_223EA5BF8(v79, (float32x2_t *)v74, (__n128)a7, *(double *)a8.i64, *(double *)a9.i64, *(double *)a10.i64, v35, a12, a13, v36);
  v45 = 0;
  v46 = -v18;
  v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74, 1);
  v48 = (float32x2_t)vextq_s8(*(int8x16_t *)v74, *(int8x16_t *)v74, 8uLL).u64[0];
  v49 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v74, 3);
  v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v74[16], 1);
  v51 = (float32x2_t)vextq_s8(*(int8x16_t *)&v74[16], *(int8x16_t *)&v74[16], 8uLL).u64[0];
  v52 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v74[16], 3);
  v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1);
  v54 = (float32x2_t)vextq_s8(v75, v75, 8uLL).u64[0];
  v55 = (float32x2_t)vdup_laneq_s32((int32x4_t)v75, 3);
  v56 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1);
  v57 = (float32x2_t)vextq_s8(v76, v76, 8uLL).u64[0];
  v58 = (float32x2_t)vdup_laneq_s32((int32x4_t)v76, 3);
  v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1);
  v60 = (float32x2_t)vextq_s8(v77, v77, 8uLL).u64[0];
  v61 = (float32x2_t)vdup_laneq_s32((int32x4_t)v77, 3);
  v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1);
  v63 = (float32x2_t)vextq_s8(v78, v78, 8uLL).u64[0];
  v64 = (float32x2_t)vdup_laneq_s32((int32x4_t)v78, 3);
  do
  {
    v65 = *(int8x16_t *)&v80[v45 + 112];
    v66 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
    v67 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v74, *(float32x2_t *)v65.i8), v47, *(float32x2_t *)v65.i8, 1), v66, v48), v49, (float32x4_t)v65, 3).f32[0];
    result = v67 >= v46;
    if (v67 >= v46)
    {
      v69 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v74[16], *(float32x2_t *)v65.i8), v50, *(float32x2_t *)v65.i8, 1), v66, v51), v52, (float32x4_t)v65, 3).f32[0];
      result = v69 >= v46;
      if (v69 >= v46)
      {
        v70 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v65.i8), v53, *(float32x2_t *)v65.i8, 1), v66, v54), v55, (float32x4_t)v65, 3).f32[0];
        result = v70 >= v46;
        if (v70 >= v46)
        {
          LODWORD(v71) = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v65.i8), v56, *(float32x2_t *)v65.i8, 1), v66, v57), v58, (float32x4_t)v65, 3).u32[0];
          v72 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v65.i8), v62, *(float32x2_t *)v65.i8, 1), v66, v63), v64, (float32x4_t)v65, 3).f32[0] >= v46;
          if (vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v65.i8), v59, *(float32x2_t *)v65.i8, 1), v66, v60), v61, (float32x4_t)v65, 3).f32[0] < v46)v72 = 0;
          result = v71 >= v46 && v72;
        }
      }
    }
    if (!result)
      break;
    v73 = v45 == 112;
    v45 += 16;
  }
  while (!v73);
  return result;
}

BOOL sub_223EA6588(double *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x4_t a5, double a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11, int8x16_t a12)
{
  float32x4_t v12;
  uint64_t v14;
  double v15;
  double v16;
  float *v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  _BOOL8 result;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _BYTE v62[32];
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x2_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;

  v14 = 0;
  v15 = *(double *)a2;
  LODWORD(a7) = *(_DWORD *)(a2 + 8);
  v16 = *(double *)(a2 + 16);
  LODWORD(a9) = *(_DWORD *)(a2 + 24);
  a10.i64[0] = *(_QWORD *)(a2 + 32);
  a11.i32[0] = *(_DWORD *)(a2 + 40);
  a5.i64[0] = *(_QWORD *)(a2 + 48);
  a5.i32[2] = *(_DWORD *)(a2 + 56);
  v17 = &v69;
  v18 = (float)a3[11].u32[1] + -0.5;
  *(float *)v62 = (float)a3[11].u32[0] + -0.5;
  *(float *)&v62[4] = v18;
  *(_DWORD *)&v62[8] = *(_DWORD *)v62;
  *(_QWORD *)&v62[12] = 0xBF000000BF000000;
  *(float *)&v62[20] = v18;
  *(_QWORD *)&v62[24] = 0xBF000000BF000000;
  *(float32x2_t *)a12.i8 = a3[4];
  v19 = a3[5];
  v20 = *a4;
  do
  {
    *(float32x2_t *)v12.f32 = vadd_f32(v19, vmul_f32(*(float32x2_t *)a12.i8, *(float32x2_t *)&v62[v14]));
    v12.i32[2] = 1.0;
    v21 = (int8x16_t)vmulq_n_f32(v12, v20.f32[0]);
    v22 = (int8x16_t)vmulq_lane_f32(v12, v20, 1);
    *(float32x2_t *)v23.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v15, *(float *)v21.i32), *(float32x2_t *)&v16, *(float32x2_t *)v21.i8, 1), *(float32x2_t *)a10.i8, (float32x4_t)v21, 2);
    *(float32x2_t *)v24.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v15, *(float *)v22.i32), *(float32x2_t *)&v16, *(float32x2_t *)v22.i8, 1), *(float32x2_t *)a10.i8, (float32x4_t)v22, 2);
    *(float32x2_t *)&v23.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a7, *(float32x2_t *)v21.i8), *(float32x2_t *)&a9, *(float32x2_t *)v21.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(float32x2_t *)a11.i8);
    *(float32x2_t *)&v24.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a7, *(float32x2_t *)v22.i8), *(float32x2_t *)&a9, *(float32x2_t *)v22.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(float32x2_t *)a11.i8);
    v25 = vaddq_f32(a5, v24);
    *((_QWORD *)v17 - 2) = v25.i64[0];
    *(v17 - 2) = v25.f32[2];
    v12 = vaddq_f32(a5, v23);
    *(v17 - 1) = 1.0;
    *(_QWORD *)v17 = v12.i64[0];
    v17[2] = v12.f32[2];
    v17[3] = 1.0;
    v14 += 8;
    v17 += 8;
  }
  while (v14 != 32);
  sub_223EA5BF8(&v67, (float32x2_t *)v62, (__n128)a5, v15, a7, v16, a9, a10, a11, a12);
  v27 = *a1;
  v26 = a1[1];
  v29 = a1[4];
  v28 = a1[5];
  v30 = a1[2];
  v31 = a1[3];
  if (*(float *)v62 <= 0.0)
    v32 = *a1;
  else
    v32 = a1[3];
  *(float *)&v32 = v32;
  if (*(float *)&v62[4] <= 0.0)
    v33 = a1[1];
  else
    v33 = a1[4];
  *(float *)&v33 = v33;
  if (*(float *)&v62[8] <= 0.0)
    v34 = a1[2];
  else
    v34 = a1[5];
  *(float *)&v34 = v34;
  if (vadd_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)v62, 3), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v62, *(float32x2_t *)&v32), *(float32x2_t *)&v33, *(float32x2_t *)v62, 1), *(float32x2_t *)&v34, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v62, *(int8x16_t *)v62, 8uLL))).f32[0] < 0.0)return 0;
  if (*(float *)&v62[16] <= 0.0)
    v35 = *a1;
  else
    v35 = a1[3];
  *(float *)&v35 = v35;
  if (*(float *)&v62[20] <= 0.0)
    v36 = a1[1];
  else
    v36 = a1[4];
  *(float *)&v36 = v36;
  if (*(float *)&v62[24] <= 0.0)
    v37 = a1[2];
  else
    v37 = a1[5];
  *(float *)&v37 = v37;
  if (vadd_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v62[16], 3), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v62[16], *(float32x2_t *)&v35), *(float32x2_t *)&v36, *(float32x2_t *)&v62[16], 1), *(float32x2_t *)&v37, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v62[16], *(int8x16_t *)&v62[16], 8uLL))).f32[0] < 0.0)return 0;
  v38 = *(float *)v63.i32 <= 0.0 ? *a1 : a1[3];
  *(float *)&v38 = v38;
  v39 = *(float *)&v63.i32[1] <= 0.0 ? a1[1] : a1[4];
  *(float *)&v39 = v39;
  v40 = *(float *)&v63.i32[2] <= 0.0 ? a1[2] : a1[5];
  *(float *)&v40 = v40;
  if (vadd_f32((float32x2_t)vdup_laneq_s32(v63, 3), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)&v38), *(float32x2_t *)&v39, *(float32x2_t *)v63.i8, 1), *(float32x2_t *)&v40, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL))).f32[0] < 0.0)return 0;
  v41 = *(float *)v64.i32 <= 0.0 ? *a1 : a1[3];
  *(float *)&v41 = v41;
  v42 = *(float *)&v64.i32[1] <= 0.0 ? a1[1] : a1[4];
  *(float *)&v42 = v42;
  v43 = *(float *)&v64.i32[2] <= 0.0 ? a1[2] : a1[5];
  *(float *)&v43 = v43;
  if (vadd_f32((float32x2_t)vdup_laneq_s32(v64, 3), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)&v41), *(float32x2_t *)&v42, *(float32x2_t *)v64.i8, 1), *(float32x2_t *)&v43, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL))).f32[0] < 0.0)return 0;
  v44 = *(float *)v65.i32 <= 0.0 ? *a1 : a1[3];
  *(float *)&v44 = v44;
  v45 = *(float *)&v65.i32[1] <= 0.0 ? a1[1] : a1[4];
  *(float *)&v45 = v45;
  v46 = *(float *)&v65.i32[2] <= 0.0 ? a1[2] : a1[5];
  *(float *)&v46 = v46;
  if (vadd_f32((float32x2_t)vdup_laneq_s32(v65, 3), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)&v44), *(float32x2_t *)&v45, *(float32x2_t *)v65.i8, 1), *(float32x2_t *)&v46, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL))).f32[0] < 0.0)return 0;
  if (*(float *)v66.i32 <= 0.0)
    v47 = *a1;
  else
    v47 = a1[3];
  *(float *)&v47 = v47;
  if (*(float *)&v66.i32[1] <= 0.0)
    v48 = a1[1];
  else
    v48 = a1[4];
  *(float *)&v48 = v48;
  if (*(float *)&v66.i32[2] <= 0.0)
    v49 = a1[2];
  else
    v49 = a1[5];
  *(float *)&v49 = v49;
  result = 0;
  if (vadd_f32((float32x2_t)vdup_laneq_s32(v66, 3), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v66.i8, *(float32x2_t *)&v47), *(float32x2_t *)&v48, *(float32x2_t *)v66.i8, 1), *(float32x2_t *)&v49, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL))).f32[0] >= 0.0)
  {
    v51 = v27 > v67.f32[0];
    v52 = v31 < v67.f32[0];
    if (v27 > v69)
      ++v51;
    if (v31 < v69)
      ++v52;
    if (v27 > v72)
      ++v51;
    if (v31 < v72)
      ++v52;
    if (v27 > v75)
      ++v51;
    if (v31 < v75)
      ++v52;
    if (v27 > v78)
      ++v51;
    if (v31 < v78)
      ++v52;
    if (v27 > v81)
      ++v51;
    if (v31 < v81)
      ++v52;
    if (v27 > v84)
      ++v51;
    if (v31 < v84)
      ++v52;
    if (v27 <= v87)
      v53 = v51;
    else
      v53 = v51 + 1;
    if (v31 >= v87)
      v54 = v52;
    else
      v54 = v52 + 1;
    if (v53 != 8 && v54 != 8)
    {
      result = 0;
      v55 = v26 > v67.f32[1];
      v56 = v29 < v67.f32[1];
      if (v26 > v70)
        ++v55;
      if (v29 < v70)
        ++v56;
      if (v26 > v73)
        ++v55;
      if (v29 < v73)
        ++v56;
      if (v26 > v76)
        ++v55;
      if (v29 < v76)
        ++v56;
      if (v26 > v79)
        ++v55;
      if (v29 < v79)
        ++v56;
      if (v26 > v82)
        ++v55;
      if (v29 < v82)
        ++v56;
      if (v26 > v85)
        ++v55;
      if (v29 < v85)
        ++v56;
      if (v26 <= v88)
        v57 = v55;
      else
        v57 = v55 + 1;
      if (v29 >= v88)
        v58 = v56;
      else
        v58 = v56 + 1;
      if (v57 != 8 && v58 != 8)
      {
        v59 = v30 > v68;
        v60 = v28 < v68;
        if (v30 > v71)
          ++v59;
        if (v28 < v71)
          ++v60;
        if (v30 > v74)
          ++v59;
        if (v28 < v74)
          ++v60;
        if (v30 > v77)
          ++v59;
        if (v28 < v77)
          ++v60;
        if (v30 > v80)
          ++v59;
        if (v28 < v80)
          ++v60;
        if (v30 > v83)
          ++v59;
        if (v28 < v83)
          ++v60;
        if (v30 > v86)
          ++v59;
        if (v28 < v86)
          ++v60;
        if (v30 > v89)
          ++v59;
        if (v28 < v89)
          ++v60;
        return v59 != 8 && v60 != 8;
      }
    }
  }
  return result;
}

_DWORD *sub_223EA6B44(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;

  v2 = result;
  if (**(_DWORD ***)(a2 + 8) == result
    || (v3 = *(_QWORD *)(a2 + 16), (_DWORD *)(*(_QWORD *)(v3 + 8) - 4 * *(unsigned int *)(v3 + 16)) == result))
  {
    result = (_DWORD *)sub_223EA6B44(&v4);
    *v2 = v4;
  }
  else if (*(_DWORD *)v3)
  {
    return (_DWORD *)sub_22322BD28();
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t sub_223EA6BF8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  int *v14;
  int v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int *v46;
  int v47;
  int **v48;

  v42 = a3 - 1;
  v43 = a2;
  if (a3 <= 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/ImageTriangulation.cpp", 102, (uint64_t)"height > 1", 10, (uint64_t)"Minimal height of 2 is required to create a triangle", 52, (void (*)(void **))sub_22457406C)|| (v45 = v43 - 1, v43 <= 1)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/ImageTriangulation.cpp", 103, (uint64_t)"width > 1", 9, (uint64_t)"Minimal width of 2 is required to create a triangle", 51, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  result = sub_22339E528(a1, 2 * v45 * v42);
  if (v42 && v45)
  {
    v5 = 0;
    v6 = *(int **)(a1 + 8);
    do
    {
      v7 = 0;
      v44 = v5;
      v8 = v5 * v43;
      v9 = v5 * v43 + v43;
      do
      {
        while (1)
        {
          v10 = v7 + v8;
          v11 = v9 + v7;
          v12 = v7 + v8 + 1;
          v13 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v6 < v13)
            break;
          v16 = *(int **)a1;
          v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a1) >> 2);
          v18 = v17 + 1;
          if (v17 + 1 > 0x1555555555555555)
            goto LABEL_50;
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v16) >> 2);
          if (2 * v19 > v18)
            v18 = 2 * v19;
          if (v19 >= 0xAAAAAAAAAAAAAAALL)
            v20 = 0x1555555555555555;
          else
            v20 = v18;
          if (v20)
          {
            LODWORD(v48) = v20;
            v21 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v21 == -1)
              goto LABEL_51;
            v46 = (int *)&v48;
            result = ((uint64_t (*)(int **, uint64_t))off_24EC63C88[v21])(&v46, a1 + 24);
            v16 = *(int **)a1;
            v6 = *(int **)(a1 + 8);
          }
          else
          {
            result = 0;
            v22 = 0;
          }
          v23 = (_DWORD *)(result + 12 * v17);
          *v23 = v10;
          v23[1] = v11;
          v23[2] = v12;
          v24 = v23;
          if (v6 != v16)
          {
            do
            {
              v25 = *(_QWORD *)(v6 - 3);
              v6 -= 3;
              v26 = v6[2];
              *(_QWORD *)(v24 - 3) = v25;
              v24 -= 3;
              v24[2] = v26;
            }
            while (v6 != v16);
            v16 = *(int **)a1;
          }
          v13 = result + 12 * v22;
          v14 = v23 + 3;
          *(_QWORD *)a1 = v24;
          *(_QWORD *)(a1 + 8) = v23 + 3;
          v27 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v13;
          if (v16)
          {
            v46 = v16;
            v47 = -1431655765 * ((unint64_t)(v27 - (_QWORD)v16) >> 2);
            v28 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v28 == -1)
              sub_22316DD70();
            v48 = &v46;
            result = ((uint64_t (*)(int ***, uint64_t))off_24EC63C98[v28])(&v48, a1 + 24);
            v13 = *(_QWORD *)(a1 + 16);
          }
          *(_QWORD *)(a1 + 8) = v14;
          v15 = v11 + 1;
          if ((unint64_t)v14 >= v13)
            goto LABEL_31;
LABEL_10:
          *v14 = v12;
          v14[1] = v11;
          v6 = v14 + 3;
          v14[2] = v15;
          *(_QWORD *)(a1 + 8) = v14 + 3;
          if (++v7 == v45)
            goto LABEL_8;
        }
        *v6 = v10;
        v6[1] = v11;
        v14 = v6 + 3;
        v6[2] = v12;
        *(_QWORD *)(a1 + 8) = v6 + 3;
        v15 = v11 + 1;
        if ((unint64_t)(v6 + 3) < v13)
          goto LABEL_10;
LABEL_31:
        v29 = *(int **)a1;
        v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - *(_QWORD *)a1) >> 2);
        v31 = v30 + 1;
        if (v30 + 1 > 0x1555555555555555)
LABEL_50:
          sub_22316E078();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v29) >> 2);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0xAAAAAAAAAAAAAAALL)
          v33 = 0x1555555555555555;
        else
          v33 = v31;
        if (v33)
        {
          LODWORD(v48) = v33;
          v34 = *(unsigned int *)(a1 + 28);
          if ((_DWORD)v34 == -1)
LABEL_51:
            sub_22316DD70();
          v46 = (int *)&v48;
          result = ((uint64_t (*)(int **, uint64_t))off_24EC63C88[v34])(&v46, a1 + 24);
          v29 = *(int **)a1;
          v14 = *(int **)(a1 + 8);
        }
        else
        {
          result = 0;
          v35 = 0;
        }
        v36 = (int *)(result + 12 * v30);
        *v36 = v12;
        v36[1] = v11;
        v36[2] = v15;
        v37 = v36;
        if (v14 != v29)
        {
          do
          {
            v38 = *(_QWORD *)(v14 - 3);
            v14 -= 3;
            v39 = v14[2];
            *(_QWORD *)(v37 - 3) = v38;
            v37 -= 3;
            v37[2] = v39;
          }
          while (v14 != v29);
          v29 = *(int **)a1;
        }
        v6 = v36 + 3;
        *(_QWORD *)a1 = v37;
        *(_QWORD *)(a1 + 8) = v36 + 3;
        v40 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = result + 12 * v35;
        if (v29)
        {
          v46 = v29;
          v47 = -1431655765 * ((unint64_t)(v40 - (_QWORD)v29) >> 2);
          v41 = *(unsigned int *)(a1 + 28);
          if ((_DWORD)v41 == -1)
            sub_22316DD70();
          v48 = &v46;
          result = ((uint64_t (*)(int ***, uint64_t))off_24EC63C98[v41])(&v48, a1 + 24);
        }
        *(_QWORD *)(a1 + 8) = v6;
        ++v7;
      }
      while (v7 != v45);
LABEL_8:
      v5 = v44 + 1;
    }
    while (v44 + 1 != v42);
  }
  return result;
}

__n64 sub_223EA7054@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, float32x4_t a6@<Q0>, float32x4_t a7@<Q1>, float32x4_t a8@<Q2>)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int32 v25;
  uint64_t v26;
  unsigned __int32 v27;
  uint64_t v28;
  __int128 v29;
  unsigned __int32 v30;
  unsigned __int32 v31;
  unsigned __int32 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  __n64 result;
  int32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  unint64_t v70;
  _BYTE v71[20];
  __int32 v72;
  float32x2_t v73;
  __int32 v74;
  float32x2_t v75;
  __int32 v76;
  _BYTE v77[20];
  float v78;
  uint64_t v79;
  char v80;
  float32x4_t v81;
  __int128 v82;
  unsigned __int32 v83;

  v17 = a1[1] - *a1;
  if (v17 != a2[1] - *a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PointCloudAlignment.cpp", 32, (uint64_t)"src.size() == dst.size()", 24, (uint64_t)"number of elements mismatch", 27, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_27;
    }
    v17 = a1[1] - *a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) <= 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PointCloudAlignment.cpp", 33, (uint64_t)"src.size() >= 3", 15, (uint64_t)"at least 3 point pairs are required", 35, (void (*)(void **))sub_22457406C))
  {
LABEL_27:
    abort();
  }
  if (a4)
  {
    v19 = *a1;
    v18 = a1[1];
    v21 = *a3;
    v20 = a3[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v18 - *a1) >> 2) == (v20 - *a3) >> 2)
    {
LABEL_10:
      v23 = *a2;
      v22 = a2[1];
      if (v19 != v18 || v23 != v22 || v21 != v20)
      {
        a6.i32[0] = 0;
        v24 = v21 + 4;
        v25 = 0;
        v26 = v23 + 12;
        v27 = 0;
        v28 = v19 + 12;
        a7.i32[0] = 0;
        LODWORD(v29) = 0;
        v30 = 0;
        a8.i32[0] = 0;
        v31 = 0;
        v32 = 0;
        do
        {
          do
          {
            v33 = v24;
            v34 = v26;
            v35 = v28;
            v9.i64[0] = *(_QWORD *)(v28 - 12);
            v9.i32[2] = *(_DWORD *)(v28 - 4);
            v36 = vmulq_n_f32(v9, *(float *)(v24 - 4));
            v10.i64[0] = *(_QWORD *)(v26 - 12);
            v37 = (float32x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
            v38 = v10;
            v38.i32[2] = *(_DWORD *)(v26 - 4);
            *(float32x2_t *)v39.f32 = vmul_n_f32(*(float32x2_t *)v36.f32, v10.f32[0]);
            *(float32x2_t *)&v39.u32[2] = vmul_f32(v37, *(float32x2_t *)v10.f32);
            v40 = vmul_lane_f32(v37, *(float32x2_t *)v10.f32, 1);
            *(float32x2_t *)v41.f32 = vmul_lane_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32, 1);
            *(float32x2_t *)&v41.u32[2] = v40;
            *(float32x2_t *)v9.f32 = vmul_n_f32(*(float32x2_t *)v36.f32, v38.f32[2]);
            v9.i32[2] = vdupq_laneq_s32((int32x4_t)vmulq_f32(v36, v38), 2).u32[0];
            a6.i32[1] = v25;
            a6.i32[2] = v27;
            a7.i32[1] = v29;
            a7.i32[2] = v30;
            a8.i32[1] = v31;
            a8.i32[2] = v32;
            a6 = vaddq_f32(a6, v39);
            a7 = vaddq_f32(a7, v41);
            a8 = vaddq_f32(a8, v9);
            v30 = a7.u32[2];
            LODWORD(v29) = a7.i32[1];
            v27 = a6.u32[2];
            v25 = a6.u32[1];
            v32 = a8.u32[2];
            v31 = a8.u32[1];
            v24 += 4;
            v26 += 12;
            v28 += 12;
          }
          while (v35 != v18);
        }
        while (v34 != v22 || v33 != v20);
        goto LABEL_24;
      }
LABEL_20:
      a6.i32[0] = 0;
      v25 = 0;
      v27 = 0;
      a7.i32[0] = 0;
      LODWORD(v29) = 0;
      v30 = 0;
      a8.i32[0] = 0;
      v31 = 0;
      v32 = 0;
      goto LABEL_24;
    }
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PointCloudAlignment.cpp", 39, (uint64_t)"src.size() == weights->size()", 29, (uint64_t)"number of elements mismatch", 27, (void (*)(void **))sub_22457406C))
    {
      v19 = *a1;
      v18 = a1[1];
      v21 = *a3;
      v20 = a3[1];
      goto LABEL_10;
    }
    goto LABEL_27;
  }
  v42 = a1[1];
  v44 = *a2;
  v43 = a2[1];
  if (*a1 == v42 && v44 == v43)
    goto LABEL_20;
  a6.i32[0] = 0;
  v45 = v44 + 12;
  v25 = 0;
  v46 = *a1 + 12;
  v27 = 0;
  a7.i32[0] = 0;
  LODWORD(v29) = 0;
  v30 = 0;
  a8.i32[0] = 0;
  v31 = 0;
  v32 = 0;
  do
  {
    do
    {
      v47 = v45;
      v48 = v46;
      v8.i32[0] = *(_DWORD *)(v46 - 4);
      v9.i64[0] = *(_QWORD *)(v46 - 12);
      v9.i32[2] = v8.i32[0];
      v11.i64[0] = *(_QWORD *)(v45 - 12);
      v11.i32[2] = *(_DWORD *)(v45 - 4);
      *(float32x2_t *)v49.f32 = vmul_n_f32(*(float32x2_t *)v9.f32, v11.f32[0]);
      *(float32x2_t *)&v49.u32[2] = vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v11.f32);
      *(float32x2_t *)v50.f32 = vmul_lane_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v11.f32, 1);
      *(float32x2_t *)&v50.u32[2] = vmul_lane_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v11.f32, 1);
      *(float32x2_t *)v8.f32 = vmul_n_f32(*(float32x2_t *)v9.f32, v11.f32[2]);
      v9 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v9, v11), 2);
      v8.i32[2] = v9.i32[0];
      a6.i32[1] = v25;
      a6.i32[2] = v27;
      a7.i32[1] = v29;
      a7.i32[2] = v30;
      a8.i32[1] = v31;
      a8.i32[2] = v32;
      a6 = vaddq_f32(a6, v49);
      a7 = vaddq_f32(a7, v50);
      a8 = vaddq_f32(a8, v8);
      v30 = a7.u32[2];
      LODWORD(v29) = a7.i32[1];
      v27 = a6.u32[2];
      v25 = a6.u32[1];
      v32 = a8.u32[2];
      v31 = a8.u32[1];
      v45 += 12;
      v46 += 12;
    }
    while (v48 != v42);
  }
  while (v47 != v43);
LABEL_24:
  v80 = 0;
  a6.i32[1] = v25;
  a6.i64[1] = __PAIR64__(a7.u32[0], v27);
  v79 = 0x300000003;
  v83 = v32;
  DWORD1(v29) = v30;
  *((_QWORD *)&v29 + 1) = __PAIR64__(v31, a8.u32[0]);
  v81 = a6;
  v82 = v29;
  sub_223CD406C((uint64_t)v71);
  v51.i32[0] = v72;
  v52.i32[0] = v74;
  v53.i32[0] = v76;
  v54 = (float32x2_t)vextq_s8(*(int8x16_t *)v71, *(int8x16_t *)v71, 8uLL).u64[0];
  v55 = vmla_lane_f32(vmul_f32(v54, v75), v51, v75, 1);
  v56 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v71, *(float *)v77), *(float32x2_t *)&v71[12], *(float32x2_t *)v77, 1), v73, *(float32x4_t *)v77, 2);
  v57 = (float32x2_t)vextq_s8(*(int8x16_t *)v77, *(int8x16_t *)v77, 8uLL).u64[0];
  v58 = vmla_f32(vmla_lane_f32(vmul_f32(v54, *(float32x2_t *)v77), v51, *(float32x2_t *)v77, 1), v57, v52);
  v57.f32[0] = v78;
  result.n64_u64[0] = (unint64_t)vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v71, v75.f32[0]), *(float32x2_t *)&v71[12], v75, 1), v73, *(float *)&v76);
  *(float32x2_t *)v60.i8 = v56;
  v60.u64[1] = (unint64_t)v58;
  v61 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v71, *(float *)&v77[12]), *(float32x2_t *)&v71[12], *(float32x2_t *)&v77[12], 1), v73, v78);
  v62 = vmla_f32(vmla_lane_f32(vmul_f32(v54, *(float32x2_t *)&v77[12]), v51, *(float32x2_t *)&v77[12], 1), v57, v52);
  *(float32x2_t *)v63.i8 = v61;
  v63.u64[1] = (unint64_t)v62;
  v64 = vmla_f32(v55, v53, v52);
  v65 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL);
  v66 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v60, (int8x16_t)v60, 0xCuLL), (int8x16_t)v60, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v63, v63), (int8x16_t)v63, 0xCuLL)), v65, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v63, (int8x16_t)v63, 0xCuLL), (int8x16_t)v63, 8uLL));
  *(float32x2_t *)v63.i8 = vmla_lane_f32(vmul_f32((float32x2_t)result.n64_u64[0], *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), (float32x2_t)result.n64_u64[0], 1);
  v67 = (float32x2_t)vextq_s8(v66, v66, 8uLL).u64[0];
  v68 = vmla_f32(*(float32x2_t *)v63.i8, v67, v64);
  if (v68.f32[0] <= 0.0)
  {
    v56.i32[0] = v76;
    result.n64_u32[0] = *(_DWORD *)&v77[8];
    v68.f32[0] = v78;
    v76 = vneg_f32(v56).u32[0];
    *(_DWORD *)&v77[8] = vneg_f32((float32x2_t)result.n64_u64[0]).u32[0];
    LODWORD(v78) = vneg_f32(v68).u32[0];
    v67.i32[0] = v72;
    v65.i32[0] = v74;
    result.n64_u64[0] = (unint64_t)vmls_lane_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v71, v75.f32[0]), *(float32x2_t *)&v71[12], v75, 1), v73, v56, 0);
    v69 = (float32x2_t)vextq_s8(*(int8x16_t *)v71, *(int8x16_t *)v71, 8uLL).u64[0];
    v64.i32[0] = vmls_f32(vmla_lane_f32(vmul_f32(v69, v75), v67, v75, 1), *(float32x2_t *)v65.f32, v56).u32[0];
    v56 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v71, *(float *)v77), *(float32x2_t *)&v71[12], *(float32x2_t *)v77, 1), v73, *(float32x4_t *)v77, 2);
    v58.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v69, *(float32x2_t *)v77), v67, *(float32x2_t *)v77, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v77, *(int8x16_t *)v77, 8uLL), *(float32x2_t *)v65.f32).u32[0];
    v61 = vmls_lane_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v71, *(float *)&v77[12]), *(float32x2_t *)&v71[12], *(float32x2_t *)&v77[12], 1), v73, v68, 0);
    v62.i32[0] = vmls_f32(vmla_lane_f32(vmul_f32(v69, *(float32x2_t *)&v77[12]), v67, *(float32x2_t *)&v77[12], 1), *(float32x2_t *)v65.f32, v68).u32[0];
  }
  v70 = __PAIR64__(v56.u32[1], result.n64_u32[1]);
  result.n64_u32[1] = v56.i32[0];
  v64.i32[1] = v58.i32[0];
  *(_DWORD *)(a5 + 8) = v61.i32[0];
  *(__n64 *)a5 = result;
  *(_DWORD *)(a5 + 20) = v61.i32[1];
  *(_QWORD *)(a5 + 12) = v70;
  *(_DWORD *)(a5 + 32) = v62.i32[0];
  *(float32x2_t *)(a5 + 24) = v64;
  return result;
}

void sub_223EA75B4(float32x2_t **a1@<X0>, float32x2_t **a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, float32x4_t a6@<Q0>, float32x4_t a7@<Q1>, float32x4_t a8@<Q2>, int8x16_t a9@<Q5>)
{
  int32x4_t v9;
  int32x2_t v10;
  float32x2_t *v15;
  float32x2_t *v16;
  int64_t v17;
  unint64_t v18;
  float32x2_t *v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  float *v23;
  unint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;
  float v28;
  _BOOL4 v29;
  float v30;
  float v31;
  float v32;
  float32x2_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float v40;
  unint64_t v41;
  unint64_t v42;
  float *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  unint64_t v50;
  float *v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float *v57;
  float v58;
  unint64_t v59;
  float *v60;
  uint64_t v61;
  float v62;
  float v63;
  float *v64;
  float v65;
  uint64_t v66;
  float *v67;
  float v68;
  unint64_t v69;
  unint64_t v70;
  float *v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float *v77;
  unint64_t v78;
  float *v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float *v85;
  unint64_t v86;
  float *v87;
  uint64_t v88;
  float v89;
  float v90;
  float *v91;
  float v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  float32x4_t *v97;
  uint64_t v98;
  const float *v99;
  const float *v100;
  unsigned __int128 v101;
  unsigned __int128 v102;
  float32x4_t v103;
  float32x4_t v104;
  float *v105;
  int v106;
  uint64_t v107;
  float v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  float32x4_t *v116;
  uint64_t v117;
  const float *v118;
  const float *v119;
  unsigned __int128 v120;
  unsigned __int128 v121;
  float32x4_t v122;
  float32x4_t v123;
  float *v124;
  int v125;
  uint64_t v126;
  float v127;
  float v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float32x4_t *v135;
  uint64_t v136;
  const float *v137;
  const float *v138;
  unsigned __int128 v139;
  unsigned __int128 v140;
  float32x4_t v141;
  float32x4_t v142;
  float *v143;
  int v144;
  uint64_t v145;
  float v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float32x4_t *v152;
  uint64_t v153;
  const float *v154;
  const float *v155;
  unsigned __int128 v156;
  unsigned __int128 v157;
  float32x4_t v158;
  float32x4_t v159;
  float *v160;
  int v161;
  uint64_t v162;
  float v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float32x4_t *v168;
  uint64_t v169;
  const float *v170;
  const float *v171;
  unsigned __int128 v172;
  unsigned __int128 v173;
  float32x4_t v174;
  float *v175;
  int v176;
  uint64_t v177;
  float v178;
  float v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x4_t *v183;
  uint64_t v184;
  const float *v185;
  const float *v186;
  unsigned __int128 v187;
  unsigned __int128 v188;
  float32x4_t v189;
  float32x4_t v190;
  float *v191;
  int v192;
  uint64_t v193;
  float v194;
  char *v195;
  unint64_t v196;
  float32x2_t *v197;
  float32x2_t *v198;
  uint64_t v199;
  char *v200;
  void *v201;
  unint64_t v202;
  int8x16_t v203;
  __int128 v204;
  float32x2_t v205;
  float32x2_t v206;
  float32x4_t v207;
  __int128 v208;
  float32x4_t v209;
  float32x4_t v210;
  int8x16_t v212;
  int32x2_t v213;
  float32x4_t v214;
  float32x4_t v215;
  _BYTE v216[20];
  unsigned __int32 v217;
  unint64_t v218;
  unsigned __int32 v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;

  v16 = *a1;
  v15 = a1[1];
  v17 = (char *)v15 - (char *)*a1;
  if (v17 != (char *)a2[1] - (char *)*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PointCloudAlignment.cpp", 65, (uint64_t)"src.size() == dst.size()", 24, (uint64_t)"number of elements mismatch", 27, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_150;
    }
    v16 = *a1;
    v15 = a1[1];
    v17 = (char *)v15 - (char *)*a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) <= 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PointCloudAlignment.cpp", 66, (uint64_t)"src.size() >= 3", 15, (uint64_t)"at least 3 point pairs are required", 35, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_150;
    }
    v16 = *a1;
    v15 = a1[1];
    v17 = (char *)v15 - (char *)*a1;
  }
  v18 = v17 / 12;
  v19 = *a2;
  v20 = ((char *)a2[1] - (char *)*a2) / 12;
  if (a4)
  {
    v21 = (_DWORD *)*a3;
    v22 = a3[1] - *a3;
    if ((v22 & 0x3FFFFFFFCLL) != 0)
    {
      v10.i32[0] = *v21;
      if ((v22 >> 2) != 1)
      {
        v23 = (float *)(v21 + 1);
        if ((v22 & 0x3FFFFFFFCLL) == 8)
          goto LABEL_14;
        v24 = (((v22 & 0x3FFFFFFFCLL) - 8) >> 2) + 1;
        v23 += v24 & 0x7FFFFFFFFFFFFFFELL;
        v25 = (float *)(v21 + 2);
        v26 = v24 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          *(float *)v10.i32 = (float)(*(float *)v10.i32 + *(v25 - 1)) + *v25;
          v25 += 2;
          v26 -= 2;
        }
        while (v26);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFFELL))
        {
LABEL_14:
          v27 = (float *)&v21[(v22 >> 2)];
          do
          {
            v28 = *v23++;
            *(float *)v10.i32 = *(float *)v10.i32 + v28;
          }
          while (v23 != v27);
        }
      }
      if (*(float *)v10.i32 > 0.0)
      {
LABEL_24:
        if ((_DWORD)v18)
        {
          v30 = *(float *)v21;
          a7.f32[0] = v16->f32[0] * *(float *)v21;
          if ((_DWORD)v18 == 1)
          {
            a7.f32[1] = v30 * v16->f32[1];
            *(int32x2_t *)a8.f32 = vdup_lane_s32(v10, 0);
            *(float32x2_t *)a7.f32 = vdiv_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a8.f32);
            v214 = a7;
            v31 = (float)(v30 * v16[1].f32[0]) / *(float *)v10.i32;
            if (!(_DWORD)v20)
              goto LABEL_125;
          }
          else
          {
            v34 = (v18 - 1);
            if (v34 > 8)
            {
              v94 = 3 * (v18 - 2);
              v35 = 1;
              if (v94 <= 0xFFFFFFFC && (v94 & 0xFFFFFFFF00000000) == 0)
              {
                v95 = ((_BYTE)v18 - 1) & 7;
                if ((((_BYTE)v18 - 1) & 7) == 0)
                  v95 = 8;
                v96 = v34 - v95;
                v35 = v96 + 1;
                v97 = (float32x4_t *)(v21 + 5);
                v98 = 15;
                do
                {
                  v99 = (const float *)v16 + ((v98 - 12) & 0xFFFFFFFBLL);
                  v100 = (const float *)v16 + v98;
                  v101 = (unsigned __int128)vld3q_f32(v99);
                  v102 = (unsigned __int128)vld3q_f32(v100);
                  v103 = vmulq_f32((float32x4_t)v101, v97[-1]);
                  v104 = vmulq_f32((float32x4_t)v102, *v97);
                  a7.f32[0] = (float)((float)((float)((float)((float)((float)((float)(a7.f32[0] + v103.f32[0])
                                                                            + v103.f32[1])
                                                                    + v103.f32[2])
                                                            + v103.f32[3])
                                                    + v104.f32[0])
                                            + v104.f32[1])
                                    + v104.f32[2])
                            + v104.f32[3];
                  v98 += 24;
                  v97 += 2;
                  v96 -= 8;
                }
                while (v96);
              }
            }
            else
            {
              v35 = 1;
            }
            v105 = (float *)&v21[v35];
            v106 = v18 - v35;
            v107 = 3 * v35;
            do
            {
              v108 = *v105++;
              a7.f32[0] = a7.f32[0] + (float)(v16->f32[v107] * v108);
              v107 += 3;
              --v106;
            }
            while (v106);
            v109 = v30 * v16->f32[1];
            v110 = (v18 - 2);
            v111 = v110 + 1;
            if (v110 >= 8)
            {
              v132 = 3 * (v18 - 2);
              v112 = 1;
              if (v132 <= 0xFFFFFFFB && (v132 & 0xFFFFFFFF00000000) == 0)
              {
                v133 = v111 & 7;
                if ((v111 & 7) == 0)
                  v133 = 8;
                v134 = v111 - v133;
                v112 = v111 - v133 + 1;
                v135 = (float32x4_t *)(v21 + 5);
                v136 = 16;
                do
                {
                  v137 = (const float *)v16 + (((_DWORD)v136 - 12) & 0xFFFFFFFC);
                  v138 = (const float *)v16 + (v136 & 0xFFFFFFF8);
                  v139 = (unsigned __int128)vld3q_f32(v137);
                  v140 = (unsigned __int128)vld3q_f32(v138);
                  v141 = vmulq_f32((float32x4_t)v139, v135[-1]);
                  v142 = vmulq_f32((float32x4_t)v140, *v135);
                  v109 = (float)((float)((float)((float)((float)((float)((float)(v109 + v141.f32[0]) + v141.f32[1])
                                                               + v141.f32[2])
                                                       + v141.f32[3])
                                               + v142.f32[0])
                                       + v142.f32[1])
                               + v142.f32[2])
                       + v142.f32[3];
                  v136 += 24;
                  v135 += 2;
                  v134 -= 8;
                }
                while (v134);
              }
            }
            else
            {
              v112 = 1;
            }
            v143 = (float *)&v21[v112];
            v144 = v18 - v112;
            v145 = 3 * v112 + 1;
            a7.f32[0] = a7.f32[0] / *(float *)v10.i32;
            v215 = a7;
            do
            {
              v146 = *v143++;
              v109 = v109 + (float)(v16->f32[v145] * v146);
              v145 += 3;
              --v144;
            }
            while (v144);
            v147 = v30 * v16[1].f32[0];
            if (v110 >= 8)
            {
              v165 = 3 * (v18 - 2);
              v148 = 1;
              if (v165 <= 0xFFFFFFFA && (v165 & 0xFFFFFFFF00000000) == 0)
              {
                v166 = v111 & 7;
                if ((v111 & 7) == 0)
                  v166 = 8;
                v167 = v111 - v166;
                v148 = v167 + 1;
                v168 = (float32x4_t *)(v21 + 5);
                v169 = 17;
                do
                {
                  v170 = (const float *)v16 + ((v169 - 12) & 0xFFFFFFFDLL);
                  v171 = (const float *)v16 + (v169 & 0xFFFFFFF9);
                  v172 = (unsigned __int128)vld3q_f32(v170);
                  v173 = (unsigned __int128)vld3q_f32(v171);
                  a7 = vmulq_f32((float32x4_t)v172, v168[-1]);
                  v174 = vmulq_f32((float32x4_t)v173, *v168);
                  v147 = (float)((float)((float)((float)((float)((float)((float)(v147 + a7.f32[0]) + a7.f32[1])
                                                               + a7.f32[2])
                                                       + a7.f32[3])
                                               + v174.f32[0])
                                       + v174.f32[1])
                               + v174.f32[2])
                       + v174.f32[3];
                  v169 += 24;
                  v168 += 2;
                  v167 -= 8;
                }
                while (v167);
              }
            }
            else
            {
              v148 = 1;
            }
            v175 = (float *)&v21[v148];
            v176 = v18 - v148;
            v177 = 3 * v148 + 2;
            v178 = v109 / *(float *)v10.i32;
            do
            {
              v179 = *v175++;
              v147 = v147 + (float)(v16->f32[v177] * v179);
              v177 += 3;
              --v176;
            }
            while (v176);
            a8 = v215;
            a8.f32[1] = v178;
            v214 = a8;
            v31 = v147 / *(float *)v10.i32;
            if (!(_DWORD)v20)
              goto LABEL_125;
          }
        }
        else
        {
          a7.f32[0] = 0.0 / *(float *)v10.i32;
          a7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
          v214 = a7;
          v31 = 0.0 / *(float *)v10.i32;
          if (!(_DWORD)v20)
          {
LABEL_125:
            a7.i32[0] = 0;
            a8.f32[0] = 0.0 / *(float *)v10.i32;
            v9 = vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
            goto LABEL_135;
          }
        }
        v32 = *(float *)v21;
        v33.f32[0] = v19->f32[0] * *(float *)v21;
        if ((_DWORD)v20 == 1)
        {
          v33.f32[1] = v32 * v19->f32[1];
          *(float32x2_t *)v9.i8 = vdiv_f32(v33, (float32x2_t)vdup_lane_s32(v10, 0));
          a7.f32[0] = v32 * v19[1].f32[0];
        }
        else
        {
          v36 = (v20 - 1);
          if (v36 > 8)
          {
            v113 = 3 * (v20 - 2);
            v37 = 1;
            if (v113 <= 0xFFFFFFFC && (v113 & 0xFFFFFFFF00000000) == 0)
            {
              v114 = ((_BYTE)v20 - 1) & 7;
              if ((((_BYTE)v20 - 1) & 7) == 0)
                v114 = 8;
              v115 = v36 - v114;
              v37 = v115 + 1;
              v116 = (float32x4_t *)(v21 + 5);
              v117 = 15;
              do
              {
                v118 = (const float *)v19 + ((v117 - 12) & 0xFFFFFFFBLL);
                v119 = (const float *)v19 + v117;
                v120 = (unsigned __int128)vld3q_f32(v118);
                v121 = (unsigned __int128)vld3q_f32(v119);
                v122 = vmulq_f32((float32x4_t)v120, v116[-1]);
                v123 = vmulq_f32((float32x4_t)v121, *v116);
                v33.f32[0] = (float)((float)((float)((float)((float)((float)((float)(v33.f32[0] + v122.f32[0])
                                                                           + v122.f32[1])
                                                                   + v122.f32[2])
                                                           + v122.f32[3])
                                                   + v123.f32[0])
                                           + v123.f32[1])
                                   + v123.f32[2])
                           + v123.f32[3];
                v117 += 24;
                v116 += 2;
                v115 -= 8;
              }
              while (v115);
            }
          }
          else
          {
            v37 = 1;
          }
          v124 = (float *)&v21[v37];
          v125 = v20 - v37;
          v126 = 3 * v37;
          do
          {
            v127 = *v124++;
            v33.f32[0] = v33.f32[0] + (float)(v19->f32[v126] * v127);
            v126 += 3;
            --v125;
          }
          while (v125);
          v128 = v32 * v19->f32[1];
          v129 = (v20 - 2);
          v130 = v129 + 1;
          if (v129 >= 8)
          {
            v149 = 3 * (v20 - 2);
            v131 = 1;
            if (v149 <= 0xFFFFFFFB && (v149 & 0xFFFFFFFF00000000) == 0)
            {
              v150 = v130 & 7;
              if ((v130 & 7) == 0)
                v150 = 8;
              v151 = v130 - v150;
              v131 = v130 - v150 + 1;
              v152 = (float32x4_t *)(v21 + 5);
              v153 = 16;
              do
              {
                v154 = (const float *)v19 + (((_DWORD)v153 - 12) & 0xFFFFFFFC);
                v155 = (const float *)v19 + (v153 & 0xFFFFFFF8);
                v156 = (unsigned __int128)vld3q_f32(v154);
                v157 = (unsigned __int128)vld3q_f32(v155);
                v9 = *(int32x4_t *)v152;
                v158 = vmulq_f32((float32x4_t)v156, v152[-1]);
                v159 = vmulq_f32((float32x4_t)v157, *v152);
                v128 = (float)((float)((float)((float)((float)((float)((float)(v128 + v158.f32[0]) + v158.f32[1])
                                                             + v158.f32[2])
                                                     + v158.f32[3])
                                             + v159.f32[0])
                                     + v159.f32[1])
                             + v159.f32[2])
                     + v159.f32[3];
                v153 += 24;
                v152 += 2;
                v151 -= 8;
              }
              while (v151);
            }
          }
          else
          {
            v131 = 1;
          }
          v160 = (float *)&v21[v131];
          v161 = v20 - v131;
          v162 = 3 * v131 + 1;
          *(float *)v9.i32 = v33.f32[0] / *(float *)v10.i32;
          do
          {
            v163 = *v160++;
            v128 = v128 + (float)(v19->f32[v162] * v163);
            v162 += 3;
            --v161;
          }
          while (v161);
          a7.f32[0] = v32 * v19[1].f32[0];
          if (v129 >= 8)
          {
            v180 = 3 * (v20 - 2);
            v164 = 1;
            if (v180 <= 0xFFFFFFFA && (v180 & 0xFFFFFFFF00000000) == 0)
            {
              v181 = v130 & 7;
              if ((v130 & 7) == 0)
                v181 = 8;
              v182 = v130 - v181;
              v164 = v182 + 1;
              v183 = (float32x4_t *)(v21 + 5);
              v184 = 17;
              do
              {
                v185 = (const float *)v19 + ((v184 - 12) & 0xFFFFFFFDLL);
                v186 = (const float *)v19 + (v184 & 0xFFFFFFF9);
                v187 = (unsigned __int128)vld3q_f32(v185);
                v188 = (unsigned __int128)vld3q_f32(v186);
                v189 = vmulq_f32((float32x4_t)v187, v183[-1]);
                v190 = vmulq_f32((float32x4_t)v188, *v183);
                a7.f32[0] = (float)((float)((float)((float)((float)((float)((float)(a7.f32[0] + v189.f32[0])
                                                                          + v189.f32[1])
                                                                  + v189.f32[2])
                                                          + v189.f32[3])
                                                  + v190.f32[0])
                                          + v190.f32[1])
                                  + v190.f32[2])
                          + v190.f32[3];
                v184 += 24;
                v183 += 2;
                v182 -= 8;
              }
              while (v182);
            }
          }
          else
          {
            v164 = 1;
          }
          v191 = (float *)&v21[v164];
          v192 = v20 - v164;
          v193 = 3 * v164 + 2;
          do
          {
            v194 = *v191++;
            a7.f32[0] = a7.f32[0] + (float)(v19->f32[v193] * v194);
            v193 += 3;
            --v192;
          }
          while (v192);
          *(float *)&v9.i32[1] = v128 / *(float *)v10.i32;
        }
LABEL_135:
        a8 = v214;
        a8.f32[2] = v31;
        v212 = (int8x16_t)a8;
        a6.f32[0] = a7.f32[0] / *(float *)v10.i32;
        *(float *)&v9.i32[2] = a7.f32[0] / *(float *)v10.i32;
        v210 = (float32x4_t)v9;
        v16 = *a1;
        v15 = a1[1];
        v17 = (char *)v15 - (char *)*a1;
        v18 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 2);
        v223 = 0;
        v224 = 0;
        v225 = 0;
        if (v15 != v16)
          goto LABEL_136;
LABEL_75:
        v93 = 0;
        goto LABEL_139;
      }
    }
    else
    {
      v10.i32[0] = 0;
    }
    v213 = v10;
    v29 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PointCloudAlignment.cpp", 81, (uint64_t)"total_weight > 0.f", 18, (uint64_t)"All weights are zero", 20, (void (*)(void **))sub_22457406C);
    v10 = v213;
    if (!v29)
      goto LABEL_24;
LABEL_150:
    abort();
  }
  a6.f32[0] = (float)v18;
  if ((_DWORD)v18)
  {
    if ((_DWORD)v18 == 1)
    {
      *(int32x2_t *)a7.f32 = vdup_lane_s32(*(int32x2_t *)a6.f32, 0);
      *(float32x2_t *)a8.f32 = vdiv_f32(*v16, *(float32x2_t *)a7.f32);
      a8.f32[2] = v16[1].f32[0] / a6.f32[0];
      v212 = (int8x16_t)a8;
      a6.f32[0] = (float)v20;
      if (!(_DWORD)v20)
        goto LABEL_56;
    }
    else
    {
      v38 = 4 * (3 * v18);
      v39 = (float *)&v16[1] + 1;
      v40 = v16->f32[0];
      v41 = v38 - 24;
      if ((unint64_t)(v38 - 24) < 0xC)
        goto LABEL_155;
      v42 = v41 / 0xC + 1;
      v39 += 3 * (v42 & 0x3FFFFFFFFFFFFFFELL);
      v43 = (float *)&v16[3];
      v44 = v42 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v45 = *(v43 - 3);
        v46 = *v43;
        v43 += 6;
        v40 = (float)(v40 + v45) + v46;
        v44 -= 2;
      }
      while (v44);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_155:
        do
        {
          v47 = *v39;
          v39 += 3;
          v40 = v40 + v47;
        }
        while (v39 != (float *)((char *)v16 + v38));
      }
      v48 = v16->f32[1];
      v49 = (float *)&v16[2];
      if (v41 < 0xC)
        goto LABEL_156;
      v50 = v41 / 0xC + 1;
      v49 += 3 * (v50 & 0x3FFFFFFFFFFFFFFELL);
      v51 = (float *)&v16[3] + 1;
      v52 = v50 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v53 = *(v51 - 3);
        v54 = *v51;
        v51 += 6;
        v48 = (float)(v48 + v53) + v54;
        v52 -= 2;
      }
      while (v52);
      if (v50 != (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_156:
        do
        {
          v55 = *v49;
          v49 += 3;
          v48 = v48 + v55;
        }
        while (v49 != (float *)&v16->i32[(unint64_t)v38 / 4 + 1]);
      }
      *(float *)a9.i32 = v40 / a6.f32[0];
      v56 = v16[1].f32[0];
      v57 = (float *)&v16[2] + 1;
      v58 = v48 / a6.f32[0];
      if (v41 < 0xC)
        goto LABEL_53;
      v59 = v41 / 0xC + 1;
      v57 += 3 * (v59 & 0x3FFFFFFFFFFFFFFELL);
      v60 = (float *)&v16[4];
      v61 = v59 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v62 = *(v60 - 3);
        v63 = *v60;
        v60 += 6;
        a8.f32[0] = v56 + v62;
        v56 = a8.f32[0] + v63;
        v61 -= 2;
      }
      while (v61);
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_53:
        v64 = (float *)((char *)&v16[1] + v38);
        do
        {
          v65 = *v57;
          v57 += 3;
          a8.f32[0] = v65;
          v56 = v56 + v65;
        }
        while (v57 != v64);
      }
      *(float *)&a9.i32[1] = v58;
      *(float *)&a9.i32[2] = v56 / a6.f32[0];
      v212 = a9;
      a6.f32[0] = (float)v20;
      if (!(_DWORD)v20)
      {
LABEL_56:
        a7.i32[0] = 0;
        a6.f32[0] = 0.0 / a6.f32[0];
        a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
        v210 = a6;
        v223 = 0;
        v224 = 0;
        v225 = 0;
        if (v15 == v16)
          goto LABEL_75;
        goto LABEL_136;
      }
    }
  }
  else
  {
    a6.f32[0] = 0.0 / a6.f32[0];
    a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
    v212 = (int8x16_t)a6;
    a6.f32[0] = (float)v20;
    if (!(_DWORD)v20)
      goto LABEL_56;
  }
  if ((_DWORD)v20 != 1)
  {
    v66 = 4 * (3 * v20);
    v67 = (float *)&v19[1] + 1;
    v68 = v19->f32[0];
    v69 = v66 - 24;
    if ((unint64_t)(v66 - 24) < 0xC)
      goto LABEL_157;
    v70 = v69 / 0xC + 1;
    v67 += 3 * (v70 & 0x3FFFFFFFFFFFFFFELL);
    v71 = (float *)&v19[3];
    v72 = v70 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v73 = *(v71 - 3);
      v74 = *v71;
      v71 += 6;
      v68 = (float)(v68 + v73) + v74;
      v72 -= 2;
    }
    while (v72);
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_157:
      do
      {
        v75 = *v67;
        v67 += 3;
        v68 = v68 + v75;
      }
      while (v67 != (float *)((char *)v19 + v66));
    }
    v76 = v19->f32[1];
    v77 = (float *)&v19[2];
    if (v69 < 0xC)
      goto LABEL_158;
    v78 = v69 / 0xC + 1;
    v77 += 3 * (v78 & 0x3FFFFFFFFFFFFFFELL);
    v79 = (float *)&v19[3] + 1;
    v80 = v78 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v81 = *(v79 - 3);
      v82 = *v79;
      v79 += 6;
      v76 = (float)(v76 + v81) + v82;
      v80 -= 2;
    }
    while (v80);
    if (v78 != (v78 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_158:
      do
      {
        v83 = *v77;
        v77 += 3;
        v76 = v76 + v83;
      }
      while (v77 != (float *)&v19->i32[(unint64_t)v66 / 4 + 1]);
    }
    *(float *)a9.i32 = v68 / a6.f32[0];
    v84 = v19[1].f32[0];
    v85 = (float *)&v19[2] + 1;
    a7.f32[0] = v76 / a6.f32[0];
    if (v69 < 0xC)
      goto LABEL_72;
    v86 = v69 / 0xC + 1;
    v85 += 3 * (v86 & 0x3FFFFFFFFFFFFFFELL);
    v87 = (float *)&v19[4];
    v88 = v86 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v89 = *(v87 - 3);
      v90 = *v87;
      v87 += 6;
      a8.f32[0] = v84 + v89;
      v84 = a8.f32[0] + v90;
      v88 -= 2;
    }
    while (v88);
    if (v86 != (v86 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_72:
      v91 = (float *)((char *)&v19[1] + v66);
      do
      {
        v92 = *v85;
        v85 += 3;
        a8.f32[0] = v92;
        v84 = v84 + v92;
      }
      while (v85 != v91);
    }
    a6.f32[0] = v84 / a6.f32[0];
    a9.i32[1] = a7.i32[0];
    a9.i32[2] = a6.i32[0];
    v210 = (float32x4_t)a9;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    if (v15 != v16)
      goto LABEL_136;
    goto LABEL_75;
  }
  *(int32x2_t *)a7.f32 = vdup_lane_s32(*(int32x2_t *)a6.f32, 0);
  *(float32x2_t *)a8.f32 = vdiv_f32(*v19, *(float32x2_t *)a7.f32);
  a7.i32[0] = v19[1].i32[0];
  a6.f32[0] = a7.f32[0] / a6.f32[0];
  a8.i32[2] = a6.i32[0];
  v210 = a8;
  v223 = 0;
  v224 = 0;
  v225 = 0;
  if (v15 == v16)
    goto LABEL_75;
LABEL_136:
  if (v18 > 0x1555555555555555)
    sub_22316E078();
  v195 = (char *)operator new(v17);
  v93 = v195;
  v196 = 0;
  v223 = v195;
  v224 = &v195[v17];
  v225 = &v195[12 * v18];
  a7 = (float32x4_t)v212;
  do
  {
    *(float32x2_t *)a6.f32 = *(float32x2_t *)((char *)v16 + v196);
    a6.i32[2] = v16[1].i32[v196 / 4];
    a6 = vsubq_f32(a6, (float32x4_t)v212);
    *(_DWORD *)&v195[v196 + 8] = a6.i32[2];
    *(_QWORD *)&v195[v196] = a6.i64[0];
    v196 += 12;
  }
  while ((float32x2_t *)((char *)v16 + v196) != v15);
LABEL_139:
  v198 = *a2;
  v197 = a2[1];
  v221 = 0;
  v222 = 0;
  v220 = 0;
  v199 = (char *)v197 - (char *)v198;
  if (v197 == v198)
  {
    v201 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v199 >> 2) > 0x1555555555555555)
      sub_22316E078();
    v200 = (char *)operator new((char *)v197 - (char *)v198);
    v201 = v200;
    v202 = 0;
    v220 = v200;
    v221 = &v200[v199];
    v222 = &v200[4 * (v199 >> 2)];
    a7 = v210;
    do
    {
      *(float32x2_t *)a6.f32 = *(float32x2_t *)((char *)v198 + v202);
      a6.i32[2] = v198[1].i32[v202 / 4];
      a6 = vsubq_f32(a6, v210);
      *(_DWORD *)&v200[v202 + 8] = a6.i32[2];
      *(_QWORD *)&v200[v202] = a6.i64[0];
      v202 += 12;
    }
    while ((float32x2_t *)((char *)v198 + v202) != v197);
  }
  sub_223EA7054((uint64_t *)&v223, (uint64_t *)&v220, a3, a4, (uint64_t)v216, a6, a7, a8);
  v203 = *(int8x16_t *)v216;
  *(_QWORD *)&v204 = *(_QWORD *)&v216[12];
  v205.i32[0] = v217;
  v206.i32[0] = v219;
  *(float32x2_t *)v207.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v216, *(float *)v212.i32), *(float32x2_t *)&v216[12], *(float32x2_t *)v212.i8, 1), (float32x2_t)v218, (float32x4_t)v212, 2);
  *(float32x2_t *)&v207.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL), *(float32x2_t *)v212.i8), v205, *(float32x2_t *)v212.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v212, v212, 8uLL), v206);
  v203.i32[3] = 0;
  *((_QWORD *)&v204 + 1) = v217;
  *(_QWORD *)&v208 = vdupq_n_s64(v218).i64[1];
  v209 = vsubq_f32(v210, v207);
  *((_QWORD *)&v208 + 1) = v219;
  *(int8x16_t *)a5 = v203;
  *(_OWORD *)(a5 + 16) = v204;
  *(_OWORD *)(a5 + 32) = v208;
  *(_QWORD *)(a5 + 48) = v209.i64[0];
  *(_DWORD *)(a5 + 56) = v209.i32[2];
  *(_DWORD *)(a5 + 60) = 1065353216;
  if (v201)
    operator delete(v201);
  if (v93)
    operator delete(v93);
}

void sub_223EA8410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;

  if (v22)
    operator delete(v22);
  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_223EA845C(uint64_t a1, uint64_t *a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x2_t v11;
  signed int v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  void **v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t **v49;
  unsigned int v50;
  uint64_t **v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int32x2_t v66;

  v4 = *a2;
  v65 = a2[1];
  if (*a2 != v65)
  {
    v7 = 0;
    v8 = (_QWORD *)(a1 + 24);
    while (1)
    {
      a3.i64[0] = *(_QWORD *)v4;
      a3.i32[2] = *(_DWORD *)(v4 + 8);
      v9.i64[0] = 0x3F0000003F000000;
      v9.i64[1] = 0x3F0000003F000000;
      v10 = vaddq_f32(vmulq_n_f32(a3, *(float *)a1), v9);
      v11 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v10.f32));
      v12 = vcvtms_s32_f32(v10.f32[2]);
      v13 = (19349669 * v11.i32[1]) ^ (73856093 * v11.i32[0]) ^ (83492791 * v12);
      v14 = *(_QWORD *)(a1 + 16);
      if (v14)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v3 = (19349669 * v11.i32[1]) ^ (73856093 * v11.i32[0]) ^ (83492791 * v12);
          if (v13 >= v14)
            v3 = v13 % v14;
        }
        else
        {
          v3 = v13 & (v14 - 1);
        }
        v16 = *(void ***)(*(_QWORD *)(a1 + 8) + 8 * v3);
        if (v16)
        {
          v17 = *v16;
          if (*v16)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v17[1];
                if (v19 == v13)
                {
                  if (*((_DWORD *)v17 + 4) == v11.i32[0]
                    && *(_QWORD *)((char *)v17 + 20) == __PAIR64__(v12, v11.u32[1]))
                  {
                    goto LABEL_100;
                  }
                }
                else if ((v19 & (v14 - 1)) != v3)
                {
                  goto LABEL_27;
                }
                v17 = (_QWORD *)*v17;
                if (!v17)
                  goto LABEL_27;
              }
            }
            do
            {
              v18 = v17[1];
              if (v18 == v13)
              {
                if (*((_DWORD *)v17 + 4) == v11.i32[0] && *(_QWORD *)((char *)v17 + 20) == __PAIR64__(v12, v11.u32[1]))
                  goto LABEL_100;
              }
              else
              {
                if (v18 >= v14)
                  v18 %= v14;
                if (v18 != v3)
                  break;
              }
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_27:
      v66 = v11;
      v17 = operator new(0x68uLL);
      *v17 = 0;
      v17[1] = v13;
      v17[2] = v66;
      *((_DWORD *)v17 + 6) = v12;
      a3.i8[12] = 0;
      a3.i8[13] = 0;
      a3.i8[14] = 0;
      a3.i8[15] = 0;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 2) = 0u;
      v17[12] = 0;
      *((_OWORD *)v17 + 5) = 0u;
      v17[9] = v17 + 10;
      a3.f32[0] = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
      v10.i32[0] = *(_DWORD *)(a1 + 40);
      if (!v14 || (float)(v10.f32[0] * (float)v14) < a3.f32[0])
        break;
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD **)(v20 + 8 * v3);
      if (v21)
        goto LABEL_30;
LABEL_79:
      *v17 = *v8;
      *v8 = v17;
      *(_QWORD *)(v20 + 8 * v3) = v8;
      if (*v17)
      {
        v43 = *(_QWORD *)(*v17 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v43 >= v14)
            v43 %= v14;
        }
        else
        {
          v43 &= v14 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v43);
        goto LABEL_98;
      }
LABEL_99:
      ++*(_QWORD *)(a1 + 32);
      a3.i64[0] = *(_QWORD *)v4;
      a3.i32[2] = *(_DWORD *)(v4 + 8);
LABEL_100:
      v10.i64[0] = v17[4];
      v10.i32[2] = *((_DWORD *)v17 + 10);
      a3 = vaddq_f32(v10, a3);
      *((_DWORD *)v17 + 10) = a3.i32[2];
      v17[4] = a3.i64[0];
      if ((*(_BYTE *)(a1 + 4) & 1) != 0)
      {
        v49 = (uint64_t **)(v17 + 10);
        v48 = v17[10];
        v50 = *(unsigned __int8 *)(a2[30] + v7);
        if (v48)
        {
          v51 = (uint64_t **)v17[10];
          do
          {
            v52 = *((unsigned __int8 *)v51 + 28);
            if (v50 >= v52)
            {
              if (v52 >= v50)
              {
                do
                {
                  while (1)
                  {
                    v54 = v48;
                    v55 = *(unsigned __int8 *)(v48 + 28);
                    if (v50 < v55)
                      break;
                    if (v55 >= v50)
                    {
                      v3 = v54;
                      ++*(_DWORD *)(v54 + 32);
                      v47 = *(_BYTE *)(a1 + 4);
                      if ((v47 & 2) == 0)
                        goto LABEL_102;
                      goto LABEL_126;
                    }
                    v48 = *(_QWORD *)(v54 + 8);
                    if (!v48)
                    {
                      v56 = (uint64_t *)(v54 + 8);
                      goto LABEL_129;
                    }
                  }
                  v48 = *(_QWORD *)v54;
                }
                while (*(_QWORD *)v54);
                v56 = (uint64_t *)v54;
LABEL_129:
                v3 = (uint64_t)operator new(0x28uLL);
                *(_BYTE *)(v3 + 28) = v50;
                *(_DWORD *)(v3 + 32) = 0;
                *(_QWORD *)v3 = 0;
                *(_QWORD *)(v3 + 8) = 0;
                *(_QWORD *)(v3 + 16) = v54;
                *v56 = v3;
                v63 = *(_QWORD *)v17[9];
                v64 = (uint64_t *)v3;
                if (v63)
                {
                  v17[9] = v63;
                  v64 = (uint64_t *)*v56;
                }
                sub_2231A9A8C((uint64_t *)v17[10], v64);
                ++v17[11];
                ++*(_DWORD *)(v3 + 32);
                v47 = *(_BYTE *)(a1 + 4);
                if ((v47 & 2) == 0)
                  goto LABEL_102;
                goto LABEL_126;
              }
              ++v51;
            }
            v51 = (uint64_t **)*v51;
          }
          while (v51);
          while (1)
          {
            while (1)
            {
              v3 = v48;
              v53 = *(unsigned __int8 *)(v48 + 28);
              if (v50 >= v53)
                break;
              v48 = *(_QWORD *)v3;
              v49 = (uint64_t **)v3;
              if (!*(_QWORD *)v3)
                goto LABEL_122;
            }
            if (v53 >= v50)
              break;
            v48 = *(_QWORD *)(v3 + 8);
            if (!v48)
            {
              v49 = (uint64_t **)(v3 + 8);
              goto LABEL_122;
            }
          }
        }
        else
        {
          v3 = (uint64_t)(v17 + 10);
LABEL_122:
          v57 = v3;
          v3 = (uint64_t)operator new(0x28uLL);
          *(_BYTE *)(v3 + 28) = v50;
          *(_DWORD *)(v3 + 32) = 0;
          *(_QWORD *)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = v57;
          *v49 = (uint64_t *)v3;
          v58 = *(_QWORD *)v17[9];
          v59 = (uint64_t *)v3;
          if (v58)
          {
            v17[9] = v58;
            v59 = *v49;
          }
          sub_2231A9A8C((uint64_t *)v17[10], v59);
          ++v17[11];
        }
        *(_DWORD *)(v3 + 32) = 1;
        v47 = *(_BYTE *)(a1 + 4);
        if ((v47 & 2) == 0)
        {
LABEL_102:
          if ((v47 & 4) != 0)
            goto LABEL_127;
          goto LABEL_3;
        }
      }
      else
      {
        v47 = *(_BYTE *)(a1 + 4);
        if ((v47 & 2) == 0)
          goto LABEL_102;
      }
LABEL_126:
      v60 = a2[9] + 12 * v7;
      a3.i64[0] = *(_QWORD *)((char *)v17 + 44);
      a3.i32[2] = *((_DWORD *)v17 + 13);
      v10.i64[0] = *(_QWORD *)v60;
      v10.i32[2] = *(_DWORD *)(v60 + 8);
      a3 = vaddq_f32(a3, v10);
      *((_DWORD *)v17 + 13) = a3.i32[2];
      *(_QWORD *)((char *)v17 + 44) = a3.i64[0];
      if ((*(_BYTE *)(a1 + 4) & 4) != 0)
      {
LABEL_127:
        v61 = a2[4] + 12 * v7;
        v62 = *(_QWORD *)v61;
        *((_DWORD *)v17 + 16) = *(_DWORD *)(v61 + 8);
        v17[7] = v62;
      }
LABEL_3:
      ++*((_DWORD *)v17 + 24);
      v4 += 12;
      ++v7;
      if (v4 == v65)
        return;
    }
    v22 = (v14 & (v14 - 1)) != 0;
    if (v14 < 3)
      v22 = 1;
    v23 = v22 | (2 * v14);
    v24 = vcvtps_u32_f32(a3.f32[0] / v10.f32[0]);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = *(_QWORD *)(a1 + 16);
    }
    if (prime <= v14)
    {
      if (prime >= v14)
        goto LABEL_77;
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v14 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime >= v14)
      {
        v14 = *(_QWORD *)(a1 + 16);
        v42 = v14 - 1;
        if ((v14 & (v14 - 1)) == 0)
          goto LABEL_78;
LABEL_90:
        if (v13 >= v14)
        {
          v3 = v13 % v14;
          v20 = *(_QWORD *)(a1 + 8);
          v21 = *(_QWORD **)(v20 + 8 * (v13 % v14));
          if (!v21)
            goto LABEL_79;
        }
        else
        {
          v3 = v13;
          v20 = *(_QWORD *)(a1 + 8);
          v21 = *(_QWORD **)(v20 + 8 * v13);
          if (!v21)
            goto LABEL_79;
        }
LABEL_30:
        *v17 = *v21;
LABEL_98:
        *v21 = v17;
        goto LABEL_99;
      }
      if (!prime)
      {
        v41 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        if (v41)
          operator delete(v41);
        v14 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        v42 = -1;
        goto LABEL_78;
      }
    }
    if (prime >> 61)
      sub_223174E94();
    v26 = operator new(8 * prime);
    v27 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v26;
    if (v27)
      operator delete(v27);
    v28 = 0;
    *(_QWORD *)(a1 + 16) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v28++) = 0;
    while (prime != v28);
    v29 = (_QWORD *)*v8;
    if (!*v8)
    {
LABEL_89:
      v14 = prime;
      v42 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_90;
LABEL_78:
      v3 = v42 & v13;
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD **)(v20 + 8 * (v42 & v13));
      if (!v21)
        goto LABEL_79;
      goto LABEL_30;
    }
    v30 = v29[1];
    v31 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v32 = v30 & v31;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v32) = v8;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v34 = i[1] & v31;
        if (v34 == v32)
        {
          v29 = i;
        }
        else
        {
          v35 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v35 + 8 * v34))
          {
            *v29 = *i;
            v36 = 8 * v34;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 8) + v36);
            **(_QWORD **)(*(_QWORD *)(a1 + 8) + v36) = i;
          }
          else
          {
            *(_QWORD *)(v35 + 8 * v34) = v29;
            v29 = i;
            v32 = v34;
          }
        }
      }
      goto LABEL_89;
    }
    if (v30 < prime)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30) = v8;
      v40 = (_QWORD *)*v29;
      if (*v29)
        goto LABEL_84;
      goto LABEL_76;
    }
    v30 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30) = v8;
    v40 = (_QWORD *)*v29;
    if (!*v29)
    {
LABEL_76:
      v14 = prime;
LABEL_77:
      v42 = v14 - 1;
      if ((v14 & (v14 - 1)) != 0)
        goto LABEL_90;
      goto LABEL_78;
    }
    while (1)
    {
LABEL_84:
      v45 = v40[1];
      if (v45 >= prime)
        v45 %= prime;
      if (v45 == v30)
        goto LABEL_83;
      v46 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v46 + 8 * v45))
      {
        *v29 = *v40;
        v44 = 8 * v45;
        *v40 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + v44);
        **(_QWORD **)(*(_QWORD *)(a1 + 8) + v44) = v40;
        v40 = v29;
LABEL_83:
        v29 = v40;
        v40 = (_QWORD *)*v40;
        if (!v40)
          goto LABEL_89;
      }
      else
      {
        *(_QWORD *)(v46 + 8 * v45) = v29;
        v29 = v40;
        v40 = (_QWORD *)*v40;
        v30 = v45;
        if (!v40)
          goto LABEL_89;
      }
    }
  }
}

void sub_223EA8C34(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_223198030(v1, v2[10]);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_223EA8C60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *i;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *j;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *k;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *m;
  uint64_t v27;

  sub_2241498F4(a2, 0);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)a2;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v6 <= v8)
  {
    if (v6 < v8)
      *(_QWORD *)(a2 + 8) = v7 + 12 * v6;
  }
  else
  {
    sub_22317EF30(a2, v6 - v8);
    v7 = *(_QWORD *)a2;
  }
  for (i = *(unsigned int **)(a1 + 24); i; i = *(unsigned int **)i)
  {
    v4.f32[0] = (float)i[24];
    v5.i64[0] = *((_QWORD *)i + 4);
    v5.i32[2] = i[10];
    v4 = vdivq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0));
    *(_DWORD *)(v7 + 8) = v4.i32[2];
    *(_QWORD *)v7 = v4.i64[0];
    v7 += 12;
  }
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    v10 = *(_BYTE **)(a2 + 240);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a2 + 248) - (_QWORD)v10;
    if (v11 <= v12)
    {
      if (v11 < v12)
        *(_QWORD *)(a2 + 248) = &v10[v11];
    }
    else
    {
      sub_22317F2E8(a2 + 240, v11 - v12);
      v10 = *(_BYTE **)(a2 + 240);
    }
    for (j = *(_QWORD **)(a1 + 24); j; j = (_QWORD *)*j)
    {
      v17 = (_QWORD *)j[9];
      if (v17 != j + 10)
      {
        v18 = (_QWORD *)v17[1];
        v19 = (_QWORD *)j[9];
        if (v18)
        {
          do
          {
LABEL_19:
            v20 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
          goto LABEL_23;
        }
        while (1)
        {
          do
          {
            v20 = (_QWORD *)v19[2];
            v21 = *v20 == (_QWORD)v19;
            v19 = v20;
          }
          while (!v21);
LABEL_23:
          if (v20 == j + 10)
            break;
          if (*((_DWORD *)v17 + 8) < *((_DWORD *)v20 + 8))
            v17 = v20;
          v18 = (_QWORD *)v20[1];
          v19 = v20;
          if (v18)
            goto LABEL_19;
        }
      }
      *v10++ = *((_BYTE *)v17 + 28);
    }
  }
  if ((*(_BYTE *)(a1 + 4) & 2) != 0)
  {
    v14 = *(_QWORD *)(a2 + 72);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 80) - v14) >> 2);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *(_QWORD *)(a2 + 80) = v14 + 12 * v15;
    }
    else
    {
      sub_22317EF30(a2 + 72, v15 - v16);
      v14 = *(_QWORD *)(a2 + 72);
    }
    for (k = *(uint64_t **)(a1 + 24); k; k = (uint64_t *)*k)
    {
      v4.f32[0] = (float)*((unsigned int *)k + 24);
      v5.i64[0] = *(uint64_t *)((char *)k + 44);
      v5.i32[2] = *((_DWORD *)k + 13);
      v4 = vdivq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0));
      *(_DWORD *)(v14 + 8) = v4.i32[2];
      *(_QWORD *)v14 = v4.i64[0];
      v14 += 12;
    }
  }
  if ((*(_BYTE *)(a1 + 4) & 4) != 0)
  {
    v23 = *(_QWORD *)(a2 + 32);
    v24 = *(_QWORD *)(a1 + 32);
    v25 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v23) >> 2);
    if (v24 <= v25)
    {
      if (v24 < v25)
        *(_QWORD *)(a2 + 40) = v23 + 12 * v24;
    }
    else
    {
      sub_22317EF30(a2 + 32, v24 - v25);
      v23 = *(_QWORD *)(a2 + 32);
    }
    for (m = *(uint64_t **)(a1 + 24); m; m = (uint64_t *)*m)
    {
      v27 = m[7];
      *(_DWORD *)(v23 + 8) = *((_DWORD *)m + 16);
      *(_QWORD *)v23 = v27;
      v23 += 12;
    }
    *(_DWORD *)(a2 + 64) = 1;
  }
}

void sub_223EA8ED4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223EA8EE8(_QWORD *a1)
{
  _QWORD **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD **v6;
  _QWORD *v7;
  void *v8;

  if (a1[4])
  {
    v2 = (_QWORD **)a1[3];
    if (v2)
    {
      do
      {
        v3 = *v2;
        sub_223198030((uint64_t)(v2 + 9), v2[10]);
        operator delete(v2);
        v2 = (_QWORD **)v3;
      }
      while (v3);
    }
    a1[3] = 0;
    v4 = a1[2];
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(a1[1] + 8 * i) = 0;
    }
    a1[4] = 0;
  }
  v6 = (_QWORD **)a1[3];
  if (v6)
  {
    do
    {
      v7 = *v6;
      sub_223198030((uint64_t)(v6 + 9), v6[10]);
      operator delete(v6);
      v6 = (_QWORD **)v7;
    }
    while (v7);
  }
  v8 = (void *)a1[1];
  a1[1] = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

void sub_223EA8FA0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char **a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  float v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32x4_t *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void **v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  int8x16_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float *v57;
  float *v58;
  int *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  float32x4_t v84;
  void *v85;
  float *v86;
  char *v87;
  char v88;
  char v89;
  char v90;
  char *v91;
  char *v92;
  uint64_t v93;
  _QWORD v94[2];
  float *v95;
  void **v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char **v101;
  char *v102;
  void *__p;
  _BYTE *v104;
  uint64_t v105;
  void *v106;
  float *v107;
  __int8 *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v6 = *a2;
  v7 = *a3;
  v8 = (char *)operator new(0x10uLL);
  v86 = (float *)(v8 + 16);
  v87 = v8 + 16;
  *(_QWORD *)v8 = v6;
  *((_QWORD *)v8 + 1) = v7;
  v85 = v8;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v89 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  __p = 0;
  v104 = 0;
  v105 = 0;
  v9 = *(float *)&v7;
  if (*(float *)&v7 >= *(float *)&v6)
    v10 = 0;
  else
    v10 = -1;
  if (*(float *)&v7 > *(float *)&v6)
    v11 = 1;
  else
    v11 = v10;
  if (*((float *)&v7 + 1) >= *((float *)&v6 + 1))
    v12 = 0;
  else
    v12 = -1;
  if (*((float *)&v7 + 1) > *((float *)&v6 + 1))
    v13 = 1;
  else
    v13 = v12;
  if (!v11)
  {
    if (*(float *)&v6 == *(float *)&v7)
      goto LABEL_33;
    if ((v6 & 0x7FFFFFFF) <= 0x7F7FFFFF && (v7 & 0x7FFFFFFF) <= 0x7F7FFFFF)
    {
      v15 = vabds_f32(*(float *)&v6, *(float *)&v7);
      v16 = fabsf(*(float *)&v6);
      v17 = fabsf(*(float *)&v7);
      if (v16 < v17)
        v16 = v17;
      v18 = v16 >= 1.0 ? v16 * 0.00000011921 : 0.00000011921;
      if (v15 <= v18)
      {
LABEL_33:
        if (*((float *)&v6 + 1) == *((float *)&v7 + 1))
          goto LABEL_16;
        if ((HIDWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (HIDWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v19 = vabds_f32(*((float *)&v6 + 1), *((float *)&v7 + 1));
          v20 = fabsf(*((float *)&v6 + 1));
          v21 = fabsf(*((float *)&v7 + 1));
          if (v20 < v21)
            v20 = v21;
          v22 = v20 >= 1.0 ? v20 * 0.00000011921 : 0.00000011921;
          if (v19 <= v22)
          {
LABEL_16:
            v14 = 1;
            v13 = 4294967197;
            v11 = -99;
            goto LABEL_36;
          }
        }
      }
    }
    v11 = 0;
  }
  v14 = 0;
LABEL_36:
  v23 = (float32x4_t *)operator new(0x68uLL);
  v23->i64[0] = v11 | (unint64_t)(v13 << 32);
  v23->i64[1] = 0;
  v23[1].i64[0] = -1;
  v23[1].i64[1] = -1;
  if (*((float *)&v7 + 1) <= *((float *)&v6 + 1))
    v24 = *((float *)&v6 + 1);
  else
    v24 = *((float *)&v7 + 1);
  if (*((float *)&v7 + 1) >= *((float *)&v6 + 1))
    v25 = *((float *)&v6 + 1);
  else
    v25 = *((float *)&v7 + 1);
  if (v9 <= *(float *)&v6)
    v26 = *(float *)&v6;
  else
    v26 = v9;
  if (v9 >= *(float *)&v6)
    v27 = *(float *)&v6;
  else
    v27 = v9;
  v23[2].f32[0] = v27;
  v23[2].f32[1] = v25;
  v23[2].f32[2] = v26;
  v23[2].f32[3] = v24;
  v23[3] = (float32x4_t)xmmword_2245F5410;
  v23[4] = (float32x4_t)xmmword_22465F3D0;
  v23[5].i8[0] = v14;
  v23[5].i64[1] = 0;
  v23[6].i8[0] = v14 ^ 1;
  v23[6].i8[1] = 0;
  v107 = &v23[6].f32[2];
  v108 = &v23[6].i8[8];
  v106 = v23;
  if ((v14 & 1) == 0)
    v23[6].i8[1] = 1;
  v28 = v23[2];
  v29 = vabsq_f32(v28);
  __asm { FMOV            V4.4S, #1.0 }
  v35.i64[0] = 0x3400000034000000;
  v35.i64[1] = 0x3400000034000000;
  v36 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(_Q4, v29), v35, (int8x16_t)vmulq_f32(v29, (float32x4_t)v35));
  v37.i64[0] = vsubq_f32(v28, v36).u64[0];
  v37.i64[1] = vaddq_f32(v28, v36).i64[1];
  v23[2] = v37;
  v104 = 0;
  v38 = *(float **)a1;
  v39 = *(char **)(a1 + 8);
  v40 = (uint64_t)&v39[-*(_QWORD *)a1] >> 3;
  if (v39 == *(char **)a1)
    v41 = 0;
  else
    v41 = v40 + 1;
  v84 = _Q4;
  if (v41 >= 2)
  {
    v95 = *(float **)a1;
    v96 = (void **)v38;
    v97 = v39;
    v98 = v40;
    v99 = 0;
    v109 = v39;
    v110 = (char *)v38;
    v111 = v39;
    v112 = v40;
    v113 = v41;
    *(_QWORD *)&v115 = 1;
    *((_QWORD *)&v115 + 1) = -1;
    v116 = -1;
    sub_223EA9BB8(&__p, (uint64_t)&v95, (uint64_t)&v109, &v115);
    _Q4 = v84;
  }
  v43 = *(_QWORD **)(a1 + 24);
  v42 = *(_QWORD **)(a1 + 32);
  if (v43 != v42)
  {
    v44 = 0;
    do
    {
      v45 = (void **)*v43;
      v46 = (char *)v43[1];
      v47 = (uint64_t)&v46[-*v43] >> 3;
      if (v46 == (char *)*v43)
        v48 = 0;
      else
        v48 = v47 + 1;
      if (v48 >= 2)
      {
        v95 = (float *)*v43;
        v96 = v45;
        v97 = v46;
        v98 = v47;
        v99 = 0;
        v109 = v46;
        v110 = (char *)v45;
        v111 = v46;
        v112 = v47;
        v113 = v48;
        v115 = xmmword_22464C790;
        v116 = v44;
        sub_223EA9BB8(&__p, (uint64_t)&v95, (uint64_t)&v109, &v115);
        v42 = *(_QWORD **)(a1 + 32);
        _Q4 = v84;
      }
      ++v44;
      v43 += 3;
    }
    while (v43 != v42);
  }
  v50 = __p;
  v49 = v104;
  if (__p != v104)
  {
    v51.i64[0] = 0x3400000034000000;
    v51.i64[1] = 0x3400000034000000;
    v52 = (float32x4_t *)__p;
    do
    {
      v53 = v52[2];
      v54 = vabsq_f32(v53);
      v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(_Q4, v54), v51, (int8x16_t)vmulq_f32(v54, (float32x4_t)v51));
      v56.i64[0] = vsubq_f32(v53, v55).u64[0];
      v56.i64[1] = vaddq_f32(v53, v55).i64[1];
      v52[2] = v56;
      v52 = (float32x4_t *)((char *)v52 + 104);
    }
    while (v52 != (float32x4_t *)v49);
  }
  LODWORD(v95) = 0;
  v96 = &v85;
  LODWORD(v97) = 1;
  v98 = a1;
  v99 = &v88;
  v100 = &v89;
  v101 = &v91;
  v102 = &v90;
  v94[0] = &v88;
  v94[1] = &v88;
  v58 = (float *)v106;
  v57 = v107;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((char *)v107 - (_BYTE *)v106) >> 3)) < 0x11
    || (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v49 - v50) >> 3)) < 0x11)
  {
    if (v50 != v49 && v106 != v107)
    {
      do
      {
        v59 = (int *)__p;
        if (__p != v49)
        {
          do
          {
            if (v58[10] >= *((float *)v59 + 8)
              && v58[8] <= *((float *)v59 + 10)
              && v58[11] >= *((float *)v59 + 9)
              && v58[9] <= *((float *)v59 + 11))
            {
              sub_223EAB8F4(0, (float *)v85, v86, (uint64_t)v58, 1, (float **)a1, v59, (uint64_t)&v88, (uint64_t)&v89, &v91);
              v49 = v104;
            }
            v59 += 26;
          }
          while (v59 != (int *)v49);
          v57 = v107;
        }
        v58 += 26;
      }
      while (v58 != v57);
    }
  }
  else
  {
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v115 = 0uLL;
    v116 = 0;
    v114 = xmmword_2245F53F0;
    sub_223400650((float **)&v106, (float *)&v114, &v109);
    sub_223400650((float **)&__p, (float *)&v114, (char **)&v115);
    sub_223EAA3EC((float *)&v114, (float ***)&v109, (float ***)&v115, 0, (uint64_t)&v95, (uint64_t)v94, (uint64_t)v94);
    if ((_QWORD)v115)
    {
      *((_QWORD *)&v115 + 1) = v115;
      operator delete((void *)v115);
    }
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
  }
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    v107 = (float *)v106;
    operator delete(v106);
  }
  v60 = v91;
  if (v91 != v92)
  {
    v61 = 0;
    while (1)
    {
      v63 = *(_QWORD *)v60;
      v64 = (unint64_t)a4[2];
      if ((unint64_t)v61 < v64)
      {
        *(_QWORD *)v61 = v63;
        v62 = (uint64_t)(v61 + 8);
        goto LABEL_92;
      }
      v65 = *a4;
      v66 = v61 - *a4;
      v67 = v66 >> 3;
      v68 = (v66 >> 3) + 1;
      if (v68 >> 61)
        sub_22316E078();
      v69 = v64 - (_QWORD)v65;
      if (v69 >> 2 > v68)
        v68 = v69 >> 2;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        if (v70 >> 61)
          sub_223174E94();
        v71 = operator new(8 * v70);
        v72 = &v71[8 * v67];
        *(_QWORD *)v72 = v63;
        v62 = (uint64_t)(v72 + 8);
        v73 = (char *)(v61 - v65);
        if (v61 == v65)
        {
LABEL_103:
          *a4 = v72;
          a4[1] = (char *)v62;
          a4[2] = &v71[8 * v70];
          if (!v61)
            goto LABEL_92;
LABEL_110:
          operator delete(v61);
          goto LABEL_92;
        }
      }
      else
      {
        v71 = 0;
        v72 = (char *)(8 * v67);
        *(_QWORD *)(8 * v67) = v63;
        v62 = 8 * v67 + 8;
        v73 = (char *)(v61 - v65);
        if (v61 == v65)
          goto LABEL_103;
      }
      v74 = (unint64_t)(v73 - 8);
      if (v74 < 0x168)
      {
        v75 = v61;
        goto LABEL_108;
      }
      v77 = (v61 - 8 - v65) & 0xFFFFFFFFFFFFFFF8;
      if (&v71[v66 - 8 - v77] > &v71[v66 - 8])
        break;
      if (&v61[-v77 - 8] > v61 - 8)
      {
        v75 = v61;
        goto LABEL_108;
      }
      if ((unint64_t)(v61 - v71 - v66) < 0x20)
      {
        v75 = v61;
        goto LABEL_108;
      }
      v78 = (v74 >> 3) + 1;
      v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
      v75 = &v61[-v79];
      v72 -= v79;
      v80 = &v71[8 * v67 - 16];
      v81 = v61 - 16;
      v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v83 = *(_OWORD *)v81;
        *(v80 - 1) = *((_OWORD *)v81 - 1);
        *v80 = v83;
        v80 -= 2;
        v81 -= 32;
        v82 -= 4;
      }
      while (v82);
      if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_108;
LABEL_109:
      v61 = *a4;
      *a4 = v72;
      a4[1] = (char *)v62;
      a4[2] = &v71[8 * v70];
      if (v61)
        goto LABEL_110;
LABEL_92:
      a4[1] = (char *)v62;
      v60 += 176;
      v61 = (char *)v62;
      if (v60 == v92)
      {
        v60 = v91;
        goto LABEL_122;
      }
    }
    v75 = v61;
    do
    {
LABEL_108:
      v76 = *((_QWORD *)v75 - 1);
      v75 -= 8;
      *((_QWORD *)v72 - 1) = v76;
      v72 -= 8;
    }
    while (v75 != v65);
    goto LABEL_109;
  }
LABEL_122:
  if (v60)
  {
    v92 = v60;
    operator delete(v60);
  }
  if (v85)
  {
    v86 = (float *)v85;
    operator delete(v85);
  }
}

void sub_223EA96C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  v39 = *(void **)(v37 - 144);
  if (v39)
  {
    *(_QWORD *)(v37 - 136) = v39;
    operator delete(v39);
    v40 = *(void **)(v37 - 200);
    if (!v40)
    {
LABEL_3:
      v41 = __p;
      if (!__p)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v40 = *(void **)(v37 - 200);
    if (!v40)
      goto LABEL_3;
  }
  *(_QWORD *)(v37 - 192) = v40;
  operator delete(v40);
  v41 = __p;
  if (!__p)
  {
LABEL_4:
    v42 = a35;
    if (!a35)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v41);
  v42 = a35;
  if (!a35)
  {
LABEL_5:
    v43 = a19;
    if (!a19)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v42);
  v43 = a19;
  if (!a19)
  {
LABEL_6:
    v44 = *(void **)v36;
    if (!*(_QWORD *)v36)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v43);
  v44 = *(void **)v36;
  if (!*(_QWORD *)v36)
  {
LABEL_7:
    v45 = a15;
    if (!a15)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v36 + 8) = v44;
  operator delete(v44);
  v45 = a15;
  if (!a15)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_15:
  operator delete(v45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EA97A0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char *v5;
  float32x2_t v6;
  float32x2_t *v7;
  char *v8;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  float v15;
  float32x2_t v17;
  float32x2_t *v18;
  char *v19;

  sub_223EA8FA0(a1, a2, a3, (char **)&v18);
  if (v18 != (float32x2_t *)v19)
  {
    v5 = (char *)&v18[1];
    v6 = (float32x2_t)*a2;
    v7 = v18;
    if (&v18[1] != (float32x2_t *)v19)
    {
      v7 = v18;
      v8 = (char *)&v18[1];
      do
      {
        v9 = *(float32x2_t *)v8;
        v8 += 8;
        v10 = vsub_f32(v9, v6);
        v11 = vmla_lane_f32(vmul_f32(v10, v10), (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1), v10, 1).f32[0];
        v12 = vsub_f32(*v7, v6);
        if (v11 < vmla_lane_f32(vmul_f32(v12, v12), (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v12, 1).f32[0])
          v7 = (float32x2_t *)v5;
        v5 = v8;
      }
      while (v8 != v19);
    }
    v17 = vabd_f32(*(float32x2_t *)a3, v6);
    v13 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17).u8[0];
    if (*(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1))) >= 0.00001)
    {
      v15 = (float)(v7->f32[v13 & 1] - *((float *)a2 + (v13 & 1)))
          / (float)(*((float *)a3 + (v13 & 1)) - *((float *)a2 + (v13 & 1)));
      v14 = 0x100000000;
      if (!v18)
        return v14 & 0x100000000 | LODWORD(v15);
      goto LABEL_9;
    }
  }
  v14 = 0;
  v15 = 0.0;
  if (v18)
  {
LABEL_9:
    v19 = (char *)v18;
    operator delete(v18);
  }
  return v14 & 0x100000000 | LODWORD(v15);
}

uint64_t sub_223EA98C0(float *a1, float **a2)
{
  float *v2;
  float *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float *v14;
  int v15;
  float **v17;
  float **v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float *v26;
  float *v27;
  uint64_t v28;
  float *v29;
  unsigned int v30;
  float **v31;
  int v32;
  char v33;

  v3 = *a2;
  v2 = a2[1];
  v4 = (char *)v2 - (char *)*a2;
  if ((unint64_t)v4 < 0x18)
    return 0xFFFFFFFFLL;
  v7 = v4 >> 3;
  v8 = v2 == v3 ? 0 : v7 + 1;
  v32 = 0;
  v33 = 0;
  v9 = v8 - 1;
  if (v8 >= v7)
  {
    v10 = v2;
    if (v9 <= v7)
      v10 = &v3[2 * (v9 % v7)];
  }
  else
  {
    v10 = v2 - 2;
  }
  if (v8 == 1)
    return 0xFFFFFFFFLL;
  v11 = v2;
  do
  {
    if (v9 + 1 >= v7)
    {
      v12 = v2;
      if (v9 <= v7)
        v12 = &v3[2 * (v9 % v7)];
    }
    else
    {
      v12 = v11 - 2;
    }
    v13 = v9 - 1;
    if (v9 >= v7)
    {
      v14 = v2;
      if (v13 <= v7)
        v14 = &v3[2 * (v13 % v7)];
    }
    else
    {
      v14 = v10 - 2;
    }
    if (!sub_2233E62E4(a1, v12, v14, (uint64_t)&v32))
      break;
    if (v9 + 1 >= v7)
    {
      v11 = v2;
      if (v9 <= v7)
        v11 = &v3[2 * (v9 % v7)];
    }
    else
    {
      v11 -= 2;
    }
    if (v9 < v7)
    {
      v10 -= 2;
    }
    else
    {
      v10 = v2;
      if (v13 <= v7)
        v10 = &v3[2 * (v13 % v7)];
    }
    --v9;
  }
  while (v13);
  if (v32)
    v15 = 1;
  else
    v15 = -1;
  if (v33)
    return 0;
  if (!v32)
    return 0xFFFFFFFFLL;
  v30 = v15;
  v18 = (float **)a2[3];
  v17 = (float **)a2[4];
  if (v18 == v17)
    return 1;
  v31 = a2;
  do
  {
    v20 = *v18;
    v19 = v18[1];
    v21 = (char *)v19 - (char *)*v18;
    if ((unint64_t)v21 >= 0x18)
    {
      v22 = v21 >> 3;
      v23 = v19 == v20 ? 0 : v22 + 1;
      v32 = 0;
      v33 = 0;
      v24 = v23 - 1;
      if (v23 >= v22)
      {
        v25 = v19;
        if (v24 <= v22)
          v25 = &v20[2 * (v24 % v22)];
      }
      else
      {
        v25 = v19 - 2;
      }
      v26 = v19;
      if (v23 != 1)
      {
        do
        {
          if (v24 + 1 >= v22)
          {
            v27 = v19;
            if (v24 <= v22)
              v27 = &v20[2 * (v24 % v22)];
          }
          else
          {
            v27 = v26 - 2;
          }
          v28 = v24 - 1;
          if (v24 >= v22)
          {
            v29 = v19;
            if (v28 <= v22)
              v29 = &v20[2 * (v28 % v22)];
          }
          else
          {
            v29 = v25 - 2;
          }
          if (!sub_2233E62E4(a1, v27, v29, (uint64_t)&v32))
            break;
          if (v24 + 1 >= v22)
          {
            v26 = v19;
            if (v24 <= v22)
              v26 = &v20[2 * (v24 % v22)];
          }
          else
          {
            v26 -= 2;
          }
          if (v24 < v22)
          {
            v25 -= 2;
          }
          else
          {
            v25 = v19;
            if (v28 <= v22)
              v25 = &v20[2 * (v28 % v22)];
          }
          --v24;
        }
        while (v28);
        if (v33)
          return 0;
        if (v32)
          return 0xFFFFFFFFLL;
        v17 = (float **)v31[4];
      }
    }
    v18 += 3;
  }
  while (v18 != v17);
  return v30;
}

void sub_223EA9BB8(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char *v21;
  float v22;
  float v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char **v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  float *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  __int128 v111;
  uint64_t v112;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a3 + 32);
  v6 = v5 - v4;
  if (v5 == v4)
    return;
  *((_QWORD *)&v111 + 1) = -1;
  v112 = -1;
  *(_QWORD *)&v111 = -1;
  v8 = *(float **)a2;
  v94 = *(_QWORD *)(a2 + 8);
  v9 = *(float **)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = v4 + 1;
  if (v4 + 1 >= v10)
  {
    v12 = *(float **)(a2 + 16);
    if (v4 < v10)
      v12 = (float *)(v94 + 8 * (v11 % v10));
  }
  else
  {
    v12 = v8 + 2;
  }
  if (v11 == v5)
    return;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = (char *)a1[1];
  v92 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v21[-*a1] >> 3);
  v22 = *v8;
  v23 = v8[1];
  v24 = -1;
  v25 = 1;
  v26 = 3.4028e38;
  v27 = -3.4028e38;
  v28 = -1;
  v29 = -1;
  v30 = -3.4028e38;
  v31 = 3.4028e38;
  v89 = a3;
  v90 = a4;
  v87 = *(float **)(a2 + 16);
  v88 = v5 - v4;
  v86 = *(_QWORD *)(a2 + 24);
  v91 = (char **)a1;
  do
  {
    v32 = v22;
    v33 = v23;
    v22 = *v12;
    v23 = v12[1];
    if (*v12 >= v32)
      v34 = 0;
    else
      v34 = -1;
    if (*v12 > v32)
      v35 = 1;
    else
      v35 = v34;
    if (v23 >= v33)
      v36 = 0;
    else
      v36 = -1;
    if (v23 > v33)
      v37 = 1;
    else
      v37 = v36;
    if (!v35)
    {
      if (v32 == v22)
        goto LABEL_43;
      if ((LODWORD(v32) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v22) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v39 = vabds_f32(v32, v22);
        v40 = fabsf(v32);
        v41 = fabsf(v22);
        if (v40 < v41)
          v40 = v41;
        v42 = v40 >= 1.0 ? v40 * 0.00000011921 : 0.00000011921;
        if (v39 <= v42)
        {
LABEL_43:
          if (v33 == v23)
            goto LABEL_25;
          if ((LODWORD(v33) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v23) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v43 = vabds_f32(v33, v23);
            v44 = fabsf(v33);
            v45 = fabsf(v23);
            if (v44 < v45)
              v44 = v45;
            v46 = v44 >= 1.0 ? v44 * 0.00000011921 : 0.00000011921;
            if (v43 <= v46)
            {
LABEL_25:
              v38 = 1;
              v37 = 4294967197;
              v35 = -99;
              if (!v17)
                goto LABEL_72;
              goto LABEL_46;
            }
          }
        }
      }
      v35 = 0;
    }
    v38 = 0;
    if (!v17)
      goto LABEL_72;
LABEL_46:
    if (v35 != v16 || (_DWORD)v37 != (_DWORD)v15 || v17 >= 0xB)
    {
      if (v19)
      {
        v49 = a1[2];
        if ((unint64_t)v21 < v49)
        {
LABEL_56:
          *(_QWORD *)v21 = v16 | (unint64_t)(v15 << 32);
          *((_QWORD *)v21 + 3) = v112;
          *(_OWORD *)(v21 + 8) = v111;
          *((float *)v21 + 8) = v31;
          *((float *)v21 + 9) = v26;
          *((float *)v21 + 10) = v30;
          *((float *)v21 + 11) = v27;
          *((_QWORD *)v21 + 6) = v24;
          *((_QWORD *)v21 + 7) = v28;
          *((_QWORD *)v21 + 8) = v17;
          *((_QWORD *)v21 + 9) = v18;
          v21[80] = v19;
          *((_QWORD *)v21 + 11) = v29;
          v21[96] = v20;
          v21[97] = 0;
          v50 = v21 + 104;
LABEL_71:
          v20 = 0;
          a1[1] = v50;
          v21 = v50;
LABEL_72:
          v111 = *a4;
          v112 = *((_QWORD *)a4 + 2);
          if (!(v38 & 1 | ((v25 & 1) == 0)))
            v20 = 1;
          v25 &= v38;
          if (v22 >= v32)
            v31 = v32;
          else
            v31 = v22;
          if (v22 <= v32)
            v30 = v32;
          else
            v30 = v22;
          if (v23 >= v33)
            v26 = v33;
          else
            v26 = v23;
          v17 = 0;
          v29 = v13;
          v19 = v38;
          if (v23 > v33)
            v27 = v23;
          else
            v27 = v33;
          v18 = v6;
          v24 = v14;
          v16 = v35;
          v15 = v37;
          v67 = v11 + 1;
          if (v11 + 1 < v10)
            goto LABEL_8;
          goto LABEL_87;
        }
      }
      else
      {
        v92 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v21[-*a1] >> 3);
        v49 = a1[2];
        if ((unint64_t)v21 < v49)
          goto LABEL_56;
      }
      v105 = v14;
      v51 = (char *)*a1;
      v52 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v21[-*a1] >> 3);
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) > 0x276276276276276)
        sub_2233DCD38();
      v96 = v35;
      v97 = v37;
      v98 = v38;
      v107 = v29;
      v99 = v13;
      v100 = v11;
      v101 = v25;
      v103 = v12;
      v109 = v20;
      v54 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v49 - (_QWORD)v51) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x13B13B13B13B13BLL)
        v55 = 0x276276276276276;
      else
        v55 = v53;
      if (v55 > 0x276276276276276)
        goto LABEL_123;
      v56 = v24;
      v57 = v18;
      v58 = v19;
      v95 = 104 * v55;
      v59 = (char *)operator new(104 * v55);
      v60 = &v59[104 * v52];
      *(_QWORD *)v60 = v16 | (unint64_t)(v15 << 32);
      *(_OWORD *)(v60 + 8) = v111;
      *((_QWORD *)v60 + 3) = v112;
      *((float *)v60 + 8) = v31;
      *((float *)v60 + 9) = v26;
      *((float *)v60 + 10) = v30;
      *((float *)v60 + 11) = v27;
      *((_QWORD *)v60 + 6) = v56;
      *((_QWORD *)v60 + 7) = v28;
      *((_QWORD *)v60 + 8) = v17;
      *((_QWORD *)v60 + 9) = v57;
      v60[80] = v58;
      *((_QWORD *)v60 + 11) = v107;
      v60[96] = v109;
      v60[97] = 0;
      if (v21 == v51)
      {
        a1 = v91;
        v14 = v105;
        v50 = v60 + 104;
        *v91 = v60;
        v91[1] = v60 + 104;
        v91[2] = &v59[v95];
        if (!v21)
          goto LABEL_70;
      }
      else
      {
        v61 = 0;
        a1 = v91;
        v14 = v105;
        do
        {
          v62 = &v60[v61];
          v63 = *(_OWORD *)&v21[v61 - 104];
          *(_OWORD *)(v62 - 88) = *(_OWORD *)&v21[v61 - 88];
          *(_OWORD *)(v62 - 104) = v63;
          *((_QWORD *)v62 - 9) = *(_QWORD *)&v21[v61 - 72];
          *((_QWORD *)v62 - 8) = *(_QWORD *)&v21[v61 - 64];
          v64 = *(_OWORD *)&v21[v61 - 56];
          v65 = *(_OWORD *)&v21[v61 - 40];
          v66 = *(_OWORD *)&v21[v61 - 24];
          *((_WORD *)v62 - 4) = *(_WORD *)&v21[v61 - 8];
          *(_OWORD *)(v62 - 24) = v66;
          *(_OWORD *)(v62 - 40) = v65;
          *(_OWORD *)(v62 - 56) = v64;
          v61 -= 104;
        }
        while (&v21[v61] != v51);
        v21 = v51;
        v50 = v60 + 104;
        *v91 = &v60[v61];
        v91[1] = v60 + 104;
        v91[2] = &v59[v95];
        if (!v51)
          goto LABEL_70;
      }
      operator delete(v21);
LABEL_70:
      a3 = v89;
      a4 = v90;
      v9 = v87;
      v6 = v88;
      v10 = v86;
      v12 = v103;
      v25 = v101;
      v13 = v99;
      v11 = v100;
      v37 = v97;
      v38 = v98;
      v35 = v96;
      goto LABEL_71;
    }
    if (v22 < v31)
      v31 = *v12;
    if (v22 > v30)
      v30 = *v12;
    if (v23 < v26)
      v26 = v12[1];
    if (v23 > v27)
      v27 = v12[1];
    v67 = v11 + 1;
    if (v11 + 1 < v10)
    {
LABEL_8:
      v12 += 2;
      goto LABEL_9;
    }
LABEL_87:
    v12 = v9;
    if (v11 < v10)
      v12 = (float *)(v94 + 8 * (v67 % v10));
LABEL_9:
    ++v14;
    ++v17;
    v13 += v38 ^ 1u;
    v28 = v14;
    v11 = v67;
  }
  while (v67 != *(_QWORD *)(a3 + 32));
  v68 = v92;
  if (v19)
  {
    v69 = a1[2];
    if ((unint64_t)v21 < v69)
      goto LABEL_103;
LABEL_105:
    v71 = (char *)*a1;
    v72 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v21[-*a1] >> 3);
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) > 0x276276276276276)
      sub_2233DCD38();
    v93 = v68;
    v108 = v29;
    v102 = v24;
    v104 = v18;
    v106 = v19;
    v110 = v20;
    v74 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v69 - (_QWORD)v71) >> 3);
    if (2 * v74 > v73)
      v73 = 2 * v74;
    if (v74 >= 0x13B13B13B13B13BLL)
      v75 = 0x276276276276276;
    else
      v75 = v73;
    if (v75 > 0x276276276276276)
LABEL_123:
      sub_223174E94();
    v76 = 104 * v75;
    v77 = (char *)operator new(104 * v75);
    v78 = &v77[104 * v72];
    *(_QWORD *)v78 = v16 | (unint64_t)(v15 << 32);
    *(_OWORD *)(v78 + 8) = v111;
    *((_QWORD *)v78 + 3) = v112;
    *((float *)v78 + 8) = v31;
    *((float *)v78 + 9) = v26;
    *((float *)v78 + 10) = v30;
    *((float *)v78 + 11) = v27;
    *((_QWORD *)v78 + 6) = v102;
    *((_QWORD *)v78 + 7) = v14;
    *((_QWORD *)v78 + 8) = v17;
    *((_QWORD *)v78 + 9) = v104;
    v78[80] = v106;
    *((_QWORD *)v78 + 11) = v108;
    v78[96] = v110;
    v70 = v78 + 104;
    v78[97] = 0;
    if (v21 != v71)
    {
      v79 = 0;
      do
      {
        v80 = &v78[v79];
        v81 = *(_OWORD *)&v21[v79 - 104];
        *(_OWORD *)(v80 - 88) = *(_OWORD *)&v21[v79 - 88];
        *(_OWORD *)(v80 - 104) = v81;
        *((_QWORD *)v80 - 9) = *(_QWORD *)&v21[v79 - 72];
        *((_QWORD *)v80 - 8) = *(_QWORD *)&v21[v79 - 64];
        v82 = *(_OWORD *)&v21[v79 - 56];
        v83 = *(_OWORD *)&v21[v79 - 40];
        v84 = *(_OWORD *)&v21[v79 - 24];
        *((_WORD *)v80 - 4) = *(_WORD *)&v21[v79 - 8];
        *(_OWORD *)(v80 - 24) = v84;
        *(_OWORD *)(v80 - 40) = v83;
        *(_OWORD *)(v80 - 56) = v82;
        v79 -= 104;
      }
      while (&v21[v79] != v71);
      v78 += v79;
      v21 = v71;
    }
    *a1 = v78;
    a1[1] = v70;
    a1[2] = &v77[v76];
    if (v21)
      operator delete(v21);
    v68 = v93;
  }
  else
  {
    v68 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v21[-*a1] >> 3);
    v69 = a1[2];
    if ((unint64_t)v21 >= v69)
      goto LABEL_105;
LABEL_103:
    *(_QWORD *)v21 = v16 | (unint64_t)(v15 << 32);
    *((_QWORD *)v21 + 3) = v112;
    *(_OWORD *)(v21 + 8) = v111;
    *((float *)v21 + 8) = v31;
    *((float *)v21 + 9) = v26;
    *((float *)v21 + 10) = v30;
    *((float *)v21 + 11) = v27;
    *((_QWORD *)v21 + 6) = v24;
    *((_QWORD *)v21 + 7) = v14;
    *((_QWORD *)v21 + 8) = v17;
    *((_QWORD *)v21 + 9) = v18;
    v21[80] = v19;
    *((_QWORD *)v21 + 11) = v29;
    v21[96] = v20;
    v21[97] = 0;
    v70 = v21 + 104;
  }
  a1[1] = v70;
  v85 = (char *)*a1;
  if (v68 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v70[-*a1] >> 3) && !v85[104 * v68 + 80])
    v85[104 * v68 + 97] = 1;
}

void sub_223EAA3EC(float *a1, float ***a2, float ***a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  float v13;
  float **v14;
  float **v15;
  char *v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  float *v20;
  float32x4_t v21;
  float32x4_t v22;
  int16x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int16x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  float **v37;
  float **v38;
  char *v39;
  float *v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float *v44;
  float32x4_t v45;
  float32x4_t v46;
  int16x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  char *v52;
  float *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  float **v58;
  float **v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int16x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  char *v70;
  float *v71;
  uint64_t v72;
  float **v73;
  float **v74;
  char *v76;
  float *v77;
  uint64_t v78;
  float **v80;
  float **v81;
  char *v82;
  float *v83;
  uint64_t v84;
  char *v85;
  float **v86;
  float **v87;
  char *v88;
  float *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  float *v93;
  uint64_t v94;
  __int128 v95;
  void *__p;
  char *v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  float **v106;
  uint64_t v107;
  void *v108;
  float **v109;
  uint64_t v110;
  float **v111;
  float **v112;
  uint64_t v113;
  float v114[2];
  uint64_t v115;
  uint64_t v116;
  float v117;
  int v118;

  v12 = *((_QWORD *)a1 + 1);
  v13 = (float)(*a1 + a1[2]) * 0.5;
  v116 = *(_QWORD *)a1;
  v118 = HIDWORD(v12);
  v114[1] = *((float *)&v116 + 1);
  v115 = v12;
  v117 = v13;
  v114[0] = v13;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  __p = 0;
  v97 = 0;
  v98 = 0;
  sub_22340170C((float *)&v116, v114, a2, &v111, &v108, &v105);
  sub_22340170C((float *)&v116, v114, a3, (float ***)&v102, &v99, &__p);
  v15 = (float **)v105;
  v14 = v106;
  if (v105 == v106)
    goto LABEL_48;
  v17 = (char *)__p;
  v16 = v97;
  if ((unint64_t)((char *)v106 - (_BYTE *)v105) < 0x80
    || a4 > 0x63
    || (unint64_t)(v97 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v97)
    {
      do
      {
        v39 = (char *)__p;
        if (__p != v16)
        {
          do
          {
            v40 = *v15;
            v41 = *(_QWORD *)v39;
            if ((*v15)[10] >= *(float *)(*(_QWORD *)v39 + 32)
              && v40[8] <= *(float *)(v41 + 40)
              && v40[11] >= *(float *)(v41 + 36)
              && v40[9] <= *(float *)(v41 + 44))
            {
              sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v40, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v41, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
              v16 = v97;
            }
            v39 += 8;
          }
          while (v39 != v16);
          v14 = v106;
        }
        ++v15;
      }
      while (v15 != v14);
    }
  }
  else
  {
    v18 = (int8x16_t)xmmword_2245F53F0;
    v19 = (int8x16_t)xmmword_2245F53F0;
    do
    {
      v20 = *v15++;
      v21.i64[0] = *((_QWORD *)v20 + 4);
      v22.i64[0] = *((_QWORD *)v20 + 5);
      v21.i64[1] = v21.i64[0];
      v23.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v18, v21)).u32[0];
      v23.i32[1] = vmovn_s32(vcgtq_f32(v21, *(float32x4_t *)&v18)).i32[1];
      v24 = (int8x16_t)vmovl_s16(v23);
      v25 = vbslq_s8(v24, (int8x16_t)v21, v19);
      v26 = vbslq_s8(v24, (int8x16_t)v21, v18);
      v22.i64[1] = v22.i64[0];
      v21.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v26, v22)).u32[0];
      v21.i32[1] = vmovn_s32(vcgtq_f32(v22, *(float32x4_t *)&v26)).i32[1];
      v27 = (int8x16_t)vmovl_s16(*(int16x4_t *)v21.f32);
      v19 = vbslq_s8(v27, (int8x16_t)v22, v25);
      v18 = vbslq_s8(v27, (int8x16_t)v22, v26);
    }
    while (v15 != v106);
    v95 = (__int128)v19;
    if (__p != v97)
    {
      do
      {
        v28 = *(_QWORD *)v17;
        v17 += 8;
        v29.i64[0] = *(_QWORD *)(v28 + 32);
        v30.i64[0] = *(_QWORD *)(v28 + 40);
        v29.i64[1] = v29.i64[0];
        v31.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v18, v29)).u32[0];
        v31.i32[1] = vmovn_s32(vcgtq_f32(v29, *(float32x4_t *)&v18)).i32[1];
        v32 = (int8x16_t)vmovl_s16(v31);
        v33 = vbslq_s8(v32, (int8x16_t)v29, v19);
        v34 = vbslq_s8(v32, (int8x16_t)v29, v18);
        v30.i64[1] = v30.i64[0];
        v29.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v34, v30)).u32[0];
        v29.i32[1] = vmovn_s32(vcgtq_f32(v30, *(float32x4_t *)&v34)).i32[1];
        v35 = (int8x16_t)vmovl_s16(*(int16x4_t *)v29.f32);
        v19 = vbslq_s8(v35, (int8x16_t)v30, v33);
        v18 = vbslq_s8(v35, (int8x16_t)v30, v34);
      }
      while (v17 != v97);
      v95 = (__int128)v19;
    }
    sub_223EAAE70((float *)&v95, (float ***)&v105, (float ***)&__p, a4 + 1, a5, a6, a7);
  }
  v36 = v103;
  if ((unint64_t)(v103 - (_BYTE *)v102) > 0x7F)
  {
    v38 = (float **)v105;
    v37 = v106;
    if ((unint64_t)(v100 - (_BYTE *)v99) >= 0x80
      && a4 <= 0x63
      && (unint64_t)((char *)v106 - (_BYTE *)v105) >= 0x79)
    {
      v42 = (int8x16_t)xmmword_2245F53F0;
      v95 = xmmword_2245F53F0;
      if (v105 != v106)
      {
        v43 = (int8x16_t)xmmword_2245F53F0;
        do
        {
          v44 = *v38++;
          v45.i64[0] = *((_QWORD *)v44 + 4);
          v46.i64[0] = *((_QWORD *)v44 + 5);
          v45.i64[1] = v45.i64[0];
          v47.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v42, v45)).u32[0];
          v47.i32[1] = vmovn_s32(vcgtq_f32(v45, *(float32x4_t *)&v42)).i32[1];
          v48 = (int8x16_t)vmovl_s16(v47);
          v49 = vbslq_s8(v48, (int8x16_t)v45, v43);
          v50 = vbslq_s8(v48, (int8x16_t)v45, v42);
          v46.i64[1] = v46.i64[0];
          v45.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v50, v46)).u32[0];
          v45.i32[1] = vmovn_s32(vcgtq_f32(v46, *(float32x4_t *)&v50)).i32[1];
          v51 = (int8x16_t)vmovl_s16(*(int16x4_t *)v45.f32);
          v43 = vbslq_s8(v51, (int8x16_t)v46, v49);
          v42 = vbslq_s8(v51, (int8x16_t)v46, v50);
        }
        while (v38 != v106);
        v95 = (__int128)v43;
      }
      sub_223EAAE70((float *)&v95, (float ***)&v105, (float ***)&v102, a4 + 1, a5, a6, a7);
      sub_223EAAE70((float *)&v95, (float ***)&v105, (float ***)&v99, a4 + 1, a5, a6, a7);
      goto LABEL_48;
    }
  }
  else
  {
    v38 = (float **)v105;
    v37 = v106;
  }
  if (v102 == v103 || v38 == v37)
  {
    if (v38 == v37)
      goto LABEL_48;
    goto LABEL_47;
  }
  do
  {
    v52 = (char *)v102;
    if (v102 != v36)
    {
      do
      {
        v53 = *v38;
        v54 = *(_QWORD *)v52;
        if ((*v38)[10] >= *(float *)(*(_QWORD *)v52 + 32)
          && v53[8] <= *(float *)(v54 + 40)
          && v53[11] >= *(float *)(v54 + 36)
          && v53[9] <= *(float *)(v54 + 44))
        {
          sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v53, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v54, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
          v36 = v103;
        }
        v52 += 8;
      }
      while (v52 != v36);
      v37 = v106;
    }
    ++v38;
  }
  while (v38 != v37);
  v38 = (float **)v105;
  if (v105 != v37)
  {
LABEL_47:
    v55 = v100;
    if (v99 != v100)
    {
      do
      {
        v70 = (char *)v99;
        if (v99 != v55)
        {
          do
          {
            v71 = *v38;
            v72 = *(_QWORD *)v70;
            if ((*v38)[10] >= *(float *)(*(_QWORD *)v70 + 32)
              && v71[8] <= *(float *)(v72 + 40)
              && v71[11] >= *(float *)(v72 + 36)
              && v71[9] <= *(float *)(v72 + 44))
            {
              sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v71, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v72, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
              v55 = v100;
            }
            v70 += 8;
          }
          while (v70 != v55);
          v37 = v106;
        }
        ++v38;
      }
      while (v38 != v37);
    }
  }
LABEL_48:
  v57 = (char *)__p;
  v56 = v97;
  if (__p == v97)
    goto LABEL_88;
  v59 = v111;
  v58 = v112;
  if ((unint64_t)((char *)v112 - (char *)v111) >= 0x80
    && (unint64_t)((char *)v109 - (_BYTE *)v108) >= 0x80
    && a4 <= 0x63
    && (unint64_t)(v97 - (_BYTE *)__p) >= 0x79)
  {
    v60 = (int8x16_t)xmmword_2245F53F0;
    v61 = (int8x16_t)xmmword_2245F53F0;
    do
    {
      v62 = *(_QWORD *)v57;
      v57 += 8;
      v63.i64[0] = *(_QWORD *)(v62 + 32);
      v64.i64[0] = *(_QWORD *)(v62 + 40);
      v63.i64[1] = v63.i64[0];
      v65.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v60, v63)).u32[0];
      v65.i32[1] = vmovn_s32(vcgtq_f32(v63, *(float32x4_t *)&v60)).i32[1];
      v66 = (int8x16_t)vmovl_s16(v65);
      v67 = vbslq_s8(v66, (int8x16_t)v63, v61);
      v68 = vbslq_s8(v66, (int8x16_t)v63, v60);
      v64.i64[1] = v64.i64[0];
      v63.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v68, v64)).u32[0];
      v63.i32[1] = vmovn_s32(vcgtq_f32(v64, *(float32x4_t *)&v68)).i32[1];
      v69 = (int8x16_t)vmovl_s16(*(int16x4_t *)v63.f32);
      v61 = vbslq_s8(v69, (int8x16_t)v64, v67);
      v60 = vbslq_s8(v69, (int8x16_t)v64, v68);
    }
    while (v57 != v97);
    v95 = (__int128)v61;
    sub_223EAAE70((float *)&v95, &v111, (float ***)&__p, a4 + 1, a5, a6, a7);
    sub_223EAAE70((float *)&v95, (float ***)&v108, (float ***)&__p, a4 + 1, a5, a6, a7);
    goto LABEL_88;
  }
  if (v111 == v112)
  {
    v74 = (float **)v108;
    v73 = v109;
    if (v108 == v109 || __p == v97)
      goto LABEL_88;
    goto LABEL_94;
  }
  do
  {
    v76 = (char *)__p;
    if (__p != v56)
    {
      do
      {
        v77 = *v59;
        v78 = *(_QWORD *)v76;
        if ((*v59)[10] >= *(float *)(*(_QWORD *)v76 + 32)
          && v77[8] <= *(float *)(v78 + 40)
          && v77[11] >= *(float *)(v78 + 36)
          && v77[9] <= *(float *)(v78 + 44))
        {
          sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v77, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v78, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
          v56 = v97;
        }
        v76 += 8;
      }
      while (v76 != v56);
      v58 = v112;
    }
    ++v59;
  }
  while (v59 != v58);
  v74 = (float **)v108;
  v73 = v109;
  if (v108 != v109 && __p != v56)
  {
    do
    {
LABEL_94:
      v82 = (char *)__p;
      if (__p != v56)
      {
        do
        {
          v83 = *v74;
          v84 = *(_QWORD *)v82;
          if ((*v74)[10] >= *(float *)(*(_QWORD *)v82 + 32)
            && v83[8] <= *(float *)(v84 + 40)
            && v83[11] >= *(float *)(v84 + 36)
            && v83[9] <= *(float *)(v84 + 44))
          {
            sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v83, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v84, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
            v56 = v97;
          }
          v82 += 8;
        }
        while (v82 != v56);
        v73 = v109;
      }
      ++v74;
    }
    while (v74 != v73);
  }
LABEL_88:
  v81 = v111;
  v80 = v112;
  if ((unint64_t)((char *)v112 - (char *)v111) < 0x80
    || a4 > 0x63
    || (unint64_t)(v103 - (_BYTE *)v102) < 0x79)
  {
    if (v111 != v112)
    {
      v85 = v103;
      if (v102 != v103)
      {
        do
        {
          v88 = (char *)v102;
          if (v102 != v85)
          {
            do
            {
              v89 = *v81;
              v90 = *(_QWORD *)v88;
              if ((*v81)[10] >= *(float *)(*(_QWORD *)v88 + 32)
                && v89[8] <= *(float *)(v90 + 40)
                && v89[11] >= *(float *)(v90 + 36)
                && v89[9] <= *(float *)(v90 + 44))
              {
                sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v89, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v90, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                v85 = v103;
              }
              v88 += 8;
            }
            while (v88 != v85);
            v80 = v112;
          }
          ++v81;
        }
        while (v81 != v80);
      }
    }
  }
  else
  {
    sub_223EAAE70((float *)&v116, &v111, (float ***)&v102, a4 + 1, a5, a6, a7);
  }
  v87 = (float **)v108;
  v86 = v109;
  if ((unint64_t)((char *)v109 - (_BYTE *)v108) < 0x80
    || a4 > 0x63
    || (unint64_t)(v100 - (_BYTE *)v99) < 0x79)
  {
    if (v108 != v109)
    {
      v91 = v100;
      if (v99 != v100)
      {
        do
        {
          v92 = (char *)v99;
          if (v99 != v91)
          {
            do
            {
              v93 = *v87;
              v94 = *(_QWORD *)v92;
              if ((*v87)[10] >= *(float *)(*(_QWORD *)v92 + 32)
                && v93[8] <= *(float *)(v94 + 40)
                && v93[11] >= *(float *)(v94 + 36)
                && v93[9] <= *(float *)(v94 + 44))
              {
                sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v93, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v94, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                v91 = v100;
              }
              v92 += 8;
            }
            while (v92 != v91);
            v86 = v109;
          }
          ++v87;
        }
        while (v87 != v86);
      }
    }
  }
  else
  {
    sub_223EAAE70(v114, (float ***)&v108, (float ***)&v99, a4 + 1, a5, a6, a7);
  }
  if (__p)
  {
    v97 = (char *)__p;
    operator delete(__p);
  }
  if (v99)
  {
    v100 = (char *)v99;
    operator delete(v99);
  }
  if (v102)
  {
    v103 = (char *)v102;
    operator delete(v102);
  }
  if (v105)
  {
    v106 = (float **)v105;
    operator delete(v105);
  }
  if (v108)
  {
    v109 = (float **)v108;
    operator delete(v108);
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
}

void sub_223EAADAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (__p)
  {
    operator delete(__p);
    v28 = a16;
    if (!a16)
    {
LABEL_3:
      v29 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v28 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v28);
  v29 = a19;
  if (!a19)
  {
LABEL_4:
    v30 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v29);
  v30 = a22;
  if (!a22)
  {
LABEL_5:
    v31 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v30);
  v31 = a25;
  if (!a25)
  {
LABEL_6:
    v32 = *(void **)(v26 - 120);
    if (!v32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v31);
  v32 = *(void **)(v26 - 120);
  if (!v32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v26 - 112) = v32;
  operator delete(v32);
  _Unwind_Resume(exception_object);
}

void sub_223EAAE70(float *a1, float ***a2, float ***a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  float v13;
  __n128 v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __n128 v19;
  int8x16_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int16x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int16x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  _DWORD *v41;
  uint64_t v42;
  __n128 v43;
  int8x16_t v44;
  _DWORD *v45;
  float32x4_t v46;
  float32x4_t v47;
  int16x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  __n128 v53;
  char *v54;
  _DWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  float **v60;
  float **v61;
  __n128 v62;
  int8x16_t v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int16x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  __n128 v72;
  char *v73;
  _DWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v79;
  float *v80;
  uint64_t v81;
  float **v83;
  float **v84;
  char *v85;
  _DWORD *v86;
  uint64_t v87;
  char *v88;
  float **v89;
  float **v90;
  char *v91;
  float *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  float *v96;
  uint64_t v97;
  __int128 v98;
  void *__p;
  char *v100;
  uint64_t v101;
  void *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  char *v106;
  uint64_t v107;
  void *v108;
  char *v109;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  float **v114;
  float **v115;
  uint64_t v116;
  float v117[2];
  uint64_t v118;
  uint64_t v119;
  int v120;
  float v121;

  v12 = *((_QWORD *)a1 + 1);
  v13 = (float)(a1[1] + a1[3]) * 0.5;
  v119 = *(_QWORD *)a1;
  v120 = v12;
  LODWORD(v117[0]) = v119;
  v118 = v12;
  v121 = v13;
  v117[1] = v13;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  __p = 0;
  v100 = 0;
  v101 = 0;
  sub_22340170C((float *)&v119, v117, a2, &v114, &v111, &v108);
  sub_22340170C((float *)&v119, v117, a3, (float ***)&v105, &v102, &__p);
  v16 = (char *)v108;
  v15 = v109;
  if (v108 == v109)
    goto LABEL_48;
  v18 = (char *)__p;
  v17 = v100;
  if ((unint64_t)(v109 - (_BYTE *)v108) < 0x80 || a4 > 0x63 || (unint64_t)(v100 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v100)
    {
      do
      {
        v40 = (char *)__p;
        if (__p != v17)
        {
          do
          {
            v41 = *(_DWORD **)v16;
            v42 = *(_QWORD *)v40;
            v14.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v16 + 40);
            if (v14.n128_f32[0] >= *(float *)(*(_QWORD *)v40 + 32))
            {
              v14.n128_u32[0] = v41[8];
              if (v14.n128_f32[0] <= *(float *)(v42 + 40))
              {
                v14.n128_u32[0] = v41[11];
                if (v14.n128_f32[0] >= *(float *)(v42 + 36))
                {
                  v14.n128_u32[0] = v41[9];
                  if (v14.n128_f32[0] <= *(float *)(v42 + 44))
                  {
                    sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v41, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v42, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                    v17 = v100;
                  }
                }
              }
            }
            v40 += 8;
          }
          while (v40 != v17);
          v15 = v109;
        }
        v16 += 8;
      }
      while (v16 != v15);
    }
  }
  else
  {
    v19 = (__n128)xmmword_2245F53F0;
    v20 = (int8x16_t)xmmword_2245F53F0;
    do
    {
      v21 = *(_QWORD *)v16;
      v16 += 8;
      v22.i64[0] = *(_QWORD *)(v21 + 32);
      v23.i64[0] = *(_QWORD *)(v21 + 40);
      v22.i64[1] = v22.i64[0];
      v24.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v19, v22)).u32[0];
      v24.i32[1] = vmovn_s32(vcgtq_f32(v22, *(float32x4_t *)&v19)).i32[1];
      v25 = (int8x16_t)vmovl_s16(v24);
      v26 = vbslq_s8(v25, (int8x16_t)v22, v20);
      v27 = vbslq_s8(v25, (int8x16_t)v22, (int8x16_t)v19);
      v23.i64[1] = v23.i64[0];
      v22.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v27, v23)).u32[0];
      v22.i32[1] = vmovn_s32(vcgtq_f32(v23, *(float32x4_t *)&v27)).i32[1];
      v28 = (int8x16_t)vmovl_s16(*(int16x4_t *)v22.f32);
      v20 = vbslq_s8(v28, (int8x16_t)v23, v26);
      v19 = (__n128)vbslq_s8(v28, (int8x16_t)v23, v27);
    }
    while (v16 != v109);
    v98 = (__int128)v20;
    if (__p != v100)
    {
      do
      {
        v29 = *(_QWORD *)v18;
        v18 += 8;
        v30.i64[0] = *(_QWORD *)(v29 + 32);
        v31.i64[0] = *(_QWORD *)(v29 + 40);
        v30.i64[1] = v30.i64[0];
        v32.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v19, v30)).u32[0];
        v32.i32[1] = vmovn_s32(vcgtq_f32(v30, *(float32x4_t *)&v19)).i32[1];
        v33 = (int8x16_t)vmovl_s16(v32);
        v34 = vbslq_s8(v33, (int8x16_t)v30, v20);
        v35 = vbslq_s8(v33, (int8x16_t)v30, (int8x16_t)v19);
        v31.i64[1] = v31.i64[0];
        v30.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v35, v31)).u32[0];
        v30.i32[1] = vmovn_s32(vcgtq_f32(v31, *(float32x4_t *)&v35)).i32[1];
        v36 = (int8x16_t)vmovl_s16(*(int16x4_t *)v30.f32);
        v20 = vbslq_s8(v36, (int8x16_t)v31, v34);
        v19 = (__n128)vbslq_s8(v36, (int8x16_t)v31, v35);
      }
      while (v18 != v100);
      v98 = (__int128)v20;
    }
    sub_223EAA3EC(&v98, &v108, &__p, a4 + 1, a5, a6, a7, v19);
  }
  v37 = v106;
  if ((unint64_t)(v106 - (_BYTE *)v105) > 0x7F)
  {
    v39 = (char *)v108;
    v38 = v109;
    if ((unint64_t)(v103 - (_BYTE *)v102) >= 0x80
      && a4 <= 0x63
      && (unint64_t)(v109 - (_BYTE *)v108) >= 0x79)
    {
      v43 = (__n128)xmmword_2245F53F0;
      v98 = xmmword_2245F53F0;
      if (v108 != v109)
      {
        v44 = (int8x16_t)xmmword_2245F53F0;
        do
        {
          v45 = *(_DWORD **)v39;
          v39 += 8;
          v46.i64[0] = *((_QWORD *)v45 + 4);
          v47.i64[0] = *((_QWORD *)v45 + 5);
          v46.i64[1] = v46.i64[0];
          v48.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v43, v46)).u32[0];
          v48.i32[1] = vmovn_s32(vcgtq_f32(v46, *(float32x4_t *)&v43)).i32[1];
          v49 = (int8x16_t)vmovl_s16(v48);
          v50 = vbslq_s8(v49, (int8x16_t)v46, v44);
          v51 = vbslq_s8(v49, (int8x16_t)v46, (int8x16_t)v43);
          v47.i64[1] = v47.i64[0];
          v46.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v51, v47)).u32[0];
          v46.i32[1] = vmovn_s32(vcgtq_f32(v47, *(float32x4_t *)&v51)).i32[1];
          v52 = (int8x16_t)vmovl_s16(*(int16x4_t *)v46.f32);
          v44 = vbslq_s8(v52, (int8x16_t)v47, v50);
          v43 = (__n128)vbslq_s8(v52, (int8x16_t)v47, v51);
        }
        while (v39 != v109);
        v98 = (__int128)v44;
      }
      sub_223EAA3EC(&v98, &v108, &v105, a4 + 1, a5, a6, a7, v43);
      sub_223EAA3EC(&v98, &v108, &v102, a4 + 1, a5, a6, a7, v53);
      goto LABEL_48;
    }
  }
  else
  {
    v39 = (char *)v108;
    v38 = v109;
  }
  if (v105 == v106 || v39 == v38)
  {
    if (v39 == v38)
      goto LABEL_48;
    goto LABEL_47;
  }
  do
  {
    v54 = (char *)v105;
    if (v105 != v37)
    {
      do
      {
        v55 = *(_DWORD **)v39;
        v56 = *(_QWORD *)v54;
        v14.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v39 + 40);
        if (v14.n128_f32[0] >= *(float *)(*(_QWORD *)v54 + 32))
        {
          v14.n128_u32[0] = v55[8];
          if (v14.n128_f32[0] <= *(float *)(v56 + 40))
          {
            v14.n128_u32[0] = v55[11];
            if (v14.n128_f32[0] >= *(float *)(v56 + 36))
            {
              v14.n128_u32[0] = v55[9];
              if (v14.n128_f32[0] <= *(float *)(v56 + 44))
              {
                sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v55, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v56, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                v37 = v106;
              }
            }
          }
        }
        v54 += 8;
      }
      while (v54 != v37);
      v38 = v109;
    }
    v39 += 8;
  }
  while (v39 != v38);
  v39 = (char *)v108;
  if (v108 != v38)
  {
LABEL_47:
    v57 = v103;
    if (v102 != v103)
    {
      do
      {
        v73 = (char *)v102;
        if (v102 != v57)
        {
          do
          {
            v74 = *(_DWORD **)v39;
            v75 = *(_QWORD *)v73;
            v14.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v39 + 40);
            if (v14.n128_f32[0] >= *(float *)(*(_QWORD *)v73 + 32))
            {
              v14.n128_u32[0] = v74[8];
              if (v14.n128_f32[0] <= *(float *)(v75 + 40))
              {
                v14.n128_u32[0] = v74[11];
                if (v14.n128_f32[0] >= *(float *)(v75 + 36))
                {
                  v14.n128_u32[0] = v74[9];
                  if (v14.n128_f32[0] <= *(float *)(v75 + 44))
                  {
                    sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v74, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v75, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                    v57 = v103;
                  }
                }
              }
            }
            v73 += 8;
          }
          while (v73 != v57);
          v38 = v109;
        }
        v39 += 8;
      }
      while (v39 != v38);
    }
  }
LABEL_48:
  v59 = (char *)__p;
  v58 = v100;
  if (__p == v100)
    goto LABEL_88;
  v61 = v114;
  v60 = v115;
  if ((unint64_t)((char *)v115 - (char *)v114) >= 0x80
    && (unint64_t)(v112 - (_BYTE *)v111) >= 0x80
    && a4 <= 0x63
    && (unint64_t)(v100 - (_BYTE *)__p) >= 0x79)
  {
    v62 = (__n128)xmmword_2245F53F0;
    v63 = (int8x16_t)xmmword_2245F53F0;
    do
    {
      v64 = *(_QWORD *)v59;
      v59 += 8;
      v65.i64[0] = *(_QWORD *)(v64 + 32);
      v66.i64[0] = *(_QWORD *)(v64 + 40);
      v65.i64[1] = v65.i64[0];
      v67.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v62, v65)).u32[0];
      v67.i32[1] = vmovn_s32(vcgtq_f32(v65, *(float32x4_t *)&v62)).i32[1];
      v68 = (int8x16_t)vmovl_s16(v67);
      v69 = vbslq_s8(v68, (int8x16_t)v65, v63);
      v70 = vbslq_s8(v68, (int8x16_t)v65, (int8x16_t)v62);
      v66.i64[1] = v66.i64[0];
      v65.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v70, v66)).u32[0];
      v65.i32[1] = vmovn_s32(vcgtq_f32(v66, *(float32x4_t *)&v70)).i32[1];
      v71 = (int8x16_t)vmovl_s16(*(int16x4_t *)v65.f32);
      v63 = vbslq_s8(v71, (int8x16_t)v66, v69);
      v62 = (__n128)vbslq_s8(v71, (int8x16_t)v66, v70);
    }
    while (v59 != v100);
    v98 = (__int128)v63;
    sub_223EAA3EC(&v98, &v114, &__p, a4 + 1, a5, a6, a7, v62);
    sub_223EAA3EC(&v98, &v111, &__p, a4 + 1, a5, a6, a7, v72);
    goto LABEL_88;
  }
  if (v114 == v115)
  {
    v77 = (char *)v111;
    v76 = v112;
    if (v111 == v112 || __p == v100)
      goto LABEL_88;
    goto LABEL_94;
  }
  do
  {
    v79 = (char *)__p;
    if (__p != v58)
    {
      do
      {
        v80 = *v61;
        v81 = *(_QWORD *)v79;
        v14.n128_f32[0] = (*v61)[10];
        if (v14.n128_f32[0] >= *(float *)(*(_QWORD *)v79 + 32))
        {
          v14.n128_f32[0] = v80[8];
          if (v14.n128_f32[0] <= *(float *)(v81 + 40))
          {
            v14.n128_f32[0] = v80[11];
            if (v14.n128_f32[0] >= *(float *)(v81 + 36))
            {
              v14.n128_f32[0] = v80[9];
              if (v14.n128_f32[0] <= *(float *)(v81 + 44))
              {
                sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v80, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v81, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                v58 = v100;
              }
            }
          }
        }
        v79 += 8;
      }
      while (v79 != v58);
      v60 = v115;
    }
    ++v61;
  }
  while (v61 != v60);
  v77 = (char *)v111;
  v76 = v112;
  if (v111 != v112 && __p != v58)
  {
    do
    {
LABEL_94:
      v85 = (char *)__p;
      if (__p != v58)
      {
        do
        {
          v86 = *(_DWORD **)v77;
          v87 = *(_QWORD *)v85;
          v14.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v77 + 40);
          if (v14.n128_f32[0] >= *(float *)(*(_QWORD *)v85 + 32))
          {
            v14.n128_u32[0] = v86[8];
            if (v14.n128_f32[0] <= *(float *)(v87 + 40))
            {
              v14.n128_u32[0] = v86[11];
              if (v14.n128_f32[0] >= *(float *)(v87 + 36))
              {
                v14.n128_u32[0] = v86[9];
                if (v14.n128_f32[0] <= *(float *)(v87 + 44))
                {
                  sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v86, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v87, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                  v58 = v100;
                }
              }
            }
          }
          v85 += 8;
        }
        while (v85 != v58);
        v76 = v112;
      }
      v77 += 8;
    }
    while (v77 != v76);
  }
LABEL_88:
  v84 = v114;
  v83 = v115;
  if ((unint64_t)((char *)v115 - (char *)v114) < 0x80
    || a4 > 0x63
    || (unint64_t)(v106 - (_BYTE *)v105) < 0x79)
  {
    if (v114 != v115)
    {
      v88 = v106;
      if (v105 != v106)
      {
        do
        {
          v91 = (char *)v105;
          if (v105 != v88)
          {
            do
            {
              v92 = *v84;
              v93 = *(_QWORD *)v91;
              v14.n128_f32[0] = (*v84)[10];
              if (v14.n128_f32[0] >= *(float *)(*(_QWORD *)v91 + 32))
              {
                v14.n128_f32[0] = v92[8];
                if (v14.n128_f32[0] <= *(float *)(v93 + 40))
                {
                  v14.n128_f32[0] = v92[11];
                  if (v14.n128_f32[0] >= *(float *)(v93 + 36))
                  {
                    v14.n128_f32[0] = v92[9];
                    if (v14.n128_f32[0] <= *(float *)(v93 + 44))
                    {
                      sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v92, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v93, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                      v88 = v106;
                    }
                  }
                }
              }
              v91 += 8;
            }
            while (v91 != v88);
            v83 = v115;
          }
          ++v84;
        }
        while (v84 != v83);
      }
    }
  }
  else
  {
    sub_223EAA3EC(&v119, &v114, &v105, a4 + 1, a5, a6, a7, v14);
  }
  v90 = (float **)v111;
  v89 = (float **)v112;
  if ((unint64_t)(v112 - (_BYTE *)v111) < 0x80 || a4 > 0x63 || (unint64_t)(v103 - (_BYTE *)v102) < 0x79)
  {
    if (v111 != v112)
    {
      v94 = v103;
      if (v102 != v103)
      {
        do
        {
          v95 = (char *)v102;
          if (v102 != v94)
          {
            do
            {
              v96 = *v90;
              v97 = *(_QWORD *)v95;
              if ((*v90)[10] >= *(float *)(*(_QWORD *)v95 + 32)
                && v96[8] <= *(float *)(v97 + 40)
                && v96[11] >= *(float *)(v97 + 36)
                && v96[9] <= *(float *)(v97 + 44))
              {
                sub_223EAB8F4(*(_DWORD *)a5, **(float ***)(a5 + 8), *(float **)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v96, *(_DWORD *)(a5 + 16), *(float ***)(a5 + 24), (int *)v97, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(char ***)(a5 + 48));
                v94 = v103;
              }
              v95 += 8;
            }
            while (v95 != v94);
            v89 = (float **)v112;
          }
          ++v90;
        }
        while (v90 != v89);
      }
    }
  }
  else
  {
    sub_223EAA3EC(v117, &v111, &v102, a4 + 1, a5, a6, a7, v14);
  }
  if (__p)
  {
    v100 = (char *)__p;
    operator delete(__p);
  }
  if (v102)
  {
    v103 = (char *)v102;
    operator delete(v102);
  }
  if (v105)
  {
    v106 = (char *)v105;
    operator delete(v105);
  }
  if (v108)
  {
    v109 = (char *)v108;
    operator delete(v108);
  }
  if (v111)
  {
    v112 = (char *)v111;
    operator delete(v111);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
}

void sub_223EAB830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (__p)
  {
    operator delete(__p);
    v28 = a16;
    if (!a16)
    {
LABEL_3:
      v29 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v28 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v28);
  v29 = a19;
  if (!a19)
  {
LABEL_4:
    v30 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v29);
  v30 = a22;
  if (!a22)
  {
LABEL_5:
    v31 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v30);
  v31 = a25;
  if (!a25)
  {
LABEL_6:
    v32 = *(void **)(v26 - 120);
    if (!v32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v31);
  v32 = *(void **)(v26 - 120);
  if (!v32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v26 - 112) = v32;
  operator delete(v32);
  _Unwind_Resume(exception_object);
}

void sub_223EAB8F4(int a1, float *a2, float *a3, uint64_t a4, int a5, float **a6, int *a7, uint64_t a8, uint64_t a9, char **a10)
{
  uint64_t v10;
  float **v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float *v28;
  int v29;
  float *v30;
  int v31;
  float v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float *v42;
  _BOOL8 v43;
  float *v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  float *v48;
  float v49;
  float *v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  _BOOL4 v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  char v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  double v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  double v104;
  int v105;
  int v106;
  double v107;
  int v108;
  double v109;
  unsigned int v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  unint64_t v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  __int16 v130;
  double v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  double v143;
  float v144;
  double v145;
  double v146;
  float v147;
  float v148;
  float v149;
  float v150;
  double v151;
  double v152;
  float v153;
  double v154;
  float v155;
  float v156;
  float v157;
  unint64_t v158;
  int v159;
  int v160;
  int v161;
  unsigned __int8 v162;
  float v163;
  int v164;
  char v165;
  int v166;
  int v167;
  int v168;
  char v169;
  int v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  float *v175;
  float *v176;
  double v177;
  int v178;
  BOOL v179;
  BOOL v184;
  int v186;
  float *v187;
  _BOOL4 v188;
  float *v190;
  int v191;
  int v192;
  int v193;
  float v194;
  float v195;
  _BOOL4 v196;
  uint64_t v198;
  float *v199;
  float *v200;
  double v201;
  char v202;
  double v203;
  int v204;
  uint64_t v205;
  float *v206;
  float *v207;
  double v208;
  int v209;
  int v211;
  uint64_t v212;
  float *v213;
  float *v214;
  double v215;
  int v216;
  double v217;
  int v218;
  int v219;
  double v220;
  uint64_t v221;
  float *v222;
  float *v223;
  double v224;
  int v225;
  double v226;
  uint64_t v227;
  float *v228;
  float *v229;
  double v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  float *v235;
  uint64_t v236;
  double v237;
  int v238;
  uint64_t v239;
  float *v240;
  uint64_t v241;
  double v242;
  double v243;
  int v244;
  double v245;
  _BOOL4 v246;
  _BOOL4 v247;
  uint64_t v248;
  float *v249;
  float *v250;
  double v251;
  int v252;
  double v253;
  int v254;
  double v255;
  uint64_t v256;
  float *v257;
  float *v258;
  double v259;
  int v260;
  double v261;
  int v263;
  int v264;
  uint64_t v265;
  float *v266;
  float *v267;
  double v268;
  int v269;
  uint64_t v270;
  float *v271;
  float *v272;
  double v273;
  int v274;
  double v275;
  BOOL v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  float *v281;
  float *v282;
  double v283;
  int v284;
  int v285;
  int v287;
  _BYTE *v288;
  double v289;
  double v290;
  uint64_t v291;
  float *v292;
  float *v293;
  double v294;
  int v295;
  double v296;
  int v297;
  uint64_t v298;
  float *v299;
  float *v300;
  double v301;
  int v302;
  double v303;
  unsigned int v304;
  char v305;
  float *v306;
  float *v307;
  float *v308;
  double v309;
  int v310;
  float v311;
  float v312;
  float v313;
  float v314;
  char *v315;
  uint64_t v316;
  float *v317;
  float *v318;
  double v319;
  int v320;
  double v321;
  uint64_t v322;
  float *v323;
  float *v324;
  double v325;
  int v326;
  double v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  float *v333;
  float *v334;
  double v335;
  int v336;
  double v337;
  int v338;
  int v339;
  int v340;
  int v341;
  char v342;
  float v343;
  float v344;
  float v345;
  float v346;
  int v347;
  int v348;
  uint64_t v349;
  float *v350;
  float *v351;
  double v352;
  uint64_t v353;
  float *v354;
  float *v355;
  double v356;
  int v357;
  int v358;
  double v359;
  uint64_t v360;
  float *v361;
  float *v362;
  double v363;
  int v364;
  double v365;
  uint64_t v366;
  float *v367;
  uint64_t v368;
  int v369;
  int v370;
  int v371;
  int v373;
  float *v374;
  float *v375;
  float *v376;
  uint64_t v377;
  float *v378;
  float *v379;
  float *v380;
  int v381;
  BOOL v382;
  int v383;
  char v384;
  uint64_t v385;
  float *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float *v390;
  uint64_t v392;
  uint64_t v393;
  float *v395;
  float *v396;
  float *v397;
  uint64_t *v398;
  __int128 v399;
  __int128 v400;
  _BYTE v401[32];
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  _BYTE v407[24];
  _QWORD v408[3];
  float *v409;
  _QWORD v410[15];
  char v411;
  uint64_t v412;
  char v413;
  float *v414;
  uint64_t v415;
  float *v416;
  float *v417;
  _QWORD v418[3];
  char v419;
  uint64_t v420;
  char v421;
  int8x16_t v422;
  uint64_t v423;
  float *v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  uint64_t v435;
  uint64_t *v436[2];
  uint64_t v437;
  float **v438;
  _QWORD *v439;
  uint64_t v440;
  _QWORD *v441;
  float **v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t *v445;
  _BYTE v446[24];
  char v447;
  _BYTE v448[24];
  char v449;
  __int16 v450;
  _BYTE v451[42];
  uint64_t v452;
  uint64_t v453;
  _BYTE v454[56];
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  uint64_t v462;
  uint64_t v463;

  v463 = *MEMORY[0x24BDAC8D0];
  if ((!*(_BYTE *)(a4 + 80) || (unint64_t)(*(_QWORD *)(a4 + 64) + 1) >= *(_QWORD *)(a4 + 72))
    && (!*((_BYTE *)a7 + 80) || (unint64_t)(*((_QWORD *)a7 + 8) + 1) >= *((_QWORD *)a7 + 9)))
  {
    v10 = *((_QWORD *)a7 + 3);
    if (v10 >= 0)
      v11 = (float **)&a6[3][6 * v10];
    else
      v11 = a6;
    v396 = v11[1];
    v397 = *v11;
    v377 = (char *)v396 - (char *)*v11;
    v12 = v377 >> 3;
    if (v396 == *v11)
      v13 = 0;
    else
      v13 = v12 + 1;
    v14 = *(float *)a4;
    v371 = *a7;
    v16 = *(_QWORD *)(a4 + 48);
    v15 = *(_QWORD *)(a4 + 56);
    v17 = &a2[2 * v16];
    v392 = v16;
    if (v16 != v15)
    {
      if (LODWORD(v14) == 1)
      {
        v21 = *((float *)a7 + 8);
        if (v17[2] < v21)
        {
          v22 = 8 * v15 - 8 * v16 - 8;
          if (8 * v15 - 8 * v392 == 8)
            return;
          while (1)
          {
            ++v392;
            v23 = v17[4];
            v17 += 2;
            v22 -= 8;
            if (v23 >= v21)
              break;
            if (!v22)
              return;
          }
        }
      }
      else if (v14 == NAN)
      {
        v18 = *((float *)a7 + 10);
        if (v17[2] > v18)
        {
          v19 = 8 * v15 - 8 * v16 - 8;
          if (8 * v15 - 8 * v392 == 8)
            return;
          while (1)
          {
            ++v392;
            v20 = v17[4];
            v17 += 2;
            v19 -= 8;
            if (v20 <= v18)
              break;
            if (!v19)
              return;
          }
        }
      }
    }
    v376 = &a2[2 * v15];
    if (v17 != v376)
    {
      v24 = v17 + 2;
      v25 = &a2[2 * (v17 != a2)];
      if (v17 + 2 != a3)
        v25 = v17 + 2;
      v26 = v25 + 2;
      v27 = &a2[2 * (v25 != a2)];
      if (v26 == a3)
        v28 = v27;
      else
        v28 = v26;
      v29 = -LODWORD(v14);
      v30 = &v397[2 * (1 - v12)];
      v31 = -v371;
      v388 = a5;
      v389 = a1;
      if (v377 <= 0)
        v30 = v396;
      if (v377 > 8)
        v30 = v397 + 2;
      v390 = v30;
      v374 = a2;
      v375 = a3;
      v387 = v13;
      v373 = v29;
      do
      {
        v32 = *v17;
        if (v29 == -1)
        {
          if (v32 > *((float *)a7 + 10))
            return;
        }
        else if (v29 == 1 && v32 < *((float *)a7 + 8))
        {
          return;
        }
        v414 = (float *)a4;
        v415 = v392;
        v416 = v17;
        v417 = v24;
        v418[0] = v28;
        v418[1] = a2;
        v418[2] = a3;
        v419 = 1;
        v421 = 0;
        v33 = *((_QWORD *)a7 + 6);
        if (v377 < 1 || v33 >= v12)
        {
          v34 = v396;
          if (v33 <= v12)
            v34 = &v397[2 * (v33 % v12)];
        }
        else
        {
          v34 = &v397[2 * v33];
        }
        v35 = v33 + 1;
        if (v33 + 1 >= v12)
        {
          v36 = v396;
          if (v33 < v12)
            v36 = &v397[2 * (v35 % v12)];
        }
        else
        {
          v36 = v34 + 2;
        }
        v393 = *((_QWORD *)a7 + 7);
        if (v33 != v393)
        {
          if (v371 == 1)
          {
            v38 = *(float *)(a4 + 32);
            if (*v36 < v38)
            {
              while (1)
              {
                v34 = v36;
                if (v35 + 1 >= v12)
                {
                  v36 = v396;
                  if (v35 < v12)
                    v36 = &v397[2 * ((v35 + 1) % v12)];
                }
                else
                {
                  v36 += 2;
                }
                if (v393 == v35)
                  break;
                ++v35;
                if (*v36 >= v38)
                {
LABEL_71:
                  v33 = v35 - 1;
                  v379 = v24;
                  v380 = v17;
                  v378 = v28;
                  if (v35 < v12)
                    goto LABEL_90;
                  goto LABEL_72;
                }
              }
              v33 = *((_QWORD *)a7 + 7);
              v35 = v393 + 1;
              v379 = v24;
              v380 = v17;
              v378 = v28;
              if (v393 + 1 < v12)
                goto LABEL_90;
              goto LABEL_72;
            }
          }
          else if (v371 == -1)
          {
            v37 = *(float *)(a4 + 40);
            if (*v36 > v37)
            {
              while (1)
              {
                v34 = v36;
                if (v35 + 1 >= v12)
                {
                  v36 = v396;
                  if (v35 < v12)
                    v36 = &v397[2 * ((v35 + 1) % v12)];
                }
                else
                {
                  v36 += 2;
                }
                if (v393 == v35)
                  break;
                ++v35;
                if (*v36 <= v37)
                  goto LABEL_71;
              }
              v33 = *((_QWORD *)a7 + 7);
            }
          }
        }
        v35 = v33 + 1;
        v379 = v24;
        v380 = v17;
        v378 = v28;
        if (v33 + 1 < v12)
        {
LABEL_90:
          v39 = v34 + 2;
          v40 = v397;
          if (v33)
            v40 = v390;
          if (v35 == v13)
            v35 = v33 != 0;
          else
            v40 = v34 + 2;
          v41 = v35 + 1;
          if (v35 + 1 < v12)
          {
LABEL_96:
            v42 = v40 + 2;
            goto LABEL_97;
          }
          goto LABEL_86;
        }
LABEL_72:
        if (v33 >= v12)
        {
          v40 = v397;
          if (v33)
            v40 = v390;
          if (v35 == v13)
            v35 = v33 != 0;
          else
            v40 = v396;
          v39 = v396;
          v41 = v35 + 1;
          if (v35 + 1 < v12)
            goto LABEL_96;
        }
        else
        {
          v39 = &v397[2 * (v35 % v12)];
          v40 = v390;
          if (!v33)
            v40 = v397;
          if (v35 == v13)
            v35 = v33 != 0;
          else
            v40 = &v397[2 * (v35 % v12)];
          v41 = v35 + 1;
          if (v35 + 1 < v12)
            goto LABEL_96;
        }
LABEL_86:
        v42 = v396;
        if (v35 < v12)
          v42 = &v397[2 * (v41 % v12)];
LABEL_97:
        if (v33 != v393)
        {
          _ZF = v35 == 0;
          v43 = v35 != 0;
          v44 = v397;
          if (!_ZF)
            v44 = v390;
          if (v41 == v13)
            v45 = v43;
          else
            v45 = v41;
          if (v41 == v13)
            v46 = v44;
          else
            v46 = v42;
          v47 = v33;
          while (2)
          {
            v49 = *v34;
            if (v31 == -1)
            {
              if (v49 > *(float *)(a4 + 40))
                goto LABEL_35;
            }
            else if (v31 == 1 && v49 < *(float *)(a4 + 32))
            {
              goto LABEL_35;
            }
            v408[0] = a7;
            v408[1] = v33;
            v408[2] = v34;
            v409 = v39;
            v410[0] = v46;
            v410[1] = v397;
            v410[2] = v396;
            v410[3] = v377 >> 3;
            v410[4] = v45;
            v410[5] = v397;
            v410[6] = v397;
            v410[7] = v396;
            v410[8] = v377 >> 3;
            v410[9] = 0;
            v410[10] = v396;
            v410[11] = v397;
            v410[12] = v396;
            v410[13] = v377 >> 3;
            v410[14] = v13;
            v411 = 0;
            v413 = 0;
            LODWORD(v399) = 0;
            BYTE4(v399) = 0;
            *((_QWORD *)&v399 + 1) = -1;
            LOWORD(v400) = 0;
            DWORD2(v400) = 0;
            *((_QWORD *)&v402 + 1) = 0x3F80000000000000;
            *(_QWORD *)&v403 = 0;
            *(_QWORD *)((char *)&v403 + 5) = 0;
            LODWORD(v404) = 0;
            *(_QWORD *)v407 = 0x3F80000000000000;
            *(_QWORD *)&v407[8] = 0;
            *(_QWORD *)&v407[13] = 0;
            *(_QWORD *)v401 = v389;
            *(_OWORD *)&v401[8] = *(_OWORD *)(a4 + 16);
            *(_QWORD *)&v401[24] = v392;
            *(_QWORD *)&v402 = -1;
            *((_QWORD *)&v404 + 1) = v388;
            v405 = *((_OWORD *)a7 + 1);
            v436[0] = (uint64_t *)&v414;
            v436[1] = v408;
            v438 = &v414;
            v439 = v408;
            v441 = v408;
            v442 = &v414;
            v50 = v416;
            v51 = v417;
            v424 = v416;
            *(_QWORD *)&v425 = v417;
            v422.i64[0] = (uint64_t)v34;
            v422.i64[1] = (uint64_t)v39;
            v52 = *v417;
            v53 = v417[1];
            v55 = *v416;
            v54 = v416[1];
            _ZF = *v416 == *v417;
            *(_QWORD *)&v406 = v33;
            *((_QWORD *)&v406 + 1) = -1;
            if (!_ZF)
            {
              if ((LODWORD(v55) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v52) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                goto LABEL_141;
              v61 = vabds_f32(v55, v52);
              v62 = fabsf(v55);
              v63 = fabsf(v52);
              if (v62 < v63)
                v62 = v63;
              v64 = v62 >= 1.0 ? v62 * 0.00000011921 : 0.00000011921;
              if (v61 > v64)
                goto LABEL_141;
            }
            if (v54 == v53)
              goto LABEL_122;
            if ((LODWORD(v54) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v53) & 0x7FFFFFFFu) > 0x7F7FFFFF)
              goto LABEL_141;
            v65 = vabds_f32(v54, v53);
            v66 = fabsf(v54);
            v67 = fabsf(v53);
            if (v66 < v67)
              v66 = v67;
            v68 = v66 >= 1.0 ? v66 * 0.00000011921 : 0.00000011921;
            if (v65 <= v68)
            {
LABEL_122:
              v56 = 1;
              v58 = *v39;
              v57 = v39[1];
              v59 = *v34;
              v60 = v34[1];
              v395 = v46;
              if (*v34 == *v39)
                goto LABEL_142;
            }
            else
            {
LABEL_141:
              v56 = 0;
              v58 = *v39;
              v57 = v39[1];
              v59 = *v34;
              v60 = v34[1];
              v395 = v46;
              if (*v34 == *v39)
                goto LABEL_142;
            }
            if ((LODWORD(v59) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v58) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v70 = vabds_f32(v59, v58);
              v71 = fabsf(v59);
              v72 = fabsf(v58);
              if (v71 < v72)
                v71 = v72;
              v73 = v71 >= 1.0 ? v71 * 0.00000011921 : 0.00000011921;
              if (v70 <= v73)
              {
LABEL_142:
                if (v60 == v57)
                {
                  if ((v56 & 1) != 0)
                    goto LABEL_1016;
                  v69 = 1;
LABEL_167:
                  if (v55 <= v52)
                    v79 = v55;
                  else
                    v79 = v52;
                  if (v55 <= v52)
                    v80 = v52;
                  else
                    v80 = v55;
                  if (v59 <= v58)
                    v81 = v59;
                  else
                    v81 = v58;
                  if (v59 <= v58)
                    v82 = v58;
                  else
                    v82 = v59;
                  if (v80 < v81)
                  {
                    if ((LODWORD(v81) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v80) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                      goto LABEL_1016;
                    v88 = vabds_f32(v81, v80);
                    v89 = fabsf(v81);
                    v90 = fabsf(v80);
                    if (v89 >= v90)
                      v90 = v89;
                    v91 = v90 >= 1.0 ? v90 * 0.00000011921 : 0.00000011921;
                    if (v88 > v91)
                      goto LABEL_1016;
                  }
                  if (v82 < v79)
                  {
                    if ((LODWORD(v79) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v82) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                      goto LABEL_1016;
                    v92 = vabds_f32(v79, v82);
                    v93 = fabsf(v79);
                    v94 = fabsf(v82);
                    if (v93 < v94)
                      v93 = v94;
                    v95 = v93 >= 1.0 ? v93 * 0.00000011921 : 0.00000011921;
                    if (v92 > v95)
                      goto LABEL_1016;
                  }
                  v83 = v54 <= v53 ? v54 : v53;
                  v84 = v54 <= v53 ? v53 : v54;
                  v85 = v60 <= v57 ? v60 : v57;
                  v86 = v60 <= v57 ? v57 : v60;
                  if (v84 < v85)
                  {
                    if ((LODWORD(v85) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v84) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                      goto LABEL_1016;
                    v96 = vabds_f32(v85, v84);
                    v97 = fabsf(v85);
                    v98 = fabsf(v84);
                    if (v97 >= v98)
                      v98 = v97;
                    v99 = v98 >= 1.0 ? v98 * 0.00000011921 : 0.00000011921;
                    if (v96 > v99)
                      goto LABEL_1016;
                  }
                  if (v86 < v83)
                  {
                    if ((LODWORD(v83) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v86) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                      goto LABEL_1016;
                    v100 = vabds_f32(v83, v86);
                    v101 = fabsf(v83);
                    v102 = fabsf(v86);
                    if (v101 < v102)
                      v101 = v102;
                    v103 = v101 >= 1.0 ? v101 * 0.00000011921 : 0.00000011921;
                    if (v100 > v103)
                      goto LABEL_1016;
                  }
                  v385 = v47;
                  v386 = v39;
                  *(_QWORD *)v454 = 0x3FF0000000000000;
                  v87 = sub_2233DB7C4(v34, v39, v416, (double *)v454);
                  if (v87 == 0.0)
                  {
LABEL_196:
                    v381 = 0;
                  }
                  else if ((*(_QWORD *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v87 > 0.0)
                      v106 = 1;
                    else
                      v106 = -1;
                    v381 = v106;
                  }
                  else
                  {
                    v104 = fabs(v87);
                    if (v87 > 0.0)
                      v105 = 1;
                    else
                      v105 = -1;
                    v381 = v105;
                    if (v104 <= *(double *)v454 * 2.22044605e-16)
                      goto LABEL_196;
                  }
                  *(_QWORD *)v454 = 0x3FF0000000000000;
                  v107 = sub_2233DB7C4(v34, v386, v51, (double *)v454);
                  if (v107 == 0.0)
                  {
LABEL_244:
                    v108 = 0;
                    goto LABEL_245;
                  }
                  if ((*(_QWORD *)&v107 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v107 > 0.0)
                      v108 = 1;
                    else
                      v108 = -1;
                    if (v108 * v381 == 1)
                      goto LABEL_253;
                  }
                  else
                  {
                    v111 = fabs(v107);
                    if (v107 > 0.0)
                      v108 = 1;
                    else
                      v108 = -1;
                    if (v111 <= *(double *)v454 * 2.22044605e-16)
                      goto LABEL_244;
                    if (v108 * v381 == 1)
                    {
LABEL_253:
                      memset(&v454[2], 0, 40);
                      v443 = 0;
                      *(_OWORD *)v446 = xmmword_2245F4CF0;
                      *(_QWORD *)&v446[16] = 1065353216;
                      v447 = 0;
                      *(_OWORD *)v448 = xmmword_2245F4CF0;
                      *(_QWORD *)&v448[16] = 1065353216;
                      v449 = 0;
                      v450 = 100;
                      *(_OWORD *)v451 = *(_OWORD *)v454;
                      *(_OWORD *)&v451[16] = *(_OWORD *)&v454[16];
                      *(_OWORD *)&v451[26] = *(_OWORD *)&v454[26];
                      goto LABEL_254;
                    }
                  }
LABEL_245:
                  *(_QWORD *)v454 = 0x3FF0000000000000;
                  v109 = sub_2233DB7C4(v50, v51, v34, (double *)v454);
                  if (v109 == 0.0)
                  {
LABEL_246:
                    v110 = 0;
                  }
                  else if ((*(_QWORD *)&v109 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v109 > 0.0)
                      v110 = 1;
                    else
                      v110 = -1;
                  }
                  else
                  {
                    v112 = fabs(v109);
                    if (v109 > 0.0)
                      v110 = 1;
                    else
                      v110 = -1;
                    if (v112 <= *(double *)v454 * 2.22044605e-16)
                      goto LABEL_246;
                  }
                  *(_QWORD *)v454 = 0x3FF0000000000000;
                  v113 = sub_2233DB7C4(v50, v51, v386, (double *)v454);
                  v39 = v386;
                  if (v113 == 0.0)
                  {
LABEL_270:
                    v114 = 0;
                    v47 = v385;
                    goto LABEL_271;
                  }
                  if ((*(_QWORD *)&v113 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v113 > 0.0)
                      v114 = 1;
                    else
                      v114 = 0xFFFFFFFFLL;
                    v47 = v385;
                    if ((_DWORD)v114 * v110 == 1)
                      goto LABEL_290;
                  }
                  else
                  {
                    v131 = fabs(v113);
                    if (v113 > 0.0)
                      v114 = 1;
                    else
                      v114 = 0xFFFFFFFFLL;
                    if (v131 <= *(double *)v454 * 2.22044605e-16)
                      goto LABEL_270;
                    v47 = v385;
                    if ((_DWORD)v114 * v110 == 1)
                    {
LABEL_290:
                      memset(&v454[2], 0, 40);
                      v443 = 0;
                      *(_OWORD *)v446 = xmmword_2245F4CF0;
                      *(_QWORD *)&v446[16] = 1065353216;
                      v447 = 0;
                      *(_OWORD *)v448 = xmmword_2245F4CF0;
                      *(_QWORD *)&v448[16] = 1065353216;
                      v449 = 0;
                      v450 = 100;
                      *(_OWORD *)v451 = *(_OWORD *)v454;
                      *(_OWORD *)&v451[16] = *(_OWORD *)&v454[16];
                      *(_OWORD *)&v451[26] = *(_OWORD *)&v454[26];
                      goto LABEL_382;
                    }
                  }
LABEL_271:
                  v115 = v110 | (unint64_t)(v114 << 32);
                  v117 = *v50;
                  v116 = v50[1];
                  v118 = *v51 - *v50;
                  v120 = *v34;
                  v119 = v34[1];
                  v121 = *v386 - *v34;
                  v122 = v51[1] - v116;
                  v123 = v386[1] - v119;
                  if (v108 | v381 | v110 | v114)
                  {
                    v124 = (float)(v118 * v123) - (float)(v121 * v122);
                    v125 = fabsf(v118);
                    v126 = fabsf(v122);
                    v127 = fabsf(v121);
                    v128 = fabsf(v123);
                    if (v125 >= v126)
                      v129 = v125;
                    else
                      v129 = v126;
                    if (v129 < v127)
                      v129 = v127;
                    if (v129 < v128)
                      v129 = v128;
                    if (v129 < 1.0)
                      v129 = 1.0;
                    if (v124 != 0.0)
                    {
                      v163 = (float)(v121 * v122) - (float)(v118 * v123);
                      if (COERCE_UNSIGNED_INT(fabs((float)(v118 * v123) - (float)(v121 * v122))) > 0x7F7FFFFF)
                      {
                        if (v163 == 0.0)
                          goto LABEL_282;
                      }
                      else if (v163 == 0.0 || fabsf(v124) <= (float)(v129 * 0.00000011921))
                      {
                        goto LABEL_282;
                      }
                      if (COERCE_UNSIGNED_INT(fabs((float)(v121 * v122) - (float)(v118 * v123))) <= 0x7F7FFFFF
                        && fabsf(v163) <= (float)(v129 * 0.00000011921))
                      {
                        goto LABEL_282;
                      }
                      v137 = -(float)((float)(v121 * (float)(v116 - v119)) - (float)((float)(v117 - v120) * v123));
                      v136 = -v124;
                      if (v124 >= 0.0)
                      {
                        v136 = (float)(v118 * v123) - (float)(v121 * v122);
                        v137 = (float)(v121 * (float)(v116 - v119)) - (float)((float)(v117 - v120) * v123);
                      }
                      v133 = 0.0;
                      v135 = 0.0;
                      if (v136 != 0.0)
                        v135 = (float)(v137 * 1000000.0) / v136;
                      v134 = (float)(v118 * (float)(v119 - v116)) - (float)((float)(v120 - v117) * v122);
                      v132 = -v163;
                      if (v163 < 0.0)
                        v134 = -v134;
                      else
                        v132 = v163;
                      if (v132 != 0.0)
                        v133 = (float)(v134 * 1000000.0) / v132;
                      goto LABEL_295;
                    }
LABEL_282:
                    v381 = 0;
                    v108 = 0;
                    v115 = 0;
                    if (v56)
                      goto LABEL_283;
LABEL_292:
                    if (v69)
                    {
                      LOBYTE(v130) = v125 >= v126;
                      goto LABEL_339;
                    }
                    if (v127 < v125)
                      v125 = v127;
                    if (v128 < v126)
                      v126 = v128;
                    if (v125 == v126)
                    {
                      if (v125 <= 0.0)
                        v130 = 1;
                      else
                        v130 = 257;
                      if ((v130 & 0x100) != 0)
                        goto LABEL_339;
                      v132 = 1.0;
                      v133 = 0.0;
                      v134 = 0.0;
                      v135 = 0.0;
                      v136 = 1.0;
                      v137 = 0.0;
                      v47 = v385;
LABEL_295:
                      v138 = v52 - v55;
                      v139 = v58 - v59;
                      v140 = v53 - v54;
                      v141 = v57 - v60;
                      v142 = (float)(v138 * v138) + (float)(v140 * v140);
                      v143 = v142;
                      v144 = (float)(v139 * v139) + (float)(v141 * v141);
                      v145 = v144;
                      if (v142 >= v144)
                        v146 = v142;
                      else
                        v146 = v144;
                      if (v146 <= 0.0)
                        goto LABEL_306;
                      v147 = vabds_f32(0.5, v133 / 1000000.0);
                      v148 = v147 + v147;
                      v149 = vabds_f32(0.5, v135 / 1000000.0);
                      v150 = v149 + v149;
                      v151 = 1.0 - v143 / v146;
                      v152 = 1.0 - v145 / v146;
                      v153 = v150 <= 1.0 ? v150 * 5.0 : 5.0;
                      v154 = v151 + v153;
                      v155 = v148 <= 1.0 ? v148 * 5.0 : 5.0;
                      if (v154 > v152 + v155)
                      {
LABEL_306:
                        v156 = (float)((float)(v138 * v137) / v136) + *v424;
                        v157 = (float)((float)(v140 * v137) / v136) + v424[1];
                        v158 = HIDWORD(v115);
                        if (v381 | v115)
                          goto LABEL_307;
LABEL_343:
                        v159 = -1;
                        if ((_DWORD)v158 == 1)
                          v160 = -1;
                        else
                          v160 = 1;
                        if ((_DWORD)v158 == 1)
                          v161 = 1;
                        else
                          v161 = -1;
                        v162 = 102;
LABEL_350:
                        v164 = -1;
LABEL_381:
                        v443 = 1;
                        v444 = (uint64_t *)__PAIR64__(LODWORD(v157), LODWORD(v156));
                        *(float *)v446 = v137;
                        *(float *)&v446[4] = v136;
                        *(float *)&v446[8] = v135;
                        *(float *)&v446[12] = v134;
                        *(float *)&v446[16] = v132;
                        *(float *)&v446[20] = v133;
                        v447 = 1;
                        *(_OWORD *)v448 = xmmword_2245F4CF0;
                        *(_QWORD *)&v448[16] = 1065353216;
                        v449 = 0;
                        v450 = v162;
                        *(_DWORD *)&v451[2] = v159;
                        *(_DWORD *)&v451[6] = v164;
                        *(_DWORD *)&v451[10] = v160;
                        *(_DWORD *)&v451[14] = v161;
                        *(_DWORD *)&v451[18] = v381;
                        *(_DWORD *)&v451[22] = v108;
                        *(_QWORD *)&v451[26] = v115;
                        *(_DWORD *)&v451[34] = v159;
                        *(_DWORD *)&v451[38] = v164;
LABEL_382:
                        v452 = a8;
                        v453 = a9;
                        v424 = (float *)v398;
                        v433 = v406;
                        v434 = *(_OWORD *)v407;
                        v435 = *(_QWORD *)&v407[16];
                        v429 = v402;
                        v430 = v403;
                        v431 = v404;
                        v432 = v405;
                        v425 = v399;
                        v426 = v400;
                        v427 = *(_OWORD *)v401;
                        v428 = *(_OWORD *)&v401[16];
                        switch((char)v450)
                        {
                          case '0':
                          case 'd':
                            goto LABEL_1016;
                          case 'a':
                          case 'f':
                          case 's':
                            sub_223EAEF90(&v414, (uint64_t)v408, (uint64_t *)&v398, (uint64_t)v436, a10, *(int32x4_t *)&v401[16]);
                            goto LABEL_1014;
                          case 'c':
                            v169 = sub_223EAEF90(&v414, (uint64_t)v408, (uint64_t *)&v398, (uint64_t)v436, a10, *(int32x4_t *)&v401[16]);
                            v47 = v385;
                            v39 = v386;
                            if ((v169 & 1) != 0)
                              goto LABEL_1016;
                            BYTE12(v430) = 1;
                            if (!HIBYTE(v450))
                            {
                              v193 = *(_DWORD *)&v451[34];
                              if (!*(_DWORD *)&v451[34])
                              {
                                sub_223EB0A60(&v414, (uint64_t)&v424, (float *)&v443, (uint64_t)&v437);
                                v218 = 3;
                                v219 = DWORD2(v426);
                                if ((DWORD2(v426) - 1) >= 2)
                                  goto LABEL_874;
                                goto LABEL_875;
                              }
                              if (vabds_f32(*(float *)&v446[20], *(float *)&v448[20]) >= 50.0)
                              {
                                v196 = *(float *)&v446[20] < *(float *)&v448[20];
                              }
                              else
                              {
                                v194 = *(float *)&v446[12] / *(float *)&v446[16];
                                v195 = *(float *)&v448[12] / *(float *)&v448[16];
                                if ((float)(*(float *)&v446[12] / *(float *)&v446[16]) == (float)(*(float *)&v448[12]
                                                                                                 / *(float *)&v448[16]))
                                {
                                  v196 = 0;
                                }
                                else if (COERCE_UNSIGNED_INT(fabs(*(float *)&v446[12] / *(float *)&v446[16])) > 0x7F7FFFFF
                                       || COERCE_INT(fabs(*(float *)&v448[12] / *(float *)&v448[16])) > 2139095039)
                                {
                                  v196 = 1;
                                }
                                else
                                {
                                  v311 = vabds_f32(v194, v195);
                                  v312 = fabsf(v194);
                                  v313 = fabsf(v195);
                                  if (v312 < v313)
                                    v312 = v313;
                                  if (v312 >= 1.0)
                                    v314 = v312 * 0.00000011921;
                                  else
                                    v314 = 0.00000011921;
                                  v196 = v311 > v314;
                                }
                                if (v194 >= v195)
                                  v196 = 0;
                              }
                              LODWORD(v425) = 5;
                              v424 = (float *)*(&v443 + v196 + 1);
                              v315 = (char *)&v443 + 28 * v196;
                              *((_QWORD *)&v429 + 1) = *((_QWORD *)v315 + 3);
                              LODWORD(v430) = *((_DWORD *)v315 + 8);
                              *(_QWORD *)&v434 = *(_QWORD *)(v315 + 36);
                              DWORD2(v434) = *((_DWORD *)v315 + 11);
                              if (*((_BYTE *)v414 + 97) && v415 + 1 >= *((_QWORD *)v414 + 7))
                              {
                                v320 = 0;
                                v384 = 1;
                              }
                              else
                              {
                                v316 = (uint64_t)v438;
                                v317 = v438[2];
                                v318 = v438[3];
                                if (!*((_BYTE *)v438 + 72))
                                {
                                  sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v318, v318[1]);
                                  *(_QWORD *)(v316 + 64) = **(_QWORD **)(v316 + 32);
                                  *(_BYTE *)(v316 + 72) = 1;
                                }
                                *(_QWORD *)v454 = 0x3FF0000000000000;
                                v319 = sub_2233DB7C4(v317, v318, (float *)(v316 + 64), (double *)v454);
                                if (v319 == 0.0)
                                {
LABEL_782:
                                  v320 = 0;
                                }
                                else if ((*(_QWORD *)&v319 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                {
                                  if (v319 > 0.0)
                                    v320 = 1;
                                  else
                                    v320 = -1;
                                }
                                else
                                {
                                  v321 = fabs(v319);
                                  if (v319 > 0.0)
                                    v320 = 1;
                                  else
                                    v320 = -1;
                                  if (v321 <= *(double *)v454 * 2.22044605e-16)
                                    goto LABEL_782;
                                }
                                v384 = 0;
                              }
                              v332 = (uint64_t)v439;
                              v333 = (float *)v439[2];
                              v334 = (float *)v439[3];
                              if (!*((_BYTE *)v439 + 168))
                              {
                                sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v334, v334[1]);
                                *(_QWORD *)(v332 + 160) = **(_QWORD **)(v332 + 32);
                                *(_BYTE *)(v332 + 168) = 1;
                              }
                              *(_QWORD *)v454 = 0x3FF0000000000000;
                              v335 = sub_2233DB7C4(v333, v334, (float *)(v332 + 160), (double *)v454);
                              if (v335 == 0.0)
                              {
LABEL_836:
                                v336 = 0;
                              }
                              else if ((*(_QWORD *)&v335 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                              {
                                if (v335 > 0.0)
                                  v336 = 1;
                                else
                                  v336 = -1;
                              }
                              else
                              {
                                v337 = fabs(v335);
                                if (v335 > 0.0)
                                  v336 = 1;
                                else
                                  v336 = -1;
                                if (v337 <= *(double *)v454 * 2.22044605e-16)
                                  goto LABEL_836;
                              }
                              if (v193 == 1)
                                v338 = v320;
                              else
                                v338 = v336;
                              if (v338 * v193 == 1)
                                v339 = 1;
                              else
                                v339 = 2;
                              if (v338 * v193 == 1)
                                v340 = 2;
                              else
                                v340 = 1;
                              if (v338)
                                v219 = v339;
                              else
                                v219 = 4;
                              if (v338)
                                v341 = v340;
                              else
                                v341 = 4;
                              DWORD2(v426) = v219;
                              LODWORD(v431) = v341;
                              v342 = v384;
                              if (v320)
                                v342 = 1;
                              if ((v342 & 1) != 0)
                              {
                                v344 = *((float *)&v424 + 1);
                                v343 = *(float *)&v424;
                                v345 = *v417;
                                v346 = v417[1];
                              }
                              else
                              {
                                if (!v421)
                                {
                                  sub_223EB0F70((uint64_t)&v414, (uint64_t)v418, *v417, v417[1]);
                                  v420 = *(_QWORD *)v418[0];
                                  v421 = 1;
                                }
                                v346 = *((float *)&v420 + 1);
                                v345 = *(float *)&v420;
                                v344 = *((float *)&v424 + 1);
                                v343 = *(float *)&v424;
                              }
                              *((float *)&v430 + 1) = (float)((float)(v343 - v345) * (float)(v343 - v345))
                                                    + (float)((float)(v344 - v346) * (float)(v344 - v346));
                              if (v336)
                              {
                                *((float *)&v434 + 3) = (float)((float)(v343 - *v409) * (float)(v343 - *v409))
                                                      + (float)((float)(v344 - v409[1]) * (float)(v344 - v409[1]));
                                v218 = 4;
                                if ((v219 - 1) >= 2)
                                  goto LABEL_874;
LABEL_875:
                                LODWORD(v425) = v218;
                                BYTE12(v430) = v219 != 3;
                                if (v219 != 3)
                                {
LABEL_876:
                                  v347 = v431;
                                  if ((_DWORD)v431 != 3)
                                    goto LABEL_877;
LABEL_881:
                                  v348 = 4;
LABEL_882:
                                  LODWORD(v431) = v348;
                                  goto LABEL_883;
                                }
                              }
                              else
                              {
                                if (!v413)
                                {
                                  sub_223EB11F4((uint64_t)v408, (uint64_t)v410, *v409, v409[1]);
                                  v412 = *(_QWORD *)v410[0];
                                  v413 = 1;
                                }
                                *((float *)&v434 + 3) = (float)((float)(v344 - *((float *)&v412 + 1))
                                                              * (float)(v344 - *((float *)&v412 + 1)))
                                                      + (float)((float)(v343 - *(float *)&v412)
                                                              * (float)(v343 - *(float *)&v412));
                                v218 = 4;
                                if ((v219 - 1) < 2)
                                  goto LABEL_875;
LABEL_874:
                                if ((v431 - 1) <= 1)
                                  goto LABEL_875;
                                BYTE12(v430) = v219 != 3;
                                if (v219 != 3)
                                  goto LABEL_876;
                              }
                              v219 = 4;
                              DWORD2(v426) = 4;
                              v347 = v431;
                              if ((_DWORD)v431 == 3)
                                goto LABEL_881;
LABEL_877:
                              if (v347 == 2)
                              {
                                v348 = 1;
                                goto LABEL_882;
                              }
LABEL_883:
                              if (v193)
                              {
                                if (v219 != 4)
                                  goto LABEL_966;
                              }
                              else if ((v219 - 1) >= 2)
                              {
                                goto LABEL_966;
                              }
                              if (sub_223EB04E4(v436))
                              {
                                LODWORD(v425) = v218;
                                DWORD2(v426) = 3;
                                LODWORD(v431) = 1;
                                *(_QWORD *)v454 = a10;
                                sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                                DWORD2(v426) = 4;
                                *(_QWORD *)v454 = a10;
                                sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                                goto LABEL_1014;
                              }
                              goto LABEL_966;
                            }
                            v170 = sub_223EB04E4(v436);
                            v171 = *(_DWORD *)&v451[34];
                            if (*(_DWORD *)&v451[34] == 1)
                              v172 = v170;
                            else
                              v172 = 0;
                            if (v172 == 1)
                            {
                              BYTE12(v430) = 1;
                              v424 = (float *)v445;
                              *((_QWORD *)&v429 + 1) = *(_QWORD *)v448;
                              LODWORD(v430) = *(_DWORD *)&v448[8];
                              *(_QWORD *)&v434 = *(_QWORD *)&v448[12];
                              DWORD2(v434) = *(_DWORD *)&v448[20];
                              LODWORD(v425) = 4;
                              DWORD2(v426) = 3;
                              LODWORD(v431) = 4;
                              *(_QWORD *)v454 = a10;
                              sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                              DWORD2(v426) = 4;
                              *(_QWORD *)v454 = a10;
                              sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                              v171 = *(_DWORD *)&v451[34];
                            }
                            v460 = v433;
                            v461 = v434;
                            v462 = v435;
                            v456 = v429;
                            v457 = v430;
                            v458 = v431;
                            v459 = v432;
                            *(_OWORD *)&v454[8] = v425;
                            *(_OWORD *)&v454[24] = v426;
                            *(_OWORD *)&v454[40] = v427;
                            v455 = v428;
                            v173 = *(_DWORD *)&v451[38];
                            v39 = v386;
                            if (v171 == 1 && (!*((_BYTE *)v414 + 97) || v415 + 1 < *((_QWORD *)v414 + 7)))
                            {
                              v174 = (uint64_t)v438;
                              v175 = v438[2];
                              v176 = v438[3];
                              if (!*((_BYTE *)v438 + 72))
                              {
                                sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v176, v176[1]);
                                *(_QWORD *)(v174 + 64) = **(_QWORD **)(v174 + 32);
                                *(_BYTE *)(v174 + 72) = 1;
                              }
                              v422.i64[0] = 0x3FF0000000000000;
                              v177 = sub_2233DB7C4(v175, v176, (float *)(v174 + 64), (double *)v422.i64);
                              v39 = v386;
                              if (v177 != 0.0
                                && ((*(_QWORD *)&v177 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
                                 || fabs(v177) > *(double *)v422.i64 * 2.22044605e-16))
                              {
                                if (v177 <= 0.0)
                                  v178 = 1;
                                else
                                  v178 = 2;
                                *(_QWORD *)v454 = v445;
                                *((_QWORD *)&v456 + 1) = *(_QWORD *)v448;
                                LODWORD(v457) = *(_DWORD *)&v448[8];
                                *(_QWORD *)&v461 = *(_QWORD *)&v448[12];
                                DWORD2(v461) = *(_DWORD *)&v448[20];
                                *(_DWORD *)&v454[32] = v178;
                                *(_DWORD *)&v454[8] = 4;
                                BYTE12(v457) = 1;
                                LODWORD(v458) = 4;
                                v422.i64[0] = (uint64_t)a10;
                                sub_223EB02A0((char ***)&v422, (uint64_t)v454);
                                v39 = v386;
                              }
                            }
                            if (v173 == 1)
                            {
                              v349 = (uint64_t)v439;
                              v350 = (float *)v439[2];
                              v351 = (float *)v439[3];
                              if (!*((_BYTE *)v439 + 168))
                              {
                                sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v351, v351[1]);
                                *(_QWORD *)(v349 + 160) = **(_QWORD **)(v349 + 32);
                                *(_BYTE *)(v349 + 168) = 1;
                              }
                              v422.i64[0] = 0x3FF0000000000000;
                              v352 = sub_2233DB7C4(v350, v351, (float *)(v349 + 160), (double *)v422.i64);
                              v39 = v386;
                              if (v352 != 0.0
                                && ((*(_QWORD *)&v352 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
                                 || fabs(v352) > *(double *)v422.i64 * 2.22044605e-16))
                              {
                                if (v352 <= 0.0)
                                {
                                  LODWORD(v458) = 1;
                                  *(_QWORD *)v454 = v444;
                                  *((_QWORD *)&v456 + 1) = *(_QWORD *)v446;
                                  LODWORD(v457) = *(_DWORD *)&v446[8];
                                  *(_QWORD *)&v461 = *(_QWORD *)&v446[12];
                                  DWORD2(v461) = *(_DWORD *)&v446[20];
                                  BYTE12(v457) = 0;
                                  *(_DWORD *)&v454[8] = 4;
                                  *(_DWORD *)&v454[32] = 4;
                                }
                                else
                                {
                                  *(_QWORD *)v454 = v444;
                                  *((_QWORD *)&v456 + 1) = *(_QWORD *)v446;
                                  LODWORD(v457) = *(_DWORD *)&v446[8];
                                  *(_QWORD *)&v461 = *(_QWORD *)&v446[12];
                                  DWORD2(v461) = *(_DWORD *)&v446[20];
                                  BYTE12(v457) = 0;
                                  *(_DWORD *)&v454[8] = 4;
                                  *(_DWORD *)&v454[32] = 4;
                                  LODWORD(v458) = 1;
                                }
                                v422.i64[0] = (uint64_t)a10;
                                sub_223EB02A0((char ***)&v422, (uint64_t)v454);
                                goto LABEL_1014;
                              }
                            }
                            goto LABEL_1015;
                          case 'e':
                            v165 = sub_223EAEF90(&v414, (uint64_t)v408, (uint64_t *)&v398, (uint64_t)v436, a10, *(int32x4_t *)&v401[16]);
                            v47 = v385;
                            v39 = v386;
                            if ((v165 & 1) != 0)
                              goto LABEL_1016;
                            BYTE12(v430) = 1;
                            if (HIBYTE(v450))
                              goto LABEL_1016;
                            sub_223EB0A60(&v414, (uint64_t)&v424, (float *)&v443, (uint64_t)&v437);
                            v166 = DWORD2(v426);
                            if ((DWORD2(v426) - 1) >= 2 && (v431 - 1) > 1)
                            {
                              BYTE12(v430) = DWORD2(v426) != 3;
                              if (DWORD2(v426) != 3)
                              {
LABEL_389:
                                v167 = v431;
                                if ((_DWORD)v431 == 3)
                                  goto LABEL_435;
                                goto LABEL_390;
                              }
                            }
                            else
                            {
                              LODWORD(v425) = 3;
                              BYTE12(v430) = DWORD2(v426) != 3;
                              if (DWORD2(v426) != 3)
                                goto LABEL_389;
                            }
                            v166 = 4;
                            DWORD2(v426) = 4;
                            v167 = v431;
                            if ((_DWORD)v431 == 3)
                            {
LABEL_435:
                              v168 = 4;
                              goto LABEL_436;
                            }
LABEL_390:
                            if (v167 != 2)
                              goto LABEL_437;
                            v168 = 1;
LABEL_436:
                            LODWORD(v431) = v168;
LABEL_437:
                            if ((v166 - 1) > 1 || !sub_223EB04E4(v436))
                              goto LABEL_966;
                            LODWORD(v425) = 3;
                            DWORD2(v426) = 3;
                            LODWORD(v431) = 1;
                            *(_QWORD *)v454 = a10;
                            sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                            DWORD2(v426) = 4;
                            *(_QWORD *)v454 = a10;
                            sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                            goto LABEL_1014;
                          case 'i':
                            v424 = (float *)v444;
                            *((_QWORD *)&v429 + 1) = *(_QWORD *)v446;
                            LODWORD(v430) = *(_DWORD *)&v446[8];
                            *(_QWORD *)&v434 = *(_QWORD *)&v446[12];
                            DWORD2(v434) = *(_DWORD *)&v446[20];
                            v188 = *(_DWORD *)&v451[26] == 1;
                            *((_DWORD *)&v426 + 18 * (*(_DWORD *)&v451[26] != 1) + 2) = 1;
                            *((_DWORD *)&v426 + 18 * v188 + 2) = 2;
                            LODWORD(v425) = 2;
                            LODWORD(v431) = 1;
                            *(_QWORD *)v454 = a10;
                            sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                            goto LABEL_1014;
                          case 'm':
                            v179 = sub_223EAF8BC(&v414, (uint64_t)v408, (uint64_t *)&v398, (uint64_t)v436, a10, *(int32x4_t *)&v401[16]);
                            v47 = v385;
                            v39 = v386;
                            if (v179)
                              goto LABEL_1016;
                            LODWORD(v425) = 4;
                            v424 = (float *)v444;
                            if (*(_DWORD *)&v451[38] != 1)
                            {
                              if (*(_DWORD *)&v451[34] == -1)
                              {
                                *((_QWORD *)&v429 + 1) = 0x3F80000000000000;
                                LODWORD(v430) = 0;
                                if (*(_DWORD *)&v451[38] == -1)
                                  goto LABEL_461;
                              }
                              else
                              {
                                if (*(_DWORD *)&v451[34] == 1)
                                {
                                  __asm { FMOV            V0.2S, #1.0 }
                                  *((_QWORD *)&v429 + 1) = _D0;
                                  LODWORD(v430) = 1232348160;
                                  if (*(_DWORD *)&v451[38] != -1)
                                    goto LABEL_425;
LABEL_461:
                                  *(_QWORD *)&v434 = 0x3F80000000000000;
                                  DWORD2(v434) = 0;
                                  v190 = v414;
                                  if (!*((_BYTE *)v414 + 97))
                                  {
LABEL_462:
                                    v191 = *(_DWORD *)&v451[18];
                                    goto LABEL_463;
                                  }
LABEL_426:
                                  v191 = *(_DWORD *)&v451[18];
                                  if (v415 + 1 >= *((_QWORD *)v190 + 7))
                                  {
                                    if (*(_DWORD *)&v451[18])
                                    {
                                      v192 = 1;
                                      LODWORD(v431) = 1;
                                      goto LABEL_1005;
                                    }
                                    v209 = 0;
LABEL_594:
                                    v246 = v209 != -1;
                                    v247 = v209 == -1;
                                    goto LABEL_595;
                                  }
LABEL_463:
                                  v205 = (uint64_t)v442;
                                  v207 = (float *)v441[2];
                                  v206 = (float *)v441[3];
                                  if (!*((_BYTE *)v442 + 72))
                                  {
                                    sub_223EB0F70((uint64_t)v442, (uint64_t)(v442 + 4), *v442[3], v442[3][1]);
                                    *(_QWORD *)(v205 + 64) = **(_QWORD **)(v205 + 32);
                                    *(_BYTE *)(v205 + 72) = 1;
                                  }
                                  *(_QWORD *)v454 = 0x3FF0000000000000;
                                  v208 = sub_2233DB7C4(v207, v206, (float *)(v205 + 64), (double *)v454);
                                  if (v208 == 0.0)
                                  {
LABEL_466:
                                    v209 = 0;
                                  }
                                  else if ((*(_QWORD *)&v208 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                  {
                                    if (v208 > 0.0)
                                      v209 = 1;
                                    else
                                      v209 = -1;
                                  }
                                  else
                                  {
                                    v220 = fabs(v208);
                                    if (v208 > 0.0)
                                      v209 = 1;
                                    else
                                      v209 = -1;
                                    if (v220 <= *(double *)v454 * 2.22044605e-16)
                                      goto LABEL_466;
                                  }
                                  if (!(v191 + v209))
                                    goto LABEL_594;
                                  v256 = (uint64_t)v442;
                                  v257 = v442[2];
                                  v258 = v442[3];
                                  if (!*((_BYTE *)v442 + 72))
                                  {
                                    sub_223EB0F70((uint64_t)v442, (uint64_t)(v442 + 4), *v258, v258[1]);
                                    *(_QWORD *)(v256 + 64) = **(_QWORD **)(v256 + 32);
                                    *(_BYTE *)(v256 + 72) = 1;
                                  }
                                  *(_QWORD *)v454 = 0x3FF0000000000000;
                                  v259 = sub_2233DB7C4(v257, v258, (float *)(v256 + 64), (double *)v454);
                                  if (v259 == 0.0)
                                  {
LABEL_583:
                                    v260 = 0;
                                  }
                                  else if ((*(_QWORD *)&v259 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                  {
                                    if (v259 > 0.0)
                                      v260 = 1;
                                    else
                                      v260 = -1;
                                  }
                                  else
                                  {
                                    v261 = fabs(v259);
                                    if (v259 > 0.0)
                                      v260 = 1;
                                    else
                                      v260 = -1;
                                    if (v261 <= *(double *)v454 * 2.22044605e-16)
                                      goto LABEL_583;
                                  }
                                  v322 = (uint64_t)v442;
                                  v323 = v442[3];
                                  if (!*((_BYTE *)v442 + 72))
                                  {
                                    sub_223EB0F70((uint64_t)v442, (uint64_t)(v442 + 4), *v323, v323[1]);
                                    *(_QWORD *)(v322 + 64) = **(_QWORD **)(v322 + 32);
                                    *(_BYTE *)(v322 + 72) = 1;
                                  }
                                  v324 = (float *)v441[3];
                                  *(_QWORD *)v454 = 0x3FF0000000000000;
                                  v325 = sub_2233DB7C4(v323, (float *)(v322 + 64), v324, (double *)v454);
                                  if (v325 == 0.0)
                                  {
LABEL_796:
                                    v326 = 0;
                                  }
                                  else if ((*(_QWORD *)&v325 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                  {
                                    if (v325 > 0.0)
                                      v326 = 1;
                                    else
                                      v326 = -1;
                                  }
                                  else
                                  {
                                    v327 = fabs(v325);
                                    if (v325 > 0.0)
                                      v326 = 1;
                                    else
                                      v326 = -1;
                                    if (v327 <= *(double *)v454 * 2.22044605e-16)
                                      goto LABEL_796;
                                  }
                                  if ((v209 & v191) != 0xFFFFFFFF || v260 != 1)
                                  {
                                    if (v191 == 1 && v209 == 1 && v260 == -1)
                                    {
                                      if (v326 == -1)
                                        v263 = 1;
                                      else
                                        v263 = 3;
                                      v192 = 1;
                                      DWORD2(v426) = v263;
                                      LODWORD(v431) = 1;
                                      BYTE4(v425) = 1;
LABEL_1004:
                                      if (v263 == 3)
LABEL_1005:
                                        DWORD2(v426) = 4;
                                      if (v192 != 2)
                                      {
                                        if (v192 != 3)
                                          goto LABEL_1011;
LABEL_1008:
                                        v358 = 4;
                                        goto LABEL_1010;
                                      }
                                      goto LABEL_1009;
                                    }
                                    if (v191 == v209 && v191 == v260)
                                    {
                                      v328 = (v260 == 1) ^ (v326 != 0);
                                      if (v326 * v191 == -1)
                                      {
                                        v329 = sub_223EB17C0((float *)v441[2], (float *)v441[3], v442[3]);
                                        if (sub_223EB184C((uint64_t)&v440) * v329 == 1
                                          && sub_223EB1724((float *)v441[3], v442[2], v442[3]) * v326 == -1)
                                        {
                                          v328 ^= 1u;
                                        }
                                      }
                                      *((_DWORD *)&v426 + 18 * v328 + 2) = 1;
                                      v330 = v328 ^ 1;
                                      goto LABEL_1003;
                                    }
                                    if (!v209)
                                    {
                                      if (v191 == v260)
                                      {
LABEL_972:
                                        v358 = 4;
                                        DWORD2(v426) = 4;
                                        goto LABEL_1010;
                                      }
                                      if (v260 == 1)
                                        v192 = 2;
                                      else
                                        v192 = 1;
                                      LODWORD(v431) = v192;
                                      goto LABEL_1005;
                                    }
LABEL_907:
                                    LODWORD(v425) = 8;
                                    v192 = v431;
                                    v263 = DWORD2(v426);
                                    if ((_DWORD)v431 != 3)
                                      goto LABEL_1004;
LABEL_596:
                                    BYTE12(v430) = 1;
                                    if (v263 != 3)
                                      goto LABEL_1008;
                                    if ((_DWORD)v425 == 3)
                                      v264 = 6;
                                    else
                                      v264 = 5;
                                    LODWORD(v425) = v264;
                                    v192 = 3;
                                    goto LABEL_1005;
                                  }
                                  goto LABEL_808;
                                }
                                *((_QWORD *)&v429 + 1) = *(_QWORD *)v446;
                                LODWORD(v430) = *(_DWORD *)&v446[8];
                                if (*(_DWORD *)&v451[38] == -1)
                                  goto LABEL_461;
                              }
LABEL_425:
                              *(_QWORD *)&v434 = *(_QWORD *)&v446[12];
                              DWORD2(v434) = *(_DWORD *)&v446[20];
                              v190 = v414;
                              if (!*((_BYTE *)v414 + 97))
                                goto LABEL_462;
                              goto LABEL_426;
                            }
                            if (*(_DWORD *)&v451[34] == -1)
                            {
                              *((_QWORD *)&v429 + 1) = 0x3F80000000000000;
                              LODWORD(v430) = 0;
                            }
                            else if (*(_DWORD *)&v451[34] == 1)
                            {
                              __asm { FMOV            V0.2S, #1.0 }
                              *((_QWORD *)&v429 + 1) = _D0;
                              LODWORD(v430) = 1232348160;
                            }
                            else
                            {
                              *((_QWORD *)&v429 + 1) = *(_QWORD *)v446;
                              LODWORD(v430) = *(_DWORD *)&v446[8];
                            }
                            __asm { FMOV            V0.2S, #1.0 }
                            *(_QWORD *)&v434 = _D0;
                            DWORD2(v434) = 1232348160;
                            if (*((_BYTE *)v414 + 97))
                            {
                              v382 = v415 + 1 >= *((_QWORD *)v414 + 7);
                              v211 = *(_DWORD *)&v451[26];
                              v212 = (uint64_t)v439;
                              v214 = v438[2];
                              v213 = v438[3];
                              if (*((_BYTE *)v439 + 168))
                                goto LABEL_471;
LABEL_470:
                              sub_223EB11F4(v212, v212 + 32, **(float **)(v212 + 24), *(float *)(*(_QWORD *)(v212 + 24) + 4));
                              *(_QWORD *)(v212 + 160) = **(_QWORD **)(v212 + 32);
                              *(_BYTE *)(v212 + 168) = 1;
                              goto LABEL_471;
                            }
                            v382 = 0;
                            v211 = *(_DWORD *)&v451[26];
                            v212 = (uint64_t)v439;
                            v214 = v438[2];
                            v213 = v438[3];
                            if (!*((_BYTE *)v439 + 168))
                              goto LABEL_470;
LABEL_471:
                            *(_QWORD *)v454 = 0x3FF0000000000000;
                            v215 = sub_2233DB7C4(v214, v213, (float *)(v212 + 160), (double *)v454);
                            if (v215 == 0.0)
                              goto LABEL_472;
                            if ((*(_QWORD *)&v215 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                            {
                              if (v215 > 0.0)
                                v216 = 1;
                              else
                                v216 = -1;
                            }
                            else
                            {
                              v217 = fabs(v215);
                              if (v215 > 0.0)
                                v216 = 1;
                              else
                                v216 = -1;
                              if (v217 <= *(double *)v454 * 2.22044605e-16)
LABEL_472:
                                v216 = 0;
                            }
                            if (!(v211 + v216))
                            {
                              v246 = v216 == -1;
                              v247 = v216 != -1;
LABEL_595:
                              *((_DWORD *)&v426 + 18 * v247 + 2) = 1;
                              *((_DWORD *)&v426 + 18 * v246 + 2) = 2;
                              v192 = v431;
                              v263 = DWORD2(v426);
                              if ((_DWORD)v431 != 3)
                                goto LABEL_1004;
                              goto LABEL_596;
                            }
                            v248 = (uint64_t)v439;
                            v249 = (float *)v439[2];
                            v250 = (float *)v439[3];
                            if (!*((_BYTE *)v439 + 168))
                            {
                              sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v250, v250[1]);
                              *(_QWORD *)(v248 + 160) = **(_QWORD **)(v248 + 32);
                              *(_BYTE *)(v248 + 168) = 1;
                            }
                            *(_QWORD *)v454 = 0x3FF0000000000000;
                            v251 = sub_2233DB7C4(v249, v250, (float *)(v248 + 160), (double *)v454);
                            if (v251 == 0.0)
                            {
LABEL_559:
                              v252 = 0;
                              goto LABEL_720;
                            }
                            if ((*(_QWORD *)&v251 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                            {
                              if (v251 > 0.0)
                                v252 = 1;
                              else
                                v252 = -1;
                            }
                            else
                            {
                              v253 = fabs(v251);
                              if (v251 > 0.0)
                                v252 = 1;
                              else
                                v252 = -1;
                              if (v253 <= *(double *)v454 * 2.22044605e-16)
                                goto LABEL_559;
                            }
LABEL_720:
                            v298 = (uint64_t)v439;
                            v299 = (float *)v439[3];
                            if (!*((_BYTE *)v439 + 168))
                            {
                              sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v299, v299[1]);
                              *(_QWORD *)(v298 + 160) = **(_QWORD **)(v298 + 32);
                              *(_BYTE *)(v298 + 168) = 1;
                            }
                            v300 = v438[3];
                            *(_QWORD *)v454 = 0x3FF0000000000000;
                            v301 = sub_2233DB7C4(v299, (float *)(v298 + 160), v300, (double *)v454);
                            if (v301 == 0.0)
                            {
LABEL_723:
                              v302 = 0;
                              goto LABEL_733;
                            }
                            if ((*(_QWORD *)&v301 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                            {
                              if (v301 > 0.0)
                                v302 = 1;
                              else
                                v302 = -1;
                            }
                            else
                            {
                              v303 = fabs(v301);
                              if (v301 > 0.0)
                                v302 = 1;
                              else
                                v302 = -1;
                              if (v303 <= *(double *)v454 * 2.22044605e-16)
                                goto LABEL_723;
                            }
LABEL_733:
                            if ((v216 & v211) != 0xFFFFFFFF || v252 != 1)
                            {
                              if (v211 == 1 && v216 == 1 && v252 == -1)
                              {
                                if (v302 == -1)
                                  v192 = 1;
                                else
                                  v192 = 3;
                                DWORD2(v426) = 1;
                                LODWORD(v431) = v192;
                                BYTE4(v425) = 1;
                                v263 = 1;
                                if (v192 != 3)
                                  goto LABEL_1004;
                                goto LABEL_596;
                              }
                              if (v211 != v216 || v211 != v252)
                              {
                                if (!v216)
                                {
                                  if (v211 == v252)
                                    goto LABEL_972;
                                  if (v252 == 1)
                                    v331 = 2;
                                  else
                                    v331 = 1;
                                  DWORD2(v426) = v331;
                                  BYTE12(v430) = 1;
                                  goto LABEL_1008;
                                }
                                goto LABEL_907;
                              }
                              v304 = (v252 == 1) ^ (v302 == 0);
                              v305 = v382;
                              if (v302 * v211 != -1)
                                v305 = 1;
                              if ((v305 & 1) == 0)
                              {
                                v306 = v438[2];
                                v307 = v438[3];
                                v308 = (float *)v439[3];
                                *(_QWORD *)v454 = 0x3FF0000000000000;
                                v309 = sub_2233DB7C4(v306, v307, v308, (double *)v454);
                                if (v309 == 0.0)
                                  goto LABEL_749;
                                if ((*(_QWORD *)&v309 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                {
                                  if (v309 > 0.0)
                                    v310 = 1;
                                  else
                                    v310 = -1;
                                }
                                else
                                {
                                  v359 = fabs(v309);
                                  if (v309 > 0.0)
                                    v310 = 1;
                                  else
                                    v310 = -1;
                                  if (v359 <= *(double *)v454 * 2.22044605e-16)
LABEL_749:
                                    v310 = 0;
                                }
                                v360 = (uint64_t)v438;
                                v361 = v438[3];
                                if (!*((_BYTE *)v438 + 72))
                                {
                                  sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v361, v361[1]);
                                  *(_QWORD *)(v360 + 64) = **(_QWORD **)(v360 + 32);
                                  *(_BYTE *)(v360 + 72) = 1;
                                }
                                v362 = (float *)v439[3];
                                *(_QWORD *)v454 = 0x3FF0000000000000;
                                v363 = sub_2233DB7C4(v361, (float *)(v360 + 64), v362, (double *)v454);
                                if (v363 == 0.0)
                                {
LABEL_989:
                                  v364 = 0;
                                }
                                else if ((*(_QWORD *)&v363 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                {
                                  if (v363 > 0.0)
                                    v364 = 1;
                                  else
                                    v364 = -1;
                                }
                                else
                                {
                                  v365 = fabs(v363);
                                  if (v363 > 0.0)
                                    v364 = 1;
                                  else
                                    v364 = -1;
                                  if (v365 <= *(double *)v454 * 2.22044605e-16)
                                    goto LABEL_989;
                                }
                                if (v364 * v310 == 1
                                  && sub_223EB1724(v438[3], (float *)v439[2], (float *)v439[3]) * v302 == -1)
                                {
                                  v304 ^= 1u;
                                }
                              }
                              *((_DWORD *)&v426 + 18 * v304 + 2) = 1;
                              v330 = v304 ^ 1;
LABEL_1003:
                              *((_DWORD *)&v426 + 18 * v330 + 2) = 2;
                              BYTE4(v425) = 1;
                              v192 = v431;
                              v263 = DWORD2(v426);
                              if ((_DWORD)v431 != 3)
                                goto LABEL_1004;
                              goto LABEL_596;
                            }
LABEL_808:
                            DWORD2(v426) = 2;
                            LODWORD(v431) = 2;
                            BYTE4(v425) = 1;
LABEL_1009:
                            v358 = 1;
LABEL_1010:
                            LODWORD(v431) = v358;
LABEL_1011:
                            if ((_DWORD)v425 == 8)
                            {
                              LODWORD(v425) = 4;
                              DWORD2(v426) = 1;
                              LODWORD(v431) = 1;
                            }
                            sub_223EAFE20((_DWORD *)&v426 + 2, (uint64_t)v436);
                            *(_QWORD *)v454 = a10;
                            sub_223EB02A0((char ***)v454, (uint64_t)&v424);
LABEL_1014:
                            v39 = v386;
LABEL_1015:
                            v47 = v385;
LABEL_1016:
                            v366 = v47 + 1;
                            if (v47 + 1 >= v12)
                            {
                              v367 = v395;
                              v34 = v396;
                              v13 = v387;
                              v31 = -v371;
                              if (v47 < v12)
                                v34 = &v397[2 * (v366 % v12)];
                            }
                            else
                            {
                              v34 += 2;
                              v13 = v387;
                              v31 = -v371;
                              v367 = v395;
                            }
                            if (v47 + 2 >= v12)
                            {
                              v39 = v396;
                              if (v47 + 1 < v12)
                                v39 = &v397[2 * ((v47 + 2) % v12)];
                            }
                            else
                            {
                              v39 += 2;
                            }
                            v368 = v45 + 1;
                            if (v45 + 1 < v12)
                            {
                              v48 = v367 + 2;
                            }
                            else
                            {
                              v48 = v396;
                              if (v45 < v12)
                                v48 = &v397[2 * (v368 % v12)];
                            }
                            v46 = v397;
                            if (v45)
                              v46 = v390;
                            if (v368 == v13)
                            {
                              v45 = v45 != 0;
                            }
                            else
                            {
                              v46 = v48;
                              ++v45;
                            }
                            ++v33;
                            ++v47;
                            if (v393 == v366)
                              goto LABEL_35;
                            continue;
                          case 't':
                            v184 = sub_223EAF8BC(&v414, (uint64_t)v408, (uint64_t *)&v398, (uint64_t)v436, a10, *(int32x4_t *)&v401[16]);
                            v47 = v385;
                            v39 = v386;
                            if (v184)
                              goto LABEL_1016;
                            LODWORD(v425) = 3;
                            v424 = (float *)v444;
                            if (*(_DWORD *)&v451[34] == -1)
                            {
                              *((_QWORD *)&v429 + 1) = 0x3F80000000000000;
                              LODWORD(v430) = 0;
                              v186 = *(_DWORD *)&v451[38];
                              if (*(_DWORD *)&v451[38] == 1)
                                goto LABEL_441;
                            }
                            else if (*(_DWORD *)&v451[34] == 1)
                            {
                              __asm { FMOV            V0.2S, #1.0 }
                              *((_QWORD *)&v429 + 1) = _D0;
                              LODWORD(v430) = 1232348160;
                              v186 = *(_DWORD *)&v451[38];
                              if (*(_DWORD *)&v451[38] == 1)
                                goto LABEL_441;
                            }
                            else
                            {
                              *((_QWORD *)&v429 + 1) = *(_QWORD *)v446;
                              LODWORD(v430) = *(_DWORD *)&v446[8];
                              v186 = *(_DWORD *)&v451[38];
                              if (*(_DWORD *)&v451[38] == 1)
                              {
LABEL_441:
                                __asm { FMOV            V0.2S, #1.0 }
                                *(_QWORD *)&v434 = _D0;
                                DWORD2(v434) = 1232348160;
                                v187 = v414;
                                if (!*((_BYTE *)v414 + 97))
                                  goto LABEL_447;
                                goto LABEL_446;
                              }
                            }
                            if (v186 == -1)
                            {
                              *(_QWORD *)&v434 = 0x3F80000000000000;
                              DWORD2(v434) = 0;
                              v187 = v414;
                              if (!*((_BYTE *)v414 + 97))
                                goto LABEL_447;
                            }
                            else
                            {
                              *(_QWORD *)&v434 = *(_QWORD *)&v446[12];
                              DWORD2(v434) = *(_DWORD *)&v446[20];
                              v187 = v414;
                              if (!*((_BYTE *)v414 + 97))
                                goto LABEL_447;
                            }
LABEL_446:
                            if (v415 + 1 >= *((_QWORD *)v187 + 7))
                            {
                              v370 = 0;
                              v202 = 1;
                              goto LABEL_496;
                            }
LABEL_447:
                            v198 = (uint64_t)v438;
                            v200 = (float *)v439[2];
                            v199 = (float *)v439[3];
                            if (!*((_BYTE *)v438 + 72))
                            {
                              sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v438[3], v438[3][1]);
                              *(_QWORD *)(v198 + 64) = **(_QWORD **)(v198 + 32);
                              *(_BYTE *)(v198 + 72) = 1;
                            }
                            *(_QWORD *)v454 = 0x3FF0000000000000;
                            v201 = sub_2233DB7C4(v200, v199, (float *)(v198 + 64), (double *)v454);
                            if (v201 == 0.0)
                              goto LABEL_450;
                            if ((*(_QWORD *)&v201 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                            {
                              if (v201 > 0.0)
                                v204 = 1;
                              else
                                v204 = -1;
                            }
                            else
                            {
                              v203 = fabs(v201);
                              if (v201 > 0.0)
                                v204 = 1;
                              else
                                v204 = -1;
                              if (v203 <= *(double *)v454 * 2.22044605e-16)
                              {
LABEL_450:
                                v370 = 0;
                                goto LABEL_495;
                              }
                            }
                            v370 = v204;
LABEL_495:
                            v202 = 0;
LABEL_496:
                            v383 = *(_DWORD *)&v451[26];
                            v221 = (uint64_t)v439;
                            v223 = v438[2];
                            v222 = v438[3];
                            if (!*((_BYTE *)v439 + 168))
                            {
                              sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *(float *)v439[3], *(float *)(v439[3] + 4));
                              *(_QWORD *)(v221 + 160) = **(_QWORD **)(v221 + 32);
                              *(_BYTE *)(v221 + 168) = 1;
                            }
                            *(_QWORD *)v454 = 0x3FF0000000000000;
                            v224 = sub_2233DB7C4(v223, v222, (float *)(v221 + 160), (double *)v454);
                            if (v224 == 0.0)
                              goto LABEL_499;
                            if ((*(_QWORD *)&v224 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                            {
                              if (v224 > 0.0)
                                v225 = 1;
                              else
                                v225 = -1;
                            }
                            else
                            {
                              v226 = fabs(v224);
                              if (v224 > 0.0)
                                v225 = 1;
                              else
                                v225 = -1;
                              if (v226 <= *(double *)v454 * 2.22044605e-16)
LABEL_499:
                                v225 = 0;
                            }
                            if (v225 * v383 != -1)
                            {
                              if ((v202 & 1) != 0)
                              {
                                v369 = 0;
LABEL_607:
                                v269 = 0;
                                goto LABEL_608;
                              }
                              v234 = (uint64_t)v439;
                              v235 = (float *)v439[3];
                              if (!*((_BYTE *)v439 + 168))
                              {
                                sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v235, v235[1]);
                                *(_QWORD *)(v234 + 160) = **(_QWORD **)(v234 + 32);
                                *(_BYTE *)(v234 + 168) = 1;
                              }
                              v236 = (uint64_t)v438;
                              if (!*((_BYTE *)v438 + 72))
                              {
                                sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v438[3], v438[3][1]);
                                *(_QWORD *)(v236 + 64) = **(_QWORD **)(v236 + 32);
                                *(_BYTE *)(v236 + 72) = 1;
                              }
                              *(_QWORD *)v454 = 0x3FF0000000000000;
                              v237 = sub_2233DB7C4(v235, (float *)(v234 + 160), (float *)(v236 + 64), (double *)v454);
                              if (v237 == 0.0)
                                goto LABEL_530;
                              if ((*(_QWORD *)&v237 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                              {
                                if (v237 > 0.0)
                                  v238 = 1;
                                else
                                  v238 = -1;
                              }
                              else
                              {
                                v245 = fabs(v237);
                                if (v237 > 0.0)
                                  v238 = 1;
                                else
                                  v238 = -1;
                                if (v245 <= *(double *)v454 * 2.22044605e-16)
LABEL_530:
                                  v238 = 0;
                              }
                              v369 = v238;
                              v265 = (uint64_t)v438;
                              v266 = v438[2];
                              v267 = v438[3];
                              if (!*((_BYTE *)v438 + 72))
                              {
                                sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v267, v267[1]);
                                *(_QWORD *)(v265 + 64) = **(_QWORD **)(v265 + 32);
                                *(_BYTE *)(v265 + 72) = 1;
                              }
                              *(_QWORD *)v454 = 0x3FF0000000000000;
                              v268 = sub_2233DB7C4(v266, v267, (float *)(v265 + 64), (double *)v454);
                              if (v268 == 0.0)
                                goto LABEL_607;
                              if ((*(_QWORD *)&v268 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                              {
                                if (v268 > 0.0)
                                  v269 = 1;
                                else
                                  v269 = -1;
                              }
                              else
                              {
                                v290 = fabs(v268);
                                if (v268 > 0.0)
                                  v269 = 1;
                                else
                                  v269 = -1;
                                if (v290 <= *(double *)v454 * 2.22044605e-16)
                                  goto LABEL_607;
                              }
LABEL_608:
                              v270 = (uint64_t)v439;
                              v271 = (float *)v439[2];
                              v272 = (float *)v439[3];
                              if (!*((_BYTE *)v439 + 168))
                              {
                                sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v272, v272[1]);
                                *(_QWORD *)(v270 + 160) = **(_QWORD **)(v270 + 32);
                                *(_BYTE *)(v270 + 168) = 1;
                              }
                              *(_QWORD *)v454 = 0x3FF0000000000000;
                              v273 = sub_2233DB7C4(v271, v272, (float *)(v270 + 160), (double *)v454);
                              if (v273 != 0.0)
                              {
                                if ((*(_QWORD *)&v273 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                {
                                  if (v273 > 0.0)
                                    v274 = 1;
                                  else
                                    v274 = -1;
LABEL_621:
                                  if (v225)
                                    v276 = 1;
                                  else
                                    v276 = v274 * v383 == 1;
                                  v277 = !v276;
                                  if (v269 != v383 && v269 != v225 && (v225 | v383 || v269 == -1))
                                  {
                                    if (v274 == 1)
                                      v285 = 2;
                                    else
                                      v285 = 1;
                                    if (v225 == 1 || v383 == 1)
                                      v233 = 1;
                                    else
                                      v233 = 2;
                                    if (v277)
                                      v287 = 3;
                                    else
                                      v287 = v233;
                                    DWORD2(v426) = v285;
                                    LODWORD(v431) = v287;
                                    v288 = (char *)&v425 + 4;
                                    if ((v277 & 1) == 0)
                                      goto LABEL_686;
                                    goto LABEL_685;
                                  }
                                  if (v369)
                                    v278 = 1;
                                  else
                                    v278 = v277;
                                  if (v278 != 1)
                                    goto LABEL_648;
                                  if (!v370)
                                  {
                                    if (v274 == 1)
                                      v233 = 2;
                                    else
                                      v233 = 1;
                                    if (v277)
                                      v233 = 3;
                                    DWORD2(v426) = 3;
                                    LODWORD(v431) = v233;
                                    if (v233 != 3)
                                      goto LABEL_910;
                                    goto LABEL_685;
                                  }
                                  if (v370 == v369 && v274 * v370 != -1)
                                  {
                                    if (v274 == 1)
                                      v279 = 1;
                                    else
                                      v279 = 2;
                                    if (v274 == 1)
                                      v233 = 2;
                                    else
                                      v233 = 1;
                                    if (v277)
                                      v233 = 3;
                                    DWORD2(v426) = v279;
                                    LODWORD(v431) = v233;
                                    if (v233 != 3)
                                      goto LABEL_910;
                                    goto LABEL_685;
                                  }
                                  if (!(v369 + v274))
                                  {
                                    if (v274 == 1)
                                      v232 = 2;
                                    else
                                      v232 = 1;
                                    if (v274 == 1)
                                      v233 = 1;
                                    else
                                      v233 = 2;
LABEL_713:
                                    DWORD2(v426) = v232;
                                    LODWORD(v431) = v233;
                                    BYTE4(v425) = 1;
                                    goto LABEL_933;
                                  }
                                  if (v370 != -v274)
                                  {
                                    v233 = v431;
                                    if ((_DWORD)v431 != 3)
                                    {
LABEL_910:
                                      v232 = DWORD2(v426);
                                      goto LABEL_933;
                                    }
                                    goto LABEL_685;
                                  }
                                  if (v274 == 1)
                                    v232 = 2;
                                  else
                                    v232 = 1;
                                  DWORD2(v426) = v232;
                                  LODWORD(v431) = v232;
                                  if (v277)
                                  {
                                    LODWORD(v431) = 3;
LABEL_685:
                                    v233 = 3;
                                    v288 = (char *)&v430 + 12;
LABEL_686:
                                    *v288 = 1;
                                    v232 = DWORD2(v426);
                                    goto LABEL_933;
                                  }
LABEL_524:
                                  BYTE4(v425) = 1;
                                  v233 = v232;
LABEL_933:
                                  if (!v232)
                                  {
                                    if (v233)
                                      goto LABEL_954;
                                    if (sub_223EB04E4(v436))
                                    {
                                      DWORD2(v426) = 2;
                                      LODWORD(v431) = 1;
                                      if (!sub_223EB092C((uint64_t)&v437))
                                      {
                                        DWORD2(v426) = 4;
                                        BYTE12(v430) = 1;
                                        v233 = v431;
                                        goto LABEL_954;
                                      }
                                    }
                                    goto LABEL_946;
                                  }
                                  if (v232 == 4)
                                  {
                                    if (v233 != 4)
                                      goto LABEL_954;
LABEL_649:
                                    v280 = (uint64_t)v438;
                                    v281 = (float *)v439[2];
                                    v282 = (float *)v439[3];
                                    if (!*((_BYTE *)v438 + 72))
                                    {
                                      sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v438[3], v438[3][1]);
                                      *(_QWORD *)(v280 + 64) = **(_QWORD **)(v280 + 32);
                                      *(_BYTE *)(v280 + 72) = 1;
                                    }
                                    *(_QWORD *)v454 = 0x3FF0000000000000;
                                    v283 = sub_2233DB7C4(v281, v282, (float *)(v280 + 64), (double *)v454);
                                    if (v283 == 0.0)
                                    {
LABEL_652:
                                      v284 = 0;
                                    }
                                    else if ((*(_QWORD *)&v283 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                    {
                                      if (v283 > 0.0)
                                        v284 = 1;
                                      else
                                        v284 = -1;
                                    }
                                    else
                                    {
                                      v289 = fabs(v283);
                                      if (v283 > 0.0)
                                        v284 = 1;
                                      else
                                        v284 = -1;
                                      if (v289 <= *(double *)v454 * 2.22044605e-16)
                                        goto LABEL_652;
                                    }
                                    v291 = (uint64_t)v439;
                                    v292 = (float *)v439[2];
                                    v293 = (float *)v439[3];
                                    if (!*((_BYTE *)v439 + 168))
                                    {
                                      sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v293, v293[1]);
                                      *(_QWORD *)(v291 + 160) = **(_QWORD **)(v291 + 32);
                                      *(_BYTE *)(v291 + 168) = 1;
                                    }
                                    *(_QWORD *)v454 = 0x3FF0000000000000;
                                    v294 = sub_2233DB7C4(v292, v293, (float *)(v291 + 160), (double *)v454);
                                    if (v294 == 0.0)
                                    {
LABEL_693:
                                      v295 = 0;
                                    }
                                    else if ((*(_QWORD *)&v294 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                    {
                                      if (v294 <= 0.0)
                                        v295 = 1;
                                      else
                                        v295 = -1;
                                    }
                                    else
                                    {
                                      v296 = fabs(v294);
                                      if (v294 <= 0.0)
                                        v295 = 1;
                                      else
                                        v295 = -1;
                                      if (v296 <= *(double *)v454 * 2.22044605e-16)
                                        goto LABEL_693;
                                    }
                                    if (v284 == v295 && sub_223EB04E4(v436))
                                    {
                                      v297 = 1;
                                      DWORD2(v426) = 1;
                                      goto LABEL_958;
                                    }
                                    goto LABEL_946;
                                  }
                                  if (v232 != 3)
                                    goto LABEL_954;
LABEL_936:
                                  if (sub_223EB04E4(v436))
                                  {
                                    v353 = (uint64_t)v439;
                                    v354 = v438[2];
                                    v355 = v438[3];
                                    if (!*((_BYTE *)v439 + 168))
                                    {
                                      sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *(float *)v439[3], *(float *)(v439[3] + 4));
                                      *(_QWORD *)(v353 + 160) = **(_QWORD **)(v353 + 32);
                                      *(_BYTE *)(v353 + 168) = 1;
                                    }
                                    *(_QWORD *)v454 = 0x3FF0000000000000;
                                    v356 = sub_2233DB7C4(v354, v355, (float *)(v353 + 160), (double *)v454);
                                    if (v356 != 0.0
                                      && ((*(_QWORD *)&v356 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                                       || fabs(v356) > *(double *)v454 * 2.22044605e-16))
                                    {
                                      DWORD2(v426) = 1;
                                      v233 = v431;
                                      goto LABEL_954;
                                    }
                                    BYTE12(v430) = 1;
                                  }
LABEL_946:
                                  v233 = v431;
                                  if (DWORD2(v426) == 3 && (_DWORD)v431 == 3)
                                  {
                                    if ((_DWORD)v425 == 3)
                                      v357 = 6;
                                    else
                                      v357 = 5;
                                    LODWORD(v425) = v357;
                                    v233 = 3;
                                  }
                                  else if (DWORD2(v426) != 3)
                                  {
                                    goto LABEL_954;
                                  }
                                  DWORD2(v426) = 4;
LABEL_954:
                                  if (v233 == 3)
                                  {
                                    v297 = 4;
                                  }
                                  else
                                  {
                                    if (v233 != 2)
                                      goto LABEL_959;
                                    v297 = 1;
                                  }
LABEL_958:
                                  LODWORD(v431) = v297;
LABEL_959:
                                  if ((_DWORD)v425 == 8)
                                  {
                                    LODWORD(v425) = 4;
                                    DWORD2(v426) = 1;
                                    LODWORD(v431) = 1;
                                  }
                                  if ((sub_223EAFE20((_DWORD *)&v426 + 2, (uint64_t)v436) & 1) == 0
                                    && (DWORD2(v426) == 4 || DWORD2(v426) == 2)
                                    && sub_223EB04E4(v436))
                                  {
                                    BYTE12(v430) = 1;
                                    LODWORD(v425) = 3;
                                    DWORD2(v426) = 3;
                                    LODWORD(v431) = 4;
                                    *(_QWORD *)v454 = a10;
                                    sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                                    DWORD2(v426) = 4;
                                    *(_QWORD *)v454 = a10;
                                    sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                                  }
                                  else
                                  {
LABEL_966:
                                    *(_QWORD *)v454 = a10;
                                    sub_223EB02A0((char ***)v454, (uint64_t)&v424);
                                  }
                                  goto LABEL_1014;
                                }
                                v275 = fabs(v273);
                                if (v273 > 0.0)
                                  v274 = 1;
                                else
                                  v274 = -1;
                                if (v275 > *(double *)v454 * 2.22044605e-16)
                                  goto LABEL_621;
                              }
                              v274 = 0;
                              goto LABEL_621;
                            }
                            if ((v202 & 1) != 0)
                              goto LABEL_516;
                            v227 = (uint64_t)v438;
                            v228 = v438[2];
                            v229 = v438[3];
                            if (!*((_BYTE *)v438 + 72))
                            {
                              sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v229, v229[1]);
                              *(_QWORD *)(v227 + 64) = **(_QWORD **)(v227 + 32);
                              *(_BYTE *)(v227 + 72) = 1;
                            }
                            *(_QWORD *)v454 = 0x3FF0000000000000;
                            v230 = sub_2233DB7C4(v228, v229, (float *)(v227 + 64), (double *)v454);
                            if (v230 == 0.0)
                              goto LABEL_516;
                            if ((*(_QWORD *)&v230 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                            {
                              if (v230 > 0.0)
                                v231 = 1;
                              else
                                v231 = -1;
                            }
                            else
                            {
                              v255 = fabs(v230);
                              if (v230 > 0.0)
                                v231 = 1;
                              else
                                v231 = -1;
                              if (v255 <= *(double *)v454 * 2.22044605e-16)
LABEL_516:
                                v231 = 0;
                            }
                            if (v231 != v383)
                              goto LABEL_919;
                            if (!v370)
                            {
                              if (v225 == 1)
                                v254 = 1;
                              else
                                v254 = 2;
                              DWORD2(v426) = 3;
                              LODWORD(v431) = v254;
                              goto LABEL_936;
                            }
                            if (v370 != v225)
                            {
LABEL_919:
                              if (v231 != v225)
                                goto LABEL_926;
                              if ((v202 & 1) != 0)
                                goto LABEL_648;
                              v239 = (uint64_t)v439;
                              v240 = (float *)v439[3];
                              if (!*((_BYTE *)v439 + 168))
                              {
                                sub_223EB11F4((uint64_t)v439, (uint64_t)(v439 + 4), *v240, v240[1]);
                                *(_QWORD *)(v239 + 160) = **(_QWORD **)(v239 + 32);
                                *(_BYTE *)(v239 + 168) = 1;
                              }
                              v241 = (uint64_t)v438;
                              if (!*((_BYTE *)v438 + 72))
                              {
                                sub_223EB0F70((uint64_t)v438, (uint64_t)(v438 + 4), *v438[3], v438[3][1]);
                                *(_QWORD *)(v241 + 64) = **(_QWORD **)(v241 + 32);
                                *(_BYTE *)(v241 + 72) = 1;
                              }
                              *(_QWORD *)v454 = 0x3FF0000000000000;
                              v242 = sub_2233DB7C4(v240, (float *)(v239 + 160), (float *)(v241 + 64), (double *)v454);
                              if (v242 == 0.0)
                              {
LABEL_648:
                                DWORD2(v426) = 4;
                                LODWORD(v431) = 4;
                                goto LABEL_649;
                              }
                              if ((*(_QWORD *)&v242 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                              {
                                v244 = v242 > 0.0 ? 1 : -1;
                              }
                              else
                              {
                                v243 = fabs(v242);
                                if (v242 > 0.0)
                                  v244 = 1;
                                else
                                  v244 = -1;
                                if (v243 <= *(double *)v454 * 2.22044605e-16)
                                  goto LABEL_648;
                              }
                              if (v244 != v225)
                              {
LABEL_926:
                                if (v225 == 1)
                                  v232 = 2;
                                else
                                  v232 = 1;
                                if (v225 == 1)
                                  v233 = 1;
                                else
                                  v233 = 2;
                                DWORD2(v426) = v232;
                                LODWORD(v431) = v233;
                                goto LABEL_933;
                              }
                              if (v225 == 1)
                                v232 = 1;
                              else
                                v232 = 2;
                              if (v225 == 1)
                                v233 = 2;
                              else
                                v233 = 1;
                              goto LABEL_713;
                            }
                            if (v225 == 1)
                              v232 = 1;
                            else
                              v232 = 2;
                            DWORD2(v426) = v232;
                            LODWORD(v431) = v232;
                            goto LABEL_524;
                          default:
                            sub_223EB0E9C((uint64_t)v454, v450);
                            v422.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9"
                                                   "d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platfo"
                                                   "rm/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/g"
                                                   "eometry/algorithms/detail/overlay/get_turn_info_la.hpp";
                            v422.i64[1] = (uint64_t)"static OutputIterator boost::geometry::detail::overlay::get_turn_info"
                                                   "_linear_areal<boost::geometry::detail::overlay::assign_null_policy>::"
                                                   "apply(const UniqueSubRange1 &, const UniqueSubRange2 &, const TurnInf"
                                                   "o &, const UmbrellaStrategy &, const RobustPolicy &, OutputIterator) "
                                                   "[AssignPolicy = boost::geometry::detail::overlay::assign_null_policy,"
                                                   " UniqueSubRange1 = boost::geometry::detail::get_turns::unique_sub_ran"
                                                   "ge_from_section<false, boost::geometry::section<boost::geometry::mode"
                                                   "l::box<cva::Matrix<float, 2, 1>>, 2>, cva::Matrix<float, 2, 1>, boost"
                                                   "::geometry::ever_circling_iterator<std::__wrap_iter<const cva::Matrix"
                                                   "<float, 2, 1> *>>, boost::geometry::strategies::relate::cartesian<>, "
                                                   "boost::geometry::detail::no_rescale_policy>, UniqueSubRange2 = boost:"
                                                   ":geometry::detail::get_turns::unique_sub_range_from_section<true, boo"
                                                   "st::geometry::section<boost::geometry::model::box<cva::Matrix<float, "
                                                   "2, 1>>, 2>, cva::Matrix<float, 2, 1>, boost::geometry::ever_circling_"
                                                   "iterator<boost::geometry::closing_iterator<const cv3d::recon::geometr"
                                                   "y::SimplePolygon<float, 2>>>, boost::geometry::strategies::relate::ca"
                                                   "rtesian<>, boost::geometry::detail::no_rescale_policy>, TurnInfo = bo"
                                                   "ost::geometry::detail::overlay::turn_info<cva::Matrix<float, 2, 1>, b"
                                                   "oost::geometry::segment_ratio<float>, boost::geometry::detail::overla"
                                                   "y::turn_operation_linear<cva::Matrix<float, 2, 1>, boost::geometry::s"
                                                   "egment_ratio<float>>>, UmbrellaStrategy = boost::geometry::strategies"
                                                   "::relate::cartesian<>, RobustPolicy = boost::geometry::detail::no_res"
                                                   "cale_policy, OutputIterator = std::back_insert_iterator<std::vector<b"
                                                   "oost::geometry::detail::overlay::turn_info<cva::Matrix<float, 2, 1>, "
                                                   "boost::geometry::segment_ratio<float>, boost::geometry::detail::overl"
                                                   "ay::turn_operation_linear<cva::Matrix<float, 2, 1>, boost::geometry::"
                                                   "segment_ratio<float>>>>>]";
                            v423 = 384;
                            sub_223EB0E40((uint64_t)v454, &v422);
                        }
                      }
                      v156 = (float)((float)(v139 * v134) / v132) + *(float *)v422.i64[0];
                      v157 = (float)((float)(v141 * v134) / v132) + *(float *)(v422.i64[0] + 4);
                      v158 = HIDWORD(v115);
                      if (!(v381 | v115))
                        goto LABEL_343;
LABEL_307:
                      if (!(v108 | v158))
                      {
                        if ((_DWORD)v115 == 1)
                          v160 = -1;
                        else
                          v160 = 1;
                        if ((_DWORD)v115 == 1)
                          v161 = 1;
                        else
                          v161 = -1;
                        v159 = 1;
                        v162 = 116;
                        v164 = 1;
                        goto LABEL_381;
                      }
                      if (v108 | v115)
                      {
                        if (v381 | v158)
                        {
                          if ((_DWORD)v115)
                          {
                            if (v381)
                            {
                              if ((_DWORD)v158)
                              {
                                if (v108)
                                {
                                  v159 = -1;
                                  if ((_DWORD)v158 == 1)
                                    v160 = -1;
                                  else
                                    v160 = 1;
                                  if ((_DWORD)v158 == 1)
                                    v161 = 1;
                                  else
                                    v161 = -1;
                                  v162 = 105;
                                  goto LABEL_350;
                                }
                                v164 = 0;
                                if ((_DWORD)v158 == 1)
                                  v160 = 1;
                                else
                                  v160 = -1;
                                v159 = 1;
                              }
                              else
                              {
                                v159 = 0;
                                if (v108 == 1)
                                  v160 = 1;
                                else
                                  v160 = -1;
                                v164 = 1;
                              }
                              v162 = 109;
                              goto LABEL_380;
                            }
                            v164 = 0;
                            _ZF = (_DWORD)v158 == 1;
                            v159 = -1;
                            if ((_DWORD)v158 == 1)
                              v160 = -1;
                            else
                              v160 = 1;
                          }
                          else
                          {
                            v159 = 0;
                            _ZF = (_DWORD)v158 == 1;
                            v164 = -1;
                            if ((_DWORD)v158 == 1)
                              v160 = -1;
                            else
                              v160 = 1;
                          }
                          if (_ZF)
                            v161 = v158;
                          else
                            v161 = -1;
                          v162 = 115;
                          goto LABEL_381;
                        }
                        if ((_DWORD)v115 == 1)
                          v160 = 1;
                        else
                          v160 = -1;
                        v164 = 1;
                        v159 = -1;
                      }
                      else
                      {
                        if ((_DWORD)v158 == 1)
                          v160 = 1;
                        else
                          v160 = -1;
                        v164 = -1;
                        v159 = 1;
                      }
                      v162 = 97;
LABEL_380:
                      v161 = v160;
                      goto LABEL_381;
                    }
                    LOBYTE(v130) = v125 > v126;
                  }
                  else
                  {
                    v125 = fabsf(v118);
                    v126 = fabsf(v122);
                    v127 = fabsf(v121);
                    v128 = fabsf(v123);
                    if (!v56)
                      goto LABEL_292;
LABEL_283:
                    LOBYTE(v130) = v127 >= v128;
                  }
LABEL_339:
                  if ((v130 & 1) != 0)
                    sub_2234071F8((uint64_t **)&v424, (uint64_t **)&v422, v50, v51, v34, v386, v56, v69, (uint64_t)&v443);
                  else
                    sub_223407554((uint64_t **)&v424, (uint64_t **)&v422, (uint64_t)v50, (uint64_t)v51, (uint64_t)v34, (uint64_t)v386, v56, v69, (uint64_t)&v443);
LABEL_254:
                  v47 = v385;
                  v39 = v386;
                  goto LABEL_382;
                }
                if ((LODWORD(v60) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v57) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  v74 = vabds_f32(v60, v57);
                  v75 = fabsf(v60);
                  v76 = fabsf(v57);
                  if (v75 < v76)
                    v75 = v76;
                  if (v75 >= 1.0)
                    v77 = v75 * 0.00000011921;
                  else
                    v77 = 0.00000011921;
                  v69 = v74 <= v77;
                  if (v74 <= v77)
                    v78 = v56;
                  else
                    v78 = 0;
                  if ((v78 & 1) != 0)
                    goto LABEL_1016;
                  goto LABEL_167;
                }
              }
            }
            break;
          }
          v69 = 0;
          goto LABEL_167;
        }
LABEL_35:
        v17 = v380 + 2;
        v24 = v379 + 2;
        ++v392;
        a2 = v374;
        a3 = v375;
        if (v378 + 2 == v375)
          v28 = &v374[2 * (v378 != v374)];
        else
          v28 = v378 + 2;
        v29 = v373;
      }
      while (v379 != v376);
    }
  }
}

void sub_223EAEF78(_Unwind_Exception *a1)
{
  sub_223EB0F24((std::exception *)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

uint64_t sub_223EAEF90(float **a1, uint64_t a2, uint64_t *a3, uint64_t a4, char **a5, int32x4_t a6)
{
  _QWORD *v6;
  unint64_t v7;
  float *v13;
  float *v14;
  float *v15;
  float **v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  float *v28;
  float *v29;
  double v30;
  float *v31;
  float *v32;
  float *v33;
  double v34;
  int v35;
  double v36;
  int v37;
  double v38;
  float *v39;
  float *v40;
  float *v41;
  double v42;
  double v43;
  int v44;
  float *v45;
  float *v46;
  double v47;
  int v48;
  double v49;
  int v50;
  uint64_t v51;
  uint64_t result;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  float *v58;
  float *v59;
  double v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float *v66;
  float *v67;
  double v68;
  int v69;
  int v70;
  double v71;
  double v72;
  float *v73;
  float *v74;
  float *v75;
  double v76;
  double v77;
  float *v78;
  float *v79;
  double v80;
  double v81;
  BOOL v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  int v88;
  char *v89;
  int v90;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _BYTE v108[10];
  char v109;
  _BYTE v110[12];
  char v111;
  char **v112[2];

  v6 = (_QWORD *)(a4 + 64);
  v7 = *(_QWORD *)(a4 + 64);
  if (!v7)
    return 0;
  v13 = *a1;
  if (*((_BYTE *)*a1 + 96) && (v14 = a1[1], v14 == *((float **)v13 + 6)))
  {
    v16 = a1 + 2;
    v15 = a1[2];
    v17 = *(float **)(a2 + 16);
    if (!*((_BYTE *)v13 + 97))
    {
      sub_223EB13CC((uint64_t)v108, v15, v17, a4 + 64, 0, a6);
      v20 = *(unsigned __int8 *)(a4 + 145);
      if (!*((_BYTE *)v13 + 96))
        goto LABEL_19;
      goto LABEL_12;
    }
    v18 = *((_QWORD *)v13 + 7);
    v19 = (uint64_t)v14 + 1;
  }
  else
  {
    if (!*((_BYTE *)v13 + 97))
      return 0;
    v14 = a1[1];
    v19 = (uint64_t)v14 + 1;
    v18 = *((_QWORD *)v13 + 7);
    if ((uint64_t)v14 + 1 < v18)
      return 0;
    v16 = a1 + 2;
    v15 = a1[2];
    v17 = *(float **)(a2 + 16);
  }
  sub_223EB13CC((uint64_t)v108, v15, v17, a4 + 64, v19 >= v18, a6);
  v20 = *(unsigned __int8 *)(a4 + 145);
  if (!*((_BYTE *)v13 + 96))
    goto LABEL_19;
LABEL_12:
  v21 = v14 != *((float **)v13 + 6) || v108[8] == 0;
  if (v21 || v109 != 0)
  {
LABEL_19:
    v23 = 0;
    if (!*((_BYTE *)v13 + 97))
      return 0;
    goto LABEL_83;
  }
  v96 = *a3;
  v24 = *(_OWORD *)(a3 + 15);
  v105 = *(_OWORD *)(a3 + 17);
  v106 = *(_OWORD *)(a3 + 19);
  v107 = a3[21];
  v25 = *(_OWORD *)(a3 + 9);
  v100 = *(_OWORD *)(a3 + 7);
  v101 = v25;
  v102 = *(_OWORD *)(a3 + 11);
  v103 = *(_OWORD *)(a3 + 13);
  v104 = v24;
  v26 = *(_OWORD *)(a3 + 3);
  v97 = *(_OWORD *)(a3 + 1);
  v98 = v26;
  v99 = *(_OWORD *)(a3 + 5);
  DWORD2(v102) = 1;
  LODWORD(v107) = 0;
  v94 = v20;
  if (v20)
  {
    LODWORD(v103) = 1;
    if (v110[0])
      v27 = 3;
    else
      v27 = 4;
    goto LABEL_81;
  }
  if (!v110[0])
  {
    v31 = *(float **)(a2 + 16);
    v32 = *(float **)(a2 + 24);
    v33 = a1[3];
    v112[0] = (char **)0x3FF0000000000000;
    v34 = sub_2233DB7C4(v31, v32, v33, (double *)v112);
    if (v34 != 0.0)
    {
      if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v34 > 0.0)
          v35 = 1;
        else
          v35 = -1;
        goto LABEL_77;
      }
      v38 = fabs(v34);
      if (v34 > 0.0)
        v35 = 1;
      else
        v35 = -1;
      if (v38 > *(double *)v112 * 2.22044605e-16)
        goto LABEL_77;
    }
    v35 = 0;
LABEL_77:
    v48 = 0;
    v27 = 4;
    v50 = v35;
    goto LABEL_78;
  }
  v28 = *(float **)(a2 + 24);
  if (!*(_BYTE *)(a2 + 168))
  {
    sub_223EB11F4(a2, a2 + 32, *v28, v28[1]);
    *(_QWORD *)(a2 + 160) = **(_QWORD **)(a2 + 32);
    *(_BYTE *)(a2 + 168) = 1;
  }
  v29 = a1[3];
  v112[0] = (char **)0x3FF0000000000000;
  v30 = sub_2233DB7C4(v28, (float *)(a2 + 160), v29, (double *)v112);
  if (v30 == 0.0)
    goto LABEL_29;
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v30 > 0.0)
      v37 = 1;
    else
      v37 = -1;
  }
  else
  {
    v36 = fabs(v30);
    if (v30 > 0.0)
      v37 = 1;
    else
      v37 = -1;
    if (v36 <= *(double *)v112 * 2.22044605e-16)
    {
LABEL_29:
      v93 = 0;
      goto LABEL_48;
    }
  }
  v93 = v37;
LABEL_48:
  v39 = *(float **)(a2 + 16);
  v40 = *(float **)(a2 + 24);
  v41 = a1[3];
  v112[0] = (char **)0x3FF0000000000000;
  v42 = sub_2233DB7C4(v39, v40, v41, (double *)v112);
  if (v42 == 0.0)
  {
LABEL_49:
    v92 = 0;
    goto LABEL_60;
  }
  if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v42 > 0.0)
      v44 = 1;
    else
      v44 = -1;
  }
  else
  {
    v43 = fabs(v42);
    if (v42 > 0.0)
      v44 = 1;
    else
      v44 = -1;
    if (v43 <= *(double *)v112 * 2.22044605e-16)
      goto LABEL_49;
  }
  v92 = v44;
LABEL_60:
  v45 = *(float **)(a2 + 16);
  v46 = *(float **)(a2 + 24);
  if (!*(_BYTE *)(a2 + 168))
  {
    sub_223EB11F4(a2, a2 + 32, *v46, v46[1]);
    *(_QWORD *)(a2 + 160) = **(_QWORD **)(a2 + 32);
    *(_BYTE *)(a2 + 168) = 1;
  }
  v112[0] = (char **)0x3FF0000000000000;
  v47 = sub_2233DB7C4(v45, v46, (float *)(a2 + 160), (double *)v112);
  v35 = v93;
  if (v47 != 0.0)
  {
    if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0)
        v48 = 1;
      else
        v48 = -1;
      goto LABEL_73;
    }
    v49 = fabs(v47);
    if (v47 > 0.0)
      v48 = 1;
    else
      v48 = -1;
    if (v49 > *(double *)v112 * 2.22044605e-16)
      goto LABEL_73;
  }
  v48 = 0;
LABEL_73:
  v27 = 3;
  v50 = v92;
LABEL_78:
  if (!v35 && v50 == v48)
  {
    LODWORD(v103) = 4;
LABEL_81:
    DWORD2(v98) = 4;
    LODWORD(v97) = v27;
    goto LABEL_82;
  }
  v62 = v48 * v50;
  v21 = v35 == -1;
  v63 = 0x200000001;
  if (v21)
    v64 = 0x100000002;
  else
    v64 = 0x200000001;
  if (v50 == -1)
    v63 = 0x100000002;
  if (v62 != -1)
    v63 = v64;
  LODWORD(v103) = HIDWORD(v63);
  DWORD2(v98) = v63;
  LODWORD(v97) = v27;
  if (HIDWORD(v63) == 2)
    LODWORD(v103) = 1;
LABEL_82:
  v51 = *(_QWORD *)(a4 + 88);
  v96 = *(_QWORD *)(a4 + 72);
  *((_QWORD *)&v101 + 1) = v51;
  LODWORD(v102) = *(_DWORD *)(a4 + 96);
  *(_QWORD *)&v106 = *(_QWORD *)(a4 + 100);
  DWORD2(v106) = *(_DWORD *)(a4 + 108);
  BYTE12(v102) = 0;
  v112[0] = a5;
  sub_223EB02A0(v112, (uint64_t)&v96);
  v13 = *a1;
  v23 = 1;
  v20 = v94;
  if (!*((_BYTE *)*a1 + 97))
    return 0;
LABEL_83:
  if ((uint64_t)a1[1] + 1 < *((_QWORD *)v13 + 7))
    return 0;
  if (v7 < 2)
  {
    result = 0;
    if (!v108[9] || v109)
      return result;
  }
  else
  {
    result = 0;
    if (!v110[10] || v110[11])
      return result;
  }
  v96 = *a3;
  v53 = *(_OWORD *)(a3 + 15);
  v105 = *(_OWORD *)(a3 + 17);
  v106 = *(_OWORD *)(a3 + 19);
  v107 = a3[21];
  v54 = *(_OWORD *)(a3 + 9);
  v100 = *(_OWORD *)(a3 + 7);
  v101 = v54;
  v102 = *(_OWORD *)(a3 + 11);
  v103 = *(_OWORD *)(a3 + 13);
  v104 = v53;
  v55 = *(_OWORD *)(a3 + 3);
  v97 = *(_OWORD *)(a3 + 1);
  v98 = v55;
  v99 = *(_OWORD *)(a3 + 5);
  if (*v6 < 2uLL)
  {
    v95 = v20;
    if (v110[0])
    {
      v58 = *(float **)(a2 + 24);
      if (!*(_BYTE *)(a2 + 168))
      {
        sub_223EB11F4(a2, a2 + 32, *v58, v58[1]);
        *(_QWORD *)(a2 + 160) = **(_QWORD **)(a2 + 32);
        *(_BYTE *)(a2 + 168) = 1;
      }
      v59 = *v16;
      v112[0] = (char **)0x3FF0000000000000;
      v60 = sub_2233DB7C4(v58, (float *)(a2 + 160), v59, (double *)v112);
      if (v60 == 0.0)
        goto LABEL_101;
      if ((*(_QWORD *)&v60 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v60 > 0.0)
          v61 = 1;
        else
          v61 = -1;
      }
      else
      {
        v71 = fabs(v60);
        if (v60 > 0.0)
          v61 = 1;
        else
          v61 = -1;
        if (v71 <= *(double *)v112 * 2.22044605e-16)
LABEL_101:
          v61 = 0;
      }
      v73 = *(float **)(a2 + 16);
      v74 = *(float **)(a2 + 24);
      v75 = *v16;
      v112[0] = (char **)0x3FF0000000000000;
      v76 = sub_2233DB7C4(v73, v74, v75, (double *)v112);
      if (v76 != 0.0)
      {
        if ((*(_QWORD *)&v76 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v76 > 0.0)
            v70 = 1;
          else
            v70 = -1;
          goto LABEL_140;
        }
        v77 = fabs(v76);
        if (v76 > 0.0)
          v70 = 1;
        else
          v70 = -1;
        if (v77 > *(double *)v112 * 2.22044605e-16)
          goto LABEL_140;
      }
      v70 = 0;
LABEL_140:
      v78 = *(float **)(a2 + 16);
      v79 = *(float **)(a2 + 24);
      if (!*(_BYTE *)(a2 + 168))
      {
        sub_223EB11F4(a2, a2 + 32, *v79, v79[1]);
        *(_QWORD *)(a2 + 160) = **(_QWORD **)(a2 + 32);
        *(_BYTE *)(a2 + 168) = 1;
      }
      v112[0] = (char **)0x3FF0000000000000;
      v80 = sub_2233DB7C4(v78, v79, (float *)(a2 + 160), (double *)v112);
      if (v80 == 0.0)
      {
LABEL_143:
        v69 = 0;
        goto LABEL_153;
      }
      if ((*(_QWORD *)&v80 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v81 = fabs(v80);
        if (v80 > 0.0)
          v69 = 1;
        else
          v69 = -1;
        if (v81 > *(double *)v112 * 2.22044605e-16)
          goto LABEL_153;
        goto LABEL_143;
      }
      if (v80 > 0.0)
        v69 = 1;
      else
        v69 = -1;
LABEL_153:
      if (v61)
        v82 = 0;
      else
        v82 = v70 == v69;
      v83 = v82;
      if (v82)
      {
        LODWORD(v103) = 4;
        BYTE12(v102) = 1;
      }
      else
      {
        v84 = v69 * v70;
        v85 = 0x200000001;
        if (v61 == -1)
          v86 = 0x100000002;
        else
          v86 = 0x200000001;
        if (v70 == -1)
          v85 = 0x100000002;
        if (v84 != -1)
          v85 = v86;
        LODWORD(v103) = HIDWORD(v85);
        LODWORD(v97) = 0;
        BYTE12(v102) = (_DWORD)v85 != 3;
        if (HIDWORD(v85) == 2)
          LODWORD(v103) = 1;
      }
      BYTE12(v102) = v83;
      v57 = v95;
      goto LABEL_172;
    }
    v65 = *(float **)(a2 + 16);
    v66 = *(float **)(a2 + 24);
    v67 = *v16;
    v112[0] = (char **)0x3FF0000000000000;
    v68 = sub_2233DB7C4(v65, v66, v67, (double *)v112);
    if (v68 != 0.0)
    {
      if ((*(_QWORD *)&v68 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v68 > 0.0)
          v61 = 1;
        else
          v61 = -1;
        goto LABEL_113;
      }
      v72 = fabs(v68);
      if (v68 > 0.0)
        v61 = 1;
      else
        v61 = -1;
      if (v72 > *(double *)v112 * 2.22044605e-16)
        goto LABEL_113;
    }
    v61 = 0;
LABEL_113:
    v69 = 0;
    v70 = v61;
    goto LABEL_153;
  }
  BYTE12(v102) = 1;
  if (v20)
    v56 = 4;
  else
    v56 = 1;
  LODWORD(v103) = v56;
  v57 = v20;
LABEL_172:
  v87 = v110;
  if (v7 > 1)
    v87 = &v111;
  if (*v87)
    v88 = 3;
  else
    v88 = 4;
  DWORD2(v98) = 3;
  LODWORD(v97) = v88;
  v96 = v6[(v7 > 1) + 1];
  v89 = (char *)v6 + 28 * (v7 > 1);
  *((_QWORD *)&v101 + 1) = *((_QWORD *)v89 + 3);
  v90 = *((_DWORD *)v89 + 8);
  DWORD2(v102) = 2;
  LODWORD(v102) = v90;
  *(_QWORD *)&v106 = *(_QWORD *)(v89 + 36);
  LODWORD(v89) = *((_DWORD *)v89 + 11);
  LODWORD(v107) = 0;
  DWORD2(v106) = (_DWORD)v89;
  v112[0] = a5;
  sub_223EB02A0(v112, (uint64_t)&v96);
  if (v7 < 2 || v57 == 0)
    return 1;
  else
    return v23;
}

BOOL sub_223EAF8BC(float **a1, uint64_t a2, uint64_t *a3, uint64_t a4, char **a5, int32x4_t a6)
{
  uint64_t v6;
  unint64_t v7;
  float *v12;
  float *v13;
  float *v14;
  float **v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float *v28;
  float *v29;
  double v30;
  int v31;
  float *v32;
  float *v33;
  float *v34;
  double v35;
  int v36;
  int v37;
  double v38;
  double v39;
  float *v40;
  float *v41;
  float *v42;
  double v43;
  double v44;
  float *v45;
  float *v46;
  double v47;
  double v48;
  BOOL v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE v71[11];
  _BYTE v72[12];
  char v73;
  char **v74[2];

  v6 = a4 + 64;
  v7 = *(_QWORD *)(a4 + 64);
  if (!v7)
    return 0;
  v12 = *a1;
  if (!*((_BYTE *)*a1 + 96) || (v13 = a1[1], v13 != *((float **)v12 + 6)))
  {
    if (!*((_BYTE *)v12 + 97))
      return 0;
    v13 = a1[1];
    v18 = (uint64_t)v13 + 1;
    v17 = *((_QWORD *)v12 + 7);
    if ((uint64_t)v13 + 1 < v17)
      return 0;
    v15 = a1 + 2;
    v14 = a1[2];
    v16 = *(float **)(a2 + 16);
LABEL_9:
    sub_223EB13CC((uint64_t)v71, v14, v16, a4 + 64, v18 >= v17, a6);
    if (!*((_BYTE *)v12 + 97))
      return 0;
    goto LABEL_12;
  }
  v15 = a1 + 2;
  v14 = a1[2];
  v16 = *(float **)(a2 + 16);
  if (*((_BYTE *)v12 + 97))
  {
    v17 = *((_QWORD *)v12 + 7);
    v18 = (uint64_t)v13 + 1;
    goto LABEL_9;
  }
  sub_223EB13CC((uint64_t)v71, v14, v16, a4 + 64, 0, a6);
  if (!*((_BYTE *)v12 + 97))
    return 0;
LABEL_12:
  if ((uint64_t)v13 + 1 < *((_QWORD *)v12 + 7))
    return 0;
  v20 = *(unsigned __int8 *)(a4 + 145);
  if (v7 >= 2)
  {
    result = 0;
    if (!v72[10] || v72[11])
      return result;
    v21 = *(_OWORD *)(a3 + 15);
    v68 = *(_OWORD *)(a3 + 17);
    v69 = *(_OWORD *)(a3 + 19);
    v70 = a3[21];
    v22 = *(_OWORD *)(a3 + 9);
    v63 = *(_OWORD *)(a3 + 7);
    v64 = v22;
    v65 = *(_OWORD *)(a3 + 11);
    v66 = *(_OWORD *)(a3 + 13);
    v67 = v21;
    v23 = *(_OWORD *)(a3 + 3);
    v60 = *(_OWORD *)(a3 + 1);
    v61 = v23;
    v62 = *(_OWORD *)(a3 + 5);
    BYTE12(v65) = 1;
    if (v20)
      v24 = 4;
    else
      v24 = 1;
    LODWORD(v66) = v24;
    goto LABEL_90;
  }
  result = 0;
  if (!v71[9] || v71[10])
    return result;
  v59 = *a3;
  v25 = *(_OWORD *)(a3 + 15);
  v68 = *(_OWORD *)(a3 + 17);
  v69 = *(_OWORD *)(a3 + 19);
  v70 = a3[21];
  v26 = *(_OWORD *)(a3 + 9);
  v63 = *(_OWORD *)(a3 + 7);
  v64 = v26;
  v65 = *(_OWORD *)(a3 + 11);
  v66 = *(_OWORD *)(a3 + 13);
  v67 = v25;
  v27 = *(_OWORD *)(a3 + 3);
  v60 = *(_OWORD *)(a3 + 1);
  v61 = v27;
  v62 = *(_OWORD *)(a3 + 5);
  if (!v72[0])
  {
    v32 = *(float **)(a2 + 16);
    v33 = *(float **)(a2 + 24);
    v34 = *v15;
    v74[0] = (char **)0x3FF0000000000000;
    v35 = sub_2233DB7C4(v32, v33, v34, (double *)v74);
    if (v35 != 0.0)
    {
      if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v35 > 0.0)
          v31 = 1;
        else
          v31 = -1;
        goto LABEL_31;
      }
      v39 = fabs(v35);
      if (v35 > 0.0)
        v31 = 1;
      else
        v31 = -1;
      if (v39 > *(double *)v74 * 2.22044605e-16)
        goto LABEL_31;
    }
    v31 = 0;
LABEL_31:
    v36 = 0;
    v37 = v31;
    goto LABEL_71;
  }
  v28 = *(float **)(a2 + 24);
  if (!*(_BYTE *)(a2 + 168))
  {
    sub_223EB11F4(a2, a2 + 32, *v28, v28[1]);
    *(_QWORD *)(a2 + 160) = **(_QWORD **)(a2 + 32);
    *(_BYTE *)(a2 + 168) = 1;
  }
  v29 = *v15;
  v74[0] = (char **)0x3FF0000000000000;
  v30 = sub_2233DB7C4(v28, (float *)(a2 + 160), v29, (double *)v74);
  if (v30 == 0.0)
    goto LABEL_28;
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v30 > 0.0)
      v31 = 1;
    else
      v31 = -1;
  }
  else
  {
    v38 = fabs(v30);
    if (v30 > 0.0)
      v31 = 1;
    else
      v31 = -1;
    if (v38 <= *(double *)v74 * 2.22044605e-16)
LABEL_28:
      v31 = 0;
  }
  v40 = *(float **)(a2 + 16);
  v41 = *(float **)(a2 + 24);
  v42 = *v15;
  v74[0] = (char **)0x3FF0000000000000;
  v43 = sub_2233DB7C4(v40, v41, v42, (double *)v74);
  if (v43 != 0.0)
  {
    if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v43 > 0.0)
        v37 = 1;
      else
        v37 = -1;
      goto LABEL_58;
    }
    v44 = fabs(v43);
    if (v43 > 0.0)
      v37 = 1;
    else
      v37 = -1;
    if (v44 > *(double *)v74 * 2.22044605e-16)
      goto LABEL_58;
  }
  v37 = 0;
LABEL_58:
  v45 = *(float **)(a2 + 16);
  v46 = *(float **)(a2 + 24);
  if (!*(_BYTE *)(a2 + 168))
  {
    sub_223EB11F4(a2, a2 + 32, *v46, v46[1]);
    *(_QWORD *)(a2 + 160) = **(_QWORD **)(a2 + 32);
    *(_BYTE *)(a2 + 168) = 1;
  }
  v74[0] = (char **)0x3FF0000000000000;
  v47 = sub_2233DB7C4(v45, v46, (float *)(a2 + 160), (double *)v74);
  if (v47 == 0.0)
  {
LABEL_61:
    v36 = 0;
    goto LABEL_71;
  }
  if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v48 = fabs(v47);
    if (v47 > 0.0)
      v36 = 1;
    else
      v36 = -1;
    if (v48 > *(double *)v74 * 2.22044605e-16)
      goto LABEL_71;
    goto LABEL_61;
  }
  if (v47 > 0.0)
    v36 = 1;
  else
    v36 = -1;
LABEL_71:
  if (v31)
    v49 = 0;
  else
    v49 = v37 == v36;
  v50 = v49;
  if (v49)
  {
    LODWORD(v66) = 4;
    BYTE12(v65) = 1;
  }
  else
  {
    v51 = v36 * v37;
    v52 = 0x200000001;
    if (v31 == -1)
      v53 = 0x100000002;
    else
      v53 = 0x200000001;
    if (v37 == -1)
      v52 = 0x100000002;
    if (v51 != -1)
      v52 = v53;
    LODWORD(v66) = HIDWORD(v52);
    LODWORD(v60) = 0;
    BYTE12(v65) = (_DWORD)v52 != 3;
    if (HIDWORD(v52) == 2)
      LODWORD(v66) = 1;
  }
  BYTE12(v65) = v50;
LABEL_90:
  v54 = v72;
  if (v7 > 1)
    v54 = &v73;
  if (*v54)
    v55 = 3;
  else
    v55 = 4;
  DWORD2(v61) = 3;
  LODWORD(v60) = v55;
  v59 = *(_QWORD *)(v6 + 8 * (v7 > 1) + 8);
  v56 = v6 + 28 * (v7 > 1);
  *((_QWORD *)&v64 + 1) = *(_QWORD *)(v56 + 24);
  v57 = *(_DWORD *)(v56 + 32);
  DWORD2(v65) = 2;
  LODWORD(v65) = v57;
  *(_QWORD *)&v69 = *(_QWORD *)(v56 + 36);
  LODWORD(v56) = *(_DWORD *)(v56 + 44);
  LODWORD(v70) = 0;
  DWORD2(v69) = v56;
  v74[0] = a5;
  sub_223EB02A0(v74, (uint64_t)&v59);
  return v7 < 2 || v20 == 0;
}

uint64_t sub_223EAFE20(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  double v9;
  int v10;
  double v11;
  _BOOL4 v12;
  uint64_t v13;
  float *v14;
  float *v15;
  double v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double v32;
  int v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  double v57;

  if ((*a1 - 1) > 1)
    return 0;
  result = sub_223EB04E4((uint64_t **)a2);
  if (!(_DWORD)result)
    return result;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v8 = *(float **)(v5 + 16);
  v7 = *(float **)(v5 + 24);
  if (!*(_BYTE *)(v6 + 72))
  {
    sub_223EB0F70(*(_QWORD *)(a2 + 24), v6 + 32, **(float **)(v6 + 24), *(float *)(*(_QWORD *)(v6 + 24) + 4));
    *(_QWORD *)(v6 + 64) = **(_QWORD **)(v6 + 32);
    *(_BYTE *)(v6 + 72) = 1;
  }
  v57 = 1.0;
  v9 = sub_2233DB7C4(v8, v7, (float *)(v6 + 64), &v57);
  if (v9 == 0.0)
    goto LABEL_6;
  if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v9 > 0.0)
      v10 = 1;
    else
      v10 = -1;
  }
  else
  {
    v11 = fabs(v9);
    if (v9 > 0.0)
      v10 = 1;
    else
      v10 = -1;
    if (v11 <= v57 * 2.22044605e-16)
LABEL_6:
      v10 = 0;
  }
  v12 = v10 > 0;
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(float **)(v13 + 16);
  v15 = *(float **)(v13 + 24);
  if (!*(_BYTE *)(v13 + 168))
  {
    sub_223EB11F4(*(_QWORD *)(a2 + 32), v13 + 32, *v15, v15[1]);
    *(_QWORD *)(v13 + 160) = **(_QWORD **)(v13 + 32);
    *(_BYTE *)(v13 + 168) = 1;
  }
  v57 = 1.0;
  v16 = sub_2233DB7C4(v14, v15, (float *)(v13 + 160), &v57);
  if (v16 == 0.0
    || (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && fabs(v16) <= v57 * 2.22044605e-16)
  {
    if ((v10 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_89;
  }
  if (v16 > 0.0)
  {
    if ((v10 & 0x80000000) == 0)
    {
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = *(float **)(v24 + 24);
      v27 = *(float **)(v25 + 24);
      v28 = *v26;
      v29 = *v27;
      if (*v26 == *v27)
        goto LABEL_66;
      v33 = LODWORD(v29) & 0x7FFFFFFF;
      if ((LODWORD(v28) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v36 = __OFSUB__(v33, 2139095039);
        v34 = v33 == 2139095039;
        v35 = v33 - 2139095039 < 0;
      }
      else
      {
        v36 = 0;
        v34 = 0;
        v35 = 0;
      }
      if (v35 ^ v36 | v34)
      {
        v37 = vabds_f32(v28, v29);
        v38 = fabsf(v28);
        v39 = fabsf(v29);
        if (v38 < v39)
          v38 = v39;
        v40 = v38 >= 1.0 ? v38 * 0.00000011921 : 0.00000011921;
        if (v37 <= v40)
        {
LABEL_66:
          v30 = v26[1];
          v31 = v27[1];
          if (v30 == v31)
            goto LABEL_95;
          if ((LODWORD(v30) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v31) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v41 = vabds_f32(v30, v31);
            v42 = fabsf(v30);
            v43 = fabsf(v31);
            if (v42 < v43)
              v42 = v43;
            v44 = v42 >= 1.0 ? v42 * 0.00000011921 : 0.00000011921;
            if (v41 <= v44)
            {
LABEL_95:
              if (!*(_BYTE *)(v25 + 168))
              {
                sub_223EB11F4(*(_QWORD *)(a2 + 32), v25 + 32, v29, v31);
                *(_QWORD *)(v25 + 160) = **(_QWORD **)(v25 + 32);
                *(_BYTE *)(v25 + 168) = 1;
                v24 = *(_QWORD *)(a2 + 24);
              }
              if (!*(_BYTE *)(v24 + 72))
              {
                sub_223EB0F70(v24, v24 + 32, **(float **)(v24 + 24), *(float *)(*(_QWORD *)(v24 + 24) + 4));
                *(_QWORD *)(v24 + 64) = **(_QWORD **)(v24 + 32);
                *(_BYTE *)(v24 + 72) = 1;
              }
              v57 = 1.0;
              v32 = sub_2233DB7C4(v27, (float *)(v25 + 160), (float *)(v24 + 64), &v57);
              if (v32 == 0.0)
                return 0;
              if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
              {
                if (fabs(v32) <= v57 * 2.22044605e-16)
                  return 0;
                v12 = v32 > 0.0 && v10 > 0;
                if (v32 <= 0.0)
                  goto LABEL_89;
                goto LABEL_20;
              }
              if (v32 <= 0.0)
                goto LABEL_89;
            }
          }
        }
      }
      if (v10 <= 0)
        return 0;
LABEL_92:
      result = 1;
      *a1 = 1;
      return result;
    }
LABEL_89:
    *a1 = 2;
    return 1;
  }
  if (v10 > 0)
    goto LABEL_92;
  v17 = *(float **)(*(_QWORD *)(a2 + 24) + 24);
  v18 = *(float **)(*(_QWORD *)(a2 + 32) + 24);
  v19 = *v17;
  v20 = *v18;
  if (*v17 != *v18)
  {
    v45 = LODWORD(v20) & 0x7FFFFFFF;
    if ((LODWORD(v19) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v48 = __OFSUB__(v45, 2139095039);
      v46 = v45 == 2139095039;
      v47 = v45 - 2139095039 < 0;
    }
    else
    {
      v48 = 0;
      v46 = 0;
      v47 = 0;
    }
    if (!(v47 ^ v48 | v46))
      goto LABEL_88;
    v49 = vabds_f32(v19, v20);
    v50 = fabsf(v19);
    v51 = fabsf(v20);
    if (v50 < v51)
      v50 = v51;
    v52 = v50 >= 1.0 ? v50 * 0.00000011921 : 0.00000011921;
    if (v49 > v52)
      goto LABEL_88;
  }
  v21 = v17[1];
  v22 = v18[1];
  if (v21 != v22)
  {
    if ((LODWORD(v21) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v22) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_88;
    v53 = vabds_f32(v21, v22);
    v54 = fabsf(v21);
    v55 = fabsf(v22);
    if (v54 < v55)
      v54 = v55;
    v56 = v54 >= 1.0 ? v54 * 0.00000011921 : 0.00000011921;
    if (v53 > v56)
    {
LABEL_88:
      if (v10)
        goto LABEL_89;
      return 0;
    }
  }
  v23 = sub_223EB092C(a2 + 16);
  v12 = v23 > 0;
  if (v10 < 0 && v23 < 0)
    goto LABEL_89;
LABEL_20:
  if (v12)
    goto LABEL_92;
  return 0;
}

char ***sub_223EB02A0(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v16 = *v4;
    v17 = 0x2E8BA2E8BA2E8BA3 * ((v6 - *v4) >> 4);
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) > 0x1745D1745D1745DLL)
      sub_22316E078();
    v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - (_QWORD)v16) >> 4);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0xBA2E8BA2E8BA2ELL)
      v20 = 0x1745D1745D1745DLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0x1745D1745D1745DLL)
        sub_223174E94();
      v21 = (char *)operator new(176 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[176 * v17];
    *(_QWORD *)v22 = *(_QWORD *)a2;
    *(_OWORD *)(v22 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v22 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v22 + 152) = *(_OWORD *)(a2 + 152);
    *((_QWORD *)v22 + 21) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(v22 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v22 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(v22 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v22 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v22 + 24) = *(_OWORD *)(a2 + 24);
    v23 = *(_OWORD *)(a2 + 40);
    v15 = v22 + 176;
    *(_OWORD *)(v22 + 40) = v23;
    if (v6 != v16)
    {
      do
      {
        v24 = *((_QWORD *)v6 - 22);
        v6 -= 176;
        *((_QWORD *)v22 - 22) = v24;
        v22 -= 176;
        v25 = *(_OWORD *)(v6 + 8);
        v26 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v22 + 40) = *(_OWORD *)(v6 + 40);
        *(_OWORD *)(v22 + 24) = v26;
        *(_OWORD *)(v22 + 8) = v25;
        v27 = *(_OWORD *)(v6 + 56);
        v28 = *(_OWORD *)(v6 + 72);
        v29 = *(_OWORD *)(v6 + 88);
        *(_OWORD *)(v22 + 104) = *(_OWORD *)(v6 + 104);
        *(_OWORD *)(v22 + 88) = v29;
        *(_OWORD *)(v22 + 72) = v28;
        *(_OWORD *)(v22 + 56) = v27;
        v30 = *(_OWORD *)(v6 + 120);
        v31 = *(_OWORD *)(v6 + 136);
        v32 = *(_OWORD *)(v6 + 152);
        *((_QWORD *)v22 + 21) = *((_QWORD *)v6 + 21);
        *(_OWORD *)(v22 + 152) = v32;
        *(_OWORD *)(v22 + 136) = v31;
        *(_OWORD *)(v22 + 120) = v30;
      }
      while (v6 != v16);
      v6 = *v4;
    }
    *v4 = v22;
    v4[1] = v15;
    v4[2] = &v21[176 * v20];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v6 + 24) = v8;
    *(_OWORD *)(v6 + 8) = v7;
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v6 + 88) = v11;
    *(_OWORD *)(v6 + 72) = v10;
    *(_OWORD *)(v6 + 56) = v9;
    v12 = *(_OWORD *)(a2 + 120);
    v13 = *(_OWORD *)(a2 + 136);
    v14 = *(_OWORD *)(a2 + 152);
    *((_QWORD *)v6 + 21) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(v6 + 152) = v14;
    *(_OWORD *)(v6 + 136) = v13;
    *(_OWORD *)(v6 + 120) = v12;
    v15 = v6 + 176;
  }
  v4[1] = v15;
  return a1;
}

uint64_t sub_223EB04E4(uint64_t **a1)
{
  uint64_t v2;
  uint64_t *v3;
  float *v4;
  float *v5;
  double v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  float *v10;
  float *v11;
  double v12;
  int v13;
  uint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v23;
  uint64_t v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double v38;

  v2 = **a1;
  if (*(_BYTE *)(v2 + 97) && (*a1)[1] + 1 >= *(_QWORD *)(v2 + 56))
    return 0;
  v3 = a1[3];
  v4 = (float *)v3[2];
  v5 = (float *)v3[3];
  if (!*((_BYTE *)v3 + 72))
  {
    sub_223EB0F70((uint64_t)a1[3], (uint64_t)(v3 + 4), *v5, v5[1]);
    v3[8] = *(_QWORD *)v3[4];
    *((_BYTE *)v3 + 72) = 1;
  }
  v38 = 1.0;
  v6 = sub_2233DB7C4(v4, v5, (float *)v3 + 16, &v38);
  if (v6 != 0.0 && ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || fabs(v6) > v38 * 2.22044605e-16))
    return 0;
  v7 = *((_DWORD *)a1 + 45);
  if (*((_DWORD *)a1 + 39) || *((_DWORD *)a1 + 40))
  {
    if (v7 != 1)
      return 0;
  }
  else if (a1[8] == (uint64_t *)2)
  {
    if (v7 == -1)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[3];
  v9 = a1[4];
  v11 = (float *)v8[2];
  v10 = (float *)v8[3];
  if (!*((_BYTE *)v9 + 168))
  {
    sub_223EB11F4((uint64_t)a1[4], (uint64_t)(v9 + 4), *(float *)v9[3], *(float *)(v9[3] + 4));
    v9[20] = *(_QWORD *)v9[4];
    *((_BYTE *)v9 + 168) = 1;
  }
  v38 = 1.0;
  v12 = sub_2233DB7C4(v11, v10, (float *)v9 + 40, &v38);
  if (v12 == 0.0)
  {
LABEL_12:
    v13 = 0;
    v14 = (uint64_t)a1[3];
    v15 = *(float **)(v14 + 24);
    if (!*(_BYTE *)(v14 + 72))
      goto LABEL_13;
LABEL_24:
    v16 = (float *)(v14 + 64);
    v17 = (uint64_t)a1[4];
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_25;
    goto LABEL_14;
  }
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v12 > 0.0)
      v13 = 1;
    else
      v13 = -1;
    v14 = (uint64_t)a1[3];
    v15 = *(float **)(v14 + 24);
    if (*(_BYTE *)(v14 + 72))
      goto LABEL_24;
  }
  else
  {
    v18 = fabs(v12);
    if (v12 > 0.0)
      v13 = 1;
    else
      v13 = -1;
    if (v18 <= v38 * 2.22044605e-16)
      goto LABEL_12;
    v14 = (uint64_t)a1[3];
    v15 = *(float **)(v14 + 24);
    if (*(_BYTE *)(v14 + 72))
      goto LABEL_24;
  }
LABEL_13:
  sub_223EB0F70(v14, v14 + 32, *v15, v15[1]);
  *(_QWORD *)(v14 + 64) = **(_QWORD **)(v14 + 32);
  *(_BYTE *)(v14 + 72) = 1;
  v16 = (float *)(v14 + 64);
  v17 = (uint64_t)a1[4];
  if (!*(_BYTE *)(v17 + 168))
  {
LABEL_14:
    sub_223EB11F4(v17, v17 + 32, **(float **)(v17 + 24), *(float *)(*(_QWORD *)(v17 + 24) + 4));
    *(_QWORD *)(v17 + 160) = **(_QWORD **)(v17 + 32);
    *(_BYTE *)(v17 + 168) = 1;
  }
LABEL_25:
  v38 = 1.0;
  v19 = sub_2233DB7C4(v15, v16, (float *)(v17 + 160), &v38);
  if (v19 != 0.0)
  {
    if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v19 <= 0.0)
        v23 = 1;
      else
        v23 = -1;
      if (v13 != v23)
        return 0;
      goto LABEL_34;
    }
    v20 = fabs(v19);
    v21 = v19 <= 0.0 ? 1 : -1;
    if (v20 > v38 * 2.22044605e-16)
    {
      if (v13 == v21)
        goto LABEL_34;
      return 0;
    }
  }
  if (v13)
    return 0;
LABEL_34:
  if (v13)
    return 1;
  v24 = (uint64_t)a1[3];
  v25 = *(float **)(v24 + 16);
  v26 = *(float **)(v24 + 24);
  if (*(_BYTE *)(v24 + 72))
  {
    v27 = *(float *)(v24 + 64);
    v28 = *(float *)(v24 + 68);
    v29 = *v26;
    v30 = v26[1];
    v31 = v25[1] - v30;
    v32 = *v26 - *v25;
    if (v32 != 0.0)
      goto LABEL_55;
  }
  else
  {
    sub_223EB0F70(v24, v24 + 32, *v26, v26[1]);
    v33 = **(_QWORD **)(v24 + 32);
    *(_QWORD *)(v24 + 64) = v33;
    *(_BYTE *)(v24 + 72) = 1;
    v28 = *((float *)&v33 + 1);
    v27 = *(float *)&v33;
    v29 = *v26;
    v30 = v26[1];
    v31 = v25[1] - v30;
    v32 = *v26 - *v25;
    if (v32 != 0.0)
    {
LABEL_55:
      if ((LODWORD(v32) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        return (float)((float)((float)(v30 * v31) - (float)(v29 * v32))
                     + (float)((float)(v32 * v27) - (float)(v31 * v28))) < 0.0;
      v34 = fabsf(v32);
      v35 = 0.00000011921;
      if (v34 >= 1.0)
        v35 = v34 * 0.00000011921;
      if (v34 > v35)
        return (float)((float)((float)(v30 * v31) - (float)(v29 * v32))
                     + (float)((float)(v32 * v27) - (float)(v31 * v28))) < 0.0;
    }
  }
  if (v31 == 0.0)
    return 0;
  if ((LODWORD(v31) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v36 = fabsf(-v31);
    v37 = 0.00000011921;
    if (v36 >= 1.0)
      v37 = v36 * 0.00000011921;
    if (v36 <= v37)
      return 0;
  }
  return (float)((float)((float)(v30 * v31) - (float)(v29 * v32)) + (float)((float)(v32 * v27) - (float)(v31 * v28))) < 0.0;
}

uint64_t sub_223EB092C(uint64_t a1)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(float **)(v2 + 24);
  if (*(_BYTE *)(v2 + 168))
  {
    v4 = (float *)(v2 + 160);
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v5 + 72))
      goto LABEL_3;
  }
  else
  {
    sub_223EB11F4(*(_QWORD *)(a1 + 16), v2 + 32, *v3, v3[1]);
    *(_QWORD *)(v2 + 160) = **(_QWORD **)(v2 + 32);
    *(_BYTE *)(v2 + 168) = 1;
    v4 = (float *)(v2 + 160);
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v5 + 72))
      goto LABEL_3;
  }
  sub_223EB0F70(v5, v5 + 32, **(float **)(v5 + 24), *(float *)(*(_QWORD *)(v5 + 24) + 4));
  *(_QWORD *)(v5 + 64) = **(_QWORD **)(v5 + 32);
  *(_BYTE *)(v5 + 72) = 1;
LABEL_3:
  v9 = 1.0;
  v6 = sub_2233DB7C4(v3, v4, (float *)(v5 + 64), &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

void sub_223EB0A60(_QWORD *a1, uint64_t a2, float *a3, uint64_t a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _BOOL4 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  uint64_t v22;
  double v23;
  int v24;
  double v25;
  uint64_t v26;
  float *v27;
  float *v28;
  double v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  double v35;
  int v36;
  double v37;
  double v38;
  int v39;
  BOOL v40;
  int v41;
  double v42;

  v6 = a3[11];
  v7 = a3[18];
  if (vabds_f32(v6, v7) >= 50.0)
  {
    v11 = v6 < v7;
  }
  else
  {
    v8 = a3[9] / a3[10];
    v9 = a3[17];
    v10 = a3[16] / v9;
    if (v8 == v10)
    {
      v11 = 0;
    }
    else if (COERCE_UNSIGNED_INT(fabs(a3[9] / a3[10])) > 0x7F7FFFFF || COERCE_INT(fabs(a3[16] / v9)) > 2139095039)
    {
      v11 = 1;
    }
    else
    {
      v12 = vabds_f32(v8, v10);
      v13 = fabsf(v8);
      v14 = fabsf(v10);
      if (v13 < v14)
        v13 = v14;
      if (v13 >= 1.0)
        v15 = v13 * 0.00000011921;
      else
        v15 = 0.00000011921;
      v11 = v12 > v15;
    }
    if (v8 >= v10)
      v11 = 0;
  }
  *(_DWORD *)(a2 + 8) = 6;
  *(_QWORD *)a2 = *(_QWORD *)&a3[2 * v11 + 2];
  v16 = &a3[7 * v11];
  v17 = *((_QWORD *)v16 + 3);
  *(float *)(a2 + 88) = v16[8];
  *(_QWORD *)(a2 + 80) = v17;
  v18 = *(_QWORD *)(v16 + 9);
  *(float *)(a2 + 160) = v16[11];
  *(_QWORD *)(a2 + 152) = v18;
  if (*(_BYTE *)(*a1 + 97) && a1[1] + 1 >= *(_QWORD *)(*a1 + 56))
  {
    v24 = 0;
    goto LABEL_37;
  }
  v19 = *(_QWORD *)(a4 + 16);
  v20 = *(float **)(v19 + 24);
  if (*(_BYTE *)(v19 + 168))
  {
    v21 = (float *)(v19 + 160);
    v22 = *(_QWORD *)(a4 + 8);
    if (*(_BYTE *)(v22 + 72))
      goto LABEL_20;
  }
  else
  {
    sub_223EB11F4(*(_QWORD *)(a4 + 16), v19 + 32, *v20, v20[1]);
    *(_QWORD *)(v19 + 160) = **(_QWORD **)(v19 + 32);
    *(_BYTE *)(v19 + 168) = 1;
    v21 = (float *)(v19 + 160);
    v22 = *(_QWORD *)(a4 + 8);
    if (*(_BYTE *)(v22 + 72))
      goto LABEL_20;
  }
  sub_223EB0F70(v22, v22 + 32, **(float **)(v22 + 24), *(float *)(*(_QWORD *)(v22 + 24) + 4));
  *(_QWORD *)(v22 + 64) = **(_QWORD **)(v22 + 32);
  *(_BYTE *)(v22 + 72) = 1;
LABEL_20:
  v42 = 1.0;
  v23 = sub_2233DB7C4(v20, v21, (float *)(v22 + 64), &v42);
  if (v23 == 0.0)
  {
LABEL_21:
    v24 = 0;
    goto LABEL_34;
  }
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
  }
  else
  {
    v25 = fabs(v23);
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
    if (v25 <= v42 * 2.22044605e-16)
      goto LABEL_21;
  }
LABEL_34:
  v26 = *(_QWORD *)(a4 + 8);
  v27 = *(float **)(v26 + 16);
  v28 = *(float **)(v26 + 24);
  if (!*(_BYTE *)(v26 + 72))
  {
    sub_223EB0F70(*(_QWORD *)(a4 + 8), v26 + 32, *v28, v28[1]);
    *(_QWORD *)(v26 + 64) = **(_QWORD **)(v26 + 32);
    *(_BYTE *)(v26 + 72) = 1;
  }
  v42 = 1.0;
  v29 = sub_2233DB7C4(v27, v28, (float *)(v26 + 64), &v42);
  if (v29 == 0.0)
    goto LABEL_37;
  if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v29 > 0.0)
      v30 = 1;
    else
      v30 = -1;
    goto LABEL_38;
  }
  v38 = fabs(v29);
  if (v29 > 0.0)
    v30 = 1;
  else
    v30 = -1;
  if (v38 <= v42 * 2.22044605e-16)
LABEL_37:
    v30 = 0;
LABEL_38:
  v31 = *(_QWORD *)(a4 + 8);
  v32 = *(_QWORD *)(a4 + 16);
  v34 = *(float **)(v31 + 16);
  v33 = *(float **)(v31 + 24);
  if (!*(_BYTE *)(v32 + 168))
  {
    sub_223EB11F4(v32, v32 + 32, **(float **)(v32 + 24), *(float *)(*(_QWORD *)(v32 + 24) + 4));
    *(_QWORD *)(v32 + 160) = **(_QWORD **)(v32 + 32);
    *(_BYTE *)(v32 + 168) = 1;
  }
  v42 = 1.0;
  v35 = sub_2233DB7C4(v34, v33, (float *)(v32 + 160), &v42);
  if (v35 == 0.0)
  {
LABEL_41:
    v36 = 0;
    goto LABEL_57;
  }
  if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v37 = fabs(v35);
    if (v35 > 0.0)
      v36 = 1;
    else
      v36 = -1;
    if (v37 > v42 * 2.22044605e-16)
      goto LABEL_57;
    goto LABEL_41;
  }
  if (v35 > 0.0)
    v36 = 1;
  else
    v36 = -1;
LABEL_57:
  if (v24 || v30 != v36)
  {
    if (v36 * v30 == -1)
      v40 = v30 == -1;
    else
      v40 = v24 == -1;
    if (v40)
      v41 = 2;
    else
      v41 = 1;
    *(_DWORD *)(a2 + 32) = v41;
    if (v40)
      v39 = 1;
    else
      v39 = 2;
  }
  else
  {
    v39 = 4;
    *(_DWORD *)(a2 + 32) = 4;
  }
  *(_DWORD *)(a2 + 104) = v39;
}

void sub_223EB0E40(uint64_t a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  sub_223EB1938((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_24EC63CC0, (void (*)(void *))sub_223EB19F4);
}

void sub_223EB0E88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223EB0E9C(uint64_t a1, std::string::value_type a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_24EC63D90;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_2236226A8((void **)(a1 + 8), "Boost.Geometry Turn exception: ", 0x1FuLL);
  std::string::push_back(v4, a2);
  return a1;
}

void sub_223EB0F00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_223EB0F24(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_24EC63D90;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

uint64_t sub_223EB0F70(uint64_t result, uint64_t a2, float a3, float a4)
{
  float v4;
  float *v5;
  float *v6;
  char v7;
  float *v8;
  float *v9;
  unint64_t v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;

  v4 = fabsf(a4);
  v6 = *(float **)(a2 + 8);
  v5 = *(float **)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v8 = *(float **)a2;
  v9 = v6 + 2;
  if ((LODWORD(a3) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v10 = 0;
    v11 = fabsf(a3);
    while (1)
    {
      v14 = *v8;
      v13 = v8[1];
      if (a3 != *v8)
      {
        if ((LODWORD(v14) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          return result;
        v15 = vabds_f32(a3, v14);
        v16 = fabsf(v14);
        if (v11 >= v16)
          v16 = v11;
        v17 = v16 >= 1.0 ? v16 * 0.00000011921 : 0.00000011921;
        if (v15 > v17)
          return result;
      }
      if (a4 != v13)
      {
        if ((LODWORD(a4) & 0x7FFFFFFFu) >= 0x7F800000 || (LODWORD(v13) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          return result;
        v18 = vabds_f32(a4, v13);
        v19 = fabsf(v13);
        if (v4 >= v19)
          v19 = v4;
        v20 = v19 >= 1.0 ? v19 * 0.00000011921 : 0.00000011921;
        if (v18 > v20)
          return result;
      }
      if (v10 >= *(_QWORD *)(*(_QWORD *)result + 72))
        return result;
      v12 = v8 + 2;
      *(_QWORD *)a2 = v8 + 2;
      if (v8 + 2 == v5)
      {
        *(_QWORD *)a2 = v6;
        if (!v7)
          goto LABEL_3;
        *(_QWORD *)a2 = v9;
        v12 = v6 + 2;
        if (v8 == v6)
          break;
      }
LABEL_4:
      ++v10;
      v8 = v12;
    }
    *(_QWORD *)a2 = v6;
LABEL_3:
    v12 = v6;
    goto LABEL_4;
  }
  if (a3 == *v8)
  {
    v21 = v8[1];
    if ((LODWORD(a4) & 0x7FFFFFFFu) < 0x7F800000)
    {
      v22 = -1;
      while (1)
      {
        if (a4 != v21)
        {
          if ((LODWORD(v21) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            return result;
          v24 = vabds_f32(a4, v21);
          v25 = fabsf(v21);
          if (v4 >= v25)
            v25 = v4;
          v26 = v25 >= 1.0 ? v25 * 0.00000011921 : 0.00000011921;
          if (v24 > v26)
            return result;
        }
        if ((unint64_t)++v22 >= *(_QWORD *)(*(_QWORD *)result + 72))
          return result;
        v23 = v8 + 2;
        *(_QWORD *)a2 = v8 + 2;
        if (v8 + 2 == v5)
        {
          *(_QWORD *)a2 = v6;
          if (v7)
          {
            *(_QWORD *)a2 = v9;
            v23 = v6 + 2;
            if (v8 != v6)
              goto LABEL_31;
            *(_QWORD *)a2 = v6;
          }
          v23 = v6;
        }
LABEL_31:
        v21 = v23[1];
        v8 = v23;
        if (a3 != *v23)
          return result;
      }
    }
    if (*(_BYTE *)(a2 + 24))
    {
      v27 = -1;
      do
      {
        if (a4 != v21)
          break;
        if ((unint64_t)++v27 >= *(_QWORD *)(*(_QWORD *)result + 72))
          break;
        v28 = v8 + 2;
        *(_QWORD *)a2 = v8 + 2;
        if (v8 + 2 == v5)
        {
          *(_QWORD *)a2 = v9;
          v28 = v6 + 2;
          if (v8 == v6)
          {
            *(_QWORD *)a2 = v6;
            v28 = v6;
          }
        }
        v21 = v28[1];
        v8 = v28;
      }
      while (a3 == *v28);
    }
    else
    {
      v29 = -1;
      do
      {
        if (a4 != v21)
          break;
        if ((unint64_t)++v29 >= *(_QWORD *)(*(_QWORD *)result + 72))
          break;
        v8 += 2;
        if (v8 == v5)
          v8 = v6;
        *(_QWORD *)a2 = v8;
        v21 = v8[1];
      }
      while (a3 == *v8);
    }
  }
  return result;
}

float sub_223EB11F4(uint64_t a1, uint64_t a2, float result, float a4)
{
  unint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v4 = 0;
  v5 = fabsf(result);
  v6 = fabsf(a4);
  v7 = *(_QWORD *)(a2 + 112);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a2 + 120);
  while (1)
  {
    v10 = *(float **)a2;
    v12 = **(float **)a2;
    v11 = *(float *)(*(_QWORD *)a2 + 4);
    if (v12 != result)
    {
      if ((LODWORD(result) & 0x7FFFFFFFu) >= 0x7F800000 || (LODWORD(v12) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        return result;
      v13 = vabds_f32(result, v12);
      v14 = fabsf(v12);
      if (v5 >= v14)
        v14 = v5;
      v15 = v14 >= 1.0 ? v14 * 0.00000011921 : 0.00000011921;
      if (v13 > v15)
        return result;
    }
    if (v11 != a4)
    {
      if ((LODWORD(a4) & 0x7FFFFFFFu) >= 0x7F800000 || (LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        return result;
      v16 = vabds_f32(a4, v11);
      v17 = fabsf(v11);
      if (v6 >= v17)
        v17 = v6;
      v18 = v17 >= 1.0 ? v17 * 0.00000011921 : 0.00000011921;
      if (v16 > v18)
        return result;
    }
    if (v4 >= *(_QWORD *)(*(_QWORD *)a1 + 72))
      return result;
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(_QWORD *)(a2 + 32);
    v21 = v20 + 1;
    *(_QWORD *)(a2 + 32) = v20 + 1;
    if (v20 + 1 >= v19)
    {
      if (v20 >= v19)
      {
        *(_QWORD *)a2 = *(_QWORD *)(a2 + 16);
        if (v21 != v7)
          goto LABEL_2;
      }
      else
      {
        *(_QWORD *)a2 = *(_QWORD *)(a2 + 8) + 8 * (v21 % v19);
        if (v21 != v7)
          goto LABEL_2;
      }
    }
    else
    {
      *(_QWORD *)a2 = v10 + 2;
      if (v21 != v7)
        goto LABEL_2;
    }
    v22 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)a2 = *v8;
    *(_OWORD *)(a2 + 16) = v22;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 72);
    if (v9)
    {
      v24 = *(_QWORD *)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v23 + 1;
      if (v23 + 1 >= v24)
      {
        if (v23 >= v24)
        {
          *(_QWORD *)a2 = *(_QWORD *)(a2 + 16);
          if (v23 != v20)
            goto LABEL_2;
        }
        else
        {
          *(_QWORD *)a2 = *(_QWORD *)(a2 + 8) + 8 * ((v23 + 1) % v24);
          if (v23 != v20)
            goto LABEL_2;
        }
      }
      else
      {
        *(_QWORD *)a2 += 8;
        if (v23 != v20)
          goto LABEL_2;
      }
      v25 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)a2 = *v8;
      *(_OWORD *)(a2 + 16) = v25;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 72);
    }
LABEL_2:
    ++v4;
  }
}

uint64_t sub_223EB13CC(uint64_t result, float *a2, float *a3, uint64_t a4, int a5, int32x4_t a6)
{
  int32x4_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int16x8_t v11;
  int v12;
  int v13;
  int v14;
  int32x4_t v15;
  int v16;
  int16x8_t v17;
  unsigned __int32 v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  char v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  a6.i64[0] = *(_QWORD *)(a4 + 116);
  v6 = vzip1q_s32(a6, a6);
  if (*(_QWORD *)(a4 + 92))
  {
    v11 = (int16x8_t)vceqq_s32(v6, (int32x4_t)xmmword_22468FF00);
    *(int16x4_t *)v11.i8 = vmovn_s32((int32x4_t)v11);
    if ((v11.i16[1] & (unsigned __int16)a5) != 0)
      v12 = 3;
    else
      v12 = 1;
    *(_DWORD *)result = v12;
    *(_DWORD *)(result + 4) = 1;
    *(int8x8_t *)v11.i8 = vand_s8(*(int8x8_t *)v11.i8, (int8x8_t)0x1000100010001);
    *(_DWORD *)(result + 8) = vmovn_s16(v11).u32[0];
    return result;
  }
  if (*(_QWORD *)a4 == 2)
  {
    v7 = *(unsigned __int8 *)(a4 + 81);
    *(_DWORD *)result = 2;
    if (v7)
    {
      if (a6.i32[1] == 1)
        v8 = 3;
      else
        v8 = 1;
      *(_DWORD *)(result + 4) = v8;
      if (a5)
        v9 = 3;
      else
        v9 = 1;
      if (a6.i32[0] == -1)
        v9 = 1;
      if (a6.i32[0] == 1)
        v10 = 3;
      else
        v10 = v9;
      *(_DWORD *)(result + 12) = v10;
      *(_DWORD *)(result + 16) = 2;
      *(_BYTE *)(result + 8) = a6.i32[1] != 1;
      *(_BYTE *)(result + 11) = a6.i32[1] != -1;
      *(_BYTE *)(result + 21) = a6.i32[0] != -1;
      *(_BYTE *)(result + 22) = a6.i32[0] != 1;
      return result;
    }
    *(_DWORD *)(result + 4) = 2;
    v18 = a6.i32[0];
    if (a6.i32[0] == 1)
    {
      v19 = 3;
    }
    else if (a6.i32[0] == -1)
    {
      v19 = 1;
    }
    else if (a5)
    {
      v19 = 3;
    }
    else
    {
      v19 = 1;
    }
    if (a6.i32[1] == 1)
      v20 = 3;
    else
      v20 = 1;
    *(_DWORD *)(result + 12) = v19;
    *(_DWORD *)(result + 16) = v20;
    v21 = *a2;
    v22 = *(float *)(a4 + 8);
    if (*a2 != v22)
    {
      if ((LODWORD(v21) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v22) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_63;
      v26 = vabds_f32(v21, v22);
      v27 = fabsf(v21);
      v28 = fabsf(v22);
      if (v27 < v28)
        v27 = v28;
      v29 = v27 >= 1.0 ? v27 * 0.00000011921 : 0.00000011921;
      if (v26 > v29)
        goto LABEL_63;
    }
    v23 = a2[1];
    v24 = *(float *)(a4 + 12);
    if (v23 == v24)
      goto LABEL_44;
    if ((LODWORD(v23) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v24) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_63;
    v30 = vabds_f32(v23, v24);
    v31 = fabsf(v23);
    v32 = fabsf(v24);
    if (v31 < v32)
      v31 = v32;
    v33 = v31 >= 1.0 ? v31 * 0.00000011921 : 0.00000011921;
    if (v30 <= v33)
    {
LABEL_44:
      *(_BYTE *)(result + 8) = 1;
      v25 = *a3;
      if (*a3 == v22)
      {
LABEL_64:
        v34 = a3[1];
        v35 = *(float *)(a4 + 12);
        if (v34 == v35)
          goto LABEL_65;
        if ((LODWORD(v34) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v35) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v41 = vabds_f32(v34, v35);
          v42 = fabsf(v34);
          v43 = fabsf(v35);
          if (v42 < v43)
            v42 = v43;
          v44 = v42 >= 1.0 ? v42 * 0.00000011921 : 0.00000011921;
          if (v41 <= v44)
          {
LABEL_65:
            v36 = 1;
LABEL_84:
            *(_BYTE *)(result + 10) = v36;
            *(_BYTE *)(result + 21) = v18 != -1;
            *(_BYTE *)(result + 23) = a6.i32[1] != -1;
            return result;
          }
        }
LABEL_83:
        v36 = 0;
        goto LABEL_84;
      }
    }
    else
    {
LABEL_63:
      *(_BYTE *)(result + 8) = 0;
      v25 = *a3;
      if (*a3 == v22)
        goto LABEL_64;
    }
    if ((LODWORD(v25) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v22) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_83;
    v37 = vabds_f32(v25, v22);
    v38 = fabsf(v25);
    v39 = fabsf(v22);
    if (v38 >= v39)
      v39 = v38;
    v40 = v39 >= 1.0 ? v39 * 0.00000011921 : 0.00000011921;
    if (v37 > v40)
      goto LABEL_83;
    goto LABEL_64;
  }
  if (a5)
    v13 = 3;
  else
    v13 = 1;
  if (a6.i32[0] == -1)
    v13 = 1;
  if (a6.i32[0] == 1)
    v14 = 3;
  else
    v14 = v13;
  v15.i64[0] = 0xFFFFFFFFLL;
  v15.i64[1] = 0xFFFFFFFFLL;
  if (a6.i32[1] == 1)
    v16 = 3;
  else
    v16 = 1;
  *(_DWORD *)result = v14;
  *(_DWORD *)(result + 4) = v16;
  v17 = (int16x8_t)vceqq_s32(v6, v15);
  *(int8x8_t *)v17.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v17), (int8x8_t)0x1000100010001);
  *(_DWORD *)(result + 8) = vmovn_s16(v17).u32[0];
  return result;
}

uint64_t sub_223EB1724(float *a1, float *a2, float *a3)
{
  double v3;
  uint64_t result;
  double v5;
  double v6;

  v6 = 1.0;
  v3 = sub_2233DB7C4(a2, a3, a1, &v6);
  if (v3 == 0.0)
    return 0;
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v3 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = fabs(v3);
    if (v3 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v5 <= v6 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_223EB17C0(float *a1, float *a2, float *a3)
{
  double v3;
  uint64_t result;
  double v5;
  double v6;

  v6 = 1.0;
  v3 = sub_2233DB7C4(a1, a2, a3, &v6);
  if (v3 == 0.0)
    return 0;
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v3 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = fabs(v3);
    if (v3 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v5 <= v6 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_223EB184C(uint64_t a1)
{
  uint64_t v2;
  float *v3;
  float *v4;
  double v5;
  uint64_t result;
  double v7;
  double v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(float **)(v2 + 24);
  if (!*(_BYTE *)(v2 + 168))
  {
    sub_223EB11F4(*(_QWORD *)(a1 + 8), v2 + 32, *v3, v3[1]);
    *(_QWORD *)(v2 + 160) = **(_QWORD **)(v2 + 32);
    *(_BYTE *)(v2 + 168) = 1;
  }
  v4 = *(float **)(*(_QWORD *)(a1 + 16) + 24);
  v8 = 1.0;
  v5 = sub_2233DB7C4(v3, (float *)(v2 + 160), v4, &v8);
  if (v5 == 0.0)
    return 0;
  if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v5 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v7 = fabs(v5);
    if (v5 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v7 <= v8 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_223EB1938(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_24EC36548;
  v5 = a1 + 16;
  *(_QWORD *)(a1 + 8) = off_24EC63D90;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_223197FA4((_BYTE *)v5, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = &off_24EC63D18;
  *(_QWORD *)(a1 + 8) = &unk_24EC63D48;
  *(_QWORD *)(a1 + 40) = &unk_24EC63D70;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 56) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_223EB19E0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223EB19F4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 8) = off_24EC63D90;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t sub_223EB1A84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = &unk_24EC36548;
  *(_QWORD *)(v2 + 8) = off_24EC63D90;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_223197FA4((_BYTE *)(v2 + 16), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  }
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v3 + 40) = &unk_24EC365A0;
  *(_QWORD *)(v3 + 48) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 56);
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a1 + 72);
  *(_QWORD *)v3 = &off_24EC63D18;
  *(_QWORD *)(v3 + 8) = &unk_24EC63D48;
  *(_QWORD *)(v3 + 40) = &unk_24EC63D70;
  sub_2233E5A54(v3 + 40, a1 + 40);
  return v3;
}

void sub_223EB1B7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x227684CE8](v1, 0x10F3C40FA28A64DLL);
  _Unwind_Resume(a1);
}

void sub_223EB1BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_223EB1BE0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  sub_223EB1F34((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24EC63CC0, (void (*)(void *))sub_223EB19F4);
}

void sub_223EB1C1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223EB1C30(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 8) = off_24EC63D90;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_223EB1CB8(std::exception *this)
{
  std::exception_vtbl *v2;

  this[4].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = this[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[5].__vftable = 0;
  this->__vftable = (std::exception_vtbl *)off_24EC63D90;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

void sub_223EB1D34(std::exception *this)
{
  std::exception_vtbl *v2;

  this[4].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = this[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[5].__vftable = 0;
  this->__vftable = (std::exception_vtbl *)off_24EC63D90;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223EB1DBC(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_223EB1DD8(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  a1[-4].__vftable = (std::exception_vtbl *)off_24EC63D90;
  if (SHIBYTE(a1[-1].__vftable) < 0)
    operator delete(a1[-3].__vftable);
  std::exception::~exception(a1 - 4);
}

void sub_223EB1E58(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  a1[-4].__vftable = (std::exception_vtbl *)off_24EC63D90;
  if (SHIBYTE(a1[-1].__vftable) < 0)
    operator delete(a1[-3].__vftable);
  std::exception::~exception(a1 - 4);
  JUMPOUT(0x227684CE8);
}

void sub_223EB1EE4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24EC63D90;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223EB1F34(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_24EC36548;
  *(_QWORD *)(a1 + 8) = off_24EC63D90;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &unk_24EC365A0;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)a1 = &off_24EC63D18;
  *(_QWORD *)(a1 + 8) = &unk_24EC63D48;
  *(_QWORD *)(a1 + 40) = &unk_24EC63D70;
  return a1;
}

void sub_223EB2004(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_223EB2018(_Unwind_Exception *a1)
{
  std::exception *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 8) = v4;
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_223EB2040(uint64_t a1, _QWORD **a2, double *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p;
  size_t v21;
  int64_t v22;
  std::string v23;

  std::to_string(&v23, *a3);
  v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v23;
  else
    v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v8 = size;
  do
  {
    if (!v8)
    {
      v8 = -1;
      if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_2231813E8(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_51;
    }
    v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_16:
  if (strtod((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    goto LABEL_15;
  }
  v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v23.__r_.__value_.__l.__size_;
  v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46)
    v12 = 2;
  v13 = v12 + v8;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v21 = v14;
    v22 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14)
LABEL_40:
    memmove(p_p, v11, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  sub_2231813E8(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_48;
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_223EB2240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EB22AC(uint64_t a1, uint64_t a2, unsigned int a3, float a4, float a5)
{
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  double v15;
  double v16;
  double v17;
  float32x2_t v18;
  double v19;
  float32x2_t v20;
  float32x2_t v21;
  uint64_t v22;
  int v23;
  int v24;
  float32x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  float32x2_t v29;
  double v30;
  float32x2_t v31;
  int32x4_t v32;
  float32x2_t v33;
  _QWORD *v34;
  _QWORD *i;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int8x16_t v40;
  uint64_t v41;
  int16x4_t v42;
  int8x16_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  __int128 v60;
  uint64_t *v61;
  uint64_t v62;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = *(const void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v12 = v10 - *(_QWORD *)a2;
  if (v10 != *(_QWORD *)a2)
  {
    if (v12 < 0)
      sub_22316E078();
    v13 = (char *)operator new(v10 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = &v13[8 * (v12 >> 3)];
    v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v13, v11, v14);
    *(_QWORD *)(a1 + 8) = &v13[v14];
  }
  sub_22329A5CC((_QWORD *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_224656660;
  v21.i32[1] = 0x800000;
  *(_QWORD *)(a1 + 88) = 0x80000000800000;
  *(float *)(a1 + 96) = a4;
  *(float *)(a1 + 100) = a5;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 108) = 1065353216;
  *(_DWORD *)(a1 + 124) = 1065353216;
  if (a3 > 4)
  {
    LODWORD(v15) = 1.0;
    v21.i32[0] = 0;
    LODWORD(v16) = 0;
    LODWORD(v17) = 0;
    v18.i32[0] = 1.0;
    LODWORD(v19) = 0;
    v20.i32[0] = 1.0;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    v22 = 4 * (int)a3;
    v21.i32[0] = *(_DWORD *)((char *)&unk_224690010 + v22);
    LODWORD(v15) = *(_DWORD *)((char *)&unk_224690024 + v22);
    LODWORD(v16) = *(_DWORD *)((char *)&unk_224690038 + v22);
    LODWORD(v17) = *(_DWORD *)((char *)&unk_22469004C + v22);
    v18.i32[0] = *(_DWORD *)((char *)&unk_224690060 + v22);
    LODWORD(v19) = *(_DWORD *)((char *)&unk_224690074 + v22);
    v20.i32[0] = *(_DWORD *)((char *)&unk_224690088 + v22);
    v23 = *(_DWORD *)((char *)&unk_22469009C + v22);
    v24 = *(_DWORD *)((char *)&unk_2246900B0 + v22);
  }
  *(_DWORD *)(a1 + 108) = v20.i32[0];
  *(_DWORD *)(a1 + 112) = v24;
  *(_DWORD *)(a1 + 116) = v23;
  *(_DWORD *)(a1 + 120) = v21.i32[0];
  *(_DWORD *)(a1 + 124) = LODWORD(v15);
  *(_DWORD *)(a1 + 128) = LODWORD(v16);
  *(_DWORD *)(a1 + 132) = LODWORD(v17);
  *(_DWORD *)(a1 + 136) = LODWORD(v19);
  *(_DWORD *)(a1 + 140) = v18.i32[0];
  v61 = &v62;
  v62 = a1;
  sub_223EB2638(&v61, (_QWORD *)a1, v21, v15, v16, v17, v18, v19, v20);
  v34 = *(_QWORD **)(a1 + 24);
  for (i = *(_QWORD **)(a1 + 32); v34 != i; v34 += 3)
    sub_223EB2638(&v61, v34, v25, *(double *)v26.i64, *(double *)v27.i64, v28, v29, v30, v31);
  v60 = xmmword_2245F53F0;
  v36 = *(uint64_t **)a1;
  v37 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 == v37)
  {
    sub_2233DC1C4((_QWORD *)(a1 + 24), (int32x2_t *)&v60);
  }
  else
  {
    v39 = *v36;
    v38 = v36 + 1;
    v40.i64[0] = v39;
    v40.i64[1] = v39;
    v60 = (__int128)v40;
    if (v38 != v37)
    {
      v26 = v40;
      do
      {
        v41 = *v38++;
        v27.i64[0] = v41;
        v27.i64[1] = v41;
        v42.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v40, (float32x4_t)v27)).u32[0];
        v29 = (float32x2_t)vmovn_s32(vcgtq_f32((float32x4_t)v27, (float32x4_t)v40));
        v42.i32[1] = v29.i32[1];
        v43 = (int8x16_t)vmovl_s16(v42);
        v26 = vbslq_s8(v43, v27, v26);
        v40 = vbslq_s8(v43, v27, v40);
      }
      while (v38 != v37);
      v60 = (__int128)v26;
    }
  }
  v44 = *(float32x2_t *)(a1 + 108);
  v27.i32[0] = *(_DWORD *)(a1 + 116);
  v45 = *(float32x2_t *)(a1 + 120);
  v29.i32[0] = *(_DWORD *)(a1 + 128);
  v46.i64[0] = *(_QWORD *)(a1 + 132);
  v31.i32[0] = *(_DWORD *)(a1 + 140);
  v47 = *(float *)(a1 + 92);
  v33.i32[0] = *(_DWORD *)(a1 + 96);
  *(float32x2_t *)v32.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v44, *(float *)&v60), v45, *(float32x2_t *)&v60, 1), *(float32x2_t *)v46.f32, v33.f32[0]);
  LODWORD(v48) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)&v60), v29, *(float32x2_t *)&v60, 1), v33, v31).u32[0];
  v49 = *(float *)(a1 + 72);
  if (*(float *)v32.i32 < v49)
    v49 = *(float *)v32.i32;
  if (v47 < v48)
    v47 = v48;
  v33.f32[0] = v33.f32[0] + *(float *)(a1 + 100);
  *(float32x2_t *)v26.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v44, *((float *)&v60 + 2)), v45, *(float32x2_t *)((char *)&v60 + 8), 1), *(float32x2_t *)v46.f32, v33.f32[0]);
  LODWORD(v50) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)((char *)&v60 + 8)), v29, *(float32x2_t *)((char *)&v60 + 8), 1), v33, v31).u32[0];
  v51 = *(int8x16_t *)(a1 + 76);
  v52 = (int8x16_t)vuzp2q_s32(v32, vzip1q_s32(v32, v32));
  v46.i64[1] = v51.i64[1];
  v46.i32[0] = v52.i32[0];
  if (*(float *)v26.i32 < v49)
    v49 = *(float *)v26.i32;
  v46.f32[1] = v48;
  v53.i64[1] = v52.i64[1];
  v53.i64[0] = *(_QWORD *)(a1 + 76);
  *(float *)(a1 + 72) = v49;
  *(float *)&v52.i32[1] = v48;
  v54 = vbslq_s8((int8x16_t)vcgtq_f32(v53, v46), v52, v51);
  v55 = (int8x16_t)vuzp2q_s32((int32x4_t)v26, vzip1q_s32((int32x4_t)v26, (int32x4_t)v26));
  v56.i64[1] = v54.i64[1];
  v56.i64[0] = __PAIR64__(LODWORD(v50), v55.u32[0]);
  v57.i64[1] = v55.i64[1];
  v57.i64[0] = v54.i64[0];
  *(float *)&v55.i32[1] = v50;
  *(int8x16_t *)(a1 + 76) = vbslq_s8((int8x16_t)vcgtq_f32(v57, v56), v55, v54);
  if (v47 >= v50)
    v58 = v47;
  else
    v58 = v50;
  *(float *)(a1 + 92) = v58;
  return a1;
}

void sub_223EB25EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  sub_223295A74(v1);
  _Unwind_Resume(a1);
}

void sub_223EB2638(uint64_t **a1, _QWORD *a2, float32x2_t a3, double a4, double a5, double a6, float32x2_t a7, double a8, float32x2_t a9)
{
  float32x2_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  float v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  _BYTE *v42;
  uint64_t v43;
  char *v44;
  float v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v10 = a2[1] - *a2;
  if (v10)
  {
    v13 = 0;
    v14 = v10 >> 3;
    v50 = v10 >> 3;
    while (2)
    {
      while (2)
      {
        v17 = v13++;
        v18 = *a2 + 8 * v17;
        v19 = *a2 + 8 * (v13 % (unint64_t)((uint64_t)(a2[1] - *a2) >> 3));
        v20 = **a1;
        a3.i32[0] = *(_DWORD *)v18;
        LODWORD(a4) = *(_DWORD *)(v18 + 4);
        LODWORD(a5) = *(_DWORD *)(v20 + 96);
        v21 = *(float32x2_t *)(v20 + 108);
        a7.i32[0] = *(_DWORD *)(v20 + 116);
        v22 = *(float32x2_t *)(v20 + 120);
        a9.i32[0] = *(_DWORD *)(v20 + 128);
        v23 = *(float32x2_t *)(v20 + 132);
        v9.i32[0] = *(_DWORD *)(v20 + 140);
        *(float32x2_t *)&v25 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v21, *(float *)v18), v22, *(float *)&a4), v23, *(float *)&a5);
        v24 = vmla_f32(vmla_f32(vmul_f32(a7, a3), *(float32x2_t *)&a4, a9), *(float32x2_t *)&a5, v9);
        *((float32x2_t *)&v25 + 1) = v24;
        v24.i32[0] = *(_DWORD *)v19;
        LODWORD(a4) = *(_DWORD *)(v19 + 4);
        *(float32x2_t *)&v26 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v21, *(float *)v19), v22, *(float *)&a4), v23, *(float *)&a5);
        a3 = vmla_f32(vmla_f32(vmul_f32(a7, v24), *(float32x2_t *)&a4, a9), *(float32x2_t *)&a5, v9);
        *((float32x2_t *)&v26 + 1) = a3;
        v28 = *(char **)(v20 + 56);
        v27 = *(_QWORD *)(v20 + 64);
        if ((unint64_t)v28 < v27)
        {
          v29 = *(float *)(v20 + 100);
          v15 = *(unsigned int *)(v20 + 104);
          *((_DWORD *)v28 + 2) = DWORD2(v25);
          *(_QWORD *)(v28 + 12) = v26;
          v30 = v28 + 12;
          *(_QWORD *)v28 = v25;
          *((_DWORD *)v28 + 5) = DWORD2(v26);
          *((float *)v28 + 6) = v29;
          v31 = 0;
          switch((int)v15)
          {
            case 0:
              goto LABEL_4;
            case 1:
              goto LABEL_21;
            case 2:
              v15 = 1;
              goto LABEL_4;
            case 3:
              v31 = 1;
              goto LABEL_21;
            case 4:
              v15 = 2;
LABEL_4:
              v28[28] = v15;
              v16 = *(float *)&v28[4 * v15] - v29;
              *(float *)&v28[4 * v15] = v16;
              *(float *)&v30[4 * v15] = v16;
              *(_QWORD *)(v20 + 56) = v28 + 32;
              if (v13 != v14)
                continue;
              return;
            default:
              v31 = 2;
LABEL_21:
              v28[28] = v31;
              *(_DWORD *)&v30[4 * v31] = *(_DWORD *)&v28[4 * v31];
              *(_QWORD *)(v20 + 56) = v28 + 32;
              if (v13 == v14)
                return;
              continue;
          }
        }
        break;
      }
      v32 = *(_BYTE **)(v20 + 48);
      v33 = (v28 - v32) >> 5;
      v34 = v33 + 1;
      if (!((unint64_t)(v33 + 1) >> 59))
      {
        v35 = *(float *)(v20 + 100);
        v36 = *(unsigned int *)(v20 + 104);
        v37 = v27 - (_QWORD)v32;
        if (v37 >> 4 > v34)
          v34 = v37 >> 4;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0)
          v38 = 0x7FFFFFFFFFFFFFFLL;
        else
          v38 = v34;
        if (v38)
        {
          v51 = v26;
          v52 = v25;
          if (v38 >> 59)
            sub_223174E94();
          v39 = (char *)operator new(32 * v38);
          v26 = v51;
          v25 = v52;
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[32 * v33];
        *(_QWORD *)v40 = v25;
        *((_DWORD *)v40 + 2) = DWORD2(v25);
        *(_QWORD *)(v40 + 12) = v26;
        v41 = v40 + 12;
        *((_DWORD *)v40 + 5) = DWORD2(v26);
        *((float *)v40 + 6) = v35;
        v42 = v40 + 28;
        v43 = 0;
        switch((int)v36)
        {
          case 0:
            goto LABEL_29;
          case 1:
            goto LABEL_26;
          case 2:
            v36 = 1;
            goto LABEL_29;
          case 3:
            v43 = 1;
            goto LABEL_26;
          case 4:
            v36 = 2;
LABEL_29:
            *v42 = v36;
            v45 = *(float *)&v40[4 * v36] - v35;
            *(float *)&v40[4 * v36] = v45;
            *(float *)&v41[4 * v36] = v45;
            v44 = &v39[32 * v33];
            if (v28 != v32)
              goto LABEL_30;
            goto LABEL_32;
          default:
            v43 = 2;
LABEL_26:
            *v42 = v43;
            *(_DWORD *)&v41[4 * v43] = *(_DWORD *)&v40[4 * v43];
            v44 = &v39[32 * v33];
            if (v28 == v32)
              goto LABEL_32;
            do
            {
LABEL_30:
              v46 = *((_QWORD *)v28 - 4);
              v28 -= 32;
              v47 = *((_DWORD *)v28 + 2);
              *((_QWORD *)v44 - 4) = v46;
              v44 -= 32;
              *((_DWORD *)v44 + 2) = v47;
              v48 = *(_QWORD *)(v28 + 12);
              *((_DWORD *)v44 + 5) = *((_DWORD *)v28 + 5);
              *(_QWORD *)(v44 + 12) = v48;
              LODWORD(v48) = *((_DWORD *)v28 + 6);
              v44[28] = v28[28];
              *((_DWORD *)v44 + 6) = v48;
            }
            while (v28 != v32);
            v28 = *(char **)(v20 + 48);
LABEL_32:
            v49 = v40 + 32;
            *(_QWORD *)(v20 + 48) = v44;
            *(_QWORD *)(v20 + 56) = v40 + 32;
            *(_QWORD *)(v20 + 64) = &v39[32 * v38];
            if (v28)
              operator delete(v28);
            v14 = v50;
            *(_QWORD *)(v20 + 56) = v49;
            if (v13 == v50)
              return;
            continue;
        }
      }
      break;
    }
    sub_22316E078();
  }
}

unint64_t sub_223EB2980@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;

  result = sub_2241498F4((uint64_t)a2, 0);
  v5 = *(_QWORD *)(a1 + 48);
  for (i = *(_QWORD *)(a1 + 56); v5 != i; v5 += 32)
  {
    v9 = *a2;
    v8 = a2[1];
    v10 = *(_QWORD *)v5;
    v29 = *(_DWORD *)(v5 + 8);
    v28 = v10;
    if (v8 >= a2[2])
    {
      v12 = sub_2233B2B48(a2, &v28);
    }
    else
    {
      v11 = *(_QWORD *)v5;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v5 + 8);
      *(_QWORD *)v8 = v11;
      v12 = v8 + 12;
    }
    a2[1] = v12;
    *((float *)&v28 + *(unsigned __int8 *)(v5 + 28)) = *(float *)(v5 + 24)
                                                     + *((float *)&v28 + *(unsigned __int8 *)(v5 + 28));
    if (v12 >= a2[2])
    {
      v14 = sub_2233B2B48(a2, &v28);
    }
    else
    {
      v13 = v28;
      *(_DWORD *)(v12 + 8) = v29;
      *(_QWORD *)v12 = v13;
      v14 = v12 + 12;
    }
    a2[1] = v14;
    v15 = *(_QWORD *)(v5 + 12);
    v27 = *(_DWORD *)(v5 + 20);
    v26 = v15;
    if (v14 >= a2[2])
    {
      v17 = sub_2233B2B48(a2, &v26);
    }
    else
    {
      v16 = *(_QWORD *)(v5 + 12);
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(v5 + 20);
      *(_QWORD *)v14 = v16;
      v17 = v14 + 12;
    }
    a2[1] = v17;
    *((float *)&v26 + *(unsigned __int8 *)(v5 + 28)) = *(float *)(v5 + 24)
                                                     + *((float *)&v26 + *(unsigned __int8 *)(v5 + 28));
    if (v17 >= a2[2])
    {
      v19 = sub_2233B2B48(a2, &v26);
    }
    else
    {
      v18 = v26;
      *(_DWORD *)(v17 + 8) = v27;
      *(_QWORD *)v17 = v18;
      v19 = v17 + 12;
    }
    v20 = -1431655765 * ((v8 - v9) >> 2);
    a2[1] = v19;
    LODWORD(v24) = v20;
    HIDWORD(v24) = v20 + 1;
    v25 = v20 + 2;
    v21 = a2[15];
    if (v21 >= a2[16])
    {
      v23 = sub_2233B29C0(a2 + 14, &v24);
    }
    else
    {
      v22 = v24;
      *(_DWORD *)(v21 + 8) = v25;
      *(_QWORD *)v21 = v22;
      v23 = v21 + 12;
    }
    a2[15] = v23;
    LODWORD(v24) = v20 + 1;
    HIDWORD(v24) = v20 + 3;
    v25 = v20 + 2;
    if (v23 < a2[16])
    {
      v7 = v24;
      *(_DWORD *)(v23 + 8) = v25;
      *(_QWORD *)v23 = v7;
      result = v23 + 12;
    }
    else
    {
      result = sub_2233B29C0(a2 + 14, &v24);
    }
    a2[15] = result;
  }
  return result;
}

void sub_223EB2BAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223EB2BC0(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  float v3;
  float v4;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  char *v18;
  char *v19;
  float32x2_t *v20;
  char *v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  unsigned __int8 v26;
  char v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v32;
  float v33;
  float32x2_t v34;
  char *v35;
  float32x2_t v36;
  float32x2_t *v37;
  char *v38;

  v3 = *(float *)(a2 + 8);
  v4 = *(float *)(a1 + 96);
  if (v3 < v4
    || v3 > (float)(v4 + *(float *)(a1 + 100))
    || (v37 = *(float32x2_t **)a2, (sub_223EA98C0((float *)&v37, (float **)a1) & 0x80000000) != 0))
  {
    v29 = 0.0;
LABEL_31:
    v30 = 0x100000000;
    return v30 | LODWORD(v29);
  }
  v8 = a3[1].f32[0];
  v9 = *(float *)(a2 + 8);
  v10 = 1.0;
  if (vabds_f32(v8, v9) > 0.00001)
  {
    v11 = v8 - v9;
    v12 = *(float *)(a1 + 96);
    v13 = (float)(v12 - v9) / v11;
    v14 = (float)((float)(v12 + *(float *)(a1 + 100)) - v9) / v11;
    v15 = 1.0;
    if (v13 < 1.0 && v13 >= 0.0)
      v15 = v13;
    if (v14 >= v15 || v14 < 0.0)
      v10 = v15;
    else
      v10 = v14;
  }
  v18 = *(char **)a2;
  v34 = *a3;
  v35 = v18;
  sub_223EA8FA0(a1, (uint64_t *)&v35, (uint64_t *)&v34, (char **)&v37);
  if (v37 == (float32x2_t *)v38)
    goto LABEL_23;
  v19 = (char *)&v37[1];
  v20 = v37;
  if (&v37[1] != (float32x2_t *)v38)
  {
    v20 = v37;
    v21 = (char *)&v37[1];
    do
    {
      v22 = *(float32x2_t *)v21;
      v21 += 8;
      v23 = vsub_f32(v22, (float32x2_t)v35);
      v24 = vmla_lane_f32(vmul_f32(v23, v23), (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1), v23, 1).f32[0];
      v25 = vsub_f32(*v20, (float32x2_t)v35);
      if (v24 < vmla_lane_f32(vmul_f32(v25, v25), (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1), v25, 1).f32[0])
        v20 = (float32x2_t *)v19;
      v19 = v21;
    }
    while (v21 != v38);
  }
  v36 = vabd_f32(v34, (float32x2_t)v35);
  v26 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v36, 1), v36).u8[0];
  if (*(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v26 & 1))) < 0.00001)
  {
LABEL_23:
    v27 = 0;
    v28 = 0.0;
    if (!v37)
      goto LABEL_25;
    goto LABEL_24;
  }
  v32 = v26 & 1;
  v33 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v32 & 1)));
  v28 = (float)(v20->f32[v32] - v33)
      / (float)(*(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v32 & 1))) - v33);
  v27 = 1;
  if (v37)
  {
LABEL_24:
    v38 = (char *)v37;
    operator delete(v37);
  }
LABEL_25:
  if ((v27 & (v10 > v28)) != 0)
    v29 = v28;
  else
    v29 = v10;
  if (v29 < 1.0)
    goto LABEL_31;
  v30 = 0;
  v29 = 0.0;
  return v30 | LODWORD(v29);
}

uint64_t sub_223EB2DE0(uint64_t a1, uint64_t a2)
{
  float32x2_t *v4;
  float32x2_t *v5;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float32x2_t v10;
  float64x2_t **v11;
  char *v12;
  void *v13;
  float32x2_t **v14;
  float32x2_t **i;
  float32x2_t *v16;
  float32x2_t *v17;
  uint64_t v18;
  float64x2_t *v19;
  float32x2_t v20;
  _QWORD *v21;
  char *v22;
  void *v23;
  void *__p[2];
  float64x2_t *v26;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_2232EA6AC(a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3) + 1);
  v4 = *(float32x2_t **)a2;
  v5 = *(float32x2_t **)(a2 + 8);
  __p[1] = 0;
  v26 = 0;
  __p[0] = 0;
  v6 = (char *)v5 - (char *)v4;
  if (v5 == v4)
  {
    v8 = 0;
    v7 = 0;
    v11 = *(float64x2_t ***)(a1 + 8);
    if ((unint64_t)v11 < *(_QWORD *)(a1 + 16))
    {
LABEL_6:
      v11[1] = v8;
      v11[2] = 0;
      *v11 = v7;
      v11[2] = v26;
      *(_QWORD *)(a1 + 8) = v11 + 3;
      goto LABEL_10;
    }
  }
  else
  {
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF9)
      sub_22316E078();
    v7 = (float64x2_t *)operator new(2 * v6);
    v8 = (float64x2_t *)((char *)v7 + 2 * v6);
    __p[0] = v7;
    __p[1] = v8;
    v26 = &v7[v6 >> 3];
    v9 = v7;
    do
    {
      v10 = *v4++;
      *v9++ = vcvtq_f64_f32(v10);
    }
    while (v4 != v5);
    v11 = *(float64x2_t ***)(a1 + 8);
    if ((unint64_t)v11 < *(_QWORD *)(a1 + 16))
      goto LABEL_6;
  }
  v12 = sub_2232EA89C((char **)a1, (uint64_t)__p);
  v13 = __p[0];
  *(_QWORD *)(a1 + 8) = v12;
  if (v13)
  {
    __p[1] = v13;
    operator delete(v13);
  }
LABEL_10:
  v14 = *(float32x2_t ***)(a2 + 24);
  for (i = *(float32x2_t ***)(a2 + 32); v14 != i; v14 += 3)
  {
    v16 = *v14;
    v17 = v14[1];
    __p[0] = 0;
    __p[1] = 0;
    v26 = 0;
    v18 = (char *)v17 - (char *)v16;
    if (v17 != v16)
    {
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF9)
        sub_22316E078();
      v19 = (float64x2_t *)operator new(2 * v18);
      __p[0] = v19;
      __p[1] = (char *)v19 + 2 * v18;
      v26 = &v19[v18 >> 3];
      do
      {
        v20 = *v16++;
        *v19++ = vcvtq_f64_f32(v20);
      }
      while (v16 != v17);
    }
    v21 = *(_QWORD **)(a1 + 8);
    if ((unint64_t)v21 < *(_QWORD *)(a1 + 16))
    {
      *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      *(_OWORD *)v21 = *(_OWORD *)__p;
      v21[2] = v26;
      *(_QWORD *)(a1 + 8) = v21 + 3;
    }
    else
    {
      v22 = sub_2232EA89C((char **)a1, (uint64_t)__p);
      v23 = __p[0];
      *(_QWORD *)(a1 + 8) = v22;
      if (v23)
      {
        __p[1] = v23;
        operator delete(v23);
      }
    }
  }
  return a1;
}

void sub_223EB2FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void **v10;

  if (__p)
    operator delete(__p);
  sub_22317C838(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_223EB3030(uint64_t a1)
{
  uint64_t v2;
  double v8;
  int v9;
  long double v10;
  uint64_t v11;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = operator new();
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 16) = 2;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_BYTE *)(v2 + 216) = 1;
  *(_BYTE *)(v2 + 225) = 1;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)v2 = &off_24EC588C0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v2 + 256) = _Q0;
  v8 = __exp10(2.0);
  v9 = ilogb(v8);
  v10 = ldexp(1.0, v9 + 1);
  *(long double *)(v2 + 256) = v10;
  *(long double *)(v2 + 264) = 1.0 / v10;
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_223EB3138(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_22317C838((void **)v1);
  _Unwind_Resume(a1);
}

void sub_223EB3184(__int16 **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  __int16 **v5;
  __int16 *v6;
  __int16 *v7;
  unint64_t v8;
  __int16 *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  _QWORD **v22;
  uint64_t v23;
  void **v24;
  char *v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 *v39;
  __int16 *v40;
  char *v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  __int16 *v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  int64_t v70;
  void *v71;
  double v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  double v78;
  float v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int64x2_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  unsigned int v88;
  int v89;
  int v90;
  unint64_t v91;
  __int16 *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  __int16 *v96;
  unsigned __int16 v97;
  unint64_t v98;
  __int16 *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  __int16 *v103;
  __int16 *v104;
  uint64_t v105;
  void **v106;
  unsigned __int16 *v107;
  unsigned __int16 *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  __int16 *v115;
  unsigned __int16 *v116;
  int v117;
  _QWORD *v118;
  int v119;
  int v120;
  _QWORD *v121;
  unint64_t v122;
  char *v123;
  _DWORD *v124;
  char *v125;
  int v126;
  int v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  _BYTE *v139;
  char *v140;
  uint64_t v141;
  int **v142;
  char *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  uint64_t *v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  _DWORD *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  void **v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  int64x2_t v171;
  int64x2_t *v172;
  int64x2_t v173;
  int64x2_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int16 *v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  void *v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t (***v190)();
  void **v191;
  char **v192;
  uint64_t (**v193)();
  uint64_t (***v194)();
  uint64_t v195;
  uint64_t v196;
  void **v197;
  void **p_p;
  void **v199;
  uint64_t (***v200)();
  uint64_t (***v201)();
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  void **v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void **v234;
  uint64_t v235;
  _QWORD *v236;
  void **v237;
  void **v238;
  uint64_t *v239;
  _QWORD *v240;
  uint64_t *v241;
  void **v242;
  void **v243;
  uint64_t *v244;
  char *v245;
  uint64_t (***v246)();
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  _QWORD *v251;
  uint64_t *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  void **v257;
  void **v258;
  uint64_t (***v259)();
  uint64_t (***v260)();
  uint64_t v261;
  uint64_t v262;
  uint64_t (***v263)();
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t (***v274)();
  uint64_t v275;
  uint64_t *v276;
  uint64_t *v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  uint8x8_t v303;
  unint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  unint64_t v307;
  uint64_t v308;
  char *v309;
  _QWORD *v310;
  char *v311;
  unint64_t v312;
  _QWORD *i;
  _QWORD *v314;
  char *v315;
  char *v316;
  __int128 v317;
  uint64_t v318;
  void **v319;
  __int128 v320;
  char *v321;
  char *v322;
  __int128 v323;
  _QWORD *v324;
  char *v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  void *v331;
  void *v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v344;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  _QWORD *v359;
  char *v360;
  _QWORD *v361;
  void *v362;
  char *v363;
  char *v364;
  void *v365;
  char *v366;
  void *v367;
  void *v368;
  _QWORD *v369;
  void *v370;
  char *v371;
  char *v372;
  void *v373;
  void *v374;
  unsigned int v376;
  __int16 **v377;
  unsigned int v378;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int16 v383;
  uint64_t v384;
  __int16 *v385;
  __int16 *v386;
  uint64_t v387;
  char *v388;
  int64_t v389;
  int64_t v390;
  __int16 *v391;
  unint64_t *v392;
  char *v393;
  char *v394;
  void *v395;
  uint64_t *v396;
  __int8 *v397;
  void *v398;
  char *v399;
  unint64_t v400;
  void *v401;
  char *v402;
  unint64_t v403;
  void *v404;
  void *__p;
  void *v406;
  void **v407;
  __int128 v408;
  _QWORD v409[3];
  uint64_t (***v410)();
  uint64_t *v411;
  uint64_t v412;
  _QWORD v413[3];
  _QWORD *v414;
  uint64_t *v415;
  void *v416;
  _QWORD v417[3];
  _QWORD *v418;
  uint64_t *v419;
  uint64_t v420;
  _QWORD v421[3];
  _QWORD *v422;
  uint64_t *v423;
  uint64_t *v424;
  _QWORD v425[3];
  _QWORD *v426;
  uint64_t *v427;
  uint64_t v428;
  _QWORD v429[3];
  _QWORD *v430;
  uint64_t *v431;
  void *v432;
  _QWORD v433[3];
  _QWORD *v434;
  uint64_t *v435;
  uint64_t v436;
  _QWORD v437[3];
  _QWORD *v438;
  uint64_t *v439;
  uint64_t *v440;
  _QWORD v441[3];
  _QWORD *v442;
  uint64_t *v443;
  uint64_t v444;
  _QWORD v445[3];
  _QWORD *v446;
  uint64_t *v447;
  uint64_t *v448;
  _QWORD v449[3];
  _QWORD *v450;
  uint64_t *v451;
  uint64_t v452;
  _QWORD v453[3];
  _QWORD *v454;
  uint64_t *v455;
  uint64_t *v456;
  _QWORD v457[3];
  void **v458;
  uint64_t *v459;
  void *v460[2];
  char *v461;
  _BYTE v462[32];
  float v463[6];
  uint64_t (***v464)();
  uint64_t *v465;
  uint64_t v466;
  _QWORD v467[3];
  _QWORD *v468;
  uint64_t *v469;
  uint64_t *v470;
  _QWORD v471[3];
  void **v472;
  uint64_t *v473;
  uint64_t v474;
  _QWORD v475[3];
  _QWORD *v476;
  uint64_t *v477;
  uint64_t v478;
  _QWORD v479[3];
  uint64_t (***v480)();
  uint64_t *v481;
  void *v482[2];
  void **v483;
  void **v484;
  uint64_t *v485;
  uint64_t *v486;
  uint64_t (**v487)();
  void **v488;
  uint64_t (***v489)();
  uint64_t *v490;
  __int128 v491;
  void **v492;
  char *v493;
  uint64_t *v494;
  uint64_t v495;

  v495 = *MEMORY[0x24BDAC8D0];
  if (!a1[7])
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v5 = a1;
  v7 = *a1;
  v6 = a1[1];
  v402 = 0;
  v403 = 0;
  v401 = 0;
  if (v6 == v7)
  {
    v26 = 0;
    v25 = 0;
    goto LABEL_15;
  }
  v404 = &v404;
  __p = &v404;
  v406 = 0;
  *(_QWORD *)&v491 = &v401;
  v8 = (*v7 - *((__int16 *)a1 + 12));
  if ((v8 & 0x80000000) == 0)
  {
    v9 = a1[4];
    if (v8 < ((char *)a1[5] - (char *)v9) >> 4)
    {
      v10 = &v9[8 * v8];
      v11 = *(_QWORD *)v10;
      v12 = *((_QWORD *)v10 + 1);
      if (v11 != v12)
      {
        v176 = 4 * v11;
        v177 = 8 * v12 - v176 * 2;
        v178 = (unsigned __int16 *)&v7[v176 + 2];
        do
        {
          v179 = *(v178 - 1);
          if (*v178 != v179)
          {
            v180 = sub_223EB9BF8((uint64_t **)&v491, *(v178 - 2), v179, 0);
            v181 = sub_223EB9BF8((uint64_t **)&v491, *(v178 - 2), *v178, 1);
            v182 = v401;
            *((_QWORD *)v401 + 7 * v180 + 5) = v181;
            v182[7 * v181 + 6] = v180;
            v183 = operator new(0x20uLL);
            v183[2] = v180;
            v183[3] = v181;
            v184 = v404;
            *((_QWORD *)v404 + 1) = v183;
            *v183 = v184;
            v183[1] = &v404;
            v404 = v183;
            v406 = (char *)v406 + 1;
          }
          v178 += 4;
          v177 -= 8;
        }
        while (v177);
      }
    }
  }
  v13 = *((_DWORD *)v5 + 6);
  v14 = v13 + 1;
  if ((unsigned __int16)(v13 + 1) != HIWORD(v13))
  {
    LOWORD(v88) = *((_DWORD *)v5 + 6);
    v377 = v5;
    v376 = *((_DWORD *)v5 + 6);
    do
    {
      v89 = (__int16)v88;
      v88 = v14;
      v90 = *((__int16 *)v5 + 12);
      v91 = (v89 - v90);
      if (v89 - v90 < 0)
      {
        v94 = 0;
        v95 = 0;
        v96 = *v5;
        v97 = v88;
        v98 = ((__int16)v88 - v90);
        if ((v98 & 0x80000000) != 0)
          goto LABEL_121;
      }
      else
      {
        v92 = v5[4];
        if (v91 >= ((char *)v5[5] - (char *)v92) >> 4)
        {
          v94 = ((char *)v5[1] - (char *)*v5) >> 3;
          v95 = v94;
          v96 = *v5;
          v97 = v88;
          v98 = ((__int16)v88 - v90);
          if ((v98 & 0x80000000) != 0)
          {
LABEL_121:
            v102 = 0;
            v101 = 0;
            v103 = &v96[4 * v94];
            v104 = &v96[4 * v95];
            v383 = v97;
            if (v94 == v95)
              goto LABEL_128;
            goto LABEL_124;
          }
        }
        else
        {
          v93 = (uint64_t *)&v92[8 * v91];
          v94 = *v93;
          v95 = v93[1];
          v96 = *v5;
          v97 = v88;
          v98 = ((__int16)v88 - v90);
          if ((v98 & 0x80000000) != 0)
            goto LABEL_121;
        }
      }
      v99 = v5[4];
      if (v98 >= ((char *)v5[5] - (char *)v99) >> 4)
      {
        v102 = ((char *)v5[1] - (char *)v96) >> 3;
        v101 = v102;
        v103 = &v96[4 * v94];
        v104 = &v96[4 * v95];
        v383 = v97;
        if (v94 == v95)
          goto LABEL_128;
      }
      else
      {
        v100 = (uint64_t *)&v99[8 * v98];
        v102 = *v100;
        v101 = v100[1];
        v103 = &v96[4 * v94];
        v104 = &v96[4 * v95];
        v383 = v97;
        if (v94 == v95)
          goto LABEL_128;
      }
LABEL_124:
      v105 = 8 * v95 - 8 * v94;
      while (v103[2] == v103[1])
      {
        v103 += 4;
        v105 -= 8;
        if (!v105)
        {
          v103 = v104;
          break;
        }
      }
LABEL_128:
      v106 = (void **)__p;
      v107 = (unsigned __int16 *)&v96[4 * v102];
      v391 = v104;
      if (v102 != v101)
      {
        v147 = 8 * v101 - 8 * v102;
        while (v107[2] == v107[1])
        {
          v107 += 4;
          v147 -= 8;
          if (!v147)
            goto LABEL_174;
        }
      }
      v108 = (unsigned __int16 *)&v96[4 * v101];
      if (v107 != v108)
      {
        v378 = v88;
        if (v103 == v104)
        {
          v103 = v104;
          if (v107 != v108)
            goto LABEL_181;
          goto LABEL_190;
        }
        v109 = __p;
        while (2)
        {
          v115 = v104;
          if (v103 + 4 != v104)
          {
            v115 = v103 + 4;
            while (v115[2] == v115[1])
            {
              v115 += 4;
              if (v115 == v104)
              {
                v115 = v104;
                break;
              }
            }
          }
          v116 = v108;
          if (v107 + 4 != v108)
          {
            v116 = v107 + 4;
            while (v116[2] == v116[1])
            {
              v116 += 4;
              if (v116 == v108)
              {
                v116 = v108;
                break;
              }
            }
          }
          v117 = (__int16)v107[2];
          if (v117 < v103[1])
          {
            v118 = v109;
            v119 = *v107;
            v120 = v107[1];
            v121 = (_QWORD *)v491;
            v122 = *(_QWORD *)(v491 + 8);
            v387 = *(_QWORD *)v491;
            LODWORD(v460[0]) = 0;
            v462[8] = 0;
            *(_QWORD *)&v462[16] = -1;
            *(_QWORD *)&v462[24] = -1;
            v123 = (char *)operator new(4uLL);
            *(_DWORD *)v123 = v120 | (v119 << 16);
            *(_QWORD *)v462 = v123 + 4;
            v460[1] = v123;
            v461 = v123 + 4;
            if (v122 >= v121[2])
            {
              v125 = sub_223EB9D70(v121, (uint64_t)v460);
              v109 = v118;
            }
            else
            {
              *(_DWORD *)v122 = 0;
              *(_QWORD *)(v122 + 16) = 0;
              *(_QWORD *)(v122 + 24) = 0;
              *(_QWORD *)(v122 + 8) = 0;
              v124 = operator new(4uLL);
              v109 = v118;
              *(_QWORD *)(v122 + 8) = v124;
              *v124++ = *(_DWORD *)v123;
              *(_QWORD *)(v122 + 16) = v124;
              *(_QWORD *)(v122 + 24) = v124;
              *(_OWORD *)(v122 + 32) = *(_OWORD *)&v462[8];
              *(_QWORD *)(v122 + 48) = *(_QWORD *)&v462[24];
              v125 = (char *)(v122 + 56);
              v121[1] = v122 + 56;
            }
            v121[1] = v125;
            operator delete(v123);
            v133 = sub_223EB9BF8((uint64_t **)&v491, *v107, v107[2], 1);
            v134 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v122 - v387) >> 3);
            v135 = v401;
            *((_QWORD *)v401 + ((uint64_t)(v122 - v387) >> 3) + 5) = v133;
            v135[7 * v133 + 6] = v134;
            v136 = operator new(0x20uLL);
            v136[2] = v134;
            v136[3] = v133;
            v137 = *v109;
            *(_QWORD *)(v137 + 8) = v136;
            *v136 = v137;
            *v109 = v136;
            v136[1] = v109;
            v406 = (char *)v406 + 1;
            v107 = v116;
            v104 = v391;
            if (v103 == v391)
              goto LABEL_169;
            goto LABEL_133;
          }
          v126 = (__int16)v107[1];
          v127 = v103[2];
          if (v126 <= v127)
          {
            if (v116 != v108 && v127 >= (__int16)v116[1])
            {
              v139 = v401;
              v138 = v402;
              LODWORD(v460[0]) = 1;
              v461 = 0;
              *(_QWORD *)v462 = 0;
              v460[1] = 0;
              v462[8] = 0;
              *(_QWORD *)&v462[16] = -1;
              *(_QWORD *)&v462[24] = -1;
              if ((unint64_t)v402 >= v403)
              {
                v140 = sub_223EBA05C(&v401, (uint64_t)v460);
                v402 = v140;
                if (v460[1])
                {
                  operator delete(v460[1]);
                  v140 = v402;
                }
              }
              else
              {
                *(_DWORD *)v402 = 1;
                *((_QWORD *)v138 + 2) = 0;
                *((_QWORD *)v138 + 3) = 0;
                *((_QWORD *)v138 + 1) = 0;
                *((_OWORD *)v138 + 2) = *(_OWORD *)&v462[8];
                *((_QWORD *)v138 + 6) = *(_QWORD *)&v462[24];
                v140 = v138 + 56;
                v402 = v138 + 56;
              }
              LODWORD(v460[0]) = 0;
              v461 = 0;
              *(_QWORD *)v462 = 0;
              v460[1] = 0;
              v462[8] = 0;
              *(_QWORD *)&v462[16] = -1;
              *(_QWORD *)&v462[24] = -1;
              if ((unint64_t)v140 >= v403)
              {
                v402 = sub_223EBA05C(&v401, (uint64_t)v460);
                if (v460[1])
                  operator delete(v460[1]);
              }
              else
              {
                *(_DWORD *)v140 = 0;
                *((_QWORD *)v140 + 2) = 0;
                *((_QWORD *)v140 + 3) = 0;
                *((_QWORD *)v140 + 1) = 0;
                *((_OWORD *)v140 + 2) = *(_OWORD *)&v462[8];
                *((_QWORD *)v140 + 6) = *(_QWORD *)&v462[24];
                v402 = v140 + 56;
              }
              v141 = 0x6DB6DB6DB6DB6DB7 * ((v138 - v139) >> 3);
              v142 = (int **)v401;
              v143 = (char *)v401 + v138 - v139;
              *((_QWORD *)v143 + 6) = v141 + 1;
              *((_QWORD *)v143 + 12) = v141;
              sub_223EB99B8(&v142[7 * v109[2] + 1], v107[1], v383);
              sub_223EB99B8((int **)v401 + ((v138 - v139) >> 3) + 1, v107[2], v383);
              v144 = v109[2];
              v145 = operator new(0x20uLL);
              v145[2] = v144;
              v145[3] = v141;
              v146 = *v109;
              *(_QWORD *)(v146 + 8) = v145;
              *v145 = v146;
              *v109 = v145;
              v145[1] = v109;
              v406 = (char *)v406 + 1;
              v109[2] = v141 + 1;
              v107 = v116;
              v104 = v391;
              if (v103 == v391)
              {
LABEL_169:
                v106 = (void **)v109;
                if (v107 == v108)
                  goto LABEL_190;
LABEL_181:
                v153 = (uint64_t *)v491;
                v154 = v107[1];
                do
                {
                  v155 = *v107;
                  v156 = *v153;
                  v157 = v153[1];
                  LODWORD(v460[0]) = 0;
                  v462[8] = 0;
                  *(_QWORD *)&v462[16] = -1;
                  *(_QWORD *)&v462[24] = -1;
                  v158 = (char *)operator new(4uLL);
                  *(_DWORD *)v158 = v154 | (v155 << 16);
                  *(_QWORD *)v462 = v158 + 4;
                  v460[1] = v158;
                  v461 = v158 + 4;
                  if (v157 >= v153[2])
                  {
                    v160 = sub_223EB9D70(v153, (uint64_t)v460);
                  }
                  else
                  {
                    *(_DWORD *)v157 = 0;
                    *(_QWORD *)(v157 + 16) = 0;
                    *(_QWORD *)(v157 + 24) = 0;
                    *(_QWORD *)(v157 + 8) = 0;
                    v159 = operator new(4uLL);
                    *(_QWORD *)(v157 + 8) = v159;
                    *v159++ = *(_DWORD *)v158;
                    *(_QWORD *)(v157 + 16) = v159;
                    *(_QWORD *)(v157 + 24) = v159;
                    *(_OWORD *)(v157 + 32) = *(_OWORD *)&v462[8];
                    *(_QWORD *)(v157 + 48) = *(_QWORD *)&v462[24];
                    v160 = (char *)(v157 + 56);
                    v153[1] = v157 + 56;
                  }
                  v153[1] = (uint64_t)v160;
                  operator delete(v158);
                  v161 = sub_223EB9BF8((uint64_t **)&v491, *v107, v107[2], 1);
                  v162 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v157 - v156) >> 3);
                  v163 = v401;
                  *((_QWORD *)v401 + 7 * v162 + 5) = v161;
                  v163[7 * v161 + 6] = v162;
                  v164 = operator new(0x20uLL);
                  v164[2] = v162;
                  v164[3] = v161;
                  v165 = *v106;
                  v165[1] = v164;
                  *v164 = v165;
                  *v106 = v164;
                  v164[1] = v106;
                  v406 = (char *)v406 + 1;
                  v107 += 4;
                  v104 = v391;
                  if (v107 == v108)
                    break;
                  while (1)
                  {
                    v154 = v107[1];
                    if (v107[2] != v154)
                      break;
                    v107 += 4;
                    if (v107 == v108)
                      goto LABEL_190;
                  }
                }
                while (v107 != v108);
LABEL_190:
                v5 = v377;
                v13 = v376;
                v88 = v378;
                if (v103 != v104)
                {
LABEL_191:
                  v166 = v106;
                  v167 = v401;
                  v169 = v106[2];
                  v168 = v106[3];
                  *((_QWORD *)v401 + 7 * (_QWORD)v169 + 6) = v168;
                  v167[7 * (_QWORD)v168 + 5] = v169;
                  v170 = *v106;
                  v106 = (void **)v106[1];
                  v170[1] = v106;
                  *(_QWORD *)v166[1] = v170;
                  v406 = (char *)v406 - 1;
                  operator delete(v166);
                  while (1)
                  {
                    v103 += 4;
                    if (v103 == v391)
                      break;
                    if (v103[2] != v103[1])
                    {
                      if (v103 != v391)
                        goto LABEL_191;
                      goto LABEL_195;
                    }
                  }
                }
                goto LABEL_195;
              }
              goto LABEL_133;
            }
            if (v115 == v391)
            {
              v128 = v401;
            }
            else
            {
              v128 = v401;
              if (v117 >= v115[1])
              {
                v129 = (uint64_t *)v109[1];
                v130 = v129[2];
                v131 = v109[3];
                *((_QWORD *)v401 + 7 * v131 + 5) = v130;
                v128[7 * v130 + 6] = v131;
                v109[3] = v129[3];
                v132 = *v129;
                *(_QWORD *)(v132 + 8) = v129[1];
                *(_QWORD *)v129[1] = v132;
                v406 = (char *)v406 - 1;
                operator delete(v129);
                v103 = v115;
                v104 = v391;
                if (v115 == v391)
                  goto LABEL_169;
                goto LABEL_133;
              }
            }
            sub_223EB99B8((int **)&v128[7 * v109[2] + 1], v126, v383);
            sub_223EB99B8((int **)v401 + 7 * v109[3] + 1, v107[2], v383);
            v109 = (_QWORD *)v109[1];
            v107 = v116;
            v103 = v115;
            v104 = v391;
            if (v115 == v391)
              goto LABEL_169;
            goto LABEL_133;
          }
          v110 = v401;
          v112 = v109[2];
          v111 = v109[3];
          *((_QWORD *)v401 + 7 * v112 + 6) = v111;
          v110[7 * v111 + 5] = v112;
          v113 = *v109;
          v114 = (_QWORD *)v109[1];
          *(_QWORD *)(v113 + 8) = v114;
          *(_QWORD *)v109[1] = v113;
          v406 = (char *)v406 - 1;
          operator delete(v109);
          v103 = v115;
          v109 = v114;
          v104 = v391;
          if (v115 == v391)
            goto LABEL_169;
LABEL_133:
          if (v107 == v108)
            goto LABEL_169;
          continue;
        }
      }
LABEL_174:
      if (v103 != v104)
      {
        do
        {
          v148 = v106;
          v149 = v401;
          v151 = v106[2];
          v150 = v106[3];
          *((_QWORD *)v401 + 7 * (_QWORD)v151 + 6) = v150;
          v149[7 * (_QWORD)v150 + 5] = v151;
          v152 = *v106;
          v106 = (void **)v106[1];
          v152[1] = v106;
          *(_QWORD *)v148[1] = v152;
          v406 = (char *)v406 - 1;
          operator delete(v148);
          do
          {
            v103 += 4;
            if (v103 == v391)
              goto LABEL_195;
          }
          while (v103[2] == v103[1]);
        }
        while (v103 != v391);
      }
LABEL_195:
      if (v106 != &v404
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonFromRLRegion.cpp", 333, (uint64_t)"cur_rl_to_chains == rl_to_chain.end()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = v88 + 1;
    }
    while ((unsigned __int16)(v88 + 1) != HIWORD(v13));
  }
  v15 = (uint64_t *)__p;
  if (__p != &v404)
  {
    do
    {
      v16 = v401;
      v18 = v15[2];
      v17 = v15[3];
      *((_QWORD *)v401 + 7 * v18 + 6) = v17;
      v16[7 * v17 + 5] = v18;
      v19 = *v15;
      v20 = (void **)v15[1];
      *(_QWORD *)(v19 + 8) = v20;
      *(_QWORD *)v15[1] = v19;
      v406 = (char *)v406 - 1;
      operator delete(v15);
      v15 = (uint64_t *)v20;
    }
    while (v20 != &v404);
  }
  if (v406)
  {
    v22 = (_QWORD **)v404;
    v21 = (void **)__p;
    v23 = *(_QWORD *)__p;
    *(_QWORD *)(v23 + 8) = *((_QWORD *)v404 + 1);
    *v22[1] = v23;
    v406 = 0;
    if (v21 != &v404)
    {
      do
      {
        v24 = (void **)v21[1];
        operator delete(v21);
        v21 = v24;
      }
      while (v24 != &v404);
    }
  }
  v26 = v401;
  v25 = v402;
LABEL_15:
  v27 = 0x6DB6DB6DB6DB6DB7 * ((v25 - v26) >> 3);
  if (v27 <= 1)
  {
    v398 = 0;
    v399 = 0;
    v400 = 0;
    goto LABEL_105;
  }
  v398 = 0;
  v399 = 0;
  v400 = 0;
  sub_223EB95F0((uint64_t)&v398, v27 >> 1);
  if (v402 != v401)
  {
    v28 = 0;
    v29 = 0x6DB6DB6DB6DB6DB7 * ((v402 - (_BYTE *)v401) >> 3);
    v380 = v29;
    while (1)
    {
      v30 = (char *)v401;
      if (!*((_BYTE *)v401 + 56 * v28 + 32))
        break;
LABEL_19:
      if (++v28 == v29)
        goto LABEL_105;
    }
    v31 = 0;
    v460[1] = 0;
    v460[0] = 0;
    v461 = 0;
    v32 = 0x7FFFFFFFFFFFFFFFLL;
    v33 = 0x8000000000000000;
    *(int64x2_t *)v462 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)&v462[16] = vdupq_n_s64(0x8000000000000000);
    v463[0] = 0.0;
    v34 = 0x8000000000000000;
    v35 = 0x7FFFFFFFFFFFFFFFLL;
    v36 = v28;
    v381 = v28;
    while (1)
    {
      v382 = v36;
      v38 = &v30[56 * v36];
      v40 = (__int16 *)*((_QWORD *)v38 + 1);
      v39 = (__int16 *)*((_QWORD *)v38 + 2);
      if (*(_DWORD *)v38)
      {
        if (v40 != v39)
        {
          v41 = v31;
          v385 = (__int16 *)*((_QWORD *)v38 + 2);
          while (1)
          {
            v44 = *v40;
            v45 = v40[1];
            if (v41 >= v461)
              break;
            *(_QWORD *)v41 = v44;
            *((_QWORD *)v41 + 1) = v45;
            v31 = v41 + 16;
LABEL_27:
            v460[1] = v31;
            v42 = *v40;
            v43 = v40[1];
            if (v42 < v35)
              v35 = *v40;
            if (v34 <= v42)
              v34 = *v40;
            if (v43 < v32)
              v32 = v40[1];
            if (v33 <= v43)
              v33 = v40[1];
            v40 += 2;
            v41 = v31;
            if (v40 == v39)
              goto LABEL_22;
          }
          v46 = (char *)v460[0];
          v47 = (v41 - (char *)v460[0]) >> 4;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 60)
            sub_22316E078();
          v49 = v461 - (char *)v460[0];
          if ((v461 - (char *)v460[0]) >> 3 > v48)
            v48 = v49 >> 3;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
            v50 = 0xFFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          v389 = v33;
          if (v50)
          {
            if (v50 >> 60)
              sub_223174E94();
            v51 = (char *)operator new(16 * v50);
            v52 = &v51[16 * v47];
            *(_QWORD *)v52 = v44;
            *((_QWORD *)v52 + 1) = v45;
            v53 = v52;
            if (v41 == v46)
            {
LABEL_51:
              v31 = v52 + 16;
              v460[0] = v53;
              v460[1] = v52 + 16;
              v461 = &v51[16 * v50];
              if (!v41)
              {
LABEL_53:
                v39 = v385;
                v33 = v389;
                goto LABEL_27;
              }
LABEL_52:
              operator delete(v41);
              goto LABEL_53;
            }
          }
          else
          {
            v51 = 0;
            v52 = (char *)(16 * v47);
            *(_QWORD *)v52 = v44;
            *((_QWORD *)v52 + 1) = v45;
            v53 = (char *)(16 * v47);
            if (v41 == v46)
              goto LABEL_51;
          }
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v41 - 1);
            v53 -= 16;
            v41 -= 16;
          }
          while (v41 != v46);
          v41 = (char *)v460[0];
          v31 = v52 + 16;
          v460[0] = v53;
          v460[1] = v52 + 16;
          v461 = &v51[16 * v50];
          if (!v41)
            goto LABEL_53;
          goto LABEL_52;
        }
        goto LABEL_22;
      }
      if (v39 != v40)
        break;
LABEL_22:
      v30 = (char *)v401;
      v28 = v381;
      v37 = (char *)v401 + 56 * v382;
      v37[32] = 1;
      v36 = *((_QWORD *)v37 + 5);
      if (v36 == v381)
      {
        v70 = v33;
        v71 = v460[0];
        v72 = 0.0;
        if ((unint64_t)(v31 - (char *)v460[0]) < 0x30)
          goto LABEL_94;
        v73 = v31 - 16;
        if ((((_BYTE)v31 - LOBYTE(v460[0])) & 0x10) != 0)
          v74 = v31 - 16;
        else
          v74 = v31;
        if (v460[0] == v74)
        {
          v74 = (char *)v460[0];
          if ((((_BYTE)v31 - LOBYTE(v460[0])) & 0x10) == 0)
            goto LABEL_93;
        }
        else
        {
          v75 = *(_QWORD *)v73;
          v76 = (char *)v460[0];
          do
          {
            v77 = *((_QWORD *)v76 + 1);
            v78 = (double)(v77 + *((_QWORD *)v73 + 1)) * (double)(v75 - *(_QWORD *)v76);
            v73 = v76 + 16;
            v75 = *((_QWORD *)v76 + 2);
            v72 = v72 + v78 + (double)(*((_QWORD *)v76 + 3) + v77) * (double)(*(_QWORD *)v76 - v75);
            v76 += 32;
          }
          while (v76 != v74);
          v73 = v76 - 16;
          if ((((_BYTE)v31 - LOBYTE(v460[0])) & 0x10) == 0)
            goto LABEL_93;
        }
        v72 = v72
            + (double)(uint64_t)(*((_QWORD *)v74 + 1) + *((_QWORD *)v73 + 1))
            * (double)(uint64_t)(*(_QWORD *)v73 - *(_QWORD *)v74);
LABEL_93:
        v72 = v72 * 0.5;
LABEL_94:
        v79 = v72;
        v463[0] = v79;
        *(_QWORD *)v462 = v35;
        *(_QWORD *)&v462[8] = v32;
        *(_QWORD *)&v462[16] = v34;
        *(_QWORD *)&v462[24] = v70;
        if (v79 <= 0.0)
        {
          v29 = v380;
          if (fabsf(v79) <= a4)
            goto LABEL_101;
        }
        else
        {
          sub_223EB8354((uint64_t)v460);
          v29 = v380;
        }
        v80 = v399;
        if ((unint64_t)v399 >= v400)
        {
          v81 = sub_223EB9700(&v398, (uint64_t)v460);
          v71 = v460[0];
        }
        else
        {
          *(_QWORD *)v399 = 0;
          *((_QWORD *)v80 + 1) = 0;
          *((_QWORD *)v80 + 2) = 0;
          *(void **)v80 = v460[0];
          v71 = 0;
          *((void **)v80 + 1) = v460[1];
          *((_QWORD *)v80 + 2) = v461;
          v460[0] = 0;
          v460[1] = 0;
          v461 = 0;
          *(_OWORD *)(v80 + 24) = *(_OWORD *)v462;
          *(_OWORD *)(v80 + 40) = *(_OWORD *)&v462[16];
          *((float *)v80 + 14) = v463[0];
          v81 = v80 + 64;
        }
        v399 = v81;
LABEL_101:
        if (v71)
        {
          v460[1] = v71;
          operator delete(v71);
        }
        goto LABEL_19;
      }
    }
    v54 = v31;
    v55 = (__int16 *)*((_QWORD *)v38 + 2);
    while (1)
    {
      v59 = *(v55 - 2);
      v55 -= 2;
      v58 = v59;
      v60 = v55[1];
      if (v54 >= v461)
        break;
      *(_QWORD *)v54 = v58;
      *((_QWORD *)v54 + 1) = v60;
      v31 = v54 + 16;
LABEL_57:
      v460[1] = v31;
      v56 = *(v39 - 2);
      v57 = *(v39 - 1);
      if (v56 < v35)
        v35 = *(v39 - 2);
      if (v34 <= v56)
        v34 = *(v39 - 2);
      if (v57 < v32)
        v32 = *(v39 - 1);
      if (v33 <= v57)
        v33 = *(v39 - 1);
      v54 = v31;
      v39 = v55;
      if (v55 == v40)
        goto LABEL_22;
    }
    v384 = v32;
    v61 = (char *)v460[0];
    v62 = (v54 - (char *)v460[0]) >> 4;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60)
      sub_22316E078();
    v64 = v461 - (char *)v460[0];
    if ((v461 - (char *)v460[0]) >> 3 > v63)
      v63 = v64 >> 3;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v386 = v39;
    v390 = v33;
    if (v65)
    {
      if (v65 >> 60)
        sub_223174E94();
      v66 = v65;
      v67 = (char *)operator new(16 * v65);
      v65 = v66;
      v68 = &v67[16 * v62];
      *(_QWORD *)v68 = v58;
      *((_QWORD *)v68 + 1) = v60;
      v69 = v68;
      if (v54 != v61)
      {
LABEL_76:
        v32 = v384;
        do
        {
          *((_OWORD *)v69 - 1) = *((_OWORD *)v54 - 1);
          v69 -= 16;
          v54 -= 16;
        }
        while (v54 != v61);
        v54 = (char *)v460[0];
        v31 = v68 + 16;
        v460[0] = v69;
        v460[1] = v68 + 16;
        v461 = &v67[16 * v65];
        if (!v54)
          goto LABEL_80;
LABEL_79:
        operator delete(v54);
LABEL_80:
        v39 = v386;
        v33 = v390;
        goto LABEL_57;
      }
    }
    else
    {
      v67 = 0;
      v68 = (char *)(16 * v62);
      *(_QWORD *)v68 = v58;
      *((_QWORD *)v68 + 1) = v60;
      v69 = (char *)(16 * v62);
      if (v54 != v61)
        goto LABEL_76;
    }
    v32 = v384;
    v31 = v68 + 16;
    v460[0] = v69;
    v460[1] = v68 + 16;
    v461 = &v67[16 * v65];
    if (!v54)
      goto LABEL_80;
    goto LABEL_79;
  }
LABEL_105:
  v396 = 0;
  v397 = 0;
  v395 = 0;
  v82 = v399 - (_BYTE *)v398;
  if (v399 == v398)
  {
    v87 = 0;
    v84 = 0;
  }
  else
  {
    if (v82 < 0)
      sub_22367C394();
    v83 = (int64x2_t *)operator new((unint64_t)v82 >> 3);
    v84 = (uint64_t *)v83;
    v85 = v82 >> 6;
    v395 = v83;
    v397 = &v83->i8[8 * (v82 >> 6)];
    if ((unint64_t)v82 >= 0x100)
    {
      v86 = v85 & 0xFFFFFFFFFFFFFFFCLL;
      v87 = &v83->i64[v85 & 0xFFFFFFFFFFFFFFFCLL];
      v171 = (int64x2_t)xmmword_2245F5410;
      v172 = v83 + 1;
      v173 = vdupq_n_s64(2uLL);
      v174 = vdupq_n_s64(4uLL);
      v175 = v85 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v172[-1] = v171;
        *v172 = vaddq_s64(v171, v173);
        v171 = vaddq_s64(v171, v174);
        v172 += 2;
        v175 -= 4;
      }
      while (v175);
      goto LABEL_211;
    }
    v86 = 0;
    v87 = (uint64_t *)v83;
    do
    {
      *v87++ = v86++;
LABEL_211:
      ;
    }
    while (v85 != v86);
    v396 = v87;
  }
  v185 = 126 - 2 * __clz(v87 - v84);
  v460[0] = &v398;
  if (v87 == v84)
    v186 = 0;
  else
    v186 = v185;
  sub_223EB847C((uint64_t)v84, v87, (uint64_t **)v460, v186, 1);
  *(_QWORD *)&v491 = v84;
  *((_QWORD *)&v491 + 1) = &off_24EC63DB8;
  v187 = (char *)&v491 + 8;
  v492 = &v398;
  v493 = (char *)&v491 + 8;
  v494 = v87;
  if (v87 == v84)
  {
    v189 = (char *)&v491 + 8;
  }
  else
  {
    v188 = (char *)&v491 + 8;
    while (!(*(unsigned int (**)(char *, uint64_t *))(*(_QWORD *)v188 + 48))(v188, v84))
    {
      v84 = (uint64_t *)(v491 + 8);
      *(_QWORD *)&v491 = v84;
      if (v84 == v494)
        goto LABEL_224;
      v188 = v493;
      if (!v493)
        sub_223198474();
    }
    v84 = (uint64_t *)v491;
LABEL_224:
    v189 = v493;
  }
  v190 = &v487;
  v486 = v87;
  v487 = &off_24EC63DB8;
  v488 = &v398;
  v489 = &v487;
  v490 = v87;
  v460[0] = v84;
  v191 = &v460[1];
  if (!v189)
  {
    v192 = (char **)&v462[8];
    goto LABEL_229;
  }
  if (v189 != (char *)&v491 + 8)
  {
    v192 = &v493;
    *(_QWORD *)&v462[8] = v189;
LABEL_229:
    *v192 = 0;
    *(_QWORD *)&v462[16] = v494;
    *(_QWORD *)&v462[24] = v87;
    v193 = &off_24EC63DB8;
    goto LABEL_230;
  }
  *(_QWORD *)&v462[8] = &v460[1];
  (*(void (**)(char *, void **))(*((_QWORD *)&v491 + 1) + 24))((char *)&v491 + 8, &v460[1]);
  *(_QWORD *)&v462[16] = v494;
  *(_QWORD *)&v462[24] = v486;
  if (!v489)
  {
    v464 = 0;
    v194 = 0;
    v465 = v490;
    if (&v487)
      goto LABEL_231;
    goto LABEL_236;
  }
  if (v489 != &v487)
  {
    v464 = v489;
    v489 = 0;
    v194 = 0;
    v465 = v490;
    if (&v487)
      goto LABEL_231;
LABEL_236:
    v195 = 4;
    goto LABEL_237;
  }
  v193 = v487;
LABEL_230:
  v464 = (uint64_t (***)())v463;
  ((void (*)(uint64_t (***)()))v193[3])(&v487);
  v194 = v489;
  v465 = v490;
  if (v489 == &v487)
    goto LABEL_236;
LABEL_231:
  if (!v194)
    goto LABEL_238;
  v195 = 5;
  v190 = v194;
LABEL_237:
  ((void (*)(uint64_t (***)()))(*v190)[v195])(v190);
LABEL_238:
  if (v493 == (char *)&v491 + 8)
  {
    v196 = 4;
  }
  else
  {
    if (!v493)
      goto LABEL_243;
    v196 = 5;
    v187 = v493;
  }
  (*(void (**)(char *))(*(_QWORD *)v187 + 8 * v196))(v187);
LABEL_243:
  v404 = v460[0];
  v197 = &v404;
  p_p = &__p;
  if (!*(_QWORD *)&v462[8])
  {
LABEL_246:
    v197[4] = 0;
    goto LABEL_248;
  }
  if (*(void ***)&v462[8] != &v460[1])
  {
    v197 = v460;
    v407 = *(void ***)&v462[8];
    goto LABEL_246;
  }
  v407 = &__p;
  (*((void (**)(void **, void **))v460[1] + 3))(&v460[1], &__p);
LABEL_248:
  v408 = *(_OWORD *)&v462[16];
  v199 = &v404;
  v200 = (uint64_t (***)())v409;
  if (!v464)
  {
LABEL_251:
    v199[10] = 0;
    goto LABEL_253;
  }
  v199 = v460;
  if (v464 != (uint64_t (***)())v463)
  {
    v410 = v464;
    goto LABEL_251;
  }
  v410 = (uint64_t (***)())v409;
  (*(void (**)(void))(*(_QWORD *)v463 + 24))();
LABEL_253:
  v201 = v464;
  v411 = v465;
  if (v464 == (uint64_t (***)())v463)
  {
    v202 = 4;
    v201 = (uint64_t (***)())v463;
  }
  else
  {
    if (!v464)
      goto LABEL_258;
    v202 = 5;
  }
  (*v201)[v202]();
LABEL_258:
  if (*(void ***)&v462[8] == &v460[1])
  {
    v203 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v462[8])
      goto LABEL_263;
    v203 = 5;
    v191 = *(void ***)&v462[8];
  }
  (*((void (**)(void **))*v191 + v203))(v191);
LABEL_263:
  v204 = (uint64_t)v407;
  v416 = v404;
  v205 = v417;
  if (!v407)
  {
LABEL_266:
    v418 = (_QWORD *)v204;
    goto LABEL_268;
  }
  if (v407 != &__p)
  {
    v204 = (*((uint64_t (**)(void))*v407 + 2))();
    goto LABEL_266;
  }
  v418 = v417;
  (*((void (**)(void **, _QWORD *))__p + 3))(&__p, v417);
LABEL_268:
  v412 = *((_QWORD *)&v408 + 1);
  v419 = (uint64_t *)v408;
  v206 = v413;
  v207 = (uint64_t)v410;
  if (!v410)
  {
LABEL_271:
    v414 = (_QWORD *)v207;
    goto LABEL_273;
  }
  if (v410 != v409)
  {
    v207 = (*v410)[2]();
    goto LABEL_271;
  }
  v414 = v413;
  (*(void (**)(_QWORD *, _QWORD *))(v409[0] + 24))(v409, v413);
LABEL_273:
  v415 = v411;
  v393 = 0;
  v394 = 0;
  v392 = 0;
  v208 = (uint64_t)v418;
  v432 = v416;
  v209 = v433;
  if (!v418)
  {
LABEL_276:
    v434 = (_QWORD *)v208;
    goto LABEL_278;
  }
  if (v418 != v417)
  {
    v208 = (*(uint64_t (**)(void))(*v418 + 16))();
    goto LABEL_276;
  }
  v434 = v433;
  (*(void (**)(_QWORD *, _QWORD *))(v417[0] + 24))(v417, v433);
LABEL_278:
  v435 = v419;
  v210 = (uint64_t)v414;
  v428 = v412;
  v211 = v429;
  if (!v414)
  {
LABEL_281:
    v430 = (_QWORD *)v210;
    goto LABEL_283;
  }
  if (v414 != v413)
  {
    v210 = (*(uint64_t (**)(void))(*v414 + 16))();
    goto LABEL_281;
  }
  v430 = v429;
  (*(void (**)(_QWORD *, _QWORD *))(v413[0] + 24))(v413, v429);
LABEL_283:
  v431 = v415;
  v212 = (uint64_t)v434;
  v460[0] = v432;
  v213 = &v460[1];
  if (!v434)
  {
LABEL_286:
    *(_QWORD *)&v462[8] = v212;
    goto LABEL_288;
  }
  if (v434 != v433)
  {
    v212 = (*(uint64_t (**)(void))(*v434 + 16))();
    goto LABEL_286;
  }
  *(_QWORD *)&v462[8] = &v460[1];
  (*(void (**)(_QWORD *, void **))(v433[0] + 24))(v433, &v460[1]);
LABEL_288:
  *(_QWORD *)&v462[16] = v435;
  v214 = (uint64_t)v430;
  *(_QWORD *)&v491 = v428;
  v215 = (char *)&v491 + 8;
  if (!v430)
  {
LABEL_291:
    v493 = (char *)v214;
    goto LABEL_293;
  }
  if (v430 != v429)
  {
    v214 = (*(uint64_t (**)(void))(*v430 + 16))();
    goto LABEL_291;
  }
  v493 = (char *)&v491 + 8;
  (*(void (**)(_QWORD *, char *))(v429[0] + 24))(v429, (char *)&v491 + 8);
LABEL_293:
  v494 = v431;
  v216 = (char *)v460[0];
  v217 = (char *)v491;
  if (v460[0] == (void *)v491)
  {
    v218 = 0;
  }
  else
  {
    v218 = 0;
    do
    {
      v216 += 8;
      v460[0] = v216;
      if (v216 != *(char **)&v462[16])
      {
        do
        {
          if (!*(_QWORD *)&v462[8])
            sub_223198474();
          v219 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v462[8] + 48))(*(_QWORD *)&v462[8]);
          v216 = (char *)v460[0];
          if ((v219 & 1) != 0)
            break;
          v216 = (char *)v460[0] + 8;
          v460[0] = v216;
        }
        while (v216 != *(char **)&v462[16]);
        v217 = (char *)v491;
      }
      ++v218;
    }
    while (v216 != v217);
  }
  if (v493 == (char *)&v491 + 8)
  {
    v220 = 4;
  }
  else
  {
    if (!v493)
      goto LABEL_308;
    v220 = 5;
    v215 = v493;
  }
  (*(void (**)(char *))(*(_QWORD *)v215 + 8 * v220))(v215);
LABEL_308:
  if (*(void ***)&v462[8] == &v460[1])
  {
    v221 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v462[8])
      goto LABEL_313;
    v221 = 5;
    v213 = *(void ***)&v462[8];
  }
  (*((void (**)(void **))*v213 + v221))(v213);
LABEL_313:
  if (v430 == v429)
  {
    v222 = 4;
  }
  else
  {
    if (!v430)
      goto LABEL_318;
    v222 = 5;
    v211 = v430;
  }
  (*(void (**)(_QWORD *))(*v211 + 8 * v222))(v211);
LABEL_318:
  if (v434 == v433)
  {
    v223 = 4;
  }
  else
  {
    if (!v434)
      goto LABEL_323;
    v223 = 5;
    v209 = v434;
  }
  (*(void (**)(_QWORD *))(*v209 + 8 * v223))(v209);
LABEL_323:
  v224 = (uint64_t)v418;
  v424 = (uint64_t *)v416;
  v225 = v425;
  if (!v418)
  {
LABEL_326:
    v426 = (_QWORD *)v224;
    goto LABEL_328;
  }
  if (v418 != v417)
  {
    v224 = (*(uint64_t (**)(void))(*v418 + 16))();
    goto LABEL_326;
  }
  v426 = v425;
  (*(void (**)(_QWORD *, _QWORD *))(v417[0] + 24))(v417, v425);
LABEL_328:
  v427 = v419;
  v226 = (uint64_t)v414;
  v420 = v412;
  v227 = v421;
  if (!v414)
  {
LABEL_331:
    v422 = (_QWORD *)v226;
    goto LABEL_333;
  }
  if (v414 != v413)
  {
    v226 = (*(uint64_t (**)(void))(*v414 + 16))();
    goto LABEL_331;
  }
  v422 = v421;
  (*(void (**)(_QWORD *, _QWORD *))(v413[0] + 24))(v413, v421);
LABEL_333:
  v423 = v415;
  if (!v218)
    goto LABEL_521;
  if (v218 >> 61)
    sub_22367C394();
  v228 = (char *)operator new(8 * v218);
  v392 = (unint64_t *)v228;
  v393 = v228;
  v394 = &v228[8 * v218];
  v229 = (uint64_t)v426;
  v440 = v424;
  if (!v426)
    goto LABEL_338;
  if (v426 != v425)
  {
    v229 = (*(uint64_t (**)(void))(*v426 + 16))();
LABEL_338:
    v442 = (_QWORD *)v229;
    goto LABEL_340;
  }
  v442 = v441;
  (*(void (**)(_QWORD *, _QWORD *))(v425[0] + 24))(v425, v441);
LABEL_340:
  v443 = v427;
  v230 = (uint64_t)v422;
  v436 = v420;
  if (!v422)
  {
LABEL_343:
    v438 = (_QWORD *)v230;
    goto LABEL_345;
  }
  if (v422 != v421)
  {
    v230 = (*(uint64_t (**)(void))(*v422 + 16))();
    goto LABEL_343;
  }
  v438 = v437;
  (*(void (**)(_QWORD *, _QWORD *))(v421[0] + 24))(v421, v437);
LABEL_345:
  v439 = v423;
  v231 = (uint64_t)v442;
  v448 = v440;
  if (!v442)
  {
LABEL_348:
    v450 = (_QWORD *)v231;
    goto LABEL_350;
  }
  if (v442 != v441)
  {
    v231 = (*(uint64_t (**)(void))(*v442 + 16))();
    goto LABEL_348;
  }
  v450 = v449;
  (*(void (**)(_QWORD *, _QWORD *))(v441[0] + 24))(v441, v449);
LABEL_350:
  v451 = v443;
  v232 = (uint64_t)v438;
  v444 = v436;
  v388 = v228;
  if (!v438)
  {
LABEL_353:
    v446 = (_QWORD *)v232;
    goto LABEL_355;
  }
  if (v438 != v437)
  {
    v232 = (*(uint64_t (**)(void))(*v438 + 16))();
    goto LABEL_353;
  }
  v446 = v445;
  (*(void (**)(_QWORD *))(v437[0] + 24))(v437);
LABEL_355:
  v447 = v439;
  v233 = (uint64_t)v450;
  v456 = v448;
  v234 = (void **)v457;
  if (!v450)
  {
LABEL_358:
    v458 = (void **)v233;
    goto LABEL_360;
  }
  if (v450 != v449)
  {
    v233 = (*(uint64_t (**)(void))(*v450 + 16))();
    goto LABEL_358;
  }
  v458 = (void **)v457;
  (*(void (**)(_QWORD *, _QWORD *))(v449[0] + 24))(v449, v457);
LABEL_360:
  v459 = v451;
  v235 = (uint64_t)v446;
  v452 = v444;
  v236 = v453;
  if (!v446)
  {
LABEL_363:
    v454 = (_QWORD *)v235;
    goto LABEL_365;
  }
  if (v446 != v445)
  {
    v235 = (*(uint64_t (**)(void))(*v446 + 16))();
    goto LABEL_363;
  }
  v454 = v453;
  (*(void (**)(_QWORD *, _QWORD *))(v445[0] + 24))(v445, v453);
LABEL_365:
  v455 = v447;
  v470 = v456;
  v237 = (void **)&v470;
  v238 = (void **)v471;
  if (!v458)
  {
LABEL_368:
    v237[4] = 0;
    goto LABEL_370;
  }
  if (v458 != v457)
  {
    v237 = (void **)&v456;
    v472 = v458;
    goto LABEL_368;
  }
  v472 = (void **)v471;
  (*(void (**)(_QWORD *, _QWORD *))(v457[0] + 24))(v457, v471);
LABEL_370:
  v473 = v459;
  v466 = v452;
  v239 = &v466;
  v240 = v467;
  if (!v454)
  {
LABEL_373:
    v239[4] = 0;
    goto LABEL_375;
  }
  if (v454 != v453)
  {
    v239 = &v452;
    v468 = v454;
    goto LABEL_373;
  }
  v468 = v467;
  (*(void (**)(_QWORD *, _QWORD *))(v453[0] + 24))(v453, v467);
LABEL_375:
  v469 = v455;
  v241 = v470;
  v482[0] = v470;
  v242 = v482;
  v243 = &v482[1];
  if (!v472)
  {
LABEL_378:
    v242[4] = 0;
    goto LABEL_380;
  }
  if (v472 != v471)
  {
    v242 = (void **)&v470;
    v484 = v472;
    goto LABEL_378;
  }
  v484 = &v482[1];
  (*(void (**)(_QWORD *, void **))(v471[0] + 24))(v471, &v482[1]);
  v241 = (uint64_t *)v482[0];
LABEL_380:
  v244 = v473;
  v485 = v473;
  *(_QWORD *)&v491 = v241;
  v245 = (char *)&v491 + 8;
  if (!v484)
  {
    v493 = 0;
    v494 = v473;
    v486 = v241;
    goto LABEL_385;
  }
  if (v484 == &v482[1])
  {
    v493 = (char *)&v491 + 8;
    (*((void (**)(void **, char *))v482[1] + 3))(&v482[1], (char *)&v491 + 8);
    v246 = (uint64_t (***)())v493;
    v244 = v485;
    v494 = v485;
    v486 = (uint64_t *)v491;
    if (!v493)
      goto LABEL_385;
LABEL_389:
    if (v246 == (uint64_t (***)())((char *)&v491 + 8))
    {
      v489 = &v487;
      (*(void (**)(char *))(*((_QWORD *)&v491 + 1) + 24))((char *)&v491 + 8);
      v247 = v493;
      v490 = v494;
      if (v493 != (char *)&v491 + 8)
        goto LABEL_386;
    }
    else
    {
      v489 = v246;
      v490 = v244;
      v493 = 0;
      v247 = 0;
      if (&v491 != (__int128 *)-8)
        goto LABEL_386;
    }
LABEL_391:
    v248 = 4;
    goto LABEL_392;
  }
  v246 = (uint64_t (***)())(*((uint64_t (**)(void))*v484 + 2))();
  v244 = v485;
  v493 = (char *)v246;
  v494 = v485;
  v486 = (uint64_t *)v491;
  if (v246)
    goto LABEL_389;
LABEL_385:
  v489 = 0;
  v490 = v244;
  v247 = v493;
  if (v493 == (char *)&v491 + 8)
    goto LABEL_391;
LABEL_386:
  if (!v247)
    goto LABEL_393;
  v248 = 5;
  v245 = v247;
LABEL_392:
  (*(void (**)(char *))(*(_QWORD *)v245 + 8 * v248))(v245);
LABEL_393:
  v249 = v466;
  v474 = v466;
  v250 = &v474;
  v251 = v475;
  if (!v468)
  {
LABEL_396:
    v250[4] = 0;
    goto LABEL_398;
  }
  if (v468 != v467)
  {
    v250 = &v466;
    v476 = v468;
    goto LABEL_396;
  }
  v476 = v475;
  (*(void (**)(_QWORD *, _QWORD *))(v467[0] + 24))(v467, v475);
  v249 = v474;
LABEL_398:
  v252 = v469;
  v477 = v469;
  *(_QWORD *)&v491 = v249;
  v253 = (char *)&v491 + 8;
  if (!v476)
  {
    v493 = 0;
    v494 = v469;
    v478 = v249;
    goto LABEL_403;
  }
  if (v476 == v475)
  {
    v493 = (char *)&v491 + 8;
    (*(void (**)(_QWORD *, char *))(v475[0] + 24))(v475, (char *)&v491 + 8);
    v254 = v493;
    v252 = v477;
    v494 = v477;
    v478 = v491;
    if (!v493)
      goto LABEL_403;
LABEL_407:
    if (v254 == (char *)&v491 + 8)
    {
      v480 = (uint64_t (***)())v479;
      (*(void (**)(char *))(*((_QWORD *)&v491 + 1) + 24))((char *)&v491 + 8);
      v255 = v493;
      v481 = v494;
      if (v493 != (char *)&v491 + 8)
        goto LABEL_404;
    }
    else
    {
      v480 = (uint64_t (***)())v254;
      v493 = 0;
      v481 = v252;
      v255 = 0;
      if (&v491 != (__int128 *)-8)
        goto LABEL_404;
    }
LABEL_409:
    v256 = 4;
    goto LABEL_410;
  }
  v254 = (char *)(*(uint64_t (**)(void))(*v476 + 16))();
  v252 = v477;
  v493 = v254;
  v494 = v477;
  v478 = v491;
  if (v254)
    goto LABEL_407;
LABEL_403:
  v480 = 0;
  v481 = v252;
  v255 = v493;
  if (v493 == (char *)&v491 + 8)
    goto LABEL_409;
LABEL_404:
  if (!v255)
    goto LABEL_411;
  v256 = 5;
  v253 = v255;
LABEL_410:
  (*(void (**)(char *))(*(_QWORD *)v253 + 8 * v256))(v253);
LABEL_411:
  v460[0] = v486;
  v257 = v460;
  v258 = &v460[1];
  if (!v489)
  {
LABEL_414:
    v257[4] = 0;
    goto LABEL_416;
  }
  v257 = (void **)&v486;
  if (v489 != &v487)
  {
    *(_QWORD *)&v462[8] = v489;
    goto LABEL_414;
  }
  *(_QWORD *)&v462[8] = &v460[1];
  v487[3]();
LABEL_416:
  *(_QWORD *)&v462[16] = v490;
  *(_QWORD *)&v462[24] = v478;
  v259 = (uint64_t (***)())v463;
  if (v480)
  {
    if (v480 == v479)
    {
      v464 = (uint64_t (***)())v463;
      (*(void (**)(void))(v479[0] + 24))();
    }
    else
    {
      v464 = v480;
      v480 = 0;
    }
  }
  else
  {
    v464 = 0;
  }
  v260 = v480;
  v465 = v481;
  if (v480 == v479)
  {
    v261 = 4;
    v260 = (uint64_t (***)())v479;
  }
  else
  {
    if (!v480)
      goto LABEL_426;
    v261 = 5;
  }
  (*v260)[v261]();
LABEL_426:
  if (v476 == v475)
  {
    v262 = 4;
  }
  else
  {
    if (!v476)
      goto LABEL_431;
    v262 = 5;
    v251 = v476;
  }
  (*(void (**)(_QWORD *))(*v251 + 8 * v262))(v251);
LABEL_431:
  v263 = v489;
  if (v489 == &v487)
  {
    v264 = 4;
    v263 = &v487;
    p_p = &__p;
  }
  else
  {
    p_p = &__p;
    if (!v489)
      goto LABEL_436;
    v264 = 5;
  }
  (*v263)[v264]();
LABEL_436:
  if (v484 == &v482[1])
  {
    v265 = 4;
  }
  else
  {
    if (!v484)
      goto LABEL_441;
    v265 = 5;
    v243 = v484;
  }
  (*((void (**)(void **))*v243 + v265))(v243);
LABEL_441:
  if (v468 == v467)
  {
    v267 = 4;
    v266 = v449;
  }
  else
  {
    v266 = v449;
    if (!v468)
      goto LABEL_446;
    v267 = 5;
    v240 = v468;
  }
  (*(void (**)(_QWORD *))(*v240 + 8 * v267))(v240);
LABEL_446:
  if (v472 == v471)
  {
    v268 = 4;
    v200 = (uint64_t (***)())v409;
  }
  else
  {
    v200 = (uint64_t (***)())v409;
    if (!v472)
      goto LABEL_451;
    v268 = 5;
    v238 = v472;
  }
  (*((void (**)(void **))*v238 + v268))(v238);
LABEL_451:
  if (v454 == v453)
  {
    v269 = 4;
  }
  else
  {
    if (!v454)
      goto LABEL_456;
    v269 = 5;
    v236 = v454;
  }
  (*(void (**)(_QWORD *))(*v236 + 8 * v269))(v236);
LABEL_456:
  if (v458 == v457)
  {
    v270 = 4;
  }
  else
  {
    if (!v458)
      goto LABEL_461;
    v270 = 5;
    v234 = v458;
  }
  (*((void (**)(void **))*v234 + v270))(v234);
LABEL_461:
  v271 = *(_QWORD *)&v462[8];
  *(void **)&v491 = v460[0];
  v272 = (char *)&v491 + 8;
  if (!*(_QWORD *)&v462[8])
  {
    v273 = v388;
    goto LABEL_465;
  }
  v273 = v388;
  if (*(void ***)&v462[8] != &v460[1])
  {
    v271 = (*(uint64_t (**)(void))(**(_QWORD **)&v462[8] + 16))();
LABEL_465:
    v493 = (char *)v271;
    goto LABEL_467;
  }
  v493 = (char *)&v491 + 8;
  (*((void (**)(void **, char *))v460[1] + 3))(&v460[1], (char *)&v491 + 8);
LABEL_467:
  v494 = *(uint64_t **)&v462[16];
  v486 = *(uint64_t **)&v462[24];
  v274 = &v487;
  v275 = (uint64_t)v464;
  if (v464)
  {
    if (v464 == (uint64_t (***)())v463)
    {
      v489 = &v487;
      (*(void (**)(float *, uint64_t (***)()))(*(_QWORD *)v463 + 24))(v463, &v487);
      goto LABEL_472;
    }
    v275 = (*v464)[2]();
  }
  v489 = (uint64_t (***)())v275;
LABEL_472:
  v490 = v465;
  v276 = (uint64_t *)v491;
  v277 = v486;
  while (v276 != v277)
  {
    v278 = *v276++;
    *(_QWORD *)v273 = v278;
    *(_QWORD *)&v491 = v276;
    if (v276 != v494)
    {
      do
      {
        if (!v493)
          sub_223198474();
        v279 = (*(uint64_t (**)(char *))(*(_QWORD *)v493 + 48))(v493);
        v276 = (uint64_t *)v491;
        if ((v279 & 1) != 0)
          break;
        v276 = (uint64_t *)(v491 + 8);
        *(_QWORD *)&v491 = v276;
      }
      while (v276 != v494);
      v277 = v486;
    }
    v273 += 8;
  }
  if (v489 == &v487)
  {
    v280 = 4;
  }
  else
  {
    if (!v489)
      goto LABEL_486;
    v280 = 5;
    v274 = v489;
  }
  ((void (*)(uint64_t (***)()))(*v274)[v280])(v274);
LABEL_486:
  if (v493 == (char *)&v491 + 8)
  {
    v282 = 4;
    v281 = v437;
  }
  else
  {
    v281 = v437;
    if (!v493)
      goto LABEL_491;
    v282 = 5;
    v272 = v493;
  }
  (*(void (**)(char *))(*(_QWORD *)v272 + 8 * v282))(v272);
LABEL_491:
  if (v464 == (uint64_t (***)())v463)
  {
    v283 = 4;
    v227 = v421;
  }
  else
  {
    v227 = v421;
    if (!v464)
      goto LABEL_496;
    v283 = 5;
    v259 = v464;
  }
  ((void (*)(uint64_t (***)()))(*v259)[v283])(v259);
LABEL_496:
  if (*(void ***)&v462[8] == &v460[1])
  {
    v284 = 4;
    v205 = v417;
  }
  else
  {
    v205 = v417;
    if (!*(_QWORD *)&v462[8])
      goto LABEL_501;
    v284 = 5;
    v258 = *(void ***)&v462[8];
  }
  (*((void (**)(void **))*v258 + v284))(v258);
LABEL_501:
  if (v446 == v445)
  {
    v285 = 4;
    v206 = v413;
    v286 = v445;
  }
  else
  {
    v206 = v413;
    if (!v446)
      goto LABEL_506;
    v285 = 5;
    v286 = v446;
  }
  (*(void (**)(void))(*v286 + 8 * v285))();
LABEL_506:
  if (v450 == v449)
  {
    v287 = 4;
  }
  else
  {
    if (!v450)
      goto LABEL_511;
    v287 = 5;
    v266 = v450;
  }
  (*(void (**)(_QWORD *))(*v266 + 8 * v287))(v266);
LABEL_511:
  v393 = v273;
  if (v438 == v437)
  {
    v289 = 4;
    v288 = v441;
  }
  else
  {
    v288 = v441;
    if (!v438)
      goto LABEL_516;
    v289 = 5;
    v281 = v438;
  }
  (*(void (**)(_QWORD *))(*v281 + 8 * v289))(v281);
LABEL_516:
  if (v442 == v441)
  {
    v290 = 4;
  }
  else
  {
    if (!v442)
      goto LABEL_521;
    v290 = 5;
    v288 = v442;
  }
  (*(void (**)(_QWORD *))(*v288 + 8 * v290))(v288);
LABEL_521:
  if (v422 == v421)
  {
    v291 = 4;
  }
  else
  {
    if (!v422)
      goto LABEL_526;
    v291 = 5;
    v227 = v422;
  }
  (*(void (**)(_QWORD *))(*v227 + 8 * v291))(v227);
LABEL_526:
  if (v426 == v425)
  {
    v292 = 4;
  }
  else
  {
    if (!v426)
      goto LABEL_531;
    v292 = 5;
    v225 = v426;
  }
  (*(void (**)(_QWORD *))(*v225 + 8 * v292))(v225);
LABEL_531:
  if (v414 == v413)
  {
    v294 = 4;
    v293 = a3;
  }
  else
  {
    v293 = a3;
    if (!v414)
      goto LABEL_536;
    v294 = 5;
    v206 = v414;
  }
  (*(void (**)(_QWORD *))(*v206 + 8 * v294))(v206);
LABEL_536:
  if (v418 == v417)
  {
    v295 = 4;
  }
  else
  {
    if (!v418)
      goto LABEL_541;
    v295 = 5;
    v205 = v418;
  }
  (*(void (**)(_QWORD *))(*v205 + 8 * v295))(v205);
LABEL_541:
  if (v410 == v409)
  {
    v296 = 4;
  }
  else
  {
    if (!v410)
      goto LABEL_546;
    v296 = 5;
    v200 = v410;
  }
  ((void (*)(uint64_t (***)()))(*v200)[v296])(v200);
LABEL_546:
  if (v407 == &__p)
  {
    v297 = 4;
    goto LABEL_550;
  }
  if (v407)
  {
    v297 = 5;
    p_p = v407;
LABEL_550:
    (*((void (**)(void **))*p_p + v297))(p_p);
  }
  if ((a2 & 1) == 0)
  {
    v299 = v392;
    v333 = (unint64_t *)v393;
    v334 = (v393 - (char *)v392) >> 3;
    *(_QWORD *)(v293 + 8) = 0;
    *(_QWORD *)(v293 + 16) = 0;
    *(_QWORD *)v293 = 0;
    sub_2232EA6AC(v293, v334);
    if (v333 == v299)
    {
      v299 = v333;
      if (v333)
        goto LABEL_633;
      goto LABEL_634;
    }
    while (1)
    {
      v335 = v299[--v334];
      if (v334)
      {
        v336 = 0;
        v337 = (uint64_t *)*((_QWORD *)v398 + 8 * v335);
        v338 = *v337;
        while (1)
        {
          v339 = v299[v336];
          v340 = (char *)v398 + 64 * v339;
          v342 = *((_QWORD *)v340 + 3);
          v341 = v340 + 24;
          if (v338 >= v342 && v338 <= *((_QWORD *)v341 + 2))
          {
            v344 = v337[1];
            if (v344 >= *((_QWORD *)v341 + 1) && v344 <= *((_QWORD *)v398 + 8 * v339 + 6))
            {
              v346 = (uint64_t *)((char *)v398 + 64 * v339);
              v347 = *v346;
              v348 = v346[1];
              v349 = v348 - v347;
              if (v348 != v347)
              {
                v350 = 0;
                v351 = 0;
                v352 = v349 >> 4;
                v353 = v352 - 1;
                v354 = *(_QWORD *)(v347 + 16 * (v352 - 1) + 8);
                v355 = (uint64_t *)(v347 + 8);
                do
                {
                  v356 = v351;
                  v357 = *v355;
                  if (v354 > v344 == v344 >= *v355)
                    v350 ^= v338 < *(v355 - 1)
                                 + (*(_QWORD *)(v347 + 16 * v353) - *(v355 - 1)) / (v354 - v357) * (v344 - *v355);
                  ++v351;
                  v355 += 2;
                  v354 = v357;
                  v353 = v356;
                }
                while (v352 != v356 + 1);
                if ((v350 & 1) != 0)
                  break;
              }
            }
          }
          if (++v336 == v334)
            goto LABEL_623;
        }
      }
      else
      {
LABEL_623:
        v358 = (char *)v398 + 64 * v335;
        v359 = *(_QWORD **)(v293 + 8);
        if ((unint64_t)v359 >= *(_QWORD *)(v293 + 16))
        {
          v360 = sub_2232EA89C((char **)v293, (uint64_t)v358);
        }
        else
        {
          *v359 = 0;
          v359[1] = 0;
          v359[2] = 0;
          *(_OWORD *)v359 = *(_OWORD *)v358;
          v359[2] = *((_QWORD *)v358 + 2);
          *(_QWORD *)v358 = 0;
          *((_QWORD *)v358 + 1) = 0;
          *((_QWORD *)v358 + 2) = 0;
          v360 = (char *)(v359 + 3);
        }
        *(_QWORD *)(v293 + 8) = v360;
      }
      if (!v334)
        goto LABEL_632;
    }
  }
  sub_223EB617C((float *)&v404, &v398, (uint64_t *)v395, v396, &v392);
  v299 = v392;
  v298 = (unint64_t *)v393;
  v300 = (v393 - (char *)v392) >> 3;
  *(_QWORD *)(v293 + 8) = 0;
  *(_QWORD *)(v293 + 16) = 0;
  *(_QWORD *)v293 = 0;
  sub_2232EA6AC(v293, v300);
  if (v299 == v298)
    goto LABEL_629;
  v301 = v299;
  do
  {
    v302 = *v301;
    if (!__p)
      goto LABEL_574;
    v303 = (uint8x8_t)vcnt_s8((int8x8_t)__p);
    v303.i16[0] = vaddlv_u8(v303);
    if (v303.u32[0] > 1uLL)
    {
      v304 = *v301;
      if (v302 >= (unint64_t)__p)
        v304 = v302 % (unint64_t)__p;
    }
    else
    {
      v304 = ((unint64_t)__p - 1) & v302;
    }
    v305 = (_QWORD *)*((_QWORD *)v404 + v304);
    if (!v305 || (v306 = (_QWORD *)*v305) == 0)
    {
LABEL_574:
      v309 = (char *)v398 + 64 * v302;
      v310 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v310 >= *(_QWORD *)(a3 + 16))
      {
        v311 = sub_2232EA89C((char **)a3, (uint64_t)v309);
      }
      else
      {
        *v310 = 0;
        v310[1] = 0;
        v310[2] = 0;
        *(_OWORD *)v310 = *(_OWORD *)v309;
        v310[2] = *((_QWORD *)v309 + 2);
        *(_QWORD *)v309 = 0;
        *((_QWORD *)v309 + 1) = 0;
        *((_QWORD *)v309 + 2) = 0;
        v311 = (char *)(v310 + 3);
      }
      *(_QWORD *)(a3 + 8) = v311;
      goto LABEL_578;
    }
    if (v303.u32[0] < 2uLL)
    {
      while (1)
      {
        v308 = v306[1];
        if (v302 == v308)
        {
          if (v306[2] == v302)
            goto LABEL_580;
        }
        else if ((v308 & ((uint64_t)__p - 1)) != v304)
        {
          goto LABEL_574;
        }
        v306 = (_QWORD *)*v306;
        if (!v306)
          goto LABEL_574;
      }
    }
    while (1)
    {
      v307 = v306[1];
      if (v302 == v307)
        break;
      if (v307 >= (unint64_t)__p)
        v307 %= (unint64_t)__p;
      if (v307 != v304)
        goto LABEL_574;
LABEL_564:
      v306 = (_QWORD *)*v306;
      if (!v306)
        goto LABEL_574;
    }
    if (v306[2] != v302)
      goto LABEL_564;
LABEL_580:
    v312 = (uint64_t)(v306[4] - v306[3]) >> 3;
    v492 = 0;
    v491 = 0uLL;
    sub_2232EA6AC((uint64_t)&v491, v312);
    v314 = (_QWORD *)v306[3];
    for (i = (_QWORD *)v306[4]; v314 != i; ++v314)
    {
      while (1)
      {
        v315 = (char *)v398 + 64 * *v314;
        v316 = (char *)*((_QWORD *)v315 + 2);
        v317 = *(_OWORD *)v315;
        *((_QWORD *)v315 + 1) = 0;
        *((_QWORD *)v315 + 2) = 0;
        *(_QWORD *)v315 = 0;
        *(_OWORD *)v460 = v317;
        v461 = v316;
        v318 = *((_QWORD *)&v491 + 1);
        if (*((_QWORD *)&v491 + 1) >= (unint64_t)v492)
          break;
        **((_QWORD **)&v491 + 1) = 0;
        *(_QWORD *)(v318 + 8) = 0;
        *(_QWORD *)(v318 + 16) = 0;
        *(_OWORD *)v318 = *(_OWORD *)v460;
        *(_QWORD *)(v318 + 16) = v461;
        *((_QWORD *)&v491 + 1) = v318 + 24;
        if (++v314 == i)
          goto LABEL_587;
      }
      *((_QWORD *)&v491 + 1) = sub_223793D38((char **)&v491, (uint64_t)v460);
      if (v460[0])
      {
        v460[1] = v460[0];
        operator delete(v460[0]);
      }
    }
LABEL_587:
    v319 = v492;
    v320 = v491;
    v321 = (char *)v398 + 64 * v302;
    v322 = (char *)*((_QWORD *)v321 + 2);
    v323 = *(_OWORD *)v321;
    *((_QWORD *)v321 + 1) = 0;
    *((_QWORD *)v321 + 2) = 0;
    *(_QWORD *)v321 = 0;
    v486 = 0;
    v487 = 0;
    v488 = 0;
    *(_OWORD *)v460 = v323;
    *(_OWORD *)v462 = v320;
    v461 = v322;
    *(_QWORD *)&v462[16] = v319;
    sub_223EC5D30((uint64_t)v460, 0, (char **)v482);
    v491 = *(_OWORD *)v482;
    v492 = v483;
    v483 = 0;
    v482[1] = 0;
    v482[0] = 0;
    v324 = *(_QWORD **)(a3 + 8);
    if ((unint64_t)v324 >= *(_QWORD *)(a3 + 16))
    {
      v325 = sub_2232EA89C((char **)a3, (uint64_t)&v491);
      v326 = (void *)v491;
      *(_QWORD *)(a3 + 8) = v325;
      if (v326)
      {
        *((_QWORD *)&v491 + 1) = v326;
        operator delete(v326);
      }
    }
    else
    {
      *v324 = 0;
      v324[1] = 0;
      v324[2] = 0;
      *(_OWORD *)v324 = v491;
      v324[2] = v492;
      v491 = 0uLL;
      v492 = 0;
      *(_QWORD *)(a3 + 8) = v324 + 3;
    }
    if (v482[0])
    {
      v482[1] = v482[0];
      operator delete(v482[0]);
    }
    v327 = *(_QWORD *)v462;
    if (*(_QWORD *)v462)
    {
      v328 = *(_QWORD *)&v462[8];
      v329 = *(void **)v462;
      if (*(_QWORD *)&v462[8] != *(_QWORD *)v462)
      {
        v330 = *(_QWORD *)&v462[8];
        do
        {
          v332 = *(void **)(v330 - 24);
          v330 -= 24;
          v331 = v332;
          if (v332)
          {
            *(_QWORD *)(v328 - 16) = v331;
            operator delete(v331);
          }
          v328 = v330;
        }
        while (v330 != v327);
        v329 = *(void **)v462;
      }
      *(_QWORD *)&v462[8] = v327;
      operator delete(v329);
    }
    if (v460[0])
    {
      v460[1] = v460[0];
      operator delete(v460[0]);
    }
LABEL_578:
    ++v301;
  }
  while (v301 != v298);
LABEL_629:
  v361 = v406;
  if (v406)
  {
    do
    {
      v369 = (_QWORD *)*v361;
      v370 = (void *)v361[3];
      if (v370)
      {
        v361[4] = v370;
        operator delete(v370);
      }
      operator delete(v361);
      v361 = v369;
    }
    while (v369);
  }
  v362 = v404;
  v404 = 0;
  if (v362)
    operator delete(v362);
LABEL_632:
  if (v299)
LABEL_633:
    operator delete(v299);
LABEL_634:
  if (v395)
    operator delete(v395);
  v363 = (char *)v398;
  if (v398)
  {
    v364 = v399;
    v365 = v398;
    if (v399 != v398)
    {
      v366 = v399;
      do
      {
        v368 = (void *)*((_QWORD *)v366 - 8);
        v366 -= 64;
        v367 = v368;
        if (v368)
        {
          *((_QWORD *)v364 - 7) = v367;
          operator delete(v367);
        }
        v364 = v366;
      }
      while (v366 != v363);
      v365 = v398;
    }
    v399 = v363;
    operator delete(v365);
  }
  v371 = (char *)v401;
  if (v401)
  {
    v372 = v402;
    v373 = v401;
    if (v402 != v401)
    {
      do
      {
        v374 = (void *)*((_QWORD *)v372 - 6);
        if (v374)
        {
          *((_QWORD *)v372 - 5) = v374;
          operator delete(v374);
        }
        v372 -= 56;
      }
      while (v372 != v371);
      v373 = v401;
    }
    v402 = v371;
    operator delete(v373);
  }
}

void sub_223EB5C88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223EB5DC4()
{
  JUMPOUT(0x223EB60ECLL);
}

void sub_223EB5DCC()
{
  JUMPOUT(0x223EB5FB4);
}

void sub_223EB5DE4()
{
  JUMPOUT(0x223EB5E08);
}

void sub_223EB5DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v34;

  v34 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v34;
    operator delete(v34);
  }
  sub_22317C838((void **)(v33 - 176));
  sub_22317C838(a14);
  sub_223EB8208((uint64_t)&a33);
  if (a21)
    operator delete(a21);
  JUMPOUT(0x223EB6154);
}

void sub_223EB5E2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)(v2 - 144);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 - 144);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  if (v6)
    operator delete(v6);
  sub_223EB8270(&v7);
  sub_223EB82E4(&v8);
  _Unwind_Resume(a1);
}

void sub_223EB5E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, _QWORD *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,_QWORD *a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  v71 = *(_QWORD **)(v70 - 192);
  if (v71 == v68)
  {
    v72 = 4;
  }
  else
  {
    if (!v71)
      goto LABEL_6;
    v72 = 5;
    v68 = *(_QWORD **)(v70 - 192);
  }
  (*(void (**)(_QWORD *))(*v68 + 8 * v72))(v68);
LABEL_6:
  v73 = *(_QWORD **)(v70 - 144);
  if (v73 == v67)
  {
    v74 = 4;
  }
  else
  {
    if (!v73)
      goto LABEL_11;
    v74 = 5;
    v67 = *(_QWORD **)(v70 - 144);
  }
  (*(void (**)(_QWORD *))(*v67 + 8 * v74))(v67);
LABEL_11:
  sub_22330FE84(&STACK[0x360]);
  if ((_QWORD *)STACK[0x2C0] == a20)
  {
    v75 = 4;
  }
  else
  {
    if (!STACK[0x2C0])
      goto LABEL_16;
    v75 = 5;
    a20 = (_QWORD *)STACK[0x2C0];
  }
  (*(void (**)(void))(*a20 + 8 * v75))();
LABEL_16:
  v76 = a18;
  if ((_QWORD *)STACK[0x2F0] == a18)
  {
    v77 = 4;
  }
  else
  {
    if (!STACK[0x2F0])
      goto LABEL_21;
    v77 = 5;
    v76 = (_QWORD *)STACK[0x2F0];
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v77))(v76);
LABEL_21:
  v78 = a12;
  if ((_QWORD *)STACK[0x260] == a12)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x260])
      goto LABEL_26;
    v79 = 5;
    v78 = (_QWORD *)STACK[0x260];
  }
  (*(void (**)(_QWORD *))(*v78 + 8 * v79))(v78);
LABEL_26:
  v80 = a13;
  if ((_QWORD *)STACK[0x290] == a13)
  {
    v81 = 4;
  }
  else
  {
    if (!STACK[0x290])
      goto LABEL_31;
    v81 = 5;
    v80 = (_QWORD *)STACK[0x290];
  }
  (*(void (**)(_QWORD *))(*v80 + 8 * v81))(v80);
LABEL_31:
  v82 = a15;
  if (a21)
    operator delete(a21);
  if (a61 == a15)
  {
    v83 = 4;
  }
  else
  {
    if (!a61)
      goto LABEL_38;
    v83 = 5;
    v82 = a61;
  }
  (*(void (**)(_QWORD *))(*v82 + 8 * v83))(v82);
LABEL_38:
  if (a67 != v69 && !a67)
    JUMPOUT(0x223EB60ECLL);
  JUMPOUT(0x223EB60DCLL);
}

void sub_223EB6024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55)
{
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v62 = *(_QWORD **)(v61 - 144);
  if (v62 == v57)
  {
    v63 = 4;
  }
  else
  {
    if (!v62)
      goto LABEL_6;
    v63 = 5;
    v57 = *(_QWORD **)(v61 - 144);
  }
  (*(void (**)(_QWORD *))(*v57 + 8 * v63))(v57);
LABEL_6:
  if ((_QWORD *)STACK[0x380] == v56)
  {
    v64 = 4;
  }
  else
  {
    if (!STACK[0x380])
      goto LABEL_11;
    v64 = 5;
    v56 = (_QWORD *)STACK[0x380];
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v64))(v56);
LABEL_11:
  if ((_QWORD *)STACK[0x200] == v55)
  {
    v65 = 4;
  }
  else
  {
    if (!STACK[0x200])
      goto LABEL_16;
    v65 = 5;
    v55 = (_QWORD *)STACK[0x200];
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v65))(v55);
LABEL_16:
  if ((_QWORD *)STACK[0x230] == v58)
  {
    v66 = 4;
  }
  else
  {
    if (!STACK[0x230])
      goto LABEL_21;
    v66 = 5;
    v58 = (_QWORD *)STACK[0x230];
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v66))(v58);
LABEL_21:
  if (a49 == v59)
  {
    v67 = 4;
  }
  else
  {
    if (!a49)
      goto LABEL_26;
    v67 = 5;
    v59 = a49;
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v67))(v59);
LABEL_26:
  if (a55 == v60)
  {
    v68 = 4;
  }
  else
  {
    if (!a55)
    {
LABEL_31:
      sub_22330FE84(&a33);
      JUMPOUT(0x223EB6154);
    }
    v68 = 5;
    v60 = a55;
  }
  (*(void (**)(_QWORD *))(*v60 + 8 * v68))(v60);
  goto LABEL_31;
}

void sub_223EB617C(float *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t ***v12;
  uint64_t ****v13;
  uint64_t (**v14)();
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t ***v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t **v57;
  _QWORD *v58;
  uint64_t **v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t **v62;
  _QWORD *v63;
  uint64_t *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t **v70;
  _QWORD *v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t ***v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  float *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint8x8_t v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  const char *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint8x8_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  float v164;
  float v165;
  uint64_t v166;
  uint64_t *v167;
  _BOOL8 v168;
  unint64_t v169;
  unint64_t v170;
  size_t prime;
  float *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t *v176;
  size_t v177;
  size_t v178;
  size_t v179;
  uint64_t *v180;
  size_t v181;
  uint64_t v182;
  unint64_t v183;
  uint8x8_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  size_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  void *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  _QWORD *v202;
  int64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  _OWORD *v208;
  char *v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t *v213;
  _QWORD *v214;
  uint64_t **v215;
  uint64_t *v217;
  uint64_t *v218;
  char *v219;
  uint64_t *v220;
  _QWORD v221[3];
  _QWORD *v222;
  __int128 v223;
  _QWORD v224[3];
  _QWORD *v225;
  uint64_t *v226;
  uint64_t *v227;
  _QWORD v228[3];
  _QWORD *v229;
  uint64_t *v230;
  uint64_t *v231;
  _QWORD v232[3];
  _QWORD *v233;
  _QWORD *v234;
  uint64_t *v235;
  _QWORD v236[3];
  _QWORD *v237;
  uint64_t *v238;
  uint64_t *v239;
  _QWORD v240[3];
  _QWORD *v241;
  _QWORD *v242;
  uint64_t *v243;
  _QWORD v244[3];
  _QWORD *v245;
  uint64_t *v246;
  uint64_t *v247;
  _QWORD v248[3];
  _QWORD *v249;
  _QWORD *v250;
  uint64_t *v251;
  _QWORD v252[3];
  _QWORD *v253;
  uint64_t *v254;
  uint64_t *v255;
  _QWORD v256[2];
  _QWORD *v257;
  _QWORD *v258;
  uint64_t *v259;
  _QWORD v260[3];
  _QWORD *v261;
  uint64_t *v262;
  uint64_t *v263;
  _QWORD v264[3];
  _QWORD *v265;
  uint64_t *v266;
  uint64_t *v267;
  _QWORD v268[3];
  _QWORD *v269;
  uint64_t *v270;
  uint64_t *v271;
  _QWORD v272[3];
  _QWORD *v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t **v276;
  char v277;
  uint64_t ***v278;
  __int128 v279;
  _QWORD v280[3];
  _QWORD *v281;
  uint64_t *v282;
  uint64_t *v283;
  _QWORD v284[3];
  _QWORD *v285;
  uint64_t *v286;
  uint64_t *v287;
  _QWORD v288[3];
  _QWORD *v289;
  uint64_t *v290;
  uint64_t *v291;
  _QWORD v292[3];
  _QWORD *v293;
  uint64_t *v294;
  uint64_t *v295;
  _QWORD v296[3];
  _QWORD *v297;
  uint64_t *v298;
  uint64_t *v299;
  _QWORD v300[3];
  _QWORD *v301;
  uint64_t *v302;
  uint64_t *v303;
  _QWORD v304[3];
  _QWORD *v305;
  uint64_t *v306;
  uint64_t *v307;
  _QWORD v308[3];
  _QWORD *v309;
  uint64_t *v310;
  uint64_t v311;

  v7 = a2;
  v311 = *MEMORY[0x24BDAC8D0];
  v307 = a3;
  v308[0] = &off_24EC63E48;
  v8 = v308;
  v308[1] = a2;
  v309 = v308;
  v310 = a4;
  if (a3 == a4)
  {
    v10 = v308;
  }
  else
  {
    v9 = v308;
    while (!(*(unsigned int (**)(_QWORD *, uint64_t *))(*v9 + 48))(v9, a3))
    {
      a3 = v307 + 1;
      v307 = a3;
      if (a3 == v310)
        goto LABEL_9;
      v9 = v309;
      if (!v309)
        sub_223198474();
    }
    a3 = v307;
LABEL_9:
    v10 = v309;
  }
  v11 = v304;
  v303 = a4;
  v304[0] = &off_24EC63E48;
  v304[1] = v7;
  v305 = v304;
  v306 = a4;
  v275 = a3;
  v12 = &v276;
  if (!v10)
  {
    v13 = &v278;
    goto LABEL_14;
  }
  if (v10 != v308)
  {
    v13 = &v309;
    v278 = v10;
LABEL_14:
    *v13 = 0;
    *(_QWORD *)&v279 = v310;
    *((_QWORD *)&v279 + 1) = a4;
    v14 = &off_24EC63E48;
    goto LABEL_15;
  }
  v278 = &v276;
  (*(void (**)(_QWORD *, uint64_t ***))(v308[0] + 24))(v308, &v276);
  *(_QWORD *)&v279 = v310;
  *((_QWORD *)&v279 + 1) = v303;
  if (!v305)
  {
    v281 = 0;
    v15 = 0;
    v282 = v306;
    if (v304)
      goto LABEL_16;
    goto LABEL_21;
  }
  if (v305 != v304)
  {
    v281 = v305;
    v305 = 0;
    v15 = 0;
    v282 = v306;
    if (v304)
      goto LABEL_16;
LABEL_21:
    v16 = 4;
    goto LABEL_22;
  }
  v14 = (uint64_t (**)())v304[0];
LABEL_15:
  v281 = v280;
  ((void (*)(_QWORD *))v14[3])(v304);
  v15 = v305;
  v282 = v306;
  if (v305 == v304)
    goto LABEL_21;
LABEL_16:
  if (!v15)
    goto LABEL_23;
  v16 = 5;
  v11 = v15;
LABEL_22:
  (*(void (**)(_QWORD *))(*v11 + 8 * v16))(v11);
LABEL_23:
  if (v309 == v308)
  {
    v17 = 4;
  }
  else
  {
    if (!v309)
      goto LABEL_28;
    v17 = 5;
    v8 = v309;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v17))(v8);
LABEL_28:
  v220 = v275;
  v18 = &v220;
  if (!v278)
  {
LABEL_31:
    v18[4] = 0;
    goto LABEL_33;
  }
  if (v278 != &v276)
  {
    v18 = &v275;
    v222 = v278;
    goto LABEL_31;
  }
  v222 = v221;
  ((void (*)(uint64_t ***, _QWORD *))v276[3])(&v276, v221);
LABEL_33:
  v223 = v279;
  v19 = &v220;
  if (!v281)
  {
LABEL_36:
    v19[10] = 0;
    goto LABEL_38;
  }
  v19 = &v275;
  if (v281 != v280)
  {
    v225 = v281;
    goto LABEL_36;
  }
  v225 = v224;
  (*(void (**)(void))(v280[0] + 24))();
LABEL_38:
  v20 = v281;
  v226 = v282;
  if (v281 == v280)
  {
    v21 = 4;
    v20 = v280;
  }
  else
  {
    if (!v281)
      goto LABEL_43;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_43:
  if (v278 == &v276)
  {
    v22 = 4;
  }
  else
  {
    if (!v278)
      goto LABEL_48;
    v22 = 5;
    v12 = v278;
  }
  (*(void (**)(uint64_t ***))(*v12 + 8 * v22))((uint64_t ***)v12);
LABEL_48:
  v23 = (uint64_t)v222;
  v231 = v220;
  v24 = v232;
  if (!v222)
  {
LABEL_51:
    v233 = (_QWORD *)v23;
    goto LABEL_53;
  }
  if (v222 != v221)
  {
    v23 = (*(uint64_t (**)(void))(*v222 + 16))();
    goto LABEL_51;
  }
  v233 = v232;
  (*(void (**)(_QWORD *, _QWORD *))(v221[0] + 24))(v221, v232);
LABEL_53:
  v227 = (uint64_t *)*((_QWORD *)&v223 + 1);
  v234 = (_QWORD *)v223;
  v25 = v228;
  v26 = (uint64_t)v225;
  if (!v225)
  {
LABEL_56:
    v229 = (_QWORD *)v26;
    goto LABEL_58;
  }
  if (v225 != v224)
  {
    v26 = (*(uint64_t (**)(void))(*v225 + 16))();
    goto LABEL_56;
  }
  v229 = v228;
  (*(void (**)(_QWORD *, _QWORD *))(v224[0] + 24))(v224, v228);
LABEL_58:
  v230 = v226;
  v218 = 0;
  v219 = 0;
  v217 = 0;
  v27 = (uint64_t)v233;
  v247 = v231;
  v28 = v248;
  if (!v233)
  {
LABEL_61:
    v249 = (_QWORD *)v27;
    goto LABEL_63;
  }
  if (v233 != v232)
  {
    v27 = (*(uint64_t (**)(void))(*v233 + 16))();
    goto LABEL_61;
  }
  v249 = v248;
  (*(void (**)(_QWORD *, _QWORD *))(v232[0] + 24))(v232, v248);
LABEL_63:
  v250 = v234;
  v29 = (uint64_t)v229;
  v243 = v227;
  v30 = v244;
  if (!v229)
  {
LABEL_66:
    v245 = (_QWORD *)v29;
    goto LABEL_68;
  }
  if (v229 != v228)
  {
    v29 = (*(uint64_t (**)(void))(*v229 + 16))();
    goto LABEL_66;
  }
  v245 = v244;
  (*(void (**)(_QWORD *, _QWORD *))(v228[0] + 24))(v228, v244);
LABEL_68:
  v246 = v230;
  v31 = (uint64_t)v249;
  v275 = v247;
  v32 = &v276;
  if (!v249)
  {
LABEL_71:
    v278 = (_QWORD *)v31;
    goto LABEL_73;
  }
  if (v249 != v248)
  {
    v31 = (*(uint64_t (**)(void))(*v249 + 16))();
    goto LABEL_71;
  }
  v278 = &v276;
  (*(void (**)(_QWORD *, uint64_t ***))(v248[0] + 24))(v248, &v276);
LABEL_73:
  *(_QWORD *)&v279 = v250;
  v33 = (uint64_t)v245;
  v307 = v243;
  v34 = v308;
  if (!v245)
  {
LABEL_76:
    v309 = (_QWORD *)v33;
    goto LABEL_78;
  }
  if (v245 != v244)
  {
    v33 = (*(uint64_t (**)(void))(*v245 + 16))();
    goto LABEL_76;
  }
  v309 = v308;
  (*(void (**)(_QWORD *, _QWORD *))(v244[0] + 24))(v244, v308);
LABEL_78:
  v310 = v246;
  v35 = v275;
  v36 = v307;
  if (v275 == v307)
  {
    v37 = 0;
  }
  else
  {
    v37 = 0;
    do
    {
      v275 = ++v35;
      if (v35 != (uint64_t *)v279)
      {
        do
        {
          if (!v278)
            sub_223198474();
          v38 = (*(uint64_t (**)(uint64_t ***))(*v278 + 48))((uint64_t ***)v278);
          v35 = v275;
          if ((v38 & 1) != 0)
            break;
          v35 = v275 + 1;
          v275 = v35;
        }
        while (v35 != (uint64_t *)v279);
        v36 = v307;
      }
      ++v37;
    }
    while (v35 != v36);
  }
  if (v309 == v308)
  {
    v39 = 4;
  }
  else
  {
    if (!v309)
      goto LABEL_93;
    v39 = 5;
    v34 = v309;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v39))(v34);
LABEL_93:
  if (v278 == &v276)
  {
    v40 = 4;
  }
  else
  {
    if (!v278)
      goto LABEL_98;
    v40 = 5;
    v32 = v278;
  }
  (*(void (**)(uint64_t ***))(*v32 + 8 * v40))((uint64_t ***)v32);
LABEL_98:
  if (v245 == v244)
  {
    v41 = 4;
  }
  else
  {
    if (!v245)
      goto LABEL_103;
    v41 = 5;
    v30 = v245;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v41))(v30);
LABEL_103:
  if (v249 == v248)
  {
    v42 = 4;
  }
  else
  {
    if (!v249)
      goto LABEL_108;
    v42 = 5;
    v28 = v249;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v42))(v28);
LABEL_108:
  v43 = (uint64_t)v233;
  v239 = v231;
  v44 = v240;
  if (!v233)
  {
LABEL_111:
    v241 = (_QWORD *)v43;
    goto LABEL_113;
  }
  if (v233 != v232)
  {
    v43 = (*(uint64_t (**)(void))(*v233 + 16))();
    goto LABEL_111;
  }
  v241 = v240;
  (*(void (**)(_QWORD *, _QWORD *))(v232[0] + 24))(v232, v240);
LABEL_113:
  v242 = v234;
  v45 = (uint64_t)v229;
  v235 = v227;
  v46 = v236;
  if (!v229)
  {
LABEL_116:
    v237 = (_QWORD *)v45;
    goto LABEL_118;
  }
  if (v229 != v228)
  {
    v45 = (*(uint64_t (**)(void))(*v229 + 16))();
    goto LABEL_116;
  }
  v237 = v236;
  (*(void (**)(_QWORD *, _QWORD *))(v228[0] + 24))(v228, v236);
LABEL_118:
  v238 = v230;
  if (!v37)
    goto LABEL_306;
  if (v37 >> 61)
    sub_22367C394();
  v47 = (char *)operator new(8 * v37);
  v217 = (uint64_t *)v47;
  v219 = &v47[8 * v37];
  v48 = (uint64_t)v241;
  v255 = v239;
  if (!v241)
    goto LABEL_123;
  if (v241 != v240)
  {
    v48 = (*(uint64_t (**)(void))(*v241 + 16))();
LABEL_123:
    v257 = (_QWORD *)v48;
    goto LABEL_125;
  }
  v257 = v256;
  (*(void (**)(_QWORD *, _QWORD *))(v240[0] + 24))(v240, v256);
LABEL_125:
  v213 = (uint64_t *)v47;
  v258 = v242;
  v49 = (uint64_t)v237;
  v251 = v235;
  if (!v237)
  {
LABEL_128:
    v253 = (_QWORD *)v49;
    goto LABEL_130;
  }
  if (v237 != v236)
  {
    v49 = (*(uint64_t (**)(void))(*v237 + 16))();
    goto LABEL_128;
  }
  v253 = v252;
  (*(void (**)(_QWORD *, _QWORD *))(v236[0] + 24))(v236, v252);
LABEL_130:
  v254 = v238;
  v50 = (uint64_t)v257;
  v263 = v255;
  if (!v257)
  {
LABEL_133:
    v265 = (_QWORD *)v50;
    goto LABEL_135;
  }
  if (v257 != v256)
  {
    v50 = (*(uint64_t (**)(void))(*v257 + 16))();
    goto LABEL_133;
  }
  v265 = v264;
  (*(void (**)(_QWORD *, _QWORD *))(v256[0] + 24))(v256, v264);
LABEL_135:
  v266 = v258;
  v51 = (uint64_t)v253;
  v259 = v251;
  if (!v253)
  {
LABEL_138:
    v261 = (_QWORD *)v51;
    goto LABEL_140;
  }
  if (v253 != v252)
  {
    v51 = (*(uint64_t (**)(void))(*v253 + 16))();
    goto LABEL_138;
  }
  v261 = v260;
  (*(void (**)(_QWORD *))(v252[0] + 24))(v252);
LABEL_140:
  v262 = v254;
  v52 = (uint64_t)v265;
  v271 = v263;
  v53 = v272;
  if (!v265)
  {
LABEL_143:
    v273 = (_QWORD *)v52;
    goto LABEL_145;
  }
  if (v265 != v264)
  {
    v52 = (*(uint64_t (**)(void))(*v265 + 16))();
    goto LABEL_143;
  }
  v273 = v272;
  (*(void (**)(_QWORD *, _QWORD *))(v264[0] + 24))(v264, v272);
LABEL_145:
  v274 = v266;
  v54 = (uint64_t)v261;
  v267 = v259;
  v55 = v268;
  if (!v261)
  {
LABEL_148:
    v269 = (_QWORD *)v54;
    goto LABEL_150;
  }
  if (v261 != v260)
  {
    v54 = (*(uint64_t (**)(void))(*v261 + 16))();
    goto LABEL_148;
  }
  v269 = v268;
  (*(void (**)(_QWORD *, _QWORD *))(v260[0] + 24))(v260, v268);
LABEL_150:
  v56 = v7;
  v270 = v262;
  v287 = v271;
  v57 = &v287;
  v58 = v288;
  if (!v273)
  {
LABEL_153:
    v57[4] = 0;
    goto LABEL_155;
  }
  if (v273 != v272)
  {
    v57 = &v271;
    v289 = v273;
    goto LABEL_153;
  }
  v289 = v288;
  (*(void (**)(_QWORD *, _QWORD *))(v272[0] + 24))(v272, v288);
LABEL_155:
  v290 = v274;
  v283 = v267;
  v59 = &v283;
  v60 = v284;
  if (!v269)
  {
LABEL_158:
    v59[4] = 0;
    goto LABEL_160;
  }
  if (v269 != v268)
  {
    v59 = &v267;
    v285 = v269;
    goto LABEL_158;
  }
  v285 = v284;
  (*(void (**)(_QWORD *, _QWORD *))(v268[0] + 24))(v268, v284);
LABEL_160:
  v286 = v270;
  v61 = v287;
  v299 = v287;
  v62 = &v299;
  v63 = v300;
  if (!v289)
  {
LABEL_163:
    v62[4] = 0;
    goto LABEL_165;
  }
  if (v289 != v288)
  {
    v62 = &v287;
    v301 = v289;
    goto LABEL_163;
  }
  v301 = v300;
  (*(void (**)(_QWORD *, _QWORD *))(v288[0] + 24))(v288, v300);
  v61 = v299;
LABEL_165:
  v64 = v290;
  v302 = v290;
  v307 = v61;
  v65 = v308;
  if (!v301)
  {
    v309 = 0;
    v310 = v290;
    v303 = v61;
    goto LABEL_170;
  }
  if (v301 == v300)
  {
    v309 = v308;
    (*(void (**)(_QWORD *, _QWORD *))(v300[0] + 24))(v300, v308);
    v66 = v309;
    v64 = v302;
    v310 = v302;
    v303 = v307;
    if (!v309)
      goto LABEL_170;
LABEL_174:
    if (v66 == v308)
    {
      v305 = v304;
      (*(void (**)(_QWORD *))(v308[0] + 24))(v308);
      v67 = v309;
      v306 = v310;
      if (v309 != v308)
        goto LABEL_171;
    }
    else
    {
      v305 = v66;
      v306 = v64;
      v309 = 0;
      v67 = 0;
      if (v308)
        goto LABEL_171;
    }
LABEL_176:
    v68 = 4;
    goto LABEL_177;
  }
  v66 = (_QWORD *)(*(uint64_t (**)(void))(*v301 + 16))();
  v64 = v302;
  v309 = v66;
  v310 = v302;
  v303 = v307;
  if (v66)
    goto LABEL_174;
LABEL_170:
  v305 = 0;
  v306 = v64;
  v67 = v309;
  if (v309 == v308)
    goto LABEL_176;
LABEL_171:
  if (!v67)
    goto LABEL_178;
  v68 = 5;
  v65 = v67;
LABEL_177:
  (*(void (**)(_QWORD *))(*v65 + 8 * v68))(v65);
LABEL_178:
  v69 = v283;
  v291 = v283;
  v70 = &v291;
  v71 = v292;
  if (!v285)
  {
LABEL_181:
    v70[4] = 0;
    goto LABEL_183;
  }
  if (v285 != v284)
  {
    v70 = &v283;
    v293 = v285;
    goto LABEL_181;
  }
  v293 = v292;
  (*(void (**)(_QWORD *, _QWORD *))(v284[0] + 24))(v284, v292);
  v69 = v291;
LABEL_183:
  v72 = v286;
  v294 = v286;
  v307 = v69;
  v73 = v308;
  if (!v293)
  {
    v309 = 0;
    v310 = v286;
    v295 = v69;
    goto LABEL_188;
  }
  if (v293 == v292)
  {
    v309 = v308;
    (*(void (**)(_QWORD *, _QWORD *))(v292[0] + 24))(v292, v308);
    v74 = v309;
    v72 = v294;
    v310 = v294;
    v295 = v307;
    if (!v309)
      goto LABEL_188;
LABEL_192:
    if (v74 == v308)
    {
      v297 = v296;
      (*(void (**)(_QWORD *))(v308[0] + 24))(v308);
      v75 = v309;
      v298 = v310;
      if (v309 != v308)
        goto LABEL_189;
    }
    else
    {
      v297 = v74;
      v309 = 0;
      v298 = v72;
      v75 = 0;
      if (v308)
        goto LABEL_189;
    }
LABEL_194:
    v76 = 4;
    goto LABEL_195;
  }
  v74 = (_QWORD *)(*(uint64_t (**)(void))(*v293 + 16))();
  v72 = v294;
  v309 = v74;
  v310 = v294;
  v295 = v307;
  if (v74)
    goto LABEL_192;
LABEL_188:
  v297 = 0;
  v298 = v72;
  v75 = v309;
  if (v309 == v308)
    goto LABEL_194;
LABEL_189:
  if (!v75)
    goto LABEL_196;
  v76 = 5;
  v73 = v75;
LABEL_195:
  (*(void (**)(_QWORD *))(*v73 + 8 * v76))(v73);
LABEL_196:
  v275 = v303;
  v77 = &v275;
  v78 = &v276;
  if (!v305)
  {
LABEL_199:
    v77[4] = 0;
    goto LABEL_201;
  }
  v77 = &v303;
  if (v305 != v304)
  {
    v278 = v305;
    goto LABEL_199;
  }
  v278 = &v276;
  (*(void (**)(void))(v304[0] + 24))();
LABEL_201:
  *(_QWORD *)&v279 = v306;
  *((_QWORD *)&v279 + 1) = v295;
  v79 = v280;
  if (v297)
  {
    if (v297 == v296)
    {
      v281 = v280;
      (*(void (**)(void))(v296[0] + 24))();
    }
    else
    {
      v281 = v297;
      v297 = 0;
    }
  }
  else
  {
    v281 = 0;
  }
  v80 = v297;
  v282 = v298;
  if (v297 == v296)
  {
    v81 = 4;
    v80 = v296;
  }
  else
  {
    if (!v297)
      goto LABEL_211;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_211:
  if (v293 == v292)
  {
    v82 = 4;
  }
  else
  {
    if (!v293)
      goto LABEL_216;
    v82 = 5;
    v71 = v293;
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v82))(v71);
LABEL_216:
  v83 = v305;
  if (v305 == v304)
  {
    v84 = 4;
    v83 = v304;
  }
  else
  {
    if (!v305)
      goto LABEL_221;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_221:
  if (v301 == v300)
  {
    v85 = 4;
  }
  else
  {
    if (!v301)
      goto LABEL_226;
    v85 = 5;
    v63 = v301;
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v85))(v63);
LABEL_226:
  if (v285 == v284)
  {
    v86 = 4;
  }
  else
  {
    if (!v285)
      goto LABEL_231;
    v86 = 5;
    v60 = v285;
  }
  (*(void (**)(_QWORD *))(*v60 + 8 * v86))(v60);
LABEL_231:
  if (v289 == v288)
  {
    v87 = 4;
    v25 = v228;
  }
  else
  {
    v25 = v228;
    if (!v289)
      goto LABEL_236;
    v87 = 5;
    v58 = v289;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v87))(v58);
LABEL_236:
  if (v269 == v268)
  {
    v88 = 4;
    v7 = v56;
  }
  else
  {
    v7 = v56;
    if (!v269)
      goto LABEL_241;
    v88 = 5;
    v55 = v269;
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v88))(v55);
LABEL_241:
  if (v273 == v272)
  {
    v89 = 4;
    v44 = v240;
  }
  else
  {
    v44 = v240;
    if (!v273)
      goto LABEL_246;
    v89 = 5;
    v53 = v273;
  }
  (*(void (**)(_QWORD *))(*v53 + 8 * v89))(v53);
LABEL_246:
  v90 = (uint64_t)v278;
  v307 = v275;
  v91 = v308;
  if (!v278)
  {
LABEL_249:
    v309 = (_QWORD *)v90;
    goto LABEL_251;
  }
  if (v278 != &v276)
  {
    v90 = (*(uint64_t (**)(void))(*v278 + 16))();
    goto LABEL_249;
  }
  v309 = v308;
  ((void (*)(uint64_t ***, _QWORD *))v276[3])(&v276, v308);
LABEL_251:
  v303 = (uint64_t *)*((_QWORD *)&v279 + 1);
  v310 = (uint64_t *)v279;
  v92 = v304;
  v93 = (uint64_t)v281;
  if (!v281)
  {
LABEL_254:
    v305 = (_QWORD *)v93;
    goto LABEL_256;
  }
  if (v281 != v280)
  {
    v93 = (*(uint64_t (**)(void))(*v281 + 16))();
    goto LABEL_254;
  }
  v305 = v304;
  (*(void (**)(_QWORD *, _QWORD *))(v280[0] + 24))(v280, v304);
LABEL_256:
  v306 = v282;
  v94 = v307;
  v95 = v303;
  if (v307 == v303)
  {
    v96 = v213;
  }
  else
  {
    v96 = v213;
    do
    {
      v97 = *v94++;
      *v96 = v97;
      v307 = v94;
      if (v94 != v310)
      {
        do
        {
          if (!v309)
            sub_223198474();
          v98 = (*(uint64_t (**)(_QWORD *))(*v309 + 48))(v309);
          v94 = v307;
          if ((v98 & 1) != 0)
            break;
          v94 = v307 + 1;
          v307 = v94;
        }
        while (v94 != v310);
        v95 = v303;
      }
      ++v96;
    }
    while (v94 != v95);
  }
  if (v305 == v304)
  {
    v99 = 4;
  }
  else
  {
    if (!v305)
      goto LABEL_271;
    v99 = 5;
    v92 = v305;
  }
  (*(void (**)(_QWORD *))(*v92 + 8 * v99))(v92);
LABEL_271:
  if (v309 == v308)
  {
    v100 = 4;
    v46 = v236;
  }
  else
  {
    v46 = v236;
    if (!v309)
      goto LABEL_276;
    v100 = 5;
    v91 = v309;
  }
  (*(void (**)(_QWORD *))(*v91 + 8 * v100))(v91);
LABEL_276:
  if (v281 == v280)
  {
    v102 = 4;
    v101 = v252;
  }
  else
  {
    v101 = v252;
    if (!v281)
      goto LABEL_281;
    v102 = 5;
    v79 = v281;
  }
  (*(void (**)(_QWORD *))(*v79 + 8 * v102))(v79);
LABEL_281:
  if (v278 == &v276)
  {
    v103 = 4;
    v24 = v232;
  }
  else
  {
    v24 = v232;
    if (!v278)
      goto LABEL_286;
    v103 = 5;
    v78 = v278;
  }
  (*(void (**)(uint64_t ***))(*v78 + 8 * v103))((uint64_t ***)v78);
LABEL_286:
  if (v261 == v260)
  {
    v105 = 4;
    v104 = v256;
    v106 = v260;
  }
  else
  {
    v104 = v256;
    if (!v261)
      goto LABEL_291;
    v105 = 5;
    v106 = v261;
  }
  (*(void (**)(void))(*v106 + 8 * v105))();
LABEL_291:
  v107 = v264;
  if (v265 == v264)
  {
    v108 = 4;
  }
  else
  {
    if (!v265)
      goto LABEL_296;
    v108 = 5;
    v107 = v265;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_296:
  v218 = v96;
  if (v253 == v252)
  {
    v109 = 4;
  }
  else
  {
    if (!v253)
      goto LABEL_301;
    v109 = 5;
    v101 = v253;
  }
  (*(void (**)(_QWORD *))(*v101 + 8 * v109))(v101);
LABEL_301:
  if (v257 == v256)
  {
    v110 = 4;
  }
  else
  {
    if (!v257)
      goto LABEL_306;
    v110 = 5;
    v104 = v257;
  }
  (*(void (**)(_QWORD *))(*v104 + 8 * v110))(v104);
LABEL_306:
  if (v237 == v236)
  {
    v112 = 4;
    v111 = v221;
  }
  else
  {
    v111 = v221;
    if (!v237)
      goto LABEL_311;
    v112 = 5;
    v46 = v237;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v112))(v46);
LABEL_311:
  if (v241 == v240)
  {
    v113 = 4;
  }
  else
  {
    if (!v241)
      goto LABEL_316;
    v113 = 5;
    v44 = v241;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v113))(v44);
LABEL_316:
  if (v229 == v228)
  {
    v116 = 4;
    v114 = v224;
    v115 = a1;
  }
  else
  {
    v114 = v224;
    v115 = a1;
    if (!v229)
      goto LABEL_321;
    v116 = 5;
    v25 = v229;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v116))(v25);
LABEL_321:
  if (v233 == v232)
  {
    v117 = 4;
  }
  else
  {
    if (!v233)
      goto LABEL_326;
    v117 = 5;
    v24 = v233;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v117))(v24);
LABEL_326:
  if (v225 == v224)
  {
    v118 = 4;
  }
  else
  {
    if (!v225)
      goto LABEL_331;
    v118 = 5;
    v114 = v225;
  }
  (*(void (**)(_QWORD *))(*v114 + 8 * v118))(v114);
LABEL_331:
  if (v222 == v221)
  {
    v119 = 4;
    goto LABEL_335;
  }
  if (v222)
  {
    v119 = 5;
    v111 = v222;
LABEL_335:
    (*(void (**)(_QWORD *))(*v111 + 8 * v119))(v111);
  }
  *(_OWORD *)v115 = 0u;
  *((_OWORD *)v115 + 1) = 0u;
  v115[8] = 1.0;
  v120 = v217;
  if (v217 == v218)
    goto LABEL_493;
  v121 = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonFromRLRegion.cpp";
  v214 = v7;
  v215 = (uint64_t **)(v115 + 4);
  do
  {
    v122 = a5[1];
    if (v122 == *a5)
    {
LABEL_357:
      if (sub_224573870((const char *)v121, 130, (uint64_t)"found_match", 11, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      goto LABEL_358;
    }
    v123 = *v120;
    v124 = *v7;
    v125 = *(uint64_t **)(*v7 + (*v120 << 6));
    v126 = *v125;
    while (1)
    {
      v128 = *(_QWORD *)(v122 - 8);
      v122 -= 8;
      v127 = v128;
      v129 = (_QWORD *)(v124 + (v128 << 6));
      v130 = v129 + 3;
      if (v126 >= v129[3] && v126 <= v129[5])
      {
        v132 = v125[1];
        v133 = v129[6];
        if (v132 >= v130[1] && v132 <= v133)
        {
          v135 = (uint64_t *)(v124 + (v127 << 6));
          v136 = *v135;
          v137 = v135[1];
          v138 = v137 - v136;
          if (v137 != v136)
          {
            v139 = 0;
            v140 = 0;
            v141 = v138 >> 4;
            v142 = v141 - 1;
            v143 = *(_QWORD *)(v136 + 16 * (v141 - 1) + 8);
            v144 = (uint64_t *)(v136 + 8);
            do
            {
              v145 = v140;
              v146 = *v144;
              if (v143 > v132 == v132 >= *v144)
                v139 ^= v126 < *(v144 - 1)
                             + (*(_QWORD *)(v136 + 16 * v142) - *(v144 - 1)) / (v143 - v146) * (v132 - *v144);
              ++v140;
              v144 += 2;
              v143 = v146;
              v142 = v145;
            }
            while (v141 != v145 + 1);
            if ((v139 & 1) != 0)
              break;
          }
        }
      }
      if (v122 == *a5)
        goto LABEL_357;
    }
    v147 = *((_QWORD *)a1 + 1);
    if (!v147)
      goto LABEL_380;
    v148 = (uint8x8_t)vcnt_s8((int8x8_t)v147);
    v148.i16[0] = vaddlv_u8(v148);
    if (v148.u32[0] > 1uLL)
    {
      v149 = v127;
      if (v127 >= v147)
        v149 = v127 % v147;
    }
    else
    {
      v149 = (v147 - 1) & v127;
    }
    v150 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v149);
    if (!v150 || (v151 = (_QWORD *)*v150) == 0)
    {
LABEL_380:
      v154 = (const char *)v121;
      v155 = operator new(8uLL);
      v156 = v155;
      *v155 = v123;
      v157 = v155 + 1;
      if (v147)
      {
        v158 = (uint8x8_t)vcnt_s8((int8x8_t)v147);
        v158.i16[0] = vaddlv_u8(v158);
        if (v158.u32[0] > 1uLL)
        {
          v121 = v127;
          if (v147 <= v127)
            v121 = v127 % v147;
        }
        else
        {
          v121 = (v147 - 1) & v127;
        }
        v159 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v121);
        if (v159)
        {
          v160 = (_QWORD *)*v159;
          if (v160)
          {
            if (v158.u32[0] < 2uLL)
            {
              while (1)
              {
                v162 = v160[1];
                if (v162 == v127)
                {
                  if (v160[2] == v127)
                    goto LABEL_458;
                }
                else if ((v162 & (v147 - 1)) != v121)
                {
                  goto LABEL_400;
                }
                v160 = (_QWORD *)*v160;
                if (!v160)
                  goto LABEL_400;
              }
            }
            do
            {
              v161 = v160[1];
              if (v161 == v127)
              {
                if (v160[2] == v127)
                {
LABEL_458:
                  operator delete(v155);
                  v7 = v214;
                  v121 = (unint64_t)v154;
                  goto LABEL_358;
                }
              }
              else
              {
                if (v161 >= v147)
                  v161 %= v147;
                if (v161 != v121)
                  break;
              }
              v160 = (_QWORD *)*v160;
            }
            while (v160);
          }
        }
      }
LABEL_400:
      v163 = (uint64_t *)operator new(0x30uLL);
      v275 = v163;
      v276 = v215;
      *v163 = 0;
      v163[1] = v127;
      v163[2] = v127;
      v163[3] = (uint64_t)v156;
      v163[4] = (uint64_t)v157;
      v163[5] = (uint64_t)v157;
      v277 = 1;
      v164 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
      v165 = a1[8];
      if (v147 && (float)(v165 * (float)v147) >= v164)
      {
        v7 = v214;
        v166 = *(_QWORD *)a1;
        v167 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v121);
        if (v167)
        {
LABEL_403:
          *v163 = *v167;
          v121 = (unint64_t)v154;
          goto LABEL_454;
        }
LABEL_448:
        *v163 = (uint64_t)*v215;
        *v215 = v163;
        *(_QWORD *)(v166 + 8 * v121) = v215;
        v121 = (unint64_t)v154;
        if (!*v163)
        {
LABEL_455:
          ++*((_QWORD *)a1 + 3);
          goto LABEL_358;
        }
        v190 = *(_QWORD *)(*v163 + 8);
        if ((v147 & (v147 - 1)) != 0)
        {
          if (v190 >= v147)
            v190 %= v147;
        }
        else
        {
          v190 &= v147 - 1;
        }
        v167 = (uint64_t *)(*(_QWORD *)a1 + 8 * v190);
LABEL_454:
        *v167 = (uint64_t)v163;
        goto LABEL_455;
      }
      v168 = (v147 & (v147 - 1)) != 0;
      if (v147 < 3)
        v168 = 1;
      v169 = v168 | (2 * v147);
      v170 = vcvtps_u32_f32(v164 / v165);
      if (v169 <= v170)
        prime = v170;
      else
        prime = v169;
      if (prime == 1)
      {
        prime = 2;
        v172 = a1;
      }
      else
      {
        v172 = a1;
        if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v147 = *((_QWORD *)a1 + 1);
        }
      }
      if (prime > v147)
        goto LABEL_414;
      if (prime >= v147)
        goto LABEL_446;
      v183 = vcvtps_u32_f32((float)*((unint64_t *)v172 + 3) / v172[8]);
      if (v147 < 3 || (v184 = (uint8x8_t)vcnt_s8((int8x8_t)v147), v184.i16[0] = vaddlv_u8(v184), v184.u32[0] > 1uLL))
      {
        v183 = std::__next_prime(v183);
      }
      else
      {
        v185 = 1 << -(char)__clz(v183 - 1);
        if (v183 >= 2)
          v183 = v185;
      }
      if (prime <= v183)
        prime = v183;
      if (prime >= v147)
      {
        v147 = *((_QWORD *)v172 + 1);
        v7 = v214;
        v189 = v147 - 1;
        if ((v147 & (v147 - 1)) != 0)
          goto LABEL_468;
      }
      else
      {
        if (prime)
        {
LABEL_414:
          if (prime >> 61)
            sub_223174E94();
          v173 = operator new(8 * prime);
          v174 = *(void **)v172;
          *(_QWORD *)v172 = v173;
          if (v174)
            operator delete(v174);
          v175 = 0;
          *((_QWORD *)v172 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v172 + 8 * v175++) = 0;
          while (prime != v175);
          v176 = *v215;
          if (!*v215)
            goto LABEL_445;
          v177 = v176[1];
          v178 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v179 = v177 & v178;
            *(_QWORD *)(*(_QWORD *)v172 + 8 * v179) = v215;
            while (1)
            {
              v180 = (_QWORD *)*v176;
              if (!*v176)
                break;
              v181 = v180[1] & v178;
              if (v181 == v179)
              {
                v176 = (uint64_t *)*v176;
              }
              else if (*(_QWORD *)(*(_QWORD *)v172 + 8 * v181))
              {
                *v176 = *v180;
                v182 = 8 * v181;
                *v180 = **(_QWORD **)(*(_QWORD *)v172 + v182);
                **(_QWORD **)(*(_QWORD *)v172 + v182) = v180;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v172 + 8 * v181) = v176;
                v176 = v180;
                v179 = v181;
              }
            }
LABEL_445:
            v147 = prime;
LABEL_446:
            v7 = v214;
            v189 = v147 - 1;
            if ((v147 & (v147 - 1)) == 0)
              goto LABEL_447;
LABEL_468:
            if (v147 <= v127)
            {
              v121 = v127 % v147;
              v166 = *(_QWORD *)a1;
              v167 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v127 % v147));
              if (v167)
                goto LABEL_403;
            }
            else
            {
              v121 = v127;
              v166 = *(_QWORD *)a1;
              v167 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v127);
              if (v167)
                goto LABEL_403;
            }
            goto LABEL_448;
          }
          if (v177 >= prime)
            v177 %= prime;
          *(_QWORD *)(*(_QWORD *)v172 + 8 * v177) = v215;
          v186 = (_QWORD *)*v176;
          if (!*v176)
            goto LABEL_445;
          while (1)
          {
            v188 = v186[1];
            if (v188 >= prime)
              v188 %= prime;
            if (v188 == v177)
              goto LABEL_439;
            if (*(_QWORD *)(*(_QWORD *)v172 + 8 * v188))
            {
              *v176 = *v186;
              v187 = 8 * v188;
              *v186 = **(_QWORD **)(*(_QWORD *)v172 + v187);
              **(_QWORD **)(*(_QWORD *)v172 + v187) = v186;
              v186 = v176;
LABEL_439:
              v176 = v186;
              v186 = (_QWORD *)*v186;
              if (!v186)
                goto LABEL_445;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v172 + 8 * v188) = v176;
              v176 = v186;
              v186 = (_QWORD *)*v186;
              v177 = v188;
              if (!v186)
                goto LABEL_445;
            }
          }
        }
        v194 = *(void **)v172;
        *(_QWORD *)v172 = 0;
        v7 = v214;
        if (v194)
          operator delete(v194);
        v147 = 0;
        *((_QWORD *)v172 + 1) = 0;
        v189 = -1;
      }
LABEL_447:
      v121 = v189 & v127;
      v166 = *(_QWORD *)a1;
      v167 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v189 & v127));
      if (v167)
        goto LABEL_403;
      goto LABEL_448;
    }
    if (v148.u32[0] < 2uLL)
    {
      while (1)
      {
        v153 = v151[1];
        if (v153 == v127)
        {
          if (v151[2] == v127)
            goto LABEL_456;
        }
        else if ((v153 & (v147 - 1)) != v149)
        {
          goto LABEL_380;
        }
        v151 = (_QWORD *)*v151;
        if (!v151)
          goto LABEL_380;
      }
    }
    while (1)
    {
      v152 = v151[1];
      if (v152 == v127)
        break;
      if (v152 >= v147)
        v152 %= v147;
      if (v152 != v149)
        goto LABEL_380;
LABEL_370:
      v151 = (_QWORD *)*v151;
      if (!v151)
        goto LABEL_380;
    }
    if (v151[2] != v127)
      goto LABEL_370;
LABEL_456:
    v192 = (char *)v151[4];
    v191 = v151[5];
    if ((unint64_t)v192 < v191)
    {
      *(_QWORD *)v192 = v123;
      v193 = (uint64_t)(v192 + 8);
      goto LABEL_492;
    }
    v195 = (char *)v151[3];
    v196 = (v192 - v195) >> 3;
    v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 61)
      sub_22367C394();
    v198 = v191 - (_QWORD)v195;
    if (v198 >> 2 > v197)
      v197 = v198 >> 2;
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
      v199 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v199 = v197;
    if (v199)
    {
      if (v199 >> 61)
        sub_223174E94();
      v200 = v199;
      v201 = operator new(8 * v199);
      v199 = v200;
      v202 = &v201[8 * v196];
      *v202 = v123;
      v193 = (uint64_t)(v202 + 1);
      v203 = v192 - v195;
      if (v192 == v195)
        goto LABEL_490;
LABEL_484:
      v204 = v203 - 8;
      if (v204 < 0x58)
        goto LABEL_512;
      if ((unint64_t)(v195 - v201) < 0x20)
        goto LABEL_512;
      v205 = (v204 >> 3) + 1;
      v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
      v207 = &v192[-v206];
      v202 = (_QWORD *)((char *)v202 - v206);
      v208 = &v201[8 * v196 - 16];
      v209 = v192 - 16;
      v210 = v205 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v211 = *(_OWORD *)v209;
        *(v208 - 1) = *((_OWORD *)v209 - 1);
        *v208 = v211;
        v208 -= 2;
        v209 -= 32;
        v210 -= 4;
      }
      while (v210);
      v192 = v207;
      if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_512:
        do
        {
          v212 = *((_QWORD *)v192 - 1);
          v192 -= 8;
          *--v202 = v212;
        }
        while (v192 != v195);
      }
    }
    else
    {
      v201 = 0;
      v202 = (_QWORD *)(8 * v196);
      *(_QWORD *)(8 * v196) = v123;
      v193 = 8 * v196 + 8;
      v203 = v192 - v195;
      if (v192 != v195)
        goto LABEL_484;
    }
LABEL_490:
    v151[3] = v202;
    v151[4] = v193;
    v151[5] = &v201[8 * v199];
    if (v195)
      operator delete(v195);
LABEL_492:
    v121 = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonFromRLRegion.cpp";
    v151[4] = v193;
    v7 = v214;
LABEL_358:
    ++v120;
  }
  while (v120 != v218);
  v120 = v217;
LABEL_493:
  if (v120)
    operator delete(v120);
}

void sub_223EB7D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  sub_223EB8208(a21);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223EB7EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,_QWORD *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;

  v64 = *(_QWORD **)(v63 - 160);
  if (v64 == v61)
  {
    v65 = 4;
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
    v61 = *(_QWORD **)(v63 - 160);
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v65))(v61);
LABEL_6:
  v66 = *(_QWORD **)(v63 - 112);
  if (v66 == v60)
  {
    v67 = 4;
  }
  else
  {
    if (!v66)
      goto LABEL_11;
    v67 = 5;
    v60 = *(_QWORD **)(v63 - 112);
  }
  (*(void (**)(_QWORD *))(*v60 + 8 * v67))(v60);
LABEL_11:
  if ((_QWORD *)STACK[0x370] == v62)
  {
    v68 = 4;
  }
  else
  {
    if (!STACK[0x370])
      goto LABEL_16;
    v68 = 5;
    v62 = (_QWORD *)STACK[0x370];
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v68))(v62);
LABEL_16:
  v69 = (_QWORD *)STACK[0x340];
  if ((_QWORD *)STACK[0x340] == v59)
  {
    v70 = 4;
    v69 = v59;
  }
  else
  {
    if (!v69)
      goto LABEL_21;
    v70 = 5;
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v70))(v69);
LABEL_21:
  if ((_QWORD *)STACK[0x280] == a17)
  {
    v71 = 4;
  }
  else
  {
    if (!STACK[0x280])
    {
      v72 = a9;
      goto LABEL_27;
    }
    v71 = 5;
    a17 = (_QWORD *)STACK[0x280];
  }
  v72 = a9;
  (*(void (**)(void))(*a17 + 8 * v71))();
LABEL_27:
  if ((_QWORD *)STACK[0x2B0] == v72)
  {
    v73 = 4;
  }
  else
  {
    if (!STACK[0x2B0])
    {
      v74 = a14;
      v75 = a11;
      v76 = a12;
      v77 = a10;
      goto LABEL_33;
    }
    v73 = 5;
    v72 = (_QWORD *)STACK[0x2B0];
  }
  v74 = a14;
  v75 = a11;
  v76 = a12;
  v77 = a10;
  (*(void (**)(_QWORD *))(*v72 + 8 * v73))(v72);
LABEL_33:
  if ((_QWORD *)STACK[0x220] == v77)
  {
    v78 = 4;
  }
  else
  {
    if (!STACK[0x220])
      goto LABEL_38;
    v78 = 5;
    v77 = (_QWORD *)STACK[0x220];
  }
  (*(void (**)(_QWORD *))(*v77 + 8 * v78))(v77);
LABEL_38:
  if ((_QWORD *)STACK[0x250] == v75)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x250])
    {
      v80 = a22;
      if (a22)
        goto LABEL_46;
      goto LABEL_42;
    }
    v79 = 5;
    v75 = (_QWORD *)STACK[0x250];
  }
  (*(void (**)(_QWORD *))(*v75 + 8 * v79))(v75);
  v80 = a22;
  if (a22)
  {
LABEL_46:
    operator delete(v80);
    v81 = a53;
    if (a53 != v76)
      goto LABEL_47;
    goto LABEL_43;
  }
LABEL_42:
  v81 = a53;
  if (a53 != v76)
  {
LABEL_47:
    if (!v81)
      goto LABEL_50;
    v82 = 5;
    v76 = v81;
LABEL_49:
    (*(void (**)(_QWORD *))(*v76 + 8 * v82))(v76);
LABEL_50:
    if (a59 != v74)
    {
      if (a59)
        JUMPOUT(0x223EB8188);
      JUMPOUT(0x223EB8198);
    }
    JUMPOUT(0x223EB8184);
  }
LABEL_43:
  v82 = 4;
  goto LABEL_49;
}

void sub_223EB80E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,_QWORD *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  uint64_t a71;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = *(_QWORD **)(v77 - 112);
  if (v79 == v73)
  {
    v80 = 4;
  }
  else
  {
    if (!v79)
      goto LABEL_6;
    v80 = 5;
    v73 = *(_QWORD **)(v77 - 112);
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v80))(v73);
LABEL_6:
  if ((_QWORD *)STACK[0x340] == v72)
  {
    v81 = 4;
  }
  else
  {
    if (!STACK[0x340])
      goto LABEL_11;
    v81 = 5;
    v72 = (_QWORD *)STACK[0x340];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v81))(v72);
LABEL_11:
  if (a65 == v71)
  {
    v82 = 4;
  }
  else
  {
    if (!a65)
      goto LABEL_16;
    v82 = 5;
    v71 = a65;
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v82))(v71);
LABEL_16:
  if (a71 != v74)
    JUMPOUT(0x223EB80D0);
  (*(void (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
  if (a41 == v75)
  {
    v83 = 4;
  }
  else
  {
    if (!a41)
      goto LABEL_22;
    v83 = 5;
    v75 = a41;
  }
  (*(void (**)(_QWORD *))(*v75 + 8 * v83))(v75);
LABEL_22:
  if (a47 == v76)
  {
    v84 = 4;
  }
  else
  {
    if (!a47)
      goto LABEL_27;
    v84 = 5;
    v76 = a47;
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v84))(v76);
LABEL_27:
  sub_22330FE84(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_223EB8208(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void **sub_223EB8270(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 8);
        v5 -= 64;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_223EB82E4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 6);
        if (v5)
        {
          *((_QWORD *)v3 - 5) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223EB8354(uint64_t a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  if (**(_QWORD **)a1 != *((_QWORD *)v3 - 2) || *((_QWORD *)v2 + 1) != *((_QWORD *)v3 - 1))
  {
    v4 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v3 >= v4)
    {
      v6 = (v3 - v2) >> 4;
      v7 = v6 + 1;
      if ((unint64_t)(v6 + 1) >> 60)
        sub_22316E078();
      v8 = v4 - (_QWORD)v2;
      if (v8 >> 3 > v7)
        v7 = v8 >> 3;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v9 = 0xFFFFFFFFFFFFFFFLL;
      else
        v9 = v7;
      if (v9)
      {
        if (v9 >> 60)
          sub_223174E94();
        v10 = (char *)operator new(16 * v9);
      }
      else
      {
        v10 = 0;
      }
      v11 = &v10[16 * v6];
      v12 = &v10[16 * v9];
      *(_OWORD *)v11 = *(_OWORD *)v2;
      v5 = v11 + 16;
      if (v3 == v2)
      {
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v5;
        *(_QWORD *)(a1 + 16) = v12;
      }
      else
      {
        do
        {
          *((_OWORD *)v11 - 1) = *((_OWORD *)v3 - 1);
          v11 -= 16;
          v3 -= 16;
        }
        while (v3 != v2);
        v2 = *(char **)a1;
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v5;
        *(_QWORD *)(a1 + 16) = v12;
        if (!v2)
          goto LABEL_21;
      }
      operator delete(v2);
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v2;
      v5 = v3 + 16;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v5;
  }
}

uint64_t sub_223EB847C(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t *v116;
  int64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  float v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  uint64_t v150;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(float *)(**a3 + (v85 << 6) + 56) > *(float *)(**a3 + (*v10 << 6) + 56))
        {
          *v10 = v85;
          *(a2 - 1) = v86;
        }
        return result;
      case 3:
        v87 = *v10;
        v88 = v10[1];
        v89 = **a3;
        v90 = *(float *)(v89 + (v88 << 6) + 56);
        v91 = *(float *)(v89 + (*v10 << 6) + 56);
        v92 = *(a2 - 1);
        v93 = *(float *)(v89 + (v92 << 6) + 56);
        if (v90 <= v91)
        {
          if (v93 > v90)
          {
            v10[1] = v92;
            *(a2 - 1) = v88;
            v104 = *v10;
            v144 = v10[1];
            if (*(float *)(v89 + (v144 << 6) + 56) > *(float *)(v89 + (*v10 << 6) + 56))
            {
              *v10 = v144;
              goto LABEL_156;
            }
          }
        }
        else
        {
          if (v93 <= v90)
          {
            *v10 = v88;
            v10[1] = v87;
            v150 = *(a2 - 1);
            if (*(float *)(v89 + (v150 << 6) + 56) <= v91)
              return result;
            v10[1] = v150;
          }
          else
          {
            *v10 = v92;
          }
          *(a2 - 1) = v87;
        }
        return result;
      case 4:
        return (uint64_t)sub_223EB93CC(v10, v10 + 1, v10 + 2, a2 - 1, **a3);
      case 5:
        v94 = v10 + 1;
        v95 = v10 + 2;
        v96 = v10 + 3;
        result = (uint64_t)sub_223EB93CC(v9, v9 + 1, v9 + 2, v9 + 3, **a3);
        v97 = *(a2 - 1);
        v98 = v9[3];
        v99 = **a3;
        if (*(float *)(v99 + (v97 << 6) + 56) > *(float *)(v99 + (v98 << 6) + 56))
        {
          *v96 = v97;
          *(a2 - 1) = v98;
          v100 = *v96;
          v101 = *v95;
          v102 = *(float *)(v99 + (*v96 << 6) + 56);
          if (v102 > *(float *)(v99 + (*v95 << 6) + 56))
          {
            *v95 = v100;
            *v96 = v101;
            v103 = *v94;
            if (v102 > *(float *)(v99 + (*v94 << 6) + 56))
            {
              v9[1] = v100;
              v9[2] = v103;
              v104 = *v9;
              if (v102 > *(float *)(v99 + (*v9 << 6) + 56))
              {
                *v9 = v100;
LABEL_156:
                v9[1] = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v115 = (unint64_t)(v12 - 2) >> 1;
              v116 = *a3;
              v117 = v115;
              do
              {
                if (v115 >= v117)
                {
                  v119 = (2 * v117) | 1;
                  v120 = &v10[v119];
                  v121 = *v116;
                  if (2 * v117 + 2 < v12
                    && *(float *)(v121 + (*v120 << 6) + 56) > *(float *)(v121 + (v120[1] << 6) + 56))
                  {
                    ++v120;
                    v119 = 2 * v117 + 2;
                  }
                  v122 = &v10[v117];
                  result = *v120;
                  v123 = *v122;
                  v124 = *(float *)(v121 + (*v122 << 6) + 56);
                  if (*(float *)(v121 + (*v120 << 6) + 56) <= v124)
                  {
                    do
                    {
                      v125 = v120;
                      *v122 = result;
                      if (v115 < v119)
                        break;
                      v126 = 2 * v119;
                      v119 = (2 * v119) | 1;
                      v120 = &v10[v119];
                      v127 = v126 + 2;
                      if (v127 < v12 && *(float *)(v121 + (*v120 << 6) + 56) > *(float *)(v121 + (v120[1] << 6) + 56))
                      {
                        ++v120;
                        v119 = v127;
                      }
                      result = *v120;
                      v122 = v125;
                    }
                    while (*(float *)(v121 + (*v120 << 6) + 56) <= v124);
                    *v125 = v123;
                  }
                }
                v118 = v117-- <= 0;
              }
              while (!v118);
              v128 = (unint64_t)v11 >> 3;
              do
              {
                v129 = 0;
                v130 = *v10;
                v131 = *a3;
                v132 = v10;
                do
                {
                  v133 = v132;
                  v132 += v129 + 1;
                  v134 = 2 * v129;
                  v129 = (2 * v129) | 1;
                  v135 = v134 + 2;
                  if (v135 < v128)
                  {
                    result = v132[1];
                    if (*(float *)(*v131 + (*v132 << 6) + 56) > *(float *)(*v131 + (result << 6) + 56))
                    {
                      ++v132;
                      v129 = v135;
                    }
                  }
                  *v133 = *v132;
                }
                while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                if (v132 == --a2)
                {
                  *v132 = v130;
                }
                else
                {
                  *v132 = *a2;
                  *a2 = v130;
                  v136 = (char *)v132 - (char *)v10 + 8;
                  if (v136 >= 9)
                  {
                    v137 = (((unint64_t)v136 >> 3) - 2) >> 1;
                    v138 = &v10[v137];
                    v139 = *v138;
                    v140 = *v132;
                    v141 = *v131;
                    v142 = *(float *)(v141 + (*v132 << 6) + 56);
                    if (*(float *)(v141 + (*v138 << 6) + 56) > v142)
                    {
                      do
                      {
                        v143 = v138;
                        *v132 = v139;
                        if (!v137)
                          break;
                        v137 = (v137 - 1) >> 1;
                        v138 = &v10[v137];
                        v139 = *v138;
                        v132 = v143;
                      }
                      while (*(float *)(v141 + (*v138 << 6) + 56) > v142);
                      *v143 = v140;
                    }
                  }
                }
                v118 = v128-- <= 2;
              }
              while (!v118);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + (v16 << 6) + 56);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + (*v10 << 6) + 56);
            v25 = *(float *)(v15 + (*v14 << 6) + 56);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + (*v10 << 6) + 56) > *(float *)(v15 + (*v14 << 6) + 56))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + (v40 << 6) + 56) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + (*v14 << 6) + 56);
          v21 = *(float *)(v15 + (*v10 << 6) + 56);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + (*v14 << 6) + 56) > *(float *)(v15 + (*v10 << 6) + 56))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + (v29 << 6) + 56) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + (v33 << 6) + 56);
          v36 = *(float *)(v15 + (v34 << 6) + 56);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + (v37 << 6) + 56);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + (*v31 << 6) + 56) > *(float *)(v15 + (v39 << 6) + 56))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(float *)(v15 + (v42 << 6) + 56) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(float *)(v15 + (v46 << 6) + 56);
          v49 = *(float *)(v15 + (v47 << 6) + 56);
          v50 = *(a2 - 3);
          v51 = *(float *)(v15 + (v50 << 6) + 56);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(float *)(v15 + (*v44 << 6) + 56) > *(float *)(v15 + (v52 << 6) + 56))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(float *)(v15 + (v53 << 6) + 56) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(float *)(v15 + (*v14 << 6) + 56);
          v57 = *(float *)(v15 + (*v31 << 6) + 56);
          v58 = *v44;
          v59 = *(float *)(v15 + (*v44 << 6) + 56);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(float *)(v15 + (v28 << 6) + 56);
            if (*(float *)(v15 + (*(v10 - 1) << 6) + 56) > v41)
              goto LABEL_56;
            if (v41 <= *(float *)(v15 + (*(a2 - 1) << 6) + 56))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(float *)(v15 + (*v10 << 6) + 56));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(float *)(v15 + (v76 << 6) + 56));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(float *)(v15 + (v79 << 6) + 56));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(float *)(v15 + (v82 << 6) + 56));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(float *)(v15 + (v83 << 6) + 56));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(float *)(v15 + (v28 << 6) + 56);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(float *)(v15 + (v63 << 6) + 56) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(float *)(v15 + (v67 << 6) + 56) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(float *)(v15 + (v66 << 6) + 56) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *v65;
            v69 = &v10[v62];
            v70 = v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(float *)(v15 + (v71 << 6) + 56) > v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(float *)(v15 + (v72 << 6) + 56) <= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_223EB9008(v10, v73, a3);
          v10 = v73 + 1;
          result = sub_223EB9008(v73 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_223EB847C(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v105 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v106 = **a3;
              v107 = 8;
              v108 = v10;
              do
              {
                v111 = *v108;
                v110 = v108[1];
                v108 = v105;
                v112 = *(float *)(v106 + (v110 << 6) + 56);
                if (v112 > *(float *)(v106 + (v111 << 6) + 56))
                {
                  v113 = v107;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v113) = v111;
                    v114 = v113 - 8;
                    if (v113 == 8)
                    {
                      v109 = v10;
                      goto LABEL_117;
                    }
                    v111 = *(uint64_t *)((char *)v10 + v113 - 16);
                    v113 -= 8;
                  }
                  while (v112 > *(float *)(v106 + (v111 << 6) + 56));
                  v109 = (uint64_t *)((char *)v10 + v114);
LABEL_117:
                  *v109 = v110;
                }
                v105 = v108 + 1;
                v107 += 8;
              }
              while (v108 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v145 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v146 = **a3;
            do
            {
              v148 = *v9;
              v147 = v9[1];
              v9 = v145;
              v149 = *(float *)(v146 + (v147 << 6) + 56);
              if (v149 > *(float *)(v146 + (v148 << 6) + 56))
              {
                do
                {
                  *v145 = v148;
                  v148 = *(v145 - 2);
                  --v145;
                }
                while (v149 > *(float *)(v146 + (v148 << 6) + 56));
                *v145 = v147;
              }
              v145 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223EB9008(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + (v8 << 6) + 56) > *(float *)(**a3 + (*a1 << 6) + 56))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = **a3;
      v13 = *(float *)(v12 + (v11 << 6) + 56);
      v14 = *(float *)(v12 + (*a1 << 6) + 56);
      v15 = *(a2 - 1);
      v16 = *(float *)(v12 + (v15 << 6) + 56);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v11;
          v39 = *a1;
          v38 = a1[1];
          if (*(float *)(v12 + (v38 << 6) + 56) > *(float *)(v12 + (*a1 << 6) + 56))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v11;
        a1[1] = v10;
        v48 = *(a2 - 1);
        if (*(float *)(v12 + (v48 << 6) + 56) > v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v10;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v10;
      }
      return result;
    case 4:
      sub_223EB93CC(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_223EB93CC(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **a3;
      if (*(float *)(v32 + (v30 << 6) + 56) <= *(float *)(v32 + (v31 << 6) + 56))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(float *)(v32 + (*v29 << 6) + 56);
      if (v35 <= *(float *)(v32 + (*v28 << 6) + 56))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 <= *(float *)(v32 + (*v27 << 6) + 56))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 <= *(float *)(v32 + (*a1 << 6) + 56))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = **a3;
      v22 = *(float *)(v21 + (v19 << 6) + 56);
      v23 = *(float *)(v21 + (*a1 << 6) + 56);
      v24 = *(float *)(v21 + (v17 << 6) + 56);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v20;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v20;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(float *)(v21 + (*v40 << 6) + 56);
        if (v45 > *(float *)(v21 + (v44 << 6) + 56))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 > *(float *)(v21 + (v44 << 6) + 56));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_223EB93CC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + (*a2 << 6) + 56);
  v8 = *(float *)(a5 + (*result << 6) + 56);
  v9 = *a3;
  v10 = *(float *)(a5 + (*a3 << 6) + 56);
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(float *)(a5 + (*a2 << 6) + 56) > *(float *)(a5 + (*result << 6) + 56))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 > v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(float *)(a5 + (*a3 << 6) + 56) > v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(a5 + (*a4 << 6) + 56) > *(float *)(a5 + (v5 << 6) + 56))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(float *)(a5 + (*a3 << 6) + 56) > *(float *)(a5 + (*a2 << 6) + 56))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(a5 + (*a2 << 6) + 56) > *(float *)(a5 + (*result << 6) + 56))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_223EB94F4()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223EB9508(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC63DB8;
  result[1] = v3;
  return result;
}

uint64_t sub_223EB953C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC63DB8;
  a2[1] = v2;
  return result;
}

BOOL sub_223EB9558(uint64_t a1, _QWORD *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + (*a2 << 6) + 56) > 0.0;
}

uint64_t sub_223EB9578(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8geometry19PolygonFromRLRegionILb1EsEENSt3__16vectorINS4_IN3cva6MatrixIxLj2ELj1ELb0EEE"
                     "NS3_9allocatorIS7_EEEENS8_ISA_EEEERKNS1_8RLRegionIT0_EEbfEUlmE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8geometry19PolygonFromRLRegionILb1EsEENSt3__16vectorINS4_IN3cva6MatrixIxLj2"
                                "ELj1ELb0EEENS3_9allocatorIS7_EEEENS8_ISA_EEEERKNS1_8RLRegionIT0_EEbfEUlmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8geometry19PolygonFromRLRegionILb1EsEENSt3__16vectorINS4_IN3cva6MatrixIxLj2ELj1ELb0EEENS3_9allocatorIS7_EEEENS8_ISA_EEEERKNS1_8RLRegionIT0_EEbfEUlmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8geometry19PolygonFromRLRegionILb1EsEENSt3__16vectorINS4_IN3cva6MatrixIxLj2ELj1ELb0EEENS3_9allocatorIS7_EEEENS8_ISA_EEEERKNS1_8RLRegionIT0_EEbfEUlmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223EB95E4()
{
  return &unk_24EC63E28;
}

void sub_223EB95F0(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    if (a2 >> 58)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = a2 << 6;
    v6 = (char *)operator new(a2 << 6);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
        *((_QWORD *)v10 - 6) = *(_QWORD *)&v4[v9 - 48];
        *((_QWORD *)v11 - 8) = 0;
        *((_QWORD *)v11 - 7) = 0;
        *((_QWORD *)v11 - 6) = 0;
        *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 40];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
        v9 -= 64;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v12 != v2)
      {
        v13 = v12;
        do
        {
          v15 = (void *)*((_QWORD *)v13 - 8);
          v13 -= 64;
          v14 = v15;
          if (v15)
          {
            *((_QWORD *)v12 - 7) = v14;
            operator delete(v14);
          }
          v12 = v13;
        }
        while (v13 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_223EB9700(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    sub_22316E078();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 5 > v3)
    v3 = v5 >> 5;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 58)
    sub_223174E94();
  v9 = v7 << 6;
  v10 = (char *)operator new(v7 << 6);
  v11 = &v10[64 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = &v10[v9];
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((_DWORD *)v11 + 14) = *(_DWORD *)(a2 + 56);
  v13 = v11 + 64;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      v18 = &v15[v16];
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
      *((_DWORD *)v17 - 2) = *(_DWORD *)&v15[v16 - 8];
      v16 -= 64;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    if (v19 != v15)
    {
      v20 = v19;
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 8);
        v20 -= 64;
        v21 = v22;
        if (v22)
        {
          *((_QWORD *)v19 - 7) = v21;
          operator delete(v21);
        }
        v19 = v20;
      }
      while (v20 != v15);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_223EB9870()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223EB9884(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC63E48;
  result[1] = v3;
  return result;
}

uint64_t sub_223EB98B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC63E48;
  a2[1] = v2;
  return result;
}

BOOL sub_223EB98D4(uint64_t a1, _QWORD *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + (*a2 << 6) + 56) < 0.0;
}

uint64_t sub_223EB98F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8geometry12_GLOBAL__N_132MatchOuterBoundariesToInnerHolesERKNSt3__16vectorINS1_6detail"
                     "17ExtractedPolylineENS3_9allocatorIS6_EEEERKNS4_ImNS7_ImEEEESF_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8geometry12_GLOBAL__N_132MatchOuterBoundariesToInnerHolesERKNSt3__16vectorI"
                                "NS1_6detail17ExtractedPolylineENS3_9allocatorIS6_EEEERKNS4_ImNS7_ImEEEESF_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8geometry12_GLOBAL__N_132MatchOuterBoundariesToInnerHolesERKNSt3__16vectorINS1_6detail17ExtractedPolylineENS3_9allocatorIS6_EEEERKNS4_ImNS7_ImEEEESF_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8geometry12_GLOBAL__N_132MatchOuterBoundariesToInnerHolesERKNSt3__16vectorINS1_6detail17ExtractedPolylineENS3_9allocatorIS6_EEEERKNS4_ImNS7_ImEEEESF_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223EB9960()
{
  return &unk_24EC63EA8;
}

uint64_t sub_223EB996C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_223EB99B8(int **a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int *v4;
  int *v5;
  int *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  int *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  int *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5;
  v7 = (char *)v5 - (char *)*a1;
  if ((unint64_t)v7 >= 5
    && (__int16)(*((_WORD *)v5 - 3) - a3) * (__int16)(*((_WORD *)v5 - 2) - a2) == (__int16)(*((_WORD *)v5 - 1) - a3)
                                                                                * (__int16)(*((_WORD *)v5 - 4) - a2))
  {
    *(v5 - 1) = a2 | (a3 << 16);
    return;
  }
  v8 = a2 | (a3 << 16);
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    v11 = v7 >> 2;
    v12 = (v7 >> 2) + 1;
    if (v12 >> 62)
      sub_2236EA0B4();
    v13 = v9 - (_QWORD)v4;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_223174E94();
      v15 = operator new(4 * v14);
      v16 = (int *)&v15[4 * v11];
      v17 = &v15[4 * v14];
      *v16 = v8;
      v10 = (uint64_t)(v16 + 1);
      v18 = (char *)((char *)v5 - (char *)v4);
      if (v5 == v4)
        goto LABEL_24;
    }
    else
    {
      v15 = 0;
      v16 = (int *)(4 * v11);
      v17 = 0;
      *(_DWORD *)(4 * v11) = v8;
      v10 = 4 * v11 + 4;
      v18 = (char *)((char *)v5 - (char *)v4);
      if (v5 == v4)
      {
LABEL_24:
        *a1 = v16;
        a1[1] = (int *)v10;
        a1[2] = (int *)v17;
        if (v6)
          operator delete(v6);
        goto LABEL_26;
      }
    }
    v19 = (unint64_t)(v18 - 4);
    if (v19 < 0x2C)
      goto LABEL_31;
    if ((unint64_t)((char *)v5 - v15 - v7) < 0x20)
      goto LABEL_31;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v6 = &v5[v21 / 0xFFFFFFFFFFFFFFFCLL];
    v16 = (int *)((char *)v16 - v21);
    v22 = &v15[4 * v11 - 16];
    v23 = v5 - 4;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_31:
      do
      {
        v26 = *--v6;
        *--v16 = v26;
      }
      while (v6 != v4);
    }
    v6 = *a1;
    goto LABEL_24;
  }
  *v5 = v8;
  v10 = (uint64_t)(v5 + 1);
LABEL_26:
  a1[1] = (int *)v10;
}

uint64_t *sub_223EB9B98(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t sub_223EB9BF8(uint64_t **a1, unsigned __int16 a2, unsigned __int16 a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  int v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v6 = **a1;
  v5 = (*a1)[1];
  v16 = a4;
  v18 = 0;
  v19 = 0;
  __p = 0;
  LOBYTE(v20) = 0;
  *((_QWORD *)&v20 + 1) = -1;
  v21 = -1;
  sub_223EB99B8((int **)&__p, a3, a2);
  v7 = *a1;
  v8 = v7[1];
  if (v8 >= v7[2])
  {
    v14 = sub_223EB9D70(v7, (uint64_t)&v16);
  }
  else
  {
    v9 = v16;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)v8 = v9;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    v10 = __p;
    v11 = v18 - (_BYTE *)__p;
    if (v18 != __p)
    {
      if (v11 < 0)
        sub_2236EA0B4();
      v12 = (char *)operator new(v18 - (_BYTE *)__p);
      *(_QWORD *)(v8 + 8) = v12;
      *(_QWORD *)(v8 + 16) = v12;
      *(_QWORD *)(v8 + 24) = &v12[4 * (v11 >> 2)];
      memcpy(v12, v10, v11 & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(v8 + 16) = &v12[v11 & 0xFFFFFFFFFFFFFFFCLL];
    }
    v13 = v20;
    *(_QWORD *)(v8 + 48) = v21;
    *(_OWORD *)(v8 + 32) = v13;
    v14 = (char *)(v8 + 56);
    v7[1] = v8 + 56;
  }
  v7[1] = (uint64_t)v14;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((v5 - v6) >> 3);
}

void sub_223EB9D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v16;

  v16 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v14 + 16) = v16;
    operator delete(v16);
  }
  *(_QWORD *)(v12 + 8) = v14;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223EB9D70(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  void *v22;
  uint64_t v24;
  __int128 v26;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v2[-*a1] >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_22316E078();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) > v5)
    v5 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3)) >= 0x249249249249249)
    v7 = 0x492492492492492;
  else
    v7 = v5;
  if (v7)
  {
    if (v7 > 0x492492492492492)
      sub_223174E94();
    v8 = (char *)operator new(56 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[56 * v4];
  *((_QWORD *)&v26 + 1) = &v8[56 * v7];
  *(_DWORD *)v9 = *(_DWORD *)a2;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  v10 = v9 + 16;
  *((_QWORD *)v9 + 3) = 0;
  v12 = *(_BYTE **)(a2 + 8);
  v11 = *(_BYTE **)(a2 + 16);
  v24 = a2;
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_2236EA0B4();
    v14 = (char *)operator new(v11 - v12);
    *((_QWORD *)v9 + 1) = v14;
    *v10 = v14;
    *((_QWORD *)v9 + 3) = &v14[4 * (v13 >> 2)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFFCLL);
    *v10 = &v14[v13 & 0xFFFFFFFFFFFFFFFCLL];
  }
  v15 = &v8[56 * v4];
  *((_OWORD *)v15 + 2) = *(_OWORD *)(v24 + 32);
  *((_QWORD *)v15 + 6) = *(_QWORD *)(v24 + 48);
  v16 = v9 + 56;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v16;
    a1[2] = *((_QWORD *)&v26 + 1);
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v9[v17];
      v19 = &v2[v17];
      *((_DWORD *)v18 - 14) = *(_DWORD *)&v2[v17 - 56];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_OWORD *)v18 - 3) = *(_OWORD *)&v2[v17 - 48];
      *((_QWORD *)v18 - 4) = *(_QWORD *)&v2[v17 - 32];
      *((_QWORD *)v19 - 6) = 0;
      *((_QWORD *)v19 - 5) = 0;
      *((_QWORD *)v19 - 4) = 0;
      v20 = *(_OWORD *)&v2[v17 - 24];
      *((_QWORD *)v18 - 1) = *(_QWORD *)&v2[v17 - 8];
      *(_OWORD *)(v18 - 24) = v20;
      v17 -= 56;
    }
    while (&v2[v17] != v3);
    v2 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v17];
    *(_QWORD *)&v26 = v9 + 56;
    *(_OWORD *)(a1 + 1) = v26;
    v16 = v9 + 56;
    while (v21 != v2)
    {
      v22 = (void *)*((_QWORD *)v21 - 6);
      if (v22)
      {
        *((_QWORD *)v21 - 5) = v22;
        operator delete(v22);
      }
      v21 -= 56;
    }
  }
  if (v2)
    operator delete(v2);
  return v16;
}

void sub_223EB9FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  void **v7;
  void *v9;
  va_list va;

  va_start(va, a6);
  v9 = *v7;
  if (*v7)
  {
    *v6 = v9;
    operator delete(v9);
  }
  sub_223EB9FF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223EB9FF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 56;
        *(_QWORD *)(a1 + 16) = v2 - 56;
        v5 = *(void **)(v2 - 48);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 40) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 56;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_223EBA05C(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  void *v18;

  v2 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    sub_22316E078();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      sub_223174E94();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[56 * v2];
  *(_DWORD *)v8 = *(_DWORD *)a2;
  v9 = &v7[56 * v6];
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v8 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 48);
  v10 = v8 + 56;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v8[v13];
      v15 = &v12[v13];
      *((_DWORD *)v14 - 14) = *(_DWORD *)&v12[v13 - 56];
      *((_QWORD *)v14 - 5) = 0;
      *((_QWORD *)v14 - 4) = 0;
      *((_OWORD *)v14 - 3) = *(_OWORD *)&v12[v13 - 48];
      *((_QWORD *)v14 - 4) = *(_QWORD *)&v12[v13 - 32];
      *((_QWORD *)v15 - 6) = 0;
      *((_QWORD *)v15 - 5) = 0;
      *((_QWORD *)v15 - 4) = 0;
      v16 = *(_OWORD *)&v12[v13 - 24];
      *((_QWORD *)v14 - 1) = *(_QWORD *)&v12[v13 - 8];
      *(_OWORD *)(v14 - 24) = v16;
      v13 -= 56;
    }
    while (&v12[v13] != v11);
    v12 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = &v8[v13];
    a1[1] = v10;
    a1[2] = v9;
    while (v17 != v12)
    {
      v18 = (void *)*((_QWORD *)v17 - 6);
      if (v18)
      {
        *((_QWORD *)v17 - 5) = v18;
        operator delete(v18);
      }
      v17 -= 56;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

double sub_223EBA204@<D0>(void ****a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void ***v5;
  void ***i;
  uint64_t v7;
  double result;
  __int128 v9;
  unint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = a1[1] - *a1;
  v10 = 0;
  v9 = 0uLL;
  sub_223452D78((uint64_t)&v9, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a1;
  for (i = a1[1]; v5 != i; v5 += 3)
  {
    while (1)
    {
      sub_223EBA33C(v5, (uint64_t)&v13);
      *(_OWORD *)__p = v13;
      v12 = v14;
      v7 = *((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1) >= v10)
        break;
      **((_QWORD **)&v9 + 1) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_OWORD *)v7 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v12;
      *((_QWORD *)&v9 + 1) = v7 + 24;
      v5 += 3;
      if (v5 == i)
        goto LABEL_8;
    }
    *((_QWORD *)&v9 + 1) = sub_223EBA408((char **)&v9, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
LABEL_8:
  result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v10;
  return result;
}

void sub_223EBA300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  sub_22317C838((void **)&a9);
  _Unwind_Resume(a1);
}

void ***sub_223EBA33C@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  void **v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void **v11;

  v4 = *result;
  v3 = result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    *(_QWORD *)&v8 = operator new((char *)v3 - (char *)v4);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 8 * (v5 >> 3);
    v11 = (void **)&v8;
    do
    {
      v10 = *v4;
      result = sub_2232EA538(&v11, &v10);
      ++v4;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_223EBA3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223EBA408(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22329A3C4();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = v8 + 24;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = v8;
      *((_QWORD *)v8 - 2) = 0;
      *((_QWORD *)v8 - 1) = 0;
      v14 = *(_OWORD *)(v12 - 24);
      v12 -= 24;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((_QWORD *)v13 - 1) = *((_QWORD *)v12 + 2);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
    while (v12 != v11);
    v12 = *a1;
    v15 = a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 != v12)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v12);
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void sub_223EBA564(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  int v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  void *__p;
  void *v39;

  if ((unint64_t)(a1[1] - *a1) <= 0x10
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonTriangulation.cpp", 55, (uint64_t)"polygon.size() >= 3", 19, (uint64_t)"Polygon must have at least three vertices.", 42, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223EC313C(&v32, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 - 2;
  if (v4 == 2)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 > 0x1555555555555555)
      sub_22316E078();
    v6 = (char *)operator new(12 * v5);
    v7 = &v6[12 * v5];
    *a2 = v6;
    a2[1] = v6;
    a2[2] = v7;
  }
  v8 = v6;
  while (v36 >= 4)
  {
    v9 = sub_223EC3A70((uint64_t)&v32);
    v10 = v9;
    v11 = (int *)((char *)v33 + 8 * v9);
    v13 = *v11;
    v12 = v11[1];
    if (v8 < v7)
    {
      *(_DWORD *)v8 = v12;
      *((_DWORD *)v8 + 1) = v9;
      *((_DWORD *)v8 + 2) = v13;
      v8 += 12;
      goto LABEL_9;
    }
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 2) + 1;
    if (v14 > 0x1555555555555555)
      sub_22316E078();
    if (0x5555555555555556 * ((v7 - v6) >> 2) > v14)
      v14 = 0x5555555555555556 * ((v7 - v6) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 > 0x1555555555555555)
        sub_223174E94();
      v16 = (char *)operator new(12 * v15);
      v17 = &v16[4 * ((v8 - v6) >> 2)];
      *(_DWORD *)v17 = v12;
      *((_DWORD *)v17 + 1) = v10;
      *((_DWORD *)v17 + 2) = v13;
      v18 = v17;
      if (v8 != v6)
      {
        do
        {
LABEL_25:
          v19 = *(_QWORD *)(v8 - 12);
          v8 -= 12;
          v20 = *((_DWORD *)v8 + 2);
          *(_QWORD *)(v18 - 12) = v19;
          v18 -= 12;
          *((_DWORD *)v18 + 2) = v20;
        }
        while (v8 != v6);
        v6 = *a2;
        v7 = &v16[12 * v15];
        v8 = v17 + 12;
        *a2 = v18;
        a2[1] = v17 + 12;
        a2[2] = v7;
        if (!v6)
          goto LABEL_23;
LABEL_22:
        operator delete(v6);
        goto LABEL_23;
      }
    }
    else
    {
      v16 = 0;
      v17 = (char *)(4 * ((v8 - v6) >> 2));
      *(_DWORD *)v17 = v12;
      *((_DWORD *)v17 + 1) = v10;
      *((_DWORD *)v17 + 2) = v13;
      v18 = v17;
      if (v8 != v6)
        goto LABEL_25;
    }
    v7 = &v16[12 * v15];
    v8 = v17 + 12;
    *a2 = v18;
    a2[1] = v17 + 12;
    a2[2] = v7;
    if (v6)
      goto LABEL_22;
LABEL_23:
    v6 = v18;
LABEL_9:
    a2[1] = v8;
    sub_223EC3644(&v32, v10);
  }
  v21 = v35;
  v22 = (int *)((char *)v33 + 8 * v35);
  v23 = *v22;
  v24 = v22[1];
  if (v8 >= v7)
  {
    v26 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 2) + 1;
    if (v26 > 0x1555555555555555)
      sub_22316E078();
    if (0x5555555555555556 * ((v7 - v6) >> 2) > v26)
      v26 = 0x5555555555555556 * ((v7 - v6) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v27 = 0x1555555555555555;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 > 0x1555555555555555)
        sub_223174E94();
      v28 = (char *)operator new(12 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[4 * ((v8 - v6) >> 2)];
    *(_DWORD *)v29 = v24;
    *((_DWORD *)v29 + 1) = v21;
    *((_DWORD *)v29 + 2) = v23;
    v25 = v29 + 12;
    if (v8 != v6)
    {
      do
      {
        v30 = *(_QWORD *)(v8 - 12);
        v8 -= 12;
        v31 = *((_DWORD *)v8 + 2);
        *(_QWORD *)(v29 - 12) = v30;
        v29 -= 12;
        *((_DWORD *)v29 + 2) = v31;
      }
      while (v8 != v6);
      v6 = *a2;
    }
    *a2 = v29;
    a2[1] = v25;
    a2[2] = &v28[12 * v27];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v8 = v24;
    *((_DWORD *)v8 + 1) = v21;
    v25 = v8 + 12;
    *((_DWORD *)v8 + 2) = v23;
  }
  a2[1] = v25;
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  if (v37)
    operator delete(v37);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
}

void sub_223EBA8F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_223EBA924((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223EBA924(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_223EBA970(unint64_t a1, int32x4_t *a2, uint64_t a3, int a4, double a5, double a6, int8x16_t a7)
{
  unint64_t v11;
  unint64_t v12;
  float32x2_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  int8x16_t v17;
  int32x4_t *v18;
  unint64_t v19;
  const float *i32;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  unint64_t v32;
  float32x2_t *v33;
  float64x2_t v34;
  float32x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  __int32 *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int32 *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  BOOL v62;
  double v63;
  unint64_t v64;
  void **v65;
  void **v66;
  void *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  void **v71;
  unint64_t v72;
  void **v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  int v79;
  _DWORD *v80;
  int v81;
  void *__p[2];
  __int128 v83;
  BOOL v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void **v93;
  void **v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  float32x4x2_t v99;

  if (a1 <= 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonTriangulation.cpp", 78, (uint64_t)"polygon.size() >= 3", 19, (uint64_t)"Polygon must have at least three vertices.", 42, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v89 = 0.0;
  v90 = 0;
  v94 = 0;
  v95 = 0;
  v11 = 2 * a1;
  v12 = (3 * a1) >> 1;
  if (v12 <= 1)
    v12 = 1;
  *(_OWORD *)__p = 0u;
  v83 = 0u;
  v92 = v12;
  v93 = 0;
  v91 = v12;
  if (v11)
  {
    if (v11 >> 62)
      sub_22316E078();
    __p[0] = operator new(8 * a1);
    __p[1] = __p[0];
    *(_QWORD *)&v83 = (char *)__p[0] + 8 * a1;
  }
  if (!a1)
  {
    v16 = 0;
LABEL_63:
    *((_QWORD *)&v83 + 1) = v16 + a1;
    goto LABEL_64;
  }
  v13 = *(float32x2_t *)&a2->i8[8 * a1 - 8];
  if (a1 < 8)
  {
    v14 = 0;
    v15 = 0.0;
    goto LABEL_16;
  }
  a7.i64[1] = a2->i64[a1 - 1];
  v14 = a1 & 0xFFFFFFFFFFFFFFF8;
  v17 = (int8x16_t)vdupq_lane_s32((int32x2_t)v13, 0);
  v18 = a2 + 2;
  v15 = 0.0;
  v19 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    i32 = (const float *)v18[-2].i32;
    v99 = vld2q_f32(i32);
    v22 = *v18;
    v21 = v18[1];
    v18 += 4;
    v23 = (float32x4_t)vextq_s8(v17, (int8x16_t)v99.val[0], 0xCuLL);
    v24 = (float32x4_t)vuzp1q_s32(v22, v21);
    v25 = (float32x4_t)vextq_s8(a7, (int8x16_t)v99.val[1], 0xCuLL);
    v26 = (float32x4_t)vuzp2q_s32(v22, v21);
    v27 = (float32x4_t)vextq_s8((int8x16_t)v99.val[0], (int8x16_t)v24, 0xCuLL);
    v28 = (float32x4_t)vextq_s8((int8x16_t)v99.val[1], (int8x16_t)v26, 0xCuLL);
    v29 = vcvtq_f64_f32(*(float32x2_t *)v99.val[0].f32);
    v99.val[0] = (float32x4_t)vmulq_f64(vsubq_f64(vcvt_hight_f64_f32(v23), vcvt_hight_f64_f32(v99.val[0])), vaddq_f64(vcvt_hight_f64_f32(v25), vcvt_hight_f64_f32(v99.val[1])));
    v30 = vmulq_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v23.f32), v29), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v25.f32), vcvtq_f64_f32(*(float32x2_t *)v99.val[1].f32)));
    v99.val[1] = (float32x4_t)vmulq_f64(vsubq_f64(vcvt_hight_f64_f32(v27), vcvt_hight_f64_f32(v24)), vaddq_f64(vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v26)));
    v31 = vmulq_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v27.f32), vcvtq_f64_f32(*(float32x2_t *)v24.f32)), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v28.f32), vcvtq_f64_f32(*(float32x2_t *)v26.f32)));
    v15 = v15
        + v30.f64[0]
        + v30.f64[1]
        + *(double *)v99.val[0].i64
        + *(double *)&v99.val[0].i64[1]
        + v31.f64[0]
        + v31.f64[1]
        + *(double *)v99.val[1].i64
        + *(double *)&v99.val[1].i64[1];
    a7 = (int8x16_t)v26;
    v17 = (int8x16_t)v24;
    v19 -= 8;
  }
  while (v19);
  if (a1 != v14)
  {
    v13 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
LABEL_16:
    v32 = a1 - v14;
    v33 = (float32x2_t *)a2 + v14;
    do
    {
      v34 = vcvtq_f64_f32(v13);
      v35 = *v33++;
      v13 = v35;
      v36 = vcvtq_f64_f32(v35);
      v15 = v15 + vmulq_laneq_f64(vsubq_f64(v34, v36), vaddq_f64(v34, v36), 1).f64[0];
      --v32;
    }
    while (v32);
  }
  if (v15 <= 0.0)
  {
    v45 = 0;
    v46 = &a2->i32[2 * a1 - 1];
    v47 = a1;
    do
    {
      while (1)
      {
        v98 = --v47 + DWORD2(v83);
        v97 = *(v46 - 1);
        v96 = *v46;
        sub_223EBFAAC(&v90, &v98, (float *)&v97, (float *)&v96);
        v44 = v49;
        if (!v45)
          break;
        v48 = *(_QWORD *)(v45 + 32);
        *(_QWORD *)(v49 + 24) = v45;
        *(_QWORD *)(v49 + 32) = v48;
        *(_QWORD *)(*(_QWORD *)(v45 + 32) + 24) = v49;
        *(_QWORD *)(v45 + 32) = v49;
        v46 -= 2;
        v45 = v49;
        if (!v47)
          goto LABEL_28;
      }
      *(_QWORD *)(v49 + 24) = v49;
      *(_QWORD *)(v49 + 32) = v49;
      v46 -= 2;
      v45 = v49;
    }
    while (v47);
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v39 = &a2->i32[1];
    do
    {
      v98 = v37 + DWORD2(v83);
      v97 = *(v39 - 1);
      v96 = *v39;
      sub_223EBFAAC(&v90, &v98, (float *)&v97, (float *)&v96);
      v44 = v43;
      if (v38)
      {
        v40 = (uint64_t *)(v38 + 32);
        v41 = *(_QWORD *)(v38 + 32);
        *(_QWORD *)(v43 + 24) = v38;
        *(_QWORD *)(v43 + 32) = v41;
        v42 = *(_QWORD *)(v38 + 32);
      }
      else
      {
        v40 = (uint64_t *)(v43 + 32);
        v42 = v43;
      }
      *(_QWORD *)(v42 + 24) = v43;
      *v40 = v43;
      ++v37;
      v39 += 2;
      v38 = v43;
    }
    while (a1 != v37);
  }
LABEL_28:
  if (!v44)
  {
    v16 = *((_QWORD *)&v83 + 1);
    goto LABEL_63;
  }
  v50 = *(_QWORD *)(v44 + 32);
  if (*(double *)(v44 + 8) != *(double *)(v50 + 8) || *(double *)(v44 + 16) != *(double *)(v50 + 16))
  {
    *((_QWORD *)&v83 + 1) += a1;
    if (*(_QWORD *)(v44 + 24) == v50)
      goto LABEL_64;
    goto LABEL_39;
  }
  *(_QWORD *)(v50 + 24) = *(_QWORD *)(v44 + 24);
  *(_QWORD *)(*(_QWORD *)(v44 + 24) + 32) = v50;
  v51 = *(_QWORD *)(v44 + 48);
  if (v51)
    *(_QWORD *)(v51 + 56) = *(_QWORD *)(v44 + 56);
  v52 = *(_QWORD *)(v44 + 56);
  if (v52)
    *(_QWORD *)(v52 + 48) = v51;
  v44 = *(_QWORD *)(v44 + 32);
  *((_QWORD *)&v83 + 1) += a1;
  if (v44)
  {
    v50 = *(_QWORD *)(v44 + 32);
    if (*(_QWORD *)(v44 + 24) != v50)
    {
LABEL_39:
      v84 = 80 - (int)a1 < 0;
      if (80 - (_DWORD)a1 < 0)
      {
        v54 = *(double *)(v44 + 8);
        v53 = *(double *)(v44 + 16);
        v55 = v53;
        v56 = v54;
        do
        {
          v57 = *(double *)(v50 + 8);
          v58 = *(double *)(v50 + 16);
          if (v57 < v56)
            v56 = *(double *)(v50 + 8);
          if (v58 < v55)
            v55 = *(double *)(v50 + 16);
          if (v54 < v57)
            v54 = *(double *)(v50 + 8);
          if (v53 < v58)
            v53 = *(double *)(v50 + 16);
          v50 = *(_QWORD *)(v50 + 32);
        }
        while (v50 != v44);
        v85 = v56;
        v86 = v54;
        v87 = v55;
        v88 = v53;
        v59 = v54 - v56;
        v60 = v53 - v55;
        if (v59 >= v60)
          v60 = v59;
        v61 = 1.0 / v60;
        v62 = v60 == 0.0;
        v63 = 0.0;
        if (!v62)
          v63 = v61;
        v89 = v63;
      }
      sub_223EBE7E8((uint64_t)__p, v44);
      v64 = v92;
      v65 = v93;
      v66 = v94;
      if (v93 != v94)
      {
        do
        {
          v67 = *v65++;
          operator delete(v67);
        }
        while (v65 != v66);
        v65 = v93;
      }
      if (v64 <= 1)
        v68 = 1;
      else
        v68 = v64;
      v94 = v65;
      v91 = v68;
      v92 = v68;
      v90 = 0;
    }
  }
LABEL_64:
  v69 = __p[0];
  v70 = __p[1];
  __p[1] = 0;
  *(_QWORD *)&v83 = 0;
  __p[0] = 0;
  v72 = v92;
  v71 = v93;
  v73 = v94;
  if (v93 != v94)
  {
    do
    {
      v74 = *v71++;
      operator delete(v74);
    }
    while (v71 != v73);
    v71 = v93;
  }
  if (v72 <= 1)
    v75 = 1;
  else
    v75 = v72;
  v94 = v71;
  v91 = v75;
  v92 = v75;
  v90 = 0;
  if (v71)
    operator delete(v71);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v70 == v69)
  {
    if (!v69)
      return;
  }
  else
  {
    v76 = 0;
    v77 = *(_DWORD **)(a3 + 8);
    v78 = (v70 - v69) >> 2;
    do
    {
      v80 = &v69[4 * v76];
      v81 = *v80 + a4;
      LODWORD(__p[0]) = v81;
      v98 = v80[1] + a4;
      v97 = v80[2] + a4;
      if ((unint64_t)v77 < *(_QWORD *)(a3 + 16))
      {
        *v77 = v81;
        v79 = v97;
        v77[1] = v98;
        v77[2] = v79;
        v77 += 3;
      }
      else
      {
        v77 = sub_223A9EF0C(a3, __p, &v98, &v97);
      }
      *(_QWORD *)(a3 + 8) = v77;
      v76 += 3;
    }
    while (v76 < v78);
  }
  operator delete(v69);
}

void sub_223EBAF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223EBE76C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223EBAF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223EBE76C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223EBAF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223EBE76C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223EBAF48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223EBAF5C(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float *v5;
  float *v6;
  float32x2_t v7;
  float v8;
  float v9;
  float32x2_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  float32x2_t v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v21;
  unint64_t v22;
  float *v23;
  float32x2_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  float32x2_t *v34;
  uint64_t v35;
  char *v36;
  _DWORD *v37;
  _DWORD *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  _DWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v79;
  uint64_t *v80;
  int v81;
  char *v82;
  uint64_t *v83;
  char v84;
  int v85;
  int v86;
  int v87;
  int v88;
  BOOL v89;
  BOOL v90;
  uint64_t v91;
  char *v92;
  float32x2_t *v93;
  float32x2_t *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  void *v120;
  void *v121;
  int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float *v158;
  float *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float *v164;
  float *v165;
  BOOL v166;
  BOOL v167;
  _DWORD *v168;
  _DWORD *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  char *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD *v183;
  uint64_t v184;
  int v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  uint64_t *v199;
  int v200;
  uint64_t v201;
  BOOL v202;
  int v203;
  int v204;
  int v205;
  uint64_t *v206;
  int v207;
  uint64_t v208;
  BOOL v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  float *v213;
  float *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  float *v219;
  float *v220;
  float *v221;
  uint64_t v222;
  float *v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  float *v229;
  float *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  float *v235;
  float *v236;
  float *v237;
  uint64_t v238;
  float *v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  BOOL v243;
  float *v244;
  float *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  float *v250;
  float *v251;
  float *v252;
  uint64_t v253;
  float *v254;
  uint64_t v255;
  int v256;
  float *v257;
  float *v258;
  uint64_t v259;
  float *v260;
  int v261;
  uint64_t *v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  BOOL v267;
  float *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  float32x2_t *v273;
  float32x2_t *v274;
  float *v275;
  uint64_t v276;
  float *v277;
  uint64_t v278;
  uint64_t v279;
  BOOL v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  int v284;
  uint64_t *v285;
  char v286;
  char *v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  BOOL v293;
  uint64_t v294;
  uint64_t v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  uint64_t v307;
  uint64_t v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  int v328;
  int v329;
  uint64_t *v330;
  int v331;
  uint64_t v332;
  BOOL v333;
  int v334;
  int v335;
  int v336;
  uint64_t *v337;
  int v338;
  uint64_t v339;
  BOOL v340;
  uint64_t v341;
  int v342;
  BOOL v343;
  float *v344;
  float *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  float *v350;
  float *v351;
  float *v352;
  uint64_t v353;
  float *v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  BOOL v359;
  float *v360;
  float *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  float *v366;
  float *v367;
  float *v368;
  uint64_t v369;
  float *v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t *v374;
  int v375;
  uint64_t *v376;
  int v377;
  int v378;
  int v379;
  uint64_t v380;
  BOOL v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int64x2_t v388;
  int64x2_t v389;
  uint64_t *v390;
  uint64_t *v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t *v394;
  uint64_t *v395;
  float32x2_t v396;
  unsigned int v397;
  float32x2_t v398;
  float v400;
  uint64_t *v401;
  uint64_t *v402;
  unsigned int v403;
  float *v404;
  float *v405;
  float *v406;
  float *v407;
  float *v408;
  unsigned int v409;
  uint64_t *v410;
  float *v411;
  float *v412;
  float *v413;
  float *v414;
  float *v415;
  unsigned __int8 *v416;
  uint64_t v417;
  uint64_t v418;
  char **v419;
  void *v420;
  float32x2_t *v421;
  float32x2_t *v422;
  char v423;
  unsigned __int8 *v424[3];
  void *v425;
  uint64_t *v426;
  uint64_t v427;
  __int128 *v428;
  int v429;
  _QWORD v430[2];
  void **v431;
  void **v432;
  float32x2_t *v433;
  uint64_t v434;
  char *v435;
  __int128 **v436;
  void **v437;
  unsigned __int8 **v438;
  _QWORD *v439;
  _QWORD *v440;
  uint64_t v441;
  void *__p;
  _BYTE *v443;
  uint64_t v444;
  int64x2_t v445;
  unsigned __int128 v446;
  uint64_t v447;
  char *v448;
  char *v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  char v453[16];
  uint64_t v454;

  v454 = *MEMORY[0x24BDAC8D0];
  sub_2241498F4(a2, 0);
  v5 = *(float **)a1;
  v6 = (float *)*((_QWORD *)a1 + 1);
  if (*(float **)a1 == v6)
  {
    v7 = 0;
    v10.i32[0] = 0;
    v9 = 0.0;
  }
  else
  {
    v7.f32[0] = *v5;
    v8 = v5[1];
    v9 = v8;
    v10.f32[0] = *v5;
    do
    {
      v11 = *v5;
      v12 = v5[1];
      v5 += 2;
      if (v11 < v10.f32[0])
        v10.f32[0] = v11;
      if (v12 < v9)
        v9 = v12;
      if (v7.f32[0] < v11)
        v7.f32[0] = v11;
      if (v8 < v12)
        v8 = v12;
    }
    while (v5 != v6);
    v7.f32[1] = v8;
  }
  v10.f32[1] = v9;
  v398 = v10;
  v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
  v14 = vdiv_f32(vsub_f32(v7, v10), v13);
  v15 = vcvtps_u32_f32(v14.f32[1]);
  v384 = vcvtps_u32_f32(v14.f32[0]);
  v397 = v15;
  if (v384)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = 0;
    v418 = a2 + 24;
    v419 = (char **)(a2 + 112);
    v417 = a2 + 136;
    v18.i32[0] = 0;
    v18.i32[1] = LODWORD(a3);
    v396 = v18;
    v388 = vdupq_n_s64(0x8000000000000000);
    v389 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v416 = a1;
    do
    {
      v409 = 0;
      v400 = (float)v17;
      v403 = v17;
      do
      {
        v19 = (float32x2_t *)operator new(0x20uLL);
        v20.f32[0] = v400;
        v20.f32[1] = (float)v409;
        v421 = v19 + 4;
        v422 = v19 + 4;
        v21 = vadd_f32(v398, vmul_n_f32(v20, *(float *)&a3));
        *v19 = v21;
        v19[1] = vadd_f32((float32x2_t)LODWORD(a3), v21);
        v19[2] = vadd_f32(v13, v21);
        v19[3] = vadd_f32(v396, v21);
        v420 = v19;
        strcpy(v453, "FFFFFFFFF");
        v425 = 0;
        v426 = 0;
        v427 = 0;
        v424[0] = (unsigned __int8 *)v453;
        v424[1] = (unsigned __int8 *)&v420;
        v424[2] = a1;
        sub_2233EB9D0((float32x2_t **)&v420, (float32x2_t **)a1, (uint64_t)&v428);
        __p = 0;
        v443 = 0;
        v444 = 0;
        v439 = 0;
        v440 = 0;
        v441 = 0;
        if (v421 == v420)
          v22 = 0;
        else
          v22 = (((char *)v421 - (_BYTE *)v420) >> 3) + 1;
        if (v22 >= 2)
        {
          v431 = (void **)v421;
          v432 = (void **)v420;
          v433 = v421;
          v434 = ((char *)v421 - (_BYTE *)v420) >> 3;
          v435 = (char *)v22;
          v445.i64[0] = (uint64_t)v420;
          v445.i64[1] = (uint64_t)v420;
          v446 = __PAIR128__(v434, (unint64_t)v421);
          v447 = 0;
          *(_QWORD *)&v451 = 0;
          *((_QWORD *)&v451 + 1) = -1;
          v452 = -1;
          sub_2233EBC50(&__p, (uint64_t *)&v431, (uint64_t)&v445, (uint64_t)&v428, (uint64_t)&v423, &v451, 0xAuLL);
        }
        v440 = 0;
        v23 = *(float **)a1;
        v24 = (float32x2_t *)*((_QWORD *)a1 + 1);
        v25 = ((uint64_t)v24 - *(_QWORD *)a1) >> 3;
        if (v24 == *(float32x2_t **)a1)
          v26 = 0;
        else
          v26 = v25 + 1;
        if (v26 >= 2)
        {
          v431 = (void **)*((_QWORD *)a1 + 1);
          v432 = (void **)v23;
          v433 = v24;
          v434 = v25;
          v435 = (char *)v26;
          v445.i64[0] = (uint64_t)v23;
          v445.i64[1] = (uint64_t)v23;
          *(_QWORD *)&v446 = v24;
          *((_QWORD *)&v446 + 1) = v25;
          v447 = 0;
          *(_QWORD *)&v451 = 1;
          *((_QWORD *)&v451 + 1) = -1;
          v452 = -1;
          sub_2233EBC50((void **)&v439, (uint64_t *)&v431, (uint64_t)&v445, (uint64_t)&v428, (uint64_t)&v423, &v451, 0xAuLL);
        }
        LODWORD(v431) = 0;
        v432 = &v420;
        LODWORD(v433) = 1;
        v434 = (uint64_t)a1;
        v435 = &v423;
        v436 = &v428;
        v437 = &v425;
        v438 = v424;
        v430[0] = &v423;
        v430[1] = &v423;
        v28 = __p;
        v27 = v443;
        if (0xEEEEEEEEEEEEEEEFLL * ((v443 - (_BYTE *)__p) >> 3) < 0x11 || 0xEEEEEEEEEEEEEEEFLL * (v440 - v439) < 0x11)
        {
          if (__p != v443)
          {
            v29 = v439;
            v30 = v440;
            if (v439 == v440)
            {
              v31 = v403;
              if (!v439)
                goto LABEL_43;
LABEL_42:
              v440 = v29;
              operator delete(v29);
              goto LABEL_43;
            }
            do
            {
              v77 = v439;
              if (v439 != v30)
              {
                do
                {
                  if (v28[6] >= v77[4] && v28[4] <= v77[6] && v28[7] >= v77[5] && v28[5] <= v77[7])
                  {
                    if (!sub_223EC1BF8(0, (uint64_t)v420, (uint64_t)v421, (uint64_t)v28, 1, *(_QWORD *)a1, *((_QWORD *)a1 + 1), (uint64_t)v77, (uint64_t)&v423, (uint64_t)&v428, (uint64_t)&v425, v424))goto LABEL_114;
                    v30 = v440;
                  }
                  v77 += 15;
                }
                while (v77 != v30);
                v27 = v443;
              }
              v28 += 15;
            }
            while (v28 != v27);
          }
        }
        else
        {
          v451 = 0uLL;
          v452 = 0;
          v448 = 0;
          v449 = 0;
          v450 = 0;
          v445 = v389;
          v446 = (unsigned __int128)v388;
          sub_2233DCD4C(&__p, v445.i64, (char **)&v451);
          sub_2233DCD4C(&v439, v445.i64, &v448);
          sub_223EC060C(&v445, &v451, &v448, 0, (uint64_t)&v431, (uint64_t)v430, (uint64_t)v430);
          if (v448)
          {
            v449 = v448;
            operator delete(v448);
          }
          if ((_QWORD)v451)
          {
            *((_QWORD *)&v451 + 1) = v451;
            operator delete((void *)v451);
          }
        }
LABEL_114:
        v29 = v439;
        v31 = v403;
        if (v439)
          goto LABEL_42;
LABEL_43:
        if (__p)
        {
          v443 = __p;
          operator delete(__p);
        }
        v32 = (uint64_t *)v425;
        if (v453[9])
          goto LABEL_46;
        v79 = v426;
        if (v425 != v426)
          goto LABEL_117;
        if (v420 != v421)
        {
          v445.i64[0] = *(_QWORD *)v420;
          v158 = *(float **)a1;
          v159 = (float *)*((_QWORD *)a1 + 1);
          v160 = (uint64_t)v159 - *(_QWORD *)a1;
          if ((unint64_t)v160 < 0x18)
            goto LABEL_556;
          v161 = v160 >> 3;
          if (v159 == v158)
            v162 = 0;
          else
            v162 = v161 + 1;
          LODWORD(v431) = 0;
          BYTE4(v431) = 0;
          v163 = v162 - 1;
          v164 = v158;
          if (v162 >= v161)
          {
            v165 = v159;
            if (v163 <= v161)
              v165 = &v158[2 * (v163 % v161)];
          }
          else
          {
            v165 = v159 - 2;
          }
          if (v162 == 1)
            goto LABEL_555;
          v257 = v159;
          do
          {
            if (v163 + 1 >= v161)
            {
              v258 = v159;
              if (v163 <= v161)
                v258 = &v164[2 * (v163 % v161)];
            }
            else
            {
              v258 = v257 - 2;
            }
            v259 = v163 - 1;
            if (v163 >= v161)
            {
              v260 = v159;
              if (v259 <= v161)
                v260 = &v164[2 * (v259 % v161)];
            }
            else
            {
              v260 = v165 - 2;
            }
            if (!sub_2233E62E4((float *)v445.i32, v258, v260, (uint64_t)&v431))
              break;
            if (v163 + 1 >= v161)
            {
              v257 = v159;
              if (v163 <= v161)
                v257 = &v164[2 * (v163 % v161)];
            }
            else
            {
              v257 -= 2;
            }
            if (v163 < v161)
            {
              v165 -= 2;
            }
            else
            {
              v165 = v159;
              if (v259 <= v161)
                v165 = &v164[2 * (v259 % v161)];
            }
            --v163;
          }
          while (v259);
          if (BYTE4(v431))
          {
LABEL_555:
            a1 = v416;
            v31 = v403;
LABEL_556:
            v453[9] = 1;
            v32 = (uint64_t *)v425;
            goto LABEL_46;
          }
          a1 = v416;
          v31 = v403;
          if (!(_DWORD)v431)
            goto LABEL_556;
          if (v453[0] - 58 <= 0xFFFFFFF7)
            v453[0] = 50;
          if (v453[3] - 58 <= 0xFFFFFFF6)
            v453[3] = 49;
        }
        v32 = (uint64_t *)v425;
        if (v453[9])
          goto LABEL_46;
        v79 = v426;
        if (v425 != v426)
        {
LABEL_117:
          if (v32 == v79)
            goto LABEL_623;
          goto LABEL_118;
        }
        if (*(_QWORD *)a1 == *((_QWORD *)a1 + 1))
          goto LABEL_621;
        v445.i64[0] = **(_QWORD **)a1;
        v268 = (float *)v421;
        if ((unint64_t)((char *)v421 - (_BYTE *)v420) < 0x18)
          goto LABEL_621;
        v269 = ((char *)v421 - (_BYTE *)v420) >> 3;
        if (v421 == v420)
          v270 = 0;
        else
          v270 = v269 + 1;
        LODWORD(v431) = 0;
        BYTE4(v431) = 0;
        v271 = v270 - 1;
        v272 = (char *)v420;
        if (v270 >= v269)
        {
          v273 = v421;
          if (v271 <= v269)
            v273 = (float32x2_t *)((char *)v420 + 8 * (v271 % v269));
        }
        else
        {
          v273 = v421 - 1;
        }
        if (v270 == 1)
          goto LABEL_620;
        v274 = v421;
        do
        {
          if (v271 + 1 >= v269)
          {
            v275 = v268;
            if (v271 <= v269)
              v275 = (float *)&v272[8 * (v271 % v269)];
          }
          else
          {
            v275 = (float *)&v274[-1];
          }
          v276 = v271 - 1;
          if (v271 >= v269)
          {
            v277 = v268;
            if (v276 <= v269)
              v277 = (float *)&v272[8 * (v276 % v269)];
          }
          else
          {
            v277 = (float *)&v273[-1];
          }
          if (!sub_2233E62E4((float *)v445.i32, v275, v277, (uint64_t)&v431))
            break;
          if (v271 + 1 >= v269)
          {
            v274 = (float32x2_t *)v268;
            if (v271 <= v269)
              v274 = (float32x2_t *)&v272[8 * (v271 % v269)];
          }
          else
          {
            --v274;
          }
          if (v271 < v269)
          {
            --v273;
          }
          else
          {
            v273 = (float32x2_t *)v268;
            if (v276 <= v269)
              v273 = (float32x2_t *)&v272[8 * (v276 % v269)];
          }
          --v271;
        }
        while (v276);
        if (BYTE4(v431))
        {
LABEL_620:
          a1 = v416;
          v31 = v403;
LABEL_621:
          v32 = (uint64_t *)v425;
          if (v453[9])
            goto LABEL_46;
          v79 = v426;
          if (v425 == v426)
          {
LABEL_623:
            v32 = v79;
            goto LABEL_46;
          }
LABEL_118:
          sub_2233F0FEC((uint64_t)v32, v79, (uint64_t)&v431, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v32) >> 6)), 1);
          v80 = (uint64_t *)v425;
          v81 = v453[9];
          v401 = v426;
          if (v425 == v426)
          {
            v32 = (uint64_t *)v425;
            goto LABEL_321;
          }
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          v86 = v453[0];
          v87 = v453[3];
          v88 = v453[9];
          v32 = (uint64_t *)v425;
          while (2)
          {
            v122 = *((_DWORD *)v80 + 8);
            if ((v122 - 5) < 0xFFFFFFFC)
            {
LABEL_166:
              if (v88)
                goto LABEL_321;
              goto LABEL_167;
            }
            if (!v82 || v80[6] != *((_QWORD *)v82 + 1))
            {
              v123 = 1;
              v82 = (char *)(v80 + 5);
              if (v83)
                goto LABEL_176;
LABEL_172:
              if (v122 != 1)
                goto LABEL_173;
              goto LABEL_222;
            }
            v123 = v80[7] != *((_QWORD *)v82 + 2);
            v82 = (char *)(v80 + 5);
            if (!v83)
              goto LABEL_172;
LABEL_176:
            if (v85)
            {
              if (v123)
                goto LABEL_206;
              if (v83[6] != v80[6])
                goto LABEL_206;
              if (v83[7] != v80[7])
                goto LABEL_206;
              v124 = v83[8];
              v125 = v80[8];
              if (v124 != v125 && (v80[10] || v124 + 1 != v125))
                goto LABEL_206;
              v126 = *(float *)v83;
              v127 = *(float *)v80;
              if (*(float *)v83 != *(float *)v80)
              {
                if ((LODWORD(v126) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v127) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                  goto LABEL_206;
                v130 = vabds_f32(v126, v127);
                v131 = fabsf(v126);
                v132 = fabsf(v127);
                if (v131 < v132)
                  v131 = v132;
                v133 = v131 >= 1.0 ? v131 * 0.00000011921 : 0.00000011921;
                if (v130 > v133)
                  goto LABEL_206;
              }
              v128 = *((float *)v83 + 1);
              v129 = *((float *)v80 + 1);
              if (v128 != v129)
              {
                if ((LODWORD(v128) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v129) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                  goto LABEL_206;
                v134 = vabds_f32(v128, v129);
                v135 = fabsf(v128);
                v136 = fabsf(v129);
                if (v135 < v136)
                  v135 = v136;
                v137 = v135 >= 1.0 ? v135 * 0.00000011921 : 0.00000011921;
                if (v134 > v137)
                {
LABEL_206:
                  v81 = 1;
                  v453[9] = 1;
                  v88 = 1;
                  goto LABEL_207;
                }
              }
              if (v122 == 1)
              {
                if (!v84)
                {
                  v84 = 0;
                  v85 = 1;
                  goto LABEL_165;
                }
                if (v124 == v125)
                  goto LABEL_214;
LABEL_212:
                if (!v80[10] && v124 + 1 == v125)
                {
LABEL_214:
                  v138 = *(float *)v83;
                  v139 = *(float *)v80;
                  if (*(float *)v83 != *(float *)v80)
                  {
                    if ((LODWORD(v138) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v139) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                      goto LABEL_219;
                    v142 = vabds_f32(v138, v139);
                    v143 = fabsf(v138);
                    v144 = fabsf(v139);
                    if (v143 < v144)
                      v143 = v144;
                    v145 = v143 >= 1.0 ? v143 * 0.00000011921 : 0.00000011921;
                    if (v142 > v145)
                      goto LABEL_219;
                  }
                  v140 = *((float *)v83 + 1);
                  v141 = *((float *)v80 + 1);
                  if (v140 != v141)
                  {
                    if ((LODWORD(v140) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v141) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                      goto LABEL_219;
                    v146 = vabds_f32(v140, v141);
                    v147 = fabsf(v140);
                    v148 = fabsf(v141);
                    if (v147 < v148)
                      v147 = v148;
                    v149 = v147 >= 1.0 ? v147 * 0.00000011921 : 0.00000011921;
                    if (v146 > v149)
                      goto LABEL_219;
                  }
                  if (v122 != 2)
                  {
LABEL_221:
                    v84 = 0;
                    if (v122 == 1)
                      goto LABEL_222;
LABEL_173:
                    if (v122 != 2)
                    {
LABEL_165:
                      v83 = v80;
                      goto LABEL_166;
                    }
                  }
                  if (*((_DWORD *)v80 + 28) != 2)
                    v84 = 1;
                  goto LABEL_165;
                }
LABEL_219:
                if ((v86 - 58) <= 0xFFFFFFF7)
                {
                  v86 = 50;
                  v453[0] = 50;
                  if ((v87 - 58) > 0xFFFFFFF6)
                    goto LABEL_221;
                }
                else if ((v87 - 58) > 0xFFFFFFF6)
                {
                  goto LABEL_221;
                }
                v84 = 0;
                v87 = 49;
                v453[3] = 49;
                if (v122 != 1)
                  goto LABEL_173;
LABEL_222:
                v83 = v80;
                v85 = v122;
                if (v88)
                  goto LABEL_321;
LABEL_167:
                v80 += 24;
                if (v80 != v426)
                  continue;
                if (v85)
                {
                  v81 = 1;
                  v453[9] = 1;
                }
                if (v84)
                {
                  if ((v86 - 58) <= 0xFFFFFFF7)
                    v453[0] = 50;
                  if ((v87 - 58) <= 0xFFFFFFF6)
                    v453[3] = 49;
                }
LABEL_321:
                if (v81)
                  goto LABEL_46;
                v431 = &v420;
                v432 = (void **)a1;
                LOBYTE(v433) = 0;
                v434 = (uint64_t)v453;
                v435 = &v423;
                LODWORD(v436) = v453[0] != 70;
                if (v453[3] != 70)
                  LODWORD(v436) = (v453[0] != 70) | 4;
                if (v32 == v426)
                  goto LABEL_639;
                v189 = v32[7];
                if ((v189 & 0x8000000000000000) == 0)
                {
                  v190 = v189 + 1;
                  do
                  {
                    sub_223EC2B18((uint64_t)&v431);
                    --v190;
                  }
                  while (v190);
                }
                v191 = v32;
                v192 = v32 + 24;
                if (v32 + 24 == v401)
                {
                  v193 = v32;
                  v261 = (int)v436;
                  if ((~(_DWORD)v436 & 6) != 0)
                    goto LABEL_560;
                  goto LABEL_635;
                }
                while (2)
                {
                  v193 = v192;
                  v394 = v191;
                  if (v191[6] == v191[30])
                  {
                    v194 = v191[7];
                    v195 = v191[31];
                    if (v194 != v195)
                    {
                      v196 = (int)v436;
                      if ((~(_DWORD)v436 & 6) != 0)
                      {
                        LOBYTE(v197) = 0;
                        LOBYTE(v198) = 0;
                        v199 = v191;
                        do
                        {
                          v200 = *((_DWORD *)v199 + 8);
                          if (v200 != 1)
                          {
                            if (v200 != 2 || *((_DWORD *)v199 + 28) != 2)
                              goto LABEL_479;
                            if (v199 == v394)
                              goto LABEL_349;
                            v199 += 24;
                            while (1)
                            {
                              v198 = *((_DWORD *)v199 + 8);
                              if (v198 != 2)
                                break;
                              if (*((_DWORD *)v199 + 28) != 2)
                                goto LABEL_479;
                              v16 = v199 == v394;
                              v199 += 24;
                              if (v16)
                                goto LABEL_349;
                            }
                            if (v198 != 1)
                              goto LABEL_479;
                          }
                          v197 = *((_DWORD *)v199 + 28);
                          if (v197 != 1)
                            goto LABEL_479;
                          v16 = v199 == v394;
                          v199 += 24;
                        }
                        while (!v16);
                        if ((v198 & 1) == 0)
                        {
                          v201 = v434;
                          *(_BYTE *)(v434 + 9) = 1;
                          v196 |= 2u;
                          LODWORD(v436) = v196;
                          if (v196 != 7)
                            goto LABEL_353;
                          goto LABEL_477;
                        }
                        LOBYTE(v197) = 1;
LABEL_349:
                        v201 = v434;
                        if (*(unsigned __int8 *)v434 - 58 > 0xFFFFFFF7)
                        {
                          if (*(unsigned __int8 *)(v434 + 3) - 58 <= 0xFFFFFFF6)
                            goto LABEL_475;
LABEL_351:
                          v196 |= 5u;
                          LODWORD(v436) = v196;
                          if ((v197 & 1) != 0)
                            goto LABEL_352;
LABEL_476:
                          if (v196 == 7)
                            goto LABEL_477;
LABEL_353:
                          v202 = *(_BYTE *)(v201 + 9) != 0;
                        }
                        else
                        {
                          *(_BYTE *)v434 = 50;
                          if (*(unsigned __int8 *)(v201 + 3) - 58 > 0xFFFFFFF6)
                            goto LABEL_351;
LABEL_475:
                          *(_BYTE *)(v201 + 3) = 49;
                          v196 |= 5u;
                          LODWORD(v436) = v196;
                          if ((v197 & 1) == 0)
                            goto LABEL_476;
LABEL_352:
                          *(_BYTE *)(v201 + 9) = 1;
                          v196 |= 2u;
                          LODWORD(v436) = v196;
                          if (v196 != 7)
                            goto LABEL_353;
LABEL_477:
                          v202 = 1;
                        }
                        LOBYTE(v433) = v202;
                        v194 = v394[7];
                        v195 = v394[31];
                      }
LABEL_479:
                      v242 = v194 + 1;
                      if (v194 + 1 < v195 && v196 != 7)
                      {
                        v392 = v193;
                        v386 = v195;
                        while (2)
                        {
                          if (v196 == 7)
                            goto LABEL_484;
                          v413 = (float *)*v431;
                          if (*v431 == v431[1])
                            goto LABEL_484;
                          v244 = (float *)*v432;
                          v245 = (float *)v432[1];
                          v246 = (char *)v245 - (_BYTE *)*v432;
                          if ((unint64_t)v246 < 0x18)
                            goto LABEL_516;
                          v247 = v246 >> 3;
                          v248 = v245 == v244 ? 0 : v247 + 1;
                          v445.i32[0] = 0;
                          v445.i8[4] = 0;
                          v249 = v248 - 1;
                          if (v248 >= v247)
                          {
                            v250 = v245;
                            if (v249 <= v247)
                              v250 = &v244[2 * (v249 % v247)];
                          }
                          else
                          {
                            v250 = v245 - 2;
                          }
                          if (v248 == 1)
                            goto LABEL_516;
                          v406 = v244;
                          v251 = v245;
                          do
                          {
                            if (v249 + 1 >= v247)
                            {
                              v252 = v245;
                              if (v249 <= v247)
                                v252 = &v406[2 * (v249 % v247)];
                            }
                            else
                            {
                              v252 = v251 - 2;
                            }
                            v253 = v249 - 1;
                            if (v249 >= v247)
                            {
                              v254 = v245;
                              if (v253 <= v247)
                                v254 = &v406[2 * (v253 % v247)];
                            }
                            else
                            {
                              v254 = v250 - 2;
                            }
                            if (!sub_2233E62E4(v413, v252, v254, (uint64_t)&v445))
                              break;
                            if (v249 + 1 >= v247)
                            {
                              v251 = v245;
                              if (v249 <= v247)
                                v251 = &v406[2 * (v249 % v247)];
                            }
                            else
                            {
                              v251 -= 2;
                            }
                            if (v249 < v247)
                            {
                              v250 -= 2;
                            }
                            else
                            {
                              v250 = v245;
                              if (v253 <= v247)
                                v250 = &v406[2 * (v253 % v247)];
                            }
                            --v249;
                          }
                          while (v253);
                          v193 = v392;
                          v195 = v386;
                          if (v445.i8[4] || !v445.i32[0])
                          {
LABEL_516:
                            v255 = v434;
                            *(_BYTE *)(v434 + 9) = 1;
                            v196 = v436 | 2;
                            LODWORD(v436) = v196;
                            if (v196 == 7)
                              goto LABEL_517;
                          }
                          else
                          {
                            v255 = v434;
                            if (*(unsigned __int8 *)v434 - 58 <= 0xFFFFFFF7)
                              *(_BYTE *)v434 = 50;
                            v256 = (int)v436;
                            if (*(unsigned __int8 *)(v255 + 3) - 58 <= 0xFFFFFFF6)
                              *(_BYTE *)(v255 + 3) = 49;
                            v196 = v256 | 5;
                            LODWORD(v436) = v196;
                            if (v196 == 7)
                            {
LABEL_517:
                              v243 = 1;
LABEL_483:
                              LOBYTE(v433) = v243;
LABEL_484:
                              if (++v242 == v195)
                                goto LABEL_525;
                              continue;
                            }
                          }
                          break;
                        }
                        v243 = *(_BYTE *)(v255 + 9) != 0;
                        goto LABEL_483;
                      }
                    }
LABEL_525:
                    a1 = v416;
                    v31 = v403;
                    if ((_BYTE)v433)
                      goto LABEL_639;
                    v191 = v394 + 24;
                    v192 = v193 + 24;
                    if (v193 + 24 != v401)
                      continue;
                    v261 = (int)v436;
                    if ((~(_DWORD)v436 & 6) == 0)
                      goto LABEL_635;
LABEL_560:
                    if (v191 == v401)
                      goto LABEL_632;
                    v262 = v191;
                    LOBYTE(v263) = 0;
                    LOBYTE(v264) = 0;
                    do
                    {
                      v265 = *((_DWORD *)v262 + 8);
                      if (v265 != 1)
                      {
                        if (v265 != 2 || *((_DWORD *)v262 + 28) != 2)
                          goto LABEL_635;
                        if (v262 == v193)
                          goto LABEL_578;
                        v262 += 24;
                        while (1)
                        {
                          v264 = *((_DWORD *)v262 + 8);
                          if (v264 != 2)
                            break;
                          if (*((_DWORD *)v262 + 28) != 2)
                            goto LABEL_635;
                          v16 = v262 == v193;
                          v262 += 24;
                          if (v16)
                            goto LABEL_578;
                        }
                        if (v264 != 1)
                          goto LABEL_635;
                      }
                      v263 = *((_DWORD *)v262 + 28);
                      if (v263 != 1)
                        goto LABEL_635;
                      v16 = v262 == v193;
                      v262 += 24;
                    }
                    while (!v16);
                    if ((v264 & 1) == 0)
                    {
                      *(_BYTE *)(v434 + 9) = 1;
                      LODWORD(v436) = v261 | 2;
                      if ((v261 | 2) != 7)
                        goto LABEL_582;
                      goto LABEL_633;
                    }
                    LOBYTE(v263) = 1;
LABEL_578:
                    v266 = v434;
                    if (*(unsigned __int8 *)v434 - 58 > 0xFFFFFFF7)
                    {
                      if (*(unsigned __int8 *)(v434 + 3) - 58 <= 0xFFFFFFF6)
                        goto LABEL_631;
LABEL_580:
                      v261 |= 5u;
                      LODWORD(v436) = v261;
                      if ((v263 & 1) != 0)
                        goto LABEL_581;
LABEL_632:
                      if (v261 == 7)
                        goto LABEL_633;
LABEL_582:
                      v267 = *(_BYTE *)(v434 + 9) != 0;
                    }
                    else
                    {
                      *(_BYTE *)v434 = 50;
                      if (*(unsigned __int8 *)(v266 + 3) - 58 > 0xFFFFFFF6)
                        goto LABEL_580;
LABEL_631:
                      *(_BYTE *)(v266 + 3) = 49;
                      v261 |= 5u;
                      LODWORD(v436) = v261;
                      if ((v263 & 1) == 0)
                        goto LABEL_632;
LABEL_581:
                      *(_BYTE *)(v266 + 9) = 1;
                      LODWORD(v436) = v261 | 2;
                      if ((v261 | 2) != 7)
                        goto LABEL_582;
LABEL_633:
                      v267 = 1;
                    }
                    LOBYTE(v433) = v267;
LABEL_635:
                    v278 = v191[7];
                    if (v278 <= -2)
                    {
                      v279 = v278 + 1;
                      do
                      {
                        sub_223EC2B18((uint64_t)&v431);
                        v280 = __CFADD__(v279++, 1);
                      }
                      while (!v280);
                    }
LABEL_639:
                    v32 = (uint64_t *)v425;
                    if (v453[9])
                      goto LABEL_46;
                    v281 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v426 - (_BYTE *)v425) >> 6));
                    if (v426 == v425)
                      v282 = 0;
                    else
                      v282 = v281;
                    sub_2233F5DEC((uint64_t)v425, v426, (uint64_t)&v431, v282, 1);
                    v283 = (uint64_t *)v425;
                    v284 = v453[9];
                    v402 = v426;
                    if (v425 == v426)
                    {
                      v32 = (uint64_t *)v425;
                      goto LABEL_731;
                    }
                    v285 = 0;
                    v286 = 0;
                    v287 = 0;
                    v288 = 0;
                    v289 = v453[0];
                    v290 = v453[1];
                    v291 = v453[9];
                    v32 = (uint64_t *)v425;
                    while (2)
                    {
                      v292 = *((_DWORD *)v283 + 28);
                      if ((v292 - 5) < 0xFFFFFFFC)
                        goto LABEL_718;
                      if (!v287 || v283[16] != *((_QWORD *)v287 + 1))
                      {
                        v293 = 1;
                        v287 = (char *)(v283 + 15);
                        if (v285)
                          goto LABEL_654;
LABEL_649:
                        if (v292 == 1)
                          goto LABEL_716;
                        goto LABEL_650;
                      }
                      v293 = v283[17] != *((_QWORD *)v287 + 2);
                      v287 = (char *)(v283 + 15);
                      if (!v285)
                        goto LABEL_649;
LABEL_654:
                      if (v288)
                      {
                        if (v293)
                          goto LABEL_683;
                        if (v285[16] != v283[16])
                          goto LABEL_683;
                        if (v285[17] != v283[17])
                          goto LABEL_683;
                        v294 = v285[18];
                        v295 = v283[18];
                        if (v294 != v295 && (v283[20] || v294 + 1 != v295))
                          goto LABEL_683;
                        v296 = *(float *)v285;
                        v297 = *(float *)v283;
                        if (*(float *)v285 == *(float *)v283)
                          goto LABEL_662;
                        if ((LODWORD(v296) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v297) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                          goto LABEL_683;
                        v300 = vabds_f32(v296, v297);
                        v301 = fabsf(v296);
                        v302 = fabsf(v297);
                        if (v301 < v302)
                          v301 = v302;
                        v303 = v301 >= 1.0 ? v301 * 0.00000011921 : 0.00000011921;
                        if (v300 <= v303)
                        {
LABEL_662:
                          v298 = *((float *)v285 + 1);
                          v299 = *((float *)v283 + 1);
                          if (v298 == v299)
                          {
                            if (v292 != 1)
                              goto LABEL_683;
                          }
                          else
                          {
                            if ((LODWORD(v298) & 0x7FFFFFFFu) > 0x7F7FFFFF
                              || (LODWORD(v299) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                            {
                              goto LABEL_683;
                            }
                            v304 = fabsf(v298);
                            v305 = fabsf(v299);
                            if (v304 < v305)
                              v304 = v305;
                            v306 = v304 >= 1.0 ? v304 * 0.00000011921 : 0.00000011921;
                            if (v292 != 1 || vabds_f32(v298, v299) > v306)
                              goto LABEL_683;
                          }
                        }
                        else
                        {
LABEL_683:
                          v288 = 0;
                        }
                      }
                      if (v286)
                      {
                        if (v293)
                          goto LABEL_713;
                        if (v285[16] != v283[16])
                          goto LABEL_713;
                        if (v285[17] != v283[17])
                          goto LABEL_713;
                        v307 = v285[18];
                        v308 = v283[18];
                        if (v307 != v308 && (v283[20] || v307 + 1 != v308))
                          goto LABEL_713;
                        v309 = *(float *)v285;
                        v310 = *(float *)v283;
                        if (*(float *)v285 != *(float *)v283)
                        {
                          if ((LODWORD(v309) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v310) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                            goto LABEL_713;
                          v313 = vabds_f32(v309, v310);
                          v314 = fabsf(v309);
                          v315 = fabsf(v310);
                          if (v314 < v315)
                            v314 = v315;
                          v316 = v314 >= 1.0 ? v314 * 0.00000011921 : 0.00000011921;
                          if (v313 > v316)
                            goto LABEL_713;
                        }
                        v311 = *((float *)v285 + 1);
                        v312 = *((float *)v283 + 1);
                        if (v311 != v312)
                        {
                          if ((LODWORD(v311) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v312) & 0x7FFFFFFFu) > 0x7F7FFFFF)
                            goto LABEL_713;
                          v317 = vabds_f32(v311, v312);
                          v318 = fabsf(v311);
                          v319 = fabsf(v312);
                          if (v318 < v319)
                            v318 = v319;
                          v320 = v318 >= 1.0 ? v318 * 0.00000011921 : 0.00000011921;
                          if (v317 > v320)
                          {
LABEL_713:
                            if ((v289 - 58) <= 0xFFFFFFF7)
                            {
                              v289 = 50;
                              v453[0] = 50;
                              if ((v290 - 58) <= 0xFFFFFFF6)
                                goto LABEL_722;
LABEL_715:
                              v286 = 0;
                              v284 = 1;
                              v453[9] = 1;
                              v291 = 1;
                              if (v292 != 1)
                                goto LABEL_650;
LABEL_716:
                              v288 = 1;
                            }
                            else
                            {
                              if ((v290 - 58) > 0xFFFFFFF6)
                                goto LABEL_715;
LABEL_722:
                              v290 = 49;
                              v453[1] = 49;
                              v286 = 0;
                              v284 = 1;
                              v453[9] = 1;
                              v291 = 1;
                              if (v292 == 1)
                                goto LABEL_716;
LABEL_650:
                              if (v292 == 2)
                              {
LABEL_651:
                                if (*((_DWORD *)v283 + 8) != 2)
                                  v286 = 1;
                              }
                            }
                            v285 = v283;
LABEL_718:
                            if (v291)
                              goto LABEL_731;
                            v283 += 24;
                            if (v283 != v426)
                              continue;
                            if (v286)
                            {
                              if ((v289 - 58) <= 0xFFFFFFF7)
                                v453[0] = 50;
                              if ((v290 - 58) <= 0xFFFFFFF6)
                                v453[1] = 49;
                              v453[9] = 1;
                              goto LABEL_46;
                            }
LABEL_731:
                            if (v284)
                              goto LABEL_46;
                            v431 = (void **)a1;
                            v432 = &v420;
                            LOBYTE(v433) = 0;
                            v434 = (uint64_t)v453;
                            v435 = &v423;
                            LODWORD(v436) = (v453[0] != 70) | 2;
                            if (v32 != v426)
                            {
                              v321 = v32[17];
                              if ((v321 & 0x8000000000000000) == 0)
                              {
                                v322 = v321 + 1;
                                do
                                {
                                  sub_223EC2D3C((uint64_t)&v431);
                                  --v322;
                                }
                                while (v322);
                              }
                              v323 = v32;
                              v324 = v32 + 24;
                              if (v32 + 24 != v402)
                              {
                                while (1)
                                {
                                  v393 = v324;
                                  v395 = v323;
                                  if (v323[16] != v323[40])
                                    break;
                                  v325 = v323[17];
                                  v326 = v323[41];
                                  if (v325 != v326)
                                  {
                                    v327 = (int)v436;
                                    if ((~(_DWORD)v436 & 6) == 0)
                                    {
LABEL_889:
                                      if (v325 + 1 < v326)
                                      {
                                        v373 = ~v325 + v326;
                                        do
                                        {
                                          sub_223EC2D3C((uint64_t)&v431);
                                          --v373;
                                        }
                                        while (v373);
                                      }
                                      goto LABEL_892;
                                    }
                                    LOBYTE(v328) = 0;
                                    LOBYTE(v329) = 0;
                                    v330 = v395;
                                    do
                                    {
                                      v331 = *((_DWORD *)v330 + 8);
                                      if (v331 != 1)
                                      {
                                        if (v331 != 2 || *((_DWORD *)v330 + 28) != 2)
                                          goto LABEL_889;
                                        if (v330 == v395)
                                          goto LABEL_757;
                                        v330 += 24;
                                        while (1)
                                        {
                                          v329 = *((_DWORD *)v330 + 8);
                                          if (v329 != 2)
                                            break;
                                          if (*((_DWORD *)v330 + 28) != 2)
                                            goto LABEL_889;
                                          v16 = v330 == v395;
                                          v330 += 24;
                                          if (v16)
                                            goto LABEL_757;
                                        }
                                        if (v329 != 1)
                                          goto LABEL_889;
                                      }
                                      v328 = *((_DWORD *)v330 + 28);
                                      if (v328 != 1)
                                        goto LABEL_889;
                                      v16 = v330 == v395;
                                      v330 += 24;
                                    }
                                    while (!v16);
                                    if ((v329 & 1) == 0)
                                      goto LABEL_760;
                                    LOBYTE(v328) = 1;
LABEL_757:
                                    v332 = v434;
                                    if (*(unsigned __int8 *)v434 - 58 > 0xFFFFFFF7)
                                    {
                                      if (*(unsigned __int8 *)(v434 + 1) - 58 > 0xFFFFFFF6)
                                      {
LABEL_759:
                                        *(_BYTE *)(v332 + 9) = 1;
                                        v327 |= 5u;
                                        if ((v328 & 1) != 0)
                                          goto LABEL_760;
                                        goto LABEL_886;
                                      }
                                    }
                                    else
                                    {
                                      *(_BYTE *)v434 = 50;
                                      if (*(unsigned __int8 *)(v332 + 1) - 58 > 0xFFFFFFF6)
                                        goto LABEL_759;
                                    }
                                    *(_BYTE *)(v332 + 1) = 49;
                                    *(_BYTE *)(v332 + 9) = 1;
                                    v327 |= 5u;
                                    if ((v328 & 1) != 0)
                                    {
LABEL_760:
                                      LODWORD(v436) = v327 | 2;
                                      if ((v327 | 2) != 7)
                                        goto LABEL_761;
LABEL_887:
                                      v333 = 1;
LABEL_888:
                                      LOBYTE(v433) = v333;
                                      v325 = v395[17];
                                      v326 = v395[41];
                                      goto LABEL_889;
                                    }
LABEL_886:
                                    LODWORD(v436) = v327;
                                    if (v327 != 7)
                                    {
LABEL_761:
                                      v333 = *(_BYTE *)(v434 + 9) != 0;
                                      goto LABEL_888;
                                    }
                                    goto LABEL_887;
                                  }
LABEL_892:
                                  a1 = v416;
                                  if ((_BYTE)v433)
                                    goto LABEL_927;
                                  v374 = v393;
                                  v323 = v395 + 24;
                                  v324 = v393 + 24;
                                  if (v393 + 24 == v402)
                                  {
                                    v375 = (int)v436;
                                    if ((~(_DWORD)v436 & 6) == 0)
                                      goto LABEL_923;
LABEL_897:
                                    if (v323 == v402)
                                      goto LABEL_919;
                                    v376 = v323;
                                    LOBYTE(v377) = 0;
                                    LOBYTE(v378) = 0;
                                    do
                                    {
                                      v379 = *((_DWORD *)v376 + 8);
                                      if (v379 != 1)
                                      {
                                        if (v379 != 2 || *((_DWORD *)v376 + 28) != 2)
                                          goto LABEL_923;
                                        if (v376 == v374)
                                          goto LABEL_915;
                                        v376 += 24;
                                        while (1)
                                        {
                                          v378 = *((_DWORD *)v376 + 8);
                                          if (v378 != 2)
                                            break;
                                          if (*((_DWORD *)v376 + 28) != 2)
                                            goto LABEL_923;
                                          v16 = v376 == v374;
                                          v376 += 24;
                                          if (v16)
                                            goto LABEL_915;
                                        }
                                        if (v378 != 1)
                                          goto LABEL_923;
                                      }
                                      v377 = *((_DWORD *)v376 + 28);
                                      if (v377 != 1)
                                        goto LABEL_923;
                                      v16 = v376 == v374;
                                      v376 += 24;
                                    }
                                    while (!v16);
                                    if ((v378 & 1) != 0)
                                    {
                                      LOBYTE(v377) = 1;
LABEL_915:
                                      v380 = v434;
                                      if (*(unsigned __int8 *)v434 - 58 > 0xFFFFFFF7)
                                      {
                                        if (*(unsigned __int8 *)(v434 + 1) - 58 > 0xFFFFFFF6)
                                          goto LABEL_917;
                                      }
                                      else
                                      {
                                        *(_BYTE *)v434 = 50;
                                        if (*(unsigned __int8 *)(v380 + 1) - 58 > 0xFFFFFFF6)
                                        {
LABEL_917:
                                          *(_BYTE *)(v380 + 9) = 1;
                                          v375 |= 5u;
                                          LODWORD(v436) = v375;
                                          if ((v377 & 1) == 0)
                                            goto LABEL_919;
                                          goto LABEL_918;
                                        }
                                      }
                                      *(_BYTE *)(v380 + 1) = 49;
                                      *(_BYTE *)(v380 + 9) = 1;
                                      v375 |= 5u;
                                      LODWORD(v436) = v375;
                                      if ((v377 & 1) == 0)
                                      {
LABEL_919:
                                        v381 = v375 == 7 || *(_BYTE *)(v434 + 9) != 0;
                                        LOBYTE(v433) = v381;
                                        goto LABEL_923;
                                      }
                                    }
LABEL_918:
                                    v375 |= 2u;
                                    LODWORD(v436) = v375;
                                    goto LABEL_919;
                                  }
                                }
                                v334 = (int)v436;
                                if ((~(_DWORD)v436 & 6) != 0)
                                {
                                  LOBYTE(v335) = 0;
                                  LOBYTE(v336) = 0;
                                  v337 = v323;
                                  do
                                  {
                                    v338 = *((_DWORD *)v337 + 8);
                                    if (v338 != 1)
                                    {
                                      if (v338 != 2 || *((_DWORD *)v337 + 28) != 2)
                                        goto LABEL_790;
                                      if (v337 == v323)
                                        goto LABEL_780;
                                      v337 += 24;
                                      while (1)
                                      {
                                        v336 = *((_DWORD *)v337 + 8);
                                        if (v336 != 2)
                                          break;
                                        if (*((_DWORD *)v337 + 28) != 2)
                                          goto LABEL_790;
                                        v16 = v337 == v323;
                                        v337 += 24;
                                        if (v16)
                                          goto LABEL_780;
                                      }
                                      if (v336 != 1)
                                        goto LABEL_790;
                                    }
                                    v335 = *((_DWORD *)v337 + 28);
                                    if (v335 != 1)
                                      goto LABEL_790;
                                    v16 = v337 == v323;
                                    v337 += 24;
                                  }
                                  while (!v16);
                                  if ((v336 & 1) == 0)
                                    goto LABEL_783;
                                  LOBYTE(v335) = 1;
LABEL_780:
                                  v339 = v434;
                                  if (*(unsigned __int8 *)v434 - 58 > 0xFFFFFFF7)
                                  {
                                    if (*(unsigned __int8 *)(v434 + 1) - 58 <= 0xFFFFFFF6)
                                      goto LABEL_786;
LABEL_782:
                                    *(_BYTE *)(v339 + 9) = 1;
                                    v334 |= 5u;
                                    if ((v335 & 1) != 0)
                                      goto LABEL_783;
LABEL_787:
                                    LODWORD(v436) = v334;
                                    if (v334 != 7)
                                    {
LABEL_784:
                                      v340 = *(_BYTE *)(v434 + 9) != 0;
                                      goto LABEL_789;
                                    }
                                  }
                                  else
                                  {
                                    *(_BYTE *)v434 = 50;
                                    if (*(unsigned __int8 *)(v339 + 1) - 58 > 0xFFFFFFF6)
                                      goto LABEL_782;
LABEL_786:
                                    *(_BYTE *)(v339 + 1) = 49;
                                    *(_BYTE *)(v339 + 9) = 1;
                                    v334 |= 5u;
                                    if ((v335 & 1) == 0)
                                      goto LABEL_787;
LABEL_783:
                                    v334 |= 2u;
                                    LODWORD(v436) = v334;
                                    if (v334 != 7)
                                      goto LABEL_784;
                                  }
                                  v340 = 1;
LABEL_789:
                                  LOBYTE(v433) = v340;
                                }
LABEL_790:
                                v341 = v323[17];
                                if (v341 <= -2)
                                {
                                  if (v334 == 7)
                                    goto LABEL_892;
                                  v342 = v334;
                                  while (2)
                                  {
                                    if (v342 == 7)
                                      goto LABEL_795;
                                    v414 = (float *)*v431;
                                    if (*v431 == v431[1])
                                      goto LABEL_795;
                                    v344 = (float *)*v432;
                                    v345 = (float *)v432[1];
                                    v346 = (char *)v345 - (_BYTE *)*v432;
                                    if ((unint64_t)v346 < 0x18)
                                      goto LABEL_828;
                                    v347 = v346 >> 3;
                                    if (v345 == v344)
                                      v348 = 0;
                                    else
                                      v348 = v347 + 1;
                                    v445.i32[0] = 0;
                                    v445.i8[4] = 0;
                                    v349 = v348 - 1;
                                    if (v348 >= v347)
                                    {
                                      v350 = v345;
                                      if (v349 <= v347)
                                        v350 = &v344[2 * (v349 % v347)];
                                    }
                                    else
                                    {
                                      v350 = v345 - 2;
                                    }
                                    if (v348 == 1)
                                      goto LABEL_827;
                                    v407 = v344;
                                    v351 = v345;
                                    do
                                    {
                                      if (v349 + 1 >= v347)
                                      {
                                        v352 = v345;
                                        if (v349 <= v347)
                                          v352 = &v407[2 * (v349 % v347)];
                                      }
                                      else
                                      {
                                        v352 = v351 - 2;
                                      }
                                      v353 = v349 - 1;
                                      if (v349 >= v347)
                                      {
                                        v354 = v345;
                                        if (v353 <= v347)
                                          v354 = &v407[2 * (v353 % v347)];
                                      }
                                      else
                                      {
                                        v354 = v350 - 2;
                                      }
                                      if (!sub_2233E62E4(v414, v352, v354, (uint64_t)&v445))
                                        break;
                                      if (v349 + 1 >= v347)
                                      {
                                        v351 = v345;
                                        if (v349 <= v347)
                                          v351 = &v407[2 * (v349 % v347)];
                                      }
                                      else
                                      {
                                        v351 -= 2;
                                      }
                                      if (v349 < v347)
                                      {
                                        v350 -= 2;
                                      }
                                      else
                                      {
                                        v350 = v345;
                                        if (v353 <= v347)
                                          v350 = &v407[2 * (v353 % v347)];
                                      }
                                      --v349;
                                    }
                                    while (v353);
                                    if (v445.i8[4])
                                    {
LABEL_827:
                                      v31 = v403;
                                      goto LABEL_828;
                                    }
                                    v31 = v403;
                                    if (v445.i32[0])
                                    {
                                      v355 = v434;
                                      if (*(unsigned __int8 *)v434 - 58 <= 0xFFFFFFF7)
                                        *(_BYTE *)v434 = 50;
                                      v356 = (int)v436;
                                      if (*(unsigned __int8 *)(v355 + 1) - 58 <= 0xFFFFFFF6)
                                        *(_BYTE *)(v355 + 1) = 49;
                                      *(_BYTE *)(v355 + 9) = 1;
                                      v334 = v356 | 5;
                                      LODWORD(v436) = v356 | 5;
                                      if ((v356 | 5) == 7)
                                      {
LABEL_829:
                                        v343 = 1;
LABEL_794:
                                        LOBYTE(v433) = v343;
                                        v342 = v334;
LABEL_795:
                                        if (++v341 == -1)
                                          goto LABEL_837;
                                        continue;
                                      }
                                    }
                                    else
                                    {
LABEL_828:
                                      v334 = v436 | 2;
                                      LODWORD(v436) = v334;
                                      if (v334 == 7)
                                        goto LABEL_829;
                                    }
                                    break;
                                  }
                                  v343 = *(_BYTE *)(v434 + 9) != 0;
                                  goto LABEL_794;
                                }
LABEL_837:
                                v357 = v395[41];
                                if (v357 < 0 || v334 == 7)
                                  goto LABEL_892;
                                v358 = -1;
                                v387 = v395[41];
                                while (2)
                                {
                                  if (v334 == 7)
                                    goto LABEL_842;
                                  v415 = (float *)*v431;
                                  if (*v431 == v431[1])
                                    goto LABEL_842;
                                  v360 = (float *)*v432;
                                  v361 = (float *)v432[1];
                                  v362 = (char *)v361 - (_BYTE *)*v432;
                                  if ((unint64_t)v362 < 0x18)
                                    goto LABEL_875;
                                  v363 = v362 >> 3;
                                  if (v361 == v360)
                                    v364 = 0;
                                  else
                                    v364 = v363 + 1;
                                  v445.i32[0] = 0;
                                  v445.i8[4] = 0;
                                  v365 = v364 - 1;
                                  if (v364 >= v363)
                                  {
                                    v366 = v361;
                                    if (v365 <= v363)
                                      v366 = &v360[2 * (v365 % v363)];
                                  }
                                  else
                                  {
                                    v366 = v361 - 2;
                                  }
                                  if (v364 == 1)
                                    goto LABEL_874;
                                  v408 = v360;
                                  v367 = v361;
                                  do
                                  {
                                    if (v365 + 1 >= v363)
                                    {
                                      v368 = v361;
                                      if (v365 <= v363)
                                        v368 = &v408[2 * (v365 % v363)];
                                    }
                                    else
                                    {
                                      v368 = v367 - 2;
                                    }
                                    v369 = v365 - 1;
                                    if (v365 >= v363)
                                    {
                                      v370 = v361;
                                      if (v369 <= v363)
                                        v370 = &v408[2 * (v369 % v363)];
                                    }
                                    else
                                    {
                                      v370 = v366 - 2;
                                    }
                                    if (!sub_2233E62E4(v415, v368, v370, (uint64_t)&v445))
                                      break;
                                    if (v365 + 1 >= v363)
                                    {
                                      v367 = v361;
                                      if (v365 <= v363)
                                        v367 = &v408[2 * (v365 % v363)];
                                    }
                                    else
                                    {
                                      v367 -= 2;
                                    }
                                    if (v365 < v363)
                                    {
                                      v366 -= 2;
                                    }
                                    else
                                    {
                                      v366 = v361;
                                      if (v369 <= v363)
                                        v366 = &v408[2 * (v369 % v363)];
                                    }
                                    --v365;
                                  }
                                  while (v369);
                                  v357 = v387;
                                  if (v445.i8[4])
                                  {
LABEL_874:
                                    v31 = v403;
                                    goto LABEL_875;
                                  }
                                  v31 = v403;
                                  if (v445.i32[0])
                                  {
                                    v371 = v434;
                                    if (*(unsigned __int8 *)v434 - 58 <= 0xFFFFFFF7)
                                      *(_BYTE *)v434 = 50;
                                    v372 = (int)v436;
                                    if (*(unsigned __int8 *)(v371 + 1) - 58 <= 0xFFFFFFF6)
                                      *(_BYTE *)(v371 + 1) = 49;
                                    *(_BYTE *)(v371 + 9) = 1;
                                    v334 = v372 | 5;
                                    LODWORD(v436) = v372 | 5;
                                    if ((v372 | 5) == 7)
                                    {
LABEL_876:
                                      v359 = 1;
LABEL_841:
                                      LOBYTE(v433) = v359;
LABEL_842:
                                      if (++v358 == v357)
                                        goto LABEL_892;
                                      continue;
                                    }
                                  }
                                  else
                                  {
LABEL_875:
                                    v334 = v436 | 2;
                                    LODWORD(v436) = v334;
                                    if (v334 == 7)
                                      goto LABEL_876;
                                  }
                                  break;
                                }
                                v359 = *(_BYTE *)(v434 + 9) != 0;
                                goto LABEL_841;
                              }
                              v374 = v32;
                              v375 = (int)v436;
                              if ((~(_DWORD)v436 & 6) != 0)
                                goto LABEL_897;
LABEL_923:
                              v382 = v323[17];
                              if (v382 <= -2)
                              {
                                v383 = v382 + 1;
                                do
                                {
                                  sub_223EC2D3C((uint64_t)&v431);
                                  v280 = __CFADD__(v383++, 1);
                                }
                                while (!v280);
                              }
                            }
LABEL_927:
                            v32 = (uint64_t *)v425;
                            goto LABEL_46;
                          }
                        }
                        if (v292 == 2)
                          goto LABEL_651;
                      }
                      break;
                    }
                    v286 = 0;
                    if (v292 == 1)
                      goto LABEL_716;
                    goto LABEL_650;
                  }
                  break;
                }
                v203 = (int)v436;
                if ((~(_DWORD)v436 & 6) != 0)
                {
                  LOBYTE(v204) = 0;
                  LOBYTE(v205) = 0;
                  v206 = v191;
                  do
                  {
                    v207 = *((_DWORD *)v206 + 8);
                    if (v207 != 1)
                    {
                      if (v207 != 2 || *((_DWORD *)v206 + 28) != 2)
                        goto LABEL_382;
                      if (v206 == v191)
                        goto LABEL_372;
                      v206 += 24;
                      while (1)
                      {
                        v205 = *((_DWORD *)v206 + 8);
                        if (v205 != 2)
                          break;
                        if (*((_DWORD *)v206 + 28) != 2)
                          goto LABEL_382;
                        v16 = v206 == v191;
                        v206 += 24;
                        if (v16)
                          goto LABEL_372;
                      }
                      if (v205 != 1)
                        goto LABEL_382;
                    }
                    v204 = *((_DWORD *)v206 + 28);
                    if (v204 != 1)
                      goto LABEL_382;
                    v16 = v206 == v191;
                    v206 += 24;
                  }
                  while (!v16);
                  if ((v205 & 1) == 0)
                  {
                    v208 = v434;
                    *(_BYTE *)(v434 + 9) = 1;
                    v203 |= 2u;
                    LODWORD(v436) = v203;
                    if (v203 != 7)
                      goto LABEL_376;
                    goto LABEL_380;
                  }
                  LOBYTE(v204) = 1;
LABEL_372:
                  v208 = v434;
                  if (*(unsigned __int8 *)v434 - 58 > 0xFFFFFFF7)
                  {
                    if (*(unsigned __int8 *)(v434 + 3) - 58 <= 0xFFFFFFF6)
                      goto LABEL_378;
LABEL_374:
                    v203 |= 5u;
                    LODWORD(v436) = v203;
                    if ((v204 & 1) != 0)
                      goto LABEL_375;
LABEL_379:
                    if (v203 == 7)
                      goto LABEL_380;
LABEL_376:
                    v209 = *(_BYTE *)(v208 + 9) != 0;
                  }
                  else
                  {
                    *(_BYTE *)v434 = 50;
                    if (*(unsigned __int8 *)(v208 + 3) - 58 > 0xFFFFFFF6)
                      goto LABEL_374;
LABEL_378:
                    *(_BYTE *)(v208 + 3) = 49;
                    v203 |= 5u;
                    LODWORD(v436) = v203;
                    if ((v204 & 1) == 0)
                      goto LABEL_379;
LABEL_375:
                    *(_BYTE *)(v208 + 9) = 1;
                    v203 |= 2u;
                    LODWORD(v436) = v203;
                    if (v203 != 7)
                      goto LABEL_376;
LABEL_380:
                    v209 = 1;
                  }
                  LOBYTE(v433) = v209;
                }
LABEL_382:
                v210 = v191[7];
                if (v210 <= -2)
                {
                  if (v203 == 7)
                    goto LABEL_525;
                  v211 = v203;
                  v390 = v193;
                  while (2)
                  {
                    if (v211 == 7)
                      goto LABEL_387;
                    v411 = (float *)*v431;
                    if (*v431 == v431[1])
                      goto LABEL_387;
                    v213 = (float *)*v432;
                    v214 = (float *)v432[1];
                    v215 = (char *)v214 - (_BYTE *)*v432;
                    if ((unint64_t)v215 < 0x18)
                      goto LABEL_419;
                    v216 = v215 >> 3;
                    v217 = v214 == v213 ? 0 : v216 + 1;
                    v445.i32[0] = 0;
                    v445.i8[4] = 0;
                    v218 = v217 - 1;
                    if (v217 >= v216)
                    {
                      v219 = v214;
                      if (v218 <= v216)
                        v219 = &v213[2 * (v218 % v216)];
                    }
                    else
                    {
                      v219 = v214 - 2;
                    }
                    if (v217 == 1)
                      goto LABEL_419;
                    v404 = v213;
                    v220 = v214;
                    do
                    {
                      if (v218 + 1 >= v216)
                      {
                        v221 = v214;
                        if (v218 <= v216)
                          v221 = &v404[2 * (v218 % v216)];
                      }
                      else
                      {
                        v221 = v220 - 2;
                      }
                      v222 = v218 - 1;
                      if (v218 >= v216)
                      {
                        v223 = v214;
                        if (v222 <= v216)
                          v223 = &v404[2 * (v222 % v216)];
                      }
                      else
                      {
                        v223 = v219 - 2;
                      }
                      if (!sub_2233E62E4(v411, v221, v223, (uint64_t)&v445))
                        break;
                      if (v218 + 1 >= v216)
                      {
                        v220 = v214;
                        if (v218 <= v216)
                          v220 = &v404[2 * (v218 % v216)];
                      }
                      else
                      {
                        v220 -= 2;
                      }
                      if (v218 < v216)
                      {
                        v219 -= 2;
                      }
                      else
                      {
                        v219 = v214;
                        if (v222 <= v216)
                          v219 = &v404[2 * (v222 % v216)];
                      }
                      --v218;
                    }
                    while (v222);
                    v193 = v390;
                    if (v445.i8[4] || !v445.i32[0])
                    {
LABEL_419:
                      v224 = v434;
                      *(_BYTE *)(v434 + 9) = 1;
                      v203 = v436 | 2;
                      LODWORD(v436) = v203;
                      if (v203 == 7)
                        goto LABEL_420;
                    }
                    else
                    {
                      v224 = v434;
                      if (*(unsigned __int8 *)v434 - 58 <= 0xFFFFFFF7)
                        *(_BYTE *)v434 = 50;
                      v225 = (int)v436;
                      if (*(unsigned __int8 *)(v224 + 3) - 58 <= 0xFFFFFFF6)
                        *(_BYTE *)(v224 + 3) = 49;
                      v203 = v225 | 5;
                      LODWORD(v436) = v203;
                      if (v203 == 7)
                      {
LABEL_420:
                        v212 = 1;
LABEL_386:
                        LOBYTE(v433) = v212;
                        v211 = v203;
LABEL_387:
                        if (++v210 == -1)
                          goto LABEL_428;
                        continue;
                      }
                    }
                    break;
                  }
                  v212 = *(_BYTE *)(v224 + 9) != 0;
                  goto LABEL_386;
                }
LABEL_428:
                v226 = v394[31];
                if (v226 < 0 || v203 == 7)
                  goto LABEL_525;
                v227 = -1;
                v391 = v193;
                v385 = v394[31];
                while (2)
                {
                  if (v203 == 7)
                    goto LABEL_433;
                  v412 = (float *)*v431;
                  if (*v431 == v431[1])
                    goto LABEL_433;
                  v229 = (float *)*v432;
                  v230 = (float *)v432[1];
                  v231 = (char *)v230 - (_BYTE *)*v432;
                  if ((unint64_t)v231 < 0x18)
                    goto LABEL_465;
                  v232 = v231 >> 3;
                  v233 = v230 == v229 ? 0 : v232 + 1;
                  v445.i32[0] = 0;
                  v445.i8[4] = 0;
                  v234 = v233 - 1;
                  if (v233 >= v232)
                  {
                    v235 = v230;
                    if (v234 <= v232)
                      v235 = &v229[2 * (v234 % v232)];
                  }
                  else
                  {
                    v235 = v230 - 2;
                  }
                  if (v233 == 1)
                    goto LABEL_465;
                  v405 = v229;
                  v236 = v230;
                  do
                  {
                    if (v234 + 1 >= v232)
                    {
                      v237 = v230;
                      if (v234 <= v232)
                        v237 = &v405[2 * (v234 % v232)];
                    }
                    else
                    {
                      v237 = v236 - 2;
                    }
                    v238 = v234 - 1;
                    if (v234 >= v232)
                    {
                      v239 = v230;
                      if (v238 <= v232)
                        v239 = &v405[2 * (v238 % v232)];
                    }
                    else
                    {
                      v239 = v235 - 2;
                    }
                    if (!sub_2233E62E4(v412, v237, v239, (uint64_t)&v445))
                      break;
                    if (v234 + 1 >= v232)
                    {
                      v236 = v230;
                      if (v234 <= v232)
                        v236 = &v405[2 * (v234 % v232)];
                    }
                    else
                    {
                      v236 -= 2;
                    }
                    if (v234 < v232)
                    {
                      v235 -= 2;
                    }
                    else
                    {
                      v235 = v230;
                      if (v238 <= v232)
                        v235 = &v405[2 * (v238 % v232)];
                    }
                    --v234;
                  }
                  while (v238);
                  v193 = v391;
                  v226 = v385;
                  if (v445.i8[4] || !v445.i32[0])
                  {
LABEL_465:
                    v240 = v434;
                    *(_BYTE *)(v434 + 9) = 1;
                    v203 = v436 | 2;
                    LODWORD(v436) = v203;
                    if (v203 == 7)
                      goto LABEL_466;
                  }
                  else
                  {
                    v240 = v434;
                    if (*(unsigned __int8 *)v434 - 58 <= 0xFFFFFFF7)
                      *(_BYTE *)v434 = 50;
                    v241 = (int)v436;
                    if (*(unsigned __int8 *)(v240 + 3) - 58 <= 0xFFFFFFF6)
                      *(_BYTE *)(v240 + 3) = 49;
                    v203 = v241 | 5;
                    LODWORD(v436) = v203;
                    if (v203 == 7)
                    {
LABEL_466:
                      v228 = 1;
LABEL_432:
                      LOBYTE(v433) = v228;
LABEL_433:
                      if (++v227 == v226)
                        goto LABEL_525;
                      continue;
                    }
                  }
                  break;
                }
                v228 = *(_BYTE *)(v240 + 9) != 0;
                goto LABEL_432;
              }
              if (!v84)
              {
LABEL_247:
                v84 = 0;
                v85 = 0;
                if (v122 == 1)
                  goto LABEL_222;
                goto LABEL_173;
              }
            }
            else
            {
LABEL_207:
              if (!v84)
                goto LABEL_247;
              if (v123 || v83[6] != v80[6] || v83[7] != v80[7])
              {
                v85 = 0;
                goto LABEL_219;
              }
            }
            break;
          }
          v85 = 0;
          v124 = v83[8];
          v125 = v80[8];
          if (v124 == v125)
            goto LABEL_214;
          goto LABEL_212;
        }
        a1 = v416;
        v31 = v403;
        if (!(_DWORD)v431)
          goto LABEL_621;
        if (v453[0] - 58 <= 0xFFFFFFF7)
          v453[0] = 50;
        if (v453[1] - 58 <= 0xFFFFFFF6)
          v453[1] = 49;
        v453[9] = 1;
        v32 = (uint64_t *)v425;
LABEL_46:
        if (v32)
        {
          v426 = v32;
          operator delete(v32);
        }
        if (!v453[9]
          && (v453[0] - 48 > 9 ? (v89 = v453[0] == 84) : (v89 = 1),
              v89 && v453[2] == 70 && v453[5] == 70
           || (v453[1] - 48 > 9 ? (v90 = v453[1] == 84) : (v90 = 1),
               v90 && v453[2] == 70 && v453[5] == 70
            || v453[2] == 70
            && (v453[3] - 48 > 9 ? (v166 = v453[3] == 84) : (v166 = 1),
                v166 && v453[5] == 70
             || (v453[4] - 48 > 9 ? (v167 = v453[4] == 84) : (v167 = 1),
                 v167 && v453[5] == 70)))))
        {
          v92 = *(char **)a2;
          v91 = *(_QWORD *)(a2 + 8);
          v93 = (float32x2_t *)v420;
          v94 = v421;
          if (v420 != v421)
          {
            v95 = *(char **)(a2 + 8);
            do
            {
              v96 = *(_QWORD *)(a2 + 16);
              if ((unint64_t)v95 < v96)
              {
                *(_DWORD *)v95 = v93->i32[0];
                *((_DWORD *)v95 + 1) = v93->i32[1];
                *((_DWORD *)v95 + 2) = 0;
                v95 += 12;
              }
              else
              {
                v97 = *(char **)a2;
                v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v95[-*(_QWORD *)a2] >> 2);
                v99 = v98 + 1;
                if (v98 + 1 > 0x1555555555555555)
                  sub_22316E078();
                v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (_QWORD)v97) >> 2);
                if (2 * v100 > v99)
                  v99 = 2 * v100;
                if (v100 >= 0xAAAAAAAAAAAAAAALL)
                  v101 = 0x1555555555555555;
                else
                  v101 = v99;
                if (v101)
                {
                  v445.i32[0] = v101;
                  v102 = *(unsigned int *)(a2 + 28);
                  if ((_DWORD)v102 == -1)
                    sub_22316DD70();
                  v431 = (void **)&v445;
                  v103 = ((uint64_t (*)(void ***, uint64_t))off_24EC63EB8[v102])(&v431, v418);
                  v97 = *(char **)a2;
                  v95 = *(char **)(a2 + 8);
                }
                else
                {
                  v103 = 0;
                  v104 = 0;
                }
                v105 = (_DWORD *)(v103 + 12 * v98);
                *v105 = v93->i32[0];
                v105[1] = v93->i32[1];
                v105[2] = 0;
                v106 = v105;
                if (v95 != v97)
                {
                  do
                  {
                    v107 = *(_QWORD *)(v95 - 12);
                    v95 -= 12;
                    v108 = *((_DWORD *)v95 + 2);
                    *(_QWORD *)(v106 - 3) = v107;
                    v106 -= 3;
                    v106[2] = v108;
                  }
                  while (v95 != v97);
                  v97 = *(char **)a2;
                }
                v95 = (char *)(v105 + 3);
                *(_QWORD *)a2 = v106;
                *(_QWORD *)(a2 + 8) = v105 + 3;
                v109 = *(_QWORD *)(a2 + 16);
                *(_QWORD *)(a2 + 16) = v103 + 12 * v104;
                if (v97)
                {
                  v431 = (void **)v97;
                  LODWORD(v432) = -1431655765 * ((unint64_t)(v109 - (_QWORD)v97) >> 2);
                  v110 = *(unsigned int *)(a2 + 28);
                  if ((_DWORD)v110 == -1)
                    sub_22316DD70();
                  v445.i64[0] = (uint64_t)&v431;
                  ((void (*)(int64x2_t *, uint64_t))off_24EC63EC8[v110])(&v445, v418);
                }
              }
              *(_QWORD *)(a2 + 8) = v95;
              ++v93;
            }
            while (v93 != v94);
          }
          v111 = -1431655765 * ((unint64_t)(v91 - (_QWORD)v92) >> 2);
          v112 = v111 + 1;
          v113 = v111 + 2;
          v114 = *(char **)(a2 + 120);
          v115 = *(_QWORD *)(a2 + 128);
          if ((unint64_t)v114 >= v115)
          {
            v150 = *v419;
            v151 = 0xAAAAAAAAAAAAAAABLL * ((v114 - *v419) >> 2);
            v152 = v151 + 1;
            if (v151 + 1 > 0x1555555555555555)
              sub_22316E078();
            v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115 - (_QWORD)v150) >> 2);
            if (2 * v153 > v152)
              v152 = 2 * v153;
            if (v153 >= 0xAAAAAAAAAAAAAAALL)
              v154 = 0x1555555555555555;
            else
              v154 = v152;
            if (v154)
            {
              v445.i32[0] = v154;
              v155 = *(unsigned int *)(a2 + 140);
              if ((_DWORD)v155 == -1)
                sub_22316DD70();
              v431 = (void **)&v445;
              v156 = ((uint64_t (*)(void ***, uint64_t))off_24EC63ED8[v155])(&v431, v417);
              a1 = v416;
              v150 = *(char **)(a2 + 112);
              v114 = *(char **)(a2 + 120);
            }
            else
            {
              v156 = 0;
              v157 = 0;
              a1 = v416;
            }
            v168 = (_DWORD *)(v156 + 12 * v151);
            *v168 = v111;
            v168[1] = v112;
            v168[2] = v113;
            v169 = v168;
            if (v114 != v150)
            {
              do
              {
                v170 = *(_QWORD *)(v114 - 12);
                v114 -= 12;
                v171 = *((_DWORD *)v114 + 2);
                *(_QWORD *)(v169 - 3) = v170;
                v169 -= 3;
                v169[2] = v171;
              }
              while (v114 != v150);
              v150 = *v419;
            }
            v115 = v156 + 12 * v157;
            v116 = (char *)(v168 + 3);
            *(_QWORD *)(a2 + 112) = v169;
            *(_QWORD *)(a2 + 120) = v168 + 3;
            v172 = *(_QWORD *)(a2 + 128);
            *(_QWORD *)(a2 + 128) = v115;
            if (v150)
            {
              v431 = (void **)v150;
              LODWORD(v432) = -1431655765 * ((unint64_t)(v172 - (_QWORD)v150) >> 2);
              v173 = *(unsigned int *)(a2 + 140);
              if ((_DWORD)v173 == -1)
                sub_22316DD70();
              v445.i64[0] = (uint64_t)&v431;
              ((void (*)(int64x2_t *, uint64_t))off_24EC63EE8[v173])(&v445, v417);
              v115 = *(_QWORD *)(a2 + 128);
            }
          }
          else
          {
            *(_DWORD *)v114 = v111;
            *((_DWORD *)v114 + 1) = v112;
            v116 = v114 + 12;
            *((_DWORD *)v114 + 2) = v113;
            a1 = v416;
          }
          *(_QWORD *)(a2 + 120) = v116;
          v174 = v111 + 3;
          if ((unint64_t)v116 < v115)
          {
            *(_DWORD *)v116 = v111;
            *((_DWORD *)v116 + 1) = v113;
            *((_DWORD *)v116 + 2) = v174;
            v31 = v403;
            *(_QWORD *)(a2 + 120) = v116 + 12;
LABEL_292:
            v34 = (float32x2_t *)v420;
            if (!v420)
              goto LABEL_22;
LABEL_293:
            v421 = v34;
            operator delete(v34);
            goto LABEL_22;
          }
          v175 = *v419;
          v176 = 0xAAAAAAAAAAAAAAABLL * ((v116 - *v419) >> 2);
          v177 = v176 + 1;
          if (v176 + 1 > 0x1555555555555555)
            sub_22316E078();
          v178 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115 - (_QWORD)v175) >> 2);
          if (2 * v178 > v177)
            v177 = 2 * v178;
          if (v178 >= 0xAAAAAAAAAAAAAAALL)
            v177 = 0x1555555555555555;
          if (v177)
          {
            v445.i32[0] = v177;
            v179 = *(unsigned int *)(a2 + 140);
            if ((_DWORD)v179 == -1)
              sub_22316DD70();
            v431 = (void **)&v445;
            v180 = ((uint64_t (*)(void ***, uint64_t))off_24EC63ED8[v179])(&v431, v417);
            v175 = *(char **)(a2 + 112);
            v116 = *(char **)(a2 + 120);
          }
          else
          {
            v180 = 0;
            v181 = 0;
          }
          v182 = (_DWORD *)(v180 + 12 * v176);
          *v182 = v111;
          v182[1] = v113;
          v182[2] = v174;
          v183 = v182;
          if (v116 == v175)
          {
            v31 = v403;
          }
          else
          {
            v31 = v403;
            do
            {
              v184 = *(_QWORD *)(v116 - 12);
              v116 -= 12;
              v185 = *((_DWORD *)v116 + 2);
              *(_QWORD *)(v183 - 3) = v184;
              v183 -= 3;
              v183[2] = v185;
            }
            while (v116 != v175);
            v175 = *v419;
          }
          v186 = v182 + 3;
          *(_QWORD *)(a2 + 112) = v183;
          *(_QWORD *)(a2 + 120) = v182 + 3;
          v187 = *(_QWORD *)(a2 + 128);
          *(_QWORD *)(a2 + 128) = v180 + 12 * v181;
          if (v175)
          {
            v431 = (void **)v175;
            LODWORD(v432) = -1431655765 * ((unint64_t)(v187 - (_QWORD)v175) >> 2);
            v188 = *(unsigned int *)(a2 + 140);
            if ((_DWORD)v188 == -1)
              sub_22316DD70();
            v445.i64[0] = (uint64_t)&v431;
            ((void (*)(int64x2_t *, uint64_t))off_24EC63EE8[v188])(&v445, v417);
          }
          *(_QWORD *)(a2 + 120) = v186;
          v34 = (float32x2_t *)v420;
          if (v420)
            goto LABEL_293;
        }
        else
        {
          if (sub_2233FF54C((float **)&v420, (uint64_t **)a1, (uint64_t)&v431))
            goto LABEL_292;
          v445 = 0uLL;
          *(_QWORD *)&v446 = 0;
          sub_2233EB9D0((float32x2_t **)&v420, (float32x2_t **)a1, (uint64_t)&v431);
          sub_22367C92C((float **)&v420, (float **)a1, &v431, (uint64_t)&v445, &v451, &v428);
          v410 = (uint64_t *)v445.i64[1];
          v33 = (uint64_t *)v445.i64[0];
          if (v445.i64[0] == v445.i64[1])
          {
            if (!v445.i64[0])
              goto LABEL_52;
          }
          else
          {
            do
            {
              v36 = *(char **)a2;
              v35 = *(_QWORD *)(a2 + 8);
              v37 = (_DWORD *)*v33;
              v38 = (_DWORD *)v33[1];
              if ((_DWORD *)*v33 != v38)
              {
                v39 = *(char **)(a2 + 8);
                do
                {
                  v40 = *(_QWORD *)(a2 + 16);
                  if ((unint64_t)v39 < v40)
                  {
                    *(_DWORD *)v39 = *v37;
                    *((_DWORD *)v39 + 1) = v37[1];
                    *((_DWORD *)v39 + 2) = 0;
                    v39 += 12;
                  }
                  else
                  {
                    v41 = *(char **)a2;
                    v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v39[-*(_QWORD *)a2] >> 2);
                    v43 = v42 + 1;
                    if (v42 + 1 > 0x1555555555555555)
                      sub_22316E078();
                    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)v41) >> 2);
                    if (2 * v44 > v43)
                      v43 = 2 * v44;
                    if (v44 >= 0xAAAAAAAAAAAAAAALL)
                      v45 = 0x1555555555555555;
                    else
                      v45 = v43;
                    if (v45)
                    {
                      LODWORD(v428) = v45;
                      v46 = *(unsigned int *)(a2 + 28);
                      if ((_DWORD)v46 == -1)
                        sub_22316DD70();
                      v431 = (void **)&v428;
                      v47 = ((uint64_t (*)(void ***, uint64_t))off_24EC63EB8[v46])(&v431, v418);
                      v41 = *(char **)a2;
                      v39 = *(char **)(a2 + 8);
                    }
                    else
                    {
                      v47 = 0;
                      v48 = 0;
                    }
                    v49 = (_DWORD *)(v47 + 12 * v42);
                    *v49 = *v37;
                    v49[1] = v37[1];
                    v49[2] = 0;
                    v50 = v49;
                    if (v39 != v41)
                    {
                      do
                      {
                        v51 = *(_QWORD *)(v39 - 12);
                        v39 -= 12;
                        v52 = *((_DWORD *)v39 + 2);
                        *(_QWORD *)(v50 - 3) = v51;
                        v50 -= 3;
                        v50[2] = v52;
                      }
                      while (v39 != v41);
                      v41 = *(char **)a2;
                    }
                    v39 = (char *)(v49 + 3);
                    *(_QWORD *)a2 = v50;
                    *(_QWORD *)(a2 + 8) = v49 + 3;
                    v53 = *(_QWORD *)(a2 + 16);
                    *(_QWORD *)(a2 + 16) = v47 + 12 * v48;
                    if (v41)
                    {
                      v431 = (void **)v41;
                      LODWORD(v432) = -1431655765 * ((unint64_t)(v53 - (_QWORD)v41) >> 2);
                      v54 = *(unsigned int *)(a2 + 28);
                      if ((_DWORD)v54 == -1)
                        sub_22316DD70();
                      v428 = (__int128 *)&v431;
                      ((void (*)(__int128 **, uint64_t))off_24EC63EC8[v54])(&v428, v418);
                    }
                  }
                  *(_QWORD *)(a2 + 8) = v39;
                  v37 += 2;
                }
                while (v37 != v38);
              }
              sub_223EBA564(v33, (char **)&v431);
              v55 = (char *)v431;
              v56 = (char *)v432;
              if (v431 != v432)
              {
                v57 = -1431655765 * ((unint64_t)(v35 - (_QWORD)v36) >> 2);
                v58 = *(char **)(a2 + 120);
                do
                {
                  v59 = *(_DWORD *)v55 + v57;
                  v60 = *((_DWORD *)v55 + 1) + v57;
                  v61 = *((_DWORD *)v55 + 2) + v57;
                  v62 = *(_QWORD *)(a2 + 128);
                  if ((unint64_t)v58 < v62)
                  {
                    *(_DWORD *)v58 = v59;
                    *((_DWORD *)v58 + 1) = v60;
                    *((_DWORD *)v58 + 2) = v61;
                    v58 += 12;
                  }
                  else
                  {
                    v63 = *v419;
                    v64 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *v419) >> 2);
                    v65 = v64 + 1;
                    if (v64 + 1 > 0x1555555555555555)
                      sub_22316E078();
                    v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (_QWORD)v63) >> 2);
                    if (2 * v66 > v65)
                      v65 = 2 * v66;
                    if (v66 >= 0xAAAAAAAAAAAAAAALL)
                      v67 = 0x1555555555555555;
                    else
                      v67 = v65;
                    if (v67)
                    {
                      LODWORD(v451) = v67;
                      v68 = *(unsigned int *)(a2 + 140);
                      if ((_DWORD)v68 == -1)
                        sub_22316DD70();
                      v428 = &v451;
                      v69 = ((uint64_t (*)(__int128 **, uint64_t))off_24EC63ED8[v68])(&v428, v417);
                      v63 = *(char **)(a2 + 112);
                      v58 = *(char **)(a2 + 120);
                    }
                    else
                    {
                      v69 = 0;
                      v70 = 0;
                    }
                    v71 = (_DWORD *)(v69 + 12 * v64);
                    *v71 = v59;
                    v71[1] = v60;
                    v71[2] = v61;
                    v72 = v71;
                    if (v58 != v63)
                    {
                      do
                      {
                        v73 = *(_QWORD *)(v58 - 12);
                        v58 -= 12;
                        v74 = *((_DWORD *)v58 + 2);
                        *(_QWORD *)(v72 - 3) = v73;
                        v72 -= 3;
                        v72[2] = v74;
                      }
                      while (v58 != v63);
                      v63 = *v419;
                    }
                    v58 = (char *)(v71 + 3);
                    *(_QWORD *)(a2 + 112) = v72;
                    *(_QWORD *)(a2 + 120) = v71 + 3;
                    v75 = *(_QWORD *)(a2 + 128);
                    *(_QWORD *)(a2 + 128) = v69 + 12 * v70;
                    if (v63)
                    {
                      v428 = (__int128 *)v63;
                      v429 = -1431655765 * ((unint64_t)(v75 - (_QWORD)v63) >> 2);
                      v76 = *(unsigned int *)(a2 + 140);
                      if ((_DWORD)v76 == -1)
                        sub_22316DD70();
                      *(_QWORD *)&v451 = &v428;
                      ((void (*)(__int128 *, uint64_t))off_24EC63EE8[v76])(&v451, v417);
                    }
                  }
                  *(_QWORD *)(a2 + 120) = v58;
                  v55 += 12;
                }
                while (v55 != v56);
                v55 = (char *)v431;
              }
              a1 = v416;
              if (v55)
                operator delete(v55);
              v33 += 3;
            }
            while (v33 != v410);
            v33 = (uint64_t *)v445.i64[0];
            if (!v445.i64[0])
            {
LABEL_52:
              v31 = v403;
              v34 = (float32x2_t *)v420;
              if (v420)
                goto LABEL_293;
              goto LABEL_22;
            }
          }
          v117 = (uint64_t *)v445.i64[1];
          v118 = v33;
          if ((uint64_t *)v445.i64[1] != v33)
          {
            v119 = (uint64_t *)v445.i64[1];
            do
            {
              v121 = (void *)*(v119 - 3);
              v119 -= 3;
              v120 = v121;
              if (v121)
              {
                *(v117 - 2) = (uint64_t)v120;
                operator delete(v120);
              }
              v117 = v119;
            }
            while (v119 != v33);
            v118 = (uint64_t *)v445.i64[0];
          }
          v445.i64[1] = (uint64_t)v33;
          operator delete(v118);
          v31 = v403;
          v34 = (float32x2_t *)v420;
          if (v420)
            goto LABEL_293;
        }
LABEL_22:
        ++v409;
      }
      while (v409 != v397);
      v17 = v31 + 1;
    }
    while (v17 != v384);
  }
}

void sub_223EBDFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p)
{
  uint64_t *v52;

  if (__p)
    operator delete(__p);
  if (a45)
    operator delete(a45);
  sub_22316F8F4(v52);
  _Unwind_Resume(a1);
}

uint64_t sub_223EBE1B8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, float *a8, unsigned __int8 a9)
{
  int v9;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  int v35;
  int v36;
  float v37;
  float v38;
  uint64_t *v39;
  float v40;
  float v41;
  float v42;
  int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  float v62;
  float v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  float v68;
  uint64_t *v69;
  int v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  unsigned __int8 *v84[3];
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  uint64_t *v88;
  float *v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned __int8 v92;
  char v93;
  _QWORD v94[2];
  _QWORD v95[2];
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  unsigned __int8 *v99;
  unsigned __int8 *v100;

  v9 = a9;
  v95[0] = a1;
  v95[1] = a2;
  v94[0] = a3;
  v94[1] = a4;
  v93 = a7;
  v92 = a9;
  if (!*(_DWORD *)(a5 + 8) || !*(_DWORD *)(a5 + 12))
  {
    LOBYTE(v96) = 0;
    LOBYTE(v97) = 0;
    return v96;
  }
  v14 = a3;
  v16 = a1;
  if (!(_DWORD)a2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonTriangulation.cpp", 206, (uint64_t)"!vertices_x.Empty()", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_57;
  }
  if ((_DWORD)a2 != (_DWORD)a4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonTriangulation.cpp", 210, (uint64_t)"num_vertices == num_vertices_y", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_57;
  }
  v17 = *(_DWORD *)(a5 + 12);
  if (*(_DWORD *)(a5 + 8) != 3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonTriangulation.cpp", 214, (uint64_t)"face_dim == 3", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_57;
  }
  LOBYTE(v96) = 0;
  LOBYTE(v97) = 0;
  v85 = v95;
  v86 = v94;
  v87 = (char *)&v92;
  v88 = &v96;
  v89 = a8;
  v90 = &v91;
  v91 = 0;
  v84[0] = (unsigned __int8 *)&v93;
  v84[1] = (unsigned __int8 *)&v91;
  v84[2] = (unsigned __int8 *)&v85;
  if (*(_BYTE *)(a6 + 16))
  {
    if (*(_DWORD *)(a6 + 8) == v17
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonTriangulation.cpp", 242, (uint64_t)"num_labels == num_faces", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      if (*(_DWORD *)(a5 + 8))
      {
        v18 = *(_DWORD *)(a5 + 12);
        if (v18)
        {
          v19 = *(unsigned int *)(a6 + 12);
          v21 = *(_DWORD *)(a5 + 16);
          v20 = *(unsigned int *)(a5 + 20);
          v22 = *(_DWORD **)a5;
          v99 = *(unsigned __int8 **)a6;
          v100 = v99;
          v98[0] = v22;
          v98[1] = v21;
          v23 = v18 - 1;
          if (v18 != 1)
          {
            v24 = 4 * v20;
            v25 = &v99[v19];
            do
            {
              sub_223EC2F60((uint64_t)v98, v84, v22, &v100);
              v100 = v25;
              v22 = (_DWORD *)((char *)v22 + v24);
              v25 += v19;
              --v23;
            }
            while (v23);
          }
          sub_223EC2F60((uint64_t)v98, v84, v22, &v100);
        }
      }
      return v96;
    }
LABEL_57:
    abort();
  }
  if (*(_DWORD *)(a5 + 8))
  {
    v27 = *(_DWORD *)(a5 + 12);
    if (v27)
    {
      v28 = *(unsigned int *)(a5 + 16);
      v29 = *(_DWORD **)a5;
      v30 = v27 - 1;
      if (v27 == 1)
      {
        v59 = HIDWORD(a2);
        v60 = HIDWORD(a4);
        v33 = &v91;
        v31 = (2 * v28);
      }
      else
      {
        v31 = (2 * v28);
        v32 = 4 * *(unsigned int *)(a5 + 20);
        v33 = &v91;
        do
        {
          v34 = *((_DWORD *)v85 + 3);
          v35 = *((_DWORD *)v86 + 3);
          v36 = v29[v31];
          v37 = *(float *)(*v85 + 4 * (v36 * v34));
          v38 = *(float *)(*v86 + 4 * (v36 * v35));
          v39 = v88;
          if (*v87)
            v40 = *(float *)(*v86 + 4 * (v35 * *v29));
          else
            v40 = v38;
          if (*v87)
            v41 = *(float *)(*v85 + 4 * (v34 * *v29));
          else
            v41 = v37;
          if (*v87)
          {
            v42 = v38;
          }
          else
          {
            v37 = *(float *)(*v85 + 4 * (v34 * *v29));
            v42 = *(float *)(*v86 + 4 * (v35 * *v29));
          }
          if (!*((_BYTE *)v88 + 8))
          {
            v43 = v29[v28];
            v44 = v37;
            v45 = v41;
            v46 = v41 + v44;
            v47 = v42;
            v48 = v40;
            v49 = v46 * (v47 - v40);
            v50 = *(float *)(*v85 + 4 * (v43 * v34));
            v51 = *(float *)(*v86 + 4 * (v43 * v35));
            v52 = (v48 - v51) * (v50 + v45);
            v53 = (v50 + v44) * (v51 - v47);
            if ((v53 + v52 + v49 + 0.0) * 0.5 > 0.0)
            {
              v54 = *v89;
              v55 = v44 + v54;
              v56 = v89[1];
              v57 = v50 + v54;
              if ((v53 + v57 * (v56 - v51) + v55 * (v47 - v56) + 0.0) * 0.5 >= 0.0)
              {
                v58 = v45 + v54;
                if ((v52 + v58 * (v56 - v48) + v57 * (v51 - v56) + 0.0) * 0.5 >= 0.0
                  && (v49 + v55 * (v56 - v47) + v58 * (v48 - v56) + 0.0) * 0.5 >= 0.0)
                {
                  *v88 = *v33;
                  *((_BYTE *)v39 + 8) = 1;
                  v33 = v90;
                }
              }
            }
          }
          ++*v33;
          v29 = (_DWORD *)((char *)v29 + v32);
          --v30;
        }
        while (v30);
        v16 = *v85;
        v14 = *v86;
        v9 = *v87;
        LODWORD(v59) = *((_DWORD *)v85 + 3);
        LODWORD(v60) = *((_DWORD *)v86 + 3);
      }
      v61 = v59 * *v29;
      v62 = *(float *)(v16 + 4 * v61);
      v63 = *(float *)(v14 + 4 * (v60 * *v29));
      v64 = v29[v31];
      v65 = v64 * v59;
      v66 = v64 * v60;
      if (v9)
        v67 = *(float *)(v14 + 4 * v66);
      else
        v67 = *(float *)(v14 + 4 * (v60 * *v29));
      if (v9)
        v68 = *(float *)(v16 + 4 * v65);
      else
        v68 = *(float *)(v16 + 4 * v61);
      if (!v9)
      {
        v63 = *(float *)(v14 + 4 * v66);
        v62 = *(float *)(v16 + 4 * v65);
      }
      v69 = v88;
      if (!*((_BYTE *)v88 + 8))
      {
        v70 = v29[v28];
        v71 = v68;
        v72 = v62;
        v73 = v68 + v72;
        v74 = v67;
        v75 = v63;
        v76 = (v74 - v63) * v73;
        v77 = *(float *)(v16 + 4 * (v70 * v59));
        v78 = *(float *)(v14 + 4 * (v70 * v60));
        v79 = (v75 - v78) * (v77 + v72);
        v80 = (v78 - v74) * (v77 + v71);
        if ((v80 + v79 + v76 + 0.0) * 0.5 > 0.0)
        {
          v81 = *v89;
          v82 = v71 + v81;
          v83 = v89[1];
          if ((v80 + (v77 + v81) * (v83 - v78) + v82 * (v74 - v83) + 0.0) * 0.5 >= 0.0
            && (v79 + (v72 + v81) * (v83 - v75) + (v77 + v81) * (v78 - v83) + 0.0) * 0.5 >= 0.0
            && (v76 + v82 * (v83 - v74) + (v72 + v81) * (v75 - v83) + 0.0) * 0.5 >= 0.0)
          {
            *v88 = *v33;
            *((_BYTE *)v69 + 8) = 1;
            v33 = v90;
          }
        }
      }
      ++*v33;
    }
  }
  return v96;
}

uint64_t sub_223EBE76C(uint64_t a1)
{
  void **v2;
  unint64_t v3;
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 96);
  v2 = *(void ***)(a1 + 104);
  v4 = *(void ***)(a1 + 112);
  if (v2 != v4)
  {
    do
    {
      v5 = *v2++;
      operator delete(v5);
    }
    while (v2 != v4);
    v2 = *(void ***)(a1 + 104);
  }
  *(_QWORD *)(a1 + 112) = v2;
  if (v3 <= 1)
    v6 = 1;
  else
    v6 = v3;
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    operator delete(v2);
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_223EBE7E8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int32 v6;
  float64x2_t v7;
  int8x16_t v8;
  int8x8_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  signed int v50;
  double v51;
  double v52;
  uint64_t k;
  double v54;
  double v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  signed int v60;
  double v61;
  double v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _DWORD *v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  _DWORD *v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  _DWORD *v111;
  int64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t i;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  double v140;
  double v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  _DWORD *v169;
  int64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  _OWORD *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  int v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  _DWORD *v188;
  int64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  _OWORD *v194;
  char *v195;
  uint64_t v196;
  __int128 v197;
  int v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  _DWORD *v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  _OWORD *v213;
  char *v214;
  uint64_t v215;
  __int128 v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t j;
  uint64_t v226;
  double v227;
  double v228;
  double v229;
  double v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  double v238;
  double v239;
  double v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  uint64_t v244;
  float64x2_t v245;

  if (a2)
  {
    v3 = 0;
    v245 = (float64x2_t)vdupq_n_s64(0x40DFFFC000000000uLL);
LABEL_3:
    if (!v3 && *(_BYTE *)(a1 + 32))
    {
      v4 = a2;
      do
      {
        v6 = *(_DWORD *)(v4 + 40);
        if (!v6)
        {
          v7.f64[0] = *(float64_t *)(a1 + 40);
          v7.f64[1] = *(float64_t *)(a1 + 56);
          v8 = (int8x16_t)vmulq_n_f64(vmulq_f64(vsubq_f64(*(float64x2_t *)(v4 + 8), v7), v245), *(double *)(a1 + 72));
          *(int32x2_t *)v8.i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vextq_s8(v8, v8, 8uLL)));
          v8.i64[0] = *(_QWORD *)&vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v8.i8, 8uLL), *(int8x8_t *)v8.i8) & 0xFF00FF00FF00FFLL;
          v8.i64[0] = *(_QWORD *)&vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v8.i8, 4uLL), *(int8x8_t *)v8.i8) & 0xFF0FFF0FFF0FFF0FLL;
          *(int8x8_t *)v8.i8 = vand_s8(vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v8.i8, 2uLL), *(int8x8_t *)v8.i8), (int8x8_t)0x3333333333333333);
          v9 = (int8x8_t)vshl_u32(*(uint32x2_t *)v8.i8, (uint32x2_t)0x100000002);
          v8.i32[0] *= 2;
          *(int8x8_t *)v8.i8 = vand_s8(vorr_s8(v9, *(int8x8_t *)v8.i8), (int8x8_t)0x55555555AAAAAAAALL);
          v6 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
        }
        *(_DWORD *)(v4 + 40) = v6;
        v5 = *(_QWORD *)(v4 + 32);
        *(_QWORD *)(v4 + 48) = *(_QWORD *)(v4 + 24);
        *(_QWORD *)(v4 + 56) = v5;
        v4 = v5;
      }
      while (v5 != a2);
      *(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v10 = 1;
      v11 = a2;
LABEL_11:
      v12 = 0;
      v13 = 0;
      v14 = v11;
      v11 = 0;
LABEL_13:
      v15 = 0;
      v16 = v12++;
      v17 = v14;
      do
      {
        ++v15;
        v17 = *(_QWORD *)(v17 + 56);
        if (!v17)
          goto LABEL_17;
      }
      while (v10 != v15);
      v15 = v10;
LABEL_17:
      v18 = v14;
      v14 = v17;
      v19 = v10;
      while (1)
      {
        if (v15 > 0)
          goto LABEL_27;
        if (v19 < 1 || !v14)
        {
          if (v14)
            goto LABEL_13;
          *(_QWORD *)(v13 + 56) = 0;
          v10 *= 2;
          if (!v16)
            goto LABEL_33;
          goto LABEL_11;
        }
        if (v15)
        {
LABEL_27:
          if (!v19 || !v14 || *(_DWORD *)(v18 + 40) <= *(_DWORD *)(v14 + 40))
          {
            v20 = *(_QWORD *)(v18 + 56);
            --v15;
            v21 = v14;
            v22 = v18;
            v23 = v18;
            if (!v13)
              goto LABEL_20;
LABEL_19:
            *(_QWORD *)(v13 + 56) = v22;
            v23 = v11;
            goto LABEL_20;
          }
          v21 = *(_QWORD *)(v14 + 56);
          --v19;
          v20 = v18;
          v22 = v14;
          v23 = v14;
          if (v13)
            goto LABEL_19;
        }
        else
        {
          v21 = *(_QWORD *)(v14 + 56);
          v20 = v18;
          v22 = v14;
          --v19;
          v23 = v14;
          if (v13)
            goto LABEL_19;
        }
LABEL_20:
        *(_QWORD *)(v22 + 48) = v13;
        v11 = v23;
        v18 = v20;
        v14 = v21;
        v13 = v22;
      }
    }
    while (1)
    {
LABEL_33:
      v24 = a2;
      while (1)
      {
        v25 = v24;
        v26 = *(_QWORD *)(v24 + 24);
        v24 = *(_QWORD *)(v24 + 32);
        if (v26 == v24)
          return;
        v27 = (double *)(v25 + 16);
        v28 = *(double *)(v25 + 16);
        v29 = *(double *)(v26 + 16);
        v30 = (double *)(v24 + 8);
        v31 = *(double *)(v24 + 8);
        v32 = *(double *)(v25 + 8);
        v33 = *(double *)(v26 + 8);
        v34 = *(double *)(v24 + 16);
        v35 = (v28 - v29) * (v31 - v32) - (v32 - v33) * (v34 - v28);
        if (!*(_BYTE *)(a1 + 32))
          break;
        if (v35 < 0.0)
        {
          if (v31 >= v32)
            v36 = *(double *)(v25 + 8);
          else
            v36 = *(double *)(v24 + 8);
          if (v31 >= v32)
            v37 = (double *)(v25 + 8);
          else
            v37 = (double *)(v24 + 8);
          if (v36 >= v33)
            v37 = (double *)(v26 + 8);
          v38 = *v37;
          if (v34 >= v28)
            v39 = *(double *)(v25 + 16);
          else
            v39 = *(double *)(v24 + 16);
          if (v34 >= v28)
            v40 = (double *)(v25 + 16);
          else
            v40 = (double *)(v24 + 16);
          if (v39 >= v29)
            v40 = (double *)(v26 + 16);
          if (v32 >= v31)
            v41 = *(double *)(v25 + 8);
          else
            v41 = *(double *)(v24 + 8);
          if (v32 >= v31)
            v30 = (double *)(v25 + 8);
          if (v33 >= v41)
            v30 = (double *)(v26 + 8);
          if (v28 < v34)
            v27 = (double *)(v24 + 16);
          if (v29 >= *v27)
            v27 = (double *)(v26 + 16);
          v42 = *(double *)(a1 + 40);
          v43 = *(double *)(a1 + 72);
          v44 = *(double *)(a1 + 56);
          v45 = *(_QWORD *)(v25 + 56);
          if (v45)
          {
            v46 = (int)(v43 * ((*v30 - v42) * 32767.0));
            v47 = (v46 | (v46 << 8)) & 0xF000F | (16 * ((v46 | (v46 << 8)) & 0xFF00FF)) & 0xF0F0F0F;
            v48 = ((int)(v43 * ((*v27 - v44) * 32767.0)) | ((int)(v43 * ((*v27 - v44) * 32767.0)) << 8)) & 0xFF00FF;
            v49 = (v48 | (16 * v48)) & 0x3030303 | (4 * ((v48 | (16 * v48)) & 0xF0F0F0F)) & 0x33333333;
            v50 = ((4 * v49) | (2 * v49)) & 0xAAAAAAAA | (v47 | (4 * v47)) & 0x11111111 | (2
                                                                                         * ((v47 | (4 * v47)) & 0x33333333)) & 0x55555555;
            while (*(_DWORD *)(v45 + 40) <= v50)
            {
              if (v45 != v26 && v45 != v24)
              {
                v51 = *(double *)(v45 + 8);
                v52 = *(double *)(v45 + 16);
                if ((v31 - v51) * (v29 - v52) - (v33 - v51) * (v34 - v52) >= 0.0
                  && (v33 - v51) * (v28 - v52) - (v32 - v51) * (v29 - v52) >= 0.0
                  && (v32 - v51) * (v34 - v52) - (v31 - v51) * (v28 - v52) >= 0.0
                  && (v52 - *(double *)(*(_QWORD *)(v45 + 24) + 16))
                   * (*(double *)(*(_QWORD *)(v45 + 32) + 8) - v51)
                   - (v51 - *(double *)(*(_QWORD *)(v45 + 24) + 8))
                   * (*(double *)(*(_QWORD *)(v45 + 32) + 16) - v52) >= 0.0)
                {
                  goto LABEL_94;
                }
              }
              v45 = *(_QWORD *)(v45 + 56);
              if (!v45)
                break;
            }
          }
          v56 = *(_QWORD *)(v25 + 48);
          if (v56)
          {
            v57 = ((int)(v43 * ((v38 - v42) * 32767.0)) | ((int)(v43 * ((v38 - v42) * 32767.0)) << 8)) & 0xF000F | (16 * (((int)(v43 * ((v38 - v42) * 32767.0)) | ((int)(v43 * ((v38 - v42) * 32767.0)) << 8)) & 0xFF00FF)) & 0xF0F0F0F;
            v58 = ((int)(v43 * ((*v40 - v44) * 32767.0)) | ((int)(v43 * ((*v40 - v44) * 32767.0)) << 8)) & 0xFF00FF;
            v59 = (v58 | (16 * v58)) & 0x3030303 | (4 * ((v58 | (16 * v58)) & 0xF0F0F0F)) & 0x33333333;
            v60 = ((4 * v59) | (2 * v59)) & 0xAAAAAAAA | (v57 | (4 * v57)) & 0x11111111 | (2
                                                                                         * ((v57 | (4 * v57)) & 0x33333333)) & 0x55555555;
            while (*(_DWORD *)(v56 + 40) >= v60)
            {
              if (v56 != v26 && v56 != v24)
              {
                v61 = *(double *)(v56 + 8);
                v62 = *(double *)(v56 + 16);
                if ((v31 - v61) * (v29 - v62) - (v33 - v61) * (v34 - v62) >= 0.0
                  && (v33 - v61) * (v28 - v62) - (v32 - v61) * (v29 - v62) >= 0.0
                  && (v32 - v61) * (v34 - v62) - (v31 - v61) * (v28 - v62) >= 0.0
                  && (v62 - *(double *)(*(_QWORD *)(v56 + 24) + 16))
                   * (*(double *)(*(_QWORD *)(v56 + 32) + 8) - v61)
                   - (v61 - *(double *)(*(_QWORD *)(v56 + 24) + 8))
                   * (*(double *)(*(_QWORD *)(v56 + 32) + 16) - v62) >= 0.0)
                {
                  goto LABEL_94;
                }
              }
              v56 = *(_QWORD *)(v56 + 48);
              if (!v56)
                goto LABEL_96;
            }
          }
          goto LABEL_96;
        }
LABEL_94:
        if (v24 == a2)
        {
          if (v3)
          {
            if (v3 != 1)
            {
              sub_223EBFE9C(a1, (double *)a2);
              return;
            }
            for (i = a2; ; i = a2)
            {
              while (1)
              {
                v126 = *(_QWORD *)(i + 32);
                if (!*(_BYTE *)(i + 64))
                {
                  v127 = *(double *)(i + 8);
                  v128 = *(double *)(i + 16);
                  v130 = *(double *)(v126 + 8);
                  v129 = *(double *)(v126 + 16);
                  v131 = *(_QWORD *)(i + 24);
                  v132 = v127 == v130 && v128 == v129;
                  if (v132
                    || (v130 - v127) * (v128 - *(double *)(v131 + 16)) - (v129 - v128) * (v127 - *(double *)(v131 + 8)) == 0.0)
                  {
                    break;
                  }
                }
                i = *(_QWORD *)(i + 32);
                v126 = a2;
                if (i == a2)
                  goto LABEL_184;
              }
              *(_QWORD *)(v126 + 24) = v131;
              a2 = *(_QWORD *)(i + 24);
              *(_QWORD *)(a2 + 32) = v126;
              v133 = *(_QWORD *)(i + 48);
              if (v133)
                *(_QWORD *)(v133 + 56) = *(_QWORD *)(i + 56);
              v134 = *(_QWORD *)(i + 56);
              if (v134)
                *(_QWORD *)(v134 + 48) = v133;
              if (a2 == v126)
                break;
            }
LABEL_184:
            v135 = v126;
            while (2)
            {
              while (2)
              {
                v137 = *(_QWORD *)(v135 + 24);
                v136 = *(_QWORD *)(v135 + 32);
                v138 = *(_QWORD *)(v136 + 32);
                v139 = *(double *)(v137 + 8);
                v140 = *(double *)(v138 + 8);
                if (v139 != v140)
                {
                  v141 = *(double *)(v137 + 16);
                  v142 = *(double *)(v138 + 16);
                  goto LABEL_189;
                }
                v141 = *(double *)(v137 + 16);
                v142 = *(double *)(v138 + 16);
                if (v141 == v142)
                  goto LABEL_204;
LABEL_189:
                if (!sub_223EC0440(*(double *)(v137 + 8), v141, *(double *)(v135 + 8), *(double *)(v135 + 16), *(double *)(v136 + 8), *(double *)(v136 + 16), *(double *)(v138 + 8), v142))goto LABEL_204;
                v143 = *(_QWORD *)(v137 + 24);
                v144 = *(_QWORD *)(v137 + 32);
                v146 = *(double *)(v143 + 8);
                v145 = *(double *)(v143 + 16);
                v148 = *(double *)(v144 + 8);
                v147 = *(double *)(v144 + 16);
                v149 = v142 - v141;
                v150 = v140 - v139;
                if ((v141 - v145) * (v148 - v139) - (v139 - v146) * (v147 - v141) < 0.0)
                {
                  if (v149 * (v148 - v140) - v150 * (v147 - v142) >= 0.0
                    && (v145 - v141) * (v140 - v146) - (v142 - v145) * (v146 - v139) >= 0.0)
                  {
                    goto LABEL_196;
                  }
                  goto LABEL_204;
                }
                if (v149 * (v146 - v140) - v150 * (v145 - v142) >= 0.0
                  && (v140 - v148) * (v147 - v141) - (v148 - v139) * (v142 - v147) >= 0.0)
                {
                  goto LABEL_204;
                }
LABEL_196:
                v151 = *(_QWORD *)(v138 + 24);
                v152 = *(_QWORD *)(v138 + 32);
                v154 = *(double *)(v151 + 8);
                v153 = *(double *)(v151 + 16);
                v156 = *(double *)(v152 + 8);
                v155 = *(double *)(v152 + 16);
                v157 = v141 - v142;
                v158 = v139 - v140;
                if ((v142 - v153) * (v156 - v140) - (v140 - v154) * (v155 - v142) < 0.0)
                {
                  if (v157 * (v156 - v139) - v158 * (v155 - v141) >= 0.0
                    && (v153 - v142) * (v139 - v154) - (v141 - v153) * (v154 - v140) >= 0.0)
                  {
                    break;
                  }
                  goto LABEL_204;
                }
                if (v157 * (v154 - v139) - v158 * (v153 - v141) >= 0.0
                  && (v139 - v156) * (v155 - v142) - (v156 - v140) * (v141 - v155) >= 0.0)
                {
LABEL_204:
                  v135 = *(_QWORD *)(v135 + 32);
                  if (v135 == v126)
                    goto LABEL_280;
                  continue;
                }
                break;
              }
              v160 = *(char **)(a1 + 8);
              v159 = *(char **)(a1 + 16);
              if (v160 < v159)
              {
                *(_DWORD *)v160 = *(_DWORD *)v137;
                v161 = v160 + 4;
                goto LABEL_225;
              }
              v162 = *(char **)a1;
              v163 = (uint64_t)&v160[-*(_QWORD *)a1];
              v164 = v163 >> 2;
              v165 = (v163 >> 2) + 1;
              if (v165 >> 62)
                goto LABEL_319;
              v166 = v159 - v162;
              if (v166 >> 1 > v165)
                v165 = v166 >> 1;
              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
                v167 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v167 = v165;
              if (v167)
              {
                if (v167 >> 62)
                  goto LABEL_320;
                v168 = operator new(4 * v167);
                v169 = &v168[4 * v164];
                *v169 = *(_DWORD *)v137;
                v161 = (char *)(v169 + 1);
                v170 = v160 - v162;
                if (v160 == v162)
                  goto LABEL_223;
LABEL_217:
                v171 = v170 - 4;
                if (v171 < 0x2C)
                  goto LABEL_323;
                if ((unint64_t)(v160 - v168 - v163) < 0x20)
                  goto LABEL_323;
                v172 = (v171 >> 2) + 1;
                v173 = 4 * (v172 & 0x7FFFFFFFFFFFFFF8);
                v174 = &v160[-v173];
                v169 = (_DWORD *)((char *)v169 - v173);
                v175 = &v168[4 * v164 - 16];
                v176 = v160 - 16;
                v177 = v172 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v178 = *(_OWORD *)v176;
                  *(v175 - 1) = *((_OWORD *)v176 - 1);
                  *v175 = v178;
                  v175 -= 2;
                  v176 -= 32;
                  v177 -= 8;
                }
                while (v177);
                v160 = v174;
                if (v172 != (v172 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_323:
                  do
                  {
                    v179 = *((_DWORD *)v160 - 1);
                    v160 -= 4;
                    *--v169 = v179;
                  }
                  while (v160 != v162);
                }
              }
              else
              {
                v168 = 0;
                v169 = (_DWORD *)(4 * v164);
                *(_DWORD *)(4 * v164) = *(_DWORD *)v137;
                v161 = (char *)(4 * v164 + 4);
                v170 = v160 - v162;
                if (v160 != v162)
                  goto LABEL_217;
              }
LABEL_223:
              v159 = &v168[4 * v167];
              *(_QWORD *)a1 = v169;
              *(_QWORD *)(a1 + 8) = v161;
              *(_QWORD *)(a1 + 16) = v159;
              if (v162)
              {
                operator delete(v162);
                v159 = *(char **)(a1 + 16);
              }
LABEL_225:
              *(_QWORD *)(a1 + 8) = v161;
              if (v161 < v159)
              {
                *(_DWORD *)v161 = *(_DWORD *)v135;
                v180 = v161 + 4;
                goto LABEL_248;
              }
              v181 = *(char **)a1;
              v182 = (uint64_t)&v161[-*(_QWORD *)a1];
              v183 = v182 >> 2;
              v184 = (v182 >> 2) + 1;
              if (v184 >> 62)
                goto LABEL_319;
              v185 = v159 - v181;
              if (v185 >> 1 > v184)
                v184 = v185 >> 1;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
                v186 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v186 = v184;
              if (v186)
              {
                if (v186 >> 62)
                  goto LABEL_320;
                v187 = operator new(4 * v186);
                v188 = &v187[4 * v183];
                *v188 = *(_DWORD *)v135;
                v180 = (char *)(v188 + 1);
                v189 = v161 - v181;
                if (v161 == v181)
                  goto LABEL_246;
LABEL_238:
                v190 = v189 - 4;
                if (v190 < 0x2C)
                {
                  v191 = v161;
                  goto LABEL_245;
                }
                if ((unint64_t)(v161 - &v187[v182]) < 0x20)
                {
                  v191 = v161;
                  goto LABEL_245;
                }
                v192 = (v190 >> 2) + 1;
                v193 = 4 * (v192 & 0x7FFFFFFFFFFFFFF8);
                v191 = &v161[-v193];
                v188 = (_DWORD *)((char *)v188 - v193);
                v194 = &v187[4 * v183 - 16];
                v195 = v161 - 16;
                v196 = v192 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v197 = *(_OWORD *)v195;
                  *(v194 - 1) = *((_OWORD *)v195 - 1);
                  *v194 = v197;
                  v194 -= 2;
                  v195 -= 32;
                  v196 -= 8;
                }
                while (v196);
                if (v192 != (v192 & 0x7FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_245:
                    v198 = *((_DWORD *)v191 - 1);
                    v191 -= 4;
                    *--v188 = v198;
                  }
                  while (v191 != v181);
                }
              }
              else
              {
                v187 = 0;
                v188 = (_DWORD *)(4 * v183);
                *(_DWORD *)(4 * v183) = *(_DWORD *)v135;
                v180 = (char *)(4 * v183 + 4);
                v189 = v161 - v181;
                if (v161 != v181)
                  goto LABEL_238;
              }
LABEL_246:
              v159 = &v187[4 * v186];
              *(_QWORD *)a1 = v188;
              *(_QWORD *)(a1 + 8) = v180;
              *(_QWORD *)(a1 + 16) = v159;
              if (v181)
              {
                operator delete(v181);
                v159 = *(char **)(a1 + 16);
              }
LABEL_248:
              *(_QWORD *)(a1 + 8) = v180;
              if (v180 < v159)
              {
                *(_DWORD *)v180 = *(_DWORD *)v138;
                v199 = (uint64_t)(v180 + 4);
                goto LABEL_271;
              }
              v200 = *(char **)a1;
              v201 = (uint64_t)&v180[-*(_QWORD *)a1];
              v202 = v201 >> 2;
              v203 = (v201 >> 2) + 1;
              if (v203 >> 62)
                goto LABEL_319;
              v204 = v159 - v200;
              if (v204 >> 1 > v203)
                v203 = v204 >> 1;
              if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
                v205 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v205 = v203;
              if (v205)
              {
                if (v205 >> 62)
                  goto LABEL_320;
                v206 = operator new(4 * v205);
                v207 = &v206[4 * v202];
                *v207 = *(_DWORD *)v138;
                v199 = (uint64_t)(v207 + 1);
                v208 = v180 - v200;
                if (v180 == v200)
                  goto LABEL_269;
LABEL_261:
                v209 = v208 - 4;
                if (v209 < 0x2C)
                {
                  v210 = v180;
                  goto LABEL_268;
                }
                if ((unint64_t)(v180 - &v206[v201]) < 0x20)
                {
                  v210 = v180;
                  goto LABEL_268;
                }
                v211 = (v209 >> 2) + 1;
                v212 = 4 * (v211 & 0x7FFFFFFFFFFFFFF8);
                v210 = &v180[-v212];
                v207 = (_DWORD *)((char *)v207 - v212);
                v213 = &v206[4 * v202 - 16];
                v214 = v180 - 16;
                v215 = v211 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v216 = *(_OWORD *)v214;
                  *(v213 - 1) = *((_OWORD *)v214 - 1);
                  *v213 = v216;
                  v213 -= 2;
                  v214 -= 32;
                  v215 -= 8;
                }
                while (v215);
                if (v211 != (v211 & 0x7FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_268:
                    v217 = *((_DWORD *)v210 - 1);
                    v210 -= 4;
                    *--v207 = v217;
                  }
                  while (v210 != v200);
                }
              }
              else
              {
                v206 = 0;
                v207 = (_DWORD *)(4 * v202);
                *(_DWORD *)(4 * v202) = *(_DWORD *)v138;
                v199 = 4 * v202 + 4;
                v208 = v180 - v200;
                if (v180 != v200)
                  goto LABEL_261;
              }
LABEL_269:
              *(_QWORD *)a1 = v207;
              *(_QWORD *)(a1 + 8) = v199;
              *(_QWORD *)(a1 + 16) = &v206[4 * v205];
              if (v200)
                operator delete(v200);
LABEL_271:
              *(_QWORD *)(a1 + 8) = v199;
              v218 = *(_QWORD *)(v135 + 32);
              *(_QWORD *)(v218 + 24) = *(_QWORD *)(v135 + 24);
              *(_QWORD *)(*(_QWORD *)(v135 + 24) + 32) = v218;
              v219 = *(_QWORD *)(v135 + 48);
              if (v219)
                *(_QWORD *)(v219 + 56) = *(_QWORD *)(v135 + 56);
              v220 = *(_QWORD *)(v135 + 56);
              if (v220)
                *(_QWORD *)(v220 + 48) = v219;
              v221 = *(_QWORD **)(v135 + 32);
              v222 = v221[4];
              *(_QWORD *)(v222 + 24) = v221[3];
              *(_QWORD *)(v221[3] + 32) = v222;
              v223 = v221[6];
              if (v223)
                *(_QWORD *)(v223 + 56) = v221[7];
              v224 = v221[7];
              if (v224)
                *(_QWORD *)(v224 + 48) = v223;
              v126 = v138;
              v135 = *(_QWORD *)(v138 + 32);
              if (v135 != v138)
                continue;
              break;
            }
LABEL_280:
            for (j = v126; ; j = v126)
            {
              while (1)
              {
                v226 = *(_QWORD *)(j + 32);
                if (!*(_BYTE *)(j + 64))
                {
                  v227 = *(double *)(j + 8);
                  v228 = *(double *)(j + 16);
                  v230 = *(double *)(v226 + 8);
                  v229 = *(double *)(v226 + 16);
                  v231 = *(_QWORD *)(j + 24);
                  v232 = v227 == v230 && v228 == v229;
                  if (v232
                    || (v230 - v227) * (v228 - *(double *)(v231 + 16)) - (v229 - v228) * (v227 - *(double *)(v231 + 8)) == 0.0)
                  {
                    break;
                  }
                }
                j = *(_QWORD *)(j + 32);
                if (v226 == v126)
                {
                  v3 = 2;
                  a2 = v126;
                  if (!v126)
                    return;
                  goto LABEL_3;
                }
              }
              *(_QWORD *)(v226 + 24) = v231;
              v126 = *(_QWORD *)(j + 24);
              *(_QWORD *)(v126 + 32) = v226;
              v233 = *(_QWORD *)(j + 48);
              if (v233)
                *(_QWORD *)(v233 + 56) = *(_QWORD *)(j + 56);
              v234 = *(_QWORD *)(j + 56);
              if (v234)
                *(_QWORD *)(v234 + 48) = v233;
              if (v126 == v226)
                break;
            }
            v3 = 2;
            a2 = v226;
            if (!v226)
              return;
          }
          else
          {
            v235 = a2;
            do
            {
              while (1)
              {
                v236 = *(_QWORD *)(v235 + 32);
                if (*(_BYTE *)(v235 + 64))
                  break;
                v237 = *(double *)(v235 + 8);
                v238 = *(double *)(v235 + 16);
                v240 = *(double *)(v236 + 8);
                v239 = *(double *)(v236 + 16);
                v241 = *(_QWORD *)(v235 + 24);
                v242 = v237 == v240 && v238 == v239;
                if (!v242
                  && (v240 - v237) * (v238 - *(double *)(v241 + 16)) - (v239 - v238) * (v237 - *(double *)(v241 + 8)) != 0.0)
                {
                  break;
                }
                *(_QWORD *)(v236 + 24) = v241;
                a2 = *(_QWORD *)(v235 + 24);
                *(_QWORD *)(a2 + 32) = v236;
                v243 = *(_QWORD *)(v235 + 48);
                if (v243)
                  *(_QWORD *)(v243 + 56) = *(_QWORD *)(v235 + 56);
                v244 = *(_QWORD *)(v235 + 56);
                if (v244)
                  *(_QWORD *)(v244 + 48) = v243;
                v3 = 1;
                if (a2 == v236)
                  goto LABEL_313;
                v235 = a2;
              }
              v235 = *(_QWORD *)(v235 + 32);
            }
            while (v235 != a2);
            v3 = 1;
            v236 = a2;
LABEL_313:
            a2 = v236;
            if (!v236)
              return;
          }
          goto LABEL_3;
        }
      }
      if (v35 >= 0.0)
        goto LABEL_94;
      for (k = *(_QWORD *)(v24 + 32); k != v26; k = *(_QWORD *)(k + 32))
      {
        v54 = *(double *)(k + 8);
        v55 = *(double *)(k + 16);
        if ((v31 - v54) * (v29 - v55) - (v33 - v54) * (v34 - v55) >= 0.0
          && (v33 - v54) * (v28 - v55) - (v32 - v54) * (v29 - v55) >= 0.0
          && (v32 - v54) * (v34 - v55) - (v31 - v54) * (v28 - v55) >= 0.0
          && (v55 - *(double *)(*(_QWORD *)(k + 24) + 16)) * (*(double *)(*(_QWORD *)(k + 32) + 8) - v54)
           - (v54 - *(double *)(*(_QWORD *)(k + 24) + 8)) * (*(double *)(*(_QWORD *)(k + 32) + 16) - v55) >= 0.0)
        {
          goto LABEL_94;
        }
      }
LABEL_96:
      v64 = *(char **)(a1 + 8);
      v63 = *(char **)(a1 + 16);
      if (v64 < v63)
      {
        *(_DWORD *)v64 = *(_DWORD *)v26;
        v65 = v64 + 4;
        goto LABEL_117;
      }
      v66 = *(char **)a1;
      v67 = (uint64_t)&v64[-*(_QWORD *)a1];
      v68 = v67 >> 2;
      v69 = (v67 >> 2) + 1;
      if (v69 >> 62)
        goto LABEL_319;
      v70 = v63 - v66;
      if (v70 >> 1 > v69)
        v69 = v70 >> 1;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
        v71 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (v71)
      {
        if (v71 >> 62)
          goto LABEL_320;
        v72 = operator new(4 * v71);
        v73 = &v72[4 * v68];
        *v73 = *(_DWORD *)v26;
        v65 = (char *)(v73 + 1);
        v74 = v64 - v66;
        if (v64 == v66)
          goto LABEL_115;
LABEL_109:
        v75 = v74 - 4;
        if (v75 < 0x2C)
          goto LABEL_324;
        if ((unint64_t)(v64 - &v72[v67]) < 0x20)
          goto LABEL_324;
        v76 = (v75 >> 2) + 1;
        v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
        v78 = &v64[-v77];
        v73 = (_DWORD *)((char *)v73 - v77);
        v79 = &v72[4 * v68 - 16];
        v80 = v64 - 16;
        v81 = v76 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v82 = *(_OWORD *)v80;
          *(v79 - 1) = *((_OWORD *)v80 - 1);
          *v79 = v82;
          v79 -= 2;
          v80 -= 32;
          v81 -= 8;
        }
        while (v81);
        v64 = v78;
        if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_324:
          do
          {
            v83 = *((_DWORD *)v64 - 1);
            v64 -= 4;
            *--v73 = v83;
          }
          while (v64 != v66);
        }
      }
      else
      {
        v72 = 0;
        v73 = (_DWORD *)(4 * v68);
        *(_DWORD *)(4 * v68) = *(_DWORD *)v26;
        v65 = (char *)(4 * v68 + 4);
        v74 = v64 - v66;
        if (v64 != v66)
          goto LABEL_109;
      }
LABEL_115:
      v63 = &v72[4 * v71];
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v65;
      *(_QWORD *)(a1 + 16) = v63;
      if (v66)
      {
        operator delete(v66);
        v63 = *(char **)(a1 + 16);
      }
LABEL_117:
      *(_QWORD *)(a1 + 8) = v65;
      if (v65 < v63)
      {
        *(_DWORD *)v65 = *(_DWORD *)v25;
        v84 = v65 + 4;
        goto LABEL_140;
      }
      v85 = *(char **)a1;
      v86 = (uint64_t)&v65[-*(_QWORD *)a1];
      v87 = v86 >> 2;
      v88 = (v86 >> 2) + 1;
      if (v88 >> 62)
        goto LABEL_319;
      v89 = v63 - v85;
      if (v89 >> 1 > v88)
        v88 = v89 >> 1;
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
        v90 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v90 = v88;
      if (v90)
      {
        if (v90 >> 62)
          goto LABEL_320;
        v91 = operator new(4 * v90);
        v92 = &v91[4 * v87];
        *v92 = *(_DWORD *)v25;
        v84 = (char *)(v92 + 1);
        v93 = v65 - v85;
        if (v65 == v85)
          goto LABEL_138;
LABEL_130:
        v94 = v93 - 4;
        if (v94 < 0x2C)
        {
          v95 = v65;
          goto LABEL_137;
        }
        if ((unint64_t)(v65 - &v91[v86]) < 0x20)
        {
          v95 = v65;
          goto LABEL_137;
        }
        v96 = (v94 >> 2) + 1;
        v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
        v95 = &v65[-v97];
        v92 = (_DWORD *)((char *)v92 - v97);
        v98 = &v91[4 * v87 - 16];
        v99 = v65 - 16;
        v100 = v96 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v101 = *(_OWORD *)v99;
          *(v98 - 1) = *((_OWORD *)v99 - 1);
          *v98 = v101;
          v98 -= 2;
          v99 -= 32;
          v100 -= 8;
        }
        while (v100);
        if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_137:
            v102 = *((_DWORD *)v95 - 1);
            v95 -= 4;
            *--v92 = v102;
          }
          while (v95 != v85);
        }
      }
      else
      {
        v91 = 0;
        v92 = (_DWORD *)(4 * v87);
        *(_DWORD *)(4 * v87) = *(_DWORD *)v25;
        v84 = (char *)(4 * v87 + 4);
        v93 = v65 - v85;
        if (v65 != v85)
          goto LABEL_130;
      }
LABEL_138:
      v63 = &v91[4 * v90];
      *(_QWORD *)a1 = v92;
      *(_QWORD *)(a1 + 8) = v84;
      *(_QWORD *)(a1 + 16) = v63;
      if (v85)
      {
        operator delete(v85);
        v63 = *(char **)(a1 + 16);
      }
LABEL_140:
      *(_QWORD *)(a1 + 8) = v84;
      if (v84 < v63)
      {
        *(_DWORD *)v84 = *(_DWORD *)v24;
        v103 = (uint64_t)(v84 + 4);
        goto LABEL_163;
      }
      v104 = *(char **)a1;
      v105 = (uint64_t)&v84[-*(_QWORD *)a1];
      v106 = v105 >> 2;
      v107 = (v105 >> 2) + 1;
      if (v107 >> 62)
LABEL_319:
        sub_22316E078();
      v108 = v63 - v104;
      if (v108 >> 1 > v107)
        v107 = v108 >> 1;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
        v109 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v109 = v107;
      if (v109)
      {
        if (v109 >> 62)
LABEL_320:
          sub_223174E94();
        v110 = operator new(4 * v109);
        v111 = &v110[4 * v106];
        *v111 = *(_DWORD *)v24;
        v103 = (uint64_t)(v111 + 1);
        v112 = v84 - v104;
        if (v84 == v104)
          goto LABEL_161;
LABEL_153:
        v113 = v112 - 4;
        if (v113 < 0x2C)
        {
          v114 = v84;
          goto LABEL_160;
        }
        if ((unint64_t)(v84 - &v110[v105]) < 0x20)
        {
          v114 = v84;
          goto LABEL_160;
        }
        v115 = (v113 >> 2) + 1;
        v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
        v114 = &v84[-v116];
        v111 = (_DWORD *)((char *)v111 - v116);
        v117 = &v110[4 * v106 - 16];
        v118 = v84 - 16;
        v119 = v115 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v120 = *(_OWORD *)v118;
          *(v117 - 1) = *((_OWORD *)v118 - 1);
          *v117 = v120;
          v117 -= 2;
          v118 -= 32;
          v119 -= 8;
        }
        while (v119);
        if (v115 != (v115 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_160:
            v121 = *((_DWORD *)v114 - 1);
            v114 -= 4;
            *--v111 = v121;
          }
          while (v114 != v104);
        }
      }
      else
      {
        v110 = 0;
        v111 = (_DWORD *)(4 * v106);
        *(_DWORD *)(4 * v106) = *(_DWORD *)v24;
        v103 = 4 * v106 + 4;
        v112 = v84 - v104;
        if (v84 != v104)
          goto LABEL_153;
      }
LABEL_161:
      *(_QWORD *)a1 = v111;
      *(_QWORD *)(a1 + 8) = v103;
      *(_QWORD *)(a1 + 16) = &v110[4 * v109];
      if (v104)
        operator delete(v104);
LABEL_163:
      *(_QWORD *)(a1 + 8) = v103;
      v122 = *(_QWORD *)(v25 + 32);
      *(_QWORD *)(v122 + 24) = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(*(_QWORD *)(v25 + 24) + 32) = v122;
      v123 = *(_QWORD *)(v25 + 48);
      if (v123)
        *(_QWORD *)(v123 + 56) = *(_QWORD *)(v25 + 56);
      v124 = *(_QWORD *)(v25 + 56);
      if (v124)
        *(_QWORD *)(v124 + 48) = v123;
      a2 = *(_QWORD *)(v24 + 32);
    }
  }
}

double sub_223EBFAAC(uint64_t *a1, _DWORD *a2, float *a3, float *a4)
{
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  double v36;

  v8 = a1[1];
  v9 = a1[2];
  if (v8 >= v9)
  {
    if (v9 < 0x38E38E38E38E38FLL)
    {
      v10 = operator new(72 * v9);
      v11 = v10;
      *a1 = (uint64_t)v10;
      v13 = (char *)a1[4];
      v12 = a1[5];
      if ((unint64_t)v13 < v12)
      {
        *(_QWORD *)v13 = v10;
        v14 = (uint64_t)(v13 + 8);
LABEL_25:
        v8 = 0;
        a1[4] = v14;
        goto LABEL_26;
      }
      v15 = (char *)a1[3];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_22316E078();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (!v19)
      {
        v20 = 0;
        v21 = (char *)(8 * v16);
        v22 = 0;
        *(_QWORD *)(8 * v16) = v11;
        v14 = 8 * v16 + 8;
        v23 = (char *)(v13 - v15);
        if (v13 == v15)
          goto LABEL_23;
        goto LABEL_16;
      }
      if (!(v19 >> 61))
      {
        v20 = (char *)operator new(8 * v19);
        v21 = &v20[8 * v16];
        v22 = &v20[8 * v19];
        *(_QWORD *)v21 = v11;
        v14 = (uint64_t)(v21 + 8);
        v23 = (char *)(v13 - v15);
        if (v13 == v15)
        {
LABEL_23:
          a1[3] = (uint64_t)v21;
          a1[4] = v14;
          a1[5] = (uint64_t)v22;
          if (v13)
            operator delete(v13);
          goto LABEL_25;
        }
LABEL_16:
        v24 = (unint64_t)(v23 - 8);
        if (v24 < 0x58)
          goto LABEL_31;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_31;
        v25 = (v24 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v13[-v26];
        v21 -= v26;
        v28 = &v20[8 * v16 - 16];
        v29 = v13 - 16;
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(_OWORD *)v29;
          *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
          *(_OWORD *)v28 = v31;
          v28 -= 32;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        v13 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          do
          {
            v32 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v21 - 1) = v32;
            v21 -= 8;
          }
          while (v13 != v15);
        }
        v13 = (char *)a1[3];
        goto LABEL_23;
      }
    }
    sub_223174E94();
  }
LABEL_26:
  v33 = *a1;
  a1[1] = v8 + 1;
  v34 = v33 + 72 * v8;
  result = *a3;
  v36 = *a4;
  *(_DWORD *)v34 = *a2;
  *(double *)(v34 + 8) = result;
  *(double *)(v34 + 16) = v36;
  *(_DWORD *)(v34 + 40) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  *(_QWORD *)(v34 + 56) = 0;
  *(_BYTE *)(v34 + 64) = 0;
  return result;
}

double sub_223EBFCA8(uint64_t *a1, _DWORD *a2, double *a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;

  v8 = a1[1];
  v9 = a1[2];
  if (v8 >= v9)
  {
    if (v9 < 0x38E38E38E38E38FLL)
    {
      v10 = operator new(72 * v9);
      v11 = v10;
      *a1 = (uint64_t)v10;
      v13 = (char *)a1[4];
      v12 = a1[5];
      if ((unint64_t)v13 < v12)
      {
        *(_QWORD *)v13 = v10;
        v14 = (uint64_t)(v13 + 8);
LABEL_25:
        v8 = 0;
        a1[4] = v14;
        goto LABEL_26;
      }
      v15 = (char *)a1[3];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_22316E078();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (!v19)
      {
        v20 = 0;
        v21 = (char *)(8 * v16);
        v22 = 0;
        *(_QWORD *)(8 * v16) = v11;
        v14 = 8 * v16 + 8;
        v23 = (char *)(v13 - v15);
        if (v13 == v15)
          goto LABEL_23;
        goto LABEL_16;
      }
      if (!(v19 >> 61))
      {
        v20 = (char *)operator new(8 * v19);
        v21 = &v20[8 * v16];
        v22 = &v20[8 * v19];
        *(_QWORD *)v21 = v11;
        v14 = (uint64_t)(v21 + 8);
        v23 = (char *)(v13 - v15);
        if (v13 == v15)
        {
LABEL_23:
          a1[3] = (uint64_t)v21;
          a1[4] = v14;
          a1[5] = (uint64_t)v22;
          if (v13)
            operator delete(v13);
          goto LABEL_25;
        }
LABEL_16:
        v24 = (unint64_t)(v23 - 8);
        if (v24 < 0x58)
          goto LABEL_31;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_31;
        v25 = (v24 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v13[-v26];
        v21 -= v26;
        v28 = &v20[8 * v16 - 16];
        v29 = v13 - 16;
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(_OWORD *)v29;
          *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
          *(_OWORD *)v28 = v31;
          v28 -= 32;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        v13 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          do
          {
            v32 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v21 - 1) = v32;
            v21 -= 8;
          }
          while (v13 != v15);
        }
        v13 = (char *)a1[3];
        goto LABEL_23;
      }
    }
    sub_223174E94();
  }
LABEL_26:
  v33 = *a1;
  a1[1] = v8 + 1;
  v34 = v33 + 72 * v8;
  result = *a3;
  v36 = *a4;
  *(_DWORD *)v34 = *a2;
  *(double *)(v34 + 8) = result;
  *(_QWORD *)(v34 + 16) = v36;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_DWORD *)(v34 + 40) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  *(_QWORD *)(v34 + 56) = 0;
  *(_BYTE *)(v34 + 64) = 0;
  return result;
}

uint64_t sub_223EBFE9C(uint64_t result, double *a2)
{
  double *v2;
  double *v3;
  uint64_t v4;
  int v5;
  double *v6;
  int *v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  int v13;
  BOOL v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  char v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  double v45;
  _BOOL4 v46;
  int v47;
  BOOL v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int *v78;
  double *v79;

  v2 = a2;
  v75 = (uint64_t *)(result + 80);
  v76 = result;
  v78 = (int *)*((_QWORD *)a2 + 4);
  do
  {
    v3 = (double *)v78;
    v4 = *((_QWORD *)v2 + 3);
    v78 = (int *)*((_QWORD *)v78 + 4);
    if (v78 != (int *)v4)
    {
      v6 = v2 + 2;
      v5 = *(_DWORD *)v2;
      v79 = v2 + 1;
      v7 = v78;
      while (1)
      {
        v8 = *v7;
        if (v5 != *v7 && *(_DWORD *)v3 != v8 && *(_DWORD *)v4 != v8)
          break;
LABEL_5:
        v7 = (int *)*((_QWORD *)v7 + 4);
        if (v7 == (int *)v4)
          goto LABEL_2;
      }
      v9 = (double *)(v7 + 2);
      v10 = (double *)(v7 + 4);
      v11 = v2;
      do
      {
        v12 = v11;
        v13 = *(_DWORD *)v11;
        v11 = (double *)*((_QWORD *)v11 + 4);
        if (v13 != v5)
        {
          v14 = *(_DWORD *)v11 == v5 || v13 == v8;
          if (!v14 && *(_DWORD *)v11 != v8)
          {
            result = sub_223EC0440(v12[1], v12[2], v11[1], v11[2], *v79, *v6, *v9, *v10);
            if ((result & 1) != 0)
              goto LABEL_5;
          }
        }
      }
      while (v11 != v2);
      v16 = *v6;
      v18 = *(double *)(v4 + 8);
      v17 = *(double *)(v4 + 16);
      v19 = *v6 - v17;
      v20 = *v79;
      v22 = v3[1];
      v21 = v3[2];
      v23 = v22 - *v79;
      v24 = *v79 - v18;
      v25 = v21 - *v6;
      v26 = v19 * v23 - v24 * v25;
      v27 = *v10;
      v28 = *v10 - *v6;
      v29 = *v9;
      v30 = *v9 - *v79;
      if (v26 >= 0.0)
      {
        if (v28 * (v18 - v29) - (v17 - v27) * v30 >= 0.0 && v25 * (v29 - v22) - v23 * (v27 - v21) >= 0.0)
          goto LABEL_44;
      }
      else if (v28 * (v22 - v29) - (v21 - v27) * v30 < 0.0
             || (v17 - v16) * (v29 - v18) - (v18 - v20) * (v27 - v17) < 0.0)
      {
        goto LABEL_44;
      }
      v31 = *((_QWORD *)v7 + 3);
      v32 = *((_QWORD *)v7 + 4);
      v34 = *(double *)(v31 + 8);
      v33 = *(double *)(v31 + 16);
      v36 = *(double *)(v32 + 8);
      v35 = *(double *)(v32 + 16);
      v37 = v29 - v34;
      v38 = v16 - v27;
      v39 = v20 - v29;
      if ((v27 - v33) * (v36 - v29) - (v29 - v34) * (v35 - v27) >= 0.0)
      {
        if (v38 * (v34 - v20) - v39 * (v33 - v16) >= 0.0
          && (v20 - v36) * (v35 - v27) - (v36 - v29) * (v16 - v35) >= 0.0)
        {
          goto LABEL_44;
        }
      }
      else if (v38 * (v36 - v20) - v39 * (v35 - v16) < 0.0
             || (v33 - v27) * (v20 - v34) - (v16 - v33) * (v34 - v29) < 0.0)
      {
        goto LABEL_44;
      }
      v40 = 0;
      v41 = (v16 + v27) * 0.5;
      v42 = *v6;
      v43 = v2;
      do
      {
        v44 = v43;
        v45 = v42;
        v46 = v42 > v41;
        v43 = (double *)*((_QWORD *)v43 + 4);
        v42 = v43[2];
        v47 = v46 ^ (v42 > v41);
        v48 = v42 == v45 || v47 == 0;
        if (!v48 && (v20 + v29) * 0.5 < v44[1] + (v41 - v45) * (v43[1] - v44[1]) / (v42 - v45))
          v40 ^= 1u;
      }
      while (v43 != v2);
      if ((v40 & 1) != 0)
      {
        v49 = v34 - v20;
        if (v19 * v49 - v24 * (v33 - v16) != 0.0 || (v33 - v16) * v37 - (v27 - v33) * v49 != 0.0)
        {
LABEL_48:
          sub_223EBFCA8(v75, v2, v79, (uint64_t *)v2 + 2);
          v51 = v50;
          sub_223EBFCA8(v75, v7, (double *)v7 + 1, (uint64_t *)v7 + 2);
          v53 = *((_QWORD *)v2 + 4);
          v54 = *((_QWORD *)v7 + 3);
          *((_QWORD *)v2 + 4) = v7;
          *((_QWORD *)v7 + 3) = v2;
          *(_QWORD *)(v53 + 24) = v51;
          *(_QWORD *)(v51 + 24) = v52;
          *(_QWORD *)(v51 + 32) = v53;
          *(_QWORD *)(v52 + 32) = v51;
          *(_QWORD *)(v54 + 32) = v52;
          *(_QWORD *)(v52 + 24) = v54;
          v55 = (int *)*((_QWORD *)v2 + 4);
          if (!v55)
            v55 = (int *)v2;
          while (1)
          {
            while (1)
            {
              v56 = *((_QWORD *)v2 + 4);
              if (!*((_BYTE *)v2 + 64))
              {
                v57 = v2[1];
                v58 = v2[2];
                v60 = *(double *)(v56 + 8);
                v59 = *(double *)(v56 + 16);
                v61 = *((_QWORD *)v2 + 3);
                v62 = v57 == v60 && v58 == v59;
                if (v62
                  || (v60 - v57) * (v58 - *(double *)(v61 + 16)) - (v59 - v58) * (v57 - *(double *)(v61 + 8)) == 0.0)
                {
                  break;
                }
              }
              v2 = (double *)*((_QWORD *)v2 + 4);
              if (v2 == (double *)v55)
                goto LABEL_64;
            }
            *(_QWORD *)(v56 + 24) = v61;
            v55 = (int *)*((_QWORD *)v2 + 3);
            *((_QWORD *)v55 + 4) = v56;
            v63 = *((_QWORD *)v2 + 6);
            if (v63)
              *(double *)(v63 + 56) = v2[7];
            v64 = *((_QWORD *)v2 + 7);
            if (v64)
              *(_QWORD *)(v64 + 48) = v63;
            if (v55 == (int *)v56)
              break;
            v2 = (double *)v55;
          }
LABEL_64:
          v65 = *(_QWORD *)(v52 + 32);
          if (!v65)
            v65 = v52;
          while (1)
          {
            while (1)
            {
              v66 = *(_QWORD *)(v52 + 32);
              if (!*(_BYTE *)(v52 + 64))
              {
                v67 = *(double *)(v52 + 8);
                v68 = *(double *)(v52 + 16);
                v70 = *(double *)(v66 + 8);
                v69 = *(double *)(v66 + 16);
                v71 = *(_QWORD *)(v52 + 24);
                v72 = v67 == v70 && v68 == v69;
                if (v72
                  || (v70 - v67) * (v68 - *(double *)(v71 + 16)) - (v69 - v68) * (v67 - *(double *)(v71 + 8)) == 0.0)
                {
                  break;
                }
              }
              v52 = *(_QWORD *)(v52 + 32);
              if (v52 == v65)
                goto LABEL_80;
            }
            *(_QWORD *)(v66 + 24) = v71;
            v65 = *(_QWORD *)(v52 + 24);
            *(_QWORD *)(v65 + 32) = v66;
            v73 = *(_QWORD *)(v52 + 48);
            if (v73)
              *(_QWORD *)(v73 + 56) = *(_QWORD *)(v52 + 56);
            v74 = *(_QWORD *)(v52 + 56);
            if (v74)
              *(_QWORD *)(v74 + 48) = v73;
            if (v65 == v66)
              break;
            v52 = v65;
          }
LABEL_80:
          sub_223EBE7E8(v76);
          return sub_223EBE7E8(v76);
        }
      }
LABEL_44:
      if (v20 != v29
        || v16 != v27
        || v26 <= 0.0
        || (v27 - *(double *)(*((_QWORD *)v7 + 3) + 16)) * (*(double *)(*((_QWORD *)v7 + 4) + 8) - v29)
         - (v29 - *(double *)(*((_QWORD *)v7 + 3) + 8)) * (*(double *)(*((_QWORD *)v7 + 4) + 16) - v27) <= 0.0)
      {
        goto LABEL_5;
      }
      goto LABEL_48;
    }
LABEL_2:
    v2 = v3;
  }
  while (v3 != a2);
  return result;
}

BOOL sub_223EC0440(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  int v9;
  double v10;
  int v11;
  double v12;
  int v13;
  double v14;
  int v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;

  v8 = (a4 - a2) * (a5 - a3) - (a3 - a1) * (a6 - a4);
  v9 = (v8 > 0.0) - (v8 < 0.0);
  v10 = (a4 - a2) * (a7 - a3) - (a3 - a1) * (a8 - a4);
  v11 = (v10 > 0.0) - (v10 < 0.0);
  v12 = (a1 - a7) * (a8 - a6) - (a7 - a5) * (a2 - a8);
  v13 = (v12 > 0.0) - (v12 < 0.0);
  v14 = (a3 - a7) * (a8 - a6) - (a7 - a5) * (a4 - a8);
  v15 = (v14 > 0.0) - (v14 < 0.0);
  if (v9 != v11 && v13 != v15)
    return 1;
  if (!v9)
  {
    v17 = a1 >= a3 ? a1 : a3;
    if (v17 >= a5)
    {
      v18 = a3 >= a1 ? a1 : a3;
      if (v18 <= a5)
      {
        v19 = a2 >= a4 ? a2 : a4;
        if (v19 >= a6)
        {
          v20 = a4 >= a2 ? a2 : a4;
          if (v20 <= a6)
            return 1;
        }
      }
    }
  }
  if (!v11)
  {
    v21 = a1 >= a3 ? a1 : a3;
    if (v21 >= a7)
    {
      v22 = a3 >= a1 ? a1 : a3;
      if (v22 <= a7)
      {
        v23 = a2 >= a4 ? a2 : a4;
        if (v23 >= a8)
        {
          v24 = a4 >= a2 ? a2 : a4;
          if (v24 <= a8)
            return 1;
        }
      }
    }
  }
  if (!v13)
  {
    v25 = a5 >= a7 ? a5 : a7;
    if (v25 >= a1)
    {
      v26 = a7 >= a5 ? a5 : a7;
      if (v26 <= a1)
      {
        v27 = a6 >= a8 ? a6 : a8;
        if (v27 >= a2)
        {
          v28 = a8 >= a6 ? a6 : a8;
          if (v28 <= a2)
            return 1;
        }
      }
    }
  }
  if (v15)
    return 0;
  v29 = a5 >= a7 ? a5 : a7;
  if (v29 < a3)
    return 0;
  v30 = a7 >= a5 ? a5 : a7;
  if (v30 > a3)
    return 0;
  v31 = a6 >= a8 ? a6 : a8;
  if (v31 < a4)
    return 0;
  v32 = a8 >= a6 ? a6 : a8;
  return v32 <= a4;
}

uint64_t sub_223EC060C(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  int64x2_t **v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int64x2_t v38;
  int8x16_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int64x2_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  int64x2_t v67;
  int64x2_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int64x2_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int64x2_t v80;
  int8x16_t v81;
  char *v82;
  int64x2_t **v83;
  char *v84;
  char *v85;
  int64x2_t v86;
  int64x2_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int64x2_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int64x2_t v99;
  int8x16_t v100;
  char *v101;
  char *v102;
  char *v104;
  _QWORD *v105;
  _QWORD *v106;
  char *v109;
  char *v110;
  char *v111;
  _QWORD *v112;
  _QWORD *v113;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  _QWORD *v126;
  _QWORD *v127;
  int8x16_t v130;
  int8x16_t v131;
  void *__p;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  __int128 v150[2];
  __int128 v151;
  __int128 v152;

  v12 = *a1;
  v13 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v14 = *a1;
  else
    v14 = v12 + 1;
  v15 = v14 >> 1;
  v17 = *(_OWORD *)a1;
  v16 = *((_OWORD *)a1 + 1);
  v151 = *(_OWORD *)a1;
  v152 = v16;
  if (v13 >= 0)
    v18 = v13;
  else
    v18 = v13 + 1;
  v19 = v18 >> 1;
  *((_QWORD *)&v150[0] + 1) = *((_QWORD *)&v17 + 1);
  v150[1] = v16;
  v20 = v13 - 2 * v19 + v12 - 2 * v15;
  *(_QWORD *)&v152 = v19 + v15 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v149 = 0;
  *(_QWORD *)&v150[0] = v152;
  v147 = 0;
  v148 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  __p = 0;
  v133 = 0;
  v134 = 0;
  sub_2233DD4BC(&v151, v150, a2, &v147, (char **)&v144, (char **)&v141);
  sub_2233DD4BC(&v151, v150, a3, &v138, (char **)&v135, (char **)&__p);
  v22 = (char *)v141;
  v21 = v142;
  if (v141 == v142)
    goto LABEL_80;
  v24 = (int64x2_t **)__p;
  v23 = v133;
  if ((unint64_t)(v142 - (_BYTE *)v141) < 0x80 || a4 > 0x63 || (unint64_t)(v133 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v133)
    {
      do
      {
        v54 = (char *)__p;
        if (__p != v23)
        {
          do
          {
            v55 = *(_QWORD **)v22;
            v56 = *(_QWORD **)v54;
            if (*(_QWORD *)(*(_QWORD *)v22 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
              && v55[4] <= v56[6]
              && v55[7] >= v56[5]
              && v55[5] <= v56[7])
            {
              if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v55, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v56, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v23 = v133;
            }
            v54 += 8;
          }
          while (v54 != v23);
          v21 = v142;
        }
        v22 += 8;
      }
      while (v22 != v21);
    }
  }
  else
  {
    v25 = vdupq_n_s64(0x8000000000000000);
    v26 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v27 = (int8x16_t)v26;
    v28 = (int8x16_t)v25;
    do
    {
      v29 = *(int64x2_t **)v22;
      v22 += 8;
      v30 = v29[2];
      v31 = v29[3];
      v32 = (int8x16_t)vcgtq_s64(v26, v30);
      v33 = vbslq_s8(v32, (int8x16_t)v30, v27);
      v34 = (int64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v26);
      v35 = (int8x16_t)vcgtq_s64(v34, v31);
      v27 = vbslq_s8(v35, (int8x16_t)v31, v33);
      v26 = (int64x2_t)vbslq_s8(v35, (int8x16_t)v31, (int8x16_t)v34);
      v36 = (int8x16_t)vcgtq_s64(v30, v25);
      v37 = vbslq_s8(v36, (int8x16_t)v30, v28);
      v38 = (int64x2_t)vbslq_s8(v36, (int8x16_t)v30, (int8x16_t)v25);
      v39 = (int8x16_t)vcgtq_s64(v31, v38);
      v28 = vbslq_s8(v39, (int8x16_t)v31, v37);
      v25 = (int64x2_t)vbslq_s8(v39, (int8x16_t)v31, (int8x16_t)v38);
    }
    while (v22 != v142);
    v130 = v27;
    v131 = v28;
    if (__p != v133)
    {
      do
      {
        v40 = *v24++;
        v41 = v40[2];
        v42 = v40[3];
        v43 = (int8x16_t)vcgtq_s64(v26, v41);
        v44 = vbslq_s8(v43, (int8x16_t)v41, v27);
        v45 = (int64x2_t)vbslq_s8(v43, (int8x16_t)v41, (int8x16_t)v26);
        v46 = (int8x16_t)vcgtq_s64(v45, v42);
        v27 = vbslq_s8(v46, (int8x16_t)v42, v44);
        v26 = (int64x2_t)vbslq_s8(v46, (int8x16_t)v42, (int8x16_t)v45);
        v47 = (int8x16_t)vcgtq_s64(v41, v25);
        v48 = vbslq_s8(v47, (int8x16_t)v41, v28);
        v49 = (int64x2_t)vbslq_s8(v47, (int8x16_t)v41, (int8x16_t)v25);
        v50 = (int8x16_t)vcgtq_s64(v42, v49);
        v28 = vbslq_s8(v50, (int8x16_t)v42, v48);
        v25 = (int64x2_t)vbslq_s8(v50, (int8x16_t)v42, (int8x16_t)v49);
      }
      while (v24 != (int64x2_t **)v133);
      v130 = v27;
      v131 = v28;
    }
    if ((sub_223EC1100((__int128 *)v130.i8, &v141, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
    {
LABEL_175:
      v123 = 0;
      v124 = (char *)__p;
      if (!__p)
        goto LABEL_177;
      goto LABEL_176;
    }
  }
  v51 = v139;
  if ((unint64_t)(v139 - (_BYTE *)v138) > 0x7F)
  {
    v53 = (char *)v141;
    v52 = v142;
    if ((unint64_t)(v136 - (_BYTE *)v135) >= 0x80
      && a4 <= 0x63
      && (unint64_t)(v142 - (_BYTE *)v141) >= 0x79)
    {
      v67 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v68 = vdupq_n_s64(0x8000000000000000);
      v130 = (int8x16_t)v67;
      v131 = (int8x16_t)v68;
      if (v141 != v142)
      {
        v69 = (int8x16_t)v67;
        v70 = (int8x16_t)v68;
        do
        {
          v71 = *(int64x2_t **)v53;
          v53 += 8;
          v72 = v71[2];
          v73 = v71[3];
          v74 = (int8x16_t)vcgtq_s64(v67, v72);
          v75 = vbslq_s8(v74, (int8x16_t)v72, v69);
          v76 = (int64x2_t)vbslq_s8(v74, (int8x16_t)v72, (int8x16_t)v67);
          v77 = (int8x16_t)vcgtq_s64(v76, v73);
          v69 = vbslq_s8(v77, (int8x16_t)v73, v75);
          v67 = (int64x2_t)vbslq_s8(v77, (int8x16_t)v73, (int8x16_t)v76);
          v78 = (int8x16_t)vcgtq_s64(v72, v68);
          v79 = vbslq_s8(v78, (int8x16_t)v72, v70);
          v80 = (int64x2_t)vbslq_s8(v78, (int8x16_t)v72, (int8x16_t)v68);
          v81 = (int8x16_t)vcgtq_s64(v73, v80);
          v70 = vbslq_s8(v81, (int8x16_t)v73, v79);
          v68 = (int64x2_t)vbslq_s8(v81, (int8x16_t)v73, (int8x16_t)v80);
        }
        while (v53 != v142);
        v130 = v69;
        v131 = v70;
      }
      if (!sub_223EC1100((__int128 *)v130.i8, &v141, &v138, a4 + 1, a5, a6, a7)
        || (sub_223EC1100((__int128 *)v130.i8, &v141, &v135, a4 + 1, a5, a6, a7) & 1) == 0)
      {
        goto LABEL_175;
      }
      goto LABEL_80;
    }
  }
  else
  {
    v53 = (char *)v141;
    v52 = v142;
  }
  if (v138 == v139 || v53 == v52)
  {
    if (v53 == v52)
      goto LABEL_80;
    goto LABEL_39;
  }
  do
  {
    v59 = (char *)v138;
    if (v138 != v51)
    {
      do
      {
        v60 = *(_QWORD **)v53;
        v61 = *(_QWORD **)v59;
        if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)v59 + 32)
          && v60[4] <= v61[6]
          && v60[7] >= v61[5]
          && v60[5] <= v61[7])
        {
          if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v60, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v61, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
          v51 = v139;
        }
        v59 += 8;
      }
      while (v59 != v51);
      v52 = v142;
    }
    v53 += 8;
  }
  while (v53 != v52);
  v53 = (char *)v141;
  if (v141 != v52)
  {
LABEL_39:
    v58 = v136;
    if (v135 != v136)
    {
      do
      {
        v63 = (char *)v135;
        if (v135 != v58)
        {
          do
          {
            v64 = *(_QWORD **)v53;
            v65 = *(_QWORD **)v63;
            if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)v63 + 32)
              && v64[4] <= v65[6]
              && v64[7] >= v65[5]
              && v64[5] <= v65[7])
            {
              if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v64, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v65, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v58 = v136;
            }
            v63 += 8;
          }
          while (v63 != v58);
          v52 = v142;
        }
        v53 += 8;
      }
      while (v53 != v52);
    }
  }
LABEL_80:
  v83 = (int64x2_t **)__p;
  v82 = v133;
  if (__p == v133)
    goto LABEL_117;
  v85 = v147;
  v84 = v148;
  if ((unint64_t)(v148 - v147) < 0x80
    || (unint64_t)(v145 - (_BYTE *)v144) < 0x80
    || a4 > 0x63
    || (unint64_t)(v133 - (_BYTE *)__p) < 0x79)
  {
    if (v147 == v148)
    {
      v102 = (char *)v144;
      v101 = v145;
      if (v144 == v145 || __p == v133)
        goto LABEL_117;
    }
    else
    {
      do
      {
        v104 = (char *)__p;
        if (__p != v82)
        {
          do
          {
            v105 = *(_QWORD **)v85;
            v106 = *(_QWORD **)v104;
            if (*(_QWORD *)(*(_QWORD *)v85 + 48) >= *(_QWORD *)(*(_QWORD *)v104 + 32)
              && v105[4] <= v106[6]
              && v105[7] >= v106[5]
              && v105[5] <= v106[7])
            {
              if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v105, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v106, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v82 = v133;
            }
            v104 += 8;
          }
          while (v104 != v82);
          v84 = v148;
        }
        v85 += 8;
      }
      while (v85 != v84);
      v102 = (char *)v144;
      v101 = v145;
      if (v144 == v145 || __p == v82)
        goto LABEL_117;
    }
    do
    {
      v111 = (char *)__p;
      if (__p != v82)
      {
        do
        {
          v112 = *(_QWORD **)v102;
          v113 = *(_QWORD **)v111;
          if (*(_QWORD *)(*(_QWORD *)v102 + 48) >= *(_QWORD *)(*(_QWORD *)v111 + 32)
            && v112[4] <= v113[6]
            && v112[7] >= v113[5]
            && v112[5] <= v113[7])
          {
            if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v112, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v113, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
            v82 = v133;
          }
          v111 += 8;
        }
        while (v111 != v82);
        v101 = v145;
      }
      v102 += 8;
    }
    while (v102 != v101);
    goto LABEL_117;
  }
  v86 = vdupq_n_s64(0x8000000000000000);
  v87 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v88 = (int8x16_t)v87;
  v89 = (int8x16_t)v86;
  do
  {
    v90 = *v83++;
    v91 = v90[2];
    v92 = v90[3];
    v93 = (int8x16_t)vcgtq_s64(v87, v91);
    v94 = vbslq_s8(v93, (int8x16_t)v91, v88);
    v95 = (int64x2_t)vbslq_s8(v93, (int8x16_t)v91, (int8x16_t)v87);
    v96 = (int8x16_t)vcgtq_s64(v95, v92);
    v88 = vbslq_s8(v96, (int8x16_t)v92, v94);
    v87 = (int64x2_t)vbslq_s8(v96, (int8x16_t)v92, (int8x16_t)v95);
    v97 = (int8x16_t)vcgtq_s64(v91, v86);
    v98 = vbslq_s8(v97, (int8x16_t)v91, v89);
    v99 = (int64x2_t)vbslq_s8(v97, (int8x16_t)v91, (int8x16_t)v86);
    v100 = (int8x16_t)vcgtq_s64(v92, v99);
    v89 = vbslq_s8(v100, (int8x16_t)v92, v98);
    v86 = (int64x2_t)vbslq_s8(v100, (int8x16_t)v92, (int8x16_t)v99);
  }
  while (v83 != (int64x2_t **)v133);
  v130 = v88;
  v131 = v89;
  if (!sub_223EC1100((__int128 *)v130.i8, &v147, &__p, a4 + 1, a5, a6, a7)
    || (sub_223EC1100((__int128 *)v130.i8, &v144, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_175;
  }
LABEL_117:
  v110 = v147;
  v109 = v148;
  if ((unint64_t)(v148 - v147) < 0x80 || a4 > 0x63 || (unint64_t)(v139 - (_BYTE *)v138) < 0x79)
  {
    if (v147 != v148)
    {
      v115 = v139;
      if (v138 != v139)
      {
        do
        {
          v118 = (char *)v138;
          if (v138 != v115)
          {
            do
            {
              v119 = *(_QWORD **)v110;
              v120 = *(_QWORD **)v118;
              if (*(_QWORD *)(*(_QWORD *)v110 + 48) >= *(_QWORD *)(*(_QWORD *)v118 + 32)
                && v119[4] <= v120[6]
                && v119[7] >= v120[5]
                && v119[5] <= v120[7])
              {
                if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v119, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v120, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v115 = v139;
              }
              v118 += 8;
            }
            while (v118 != v115);
            v109 = v148;
          }
          v110 += 8;
        }
        while (v110 != v109);
      }
    }
  }
  else if ((sub_223EC1100(&v151, &v147, &v138, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_175;
  }
  v117 = (char *)v144;
  v116 = v145;
  if ((unint64_t)(v145 - (_BYTE *)v144) < 0x80 || a4 > 0x63 || (unint64_t)(v136 - (_BYTE *)v135) < 0x79)
  {
    if (v144 != v145)
    {
      v122 = v136;
      if (v135 != v136)
      {
        do
        {
          v125 = (char *)v135;
          if (v135 != v122)
          {
            do
            {
              v126 = *(_QWORD **)v117;
              v127 = *(_QWORD **)v125;
              if (*(_QWORD *)(*(_QWORD *)v117 + 48) >= *(_QWORD *)(*(_QWORD *)v125 + 32)
                && v126[4] <= v127[6]
                && v126[7] >= v127[5]
                && v126[5] <= v127[7])
              {
                if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v126, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v127, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v122 = v136;
              }
              v125 += 8;
            }
            while (v125 != v122);
            v116 = v145;
          }
          v117 += 8;
        }
        while (v117 != v116);
      }
    }
  }
  else if ((sub_223EC1100(v150, &v144, &v135, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_175;
  }
  v123 = 1;
  v124 = (char *)__p;
  if (__p)
  {
LABEL_176:
    v133 = v124;
    operator delete(v124);
  }
LABEL_177:
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  if (v144)
  {
    v145 = (char *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  return v123;
}

