void sub_22389353C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223893550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2238935A8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223893B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223893B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223893B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223893BAC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6, unsigned __int8 *a7, float *a8)
{
  size_t v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  double v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[24];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v15 = _os_log_pack_size();
    v16 = (std::__shared_weak_count_vtbl *)operator new(v15, (std::align_val_t)8uLL);
    v17 = (std::__shared_weak_count *)operator new();
    v18 = v17;
    v17->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v16;
    *(_QWORD *)v50 = v16;
    *(_QWORD *)&v50[8] = v16;
    *(_QWORD *)&v50[16] = v17;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v51 = 0uLL;
    v52 = 0;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
    v22 = *(_QWORD *)v50;
    v23 = _os_log_pack_fill();
    v24 = *a5;
    v25 = *a6;
    v26 = *a7;
    v27 = *a8;
    *(_DWORD *)v23 = 134218752;
    *(_QWORD *)(v23 + 4) = v24;
    *(_WORD *)(v23 + 12) = 2048;
    *(_QWORD *)(v23 + 14) = v25;
    *(_WORD *)(v23 + 22) = 1024;
    *(_DWORD *)(v23 + 24) = v26;
    *(_WORD *)(v23 + 28) = 2048;
    *(double *)(v23 + 30) = v27;
    v28 = operator new();
    v29 = *((unsigned __int8 *)a2 + 23);
    if ((v29 & 0x80u) == 0)
      v30 = a2;
    else
      v30 = (uint64_t *)*a2;
    if ((v29 & 0x80u) != 0)
      v29 = a2[1];
    *(_QWORD *)v28 = v22;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)&v50[8];
    *(_OWORD *)&v50[8] = 0uLL;
    *(_OWORD *)(v28 + 24) = v51;
    v51 = 0uLL;
    *(_QWORD *)(v28 + 40) = v30;
    *(_QWORD *)(v28 + 48) = v29;
    *(_BYTE *)(v28 + 56) = type;
    v49 = v28;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v49);
    v31 = v49;
    v49 = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 32);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(v31 + 16);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      MEMORY[0x227684CE8](v31, 0x10F0C40B62ED6C6);
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(std::__shared_weak_count **)&v50[16];
    if (*(_QWORD *)&v50[16])
    {
      v42 = (unint64_t *)(*(_QWORD *)&v50[16] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v44 = *a5;
    v45 = *a6;
    v46 = *a7;
    v47 = *a8;
    *(_DWORD *)v50 = 134218752;
    *(_QWORD *)&v50[4] = v44;
    *(_WORD *)&v50[12] = 2048;
    *(_QWORD *)&v50[14] = v45;
    *(_WORD *)&v50[22] = 1024;
    LODWORD(v51) = v46;
    WORD2(v51) = 2048;
    *(double *)((char *)&v51 + 6) = v47;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
  }
}

void sub_22389400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223894030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223894044(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223894068(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2238945DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223894600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223894614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22389466C(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;
  char v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;

  v2 = a1 + 1;
  v3 = a1[1];
  if (v3)
  {
    v6 = a1 + 1;
    do
    {
      v7 = sub_22319835C((unsigned __int8 *)(v3 + 32), a2);
      if (v7 >= 0)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7 >= 0)
        v6 = (_QWORD *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v6 != v2 && (sub_22319835C(a2, (unsigned __int8 *)v6 + 32) & 0x80) == 0)
    {
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        v11 = v6;
        do
        {
          v10 = (_QWORD *)v11[2];
          v12 = *v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (!v12);
      }
      if ((_QWORD *)*a1 == v6)
        *a1 = v10;
      v13 = (uint64_t *)a1[1];
      --a1[2];
      sub_2231AFE60(v13, v6);
      operator delete(v6);
    }
  }
}

_DWORD *sub_223894758(_DWORD ***a1)
{
  return sub_223894774(**a1, (char *)(*a1)[1]);
}

void sub_223894764(uint64_t a1, uint64_t a2)
{
  sub_223894864((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223894774(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B2E0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223894864(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5B2E0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223894A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223894A5C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223894B54((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223894B4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223894B54(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223894D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223894D68()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223894D7C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5BB78;
  result[1] = v3;
  return result;
}

uint64_t sub_223894DB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5BB78;
  a2[1] = v2;
  return result;
}

BOOL sub_223894DCC(uint64_t a1, _QWORD *a2)
{
  return sub_2231A88F8((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1232) + 320), a2) != 0;
}

uint64_t sub_223894DF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrategyERKN3cva6M"
                     "atrixIfLj3ELj1ELb1EEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrateg"
                                "yERKN3cva6MatrixIfLj3ELj1ELb1EEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223894E60()
{
  return &unk_24EC5BBD8;
}

uint64_t sub_223894E6C(uint64_t a1)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24EC20F48;
  v2 = a1 + 24;
  bzero((void *)(a1 + 24), 0x228uLL);
  sub_22345F608(v2);
  *(_QWORD *)(a1 + 24) = &off_24EC21D68;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  v4 = 0;
  *(_BYTE *)(a1 + 524) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  v7 = 0;
  v8 = 0;
  v5 = 0;
  v6 = 0;
  sub_223208FD4(a1 + 528, (unsigned int *)&v5, &v7, 1, &v4, 1, 0);
  return a1;
}

void sub_223894F30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  _QWORD *v3;

  sub_2231F4908(v3);
  sub_2231D0094(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_223894F54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_223894F6C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223894F80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5BBF8;
  result[1] = v3;
  return result;
}

uint64_t sub_223894FB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5BBF8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_223894FD0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_22319597C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1232), a2, a3);
}

uint64_t sub_223894FDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrategyERKN3cva6M"
                     "atrixIfLj3ELj1ELb1EEEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrateg"
                                "yERKN3cva6MatrixIfLj3ELj1ELb1EEEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine28FlushPendingUpdatedKeyframesERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223895048()
{
  return &unk_24EC5BC58;
}

_DWORD *sub_223895054(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B2E0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223895144(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  void **v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  void *v21;
  __int128 v22;
  _BYTE v23[15];
  _BYTE v24[15];
  _BYTE v25[15];

  if (*(_BYTE *)(a1 + 120))
    v7 = *(_BYTE *)(a2 + 120) == 0;
  else
    v7 = 1;
  if (!v7)
    return;
  if (!*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(a2 + 120))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (*(_BYTE *)(a1 + 112))
      {
        v15 = (void **)(a1 + 16);
        *(_BYTE *)(a2 + 40) = 0;
        if (*(_BYTE *)(a1 + 40))
        {
          v16 = *(_OWORD *)v15;
          *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
          *(_OWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *v15 = 0;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (*(_BYTE *)(a1 + 104))
        {
          v17 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
          *(_OWORD *)(a2 + 48) = v17;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
          v18 = *(_OWORD *)(a1 + 80);
          *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
          *(_OWORD *)(a2 + 80) = v18;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        if (*(_BYTE *)(a1 + 112))
        {
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(char *)(a1 + 103) < 0)
              operator delete(*(void **)(a1 + 80));
            if (*(char *)(a1 + 71) < 0)
              operator delete(*(void **)(a1 + 48));
          }
          if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
            operator delete(*v15);
        }
      }
      v19 = *(_BYTE *)(a1 + 120);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      goto LABEL_31;
    }
LABEL_29:
    sub_22370173C((__int128 *)a1, (__int128 *)a2);
    return;
  }
  if (*(_BYTE *)(a2 + 120))
    goto LABEL_29;
  v22 = *(_OWORD *)a2;
  if (!*(_BYTE *)(a2 + 112))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v19 = 1;
LABEL_31:
    *(_BYTE *)(a2 + 120) = v19;
    return;
  }
  v10 = (void **)(a2 + 16);
  v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v12 = *(void **)(a2 + 16);
    *(_QWORD *)v25 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v25[7] = *(_QWORD *)(a2 + 31);
    v2 = *(_BYTE *)(a2 + 39);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *v10 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
      goto LABEL_11;
  }
  else
  {
    v12 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
    {
LABEL_11:
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)v24 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)&v24[7] = *(_QWORD *)(a2 + 63);
      v5 = *(_BYTE *)(a2 + 71);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v6 = *(_QWORD *)(a2 + 72);
      v3 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)v23 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)&v23[7] = *(_QWORD *)(a2 + 95);
      v4 = *(_BYTE *)(a2 + 103);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      if (!v11)
        goto LABEL_37;
      goto LABEL_35;
    }
  }
  v14 = 0;
  if (!v11)
    goto LABEL_37;
LABEL_35:
  if (*(char *)(a2 + 39) < 0)
  {
    v21 = v12;
    operator delete(*v10);
    v12 = v21;
    *(_OWORD *)a1 = v22;
    *(_BYTE *)(a1 + 112) = 0;
LABEL_38:
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v25;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)&v25[7];
    *(_BYTE *)(a1 + 39) = v2;
    *(_BYTE *)(a1 + 40) = 1;
    v12 = 0;
    v2 = 0;
    goto LABEL_39;
  }
LABEL_37:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_38;
LABEL_39:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)v24;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)&v24[7];
    *(_BYTE *)(a1 + 71) = v5;
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)v23;
    *(_QWORD *)(a1 + 95) = *(_QWORD *)&v23[7];
    *(_BYTE *)(a1 + 103) = v4;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  v20 = *(_BYTE *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a2 + 120) = v20;
  if (v11)
  {
    if (v2 < 0)
      operator delete(v12);
  }
}

uint64_t sub_22389549C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2238955D4(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2238955A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2238955D4@<X0>(char *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  _BYTE *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _BYTE *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 0;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(1uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_223895764(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22389577C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2238957B4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x227684CE8](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_223895B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223895B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223895B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_223895BA0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 __p;
  char v15;
  char v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    LOBYTE(__p) = 0;
    v16 = 0;
    sub_22356F814(a3, &__p, a5, v17);
    sub_2231AA5A4(a1, v9, (uint64_t)v17);
    v10 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v16 && v15 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

void sub_223895C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2241231D8((uint64_t)&a18);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_223895CB4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x227684CE8](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_223896098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2238960BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238960D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_2238960F8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22389610C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5BC78;
  result[1] = v3;
  return result;
}

uint64_t sub_223896140(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5BC78;
  a2[1] = v2;
  return result;
}

void sub_22389615C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_223192F24(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1232), a2, a3);
}

uint64_t sub_223896168(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d5recon2kf14KeyframeEngine13SaveKeyframesERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_"
                     "9allocatorIcEEEEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d5recon2kf14KeyframeEngine13SaveKeyframesERKNSt3__112basic_stringIcNS3_11char_tra"
                                "itsIcEENS3_9allocatorIcEEEEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d5recon2kf14KeyframeEngine13SaveKeyframesERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d5recon2kf14KeyframeEngine13SaveKeyframesERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2238961D4()
{
  return &unk_24EC5BCD8;
}

void sub_2238961E0(char *a1)
{
  void *v2;

  if (a1)
  {
    sub_2238961E0(*(_QWORD *)a1);
    sub_2238961E0(*((_QWORD *)a1 + 1));
    v2 = (void *)*((_QWORD *)a1 + 7);
    if (v2)
    {
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v2);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_223896248(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2238967BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2238967E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238967F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22389684C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223896DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223896DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223896DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223896E50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = off_24EC5BCF8;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return a1;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223896EF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC5BCF8;
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v2)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_11:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223896F9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x50uLL);
  *v2 = off_24EC5BCF8;
  sub_223898230((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223896FDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223896FF0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24EC5BCF8;
  return sub_223898230((uint64_t)(a2 + 1), a1 + 8);
}

void sub_22389700C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_22389709C(void **__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((char *)__p + 79) < 0)
  {
    operator delete(__p[7]);
    if ((*((char *)__p + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = (std::__shared_weak_count *)__p[2];
      if (!v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)__p + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[3]);
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_4;
LABEL_8:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
    return;
  }
LABEL_4:
  operator delete(__p);
}

void sub_223897134(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  size_t v28;
  size_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  char *v39;
  char *shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void **v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  const char *v62;
  int v63;
  const char *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  void *__p[2];
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  std::string v77;
  int v78;
  const char *v79;
  int v80;
  const char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  void *v85[2];
  char v86;
  _BYTE v87[2];
  _BYTE __dst[24];
  unint64_t v89;
  char v90;
  void *v91[2];
  unint64_t v92;
  char v93;
  _BYTE v94[15];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v65) = 0;
  v76 = *(_BYTE *)(a2 + 120);
  if (!v76)
  {
    v65 = *(_OWORD *)a2;
    LOBYTE(v66) = 0;
    v75 = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      v68 = 0;
      if (*(_BYTE *)(a2 + 40))
      {
        v66 = *(_OWORD *)(a2 + 16);
        v67 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v68 = 1;
      }
      LOBYTE(v69) = 0;
      v74 = 0;
      if (*(_BYTE *)(a2 + 104))
      {
        v3 = *(_QWORD *)(a2 + 72);
        v70 = *(_QWORD *)(a2 + 64);
        v69 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        v71 = v3;
        *(_OWORD *)__p = *(_OWORD *)(a2 + 80);
        v73 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        v74 = 1;
      }
      v75 = 1;
    }
    *(_QWORD *)__dst = operator new(0x38uLL);
    *(_OWORD *)&__dst[8] = xmmword_2245C4520;
    strcpy(*(char **)__dst, "; KeyframeEngine::SaveSnapshotTo failed during cloning.");
    sub_22456B704(&v65, (void **)__dst);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    sub_22384BA54(&v84);
    if (**(int **)(v84 + 56) > 4
      || (v4 = *(unsigned __int8 *)(v84 + 72), v5 = sub_22322F254(v84, "OSLogSurrogateAppender", 1, 0), v6 = v5, !v4)
      && !v5)
    {
LABEL_126:
      v11 = 0;
      v12 = **(_QWORD **)(a1 + 8);
      if (v12)
        goto LABEL_26;
      goto LABEL_127;
    }
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
    v77.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v77.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v78 = 4;
    v79 = "unknown file";
    v80 = 1901;
    v82 = 0;
    v83 = 0;
    v81 = "unknown function";
    LODWORD(v89) = 0;
    sub_2232EDA70((uint64_t)v94, (std::string::size_type)__dst, (uint64_t)&v65);
    if ((_DWORD)v89 == -1)
      sub_22316DD70();
    *(_QWORD *)v94 = v87;
    ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC5B328[v89])(v85, v94, __dst);
    if ((_DWORD)v89 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24EC5B2E0[v89])(v94, __dst);
    v7 = v85;
    if (v86 < 0)
      v7 = (void **)v85[0];
    v64 = (const char *)v7;
    v8 = *(_QWORD *)v77.__r_.__value_.__l.__data_;
    v9 = (const char *)(*(_QWORD *)v77.__r_.__value_.__l.__data_ + 16);
    v62 = v9;
    if (*(char *)(*(_QWORD *)v77.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v9 = *(const char **)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 24);
    }
    else
    {
      v10 = *(unsigned __int8 *)(*(_QWORD *)v77.__r_.__value_.__l.__data_ + 39);
    }
    v63 = v4;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__dst);
      if ((_BYTE)v89)
      {
        *(_OWORD *)byte_255788F40 = *(_OWORD *)__dst;
        *(_QWORD *)&byte_255788F40[16] = *(_QWORD *)&__dst[16];
      }
      else
      {
        byte_255788F40[23] = 14;
        strcpy(byte_255788F40, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v15 = byte_255788F40;
    else
      v15 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v16 = byte_255788F40[23];
    else
      v16 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)__dst = os_log_create(v15, v9);
    v17 = &__dst[8];
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      v17 = operator new(v18 + 1);
      *(_QWORD *)&__dst[16] = v16;
      v89 = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst[8] = v17;
    }
    else
    {
      HIBYTE(v89) = v16;
      if (!v16)
      {
LABEL_58:
        v17[v16] = 0;
        v90 = 1;
        v20 = v91;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v10 >= 0x17)
        {
          v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v21 = v10 | 7;
          v22 = v21 + 1;
          v20 = (void **)operator new(v21 + 1);
          v91[1] = (void *)v10;
          v92 = v22 | 0x8000000000000000;
          v91[0] = v20;
        }
        else
        {
          HIBYTE(v92) = v10;
          if (!v10)
          {
LABEL_66:
            *((_BYTE *)v20 + v10) = 0;
            v93 = 1;
            v23 = *(NSObject **)__dst;
            if (SHIBYTE(v92) < 0)
              operator delete(v91[0]);
            if (v90 && SHIBYTE(v89) < 0)
              operator delete(*(void **)&__dst[8]);
            if (*(_QWORD *)__dst)
              os_release(*(void **)__dst);
            if (!v6 || !*(_QWORD *)(v6 + 24))
            {
              os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
              *(_DWORD *)__dst = 136315138;
              *(_QWORD *)&__dst[4] = v64;
              v31 = (void *)_os_log_send_and_compose_impl();
              if (v31)
                free(v31);
              goto LABEL_110;
            }
            v24 = _os_log_pack_size();
            v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
            v26 = (std::__shared_weak_count *)operator new();
            v26->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v26->__shared_weak_owners_ = 0;
            v26[1].__vftable = v25;
            v60 = v25;
            v28 = strlen(v64);
            v61 = v26;
            if (v28 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v29 = v28;
            if (v28 >= 0x17)
            {
              v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17)
                v32 = v28 | 7;
              v33 = v32 + 1;
              v30 = operator new(v32 + 1);
              *(_QWORD *)&__dst[8] = v29;
              *(_QWORD *)&__dst[16] = v33 | 0x8000000000000000;
              *(_QWORD *)__dst = v30;
            }
            else
            {
              __dst[23] = v28;
              v30 = __dst;
              if (!v28)
              {
LABEL_85:
                v30[v29] = 0;
                v34 = *(_QWORD *)__dst;
                *(_QWORD *)v94 = *(_QWORD *)&__dst[8];
                *(_QWORD *)&v94[7] = *(_QWORD *)&__dst[15];
                v35 = __dst[23];
                v36 = operator new(0x38uLL);
                v37 = (std::__shared_weak_count *)v36;
                v36[1] = 0;
                v38 = v36 + 1;
                v36[3] = off_24EC1FA48;
                v39 = (char *)(v36 + 3);
                v36[2] = 0;
                v36[4] = v34;
                shared_owners = (char *)(v36 + 4);
                *v36 = &off_24EC1F9F8;
                v36[5] = *(_QWORD *)v94;
                *(_QWORD *)((char *)v36 + 47) = *(_QWORD *)&v94[7];
                *((_BYTE *)v36 + 55) = v35;
                do
                  v41 = __ldxr(p_shared_owners);
                while (__stxr(v41 + 1, p_shared_owners));
                do
                  v42 = __ldxr(v38);
                while (__stxr(v42 + 1, v38));
                do
                  v43 = __ldaxr(v38);
                while (__stlxr(v43 - 1, v38));
                if (!v43)
                {
                  (*(void (**)(_QWORD *))(*v36 + 16))(v36);
                  std::__shared_weak_count::__release_weak(v37);
                }
                do
                  v44 = __ldaxr(p_shared_owners);
                while (__stlxr(v44 - 1, p_shared_owners));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
                if (SHIBYTE(v37[2].__vftable) < 0)
                  shared_owners = (char *)v37[1].__shared_owners_;
                v45 = _os_log_pack_fill();
                *(_DWORD *)v45 = 136315138;
                *(_QWORD *)(v45 + 4) = shared_owners;
                v46 = operator new();
                v47 = *(unsigned __int8 *)(v8 + 39);
                v48 = v62;
                if ((v47 & 0x80u) != 0)
                {
                  v48 = *(const char **)(v8 + 16);
                  v47 = *(_QWORD *)(v8 + 24);
                }
                *(_QWORD *)v46 = v60;
                *(_QWORD *)(v46 + 8) = v60;
                *(_QWORD *)(v46 + 16) = v61;
                *(_QWORD *)(v46 + 24) = v39;
                *(_QWORD *)(v46 + 32) = v37;
                *(_QWORD *)(v46 + 40) = v48;
                *(_QWORD *)(v46 + 48) = v47;
                *(_BYTE *)(v46 + 56) = 16;
                *(_QWORD *)__dst = v46;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), __dst);
                v49 = *(_QWORD *)__dst;
                *(_QWORD *)__dst = 0;
                if (v49)
                {
                  v50 = *(std::__shared_weak_count **)(v49 + 32);
                  if (v50)
                  {
                    v51 = (unint64_t *)&v50->__shared_owners_;
                    do
                      v52 = __ldaxr(v51);
                    while (__stlxr(v52 - 1, v51));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                      std::__shared_weak_count::__release_weak(v50);
                    }
                  }
                  v53 = *(std::__shared_weak_count **)(v49 + 16);
                  if (v53)
                  {
                    v54 = (unint64_t *)&v53->__shared_owners_;
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                  }
                  MEMORY[0x227684CE8](v49, 0x10F0C40B62ED6C6);
                }
LABEL_110:
                if (v86 < 0)
                  operator delete(v85[0]);
                if (v63)
                {
                  LODWORD(v89) = 0;
                  sub_2232EDA70((uint64_t)v94, (std::string::size_type)__dst, (uint64_t)&v65);
                  if ((_DWORD)v89 == -1)
                    sub_22316DD70();
                  *(_QWORD *)v94 = v87;
                  ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC5B328[v89])(v85, v94, __dst);
                  if ((_DWORD)v89 != -1)
                    ((void (*)(_BYTE *, _BYTE *))off_24EC5B2E0[v89])(v94, __dst);
                  v56 = v85;
                  if (v86 < 0)
                    v56 = (void **)v85[0];
                  sub_22322C138((uint64_t)&v77, "%s", (const char *)v56);
                  if (v86 < 0)
                    operator delete(v85[0]);
                  sub_223182C08((uint64_t)&v77);
                }
                sub_223182C08((uint64_t)&v77);
                v57 = v83;
                if (v83)
                {
                  v58 = (unint64_t *)&v83->__shared_owners_;
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                goto LABEL_126;
              }
            }
            memcpy(v30, v64, v29);
            goto LABEL_85;
          }
        }
        memmove(v20, v9, v10);
        goto LABEL_66;
      }
    }
    memmove(v17, v15, v16);
    goto LABEL_58;
  }
  sub_22320846C((uint64_t)&v65);
  memset(&v77, 0, sizeof(v77));
  sub_2231816F0(&v77, (std::string *)"metadata", (std::string *)"");
  if (*(char *)(a1 + 47) < 0)
  {
    sub_223197FA4(__dst, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 24);
    *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 40);
  }
  sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)&v77);
  sub_223FE17D4(a1 + 56, (uint64_t)__dst, *(_QWORD ***)(a1 + 48));
  if ((__dst[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_40;
  }
  operator delete(*(void **)__dst);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_40:
    operator delete(v77.__r_.__value_.__l.__data_);
    v11 = 1;
    v12 = **(_QWORD **)(a1 + 8);
    if (v12)
      goto LABEL_26;
LABEL_127:
    sub_2233236D4(3u);
  }
LABEL_25:
  v11 = 1;
  v12 = **(_QWORD **)(a1 + 8);
  if (!v12)
    goto LABEL_127;
LABEL_26:
  std::mutex::lock((std::mutex *)(v12 + 24));
  if ((*(_BYTE *)(v12 + 136) & 1) != 0
    || (*(_QWORD *)__dst = 0,
        v13 = *(_QWORD *)(v12 + 16),
        std::exception_ptr::~exception_ptr((std::exception_ptr *)__dst),
        v13))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(v12 + 140) = v11;
  *(_DWORD *)(v12 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v12 + 88));
  std::mutex::unlock((std::mutex *)(v12 + 24));
  if (!v76 && v75)
  {
    if (v74)
    {
      if (SHIBYTE(v73) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v70) < 0)
        operator delete((void *)v69);
    }
    if (v68)
    {
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
    }
  }
}

void sub_223897BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,char a41,int a42,char a43,int a44,__int16 a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  __cxa_guard_abort(&qword_255788F58);
  if (a60 < 0)
    operator delete(__p);
  sub_223182C08((uint64_t)&a45);
  v61 = (std::__shared_weak_count *)a53;
  if (a53)
  {
    v62 = (unint64_t *)(a53 + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (!a43 && a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(a33);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25)
    {
      if (a24 < 0)
        operator delete(a19);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223897EAC(uint64_t a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x2238981B0);
}

void sub_223897EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,char a41,int a42,char a43)
{
  uint64_t v43;

  if (*(char *)(v43 - 217) < 0)
    operator delete(*(void **)(v43 - 240));
  if (!a43 && a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(a33);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25)
    {
      if (a24 < 0)
        operator delete(a19);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223897ED8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x223897EE0);
  JUMPOUT(0x2238981B0);
}

void sub_223897EE8(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (*(char *)(v2 - 217) < 0)
      operator delete(*(void **)(v2 - 240));
    JUMPOUT(0x223897F10);
  }
  JUMPOUT(0x2238981B0);
}

void sub_223897F08(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,__int128 __p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,__int128 __dst,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,int a62,__int16 a63)
{
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  __int128 *p_dst;
  _QWORD *exception;

  if (a2)
  {
    if (SHIBYTE(a34) < 0)
      operator delete((void *)__p);
    __cxa_begin_catch(a1);
    if (*(char *)(v63 + 47) < 0)
    {
      sub_223197FA4(&__dst, *(void **)(v63 + 24), *(_QWORD *)(v63 + 32));
    }
    else
    {
      __dst = *v64;
      a43 = *((_QWORD *)v64 + 2);
    }
    p_dst = &__dst;
    if (a43 < 0)
      p_dst = (__int128 *)__dst;
    *(_QWORD *)(v65 - 120) = p_dst;
    sub_22389834C((uint64_t)&__p, (const char *)(v65 - 120));
    if (SHIBYTE(a34) < 0)
    {
      sub_223197FA4(&a45, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      a45 = __p;
      a46 = a34;
    }
    a47 = 1;
    LOBYTE(a48) = 0;
    a61 = 0;
    LOBYTE(a63) = 1;
    sub_2231A958C(5u, &a45, v65 - 240);
    sub_2238984B8((uint64_t)&a17, (__int128 *)(v65 - 240));
    if (*(_BYTE *)(v65 - 128))
    {
      if (*(_BYTE *)(v65 - 136))
      {
        if (*(char *)(v65 - 137) < 0)
          operator delete(*(void **)(v65 - 160));
        if (*(char *)(v65 - 169) < 0)
          operator delete(*(void **)(v65 - 192));
      }
      if (*(_BYTE *)(v65 - 200) && *(char *)(v65 - 201) < 0)
        operator delete(*(void **)(v65 - 224));
    }
    if ((_BYTE)a63)
    {
      if (a61)
      {
        if (a60 < 0)
          operator delete(a55);
        if (a53 < 0)
          operator delete(a48);
      }
      if (a47 && SHIBYTE(a46) < 0)
        operator delete((void *)a45);
    }
    if (SHIBYTE(a34) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(a43) < 0)
      operator delete((void *)__dst);
    __cxa_end_catch();
    if (a32)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    JUMPOUT(0x223897264);
  }
  JUMPOUT(0x2238981B0);
}

void sub_2238980B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,char a41,int a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a49 < 0)
    operator delete(__p);
  if (a62 < 0)
    operator delete(a57);
  __cxa_end_catch();
  if (!a43 && a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(a33);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25)
    {
      if (a24 < 0)
        operator delete(a19);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223898140(uint64_t a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x2238981B0);
}

void sub_22389814C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,char a41,int a42,char a43)
{
  std::mutex *v43;

  std::mutex::unlock(v43);
  if (!a43 && a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(a33);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25)
    {
      if (a24 < 0)
        operator delete(a19);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2238981B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine14SaveSnapshotToENS0_14SnapshotPolicyERKNSt3__14__fs10filesystem4pathEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine14SaveSnapshotToENS0_14SnapshotPolicyERKNSt3__14__fs10fi"
                                "lesystem4pathEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine14SaveSnapshotToENS0_14SnapshotPolicyERKNSt3__14__fs10filesystem4pathEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine14SaveSnapshotToENS0_14SnapshotPolicyERKNSt3__14__fs10filesystem4pathEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223898224()
{
  return &unk_24EC5BD80;
}

uint64_t sub_223898230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = (_BYTE *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_223197FA4(v8, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

void sub_2238982F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22389834C(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_2232CFAFC(v4, "Error cloning metadata db to: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC5BD68[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5B2F8[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5B328[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5B2E0[v5])(&v6, v4);
  return result;
}

void sub_22389847C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223898490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238984A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2238984B8(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  BOOL v4;
  __int128 v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v6 = *a2;
  LOBYTE(__p[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v9 = 0;
    if (*((_BYTE *)a2 + 40))
    {
      *(_OWORD *)__p = a2[1];
      v8 = *((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 2) = 0;
      v9 = 1;
    }
    LOBYTE(v10) = 0;
    v15 = 0;
    if (*((_BYTE *)a2 + 104))
    {
      v3 = *((_QWORD *)a2 + 9);
      v11 = *((_QWORD *)a2 + 8);
      v10 = a2[3];
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      *((_QWORD *)a2 + 6) = 0;
      v12 = v3;
      *(_OWORD *)v13 = a2[5];
      v14 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      *((_QWORD *)a2 + 12) = 0;
      v15 = 1;
    }
    v16 = 1;
  }
  v17 = 0;
  sub_223895144((uint64_t)&v6, a1);
  if (v17)
    v4 = 1;
  else
    v4 = v16 == 0;
  if (!v4)
  {
    if (!v15)
      goto LABEL_14;
    if (SHIBYTE(v14) < 0)
    {
      operator delete(v13[0]);
      if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
LABEL_14:
        if (!v9)
          return a1;
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)v10);
    if (!v9)
      return a1;
LABEL_15:
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

uint64_t sub_223898600@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  void **v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x2_t v38;
  unint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  const char *v55;
  size_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  size_t v67;
  size_t v68;
  void ***v69;
  void *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  const char *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  int v126;
  char *__s;
  uint64_t *v131;
  void *__p[2];
  char v133;
  _QWORD v134[3];
  int v135;
  const char *v136;
  int v137;
  const char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  void *v142[2];
  std::__shared_weak_count *v143;
  char *v144;
  std::__shared_weak_count *v145;
  void **v146;
  __int128 v147;
  _BYTE v148[24];
  __int128 v149;
  void *v150[2];
  unint64_t v151;
  char v152;
  _QWORD v153[5];

  v153[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v15 = (_QWORD *)*a1;
  v13 = a1 + 1;
  v14 = v15;
  if (v15 != v13)
  {
    v16 = a8 * a8;
    v122 = a6;
    v123 = a5;
    v131 = a7;
    while (1)
    {
      v17 = (_OWORD *)((char *)v14 + 25);
      *(_OWORD *)v148 = *(_OWORD *)((char *)v14 + 25);
      if (sub_223340F28(a6, (uint64_t)v148))
        break;
      sub_2238995FC(&v141);
      if (**(int **)(v141 + 56) <= 4)
      {
        v24 = *(unsigned __int8 *)(v141 + 72);
        v25 = sub_22322F254(v141, "OSLogSurrogateAppender", 1, 0);
        v26 = v25;
        v27 = !v24 && v25 == 0;
        if (!v27)
        {
          v134[0] = &v141;
          v134[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v134[2] = std::chrono::system_clock::now().__d_.__rep_;
          v135 = 4;
          v136 = "unknown file";
          v137 = 542;
          v138 = "unknown function";
          v139 = 0;
          v140 = 0;
          LODWORD(v149) = 0;
          sub_22319B83C((uint64_t)v142, (uint64_t)v148, (unsigned __int8 *)v14 + 25);
          if ((_DWORD)v149 == -1)
            sub_22316DD70();
          v142[0] = &v146;
          ((void (*)(void **__return_ptr, void **, _BYTE *))off_24EC5BEC0[v149])(__p, v142, v148);
          if ((_DWORD)v149 != -1)
            ((void (*)(void **, _BYTE *))off_24EC5BEA8[v149])(v142, v148);
          v126 = v24;
          v28 = __p;
          if (v133 < 0)
            v28 = (void **)__p[0];
          __s = (char *)v28;
          v29 = *(_QWORD *)v134[0];
          v30 = (const char *)(*(_QWORD *)v134[0] + 16);
          v124 = v30;
          v125 = *(_QWORD *)v134[0];
          if (*(char *)(*(_QWORD *)v134[0] + 39) < 0)
          {
            v30 = *(const char **)(v29 + 16);
            v31 = *(_QWORD *)(v29 + 24);
            v54 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v54 & 1) == 0)
            {
LABEL_182:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v142);
                sub_223199C58("com.apple.cv3d", (unint64_t)v142, &xmmword_255788F40);
                if ((_BYTE)v144 && SHIBYTE(v143) < 0)
                  operator delete(v142[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                a6 = v122;
              }
            }
          }
          else
          {
            v31 = *(unsigned __int8 *)(*(_QWORD *)v134[0] + 39);
            v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v32 & 1) == 0)
              goto LABEL_182;
          }
          if (byte_255788F57 >= 0)
            v55 = (const char *)&xmmword_255788F40;
          else
            v55 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v56 = byte_255788F57;
          else
            v56 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)v148 = os_log_create(v55, v30);
          if (v56 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v56 >= 0x17)
          {
            v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v56 | 7) != 0x17)
              v58 = v56 | 7;
            v59 = v58 + 1;
            v57 = operator new(v58 + 1);
            *(_QWORD *)&v148[16] = v56;
            *(_QWORD *)&v149 = v59 | 0x8000000000000000;
            *(_QWORD *)&v148[8] = v57;
            a6 = v122;
          }
          else
          {
            BYTE7(v149) = v56;
            v57 = &v148[8];
            if (!v56)
            {
LABEL_75:
              v57[v56] = 0;
              BYTE8(v149) = 1;
              if (v31 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              a5 = v123;
              if (v31 >= 0x17)
              {
                v62 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v62 = v31 | 7;
                v63 = v62 + 1;
                v60 = (void **)operator new(v62 + 1);
                v150[1] = (void *)v31;
                v151 = v63 | 0x8000000000000000;
                v150[0] = v60;
              }
              else
              {
                HIBYTE(v151) = v31;
                v60 = v150;
                if (!v31)
                {
                  LOBYTE(v150[0]) = 0;
                  v152 = 1;
                  v61 = *(NSObject **)v148;
                  if ((SHIBYTE(v151) & 0x80000000) == 0)
                    goto LABEL_79;
LABEL_85:
                  operator delete(v150[0]);
                  if (BYTE8(v149))
                    goto LABEL_86;
                  goto LABEL_88;
                }
              }
              memmove(v60, v30, v31);
              *((_BYTE *)v60 + v31) = 0;
              v152 = 1;
              v61 = *(NSObject **)v148;
              if (SHIBYTE(v151) < 0)
                goto LABEL_85;
LABEL_79:
              if (BYTE8(v149))
              {
LABEL_86:
                if (SBYTE7(v149) < 0)
                  operator delete(*(void **)&v148[8]);
              }
LABEL_88:
              if (*(_QWORD *)v148)
                os_release(*(void **)v148);
              if (v26 && *(_QWORD *)(v26 + 24))
              {
                v64 = _os_log_pack_size();
                v65 = (std::__shared_weak_count_vtbl *)operator new(v64, (std::align_val_t)8uLL);
                v66 = (std::__shared_weak_count *)operator new();
                v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v66->__shared_owners_ = 0;
                v66->__shared_weak_owners_ = 0;
                v66[1].__vftable = v65;
                v142[0] = v65;
                v142[1] = v65;
                v143 = v66;
                v144 = 0;
                v145 = 0;
                v67 = strlen(__s);
                if (v67 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v68 = v67;
                if (v67 >= 0x17)
                {
                  v72 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v67 | 7) != 0x17)
                    v72 = v67 | 7;
                  v73 = v72 + 1;
                  v69 = (void ***)operator new(v72 + 1);
                  *(_QWORD *)&v147 = v68;
                  *((_QWORD *)&v147 + 1) = v73 | 0x8000000000000000;
                  v146 = (void **)v69;
                }
                else
                {
                  HIBYTE(v147) = v67;
                  v69 = &v146;
                  if (!v67)
                    goto LABEL_103;
                }
                memcpy(v69, __s, v68);
LABEL_103:
                *((_BYTE *)v69 + v68) = 0;
                v74 = v146;
                v153[0] = v147;
                *(_QWORD *)((char *)v153 + 7) = *(_QWORD *)((char *)&v147 + 7);
                v75 = HIBYTE(v147);
                v76 = operator new(0x38uLL);
                v76[1] = 0;
                v76[2] = 0;
                v76[3] = off_24EC1FA48;
                *v76 = &off_24EC1F9F8;
                v77 = v153[0];
                v76[4] = v74;
                v76[5] = v77;
                *(_QWORD *)((char *)v76 + 47) = *(_QWORD *)((char *)v153 + 7);
                *((_BYTE *)v76 + 55) = v75;
                v153[0] = 0;
                *(_QWORD *)((char *)v153 + 7) = 0;
                v78 = v145;
                v144 = (char *)(v76 + 3);
                v145 = (std::__shared_weak_count *)v76;
                if (v78)
                {
                  p_shared_owners = (unint64_t *)&v78->__shared_owners_;
                  do
                    v80 = __ldaxr(p_shared_owners);
                  while (__stlxr(v80 - 1, p_shared_owners));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                *(_OWORD *)v148 = *(_OWORD *)v142;
                v81 = v144;
                *(_QWORD *)&v148[16] = v143;
                if (v143)
                {
                  v82 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v83 = __ldxr(v82);
                  while (__stxr(v83 + 1, v82));
                }
                v84 = v145;
                *(_QWORD *)&v149 = v81;
                *((_QWORD *)&v149 + 1) = v145;
                if (v145)
                {
                  v85 = (unint64_t *)&v145->__shared_owners_;
                  do
                    v86 = __ldxr(v85);
                  while (__stxr(v86 + 1, v85));
                  v150[0] = v81;
                  do
                    v87 = __ldaxr(v85);
                  while (__stlxr(v87 - 1, v85));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                else
                {
                  v150[0] = v81;
                }
                v88 = v143;
                if (v143)
                {
                  v89 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                v91 = *(_QWORD *)v148;
                if (*((char *)v150[0] + 31) >= 0)
                  v92 = (char *)v150[0] + 8;
                else
                  v92 = (char *)*((_QWORD *)v150[0] + 1);
                v93 = _os_log_pack_fill();
                *(_DWORD *)v93 = 136315138;
                *(_QWORD *)(v93 + 4) = v92;
                v94 = (char *)operator new();
                v95 = *(unsigned __int8 *)(v125 + 39);
                v96 = v124;
                if ((v95 & 0x80u) != 0)
                {
                  v96 = *(const char **)(v125 + 16);
                  v95 = *(_QWORD *)(v125 + 24);
                }
                *(_QWORD *)v94 = v91;
                *(_OWORD *)(v94 + 8) = *(_OWORD *)&v148[8];
                *(_QWORD *)&v148[8] = 0;
                *(_QWORD *)&v148[16] = 0;
                *(_OWORD *)(v94 + 24) = v149;
                v149 = 0uLL;
                *((_QWORD *)v94 + 5) = v96;
                *((_QWORD *)v94 + 6) = v95;
                v94[56] = 16;
                v146 = 0;
                v142[0] = v94;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), v142);
                v97 = v142[0];
                v142[0] = 0;
                if (v97)
                {
                  v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
                  if (v98)
                  {
                    v99 = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
                  if (v101)
                  {
                    v102 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
                  v104 = v146;
                  v146 = 0;
                  if (v104)
                  {
                    v105 = (std::__shared_weak_count *)v104[4];
                    if (v105)
                    {
                      v106 = (unint64_t *)&v105->__shared_owners_;
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
                    v108 = (std::__shared_weak_count *)v104[2];
                    if (v108)
                    {
                      v109 = (unint64_t *)&v108->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    MEMORY[0x227684CE8](v104, 0x10F0C40B62ED6C6);
                  }
                }
                v111 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
                if (*((_QWORD *)&v149 + 1))
                {
                  v112 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                }
                v114 = *(std::__shared_weak_count **)&v148[16];
                if (!*(_QWORD *)&v148[16])
                  goto LABEL_164;
                v115 = (unint64_t *)(*(_QWORD *)&v148[16] + 8);
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (v116)
                {
LABEL_164:
                  v71 = v126;
                  if ((v133 & 0x80000000) == 0)
                    goto LABEL_165;
LABEL_168:
                  operator delete(__p[0]);
                  if (v71)
                  {
LABEL_169:
                    LODWORD(v149) = 0;
                    sub_22319B83C((uint64_t)&v146, (uint64_t)v148, (unsigned __int8 *)v14 + 25);
                    if ((_DWORD)v149 == -1)
                      sub_22316DD70();
                    v146 = __p;
                    ((void (*)(void **__return_ptr, void ***, _BYTE *))off_24EC5BEC0[v149])(v142, &v146, v148);
                    if ((_DWORD)v149 != -1)
                      ((void (*)(void ***, _BYTE *))off_24EC5BEA8[v149])(&v146, v148);
                    v117 = v142;
                    if (SHIBYTE(v143) < 0)
                      v117 = (void **)v142[0];
                    sub_22322C138((uint64_t)v134, "Requesting KF Id %s from Database when it doesn't exist.", (const char *)v117);
                    if (SHIBYTE(v143) < 0)
                      operator delete(v142[0]);
                    sub_223182C08((uint64_t)v134);
                  }
LABEL_177:
                  sub_223182C08((uint64_t)v134);
                  v118 = v140;
                  if (v140)
                  {
                    v119 = (unint64_t *)&v140->__shared_owners_;
                    do
                      v120 = __ldaxr(v119);
                    while (__stlxr(v120 - 1, v119));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                      std::__shared_weak_count::__release_weak(v118);
                    }
                  }
                  goto LABEL_43;
                }
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
                v71 = v126;
                if (v133 < 0)
                  goto LABEL_168;
              }
              else
              {
                os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v148 = 136315138;
                *(_QWORD *)&v148[4] = __s;
                v70 = (void *)_os_log_send_and_compose_impl();
                if (!v70)
                  goto LABEL_164;
                free(v70);
                v71 = v126;
                if (v133 < 0)
                  goto LABEL_168;
              }
LABEL_165:
              if (v71)
                goto LABEL_169;
              goto LABEL_177;
            }
          }
          memmove(v57, v55, v56);
          goto LABEL_75;
        }
      }
LABEL_43:
      v48 = (_QWORD *)v14[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (_QWORD *)v14[2];
          v27 = *v49 == (_QWORD)v14;
          v14 = v49;
        }
        while (!v27);
      }
      v14 = v49;
      if (v49 == v13)
        return kdebug_trace();
    }
    v18 = sub_22381AF00(a6, *(_QWORD *)((char *)v14 + 25), *(_QWORD *)((char *)v14 + 33));
    v148[0] = *((_BYTE *)v18 + 113);
    v19 = *(_QWORD *)(a3 + 24);
    if (!v19)
      sub_223198474();
    v20 = v131;
    if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 48))(v19, v148))
    {
      v22 = (_OWORD *)v131[1];
      v21 = v131[2];
      if ((unint64_t)v22 < v21)
      {
        *v22 = *v17;
        v23 = v22 + 1;
LABEL_42:
        v20[1] = (uint64_t)v23;
        goto LABEL_43;
      }
      v40 = (_OWORD *)*v131;
      v41 = ((uint64_t)v22 - *v131) >> 4;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60)
        sub_22316E078();
      v43 = v21 - (_QWORD)v40;
      if (v43 >> 3 > v42)
        v42 = v43 >> 3;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 60)
          sub_223174E94();
        v45 = (char *)operator new(16 * v44);
        v46 = &v45[16 * v41];
        *(_OWORD *)v46 = *v17;
        v47 = (uint64_t)v46;
        if (v22 == v40)
          goto LABEL_119;
      }
      else
      {
        v45 = 0;
        v46 = (char *)(16 * v41);
        *(_OWORD *)(16 * v41) = *v17;
        v47 = 16 * v41;
        if (v22 == v40)
          goto LABEL_119;
      }
      do
      {
        *(_OWORD *)(v47 - 16) = *(v22 - 1);
        v47 -= 16;
        --v22;
      }
      while (v22 != v40);
    }
    else
    {
      LOBYTE(v134[0]) = *((_BYTE *)v18 + 113);
      v33 = *(_QWORD *)(a5 + 24);
      if (!v33
        || (v148[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 48))(v33, (uint64_t)v14 + 25),
            (v34 = *(_QWORD *)(a4 + 24)) == 0))
      {
        sub_223198474();
      }
      if (!(*(unsigned int (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v34 + 48))(v34, v134, v148))
        goto LABEL_43;
      v35.i64[0] = v18[8];
      v35.i32[2] = *((_DWORD *)v18 + 18);
      v36.i64[0] = *(_QWORD *)a2;
      v36.i32[2] = *(_DWORD *)(a2 + 8);
      v37 = (int8x16_t)vsubq_f32(v35, v36);
      v38 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1), *(float32x2_t *)v37.i8, 1), v38, v38).f32[0] > v16)goto LABEL_43;
      v22 = (_OWORD *)v131[1];
      v39 = v131[2];
      if ((unint64_t)v22 < v39)
      {
        *v22 = *v17;
        v23 = v22 + 1;
        goto LABEL_42;
      }
      v50 = (_OWORD *)*v131;
      v51 = ((uint64_t)v22 - *v131) >> 4;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 60)
        sub_22316E078();
      v53 = v39 - (_QWORD)v50;
      if (v53 >> 3 > v52)
        v52 = v53 >> 3;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v52;
      if (v44)
      {
        if (v44 >> 60)
          sub_223174E94();
        v45 = (char *)operator new(16 * v44);
        v46 = &v45[16 * v51];
        *(_OWORD *)v46 = *v17;
        v47 = (uint64_t)v46;
        if (v22 == v50)
        {
LABEL_119:
          v20 = v131;
          v23 = v46 + 16;
          *v131 = v47;
          v131[1] = (uint64_t)(v46 + 16);
          v131[2] = (uint64_t)&v45[16 * v44];
          if (!v22)
            goto LABEL_42;
          goto LABEL_41;
        }
      }
      else
      {
        v45 = 0;
        v46 = (char *)(16 * v51);
        *(_OWORD *)(16 * v51) = *v17;
        v47 = 16 * v51;
        if (v22 == v50)
          goto LABEL_119;
      }
      do
      {
        *(_OWORD *)(v47 - 16) = *(v22 - 1);
        v47 -= 16;
        --v22;
      }
      while (v22 != v50);
    }
    v20 = v131;
    v22 = (_OWORD *)*v131;
    v23 = v46 + 16;
    *v131 = v47;
    v131[1] = (uint64_t)(v46 + 16);
    v131[2] = (uint64_t)&v45[16 * v44];
    if (!v22)
      goto LABEL_42;
LABEL_41:
    operator delete(v22);
    goto LABEL_42;
  }
  return kdebug_trace();
}

void sub_223899428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  void *v55;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a37 < 0)
    operator delete(a32);
  sub_223182DAC((uint64_t)&a38);
  v55 = *(void **)a31;
  if (*(_QWORD *)a31)
  {
    *(_QWORD *)(a31 + 8) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

void sub_2238995FC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_2540CC8D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_2540CC8D0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC8C8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_2540CC8D0);
  }
  *a1 = qword_2540CC8C8;
}

void sub_223899698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_2540CC8D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_2540CC8D0);
  _Unwind_Resume(a1);
}

uint64_t sub_2238996F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  uint64_t v14;
  uint64_t v15;
  float v16;
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  void **v35;
  uint64_t v36;
  const char *v37;
  size_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x2_t v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  const char *v52;
  size_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  size_t v64;
  size_t v65;
  void ***v66;
  void *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  const char *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  char *__s;
  uint64_t *v127;
  void *__p[2];
  char v129;
  _QWORD v130[3];
  int v131;
  const char *v132;
  int v133;
  const char *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  void *v138[2];
  std::__shared_weak_count *v139;
  char *v140;
  std::__shared_weak_count *v141;
  void **v142;
  __int128 v143;
  _BYTE v144[24];
  __int128 v145;
  void *v146[2];
  unint64_t v147;
  char v148;
  _QWORD v149[5];

  v149[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v15 = *a1;
  v14 = a1[1];
  if (*a1 != v14)
  {
    v16 = a8 * a8;
    v119 = a5;
    v127 = a7;
    v122 = a4;
    while (1)
    {
      *(_OWORD *)v144 = *(_OWORD *)v15;
      if (sub_223340F28(a6, (uint64_t)v144))
        break;
      sub_2238995FC(&v137);
      if (**(int **)(v137 + 56) <= 4)
      {
        v31 = *(unsigned __int8 *)(v137 + 72);
        v32 = sub_22322F254(v137, "OSLogSurrogateAppender", 1, 0);
        v33 = v32;
        if (v31 || v32 != 0)
        {
          v130[0] = &v137;
          v130[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v130[2] = std::chrono::system_clock::now().__d_.__rep_;
          v131 = 4;
          v132 = "unknown file";
          v133 = 542;
          v134 = "unknown function";
          v135 = 0;
          v136 = 0;
          LODWORD(v145) = 0;
          sub_22319B83C((uint64_t)v138, (uint64_t)v144, (unsigned __int8 *)v15);
          if ((_DWORD)v145 == -1)
            sub_22316DD70();
          v138[0] = &v142;
          ((void (*)(void **__return_ptr, void **, _BYTE *))off_24EC5BEC0[v145])(__p, v138, v144);
          if ((_DWORD)v145 != -1)
            ((void (*)(void **, _BYTE *))off_24EC5BEA8[v145])(v138, v144);
          v123 = v31;
          v35 = __p;
          if (v129 < 0)
            v35 = (void **)__p[0];
          __s = (char *)v35;
          v36 = *(_QWORD *)v130[0];
          v37 = (const char *)(*(_QWORD *)v130[0] + 16);
          v120 = v37;
          if (*(char *)(*(_QWORD *)v130[0] + 39) < 0)
          {
            v37 = *(const char **)(v36 + 16);
            v38 = *(_QWORD *)(v36 + 24);
            v121 = *(_QWORD *)v130[0];
            v51 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v51 & 1) == 0)
            {
LABEL_179:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v138);
                sub_223199C58("com.apple.cv3d", (unint64_t)v138, &xmmword_255788F40);
                if ((_BYTE)v140 && SHIBYTE(v139) < 0)
                  operator delete(v138[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                a5 = v119;
              }
            }
          }
          else
          {
            v38 = *(unsigned __int8 *)(*(_QWORD *)v130[0] + 39);
            v121 = *(_QWORD *)v130[0];
            v39 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v39 & 1) == 0)
              goto LABEL_179;
          }
          if (byte_255788F57 >= 0)
            v52 = (const char *)&xmmword_255788F40;
          else
            v52 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v53 = byte_255788F57;
          else
            v53 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)v144 = os_log_create(v52, v37);
          if (v53 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v53 >= 0x17)
          {
            v55 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v53 | 7) != 0x17)
              v55 = v53 | 7;
            v56 = v55 + 1;
            v54 = operator new(v55 + 1);
            *(_QWORD *)&v144[16] = v53;
            *(_QWORD *)&v145 = v56 | 0x8000000000000000;
            *(_QWORD *)&v144[8] = v54;
            a5 = v119;
          }
          else
          {
            BYTE7(v145) = v53;
            v54 = &v144[8];
            if (!v53)
            {
LABEL_68:
              v54[v53] = 0;
              BYTE8(v145) = 1;
              if (v38 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v38 >= 0x17)
              {
                v59 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v38 | 7) != 0x17)
                  v59 = v38 | 7;
                v60 = v59 + 1;
                v57 = (void **)operator new(v59 + 1);
                v146[1] = (void *)v38;
                v147 = v60 | 0x8000000000000000;
                v146[0] = v57;
              }
              else
              {
                HIBYTE(v147) = v38;
                v57 = v146;
                if (!v38)
                {
                  LOBYTE(v146[0]) = 0;
                  v148 = 1;
                  v58 = *(NSObject **)v144;
                  if ((SHIBYTE(v147) & 0x80000000) == 0)
                    goto LABEL_72;
LABEL_78:
                  operator delete(v146[0]);
                  a4 = v122;
                  if (BYTE8(v145))
                    goto LABEL_79;
                  goto LABEL_81;
                }
              }
              memmove(v57, v37, v38);
              *((_BYTE *)v57 + v38) = 0;
              v148 = 1;
              v58 = *(NSObject **)v144;
              if (SHIBYTE(v147) < 0)
                goto LABEL_78;
LABEL_72:
              a4 = v122;
              if (BYTE8(v145))
              {
LABEL_79:
                if (SBYTE7(v145) < 0)
                  operator delete(*(void **)&v144[8]);
              }
LABEL_81:
              if (*(_QWORD *)v144)
                os_release(*(void **)v144);
              if (v33 && *(_QWORD *)(v33 + 24))
              {
                v61 = _os_log_pack_size();
                v62 = (std::__shared_weak_count_vtbl *)operator new(v61, (std::align_val_t)8uLL);
                v63 = (std::__shared_weak_count *)operator new();
                v63->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v63->__shared_owners_ = 0;
                v63->__shared_weak_owners_ = 0;
                v63[1].__vftable = v62;
                v138[0] = v62;
                v138[1] = v62;
                v139 = v63;
                v140 = 0;
                v141 = 0;
                v64 = strlen(__s);
                if (v64 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v65 = v64;
                if (v64 >= 0x17)
                {
                  v69 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v64 | 7) != 0x17)
                    v69 = v64 | 7;
                  v70 = v69 + 1;
                  v66 = (void ***)operator new(v69 + 1);
                  *(_QWORD *)&v143 = v65;
                  *((_QWORD *)&v143 + 1) = v70 | 0x8000000000000000;
                  v142 = (void **)v66;
                }
                else
                {
                  HIBYTE(v143) = v64;
                  v66 = &v142;
                  if (!v64)
                    goto LABEL_97;
                }
                memcpy(v66, __s, v65);
LABEL_97:
                *((_BYTE *)v66 + v65) = 0;
                v71 = v142;
                v149[0] = v143;
                *(_QWORD *)((char *)v149 + 7) = *(_QWORD *)((char *)&v143 + 7);
                v72 = HIBYTE(v143);
                v73 = operator new(0x38uLL);
                v73[1] = 0;
                v73[2] = 0;
                v73[3] = off_24EC1FA48;
                *v73 = &off_24EC1F9F8;
                v74 = v149[0];
                v73[4] = v71;
                v73[5] = v74;
                *(_QWORD *)((char *)v73 + 47) = *(_QWORD *)((char *)v149 + 7);
                *((_BYTE *)v73 + 55) = v72;
                v149[0] = 0;
                *(_QWORD *)((char *)v149 + 7) = 0;
                v75 = v141;
                v140 = (char *)(v73 + 3);
                v141 = (std::__shared_weak_count *)v73;
                if (v75)
                {
                  p_shared_owners = (unint64_t *)&v75->__shared_owners_;
                  do
                    v77 = __ldaxr(p_shared_owners);
                  while (__stlxr(v77 - 1, p_shared_owners));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                    std::__shared_weak_count::__release_weak(v75);
                  }
                }
                *(_OWORD *)v144 = *(_OWORD *)v138;
                v78 = v140;
                *(_QWORD *)&v144[16] = v139;
                if (v139)
                {
                  v79 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                }
                v81 = v141;
                *(_QWORD *)&v145 = v78;
                *((_QWORD *)&v145 + 1) = v141;
                if (v141)
                {
                  v82 = (unint64_t *)&v141->__shared_owners_;
                  do
                    v83 = __ldxr(v82);
                  while (__stxr(v83 + 1, v82));
                  v146[0] = v78;
                  do
                    v84 = __ldaxr(v82);
                  while (__stlxr(v84 - 1, v82));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                else
                {
                  v146[0] = v78;
                }
                v85 = v139;
                if (v139)
                {
                  v86 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                v88 = *(_QWORD *)v144;
                if (*((char *)v146[0] + 31) >= 0)
                  v89 = (char *)v146[0] + 8;
                else
                  v89 = (char *)*((_QWORD *)v146[0] + 1);
                v90 = _os_log_pack_fill();
                *(_DWORD *)v90 = 136315138;
                *(_QWORD *)(v90 + 4) = v89;
                v91 = (char *)operator new();
                v92 = *(unsigned __int8 *)(v121 + 39);
                v93 = v120;
                if ((v92 & 0x80u) != 0)
                {
                  v93 = *(const char **)(v121 + 16);
                  v92 = *(_QWORD *)(v121 + 24);
                }
                *(_QWORD *)v91 = v88;
                *(_OWORD *)(v91 + 8) = *(_OWORD *)&v144[8];
                *(_QWORD *)&v144[8] = 0;
                *(_QWORD *)&v144[16] = 0;
                *(_OWORD *)(v91 + 24) = v145;
                v145 = 0uLL;
                *((_QWORD *)v91 + 5) = v93;
                *((_QWORD *)v91 + 6) = v92;
                v91[56] = 16;
                v142 = 0;
                v138[0] = v91;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v33 + 24) + 40))(*(_QWORD *)(v33 + 24), v138);
                a4 = v122;
                v94 = v138[0];
                v138[0] = 0;
                if (v94)
                {
                  v95 = (std::__shared_weak_count *)*((_QWORD *)v94 + 4);
                  if (v95)
                  {
                    v96 = (unint64_t *)&v95->__shared_owners_;
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 - 1, v96));
                    if (!v97)
                    {
                      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                  }
                  v98 = (std::__shared_weak_count *)*((_QWORD *)v94 + 2);
                  if (v98)
                  {
                    v99 = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  MEMORY[0x227684CE8](v94, 0x10F0C40B62ED6C6);
                  v101 = v142;
                  v142 = 0;
                  if (v101)
                  {
                    v102 = (std::__shared_weak_count *)v101[4];
                    if (v102)
                    {
                      v103 = (unint64_t *)&v102->__shared_owners_;
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    v105 = (std::__shared_weak_count *)v101[2];
                    if (v105)
                    {
                      v106 = (unint64_t *)&v105->__shared_owners_;
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
                    MEMORY[0x227684CE8](v101, 0x10F0C40B62ED6C6);
                  }
                }
                v108 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
                if (*((_QWORD *)&v145 + 1))
                {
                  v109 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                    v111 = *(std::__shared_weak_count **)&v144[16];
                    if (*(_QWORD *)&v144[16])
                      goto LABEL_157;
                    goto LABEL_160;
                  }
                }
                v111 = *(std::__shared_weak_count **)&v144[16];
                if (!*(_QWORD *)&v144[16])
                  goto LABEL_160;
LABEL_157:
                v112 = (unint64_t *)&v111->__shared_owners_;
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (v113)
                {
LABEL_160:
                  v68 = v123;
                  if ((v129 & 0x80000000) == 0)
                    goto LABEL_161;
LABEL_91:
                  operator delete(__p[0]);
                  if (!v68)
                  {
LABEL_170:
                    sub_223182C08((uint64_t)v130);
                    v115 = v136;
                    if (v136)
                    {
                      v116 = (unint64_t *)&v136->__shared_owners_;
                      do
                        v117 = __ldaxr(v116);
                      while (__stlxr(v117 - 1, v116));
                      if (!v117)
                      {
                        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                        std::__shared_weak_count::__release_weak(v115);
                      }
                    }
                    goto LABEL_5;
                  }
LABEL_162:
                  LODWORD(v145) = 0;
                  sub_22319B83C((uint64_t)&v142, (uint64_t)v144, (unsigned __int8 *)v15);
                  if ((_DWORD)v145 == -1)
                    sub_22316DD70();
                  v142 = __p;
                  ((void (*)(void **__return_ptr, void ***, _BYTE *))off_24EC5BEC0[v145])(v138, &v142, v144);
                  if ((_DWORD)v145 != -1)
                    ((void (*)(void ***, _BYTE *))off_24EC5BEA8[v145])(&v142, v144);
                  v114 = v138;
                  if (SHIBYTE(v139) < 0)
                    v114 = (void **)v138[0];
                  sub_22322C138((uint64_t)v130, "Requesting KF Id %s from Database when it doesn't exist.", (const char *)v114);
                  if (SHIBYTE(v139) < 0)
                    operator delete(v138[0]);
                  sub_223182C08((uint64_t)v130);
                  goto LABEL_170;
                }
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
                v68 = v123;
                if (v129 < 0)
                  goto LABEL_91;
              }
              else
              {
                os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v144 = 136315138;
                *(_QWORD *)&v144[4] = __s;
                v67 = (void *)_os_log_send_and_compose_impl();
                if (!v67)
                  goto LABEL_160;
                free(v67);
                v68 = v123;
                if (v129 < 0)
                  goto LABEL_91;
              }
LABEL_161:
              if (!v68)
                goto LABEL_170;
              goto LABEL_162;
            }
          }
          memmove(v54, v52, v53);
          goto LABEL_68;
        }
      }
LABEL_5:
      v15 += 16;
      if (v15 == v14)
        return kdebug_trace();
    }
    v18 = sub_22381AF00(a6, *(_QWORD *)v15, *(_QWORD *)(v15 + 8));
    v144[0] = *((_BYTE *)v18 + 113);
    v19 = *(_QWORD *)(a3 + 24);
    if (!v19)
      sub_223198474();
    v20 = v127;
    if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 48))(v19, v144))
    {
      v22 = (_OWORD *)v127[1];
      v21 = v127[2];
      if ((unint64_t)v22 >= v21)
      {
        v23 = (_OWORD *)*v127;
        v24 = ((uint64_t)v22 - *v127) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
          sub_22316E078();
        v26 = v21 - (_QWORD)v23;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 >> 60)
            sub_223174E94();
          v28 = (char *)operator new(16 * v27);
          v29 = &v28[16 * v24];
          *(_OWORD *)v29 = *(_OWORD *)v15;
          v30 = (uint64_t)v29;
          if (v22 == v23)
            goto LABEL_116;
        }
        else
        {
          v28 = 0;
          v29 = (char *)(16 * v24);
          *(_OWORD *)(16 * v24) = *(_OWORD *)v15;
          v30 = 16 * v24;
          if (v22 == v23)
            goto LABEL_116;
        }
        v20 = v127;
        do
        {
          *(_OWORD *)(v30 - 16) = *(v22 - 1);
          v30 -= 16;
          --v22;
        }
        while (v22 != v23);
        goto LABEL_51;
      }
    }
    else
    {
      LOBYTE(v130[0]) = *((_BYTE *)v18 + 113);
      v40 = *(_QWORD *)(a5 + 24);
      if (!v40
        || (v144[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 48))(v40, v15),
            (v41 = *(_QWORD *)(a4 + 24)) == 0))
      {
        sub_223198474();
      }
      if (!(*(unsigned int (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v41 + 48))(v41, v130, v144))
        goto LABEL_5;
      v42.i64[0] = v18[8];
      v42.i32[2] = *((_DWORD *)v18 + 18);
      v43.i64[0] = *(_QWORD *)a2;
      v43.i32[2] = *(_DWORD *)(a2 + 8);
      v44 = (int8x16_t)vsubq_f32(v42, v43);
      v45 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1), *(float32x2_t *)v44.i8, 1), v45, v45).f32[0] > v16)goto LABEL_5;
      v22 = (_OWORD *)v127[1];
      v46 = v127[2];
      if ((unint64_t)v22 >= v46)
      {
        v47 = (_OWORD *)*v127;
        v48 = ((uint64_t)v22 - *v127) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          sub_22316E078();
        v50 = v46 - (_QWORD)v47;
        if (v50 >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v49;
        if (v27)
        {
          if (v27 >> 60)
            sub_223174E94();
          v28 = (char *)operator new(16 * v27);
          v29 = &v28[16 * v48];
          *(_OWORD *)v29 = *(_OWORD *)v15;
          v30 = (uint64_t)v29;
          if (v22 == v47)
          {
LABEL_116:
            v20 = v127;
            v17 = v29 + 16;
            *v127 = v30;
            v127[1] = (uint64_t)(v29 + 16);
            v127[2] = (uint64_t)&v28[16 * v27];
            if (v22)
LABEL_117:
              operator delete(v22);
LABEL_4:
            v20[1] = (uint64_t)v17;
            goto LABEL_5;
          }
        }
        else
        {
          v28 = 0;
          v29 = (char *)(16 * v48);
          *(_OWORD *)(16 * v48) = *(_OWORD *)v15;
          v30 = 16 * v48;
          if (v22 == v47)
            goto LABEL_116;
        }
        v20 = v127;
        do
        {
          *(_OWORD *)(v30 - 16) = *(v22 - 1);
          v30 -= 16;
          --v22;
        }
        while (v22 != v47);
LABEL_51:
        v22 = (_OWORD *)*v20;
        v17 = v29 + 16;
        *v20 = v30;
        v20[1] = (uint64_t)(v29 + 16);
        v20[2] = (uint64_t)&v28[16 * v27];
        if (!v22)
          goto LABEL_4;
        goto LABEL_117;
      }
    }
    *v22 = *(_OWORD *)v15;
    v17 = v22 + 1;
    goto LABEL_4;
  }
  return kdebug_trace();
}

void sub_22389A4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  void *v53;

  if (a52 && a51 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
    operator delete(a30);
  sub_223182DAC((uint64_t)&a36);
  v53 = *(void **)a29;
  if (*(_QWORD *)a29)
  {
    *(_QWORD *)(a29 + 8) = v53;
    operator delete(v53);
  }
  _Unwind_Resume(a1);
}

void sub_22389A6CC()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22389A6E0@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, _QWORD *a4@<X6>, uint64_t a5@<X8>)
{
  int32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  int8x16_t v14;
  float32x2_t v15;
  int8x16_t v16;
  float32x2_t v17;
  int8x16_t v18;
  __n128 v19;
  __n128 v20;
  float32x4_t v21;
  int8x16_t *v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int8x16_t *v28;
  uint64_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  unint64_t v33;
  int8x16_t *v34;
  uint64_t v35;
  float32x2_t v36;
  _OWORD v37[3];
  float32x2_t v38;
  unsigned __int32 v39;
  int v40;

  kdebug_trace();
  v10.i64[0] = *(_QWORD *)a2;
  v10.i32[2] = *(_DWORD *)(a2 + 8);
  v11.i64[0] = *(_QWORD *)(a2 + 16);
  v11.i32[2] = *(_DWORD *)(a2 + 24);
  v12.i64[0] = *(_QWORD *)(a2 + 48);
  v12.i32[2] = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v13 = vzip1q_s32(v10, v11).u64[0];
  v14 = (int8x16_t)vnegq_f32(v12);
  v15.i32[0] = *(_DWORD *)(a2 + 40);
  v16 = (int8x16_t)vtrn2q_s32(v10, v11);
  v16.i32[2] = HIDWORD(*(_QWORD *)(a2 + 32));
  v18 = (int8x16_t)vzip2q_s32(v10, v11);
  v21 = (float32x4_t)v18;
  v21.i32[2] = v15.i32[0];
  v17 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v13, *(float *)v14.i32), *(float32x2_t *)v16.i8, *(float32x2_t *)v12.f32, 1), *(float32x2_t *)v18.i8, v12, 2);
  v18.i64[0] = vextq_s8(v16, v18, 4uLL).u64[0];
  v20.n128_u64[0] = (unint64_t)vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 32), *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 32), 1), *(float32x2_t *)v12.f32, 1);
  v19 = (__n128)vextq_s8(v14, v14, 8uLL);
  *((_QWORD *)&v13 + 1) = *(_QWORD *)(a2 + 32);
  v14.i32[3] = 0;
  v14.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v16, 0).i32[3];
  *(uint64_t *)((char *)v14.i64 + 4) = v18.i64[0];
  v20.n128_u64[0] = (unint64_t)vmla_f32((float32x2_t)v20.n128_u64[0], (float32x2_t)v19.n128_u64[0], v15);
  v21.i64[1] = vdupq_laneq_s32((int32x4_t)v21, 2).u32[0];
  v37[1] = v14;
  v37[2] = v21;
  v37[0] = v13;
  v38 = v17;
  v39 = v20.n128_u32[0];
  v40 = 1065353216;
  v36 = a1[30];
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v22 = (int8x16_t *)a4[2];
  if (v22)
  {
    while (v22[9].i8[0] != 1)
    {
      v22 = (int8x16_t *)v22->i64[0];
      if (!v22)
        goto LABEL_4;
    }
LABEL_23:
    if (sub_223EA55CC(&v36, (float32x2_t *)v37, a3, (uint64_t *)&v36, (uint64_t)v22[3].i64, (uint64_t)a3))
    {
      v32 = v22 + 2;
      v31 = *(int8x16_t **)(a5 + 8);
      v33 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v31 < v33)
      {
        v18 = *v32;
        *v31 = *v32;
        v30 = v31 + 1;
        goto LABEL_15;
      }
      v34 = *(int8x16_t **)a5;
      v35 = ((uint64_t)v31->i64 - *(_QWORD *)a5) >> 4;
      v25 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60)
        sub_22316E078();
      v24 = v33 - (_QWORD)v34;
      if (v24 >> 3 > v25)
        v25 = v24 >> 3;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 60)
          sub_223174E94();
        v27 = (char *)operator new(16 * v26);
        v28 = (int8x16_t *)&v27[16 * v35];
        v18 = *v32;
        *v28 = *v32;
        v29 = (uint64_t)v28;
        if (v31 == v34)
        {
LABEL_13:
          v30 = v28 + 1;
          *(_QWORD *)a5 = v29;
          *(_QWORD *)(a5 + 8) = v28 + 1;
          *(_QWORD *)(a5 + 16) = &v27[16 * v26];
          if (!v31)
          {
LABEL_15:
            *(_QWORD *)(a5 + 8) = v30;
            goto LABEL_16;
          }
LABEL_14:
          operator delete(v31);
          goto LABEL_15;
        }
      }
      else
      {
        v27 = 0;
        v28 = (int8x16_t *)(16 * v35);
        v18 = *v32;
        *(int8x16_t *)(16 * v35) = *v32;
        v29 = 16 * v35;
        if (v31 == v34)
          goto LABEL_13;
      }
      do
      {
        v18 = v31[-1];
        *(int8x16_t *)(v29 - 16) = v18;
        v29 -= 16;
        --v31;
      }
      while (v31 != v34);
      v31 = *(int8x16_t **)a5;
      v30 = v28 + 1;
      *(_QWORD *)a5 = v29;
      *(_QWORD *)(a5 + 8) = v28 + 1;
      *(_QWORD *)(a5 + 16) = &v27[16 * v26];
      if (!v31)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_16:
    while (1)
    {
      v22 = (int8x16_t *)v22->i64[0];
      if (!v22)
        break;
      if (v22[9].i8[0] == 1)
        goto LABEL_23;
    }
  }
LABEL_4:
  v18.i32[0] = 5.0;
  sub_2238C7DD0((uint64_t **)a5, a2, a4, *(double *)v18.i64, v21, v20, v19);
  return kdebug_trace();
}

void sub_22389A9A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_22389A9D4()
{
  JUMPOUT(0x227684CE8);
}

void sub_22389A9E8(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, int32x2_t *a4@<X3>, int32x2_t *a5@<X4>, float32x2_t *a6@<X5>, _QWORD *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  int32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  void *v23;
  float32x4_t v24;
  float32x2_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  std::mutex *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int32x2_t v34;
  int32x2_t *v35;
  int32x2_t *v36;
  float32x4_t v37;
  uint64_t v38;
  int32x2_t v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _DWORD *v55;
  char v56;
  char v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unsigned __int8 *v93;
  int v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD **v97;
  unsigned int v98;
  _QWORD *v99;
  unsigned int v100;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _BYTE *v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  int v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  _QWORD **v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  __int128 v151;
  __int128 v152;
  _QWORD **v153;
  unint64_t v154;
  _DWORD *v155;
  int v156;
  int v157;
  int v158;
  int v159;
  char *v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  void *v165;
  __int128 v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  std::mutex *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  int v179;
  uint64_t (**v180)();
  int *v181;
  uint64_t (**v182)();
  int v183;
  int32x2_t *v184;
  _BYTE *v185;
  _DWORD *v186;
  uint64_t v187;
  void **v188;
  std::string *v189;
  std::string::size_type size;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  void *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  __int128 v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  _DWORD *v224;
  BOOL v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  int v229;
  int v230;
  int v231;
  uint64_t *v232;
  float32x4_t v234;
  int *v235;
  uint64_t v238;
  float32x4_t v239;
  uint64_t v240;
  float32x4_t v241;
  int *v242;
  std::string v243;
  _QWORD **v244;
  _QWORD *v245;
  unint64_t v246;
  void *v247;
  int32x2_t *v248;
  __int128 v249;
  _WORD v250[4];
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  void *v254[2];
  unsigned __int8 v255;
  _QWORD v256[2];
  double v257;
  std::string v258;
  std::string v259;
  char v260;
  _BYTE __p[23];
  _BYTE v262[5];
  std::string v263;
  void **v264;
  __int128 v265;
  __int128 v266;
  int v267;
  void *v268[7];
  unsigned __int32 v269;
  int v270;
  _QWORD v271[5];

  v271[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v15.i64[0] = *(_QWORD *)a2;
  v15.i32[2] = *(_DWORD *)(a2 + 8);
  v16.i64[0] = *(_QWORD *)(a2 + 16);
  v16.i32[2] = *(_DWORD *)(a2 + 24);
  v17.i32[0] = *(_DWORD *)(a2 + 40);
  v18.i64[0] = *(_QWORD *)(a2 + 48);
  v18.i32[2] = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v19 = vzip1q_s32(v15, v16).u64[0];
  v20 = (int8x16_t)vnegq_f32(v18);
  v21 = (int8x16_t)vtrn2q_s32(v15, v16);
  v21.i32[2] = HIDWORD(*(_QWORD *)(a2 + 32));
  v22 = (int8x16_t)vzip2q_s32(v15, v16);
  v23 = (void *)vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v19, *(float *)v20.i32), *(float32x2_t *)v21.i8, *(float32x2_t *)v18.f32, 1), *(float32x2_t *)v22.i8, v18, 2);
  v22.i32[2] = v17.i32[0];
  v24.i32[0] = *(_DWORD *)(a1 + 224);
  v25 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 32), *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 32), 1), *(float32x2_t *)v18.f32, 1);
  v18.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
  *((_QWORD *)&v19 + 1) = *(_QWORD *)(a2 + 32);
  v20.i32[3] = 0;
  v20.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v21, 0).i32[3];
  *(uint64_t *)((char *)v20.i64 + 4) = vextq_s8(v21, v22, 4uLL).u64[0];
  v22.i64[1] = vdupq_laneq_s32((int32x4_t)v22, 2).u32[0];
  *(_OWORD *)v268 = v19;
  *(int8x16_t *)&v268[4] = v22;
  *(int8x16_t *)&v268[2] = v20;
  v268[6] = v23;
  v269 = vmla_f32(v25, *(float32x2_t *)v18.f32, v17).u32[0];
  v270 = 1065353216;
  v241 = v24;
  sub_223CF2048(a3, (float32x2_t *)v268, a6, a4, a5, (int **)&v247, v24.f32[0]);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v26 = sub_2241471F8();
    v27 = v26[2];
    if (!v27)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v27 = v26[2];
    }
    v28 = *(_QWORD *)(v27 + 64);
    v29 = (std::mutex *)(v28 + 32);
    std::mutex::lock((std::mutex *)(v28 + 32));
    v31 = *(_QWORD *)(v28 + 96);
    v30 = *(_QWORD *)(v28 + 104);
    std::mutex::unlock(v29);
    if (v31 != v30)
    {
      v268[0] = "cv3d.recon.";
      v268[1] = (void *)11;
      v268[2] = "Keyframing.Visibility";
      v268[3] = (void *)21;
      sub_2231A9820((uint64_t)v268, (uint64_t)&v268[4], 0, 0, &v258);
      sub_2241471F8();
      v32 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
      {
        v265 = 0u;
        v266 = 0u;
        v267 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
        {
          v254[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v254[1] = (void *)2;
          v33 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
          {
            v232 = v33;
            sub_2241498F4((uint64_t)v268, 0);
            v35 = (int32x2_t *)v247;
            v36 = v248;
            if (v247 != v248)
            {
              v37.i32[3] = v241.i32[3];
              *(float *)v34.i32 = (float)(v241.f32[0] * 0.0) * 0.5;
              v239 = (float32x4_t)vdupq_lane_s32(v34, 0);
              v234 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v241.f32, 0);
              do
              {
                v38 = 0;
                _X9 = *a8;
                __asm { PRFM            #4, [X9] }
                v44 = *v35;
                v45 = (int)*v35;
                v46 = HIDWORD(*(unint64_t *)v35);
                v47 = v35[1].i32[0];
                v48 = (19349669 * v46) ^ (73856093 * v45) ^ (83492791 * v47);
                v49 = a8[3];
                v50 = (v48 >> 7) ^ 0x13701D;
                v51 = 0x101010101010101 * (v48 & 0x7F);
                while (1)
                {
                  v52 = v50 & v49;
                  v53 = *(_QWORD *)(_X9 + v52);
                  v54 = ((v53 ^ v51) - 0x101010101010101) & ~(v53 ^ v51) & 0x8080808080808080;
                  if (v54)
                    break;
LABEL_17:
                  if ((v53 & (~v53 << 6) & 0x8080808080808080) != 0)
                  {
                    v57 = 0;
                    LOBYTE(_X9) = 0;
                    v56 = -1;
                    goto LABEL_25;
                  }
                  v38 += 8;
                  v50 = v38 + v52;
                }
                while (1)
                {
                  v55 = (_DWORD *)(a8[1] + 56 * ((v52 + (__clz(__rbit64(v54)) >> 3)) & v49));
                  if (*v55 == v45 && v55[1] == v46 && v55[2] == v47)
                    break;
                  v54 &= v54 - 1;
                  if (!v54)
                    goto LABEL_17;
                }
                v56 = -1;
                if (_X9)
                {
                  LODWORD(_X9) = 255 * v55[8] / 0x14u;
                  if (_X9 >= 0xFF)
                    LOBYTE(_X9) = -1;
                  v56 = ~(_BYTE)_X9;
                  LOBYTE(_X9) = -1;
                  v57 = v56;
                }
                else
                {
                  v57 = 0;
                }
LABEL_25:
                LOBYTE(v252) = v56;
                BYTE1(v252) = v57;
                *(float32x2_t *)v37.f32 = vcvt_f32_s32(v44);
                v37.f32[2] = (float)v47;
                BYTE2(v252) = _X9;
                v58 = vaddq_f32(v239, vmulq_n_f32(v37, v241.f32[0]));
                *(_DWORD *)&__p[8] = v58.i32[2];
                *(_QWORD *)__p = v58.i64[0];
                v59 = vaddq_f32(v234, v58);
                LODWORD(v259.__r_.__value_.__r.__words[1]) = v59.i32[2];
                v259.__r_.__value_.__r.__words[0] = v59.i64[0];
                sub_223CF1130((uint64_t)__p, (uint64_t)&v259, 1, (__int8 *)&v252, (uint64_t)v268, v241, v59, v234);
                v35 = (int32x2_t *)((char *)v35 + 12);
              }
              while (v35 != v36);
            }
            strcpy(__p, "selection");
            *(_WORD *)v262 = 265;
            sub_22329F414((uint64_t)v268, (__int128 *)__p, (__int128 *)v254, &v263);
            if (v262[1] && (v262[0] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            sub_22316F8F4((uint64_t *)v268);
            v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32);
            v61 = *(void **)v60;
            v62 = *(std::__shared_weak_count **)(v60 + 8);
            if (v62)
            {
              p_shared_owners = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldxr(p_shared_owners);
              while (__stxr(v64 + 1, p_shared_owners));
            }
            v65 = *(_OWORD *)&v263.__r_.__value_.__r.__words[1];
            v259.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v259.__r_.__value_.__r.__words[1] = *(_OWORD *)&v263.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v263.__r_.__value_.__r.__words[1] = 0uLL;
            v268[0] = v61;
            v268[1] = v62;
            if (v62)
            {
              v66 = (unint64_t *)&v62->__shared_owners_;
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            v268[2] = &off_24EC6A3B8;
            *(_OWORD *)&v268[3] = v65;
            if (*((_QWORD *)&v65 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            (*(void (**)(uint64_t *, void **))(*v232 + 16))(v232, v268);
            v70 = (std::__shared_weak_count *)v268[4];
            if (v268[4])
            {
              v71 = (unint64_t *)((char *)v268[4] + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v73 = (std::__shared_weak_count *)v268[1];
            if (v268[1])
            {
              v74 = (unint64_t *)((char *)v268[1] + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v76 = (std::__shared_weak_count *)v259.__r_.__value_.__r.__words[2];
            if (v259.__r_.__value_.__r.__words[2])
            {
              v77 = (unint64_t *)(v259.__r_.__value_.__r.__words[2] + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            if (v62)
            {
              v79 = (unint64_t *)&v62->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v81 = (std::__shared_weak_count *)v263.__r_.__value_.__r.__words[2];
            if (v263.__r_.__value_.__r.__words[2])
            {
              v82 = (unint64_t *)(v263.__r_.__value_.__r.__words[2] + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v258.__r_.__value_.__l.__data_);
    }
  }
  v245 = 0;
  v246 = 0;
  v244 = &v245;
  v84 = (int *)v247;
  v235 = (int *)v248;
  if (v247 == v248)
    goto LABEL_168;
  v85 = 0;
  v240 = a8[3];
  do
  {
    v90 = 0;
    _X9 = *a8;
    __asm { PRFM            #4, [X9] }
    v125 = v84[1];
    v126 = v84[2];
    v127 = (19349669 * v125) ^ (73856093 * *v84) ^ (83492791 * v126);
    v91 = (v127 >> 7) ^ 0x13701D;
    v128 = 0x101010101010101 * (v127 & 0x7F);
    v242 = v84;
    while (1)
    {
      v86 = v91 & v240;
      v87 = *(_QWORD *)(_X9 + v86);
      v88 = ((v87 ^ v128) - 0x101010101010101) & ~(v87 ^ v128) & 0x8080808080808080;
      if (v88)
        break;
LABEL_73:
      if ((v87 & (~v87 << 6) & 0x8080808080808080) != 0)
        goto LABEL_155;
      v90 += 8;
      v91 = v90 + v86;
    }
    while (1)
    {
      v89 = a8[1] + 56 * ((v86 + (__clz(__rbit64(v88)) >> 3)) & v240);
      if (*(_DWORD *)v89 == *v84 && *(_DWORD *)(v89 + 4) == v125 && *(_DWORD *)(v89 + 8) == v126)
        break;
      v88 &= v88 - 1;
      if (!v88)
        goto LABEL_73;
    }
    if (_X9)
    {
      v92 = *(_QWORD **)(v89 + 16);
      v93 = *(unsigned __int8 **)(v89 + 24);
      v94 = *(char *)v92;
      if (v94 <= -2)
      {
        do
        {
          v95 = (__clz(__rbit64(((*v92 >> 7) & ~*v92 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v92 = (_QWORD *)((char *)v92 + v95);
          v93 += 16 * v95;
          v94 = *(char *)v92;
        }
        while (v94 < -1);
      }
LABEL_78:
      v94 = v94;
      while (1)
      {
LABEL_79:
        if (v94 == 255)
          goto LABEL_155;
        v96 = &v245;
        v97 = &v245;
        if (v245)
          break;
LABEL_119:
        v105 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v105 + 28) = *(_OWORD *)v93;
        *((_DWORD *)v105 + 11) = 0;
        *(_QWORD *)v105 = 0;
        *((_QWORD *)v105 + 1) = 0;
        *((_QWORD *)v105 + 2) = v97;
        *v96 = v105;
        v106 = v105;
        if (*v244)
        {
          v244 = (_QWORD **)*v244;
          v106 = (_QWORD *)*v96;
        }
        v107 = v245;
        _ZF = v106 == v245;
        *((_BYTE *)v106 + 24) = v106 == v245;
        if (!_ZF)
        {
          do
          {
            v108 = v106[2];
            if (*(_BYTE *)(v108 + 24))
              break;
            v109 = *(_QWORD **)(v108 + 16);
            v110 = *v109;
            if (*v109 == v108)
            {
              v113 = v109[1];
              if (!v113 || (v114 = *(unsigned __int8 *)(v113 + 24), v111 = (_BYTE *)(v113 + 24), v114))
              {
                if (*(_QWORD **)v108 == v106)
                {
                  *(_BYTE *)(v108 + 24) = 1;
                  *((_BYTE *)v109 + 24) = 0;
                  v117 = *(_QWORD *)(v108 + 8);
                  *v109 = v117;
                  if (v117)
                    goto LABEL_136;
                }
                else
                {
                  v115 = *(uint64_t **)(v108 + 8);
                  v116 = *v115;
                  *(_QWORD *)(v108 + 8) = *v115;
                  if (v116)
                  {
                    *(_QWORD *)(v116 + 16) = v108;
                    v109 = *(_QWORD **)(v108 + 16);
                  }
                  v115[2] = (uint64_t)v109;
                  *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * (**(_QWORD **)(v108 + 16) != v108)) = v115;
                  *v115 = v108;
                  *(_QWORD *)(v108 + 16) = v115;
                  v109 = (_QWORD *)v115[2];
                  v108 = *v109;
                  *((_BYTE *)v115 + 24) = 1;
                  *((_BYTE *)v109 + 24) = 0;
                  v117 = *(_QWORD *)(v108 + 8);
                  *v109 = v117;
                  if (v117)
LABEL_136:
                    *(_QWORD *)(v117 + 16) = v109;
                }
                *(_QWORD *)(v108 + 16) = v109[2];
                *(_QWORD *)(v109[2] + 8 * (*(_QWORD *)v109[2] != (_QWORD)v109)) = v108;
                *(_QWORD *)(v108 + 8) = v109;
LABEL_144:
                v109[2] = v108;
                break;
              }
            }
            else if (!v110 || (v112 = *(unsigned __int8 *)(v110 + 24), v111 = (_BYTE *)(v110 + 24), v112))
            {
              if (*(_QWORD **)v108 == v106)
              {
                v121 = v106[1];
                *(_QWORD *)v108 = v121;
                if (v121)
                {
                  *(_QWORD *)(v121 + 16) = v108;
                  v109 = *(_QWORD **)(v108 + 16);
                }
                v106[2] = v109;
                *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * (**(_QWORD **)(v108 + 16) != v108)) = v106;
                v106[1] = v108;
                *(_QWORD *)(v108 + 16) = v106;
                v109 = (_QWORD *)v106[2];
                *((_BYTE *)v106 + 24) = 1;
                *((_BYTE *)v109 + 24) = 0;
                v108 = v109[1];
                v119 = *(_QWORD **)v108;
                v109[1] = *(_QWORD *)v108;
                if (v119)
LABEL_142:
                  v119[2] = v109;
              }
              else
              {
                *(_BYTE *)(v108 + 24) = 1;
                *((_BYTE *)v109 + 24) = 0;
                v108 = v109[1];
                v119 = *(_QWORD **)v108;
                v109[1] = *(_QWORD *)v108;
                if (v119)
                  goto LABEL_142;
              }
              *(_QWORD *)(v108 + 16) = v109[2];
              *(_QWORD *)(v109[2] + 8 * (*(_QWORD *)v109[2] != (_QWORD)v109)) = v108;
              *(_QWORD *)v108 = v109;
              goto LABEL_144;
            }
            *(_BYTE *)(v108 + 24) = 1;
            v106 = v109;
            *((_BYTE *)v109 + 24) = v109 == v107;
            *v111 = 1;
          }
          while (v109 != v107);
        }
        v246 = ++v85;
        *((_DWORD *)v105 + 11) = 1;
        v120 = *((unsigned __int8 *)v92 + 1);
        v92 = (_QWORD *)((char *)v92 + 1);
        v94 = v120;
        v93 += 16;
        if ((char)v120 <= -2)
        {
          do
          {
LABEL_153:
            v122 = (__clz(__rbit64(((*v92 >> 7) & ~*v92 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v92 = (_QWORD *)((char *)v92 + v122);
            v93 += 16 * v122;
            v94 = *(char *)v92;
          }
          while (v94 < -1);
          goto LABEL_78;
        }
      }
      v98 = *v93;
      v99 = v245;
      while (1)
      {
        v97 = (_QWORD **)v99;
        v100 = *((unsigned __int8 *)v99 + 28);
        _CF = v98 >= v100;
        if (v98 != v100)
          break;
        v102 = v93[1];
        v100 = *((unsigned __int8 *)v97 + 29);
        _CF = v102 >= v100;
        if (v102 == v100
          && (v102 = v93[2], v100 = *((unsigned __int8 *)v97 + 30), _CF = v102 >= v100, v102 == v100)
          && (v102 = v93[3], v100 = *((unsigned __int8 *)v97 + 31), _CF = v102 >= v100, v102 == v100))
        {
          v103 = v93[4];
          v104 = *((unsigned __int8 *)v97 + 32);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[5];
          v104 = *((unsigned __int8 *)v97 + 33);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[6];
          v104 = *((unsigned __int8 *)v97 + 34);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[7];
          v104 = *((unsigned __int8 *)v97 + 35);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[8];
          v104 = *((unsigned __int8 *)v97 + 36);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[9];
          v104 = *((unsigned __int8 *)v97 + 37);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[10];
          v104 = *((unsigned __int8 *)v97 + 38);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[11];
          v104 = *((unsigned __int8 *)v97 + 39);
          if (v103 != v104)
            goto LABEL_99;
          v103 = v93[12];
          v104 = *((unsigned __int8 *)v97 + 40);
          if (v103 != v104
            || (v103 = v93[13], v104 = *((unsigned __int8 *)v97 + 41), v103 != v104)
            || (v103 = v93[14], v104 = *((unsigned __int8 *)v97 + 42), v103 != v104)
            || (v103 = v93[15], v104 = *((unsigned __int8 *)v97 + 43), v103 != v104))
          {
LABEL_99:
            if (v103 < v104)
              goto LABEL_82;
          }
          v100 = *((unsigned __int8 *)v97 + 32);
          v102 = v93[4];
          if (v100 == v102)
          {
            v100 = *((unsigned __int8 *)v97 + 33);
            v102 = v93[5];
            if (v100 == v102)
            {
              v100 = *((unsigned __int8 *)v97 + 34);
              v102 = v93[6];
              if (v100 == v102)
              {
                v100 = *((unsigned __int8 *)v97 + 35);
                v102 = v93[7];
                if (v100 == v102)
                {
                  v100 = *((unsigned __int8 *)v97 + 36);
                  v102 = v93[8];
                  if (v100 == v102)
                  {
                    v100 = *((unsigned __int8 *)v97 + 37);
                    v102 = v93[9];
                    if (v100 == v102)
                    {
                      v100 = *((unsigned __int8 *)v97 + 38);
                      v102 = v93[10];
                      if (v100 == v102)
                      {
                        v100 = *((unsigned __int8 *)v97 + 39);
                        v102 = v93[11];
                        if (v100 == v102)
                        {
                          v100 = *((unsigned __int8 *)v97 + 40);
                          v102 = v93[12];
                          if (v100 == v102)
                          {
                            v100 = *((unsigned __int8 *)v97 + 41);
                            v102 = v93[13];
                            if (v100 == v102)
                            {
                              v100 = *((unsigned __int8 *)v97 + 42);
                              v102 = v93[14];
                              if (v100 == v102)
                              {
                                v100 = *((unsigned __int8 *)v97 + 43);
                                v102 = v93[15];
                                if (v100 == v102)
                                {
LABEL_138:
                                  ++*((_DWORD *)v97 + 11);
                                  v118 = *((unsigned __int8 *)v92 + 1);
                                  v92 = (_QWORD *)((char *)v92 + 1);
                                  v94 = v118;
                                  v93 += 16;
                                  if ((char)v118 <= -2)
                                    goto LABEL_153;
                                  goto LABEL_79;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_116:
          if (v100 >= v102)
            goto LABEL_138;
          v99 = v97[1];
          if (!v99)
          {
            v96 = v97 + 1;
            goto LABEL_119;
          }
        }
        else
        {
LABEL_114:
          if (_CF)
            goto LABEL_116;
LABEL_82:
          v99 = *v97;
          v96 = v97;
          if (!*v97)
            goto LABEL_119;
        }
      }
      v102 = *v93;
      goto LABEL_114;
    }
LABEL_155:
    v84 = v242 + 3;
  }
  while (v242 + 3 != v235);
  if (v85)
  {
    if (v85 > 0x666666666666666)
      sub_22316E078();
    v129 = (char *)operator new(40 * v85);
    v130 = &v129[40 * v85];
    v131 = v129;
    v132 = v244;
    if (v244 == &v245)
      goto LABEL_160;
LABEL_169:
    v133 = (unint64_t)v131;
    while (2)
    {
      v139 = (_OWORD *)((char *)v132 + 28);
      v140 = sub_22381AF00(a7, *(uint64_t *)((char *)v132 + 28), *(uint64_t *)((char *)v132 + 36));
      v141 = v140;
      v142 = -*((_DWORD *)v132 + 11);
      v143 = v140[11] / 1000000;
      if (v133 < (unint64_t)v130)
      {
        *(_DWORD *)v133 = v142;
        *(_QWORD *)(v133 + 8) = v140[10];
        *(_DWORD *)(v133 + 16) = v143;
        *(_OWORD *)(v133 + 20) = *v139;
        v133 += 40;
        v144 = v132[1];
        if (!v144)
          goto LABEL_192;
        do
        {
LABEL_190:
          v153 = (_QWORD **)v144;
          v144 = (_QWORD *)*v144;
        }
        while (v144);
        goto LABEL_170;
      }
      v145 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v133 - (_QWORD)v131) >> 3) + 1;
      if (v145 > 0x666666666666666)
        sub_22316E078();
      if (0x999999999999999ALL * ((v130 - v131) >> 3) > v145)
        v145 = 0x999999999999999ALL * ((v130 - v131) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v130 - v131) >> 3) >= 0x333333333333333)
        v146 = 0x666666666666666;
      else
        v146 = v145;
      if (v146)
      {
        if (v146 > 0x666666666666666)
          sub_223174E94();
        v147 = (char *)operator new(40 * v146);
      }
      else
      {
        v147 = 0;
      }
      v148 = &v147[8 * ((uint64_t)(v133 - (_QWORD)v131) >> 3)];
      *(_DWORD *)v148 = v142;
      *((_QWORD *)v148 + 1) = v141[10];
      *((_DWORD *)v148 + 4) = v143;
      *(_OWORD *)(v148 + 20) = *v139;
      if ((char *)v133 == v131)
      {
        v150 = &v147[8 * ((uint64_t)(v133 - (_QWORD)v131) >> 3)];
        v130 = &v147[40 * v146];
        v133 = (unint64_t)(v148 + 40);
        if (v131)
          goto LABEL_188;
      }
      else
      {
        v149 = &v147[8 * ((uint64_t)(v133 - (_QWORD)v131) >> 3)];
        do
        {
          v150 = v149 - 40;
          v151 = *(_OWORD *)(v133 - 40);
          v152 = *(_OWORD *)(v133 - 24);
          *((_QWORD *)v149 - 1) = *(_QWORD *)(v133 - 8);
          *(_OWORD *)(v149 - 24) = v152;
          *(_OWORD *)(v149 - 40) = v151;
          v133 -= 40;
          v149 -= 40;
        }
        while ((char *)v133 != v131);
        v130 = &v147[40 * v146];
        v133 = (unint64_t)(v148 + 40);
        if (v131)
LABEL_188:
          operator delete(v131);
      }
      v131 = v150;
      v144 = v132[1];
      if (v144)
        goto LABEL_190;
      do
      {
LABEL_192:
        v153 = (_QWORD **)v132[2];
        _ZF = *v153 == v132;
        v132 = v153;
      }
      while (!_ZF);
LABEL_170:
      v132 = v153;
      if (v153 == &v245)
        goto LABEL_161;
      continue;
    }
  }
LABEL_168:
  v131 = 0;
  v130 = 0;
  v132 = v244;
  if (v244 != &v245)
    goto LABEL_169;
LABEL_160:
  v133 = (unint64_t)v131;
LABEL_161:
  v134 = (uint64_t)(v133 - (_QWORD)v131) / 40;
  v135 = 126 - 2 * __clz(v134);
  if ((char *)v133 == v131)
    v136 = 0;
  else
    v136 = v135;
  sub_2238A1418((uint64_t)v131, v133, v136, 1);
  if (v134 >= 2)
  {
    if ((_DWORD)v134 != 1)
    {
      v137 = (v134 - 1);
      if (v137 < 2)
      {
        v138 = 1;
        goto LABEL_200;
      }
      v154 = v137 - (((_BYTE)v134 - 1) & 1);
      v138 = v154 + 1;
      v155 = v131 + 56;
      do
      {
        v156 = *(v155 - 4);
        v157 = v155[6];
        v158 = v155[10];
        *(v155 - 4) = *v155;
        v155[6] = v158;
        *v155 = v156;
        v155[10] = v157;
        v155 += 20;
        v154 -= 2;
      }
      while (v154);
      if ((((_BYTE)v134 - 1) & 1) != 0)
      {
LABEL_200:
        v159 = v134 - v138;
        v160 = &v131[40 * v138 + 16];
        do
        {
          v161 = *((_DWORD *)v160 - 4);
          *((_DWORD *)v160 - 4) = *(_DWORD *)v160;
          *(_DWORD *)v160 = v161;
          v160 += 40;
          --v159;
        }
        while (v159);
      }
    }
    v162 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v133 - (_QWORD)(v131 + 40)) >> 3));
    if ((char *)v133 == v131 + 40)
      v163 = 0;
    else
      v163 = v162;
    sub_2238A1418((uint64_t)(v131 + 40), v133, v163, 1);
  }
  memset(v268, 0, 24);
  if ((char *)v133 == v131)
  {
    v165 = 0;
    v166 = 0uLL;
  }
  else
  {
    if (v134 >> 60)
      sub_22316E078();
    v268[0] = operator new(16 * v134);
    v268[1] = v268[0];
    v268[2] = (char *)v268[0] + 16 * v134;
    *(_QWORD *)__p = v268;
    v164 = v131;
    do
    {
      v265 = *(_OWORD *)(v164 + 20);
      sub_2232E9564((char ***)__p, &v265);
      v164 += 40;
    }
    while (v164 != (char *)v133);
    v165 = v268[0];
    v166 = *(_OWORD *)&v268[1];
  }
  *(_QWORD *)a9 = v165;
  *(_OWORD *)(a9 + 8) = v166;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v167 = sub_2241471F8();
    v168 = v167[2];
    if (!v168)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v168 = v167[2];
    }
    v169 = *(_QWORD *)(v168 + 64);
    v170 = (std::mutex *)(v169 + 32);
    std::mutex::lock((std::mutex *)(v169 + 32));
    v172 = *(_QWORD *)(v169 + 96);
    v171 = *(_QWORD *)(v169 + 104);
    std::mutex::unlock(v170);
    if (v172 != v171)
    {
      v268[0] = "cv3d.recon.";
      v268[1] = (void *)11;
      v268[2] = "Stats.Keyframing.Selection";
      v268[3] = (void *)26;
      sub_2231A9820((uint64_t)v268, (uint64_t)&v268[4], 0, 0, &v243);
      sub_2241471F8();
      v173 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173))
      {
        v265 = 0u;
        v266 = 0u;
        v267 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173))
        {
          qmemcpy(v250, "ing", 3);
          *(_QWORD *)&v249 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v249 + 1) = 2;
          v174 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173))
          {
            v175 = v134 - 2;
            if (v134 >= 2)
            {
              if (v133 - (unint64_t)v131 - 80 < 0x28)
              {
                v176 = 1;
                goto LABEL_223;
              }
              v224 = v131 + 56;
              v225 = !is_mul_ok(v175, 0x28uLL);
              v226 = 40 * v175;
              v227 = (unint64_t)&v131[40 * v175 + 56];
              v176 = 1;
              if (v227 < (unint64_t)(v131 + 56))
                goto LABEL_223;
              if (v225)
                goto LABEL_223;
              if (&v131[v226 + 40] < v131 + 40)
                goto LABEL_223;
              if (v225)
                goto LABEL_223;
              v176 = (v134 - 1) | 1;
              v228 = (v134 - 1) & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v229 = *(v224 - 4);
                v230 = v224[6];
                v231 = v224[10];
                *(v224 - 4) = *v224;
                v224[6] = v231;
                *v224 = v229;
                v224[10] = v230;
                v224 += 20;
                v228 -= 2;
              }
              while (v228);
              if (v134 - 1 != ((v134 - 1) & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_223:
                v177 = v134 - v176;
                v178 = &v131[40 * v176 + 16];
                do
                {
                  v179 = *((_DWORD *)v178 - 4);
                  *((_DWORD *)v178 - 4) = *(_DWORD *)v178;
                  *(_DWORD *)v178 = v179;
                  v178 += 40;
                  --v177;
                }
                while (v177);
              }
            }
            v238 = v173;
            memset(&v259, 0, sizeof(v259));
            if ((char *)v133 != v131)
            {
              v180 = off_24EC5BE90;
              v181 = (int *)v131;
              while (1)
              {
                v182 = v180;
                v183 = *v181;
                v185 = v247;
                v184 = v248;
                v257 = (float)v181[4] / 1000.0;
                v186 = v181 + 5;
                LODWORD(v268[3]) = 0;
                sub_22319B83C((uint64_t)__p, (uint64_t)v268, (unsigned __int8 *)v181 + 20);
                if (LODWORD(v268[3]) == -1)
                  sub_22316DD70();
                *(_QWORD *)__p = &v264;
                ((void (*)(void **__return_ptr, _BYTE *, void **))off_24EC5BEC0[LODWORD(v268[3])])(v254, __p, v268);
                if (LODWORD(v268[3]) != -1)
                  ((void (*)(_BYTE *, void **))off_24EC5BEA8[LODWORD(v268[3])])(__p, v268);
                v187 = v255;
                v188 = v254;
                if ((v255 & 0x80u) != 0)
                {
                  v188 = (void **)v254[0];
                  v187 = (uint64_t)v254[1];
                }
                if (v187 >= 8)
                  v187 = 8;
                v256[0] = v188;
                v256[1] = v187;
                *(_DWORD *)&v262[1] = 0;
                std::to_string(&v263, (int)(float)((float)((float)v183 * -100.0)/ (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v184 - v185) >> 2))));
                v268[0] = __p;
                v268[1] = &v263;
                v268[2] = __p;
                v268[3] = &v263;
                v268[4] = &v263;
                if (*(_DWORD *)&v262[1] == -1)
                  sub_22316DD70();
                v180 = v182;
                v264 = v268;
                ((void (*)(void ***, _BYTE *))v182[*(unsigned int *)&v262[1]])(&v264, __p);
                if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v263.__r_.__value_.__l.__data_);
                v268[0] = __p;
                v268[1] = "%/";
                v268[2] = __p;
                v268[3] = "%/";
                v268[4] = "%/";
                if (*(_DWORD *)&v262[1] == -1)
                  sub_22316DD70();
                v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
                ((void (*)(std::string *, _BYTE *))off_24EC5BED8[*(unsigned int *)&v262[1]])(&v263, __p);
                std::to_string(&v263, -v183);
                v268[0] = __p;
                v268[1] = &v263;
                v268[2] = __p;
                v268[3] = &v263;
                v268[4] = &v263;
                if (*(_DWORD *)&v262[1] == -1)
                  sub_22316DD70();
                v264 = v268;
                ((void (*)(void ***, _BYTE *))v182[*(unsigned int *)&v262[1]])(&v264, __p);
                if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v263.__r_.__value_.__l.__data_);
                v268[0] = __p;
                v268[1] = "/";
                v268[2] = __p;
                v268[3] = "/";
                v268[4] = "/";
                if (*(_DWORD *)&v262[1] == -1)
                  sub_22316DD70();
                v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
                ((void (*)(std::string *, _BYTE *))off_24EC5BEF0[*(unsigned int *)&v262[1]])(&v263, __p);
                sub_2233B45E8((uint64_t)&v264, (uint64_t)__p, &v257);
                v268[0] = __p;
                v268[1] = "/";
                v268[2] = __p;
                v268[3] = "/";
                v268[4] = "/";
                if (*(_DWORD *)&v262[1] == -1)
                  sub_22316DD70();
                v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
                ((void (*)(std::string *, _BYTE *))off_24EC5BEF0[*(unsigned int *)&v262[1]])(&v263, __p);
                sub_223663638((uint64_t)&v260, (uint64_t)__p, (uint64_t)v256);
                v268[0] = __p;
                v268[1] = "\n";
                v268[2] = __p;
                v268[3] = "\n";
                v268[4] = "\n";
                if (*(_DWORD *)&v262[1] == -1)
                  sub_22316DD70();
                v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
                ((void (*)(std::string *, _BYTE *))off_24EC5BEF0[*(unsigned int *)&v262[1]])(&v263, __p);
                if (*(_DWORD *)&v262[1] == -1)
                  sub_22316DD70();
                v268[0] = &v263;
                ((void (*)(std::string *__return_ptr, void **, _BYTE *))off_24EC5BEC0[*(unsigned int *)&v262[1]])(&v258, v268, __p);
                if (*(_DWORD *)&v262[1] != -1)
                  ((void (*)(void **, _BYTE *))off_24EC5BEA8[*(unsigned int *)&v262[1]])(v268, __p);
                if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v189 = &v258;
                else
                  v189 = (std::string *)v258.__r_.__value_.__r.__words[0];
                if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v258.__r_.__value_.__r.__words[2]);
                else
                  size = v258.__r_.__value_.__l.__size_;
                std::string::append(&v259, (const std::string::value_type *)v189, size);
                if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v258.__r_.__value_.__l.__data_);
                  if (((char)v255 & 0x80000000) == 0)
                    goto LABEL_228;
LABEL_257:
                  operator delete(v254[0]);
                  v181 = v186 + 5;
                  if (v186 + 5 == (_DWORD *)v133)
                    break;
                }
                else
                {
                  if ((char)v255 < 0)
                    goto LABEL_257;
LABEL_228:
                  v181 = v186 + 5;
                  if (v186 + 5 == (_DWORD *)v133)
                    break;
                }
              }
            }
            v268[1] = 0;
            v268[2] = 0;
            v268[0] = &v268[1];
            sub_2245314F4(v268, __p);
            v251 = *(_OWORD *)__p;
            sub_22323DF84((uint64_t)v268, (char *)v268[1]);
            HIBYTE(v268[2]) = 4;
            strcpy((char *)v268, "size");
            v263.__r_.__value_.__r.__words[0] = (uint64_t)(v133 - (_QWORD)v131) / 40;
            sub_224527BAC((uint64_t)v268, (CFStringRef *)__p);
            sub_2238A5104((uint64_t)&v251, *(const void **)__p, (uint64_t *)&v263);
            v191 = *(std::__shared_weak_count **)&__p[8];
            if (*(_QWORD *)&__p[8])
            {
              v192 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
            if (SHIBYTE(v268[2]) < 0)
              operator delete(v268[0]);
            HIBYTE(v268[2]) = 3;
            strcpy((char *)v268, "kfs");
            sub_224527BAC((uint64_t)v268, (CFStringRef *)__p);
            sub_2236634D4((uint64_t)&v251, *(const void **)__p, (uint64_t)&v259);
            v194 = *(std::__shared_weak_count **)&__p[8];
            if (*(_QWORD *)&__p[8])
            {
              v195 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }
            if (SHIBYTE(v268[2]) < 0)
              operator delete(v268[0]);
            if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v259.__r_.__value_.__l.__data_);
            *(_QWORD *)__p = 0x7070616C7265766FLL;
            *(_WORD *)&__p[8] = v250[0];
            *(_WORD *)&__p[10] = LOBYTE(v250[1]);
            *(_QWORD *)&__p[12] = v271[0];
            *(_DWORD *)&__p[19] = *(_DWORD *)((char *)v271 + 7);
            *(_WORD *)v262 = 267;
            v250[0] = 0;
            LOBYTE(v250[1]) = 0;
            v271[0] = 0;
            *(_DWORD *)((char *)v271 + 7) = 0;
            sub_2231AD9F0((uint64_t)&v251, (__int128 *)__p, &v249, &v252);
            if (v262[1] && (v262[0] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v197 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
            if (*((_QWORD *)&v251 + 1))
            {
              v198 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
            v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v238 + 56))(v238);
            v201 = *(void **)v200;
            v202 = *(std::__shared_weak_count **)(v200 + 8);
            if (v202)
            {
              v203 = (unint64_t *)&v202->__shared_owners_;
              do
                v204 = __ldxr(v203);
              while (__stxr(v204 + 1, v203));
            }
            v205 = v253;
            v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v263.__r_.__value_.__r.__words[1] = v253;
            v253 = 0uLL;
            v268[0] = v201;
            v268[1] = v202;
            if (v202)
            {
              v206 = (unint64_t *)&v202->__shared_owners_;
              do
                v207 = __ldxr(v206);
              while (__stxr(v207 + 1, v206));
            }
            v268[2] = &off_24EC6A3B8;
            *(_OWORD *)&v268[3] = v205;
            if (*((_QWORD *)&v205 + 1))
            {
              v208 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
              do
                v209 = __ldxr(v208);
              while (__stxr(v209 + 1, v208));
            }
            (*(void (**)(uint64_t *, void **))(*v174 + 16))(v174, v268);
            v210 = (std::__shared_weak_count *)v268[4];
            if (v268[4])
            {
              v211 = (unint64_t *)((char *)v268[4] + 8);
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 - 1, v211));
              if (!v212)
              {
                ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                std::__shared_weak_count::__release_weak(v210);
              }
            }
            v213 = (std::__shared_weak_count *)v268[1];
            if (v268[1])
            {
              v214 = (unint64_t *)((char *)v268[1] + 8);
              do
                v215 = __ldaxr(v214);
              while (__stlxr(v215 - 1, v214));
              if (!v215)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
            v216 = (std::__shared_weak_count *)v263.__r_.__value_.__r.__words[2];
            if (v263.__r_.__value_.__r.__words[2])
            {
              v217 = (unint64_t *)(v263.__r_.__value_.__r.__words[2] + 8);
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            if (v202)
            {
              v219 = (unint64_t *)&v202->__shared_owners_;
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            v221 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
            if (*((_QWORD *)&v253 + 1))
            {
              v222 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
              do
                v223 = __ldaxr(v222);
              while (__stlxr(v223 - 1, v222));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                std::__shared_weak_count::__release_weak(v221);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v243.__r_.__value_.__l.__data_);
    }
  }
  kdebug_trace();
  if (v131)
    operator delete(v131);
  sub_223198030((uint64_t)&v244, v245);
  if (v247)
  {
    v248 = (int32x2_t *)v247;
    operator delete(v247);
  }
}

void sub_22389C5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  void *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *v75;

  sub_2241231D8(v68);
  v70 = (std::__shared_weak_count *)a66;
  if (a66)
  {
    v71 = (unint64_t *)(a66 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  sub_2241231D8((uint64_t)&a56);
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_2241231D8((uint64_t)&a36);
  sub_2231874DC((uint64_t)&a60);
  if (a24 < 0)
    operator delete(__p);
  v75 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v75;
    operator delete(v75);
  }
  if (v66)
    operator delete(v66);
  sub_223198030((uint64_t)&a25, (_QWORD *)a26);
  if (!a28)
    _Unwind_Resume(a1);
  a29 = (uint64_t)a28;
  operator delete(a28);
  _Unwind_Resume(a1);
}

void sub_22389CA9C(float32x4_t *a1@<X0>, __int128 **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  float32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  float *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  float *v110;
  float *v111;
  int v112;
  float v113;
  float v115;
  uint64_t v117;
  float v118;
  float v120;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  float v136;
  std::__shared_weak_count *v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  float32x4_t *v145;
  BOOL v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  char *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  BOOL v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  BOOL *v176;
  BOOL v177;
  float *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  float *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  BOOL v195;
  float *v196;
  float *v197;
  int v198;
  BOOL *v199;
  float v200;
  BOOL v201;
  float v203;
  uint64_t v206;
  uint64_t v207;
  float v208;
  BOOL v209;
  float v211;
  BOOL v212;
  float v214;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int8x16_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int8 *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  unsigned int v257;
  uint64_t v258;
  unsigned __int8 *v259;
  unint64_t v260;
  unint64_t v261;
  unsigned __int8 *v262;
  unint64_t v263;
  uint64_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  uint8x16_t v273;
  uint16x8_t v274;
  uint16x8_t v275;
  uint8x16_t v276;
  uint16x8_t v277;
  uint16x8_t v278;
  int32x4_t v279;
  int32x4_t v280;
  uint16x8_t v281;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  __int128 v292;
  void *v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  unsigned int *v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int *v301;
  unint64_t v302;
  char *v303;
  float32x4_t *v304;
  unint64_t v305;
  uint64_t v306;
  float32x4_t v307;
  float *v308;
  float32x4_t *v309;
  uint64_t v310;
  int16x4_t v311;
  unint64_t v313;
  int v314;
  char *v315;
  _OWORD *v316;
  uint64_t *v317;
  unint64_t v318;
  _OWORD *v319;
  _OWORD *v320;
  _OWORD *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t v350;
  int v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  BOOL *v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  unsigned __int8 *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  int v369;
  int v370;
  int v371;
  int v372;
  BOOL *v373;
  unsigned __int8 *v374;
  uint64_t v375;
  uint64_t (**v376)();
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  uint64_t v383;
  int64_t v384;
  unsigned int v385;
  unsigned int v386;
  _DWORD *v387;
  unsigned int v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  __int128 *v392;
  uint64_t v393;
  unint64_t v394;
  char *v395;
  int v396;
  unsigned int v397;
  int v398;
  uint64_t v399;
  unsigned int *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t (**v403)();
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unsigned __int8 v418;
  __int16 v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t (**v427)();
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unsigned __int8 v442;
  __int16 v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  unint64_t v467;
  unsigned int v468;
  int v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unsigned __int8 *v475;
  uint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  unsigned __int8 *v481;
  uint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  unint64_t v486;
  int v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unsigned int v492;
  int v493;
  unsigned __int8 *v494;
  unsigned __int8 *v495;
  int v496;
  unsigned __int8 *v497;
  unsigned __int8 *v498;
  unsigned __int8 *v499;
  unsigned __int8 *v500;
  uint64_t v501;
  unsigned __int8 *v502;
  unsigned __int8 *v503;
  uint64_t v504;
  uint64_t (**v505)();
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  unsigned int v512;
  unint64_t v513;
  char *v514;
  unint64_t v515;
  unint64_t v516;
  char *v517;
  char *v518;
  char *v519;
  char *v520;
  __int128 v521;
  unint64_t v522;
  char *v523;
  char *v524;
  unsigned int v525;
  int v526;
  int v527;
  char *v528;
  uint64_t v529;
  int64_t v530;
  int v531;
  int v532;
  _DWORD *v533;
  unsigned int v534;
  unsigned int v535;
  uint64_t v536;
  uint64_t v537;
  __int128 *v538;
  uint64_t v539;
  unint64_t v540;
  unsigned int *v541;
  unsigned int v542;
  unsigned int v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  void *v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  char *v555;
  char *v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  unint64_t *v560;
  unint64_t v561;
  unsigned int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  int v571;
  int v572;
  uint64_t v574;
  int v575;
  char *v576;
  char *v578;
  char *v579;
  __int128 *v580;
  char *v581;
  _OWORD *v582;
  NSObject *v583;
  unsigned int *v584;
  uint64_t v586;
  char *v587;
  char *v588;
  char *v589;
  char *v590;
  __int128 v591;
  uint64_t (**v592)();
  std::__shared_weak_count *v593;
  std::__shared_weak_count *v594;
  float *v595;
  unsigned int v596;
  unsigned int v597;
  char v598;
  char v599;
  __int128 v600;
  std::__shared_weak_count *v601;
  uint64_t v602;
  std::__shared_weak_count *v603;
  uint64_t v604[2];
  int v605;
  int v606;
  float32x4_t __p;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  uint64_t v611;
  std::__shared_weak_count *v612;
  uint64_t (**v613)();
  std::__shared_weak_count *v614;
  std::__shared_weak_count *v615;
  float *v616;
  int v617;
  int v618;
  unsigned int v619;
  unsigned int v620;
  char v621;
  char v622;
  uint64_t v623;
  std::__shared_weak_count *v624;
  uint64_t v625;
  __int128 v626;
  uint64_t v627;
  std::__shared_weak_count *v628;
  __int128 v629;
  _BYTE v630[32];
  __int128 v631;
  __int128 v632;
  int v633;
  NSObject *v634;
  _BYTE v635[72];
  int v636;
  uint64_t v637;

  v637 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (*a2 == a2[1])
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  v591 = 0uLL;
  v588 = 0;
  v589 = 0;
  v590 = 0;
  v8 = *(_QWORD *)(a4 + 24);
  if (!v8)
    sub_223198474();
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 48))(&v623);
  if (!v623)
  {
LABEL_224:
    v151 = v624;
    if (!v624)
      goto LABEL_228;
    goto LABEL_225;
  }
  v9 = sub_2231D020C(v623) / a5;
  v10 = sub_2231D0214(v623) / a5;
  v583 = (v9 | (v10 << 32));
  sub_2231FDFBC(v583, (const void **)&v629);
  sub_2231FEA00(v629, v635);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v629 + 1);
  if (*((_QWORD *)&v629 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v629 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(_OWORD *)v635;
  *(_QWORD *)v635 = 0;
  *(_QWORD *)&v635[8] = 0;
  v591 = v14;
  v613 = &off_24EC21FE8;
  sub_2231DCF04(v14, (uint64_t *)&v614);
  sub_2238A4954(v591, (uint64_t)&unk_224652B20);
  v15 = (char *)a2[1] - (char *)*a2;
  v16 = v15 >> 4;
  if (v15 >> 4)
  {
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF1)
      sub_22316E078();
    v588 = (char *)operator new(2 * v15);
    v589 = v588;
    v590 = &v588[32 * v16];
  }
  v17 = *a2;
  v580 = a2[1];
  if (*a2 != v580)
  {
    v18 = vcvt_f32_u32((uint32x2_t)__PAIR64__(v10, v9));
    v563 = a5;
    while (1)
    {
      v19 = *(_QWORD *)(a4 + 24);
      if (!v19)
        sub_223198474();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v19 + 48))(&v611, v19, v17);
      if (!v611)
      {
LABEL_184:
        v133 = v612;
        if (v612)
          goto LABEL_185;
        goto LABEL_15;
      }
      v20 = *(_QWORD *)(a4 + 56);
      if (!v20)
        sub_223198474();
      (*(void (**)(float32x4_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v20 + 48))(&__p, v20, v17);
      v21 = sub_2231D0224(v611);
      v22 = vdiv_f32(v18, vcvt_f32_u32(*(uint32x2_t *)(v21 + 88)));
      v23 = vmul_f32(v22, *(float32x2_t *)(v21 + 16));
      v24 = vadd_f32(vmul_f32(v22, vadd_f32(*(float32x2_t *)(v21 + 24), (float32x2_t)0x3F0000003F000000)), (float32x2_t)0xBF000000BF000000);
      *(float32x2_t *)&v600 = v23;
      *((float32x2_t *)&v600 + 1) = v24;
      sub_223207E58(v635, (int *)&v600);
      *(_OWORD *)v630 = *(_OWORD *)&v635[8];
      *(_OWORD *)&v630[16] = *(_OWORD *)&v635[24];
      v631 = *(_OWORD *)&v635[40];
      v632 = *(_OWORD *)&v635[56];
      v633 = v636;
      v634 = v583;
      *((_QWORD *)&v629 + 1) = &off_24EC20868;
      *(_QWORD *)&v629 = &off_24EC207B8;
      sub_2231D3D90(v611, (uint64_t)v635);
      v25 = *(_QWORD *)&v635[24];
      if (v635[48] && *(_QWORD *)&v635[24])
      {
        v27 = *(_QWORD *)&v635[8];
        v26 = *(std::__shared_weak_count **)&v635[16];
        if (*(_QWORD *)&v635[16])
        {
          v28 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          do
            v30 = __ldaxr(v28);
          while (__stlxr(v30 - 1, v28));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v27 + 88))(v27, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v25 = *(_QWORD *)&v635[24];
      }
      v31 = *(_DWORD *)&v635[36] >= a5 && *(_DWORD *)&v635[32] >= a5;
      v32 = (*(_DWORD *)&v635[32] / a5) | ((unint64_t)(*(_DWORD *)&v635[36] / a5) << 32);
      if (!v31)
        v32 = 0;
      v604[0] = v25;
      v604[1] = v32;
      v605 = *(_DWORD *)&v635[40] * a5;
      v606 = *(_DWORD *)&v635[44] * a5;
      if (*(_DWORD *)&v635[44] * a5 * HIDWORD(v32) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v33 = *(std::__shared_weak_count **)&v635[16];
      if (*(_QWORD *)&v635[16])
      {
        v34 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      sub_2231FDFBC(v583, (const void **)v635);
      sub_2231FEA00(*(uint64_t *)v635, &v602);
      v36 = *(std::__shared_weak_count **)&v635[8];
      if (*(_QWORD *)&v635[8])
      {
        v37 = (unint64_t *)(*(_QWORD *)&v635[8] + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      sub_2238A4954(v602, (uint64_t)&unk_224652B20);
      v39 = a1[1];
      v40 = a1[2];
      v41 = a1[3];
      v42 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, v608.f32[0]), v39, *(float32x2_t *)v608.f32, 1), v40, v608, 2), v41, v608, 3);
      v43 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, v609.f32[0]), v39, *(float32x2_t *)v609.f32, 1), v40, v609, 2), v41, v609, 3);
      v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, v610.f32[0]), v39, *(float32x2_t *)v610.f32, 1), v40, v610, 2), v41, v610, 3);
      *(float32x4_t *)v635 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, __p.f32[0]), v39, *(float32x2_t *)__p.f32, 1), v40, __p, 2), v41, __p, 3);
      *(float32x4_t *)&v635[16] = v42;
      *(float32x4_t *)&v635[32] = v43;
      *(float32x4_t *)&v635[48] = v44;
      *(_QWORD *)&v600 = &off_24EC21FE8;
      sub_2231DCF04(v602, (uint64_t *)&v600 + 1);
      v592 = &off_24EC21230;
      sub_2231BE6D4(v602, (uint64_t *)&v593);
      sub_2237F7D68(v604, (float32x2_t *)&v629, (float32x2_t *)v635, (uint64_t)&v600, v45, v46, v47, v48, v49, v50, v51);
      v626 = *v17;
      v52 = v602;
      v53 = v603;
      v627 = v602;
      v628 = v603;
      v602 = 0;
      v603 = 0;
      v54 = v589;
      if (v589 < v590)
      {
        *(_OWORD *)v589 = v626;
        *((_QWORD *)v589 + 2) = v52;
        *((_QWORD *)v589 + 3) = v53;
        v627 = 0;
        v628 = 0;
        v55 = v589 + 32;
        goto LABEL_66;
      }
      v56 = v588;
      v57 = (v589 - v588) >> 5;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 59)
        sub_22316E078();
      v59 = v590 - v588;
      if ((v590 - v588) >> 4 > v58)
        v58 = v59 >> 4;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFE0)
        v60 = 0x7FFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60 >> 59)
        sub_223174E94();
      v61 = (char *)operator new(32 * v60);
      v62 = &v61[32 * v57];
      *(_OWORD *)v62 = v626;
      *((_QWORD *)v62 + 2) = v52;
      *((_QWORD *)v62 + 3) = v53;
      v627 = 0;
      v628 = 0;
      v55 = v62 + 32;
      if (v589 != v588)
        break;
      v588 = &v61[32 * v57];
      v590 = &v61[32 * v60];
      if (v589)
        goto LABEL_65;
LABEL_66:
      v589 = v55;
      v67 = v628;
      if (!v628)
        goto LABEL_70;
      p_shared_owners = (unint64_t *)&v628->__shared_owners_;
      do
        v69 = __ldaxr(p_shared_owners);
      while (__stlxr(v69 - 1, p_shared_owners));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        v70 = (uint64_t)v614;
        if (!v614)
          goto LABEL_91;
      }
      else
      {
LABEL_70:
        v70 = (uint64_t)v614;
        if (!v614)
          goto LABEL_91;
      }
      v71 = v615;
      if (!v615)
        goto LABEL_87;
      v72 = (unint64_t *)&v615->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
      do
        v74 = __ldaxr(v72);
      while (__stlxr(v74 - 1, v72));
      if (v74)
      {
        v70 = (uint64_t)v614;
        v75 = v615;
        if (!v615)
          goto LABEL_87;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        v70 = (uint64_t)v614;
        v75 = v615;
        if (!v615)
          goto LABEL_87;
      }
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      do
        v78 = __ldaxr(v76);
      while (__stlxr(v78 - 1, v76));
      if (v78)
      {
LABEL_87:
        if (v622)
          goto LABEL_88;
        goto LABEL_91;
      }
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
      if (v622)
      {
LABEL_88:
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v70 + 96))(&v626, v70, 1);
        v79 = (uint64_t)v593;
        if (!v593)
          goto LABEL_108;
        goto LABEL_92;
      }
LABEL_91:
      *(_QWORD *)&v626 = 0;
      v79 = (uint64_t)v593;
      if (!v593)
        goto LABEL_108;
LABEL_92:
      v80 = v594;
      if (!v594)
        goto LABEL_104;
      v81 = (unint64_t *)&v594->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
      do
        v83 = __ldaxr(v81);
      while (__stlxr(v83 - 1, v81));
      if (v83)
      {
        v79 = (uint64_t)v593;
        v84 = v594;
        if (!v594)
          goto LABEL_104;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
        v79 = (uint64_t)v593;
        v84 = v594;
        if (!v594)
          goto LABEL_104;
      }
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
      do
        v87 = __ldaxr(v85);
      while (__stlxr(v87 - 1, v85));
      if (v87)
      {
LABEL_104:
        if (!v599)
          goto LABEL_108;
        goto LABEL_105;
      }
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
      if (!v599)
      {
LABEL_108:
        v625 = 0;
        v88 = v617;
        if (!v617)
          goto LABEL_166;
        goto LABEL_109;
      }
LABEL_105:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v79 + 96))(&v625, v79, 0);
      v88 = v617;
      if (!v617)
        goto LABEL_166;
LABEL_109:
      v89 = v618;
      if (!v618)
        goto LABEL_166;
      v90 = v619;
      v91 = v620;
      v92 = v596;
      v565 = v597;
      v93 = v616;
      if (v621 && v616)
      {
        v95 = (uint64_t)v614;
        v94 = v615;
        if (v615)
        {
          v96 = (unint64_t *)&v615->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
          do
            v98 = __ldaxr(v96);
          while (__stlxr(v98 - 1, v96));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v95 + 88))(v95, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v93 = v616;
      }
      v99 = v595;
      if (v598 && v595)
      {
        v101 = (uint64_t)v593;
        v100 = v594;
        if (v594)
        {
          v102 = (unint64_t *)&v594->__shared_owners_;
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
          do
            v104 = __ldaxr(v102);
          while (__stlxr(v104 - 1, v102));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v101 + 88))(v101, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v99 = v595;
      }
      v105 = v88 - 1;
      v106 = v89 - 1;
      if (v89 != 1)
      {
        v107 = 4 * v91;
        v108 = 4 * v565;
        if (v88 == 1)
        {
          a5 = v563;
          do
          {
            v136 = *v99;
            if (*v99 > 0.0 && v136 > -65504.0)
            {
              if (*v93 <= v136)
                v136 = *v93;
              *v93 = v136;
            }
            v93 = (float *)((char *)v93 + v107);
            v99 = (float *)((char *)v99 + v108);
            --v106;
          }
          while (v106);
          goto LABEL_159;
        }
        v109 = 0;
        do
        {
          v110 = v99;
          v111 = v93;
          v112 = v88 - 1;
          do
          {
            v113 = *v110;
            if (*v110 > 0.0 && v113 > -65504.0)
            {
              if (*v111 <= v113)
                v113 = *v111;
              *v111 = v113;
            }
            v111 += v90;
            v110 += v92;
            --v112;
          }
          while (v112);
          v115 = *v110;
          if (*v110 > 0.0 && v115 > -65504.0)
          {
            if (*v111 <= v115)
              v115 = *v111;
            *v111 = v115;
          }
          v93 = (float *)((char *)v93 + v107);
          v99 = (float *)((char *)v99 + v108);
          ++v109;
        }
        while (v109 != v106);
      }
      if (v88 == 1)
      {
        a5 = v563;
      }
      else
      {
        v117 = 4 * v90;
        a5 = v563;
        do
        {
          v118 = *v99;
          if (*v99 > 0.0 && v118 > -65504.0)
          {
            if (*v93 <= v118)
              v118 = *v93;
            *v93 = v118;
          }
          v93 = (float *)((char *)v93 + v117);
          v99 += v92;
          --v105;
        }
        while (v105);
      }
LABEL_159:
      v120 = *v99;
      if (*v99 > 0.0 && v120 > -65504.0)
      {
        if (*v93 <= v120)
          v120 = *v93;
        *v93 = v120;
      }
LABEL_166:
      v122 = v625;
      v625 = 0;
      if (v122)
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
      v123 = v626;
      *(_QWORD *)&v626 = 0;
      if (v123)
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
      v124 = v594;
      if (!v594)
        goto LABEL_174;
      v125 = (unint64_t *)&v594->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
        v127 = v601;
        if (!v601)
          goto LABEL_180;
      }
      else
      {
LABEL_174:
        v127 = v601;
        if (!v601)
          goto LABEL_180;
      }
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
LABEL_180:
      v130 = v603;
      if (!v603)
        goto LABEL_184;
      v131 = (unint64_t *)&v603->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (v132)
        goto LABEL_184;
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
      v133 = v612;
      if (v612)
      {
LABEL_185:
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
LABEL_15:
      if (++v17 == v580)
        goto LABEL_200;
    }
    v63 = v589;
    do
    {
      *((_OWORD *)v62 - 2) = *((_OWORD *)v63 - 2);
      *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
      v62 -= 32;
      *((_QWORD *)v63 - 2) = 0;
      *((_QWORD *)v63 - 1) = 0;
      v63 -= 32;
    }
    while (v63 != v588);
    v588 = v62;
    v590 = &v61[32 * v60];
    do
    {
      v64 = (std::__shared_weak_count *)*((_QWORD *)v54 - 1);
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v54 -= 32;
    }
    while (v54 != v56);
    v54 = v56;
    if (!v56)
      goto LABEL_66;
LABEL_65:
    operator delete(v54);
    goto LABEL_66;
  }
LABEL_200:
  v139 = *(_QWORD *)(v591 + 8);
  v138 = *(std::__shared_weak_count **)(v591 + 16);
  if (!v138)
    goto LABEL_205;
  v140 = (unint64_t *)&v138->__shared_owners_;
  do
    v141 = __ldxr(v140);
  while (__stxr(v141 + 1, v140));
  do
    v142 = __ldaxr(v140);
  while (__stlxr(v142 - 1, v140));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
    if (!v139)
      goto LABEL_210;
  }
  else
  {
LABEL_205:
    if (!v139)
      goto LABEL_210;
  }
  if (*(_BYTE *)(v591 + 81))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v591 + 8) + 96))(&v629, *(_QWORD *)(v591 + 8), 1);
    v143 = *(unsigned int *)(v591 + 76);
    v144 = *(_QWORD *)(v591 + 64);
    v145 = *(float32x4_t **)(v591 + 32);
    if (!*(_BYTE *)(v591 + 80))
      goto LABEL_213;
    goto LABEL_211;
  }
LABEL_210:
  *(_QWORD *)&v629 = 0;
  v143 = *(unsigned int *)(v591 + 76);
  v144 = *(_QWORD *)(v591 + 64);
  v145 = *(float32x4_t **)(v591 + 32);
  if (!*(_BYTE *)(v591 + 80))
    goto LABEL_213;
LABEL_211:
  if (v145)
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v591 + 8) + 88))(*(_QWORD *)(v591 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v145 = *(float32x4_t **)(v591 + 32);
  }
LABEL_213:
  if ((_DWORD)v143 * HIDWORD(v144))
    v146 = v144 == 0;
  else
    v146 = 1;
  if (!v146)
  {
    v304 = (float32x4_t *)((char *)v145 + 4 * (v143 * HIDWORD(v144)));
    v305 = (v144 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v306 = (v305 + 1) & 0x7FFFFFFFFFFFFFFCLL;
    v307 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    do
    {
      v308 = (float *)v145;
      if (v305 < 3)
      {
        do
        {
LABEL_472:
          if (*v308 <= 0.0 || *v308 <= -65504.0)
            *v308 = 0.0;
          ++v308;
        }
        while (v308 != &v145->f32[v144]);
        goto LABEL_456;
      }
      v308 = &v145->f32[v306];
      v309 = v145;
      v310 = (v305 + 1) & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v311 = vmovn_s32((int32x4_t)vornq_s8(vmvnq_s8((int8x16_t)vcgtzq_f32(*v309)), (int8x16_t)vcgtq_f32(*v309, v307)));
        if ((v311.i8[0] & 1) != 0)
        {
          v309->i32[0] = 0;
          if ((v311.i8[2] & 1) == 0)
            goto LABEL_462;
        }
        else if ((v311.i8[2] & 1) == 0)
        {
LABEL_462:
          if ((v311.i8[4] & 1) == 0)
            goto LABEL_467;
          goto LABEL_463;
        }
        v309->i32[1] = 0;
        if ((v311.i8[4] & 1) == 0)
        {
LABEL_467:
          if ((v311.i8[6] & 1) == 0)
            goto LABEL_459;
          goto LABEL_468;
        }
LABEL_463:
        v309->i32[2] = 0;
        if ((v311.i8[6] & 1) == 0)
          goto LABEL_459;
LABEL_468:
        v309->i32[3] = 0;
LABEL_459:
        ++v309;
        v310 -= 4;
      }
      while (v310);
      if (v305 + 1 != v306)
        goto LABEL_472;
LABEL_456:
      v145 = (float32x4_t *)((char *)v145 + 4 * v143);
    }
    while (v145 != v304);
  }
  v147 = v629;
  *(_QWORD *)&v629 = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = v615;
  if (!v615)
    goto LABEL_224;
  v149 = (unint64_t *)&v615->__shared_owners_;
  do
    v150 = __ldaxr(v149);
  while (__stlxr(v150 - 1, v149));
  if (v150)
    goto LABEL_224;
  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
  std::__shared_weak_count::__release_weak(v148);
  v151 = v624;
  if (!v624)
    goto LABEL_228;
LABEL_225:
  v152 = (unint64_t *)&v151->__shared_owners_;
  do
    v153 = __ldaxr(v152);
  while (__stlxr(v153 - 1, v152));
  if (v153)
  {
LABEL_228:
    v154 = v588;
    if (v588 != v589)
      goto LABEL_229;
LABEL_479:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    goto LABEL_829;
  }
  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
  std::__shared_weak_count::__release_weak(v151);
  v154 = v588;
  if (v588 == v589)
    goto LABEL_479;
LABEL_229:
  sub_2231F761C(*(NSObject **)(*((_QWORD *)v154 + 2) + 64), (const void **)&v629);
  sub_2231F8060(v629, &v592);
  v155 = (std::__shared_weak_count *)*((_QWORD *)&v629 + 1);
  if (*((_QWORD *)&v629 + 1))
  {
    v156 = (unint64_t *)(*((_QWORD *)&v629 + 1) + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  LODWORD(v629) = 0;
  sub_2231CBEAC((uint64_t)v592, (uint64_t)&v629);
  __p = 0uLL;
  v608.i64[0] = 0;
  v158 = v589 - v588;
  if (v589 == v588)
  {
    v160 = 0;
    v159 = 0;
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    goto LABEL_484;
  }
  if (v158 < 0)
    sub_22316E078();
  v159 = 0;
  v160 = 0;
  v161 = 0;
  v574 = v158 >> 5;
  __p.i64[0] = (uint64_t)operator new((unint64_t)v158 >> 1);
  __p.i64[1] = __p.i64[0];
  v608.i64[0] = __p.i64[0] + 16 * (v158 >> 5);
  v581 = 0;
  do
  {
    v162 = *(_QWORD *)&v588[32 * v161 + 16];
    *(_QWORD *)&v629 = &off_24EC21230;
    sub_2231BE6D4(v162, (uint64_t *)&v629 + 1);
    *(_QWORD *)v635 = &off_24EC21230;
    sub_2231BE6D4(v591, (uint64_t *)&v635[8]);
    sub_2231F761C(*(NSObject **)&v635[32], (const void **)&v613);
    v576 = &v588[32 * v161];
    sub_2231F8060((uint64_t)v613, &v600);
    v163 = v614;
    if (!v614)
      goto LABEL_243;
    v164 = (unint64_t *)&v614->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
      v166 = v600;
      v168 = *(_DWORD *)(v600 + 64);
      v167 = *(_DWORD *)(v600 + 68);
      if (v168)
        v173 = v167 == 0;
      else
        v173 = 1;
      v586 = v161;
      if (v173)
      {
LABEL_248:
        v171 = (_QWORD *)__p.i64[1];
        v170 = v608.i64[0];
        if (__p.i64[1] < (unint64_t)v608.i64[0])
          goto LABEL_249;
        goto LABEL_336;
      }
    }
    else
    {
LABEL_243:
      v166 = v600;
      v168 = *(_DWORD *)(v600 + 64);
      v167 = *(_DWORD *)(v600 + 68);
      if (v168)
        v169 = v167 == 0;
      else
        v169 = 1;
      v586 = v161;
      if (v169)
        goto LABEL_248;
    }
    v571 = v167;
    v578 = v160;
    v175 = *(unsigned int *)(v166 + 72);
    v174 = *(unsigned int *)(v166 + 76);
    v568 = *(unsigned int *)&v630[24];
    v566 = *(unsigned int *)&v630[28];
    v569 = *(unsigned int *)&v635[40];
    v567 = *(unsigned int *)&v635[44];
    v176 = *(BOOL **)(v166 + 32);
    if (*(_BYTE *)(v166 + 80))
      v177 = v176 == 0;
    else
      v177 = 1;
    if (!v177)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v166 + 8) + 88))(*(_QWORD *)(v166 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v176 = *(BOOL **)(v166 + 32);
    }
    v178 = *(float **)&v630[8];
    if ((_BYTE)v631 && *(_QWORD *)&v630[8])
    {
      v179 = *((_QWORD *)&v629 + 1);
      v180 = *(std::__shared_weak_count **)v630;
      if (*(_QWORD *)v630)
      {
        v181 = (unint64_t *)(*(_QWORD *)v630 + 8);
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 1, v181));
        do
          v183 = __ldaxr(v181);
        while (__stlxr(v183 - 1, v181));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v179 + 88))(v179, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v161 = v586;
      v178 = *(float **)&v630[8];
    }
    v184 = *(float **)&v635[24];
    if (v635[48] && *(_QWORD *)&v635[24])
    {
      v185 = *(_QWORD *)&v635[8];
      v186 = *(std::__shared_weak_count **)&v635[16];
      if (*(_QWORD *)&v635[16])
      {
        v187 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
        do
          v188 = __ldxr(v187);
        while (__stxr(v188 + 1, v187));
        do
          v189 = __ldaxr(v187);
        while (__stlxr(v189 - 1, v187));
        if (!v189)
        {
          v564 = v185;
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
          v185 = v564;
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v185 + 88))(v185, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v161 = v586;
      v184 = *(float **)&v635[24];
    }
    v190 = v168 - 1;
    v191 = 4 * v568;
    v192 = 4 * v569;
    v193 = v571 - 1;
    if (v571 != 1)
    {
      if (v168 == 1)
      {
        v206 = 4 * v566;
        v207 = 4 * v567;
        do
        {
          while (1)
          {
            v208 = *v178;
            v209 = *v178 <= 0.0 || v208 <= -65504.0;
            if (v209 || (float)(*v184 * 1.1) < v208)
              break;
            *v176 = (float)(*v184 * 0.9) <= v208;
            v176 += v174;
            v178 = (float *)((char *)v178 + v206);
            v184 = (float *)((char *)v184 + v207);
            if (!--v193)
              goto LABEL_313;
          }
          *v176 = 0;
          v176 += v174;
          v178 = (float *)((char *)v178 + v206);
          v184 = (float *)((char *)v184 + v207);
          --v193;
        }
        while (v193);
      }
      else
      {
        v194 = 0;
        do
        {
          v196 = v184;
          v197 = v178;
          v198 = v168 - 1;
          v199 = v176;
          do
          {
            while (1)
            {
              v200 = *v197;
              v201 = *v197 <= 0.0 || v200 <= -65504.0;
              if (v201 || (float)(*v196 * 1.1) < v200)
                break;
              *v199 = (float)(*v196 * 0.9) <= v200;
              v199 += v175;
              v197 = (float *)((char *)v197 + v191);
              v196 = (float *)((char *)v196 + v192);
              if (!--v198)
                goto LABEL_293;
            }
            *v199 = 0;
            v199 += v175;
            v197 = (float *)((char *)v197 + v191);
            v196 = (float *)((char *)v196 + v192);
            --v198;
          }
          while (v198);
LABEL_293:
          v203 = *v197;
          v195 = *v197 > 0.0 && v203 > -65504.0 && (float)(*v196 * 1.1) >= v203 && (float)(*v196 * 0.9) <= v203;
          *v199 = v195;
          v176 += v174;
          v178 += v566;
          v184 += v567;
          ++v194;
        }
        while (v194 != v193);
      }
    }
LABEL_313:
    if (v168 != 1)
    {
      do
      {
        while (1)
        {
          v211 = *v178;
          v212 = *v178 <= 0.0 || v211 <= -65504.0;
          if (v212 || (float)(*v184 * 1.1) < v211)
            break;
          *v176 = (float)(*v184 * 0.9) <= v211;
          v176 += v175;
          v178 = (float *)((char *)v178 + v191);
          v184 = (float *)((char *)v184 + v192);
          if (!--v190)
            goto LABEL_325;
        }
        *v176 = 0;
        v176 += v175;
        v178 = (float *)((char *)v178 + v191);
        v184 = (float *)((char *)v184 + v192);
        --v190;
      }
      while (v190);
    }
LABEL_325:
    v214 = *v178;
    if (*v178 <= 0.0 || v214 <= -65504.0 || (float)(*v184 * 1.1) < v214)
    {
      v160 = v578;
      *v176 = 0;
      v171 = (_QWORD *)__p.i64[1];
      v170 = v608.i64[0];
      if (__p.i64[1] < (unint64_t)v608.i64[0])
        goto LABEL_249;
    }
    else
    {
      v160 = v578;
      *v176 = (float)(*v184 * 0.9) <= v214;
      v171 = (_QWORD *)__p.i64[1];
      v170 = v608.i64[0];
      if (__p.i64[1] < (unint64_t)v608.i64[0])
      {
LABEL_249:
        *(_OWORD *)v171 = v600;
        v600 = 0uLL;
        __p.i64[1] = (uint64_t)(v171 + 2);
        v172 = *(std::__shared_weak_count **)&v635[16];
        if (*(_QWORD *)&v635[16])
          goto LABEL_361;
        goto LABEL_365;
      }
    }
LABEL_336:
    v217 = __p.i64[0];
    v218 = ((uint64_t)v171 - __p.i64[0]) >> 4;
    v219 = v218 + 1;
    if ((unint64_t)(v218 + 1) >> 60)
      sub_22316E078();
    v220 = v170 - __p.i64[0];
    if (v220 >> 3 > v219)
      v219 = v220 >> 3;
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0)
      v221 = 0xFFFFFFFFFFFFFFFLL;
    else
      v221 = v219;
    if (v221 >> 60)
      sub_223174E94();
    v222 = (char *)operator new(16 * v221);
    v223 = &v222[16 * v218];
    *(_OWORD *)v223 = v600;
    v224 = (uint64_t)(v223 + 16);
    v600 = 0uLL;
    if (v171 == (_QWORD *)v217)
    {
      __p.i64[0] = (uint64_t)v223;
      __p.i64[1] = (uint64_t)(v223 + 16);
      v608.i64[0] = (uint64_t)&v222[16 * v221];
      if (!v171)
        goto LABEL_356;
LABEL_355:
      operator delete(v171);
      goto LABEL_356;
    }
    do
    {
      v225 = *((_OWORD *)v171 - 1);
      v171 -= 2;
      *((_OWORD *)v223 - 1) = v225;
      v223 -= 16;
      *v171 = 0;
      v171[1] = 0;
    }
    while (v171 != (_QWORD *)v217);
    v226 = __p.i64[1];
    v171 = (_QWORD *)__p.i64[0];
    __p.i64[0] = (uint64_t)v223;
    __p.i64[1] = v224;
    v608.i64[0] = (uint64_t)&v222[16 * v221];
    if ((_QWORD *)v226 != v171)
    {
      do
      {
        v227 = *(std::__shared_weak_count **)(v226 - 8);
        if (v227)
        {
          v228 = (unint64_t *)&v227->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        v226 -= 16;
      }
      while ((_QWORD *)v226 != v171);
      v161 = v586;
    }
    if (v171)
      goto LABEL_355;
LABEL_356:
    v230 = (std::__shared_weak_count *)*((_QWORD *)&v600 + 1);
    __p.i64[1] = v224;
    if (!*((_QWORD *)&v600 + 1))
      goto LABEL_360;
    v231 = (unint64_t *)(*((_QWORD *)&v600 + 1) + 8);
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
      v172 = *(std::__shared_weak_count **)&v635[16];
      if (*(_QWORD *)&v635[16])
      {
LABEL_361:
        v233 = (unint64_t *)&v172->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
    }
    else
    {
LABEL_360:
      v172 = *(std::__shared_weak_count **)&v635[16];
      if (*(_QWORD *)&v635[16])
        goto LABEL_361;
    }
LABEL_365:
    v235 = *(std::__shared_weak_count **)v630;
    if (*(_QWORD *)v630)
    {
      v236 = (unint64_t *)(*(_QWORD *)v630 + 8);
      do
        v237 = __ldaxr(v236);
      while (__stlxr(v237 - 1, v236));
      if (!v237)
      {
        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
        std::__shared_weak_count::__release_weak(v235);
      }
    }
    v238 = *(_QWORD *)(__p.i64[0] + 16 * v161);
    *(_QWORD *)&v629 = &off_24EC21420;
    sub_2231F9830(v238, (uint64_t *)&v629 + 1);
    v239 = *((_QWORD *)&v629 + 1);
    v240.i64[0] = 0x100000001;
    v240.i64[1] = 0x100000001;
    if (!*((_QWORD *)&v629 + 1))
    {
LABEL_391:
      *(_QWORD *)v635 = 0;
      v249 = *(unsigned int *)&v630[28];
      v250 = *(_QWORD *)&v630[16];
      v251 = *(unsigned __int8 **)&v630[8];
      if (!(_BYTE)v631)
        goto LABEL_400;
      goto LABEL_392;
    }
    v241 = *(std::__shared_weak_count **)v630;
    if (!*(_QWORD *)v630)
      goto LABEL_385;
    v242 = (unint64_t *)(*(_QWORD *)v630 + 8);
    do
      v243 = __ldxr(v242);
    while (__stxr(v243 + 1, v242));
    do
      v244 = __ldaxr(v242);
    while (__stlxr(v244 - 1, v242));
    if (v244)
    {
      v245 = *(std::__shared_weak_count **)v630;
      v239 = *((_QWORD *)&v629 + 1);
      if (!*(_QWORD *)v630)
        goto LABEL_385;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
      v240.i64[0] = 0x100000001;
      v240.i64[1] = 0x100000001;
      v245 = *(std::__shared_weak_count **)v630;
      v239 = *((_QWORD *)&v629 + 1);
      if (!*(_QWORD *)v630)
        goto LABEL_385;
    }
    v246 = (unint64_t *)&v245->__shared_owners_;
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
    do
      v248 = __ldaxr(v246);
    while (__stlxr(v248 - 1, v246));
    if (v248)
    {
LABEL_385:
      v161 = v586;
      if (!BYTE1(v631))
        goto LABEL_391;
      goto LABEL_386;
    }
    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
    std::__shared_weak_count::__release_weak(v245);
    v240.i64[0] = 0x100000001;
    v240.i64[1] = 0x100000001;
    v161 = v586;
    if (!BYTE1(v631))
      goto LABEL_391;
LABEL_386:
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v239 + 96))(v635, v239, 0);
    v240.i64[0] = 0x100000001;
    v240.i64[1] = 0x100000001;
    v249 = *(unsigned int *)&v630[28];
    v250 = *(_QWORD *)&v630[16];
    v251 = *(unsigned __int8 **)&v630[8];
    if (!(_BYTE)v631)
      goto LABEL_400;
LABEL_392:
    if (v251)
    {
      v252 = *((_QWORD *)&v629 + 1);
      v253 = *(std::__shared_weak_count **)v630;
      if (*(_QWORD *)v630)
      {
        v254 = (unint64_t *)(*(_QWORD *)v630 + 8);
        do
          v255 = __ldxr(v254);
        while (__stxr(v255 + 1, v254));
        do
          v256 = __ldaxr(v254);
        while (__stlxr(v256 - 1, v254));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v252 + 88))(v252, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v251 = *(unsigned __int8 **)&v630[8];
      v161 = v586;
      v240.i64[0] = 0x100000001;
      v240.i64[1] = 0x100000001;
    }
LABEL_400:
    v257 = 0;
    v258 = (v249 * HIDWORD(v250));
    if ((_DWORD)v258 && (_DWORD)v250)
    {
      v259 = &v251[v258];
      v260 = v250 - (unint64_t)(v250 & 0x1F);
      v261 = v250 - (unint64_t)(v250 & 7);
      do
      {
        if (v250 < 8uLL)
        {
          v262 = v251;
          goto LABEL_417;
        }
        if (v250 >= 0x20uLL)
        {
          v264 = 0;
          v265 = 0uLL;
          v266 = (int32x4_t)v257;
          v267 = 0uLL;
          v268 = 0uLL;
          v269 = 0uLL;
          v270 = 0uLL;
          v271 = 0uLL;
          v272 = 0uLL;
          do
          {
            v273 = (uint8x16_t)vtstq_s8(*(int8x16_t *)&v251[v264], *(int8x16_t *)&v251[v264]);
            v274 = vmovl_u8(*(uint8x8_t *)v273.i8);
            v275 = vmovl_high_u8(v273);
            v276 = (uint8x16_t)vtstq_s8(*(int8x16_t *)&v251[v264 + 16], *(int8x16_t *)&v251[v264 + 16]);
            v277 = vmovl_u8(*(uint8x8_t *)v276.i8);
            v278 = vmovl_high_u8(v276);
            v268 = vaddq_s32(v268, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v275), v240));
            v267 = vaddq_s32(v267, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v275.i8), v240));
            v265 = vaddq_s32(v265, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v274), v240));
            v266 = vaddq_s32(v266, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v274.i8), v240));
            v272 = vaddq_s32(v272, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v278), v240));
            v271 = vaddq_s32(v271, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v278.i8), v240));
            v270 = vaddq_s32(v270, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v277), v240));
            v269 = vaddq_s32(v269, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v277.i8), v240));
            v264 += 32;
          }
          while (v260 != v264);
          v257 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v269, v266), vaddq_s32(v271, v267)), vaddq_s32(vaddq_s32(v270, v265), vaddq_s32(v272, v268))));
          if ((v250 & 0x1F) == 0)
            goto LABEL_403;
          if ((v250 & 0x1Fu) < 8uLL)
          {
            v262 = &v251[v260];
            do
            {
LABEL_417:
              if (*v262++)
                ++v257;
            }
            while (v262 != &v251[v250]);
            goto LABEL_403;
          }
          v263 = v250 - (unint64_t)(v250 & 0x1F);
        }
        else
        {
          v263 = 0;
        }
        v262 = &v251[v261];
        v279 = 0uLL;
        v280 = (int32x4_t)v257;
        do
        {
          v281 = vmovl_u8((uint8x8_t)vtst_s8(*(int8x8_t *)&v251[v263], *(int8x8_t *)&v251[v263]));
          v279 = vaddq_s32(v279, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v281), v240));
          v280 = vaddq_s32(v280, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v281.i8), v240));
          v263 += 8;
        }
        while (v261 != v263);
        v257 = vaddvq_s32(vaddq_s32(v280, v279));
        if ((v250 & 7) != 0)
          goto LABEL_417;
LABEL_403:
        v251 += v249;
      }
      while (v251 != v259);
    }
    v283 = *(_QWORD *)v635;
    *(_QWORD *)v635 = 0;
    if (v283)
      (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
    v284 = *(std::__shared_weak_count **)v630;
    if (*(_QWORD *)v630)
    {
      v285 = (unint64_t *)(*(_QWORD *)v630 + 8);
      do
        v286 = __ldaxr(v285);
      while (__stlxr(v286 - 1, v285));
      if (!v286)
      {
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
      }
    }
    *(_OWORD *)v635 = *(_OWORD *)v576;
    if (v159 >= (unsigned int *)v581)
    {
      v287 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - v160) >> 3) + 1;
      if (v287 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((v581 - v160) >> 3) > v287)
        v287 = 0x5555555555555556 * ((v581 - v160) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v581 - v160) >> 3) >= 0x555555555555555)
        v288 = 0xAAAAAAAAAAAAAAALL;
      else
        v288 = v287;
      if (v288)
      {
        if (v288 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v289 = (char *)operator new(24 * v288);
      }
      else
      {
        v289 = 0;
      }
      v290 = &v289[8 * (((char *)v159 - v160) >> 3)];
      *(_DWORD *)v290 = v257;
      *((_DWORD *)v290 + 1) = v161;
      *(_OWORD *)(v290 + 8) = *(_OWORD *)v635;
      if (v159 == (unsigned int *)v160)
      {
        v293 = v159;
        v160 = &v289[8 * (((char *)v159 - v160) >> 3)];
        v581 = &v289[24 * v288];
        v159 = (unsigned int *)(v290 + 24);
        if (!v293)
          goto LABEL_445;
LABEL_444:
        operator delete(v293);
        goto LABEL_445;
      }
      v291 = &v289[8 * (((char *)v159 - v160) >> 3)];
      do
      {
        v292 = *(_OWORD *)(v159 - 6);
        *((_QWORD *)v291 - 1) = *((_QWORD *)v159 - 1);
        *(_OWORD *)(v291 - 24) = v292;
        v291 -= 24;
        v159 -= 6;
      }
      while (v159 != (unsigned int *)v160);
      v293 = v160;
      v160 = v291;
      v581 = &v289[24 * v288];
      v159 = (unsigned int *)(v290 + 24);
      if (v293)
        goto LABEL_444;
    }
    else
    {
      *v159 = v257;
      v159[1] = v161;
      *(_OWORD *)(v159 + 2) = *(_OWORD *)v635;
      v159 += 6;
    }
LABEL_445:
    v294 = (char *)v159 - v160;
    if ((char *)v159 - v160 >= 25)
    {
      v295 = (v294 / 0x18uLL - 2) >> 1;
      v296 = &v160[24 * v295];
      v297 = v159 - 6;
      v298 = *(v159 - 6);
      v299 = *(_DWORD *)v296;
      if (*(_DWORD *)v296 < v298)
      {
        v300 = *(v159 - 5);
        v629 = *((_OWORD *)v159 - 1);
        do
        {
          v301 = v297;
          v297 = (unsigned int *)v296;
          *v301 = v299;
          v301[1] = *((_DWORD *)v296 + 1);
          *(_OWORD *)(v301 + 2) = *(_OWORD *)(v296 + 8);
          if (!v295)
            break;
          v295 = (v295 - 1) >> 1;
          v296 = &v160[24 * v295];
          v299 = *(_DWORD *)v296;
        }
        while (*(_DWORD *)v296 < v298);
        *v297 = v298;
        v297[1] = v300;
        *(_OWORD *)(v297 + 2) = v629;
      }
    }
    ++v161;
  }
  while (v161 != v574);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v159 == (unsigned int *)v160)
  {
    v159 = (unsigned int *)v160;
  }
  else
  {
    v302 = 0xAAAAAAAAAAAAAAABLL * (v294 >> 3);
    if (v302 >> 60)
      sub_22316E078();
    v303 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * (v294 >> 3));
    *a6 = (uint64_t)v303;
    a6[1] = (uint64_t)v303;
    a6[2] = (uint64_t)&v303[16 * v302];
  }
LABEL_484:
  v313 = (unint64_t)(v589 - v588) >> 5;
  if (v313 >= a3)
    LODWORD(v313) = a3;
  v570 = v313;
  if ((_DWORD)v313)
  {
    v314 = 0;
    while (1)
    {
      v316 = v160 + 8;
      v317 = a6;
      v319 = (_OWORD *)a6[1];
      v318 = a6[2];
      v579 = v160;
      if ((unint64_t)v319 >= v318)
        break;
      *v319 = *v316;
      v320 = v319 + 1;
LABEL_508:
      v317[1] = (uint64_t)v320;
      v330 = *((unsigned int *)v160 + 1);
      v331 = __p.i64[0];
      *(_QWORD *)&v629 = &off_24EC22138;
      sub_2236B487C((uint64_t)v592, (uint64_t *)&v629 + 1);
      v332 = *(_QWORD *)(v331 + 16 * v330);
      *(_QWORD *)v635 = &off_24EC21420;
      sub_2231F9830(v332, (uint64_t *)&v635[8]);
      v333 = *((_QWORD *)&v629 + 1);
      if (!*((_QWORD *)&v629 + 1))
        goto LABEL_525;
      v334 = *(std::__shared_weak_count **)v630;
      if (!*(_QWORD *)v630)
        goto LABEL_521;
      v335 = (unint64_t *)(*(_QWORD *)v630 + 8);
      do
        v336 = __ldxr(v335);
      while (__stxr(v336 + 1, v335));
      do
        v337 = __ldaxr(v335);
      while (__stlxr(v337 - 1, v335));
      if (v337)
      {
        v338 = *(std::__shared_weak_count **)v630;
        v333 = *((_QWORD *)&v629 + 1);
        if (!*(_QWORD *)v630)
          goto LABEL_521;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
        std::__shared_weak_count::__release_weak(v334);
        v338 = *(std::__shared_weak_count **)v630;
        v333 = *((_QWORD *)&v629 + 1);
        if (!*(_QWORD *)v630)
          goto LABEL_521;
      }
      v339 = (unint64_t *)&v338->__shared_owners_;
      do
        v340 = __ldxr(v339);
      while (__stxr(v340 + 1, v339));
      do
        v341 = __ldaxr(v339);
      while (__stlxr(v341 - 1, v339));
      if (v341)
      {
LABEL_521:
        v160 = v579;
        if (!BYTE1(v631))
          goto LABEL_525;
        goto LABEL_522;
      }
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
      v160 = v579;
      if (!BYTE1(v631))
      {
LABEL_525:
        v613 = 0;
        v342 = *(_QWORD *)&v635[8];
        v572 = v314;
        if (!*(_QWORD *)&v635[8])
          goto LABEL_542;
        goto LABEL_526;
      }
LABEL_522:
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v333 + 96))(&v613, v333, 1);
      v342 = *(_QWORD *)&v635[8];
      v572 = v314;
      if (!*(_QWORD *)&v635[8])
        goto LABEL_542;
LABEL_526:
      v343 = *(std::__shared_weak_count **)&v635[16];
      if (!*(_QWORD *)&v635[16])
        goto LABEL_538;
      v344 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
      do
        v345 = __ldxr(v344);
      while (__stxr(v345 + 1, v344));
      do
        v346 = __ldaxr(v344);
      while (__stlxr(v346 - 1, v344));
      if (v346)
      {
        v342 = *(_QWORD *)&v635[8];
        v347 = *(std::__shared_weak_count **)&v635[16];
        if (!*(_QWORD *)&v635[16])
          goto LABEL_538;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
        std::__shared_weak_count::__release_weak(v343);
        v342 = *(_QWORD *)&v635[8];
        v347 = *(std::__shared_weak_count **)&v635[16];
        if (!*(_QWORD *)&v635[16])
          goto LABEL_538;
      }
      v348 = (unint64_t *)&v347->__shared_owners_;
      do
        v349 = __ldxr(v348);
      while (__stxr(v349 + 1, v348));
      do
        v350 = __ldaxr(v348);
      while (__stlxr(v350 - 1, v348));
      if (v350)
      {
LABEL_538:
        v160 = v579;
        if (v635[49])
          goto LABEL_539;
        goto LABEL_542;
      }
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
      v160 = v579;
      if (v635[49])
      {
LABEL_539:
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v342 + 96))(&v600, v342, 0);
        v351 = *(_DWORD *)&v630[16];
        v582 = v316;
        if (!*(_DWORD *)&v630[16])
          goto LABEL_573;
        goto LABEL_543;
      }
LABEL_542:
      *(_QWORD *)&v600 = 0;
      v351 = *(_DWORD *)&v630[16];
      v582 = v316;
      if (!*(_DWORD *)&v630[16])
        goto LABEL_573;
LABEL_543:
      v352 = *(_DWORD *)&v630[20];
      if (*(_DWORD *)&v630[20])
      {
        v353 = *(unsigned int *)&v630[24];
        v354 = *(unsigned int *)&v630[28];
        v355 = *(unsigned int *)&v635[40];
        v356 = *(unsigned int *)&v635[44];
        v357 = *(BOOL **)&v630[8];
        if ((_BYTE)v631 && *(_QWORD *)&v630[8])
        {
          v358 = *((_QWORD *)&v629 + 1);
          v359 = *(std::__shared_weak_count **)v630;
          if (*(_QWORD *)v630)
          {
            v360 = (unint64_t *)(*(_QWORD *)v630 + 8);
            do
              v361 = __ldxr(v360);
            while (__stxr(v361 + 1, v360));
            do
              v362 = __ldaxr(v360);
            while (__stlxr(v362 - 1, v360));
            if (!v362)
            {
              ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
              std::__shared_weak_count::__release_weak(v359);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v358 + 88))(v358, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v357 = *(BOOL **)&v630[8];
          v160 = v579;
        }
        v363 = *(unsigned __int8 **)&v635[24];
        if (v635[48] && *(_QWORD *)&v635[24])
        {
          v364 = *(_QWORD *)&v635[8];
          v365 = *(std::__shared_weak_count **)&v635[16];
          if (*(_QWORD *)&v635[16])
          {
            v366 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
            do
              v367 = __ldxr(v366);
            while (__stxr(v367 + 1, v366));
            do
              v368 = __ldaxr(v366);
            while (__stlxr(v368 - 1, v366));
            if (!v368)
            {
              ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
              std::__shared_weak_count::__release_weak(v365);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v364 + 88))(v364, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v363 = *(unsigned __int8 **)&v635[24];
          v160 = v579;
        }
        v369 = v351 - 1;
        v370 = v352 - 1;
        if (v352 != 1)
        {
          if (v351 == 1)
          {
            do
            {
              *v357 = (*v357 | *v363) != 0;
              v357 += v354;
              v363 += v356;
              --v370;
            }
            while (v370);
          }
          else
          {
            v371 = 0;
            do
            {
              v372 = v351 - 1;
              v373 = v357;
              v374 = v363;
              do
              {
                *v373 = (*v373 | *v374) != 0;
                v373 += v353;
                v374 += v355;
                --v372;
              }
              while (v372);
              *v373 = (*v373 | *v374) != 0;
              v357 += v354;
              v363 += v356;
              ++v371;
            }
            while (v371 != v370);
          }
        }
        if (v351 != 1)
        {
          do
          {
            *v357 = (*v357 | *v363) != 0;
            v357 += v353;
            v363 += v355;
            --v369;
          }
          while (v369);
        }
        *v357 = (*v357 | *v363) != 0;
        v316 = v582;
      }
LABEL_573:
      v375 = v600;
      *(_QWORD *)&v600 = 0;
      if (v375)
        (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
      v376 = v613;
      v613 = 0;
      if (v376)
        (*((void (**)(uint64_t (**)()))*v376 + 1))(v376);
      v377 = *(std::__shared_weak_count **)&v635[16];
      if (!*(_QWORD *)&v635[16])
        goto LABEL_581;
      v378 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
      do
        v379 = __ldaxr(v378);
      while (__stlxr(v379 - 1, v378));
      if (!v379)
      {
        ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
        std::__shared_weak_count::__release_weak(v377);
        v380 = *(std::__shared_weak_count **)v630;
        if (!*(_QWORD *)v630)
          goto LABEL_587;
      }
      else
      {
LABEL_581:
        v380 = *(std::__shared_weak_count **)v630;
        if (!*(_QWORD *)v630)
          goto LABEL_587;
      }
      v381 = (unint64_t *)&v380->__shared_owners_;
      do
        v382 = __ldaxr(v381);
      while (__stlxr(v382 - 1, v381));
      if (!v382)
      {
        ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
        std::__shared_weak_count::__release_weak(v380);
      }
LABEL_587:
      if ((char *)v159 - v160 >= 25)
      {
        v383 = 0;
        v384 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - v160) >> 3);
        v385 = *(_DWORD *)v160;
        v386 = *((_DWORD *)v160 + 1);
        *(_OWORD *)v635 = *v316;
        v387 = v160;
        do
        {
          v390 = (uint64_t)&v387[6 * v383 + 6];
          v391 = (2 * v383) | 1;
          v383 = 2 * v383 + 2;
          if (v383 < v384)
          {
            v388 = *(_DWORD *)v390;
            v389 = *(_DWORD *)(v390 + 24);
            if (*(_DWORD *)v390 <= v389)
              v388 = *(_DWORD *)(v390 + 24);
            if (*(_DWORD *)v390 >= v389)
              v383 = v391;
            else
              v390 += 24;
          }
          else
          {
            v388 = *(_DWORD *)v390;
            v383 = v391;
          }
          *v387 = v388;
          v387[1] = *(_DWORD *)(v390 + 4);
          *(_OWORD *)(v387 + 2) = *(_OWORD *)(v390 + 8);
          v387 = (_DWORD *)v390;
        }
        while (v383 <= (uint64_t)((unint64_t)(v384 - 2) >> 1));
        v392 = (__int128 *)(v390 + 8);
        if ((unsigned int *)v390 == v159 - 6)
        {
          *(_DWORD *)v390 = v385;
          *(_DWORD *)(v390 + 4) = v386;
          *v392 = *(_OWORD *)v635;
        }
        else
        {
          *(_DWORD *)v390 = *(v159 - 6);
          *(_DWORD *)(v390 + 4) = *(v159 - 5);
          *v392 = *((_OWORD *)v159 - 1);
          *(v159 - 6) = v385;
          *(v159 - 5) = v386;
          *((_OWORD *)v159 - 1) = *(_OWORD *)v635;
          v393 = v390 - (_QWORD)v160 + 24;
          if (v393 >= 25)
          {
            v394 = (v393 / 0x18uLL - 2) >> 1;
            v395 = &v160[24 * v394];
            v396 = *(_DWORD *)v395;
            v397 = *(_DWORD *)v390;
            if (*(_DWORD *)v395 < *(_DWORD *)v390)
            {
              v398 = *(_DWORD *)(v390 + 4);
              v629 = *v392;
              do
              {
                v399 = v390;
                v390 = (uint64_t)v395;
                *(_DWORD *)v399 = v396;
                *(_DWORD *)(v399 + 4) = *((_DWORD *)v395 + 1);
                *(_OWORD *)(v399 + 8) = *(_OWORD *)(v395 + 8);
                if (!v394)
                  break;
                v394 = (v394 - 1) >> 1;
                v395 = &v160[24 * v394];
                v396 = *(_DWORD *)v395;
              }
              while (*(_DWORD *)v395 < v397);
              *(_DWORD *)v390 = v397;
              *(_DWORD *)(v390 + 4) = v398;
              *(_OWORD *)(v390 + 8) = v629;
            }
          }
        }
      }
      v400 = v159 - 6;
      if (v160 != (char *)(v159 - 6))
      {
        v315 = 0;
        v159 = 0;
        v587 = 0;
        while (1)
        {
          v584 = v400;
          v401 = *((unsigned int *)v160 + 1);
          v402 = __p.i64[0];
          *(_QWORD *)&v629 = &off_24EC21420;
          v403 = (uint64_t (**)())v592[1];
          v404 = (std::__shared_weak_count *)v592[2];
          if (v404)
          {
            v405 = (unint64_t *)&v404->__shared_owners_;
            do
              v406 = __ldxr(v405);
            while (__stxr(v406 + 1, v405));
            *(_QWORD *)v635 = v403;
            *(_QWORD *)&v635[8] = v404;
            v613 = v403;
            v614 = v404;
            do
              v407 = __ldxr(v405);
            while (__stxr(v407 + 1, v405));
            do
              v408 = __ldxr(v405);
            while (__stxr(v408 + 1, v405));
            *((_QWORD *)&v629 + 1) = v403;
            *(_QWORD *)v630 = v404;
            do
              v409 = __ldxr(v405);
            while (__stxr(v409 + 1, v405));
            do
              v410 = __ldaxr(v405);
            while (__stlxr(v410 - 1, v405));
            if (!v410)
            {
              ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
              std::__shared_weak_count::__release_weak(v404);
            }
          }
          else
          {
            *(_QWORD *)v635 = v592[1];
            *(_QWORD *)&v635[8] = 0;
            v613 = v403;
            v614 = 0;
            *((_QWORD *)&v629 + 1) = v403;
            *(_QWORD *)v630 = 0;
          }
          (*((void (**)(__int128 *__return_ptr, uint64_t (**)(), uint64_t))*v403 + 9))(&v600, v403, 1);
          v411 = *(_QWORD *)(v600 + 16);
          *(_OWORD *)&v630[8] = *(_OWORD *)v600;
          *(_QWORD *)&v630[24] = v411;
          *(_QWORD *)&v600 = 0;
          MEMORY[0x227684CE8]();
          v412 = *((_QWORD *)&v629 + 1);
          v413 = *(std::__shared_weak_count **)v630;
          if (*(_QWORD *)v630)
          {
            v414 = (unint64_t *)(*(_QWORD *)v630 + 8);
            do
              v415 = __ldxr(v414);
            while (__stxr(v415 + 1, v414));
            do
              v416 = __ldaxr(v414);
            while (__stlxr(v416 - 1, v414));
            if (!v416)
            {
              ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
              std::__shared_weak_count::__release_weak(v413);
            }
          }
          v417 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v412 + 104))(v412);
          v418 = v417;
          if ((v417 & 0xFFFFFF) <= 0x10000)
            v418 = 0;
          v419 = v417 & 0xFF00;
          if ((v417 & 0xFF0000) == 0)
            v419 = 0;
          LOWORD(v631) = v419 & 0xFF00 | v418;
          v420 = v614;
          if (!v614)
            goto LABEL_635;
          v421 = (unint64_t *)&v614->__shared_owners_;
          do
            v422 = __ldaxr(v421);
          while (__stlxr(v422 - 1, v421));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
            std::__shared_weak_count::__release_weak(v420);
            v423 = *(std::__shared_weak_count **)&v635[8];
            if (!*(_QWORD *)&v635[8])
              goto LABEL_641;
          }
          else
          {
LABEL_635:
            v423 = *(std::__shared_weak_count **)&v635[8];
            if (!*(_QWORD *)&v635[8])
              goto LABEL_641;
          }
          v424 = (unint64_t *)&v423->__shared_owners_;
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 - 1, v424));
          if (!v425)
          {
            ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
            std::__shared_weak_count::__release_weak(v423);
          }
LABEL_641:
          v426 = *(_QWORD *)(v402 + 16 * v401);
          *(_QWORD *)v635 = &off_24EC21420;
          v427 = *(uint64_t (***)())(v426 + 8);
          v428 = *(std::__shared_weak_count **)(v426 + 16);
          if (v428)
          {
            v429 = (unint64_t *)&v428->__shared_owners_;
            do
              v430 = __ldxr(v429);
            while (__stxr(v430 + 1, v429));
            v613 = v427;
            v614 = v428;
            *(_QWORD *)&v600 = v427;
            *((_QWORD *)&v600 + 1) = v428;
            do
              v431 = __ldxr(v429);
            while (__stxr(v431 + 1, v429));
            do
              v432 = __ldxr(v429);
            while (__stxr(v432 + 1, v429));
            *(_QWORD *)&v635[8] = v427;
            *(_QWORD *)&v635[16] = v428;
            do
              v433 = __ldxr(v429);
            while (__stxr(v433 + 1, v429));
            do
              v434 = __ldaxr(v429);
            while (__stlxr(v434 - 1, v429));
            if (!v434)
            {
              ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
              std::__shared_weak_count::__release_weak(v428);
            }
          }
          else
          {
            v613 = *(uint64_t (***)())(v426 + 8);
            v614 = 0;
            v600 = (unint64_t)v427;
            *(_QWORD *)&v635[8] = v427;
            *(_QWORD *)&v635[16] = 0;
          }
          (*((void (**)(__int128 *__return_ptr, uint64_t (**)(), uint64_t))*v427 + 9))(&v626, v427, 1);
          v435 = *(_QWORD *)(v626 + 16);
          *(_OWORD *)&v635[24] = *(_OWORD *)v626;
          *(_QWORD *)&v635[40] = v435;
          *(_QWORD *)&v626 = 0;
          MEMORY[0x227684CE8]();
          v436 = *(_QWORD *)&v635[8];
          v437 = *(std::__shared_weak_count **)&v635[16];
          if (*(_QWORD *)&v635[16])
          {
            v438 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
            do
              v439 = __ldxr(v438);
            while (__stxr(v439 + 1, v438));
            do
              v440 = __ldaxr(v438);
            while (__stlxr(v440 - 1, v438));
            if (!v440)
            {
              ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
              std::__shared_weak_count::__release_weak(v437);
            }
          }
          v441 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v436 + 104))(v436);
          v442 = v441;
          if ((v441 & 0xFFFFFF) <= 0x10000)
            v442 = 0;
          v443 = v441 & 0xFF00;
          if ((v441 & 0xFF0000) == 0)
            v443 = 0;
          *(_WORD *)&v635[48] = v443 & 0xFF00 | v442;
          v444 = (std::__shared_weak_count *)*((_QWORD *)&v600 + 1);
          if (!*((_QWORD *)&v600 + 1))
            goto LABEL_667;
          v445 = (unint64_t *)(*((_QWORD *)&v600 + 1) + 8);
          do
            v446 = __ldaxr(v445);
          while (__stlxr(v446 - 1, v445));
          if (!v446)
          {
            ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
            std::__shared_weak_count::__release_weak(v444);
            v447 = v614;
            if (v614)
            {
LABEL_668:
              v448 = (unint64_t *)&v447->__shared_owners_;
              do
                v449 = __ldaxr(v448);
              while (__stlxr(v449 - 1, v448));
              if (!v449)
              {
                ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                std::__shared_weak_count::__release_weak(v447);
              }
            }
          }
          else
          {
LABEL_667:
            v447 = v614;
            if (v614)
              goto LABEL_668;
          }
          v450 = *((_QWORD *)&v629 + 1);
          if (!*((_QWORD *)&v629 + 1))
            goto LABEL_690;
          v451 = *(std::__shared_weak_count **)v630;
          if (!*(_QWORD *)v630)
            goto LABEL_686;
          v452 = (unint64_t *)(*(_QWORD *)v630 + 8);
          do
            v453 = __ldxr(v452);
          while (__stxr(v453 + 1, v452));
          do
            v454 = __ldaxr(v452);
          while (__stlxr(v454 - 1, v452));
          if (v454)
          {
            v455 = *(std::__shared_weak_count **)v630;
            v450 = *((_QWORD *)&v629 + 1);
            if (!*(_QWORD *)v630)
              goto LABEL_686;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
            std::__shared_weak_count::__release_weak(v451);
            v455 = *(std::__shared_weak_count **)v630;
            v450 = *((_QWORD *)&v629 + 1);
            if (!*(_QWORD *)v630)
              goto LABEL_686;
          }
          v456 = (unint64_t *)&v455->__shared_owners_;
          do
            v457 = __ldxr(v456);
          while (__stxr(v457 + 1, v456));
          do
            v458 = __ldaxr(v456);
          while (__stlxr(v458 - 1, v456));
          if (v458)
          {
LABEL_686:
            if (BYTE1(v631))
              goto LABEL_687;
            goto LABEL_690;
          }
          ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
          std::__shared_weak_count::__release_weak(v455);
          if (BYTE1(v631))
          {
LABEL_687:
            (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, _QWORD))(*(_QWORD *)v450 + 96))(&v613, v450, 0);
            v459 = *(_QWORD *)&v635[8];
            if (!*(_QWORD *)&v635[8])
              goto LABEL_707;
            goto LABEL_691;
          }
LABEL_690:
          v613 = 0;
          v459 = *(_QWORD *)&v635[8];
          if (!*(_QWORD *)&v635[8])
            goto LABEL_707;
LABEL_691:
          v460 = *(std::__shared_weak_count **)&v635[16];
          if (!*(_QWORD *)&v635[16])
            goto LABEL_703;
          v461 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
          do
            v462 = __ldxr(v461);
          while (__stxr(v462 + 1, v461));
          do
            v463 = __ldaxr(v461);
          while (__stlxr(v463 - 1, v461));
          if (v463)
          {
            v459 = *(_QWORD *)&v635[8];
            v464 = *(std::__shared_weak_count **)&v635[16];
            if (!*(_QWORD *)&v635[16])
              goto LABEL_703;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
            std::__shared_weak_count::__release_weak(v460);
            v459 = *(_QWORD *)&v635[8];
            v464 = *(std::__shared_weak_count **)&v635[16];
            if (!*(_QWORD *)&v635[16])
              goto LABEL_703;
          }
          v465 = (unint64_t *)&v464->__shared_owners_;
          do
            v466 = __ldxr(v465);
          while (__stxr(v466 + 1, v465));
          do
            v467 = __ldaxr(v465);
          while (__stlxr(v467 - 1, v465));
          if (v467)
          {
LABEL_703:
            if (!v635[49])
              goto LABEL_707;
            goto LABEL_704;
          }
          ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
          std::__shared_weak_count::__release_weak(v464);
          if (!v635[49])
          {
LABEL_707:
            *(_QWORD *)&v600 = 0;
            v468 = 0;
            v469 = *(_DWORD *)&v630[16];
            if (!*(_DWORD *)&v630[16])
              goto LABEL_753;
            goto LABEL_708;
          }
LABEL_704:
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v459 + 96))(&v600, v459, 0);
          v468 = 0;
          v469 = *(_DWORD *)&v630[16];
          if (!*(_DWORD *)&v630[16])
            goto LABEL_753;
LABEL_708:
          v470 = *(_DWORD *)&v630[20];
          if (!*(_DWORD *)&v630[20])
            goto LABEL_753;
          v471 = *(unsigned int *)&v630[24];
          v472 = *(unsigned int *)&v630[28];
          v473 = *(unsigned int *)&v635[40];
          v474 = *(unsigned int *)&v635[44];
          v475 = *(unsigned __int8 **)&v630[8];
          v575 = v469;
          if ((_BYTE)v631 && *(_QWORD *)&v630[8])
          {
            v476 = *((_QWORD *)&v629 + 1);
            v477 = *(std::__shared_weak_count **)v630;
            if (*(_QWORD *)v630)
            {
              v478 = (unint64_t *)(*(_QWORD *)v630 + 8);
              do
                v479 = __ldxr(v478);
              while (__stxr(v479 + 1, v478));
              do
                v480 = __ldaxr(v478);
              while (__stlxr(v480 - 1, v478));
              if (!v480)
              {
                ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
                std::__shared_weak_count::__release_weak(v477);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v476 + 88))(v476, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v475 = *(unsigned __int8 **)&v630[8];
            v469 = v575;
          }
          v481 = *(unsigned __int8 **)&v635[24];
          if (v635[48] && *(_QWORD *)&v635[24])
          {
            v482 = *(_QWORD *)&v635[8];
            v483 = *(std::__shared_weak_count **)&v635[16];
            if (*(_QWORD *)&v635[16])
            {
              v484 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
              do
                v485 = __ldxr(v484);
              while (__stxr(v485 + 1, v484));
              do
                v486 = __ldaxr(v484);
              while (__stlxr(v486 - 1, v484));
              if (!v486)
              {
                ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                std::__shared_weak_count::__release_weak(v483);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v482 + 88))(v482, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v481 = *(unsigned __int8 **)&v635[24];
            v469 = v575;
          }
          v487 = v469 - 1;
          v488 = v470 - 1;
          if (v470 != 1)
          {
            v489 = (v470 - 2) + 1;
            v490 = v489 * v472;
            v491 = v489 * v474;
            v492 = 0;
            if (v469 == 1)
            {
              v499 = v475;
              v500 = v481;
              do
              {
                if (*v499 | *v500)
                  ++v492;
                v499 += v472;
                v500 += v474;
                --v488;
              }
              while (v488);
            }
            else
            {
              v493 = 0;
              v494 = v475;
              v495 = v481;
              do
              {
                v496 = v469 - 1;
                v497 = v494;
                v498 = v495;
                do
                {
                  if (*v497 | *v498)
                    ++v492;
                  v497 += v471;
                  v498 += v473;
                  --v496;
                }
                while (v496);
                if (*v497 | *v498)
                  ++v492;
                v494 += v472;
                v495 += v474;
                ++v493;
              }
              while (v493 != v488);
            }
            v475 += v490;
            v481 += v491;
            if (v469 == 1)
              goto LABEL_750;
LABEL_745:
            v501 = (v469 - 2);
            v502 = v475;
            v503 = v481;
            do
            {
              if (*v502 | *v503)
                ++v492;
              v502 += v471;
              v503 += v473;
              --v487;
            }
            while (v487);
            v475 += (v501 + 1) * v471;
            v481 += (v501 + 1) * v473;
            goto LABEL_750;
          }
          v492 = 0;
          if (v469 != 1)
            goto LABEL_745;
LABEL_750:
          if (*v475 | *v481)
            v468 = v492 + 1;
          else
            v468 = v492;
LABEL_753:
          v504 = v600;
          *(_QWORD *)&v600 = 0;
          if (v504)
            (*(void (**)(uint64_t))(*(_QWORD *)v504 + 8))(v504);
          v505 = v613;
          v613 = 0;
          if (v505)
            (*((void (**)(uint64_t (**)()))*v505 + 1))(v505);
          v506 = *(std::__shared_weak_count **)&v635[16];
          if (!*(_QWORD *)&v635[16])
            goto LABEL_761;
          v507 = (unint64_t *)(*(_QWORD *)&v635[16] + 8);
          do
            v508 = __ldaxr(v507);
          while (__stlxr(v508 - 1, v507));
          if (!v508)
          {
            ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
            std::__shared_weak_count::__release_weak(v506);
            v509 = *(std::__shared_weak_count **)v630;
            if (!*(_QWORD *)v630)
              goto LABEL_767;
          }
          else
          {
LABEL_761:
            v509 = *(std::__shared_weak_count **)v630;
            if (!*(_QWORD *)v630)
              goto LABEL_767;
          }
          v510 = (unint64_t *)&v509->__shared_owners_;
          do
            v511 = __ldaxr(v510);
          while (__stlxr(v511 - 1, v510));
          if (!v511)
          {
            ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
            std::__shared_weak_count::__release_weak(v509);
          }
LABEL_767:
          v160 = v579;
          v512 = *((_DWORD *)v579 + 1);
          *(_OWORD *)v635 = *v582;
          if (v159 < (unsigned int *)v587)
          {
            *v159 = v468;
            v159[1] = v512;
            *(_OWORD *)(v159 + 2) = *(_OWORD *)v635;
            v159 += 6;
            v513 = (char *)v159 - v315;
            v514 = (char *)v584;
            if ((char *)v159 - v315 >= 25)
              goto LABEL_786;
            goto LABEL_791;
          }
          v515 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - v315) >> 3) + 1;
          if (v515 > 0xAAAAAAAAAAAAAAALL)
            sub_22316E078();
          if (0x5555555555555556 * ((v587 - v315) >> 3) > v515)
            v515 = 0x5555555555555556 * ((v587 - v315) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v587 - v315) >> 3) >= 0x555555555555555)
            v516 = 0xAAAAAAAAAAAAAAALL;
          else
            v516 = v515;
          if (v516)
          {
            if (v516 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v517 = (char *)operator new(24 * v516);
          }
          else
          {
            v517 = 0;
          }
          v518 = &v517[8 * (((char *)v159 - v315) >> 3)];
          *(_DWORD *)v518 = v468;
          *((_DWORD *)v518 + 1) = v512;
          *(_OWORD *)(v518 + 8) = *(_OWORD *)v635;
          if (v159 == (unsigned int *)v315)
          {
            v520 = &v517[8 * (((char *)v159 - v315) >> 3)];
            v587 = &v517[24 * v516];
            v159 = (unsigned int *)(v518 + 24);
            if (v315)
              goto LABEL_784;
          }
          else
          {
            v519 = &v517[8 * (((char *)v159 - v315) >> 3)];
            do
            {
              v520 = v519 - 24;
              v521 = *(_OWORD *)(v159 - 6);
              *((_QWORD *)v519 - 1) = *((_QWORD *)v159 - 1);
              *(_OWORD *)(v519 - 24) = v521;
              v159 -= 6;
              v519 -= 24;
            }
            while (v159 != (unsigned int *)v315);
            v587 = &v517[24 * v516];
            v159 = (unsigned int *)(v518 + 24);
            if (v315)
LABEL_784:
              operator delete(v315);
          }
          v315 = v520;
          v513 = (char *)v159 - v520;
          v514 = (char *)v584;
          if ((char *)v159 - v520 >= 25)
          {
LABEL_786:
            v522 = (v513 / 0x18 - 2) >> 1;
            v523 = &v315[24 * v522];
            v524 = (char *)(v159 - 6);
            v525 = *(v159 - 6);
            v526 = *(_DWORD *)v523;
            if (*(_DWORD *)v523 < v525)
            {
              v527 = *(v159 - 5);
              v629 = *((_OWORD *)v159 - 1);
              do
              {
                v528 = v524;
                v524 = v523;
                *(_DWORD *)v528 = v526;
                *((_DWORD *)v528 + 1) = *((_DWORD *)v523 + 1);
                *(_OWORD *)(v528 + 8) = *(_OWORD *)(v523 + 8);
                if (!v522)
                  break;
                v522 = (v522 - 1) >> 1;
                v523 = &v315[24 * v522];
                v526 = *(_DWORD *)v523;
              }
              while (*(_DWORD *)v523 < v525);
              *(_DWORD *)v524 = v525;
              *((_DWORD *)v524 + 1) = v527;
              *(_OWORD *)(v524 + 8) = v629;
            }
          }
LABEL_791:
          if (v514 - v579 >= 25)
          {
            v529 = 0;
            v530 = 0xAAAAAAAAAAAAAAABLL * ((v514 - v579) >> 3);
            v531 = *(_DWORD *)v579;
            v532 = *((_DWORD *)v579 + 1);
            *(_OWORD *)v635 = *v582;
            v533 = v579;
            do
            {
              v536 = (uint64_t)&v533[6 * v529 + 6];
              v537 = (2 * v529) | 1;
              v529 = 2 * v529 + 2;
              if (v529 < v530)
              {
                v534 = *(_DWORD *)v536;
                v535 = *(_DWORD *)(v536 + 24);
                if (*(_DWORD *)v536 <= v535)
                  v534 = *(_DWORD *)(v536 + 24);
                if (*(_DWORD *)v536 >= v535)
                  v529 = v537;
                else
                  v536 += 24;
              }
              else
              {
                v534 = *(_DWORD *)v536;
                v529 = v537;
              }
              *v533 = v534;
              v533[1] = *(_DWORD *)(v536 + 4);
              *(_OWORD *)(v533 + 2) = *(_OWORD *)(v536 + 8);
              v533 = (_DWORD *)v536;
            }
            while (v529 <= (uint64_t)((unint64_t)(v530 - 2) >> 1));
            v538 = (__int128 *)(v536 + 8);
            if ((char *)v536 == v514 - 24)
            {
              *(_DWORD *)v536 = v531;
              *(_DWORD *)(v536 + 4) = v532;
              *v538 = *(_OWORD *)v635;
            }
            else
            {
              *(_DWORD *)v536 = *((_DWORD *)v514 - 6);
              *(_DWORD *)(v536 + 4) = *((_DWORD *)v514 - 5);
              *v538 = *((_OWORD *)v514 - 1);
              *((_DWORD *)v514 - 6) = v531;
              *((_DWORD *)v514 - 5) = v532;
              *((_OWORD *)v514 - 1) = *(_OWORD *)v635;
              v539 = v536 - (_QWORD)v579 + 24;
              if (v539 >= 25)
              {
                v540 = (v539 / 0x18uLL - 2) >> 1;
                v541 = (unsigned int *)&v579[24 * v540];
                v542 = *v541;
                v543 = *(_DWORD *)v536;
                if (*v541 < *(_DWORD *)v536)
                {
                  v544 = *(_DWORD *)(v536 + 4);
                  v629 = *v538;
                  do
                  {
                    v545 = v536;
                    v536 = (uint64_t)v541;
                    *(_DWORD *)v545 = v542;
                    *(_DWORD *)(v545 + 4) = v541[1];
                    *(_OWORD *)(v545 + 8) = *(_OWORD *)(v541 + 2);
                    if (!v540)
                      break;
                    v540 = (v540 - 1) >> 1;
                    v541 = (unsigned int *)&v579[24 * v540];
                    v542 = *v541;
                  }
                  while (*v541 < v543);
                  *(_DWORD *)v536 = v543;
                  *(_DWORD *)(v536 + 4) = v544;
                  *(_OWORD *)(v536 + 8) = v629;
                }
              }
            }
          }
          v400 = (unsigned int *)(v514 - 24);
          if (v579 == (char *)v400)
            goto LABEL_489;
        }
      }
      v315 = 0;
      v159 = 0;
LABEL_489:
      operator delete(v160);
      v314 = v572 + 1;
      v160 = v315;
      if (v572 + 1 == v570)
        goto LABEL_811;
    }
    v321 = (_OWORD *)*a6;
    v322 = ((uint64_t)v319 - *a6) >> 4;
    v323 = v322 + 1;
    if ((unint64_t)(v322 + 1) >> 60)
      sub_22316E078();
    v324 = v318 - (_QWORD)v321;
    if (v324 >> 3 > v323)
      v323 = v324 >> 3;
    if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF0)
      v325 = 0xFFFFFFFFFFFFFFFLL;
    else
      v325 = v323;
    if (v325)
    {
      if (v325 >> 60)
        sub_223174E94();
      v326 = (char *)operator new(16 * v325);
      v327 = &v326[16 * v322];
      *(_OWORD *)v327 = *v316;
      v328 = (uint64_t)v327;
      if (v319 == v321)
        goto LABEL_506;
      do
      {
LABEL_503:
        *(_OWORD *)(v328 - 16) = *(v319 - 1);
        v328 -= 16;
        --v319;
      }
      while (v319 != v321);
      v319 = v321;
      v320 = v327 + 16;
      v329 = a6;
      *a6 = v328;
      a6[1] = (uint64_t)v320;
      a6[2] = (uint64_t)&v326[16 * v325];
      if (v319)
      {
LABEL_507:
        operator delete(v319);
        v317 = a6;
        goto LABEL_508;
      }
    }
    else
    {
      v326 = 0;
      v327 = (char *)(16 * v322);
      *(_OWORD *)(16 * v322) = *v316;
      v328 = 16 * v322;
      if (v319 != v321)
        goto LABEL_503;
LABEL_506:
      v320 = v327 + 16;
      v329 = a6;
      *a6 = v328;
      a6[1] = (uint64_t)v320;
      a6[2] = (uint64_t)&v326[16 * v325];
      if (v319)
        goto LABEL_507;
    }
    v317 = v329;
    goto LABEL_508;
  }
  v315 = v160;
LABEL_811:
  v546 = __p.i64[0];
  if (__p.i64[0])
  {
    v547 = __p.i64[1];
    v548 = (void *)__p.i64[0];
    if (__p.i64[1] != __p.i64[0])
    {
      do
      {
        v549 = *(std::__shared_weak_count **)(v547 - 8);
        if (v549)
        {
          v550 = (unint64_t *)&v549->__shared_owners_;
          do
            v551 = __ldaxr(v550);
          while (__stlxr(v551 - 1, v550));
          if (!v551)
          {
            ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
            std::__shared_weak_count::__release_weak(v549);
          }
        }
        v547 -= 16;
      }
      while (v547 != v546);
      v548 = (void *)__p.i64[0];
    }
    __p.i64[1] = v546;
    operator delete(v548);
  }
  if (v315)
    operator delete(v315);
  v552 = v593;
  if (v593)
  {
    v553 = (unint64_t *)&v593->__shared_owners_;
    do
      v554 = __ldaxr(v553);
    while (__stlxr(v554 - 1, v553));
    if (!v554)
    {
      ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
      std::__shared_weak_count::__release_weak(v552);
    }
  }
LABEL_829:
  kdebug_trace();
  if (v588)
  {
    v555 = v589;
    v556 = v588;
    if (v589 != v588)
    {
      do
      {
        v557 = (std::__shared_weak_count *)*((_QWORD *)v555 - 1);
        if (v557)
        {
          v558 = (unint64_t *)&v557->__shared_owners_;
          do
            v559 = __ldaxr(v558);
          while (__stlxr(v559 - 1, v558));
          if (!v559)
          {
            ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
            std::__shared_weak_count::__release_weak(v557);
          }
        }
        v555 -= 32;
      }
      while (v555 != v588);
      v556 = v588;
    }
    operator delete(v556);
  }
  if (*((_QWORD *)&v591 + 1))
  {
    v560 = (unint64_t *)(*((_QWORD *)&v591 + 1) + 8);
    do
      v561 = __ldaxr(v560);
    while (__stlxr(v561 - 1, v560));
    if (!v561)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v591 + 1) + 16))(*((_QWORD *)&v591 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v591 + 1));
    }
  }
}

void sub_22389FE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  sub_2231DCE9C((uint64_t)&a59);
  sub_223167354((uint64_t)&a66);
  sub_223198180(&a24);
  sub_223167354((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_2238A01EC@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  size_t v30;
  const char *v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  const char *__src;
  _QWORD v84[3];
  int v85;
  const char *v86;
  int v87;
  const char *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  void *object;
  void *v93[2];
  __int128 v94;
  void *__p[2];
  unint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;

  kdebug_trace();
  v9 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return kdebug_trace();
  }
  if (*a2 == a2[1])
  {
    sub_2238995FC(&v91);
    if (**(int **)(v91 + 56) > 4)
      goto LABEL_126;
    v26 = *(unsigned __int8 *)(v91 + 72);
    v27 = sub_22322F254(v91, "OSLogSurrogateAppender", 1, 0);
    v28 = v27;
    if (!v26 && v27 == 0)
      goto LABEL_126;
    v84[0] = &v91;
    v84[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v84[2] = std::chrono::system_clock::now().__d_.__rep_;
    v85 = 4;
    v86 = "unknown file";
    v87 = 504;
    v89 = 0;
    v90 = 0;
    v88 = "unknown function";
    v80 = v91;
    if (*(char *)(v91 + 39) < 0)
    {
      v31 = *(const char **)(v91 + 16);
      v30 = *(_QWORD *)(v91 + 24);
    }
    else
    {
      v30 = *(unsigned __int8 *)(v91 + 39);
      v31 = (const char *)(v91 + 16);
    }
    v79 = v91 + 16;
    v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v94 && SHIBYTE(v93[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v33 = (const char *)&xmmword_255788F40;
    else
      v33 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v34 = byte_255788F57;
    else
      v34 = *((_QWORD *)&xmmword_255788F40 + 1);
    __src = v31;
    object = os_log_create(v33, v31);
    v35 = v93;
    if (v34 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v34 >= 0x17)
    {
      v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v36 = v34 | 7;
      v37 = v36 + 1;
      v35 = operator new(v36 + 1);
      v93[1] = (void *)v34;
      *(_QWORD *)&v94 = v37 | 0x8000000000000000;
      v93[0] = v35;
    }
    else
    {
      BYTE7(v94) = v34;
      if (!v34)
      {
LABEL_59:
        *((_BYTE *)v35 + v34) = 0;
        BYTE8(v94) = 1;
        v38 = __p;
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v30 >= 0x17)
        {
          v39 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v39 = v30 | 7;
          v40 = v39 + 1;
          v38 = operator new(v39 + 1);
          __p[1] = (void *)v30;
          v96 = v40 | 0x8000000000000000;
          __p[0] = v38;
        }
        else
        {
          HIBYTE(v96) = v30;
          if (!v30)
            goto LABEL_67;
        }
        memmove(v38, __src, v30);
LABEL_67:
        *((_BYTE *)v38 + v30) = 0;
        v97 = 1;
        v41 = object;
        if (SHIBYTE(v96) < 0)
          operator delete(__p[0]);
        if (BYTE8(v94) && SBYTE7(v94) < 0)
          operator delete(v93[0]);
        if (object)
          os_release(object);
        if (v28 && *(_QWORD *)(v28 + 24))
        {
          v42 = _os_log_pack_size();
          v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
          v44 = (std::__shared_weak_count *)operator new();
          v45 = v44;
          v44->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v44->__shared_weak_owners_ = 0;
          v44[1].__vftable = v43;
          object = v43;
          v93[0] = v43;
          v93[1] = v44;
          do
            v47 = __ldxr(p_shared_owners);
          while (__stxr(v47 + 1, p_shared_owners));
          v94 = 0uLL;
          __p[0] = 0;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v45);
          }
          v49 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v50 = operator new();
          v51 = *(unsigned __int8 *)(v80 + 39);
          v52 = v79;
          if ((v51 & 0x80u) != 0)
          {
            v52 = *(_QWORD *)(v80 + 16);
            v51 = *(_QWORD *)(v80 + 24);
          }
          *(_QWORD *)v50 = v49;
          *(_OWORD *)(v50 + 8) = *(_OWORD *)v93;
          v93[0] = 0;
          v93[1] = 0;
          *(_OWORD *)(v50 + 24) = v94;
          v94 = 0uLL;
          *(_QWORD *)(v50 + 40) = v52;
          *(_QWORD *)(v50 + 48) = v51;
          *(_BYTE *)(v50 + 56) = 16;
          v98 = 0;
          v99 = v50;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v99);
          v53 = v99;
          v99 = 0;
          if (v53)
          {
            v54 = *(std::__shared_weak_count **)(v53 + 32);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = *(std::__shared_weak_count **)(v53 + 16);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
            v60 = v98;
            v98 = 0;
            if (v60)
            {
              v61 = *(std::__shared_weak_count **)(v60 + 32);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              v64 = *(std::__shared_weak_count **)(v60 + 16);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              MEMORY[0x227684CE8](v60, 0x10F0C40B62ED6C6);
            }
          }
          v67 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
          v68 = v26;
          if (*((_QWORD *)&v94 + 1))
          {
            v69 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          v71 = (std::__shared_weak_count *)v93[1];
          if (v93[1])
          {
            v72 = (unint64_t *)((char *)v93[1] + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }
        else
        {
          os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v74 = (void *)_os_log_send_and_compose_impl();
          v68 = v26;
          if (v74)
            free(v74);
        }
        if (v68)
        {
          sub_22322C138((uint64_t)v84, "Candidate list not empty but no nearby keyframes are available");
          sub_223182C08((uint64_t)v84);
        }
        sub_223182C08((uint64_t)v84);
        v75 = v90;
        if (v90)
        {
          v76 = (unint64_t *)&v90->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
LABEL_126:
        v9 = *a1;
        v8 = a1[1];
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        v10 = (char *)v8 - (char *)v9;
        if (v8 != v9)
          goto LABEL_4;
        return kdebug_trace();
      }
    }
    memmove(v35, v33, v34);
    goto LABEL_59;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v10 = (char *)v8 - (char *)v9;
  if (v8 != v9)
  {
LABEL_4:
    if (v10 < 0)
      sub_22316E078();
    v11 = (char *)operator new(v10);
    *a5 = (uint64_t)v11;
    a5[1] = (uint64_t)v11;
    a5[2] = (uint64_t)&v11[16 * (v10 >> 4)];
    while (1)
    {
      v13 = (_QWORD *)*a2;
      v14 = (_QWORD *)a2[1];
      if ((_QWORD *)*a2 != v14)
      {
        while (*v13 != *v9 || v13[1] != v9[1])
        {
          v13 += 2;
          if (v13 == v14)
          {
            v13 = (_QWORD *)a2[1];
            break;
          }
        }
      }
      if (v13 == v14 && sub_22381AF00(a4, *v9, v9[1])[10] < *a3 - 1000000000)
        goto LABEL_8;
      v17 = (_OWORD *)a5[1];
      v16 = a5[2];
      if ((unint64_t)v17 >= v16)
        break;
      *v17 = *(_OWORD *)v9;
      v12 = v17 + 1;
LABEL_7:
      a5[1] = (uint64_t)v12;
LABEL_8:
      v9 += 2;
      if (v9 == v8)
        return kdebug_trace();
    }
    v18 = (_OWORD *)*a5;
    v19 = ((uint64_t)v17 - *a5) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      sub_22316E078();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 60)
        sub_223174E94();
      v23 = (char *)operator new(16 * v22);
      v24 = &v23[16 * v19];
      *(_OWORD *)v24 = *(_OWORD *)v9;
      v25 = (uint64_t)v24;
      if (v17 == v18)
      {
LABEL_28:
        v12 = v24 + 16;
        *a5 = v25;
        a5[1] = (uint64_t)(v24 + 16);
        a5[2] = (uint64_t)&v23[16 * v22];
        if (!v17)
          goto LABEL_7;
        goto LABEL_33;
      }
    }
    else
    {
      v23 = 0;
      v24 = (char *)(16 * v19);
      *(_OWORD *)(16 * v19) = *(_OWORD *)v9;
      v25 = 16 * v19;
      if (v17 == v18)
        goto LABEL_28;
    }
    do
    {
      *(_OWORD *)(v25 - 16) = *(v17 - 1);
      v25 -= 16;
      --v17;
    }
    while (v17 != v18);
    v17 = (_OWORD *)*a5;
    v12 = v24 + 16;
    *a5 = v25;
    a5[1] = (uint64_t)(v24 + 16);
    a5[2] = (uint64_t)&v23[16 * v22];
    if (!v17)
      goto LABEL_7;
LABEL_33:
    operator delete(v17);
    goto LABEL_7;
  }
  return kdebug_trace();
}

void sub_2238A0AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2238A0B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_22319A054((uint64_t *)(v27 - 96));
  sub_22319A054((uint64_t *)(v27 - 104));
  sub_223199DE8((uint64_t)&a27);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2238A0B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238A0B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238A0BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238A0BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2238A0C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2238A0C30(_QWORD *a1@<X0>, int *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  int64_t v44;
  char *v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t *v61;
  int *v62;
  unsigned __int8 *v63;
  char *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  float32x4_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int *v78;
  unsigned __int8 *v79;
  uint64_t *v80;
  _QWORD *v82;
  unsigned __int8 *v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  void *__p;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91[2];
  _BYTE v92[24];
  _BYTE *v93;
  _QWORD v94[3];
  _QWORD *v95;
  _QWORD v96[3];
  _QWORD *v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  __p = 0;
  v88 = 0;
  v89 = 0;
  v11 = *a2;
  if ((*a2 & 1) != 0)
  {
    v12 = (_QWORD *)a1[3];
    v13 = a1 + 4;
    if (v12 == a1 + 4)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = (_QWORD *)a1[3];
      do
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v15[2];
            v18 = *v17 == (_QWORD)v15;
            v15 = v17;
          }
          while (!v18);
        }
        ++v14;
        v15 = v17;
      }
      while (v17 != v13);
    }
    sub_2238A4D58((char **)&__p, 0, v12, v13, v14);
    v11 = *a2;
  }
  v79 = a3;
  v80 = a6;
  v78 = a2;
  if ((v11 & 2) != 0)
  {
    v53 = (_QWORD *)*a1;
    v52 = a1 + 1;
    v51 = v53;
    if (v53 == v52)
    {
      v54 = 0;
    }
    else
    {
      v54 = 0;
      v55 = v51;
      do
      {
        v56 = (_QWORD *)v55[1];
        if (v56)
        {
          do
          {
            v57 = v56;
            v56 = (_QWORD *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (_QWORD *)v55[2];
            v18 = *v57 == (_QWORD)v55;
            v55 = v57;
          }
          while (!v18);
        }
        ++v54;
        v55 = v57;
      }
      while (v57 != v52);
    }
    sub_2238A4D58((char **)&__p, (uint64_t)v88, v51, v52, v54);
  }
  else if (*((_BYTE *)a2 + 5))
  {
    v21 = (_QWORD *)*a1;
    v19 = a1 + 1;
    v20 = v21;
    if (v21 != v19)
    {
      v82 = v19;
      v83 = a4;
      do
      {
        v22 = (char *)v20 + 25;
        if ((*((_BYTE *)sub_22381AF00(a4, *(_QWORD *)((char *)v20 + 25), *(_QWORD *)((char *)v20 + 33)) + 113) & 0x30) != 0)
        {
          v24 = (char *)__p;
          v23 = v88;
          v25 = v88 - (_BYTE *)__p;
          v26 = (char *)__p + ((v88 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF0);
          if ((unint64_t)v88 >= v89)
          {
            v32 = v25 >> 4;
            v33 = (v25 >> 4) + 1;
            if (v33 >> 60)
              sub_22316E078();
            v34 = (uint64_t)(v89 - (_QWORD)__p) >> 3;
            if (v34 <= v33)
              v34 = (v25 >> 4) + 1;
            if (v89 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
              v35 = 0xFFFFFFFFFFFFFFFLL;
            else
              v35 = v34;
            if (v35)
            {
              if (v35 >> 60)
                sub_223174E94();
              v36 = (char *)operator new(16 * v35);
              v37 = &v36[16 * v32];
              v38 = &v36[16 * v35];
              if (v32 == v35)
              {
LABEL_41:
                v39 = v26;
                if (v25 < 1)
                {
                  v49 = v36;
                  if (v24 == v23)
                    v50 = 1;
                  else
                    v50 = v25 >> 3;
                  if (v50 >> 60)
                    sub_223174E94();
                  v37 = (char *)operator new(16 * v50);
                  v38 = &v37[16 * v50];
                  if (v49)
                  {
                    operator delete(v49);
                    v38 = &v37[16 * v50];
                    v24 = (char *)__p;
                  }
                }
                else
                {
                  v37 -= 16 * (v33 >> 1);
                }
                goto LABEL_46;
              }
            }
            else
            {
              v36 = 0;
              v37 = (char *)(16 * v32);
              v38 = 0;
              if (!v32)
                goto LABEL_41;
            }
            v39 = v26;
LABEL_46:
            *(_OWORD *)v37 = *(_OWORD *)v22;
            v40 = v37;
            if (v24 != v39)
            {
              v41 = v39;
              v42 = v37;
              do
              {
                v40 = v42 - 16;
                *((_OWORD *)v42 - 1) = *((_OWORD *)v41 - 1);
                v41 -= 16;
                v42 -= 16;
              }
              while (v41 != v24);
            }
            v43 = v37 + 16;
            v44 = v88 - v39;
            if (v88 != v39)
            {
              v45 = v38;
              memmove(v43, v39, v88 - v39);
              v38 = v45;
            }
            v46 = __p;
            __p = v40;
            v88 = &v43[v44];
            v89 = (unint64_t)v38;
            v19 = v82;
            a4 = v83;
            if (v46)
              operator delete(v46);
            goto LABEL_53;
          }
          if (v26 == v88)
          {
            *(_OWORD *)v88 = *(_OWORD *)v22;
            v88 = v23 + 16;
          }
          else
          {
            v27 = v88 - 16;
            v28 = v88;
            if ((unint64_t)v88 >= 0x10)
            {
              do
              {
                v29 = *(_OWORD *)v27;
                v27 += 16;
                *(_OWORD *)v28 = v29;
                v28 += 16;
              }
              while (v27 < v23);
            }
            v88 = v28;
            if (v23 != v26 + 16)
            {
              memmove(&v23[-16 * ((v23 - (v26 + 16)) >> 4)], v26, v23 - (v26 + 16));
              v28 = v88;
            }
            v31 = v26 <= v22 && v28 > v22;
            *(_OWORD *)v26 = *(_OWORD *)&v22[16 * v31];
          }
        }
LABEL_53:
        v47 = (_QWORD *)v20[1];
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = (_QWORD *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (_QWORD *)v20[2];
            v18 = *v48 == (_QWORD)v20;
            v20 = v48;
          }
          while (!v18);
        }
        v20 = v48;
      }
      while (v48 != v19);
    }
  }
  v85 = 0;
  v86 = 0;
  v84 = &v85;
  v59 = (unsigned __int8 *)__p;
  v58 = (unsigned __int8 *)v88;
  if (__p == v88)
  {
    v60 = v79;
    v61 = v80;
    v62 = v78;
  }
  else
  {
    do
    {
      v63 = sub_223426D4C(&v84, (uint64_t *)&v85, v91, &v90, v59);
      if (!*(_QWORD *)v63)
      {
        v64 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v64 + 25) = *(_OWORD *)v59;
        v65 = v91[0];
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
        *((_QWORD *)v64 + 2) = v65;
        *(_QWORD *)v63 = v64;
        if (*v84)
        {
          v84 = (uint64_t **)*v84;
          v64 = *(char **)v63;
        }
        sub_2231A9A8C(v85, (uint64_t *)v64);
        ++v86;
      }
      v59 += 16;
    }
    while (v59 != v58);
    v60 = v79;
    v61 = v80;
    v62 = v78;
    if (v86 != (v88 - (_BYTE *)__p) >> 4
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeSelection.cpp", 611, (uint64_t)"possible_publish_set.size() == possible_publish_list.size()", 59, (uint64_t)"Expect no repeated kfs in construction of possible publishing list", 66, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v96[0] = &off_24EC5BF18;
  v97 = v96;
  v94[0] = &off_24EC5BF98;
  v94[1] = v62;
  v95 = v94;
  v66 = a5[3];
  if (!v66)
    goto LABEL_88;
  if ((_QWORD *)v66 != a5)
  {
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
LABEL_88:
    v93 = (_BYTE *)v66;
    goto LABEL_90;
  }
  v93 = v92;
  (*(void (**)(_QWORD *, _BYTE *))(*a5 + 24))(a5, v92);
LABEL_90:
  sub_223898600(&v84, (uint64_t)v60, (uint64_t)v96, (uint64_t)v94, (uint64_t)v92, a4, v61, 3.4028e38);
  v68 = v93;
  if (v93 == v92)
  {
    v69 = 4;
    v68 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_95;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_95:
  v70 = v95;
  if (v95 == v94)
  {
    v71 = 4;
    v70 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_100;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_100:
  v72 = v97;
  if (v97 == v96)
  {
    v73 = 4;
    v72 = v96;
  }
  else
  {
    if (!v97)
      goto LABEL_105;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_105:
  v74 = (uint64_t *)*v61;
  v75 = (uint64_t *)v61[1];
  v76 = 126 - 2 * __clz(((uint64_t)v75 - *v61) >> 4);
  v18 = v75 == (uint64_t *)*v61;
  v91[0] = a4;
  v91[1] = v60;
  if (v18)
    v77 = 0;
  else
    v77 = v76;
  sub_22383ACC8(v74, v75, (int8x8_t **)v91, v77, 1, v67);
  kdebug_trace();
  sub_223198030((uint64_t)&v84, v85);
  if (__p)
  {
    v88 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2238A12E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;

  if (v32)
    operator delete(v32);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238A1418(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _OWORD *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t j;
  BOOL v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  unsigned int v81;
  _OWORD *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  _BOOL4 v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  BOOL v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  BOOL v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  _BOOL4 v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  BOOL v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  BOOL v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  _BOOL4 v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  BOOL v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  _BOOL4 v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int *v164;
  BOOL v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  _BOOL4 v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  _BOOL4 v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  BOOL v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int64_t v210;
  int64_t v211;
  uint64_t v212;
  int64_t v213;
  uint64_t v214;
  int v215;
  _BOOL4 v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  int v222;
  int v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  _BOOL4 v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  int64_t v259;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  _BOOL4 v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  _OWORD *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  _BOOL4 v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  unint64_t v301;
  _BOOL4 v302;
  uint64_t v303;
  int v304;
  unsigned int v305;
  BOOL v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  uint64_t v310;
  _OWORD *v311;
  int *v312;
  int v313;
  int v314;
  _BOOL4 v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  uint64_t v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  _OWORD *v336;
  unsigned int v337;
  _BOOL4 v338;
  uint64_t v339;
  int v340;
  unsigned int v341;
  BOOL v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  int v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  int v360;
  unsigned int v361;
  uint64_t v362;
  int *v363;
  unsigned int v364;
  int v365;
  unsigned int v366;
  uint64_t v368;
  __int128 v369;

  v368 = result;
LABEL_2:
  v6 = a2;
  i = v368;
  v363 = (int *)(a2 - 40);
  while (2)
  {
    v368 = i;
    v8 = v6 - i;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - i) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v155 = a2;
        v156 = v368;
        v157 = *(_DWORD *)(a2 - 40);
        v158 = *(_DWORD *)v368;
        v159 = v157 < *(_DWORD *)v368;
        if (v157 != *(_DWORD *)v368)
          goto LABEL_480;
        v160 = *(_QWORD *)(a2 - 32);
        v161 = *(_QWORD *)(v368 + 8);
        v165 = v160 == v161;
        v159 = v160 < v161;
        if (!v165)
          goto LABEL_480;
        v162 = *(_DWORD *)(a2 - 24);
        v163 = *(_DWORD *)(v368 + 16);
        v165 = v162 == v163;
        v159 = v162 < v163;
        if (v165)
        {
          result = sub_22319835C((unsigned __int8 *)(a2 - 20), (unsigned __int8 *)(v368 + 20));
          if ((result & 0x80) == 0)
            return sub_22319835C((unsigned __int8 *)(v368 + 20), (unsigned __int8 *)(a2 - 20));
          v158 = *(_DWORD *)v368;
          v157 = *(_DWORD *)(a2 - 40);
        }
        else
        {
LABEL_480:
          if (!v159)
            return result;
          v155 = a2;
          v156 = v368;
        }
        *(_DWORD *)v156 = v157;
        *(_DWORD *)(v155 - 40) = v158;
        v257 = *(_QWORD *)(v156 + 8);
        *(_QWORD *)(v156 + 8) = *(_QWORD *)(v155 - 32);
        *(_QWORD *)(v155 - 32) = v257;
        LODWORD(v257) = *(_DWORD *)(v156 + 16);
        *(_DWORD *)(v156 + 16) = *(_DWORD *)(v155 - 24);
        *(_DWORD *)(v155 - 24) = v257;
        v258 = *(_OWORD *)(v156 + 20);
        *(_OWORD *)(v156 + 20) = *(_OWORD *)(v155 - 20);
        *(_OWORD *)(v155 - 20) = v258;
        return result;
      case 3:
        return sub_2238A3974(v368, (int *)(v368 + 40), v363);
      case 4:
        return sub_2238A42F0(v368, v368 + 40, v368 + 80, v363);
      case 5:
        return sub_2238A45C4(v368, v368 + 40, v368 + 80, v368 + 120, v363);
      default:
        if (v8 <= 959)
        {
          v164 = (int *)(v368 + 40);
          v165 = v368 == v6 || v164 == (int *)v6;
          v166 = v165;
          if ((a4 & 1) != 0)
          {
            if ((v166 & 1) != 0)
              return result;
            v167 = 0;
            v168 = v368;
            while (1)
            {
              v169 = v168;
              v168 = (uint64_t)v164;
              v170 = *(_DWORD *)(v169 + 40);
              v171 = *(_DWORD *)v169;
              v172 = v170 < *(_DWORD *)v169;
              if (v170 == *(_DWORD *)v169)
              {
                v173 = *(_QWORD *)(v169 + 48);
                v174 = *(_QWORD *)(v169 + 8);
                v165 = v173 == v174;
                v172 = v173 < v174;
                v177 = v368;
                if (v165)
                {
                  v175 = *(_DWORD *)(v169 + 56);
                  v176 = *(_DWORD *)(v169 + 16);
                  v165 = v175 == v176;
                  v172 = v175 < v176;
                  if (v165)
                  {
                    if ((sub_22319835C((unsigned __int8 *)(v169 + 60), (unsigned __int8 *)(v169 + 20)) & 0x80) == 0)
                    {
                      result = sub_22319835C((unsigned __int8 *)(v169 + 20), (unsigned __int8 *)(v169 + 60));
                      goto LABEL_369;
                    }
                    v170 = *(_DWORD *)v168;
                    v171 = *(_DWORD *)v169;
                    goto LABEL_379;
                  }
                }
              }
              else
              {
                v177 = v368;
              }
              if (!v172)
                goto LABEL_369;
LABEL_379:
              v178 = *(_QWORD *)(v169 + 48);
              v179 = *(_DWORD *)(v169 + 56);
              v180 = *(unsigned __int8 *)(v169 + 60);
              v181 = *(unsigned __int8 *)(v169 + 61);
              v182 = *(unsigned __int8 *)(v169 + 62);
              v183 = *(unsigned __int8 *)(v169 + 63);
              v184 = *(unsigned __int8 *)(v169 + 64);
              v185 = *(unsigned __int8 *)(v169 + 65);
              v186 = *(unsigned __int8 *)(v169 + 66);
              result = *(unsigned __int8 *)(v169 + 67);
              v187 = *(unsigned __int8 *)(v169 + 68);
              v188 = *(unsigned __int8 *)(v169 + 69);
              v189 = *(unsigned __int8 *)(v169 + 70);
              v190 = *(unsigned __int8 *)(v169 + 71);
              v191 = *(unsigned __int8 *)(v169 + 72);
              v192 = *(unsigned __int8 *)(v169 + 73);
              v193 = *(unsigned __int8 *)(v169 + 74);
              v194 = *(unsigned __int8 *)(v169 + 75);
              *(_DWORD *)(v169 + 40) = v171;
              *(_QWORD *)(v168 + 8) = *(_QWORD *)(v169 + 8);
              *(_DWORD *)(v168 + 16) = *(_DWORD *)(v169 + 16);
              v195 = (_BYTE *)(v169 + 20);
              *(_OWORD *)(v168 + 20) = *(_OWORD *)(v169 + 20);
              if (v169 == v177)
              {
                v169 = v177;
                goto LABEL_368;
              }
              v196 = v177;
              v197 = v167;
              while (1)
              {
                v198 = v196 + v197;
                v199 = *(_DWORD *)(v198 - 40);
                v200 = v170 < v199;
                if (v170 == v199)
                {
                  v201 = *(_QWORD *)(v198 - 32);
                  v165 = v178 == v201;
                  v200 = v178 < v201;
                  if (v165)
                  {
                    v202 = *(_DWORD *)(v368 + v197 - 24);
                    v165 = v179 == v202;
                    v200 = v179 < v202;
                    if (v165)
                    {
                      v203 = *(unsigned __int8 *)(v368 + v197 - 20);
                      v204 = v180 >= v203;
                      if (v180 == v203)
                      {
                        v205 = *(unsigned __int8 *)(v368 + v197 - 19);
                        v206 = v181;
                        if (v181 == v205)
                        {
                          v205 = *(unsigned __int8 *)(v368 + v197 - 18);
                          v206 = v182;
                          if (v182 == v205)
                          {
                            v205 = *(unsigned __int8 *)(v368 + v197 - 17);
                            v206 = v183;
                            if (v183 == v205)
                            {
                              v205 = *(unsigned __int8 *)(v368 + v197 - 16);
                              v206 = v184;
                              if (v184 == v205)
                              {
                                v205 = *(unsigned __int8 *)(v368 + v197 - 15);
                                v206 = v185;
                                if (v185 == v205)
                                {
                                  v205 = *(unsigned __int8 *)(v368 + v197 - 14);
                                  v206 = v186;
                                  if (v186 == v205)
                                  {
                                    v205 = *(unsigned __int8 *)(v368 + v197 - 13);
                                    v206 = result;
                                    if ((_DWORD)result == v205)
                                    {
                                      v205 = *(unsigned __int8 *)(v368 + v197 - 12);
                                      v206 = v187;
                                      if (v187 == v205)
                                      {
                                        v205 = *(unsigned __int8 *)(v368 + v197 - 11);
                                        v206 = v188;
                                        if (v188 == v205)
                                        {
                                          v205 = *(unsigned __int8 *)(v368 + v197 - 10);
                                          v206 = v189;
                                          if (v189 == v205)
                                          {
                                            v205 = *(unsigned __int8 *)(v368 + v197 - 9);
                                            v206 = v190;
                                            if (v190 == v205)
                                            {
                                              v205 = *(unsigned __int8 *)(v368 + v197 - 8);
                                              v206 = v191;
                                              if (v191 == v205)
                                              {
                                                v205 = *(unsigned __int8 *)(v368 + v197 - 7);
                                                v206 = v192;
                                                if (v192 == v205)
                                                {
                                                  v205 = *(unsigned __int8 *)(v368 + v197 - 6);
                                                  v206 = v193;
                                                  if (v193 == v205)
                                                  {
                                                    v205 = *(unsigned __int8 *)(v368 + v197 - 5);
                                                    v206 = v194;
                                                    if (v194 == v205)
                                                      goto LABEL_368;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        v207 = v179;
                        v208 = v178;
                        v204 = v206 >= v205;
                      }
                      else
                      {
                        v207 = v179;
                        v208 = v178;
                      }
                      v196 = v368;
                      if (v204)
                        goto LABEL_368;
                      goto LABEL_405;
                    }
                  }
                }
                if (!v200)
                  break;
                v196 = v368;
                v208 = *(_QWORD *)(v368 + v197 - 32);
                v207 = *(_DWORD *)(v368 + v197 - 24);
LABEL_405:
                v195 = (_BYTE *)(v169 - 20);
                v169 -= 40;
                v209 = v196 + v197;
                *(_DWORD *)v209 = v199;
                *(_QWORD *)(v209 + 8) = v208;
                *(_DWORD *)(v209 + 16) = v207;
                *(_OWORD *)(v209 + 20) = *(_OWORD *)(v196 + v197 - 20);
                v197 -= 40;
                if (!v197)
                {
                  v195 = (_BYTE *)(v196 + 20);
                  v169 = v196;
                  goto LABEL_368;
                }
              }
              v169 = v368 + v197;
              v195 = (_BYTE *)(v368 + v197 + 20);
LABEL_368:
              *(_DWORD *)v169 = v170;
              *(_QWORD *)(v169 + 8) = v178;
              *(_DWORD *)(v169 + 16) = v179;
              *v195 = v180;
              *(_BYTE *)(v169 + 21) = v181;
              *(_BYTE *)(v169 + 22) = v182;
              *(_BYTE *)(v169 + 23) = v183;
              *(_BYTE *)(v169 + 24) = v184;
              *(_BYTE *)(v169 + 25) = v185;
              *(_BYTE *)(v169 + 26) = v186;
              *(_BYTE *)(v169 + 27) = result;
              *(_BYTE *)(v169 + 28) = v187;
              *(_BYTE *)(v169 + 29) = v188;
              *(_BYTE *)(v169 + 30) = v189;
              *(_BYTE *)(v169 + 31) = v190;
              *(_BYTE *)(v169 + 32) = v191;
              *(_BYTE *)(v169 + 33) = v192;
              *(_BYTE *)(v169 + 34) = v193;
              *(_BYTE *)(v169 + 35) = v194;
LABEL_369:
              v164 = (int *)(v168 + 40);
              v167 += 40;
              if (v168 + 40 == a2)
                return result;
            }
          }
          if ((v166 & 1) != 0)
            return result;
          v311 = (_OWORD *)(v368 + 60);
LABEL_547:
          v312 = v164;
          v313 = *(_DWORD *)(v368 + 40);
          v314 = *(_DWORD *)v368;
          v315 = v313 < *(_DWORD *)v368;
          if (v313 != *(_DWORD *)v368)
            goto LABEL_554;
          v316 = *(_QWORD *)(v368 + 48);
          v317 = *(_QWORD *)(v368 + 8);
          v165 = v316 == v317;
          v315 = v316 < v317;
          if (!v165)
            goto LABEL_554;
          v318 = *(_DWORD *)(v368 + 56);
          v319 = *(_DWORD *)(v368 + 16);
          v165 = v318 == v319;
          v315 = v318 < v319;
          if (v165)
          {
            if ((sub_22319835C((unsigned __int8 *)(v368 + 60), (unsigned __int8 *)(v368 + 20)) & 0x80) == 0)
            {
              result = sub_22319835C((unsigned __int8 *)(v368 + 20), (unsigned __int8 *)(v368 + 60));
              goto LABEL_546;
            }
            v313 = *v312;
            v314 = *(_DWORD *)v368;
          }
          else
          {
LABEL_554:
            if (!v315)
              goto LABEL_546;
          }
          v320 = *(_QWORD *)(v368 + 48);
          v321 = *(_DWORD *)(v368 + 56);
          v322 = *(unsigned __int8 *)(v368 + 60);
          v323 = *(unsigned __int8 *)(v368 + 61);
          v324 = *(unsigned __int8 *)(v368 + 62);
          v325 = *(unsigned __int8 *)(v368 + 63);
          v326 = *(unsigned __int8 *)(v368 + 64);
          v327 = *(unsigned __int8 *)(v368 + 65);
          result = *(unsigned __int8 *)(v368 + 66);
          v328 = *(unsigned __int8 *)(v368 + 67);
          v329 = *(unsigned __int8 *)(v368 + 68);
          v330 = *(unsigned __int8 *)(v368 + 69);
          v331 = *(unsigned __int8 *)(v368 + 70);
          v332 = *(unsigned __int8 *)(v368 + 71);
          v333 = *(unsigned __int8 *)(v368 + 72);
          v334 = *(unsigned __int8 *)(v368 + 73);
          v335 = *(unsigned __int8 *)(v368 + 74);
          v336 = v311;
          v337 = *(unsigned __int8 *)(v368 + 75);
          while (1)
          {
            *((_DWORD *)v336 - 5) = v314;
            *(_QWORD *)((char *)v336 - 12) = *(_QWORD *)((char *)v336 - 52);
            *((_DWORD *)v336 - 1) = *((_DWORD *)v336 - 11);
            *v336 = *(_OWORD *)((char *)v336 - 40);
            v314 = *((_DWORD *)v336 - 25);
            v338 = v313 < v314;
            if (v313 == v314
              && (v339 = *(_QWORD *)((char *)v336 - 92), v165 = v320 == v339, v338 = v320 < v339, v165)
              && (v340 = *((_DWORD *)v336 - 21), v165 = v321 == v340, v338 = v321 < v340, v165))
            {
              v341 = *((unsigned __int8 *)v336 - 80);
              v342 = v322 >= v341;
              if (v322 == v341)
              {
                v343 = *((unsigned __int8 *)v336 - 79);
                v344 = v323;
                if (v323 == v343)
                {
                  v343 = *((unsigned __int8 *)v336 - 78);
                  v344 = v324;
                  if (v324 == v343)
                  {
                    v343 = *((unsigned __int8 *)v336 - 77);
                    v344 = v325;
                    if (v325 == v343)
                    {
                      v343 = *((unsigned __int8 *)v336 - 76);
                      v344 = v326;
                      if (v326 == v343)
                      {
                        v343 = *((unsigned __int8 *)v336 - 75);
                        v344 = v327;
                        if (v327 == v343)
                        {
                          v343 = *((unsigned __int8 *)v336 - 74);
                          v344 = result;
                          if ((_DWORD)result == v343)
                          {
                            v343 = *((unsigned __int8 *)v336 - 73);
                            v344 = v328;
                            if (v328 == v343)
                            {
                              v343 = *((unsigned __int8 *)v336 - 72);
                              v344 = v329;
                              if (v329 == v343)
                              {
                                v343 = *((unsigned __int8 *)v336 - 71);
                                v344 = v330;
                                if (v330 == v343)
                                {
                                  v343 = *((unsigned __int8 *)v336 - 70);
                                  v344 = v331;
                                  if (v331 == v343)
                                  {
                                    v343 = *((unsigned __int8 *)v336 - 69);
                                    v344 = v332;
                                    if (v332 == v343)
                                    {
                                      v343 = *((unsigned __int8 *)v336 - 68);
                                      v344 = v333;
                                      if (v333 == v343)
                                      {
                                        v343 = *((unsigned __int8 *)v336 - 67);
                                        v344 = v334;
                                        if (v334 == v343)
                                        {
                                          v343 = *((unsigned __int8 *)v336 - 66);
                                          v344 = v335;
                                          if (v335 == v343)
                                          {
                                            v343 = *((unsigned __int8 *)v336 - 65);
                                            v344 = v337;
                                            if (v337 == v343)
                                            {
LABEL_545:
                                              *((_DWORD *)v336 - 15) = v313;
                                              *(_QWORD *)((char *)v336 - 52) = v320;
                                              *((_DWORD *)v336 - 11) = v321;
                                              *((_BYTE *)v336 - 40) = v322;
                                              *((_BYTE *)v336 - 39) = v323;
                                              *((_BYTE *)v336 - 38) = v324;
                                              *((_BYTE *)v336 - 37) = v325;
                                              *((_BYTE *)v336 - 36) = v326;
                                              *((_BYTE *)v336 - 35) = v327;
                                              *((_BYTE *)v336 - 34) = result;
                                              *((_BYTE *)v336 - 33) = v328;
                                              *((_BYTE *)v336 - 32) = v329;
                                              *((_BYTE *)v336 - 31) = v330;
                                              *((_BYTE *)v336 - 30) = v331;
                                              *((_BYTE *)v336 - 29) = v332;
                                              *((_BYTE *)v336 - 28) = v333;
                                              *((_BYTE *)v336 - 27) = v334;
                                              *((_BYTE *)v336 - 26) = v335;
                                              *((_BYTE *)v336 - 25) = v337;
LABEL_546:
                                              v368 = (uint64_t)v312;
                                              v164 = v312 + 10;
                                              v311 = (_OWORD *)((char *)v311 + 40);
                                              if (v312 + 10 == (int *)a2)
                                                return result;
                                              goto LABEL_547;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v342 = v344 >= v343;
              }
              if (v342)
                goto LABEL_545;
            }
            else if (!v338)
            {
              goto LABEL_545;
            }
            v336 = (_OWORD *)((char *)v336 - 40);
          }
        }
        if (!a3)
        {
          if (v368 == v6)
            return result;
          v210 = (unint64_t)(v9 - 2) >> 1;
          v211 = v210;
          while (1)
          {
            v213 = v211;
            if (v210 < v211)
              goto LABEL_417;
            v214 = (2 * v211) | 1;
            v212 = v368 + 40 * v214;
            if (2 * v211 + 2 < v9)
            {
              v215 = *(_DWORD *)(v212 + 40);
              v165 = *(_DWORD *)v212 == v215;
              v216 = *(_DWORD *)v212 < v215;
              if (!v165)
                goto LABEL_428;
              v217 = *(_QWORD *)(v212 + 8);
              v218 = *(_QWORD *)(v212 + 48);
              v165 = v217 == v218;
              v216 = v217 < v218;
              if (!v165)
                goto LABEL_428;
              v219 = *(_DWORD *)(v212 + 16);
              v220 = *(_DWORD *)(v212 + 56);
              v165 = v219 == v220;
              v216 = v219 < v220;
              if (v165)
              {
                result = sub_22319835C((unsigned __int8 *)(v212 + 20), (unsigned __int8 *)(v212 + 60));
                v210 = (unint64_t)(v9 - 2) >> 1;
                if ((result & 0x80) != 0)
                  goto LABEL_429;
                result = sub_22319835C((unsigned __int8 *)(v212 + 60), (unsigned __int8 *)(v212 + 20));
                v210 = (unint64_t)(v9 - 2) >> 1;
              }
              else
              {
LABEL_428:
                if (v216)
                {
LABEL_429:
                  v212 += 40;
                  v214 = 2 * v213 + 2;
                }
              }
            }
            v221 = v368 + 40 * v213;
            v222 = *(_DWORD *)v212;
            v223 = *(_DWORD *)v221;
            v224 = *(_DWORD *)v212 < *(_DWORD *)v221;
            if (*(_DWORD *)v212 != *(_DWORD *)v221)
              goto LABEL_437;
            v225 = *(_QWORD *)(v212 + 8);
            v226 = *(_QWORD *)(v221 + 8);
            v165 = v225 == v226;
            v224 = v225 < v226;
            if (!v165)
              goto LABEL_437;
            v227 = *(_DWORD *)(v212 + 16);
            v228 = *(_DWORD *)(v221 + 16);
            v165 = v227 == v228;
            v224 = v227 < v228;
            if (v165)
            {
              result = sub_22319835C((unsigned __int8 *)(v212 + 20), (unsigned __int8 *)(v221 + 20));
              v210 = (unint64_t)(v9 - 2) >> 1;
              if ((result & 0x80) == 0)
              {
                result = sub_22319835C((unsigned __int8 *)(v221 + 20), (unsigned __int8 *)(v212 + 20));
                v210 = (unint64_t)(v9 - 2) >> 1;
                v223 = *(_DWORD *)v221;
                v222 = *(_DWORD *)v212;
LABEL_438:
                v229 = *(_QWORD *)(v221 + 8);
                v230 = *(_DWORD *)(v221 + 16);
                v231 = *(unsigned __int8 *)(v221 + 20);
                v232 = *(unsigned __int8 *)(v221 + 21);
                v233 = *(unsigned __int8 *)(v221 + 22);
                v234 = *(unsigned __int8 *)(v221 + 23);
                v235 = *(unsigned __int8 *)(v221 + 24);
                v236 = *(unsigned __int8 *)(v221 + 25);
                v237 = *(unsigned __int8 *)(v221 + 26);
                v238 = *(unsigned __int8 *)(v221 + 27);
                v364 = *(unsigned __int8 *)(v221 + 28);
                v361 = *(unsigned __int8 *)(v221 + 29);
                v359 = *(unsigned __int8 *)(v221 + 30);
                v357 = *(unsigned __int8 *)(v221 + 32);
                v358 = *(unsigned __int8 *)(v221 + 31);
                v355 = *(unsigned __int8 *)(v221 + 34);
                v356 = *(unsigned __int8 *)(v221 + 33);
                v354 = *(unsigned __int8 *)(v221 + 35);
                *(_DWORD *)v221 = v222;
                *(_QWORD *)(v221 + 8) = *(_QWORD *)(v212 + 8);
                *(_DWORD *)(v221 + 16) = *(_DWORD *)(v212 + 16);
                *(_OWORD *)(v221 + 20) = *(_OWORD *)(v212 + 20);
                if (v210 >= v214)
                {
                  v352 = v223;
                  v353 = v230;
                  v350 = v233;
                  v351 = v232;
                  v348 = v235;
                  v349 = v234;
                  v346 = v237;
                  v347 = v236;
                  v345 = v238;
                  do
                  {
                    v239 = v212;
                    v240 = 2 * v214;
                    v214 = (2 * v214) | 1;
                    v212 = v368 + 40 * v214;
                    v241 = v240 + 2;
                    if (v240 + 2 < v9)
                    {
                      v242 = *(_DWORD *)(v212 + 40);
                      v165 = *(_DWORD *)v212 == v242;
                      v243 = *(_DWORD *)v212 < v242;
                      if (!v165)
                        goto LABEL_449;
                      v244 = *(_QWORD *)(v212 + 8);
                      v245 = *(_QWORD *)(v212 + 48);
                      v165 = v244 == v245;
                      v243 = v244 < v245;
                      if (!v165)
                        goto LABEL_449;
                      v246 = *(_DWORD *)(v212 + 16);
                      v247 = *(_DWORD *)(v212 + 56);
                      v165 = v246 == v247;
                      v243 = v246 < v247;
                      if (v165)
                      {
                        v248 = v229;
                        v249 = v231;
                        result = sub_22319835C((unsigned __int8 *)(v212 + 20), (unsigned __int8 *)(v212 + 60));
                        v238 = v345;
                        v237 = v346;
                        v236 = v347;
                        v235 = v348;
                        v234 = v349;
                        v233 = v350;
                        v232 = v351;
                        v223 = v352;
                        v231 = v249;
                        v230 = v353;
                        v229 = v248;
                        v210 = (unint64_t)(v9 - 2) >> 1;
                        if ((result & 0x80) != 0)
                          goto LABEL_450;
                        result = sub_22319835C((unsigned __int8 *)(v212 + 60), (unsigned __int8 *)(v212 + 20));
                        v238 = v345;
                        v237 = v346;
                        v236 = v347;
                        v235 = v348;
                        v234 = v349;
                        v233 = v350;
                        v232 = v351;
                        v223 = v352;
                        v231 = v249;
                        v230 = v353;
                        v229 = v248;
                        v210 = (unint64_t)(v9 - 2) >> 1;
                      }
                      else
                      {
LABEL_449:
                        if (v243)
                        {
LABEL_450:
                          v212 += 40;
                          v214 = v241;
                        }
                      }
                    }
                    v250 = *(_DWORD *)v212 < v223;
                    if (*(_DWORD *)v212 == v223
                      && (v251 = *(_QWORD *)(v212 + 8), v165 = v251 == v229, v250 = v251 < v229, v165)
                      && (v252 = *(_DWORD *)(v212 + 16), v165 = v252 == v230, v250 = v252 < v230, v165))
                    {
                      v253 = *(unsigned __int8 *)(v212 + 20);
                      if (v253 == (_DWORD)v231)
                      {
                        v254 = *(unsigned __int8 *)(v212 + 21);
                        v255 = v232;
                        if (v254 != v232)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 22);
                        v255 = v233;
                        if (v254 != v233)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 23);
                        v255 = v234;
                        if (v254 != v234)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 24);
                        v255 = v235;
                        if (v254 != v235)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 25);
                        v255 = v236;
                        if (v254 != v236)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 26);
                        v255 = v237;
                        if (v254 != v237)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 27);
                        v255 = v238;
                        if (v254 != v238)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 28);
                        v255 = v364;
                        if (v254 != v364)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 29);
                        v255 = v361;
                        if (v254 != v361)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 30);
                        v255 = v359;
                        if (v254 != v359)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 31);
                        v255 = v358;
                        if (v254 != v358)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 32);
                        v255 = v357;
                        if (v254 != v357)
                          goto LABEL_587;
                        v254 = *(unsigned __int8 *)(v212 + 33);
                        v255 = v356;
                        if (v254 != v356
                          || (v254 = *(unsigned __int8 *)(v212 + 34), v255 = v355, v254 != v355)
                          || (v254 = *(unsigned __int8 *)(v212 + 35),
                              result = v354,
                              v255 = v354,
                              v256 = v229,
                              v254 != v354))
                        {
LABEL_587:
                          v256 = v229;
                          if (v254 < v255)
                          {
LABEL_415:
                            v212 = v239;
                            break;
                          }
                        }
                      }
                      else
                      {
                        v256 = v229;
                        if (v253 < v231)
                          goto LABEL_415;
                      }
                    }
                    else
                    {
                      if (v250)
                        goto LABEL_415;
                      v256 = *(_QWORD *)(v212 + 8);
                    }
                    *(_DWORD *)v239 = *(_DWORD *)v212;
                    *(_QWORD *)(v239 + 8) = v256;
                    *(_DWORD *)(v239 + 16) = *(_DWORD *)(v212 + 16);
                    *(_OWORD *)(v239 + 20) = *(_OWORD *)(v212 + 20);
                  }
                  while (v210 >= v214);
                }
                *(_DWORD *)v212 = v223;
                *(_QWORD *)(v212 + 8) = v229;
                *(_DWORD *)(v212 + 16) = v230;
                *(_BYTE *)(v212 + 20) = v231;
                *(_BYTE *)(v212 + 21) = v232;
                *(_BYTE *)(v212 + 22) = v233;
                *(_BYTE *)(v212 + 23) = v234;
                *(_BYTE *)(v212 + 24) = v235;
                *(_BYTE *)(v212 + 25) = v236;
                *(_BYTE *)(v212 + 26) = v237;
                *(_BYTE *)(v212 + 27) = v238;
                *(_BYTE *)(v212 + 28) = v364;
                *(_BYTE *)(v212 + 29) = v361;
                *(_BYTE *)(v212 + 30) = v359;
                *(_BYTE *)(v212 + 31) = v358;
                *(_BYTE *)(v212 + 32) = v357;
                *(_BYTE *)(v212 + 33) = v356;
                *(_BYTE *)(v212 + 34) = v355;
                *(_BYTE *)(v212 + 35) = v354;
              }
            }
            else
            {
LABEL_437:
              if (!v224)
                goto LABEL_438;
            }
LABEL_417:
            v211 = v213 - 1;
            if (!v213)
            {
              v259 = v8 / 0x28uLL;
              while (1)
              {
                if (v259 < 2)
                  goto LABEL_485;
                v261 = 0;
                v262 = v368;
                v365 = *(_DWORD *)v368;
                v362 = *(_QWORD *)(v368 + 8);
                v360 = *(_DWORD *)(v368 + 16);
                v369 = *(_OWORD *)(v368 + 20);
                do
                {
                  v263 = v262;
                  v262 += 40 * v261 + 40;
                  v264 = 2 * v261;
                  v261 = (2 * v261) | 1;
                  v265 = v264 + 2;
                  if (v264 + 2 < v259)
                  {
                    v266 = *(_DWORD *)(v262 + 40);
                    v165 = *(_DWORD *)v262 == v266;
                    v267 = *(_DWORD *)v262 < v266;
                    if (!v165)
                      goto LABEL_500;
                    v268 = *(_QWORD *)(v262 + 8);
                    v269 = *(_QWORD *)(v262 + 48);
                    v165 = v268 == v269;
                    v267 = v268 < v269;
                    if (!v165)
                      goto LABEL_500;
                    v270 = *(_DWORD *)(v262 + 16);
                    v271 = *(_DWORD *)(v262 + 56);
                    v165 = v270 == v271;
                    v267 = v270 < v271;
                    if (v165)
                    {
                      result = sub_22319835C((unsigned __int8 *)(v262 + 20), (unsigned __int8 *)(v262 + 60));
                      if ((result & 0x80) != 0)
                        goto LABEL_489;
                      result = sub_22319835C((unsigned __int8 *)(v262 + 60), (unsigned __int8 *)(v262 + 20));
                    }
                    else
                    {
LABEL_500:
                      if (v267)
                      {
LABEL_489:
                        v262 += 40;
                        v261 = v265;
                      }
                    }
                  }
                  *(_DWORD *)v263 = *(_DWORD *)v262;
                  *(_QWORD *)(v263 + 8) = *(_QWORD *)(v262 + 8);
                  *(_DWORD *)(v263 + 16) = *(_DWORD *)(v262 + 16);
                  *(_OWORD *)(v263 + 20) = *(_OWORD *)(v262 + 20);
                }
                while (v261 <= (uint64_t)((unint64_t)(v259 - 2) >> 1));
                v272 = (_OWORD *)(v262 + 20);
                if (v262 == a2 - 40)
                {
                  *(_DWORD *)v262 = v365;
                  *(_QWORD *)(v262 + 8) = v362;
                  *(_DWORD *)(v262 + 16) = v360;
                  *v272 = v369;
                  goto LABEL_485;
                }
                *(_DWORD *)v262 = *(_DWORD *)(a2 - 40);
                *(_QWORD *)(v262 + 8) = *(_QWORD *)(a2 - 32);
                *(_DWORD *)(v262 + 16) = *(_DWORD *)(a2 - 24);
                *v272 = *(_OWORD *)(a2 - 20);
                *(_DWORD *)(a2 - 40) = v365;
                *(_QWORD *)(a2 - 32) = v362;
                *(_DWORD *)(a2 - 24) = v360;
                *(_OWORD *)(a2 - 20) = v369;
                v273 = v262 - v368 + 40;
                if (v273 < 41)
                  goto LABEL_485;
                v274 = v273 / 0x28uLL - 2;
                v275 = v274 >> 1;
                v276 = v368 + 40 * (v274 >> 1);
                v277 = *(_DWORD *)v276;
                v278 = *(_DWORD *)v262;
                v279 = *(_DWORD *)v276 < *(_DWORD *)v262;
                if (*(_DWORD *)v276 != *(_DWORD *)v262)
                  goto LABEL_511;
                v280 = *(_QWORD *)(v276 + 8);
                v281 = *(_QWORD *)(v262 + 8);
                v165 = v280 == v281;
                v279 = v280 < v281;
                if (!v165)
                  goto LABEL_511;
                v282 = *(_DWORD *)(v276 + 16);
                v283 = *(_DWORD *)(v262 + 16);
                v165 = v282 == v283;
                v279 = v282 < v283;
                if (v165)
                {
                  if ((sub_22319835C((unsigned __int8 *)(v276 + 20), (unsigned __int8 *)(v262 + 20)) & 0x80) == 0)
                  {
                    result = sub_22319835C((unsigned __int8 *)(v262 + 20), (unsigned __int8 *)(v276 + 20));
                    goto LABEL_485;
                  }
                  v278 = *(_DWORD *)v262;
                  v277 = *(_DWORD *)v276;
                }
                else
                {
LABEL_511:
                  if (!v279)
                    goto LABEL_485;
                }
                v284 = *(_QWORD *)(v262 + 8);
                v285 = *(_DWORD *)(v262 + 16);
                v286 = *(unsigned __int8 *)(v262 + 20);
                v287 = *(unsigned __int8 *)(v262 + 21);
                v288 = *(unsigned __int8 *)(v262 + 22);
                v289 = *(unsigned __int8 *)(v262 + 23);
                v290 = *(unsigned __int8 *)(v262 + 24);
                v291 = *(unsigned __int8 *)(v262 + 25);
                v292 = *(unsigned __int8 *)(v262 + 26);
                result = *(unsigned __int8 *)(v262 + 27);
                v366 = *(unsigned __int8 *)(v262 + 28);
                v293 = *(unsigned __int8 *)(v262 + 29);
                v294 = *(unsigned __int8 *)(v262 + 30);
                v295 = *(unsigned __int8 *)(v262 + 31);
                v296 = *(unsigned __int8 *)(v262 + 32);
                v297 = *(unsigned __int8 *)(v262 + 33);
                v298 = *(unsigned __int8 *)(v262 + 34);
                v299 = *(unsigned __int8 *)(v262 + 35);
                *(_DWORD *)v262 = v277;
                *(_QWORD *)(v262 + 8) = *(_QWORD *)(v276 + 8);
                *(_DWORD *)(v262 + 16) = *(_DWORD *)(v276 + 16);
                *v272 = *(_OWORD *)(v276 + 20);
                if (v274 < 2)
                  goto LABEL_541;
                while (2)
                {
                  v300 = v276;
                  v301 = v275 - 1;
                  v275 = (v275 - 1) >> 1;
                  v276 = v368 + 40 * v275;
                  v302 = *(_DWORD *)v276 < v278;
                  if (*(_DWORD *)v276 != v278
                    || (v303 = *(_QWORD *)(v276 + 8), v302 = v303 < v284, v303 != v284)
                    || (v304 = *(_DWORD *)(v276 + 16), v302 = v304 < v285, v304 != v285))
                  {
                    if (!v302)
                      goto LABEL_540;
                    v310 = *(_QWORD *)(v276 + 8);
                    v309 = *(_DWORD *)(v276 + 16);
LABEL_536:
                    *(_DWORD *)v300 = *(_DWORD *)v276;
                    *(_QWORD *)(v300 + 8) = v310;
                    *(_DWORD *)(v300 + 16) = v309;
                    *(_OWORD *)(v300 + 20) = *(_OWORD *)(v276 + 20);
                    if (v301 <= 1)
                      goto LABEL_541;
                    continue;
                  }
                  break;
                }
                v305 = *(unsigned __int8 *)(v276 + 20);
                v306 = v305 >= v286;
                if (v305 != v286)
                {
                  v309 = v285;
                  v310 = v284;
                  if (v306)
                    goto LABEL_540;
                  goto LABEL_536;
                }
                v307 = *(unsigned __int8 *)(v276 + 21);
                v308 = v287;
                if (v307 != v287)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 22);
                v308 = v288;
                if (v307 != v288)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 23);
                v308 = v289;
                if (v307 != v289)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 24);
                v308 = v290;
                if (v307 != v290)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 25);
                v308 = v291;
                if (v307 != v291)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 26);
                v308 = v292;
                if (v307 != v292)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 27);
                v308 = result;
                if (v307 != (_DWORD)result)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 28);
                v308 = v366;
                if (v307 != v366)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 29);
                v308 = v293;
                if (v307 != v293)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 30);
                v308 = v294;
                if (v307 != v294)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 31);
                v308 = v295;
                if (v307 != v295)
                  goto LABEL_588;
                v307 = *(unsigned __int8 *)(v276 + 32);
                v308 = v296;
                if (v307 != v296
                  || (v307 = *(unsigned __int8 *)(v276 + 33), v308 = v297, v307 != v297)
                  || (v307 = *(unsigned __int8 *)(v276 + 34), v308 = v298, v307 != v298)
                  || (v307 = *(unsigned __int8 *)(v276 + 35), v308 = v299, v307 != v299))
                {
LABEL_588:
                  v309 = v285;
                  v310 = v284;
                  if (v307 < v308)
                    goto LABEL_536;
                }
LABEL_540:
                v276 = v300;
LABEL_541:
                *(_DWORD *)v276 = v278;
                *(_QWORD *)(v276 + 8) = v284;
                *(_DWORD *)(v276 + 16) = v285;
                *(_BYTE *)(v276 + 20) = v286;
                *(_BYTE *)(v276 + 21) = v287;
                *(_BYTE *)(v276 + 22) = v288;
                *(_BYTE *)(v276 + 23) = v289;
                *(_BYTE *)(v276 + 24) = v290;
                *(_BYTE *)(v276 + 25) = v291;
                *(_BYTE *)(v276 + 26) = v292;
                *(_BYTE *)(v276 + 27) = result;
                *(_BYTE *)(v276 + 28) = v366;
                *(_BYTE *)(v276 + 29) = v293;
                *(_BYTE *)(v276 + 30) = v294;
                *(_BYTE *)(v276 + 31) = v295;
                *(_BYTE *)(v276 + 32) = v296;
                *(_BYTE *)(v276 + 33) = v297;
                *(_BYTE *)(v276 + 34) = v298;
                *(_BYTE *)(v276 + 35) = v299;
LABEL_485:
                a2 -= 40;
                if ((unint64_t)v259-- <= 2)
                  return result;
              }
            }
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v368 + 40 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0x1401)
        {
          sub_2238A3974(v11, (int *)v368, v363);
          v16 = v368;
          --a3;
          v17 = *(_DWORD *)v368;
          if ((a4 & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          sub_2238A3974(v368, (int *)v11, v363);
          v12 = 40 * v10;
          sub_2238A3974(v368 + 40, (int *)(v12 + v368 - 40), (int *)(a2 - 80));
          sub_2238A3974(v368 + 80, (int *)(v368 + 40 + v12), (int *)(a2 - 120));
          sub_2238A3974(v12 + v368 - 40, (int *)v11, (int *)(v368 + 40 + v12));
          v13 = *(_DWORD *)v368;
          *(_DWORD *)v368 = *(_DWORD *)v11;
          *(_DWORD *)v11 = v13;
          v14 = *(_QWORD *)(v368 + 8);
          *(_QWORD *)(v368 + 8) = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v14;
          LODWORD(v14) = *(_DWORD *)(v368 + 16);
          *(_DWORD *)(v368 + 16) = *(_DWORD *)(v11 + 16);
          *(_DWORD *)(v11 + 16) = v14;
          v15 = *(_OWORD *)(v368 + 20);
          *(_OWORD *)(v368 + 20) = *(_OWORD *)(v11 + 20);
          *(_OWORD *)(v11 + 20) = v15;
          v16 = v368;
          --a3;
          v17 = *(_DWORD *)v368;
          if ((a4 & 1) != 0)
            goto LABEL_19;
        }
        v18 = *(_DWORD *)(v16 - 40);
        v165 = v18 == v17;
        v19 = v18 < v17;
        if (!v165)
          goto LABEL_18;
        v20 = *(_QWORD *)(v16 - 32);
        v21 = *(_QWORD *)(v16 + 8);
        v165 = v20 == v21;
        v19 = v20 < v21;
        if (!v165
          || (v22 = *(_DWORD *)(v16 - 24), v23 = *(_DWORD *)(v16 + 16), v165 = v22 == v23, v19 = v22 < v23, !v165))
        {
LABEL_18:
          if (v19)
            goto LABEL_19;
LABEL_142:
          v82 = (_OWORD *)(v16 + 20);
          v81 = *(unsigned __int8 *)(v16 + 20);
          v83 = *(_QWORD *)(v16 + 8);
          v84 = *(_DWORD *)(v16 + 16);
          v85 = *(unsigned __int8 *)(v16 + 21);
          v86 = *(unsigned __int8 *)(v16 + 22);
          v87 = *(unsigned __int8 *)(v16 + 23);
          v88 = *(unsigned __int8 *)(v16 + 24);
          v89 = *(unsigned __int8 *)(v16 + 25);
          result = *(unsigned __int8 *)(v16 + 26);
          v90 = *(unsigned __int8 *)(v16 + 27);
          v91 = *(unsigned __int8 *)(v16 + 28);
          v92 = *(unsigned __int8 *)(v16 + 29);
          v93 = *(unsigned __int8 *)(v16 + 30);
          v94 = *(unsigned __int8 *)(v16 + 31);
          v95 = *(unsigned __int8 *)(v16 + 32);
          v96 = *(unsigned __int8 *)(v16 + 33);
          v97 = *(unsigned __int8 *)(v16 + 34);
          v98 = *(unsigned __int8 *)(v16 + 35);
          v99 = *v363;
          v100 = v17 < *v363;
          if (v17 != *v363
            || (v101 = *(_QWORD *)(a2 - 32), v165 = v83 == v101, v100 = v83 < v101, !v165)
            || (v102 = *(_DWORD *)(a2 - 24), v165 = v84 == v102, v100 = v84 < v102, !v165))
          {
            if (v100)
            {
LABEL_196:
              for (i = v16 + 40; ; i += 40)
              {
                v114 = v17 < *(_DWORD *)i;
                if (v17 == *(_DWORD *)i
                  && (v115 = *(_QWORD *)(i + 8), v165 = v83 == v115, v114 = v83 < v115, v165)
                  && (v116 = *(_DWORD *)(i + 16), v165 = v84 == v116, v114 = v84 < v116, v165))
                {
                  v117 = *(unsigned __int8 *)(i + 20);
                  v118 = v81 >= v117;
                  if (v81 == v117)
                  {
                    v119 = *(unsigned __int8 *)(i + 21);
                    v120 = *(unsigned __int8 *)(v16 + 21);
                    if (v85 == v119)
                    {
                      v119 = *(unsigned __int8 *)(i + 22);
                      v120 = *(unsigned __int8 *)(v16 + 22);
                      if (v86 == v119)
                      {
                        v119 = *(unsigned __int8 *)(i + 23);
                        v120 = *(unsigned __int8 *)(v16 + 23);
                        if (v87 == v119)
                        {
                          v119 = *(unsigned __int8 *)(i + 24);
                          v120 = *(unsigned __int8 *)(v16 + 24);
                          if (v88 == v119)
                          {
                            v119 = *(unsigned __int8 *)(i + 25);
                            v120 = *(unsigned __int8 *)(v16 + 25);
                            if (v89 == v119)
                            {
                              v119 = *(unsigned __int8 *)(i + 26);
                              v120 = *(unsigned __int8 *)(v16 + 26);
                              if ((_DWORD)result == v119)
                              {
                                v119 = *(unsigned __int8 *)(i + 27);
                                v120 = *(unsigned __int8 *)(v16 + 27);
                                if (v90 == v119)
                                {
                                  v119 = *(unsigned __int8 *)(i + 28);
                                  v120 = *(unsigned __int8 *)(v16 + 28);
                                  if (v91 == v119)
                                  {
                                    v119 = *(unsigned __int8 *)(i + 29);
                                    v120 = *(unsigned __int8 *)(v16 + 29);
                                    if (v92 == v119)
                                    {
                                      v119 = *(unsigned __int8 *)(i + 30);
                                      v120 = *(unsigned __int8 *)(v16 + 30);
                                      if (v93 == v119)
                                      {
                                        v119 = *(unsigned __int8 *)(i + 31);
                                        v120 = *(unsigned __int8 *)(v16 + 31);
                                        if (v94 == v119)
                                        {
                                          v119 = *(unsigned __int8 *)(i + 32);
                                          v120 = *(unsigned __int8 *)(v16 + 32);
                                          if (v95 == v119)
                                          {
                                            v119 = *(unsigned __int8 *)(i + 33);
                                            v120 = *(unsigned __int8 *)(v16 + 33);
                                            if (v96 == v119)
                                            {
                                              v119 = *(unsigned __int8 *)(i + 34);
                                              v120 = *(unsigned __int8 *)(v16 + 34);
                                              if (v97 == v119)
                                              {
                                                v119 = *(unsigned __int8 *)(i + 35);
                                                v120 = *(unsigned __int8 *)(v16 + 35);
                                                if (v98 == v119)
                                                  continue;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    v118 = v120 >= v119;
                  }
                  if (!v118)
                    goto LABEL_222;
                }
                else if (v114)
                {
                  goto LABEL_222;
                }
              }
            }
            goto LABEL_166;
          }
          v103 = *(unsigned __int8 *)(a2 - 20);
          v104 = v81 >= v103;
          if (v81 != v103)
            goto LABEL_164;
          v105 = *(unsigned __int8 *)(a2 - 19);
          v106 = *(unsigned __int8 *)(v16 + 21);
          if (v85 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 18);
          v106 = *(unsigned __int8 *)(v16 + 22);
          if (v86 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 17);
          v106 = *(unsigned __int8 *)(v16 + 23);
          if (v87 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 16);
          v106 = *(unsigned __int8 *)(v16 + 24);
          if (v88 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 15);
          v106 = *(unsigned __int8 *)(v16 + 25);
          if (v89 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 14);
          v106 = *(unsigned __int8 *)(v16 + 26);
          if ((_DWORD)result != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 13);
          v106 = *(unsigned __int8 *)(v16 + 27);
          if (v90 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 12);
          v106 = *(unsigned __int8 *)(v16 + 28);
          if (v91 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 11);
          v106 = *(unsigned __int8 *)(v16 + 29);
          if (v92 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 10);
          v106 = *(unsigned __int8 *)(v16 + 30);
          if (v93 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 9);
          v106 = *(unsigned __int8 *)(v16 + 31);
          if (v94 != v105)
            goto LABEL_163;
          v105 = *(unsigned __int8 *)(a2 - 8);
          v106 = *(unsigned __int8 *)(v16 + 32);
          if (v95 != v105
            || (v105 = *(unsigned __int8 *)(a2 - 7), v106 = *(unsigned __int8 *)(v16 + 33), v96 != v105)
            || (v105 = *(unsigned __int8 *)(a2 - 6), v106 = *(unsigned __int8 *)(v16 + 34), v97 != v105)
            || (v105 = *(unsigned __int8 *)(a2 - 5), v106 = *(unsigned __int8 *)(v16 + 35), v98 != v105))
          {
LABEL_163:
            v104 = v106 >= v105;
LABEL_164:
            if (!v104)
              goto LABEL_196;
          }
LABEL_166:
          i = v16 + 40;
          v107 = a2;
          if (v16 + 40 >= a2)
            goto LABEL_223;
          while (1)
          {
            v108 = v17 < *(_DWORD *)i;
            if (v17 != *(_DWORD *)i
              || (v109 = *(_QWORD *)(i + 8), v165 = v83 == v109, v108 = v83 < v109, !v165)
              || (v110 = *(_DWORD *)(i + 16), v165 = v84 == v110, v108 = v84 < v110, !v165))
            {
              if (v108)
                goto LABEL_222;
              goto LABEL_191;
            }
            v111 = *(unsigned __int8 *)(i + 20);
            if (v81 == v111)
              break;
            if (v81 < v111)
              goto LABEL_222;
LABEL_191:
            i += 40;
            v107 = a2;
            if (i >= a2)
              goto LABEL_223;
          }
          v112 = *(unsigned __int8 *)(i + 21);
          v113 = *(unsigned __int8 *)(v16 + 21);
          if (v85 == v112)
          {
            v112 = *(unsigned __int8 *)(i + 22);
            v113 = *(unsigned __int8 *)(v16 + 22);
            if (v86 == v112)
            {
              v112 = *(unsigned __int8 *)(i + 23);
              v113 = *(unsigned __int8 *)(v16 + 23);
              if (v87 == v112)
              {
                v112 = *(unsigned __int8 *)(i + 24);
                v113 = *(unsigned __int8 *)(v16 + 24);
                if (v88 == v112)
                {
                  v112 = *(unsigned __int8 *)(i + 25);
                  v113 = *(unsigned __int8 *)(v16 + 25);
                  if (v89 == v112)
                  {
                    v112 = *(unsigned __int8 *)(i + 26);
                    v113 = *(unsigned __int8 *)(v16 + 26);
                    if ((_DWORD)result == v112)
                    {
                      v112 = *(unsigned __int8 *)(i + 27);
                      v113 = *(unsigned __int8 *)(v16 + 27);
                      if (v90 == v112)
                      {
                        v112 = *(unsigned __int8 *)(i + 28);
                        v113 = *(unsigned __int8 *)(v16 + 28);
                        if (v91 == v112)
                        {
                          v112 = *(unsigned __int8 *)(i + 29);
                          v113 = *(unsigned __int8 *)(v16 + 29);
                          if (v92 == v112)
                          {
                            v112 = *(unsigned __int8 *)(i + 30);
                            v113 = *(unsigned __int8 *)(v16 + 30);
                            if (v93 == v112)
                            {
                              v112 = *(unsigned __int8 *)(i + 31);
                              v113 = *(unsigned __int8 *)(v16 + 31);
                              if (v94 == v112)
                              {
                                v112 = *(unsigned __int8 *)(i + 32);
                                v113 = *(unsigned __int8 *)(v16 + 32);
                                if (v95 == v112)
                                {
                                  v112 = *(unsigned __int8 *)(i + 33);
                                  v113 = *(unsigned __int8 *)(v16 + 33);
                                  if (v96 == v112)
                                  {
                                    v112 = *(unsigned __int8 *)(i + 34);
                                    v113 = *(unsigned __int8 *)(v16 + 34);
                                    if (v97 == v112)
                                    {
                                      v112 = *(unsigned __int8 *)(i + 35);
                                      v113 = *(unsigned __int8 *)(v16 + 35);
                                      if (v98 == v112)
                                        goto LABEL_191;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v113 >= v112)
            goto LABEL_191;
LABEL_222:
          v107 = a2;
LABEL_223:
          v121 = v107;
          if (i >= v107)
            goto LABEL_252;
          v122 = a2 - 80;
          while (2)
          {
            v124 = v17 < v99;
            if (v17 != v99
              || (v125 = *(_QWORD *)(v122 + 48), v165 = v83 == v125, v124 = v83 < v125, !v165)
              || (v126 = *(_DWORD *)(v122 + 56), v165 = v84 == v126, v124 = v84 < v126, !v165))
            {
              if (!v124)
                goto LABEL_251;
LABEL_226:
              v123 = *(_DWORD *)v122;
              v122 -= 40;
              v99 = v123;
              continue;
            }
            break;
          }
          v127 = *(unsigned __int8 *)(v122 + 60);
          v128 = v81 >= v127;
          if (v81 != v127)
          {
LABEL_249:
            if (v128)
              goto LABEL_251;
            goto LABEL_226;
          }
          v129 = *(unsigned __int8 *)(v122 + 61);
          v130 = v85;
          if (v85 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 62);
          v130 = v86;
          if (v86 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 63);
          v130 = v87;
          if (v87 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 64);
          v130 = v88;
          if (v88 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 65);
          v130 = v89;
          if (v89 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 66);
          v130 = result;
          if ((_DWORD)result != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 67);
          v130 = v90;
          if (v90 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 68);
          v130 = v91;
          if (v91 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 69);
          v130 = v92;
          if (v92 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 70);
          v130 = v93;
          if (v93 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 71);
          v130 = v94;
          if (v94 != v129)
            goto LABEL_248;
          v129 = *(unsigned __int8 *)(v122 + 72);
          v130 = v95;
          if (v95 != v129
            || (v129 = *(unsigned __int8 *)(v122 + 73), v130 = v96, v96 != v129)
            || (v129 = *(unsigned __int8 *)(v122 + 74), v130 = v97, v97 != v129)
            || (v129 = *(unsigned __int8 *)(v122 + 75), v130 = v98, v98 != v129))
          {
LABEL_248:
            v128 = v130 >= v129;
            goto LABEL_249;
          }
LABEL_251:
          v121 = v122 + 40;
LABEL_252:
          if (i < v121)
          {
            v131 = *(_DWORD *)i;
            v132 = *(_DWORD *)v121;
            do
            {
              *(_DWORD *)i = v132;
              *(_DWORD *)v121 = v131;
              v133 = *(_QWORD *)(i + 8);
              *(_QWORD *)(i + 8) = *(_QWORD *)(v121 + 8);
              *(_QWORD *)(v121 + 8) = v133;
              LODWORD(v133) = *(_DWORD *)(i + 16);
              *(_DWORD *)(i + 16) = *(_DWORD *)(v121 + 16);
              *(_DWORD *)(v121 + 16) = v133;
              v134 = *(_OWORD *)(i + 20);
              *(_OWORD *)(i + 20) = *(_OWORD *)(v121 + 20);
              *(_OWORD *)(v121 + 20) = v134;
              do
              {
                while (1)
                {
                  v135 = *(_DWORD *)(i + 40);
                  i += 40;
                  v131 = v135;
                  v136 = v17 < v135;
                  if (v17 != v135)
                    break;
                  v137 = *(_QWORD *)(i + 8);
                  v165 = v83 == v137;
                  v136 = v83 < v137;
                  if (!v165)
                    break;
                  v138 = *(_DWORD *)(i + 16);
                  v165 = v84 == v138;
                  v136 = v84 < v138;
                  if (!v165)
                    break;
                  v139 = *(unsigned __int8 *)(i + 20);
                  if (v81 == v139)
                  {
                    v140 = *(unsigned __int8 *)(i + 21);
                    v141 = v85;
                    if (v85 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 22);
                    v141 = v86;
                    if (v86 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 23);
                    v141 = v87;
                    if (v87 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 24);
                    v141 = v88;
                    if (v88 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 25);
                    v141 = v89;
                    if (v89 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 26);
                    v141 = result;
                    if ((_DWORD)result != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 27);
                    v141 = v90;
                    if (v90 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 28);
                    v141 = v91;
                    if (v91 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 29);
                    v141 = v92;
                    if (v92 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 30);
                    v141 = v93;
                    if (v93 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 31);
                    v141 = v94;
                    if (v94 != v140)
                      goto LABEL_279;
                    v140 = *(unsigned __int8 *)(i + 32);
                    v141 = v95;
                    if (v95 != v140
                      || (v140 = *(unsigned __int8 *)(i + 33), v141 = v96, v96 != v140)
                      || (v140 = *(unsigned __int8 *)(i + 34), v141 = v97, v97 != v140)
                      || (v140 = *(unsigned __int8 *)(i + 35), v141 = v98, v98 != v140))
                    {
LABEL_279:
                      if (v141 < v140)
                      {
                        v131 = v17;
                        goto LABEL_284;
                      }
                    }
                  }
                  else if (v81 < v139)
                  {
                    v131 = v17;
                    goto LABEL_284;
                  }
                }
              }
              while (!v136);
              do
              {
                while (1)
                {
LABEL_284:
                  while (1)
                  {
                    v142 = *(_DWORD *)(v121 - 40);
                    v121 -= 40;
                    v132 = v142;
                    v143 = v17 < v142;
                    if (v17 == v142)
                    {
                      v144 = *(_QWORD *)(v121 + 8);
                      v165 = v83 == v144;
                      v143 = v83 < v144;
                      if (v165)
                      {
                        v145 = *(_DWORD *)(v121 + 16);
                        v165 = v84 == v145;
                        v143 = v84 < v145;
                        if (v165)
                          break;
                      }
                    }
                    if (!v143)
                      goto LABEL_255;
                  }
                  v146 = *(unsigned __int8 *)(v121 + 20);
                  if (v81 == v146)
                    break;
                  if (v81 >= v146)
                    goto LABEL_254;
                }
                v147 = *(unsigned __int8 *)(v121 + 21);
                v148 = v85;
                if (v85 == v147)
                {
                  v147 = *(unsigned __int8 *)(v121 + 22);
                  v148 = v86;
                  if (v86 == v147)
                  {
                    v147 = *(unsigned __int8 *)(v121 + 23);
                    v148 = v87;
                    if (v87 == v147)
                    {
                      v147 = *(unsigned __int8 *)(v121 + 24);
                      v148 = v88;
                      if (v88 == v147)
                      {
                        v147 = *(unsigned __int8 *)(v121 + 25);
                        v148 = v89;
                        if (v89 == v147)
                        {
                          v147 = *(unsigned __int8 *)(v121 + 26);
                          v148 = result;
                          if ((_DWORD)result == v147)
                          {
                            v147 = *(unsigned __int8 *)(v121 + 27);
                            v148 = v90;
                            if (v90 == v147)
                            {
                              v147 = *(unsigned __int8 *)(v121 + 28);
                              v148 = v91;
                              if (v91 == v147)
                              {
                                v147 = *(unsigned __int8 *)(v121 + 29);
                                v148 = v92;
                                if (v92 == v147)
                                {
                                  v147 = *(unsigned __int8 *)(v121 + 30);
                                  v148 = v93;
                                  if (v93 == v147)
                                  {
                                    v147 = *(unsigned __int8 *)(v121 + 31);
                                    v148 = v94;
                                    if (v94 == v147)
                                    {
                                      v147 = *(unsigned __int8 *)(v121 + 32);
                                      v148 = v95;
                                      if (v95 == v147)
                                      {
                                        v147 = *(unsigned __int8 *)(v121 + 33);
                                        v148 = v96;
                                        if (v96 == v147)
                                        {
                                          v147 = *(unsigned __int8 *)(v121 + 34);
                                          v148 = v97;
                                          if (v97 == v147)
                                          {
                                            v147 = *(unsigned __int8 *)(v121 + 35);
                                            v148 = v98;
                                            if (v98 == v147)
                                              break;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              while (v148 < v147);
LABEL_254:
              v132 = v17;
LABEL_255:
              ;
            }
            while (i < v121);
          }
          if (i - 40 != v368)
          {
            *(_DWORD *)v368 = *(_DWORD *)(i - 40);
            *(_QWORD *)(v368 + 8) = *(_QWORD *)(i - 32);
            *(_DWORD *)(v368 + 16) = *(_DWORD *)(i - 24);
            *v82 = *(_OWORD *)(i - 20);
          }
          a4 = 0;
          *(_DWORD *)(i - 40) = v17;
          *(_QWORD *)(i - 32) = v83;
          *(_DWORD *)(i - 24) = v84;
          *(_BYTE *)(i - 20) = v81;
          *(_BYTE *)(i - 19) = v85;
          *(_BYTE *)(i - 18) = v86;
          *(_BYTE *)(i - 17) = v87;
          *(_BYTE *)(i - 16) = v88;
          *(_BYTE *)(i - 15) = v89;
          *(_BYTE *)(i - 14) = result;
          *(_BYTE *)(i - 13) = v90;
          *(_BYTE *)(i - 12) = v91;
          *(_BYTE *)(i - 11) = v92;
          *(_BYTE *)(i - 10) = v93;
          *(_BYTE *)(i - 9) = v94;
          *(_BYTE *)(i - 8) = v95;
          *(_BYTE *)(i - 7) = v96;
          *(_BYTE *)(i - 6) = v97;
          *(_BYTE *)(i - 5) = v98;
          v6 = a2;
          continue;
        }
        if ((sub_22319835C((unsigned __int8 *)(v16 - 20), (unsigned __int8 *)(v16 + 20)) & 0x80) == 0)
        {
          sub_22319835C((unsigned __int8 *)(v16 + 20), (unsigned __int8 *)(v16 - 20));
          v17 = *(_DWORD *)v16;
          goto LABEL_142;
        }
        v17 = *(_DWORD *)v16;
LABEL_19:
        v24 = 0;
        v26 = (_OWORD *)(v16 + 20);
        v25 = *(unsigned __int8 *)(v16 + 20);
        v27 = *(_QWORD *)(v16 + 8);
        v28 = *(_DWORD *)(v16 + 16);
        v29 = *(unsigned __int8 *)(v16 + 21);
        v30 = *(unsigned __int8 *)(v16 + 22);
        v31 = *(unsigned __int8 *)(v16 + 23);
        v32 = *(unsigned __int8 *)(v16 + 24);
        v33 = *(unsigned __int8 *)(v16 + 25);
        v34 = *(unsigned __int8 *)(v16 + 26);
        v35 = *(unsigned __int8 *)(v16 + 27);
        v36 = *(unsigned __int8 *)(v16 + 28);
        v37 = *(unsigned __int8 *)(v16 + 29);
        v38 = *(unsigned __int8 *)(v16 + 30);
        v39 = *(unsigned __int8 *)(v16 + 31);
        v40 = *(unsigned __int8 *)(v16 + 32);
        v41 = *(unsigned __int8 *)(v16 + 33);
        v42 = *(unsigned __int8 *)(v16 + 34);
        v43 = *(unsigned __int8 *)(v16 + 35);
        while (2)
        {
          v44 = *(_DWORD *)(v16 + v24 + 40);
          v45 = v44 < v17;
          if (v44 != v17
            || (v46 = *(_QWORD *)(v16 + v24 + 48), v165 = v46 == v27, v45 = v46 < v27, !v165)
            || (v47 = *(_DWORD *)(v16 + v24 + 56), v165 = v47 == v28, v45 = v47 < v28, !v165))
          {
            if (!v45)
              goto LABEL_46;
LABEL_21:
            v24 += 40;
            continue;
          }
          break;
        }
        v48 = *(unsigned __int8 *)(v16 + v24 + 60);
        v49 = v48 >= v25;
        if (v48 != v25)
        {
LABEL_44:
          if (v49)
            goto LABEL_46;
          goto LABEL_21;
        }
        v50 = *(unsigned __int8 *)(v16 + v24 + 61);
        v51 = *(unsigned __int8 *)(v16 + 21);
        if (v50 != v29)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 62);
        v51 = *(unsigned __int8 *)(v16 + 22);
        if (v50 != v30)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 63);
        v51 = *(unsigned __int8 *)(v16 + 23);
        if (v50 != v31)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 64);
        v51 = *(unsigned __int8 *)(v16 + 24);
        if (v50 != v32)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 65);
        v51 = *(unsigned __int8 *)(v16 + 25);
        if (v50 != v33)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 66);
        v51 = *(unsigned __int8 *)(v16 + 26);
        if (v50 != v34)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 67);
        v51 = *(unsigned __int8 *)(v16 + 27);
        if (v50 != v35)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 68);
        v51 = *(unsigned __int8 *)(v16 + 28);
        if (v50 != v36)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 69);
        v51 = *(unsigned __int8 *)(v16 + 29);
        if (v50 != v37)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 70);
        v51 = *(unsigned __int8 *)(v16 + 30);
        if (v50 != v38)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 71);
        v51 = *(unsigned __int8 *)(v16 + 31);
        if (v50 != v39)
          goto LABEL_43;
        v50 = *(unsigned __int8 *)(v16 + v24 + 72);
        v51 = *(unsigned __int8 *)(v16 + 32);
        if (v50 != v40
          || (v50 = *(unsigned __int8 *)(v16 + v24 + 73), v51 = *(unsigned __int8 *)(v16 + 33), v50 != v41)
          || (v50 = *(unsigned __int8 *)(v16 + v24 + 74), v51 = *(unsigned __int8 *)(v16 + 34), v50 != v42)
          || (v50 = *(unsigned __int8 *)(v16 + v24 + 75), v51 = *(unsigned __int8 *)(v16 + 35), v50 != v43))
        {
LABEL_43:
          v49 = v50 >= v51;
          goto LABEL_44;
        }
LABEL_46:
        v52 = v16 + v24 + 40;
        j = a2 - 40;
        if (v24)
        {
          while (1)
          {
            v54 = *(_DWORD *)j < v17;
            if (*(_DWORD *)j == v17
              && (v55 = *(_QWORD *)(j + 8), v165 = v55 == v27, v54 = v55 < v27, v165)
              && (v56 = *(_DWORD *)(j + 16), v165 = v56 == v28, v54 = v56 < v28, v165))
            {
              v57 = *(unsigned __int8 *)(j + 20);
              v58 = v57 >= v25;
              if (v57 == v25)
              {
                v59 = *(unsigned __int8 *)(j + 21);
                v60 = v29;
                if (v59 == v29)
                {
                  v59 = *(unsigned __int8 *)(j + 22);
                  v60 = v30;
                  if (v59 == v30)
                  {
                    v59 = *(unsigned __int8 *)(j + 23);
                    v60 = v31;
                    if (v59 == v31)
                    {
                      v59 = *(unsigned __int8 *)(j + 24);
                      v60 = v32;
                      if (v59 == v32)
                      {
                        v59 = *(unsigned __int8 *)(j + 25);
                        v60 = v33;
                        if (v59 == v33)
                        {
                          v59 = *(unsigned __int8 *)(j + 26);
                          v60 = v34;
                          if (v59 == v34)
                          {
                            v59 = *(unsigned __int8 *)(j + 27);
                            v60 = v35;
                            if (v59 == v35)
                            {
                              v59 = *(unsigned __int8 *)(j + 28);
                              v60 = v36;
                              if (v59 == v36)
                              {
                                v59 = *(unsigned __int8 *)(j + 29);
                                v60 = v37;
                                if (v59 == v37)
                                {
                                  v59 = *(unsigned __int8 *)(j + 30);
                                  v60 = v38;
                                  if (v59 == v38)
                                  {
                                    v59 = *(unsigned __int8 *)(j + 31);
                                    v60 = v39;
                                    if (v59 == v39)
                                    {
                                      v59 = *(unsigned __int8 *)(j + 32);
                                      v60 = v40;
                                      if (v59 == v40)
                                      {
                                        v59 = *(unsigned __int8 *)(j + 33);
                                        v60 = v41;
                                        if (v59 == v41)
                                        {
                                          v59 = *(unsigned __int8 *)(j + 34);
                                          v60 = v42;
                                          if (v59 == v42)
                                          {
                                            v59 = *(unsigned __int8 *)(j + 35);
                                            v60 = v43;
                                            if (v59 == v43)
                                              goto LABEL_50;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v58 = v59 >= v60;
              }
              if (!v58)
                goto LABEL_74;
            }
            else if (v54)
            {
              goto LABEL_74;
            }
LABEL_50:
            j -= 40;
          }
        }
        j = a2;
        if (v52 < a2)
        {
          for (j = a2 - 40; ; j -= 40)
          {
            v149 = *(_DWORD *)j < v17;
            if (*(_DWORD *)j == v17
              && (v150 = *(_QWORD *)(j + 8), v165 = v150 == v27, v149 = v150 < v27, v165)
              && (v151 = *(_DWORD *)(j + 16), v165 = v151 == v28, v149 = v151 < v28, v165))
            {
              v152 = *(unsigned __int8 *)(j + 20);
              if (v152 == v25)
              {
                v153 = *(unsigned __int8 *)(j + 21);
                v154 = v29;
                if (v153 != v29)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 22);
                v154 = v30;
                if (v153 != v30)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 23);
                v154 = v31;
                if (v153 != v31)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 24);
                v154 = v32;
                if (v153 != v32)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 25);
                v154 = v33;
                if (v153 != v33)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 26);
                v154 = v34;
                if (v153 != v34)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 27);
                v154 = v35;
                if (v153 != v35)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 28);
                v154 = v36;
                if (v153 != v36)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 29);
                v154 = v37;
                if (v153 != v37)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 30);
                v154 = v38;
                if (v153 != v38)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 31);
                v154 = v39;
                if (v153 != v39)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 32);
                v154 = v40;
                if (v153 != v40)
                  goto LABEL_336;
                v153 = *(unsigned __int8 *)(j + 33);
                v154 = v41;
                if (v153 == v41
                  && (v153 = *(unsigned __int8 *)(j + 34), v154 = v42, v153 == v42)
                  && (v153 = *(unsigned __int8 *)(j + 35), v154 = v43, v153 == v43))
                {
                  if (v52 >= j)
                    break;
                }
                else
                {
LABEL_336:
                  if (v52 >= j || v153 < v154)
                    break;
                }
              }
              else if (v52 >= j || v152 < v25)
              {
                break;
              }
            }
            else if (v52 >= j || v149)
            {
              break;
            }
          }
        }
LABEL_74:
        if (v52 >= j)
        {
          i = v52;
        }
        else
        {
          v61 = *(_DWORD *)j;
          i = v52;
          v62 = j;
          do
          {
            *(_DWORD *)i = v61;
            *(_DWORD *)v62 = v44;
            v63 = *(_QWORD *)(i + 8);
            *(_QWORD *)(i + 8) = *(_QWORD *)(v62 + 8);
            *(_QWORD *)(v62 + 8) = v63;
            LODWORD(v63) = *(_DWORD *)(i + 16);
            *(_DWORD *)(i + 16) = *(_DWORD *)(v62 + 16);
            *(_DWORD *)(v62 + 16) = v63;
            v64 = *(_OWORD *)(i + 20);
            *(_OWORD *)(i + 20) = *(_OWORD *)(v62 + 20);
            *(_OWORD *)(v62 + 20) = v64;
            do
            {
              while (1)
              {
                v65 = *(_DWORD *)(i + 40);
                i += 40;
                v44 = v65;
                v66 = v65 < v17;
                if (v65 != v17)
                  break;
                v67 = *(_QWORD *)(i + 8);
                v165 = v67 == v27;
                v66 = v67 < v27;
                if (!v165)
                  break;
                v68 = *(_DWORD *)(i + 16);
                v165 = v68 == v28;
                v66 = v68 < v28;
                if (!v165)
                  break;
                v69 = *(unsigned __int8 *)(i + 20);
                if (v69 == v25)
                {
                  v70 = *(unsigned __int8 *)(i + 21);
                  if (v70 == v29)
                  {
                    v71 = *(unsigned __int8 *)(i + 22);
                    v72 = v30;
                    if (v71 == v30)
                    {
                      v71 = *(unsigned __int8 *)(i + 23);
                      v72 = v31;
                      if (v71 == v31)
                      {
                        v71 = *(unsigned __int8 *)(i + 24);
                        v72 = v32;
                        if (v71 == v32)
                        {
                          v71 = *(unsigned __int8 *)(i + 25);
                          v72 = v33;
                          if (v71 == v33)
                          {
                            v71 = *(unsigned __int8 *)(i + 26);
                            v72 = v34;
                            if (v71 == v34)
                            {
                              v71 = *(unsigned __int8 *)(i + 27);
                              v72 = v35;
                              if (v71 == v35)
                              {
                                v71 = *(unsigned __int8 *)(i + 28);
                                v72 = v36;
                                if (v71 == v36)
                                {
                                  v71 = *(unsigned __int8 *)(i + 29);
                                  v72 = v37;
                                  if (v71 == v37)
                                  {
                                    v71 = *(unsigned __int8 *)(i + 30);
                                    v72 = v38;
                                    if (v71 == v38)
                                    {
                                      v71 = *(unsigned __int8 *)(i + 31);
                                      v72 = v39;
                                      if (v71 == v39)
                                      {
                                        v71 = *(unsigned __int8 *)(i + 32);
                                        v72 = v40;
                                        if (v71 == v40)
                                        {
                                          v71 = *(unsigned __int8 *)(i + 33);
                                          v72 = v41;
                                          if (v71 == v41)
                                          {
                                            v71 = *(unsigned __int8 *)(i + 34);
                                            v72 = v42;
                                            if (v71 == v42)
                                            {
                                              v71 = *(unsigned __int8 *)(i + 35);
                                              v72 = v43;
                                              if (v71 == v43)
                                              {
                                                v44 = v17;
                                                goto LABEL_109;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    if (v71 >= v72)
                    {
                      v44 = v17;
                      goto LABEL_109;
                    }
                  }
                  else if (v70 >= v29)
                  {
                    v44 = v17;
                    goto LABEL_109;
                  }
                }
                else if (v69 >= v25)
                {
                  v44 = v17;
                  goto LABEL_109;
                }
              }
            }
            while (v66);
            while (1)
            {
              while (1)
              {
LABEL_109:
                while (1)
                {
                  v73 = *(_DWORD *)(v62 - 40);
                  v62 -= 40;
                  v61 = v73;
                  v74 = v73 < v17;
                  if (v73 == v17)
                  {
                    v75 = *(_QWORD *)(v62 + 8);
                    v165 = v75 == v27;
                    v74 = v75 < v27;
                    if (v165)
                    {
                      v76 = *(_DWORD *)(v62 + 16);
                      v165 = v76 == v28;
                      v74 = v76 < v28;
                      if (v165)
                        break;
                    }
                  }
                  if (v74)
                    goto LABEL_77;
                }
                v77 = *(unsigned __int8 *)(v62 + 20);
                if (v77 == v25)
                  break;
                if (v77 < v25)
                  goto LABEL_76;
              }
              v78 = *(unsigned __int8 *)(v62 + 21);
              v79 = v29;
              if (v78 != v29)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 22);
              v79 = v30;
              if (v78 != v30)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 23);
              v79 = v31;
              if (v78 != v31)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 24);
              v79 = v32;
              if (v78 != v32)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 25);
              v79 = v33;
              if (v78 != v33)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 26);
              v79 = v34;
              if (v78 != v34)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 27);
              v79 = v35;
              if (v78 != v35)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 28);
              v79 = v36;
              if (v78 != v36)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 29);
              v79 = v37;
              if (v78 != v37)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 30);
              v79 = v38;
              if (v78 != v38)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 31);
              v79 = v39;
              if (v78 != v39)
                goto LABEL_130;
              v78 = *(unsigned __int8 *)(v62 + 32);
              v79 = v40;
              if (v78 == v40)
              {
                v78 = *(unsigned __int8 *)(v62 + 33);
                v79 = v41;
                if (v78 == v41)
                {
                  v78 = *(unsigned __int8 *)(v62 + 34);
                  v79 = v42;
                  if (v78 == v42)
                  {
                    v78 = *(unsigned __int8 *)(v62 + 35);
                    v79 = v43;
                    if (v78 == v43)
                      continue;
                  }
                }
              }
LABEL_130:
              if (v78 < v79)
                break;
            }
LABEL_76:
            v61 = v17;
LABEL_77:
            ;
          }
          while (i < v62);
        }
        if (i - 40 != v368)
        {
          *(_DWORD *)v368 = *(_DWORD *)(i - 40);
          *(_QWORD *)(v368 + 8) = *(_QWORD *)(i - 32);
          *(_DWORD *)(v368 + 16) = *(_DWORD *)(i - 24);
          *v26 = *(_OWORD *)(i - 20);
        }
        *(_DWORD *)(i - 40) = v17;
        *(_QWORD *)(i - 32) = v27;
        *(_DWORD *)(i - 24) = v28;
        *(_BYTE *)(i - 20) = v25;
        *(_BYTE *)(i - 19) = v29;
        *(_BYTE *)(i - 18) = v30;
        *(_BYTE *)(i - 17) = v31;
        *(_BYTE *)(i - 16) = v32;
        *(_BYTE *)(i - 15) = v33;
        *(_BYTE *)(i - 14) = v34;
        *(_BYTE *)(i - 13) = v35;
        *(_BYTE *)(i - 12) = v36;
        *(_BYTE *)(i - 11) = v37;
        *(_BYTE *)(i - 10) = v38;
        *(_BYTE *)(i - 9) = v39;
        *(_BYTE *)(i - 8) = v40;
        *(_BYTE *)(i - 7) = v41;
        *(_BYTE *)(i - 6) = v42;
        *(_BYTE *)(i - 5) = v43;
        v6 = a2;
        if (v52 < j)
        {
LABEL_140:
          result = sub_2238A1418(v368, i - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v80 = sub_2238A3DA8(v368, i - 40);
        result = sub_2238A3DA8(i, a2);
        if (!(_DWORD)result)
        {
          if (v80)
            continue;
          goto LABEL_140;
        }
        a2 = i - 40;
        if (!v80)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_2238A3974(uint64_t result, int *a2, int *a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  int v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;

  v5 = result;
  v6 = *a2;
  v7 = *a2 < *(_DWORD *)result;
  if (*a2 != *(_DWORD *)result)
    goto LABEL_8;
  v8 = *((_QWORD *)a2 + 1);
  v9 = *(_QWORD *)(result + 8);
  v10 = v8 == v9;
  v7 = v8 < v9;
  if (!v10 || (v11 = a2[4], v12 = *(_DWORD *)(result + 16), v10 = v11 == v12, v7 = v11 < v12, !v10))
  {
LABEL_8:
    if (v7)
    {
      v13 = *a3;
      v14 = *a3 < v6;
      if (*a3 != v6)
        goto LABEL_35;
      goto LABEL_10;
    }
LABEL_16:
    v19 = *a3;
    v20 = *a3 < v6;
    if (*a3 != v6)
      goto LABEL_23;
    v21 = *((_QWORD *)a3 + 1);
    v22 = *((_QWORD *)a2 + 1);
    v10 = v21 == v22;
    v20 = v21 < v22;
    if (!v10)
      goto LABEL_23;
    v23 = a3[4];
    v24 = a2[4];
    v10 = v23 == v24;
    v20 = v23 < v24;
    if (v10)
    {
      v25 = (unsigned __int8 *)(a3 + 5);
      result = sub_22319835C((unsigned __int8 *)a3 + 20, (unsigned __int8 *)a2 + 20);
      if ((result & 0x80) == 0)
      {
        v26 = (unsigned __int8 *)(a2 + 5);
        return sub_22319835C(v26, v25);
      }
      v6 = *a2;
      v19 = *a3;
    }
    else
    {
LABEL_23:
      if (!v20)
        return result;
    }
    *a2 = v19;
    *a3 = v6;
    v27 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v27;
    LODWORD(v27) = a2[4];
    a2[4] = a3[4];
    a3[4] = v27;
    v25 = (unsigned __int8 *)(a2 + 5);
    v28 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a2 + 5) = *(_OWORD *)(a3 + 5);
    *(_OWORD *)(a3 + 5) = v28;
    v29 = *a2;
    v30 = *(_DWORD *)v5;
    v31 = *a2 < *(_DWORD *)v5;
    if (*a2 != *(_DWORD *)v5)
      goto LABEL_32;
    v32 = *((_QWORD *)a2 + 1);
    v33 = *(_QWORD *)(v5 + 8);
    v10 = v32 == v33;
    v31 = v32 < v33;
    if (!v10 || (v34 = a2[4], v35 = *(_DWORD *)(v5 + 16), v10 = v34 == v35, v31 = v34 < v35, !v10))
    {
LABEL_32:
      if (!v31)
        return result;
LABEL_33:
      *(_DWORD *)v5 = v29;
      *a2 = v30;
      v36 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v36;
      LODWORD(v36) = *(_DWORD *)(v5 + 16);
      *(_DWORD *)(v5 + 16) = a2[4];
      a2[4] = v36;
      v37 = *(_OWORD *)(v5 + 20);
      *(_OWORD *)(v5 + 20) = *(_OWORD *)v25;
      *(_OWORD *)v25 = v37;
      return result;
    }
    result = sub_22319835C((unsigned __int8 *)a2 + 20, (unsigned __int8 *)(v5 + 20));
    if ((result & 0x80) != 0)
    {
      v30 = *(_DWORD *)v5;
      v29 = *a2;
      goto LABEL_33;
    }
    v26 = (unsigned __int8 *)(v5 + 20);
    return sub_22319835C(v26, v25);
  }
  result = sub_22319835C((unsigned __int8 *)a2 + 20, (unsigned __int8 *)(result + 20));
  if ((result & 0x80) == 0)
  {
    result = sub_22319835C((unsigned __int8 *)(v5 + 20), (unsigned __int8 *)a2 + 20);
    v6 = *a2;
    goto LABEL_16;
  }
  v6 = *a2;
  v13 = *a3;
  v14 = *a3 < *a2;
  if (*a3 != *a2)
    goto LABEL_35;
LABEL_10:
  v15 = *((_QWORD *)a3 + 1);
  v16 = *((_QWORD *)a2 + 1);
  v10 = v15 == v16;
  v14 = v15 < v16;
  if (!v10 || (v17 = a3[4], v18 = a2[4], v10 = v17 == v18, v14 = v17 < v18, !v10))
  {
LABEL_35:
    if (v14)
    {
LABEL_36:
      v38 = *(_DWORD *)v5;
      *(_DWORD *)v5 = v13;
      *a3 = v38;
      v39 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v39;
      LODWORD(v39) = *(_DWORD *)(v5 + 16);
      *(_DWORD *)(v5 + 16) = a3[4];
      a3[4] = v39;
      v40 = *(_OWORD *)(v5 + 20);
      *(_OWORD *)(v5 + 20) = *(_OWORD *)(a3 + 5);
      goto LABEL_46;
    }
    goto LABEL_37;
  }
  result = sub_22319835C((unsigned __int8 *)a3 + 20, (unsigned __int8 *)a2 + 20);
  if ((result & 0x80) != 0)
  {
    v13 = *a3;
    goto LABEL_36;
  }
  result = sub_22319835C((unsigned __int8 *)a2 + 20, (unsigned __int8 *)a3 + 20);
  v6 = *a2;
LABEL_37:
  v41 = *(_DWORD *)v5;
  *(_DWORD *)v5 = v6;
  *a2 = v41;
  v42 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v42;
  LODWORD(v42) = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = a2[4];
  a2[4] = v42;
  v43 = (__int128 *)(a2 + 5);
  v44 = *(_OWORD *)(v5 + 20);
  *(_OWORD *)(v5 + 20) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a2 + 5) = v44;
  v45 = *a3;
  v46 = *a2;
  v47 = *a3 < *a2;
  if (*a3 != *a2)
    goto LABEL_44;
  v48 = *((_QWORD *)a3 + 1);
  v49 = *((_QWORD *)a2 + 1);
  v10 = v48 == v49;
  v47 = v48 < v49;
  if (!v10)
    goto LABEL_44;
  v50 = a3[4];
  v51 = a2[4];
  v10 = v50 == v51;
  v47 = v50 < v51;
  if (v10)
  {
    result = sub_22319835C((unsigned __int8 *)a3 + 20, (unsigned __int8 *)a2 + 20);
    if ((result & 0x80) == 0)
      return sub_22319835C((unsigned __int8 *)a2 + 20, (unsigned __int8 *)a3 + 20);
    v46 = *a2;
    v45 = *a3;
  }
  else
  {
LABEL_44:
    if (!v47)
      return result;
  }
  *a2 = v45;
  *a3 = v46;
  v52 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v52;
  LODWORD(v52) = a2[4];
  a2[4] = a3[4];
  a3[4] = v52;
  v40 = *v43;
  *v43 = *(_OWORD *)(a3 + 5);
LABEL_46:
  *(_OWORD *)(a3 + 5) = v40;
  return result;
}

BOOL sub_2238A3DA8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 40);
      v7 = *(_DWORD *)a1;
      v8 = v6 < *(_DWORD *)a1;
      if (v6 == *(_DWORD *)a1)
      {
        v9 = *(_QWORD *)(a2 - 32);
        v10 = *(_QWORD *)(a1 + 8);
        v11 = v9 == v10;
        v8 = v9 < v10;
        if (v11)
        {
          v12 = *(_DWORD *)(a2 - 24);
          v13 = *(_DWORD *)(a1 + 16);
          v11 = v12 == v13;
          v8 = v12 < v13;
          if (v11)
          {
            if ((sub_22319835C((unsigned __int8 *)(a2 - 20), (unsigned __int8 *)(a1 + 20)) & 0x80) == 0)
            {
              sub_22319835C((unsigned __int8 *)(a1 + 20), (unsigned __int8 *)(a2 - 20));
              return 1;
            }
            v7 = *(_DWORD *)a1;
            v6 = *(_DWORD *)(a2 - 40);
            goto LABEL_59;
          }
        }
      }
      if (v8)
      {
LABEL_59:
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 40) = v7;
        v57 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 32);
        *(_QWORD *)(a2 - 32) = v57;
        LODWORD(v57) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 24);
        *(_DWORD *)(a2 - 24) = v57;
        v58 = *(_OWORD *)(a1 + 20);
        *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a2 - 20) = v58;
        return 1;
      }
      return result;
    case 3uLL:
      sub_2238A3974(a1, (int *)(a1 + 40), (int *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_2238A42F0(a1, a1 + 40, a1 + 80, (int *)(a2 - 40));
      return 1;
    case 5uLL:
      sub_2238A45C4(a1, a1 + 40, a1 + 80, a1 + 120, (int *)(a2 - 40));
      return 1;
    default:
      v14 = a1 + 80;
      sub_2238A3974(a1, (int *)(a1 + 40), (int *)(a1 + 80));
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      while (2)
      {
        v18 = *(_DWORD *)v15;
        v19 = *(_DWORD *)v14;
        v20 = *(_DWORD *)v15 < *(_DWORD *)v14;
        if (*(_DWORD *)v15 != *(_DWORD *)v14)
          goto LABEL_21;
        v21 = *(_QWORD *)(v15 + 8);
        v22 = *(_QWORD *)(v14 + 8);
        v11 = v21 == v22;
        v20 = v21 < v22;
        if (!v11)
          goto LABEL_21;
        v23 = *(_DWORD *)(v15 + 16);
        v24 = *(_DWORD *)(v14 + 16);
        v11 = v23 == v24;
        v20 = v23 < v24;
        if (v11)
        {
          if ((sub_22319835C((unsigned __int8 *)(v15 + 20), (unsigned __int8 *)(v14 + 20)) & 0x80) == 0)
          {
            sub_22319835C((unsigned __int8 *)(v14 + 20), (unsigned __int8 *)(v15 + 20));
            goto LABEL_13;
          }
          v18 = *(_DWORD *)v15;
          v19 = *(_DWORD *)v14;
        }
        else
        {
LABEL_21:
          if (!v20)
            goto LABEL_13;
        }
        v25 = *(_QWORD *)(v15 + 8);
        v26 = *(_DWORD *)(v15 + 16);
        v27 = *(unsigned __int8 *)(v15 + 20);
        v28 = *(unsigned __int8 *)(v15 + 21);
        v29 = *(unsigned __int8 *)(v15 + 22);
        v30 = *(unsigned __int8 *)(v15 + 23);
        v31 = *(unsigned __int8 *)(v15 + 24);
        v32 = *(unsigned __int8 *)(v15 + 25);
        v33 = *(unsigned __int8 *)(v15 + 26);
        v34 = *(unsigned __int8 *)(v15 + 27);
        v35 = *(unsigned __int8 *)(v15 + 28);
        v36 = *(unsigned __int8 *)(v15 + 29);
        v37 = *(unsigned __int8 *)(v15 + 30);
        v38 = *(unsigned __int8 *)(v15 + 31);
        v39 = *(unsigned __int8 *)(v15 + 32);
        v40 = *(unsigned __int8 *)(v15 + 33);
        v41 = *(unsigned __int8 *)(v15 + 34);
        v42 = *(unsigned __int8 *)(v15 + 35);
        *(_DWORD *)v15 = v19;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
        *(_DWORD *)(v15 + 16) = *(_DWORD *)(v14 + 16);
        v43 = (_BYTE *)(v14 + 20);
        *(_OWORD *)(v15 + 20) = *(_OWORD *)(v14 + 20);
        if (v14 == a1)
        {
          v14 = a1;
        }
        else
        {
          v59 = v37;
          v60 = v36;
          v61 = v35;
          v62 = v34;
          v44 = v16;
          do
          {
            v45 = a1 + v44;
            v46 = *(_DWORD *)(a1 + v44 + 40);
            v47 = v18 < v46;
            if (v18 == v46
              && (v48 = *(_QWORD *)(v45 + 48), v11 = v25 == v48, v47 = v25 < v48, v11)
              && (v49 = *(_DWORD *)(a1 + v44 + 56), v11 = v26 == v49, v47 = v26 < v49, v11))
            {
              v50 = *(unsigned __int8 *)(a1 + v44 + 60);
              v51 = v27 >= v50;
              if (v27 == v50)
              {
                v52 = *(unsigned __int8 *)(a1 + v44 + 61);
                v53 = v28;
                if (v28 == v52)
                {
                  v52 = *(unsigned __int8 *)(a1 + v44 + 62);
                  v53 = v29;
                  if (v29 == v52)
                  {
                    v52 = *(unsigned __int8 *)(a1 + v44 + 63);
                    v53 = v30;
                    if (v30 == v52)
                    {
                      v52 = *(unsigned __int8 *)(a1 + v44 + 64);
                      v53 = v31;
                      if (v31 == v52)
                      {
                        v52 = *(unsigned __int8 *)(a1 + v44 + 65);
                        v53 = v32;
                        if (v32 == v52)
                        {
                          v52 = *(unsigned __int8 *)(a1 + v44 + 66);
                          v53 = v33;
                          if (v33 == v52)
                          {
                            v52 = *(unsigned __int8 *)(a1 + v44 + 67);
                            v53 = v62;
                            if (v62 == v52)
                            {
                              v52 = *(unsigned __int8 *)(a1 + v44 + 68);
                              v53 = v61;
                              if (v61 == v52)
                              {
                                v52 = *(unsigned __int8 *)(a1 + v44 + 69);
                                v53 = v60;
                                if (v60 == v52)
                                {
                                  v52 = *(unsigned __int8 *)(a1 + v44 + 70);
                                  v53 = v59;
                                  if (v59 == v52)
                                  {
                                    v52 = *(unsigned __int8 *)(a1 + v44 + 71);
                                    v53 = v38;
                                    if (v38 == v52)
                                    {
                                      v52 = *(unsigned __int8 *)(a1 + v44 + 72);
                                      v53 = v39;
                                      if (v39 == v52)
                                      {
                                        v52 = *(unsigned __int8 *)(a1 + v44 + 73);
                                        v53 = v40;
                                        if (v40 == v52)
                                        {
                                          v52 = *(unsigned __int8 *)(a1 + v44 + 74);
                                          v53 = v41;
                                          if (v41 == v52)
                                          {
                                            v52 = *(unsigned __int8 *)(a1 + v44 + 75);
                                            v53 = v42;
                                            if (v42 == v52)
                                              goto LABEL_53;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v54 = v26;
                v55 = v25;
                if (v53 >= v52)
                {
                  v43 = (_BYTE *)(a1 + v44 + 100);
                  v14 = a1 + v44 + 80;
                  goto LABEL_53;
                }
              }
              else
              {
                v54 = v26;
                v55 = v25;
                if (v51)
                  goto LABEL_53;
              }
            }
            else
            {
              if (!v47)
                goto LABEL_53;
              v55 = *(_QWORD *)(a1 + v44 + 48);
              v54 = *(_DWORD *)(a1 + v44 + 56);
            }
            v43 = (_BYTE *)(v14 - 20);
            v14 -= 40;
            *(_DWORD *)(v45 + 80) = v46;
            v56 = a1 + v44;
            *(_QWORD *)(v56 + 88) = v55;
            *(_DWORD *)(v56 + 96) = v54;
            *(_OWORD *)(v56 + 100) = *(_OWORD *)(a1 + v44 + 60);
            v44 -= 40;
          }
          while (v44 != -80);
          v43 = (_BYTE *)(a1 + 20);
          v14 = a1;
LABEL_53:
          LOBYTE(v35) = v61;
          LOBYTE(v34) = v62;
          LOBYTE(v37) = v59;
          LOBYTE(v36) = v60;
        }
        *(_DWORD *)v14 = v18;
        *(_QWORD *)(v14 + 8) = v25;
        *(_DWORD *)(v14 + 16) = v26;
        *v43 = v27;
        *(_BYTE *)(v14 + 21) = v28;
        *(_BYTE *)(v14 + 22) = v29;
        *(_BYTE *)(v14 + 23) = v30;
        *(_BYTE *)(v14 + 24) = v31;
        *(_BYTE *)(v14 + 25) = v32;
        *(_BYTE *)(v14 + 26) = v33;
        *(_BYTE *)(v14 + 27) = v34;
        *(_BYTE *)(v14 + 28) = v35;
        *(_BYTE *)(v14 + 29) = v36;
        *(_BYTE *)(v14 + 30) = v37;
        *(_BYTE *)(v14 + 31) = v38;
        *(_BYTE *)(v14 + 32) = v39;
        *(_BYTE *)(v14 + 33) = v40;
        *(_BYTE *)(v14 + 34) = v41;
        ++v17;
        *(_BYTE *)(v14 + 35) = v42;
        if (v17 != 8)
        {
LABEL_13:
          v14 = v15;
          v16 += 40;
          v15 += 40;
          if (v15 == a2)
            return 1;
          continue;
        }
        return v15 + 40 == a2;
      }
  }
}

uint64_t sub_2238A42F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  int v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  __int128 v39;

  result = sub_2238A3974(a1, (int *)a2, (int *)a3);
  v9 = *a4;
  v10 = *(_DWORD *)a3;
  v11 = *a4 < *(_DWORD *)a3;
  if (*a4 != *(_DWORD *)a3)
    goto LABEL_8;
  v12 = *((_QWORD *)a4 + 1);
  v13 = *(_QWORD *)(a3 + 8);
  v14 = v12 == v13;
  v11 = v12 < v13;
  if (!v14)
    goto LABEL_8;
  v15 = a4[4];
  v16 = *(_DWORD *)(a3 + 16);
  v14 = v15 == v16;
  v11 = v15 < v16;
  if (v14)
  {
    v17 = (unsigned __int8 *)(a4 + 5);
    result = sub_22319835C((unsigned __int8 *)a4 + 20, (unsigned __int8 *)(a3 + 20));
    if ((result & 0x80) == 0)
    {
      v18 = (unsigned __int8 *)(a3 + 20);
      return sub_22319835C(v18, v17);
    }
    v10 = *(_DWORD *)a3;
    v9 = *a4;
  }
  else
  {
LABEL_8:
    if (!v11)
      return result;
  }
  *(_DWORD *)a3 = v9;
  *a4 = v10;
  v19 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = v19;
  LODWORD(v19) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = a4[4];
  a4[4] = v19;
  v17 = (unsigned __int8 *)(a3 + 20);
  v20 = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a3 + 20) = *(_OWORD *)(a4 + 5);
  *(_OWORD *)(a4 + 5) = v20;
  v21 = *(_DWORD *)a3;
  v22 = *(_DWORD *)a2;
  v23 = *(_DWORD *)a3 < *(_DWORD *)a2;
  if (*(_DWORD *)a3 == *(_DWORD *)a2)
  {
    v24 = *(_QWORD *)(a3 + 8);
    v25 = *(_QWORD *)(a2 + 8);
    v14 = v24 == v25;
    v23 = v24 < v25;
    if (v14)
    {
      v26 = *(_DWORD *)(a3 + 16);
      v27 = *(_DWORD *)(a2 + 16);
      v14 = v26 == v27;
      v23 = v26 < v27;
      if (v14)
      {
        result = sub_22319835C((unsigned __int8 *)(a3 + 20), (unsigned __int8 *)(a2 + 20));
        if ((result & 0x80) != 0)
        {
          v22 = *(_DWORD *)a2;
          v21 = *(_DWORD *)a3;
          goto LABEL_18;
        }
        v18 = (unsigned __int8 *)(a2 + 20);
        return sub_22319835C(v18, v17);
      }
    }
  }
  if (!v23)
    return result;
LABEL_18:
  *(_DWORD *)a2 = v21;
  *(_DWORD *)a3 = v22;
  v28 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v28;
  LODWORD(v28) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v28;
  v29 = (_OWORD *)(a2 + 20);
  v30 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)v17;
  *(_OWORD *)v17 = v30;
  v31 = *(_DWORD *)a2;
  v32 = *(_DWORD *)a1;
  v33 = *(_DWORD *)a2 < *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1)
    goto LABEL_25;
  v34 = *(_QWORD *)(a2 + 8);
  v35 = *(_QWORD *)(a1 + 8);
  v14 = v34 == v35;
  v33 = v34 < v35;
  if (!v14)
    goto LABEL_25;
  v36 = *(_DWORD *)(a2 + 16);
  v37 = *(_DWORD *)(a1 + 16);
  v14 = v36 == v37;
  v33 = v36 < v37;
  if (v14)
  {
    result = sub_22319835C((unsigned __int8 *)(a2 + 20), (unsigned __int8 *)(a1 + 20));
    if ((result & 0x80) == 0)
      return sub_22319835C((unsigned __int8 *)(a1 + 20), (unsigned __int8 *)(a2 + 20));
    v32 = *(_DWORD *)a1;
    v31 = *(_DWORD *)a2;
  }
  else
  {
LABEL_25:
    if (!v33)
      return result;
  }
  *(_DWORD *)a1 = v31;
  *(_DWORD *)a2 = v32;
  v38 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v38;
  LODWORD(v38) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v38;
  v39 = *(_OWORD *)(a1 + 20);
  *(_OWORD *)(a1 + 20) = *v29;
  *v29 = v39;
  return result;
}

uint64_t sub_2238A45C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  int v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  int v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  __int128 v52;

  result = sub_2238A42F0(a1, a2, a3, (int *)a4);
  v11 = *a5;
  v12 = *(_DWORD *)a4;
  v13 = *a5 < *(_DWORD *)a4;
  if (*a5 != *(_DWORD *)a4)
    goto LABEL_8;
  v14 = *((_QWORD *)a5 + 1);
  v15 = *(_QWORD *)(a4 + 8);
  v16 = v14 == v15;
  v13 = v14 < v15;
  if (!v16)
    goto LABEL_8;
  v17 = a5[4];
  v18 = *(_DWORD *)(a4 + 16);
  v16 = v17 == v18;
  v13 = v17 < v18;
  if (v16)
  {
    v19 = (unsigned __int8 *)(a5 + 5);
    result = sub_22319835C((unsigned __int8 *)a5 + 20, (unsigned __int8 *)(a4 + 20));
    if ((result & 0x80) == 0)
    {
      v20 = (unsigned __int8 *)(a4 + 20);
      goto LABEL_16;
    }
    v12 = *(_DWORD *)a4;
    v11 = *a5;
  }
  else
  {
LABEL_8:
    if (!v13)
      return result;
  }
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  v21 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = *((_QWORD *)a5 + 1);
  *((_QWORD *)a5 + 1) = v21;
  LODWORD(v21) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = a5[4];
  a5[4] = v21;
  v19 = (unsigned __int8 *)(a4 + 20);
  v22 = *(_OWORD *)(a4 + 20);
  *(_OWORD *)(a4 + 20) = *(_OWORD *)(a5 + 5);
  *(_OWORD *)(a5 + 5) = v22;
  v23 = *(_DWORD *)a4;
  v24 = *(_DWORD *)a3;
  v25 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3)
  {
    v26 = *(_QWORD *)(a4 + 8);
    v27 = *(_QWORD *)(a3 + 8);
    v16 = v26 == v27;
    v25 = v26 < v27;
    if (v16)
    {
      v28 = *(_DWORD *)(a4 + 16);
      v29 = *(_DWORD *)(a3 + 16);
      v16 = v28 == v29;
      v25 = v28 < v29;
      if (v16)
      {
        result = sub_22319835C((unsigned __int8 *)(a4 + 20), (unsigned __int8 *)(a3 + 20));
        if ((result & 0x80) != 0)
        {
          v24 = *(_DWORD *)a3;
          v23 = *(_DWORD *)a4;
          goto LABEL_19;
        }
        v20 = (unsigned __int8 *)(a3 + 20);
LABEL_16:
        v30 = v19;
        return sub_22319835C(v20, v30);
      }
    }
  }
  if (!v25)
    return result;
LABEL_19:
  *(_DWORD *)a3 = v23;
  *(_DWORD *)a4 = v24;
  v31 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v31;
  LODWORD(v31) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v31;
  v32 = (_OWORD *)(a3 + 20);
  v33 = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a3 + 20) = *(_OWORD *)v19;
  *(_OWORD *)v19 = v33;
  v34 = *(_DWORD *)a3;
  v35 = *(_DWORD *)a2;
  v36 = *(_DWORD *)a3 < *(_DWORD *)a2;
  if (*(_DWORD *)a3 == *(_DWORD *)a2)
  {
    v37 = *(_QWORD *)(a3 + 8);
    v38 = *(_QWORD *)(a2 + 8);
    v16 = v37 == v38;
    v36 = v37 < v38;
    if (v16)
    {
      v39 = *(_DWORD *)(a3 + 16);
      v40 = *(_DWORD *)(a2 + 16);
      v16 = v39 == v40;
      v36 = v39 < v40;
      if (v16)
      {
        result = sub_22319835C((unsigned __int8 *)(a3 + 20), (unsigned __int8 *)(a2 + 20));
        if ((result & 0x80) != 0)
        {
          v35 = *(_DWORD *)a2;
          v34 = *(_DWORD *)a3;
          goto LABEL_27;
        }
        v20 = (unsigned __int8 *)(a2 + 20);
        v30 = (unsigned __int8 *)(a3 + 20);
        return sub_22319835C(v20, v30);
      }
    }
  }
  if (!v36)
    return result;
LABEL_27:
  *(_DWORD *)a2 = v34;
  *(_DWORD *)a3 = v35;
  v41 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v41;
  LODWORD(v41) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v41;
  v42 = (_OWORD *)(a2 + 20);
  v43 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a2 + 20) = *v32;
  *v32 = v43;
  v44 = *(_DWORD *)a2;
  v45 = *(_DWORD *)a1;
  v46 = *(_DWORD *)a2 < *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1)
    goto LABEL_34;
  v47 = *(_QWORD *)(a2 + 8);
  v48 = *(_QWORD *)(a1 + 8);
  v16 = v47 == v48;
  v46 = v47 < v48;
  if (!v16 || (v49 = *(_DWORD *)(a2 + 16), v50 = *(_DWORD *)(a1 + 16), v16 = v49 == v50, v46 = v49 < v50, !v16))
  {
LABEL_34:
    if (!v46)
      return result;
    goto LABEL_35;
  }
  result = sub_22319835C((unsigned __int8 *)(a2 + 20), (unsigned __int8 *)(a1 + 20));
  if ((result & 0x80) == 0)
  {
    v20 = (unsigned __int8 *)(a1 + 20);
    v30 = (unsigned __int8 *)(a2 + 20);
    return sub_22319835C(v20, v30);
  }
  v45 = *(_DWORD *)a1;
  v44 = *(_DWORD *)a2;
LABEL_35:
  *(_DWORD *)a1 = v44;
  *(_DWORD *)a2 = v45;
  v51 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v51;
  LODWORD(v51) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v51;
  v52 = *(_OWORD *)(a1 + 20);
  *(_OWORD *)(a1 + 20) = *v42;
  *v42 = v52;
  return result;
}

uint64_t sub_2238A4954(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  float v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(&v11, *(_QWORD *)(a1 + 8), 1);
    goto LABEL_11;
  }
LABEL_10:
  v11 = 0;
LABEL_11:
  v12[0] = a1;
  v12[1] = a2;
  v9 = sub_2238A4A44(v12);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)result + 8))(result, v9);
  return result;
}

void sub_2238A4A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

float sub_2238A4A44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  float result;
  int v4;
  int v5;
  BOOL v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  BOOL v11;
  int v12;
  int i;
  _DWORD *v14;
  int v15;

  v1 = *a1;
  v2 = *(unsigned int *)(*a1 + 72);
  if ((_DWORD)v2 == 1)
  {
    sub_2238A4B6C((uint64_t)a1);
    return result;
  }
  v5 = *(_DWORD *)(v1 + 64);
  v4 = *(_DWORD *)(v1 + 68);
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = (_DWORD *)a1[1];
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v1 + 76);
    v10 = *(_DWORD **)(v1 + 32);
    if (*(_BYTE *)(v1 + 80))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v1 + 8) + 88))(*(_QWORD *)(v1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v10 = *(_DWORD **)(v1 + 32);
    }
    v12 = v5 - 1;
    if (v8)
    {
      if (v5 == 1)
      {
        do
        {
          *v10 = *v7;
          v10 += v9;
          --v8;
        }
        while (v8);
LABEL_22:
        result = *(float *)v7;
        *v10 = *v7;
        return result;
      }
      for (i = 0; i != v8; ++i)
      {
        v14 = v10;
        v15 = v5 - 1;
        do
        {
          *v14 = *v7;
          v14 += v2;
          --v15;
        }
        while (v15);
        *v14 = *v7;
        v10 += v9;
      }
    }
    if (v5 != 1)
    {
      do
      {
        *v10 = *v7;
        v10 += v2;
        --v12;
      }
      while (v12);
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_2238A4B6C(uint64_t result)
{
  const float *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  _DWORD v23[5];
  _QWORD v24[2];

  v2 = *(_QWORD *)result;
  v1 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 64);
  v5 = *(_DWORD *)(*(_QWORD *)result + 72);
  v4 = *(_DWORD *)(*(_QWORD *)result + 76);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v2 + 68) * v3);
    v7 = *(_QWORD *)(v2 + 32);
    if (*(_BYTE *)(v2 + 80))
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v2 + 8) + 88))(*(_QWORD *)(v2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v7 = *(_QWORD *)(v2 + 32);
    }
    if ((_DWORD)v6)
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v13 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v13 < 0x10)
      goto LABEL_27;
    v14 = 4 * v6;
    if (!(_DWORD)v6)
      v14 = 4;
    if (v7 < (unint64_t)(v1 + 1) && v7 + v14 > (unint64_t)v1)
    {
LABEL_27:
      v15 = (_DWORD *)v7;
LABEL_28:
      v16 = v6 + 1;
      do
      {
        *v15++ = *(_DWORD *)v1;
        --v16;
      }
      while (v16 > 1);
      return result;
    }
    v15 = (_DWORD *)(v7 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v13 & 0xFFFFFFFFFFFFFFF8;
    v17 = vld1q_dup_f32(v1);
    v18 = (float32x4_t *)(v7 + 16);
    v19 = v13 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 8;
    }
    while (v19);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_28;
  }
  else
  {
    v21 = 0;
    v20 = v3;
    v22[0] = &v21;
    v22[1] = &v20;
    v22[2] = v1;
    v10 = *(_DWORD *)(v2 + 68);
    if ((_DWORD)v3)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v23[0] = 0;
      v23[1] = v3 - 1;
      v23[2] = v5;
      v23[3] = v10 - 1;
      v23[4] = v4;
      v12 = *(_QWORD *)(v2 + 32);
      if (*(_BYTE *)(v2 + 80) && v12)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v2 + 8) + 88))(*(_QWORD *)(v2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v12 = *(_QWORD *)(v2 + 32);
      }
      v24[0] = 0;
      v24[1] = 0;
      return sub_223469FB8((uint64_t)v23, (uint64_t)v24, (uint64_t)v22, v12);
    }
  }
  return result;
}

void sub_2238A4D58(char **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = &(*a1)[v10 & 0xFFFFFFFFFFFFFFF0];
  v12 = a1[2];
  if (a5 <= (v12 - v9) >> 4)
  {
    v18 = a5;
    v19 = a3;
    do
    {
      v21 = (_QWORD *)v19[1];
      v22 = v19;
      if (v21)
      {
        do
        {
          v19 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v22[2];
          v23 = *v19 == (_QWORD)v22;
          v22 = v19;
        }
        while (!v23);
      }
      v20 = v18-- <= 1;
    }
    while (!v20);
    v24 = (v9 - v11) >> 4;
    if (v24 >= a5)
    {
      v28 = a1[1];
    }
    else
    {
      if (v9 - v11 <= -16)
      {
        v38 = (v9 - v11) >> 4;
        v39 = a3;
        do
        {
          v41 = (_QWORD *)*v39;
          if (*v39)
          {
            do
            {
              v19 = v41;
              v41 = (_QWORD *)v41[1];
            }
            while (v41);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v39[2];
              v23 = *v19 == (_QWORD)v39;
              v39 = v19;
            }
            while (v23);
          }
          v39 = v19;
        }
        while (!__CFADD__(v38++, 1));
      }
      else if (v9 == v11)
      {
        v19 = a3;
      }
      else
      {
        v25 = (v9 - v11) >> 4;
        v26 = a3;
        do
        {
          v27 = (_QWORD *)v26[1];
          if (v27)
          {
            do
            {
              v19 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v26[2];
              v23 = *v19 == (_QWORD)v26;
              v26 = v19;
            }
            while (!v23);
          }
          v26 = v19;
          v20 = v25-- <= 1;
        }
        while (!v20);
      }
      if (v19 == a4)
      {
        v28 = a1[1];
      }
      else
      {
        v42 = v19;
        v28 = a1[1];
        do
        {
          *(_OWORD *)v28 = *(_OWORD *)((char *)v42 + 25);
          v43 = (_QWORD *)v42[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v42[2];
              v23 = *v44 == (_QWORD)v42;
              v42 = v44;
            }
            while (!v23);
          }
          v28 += 16;
          v42 = v44;
        }
        while (v44 != a4);
      }
      a1[1] = v28;
      if (v24 < 1)
        return;
    }
    v45 = &v11[16 * a5];
    v46 = &v28[-16 * a5];
    v47 = v28;
    if (v46 < v9)
    {
      v47 = v28;
      do
      {
        v48 = *(_OWORD *)v46;
        v46 += 16;
        *(_OWORD *)v47 = v48;
        v47 += 16;
      }
      while (v46 < v9);
    }
    a1[1] = v47;
    if (v28 != v45)
      memmove(&v28[-16 * ((v28 - v45) >> 4)], v11, v28 - v45);
    if (v19 != v6)
    {
      do
      {
        *(_OWORD *)v11 = *(_OWORD *)((char *)v6 + 25);
        v49 = (_QWORD *)v6[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v6[2];
            v23 = *v50 == (_QWORD)v6;
            v6 = v50;
          }
          while (!v23);
        }
        v11 += 16;
        v6 = v50;
      }
      while (v50 != v19);
    }
  }
  else
  {
    v13 = a5 + ((v9 - v8) >> 4);
    if (v13 >> 60)
      sub_22316E078();
    v14 = v12 - v8;
    v15 = v14 >> 3;
    if (v14 >> 3 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 60)
        sub_223174E94();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v29 = &v17[16 * (v10 >> 4)];
    v30 = &v29[16 * a5];
    v31 = v29;
    do
    {
      *(_OWORD *)v31 = *(_OWORD *)((char *)v6 + 25);
      v32 = (_QWORD *)v6[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v6[2];
          v23 = *v33 == (_QWORD)v6;
          v6 = v33;
        }
        while (!v23);
      }
      v31 += 16;
      v6 = v33;
    }
    while (v31 != v30);
    v34 = *a1;
    if (*a1 != v11)
    {
      v35 = v11;
      do
      {
        *((_OWORD *)v29 - 1) = *((_OWORD *)v35 - 1);
        v29 -= 16;
        v35 -= 16;
      }
      while (v35 != v34);
      v9 = a1[1];
    }
    v36 = &v17[16 * v16];
    if (v9 != v11)
      memmove(v30, v11, v9 - v11);
    v37 = *a1;
    *a1 = v29;
    a1[1] = &v30[v9 - v11];
    a1[2] = v36;
    if (v37)
      operator delete(v37);
  }
}

BOOL sub_2238A5104(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_224527578(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2238A5254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238A526C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2238A5280()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5BF18;
  return result;
}

void sub_2238A52A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5BF18;
}

BOOL sub_2238A52BC(uint64_t a1, _BYTE *a2)
{
  return (*a2 & 2) == 0;
}

uint64_t sub_2238A52CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingStrategyERKN3"
                     "cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3esn6random4UUIDEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingSt"
                                "rategyERKN3cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3e"
                                "sn6random4UUIDEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3esn6random4UUIDEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3esn6random4UUIDEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2238A5338()
{
  return &unk_24EC5BF78;
}

void sub_2238A5348()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2238A535C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5BF98;
  result[1] = v3;
  return result;
}

uint64_t sub_2238A5390(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5BF98;
  a2[1] = v2;
  return result;
}

BOOL sub_2238A53AC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return *a3 || *(_BYTE *)(*(_QWORD *)(a1 + 8) + 7) == 0;
}

uint64_t sub_2238A53C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingStrategyERKN3"
                     "cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3esn6random4UUIDEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingSt"
                                "rategyERKN3cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3e"
                                "sn6random4UUIDEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3esn6random4UUIDEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf23PrioritizeForPublishingERKNS1_17PublishingBacklogERKNS1_18PublishingStrategyERKN3cva6MatrixIfLj3ELj1ELb1EEERKNS1_16KeyframeDatabaseENSt3__18functionIFbRKNS_3esn6random4UUIDEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2238A5434()
{
  return &unk_24EC5BFF8;
}

_QWORD *sub_2238A5440(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC5C018;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2238A5484(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC5C018;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2238A54D8(_QWORD *a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24EC5C018;
  if (*(_BYTE *)(a2 + 28))
    v3 = *(_BYTE *)(a2 + 560) == 0;
  else
    v3 = 1;
  if (!v3 && *(_BYTE *)(a2 + 880) != 0)
  {
    v6 = operator new();
    sub_2238AA200(v6, (_QWORD *)(a2 + 376), *(_BYTE *)(a2 + 29), *(_BYTE *)(a2 + 40), *(_BYTE *)(a2 + 41), *(float *)(a2 + 88), *(float *)(a2 + 584), 0.03);
    v7 = a1[2];
    a1[2] = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    a1[1] = *(unsigned int *)(a2 + 36);
  }
  return a1;
}

void sub_2238A5594(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x227684CE8](v2, 0x10F1C407BAC8351);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_2238A55D8(uint64_t result, uint64_t a2, char *a3, uint64_t a4, uint64_t *a5, unint64_t a6, _QWORD *a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  uint64_t (**v28)();
  std::__shared_weak_count *v29;
  uint64_t (**v30)();
  std::__shared_weak_count *v31;
  uint64_t v32;

  if (*(_QWORD *)(result + 16))
  {
    v13 = result;
    v14 = *(unsigned __int8 *)(a2 + 1400);
    kdebug_trace();
    if (v14 == 1
      && *(_QWORD *)(a4 + 1872) != *(_QWORD *)(a4 + 1880)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 98, (uint64_t)"result.keyframes_updated.empty()", 32, (uint64_t)"No content updates expected from KeyframingEngine in Monitor mode", 65, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v15 = sub_2238A5874(*(_QWORD *)(v13 + 16), a2, a3, a4, a5, a6, a7);
    v26[1] = 0;
    v27 = 0;
    v26[0] = &off_24EC715B8;
    sub_2238AA0D8(a2, &v28);
    sub_2238AA0D8(a2 + 64, &v30);
    v32 = v15;
    v16 = sub_2238A9BC8(a4 + 2072, (uint64_t)v26);
    v30 = &off_24EC715B8;
    v17 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v28 = &off_24EC715B8;
    v20 = v29;
    if (v29)
    {
      v21 = (unint64_t *)&v29->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v16);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v26[0] = &off_24EC715B8;
    v23 = v27;
    if (v27)
    {
      v24 = (unint64_t *)&v27->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v16);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    kdebug_trace();
    kdebug_trace();
    return kdebug_trace();
  }
  return result;
}

void sub_2238A582C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2238A9D2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2238A5840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_2242A8F3C(v9);
  sub_2242A8F3C(&a9);
  _Unwind_Resume(a1);
}

void sub_2238A585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2242A8F3C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2238A5874(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t *a5, unint64_t a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _OWORD *v75;
  __int128 *v76;
  char *v77;
  _BYTE *v78;
  uint64_t v79;
  __int128 v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  _QWORD *v86;
  _OWORD *v87;
  float32x4_t *v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  float *v94;
  uint64_t v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  float32x4_t v100;
  float32x4_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char *v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  char *v138;
  char *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  float *v143;
  float *v144;
  float *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  BOOL v153;
  BOOL v154;
  uint64_t v155;
  uint64_t i;
  BOOL v157;
  float32x4_t v158;
  float32x4_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  __int16 v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  __int16 v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  __int16 v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  __int128 v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unsigned int v215;
  unsigned int v216;
  BOOL v217;
  float v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  __int128 v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  BOOL v252;
  float v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  float v266;
  unsigned int v267;
  unint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  __int16 v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  __int16 v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  __int16 v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  char v363;
  int v364;
  char *v365;
  unsigned __int8 v366;
  _BYTE *v367;
  int v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  const char *v372;
  size_t v373;
  __int128 v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  __int128 v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  __int128 v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  __int128 v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  __int128 v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  __int128 v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  __int128 v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  char *v406;
  uint64_t v407;
  unsigned __int8 v408;
  const char *v409;
  size_t v410;
  __int128 *v411;
  uint64_t v412;
  uint64_t v413;
  _OWORD *v414;
  uint64_t v415;
  uint64_t v416;
  NSObject *v417;
  size_t v418;
  float *v419;
  std::__shared_weak_count *v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t v424;
  float *v425;
  _DWORD *v426;
  uint64_t v427;
  uint64_t v428;
  const char *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  void *v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  float **v454;
  int v455;
  __int128 v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  float v466;
  void *v467;
  void *v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  char v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  int v495;
  BOOL v496;
  char v497;
  float *v498;
  _QWORD *v499;
  _QWORD *v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  std::mutex *v504;
  uint64_t v505;
  uint64_t v506;
  char v507;
  _BYTE *v508;
  _BYTE *v509;
  uint64_t v510;
  unint64_t v511;
  _BYTE *v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  __n128 *v518;
  _BYTE *v519;
  size_t v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  std::mutex *v524;
  uint64_t v525;
  uint64_t v526;
  char v527;
  _BYTE *v528;
  _BYTE *v529;
  uint64_t v530;
  uint64_t *v531;
  unint64_t v532;
  _BYTE *v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  __n128 *v539;
  _BYTE *v540;
  size_t v541;
  char v543;
  _QWORD *v545;
  float *v546;
  _QWORD *v547;
  _QWORD *v548;
  void *v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  char *v562;
  char *v563;
  void *v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  char *v568;
  unint64_t v569;
  char *v570;
  unint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  _QWORD *v581;
  uint64_t v582;
  uint64_t v583;
  __int16 v584;
  const char *v585;
  uint64_t v586;
  __int16 v587;
  uint64_t v588;
  uint64_t v589;
  __int16 v590;
  char v591;
  uint64_t *v592;
  unint64_t *v593;
  _BOOL4 v594;
  uint64_t v595;
  uint32x2_t v596;
  uint64_t v597;
  int v598;
  __int128 v599;
  uint64_t v600;
  __int128 v601;
  void *v602;
  __int128 v603;
  uint64_t v604;
  __int128 v605;
  uint64_t v606;
  uint64_t (**v607)();
  _BYTE v608[48];
  _BYTE v609[64];
  __int128 v610;
  void *v611[4];
  uint64_t (**v612)();
  __int128 v613;
  _OWORD v614[2];
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  char v619;
  __int128 v620;
  __int128 v621;
  char v622;
  void *__p[2];
  void *v624[2];
  __int128 v625;
  char v626;
  char v627;
  float32x2_t v628[2];
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  int v633;
  unint64_t v634;
  uint64_t v635;
  void *v636;
  __int128 v637;
  _BYTE v638[26];
  uint64_t (**v639)();
  __int128 v640;
  _BYTE v641[26];
  uint64_t (**v642)();
  __int128 v643;
  _BYTE v644[26];
  _OWORD v645[4];
  _BYTE v646[50];
  _BYTE v647[50];
  uint64_t v648;
  _BYTE v649[64];
  std::__shared_weak_count *v650;
  uint64_t (**v651)();
  __int128 v652;
  _OWORD v653[3];
  uint64_t v654;

  v654 = *MEMORY[0x24BDAC8D0];
  LODWORD(v635) = 0;
  *(_DWORD *)((char *)&v635 + 3) = 0;
  HIBYTE(v635) = *(_BYTE *)(a2 + 1400);
  v14 = *(_QWORD *)(a1 + 1552);
  v15 = *(_QWORD *)(a1 + 1520);
  *(_BYTE *)(v15 + v14) = HIBYTE(v635);
  v16 = *(_QWORD *)(a1 + 1528) - v15;
  v17 = v14 + 1;
  if (v17 >= v16)
    v18 = *(_QWORD *)(a1 + 1528) - v15;
  else
    v18 = 0;
  *(_QWORD *)(a1 + 1552) = v17 - v18;
  v19 = *(_QWORD *)(a1 + 1560);
  if (v19 == v16)
  {
    v20 = *(_QWORD *)(a1 + 1544) + 1;
    if (v20 < v16)
      v16 = 0;
    *(_QWORD *)(a1 + 1544) = v20 - v16;
    if (*a7)
    {
LABEL_8:
      v21 = vcvt_f32_u32(*(uint32x2_t *)(a2 + 1328));
      v596 = vcvt_u32_f32(vmul_n_f32(v21, *(float *)(a1 + 1444)));
      v22 = vdiv_f32(vcvt_f32_u32(v596), v21);
      v23 = vmul_f32(v22, *(float32x2_t *)(a2 + 1256));
      v24 = vadd_f32(vmul_f32(v22, vadd_f32(*(float32x2_t *)(a2 + 1264), (float32x2_t)0x3F0000003F000000)), (float32x2_t)0xBF000000BF000000);
      *(float32x2_t *)v615.f32 = v23;
      *(float32x2_t *)&v615.u32[2] = v24;
      sub_223207E58(&v607, (int *)&v615);
      v629 = *(_OWORD *)v608;
      v630 = *(_OWORD *)&v608[16];
      v631 = *(_OWORD *)&v608[32];
      v632 = *(_OWORD *)v609;
      v633 = *(_DWORD *)&v609[16];
      v634 = v596.u32[0] | ((unint64_t)v596.u32[1] << 32);
      v628[1] = (float32x2_t)&off_24EC20868;
      v628[0] = (float32x2_t)&off_24EC207B8;
      if (!*(_DWORD *)(a1 + 424) && !*(_DWORD *)(a1 + 428))
      {
        v607 = &off_24EC24788;
        sub_2231F8D1C(&v634, v608);
        v25 = *(_OWORD *)v608;
        *(_OWORD *)v608 = 0uLL;
        v26 = *(std::__shared_weak_count **)(a1 + 376);
        *(_OWORD *)(a1 + 368) = v25;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = *(_OWORD *)&v608[32];
        *(_OWORD *)(a1 + 384) = *(_OWORD *)&v608[16];
        *(_OWORD *)(a1 + 400) = v29;
        *(_OWORD *)(a1 + 416) = *(_OWORD *)v609;
        v30 = *(std::__shared_weak_count **)&v608[8];
        *(_QWORD *)(a1 + 432) = *(_QWORD *)&v609[16];
        *(_WORD *)(a1 + 440) = *(_WORD *)&v609[24];
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v607 = &off_24EC216B8;
        sub_2231FF60C(&v634, v608);
        v33 = *(_OWORD *)v608;
        *(_OWORD *)v608 = 0uLL;
        v34 = *(std::__shared_weak_count **)(a1 + 464);
        *(_OWORD *)(a1 + 456) = v33;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v37 = *(std::__shared_weak_count **)&v608[8];
        *(_QWORD *)(a1 + 520) = *(_QWORD *)&v609[16];
        v38 = *(_OWORD *)&v608[32];
        *(_OWORD *)(a1 + 472) = *(_OWORD *)&v608[16];
        *(_OWORD *)(a1 + 488) = v38;
        *(_OWORD *)(a1 + 504) = *(_OWORD *)v609;
        *(_WORD *)(a1 + 528) = *(_WORD *)&v609[24];
        if (v37)
        {
          v39 = (unint64_t *)&v37->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v607 = &off_24EC24788;
        sub_2231F8D1C(&v634, v608);
        v41 = *(_OWORD *)v608;
        *(_OWORD *)v608 = 0uLL;
        v42 = *(std::__shared_weak_count **)(a1 + 904);
        *(_OWORD *)(a1 + 896) = v41;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = *(_OWORD *)&v608[32];
        *(_OWORD *)(a1 + 912) = *(_OWORD *)&v608[16];
        *(_OWORD *)(a1 + 928) = v45;
        *(_OWORD *)(a1 + 944) = *(_OWORD *)v609;
        v46 = *(std::__shared_weak_count **)&v608[8];
        *(_QWORD *)(a1 + 960) = *(_QWORD *)&v609[16];
        *(_WORD *)(a1 + 968) = *(_WORD *)&v609[24];
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v607 = &off_24EC216B8;
        sub_2231FF60C(&v634, v608);
        v49 = *(_OWORD *)v608;
        *(_OWORD *)v608 = 0uLL;
        v50 = *(std::__shared_weak_count **)(a1 + 992);
        *(_OWORD *)(a1 + 984) = v49;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = *(std::__shared_weak_count **)&v608[8];
        *(_QWORD *)(a1 + 1048) = *(_QWORD *)&v609[16];
        v54 = *(_OWORD *)&v608[32];
        *(_OWORD *)(a1 + 1000) = *(_OWORD *)&v608[16];
        *(_OWORD *)(a1 + 1016) = v54;
        *(_OWORD *)(a1 + 1032) = *(_OWORD *)v609;
        *(_WORD *)(a1 + 1056) = *(_WORD *)&v609[24];
        if (v53)
        {
          v55 = (unint64_t *)&v53->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v607 = &off_24EC216B8;
        sub_2231FF60C(&v634, v608);
        v57 = *(_OWORD *)v608;
        *(_OWORD *)v608 = 0uLL;
        v58 = *(std::__shared_weak_count **)(a1 + 728);
        *(_OWORD *)(a1 + 720) = v57;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(_OWORD *)&v608[32];
        *(_OWORD *)(a1 + 736) = *(_OWORD *)&v608[16];
        *(_OWORD *)(a1 + 752) = v61;
        *(_OWORD *)(a1 + 768) = *(_OWORD *)v609;
        v62 = *(std::__shared_weak_count **)&v608[8];
        *(_QWORD *)(a1 + 784) = *(_QWORD *)&v609[16];
        *(_WORD *)(a1 + 792) = *(_WORD *)&v609[24];
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v607 = &off_24EC24788;
        sub_2231F8D1C(&v634, v608);
        v65 = *(_OWORD *)v608;
        *(_OWORD *)v608 = 0uLL;
        v66 = *(std::__shared_weak_count **)(a1 + 816);
        *(_OWORD *)(a1 + 808) = v65;
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = *(std::__shared_weak_count **)&v608[8];
        *(_QWORD *)(a1 + 872) = *(_QWORD *)&v609[16];
        v70 = *(_OWORD *)&v608[32];
        *(_OWORD *)(a1 + 824) = *(_OWORD *)&v608[16];
        *(_OWORD *)(a1 + 840) = v70;
        *(_OWORD *)(a1 + 856) = *(_OWORD *)v609;
        *(_WORD *)(a1 + 880) = *(_WORD *)&v609[24];
        if (v69)
        {
          v71 = (unint64_t *)&v69->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        if (*(float *)(a1 + 1444) != 1.0)
        {
          v607 = &off_24EC1FE80;
          sub_2231A2D70(&v634, v608);
          v374 = *(_OWORD *)v608;
          *(_OWORD *)v608 = 0uLL;
          v375 = *(std::__shared_weak_count **)(a1 + 24);
          *(_OWORD *)(a1 + 16) = v374;
          if (v375)
          {
            v376 = (unint64_t *)&v375->__shared_owners_;
            do
              v377 = __ldaxr(v376);
            while (__stlxr(v377 - 1, v376));
            if (!v377)
            {
              ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
              std::__shared_weak_count::__release_weak(v375);
            }
          }
          v378 = *(_OWORD *)&v608[32];
          *(_OWORD *)(a1 + 32) = *(_OWORD *)&v608[16];
          *(_OWORD *)(a1 + 48) = v378;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v609;
          v379 = *(std::__shared_weak_count **)&v608[8];
          *(_QWORD *)(a1 + 80) = *(_QWORD *)&v609[16];
          *(_WORD *)(a1 + 88) = *(_WORD *)&v609[24];
          if (v379)
          {
            v380 = (unint64_t *)&v379->__shared_owners_;
            do
              v381 = __ldaxr(v380);
            while (__stlxr(v381 - 1, v380));
            if (!v381)
            {
              ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
              std::__shared_weak_count::__release_weak(v379);
            }
          }
          v607 = &off_24EC1FE80;
          sub_2231A2D70(&v634, v608);
          v382 = *(_OWORD *)v608;
          *(_OWORD *)v608 = 0uLL;
          v383 = *(std::__shared_weak_count **)(a1 + 112);
          *(_OWORD *)(a1 + 104) = v382;
          if (v383)
          {
            v384 = (unint64_t *)&v383->__shared_owners_;
            do
              v385 = __ldaxr(v384);
            while (__stlxr(v385 - 1, v384));
            if (!v385)
            {
              ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
              std::__shared_weak_count::__release_weak(v383);
            }
          }
          *(_OWORD *)(a1 + 120) = *(_OWORD *)&v608[16];
          *(_OWORD *)(a1 + 136) = *(_OWORD *)&v608[32];
          *(_OWORD *)(a1 + 152) = *(_OWORD *)v609;
          v386 = *(std::__shared_weak_count **)&v608[8];
          *(_QWORD *)(a1 + 168) = *(_QWORD *)&v609[16];
          *(_WORD *)(a1 + 176) = *(_WORD *)&v609[24];
          if (v386)
          {
            v387 = (unint64_t *)&v386->__shared_owners_;
            do
              v388 = __ldaxr(v387);
            while (__stlxr(v388 - 1, v387));
            if (!v388)
            {
              ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
              std::__shared_weak_count::__release_weak(v386);
            }
          }
          v607 = &off_24EC216B8;
          sub_2231FF60C(&v634, v608);
          v389 = *(_OWORD *)v608;
          *(_OWORD *)v608 = 0uLL;
          v390 = *(std::__shared_weak_count **)(a1 + 200);
          *(_OWORD *)(a1 + 192) = v389;
          if (v390)
          {
            v391 = (unint64_t *)&v390->__shared_owners_;
            do
              v392 = __ldaxr(v391);
            while (__stlxr(v392 - 1, v391));
            if (!v392)
            {
              ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
              std::__shared_weak_count::__release_weak(v390);
            }
          }
          v393 = *(_OWORD *)&v608[32];
          *(_OWORD *)(a1 + 208) = *(_OWORD *)&v608[16];
          *(_OWORD *)(a1 + 224) = v393;
          *(_OWORD *)(a1 + 240) = *(_OWORD *)v609;
          v394 = *(std::__shared_weak_count **)&v608[8];
          *(_QWORD *)(a1 + 256) = *(_QWORD *)&v609[16];
          *(_WORD *)(a1 + 264) = *(_WORD *)&v609[24];
          if (v394)
          {
            v395 = (unint64_t *)&v394->__shared_owners_;
            do
              v396 = __ldaxr(v395);
            while (__stlxr(v396 - 1, v395));
            if (!v396)
            {
              ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
              std::__shared_weak_count::__release_weak(v394);
            }
          }
          v607 = &off_24EC24788;
          sub_2231F8D1C(&v634, v608);
          v397 = *(_OWORD *)v608;
          *(_OWORD *)v608 = 0uLL;
          v398 = *(std::__shared_weak_count **)(a1 + 288);
          *(_OWORD *)(a1 + 280) = v397;
          if (v398)
          {
            v399 = (unint64_t *)&v398->__shared_owners_;
            do
              v400 = __ldaxr(v399);
            while (__stlxr(v400 - 1, v399));
            if (!v400)
            {
              ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
              std::__shared_weak_count::__release_weak(v398);
            }
          }
          v401 = *(std::__shared_weak_count **)&v608[8];
          *(_QWORD *)(a1 + 344) = *(_QWORD *)&v609[16];
          v402 = *(_OWORD *)&v608[32];
          *(_OWORD *)(a1 + 296) = *(_OWORD *)&v608[16];
          *(_OWORD *)(a1 + 312) = v402;
          *(_OWORD *)(a1 + 328) = *(_OWORD *)v609;
          *(_WORD *)(a1 + 352) = *(_WORD *)&v609[24];
          if (v401)
          {
            v403 = (unint64_t *)&v401->__shared_owners_;
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 - 1, v403));
            if (!v404)
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
          }
        }
      }
      v592 = a5;
      v595 = a1;
      v73 = a7;
      v586 = a4;
      v597 = a2;
      v74 = *(_QWORD *)(a2 + 1232);
      v615.i8[0] = 0;
      v619 = 0;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v624 = 0u;
      v625 = 0u;
      v620 = 0u;
      v621 = 0u;
      v622 = 0;
      v76 = (__int128 *)*((_QWORD *)a3 + 1);
      v75 = (_OWORD *)*((_QWORD *)a3 + 2);
      memset(v649, 0, 24);
      if (v76 == v75)
      {
        v81 = 0;
        v78 = 0;
      }
      else
      {
        if ((0xD1745D1745D1745DLL * (v76 - v75)) >> 60)
          sub_22316E078();
        v77 = (char *)operator new(0x1745D1745D1745D0 * (v76 - v75));
        v78 = v77;
        v79 = 0;
        *(_QWORD *)v649 = v77;
        *(_QWORD *)&v649[16] = &v77[0x1745D1745D1745D0 * (v76 - v75)];
        do
        {
          v80 = *v76;
          v76 += 11;
          *(_OWORD *)&v77[v79] = v80;
          v79 += 16;
        }
        while (v76 != v75);
        v81 = &v77[v79];
        *(_QWORD *)&v649[8] = &v77[v79];
      }
      LOWORD(v607) = 1;
      *(_QWORD *)v608 = v74;
      v87 = operator new(0x40uLL);
      v88 = (float32x4_t *)(a2 + 1336);
      v89 = *(_OWORD *)(a2 + 1352);
      *v87 = *(_OWORD *)(a2 + 1336);
      v87[1] = v89;
      v90 = *(_OWORD *)(a2 + 1384);
      v87[2] = *(_OWORD *)(a2 + 1368);
      v87[3] = v90;
      *(_QWORD *)&v608[8] = v87;
      *(_QWORD *)&v608[16] = v87 + 4;
      *(_OWORD *)v609 = v629;
      *(_OWORD *)&v609[16] = v630;
      LODWORD(v610) = v633;
      *(_OWORD *)&v609[48] = v632;
      *(_OWORD *)&v609[32] = v631;
      *(_QWORD *)&v608[24] = v87 + 4;
      *(_QWORD *)&v608[32] = &off_24EC207B8;
      *(_QWORD *)&v608[40] = &off_24EC20868;
      *((_QWORD *)&v610 + 1) = v634;
      memset(v611, 0, 24);
      v91 = v81 - v78;
      if (v81 != v78)
      {
        if (v91 < 0)
          sub_22316E078();
        v92 = (char *)operator new(v81 - v78);
        v93 = &v92[16 * (v91 >> 4)];
        v611[0] = v92;
        v611[2] = v93;
        memcpy(v92, v78, v81 - v78);
        v611[1] = v93;
      }
      LOBYTE(v611[3]) = *(_BYTE *)(v595 + 1469);
      kdebug_trace();
      (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint64_t (***)()))(*(_QWORD *)*v73 + 16))(&v651, *v73, &v607);
      v94 = (float *)v651;
      *(_QWORD *)v647 = v651;
      v589 = v652;
      *(_OWORD *)&v647[8] = v652;
      v651 = 0;
      v652 = 0uLL;
      kdebug_trace();
      v95 = v595;
      if (v589 - (_QWORD)v94 != 16
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 265, (uint64_t)"raster_depths.size() == 1u", 26, (uint64_t)"Expect single render viewpoint in Monitor when making a depth based suggestion.", 79, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v96 = *(_OWORD *)v94;
      *(_QWORD *)v94 = 0;
      *((_QWORD *)v94 + 1) = 0;
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v620 + 1);
      v620 = v96;
      if (!v97)
        goto LABEL_93;
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
        v158 = v88[1];
        v615 = *v88;
        v616 = v158;
        v159 = v88[3];
        v617 = v88[2];
        v618 = v159;
        if (v619)
        {
LABEL_95:
          if (*(_BYTE *)(v595 + 1469))
            v102 = v653[0];
          else
            v102 = 1;
          if (*(_BYTE *)(v595 + 1469))
            v103 = BYTE1(v653[0]);
          else
            v103 = 0;
          v626 = v102;
          v627 = v103;
          v622 = *a3;
          v104 = v597;
          if (&v622 == a3)
          {
LABEL_130:
            v138 = *(char **)v647;
            if (!*(_QWORD *)v647)
              goto LABEL_141;
LABEL_131:
            v139 = *(char **)&v647[8];
            if (*(char **)&v647[8] != v138)
            {
              do
              {
                v140 = (std::__shared_weak_count *)*((_QWORD *)v139 - 1);
                if (v140)
                {
                  v141 = (unint64_t *)&v140->__shared_owners_;
                  do
                    v142 = __ldaxr(v141);
                  while (__stlxr(v142 - 1, v141));
                  if (!v142)
                  {
                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                    std::__shared_weak_count::__release_weak(v140);
                  }
                }
                v139 -= 16;
              }
              while (v139 != v138);
              v138 = *(char **)v647;
              v104 = v597;
            }
            operator delete(v138);
LABEL_141:
            v143 = (float *)v651;
            if (v651)
            {
              v144 = (float *)v652;
              v145 = (float *)v651;
              if ((uint64_t (**)())v652 != v651)
              {
                do
                {
                  v146 = (std::__shared_weak_count *)*((_QWORD *)v144 - 1);
                  if (v146)
                  {
                    v147 = (unint64_t *)&v146->__shared_owners_;
                    do
                      v148 = __ldaxr(v147);
                    while (__stlxr(v148 - 1, v147));
                    if (!v148)
                    {
                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                      std::__shared_weak_count::__release_weak(v146);
                    }
                  }
                  v144 -= 4;
                }
                while (v144 != v143);
                v145 = (float *)v651;
              }
              *(_QWORD *)&v652 = v143;
              operator delete(v145);
            }
            if (v611[0])
            {
              v611[1] = v611[0];
              operator delete(v611[0]);
            }
            *(_QWORD *)&v608[32] = &off_24EC20828;
            if (*(_QWORD *)&v608[8])
            {
              *(_QWORD *)&v608[16] = *(_QWORD *)&v608[8];
              operator delete(*(void **)&v608[8]);
            }
            if (*(_QWORD *)v649)
              operator delete(*(void **)v649);
            v150 = *v592;
            v149 = v592[1];
            if (*v592 == v149)
            {
              v153 = 0;
            }
            else
            {
              do
              {
                v151 = *(_QWORD *)(a6 + 24);
                if (!v151)
                  sub_223198474();
                v152 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v151 + 48))(v151, v150) & 0x34;
                v153 = v152 != 0;
                v150 += 16;
                if (v152)
                  v154 = 1;
                else
                  v154 = v150 == v149;
              }
              while (!v154);
            }
            LOBYTE(v635) = v153;
            v155 = *(_QWORD *)(v586 + 1872);
            for (i = *(_QWORD *)(v586 + 1880); v155 != i; v155 += 248)
            {
              if ((*(_BYTE *)(v155 + 240) & 0x14) != 0)
                BYTE1(v635) = 1;
            }
            if (v627)
              v157 = v626 == 2;
            else
              v157 = 0;
            if (v157)
              BYTE4(v635) = 1;
            memset(v608, 0, 42);
            v607 = &off_24EC200A8;
            *(_QWORD *)v609 = &off_24EC200A8;
            memset(&v609[8], 0, 42);
            v610 = 0u;
            memset(v611, 0, 26);
            *(_QWORD *)&v609[56] = &off_24EC21420;
            v612 = &off_24EC21230;
            v613 = 0u;
            memset(v614, 0, 26);
            v593 = (unint64_t *)v88;
            if (!(_QWORD)v620)
            {
LABEL_489:
              v353 = v88[2];
              v352 = v88[3];
              v354 = v88[1];
              if (byte_2540CC980)
              {
                v355 = vsubq_f32(*v88, (float32x4_t)xmmword_2540CC940);
                v356 = vsubq_f32(v354, *(float32x4_t *)algn_2540CC950);
                v357 = vsubq_f32(v353, (float32x4_t)xmmword_2540CC960);
                v358 = vsubq_f32(v352, xmmword_2540CC970);
                v359 = vmulq_f32(v358, v358);
                v360 = vmulq_f32(v357, v357);
                v361 = vmulq_f32(v356, v356);
                v362 = vmulq_f32(v355, v355);
                if (sqrtf(v359.f32[3]+ (float)(v359.f32[2]+ (float)(v359.f32[1]+ (float)(v359.f32[0]+ (float)(v360.f32[3]+ (float)(v360.f32[2]+ (float)(v360.f32[1]+ (float)(v360.f32[0]+ (float)(v361.f32[3]+ (float)(v361.f32[2]+ (float)(v361.f32[1] + (float)(v361.f32[0] + (float)(v362.f32[3] + (float)(v362.f32[2] + vaddv_f32(*(float32x2_t *)v362.f32))))))))))))))) <= 0.01)
                {
                  v364 = *(_BYTE *)(v95 + 1471) != 0;
                  if (*(_BYTE *)(v95 + 1471))
                    BYTE3(v635) = 0;
                  if (HIBYTE(v635) != 2)
                  {
LABEL_495:
                    sub_2238B0070(&v642);
                    *(_QWORD *)&v645[0] = v642;
                    if (*(int *)v642[7] > 3)
                      goto LABEL_644;
                    v366 = atomic_load((unsigned __int8 *)&qword_2540CC900);
                    if ((v366 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC900))
                    {
                      qword_2540CC918 = 0;
                      qword_2540CC920 = 0;
                      v581 = operator new(0x20uLL);
                      v581[1] = 0;
                      v581[2] = 0;
                      *v581 = &off_24EC5C0F0;
                      *((_WORD *)v581 + 12) = 0;
                      qword_2540CC918 = (uint64_t)(v581 + 3);
                      qword_2540CC920 = (uint64_t)v581;
                      __cxa_atexit((void (*)(void *))sub_2238B06D8, &qword_2540CC918, &dword_22314D000);
                      __cxa_guard_release(&qword_2540CC900);
                      v95 = v595;
                      v104 = v597;
                    }
                    v367 = (_BYTE *)qword_2540CC918;
                    if (*(_BYTE *)(qword_2540CC918 + 1))
                    {
                      if (*(unsigned __int8 *)qword_2540CC918 == v364)
                        goto LABEL_644;
                    }
                    if (*(_BYTE *)(qword_2540CC918 + 1))
                      *(_BYTE *)(qword_2540CC918 + 1) = 0;
                    *v367 = v364;
                    v367[1] = 1;
                    v368 = *(unsigned __int8 *)(*(_QWORD *)&v645[0] + 72);
                    v369 = sub_22322F254(*(uint64_t *)&v645[0], "OSLogSurrogateAppender", 1, 0);
                    v370 = v369;
                    if (!v368 && !v369)
                    {
LABEL_644:
                      v454 = (float **)(v104 + 1232);
                      v455 = BYTE1(v635);
                      if ((_WORD)v635)
                      {
                        *(_BYTE *)(v95 + 1384) = 2;
                        v498 = (float *)(v95 + 1392);
                        if (v455)
                        {
                          LOBYTE(v651) = 2;
                          v499 = sub_2238B14D0(v498, 2u, &v651);
                        }
                        else
                        {
                          LOBYTE(v651) = 1;
                          v499 = sub_2238B14D0(v498, 1u, &v651);
                        }
                        ++*((_DWORD *)v499 + 5);
                        v651 = (uint64_t (**)())*v454;
                        sub_2238AD96C(v95, (unsigned __int8 *)&v635, (uint64_t *)&v651);
                      }
                      else
                      {
                        if ((_QWORD)v620)
                        {
                          kdebug_trace();
                          v651 = &off_24EC21230;
                          v652 = 0u;
                          memset(v653, 0, 26);
                          if ((_QWORD)v620)
                          {
                            *(_QWORD *)v649 = &off_24EC21230;
                            sub_2231BE6D4(v620, (uint64_t *)&v649[8]);
                            v456 = *(_OWORD *)&v649[8];
                            *(_QWORD *)&v649[8] = 0;
                            *(_QWORD *)&v649[16] = 0;
                            v457 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
                            v652 = v456;
                            if (v457)
                            {
                              v458 = (unint64_t *)&v457->__shared_owners_;
                              do
                                v459 = __ldaxr(v458);
                              while (__stlxr(v459 - 1, v458));
                              if (!v459)
                              {
                                ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                                std::__shared_weak_count::__release_weak(v457);
                              }
                            }
                            v653[0] = *(_OWORD *)&v649[24];
                            *(_OWORD *)((char *)v653 + 10) = *(_OWORD *)&v649[34];
                            v460 = *(std::__shared_weak_count **)&v649[16];
                            if (*(_QWORD *)&v649[16])
                            {
                              v461 = (unint64_t *)(*(_QWORD *)&v649[16] + 8);
                              do
                                v462 = __ldaxr(v461);
                              while (__stlxr(v462 - 1, v461));
                              if (!v462)
                              {
                                ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                                std::__shared_weak_count::__release_weak(v460);
                              }
                            }
                          }
                          sub_2238FB860(v593, v628, (uint64_t)&v607, (uint64_t)v609, (uint64_t)&v612, (uint64_t)&v651, (uint64_t)&v636, *(float *)(v95 + 1464), *(float *)(v95 + 1440));
                          v463 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
                          if (*((_QWORD *)&v652 + 1))
                          {
                            v464 = (unint64_t *)(*((_QWORD *)&v652 + 1) + 8);
                            do
                              v465 = __ldaxr(v464);
                            while (__stlxr(v465 - 1, v464));
                            if (!v465)
                            {
                              ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                              std::__shared_weak_count::__release_weak(v463);
                            }
                          }
                          v652 = 0uLL;
                          v651 = (uint64_t (**)())&v652;
                          memset(v653, 0, sizeof(v653));
                          if (!(BYTE2(v635) | BYTE3(v635)))
                          {
LABEL_696:
                            sub_2238FE874(*(uint64_t **)(v95 + 1448), (uint64_t *)(v104 + 1232), &v651, &v636, HIBYTE(v635));
                            v598 = sub_223900DE4(*(_QWORD *)(v95 + 1448), HIBYTE(v635));
                            kdebug_trace();
                            if (BYTE4(v635))
                              v484 = 2;
                            else
                              v484 = 1;
                            v485 = *(_QWORD *)(v95 + 1504);
                            v486 = *(_QWORD *)(v95 + 1472);
                            *(_BYTE *)(v486 + v485) = v484;
                            v487 = *(_QWORD *)(v95 + 1480) - v486;
                            v488 = v485 + 1;
                            if (v488 >= v487)
                              v489 = *(_QWORD *)(v95 + 1480) - v486;
                            else
                              v489 = 0;
                            *(_QWORD *)(v95 + 1504) = v488 - v489;
                            v490 = *(_QWORD *)(v95 + 1512);
                            if (v490 == v487)
                            {
                              v491 = *(_QWORD *)(v95 + 1496) + 1;
                              if (v491 >= v487)
                                v492 = v487;
                              else
                                v492 = 0;
                              *(_QWORD *)(v95 + 1496) = v491 - v492;
                              v493 = v487;
                              if (v487)
                              {
LABEL_707:
                                v494 = *(_QWORD *)(v95 + 1496);
                                while (1)
                                {
                                  v495 = *(unsigned __int8 *)(v486 + v494 % v487);
                                  v496 = v495 != 2;
                                  if (v495 == 2)
                                    break;
                                  ++v494;
                                  if (!--v493)
                                  {
                                    v497 = 1;
                                    goto LABEL_719;
                                  }
                                }
                                v497 = 2;
LABEL_719:
                                v591 = v497;
                                v594 = v495 == 2;
LABEL_720:
                                *(_QWORD *)v649 = "cv3d.recon.";
                                *(_QWORD *)&v649[8] = 11;
                                *(_QWORD *)&v649[16] = "Stats.Monitoring.SuggestionProvider";
                                *(_QWORD *)&v649[24] = 35;
                                sub_2231A9820((uint64_t)v649, (uint64_t)&v649[32], 0, 0, (std::string *)v647);
                                sub_224569D7C();
                                sub_224569A80();
                                if (os_variant_has_internal_diagnostics())
                                {
                                  v501 = sub_2241471F8();
                                  v502 = v501[2];
                                  if (!v502)
                                  {
                                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                                    {
                                      abort();
                                    }
                                    v502 = v501[2];
                                  }
                                  v503 = *(_QWORD *)(v502 + 64);
                                  v504 = (std::mutex *)(v503 + 32);
                                  std::mutex::lock((std::mutex *)(v503 + 32));
                                  v506 = *(_QWORD *)(v503 + 96);
                                  v505 = *(_QWORD *)(v503 + 104);
                                  std::mutex::unlock(v504);
                                  if (v506 != v505)
                                  {
                                    v507 = v647[23];
                                    v508 = *(_BYTE **)v647;
                                    sub_2241471F8();
                                    v509 = v507 >= 0 ? v647 : v508;
                                    v510 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v509);
                                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v510 + 24))(v510))
                                    {
                                      memset(v649, 0, 32);
                                      *(_DWORD *)&v649[32] = 728325608;
                                      kdebug_trace();
                                      v646[0] = v598;
                                      sub_2238B0164((double *)&qword_255788F20, v510, v646, "FilteredMeshingSuggestion");
                                      kdebug_trace();
                                    }
                                  }
                                }
                                memset(v649, 0, 32);
                                *(_DWORD *)&v649[32] = 728325624;
                                kdebug_trace();
                                v511 = v647[23];
                                if (v647[23] < 0)
                                  v511 = *(_QWORD *)&v647[8];
                                if (v511 >= 0x11)
                                {
                                  v512 = v647;
                                  if (v647[23] < 0)
                                    v512 = *(_BYTE **)v647;
                                  v513 = *(_QWORD *)v512;
                                  v514 = *((_QWORD *)v512 + 1);
                                  v515 = v512[16];
                                  if (v513 == 0x6365722E64337663 && v514 == 0x73746174532E6E6FLL && v515 == 46)
                                  {
                                    v518 = sub_223187510();
                                    if (v647[23] >= 0)
                                      v519 = v647;
                                    else
                                      v519 = *(_BYTE **)v647;
                                    if (v647[23] >= 0)
                                      v520 = v647[23];
                                    else
                                      v520 = *(_QWORD *)&v647[8];
                                    v646[0] = v598;
                                    sub_22387FA8C(v518, v519, v520, v646, (uint64_t)"FilteredMeshingSuggestion", 25);
                                  }
                                }
                                kdebug_trace();
                                if ((v647[23] & 0x80000000) != 0)
                                  operator delete(*(void **)v647);
                                *(_QWORD *)v649 = "cv3d.recon.";
                                *(_QWORD *)&v649[8] = 11;
                                *(_QWORD *)&v649[16] = "Stats.Monitoring.SuggestionProvider";
                                *(_QWORD *)&v649[24] = 35;
                                sub_2231A9820((uint64_t)v649, (uint64_t)&v649[32], 0, 0, (std::string *)v646);
                                sub_224569D7C();
                                sub_224569A80();
                                if (os_variant_has_internal_diagnostics())
                                {
                                  v521 = sub_2241471F8();
                                  v522 = v521[2];
                                  if (!v522)
                                  {
                                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                                    {
                                      abort();
                                    }
                                    v522 = v521[2];
                                  }
                                  v523 = *(_QWORD *)(v522 + 64);
                                  v524 = (std::mutex *)(v523 + 32);
                                  std::mutex::lock((std::mutex *)(v523 + 32));
                                  v526 = *(_QWORD *)(v523 + 96);
                                  v525 = *(_QWORD *)(v523 + 104);
                                  std::mutex::unlock(v524);
                                  if (v526 != v525)
                                  {
                                    v527 = v646[23];
                                    v528 = *(_BYTE **)v646;
                                    sub_2241471F8();
                                    v529 = v527 >= 0 ? v646 : v528;
                                    v530 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v529);
                                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v530 + 24))(v530))
                                    {
                                      memset(v649, 0, 32);
                                      *(_DWORD *)&v649[32] = 728325608;
                                      kdebug_trace();
                                      LOBYTE(v642) = v591;
                                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v530 + 24))(v530))
                                      {
                                        *(_QWORD *)v647 = operator new(0x20uLL);
                                        *(_OWORD *)&v647[8] = xmmword_2245B8D50;
                                        strcpy(*(char **)v647, "FilteredOccupancySuggestion");
                                        *(_QWORD *)&v645[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                                        *((_QWORD *)&v645[0] + 1) = 2;
                                        v531 = sub_2241471F8();
                                        sub_22389549C((uint64_t)v531, v530, (char *)&v642, (uint64_t)v647, v645);
                                        if ((v647[23] & 0x80000000) != 0)
                                          operator delete(*(void **)v647);
                                      }
                                      kdebug_trace();
                                    }
                                  }
                                }
                                memset(v649, 0, 32);
                                *(_DWORD *)&v649[32] = 728325624;
                                kdebug_trace();
                                v532 = v646[23];
                                if (v646[23] < 0)
                                  v532 = *(_QWORD *)&v646[8];
                                if (v532 >= 0x11)
                                {
                                  v533 = v646;
                                  if (v646[23] < 0)
                                    v533 = *(_BYTE **)v646;
                                  v534 = *(_QWORD *)v533;
                                  v535 = *((_QWORD *)v533 + 1);
                                  v536 = v533[16];
                                  if (v534 == 0x6365722E64337663 && v535 == 0x73746174532E6E6FLL && v536 == 46)
                                  {
                                    v539 = sub_223187510();
                                    if (v646[23] >= 0)
                                      v540 = v646;
                                    else
                                      v540 = *(_BYTE **)v646;
                                    if (v646[23] >= 0)
                                      v541 = v646[23];
                                    else
                                      v541 = *(_QWORD *)&v646[8];
                                    v647[0] = v591;
                                    sub_22387FA8C(v539, v540, v541, v647, (uint64_t)"FilteredOccupancySuggestion", 27);
                                  }
                                }
                                kdebug_trace();
                                if ((v646[23] & 0x80000000) != 0)
                                {
                                  operator delete(*(void **)v646);
                                  if (v598 == 1 && v496)
                                    goto LABEL_790;
                                }
                                else if (v598 == 1 && v496)
                                {
LABEL_790:
                                  v543 = 1;
LABEL_803:
                                  *(_BYTE *)(v95 + 1384) = v543;
                                  *(_QWORD *)v649 = *v454;
                                  sub_2238AD96C(v95, (unsigned __int8 *)&v635, (uint64_t *)v649);
                                  if (*((_QWORD *)&v653[1] + 1))
                                  {
                                    *(_QWORD *)&v653[2] = *((_QWORD *)&v653[1] + 1);
                                    operator delete(*((void **)&v653[1] + 1));
                                  }
                                  if (*(_QWORD *)&v653[0])
                                  {
                                    *((_QWORD *)&v653[0] + 1) = *(_QWORD *)&v653[0];
                                    operator delete(*(void **)&v653[0]);
                                  }
                                  sub_223198030((uint64_t)&v651, (_QWORD *)v652);
                                  v547 = (_QWORD *)*((_QWORD *)&v637 + 1);
                                  if (*((_QWORD *)&v637 + 1))
                                  {
                                    do
                                    {
                                      v548 = (_QWORD *)*v547;
                                      operator delete(v547);
                                      v547 = v548;
                                    }
                                    while (v548);
                                  }
                                  v549 = v636;
                                  v636 = 0;
                                  if (v549)
                                    operator delete(v549);
                                  goto LABEL_811;
                                }
                                if (v594)
                                {
                                  v649[0] = 5;
                                  v545 = sub_2238B14D0((float *)(v95 + 1392), 5u, v649);
                                }
                                else
                                {
                                  v546 = (float *)(v95 + 1392);
                                  if (BYTE2(v635))
                                  {
                                    v649[0] = 3;
                                    v545 = sub_2238B14D0(v546, 3u, v649);
                                  }
                                  else
                                  {
                                    v649[0] = 4;
                                    v545 = sub_2238B14D0(v546, 4u, v649);
                                  }
                                }
                                ++*((_DWORD *)v545 + 5);
                                v543 = 2;
                                goto LABEL_803;
                              }
                            }
                            else
                            {
                              v493 = v490 + 1;
                              *(_QWORD *)(v95 + 1512) = v493;
                              if (v493)
                                goto LABEL_707;
                            }
                            v594 = 0;
                            v496 = 1;
                            v591 = 1;
                            goto LABEL_720;
                          }
                          v466 = *(float *)(v95 + 1464);
                          *(_QWORD *)v647 = &off_24EC21420;
                          sub_2231FBAA0(v95 + 360, (uint64_t *)&v647[8]);
                          *(_QWORD *)v646 = &off_24EC21230;
                          sub_2238B3430((uint64_t *)&v646[8], *(_QWORD *)(v95 + 456), *(std::__shared_weak_count **)(v95 + 464));
                          *(_QWORD *)&v645[0] = &off_24EC21420;
                          sub_2231FBAA0(v95 + 888, (uint64_t *)v645 + 1);
                          v642 = &off_24EC21230;
                          sub_2238B3430((uint64_t *)&v643, *(_QWORD *)(v95 + 984), *(std::__shared_weak_count **)(v95 + 992));
                          v639 = &off_24EC21230;
                          sub_2231BE6D4(v620, (uint64_t *)&v640);
                          sub_2238FC0D8((uint64_t)v593, v628, (uint64_t)v647, (uint64_t)v646, (uint64_t)v645, (uint64_t)&v642, (uint64_t)&v607, (uint64_t)&v639, v649, v466);
                          sub_223198030((uint64_t)&v651, (_QWORD *)v652);
                          v651 = *(uint64_t (***)())v649;
                          v652 = *(_OWORD *)&v649[8];
                          if (*(_QWORD *)&v649[16])
                          {
                            *(_QWORD *)(*(_QWORD *)&v649[8] + 16) = &v652;
                            *(_QWORD *)v649 = &v649[8];
                            *(_QWORD *)&v649[8] = 0;
                            *(_QWORD *)&v649[16] = 0;
                            v467 = *(void **)&v653[0];
                            if (!*(_QWORD *)&v653[0])
                            {
LABEL_666:
                              v653[0] = *(_OWORD *)&v649[24];
                              *(_QWORD *)&v653[1] = *(_QWORD *)&v649[40];
                              memset(&v649[24], 0, 24);
                              v468 = (void *)*((_QWORD *)&v653[1] + 1);
                              if (*((_QWORD *)&v653[1] + 1))
                              {
                                *(_QWORD *)&v653[2] = *((_QWORD *)&v653[1] + 1);
                                operator delete(*((void **)&v653[1] + 1));
                                v468 = *(void **)&v649[24];
                              }
                              *(_OWORD *)((char *)&v653[1] + 8) = *(_OWORD *)&v649[48];
                              *((_QWORD *)&v653[2] + 1) = v650;
                              v650 = 0;
                              *(_OWORD *)&v649[48] = 0uLL;
                              if (v468)
                              {
                                *(_QWORD *)&v649[32] = v468;
                                operator delete(v468);
                              }
                              sub_223198030((uint64_t)v649, *(_QWORD **)&v649[8]);
                              v469 = (std::__shared_weak_count *)*((_QWORD *)&v640 + 1);
                              if (*((_QWORD *)&v640 + 1))
                              {
                                v470 = (unint64_t *)(*((_QWORD *)&v640 + 1) + 8);
                                do
                                  v471 = __ldaxr(v470);
                                while (__stlxr(v471 - 1, v470));
                                if (!v471)
                                {
                                  ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                                  std::__shared_weak_count::__release_weak(v469);
                                }
                              }
                              v472 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                              if (*((_QWORD *)&v643 + 1))
                              {
                                v473 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                                do
                                  v474 = __ldaxr(v473);
                                while (__stlxr(v474 - 1, v473));
                                if (!v474)
                                {
                                  ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                                  std::__shared_weak_count::__release_weak(v472);
                                }
                              }
                              v475 = *(std::__shared_weak_count **)&v645[1];
                              if (*(_QWORD *)&v645[1])
                              {
                                v476 = (unint64_t *)(*(_QWORD *)&v645[1] + 8);
                                do
                                  v477 = __ldaxr(v476);
                                while (__stlxr(v477 - 1, v476));
                                if (!v477)
                                {
                                  ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
                                  std::__shared_weak_count::__release_weak(v475);
                                }
                              }
                              v478 = *(std::__shared_weak_count **)&v646[16];
                              if (*(_QWORD *)&v646[16])
                              {
                                v479 = (unint64_t *)(*(_QWORD *)&v646[16] + 8);
                                do
                                  v480 = __ldaxr(v479);
                                while (__stlxr(v480 - 1, v479));
                                if (!v480)
                                {
                                  ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
                                  std::__shared_weak_count::__release_weak(v478);
                                }
                              }
                              v481 = *(std::__shared_weak_count **)&v647[16];
                              if (*(_QWORD *)&v647[16])
                              {
                                v482 = (unint64_t *)(*(_QWORD *)&v647[16] + 8);
                                do
                                  v483 = __ldaxr(v482);
                                while (__stlxr(v483 - 1, v482));
                                if (!v483)
                                {
                                  ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
                                  std::__shared_weak_count::__release_weak(v481);
                                }
                              }
                              sub_2238FDBA0((float **)&v651);
                              goto LABEL_696;
                            }
                          }
                          else
                          {
                            v651 = (uint64_t (**)())&v652;
                            v467 = *(void **)&v653[0];
                            if (!*(_QWORD *)&v653[0])
                              goto LABEL_666;
                          }
                          *((_QWORD *)&v653[0] + 1) = v467;
                          operator delete(v467);
                          goto LABEL_666;
                        }
                        *(_BYTE *)(v95 + 1384) = 2;
                        LOBYTE(v651) = 4;
                        v500 = sub_2238B14D0((float *)(v95 + 1392), 4u, &v651);
                        ++*((_DWORD *)v500 + 5);
                        v651 = (uint64_t (**)())*v454;
                        sub_2238AD96C(v95, (unsigned __int8 *)&v635, (uint64_t *)&v651);
                      }
LABEL_811:
                      v550 = (std::__shared_weak_count *)*((_QWORD *)&v613 + 1);
                      if (*((_QWORD *)&v613 + 1))
                      {
                        v551 = (unint64_t *)(*((_QWORD *)&v613 + 1) + 8);
                        do
                          v552 = __ldaxr(v551);
                        while (__stlxr(v552 - 1, v551));
                        if (!v552)
                        {
                          ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
                          std::__shared_weak_count::__release_weak(v550);
                        }
                      }
                      v553 = (std::__shared_weak_count *)*((_QWORD *)&v610 + 1);
                      if (*((_QWORD *)&v610 + 1))
                      {
                        v554 = (unint64_t *)(*((_QWORD *)&v610 + 1) + 8);
                        do
                          v555 = __ldaxr(v554);
                        while (__stlxr(v555 - 1, v554));
                        if (!v555)
                        {
                          ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
                          std::__shared_weak_count::__release_weak(v553);
                        }
                      }
                      v556 = *(std::__shared_weak_count **)&v609[16];
                      if (*(_QWORD *)&v609[16])
                      {
                        v557 = (unint64_t *)(*(_QWORD *)&v609[16] + 8);
                        do
                          v558 = __ldaxr(v557);
                        while (__stlxr(v558 - 1, v557));
                        if (!v558)
                        {
                          ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
                          std::__shared_weak_count::__release_weak(v556);
                        }
                      }
                      v559 = *(std::__shared_weak_count **)&v608[8];
                      if (*(_QWORD *)&v608[8])
                      {
                        v560 = (unint64_t *)(*(_QWORD *)&v608[8] + 8);
                        do
                          v561 = __ldaxr(v560);
                        while (__stlxr(v561 - 1, v560));
                        if (!v561)
                        {
                          ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
                          std::__shared_weak_count::__release_weak(v559);
                        }
                      }
                      v562 = (char *)v624[1];
                      if (v624[1])
                      {
                        v563 = (char *)v625;
                        v564 = v624[1];
                        if ((void *)v625 != v624[1])
                        {
                          do
                          {
                            v565 = (std::__shared_weak_count *)*((_QWORD *)v563 - 5);
                            if (v565)
                            {
                              v566 = (unint64_t *)&v565->__shared_owners_;
                              do
                                v567 = __ldaxr(v566);
                              while (__stlxr(v567 - 1, v566));
                              if (!v567)
                              {
                                ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
                                std::__shared_weak_count::__release_weak(v565);
                              }
                            }
                            v563 -= 56;
                          }
                          while (v563 != v562);
                          v564 = v624[1];
                        }
                        *(_QWORD *)&v625 = v562;
                        operator delete(v564);
                      }
                      v568 = (char *)__p[0];
                      if (__p[0])
                      {
                        if (__p[1] != __p[0])
                        {
                          v569 = (char *)__p[1] - (char *)__p[0] - 176;
                          v570 = (char *)__p[1];
                          if (v569 < 0xB0)
                            goto LABEL_885;
                          v571 = v569 / 0xB0 + 1;
                          v570 = (char *)__p[1] - 176 * (v571 & 0x3FFFFFFFFFFFFFELL);
                          v572 = (char *)__p[1] - 272;
                          v573 = v571 & 0x3FFFFFFFFFFFFFELL;
                          do
                          {
                            v572[22] = &off_24EC20828;
                            *v572 = &off_24EC20828;
                            v572 -= 44;
                            v573 -= 2;
                          }
                          while (v573);
                          if (v571 != (v571 & 0x3FFFFFFFFFFFFFELL))
                          {
LABEL_885:
                            do
                            {
                              *((_QWORD *)v570 - 12) = &off_24EC20828;
                              v570 -= 176;
                            }
                            while (v570 != v568);
                          }
                        }
                        __p[1] = v568;
                        operator delete(v568);
                      }
                      v574 = (std::__shared_weak_count *)*((_QWORD *)&v621 + 1);
                      if (*((_QWORD *)&v621 + 1))
                      {
                        v575 = (unint64_t *)(*((_QWORD *)&v621 + 1) + 8);
                        do
                          v576 = __ldaxr(v575);
                        while (__stlxr(v576 - 1, v575));
                        if (!v576)
                        {
                          ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
                          std::__shared_weak_count::__release_weak(v574);
                        }
                      }
                      v577 = (std::__shared_weak_count *)*((_QWORD *)&v620 + 1);
                      if (*((_QWORD *)&v620 + 1))
                      {
                        v578 = (unint64_t *)(*((_QWORD *)&v620 + 1) + 8);
                        do
                          v579 = __ldaxr(v578);
                        while (__stlxr(v579 - 1, v578));
                        if (!v579)
                        {
                          ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
                          std::__shared_weak_count::__release_weak(v577);
                        }
                      }
                      return v635;
                    }
                    *(_QWORD *)v649 = v645;
                    *(std::chrono::steady_clock::time_point *)&v649[8] = std::chrono::steady_clock::now();
                    *(std::chrono::system_clock::time_point *)&v649[16] = std::chrono::system_clock::now();
                    *(_DWORD *)&v649[24] = 3;
                    *(_QWORD *)&v649[32] = "unknown file";
                    *(_DWORD *)&v649[40] = 514;
                    v650 = 0;
                    *(_QWORD *)&v649[48] = "unknown function";
                    *(_QWORD *)&v649[56] = 0;
                    v371 = **(_QWORD **)v649;
                    v372 = (const char *)(**(_QWORD **)v649 + 16);
                    v585 = v372;
                    v588 = **(_QWORD **)v649;
                    if (*(char *)(**(_QWORD **)v649 + 39) < 0)
                    {
                      v372 = *(const char **)(v371 + 16);
                      v373 = *(_QWORD *)(v371 + 24);
                    }
                    else
                    {
                      v373 = *(unsigned __int8 *)(**(_QWORD **)v649 + 39);
                    }
                    v408 = atomic_load((unsigned __int8 *)&qword_255788F58);
                    if ((v408 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                    {
                      sub_224568628((uint64_t)&v651);
                      sub_223199C58("com.apple.cv3d", (unint64_t)&v651, &xmmword_255788F40);
                      if (LOBYTE(v653[0]) && SHIBYTE(v652) < 0)
                        operator delete(v651);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                      __cxa_guard_release(&qword_255788F58);
                      v95 = v595;
                    }
                    if (byte_255788F57 >= 0)
                      v409 = (const char *)&xmmword_255788F40;
                    else
                      v409 = (const char *)xmmword_255788F40;
                    if (byte_255788F57 >= 0)
                      v410 = byte_255788F57;
                    else
                      v410 = *((_QWORD *)&xmmword_255788F40 + 1);
                    v651 = (uint64_t (**)())os_log_create(v409, v372);
                    v411 = &v652;
                    if (v410 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    if (v410 >= 0x17)
                    {
                      v412 = (v410 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v410 | 7) != 0x17)
                        v412 = v410 | 7;
                      v413 = v412 + 1;
                      v411 = (__int128 *)operator new(v412 + 1);
                      *((_QWORD *)&v652 + 1) = v410;
                      *(_QWORD *)&v653[0] = v413 | 0x8000000000000000;
                      *(_QWORD *)&v652 = v411;
                    }
                    else
                    {
                      BYTE7(v653[0]) = v410;
                      if (!v410)
                      {
LABEL_577:
                        *((_BYTE *)v411 + v410) = 0;
                        BYTE8(v653[0]) = 1;
                        v414 = &v653[1];
                        if (v373 > 0x7FFFFFFFFFFFFFF7)
                          sub_22316DBC0();
                        if (v373 >= 0x17)
                        {
                          v415 = (v373 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v373 | 7) != 0x17)
                            v415 = v373 | 7;
                          v416 = v415 + 1;
                          v414 = operator new(v415 + 1);
                          *((_QWORD *)&v653[1] + 1) = v373;
                          *(_QWORD *)&v653[2] = v416 | 0x8000000000000000;
                          *(_QWORD *)&v653[1] = v414;
                          v104 = v597;
                        }
                        else
                        {
                          BYTE7(v653[2]) = v373;
                          v104 = v597;
                          if (!v373)
                            goto LABEL_585;
                        }
                        memmove(v414, v372, v373);
LABEL_585:
                        *((_BYTE *)v414 + v373) = 0;
                        BYTE8(v653[2]) = 1;
                        v417 = v651;
                        if (SBYTE7(v653[2]) < 0)
                          operator delete(*(void **)&v653[1]);
                        if (BYTE8(v653[0]) && SBYTE7(v653[0]) < 0)
                          operator delete((void *)v652);
                        if (v651)
                          os_release(v651);
                        if (v370 && *(_QWORD *)(v370 + 24))
                        {
                          v418 = _os_log_pack_size();
                          v419 = (float *)operator new(v418, (std::align_val_t)8uLL);
                          v420 = (std::__shared_weak_count *)operator new();
                          v421 = v420;
                          v420->__shared_owners_ = 0;
                          v422 = (unint64_t *)&v420->__shared_owners_;
                          v420->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                          v420->__shared_weak_owners_ = 0;
                          v420[1].__vftable = (std::__shared_weak_count_vtbl *)v419;
                          v651 = (uint64_t (**)())v419;
                          *(_QWORD *)&v652 = v419;
                          *((_QWORD *)&v652 + 1) = v420;
                          do
                            v423 = __ldxr(v422);
                          while (__stxr(v423 + 1, v422));
                          memset(v653, 0, 24);
                          do
                            v424 = __ldaxr(v422);
                          while (__stlxr(v424 - 1, v422));
                          if (!v424)
                          {
                            ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
                            std::__shared_weak_count::__release_weak(v421);
                          }
                          v425 = (float *)v651;
                          v426 = (_DWORD *)_os_log_pack_fill();
                          *v426 = 67109120;
                          v426[1] = v364;
                          v427 = operator new();
                          v428 = *(unsigned __int8 *)(v588 + 39);
                          v429 = v585;
                          if ((v428 & 0x80u) != 0)
                          {
                            v429 = *(const char **)(v588 + 16);
                            v428 = *(_QWORD *)(v588 + 24);
                          }
                          *(_QWORD *)v427 = v425;
                          *(_OWORD *)(v427 + 8) = v652;
                          v652 = 0uLL;
                          *(_OWORD *)(v427 + 24) = v653[0];
                          v653[0] = 0uLL;
                          *(_QWORD *)(v427 + 40) = v429;
                          *(_QWORD *)(v427 + 48) = v428;
                          *(_BYTE *)(v427 + 56) = 1;
                          *(_QWORD *)v646 = 0;
                          *(_QWORD *)v647 = v427;
                          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v370 + 24) + 40))(*(_QWORD *)(v370 + 24), v647);
                          v430 = *(_QWORD *)v647;
                          *(_QWORD *)v647 = 0;
                          if (v430)
                          {
                            v431 = *(std::__shared_weak_count **)(v430 + 32);
                            if (v431)
                            {
                              v432 = (unint64_t *)&v431->__shared_owners_;
                              do
                                v433 = __ldaxr(v432);
                              while (__stlxr(v433 - 1, v432));
                              if (!v433)
                              {
                                ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                                std::__shared_weak_count::__release_weak(v431);
                              }
                            }
                            v434 = *(std::__shared_weak_count **)(v430 + 16);
                            if (v434)
                            {
                              v435 = (unint64_t *)&v434->__shared_owners_;
                              do
                                v436 = __ldaxr(v435);
                              while (__stlxr(v436 - 1, v435));
                              if (!v436)
                              {
                                ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
                                std::__shared_weak_count::__release_weak(v434);
                              }
                            }
                            MEMORY[0x227684CE8](v430, 0x10F0C40B62ED6C6);
                            v437 = *(_QWORD *)v646;
                            *(_QWORD *)v646 = 0;
                            if (v437)
                            {
                              v438 = *(std::__shared_weak_count **)(v437 + 32);
                              if (v438)
                              {
                                v439 = (unint64_t *)&v438->__shared_owners_;
                                do
                                  v440 = __ldaxr(v439);
                                while (__stlxr(v440 - 1, v439));
                                if (!v440)
                                {
                                  ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                                  std::__shared_weak_count::__release_weak(v438);
                                }
                              }
                              v441 = *(std::__shared_weak_count **)(v437 + 16);
                              if (v441)
                              {
                                v442 = (unint64_t *)&v441->__shared_owners_;
                                do
                                  v443 = __ldaxr(v442);
                                while (__stlxr(v443 - 1, v442));
                                if (!v443)
                                {
                                  ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                                  std::__shared_weak_count::__release_weak(v441);
                                }
                              }
                              MEMORY[0x227684CE8](v437, 0x10F0C40B62ED6C6);
                            }
                          }
                          v444 = (std::__shared_weak_count *)*((_QWORD *)&v653[0] + 1);
                          if (*((_QWORD *)&v653[0] + 1))
                          {
                            v445 = (unint64_t *)(*((_QWORD *)&v653[0] + 1) + 8);
                            do
                              v446 = __ldaxr(v445);
                            while (__stlxr(v446 - 1, v445));
                            if (!v446)
                            {
                              ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
                              std::__shared_weak_count::__release_weak(v444);
                            }
                          }
                          v447 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
                          if (*((_QWORD *)&v652 + 1))
                          {
                            v448 = (unint64_t *)(*((_QWORD *)&v652 + 1) + 8);
                            do
                              v449 = __ldaxr(v448);
                            while (__stlxr(v449 - 1, v448));
                            if (!v449)
                            {
                              ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                              std::__shared_weak_count::__release_weak(v447);
                            }
                          }
                        }
                        else
                        {
                          os_log_type_enabled(v417, OS_LOG_TYPE_INFO);
                          LODWORD(v651) = 67109120;
                          HIDWORD(v651) = v364;
                          v450 = (void *)_os_log_send_and_compose_impl();
                          if (v450)
                            free(v450);
                        }
                        if (v368)
                        {
                          sub_22322C138((uint64_t)v649, "DM: DMI %d", v364);
                          sub_223182C08((uint64_t)v649);
                        }
                        sub_223182C08((uint64_t)v649);
                        v451 = v650;
                        if (v650)
                        {
                          v452 = (unint64_t *)&v650->__shared_owners_;
                          do
                            v453 = __ldaxr(v452);
                          while (__stlxr(v453 - 1, v452));
                          if (!v453)
                          {
                            ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                            std::__shared_weak_count::__release_weak(v451);
                          }
                        }
                        goto LABEL_644;
                      }
                    }
                    memmove(v411, v409, v410);
                    goto LABEL_577;
                  }
                  v365 = (char *)(v95 + 1471);
                  v363 = 1;
LABEL_494:
                  *v365 = v363;
                  goto LABEL_495;
                }
                xmmword_2540CC940 = (__int128)*v88;
                *(float32x4_t *)algn_2540CC950 = v354;
                xmmword_2540CC960 = (__int128)v353;
                xmmword_2540CC970 = v352;
              }
              else
              {
                xmmword_2540CC940 = (__int128)*v88;
                *(float32x4_t *)algn_2540CC950 = v354;
                xmmword_2540CC960 = (__int128)v353;
                xmmword_2540CC970 = v352;
                byte_2540CC980 = 1;
              }
              v363 = 0;
              v364 = 0;
              v365 = (char *)(v95 + 1471);
              goto LABEL_494;
            }
            if (*(_BYTE *)(v104 + 56))
            {
              if ((!*(_DWORD *)(v104 + 32) || !*(_DWORD *)(v104 + 36))
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              sub_223C3BF78(v104, (uint64_t)&v651);
              v88 = (float32x4_t *)*((_QWORD *)&v652 + 1);
              a6 = v652;
              *(_OWORD *)v647 = v653[0];
              *(_OWORD *)&v647[10] = *(_OWORD *)((char *)v653 + 10);
            }
            *(_QWORD *)v649 = &off_24EC200A8;
            *(_QWORD *)&v649[8] = a6;
            *(_QWORD *)&v649[16] = v88;
            *(_OWORD *)&v649[24] = *(_OWORD *)v647;
            v160 = *(_OWORD *)&v647[10];
            *(_OWORD *)&v649[34] = *(_OWORD *)&v647[10];
            if (*(_BYTE *)(v104 + 288))
            {
              if ((!*(_DWORD *)(v104 + 264) || !*(_DWORD *)(v104 + 268))
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              sub_223C3F490(v104 + 232, (uint64_t)&v651);
              v160 = v652;
              *(_OWORD *)v646 = v653[0];
              *(_OWORD *)&v646[10] = *(_OWORD *)((char *)v653 + 10);
            }
            *(_QWORD *)v647 = &off_24EC21420;
            *(_OWORD *)&v647[8] = v160;
            *(_OWORD *)&v647[24] = *(_OWORD *)v646;
            v161 = *(_OWORD *)&v646[10];
            *(_OWORD *)&v647[34] = *(_OWORD *)&v646[10];
            if (*(_BYTE *)(v104 + 120))
            {
              if ((!*(_DWORD *)(v104 + 96) || !*(_DWORD *)(v104 + 100))
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              sub_223C3BF78(v104 + 64, (uint64_t)&v651);
              v161 = v652;
              v645[0] = v653[0];
              *(_OWORD *)((char *)v645 + 10) = *(_OWORD *)((char *)v653 + 10);
            }
            *(_QWORD *)v646 = &off_24EC200A8;
            *(_OWORD *)&v646[8] = v161;
            *(_OWORD *)&v646[24] = v645[0];
            *(_OWORD *)&v646[34] = *(_OWORD *)((char *)v645 + 10);
            if ((!*(_DWORD *)&v646[32] || !*(_DWORD *)&v646[36])
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 287, (uint64_t)"!unscaled_conf.Empty()", 22, (uint64_t)"Expect valid confidence", 23, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            *(_QWORD *)&v645[0] = &off_24EC21230;
            memset((char *)v645 + 8, 0, 42);
            v162 = *(_QWORD *)(v597 + 216);
            if (v162)
            {
              v651 = &off_24EC21230;
              sub_2231BE6D4(v162 + 56, (uint64_t *)&v652);
              *(_OWORD *)((char *)v645 + 8) = v652;
              *(_OWORD *)((char *)&v645[1] + 8) = v653[0];
              *(_OWORD *)((char *)&v645[2] + 2) = *(_OWORD *)((char *)v653 + 10);
            }
            v651 = &off_24EC200A8;
            if (v88)
            {
              v163 = &v88->u64[1];
              do
                v164 = __ldxr(v163);
              while (__stxr(v164 + 1, v163));
              v165 = *(_WORD *)&v649[48];
              do
                v166 = __ldxr(v163);
              while (__stxr(v166 + 1, v163));
              v653[0] = *(_OWORD *)&v649[24];
              *(_QWORD *)&v653[1] = *(_QWORD *)&v649[40];
              do
                v167 = __ldxr(v163);
              while (__stxr(v167 + 1, v163));
              *(_QWORD *)&v652 = a6;
              *((_QWORD *)&v652 + 1) = v88;
              WORD4(v653[1]) = v165;
              do
                v168 = __ldaxr(v163);
              while (__stlxr(v168 - 1, v163));
              if (!v168)
              {
                (*(void (**)(float32x4_t *))(v88->i64[0] + 16))(v88);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v88);
              }
              do
                v169 = __ldaxr(v163);
              while (__stlxr(v169 - 1, v163));
              if (v169)
              {
                v642 = &off_24EC200A8;
                v170 = *(_QWORD *)&v646[8];
                v171 = *(std::__shared_weak_count **)&v646[16];
                if (*(_QWORD *)&v646[16])
                  goto LABEL_215;
LABEL_229:
                v643 = v170;
                *(_OWORD *)v644 = *(_OWORD *)&v646[24];
                *(_QWORD *)&v644[16] = *(_QWORD *)&v646[40];
                *(_WORD *)&v644[24] = *(_WORD *)&v646[48];
                goto LABEL_230;
              }
              (*(void (**)(float32x4_t *))(v88->i64[0] + 16))(v88);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v88);
              v642 = &off_24EC200A8;
              v170 = *(_QWORD *)&v646[8];
              v171 = *(std::__shared_weak_count **)&v646[16];
              if (!*(_QWORD *)&v646[16])
                goto LABEL_229;
            }
            else
            {
              v652 = a6;
              v653[0] = *(_OWORD *)&v649[24];
              *(_QWORD *)&v653[1] = *(_QWORD *)&v649[40];
              WORD4(v653[1]) = *(_WORD *)&v649[48];
              v642 = &off_24EC200A8;
              v170 = *(_QWORD *)&v646[8];
              v171 = *(std::__shared_weak_count **)&v646[16];
              if (!*(_QWORD *)&v646[16])
                goto LABEL_229;
            }
LABEL_215:
            v172 = (unint64_t *)&v171->__shared_owners_;
            do
              v173 = __ldxr(v172);
            while (__stxr(v173 + 1, v172));
            v174 = *(_WORD *)&v646[48];
            do
              v175 = __ldxr(v172);
            while (__stxr(v175 + 1, v172));
            *(_OWORD *)v644 = *(_OWORD *)&v646[24];
            *(_QWORD *)&v644[16] = *(_QWORD *)&v646[40];
            do
              v176 = __ldxr(v172);
            while (__stxr(v176 + 1, v172));
            *(_QWORD *)&v643 = v170;
            *((_QWORD *)&v643 + 1) = v171;
            *(_WORD *)&v644[24] = v174;
            do
              v177 = __ldaxr(v172);
            while (__stlxr(v177 - 1, v172));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
            do
              v178 = __ldaxr(v172);
            while (__stlxr(v178 - 1, v172));
            if (!v178)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
LABEL_230:
            v639 = &off_24EC21420;
            v179 = *(_QWORD *)&v647[8];
            v180 = *(std::__shared_weak_count **)&v647[16];
            if (*(_QWORD *)&v647[16])
            {
              v181 = (unint64_t *)(*(_QWORD *)&v647[16] + 8);
              do
                v182 = __ldxr(v181);
              while (__stxr(v182 + 1, v181));
              v183 = *(_WORD *)&v647[48];
              do
                v184 = __ldxr(v181);
              while (__stxr(v184 + 1, v181));
              *(_OWORD *)v641 = *(_OWORD *)&v647[24];
              *(_QWORD *)&v641[16] = *(_QWORD *)&v647[40];
              do
                v185 = __ldxr(v181);
              while (__stxr(v185 + 1, v181));
              *(_QWORD *)&v640 = v179;
              *((_QWORD *)&v640 + 1) = v180;
              *(_WORD *)&v641[24] = v183;
              do
                v186 = __ldaxr(v181);
              while (__stlxr(v186 - 1, v181));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
              }
              do
                v187 = __ldaxr(v181);
              while (__stlxr(v187 - 1, v181));
              if (v187)
              {
                if (*(float *)(v595 + 1444) == 1.0)
                  goto LABEL_380;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
                if (*(float *)(v595 + 1444) == 1.0)
                  goto LABEL_380;
              }
            }
            else
            {
              v640 = *(unint64_t *)&v647[8];
              *(_OWORD *)v641 = *(_OWORD *)&v647[24];
              *(_QWORD *)&v641[16] = *(_QWORD *)&v647[40];
              *(_WORD *)&v641[24] = *(_WORD *)&v647[48];
              if (*(float *)(v595 + 1444) == 1.0)
                goto LABEL_380;
            }
            v636 = &off_24EC218E0;
            sub_2231DC2F8(v595 + 8, (uint64_t *)&v637);
            sub_2238AAD70((uint64_t)&v651, (uint64_t)&v636);
            v195 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
            if (*((_QWORD *)&v637 + 1))
            {
              v196 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
              do
                v197 = __ldaxr(v196);
              while (__stlxr(v197 - 1, v196));
              if (!v197)
              {
                ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                std::__shared_weak_count::__release_weak(v195);
              }
            }
            v636 = &off_24EC200A8;
            sub_2231A3AA0(v595 + 8, (uint64_t *)&v637);
            v198 = v637;
            v637 = 0uLL;
            v199 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
            v652 = v198;
            if (v199)
            {
              v200 = (unint64_t *)&v199->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            v653[0] = *(_OWORD *)v638;
            *(_OWORD *)((char *)v653 + 10) = *(_OWORD *)&v638[10];
            v202 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
            if (*((_QWORD *)&v637 + 1))
            {
              v203 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
              if (!v204)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            v636 = &off_24EC218E0;
            sub_2231DC2F8(v595 + 96, (uint64_t *)&v637);
            sub_2238AAD70((uint64_t)v646, (uint64_t)&v636);
            v205 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
            if (*((_QWORD *)&v637 + 1))
            {
              v206 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 - 1, v206));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            v636 = &off_24EC200A8;
            sub_2231A3AA0(v595 + 96, (uint64_t *)&v637);
            v208 = v637;
            v637 = 0uLL;
            v209 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
            v643 = v208;
            if (v209)
            {
              v210 = (unint64_t *)&v209->__shared_owners_;
              do
                v211 = __ldaxr(v210);
              while (__stlxr(v211 - 1, v210));
              if (!v211)
              {
                ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                std::__shared_weak_count::__release_weak(v209);
              }
            }
            *(_OWORD *)v644 = *(_OWORD *)v638;
            *(_OWORD *)&v644[10] = *(_OWORD *)&v638[10];
            v212 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
            if (!*((_QWORD *)&v637 + 1))
              goto LABEL_284;
            v213 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
            do
              v214 = __ldaxr(v213);
            while (__stlxr(v214 - 1, v213));
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
              v215 = v645[2];
              v216 = DWORD1(v645[2]);
              if (LODWORD(v645[2]))
                v252 = DWORD1(v645[2]) == 0;
              else
                v252 = 1;
              if (v252)
                goto LABEL_337;
            }
            else
            {
LABEL_284:
              v215 = v645[2];
              v216 = DWORD1(v645[2]);
              if (LODWORD(v645[2]))
                v217 = DWORD1(v645[2]) == 0;
              else
                v217 = 1;
              if (v217)
                goto LABEL_337;
            }
            v636 = &off_24EC21FE8;
            sub_2231DCF04(v595 + 184, (uint64_t *)&v637);
            v218 = (float)*(unsigned int *)&v638[8] / (float)v215;
            if (*(_DWORD *)&v638[12] != (float)(v218 * (float)v216)
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 38, (uint64_t)"static_cast<uint32_t>(in_view.Height() * scale_factor) == out_view.Height()", 75, (uint64_t)"Expected scaling requests with preserved aspect ratio", 53, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v219 = *((_QWORD *)&v645[0] + 1);
            if (!*((_QWORD *)&v645[0] + 1))
              goto LABEL_305;
            v220 = *(std::__shared_weak_count **)&v645[1];
            if (*(_QWORD *)&v645[1])
            {
              v221 = (unint64_t *)(*(_QWORD *)&v645[1] + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
              do
                v223 = __ldaxr(v221);
              while (__stlxr(v223 - 1, v221));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
              v224 = *(std::__shared_weak_count **)&v645[1];
              v219 = *((_QWORD *)&v645[0] + 1);
              if (*(_QWORD *)&v645[1])
              {
                v225 = (unint64_t *)(*(_QWORD *)&v645[1] + 8);
                do
                  v226 = __ldxr(v225);
                while (__stxr(v226 + 1, v225));
                do
                  v227 = __ldaxr(v225);
                while (__stlxr(v227 - 1, v225));
                if (!v227)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
            }
            if (BYTE1(v645[3]))
              (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v219 + 96))(&v648, v219, 0);
            else
LABEL_305:
              v648 = 0;
            v228 = *(unsigned int *)&v638[12];
            if (*(_DWORD *)&v638[12])
            {
              v229 = *(unsigned int *)&v638[8];
              if (*(_DWORD *)&v638[8])
              {
                v230 = 0;
                v231 = *(_DWORD *)&v638[20];
                v232 = *(_QWORD *)v638;
                v233 = DWORD2(v645[2]);
                v234 = HIDWORD(v645[2]);
                v235 = *((_QWORD *)&v645[1] + 1);
                do
                {
                  v236 = 0;
                  v237 = 0;
                  v238 = *(_DWORD *)&v638[16];
                  do
                  {
                    *(_DWORD *)(v232 + 4 * (v231 * v230) + 4 * v236) = *(_DWORD *)(v235 + 4 * (v234 * (int)(float)((float)(1.0 / v218) * (float)v230) + v233 * (int)(float)((float)(1.0 / v218) * (float)v237++)));
                    v236 += v238;
                  }
                  while (v229 != v237);
                  ++v230;
                }
                while (v230 != v228);
              }
            }
            v239 = v648;
            v648 = 0;
            if (v239)
              (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
            v240 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
            if (*((_QWORD *)&v637 + 1))
            {
              v241 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
              do
                v242 = __ldaxr(v241);
              while (__stlxr(v242 - 1, v241));
              if (!v242)
              {
                ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                std::__shared_weak_count::__release_weak(v240);
              }
            }
            v636 = &off_24EC21230;
            sub_2231BE6D4(v595 + 184, (uint64_t *)&v637);
            v243 = v637;
            v637 = 0uLL;
            v244 = *(std::__shared_weak_count **)&v645[1];
            *(_OWORD *)((char *)v645 + 8) = v243;
            if (v244)
            {
              v245 = (unint64_t *)&v244->__shared_owners_;
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (!v246)
              {
                ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                std::__shared_weak_count::__release_weak(v244);
              }
            }
            *(_OWORD *)((char *)&v645[1] + 8) = *(_OWORD *)v638;
            *(_OWORD *)((char *)&v645[2] + 2) = *(_OWORD *)&v638[10];
            v247 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
            if (*((_QWORD *)&v637 + 1))
            {
              v248 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
              do
                v249 = __ldaxr(v248);
              while (__stlxr(v249 - 1, v248));
              if (!v249)
              {
                ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                std::__shared_weak_count::__release_weak(v247);
              }
            }
LABEL_337:
            v636 = &off_24EC22138;
            sub_2236B487C(v595 + 272, (uint64_t *)&v637);
            v253 = (float)*(unsigned int *)&v638[8] / (float)*(unsigned int *)&v647[32];
            if (*(_DWORD *)&v638[12] != (float)(v253 * (float)*(unsigned int *)&v647[36])
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 38, (uint64_t)"static_cast<uint32_t>(in_view.Height() * scale_factor) == out_view.Height()", 75, (uint64_t)"Expected scaling requests with preserved aspect ratio", 53, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v254 = *(_QWORD *)&v647[8];
            if (!*(_QWORD *)&v647[8])
              goto LABEL_355;
            v255 = *(std::__shared_weak_count **)&v647[16];
            if (*(_QWORD *)&v647[16])
            {
              v256 = (unint64_t *)(*(_QWORD *)&v647[16] + 8);
              do
                v257 = __ldxr(v256);
              while (__stxr(v257 + 1, v256));
              do
                v258 = __ldaxr(v256);
              while (__stlxr(v258 - 1, v256));
              if (!v258)
              {
                ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                std::__shared_weak_count::__release_weak(v255);
              }
              v259 = *(std::__shared_weak_count **)&v647[16];
              v254 = *(_QWORD *)&v647[8];
              if (*(_QWORD *)&v647[16])
              {
                v260 = (unint64_t *)(*(_QWORD *)&v647[16] + 8);
                do
                  v261 = __ldxr(v260);
                while (__stxr(v261 + 1, v260));
                do
                  v262 = __ldaxr(v260);
                while (__stlxr(v262 - 1, v260));
                if (!v262)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v259);
                }
              }
            }
            if (v647[49])
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v254 + 96))(&v648, v254, 0);
              v263 = *(_DWORD *)&v638[12];
              if (!*(_DWORD *)&v638[12])
                goto LABEL_363;
            }
            else
            {
LABEL_355:
              v648 = 0;
              v263 = *(_DWORD *)&v638[12];
              if (!*(_DWORD *)&v638[12])
              {
LABEL_363:
                v274 = v648;
                v648 = 0;
                if (v274)
                  (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
                v275 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
                if (*((_QWORD *)&v637 + 1))
                {
                  v276 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
                  do
                    v277 = __ldaxr(v276);
                  while (__stlxr(v277 - 1, v276));
                  if (!v277)
                  {
                    ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                    std::__shared_weak_count::__release_weak(v275);
                  }
                }
                v636 = &off_24EC21420;
                sub_2231F9830(v595 + 272, (uint64_t *)&v637);
                v278 = v637;
                v637 = 0uLL;
                v279 = (std::__shared_weak_count *)*((_QWORD *)&v640 + 1);
                v640 = v278;
                if (v279)
                {
                  v280 = (unint64_t *)&v279->__shared_owners_;
                  do
                    v281 = __ldaxr(v280);
                  while (__stlxr(v281 - 1, v280));
                  if (!v281)
                  {
                    ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                    std::__shared_weak_count::__release_weak(v279);
                  }
                }
                *(_OWORD *)v641 = *(_OWORD *)v638;
                *(_OWORD *)&v641[10] = *(_OWORD *)&v638[10];
                v282 = (std::__shared_weak_count *)*((_QWORD *)&v637 + 1);
                if (*((_QWORD *)&v637 + 1))
                {
                  v283 = (unint64_t *)(*((_QWORD *)&v637 + 1) + 8);
                  do
                    v284 = __ldaxr(v283);
                  while (__stlxr(v284 - 1, v283));
                  if (!v284)
                  {
                    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                    std::__shared_weak_count::__release_weak(v282);
                  }
                }
LABEL_380:
                v285 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
                v583 = v652;
                if (*((_QWORD *)&v652 + 1))
                {
                  v286 = (unint64_t *)(*((_QWORD *)&v652 + 1) + 8);
                  do
                    v287 = __ldxr(v286);
                  while (__stxr(v287 + 1, v286));
                  v288 = WORD4(v653[1]);
                  do
                    v289 = __ldxr(v286);
                  while (__stxr(v289 + 1, v286));
                  v605 = v653[0];
                  v606 = *(_QWORD *)&v653[1];
                  do
                    v290 = __ldxr(v286);
                  while (__stxr(v290 + 1, v286));
                  do
                    v291 = __ldaxr(v286);
                  while (__stlxr(v291 - 1, v286));
                  if (!v291)
                  {
                    ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                    std::__shared_weak_count::__release_weak(v285);
                  }
                  do
                    v292 = __ldaxr(v286);
                  while (__stlxr(v292 - 1, v286));
                  v590 = v288;
                  if (v292)
                  {
                    v293 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                    v582 = v643;
                    if (*((_QWORD *)&v643 + 1))
                      goto LABEL_393;
LABEL_430:
                    v296 = *(_WORD *)&v644[24];
                    v603 = *(_OWORD *)v644;
                    v604 = *(_QWORD *)&v644[16];
                    v301 = (std::__shared_weak_count *)*((_QWORD *)&v640 + 1);
                    v302 = v640;
                    if (!*((_QWORD *)&v640 + 1))
                      goto LABEL_431;
                    goto LABEL_405;
                  }
                  ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                  std::__shared_weak_count::__release_weak(v285);
                  v293 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                  v582 = v643;
                  if (!*((_QWORD *)&v643 + 1))
                    goto LABEL_430;
                }
                else
                {
                  v590 = WORD4(v653[1]);
                  v605 = v653[0];
                  v606 = *(_QWORD *)&v653[1];
                  v293 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                  v582 = v643;
                  if (!*((_QWORD *)&v643 + 1))
                    goto LABEL_430;
                }
LABEL_393:
                v294 = (unint64_t *)&v293->__shared_owners_;
                do
                  v295 = __ldxr(v294);
                while (__stxr(v295 + 1, v294));
                v296 = *(_WORD *)&v644[24];
                do
                  v297 = __ldxr(v294);
                while (__stxr(v297 + 1, v294));
                v603 = *(_OWORD *)v644;
                v604 = *(_QWORD *)&v644[16];
                do
                  v298 = __ldxr(v294);
                while (__stxr(v298 + 1, v294));
                do
                  v299 = __ldaxr(v294);
                while (__stlxr(v299 - 1, v294));
                if (!v299)
                {
                  ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                  std::__shared_weak_count::__release_weak(v293);
                }
                do
                  v300 = __ldaxr(v294);
                while (__stlxr(v300 - 1, v294));
                if (v300)
                {
                  v301 = (std::__shared_weak_count *)*((_QWORD *)&v640 + 1);
                  v302 = v640;
                  if (*((_QWORD *)&v640 + 1))
                    goto LABEL_405;
LABEL_431:
                  v310 = v302;
                  v587 = *(_WORD *)&v641[24];
                  v601 = *(_OWORD *)v641;
                  v602 = *(void **)&v641[16];
                  v311 = *((_QWORD *)&v645[0] + 1);
                  v312 = *(std::__shared_weak_count **)&v645[1];
                  if (!*(_QWORD *)&v645[1])
                    goto LABEL_432;
                  goto LABEL_417;
                }
                ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                std::__shared_weak_count::__release_weak(v293);
                v301 = (std::__shared_weak_count *)*((_QWORD *)&v640 + 1);
                v302 = v640;
                if (!*((_QWORD *)&v640 + 1))
                  goto LABEL_431;
LABEL_405:
                v303 = (unint64_t *)&v301->__shared_owners_;
                do
                  v304 = __ldxr(v303);
                while (__stxr(v304 + 1, v303));
                v305 = *(_WORD *)&v641[24];
                do
                  v306 = __ldxr(v303);
                while (__stxr(v306 + 1, v303));
                v601 = *(_OWORD *)v641;
                v602 = *(void **)&v641[16];
                do
                  v307 = __ldxr(v303);
                while (__stxr(v307 + 1, v303));
                do
                  v308 = __ldaxr(v303);
                while (__stlxr(v308 - 1, v303));
                if (!v308)
                {
                  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                  std::__shared_weak_count::__release_weak(v301);
                }
                do
                  v309 = __ldaxr(v303);
                while (__stlxr(v309 - 1, v303));
                v587 = v305;
                v310 = v302;
                if (v309)
                {
                  v311 = *((_QWORD *)&v645[0] + 1);
                  v312 = *(std::__shared_weak_count **)&v645[1];
                  if (*(_QWORD *)&v645[1])
                    goto LABEL_417;
LABEL_432:
                  v584 = v645[3];
                  v599 = *(_OWORD *)((char *)&v645[1] + 8);
                  v600 = *((_QWORD *)&v645[2] + 1);
LABEL_433:
                  v319 = (std::__shared_weak_count *)*((_QWORD *)&v640 + 1);
                  if (*((_QWORD *)&v640 + 1))
                  {
                    v320 = (unint64_t *)(*((_QWORD *)&v640 + 1) + 8);
                    do
                      v321 = __ldaxr(v320);
                    while (__stlxr(v321 - 1, v320));
                    if (!v321)
                    {
                      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                      std::__shared_weak_count::__release_weak(v319);
                    }
                  }
                  v322 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                  if (*((_QWORD *)&v643 + 1))
                  {
                    v323 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                    do
                      v324 = __ldaxr(v323);
                    while (__stlxr(v324 - 1, v323));
                    if (!v324)
                    {
                      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                      std::__shared_weak_count::__release_weak(v322);
                    }
                  }
                  v325 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
                  if (*((_QWORD *)&v652 + 1))
                  {
                    v326 = (unint64_t *)(*((_QWORD *)&v652 + 1) + 8);
                    do
                      v327 = __ldaxr(v326);
                    while (__stlxr(v327 - 1, v326));
                    if (!v327)
                    {
                      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                      std::__shared_weak_count::__release_weak(v325);
                    }
                  }
                  v328 = *(std::__shared_weak_count **)&v645[1];
                  if (*(_QWORD *)&v645[1])
                  {
                    v329 = (unint64_t *)(*(_QWORD *)&v645[1] + 8);
                    do
                      v330 = __ldaxr(v329);
                    while (__stlxr(v330 - 1, v329));
                    if (!v330)
                    {
                      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                      std::__shared_weak_count::__release_weak(v328);
                    }
                  }
                  v331 = *(std::__shared_weak_count **)&v646[16];
                  if (*(_QWORD *)&v646[16])
                  {
                    v332 = (unint64_t *)(*(_QWORD *)&v646[16] + 8);
                    do
                      v333 = __ldaxr(v332);
                    while (__stlxr(v333 - 1, v332));
                    if (!v333)
                    {
                      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                      std::__shared_weak_count::__release_weak(v331);
                    }
                  }
                  v334 = *(std::__shared_weak_count **)&v647[16];
                  if (*(_QWORD *)&v647[16])
                  {
                    v335 = (unint64_t *)(*(_QWORD *)&v647[16] + 8);
                    do
                      v336 = __ldaxr(v335);
                    while (__stlxr(v336 - 1, v335));
                    if (!v336)
                    {
                      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                      std::__shared_weak_count::__release_weak(v334);
                    }
                  }
                  v337 = *(std::__shared_weak_count **)&v649[16];
                  if (*(_QWORD *)&v649[16])
                  {
                    v338 = (unint64_t *)(*(_QWORD *)&v649[16] + 8);
                    do
                      v339 = __ldaxr(v338);
                    while (__stlxr(v339 - 1, v338));
                    if (!v339)
                    {
                      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                      std::__shared_weak_count::__release_weak(v337);
                    }
                  }
                  v340 = *(std::__shared_weak_count **)&v608[8];
                  *(_QWORD *)v608 = v583;
                  *(_QWORD *)&v608[8] = v285;
                  if (v340)
                  {
                    v341 = (unint64_t *)&v340->__shared_owners_;
                    do
                      v342 = __ldaxr(v341);
                    while (__stlxr(v342 - 1, v341));
                    if (!v342)
                    {
                      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                      std::__shared_weak_count::__release_weak(v340);
                    }
                  }
                  *(_OWORD *)&v608[16] = v605;
                  *(_QWORD *)&v608[32] = v606;
                  *(_WORD *)&v608[40] = v590;
                  v343 = *(std::__shared_weak_count **)&v609[16];
                  *(_QWORD *)&v609[8] = v582;
                  *(_QWORD *)&v609[16] = v293;
                  v104 = v597;
                  if (v343)
                  {
                    v344 = (unint64_t *)&v343->__shared_owners_;
                    do
                      v345 = __ldaxr(v344);
                    while (__stlxr(v345 - 1, v344));
                    if (!v345)
                    {
                      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                      std::__shared_weak_count::__release_weak(v343);
                    }
                  }
                  *(_OWORD *)&v609[24] = v603;
                  *(_QWORD *)&v609[40] = v604;
                  *(_WORD *)&v609[48] = v296;
                  v346 = (std::__shared_weak_count *)*((_QWORD *)&v610 + 1);
                  *(_QWORD *)&v610 = v310;
                  *((_QWORD *)&v610 + 1) = v301;
                  v95 = v595;
                  if (v346)
                  {
                    v347 = (unint64_t *)&v346->__shared_owners_;
                    do
                      v348 = __ldaxr(v347);
                    while (__stlxr(v348 - 1, v347));
                    if (!v348)
                    {
                      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                      std::__shared_weak_count::__release_weak(v346);
                    }
                  }
                  *(_OWORD *)v611 = v601;
                  v611[2] = v602;
                  LOWORD(v611[3]) = v587;
                  v349 = (std::__shared_weak_count *)*((_QWORD *)&v613 + 1);
                  *(_QWORD *)&v613 = v311;
                  *((_QWORD *)&v613 + 1) = v312;
                  if (v349)
                  {
                    v350 = (unint64_t *)&v349->__shared_owners_;
                    do
                      v351 = __ldaxr(v350);
                    while (__stlxr(v351 - 1, v350));
                    if (!v351)
                    {
                      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                      std::__shared_weak_count::__release_weak(v349);
                    }
                  }
                  v614[0] = v599;
                  *(_QWORD *)&v614[1] = v600;
                  WORD4(v614[1]) = v584;
                  (*(void (**)(uint64_t, float32x4_t *, uint64_t (***)(), uint64_t *))(*(_QWORD *)v595 + 16))(v595, &v615, &v607, &v635);
                  v88 = (float32x4_t *)v593;
                  goto LABEL_489;
                }
                ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                std::__shared_weak_count::__release_weak(v301);
                v311 = *((_QWORD *)&v645[0] + 1);
                v312 = *(std::__shared_weak_count **)&v645[1];
                if (!*(_QWORD *)&v645[1])
                  goto LABEL_432;
LABEL_417:
                v313 = (unint64_t *)&v312->__shared_owners_;
                do
                  v314 = __ldxr(v313);
                while (__stxr(v314 + 1, v313));
                v584 = v645[3];
                do
                  v315 = __ldxr(v313);
                while (__stxr(v315 + 1, v313));
                v599 = *(_OWORD *)((char *)&v645[1] + 8);
                v600 = *((_QWORD *)&v645[2] + 1);
                do
                  v316 = __ldxr(v313);
                while (__stxr(v316 + 1, v313));
                do
                  v317 = __ldaxr(v313);
                while (__stlxr(v317 - 1, v313));
                if (!v317)
                {
                  ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                  std::__shared_weak_count::__release_weak(v312);
                }
                do
                  v318 = __ldaxr(v313);
                while (__stlxr(v318 - 1, v313));
                if (!v318)
                {
                  ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                  std::__shared_weak_count::__release_weak(v312);
                }
                goto LABEL_433;
              }
            }
            if (*(_DWORD *)&v638[8])
            {
              v264 = 0;
              v265 = 1;
              v266 = 1.0 / v253;
              do
              {
                if (v265)
                {
                  v267 = 0;
                  v268 = 0;
                  v269 = *(_DWORD *)&v638[16];
                  v270 = *(_QWORD *)v638 + *(_DWORD *)&v638[20] * v264;
                  v271 = *(_DWORD *)&v647[40];
                  v272 = *(_QWORD *)&v647[24];
                  v273 = *(_DWORD *)&v647[44] * (int)(float)(v266 * (float)v264);
                  do
                  {
                    *(_BYTE *)(v270 + v267) = *(_BYTE *)(v272
                                                       + (v273
                                                                      + v271
                                                                      * (int)(float)(v266 * (float)v268++)));
                    v265 = *(_DWORD *)&v638[8];
                    v267 += v269;
                  }
                  while (v268 < *(unsigned int *)&v638[8]);
                  v263 = *(_DWORD *)&v638[12];
                }
                ++v264;
              }
              while (v264 < v263);
            }
            goto LABEL_363;
          }
          v106 = *((_QWORD *)a3 + 1);
          v105 = *((_QWORD *)a3 + 2);
          v107 = 0x2E8BA2E8BA2E8BA3 * ((v105 - v106) >> 4);
          v108 = (uint64_t)v624[0];
          v109 = (char *)__p[0];
          if (0x2E8BA2E8BA2E8BA3 * (((char *)v624[0] - (char *)__p[0]) >> 4) < v107)
          {
            if (__p[0])
            {
              if (__p[1] != __p[0])
              {
                v110 = (char *)__p[1] - (char *)__p[0] - 176;
                v111 = (char *)__p[1];
                if (v110 < 0xB0)
                  goto LABEL_886;
                v112 = v110 / 0xB0 + 1;
                v111 = (char *)__p[1] - 176 * (v112 & 0x3FFFFFFFFFFFFFELL);
                v113 = (char *)__p[1] - 272;
                v114 = v112 & 0x3FFFFFFFFFFFFFELL;
                do
                {
                  v113[22] = &off_24EC20828;
                  *v113 = &off_24EC20828;
                  v113 -= 44;
                  v114 -= 2;
                }
                while (v114);
                if (v112 != (v112 & 0x3FFFFFFFFFFFFFELL))
                {
LABEL_886:
                  do
                  {
                    *((_QWORD *)v111 - 12) = &off_24EC20828;
                    v111 -= 176;
                  }
                  while (v111 != v109);
                }
              }
              __p[1] = v109;
              operator delete(v109);
              v108 = 0;
              __p[0] = 0;
              __p[1] = 0;
              v624[0] = 0;
            }
            if (v107 > 0x1745D1745D1745DLL)
              goto LABEL_864;
            v115 = 0x2E8BA2E8BA2E8BA3 * (v108 >> 4);
            v116 = 2 * v115;
            if (2 * v115 <= v107)
              v116 = 0x2E8BA2E8BA2E8BA3 * ((v105 - v106) >> 4);
            v117 = v115 >= 0xBA2E8BA2E8BA2ELL ? 0x1745D1745D1745DLL : v116;
            if (v117 > 0x1745D1745D1745DLL)
LABEL_864:
              sub_22316E078();
            v118 = operator new(176 * v117);
            __p[0] = v118;
            __p[1] = v118;
            for (v624[0] = &v118[11 * v117]; v106 != v105; v106 += 176)
            {
              *v118 = *(_OWORD *)v106;
              v119 = *(_OWORD *)(v106 + 16);
              v120 = *(_OWORD *)(v106 + 32);
              v121 = *(_OWORD *)(v106 + 64);
              v118[3] = *(_OWORD *)(v106 + 48);
              v118[4] = v121;
              v118[1] = v119;
              v118[2] = v120;
              *((_QWORD *)v118 + 11) = &off_24EC20868;
              *((_QWORD *)v118 + 12) = *(_QWORD *)(v106 + 96);
              *((_QWORD *)v118 + 13) = *(_QWORD *)(v106 + 104);
              v118[7] = *(_OWORD *)(v106 + 112);
              v122 = *(_OWORD *)(v106 + 128);
              v123 = *(_OWORD *)(v106 + 144);
              *((_DWORD *)v118 + 40) = *(_DWORD *)(v106 + 160);
              v118[8] = v122;
              v118[9] = v123;
              *((_QWORD *)v118 + 21) = *(_QWORD *)(v106 + 168);
              *((_QWORD *)v118 + 10) = &off_24EC207B8;
              v118 += 11;
            }
            __p[1] = v118;
LABEL_129:
            v104 = v597;
            goto LABEL_130;
          }
          v124 = (char *)__p[1];
          if (0x2E8BA2E8BA2E8BA3 * (((char *)__p[1] - (char *)__p[0]) >> 4) < v107)
          {
            v125 = v106 + 16 * (((char *)__p[1] - (char *)__p[0]) >> 4);
            if (__p[1] != __p[0])
            {
              do
              {
                *(_OWORD *)v109 = *(_OWORD *)v106;
                v126 = *(_OWORD *)(v106 + 16);
                v127 = *(_OWORD *)(v106 + 32);
                v128 = *(_OWORD *)(v106 + 64);
                *((_OWORD *)v109 + 3) = *(_OWORD *)(v106 + 48);
                *((_OWORD *)v109 + 4) = v128;
                *((_OWORD *)v109 + 1) = v126;
                *((_OWORD *)v109 + 2) = v127;
                *((_QWORD *)v109 + 12) = *(_QWORD *)(v106 + 96);
                *((_QWORD *)v109 + 13) = *(_QWORD *)(v106 + 104);
                *((_OWORD *)v109 + 7) = *(_OWORD *)(v106 + 112);
                v129 = *(_OWORD *)(v106 + 128);
                v130 = *(_OWORD *)(v106 + 144);
                *((_DWORD *)v109 + 40) = *(_DWORD *)(v106 + 160);
                *((_OWORD *)v109 + 8) = v129;
                *((_OWORD *)v109 + 9) = v130;
                *((_QWORD *)v109 + 21) = *(_QWORD *)(v106 + 168);
                v106 += 176;
                v109 += 176;
              }
              while (v106 != v125);
              v109 = (char *)__p[1];
            }
            v131 = v109;
            if (v125 != v105)
            {
              v131 = v109;
              v132 = v109;
              do
              {
                *(_OWORD *)v132 = *(_OWORD *)v125;
                v133 = *(_OWORD *)(v125 + 16);
                v134 = *(_OWORD *)(v125 + 32);
                v135 = *(_OWORD *)(v125 + 64);
                *((_OWORD *)v132 + 3) = *(_OWORD *)(v125 + 48);
                *((_OWORD *)v132 + 4) = v135;
                *((_OWORD *)v132 + 1) = v133;
                *((_OWORD *)v132 + 2) = v134;
                *((_QWORD *)v132 + 10) = &off_24EC20828;
                *((_QWORD *)v132 + 11) = &off_24EC20868;
                *((_QWORD *)v132 + 12) = *(_QWORD *)(v125 + 96);
                *((_QWORD *)v132 + 13) = *(_QWORD *)(v125 + 104);
                *((_OWORD *)v132 + 7) = *(_OWORD *)(v125 + 112);
                v136 = *(_OWORD *)(v125 + 128);
                v137 = *(_OWORD *)(v125 + 144);
                *((_DWORD *)v132 + 40) = *(_DWORD *)(v125 + 160);
                *((_OWORD *)v132 + 8) = v136;
                *((_OWORD *)v132 + 9) = v137;
                *((_QWORD *)v132 + 21) = *(_QWORD *)(v125 + 168);
                *((_QWORD *)v132 + 10) = &off_24EC207B8;
                v131 += 176;
                v125 += 176;
                v132 += 176;
              }
              while (v125 != v105);
            }
            __p[1] = v131;
            goto LABEL_129;
          }
          if (v106 == v105)
          {
            v188 = (char *)__p[0];
            v194 = (char *)((char *)__p[1] - (char *)__p[0]);
            v104 = v597;
            if (__p[1] == __p[0])
              goto LABEL_559;
          }
          else
          {
            v188 = (char *)__p[0];
            do
            {
              *(_OWORD *)v109 = *(_OWORD *)v106;
              v189 = *(_OWORD *)(v106 + 16);
              v190 = *(_OWORD *)(v106 + 32);
              v191 = *(_OWORD *)(v106 + 64);
              *((_OWORD *)v109 + 3) = *(_OWORD *)(v106 + 48);
              *((_OWORD *)v109 + 4) = v191;
              *((_OWORD *)v109 + 1) = v189;
              *((_OWORD *)v109 + 2) = v190;
              *((_QWORD *)v109 + 12) = *(_QWORD *)(v106 + 96);
              *((_QWORD *)v109 + 13) = *(_QWORD *)(v106 + 104);
              *((_OWORD *)v109 + 7) = *(_OWORD *)(v106 + 112);
              v192 = *(_OWORD *)(v106 + 128);
              v193 = *(_OWORD *)(v106 + 144);
              *((_DWORD *)v109 + 40) = *(_DWORD *)(v106 + 160);
              *((_OWORD *)v109 + 8) = v192;
              *((_OWORD *)v109 + 9) = v193;
              *((_QWORD *)v109 + 21) = *(_QWORD *)(v106 + 168);
              v188 += 176;
              v106 += 176;
              v109 += 176;
            }
            while (v106 != v105);
            v124 = (char *)__p[1];
            v194 = (char *)((char *)__p[1] - (char *)v188);
            v104 = v597;
            if (__p[1] == v188)
            {
LABEL_559:
              __p[1] = v188;
              v138 = *(char **)v647;
              if (!*(_QWORD *)v647)
                goto LABEL_141;
              goto LABEL_131;
            }
          }
          v250 = (unint64_t)(v194 - 176);
          if (v250 >= 0xB0)
          {
            v405 = v250 / 0xB0 + 1;
            v251 = &v124[-176 * (v405 & 0x3FFFFFFFFFFFFFELL)];
            v406 = v124 - 272;
            v407 = v405 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              *((_QWORD *)v406 + 22) = &off_24EC20828;
              *(_QWORD *)v406 = &off_24EC20828;
              v406 -= 352;
              v407 -= 2;
            }
            while (v407);
            if (v405 == (v405 & 0x3FFFFFFFFFFFFFELL))
              goto LABEL_559;
          }
          else
          {
            v251 = v124;
          }
          do
          {
            *((_QWORD *)v251 - 12) = &off_24EC20828;
            v251 -= 176;
          }
          while (v251 != v188);
          goto LABEL_559;
        }
      }
      else
      {
LABEL_93:
        v100 = v88[1];
        v615 = *v88;
        v616 = v100;
        v101 = v88[3];
        v617 = v88[2];
        v618 = v101;
        if (v619)
          goto LABEL_95;
      }
      v619 = 1;
      goto LABEL_95;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1560) = v19 + 1;
    if (*a7)
      goto LABEL_8;
  }
  v82 = *(_QWORD *)(a4 + 1872);
  v83 = *(_QWORD *)(a4 + 1880);
  v84 = v82 == v83;
  if (v82 == v83)
    v85 = 1;
  else
    v85 = 2;
  *(_BYTE *)(a1 + 1384) = v85;
  if (!v84)
  {
    LOBYTE(v607) = 0;
    v86 = sub_2238B14D0((float *)(a1 + 1392), 0, &v607);
    ++*((_DWORD *)v86 + 5);
  }
  v607 = *(uint64_t (***)())(a2 + 1232);
  sub_2238AD96C(a1, (unsigned __int8 *)&v635, (uint64_t *)&v607);
  return v635;
}

void sub_2238A9758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  if (*(_BYTE *)(v65 - 168))
  {
    if (*(char *)(v65 - 169) < 0)
      operator delete(*(void **)(v65 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x440]);
  sub_2238B05B0(&a37);
  sub_2238AABB4(&a65);
  _Unwind_Resume(a1);
}

void sub_2238A994C()
{
  sub_2231BD974((uint64_t)&STACK[0x2D8]);
  JUMPOUT(0x2238A996CLL);
}

void sub_2238A9968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  sub_2231BEEB4((uint64_t)&STACK[0x310]);
  sub_22319EF60((uint64_t)&STACK[0x348]);
  sub_22319EF60(v65 - 192);
  sub_2231BD9DC((uint64_t)&STACK[0x380]);
  sub_22319EF60((uint64_t)&STACK[0x3C0]);
  sub_2231BEEB4((uint64_t)&STACK[0x400]);
  sub_22319EF60((uint64_t)&STACK[0x440]);
  sub_2238B05B0(&a37);
  sub_2238AABB4(&a65);
  _Unwind_Resume(a1);
}

void sub_2238A99EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  sub_2231BD9DC(v65 - 192);
  sub_2238B05B0(&a37);
  sub_2238AABB4(&a65);
  _Unwind_Resume(a1);
}

void sub_2238A9A18()
{
  sub_2231DE1B4((uint64_t)&STACK[0x2D8]);
  JUMPOUT(0x2238A996CLL);
}

void sub_2238A9A28()
{
  JUMPOUT(0x2238A9984);
}

void sub_2238A9A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  sub_2238AA8CC(v65 - 192);
  sub_22322E828((uint64_t)&STACK[0x2D8]);
  sub_2238B05B0(&a37);
  sub_2238AABB4(&a65);
  _Unwind_Resume(a1);
}

void sub_2238A9A40()
{
  JUMPOUT(0x2238A998CLL);
}

void sub_2238A9A48()
{
  JUMPOUT(0x2238A9994);
}

void sub_2238A9A50()
{
  JUMPOUT(0x2238A999CLL);
}

void sub_2238A9A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  sub_2238B05B0(&a37);
  sub_2238AABB4(&a65);
  _Unwind_Resume(a1);
}

void sub_2238A9A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  void *v65;

  sub_2235C6C80(&a37);
  if (v65)
  {
    STACK[0x448] = (unint64_t)v65;
    operator delete(v65);
    sub_2238AABB4(&a65);
    _Unwind_Resume(a1);
  }
  sub_2238AABB4(&a65);
  _Unwind_Resume(a1);
}

void sub_2238A9A84(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238A9A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  if (!v65)
  {
    sub_2238AABB4(&a65);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2238A9B78);
}

void sub_2238A9AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,...)
{
  uint64_t v57;
  void *v59;
  va_list va;

  va_start(va, a57);
  if (__p)
  {
    operator delete(__p);
    v59 = a32;
    if (!a32)
    {
LABEL_3:
      if (!v57)
      {
LABEL_7:
        sub_2238AABB4((uint64_t *)va);
        _Unwind_Resume(a1);
      }
LABEL_8:
      JUMPOUT(0x2238A9B78);
    }
  }
  else
  {
    v59 = a32;
    if (!a32)
      goto LABEL_3;
  }
  operator delete(v59);
  if (!v57)
    goto LABEL_7;
  goto LABEL_8;
}

void sub_2238A9AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (!STACK[0x440])
  {
    sub_2238AABB4(&a65);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2238A9B78);
}

void sub_2238A9B54()
{
  uint64_t v0;

  sub_2231B888C((void **)&STACK[0x400]);
  sub_2231B888C((void **)(v0 - 192));
  JUMPOUT(0x2238A9B6CLL);
}

void sub_2238A9BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  sub_2238AABB4(&a65);
  _Unwind_Resume(a1);
}

__n128 sub_2238A9BC8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 result;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v9 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    result = *(__n128 *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v13 = *(std::__shared_weak_count **)(a1 + 64);
    *(__n128 *)(a1 + 56) = result;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC715B8;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = &off_24EC715B8;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 48) = &off_24EC715B8;
    result = *(__n128 *)(a2 + 56);
    *(__n128 *)(a1 + 56) = result;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return result;
}

_QWORD *sub_2238A9D2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[6] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[3] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[3] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *a1 = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_2238A9E34(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[2];
  std::__shared_weak_count *v26;
  uint64_t (**v27)();
  std::__shared_weak_count *v28;
  uint64_t (**v29)();
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(result + 16))
  {
    v5 = result;
    kdebug_trace();
    v6 = *(_QWORD *)(v5 + 16);
    *(_DWORD *)((char *)v25 + 3) = 0;
    LODWORD(v25[0]) = 0;
    HIBYTE(v25[0]) = *(_BYTE *)(a2 + 1400);
    v7 = *(_QWORD *)(v6 + 1552);
    v8 = *(_QWORD *)(v6 + 1520);
    *(_BYTE *)(v8 + v7) = HIBYTE(v25[0]);
    v9 = *(_QWORD *)(v6 + 1528) - v8;
    v10 = v7 + 1;
    if (v10 >= v9)
      v11 = *(_QWORD *)(v6 + 1528) - v8;
    else
      v11 = 0;
    *(_QWORD *)(v6 + 1552) = v10 - v11;
    v12 = *(_QWORD *)(v6 + 1560);
    if (v12 == v9)
    {
      v13 = *(_QWORD *)(v6 + 1544) + 1;
      if (v13 < v9)
        v9 = 0;
      *(_QWORD *)(v6 + 1544) = v13 - v9;
    }
    else
    {
      *(_QWORD *)(v6 + 1560) = v12 + 1;
    }
    *(_BYTE *)(v6 + 1384) = 1;
    v32 = *(_QWORD *)(a2 + 1232);
    sub_2238AD96C(v6, (unsigned __int8 *)v25, &v32);
    v14 = v25[0];
    v25[1] = 0;
    v26 = 0;
    v25[0] = &off_24EC715B8;
    sub_2238AA0D8(a2, &v27);
    sub_2238AA0D8(a2 + 64, &v29);
    v31 = v14;
    v15 = sub_2238A9BC8(a3 + 2072, (uint64_t)v25);
    v29 = &off_24EC715B8;
    v16 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v15);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v27 = &off_24EC715B8;
    v19 = v28;
    if (v28)
    {
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v15);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25[0] = &off_24EC715B8;
    v22 = v26;
    if (v26)
    {
      v23 = (unint64_t *)&v26->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v15);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    kdebug_trace();
    kdebug_trace();
    return kdebug_trace();
  }
  return result;
}

void sub_2238AA090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2238A9D2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2238AA0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_2242A8F3C(v2);
  sub_2242A8F3C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2238AA0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2242A8F3C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2238AA0D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;
  char v13;

  sub_2238B0960(a1, (uint64_t)v11);
  if (v13)
  {
    v3 = v11[1];
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    sub_224276BD8(v3, a2);
    if (v13)
    {
      v11[0] = &off_24EC5C140;
      v8 = v12;
      if (v12)
      {
        v9 = (unint64_t *)&v12->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24EC715B8;
  }
}

void sub_2238AA1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2238B0AC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2238AA200(uint64_t a1, _QWORD *a2, char a3, char a4, char a5, float a6, float a7, float a8)
{
  uint64_t v16;
  float v17;
  char *v18;
  _DWORD *v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  char v24;

  *(_QWORD *)(a1 + 8) = &off_24EC1FE80;
  v16 = a1 + 8;
  sub_2231DC6C8((_WORD *)(a1 + 16));
  *(_QWORD *)(v16 + 88) = &off_24EC1FE80;
  sub_2231DC6C8((_WORD *)(v16 + 96));
  *(_QWORD *)(a1 + 184) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 192));
  *(_QWORD *)(a1 + 272) = &off_24EC24788;
  sub_223484C70((uint64_t *)(a1 + 280));
  *(_QWORD *)(a1 + 360) = &off_24EC24788;
  sub_223484C70((uint64_t *)(a1 + 368));
  *(_QWORD *)(a1 + 448) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 456));
  *(_QWORD *)(a1 + 536) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 544));
  *(_QWORD *)(a1 + 624) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 632));
  *(_QWORD *)(a1 + 712) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 720));
  *(_QWORD *)(a1 + 800) = &off_24EC24788;
  sub_223484C70((uint64_t *)(a1 + 808));
  *(_QWORD *)(a1 + 888) = &off_24EC24788;
  sub_223484C70((uint64_t *)(a1 + 896));
  *(_QWORD *)(a1 + 976) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 984));
  *(_QWORD *)(a1 + 1064) = &off_24EC24788;
  sub_223484C70((uint64_t *)(a1 + 1072));
  *(_QWORD *)(a1 + 1152) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 1160));
  *(_QWORD *)a1 = &off_24EC5C040;
  *(_BYTE *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1248) = a1 + 1256;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_QWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1384) = 514;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_DWORD *)(a1 + 1424) = 1065353216;
  *(_QWORD *)(a1 + 1432) = *a2;
  *(float *)(a1 + 1440) = a6;
  *(float *)(a1 + 1444) = a7;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1456) = sub_2238B0550;
  v17 = 1.0 / a8;
  *(float *)(a1 + 1464) = v17;
  *(_BYTE *)(a1 + 1468) = a3;
  *(_BYTE *)(a1 + 1469) = a4;
  *(_BYTE *)(a1 + 1470) = a5;
  *(_QWORD *)(a1 + 1479) = 0;
  *(_QWORD *)(a1 + 1487) = 0;
  *(_QWORD *)(a1 + 1471) = 0;
  *(_BYTE *)(a1 + 1495) = 0;
  v18 = (char *)operator new(5uLL);
  *(_QWORD *)(a1 + 1472) = v18;
  *(_QWORD *)(a1 + 1488) = v18 + 5;
  *(_DWORD *)v18 = 0;
  v18[4] = 0;
  *(_QWORD *)(a1 + 1480) = v18 + 5;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  v19 = operator new(4uLL);
  *(_QWORD *)(a1 + 1520) = v19;
  *v19++ = 0;
  *(_QWORD *)(a1 + 1536) = v19;
  *(_QWORD *)(a1 + 1528) = v19;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  if ((v17 <= 0.0 || fabsf(v17) == INFINITY)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 185, (uint64_t)"inv_voxel_size_ > 0 && !std::isinf(inv_voxel_size_)", 51, (uint64_t)"Expect finite positive voxel size", 33, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v24 = 0;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 0, &v24) + 5) = 0;
  v24 = 1;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 1u, &v24) + 5) = 0;
  v24 = 2;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 2u, &v24) + 5) = 0;
  v24 = 3;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 3u, &v24) + 5) = 0;
  v24 = 4;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 4u, &v24) + 5) = 0;
  v24 = 5;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 5u, &v24) + 5) = 0;
  v24 = 6;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 6u, &v24) + 5) = 0;
  v24 = 7;
  *((_DWORD *)sub_2238B14D0((float *)(a1 + 1392), 7u, &v24) + 5) = 0;
  v20 = operator new();
  v21 = *(float *)(a1 + 1464);
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_DWORD *)(v20 + 32) = 1065353216;
  *(float *)(v20 + 40) = v21;
  *(_WORD *)(v20 + 44) = 256;
  if ((v21 <= 0.0 || fabsf(v21) == INFINITY)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Monitoring/src/ChangeProposalAggregator.cpp", 515, (uint64_t)"inv_voxel_size_ > 0 && !std::isinf(inv_voxel_size_)", 51, (uint64_t)"Expect finite positive voxel size", 33, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v22 = *(_QWORD *)(a1 + 1448);
  *(_QWORD *)(a1 + 1448) = v20;
  if (v22)
    (*(void (**)(void))(a1 + 1456))();
  *(_QWORD *)(a1 + 1456) = sub_2238B0550;
  return a1;
}

void sub_2238AA660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v18 = *(void **)(v14 + 1520);
  if (v18)
  {
    *(_QWORD *)(v14 + 1528) = v18;
    operator delete(v18);
    v19 = *(void **)(v14 + 1472);
    if (!v19)
    {
LABEL_3:
      v20 = *(_QWORD *)(v14 + 1448);
      *(_QWORD *)(v14 + 1448) = 0;
      if (!v20)
      {
LABEL_8:
        sub_22322E828(v16);
        sub_2238AA88C(v14 + 1320);
        sub_2238AA8CC(v15);
        sub_2236D0808(v14 + 1064);
        sub_2236D0808(v14 + 888);
        sub_2238AA918(a14);
        _Unwind_Resume(a1);
      }
LABEL_7:
      (*(void (**)(void))(v14 + 1456))();
      goto LABEL_8;
    }
  }
  else
  {
    v19 = *(void **)(v14 + 1472);
    if (!v19)
      goto LABEL_3;
  }
  *(_QWORD *)(v14 + 1480) = v19;
  operator delete(v19);
  v21 = *(_QWORD *)(v14 + 1448);
  *(_QWORD *)(v14 + 1448) = 0;
  if (!v21)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_2238AA88C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_2238AA8CC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_223198030(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_2238AA918(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v2 = (std::__shared_weak_count *)a1[101];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[90];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[90];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[79];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[68];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[68];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[57];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[46];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[46];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[35];
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)a1[24];
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)a1[24];
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  v26 = (std::__shared_weak_count *)a1[13];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      v29 = (std::__shared_weak_count *)a1[2];
      if (v29)
        goto LABEL_46;
      return a1;
    }
  }
  v29 = (std::__shared_weak_count *)a1[2];
  if (!v29)
    return a1;
LABEL_46:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
    return a1;
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  return a1;
}

_QWORD *sub_2238AABB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = a1[17];
  if (v2)
  {
    v3 = a1[18];
    v4 = (void *)a1[17];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 40);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)a1[17];
    }
    a1[18] = v2;
    operator delete(v4);
  }
  v8 = (char *)a1[14];
  if (v8)
  {
    v9 = (_BYTE *)a1[15];
    v10 = v9 - v8;
    if (v9 != v8)
    {
      v11 = (char *)a1[15];
      if ((unint64_t)(v10 - 176) < 0xB0)
        goto LABEL_34;
      v12 = (v10 - 176) / 0xB0uLL + 1;
      v11 = &v9[-176 * (v12 & 0x3FFFFFFFFFFFFFELL)];
      v13 = v9 - 272;
      v14 = v12 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v13[22] = &off_24EC20828;
        *v13 = &off_24EC20828;
        v13 -= 44;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *((_QWORD *)v11 - 12) = &off_24EC20828;
          v11 -= 176;
        }
        while (v11 != v8);
      }
    }
    a1[15] = v8;
    operator delete(v8);
  }
  v15 = (std::__shared_weak_count *)a1[12];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      v18 = (std::__shared_weak_count *)a1[10];
      if (v18)
        goto LABEL_25;
      return a1;
    }
  }
  v18 = (std::__shared_weak_count *)a1[10];
  if (!v18)
    return a1;
LABEL_25:
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

uint64_t sub_2238AAD70(uint64_t a1, uint64_t a2)
{
  float v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v4 = (float)*(unsigned int *)(a2 + 32) / (float)*(unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a2 + 36) != (float)(v4 * (float)*(unsigned int *)(a1 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 38, (uint64_t)"static_cast<uint32_t>(in_view.Height() * scale_factor) == out_view.Height()", 75, (uint64_t)"Expected scaling requests with preserved aspect ratio", 53, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6)
      goto LABEL_33;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10)
      goto LABEL_33;
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_16:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(&v22, v5, 0);
        v14 = *(_DWORD *)(a2 + 36);
        if (!v14)
          goto LABEL_27;
        goto LABEL_20;
      }
    }
    else
    {
LABEL_33:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_16;
    }
  }
  v22 = 0;
  v14 = *(_DWORD *)(a2 + 36);
  if (!v14)
    goto LABEL_27;
LABEL_20:
  if (*(_DWORD *)(a2 + 32))
  {
    v15 = 0;
    LODWORD(v16) = 1;
    do
    {
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = *(_DWORD *)(a2 + 40);
        v20 = *(_QWORD *)(a2 + 24) + 2 * *(_DWORD *)(a2 + 44) * v15;
        do
        {
          *(_WORD *)(v20 + 2 * v17) = *(_WORD *)(*(_QWORD *)(a1 + 24)
                                                 + 2
                                                 * (*(_DWORD *)(a1 + 44)
                                                                * (int)(float)((float)(1.0 / v4) * (float)v15)
                                                                + *(_DWORD *)(a1 + 40)
                                                                * (int)(float)((float)(1.0 / v4)
                                                                             * (float)v18++)));
          v16 = *(unsigned int *)(a2 + 32);
          v17 += v19;
        }
        while (v18 < v16);
        v14 = *(_DWORD *)(a2 + 36);
      }
      ++v15;
    }
    while (v15 < v14);
  }
LABEL_27:
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2238AAF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t (***v16)();
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v40)();
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string __p[2];
  uint64_t (**v44)();
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t (**v49)();
  uint64_t v50;
  std::__shared_weak_count *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  _QWORD v56[5];

  v56[3] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v7 = *(_QWORD *)(a2 + 72);
  v49 = &off_24EC21230;
  sub_2231BE6D4(v7, &v50);
  v47 = *(_QWORD *)(a1 + 1432);
  v48 = *(_DWORD *)(a1 + 1440);
  v44 = &off_24EC21FE8;
  sub_2231DCF04(a1 + 712, &v45);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_12;
  v8 = sub_2241471F8();
  v9 = v8[2];
  if (!v9)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = v8[2];
  }
  v10 = *(_QWORD *)(v9 + 64);
  v11 = (std::mutex *)(v10 + 32);
  std::mutex::lock((std::mutex *)(v10 + 32));
  v13 = *(_QWORD *)(v10 + 96);
  v12 = *(_QWORD *)(v10 + 104);
  std::mutex::unlock(v11);
  if (v13 == v12)
  {
LABEL_12:
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v52 = "cv3d.recon.";
    v53 = 11;
    v54 = "Monitoring";
    v55 = 10;
    sub_2231A9820((uint64_t)&v52, (uint64_t)v56, 0, 0, __p);
    sub_2241471F8();
    v14 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v15)
      v16 = &v44;
    else
      v16 = 0;
    v17 = v15;
  }
  v52 = (const char *)&off_24EC22138;
  sub_2236B487C(a1 + 360, &v53);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21FE8;
  sub_2231DCF04(a1 + 448, (uint64_t *)&__p[0].__r_.__value_.__l.__size_);
  v40 = &off_24EC22138;
  sub_2236B487C(a1 + 800, &v41);
  *(_BYTE *)(a4 + 2) = sub_2239027F4(a3, a3 + 56, a3 + 168, (uint64_t)&v49, a3 + 112, (float *)&v47, a1 + 1320, (uint64_t)&v52, (uint64_t)__p, (uint64_t)&v40, (uint64_t)v16, v17);
  v18 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
  if (__p[0].__r_.__value_.__r.__words[2])
  {
    v22 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v25 = (unint64_t *)(v54 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_22390387C(a1 + 8, (uint64_t)&v49, a3, a3 + 56);
  *(_BYTE *)(a4 + 3) = 0;
  if (*(_BYTE *)(a1 + 1468))
  {
    v40 = *(uint64_t (***)())(a1 + 1432);
    LODWORD(v41) = *(_DWORD *)(a1 + 1440);
    v52 = (const char *)&off_24EC22138;
    sub_2236B487C(a1 + 888, &v53);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21FE8;
    sub_2231DCF04(a1 + 976, (uint64_t *)&__p[0].__r_.__value_.__l.__size_);
    *(_BYTE *)(a4 + 3) = sub_223906674(a3, a3 + 56, a3 + 168, (uint64_t)&v49, a3 + 112, (uint64_t)&v40, a1 + 1320, (uint64_t)&v52, (uint64_t)__p);
    v27 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
    if (__p[0].__r_.__value_.__r.__words[2])
    {
      v28 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (std::__shared_weak_count *)v54;
    if (v54)
    {
      v31 = (unint64_t *)(v54 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    sub_223907858(a1 + 888);
  }
  kdebug_trace();
  v33 = v46;
  if (v46)
  {
    v34 = (unint64_t *)&v46->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v51;
  if (v51)
  {
    v37 = (unint64_t *)&v51->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_2238AB490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_2231DCE9C((uint64_t)&a31);
  sub_2231BD9DC(v31 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_2238AB568(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  __n128 *v19;
  std::string *v20;
  size_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  __n128 *v36;
  std::string *v37;
  size_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::mutex *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int v50;
  __n128 *v53;
  std::string *v54;
  size_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  std::mutex *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  int v67;
  __n128 *v70;
  std::string *v71;
  size_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  std::mutex *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  int v84;
  __n128 *v87;
  std::string *v88;
  size_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  std::mutex *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  std::string::size_type v101;
  int v102;
  __n128 *v105;
  std::string *v106;
  size_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  std::mutex *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  std::string::size_type v116;
  std::string *v117;
  std::string::size_type v118;
  std::string::size_type v119;
  int v120;
  __n128 *v123;
  std::string *v124;
  size_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  std::mutex *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  std::string::size_type v137;
  int v138;
  __n128 *v141;
  std::string *v142;
  size_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  std::mutex *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  std::string::size_type v153;
  std::string *v154;
  std::string::size_type v155;
  std::string::size_type v156;
  int v157;
  __n128 *v160;
  std::string *v161;
  size_t v162;
  int v163;
  uint64_t v164;
  unsigned __int8 v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  std::mutex *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  std::string::size_type v175;
  std::string *v176;
  std::string::size_type v177;
  std::string::size_type v178;
  int v179;
  __n128 *v182;
  std::string *v183;
  size_t v184;
  uint64_t v185;
  int v186;
  unsigned __int8 v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  std::mutex *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::string::size_type v196;
  std::string *v197;
  std::string::size_type v198;
  std::string::size_type v199;
  int v200;
  __n128 *v203;
  std::string *v204;
  size_t v205;
  unsigned __int8 v206;
  int v207;
  unsigned __int8 v208;
  double v209;
  int v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 v218;
  std::string v219;
  __int128 v220;
  std::string __p;
  __int128 v222;
  __int128 v223;
  _DWORD v224[4];
  uint64_t v225;

  v225 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.FrameMonitoringStatus";
  *((_QWORD *)&v223 + 1) = 38;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v5 = sub_2241471F8();
    v6 = v5[2];
    if (!v6)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = v5[2];
    }
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      sub_2241471F8();
      v11 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        sub_2231893F0((double *)&qword_255788F20, v11, a2, "IsKFBacklogNovel");
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v14 = p_p->__r_.__value_.__r.__words[0];
    v15 = p_p->__r_.__value_.__l.__size_;
    v16 = p_p->__r_.__value_.__s.__data_[16];
    if (v14 == 0x6365722E64337663 && v15 == 0x73746174532E6E6FLL && v16 == 46)
    {
      v19 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v21 = __p.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v19, v20, v21, a2, (uint64_t)"IsKFBacklogNovel", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.FrameMonitoringStatus";
  *((_QWORD *)&v223 + 1) = 38;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v22 = sub_2241471F8();
    v23 = v22[2];
    if (!v23)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v23 = v22[2];
    }
    v24 = *(_QWORD *)(v23 + 64);
    v25 = (std::mutex *)(v24 + 32);
    std::mutex::lock((std::mutex *)(v24 + 32));
    v27 = *(_QWORD *)(v24 + 96);
    v26 = *(_QWORD *)(v24 + 104);
    std::mutex::unlock(v25);
    if (v27 != v26)
    {
      sub_2241471F8();
      v28 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        sub_2238AD830((double *)&qword_255788F20, v28, a2 + 1, "IsKFResultNovel");
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = __p.__r_.__value_.__l.__size_;
  if (v29 >= 0x11)
  {
    v30 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v31 = v30->__r_.__value_.__r.__words[0];
    v32 = v30->__r_.__value_.__l.__size_;
    v33 = v30->__r_.__value_.__s.__data_[16];
    if (v31 == 0x6365722E64337663 && v32 == 0x73746174532E6E6FLL && v33 == 46)
    {
      v36 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__p;
      else
        v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v38 = __p.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v36, v37, v38, a2 + 1, (uint64_t)"IsKFResultNovel", 15);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.FrameMonitoringStatus";
  *((_QWORD *)&v223 + 1) = 38;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v39 = sub_2241471F8();
    v40 = v39[2];
    if (!v40)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v40 = v39[2];
    }
    v41 = *(_QWORD *)(v40 + 64);
    v42 = (std::mutex *)(v41 + 32);
    std::mutex::lock((std::mutex *)(v41 + 32));
    v44 = *(_QWORD *)(v41 + 96);
    v43 = *(_QWORD *)(v41 + 104);
    std::mutex::unlock(v42);
    if (v44 != v43)
    {
      sub_2241471F8();
      v45 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        sub_2231893F0((double *)&qword_255788F20, v45, a2 + 4, "IsOccupancyNovel");
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = __p.__r_.__value_.__l.__size_;
  if (v46 >= 0x11)
  {
    v47 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v48 = v47->__r_.__value_.__r.__words[0];
    v49 = v47->__r_.__value_.__l.__size_;
    v50 = v47->__r_.__value_.__s.__data_[16];
    if (v48 == 0x6365722E64337663 && v49 == 0x73746174532E6E6FLL && v50 == 46)
    {
      v53 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &__p;
      else
        v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v55 = __p.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v53, v54, v55, a2 + 4, (uint64_t)"IsOccupancyNovel", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.FrameMonitoringStatus";
  *((_QWORD *)&v223 + 1) = 38;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v56 = sub_2241471F8();
    v57 = v56[2];
    if (!v57)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v57 = v56[2];
    }
    v58 = *(_QWORD *)(v57 + 64);
    v59 = (std::mutex *)(v58 + 32);
    std::mutex::lock((std::mutex *)(v58 + 32));
    v61 = *(_QWORD *)(v58 + 96);
    v60 = *(_QWORD *)(v58 + 104);
    std::mutex::unlock(v59);
    if (v61 != v60)
    {
      sub_2241471F8();
      v62 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        sub_22361F34C((double *)&qword_255788F20, v62, a2 + 2, "IsInputDepthNovelFromMesh");
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v63 = __p.__r_.__value_.__l.__size_;
  if (v63 >= 0x11)
  {
    v64 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v65 = v64->__r_.__value_.__r.__words[0];
    v66 = v64->__r_.__value_.__l.__size_;
    v67 = v64->__r_.__value_.__s.__data_[16];
    if (v65 == 0x6365722E64337663 && v66 == 0x73746174532E6E6FLL && v67 == 46)
    {
      v70 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &__p;
      else
        v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v72 = __p.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v70, v71, v72, a2 + 2, (uint64_t)"IsInputDepthNovelFromMesh", 25);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.FrameMonitoringStatus";
  *((_QWORD *)&v223 + 1) = 38;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v73 = sub_2241471F8();
    v74 = v73[2];
    if (!v74)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v74 = v73[2];
    }
    v75 = *(_QWORD *)(v74 + 64);
    v76 = (std::mutex *)(v75 + 32);
    std::mutex::lock((std::mutex *)(v75 + 32));
    v78 = *(_QWORD *)(v75 + 96);
    v77 = *(_QWORD *)(v75 + 104);
    std::mutex::unlock(v76);
    if (v78 != v77)
    {
      sub_2241471F8();
      v79 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        sub_2231893F0((double *)&qword_255788F20, v79, a2 + 3, "IsMeshIncomplete");
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v80 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v80 = __p.__r_.__value_.__l.__size_;
  if (v80 >= 0x11)
  {
    v81 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v81 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v82 = v81->__r_.__value_.__r.__words[0];
    v83 = v81->__r_.__value_.__l.__size_;
    v84 = v81->__r_.__value_.__s.__data_[16];
    if (v82 == 0x6365722E64337663 && v83 == 0x73746174532E6E6FLL && v84 == 46)
    {
      v87 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = &__p;
      else
        v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v89 = __p.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v87, v88, v89, a2 + 3, (uint64_t)"IsMeshIncomplete", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.FrameMonitoringStatus";
  *((_QWORD *)&v223 + 1) = 38;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &v219);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v90 = sub_2241471F8();
    v91 = v90[2];
    if (!v91)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v91 = v90[2];
    }
    v92 = *(_QWORD *)(v91 + 64);
    v93 = (std::mutex *)(v92 + 32);
    std::mutex::lock((std::mutex *)(v92 + 32));
    v95 = *(_QWORD *)(v92 + 96);
    v94 = *(_QWORD *)(v92 + 104);
    std::mutex::unlock(v93);
    if (v95 != v94)
    {
      sub_2241471F8();
      v96 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        v218 = a2[6];
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
          *(_QWORD *)&v220 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v220 + 1) = 2;
          strcpy((char *)&__p, "Suggestion");
          v97 = sub_2241471F8();
          sub_22389549C((uint64_t)v97, v96, (char *)&v218, (uint64_t)&__p, &v220);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v98 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v98 = v219.__r_.__value_.__l.__size_;
  if (v98 >= 0x11)
  {
    v99 = &v219;
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v99 = (std::string *)v219.__r_.__value_.__r.__words[0];
    v100 = v99->__r_.__value_.__r.__words[0];
    v101 = v99->__r_.__value_.__l.__size_;
    v102 = v99->__r_.__value_.__s.__data_[16];
    if (v100 == 0x6365722E64337663 && v101 == 0x73746174532E6E6FLL && v102 == 46)
    {
      v105 = sub_223187510();
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = &v219;
      else
        v106 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v107 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      else
        v107 = v219.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__s.__data_[0] = a2[6];
      sub_22387FA8C(v105, v106, v107, (unsigned __int8 *)&__p, (uint64_t)"Suggestion", 10);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.FrameMonitoringStatus";
  *((_QWORD *)&v223 + 1) = 38;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &v219);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v108 = sub_2241471F8();
    v109 = v108[2];
    if (!v109)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v109 = v108[2];
    }
    v110 = *(_QWORD *)(v109 + 64);
    v111 = (std::mutex *)(v110 + 32);
    std::mutex::lock((std::mutex *)(v110 + 32));
    v113 = *(_QWORD *)(v110 + 96);
    v112 = *(_QWORD *)(v110 + 104);
    std::mutex::unlock(v111);
    if (v113 != v112)
    {
      sub_2241471F8();
      v114 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v114 + 24))(v114))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        v218 = a2[5];
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v114 + 24))(v114))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
          strcpy((char *)&__p, "StablizedSuggestion");
          *(_QWORD *)&v220 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v220 + 1) = 2;
          v115 = sub_2241471F8();
          sub_22389549C((uint64_t)v115, v114, (char *)&v218, (uint64_t)&__p, &v220);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v116 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v116 = v219.__r_.__value_.__l.__size_;
  if (v116 >= 0x11)
  {
    v117 = &v219;
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v117 = (std::string *)v219.__r_.__value_.__r.__words[0];
    v118 = v117->__r_.__value_.__r.__words[0];
    v119 = v117->__r_.__value_.__l.__size_;
    v120 = v117->__r_.__value_.__s.__data_[16];
    if (v118 == 0x6365722E64337663 && v119 == 0x73746174532E6E6FLL && v120 == 46)
    {
      v123 = sub_223187510();
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v124 = &v219;
      else
        v124 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v125 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      else
        v125 = v219.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__s.__data_[0] = a2[5];
      sub_22387FA8C(v123, v124, v125, (unsigned __int8 *)&__p, (uint64_t)"StablizedSuggestion", 19);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.SuggestionProvider";
  *((_QWORD *)&v223 + 1) = 35;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &v219);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v126 = sub_2241471F8();
    v127 = v126[2];
    if (!v127)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v127 = v126[2];
    }
    v128 = *(_QWORD *)(v127 + 64);
    v129 = (std::mutex *)(v128 + 32);
    std::mutex::lock((std::mutex *)(v128 + 32));
    v131 = *(_QWORD *)(v128 + 96);
    v130 = *(_QWORD *)(v128 + 104);
    std::mutex::unlock(v129);
    if (v131 != v130)
    {
      sub_2241471F8();
      v132 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        v218 = a2[5];
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
          *(_QWORD *)&v220 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v220 + 1) = 2;
          strcpy((char *)&__p, "Suggestion");
          v133 = sub_2241471F8();
          sub_22389549C((uint64_t)v133, v132, (char *)&v218, (uint64_t)&__p, &v220);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v134 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v134 = v219.__r_.__value_.__l.__size_;
  if (v134 >= 0x11)
  {
    v135 = &v219;
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v135 = (std::string *)v219.__r_.__value_.__r.__words[0];
    v136 = v135->__r_.__value_.__r.__words[0];
    v137 = v135->__r_.__value_.__l.__size_;
    v138 = v135->__r_.__value_.__s.__data_[16];
    if (v136 == 0x6365722E64337663 && v137 == 0x73746174532E6E6FLL && v138 == 46)
    {
      v141 = sub_223187510();
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v142 = &v219;
      else
        v142 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v143 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      else
        v143 = v219.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__s.__data_[0] = a2[5];
      sub_22387FA8C(v141, v142, v143, (unsigned __int8 *)&__p, (uint64_t)"Suggestion", 10);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.Monitoring.SuggestionProvider";
  *((_QWORD *)&v223 + 1) = 35;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &v219);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v144 = sub_2241471F8();
    v145 = v144[2];
    if (!v145)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v145 = v144[2];
    }
    v146 = *(_QWORD *)(v145 + 64);
    v147 = (std::mutex *)(v146 + 32);
    std::mutex::lock((std::mutex *)(v146 + 32));
    v149 = *(_QWORD *)(v146 + 96);
    v148 = *(_QWORD *)(v146 + 104);
    std::mutex::unlock(v147);
    if (v149 != v148)
    {
      sub_2241471F8();
      v150 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        v218 = a2[7];
        v151 = *a3;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
          *(_QWORD *)&v220 = (uint64_t)((double)v151 / 1000000000.0 * 1000000000.0);
          *((_QWORD *)&v220 + 1) = 2;
          strcpy((char *)&__p, "CurrentMode");
          v152 = sub_2241471F8();
          sub_22389549C((uint64_t)v152, v150, (char *)&v218, (uint64_t)&__p, &v220);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v153 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v153 = v219.__r_.__value_.__l.__size_;
  if (v153 >= 0x11)
  {
    v154 = &v219;
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v154 = (std::string *)v219.__r_.__value_.__r.__words[0];
    v155 = v154->__r_.__value_.__r.__words[0];
    v156 = v154->__r_.__value_.__l.__size_;
    v157 = v154->__r_.__value_.__s.__data_[16];
    if (v155 == 0x6365722E64337663 && v156 == 0x73746174532E6E6FLL && v157 == 46)
    {
      v160 = sub_223187510();
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v161 = &v219;
      else
        v161 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v162 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      else
        v162 = v219.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__s.__data_[0] = a2[7];
      sub_22387FA8C(v160, v161, v162, (unsigned __int8 *)&__p, (uint64_t)"CurrentMode", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325632;
  kdebug_trace();
  v163 = a2[7];
  v164 = *a3;
  v165 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v165 & 1) == 0)
  {
    v215 = *a3;
    v211 = __cxa_guard_acquire(&qword_25578DF68);
    v164 = v215;
    if (v211)
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
      v164 = v215;
    }
  }
  sub_2238B197C((uint64_t)&qword_25578BBD0, v163, (double)v164 / 1000000000.0);
  kdebug_trace();
  v218 = (a2[2] | a2[3]) != 0;
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.TelemetryMeasurements";
  *((_QWORD *)&v223 + 1) = 27;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &v219);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v166 = sub_2241471F8();
    v167 = v166[2];
    if (!v167)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v167 = v166[2];
    }
    v168 = *(_QWORD *)(v167 + 64);
    v169 = (std::mutex *)(v168 + 32);
    std::mutex::lock((std::mutex *)(v168 + 32));
    v171 = *(_QWORD *)(v168 + 96);
    v170 = *(_QWORD *)(v168 + 104);
    std::mutex::unlock(v169);
    if (v171 != v170)
    {
      sub_2241471F8();
      v172 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        v173 = *a3;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
          strcpy((char *)&__p, "MeshDepthDifferent");
          *(_QWORD *)&v220 = (uint64_t)((double)v173 / 1000000000.0 * 1000000000.0);
          *((_QWORD *)&v220 + 1) = 2;
          v174 = sub_2241471F8();
          sub_2231AF6C8((uint64_t)v174, v172, (char *)&v218, (uint64_t)&__p, &v220);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v175 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v175 = v219.__r_.__value_.__l.__size_;
  if (v175 >= 0x11)
  {
    v176 = &v219;
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v176 = (std::string *)v219.__r_.__value_.__r.__words[0];
    v177 = v176->__r_.__value_.__r.__words[0];
    v178 = v176->__r_.__value_.__l.__size_;
    v179 = v176->__r_.__value_.__s.__data_[16];
    if (v177 == 0x6365722E64337663 && v178 == 0x73746174532E6E6FLL && v179 == 46)
    {
      v182 = sub_223187510();
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v183 = &v219;
      else
        v183 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v184 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      else
        v184 = v219.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v182, v183, v184, (char *)&v218, (uint64_t)"MeshDepthDifferent", 18);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325632;
  kdebug_trace();
  v185 = *a3;
  v186 = v218;
  v187 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v187 & 1) == 0)
  {
    v216 = v185;
    v212 = __cxa_guard_acquire(&qword_25578DF68);
    v185 = v216;
    if (v212)
    {
      qword_25578BBC8 = (uint64_t)&off_24EC37778;
      sub_223476B20((uint64_t)&qword_25578BBD0);
      __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
      __cxa_guard_release(&qword_25578DF68);
      v185 = v216;
    }
  }
  sub_2238B2E78((uint64_t)&qword_25578BBD0, v186 != 0, (double)v185 / 1000000000.0);
  kdebug_trace();
  v188 = *(unsigned __int8 *)(a1 + 1240);
  if (*(_BYTE *)(a1 + 1240))
  {
    if (v188 >= 3)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonitoringEngine.cpp", 378, (uint64_t)"", 0, (uint64_t)"Unexpected monitoring mode request for given suggestion", 55, (void (*)(void **))sub_22457406C);
      abort();
    }
    LOBYTE(v188) = v188 != a2[7];
  }
  *(_BYTE *)(a1 + 1240) = a2[5];
  v219.__r_.__value_.__s.__data_[0] = v188;
  *(_QWORD *)&v222 = "cv3d.recon.";
  *((_QWORD *)&v222 + 1) = 11;
  *(_QWORD *)&v223 = "Stats.TelemetryMeasurements";
  *((_QWORD *)&v223 + 1) = 27;
  sub_2231A9820((uint64_t)&v222, (uint64_t)v224, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v189 = sub_2241471F8();
    v190 = v189[2];
    if (!v190)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v190 = v189[2];
    }
    v191 = *(_QWORD *)(v190 + 64);
    v192 = (std::mutex *)(v191 + 32);
    std::mutex::lock((std::mutex *)(v191 + 32));
    v194 = *(_QWORD *)(v191 + 96);
    v193 = *(_QWORD *)(v191 + 104);
    std::mutex::unlock(v192);
    if (v194 != v193)
    {
      sub_2241471F8();
      v195 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v195 + 24))(v195))
      {
        v222 = 0u;
        v223 = 0u;
        v224[0] = 728325608;
        kdebug_trace();
        sub_22361F488((double *)&qword_255788F20, v195, (char *)&v219, "MonitoringModeSuggestionMismatch");
        kdebug_trace();
      }
    }
  }
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325624;
  kdebug_trace();
  v196 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v196 = __p.__r_.__value_.__l.__size_;
  if (v196 >= 0x11)
  {
    v197 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v197 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v198 = v197->__r_.__value_.__r.__words[0];
    v199 = v197->__r_.__value_.__l.__size_;
    v200 = v197->__r_.__value_.__s.__data_[16];
    if (v198 == 0x6365722E64337663 && v199 == 0x73746174532E6E6FLL && v200 == 46)
    {
      v203 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v204 = &__p;
      else
        v204 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v205 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v205 = __p.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v203, v204, v205, (char *)&v219, (uint64_t)"MonitoringModeSuggestionMismatch", 32);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v222 = 0u;
  v223 = 0u;
  v224[0] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v206 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v206 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v214) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v213) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v213 / (double)v214;
    __cxa_guard_release(&qword_255795560);
  }
  v207 = v219.__r_.__value_.__s.__data_[0];
  v208 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  if (v207)
    v209 = 1.0;
  else
    v209 = 0.0;
  std::mutex::lock(&stru_25578C790);
  if (byte_25578C7D8)
    v209 = v209 + *(double *)&qword_25578C7D0;
  else
    byte_25578C7D8 = 1;
  qword_25578C7D0 = *(_QWORD *)&v209;
  *(double *)&qword_25578C7E0 = *(double *)&qword_25578C7E0 + 1.0;
  std::mutex::unlock(&stru_25578C790);
  return kdebug_trace();
}

void sub_2238AD584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238AD5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238AD830(double *a1, uint64_t a2, char *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AF6C8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238AD950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238AD96C(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  float *v15;
  _QWORD *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  size_t v22;
  const char *v23;
  unsigned __int8 v24;
  const char *v25;
  size_t v26;
  _BYTE *v27;
  unint64_t v28;
  float *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned int v76;
  float v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  std::mutex *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  std::string *v85;
  std::string *v86;
  uint64_t v87;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v90;
  std::string::size_type v91;
  int v92;
  __n128 *v95;
  size_t v96;
  __int128 v97;
  unsigned int *v98;
  std::string *v99;
  size_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  std::mutex *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  std::string *v108;
  std::string *v109;
  uint64_t v110;
  std::string::size_type v111;
  std::string *v112;
  std::string::size_type v113;
  std::string::size_type v114;
  int v115;
  __n128 *v118;
  size_t v119;
  __int128 v120;
  unsigned int *v121;
  std::string *v122;
  size_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  std::mutex *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  std::string *v131;
  std::string *v132;
  uint64_t v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  std::string::size_type v137;
  int v138;
  __n128 *v141;
  size_t v142;
  __int128 v143;
  unsigned int *v144;
  std::string *v145;
  size_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  std::mutex *v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  std::string *v154;
  std::string *v155;
  uint64_t v156;
  std::string::size_type v157;
  std::string *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  int v161;
  __n128 *v164;
  size_t v165;
  __int128 v166;
  unsigned int *v167;
  std::string *v168;
  size_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  std::mutex *v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  std::string *v177;
  std::string *v178;
  uint64_t v179;
  std::string::size_type v180;
  std::string *v181;
  std::string::size_type v182;
  std::string::size_type v183;
  int v184;
  __n128 *v187;
  size_t v188;
  __int128 v189;
  unsigned int *v190;
  std::string *v191;
  size_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  std::mutex *v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  std::string *v200;
  std::string *v201;
  uint64_t v202;
  char *v203;
  uint64_t *v204;
  std::string::size_type v205;
  std::string *v206;
  std::string::size_type v207;
  std::string::size_type v208;
  int v209;
  __n128 *v212;
  size_t v213;
  __int128 v214;
  unsigned int *v215;
  std::string *v216;
  size_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  std::mutex *v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  std::string *v225;
  std::string *v226;
  uint64_t v227;
  std::string::size_type v228;
  std::string *v229;
  std::string::size_type v230;
  std::string::size_type v231;
  int v232;
  __n128 *v235;
  size_t v236;
  __int128 v237;
  unsigned int *v238;
  std::string *v239;
  size_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  std::mutex *v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  std::string *v256;
  std::string *v257;
  uint64_t v258;
  std::string::size_type v259;
  std::string *v260;
  std::string::size_type v261;
  std::string::size_type v262;
  int v263;
  __n128 *v266;
  std::string *v267;
  size_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  std::mutex *v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  std::string *v276;
  std::string *v277;
  uint64_t v278;
  uint64_t *v279;
  std::string::size_type v280;
  std::string *v281;
  std::string::size_type v282;
  std::string::size_type v283;
  int v284;
  __n128 *v287;
  std::string *v288;
  size_t v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  char v296;
  char v297;
  float v298;
  std::string v299;
  __int128 v300;
  std::string __p;
  char __s[32];
  const char *v303;
  int v304;
  const char *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  _BYTE v308[40];
  __int128 v309;
  unint64_t v310;
  char v311;
  uint64_t v312;

  v312 = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 1384);
  *(_BYTE *)(a1 + 1385) = v6;
  v7 = v6;
  if (*(_BYTE *)(a1 + 1470))
  {
    v8 = *(_QWORD *)(a1 + 1560);
    v7 = v6;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 1544);
      v10 = *(_QWORD *)(a1 + 1520);
      v11 = *(_QWORD *)(a1 + 1528) - v10;
      v12 = v8 - 1;
      while (*(_BYTE *)(v10 + v9 % v11) != 1)
      {
        --v12;
        ++v9;
        if (v12 == -1)
          goto LABEL_6;
      }
      v13 = v9 + 1;
      while (v12)
      {
        v14 = *(unsigned __int8 *)(v10 + v13 % v11);
        ++v13;
        --v12;
        if (v14 == 2)
        {
          v7 = 2;
          *(_BYTE *)(a1 + 1385) = 2;
          goto LABEL_11;
        }
      }
LABEL_6:
      v7 = v6;
    }
  }
LABEL_11:
  a2[6] = v6;
  a2[5] = v7;
  v15 = (float *)(a1 + 1392);
  v308[0] = 7;
  v16 = sub_2238B14D0((float *)(a1 + 1392), 7u, v308);
  ++*((_DWORD *)v16 + 5);
  sub_2238AB568(a1, (char *)a2, a3);
  sub_2238B0070(&v300);
  if (**(int **)(v300 + 56) <= 3)
  {
    v17 = *(unsigned __int8 *)(v300 + 72);
    v18 = sub_22322F254(v300, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (v17 || v18 != 0)
    {
      *(_QWORD *)__s = &v300;
      *(std::chrono::steady_clock::time_point *)&__s[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__s[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__s[24] = 3;
      v303 = "unknown file";
      v304 = 625;
      v307 = 0;
      v305 = "unknown function";
      v306 = 0;
      v21 = **(_QWORD **)__s;
      v292 = **(_QWORD **)__s;
      if (*(char *)(**(_QWORD **)__s + 39) < 0)
      {
        v23 = *(const char **)(v21 + 16);
        v22 = *(_QWORD *)(v21 + 24);
      }
      else
      {
        v22 = *(unsigned __int8 *)(**(_QWORD **)__s + 39);
        v23 = (const char *)(**(_QWORD **)__s + 16);
      }
      v291 = **(_QWORD **)__s + 16;
      v293 = a2[7];
      v294 = a2[5];
      v295 = a2[6];
      v24 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v308);
        sub_223199C58("com.apple.cv3d", (unint64_t)v308, &xmmword_255788F40);
        if (v308[24] && (v308[23] & 0x80000000) != 0)
          operator delete(*(void **)v308);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v25 = (const char *)&xmmword_255788F40;
      else
        v25 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v26 = byte_255788F57;
      else
        v26 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v308 = os_log_create(v25, v23);
      v27 = &v308[8];
      if (v26 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v26 >= 0x17)
      {
        v290 = v23;
        v28 = v19;
        v29 = v15;
        v30 = v17;
        v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v31 = v26 | 7;
        v32 = v31 + 1;
        v27 = operator new(v31 + 1);
        *(_QWORD *)&v308[16] = v26;
        *(_QWORD *)&v308[24] = v32 | 0x8000000000000000;
        *(_QWORD *)&v308[8] = v27;
        v17 = v30;
        v15 = v29;
        v19 = v28;
        v23 = v290;
      }
      else
      {
        v308[31] = v26;
        if (!v26)
        {
LABEL_34:
          v27[v26] = 0;
          v308[32] = 1;
          v33 = &v309;
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v22 >= 0x17)
          {
            v35 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v35 = v22 | 7;
            v36 = v35 + 1;
            v33 = (__int128 *)operator new(v35 + 1);
            *((_QWORD *)&v309 + 1) = v22;
            v310 = v36 | 0x8000000000000000;
            *(_QWORD *)&v309 = v33;
          }
          else
          {
            HIBYTE(v310) = v22;
            if (!v22)
            {
              LOBYTE(v309) = 0;
              v311 = 1;
              v34 = *(NSObject **)v308;
              if ((SHIBYTE(v310) & 0x80000000) == 0)
                goto LABEL_38;
              goto LABEL_44;
            }
          }
          memmove(v33, v23, v22);
          *((_BYTE *)v33 + v22) = 0;
          v311 = 1;
          v34 = *(NSObject **)v308;
          if ((SHIBYTE(v310) & 0x80000000) == 0)
          {
LABEL_38:
            if (!v308[32])
              goto LABEL_47;
            goto LABEL_45;
          }
LABEL_44:
          operator delete((void *)v309);
          if (!v308[32])
          {
LABEL_47:
            if (*(_QWORD *)v308)
              os_release(*(void **)v308);
            if (v19 && *(_QWORD *)(v19 + 24))
            {
              v37 = _os_log_pack_size();
              v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
              v39 = (std::__shared_weak_count *)operator new();
              v40 = v39;
              v39->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v39->__shared_weak_owners_ = 0;
              v39[1].__vftable = v38;
              *(_QWORD *)v308 = v38;
              *(_QWORD *)&v308[8] = v38;
              *(_QWORD *)&v308[16] = v39;
              do
                v42 = __ldxr(p_shared_owners);
              while (__stxr(v42 + 1, p_shared_owners));
              *(_QWORD *)&v308[24] = 0;
              *(_QWORD *)&v308[32] = 0;
              *(_QWORD *)&v309 = 0;
              do
                v43 = __ldaxr(p_shared_owners);
              while (__stlxr(v43 - 1, p_shared_owners));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v40);
              }
              v44 = *(_QWORD *)v308;
              v45 = _os_log_pack_fill();
              v46 = *a2;
              v47 = a2[1];
              v48 = a2[4];
              v49 = a2[3];
              v50 = a2[2];
              *(_DWORD *)v45 = 67110912;
              *(_DWORD *)(v45 + 4) = v293;
              *(_WORD *)(v45 + 8) = 1024;
              *(_DWORD *)(v45 + 10) = v294;
              *(_WORD *)(v45 + 14) = 1024;
              *(_DWORD *)(v45 + 16) = v295;
              *(_WORD *)(v45 + 20) = 1024;
              *(_DWORD *)(v45 + 22) = v46;
              *(_WORD *)(v45 + 26) = 1024;
              *(_DWORD *)(v45 + 28) = v47;
              *(_WORD *)(v45 + 32) = 1024;
              *(_DWORD *)(v45 + 34) = v48;
              *(_WORD *)(v45 + 38) = 1024;
              *(_DWORD *)(v45 + 40) = v49;
              *(_WORD *)(v45 + 44) = 1024;
              *(_DWORD *)(v45 + 46) = v50;
              v51 = operator new();
              v52 = *(unsigned __int8 *)(v292 + 39);
              v53 = v291;
              if ((v52 & 0x80u) != 0)
              {
                v53 = *(_QWORD *)(v292 + 16);
                v52 = *(_QWORD *)(v292 + 24);
              }
              *(_QWORD *)v51 = v44;
              *(_OWORD *)(v51 + 8) = *(_OWORD *)&v308[8];
              *(_QWORD *)&v308[8] = 0;
              *(_QWORD *)&v308[16] = 0;
              *(_OWORD *)(v51 + 24) = *(_OWORD *)&v308[24];
              *(_QWORD *)&v308[24] = 0;
              *(_QWORD *)&v308[32] = 0;
              *(_QWORD *)(v51 + 40) = v53;
              *(_QWORD *)(v51 + 48) = v52;
              *(_BYTE *)(v51 + 56) = 1;
              v299.__r_.__value_.__r.__words[0] = 0;
              __p.__r_.__value_.__r.__words[0] = v51;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &__p);
              v54 = __p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              if (v54)
              {
                v55 = *(std::__shared_weak_count **)(v54 + 32);
                if (v55)
                {
                  v56 = (unint64_t *)&v55->__shared_owners_;
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                v58 = *(std::__shared_weak_count **)(v54 + 16);
                if (v58)
                {
                  v59 = (unint64_t *)&v58->__shared_owners_;
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                MEMORY[0x227684CE8](v54, 0x10F0C40B62ED6C6);
                v299.__r_.__value_.__r.__words[0] = 0;
              }
              v61 = *(std::__shared_weak_count **)&v308[32];
              if (*(_QWORD *)&v308[32])
              {
                v62 = (unint64_t *)(*(_QWORD *)&v308[32] + 8);
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              v64 = *(std::__shared_weak_count **)&v308[16];
              if (*(_QWORD *)&v308[16])
              {
                v65 = (unint64_t *)(*(_QWORD *)&v308[16] + 8);
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
            }
            else
            {
              os_log_type_enabled(v34, OS_LOG_TYPE_INFO);
              v67 = *a2;
              v68 = a2[1];
              v69 = a2[4];
              v70 = a2[3];
              v71 = a2[2];
              *(_DWORD *)v308 = 67110912;
              *(_DWORD *)&v308[4] = v293;
              *(_WORD *)&v308[8] = 1024;
              *(_DWORD *)&v308[10] = v294;
              *(_WORD *)&v308[14] = 1024;
              *(_DWORD *)&v308[16] = v295;
              *(_WORD *)&v308[20] = 1024;
              *(_DWORD *)&v308[22] = v67;
              *(_WORD *)&v308[26] = 1024;
              *(_DWORD *)&v308[28] = v68;
              *(_WORD *)&v308[32] = 1024;
              *(_DWORD *)&v308[34] = v69;
              *(_WORD *)&v308[38] = 1024;
              LODWORD(v309) = v70;
              WORD2(v309) = 1024;
              *(_DWORD *)((char *)&v309 + 6) = v71;
              v72 = (void *)_os_log_send_and_compose_impl();
              if (v72)
                free(v72);
            }
            if (v17)
            {
              sub_22322C138((uint64_t)__s, "DM: M:%d, S:%d, RS:%d, NOV:{KFB:%d, KFR:%d, OM:%d, MI:%d, MD:%d}", a2[7], a2[5], a2[6], *a2, a2[1], a2[4], a2[3], a2[2]);
              sub_223182C08((uint64_t)__s);
            }
            sub_223182C08((uint64_t)__s);
            v73 = v307;
            if (v307)
            {
              v74 = (unint64_t *)&v307->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            goto LABEL_90;
          }
LABEL_45:
          if ((v308[31] & 0x80000000) != 0)
            operator delete(*(void **)&v308[8]);
          goto LABEL_47;
        }
      }
      memmove(v27, v25, v26);
      goto LABEL_34;
    }
  }
LABEL_90:
  strcpy(__s, "Stats.Monitoring.DiscoveryMode");
  v308[0] = 7;
  v76 = *((_DWORD *)sub_2238B14D0(v15, 7u, v308) + 5);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  v77 = (float)v76;
  if (os_variant_has_internal_diagnostics())
  {
    v78 = sub_2241471F8();
    v79 = v78[2];
    if (!v79)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v79 = v78[2];
    }
    v80 = *(_QWORD *)(v79 + 64);
    v81 = (std::mutex *)(v80 + 32);
    std::mutex::lock((std::mutex *)(v80 + 32));
    v83 = *(_QWORD *)(v80 + 96);
    v82 = *(_QWORD *)(v80 + 104);
    std::mutex::unlock(v81);
    if (v83 != v82)
    {
      v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v86 = v84 >= 0 ? &__p : v85;
      v87 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v86);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 24))(v87))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        LOBYTE(v300) = 1;
        *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)*((unsigned int *)sub_2238B14D0(v15, 1u, &v300) + 5)
                                                          * 100.0)
                                                  / v77;
        sub_2238B02A0((double *)&qword_255788F20, v87, (float *)&v299, "by kf backlog");
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v90 = p_p->__r_.__value_.__r.__words[0];
    v91 = p_p->__r_.__value_.__l.__size_;
    v92 = p_p->__r_.__value_.__s.__data_[16];
    if (v90 == 0x6365722E64337663 && v91 == 0x73746174532E6E6FLL && v92 == 46)
    {
      v95 = sub_223187510();
      v96 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v97 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      LOBYTE(v300) = 1;
      v98 = (unsigned int *)sub_2238B14D0(v15, 1u, &v300);
      if ((v96 & 0x80u) == 0)
        v99 = &__p;
      else
        v99 = (std::string *)v97;
      if ((v96 & 0x80u) == 0)
        v100 = v96;
      else
        v100 = *((_QWORD *)&v97 + 1);
      *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v98[5] * 100.0) / v77;
      sub_2231897A8((uint64_t *)v95, v99, v100, (float *)&v299, (uint64_t)"by kf backlog", 13);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v101 = sub_2241471F8();
    v102 = v101[2];
    if (!v102)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v102 = v101[2];
    }
    v103 = *(_QWORD *)(v102 + 64);
    v104 = (std::mutex *)(v103 + 32);
    std::mutex::lock((std::mutex *)(v103 + 32));
    v106 = *(_QWORD *)(v103 + 96);
    v105 = *(_QWORD *)(v103 + 104);
    std::mutex::unlock(v104);
    if (v106 != v105)
    {
      v107 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v108 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v109 = v107 >= 0 ? &__p : v108;
      v110 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v109);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v110 + 24))(v110))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        LOBYTE(v300) = 2;
        *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)*((unsigned int *)sub_2238B14D0(v15, 2u, &v300) + 5)
                                                          * 100.0)
                                                  / v77;
        sub_2238B03DC((double *)&qword_255788F20, v110, (float *)&v299, "by kf result");
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v111 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v111 = __p.__r_.__value_.__l.__size_;
  if (v111 >= 0x11)
  {
    v112 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v112 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v113 = v112->__r_.__value_.__r.__words[0];
    v114 = v112->__r_.__value_.__l.__size_;
    v115 = v112->__r_.__value_.__s.__data_[16];
    if (v113 == 0x6365722E64337663 && v114 == 0x73746174532E6E6FLL && v115 == 46)
    {
      v118 = sub_223187510();
      v119 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v120 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      LOBYTE(v300) = 2;
      v121 = (unsigned int *)sub_2238B14D0(v15, 2u, &v300);
      if ((v119 & 0x80u) == 0)
        v122 = &__p;
      else
        v122 = (std::string *)v120;
      if ((v119 & 0x80u) == 0)
        v123 = v119;
      else
        v123 = *((_QWORD *)&v120 + 1);
      *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v121[5] * 100.0) / v77;
      sub_2231897A8((uint64_t *)v118, v122, v123, (float *)&v299, (uint64_t)"by kf result", 12);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v124 = sub_2241471F8();
    v125 = v124[2];
    if (!v125)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v125 = v124[2];
    }
    v126 = *(_QWORD *)(v125 + 64);
    v127 = (std::mutex *)(v126 + 32);
    std::mutex::lock((std::mutex *)(v126 + 32));
    v129 = *(_QWORD *)(v126 + 96);
    v128 = *(_QWORD *)(v126 + 104);
    std::mutex::unlock(v127);
    if (v129 != v128)
    {
      v130 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v131 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v132 = v130 >= 0 ? &__p : v131;
      v133 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v132);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v133 + 24))(v133))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        LOBYTE(v300) = 3;
        *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)*((unsigned int *)sub_2238B14D0(v15, 3u, &v300) + 5)
                                                          * 100.0)
                                                  / v77;
        sub_22386DB20((double *)&qword_255788F20, v133, (float *)&v299, "by depth mesh novelty");
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v134 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v134 = __p.__r_.__value_.__l.__size_;
  if (v134 >= 0x11)
  {
    v135 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v135 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v136 = v135->__r_.__value_.__r.__words[0];
    v137 = v135->__r_.__value_.__l.__size_;
    v138 = v135->__r_.__value_.__s.__data_[16];
    if (v136 == 0x6365722E64337663 && v137 == 0x73746174532E6E6FLL && v138 == 46)
    {
      v141 = sub_223187510();
      v142 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v143 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      LOBYTE(v300) = 3;
      v144 = (unsigned int *)sub_2238B14D0(v15, 3u, &v300);
      if ((v142 & 0x80u) == 0)
        v145 = &__p;
      else
        v145 = (std::string *)v143;
      if ((v142 & 0x80u) == 0)
        v146 = v142;
      else
        v146 = *((_QWORD *)&v143 + 1);
      *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v144[5] * 100.0) / v77;
      sub_2231897A8((uint64_t *)v141, v145, v146, (float *)&v299, (uint64_t)"by depth mesh novelty", 21);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v147 = sub_2241471F8();
    v148 = v147[2];
    if (!v148)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v148 = v147[2];
    }
    v149 = *(_QWORD *)(v148 + 64);
    v150 = (std::mutex *)(v149 + 32);
    std::mutex::lock((std::mutex *)(v149 + 32));
    v152 = *(_QWORD *)(v149 + 96);
    v151 = *(_QWORD *)(v149 + 104);
    std::mutex::unlock(v150);
    if (v152 != v151)
    {
      v153 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v154 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v155 = v153 >= 0 ? &__p : v154;
      v156 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v155);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v156 + 24))(v156))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        LOBYTE(v300) = 4;
        *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)*((unsigned int *)sub_2238B14D0(v15, 4u, &v300) + 5)
                                                          * 100.0)
                                                  / v77;
        sub_2231CE208((double *)&qword_255788F20, v156, (float *)&v299, "by mesh incompleteness");
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v157 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v157 = __p.__r_.__value_.__l.__size_;
  if (v157 >= 0x11)
  {
    v158 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v158 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v159 = v158->__r_.__value_.__r.__words[0];
    v160 = v158->__r_.__value_.__l.__size_;
    v161 = v158->__r_.__value_.__s.__data_[16];
    if (v159 == 0x6365722E64337663 && v160 == 0x73746174532E6E6FLL && v161 == 46)
    {
      v164 = sub_223187510();
      v165 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v166 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      LOBYTE(v300) = 4;
      v167 = (unsigned int *)sub_2238B14D0(v15, 4u, &v300);
      if ((v165 & 0x80u) == 0)
        v168 = &__p;
      else
        v168 = (std::string *)v166;
      if ((v165 & 0x80u) == 0)
        v169 = v165;
      else
        v169 = *((_QWORD *)&v166 + 1);
      *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v167[5] * 100.0) / v77;
      sub_2231897A8((uint64_t *)v164, v168, v169, (float *)&v299, (uint64_t)"by mesh incompleteness", 22);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v170 = sub_2241471F8();
    v171 = v170[2];
    if (!v171)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v171 = v170[2];
    }
    v172 = *(_QWORD *)(v171 + 64);
    v173 = (std::mutex *)(v172 + 32);
    std::mutex::lock((std::mutex *)(v172 + 32));
    v175 = *(_QWORD *)(v172 + 96);
    v174 = *(_QWORD *)(v172 + 104);
    std::mutex::unlock(v173);
    if (v175 != v174)
    {
      v176 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v177 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v178 = v176 >= 0 ? &__p : v177;
      v179 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v178);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v179 + 24))(v179))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        LOBYTE(v300) = 5;
        *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)*((unsigned int *)sub_2238B14D0(v15, 5u, &v300) + 5)
                                                          * 100.0)
                                                  / v77;
        sub_223456130((double *)&qword_255788F20, v179, (float *)&v299, "by occupancy mapping");
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v180 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v180 = __p.__r_.__value_.__l.__size_;
  if (v180 >= 0x11)
  {
    v181 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v181 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v182 = v181->__r_.__value_.__r.__words[0];
    v183 = v181->__r_.__value_.__l.__size_;
    v184 = v181->__r_.__value_.__s.__data_[16];
    if (v182 == 0x6365722E64337663 && v183 == 0x73746174532E6E6FLL && v184 == 46)
    {
      v187 = sub_223187510();
      v188 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v189 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      LOBYTE(v300) = 5;
      v190 = (unsigned int *)sub_2238B14D0(v15, 5u, &v300);
      if ((v188 & 0x80u) == 0)
        v191 = &__p;
      else
        v191 = (std::string *)v189;
      if ((v188 & 0x80u) == 0)
        v192 = v188;
      else
        v192 = *((_QWORD *)&v189 + 1);
      *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v190[5] * 100.0) / v77;
      sub_2231897A8((uint64_t *)v187, v191, v192, (float *)&v299, (uint64_t)"by occupancy mapping", 20);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &v299);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v193 = sub_2241471F8();
    v194 = v193[2];
    if (!v194)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v194 = v193[2];
    }
    v195 = *(_QWORD *)(v194 + 64);
    v196 = (std::mutex *)(v195 + 32);
    std::mutex::lock((std::mutex *)(v195 + 32));
    v198 = *(_QWORD *)(v195 + 96);
    v197 = *(_QWORD *)(v195 + 104);
    std::mutex::unlock(v196);
    if (v198 != v197)
    {
      v199 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
      v200 = (std::string *)v299.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v201 = v199 >= 0 ? &v299 : v200;
      v202 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v201);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v202 + 24))(v202))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        v297 = 6;
        v298 = (float)((float)*((unsigned int *)sub_2238B14D0(v15, 6u, &v297) + 5) * 100.0) / v77;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v202 + 24))(v202))
        {
          v203 = (char *)operator new(0x20uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245B8D70;
          strcpy(v203, "by suggestion stablization");
          *(_QWORD *)&v300 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v300 + 1) = 2;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v203;
          v204 = sub_2241471F8();
          sub_2231FBBA8((uint64_t)v204, v202, &v298, (uint64_t)&__p, &v300);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v205 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
  if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v205 = v299.__r_.__value_.__l.__size_;
  if (v205 >= 0x11)
  {
    v206 = &v299;
    if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v206 = (std::string *)v299.__r_.__value_.__r.__words[0];
    v207 = v206->__r_.__value_.__r.__words[0];
    v208 = v206->__r_.__value_.__l.__size_;
    v209 = v206->__r_.__value_.__s.__data_[16];
    if (v207 == 0x6365722E64337663 && v208 == 0x73746174532E6E6FLL && v209 == 46)
    {
      v212 = sub_223187510();
      v213 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
      v214 = *(_OWORD *)&v299.__r_.__value_.__l.__data_;
      LOBYTE(v300) = 6;
      v215 = (unsigned int *)sub_2238B14D0(v15, 6u, &v300);
      if ((v213 & 0x80u) == 0)
        v216 = &v299;
      else
        v216 = (std::string *)v214;
      if ((v213 & 0x80u) == 0)
        v217 = v213;
      else
        v217 = *((_QWORD *)&v214 + 1);
      *(float *)&__p.__r_.__value_.__l.__data_ = (float)((float)v215[5] * 100.0) / v77;
      sub_2231897A8((uint64_t *)v212, v216, v217, (float *)&__p, (uint64_t)"by suggestion stablization", 26);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v218 = sub_2241471F8();
    v219 = v218[2];
    if (!v219)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v219 = v218[2];
    }
    v220 = *(_QWORD *)(v219 + 64);
    v221 = (std::mutex *)(v220 + 32);
    std::mutex::lock((std::mutex *)(v220 + 32));
    v223 = *(_QWORD *)(v220 + 96);
    v222 = *(_QWORD *)(v220 + 104);
    std::mutex::unlock(v221);
    if (v223 != v222)
    {
      v224 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v225 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v226 = v224 >= 0 ? &__p : v225;
      v227 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v226);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v227 + 24))(v227))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        LOBYTE(v300) = 0;
        *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)*((unsigned int *)sub_2238B14D0(v15, 0, &v300) + 5)
                                                          * 100.0)
                                                  / v77;
        sub_2238649D0((double *)&qword_255788F20, v227, (float *)&v299, "by other sources");
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v228 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v228 = __p.__r_.__value_.__l.__size_;
  if (v228 >= 0x11)
  {
    v229 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v229 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v230 = v229->__r_.__value_.__r.__words[0];
    v231 = v229->__r_.__value_.__l.__size_;
    v232 = v229->__r_.__value_.__s.__data_[16];
    if (v230 == 0x6365722E64337663 && v231 == 0x73746174532E6E6FLL && v232 == 46)
    {
      v235 = sub_223187510();
      v236 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v237 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      LOBYTE(v300) = 0;
      v238 = (unsigned int *)sub_2238B14D0(v15, 0, &v300);
      if ((v236 & 0x80u) == 0)
        v239 = &__p;
      else
        v239 = (std::string *)v237;
      if ((v236 & 0x80u) == 0)
        v240 = v236;
      else
        v240 = *((_QWORD *)&v237 + 1);
      *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v238[5] * 100.0) / v77;
      sub_2231897A8((uint64_t *)v235, v239, v240, (float *)&v299, (uint64_t)"by other sources", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v308[0] = 1;
  v241 = *((_DWORD *)sub_2238B14D0(v15, 1u, v308) + 5);
  __p.__r_.__value_.__s.__data_[0] = 2;
  v242 = *((_DWORD *)sub_2238B14D0(v15, 2u, &__p) + 5);
  v299.__r_.__value_.__s.__data_[0] = 3;
  v243 = *((_DWORD *)sub_2238B14D0(v15, 3u, &v299) + 5);
  LOBYTE(v300) = 4;
  v244 = *((_DWORD *)sub_2238B14D0(v15, 4u, &v300) + 5);
  LOBYTE(v298) = 5;
  v245 = *((_DWORD *)sub_2238B14D0(v15, 5u, &v298) + 5);
  v297 = 6;
  v246 = *((_DWORD *)sub_2238B14D0(v15, 6u, &v297) + 5);
  v296 = 0;
  v247 = *((_DWORD *)sub_2238B14D0(v15, 0, &v296) + 5);
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  v248 = v242 + v241 + v243 + v244 + v245 + v246 + v247;
  if (os_variant_has_internal_diagnostics())
  {
    v249 = sub_2241471F8();
    v250 = v249[2];
    if (!v250)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v250 = v249[2];
    }
    v251 = *(_QWORD *)(v250 + 64);
    v252 = (std::mutex *)(v251 + 32);
    std::mutex::lock((std::mutex *)(v251 + 32));
    v254 = *(_QWORD *)(v251 + 96);
    v253 = *(_QWORD *)(v251 + 104);
    std::mutex::unlock(v252);
    if (v254 != v253)
    {
      v255 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v256 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v257 = v255 >= 0 ? &__p : v256;
      v258 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v257);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v258 + 24))(v258))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v248 * 100.0) / v77;
        sub_22386E598((double *)&qword_255788F20, v258, (float *)&v299, "duty cycle");
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v259 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v259 = __p.__r_.__value_.__l.__size_;
  if (v259 >= 0x11)
  {
    v260 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v260 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v261 = v260->__r_.__value_.__r.__words[0];
    v262 = v260->__r_.__value_.__l.__size_;
    v263 = v260->__r_.__value_.__s.__data_[16];
    if (v261 == 0x6365722E64337663 && v262 == 0x73746174532E6E6FLL && v263 == 46)
    {
      v266 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v267 = &__p;
      else
        v267 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v268 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v268 = __p.__r_.__value_.__l.__size_;
      *(float *)&v299.__r_.__value_.__l.__data_ = (float)((float)v248 * 100.0) / v77;
      sub_2231897A8((uint64_t *)v266, v267, v268, (float *)&v299, (uint64_t)"duty cycle", 10);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v298 = 10.0;
  *(_QWORD *)v308 = "cv3d.recon.";
  *(_QWORD *)&v308[8] = 11;
  *(_QWORD *)&v308[16] = __s;
  *(_QWORD *)&v308[24] = strlen(__s);
  sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, &v299);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v269 = sub_2241471F8();
    v270 = v269[2];
    if (!v270)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v270 = v269[2];
    }
    v271 = *(_QWORD *)(v270 + 64);
    v272 = (std::mutex *)(v271 + 32);
    std::mutex::lock((std::mutex *)(v271 + 32));
    v274 = *(_QWORD *)(v271 + 96);
    v273 = *(_QWORD *)(v271 + 104);
    std::mutex::unlock(v272);
    if (v274 != v273)
    {
      v275 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
      v276 = (std::string *)v299.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v277 = v275 >= 0 ? &v299 : v276;
      v278 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v277);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v278 + 24))(v278))
      {
        memset(v308, 0, 32);
        *(_DWORD *)&v308[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v278 + 24))(v278))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
          LODWORD(__p.__r_.__value_.__l.__data_) = 4804683;
          *(_QWORD *)&v300 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v300 + 1) = 2;
          v279 = sub_2241471F8();
          sub_22361FE58((uint64_t)v279, v278, (int *)&v298, (uint64_t)&__p, &v300);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  memset(v308, 0, 32);
  *(_DWORD *)&v308[32] = 728325624;
  kdebug_trace();
  v280 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
  if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v280 = v299.__r_.__value_.__l.__size_;
  if (v280 >= 0x11)
  {
    v281 = &v299;
    if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v281 = (std::string *)v299.__r_.__value_.__r.__words[0];
    v282 = v281->__r_.__value_.__r.__words[0];
    v283 = v281->__r_.__value_.__l.__size_;
    v284 = v281->__r_.__value_.__s.__data_[16];
    if (v282 == 0x6365722E64337663 && v283 == 0x73746174532E6E6FLL && v284 == 46)
    {
      v287 = sub_223187510();
      if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v288 = &v299;
      else
        v288 = (std::string *)v299.__r_.__value_.__r.__words[0];
      if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v289 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
      else
        v289 = v299.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v287, v288, v289, &v298, (uint64_t)"KPI", 3);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
}

void sub_2238AFD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  if (*(_BYTE *)(v32 - 168))
  {
    if (*(char *)(v32 - 169) < 0)
      operator delete(*(void **)(v31 + 80));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2238AFDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_22319A054(&a28);
  sub_22319A054(&a23);
  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2238AFDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2238AFE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  MEMORY[0x227684CE8](v31, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2238AFE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2238AFE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238B0070(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC910);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC910))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC908);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC910);
  }
  *a1 = qword_2540CC908;
}

void sub_2238B010C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC910);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC910);
  _Unwind_Resume(a1);
}

void sub_2238B0164(double *a1, uint64_t a2, char *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22389549C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B0284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238B02A0(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B03C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238B03DC(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B04FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238B0518(uint64_t a1, int a2)
{
  if (a2 == 1)
    return 1;
  else
    return 3;
}

void sub_2238B052C(uint64_t a1)
{
  sub_2238B0788(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2238B0550(uint64_t result)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (result)
  {
    v1 = (void **)result;
    v2 = *(_QWORD **)(result + 16);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *v1;
    *v1 = 0;
    if (v4)
      operator delete(v4);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

_QWORD *sub_2238B05B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[23];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[9];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (v11)
        goto LABEL_16;
      return a1;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (!v11)
    return a1;
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

uint64_t sub_2238B06D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2238B0740(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2238B0750(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2238B0788(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  *(_QWORD *)a1 = &off_24EC5C040;
  v2 = *(void **)(a1 + 1520);
  if (v2)
  {
    *(_QWORD *)(a1 + 1528) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1472);
  if (v3)
  {
    *(_QWORD *)(a1 + 1480) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 1448);
  *(_QWORD *)(a1 + 1448) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 1456))();
  v5 = *(_QWORD **)(a1 + 1408);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 1392);
  *(_QWORD *)(a1 + 1392) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(void **)(a1 + 1376);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 1376) = 0;
  }
  v9 = *(void **)(a1 + 1344);
  if (v9)
  {
    free(v9);
    *(_QWORD *)(a1 + 1344) = 0;
  }
  v10 = *(void **)(a1 + 1296);
  if (v10)
  {
    *(_QWORD *)(a1 + 1304) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 1272);
  if (v11)
  {
    *(_QWORD *)(a1 + 1280) = v11;
    operator delete(v11);
  }
  sub_223198030(a1 + 1248, *(_QWORD **)(a1 + 1256));
  v12 = *(std::__shared_weak_count **)(a1 + 1168);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 1080);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(std::__shared_weak_count **)(a1 + 992);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(std::__shared_weak_count **)(a1 + 904);
  if (!v21)
    goto LABEL_38;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    sub_2238AA918((_QWORD *)(a1 + 8));
    return a1;
  }
  else
  {
LABEL_38:
    sub_2238AA918((_QWORD *)(a1 + 8));
    return a1;
  }
}

void sub_2238B0960(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t (***v10)();
  unint64_t *v11;
  unint64_t v12;
  uint64_t (***v13)();
  __int128 v14;
  _OWORD v15[2];
  uint64_t (***v16)();
  std::__shared_weak_count *v17;

  v4 = *(uint64_t (****)())(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v16 = v4;
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4 && *v4 == off_24EC71150)
  {
    v13 = v4;
    *(_QWORD *)&v14 = v5;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v13 = 0;
    *(_QWORD *)&v14 = 0;
    if (v17)
    {
      v8 = &v17->__shared_owners_;
      do
        v9 = __ldaxr((unint64_t *)v8);
      while (__stlxr(v9 - 1, (unint64_t *)v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v10 = 0;
        goto LABEL_18;
      }
    }
  }
  v10 = v13;
  if ((_QWORD)v14)
  {
    v11 = (unint64_t *)(v14 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v14 + 16))(v14);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
    }
  }
LABEL_18:
  if (v10)
  {
    sub_2238B0CD0(a1, (uint64_t)&v14);
    *(_QWORD *)a2 = &off_24EC5C140;
    *(_OWORD *)(a2 + 8) = v14;
    *(_OWORD *)(a2 + 24) = v15[0];
    *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)v15 + 9);
    *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

uint64_t sub_2238B0AC8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC5C140;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

_QWORD *sub_2238B0B44(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC5C140;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2238B0BB8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC5C140;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2238B0C2C()
{
  return 3;
}

uint64_t sub_2238B0C34(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2238B0C3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2238B0C54(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2238B0CD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2238B0E18(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2238B0E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2238B0E18@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC71150)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2238B0F20(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2238B0EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2238B0F20@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2238B1214();
  v5 = sub_2232BD638();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (v14)
    {
      if (!v10)
        goto LABEL_32;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v10)
        goto LABEL_32;
    }
    v10 = *(_QWORD *)(a1 + 8);
    v15 = *(std::__shared_weak_count **)(a1 + 16);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
LABEL_27:
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_30;
    return result;
  }
  if (v10)
    goto LABEL_27;
LABEL_32:
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_41:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_45;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_41;
LABEL_45:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2238B11E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2238B1214()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578E4B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578E4B0))
  {
    sub_223174DE4(v7, "ConstSharedImage");
    v2 = sub_2231A36D0();
    sub_2238B1418((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_2238B1418((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578E498, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E498, &dword_22314D000);
          __cxa_guard_release(&qword_25578E4B0);
          return &stru_25578E498;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578E498;
}

void sub_2238B1364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578E4B0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578E4B0);
  _Unwind_Resume(a1);
}

void sub_2238B1418(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2238B14B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2238B14D0(float *a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  unint64_t v39;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime > v7)
    {
LABEL_36:
      if (prime >> 61)
        sub_223174E94();
      v21 = operator new(8 * prime);
      v22 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v21;
      if (v22)
        operator delete(v22);
      v23 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
      while (prime != v23);
      v25 = (uint64_t *)(a1 + 4);
      v24 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v24)
        goto LABEL_68;
      v26 = v24[1];
      v27 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v28 = v26 & v27;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
        for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
        {
          v30 = i[1] & v27;
          if (v30 == v28)
          {
            v24 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *v24 = *i;
            v31 = 8 * v30;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
            **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
            v24 = i;
            v28 = v30;
          }
        }
        goto LABEL_68;
      }
      if (v26 >= prime)
        v26 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
      v35 = (_QWORD *)*v24;
      if (!*v24)
      {
LABEL_68:
        v7 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_69;
        goto LABEL_84;
      }
      while (1)
      {
        v37 = v35[1];
        if (v37 >= prime)
          v37 %= prime;
        if (v37 == v26)
          goto LABEL_62;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *v24 = *v35;
          v36 = 8 * v37;
          *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
          **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
          v35 = v24;
LABEL_62:
          v24 = v35;
          v35 = (_QWORD *)*v35;
          if (!v35)
            goto LABEL_68;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          v24 = v35;
          v35 = (_QWORD *)*v35;
          v26 = v37;
          if (!v35)
            goto LABEL_68;
        }
      }
    }
    if (prime < v7)
    {
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < v7)
      {
        if (!prime)
        {
          v38 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v38)
            operator delete(v38);
          v7 = 0;
          *((_QWORD *)a1 + 1) = 0;
          goto LABEL_84;
        }
        goto LABEL_36;
      }
      v7 = *((_QWORD *)a1 + 1);
    }
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_69:
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v15 = *(_QWORD **)a1;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v16)
          goto LABEL_25;
      }
      else
      {
        v3 = v6;
        v15 = *(_QWORD **)a1;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v16)
          goto LABEL_25;
      }
      goto LABEL_85;
    }
LABEL_84:
    v3 = ((_DWORD)v7 - 1) & v6;
    v15 = *(_QWORD **)a1;
    v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v16)
      goto LABEL_25;
    goto LABEL_85;
  }
  v15 = *(_QWORD **)a1;
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v16)
  {
LABEL_25:
    *v10 = *v16;
LABEL_91:
    *v16 = v10;
    goto LABEL_92;
  }
LABEL_85:
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v15[v3] = a1 + 4;
  if (*v10)
  {
    v39 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v16 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_2238B1968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238B197C(uint64_t a1, int a2, double a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  double v8;
  uint64_t v9;
  char v10;
  double v11;
  double v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v22;
  std::string::size_type v23;
  int v24;
  __n128 *v27;
  std::string *v28;
  size_t v29;
  BOOL v30;
  BOOL v31;
  unsigned __int8 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::mutex *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  std::mutex *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  int v54;
  __n128 *v57;
  std::string *v58;
  size_t v59;
  double v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string::size_type v64;
  int v65;
  BOOL v66;
  __n128 *v68;
  std::string *v69;
  size_t v70;
  double v71;
  double v72;
  unsigned __int8 v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  std::mutex *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  int v87;
  BOOL v88;
  __n128 *v90;
  std::string *v91;
  size_t v92;
  double v93;
  double v94;
  std::string __p;
  double v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25578E508);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25578E508))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2938, &byte_25578E4B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E508);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25578E560);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25578E560))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2938, &byte_25578E510, &dword_22314D000);
    __cxa_guard_release(&qword_25578E560);
  }
  if (a2 == 2)
    v8 = 1.0;
  else
    v8 = 0.0;
  std::mutex::lock((std::mutex *)(a1 + 2888));
  if (*(_BYTE *)(a1 + 2960))
    v8 = v8 + *(double *)(a1 + 2952);
  else
    *(_BYTE *)(a1 + 2960) = 1;
  *(double *)(a1 + 2952) = v8;
  *(double *)(a1 + 2968) = *(double *)(a1 + 2968) + 1.0;
  std::mutex::unlock((std::mutex *)(a1 + 2888));
  std::mutex::lock(&stru_25578E4C8);
  if (a2 != 2 || byte_25578E4B8)
  {
    v9 = 0;
    v10 = 1;
    v11 = 0.0;
    if (a2 != 2 && byte_25578E4B8)
    {
      v10 = 0;
      v11 = a3 - *(double *)&qword_25578E4C0;
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
    qword_25578E4C0 = *(_QWORD *)&a3;
    v10 = 1;
    v11 = 0.0;
  }
  byte_25578E4B8 = a2 == 2;
  std::mutex::unlock(&stru_25578E4C8);
  v96 = v11;
  v97 = v9;
  if ((v10 & 1) == 0)
  {
    std::mutex::lock((std::mutex *)(a1 + 3496));
    ++*(_QWORD *)(a1 + 3560);
    std::mutex::unlock((std::mutex *)(a1 + 3496));
    std::mutex::lock((std::mutex *)(a1 + 3128));
    if (*(_BYTE *)(a1 + 3200))
    {
      v12 = v11 + *(double *)(a1 + 3192);
    }
    else
    {
      *(_BYTE *)(a1 + 3200) = 1;
      v12 = v11;
    }
    *(double *)(a1 + 3192) = v12;
    *(double *)(a1 + 3208) = *(double *)(a1 + 3208) + 1.0;
    std::mutex::unlock((std::mutex *)(a1 + 3128));
    std::mutex::lock((std::mutex *)(a1 + 3368));
    if (*(_BYTE *)(a1 + 3456) && *(double *)(a1 + 3448) < v11)
      v11 = *(double *)(a1 + 3448);
    *(double *)(a1 + 3448) = v11;
    *(_BYTE *)(a1 + 3456) = 1;
    std::mutex::unlock((std::mutex *)(a1 + 3368));
    *(_QWORD *)&v98 = "cv3d.recon.";
    *((_QWORD *)&v98 + 1) = 11;
    *(_QWORD *)&v99 = "Stats.aggregated";
    *((_QWORD *)&v99 + 1) = 16;
    sub_2231A9820((uint64_t)&v98, (uint64_t)&v100, 0, 0, &__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v13 = sub_2241471F8();
      v14 = v13[2];
      if (!v14)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v14 = v13[2];
      }
      v15 = *(_QWORD *)(v14 + 64);
      v16 = (std::mutex *)(v15 + 32);
      std::mutex::lock((std::mutex *)(v15 + 32));
      v18 = *(_QWORD *)(v15 + 96);
      v17 = *(_QWORD *)(v15 + 104);
      std::mutex::unlock(v16);
      if (v18 != v17)
      {
        sub_2241471F8();
        v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
        {
          v98 = 0u;
          v99 = 0u;
          v100 = 728325608;
          kdebug_trace();
          sub_2238B2960((double *)&qword_255788F20, v19, (uint64_t *)&v96, "duration_of_last_discover");
          kdebug_trace();
        }
      }
    }
    v98 = 0u;
    v99 = 0u;
    v100 = 728325624;
    kdebug_trace();
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size >= 0x11)
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v22 = p_p->__r_.__value_.__r.__words[0];
      v23 = p_p->__r_.__value_.__l.__size_;
      v24 = p_p->__r_.__value_.__s.__data_[16];
      if (v22 == 0x6365722E64337663 && v23 == 0x73746174532E6E6FLL && v24 == 46)
      {
        v27 = sub_223187510();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &__p;
        else
          v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v29 = __p.__r_.__value_.__l.__size_;
        sub_2231AA374((uint64_t *)v27, v28, v29, (uint64_t *)&v96, (uint64_t)"duration_of_last_discover", 25);
      }
    }
    kdebug_trace();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::lock(&stru_25578E520);
  v30 = a2 == 2;
  if (byte_25578E510)
    v30 = 1;
  if (!v30)
  {
    qword_25578E518 = *(_QWORD *)&a3;
LABEL_59:
    byte_25578E510 = a2 != 2;
    std::mutex::unlock(&stru_25578E520);
    goto LABEL_60;
  }
  if (byte_25578E510)
    v31 = a2 != 2;
  else
    v31 = 1;
  if (v31)
    goto LABEL_59;
  v41 = a3 - *(double *)&qword_25578E518;
  byte_25578E510 = 0;
  std::mutex::unlock(&stru_25578E520);
  v96 = v41;
  v97 = 1;
  std::mutex::lock((std::mutex *)(a1 + 3496));
  ++*(_QWORD *)(a1 + 3560);
  std::mutex::unlock((std::mutex *)(a1 + 3496));
  v42 = v96;
  std::mutex::lock((std::mutex *)(a1 + 3248));
  if (*(_BYTE *)(a1 + 3320))
    v42 = v42 + *(double *)(a1 + 3312);
  else
    *(_BYTE *)(a1 + 3320) = 1;
  *(double *)(a1 + 3312) = v42;
  *(double *)(a1 + 3328) = *(double *)(a1 + 3328) + 1.0;
  std::mutex::unlock((std::mutex *)(a1 + 3248));
  *(_QWORD *)&v98 = "cv3d.recon.";
  *((_QWORD *)&v98 + 1) = 11;
  *(_QWORD *)&v99 = "Stats.aggregated";
  *((_QWORD *)&v99 + 1) = 16;
  sub_2231A9820((uint64_t)&v98, (uint64_t)&v100, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v43 = sub_2241471F8();
    v44 = v43[2];
    if (!v44)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v44 = v43[2];
    }
    v45 = *(_QWORD *)(v44 + 64);
    v46 = (std::mutex *)(v45 + 32);
    std::mutex::lock((std::mutex *)(v45 + 32));
    v48 = *(_QWORD *)(v45 + 96);
    v47 = *(_QWORD *)(v45 + 104);
    std::mutex::unlock(v46);
    if (v48 != v47)
    {
      sub_2241471F8();
      v49 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49))
      {
        v98 = 0u;
        v99 = 0u;
        v100 = 728325608;
        kdebug_trace();
        sub_2238B2A9C((double *)&qword_255788F20, v49, (uint64_t *)&v96, "duration_of_last_monitor");
        kdebug_trace();
      }
    }
  }
  v98 = 0u;
  v99 = 0u;
  v100 = 728325624;
  kdebug_trace();
  v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = __p.__r_.__value_.__l.__size_;
  if (v50 >= 0x11)
  {
    v51 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v52 = v51->__r_.__value_.__r.__words[0];
    v53 = v51->__r_.__value_.__l.__size_;
    v54 = v51->__r_.__value_.__s.__data_[16];
    if (v52 == 0x6365722E64337663 && v53 == 0x73746174532E6E6FLL && v54 == 46)
    {
      v57 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &__p;
      else
        v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v59 = __p.__r_.__value_.__l.__size_;
      sub_2231AA374((uint64_t *)v57, v58, v59, (uint64_t *)&v96, (uint64_t)"duration_of_last_monitor", 24);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_60:
  v32 = atomic_load((unsigned __int8 *)&qword_25578E5B8);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_25578E5B8))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2BD8, &qword_25578E568, &dword_22314D000);
    __cxa_guard_release(&qword_25578E5B8);
  }
  *(_QWORD *)&v98 = "cv3d.recon.";
  *((_QWORD *)&v98 + 1) = 11;
  *(_QWORD *)&v99 = "Stats.aggregated";
  *((_QWORD *)&v99 + 1) = 16;
  sub_2231A9820((uint64_t)&v98, (uint64_t)&v100, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v33 = sub_2241471F8();
    v34 = v33[2];
    if (!v34)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v34 = v33[2];
    }
    v35 = *(_QWORD *)(v34 + 64);
    v36 = (std::mutex *)(v35 + 32);
    std::mutex::lock((std::mutex *)(v35 + 32));
    v38 = *(_QWORD *)(v35 + 96);
    v37 = *(_QWORD *)(v35 + 104);
    std::mutex::unlock(v36);
    if (v38 != v37)
    {
      sub_2241471F8();
      v39 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39))
      {
        v98 = 0u;
        v99 = 0u;
        v100 = 728325608;
        kdebug_trace();
        std::mutex::lock(&stru_25578E578);
        if (a2 == 2)
        {
          if (!byte_25578E570)
          {
            v60 = -1.0;
            goto LABEL_104;
          }
          v40 = *(double *)&qword_25578E568;
        }
        else
        {
          qword_25578E568 = *(_QWORD *)&a3;
          byte_25578E570 = 1;
          v40 = a3;
        }
        v60 = a3 - v40;
LABEL_104:
        std::mutex::unlock(&stru_25578E578);
        v96 = v60;
        sub_2238B2C00((double *)&qword_255788F20, v39, &v96, "time_since_last_monitor");
        kdebug_trace();
      }
    }
  }
  v98 = 0u;
  v99 = 0u;
  v100 = 728325624;
  kdebug_trace();
  v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v61 = __p.__r_.__value_.__l.__size_;
  if (v61 >= 0x11)
  {
    v62 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v63 = v62->__r_.__value_.__r.__words[0];
    v64 = v62->__r_.__value_.__l.__size_;
    v65 = v62->__r_.__value_.__s.__data_[16];
    v66 = v63 == 0x6365722E64337663 && v64 == 0x73746174532E6E6FLL;
    if (v66 && v65 == 46)
    {
      v68 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &__p;
      else
        v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v70 = __p.__r_.__value_.__l.__size_;
      std::mutex::lock(&stru_25578E578);
      if (a2 == 2)
      {
        if (!byte_25578E570)
        {
          v72 = -1.0;
          goto LABEL_129;
        }
        v71 = *(double *)&qword_25578E568;
      }
      else
      {
        qword_25578E568 = *(_QWORD *)&a3;
        byte_25578E570 = 1;
        v71 = a3;
      }
      v72 = a3 - v71;
LABEL_129:
      std::mutex::unlock(&stru_25578E578);
      v96 = v72;
      sub_2231AA374((uint64_t *)v68, v69, v70, (uint64_t *)&v96, (uint64_t)"time_since_last_monitor", 23);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v73 = atomic_load((unsigned __int8 *)&qword_25578E610);
  if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_25578E610))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2BD8, &qword_25578E5C0, &dword_22314D000);
    __cxa_guard_release(&qword_25578E610);
  }
  *(_QWORD *)&v98 = "cv3d.recon.";
  *((_QWORD *)&v98 + 1) = 11;
  *(_QWORD *)&v99 = "Stats.aggregated";
  *((_QWORD *)&v99 + 1) = 16;
  sub_2231A9820((uint64_t)&v98, (uint64_t)&v100, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v74 = sub_2241471F8();
    v75 = v74[2];
    if (!v75)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v75 = v74[2];
    }
    v76 = *(_QWORD *)(v75 + 64);
    v77 = (std::mutex *)(v76 + 32);
    std::mutex::lock((std::mutex *)(v76 + 32));
    v79 = *(_QWORD *)(v76 + 96);
    v78 = *(_QWORD *)(v76 + 104);
    std::mutex::unlock(v77);
    if (v79 != v78)
    {
      sub_2241471F8();
      v80 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80))
      {
        v98 = 0u;
        v99 = 0u;
        v100 = 728325608;
        kdebug_trace();
        std::mutex::lock(&stru_25578E5D0);
        if (a2 == 2)
        {
          qword_25578E5C0 = *(_QWORD *)&a3;
          byte_25578E5C8 = 1;
          v81 = a3;
        }
        else
        {
          if (!byte_25578E5C8)
          {
            v82 = -1.0;
            goto LABEL_144;
          }
          v81 = *(double *)&qword_25578E5C0;
        }
        v82 = a3 - v81;
LABEL_144:
        std::mutex::unlock(&stru_25578E5D0);
        v96 = v82;
        sub_2238B2D3C((double *)&qword_255788F20, v80, &v96, "time_since_last_discover");
        kdebug_trace();
      }
    }
  }
  v98 = 0u;
  v99 = 0u;
  v100 = 728325624;
  kdebug_trace();
  v83 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v83 = __p.__r_.__value_.__l.__size_;
  if (v83 >= 0x11)
  {
    v84 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v85 = v84->__r_.__value_.__r.__words[0];
    v86 = v84->__r_.__value_.__l.__size_;
    v87 = v84->__r_.__value_.__s.__data_[16];
    v88 = v85 == 0x6365722E64337663 && v86 == 0x73746174532E6E6FLL;
    if (v88 && v87 == 46)
    {
      v90 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v91 = &__p;
      else
        v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v92 = __p.__r_.__value_.__l.__size_;
      std::mutex::lock(&stru_25578E5D0);
      if (a2 == 2)
      {
        qword_25578E5C0 = *(_QWORD *)&a3;
        byte_25578E5C8 = 1;
        v93 = a3;
      }
      else
      {
        if (!byte_25578E5C8)
        {
          v94 = -1.0;
          goto LABEL_169;
        }
        v93 = *(double *)&qword_25578E5C0;
      }
      v94 = a3 - v93;
LABEL_169:
      std::mutex::unlock(&stru_25578E5D0);
      v96 = v94;
      sub_2231AA374((uint64_t *)v90, v91, v92, (uint64_t *)&v96, (uint64_t)"time_since_last_discover", 24);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2238B286C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238B2938(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_2238B2960(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705350((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B2A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238B2A9C(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705350((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B2BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238B2BD8(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_2238B2C00(double *a1, uint64_t a2, double *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AA49C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B2D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238B2D3C(double *a1, uint64_t a2, double *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AA49C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B2E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238B2E78(uint64_t a1, unsigned int a2, double a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v20;
  std::string::size_type v21;
  int v22;
  __n128 *v25;
  std::string *v26;
  size_t v27;
  std::string __p;
  double v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25578E668);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25578E668))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2938, &byte_25578E618, &dword_22314D000);
    __cxa_guard_release(&qword_25578E668);
  }
  std::mutex::lock((std::mutex *)(a1 + 7744));
  *(_QWORD *)(a1 + 7808) += a2;
  std::mutex::unlock((std::mutex *)(a1 + 7744));
  std::mutex::lock(&stru_25578E628);
  v7 = 0;
  if (byte_25578E618)
    v8 = 1;
  else
    v8 = a2 == 0;
  if (v8)
  {
    v9 = 1;
    v10 = 0.0;
    if (byte_25578E618 && (a2 & 1) == 0)
    {
      v9 = 0;
      v10 = a3 - *(double *)&qword_25578E620;
      v7 = 1;
    }
    byte_25578E618 = a2;
    std::mutex::unlock(&stru_25578E628);
    v29 = v10;
    v30 = v7;
    if ((v9 & 1) == 0)
    {
      std::mutex::lock((std::mutex *)(a1 + 7848));
      if (*(_BYTE *)(a1 + 7920) && *(double *)(a1 + 7912) > v10)
        v10 = *(double *)(a1 + 7912);
      *(double *)(a1 + 7912) = v10;
      *(_BYTE *)(a1 + 7920) = 1;
      std::mutex::unlock((std::mutex *)(a1 + 7848));
      *(_QWORD *)&v31 = "cv3d.recon.";
      *((_QWORD *)&v31 + 1) = 11;
      *(_QWORD *)&v32 = "Stats.aggregated";
      *((_QWORD *)&v32 + 1) = 16;
      sub_2231A9820((uint64_t)&v31, (uint64_t)&v33, 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v11 = sub_2241471F8();
        v12 = v11[2];
        if (!v12)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v12 = v11[2];
        }
        v13 = *(_QWORD *)(v12 + 64);
        v14 = (std::mutex *)(v13 + 32);
        std::mutex::lock((std::mutex *)(v13 + 32));
        v16 = *(_QWORD *)(v13 + 96);
        v15 = *(_QWORD *)(v13 + 104);
        std::mutex::unlock(v14);
        if (v16 != v15)
        {
          sub_2241471F8();
          v17 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
          {
            v31 = 0u;
            v32 = 0u;
            v33 = 728325608;
            kdebug_trace();
            sub_2238B32F4((double *)&qword_255788F20, v17, (uint64_t *)&v29, "duration_of_mesh_depth_novel");
            kdebug_trace();
          }
        }
      }
      v31 = 0u;
      v32 = 0u;
      v33 = 728325624;
      kdebug_trace();
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = p_p->__r_.__value_.__r.__words[0];
        v21 = p_p->__r_.__value_.__l.__size_;
        v22 = p_p->__r_.__value_.__s.__data_[16];
        if (v20 == 0x6365722E64337663 && v21 == 0x73746174532E6E6FLL && v22 == 46)
        {
          v25 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &__p;
          else
            v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v27 = __p.__r_.__value_.__l.__size_;
          sub_2231AA374((uint64_t *)v25, v26, v27, (uint64_t *)&v29, (uint64_t)"duration_of_mesh_depth_novel", 28);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    qword_25578E620 = *(_QWORD *)&a3;
    byte_25578E618 = a2;
    std::mutex::unlock(&stru_25578E628);
    v29 = 0.0;
    v30 = 0;
  }
}

void sub_2238B32A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238B32F4(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705350((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B3414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238B3430(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = a2;
  v15 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v12 = a2;
    v13 = a3;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  else
  {
    v12 = a2;
    v13 = 0;
  }
  sub_2231BE7E0(a1, &v12);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2238B3510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_2238B352C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v5 = operator new();
    v6 = operator new();
    sub_22390CA90(v6, (_BYTE *)(a3 + 208));
    v12 = v6;
    sub_22390D868(v5, &v12, (_BYTE *)(a3 + 208));
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  *a1 = v5;
  a1[1] = 0;
  if (*(_BYTE *)(a3 + 192))
    v7 = *(_BYTE *)(a3 + 196) == 0;
  else
    v7 = 1;
  if (v7
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonoDepth.cpp", 38, (uint64_t)"(keyframing_config.cpu_engine && keyframing_config.mono_depth.enable_mono_depth)", 80, (uint64_t)"MonoDepth is only supported in CPU pipeline", 43, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v8 = *(_DWORD *)(a3 + 204);
  v9 = operator new();
  *(_QWORD *)v9 = &off_24EC5A280;
  *(_DWORD *)(v9 + 8) = v8;
  v10 = a1[1];
  a1[1] = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_2238B3680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  MEMORY[0x227684CE8](v10, 0x10A1C4011520C82);
  _Unwind_Resume(a1);
}

void sub_2238B36E0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  v1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (!v4)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

void sub_2238B3728(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 *v32;
  float32x4_t v33;
  __n128 v34;
  float32x4_t v35;
  _OWORD *v36;
  _OWORD *v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t i;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  char *v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int16x4_t v76;
  uint64_t j;
  uint64_t *v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  std::string::size_type v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int16 v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  char *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unsigned int v130;
  unint64_t v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  unsigned int v148;
  float v149;
  float v150;
  float v151;
  float v157;
  unsigned __int8 v158;
  unsigned __int8 v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  std::mutex *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  uint64_t *v168;
  uint64_t v169;
  unsigned __int8 v170;
  uint64_t v171;
  std::string::size_type v172;
  std::__shared_weak_count *size;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  unsigned __int8 v185;
  __int16 v186;
  __int16 v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  __int128 v193;
  __int128 v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  std::mutex *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  std::string::size_type v236;
  std::string *p_info;
  std::string::size_type v238;
  std::string::size_type v239;
  int v240;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  int v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  std::mutex *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  char *v257;
  _BYTE *v258;
  double v259;
  double v260;
  float32x2_t v261;
  double v262;
  float32x2_t v263;
  double v264;
  float32x2_t v265;
  int32x4_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  float32x2_t v270;
  int8x16_t v271;
  float32x2_t v272;
  float32x4_t v273;
  int32x4_t v274;
  int8x16_t v275;
  int32x4_t v276;
  int8x16_t v277;
  float32x4_t v278;
  float32x4_t v279;
  int8x16_t v280;
  float32x4_t v281;
  float32x4_t v282;
  int8x16_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int8x16_t v286;
  int32x4_t v287;
  __int128 v288;
  float32x4_t v289;
  uint64_t *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  __int128 v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  char *v317;
  char *v318;
  void *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  char *v323;
  void *v324;
  char *v325;
  void (***v326)(char *);
  void (**v327)(char *);
  char *v328;
  char *v329;
  void *v330;
  void *v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  _QWORD *v341;
  unint64_t v342;
  unint64_t v343;
  int32x4_t v344;
  float32x4_t v345;
  int32x4_t v346;
  float32x4_t v347;
  uint64_t v348;
  int8x16_t v349;
  float32x4_t v351;
  float32x4_t v353;
  float32x4_t v355;
  uint64_t v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  int v360;
  uint64_t (**v361)();
  unint64_t v362;
  std::__shared_weak_count *v363;
  uint64_t v364;
  __int128 v365;
  __int128 v366;
  uint64_t v367;
  __int16 v368;
  void *v369;
  char *v370;
  _QWORD *v371;
  void *v372;
  char *v373;
  void *v374;
  void *v375;
  _OWORD *v376;
  void *v377[3];
  char v378;
  void *__p;
  __n128 *v380;
  char *v381;
  float32x4_t v382;
  float32x4_t v383;
  __n128 v384;
  float32x4_t v385;
  _QWORD v386[2];
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  int v391;
  uint64_t v392;
  void *v393;
  char *v394;
  _BYTE v395[16];
  std::__shared_weak_count *v396;
  _BYTE v397[16];
  std::__shared_weak_count *v398;
  uint64_t v399;
  int v400;
  int v401;
  _BYTE v402[16];
  std::__shared_weak_count *v403;
  uint64_t v404;
  unint64_t v405;
  int v406;
  int v407;
  __int128 v408;
  __int128 v409;
  int v410;
  std::string v411;
  void *v412[2];
  uint64_t v413;
  char v414;
  void *__dst[2];
  uint64_t v416;
  char v417;
  __int128 __src;
  uint64_t v419;
  __int128 v420;
  void *v421[2];
  uint64_t v422;
  std::string info;
  _BYTE v424[40];
  uint64_t v425;
  __int16 v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  __int128 v431;
  void *v432[2];
  __int128 v433;
  __int128 v434;
  __int128 v435;
  _BYTE v436[72];
  __int16 v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int v443;
  unint64_t *v444[3];
  std::string v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  uint64_t v449;
  std::string v450;
  uint64_t v451;
  _BYTE v452[72];
  __int16 v453;
  uint64_t v454;
  uint64_t v455;
  char v456;
  char v457;
  char v458;
  char v459;
  char v460;
  uint64_t v461;

  v461 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v452 = *(_OWORD *)a2;
  if (!sub_223340F28(a5, (uint64_t)v452)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonoDepth.cpp", 136, (uint64_t)"kf_database.Contains(current_id)", 32, (uint64_t)"Current keyframe ID should be in db_", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231CC34C(a7, (uint64_t)v402);
  sub_2231CC3F0(a7, (uint64_t)v397);
  sub_2231CD8A8(a7, (uint64_t)v436);
  *(_QWORD *)v452 = &off_24EC25150;
  v11 = *(_QWORD *)&v436[8];
  v12 = *(std::__shared_weak_count **)&v436[16];
  if (*(_QWORD *)&v436[16])
  {
    v13 = (unint64_t *)(*(_QWORD *)&v436[16] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = v437;
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    v17 = *(_QWORD *)&v436[24];
    *(_OWORD *)&v452[32] = *(_OWORD *)&v436[32];
    *(_OWORD *)&v452[48] = *(_OWORD *)&v436[48];
    *(_QWORD *)&v452[64] = *(_QWORD *)&v436[64];
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    *(_QWORD *)&v452[8] = v11;
    *(_QWORD *)&v452[16] = v12;
    *(_QWORD *)&v452[24] = v17;
    v453 = v15;
    do
      v19 = __ldaxr(v13);
    while (__stlxr(v19 - 1, v13));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v20 = __ldaxr(v13);
    while (__stlxr(v20 - 1, v13));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    *(_QWORD *)&v452[8] = *(_QWORD *)&v436[8];
    *(_OWORD *)&v452[16] = __PAIR128__(*(unint64_t *)&v436[24], 0);
    *(_OWORD *)&v452[32] = *(_OWORD *)&v436[32];
    *(_OWORD *)&v452[48] = *(_OWORD *)&v436[48];
    *(_QWORD *)&v452[64] = *(_QWORD *)&v436[64];
    v453 = v437;
  }
  sub_223CC5320((uint64_t)v452, (uint64_t)v395);
  v21 = *(std::__shared_weak_count **)&v452[16];
  if (*(_QWORD *)&v452[16])
  {
    v22 = (unint64_t *)(*(_QWORD *)&v452[16] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(std::__shared_weak_count **)&v436[16];
  if (*(_QWORD *)&v436[16])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v436[16] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (uint64_t **)sub_2231D0424(a7);
  sub_22345F4D8(&v393, v27);
  v28 = sub_2231D0224(a7);
  v348 = a7;
  v29 = *(_OWORD *)(v28 + 32);
  v387 = *(_OWORD *)(v28 + 16);
  v388 = v29;
  v30 = *(_OWORD *)(v28 + 48);
  v31 = *(_OWORD *)(v28 + 64);
  v391 = *(_DWORD *)(v28 + 80);
  v389 = v30;
  v390 = v31;
  v392 = *(_QWORD *)(v28 + 88);
  v386[1] = &off_24EC20868;
  v386[0] = &off_24EC207B8;
  v32 = (__n128 *)sub_22381AF00(a5, *a2, a2[1]);
  v33 = (float32x4_t)v32[2];
  v382 = (float32x4_t)v32[1];
  v383 = v33;
  v34 = v32[3];
  v35 = (float32x4_t)v32[4];
  v384 = v34;
  v385 = v35;
  __p = 0;
  v380 = 0;
  v381 = 0;
  v36 = *(_OWORD **)a4;
  v37 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 == v37)
    goto LABEL_72;
  do
  {
    *(_OWORD *)v452 = *v36;
    if (sub_2231A88F8((_QWORD *)(a6 + 320), v452))
    {
      v39 = v380;
      if (v380 < (__n128 *)v381)
      {
        v34 = *(__n128 *)v452;
        *v380 = *(__n128 *)v452;
        v38 = v39 + 1;
        goto LABEL_31;
      }
      v40 = (__n128 *)__p;
      v41 = ((char *)v380 - (_BYTE *)__p) >> 4;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60)
        sub_22316E078();
      v43 = v381 - (_BYTE *)__p;
      if ((v381 - (_BYTE *)__p) >> 3 > v42)
        v42 = v43 >> 3;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 60)
          sub_223174E94();
        v45 = (char *)operator new(16 * v44);
        v46 = &v45[16 * v41];
        v34 = *(__n128 *)v452;
        *(_OWORD *)v46 = *(_OWORD *)v452;
        v47 = (__n128 *)v46;
        if (v39 == v40)
        {
LABEL_49:
          v38 = (__n128 *)(v46 + 16);
          __p = v47;
          v380 = (__n128 *)(v46 + 16);
          v381 = &v45[16 * v44];
          if (v39)
LABEL_50:
            operator delete(v39);
LABEL_31:
          v380 = v38;
          goto LABEL_32;
        }
      }
      else
      {
        v45 = 0;
        v46 = (char *)(16 * v41);
        v34 = *(__n128 *)v452;
        *(_OWORD *)(16 * v41) = *(_OWORD *)v452;
        v47 = (__n128 *)(16 * v41);
        if (v39 == v40)
          goto LABEL_49;
      }
      do
      {
        v34 = v39[-1];
        v47[-1] = v34;
        --v47;
        --v39;
      }
      while (v39 != v40);
      v39 = (__n128 *)__p;
      v38 = (__n128 *)(v46 + 16);
      __p = v47;
      v380 = (__n128 *)(v46 + 16);
      v381 = &v45[16 * v44];
      if (!v39)
        goto LABEL_31;
      goto LABEL_50;
    }
LABEL_32:
    ++v36;
  }
  while (v36 != v37);
  v48 = *(unsigned int *)(a3 + 204);
  if (v48 >= ((char *)v380 - (_BYTE *)__p) >> 4)
  {
LABEL_72:
    sub_22320B470((uint64_t)v402, &word_224653856, v34);
    sub_22320BDC8((uint64_t)v397, &dword_224653858, v76);
    goto LABEL_398;
  }
  (*(void (**)(void **__return_ptr, uint64_t, float32x4_t *, void **, _QWORD *))(*(_QWORD *)a1[1] + 16))(v377, a1[1], &v382, &__p, a5);
  v374 = 0;
  v375 = 0;
  v376 = 0;
  if ((_DWORD)v48)
  {
    v49 = v48 << 6;
    v50 = operator new(v48 << 6);
    v51 = &v50[4 * v48];
    v374 = v50;
    v376 = v51;
    do
    {
      *v50 = xmmword_22465385C;
      v50[1] = *(_OWORD *)algn_22465386C;
      v50[2] = xmmword_22465387C;
      v50[3] = unk_22465388C;
      v50 += 4;
      v49 -= 64;
    }
    while (v49);
    v375 = v51;
  }
  sub_2238B6690((int32x4_t **)&v372, v48);
  v369 = 0;
  v370 = 0;
  v371 = 0;
  if ((_DWORD)v48)
  {
    v52 = 80 * v48;
    v53 = operator new(80 * v48);
    v369 = v53;
    v370 = (char *)v53;
    v54 = &v53[10 * v48];
    v371 = v54;
    do
    {
      *v53 = &off_24EC21DF8;
      sub_2238B68A8((uint64_t)(v53 + 1));
      v53 += 10;
      v52 -= 80;
    }
    while (v52);
    v370 = (char *)v54;
    if (!v378)
    {
      for (i = 0; i != v48; ++i)
      {
        v56 = (float32x4_t *)((char *)v374 + 64 * i);
        v57 = v385;
        v59 = v382;
        v58 = v383;
        v56[2] = (float32x4_t)v384;
        v56[3] = v57;
        *v56 = v59;
        v56[1] = v58;
        v60 = (char *)v372 + 96 * i;
        *((_OWORD *)v60 + 1) = v387;
        *((_OWORD *)v60 + 2) = v388;
        v61 = v389;
        v62 = v390;
        *((_DWORD *)v60 + 20) = v391;
        *((_OWORD *)v60 + 3) = v61;
        *((_OWORD *)v60 + 4) = v62;
        *((_QWORD *)v60 + 11) = v392;
        v63 = (char *)v369;
        *(_QWORD *)v452 = &off_24EC21DF8;
        sub_2237212D0((uint64_t)v395, (uint64_t *)&v452[8]);
        v64 = (char *)v369 + 80 * i;
        v65 = *(_OWORD *)&v452[8];
        *(_QWORD *)&v452[8] = 0;
        *(_QWORD *)&v452[16] = 0;
        v66 = (std::__shared_weak_count *)*((_QWORD *)v64 + 2);
        *(_OWORD *)(v64 + 8) = v65;
        if (v66)
        {
          p_shared_owners = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(p_shared_owners);
          while (__stlxr(v68 - 1, p_shared_owners));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = &v63[80 * i];
        v70 = *(_OWORD *)&v452[24];
        v71 = *(_OWORD *)&v452[40];
        v72 = *(_OWORD *)&v452[56];
        *((_WORD *)v69 + 36) = v453;
        *(_OWORD *)(v69 + 56) = v72;
        *(_OWORD *)(v69 + 40) = v71;
        *(_OWORD *)(v69 + 24) = v70;
        v73 = *(std::__shared_weak_count **)&v452[16];
        if (*(_QWORD *)&v452[16])
        {
          v74 = (unint64_t *)(*(_QWORD *)&v452[16] + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
      }
      goto LABEL_131;
    }
  }
  else if (!v378)
  {
    goto LABEL_131;
  }
  sub_223196604(a6, v377, (uint64_t)v432);
  if (v48 != ((char *)v432[1] - (char *)v432[0]) >> 5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/MonoDepth.cpp", 185, (uint64_t)"kf_id_pairs.size() == num_aux_frames", 36, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if ((_DWORD)v48)
  {
    for (j = 0; j != v48; ++j)
    {
      v78 = (uint64_t *)((char *)v432[0] + 32 * j);
      v79 = sub_22381AF00(a5, v78[2], v78[3]);
      v80 = (char *)v374 + 64 * j;
      v81 = v79[1];
      v82 = v79[2];
      v83 = v79[4];
      v80[2] = v79[3];
      v80[3] = v83;
      *v80 = v81;
      v80[1] = v82;
      v84 = sub_2231D0224(*v78);
      v85 = (char *)v372 + 96 * j;
      *((_QWORD *)v85 + 2) = *(_QWORD *)(v84 + 16);
      *((_QWORD *)v85 + 3) = *(_QWORD *)(v84 + 24);
      *((_OWORD *)v85 + 2) = *(_OWORD *)(v84 + 32);
      v86 = *(_OWORD *)(v84 + 48);
      v87 = *(_OWORD *)(v84 + 64);
      *((_DWORD *)v85 + 20) = *(_DWORD *)(v84 + 80);
      *((_OWORD *)v85 + 3) = v86;
      *((_OWORD *)v85 + 4) = v87;
      *((_QWORD *)v85 + 11) = *(_QWORD *)(v84 + 88);
      sub_2231CD8A8(*v78, (uint64_t)&v361);
      info.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC25150;
      v88 = v362;
      v89 = v363;
      if (v363)
      {
        v90 = (unint64_t *)&v363->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        v92 = v368;
        do
          v93 = __ldxr(v90);
        while (__stxr(v93 + 1, v90));
        v94 = v364;
        *(_OWORD *)&v424[8] = v365;
        *(_OWORD *)&v424[24] = v366;
        v425 = v367;
        do
          v95 = __ldxr(v90);
        while (__stxr(v95 + 1, v90));
        info.__r_.__value_.__l.__size_ = v88;
        info.__r_.__value_.__r.__words[2] = (std::string::size_type)v89;
        *(_QWORD *)v424 = v94;
        v426 = v92;
        do
          v96 = __ldaxr(v90);
        while (__stlxr(v96 - 1, v90));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
        do
          v97 = __ldaxr(v90);
        while (__stlxr(v97 - 1, v90));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      else
      {
        *(_OWORD *)&info.__r_.__value_.__r.__words[1] = v362;
        *(_QWORD *)v424 = v364;
        *(_OWORD *)&v424[8] = v365;
        *(_OWORD *)&v424[24] = v366;
        v425 = v367;
        v426 = v368;
      }
      sub_223CC5320((uint64_t)&info, (uint64_t)v452);
      v98 = (char *)v369;
      *(_QWORD *)v436 = &off_24EC21DF8;
      sub_2237212D0((uint64_t)v452, (uint64_t *)&v436[8]);
      v99 = &v98[80 * j];
      v100 = *(_OWORD *)&v436[8];
      *(_QWORD *)&v436[8] = 0;
      *(_QWORD *)&v436[16] = 0;
      v101 = (std::__shared_weak_count *)*((_QWORD *)v99 + 2);
      *(_OWORD *)(v99 + 8) = v100;
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = &v98[80 * j];
      v105 = *(_OWORD *)&v436[24];
      v106 = *(_OWORD *)&v436[40];
      v107 = *(_OWORD *)&v436[56];
      *((_WORD *)v104 + 36) = v437;
      *(_OWORD *)(v104 + 56) = v107;
      *(_OWORD *)(v104 + 40) = v106;
      *(_OWORD *)(v104 + 24) = v105;
      v108 = *(std::__shared_weak_count **)&v436[16];
      if (!*(_QWORD *)&v436[16])
        goto LABEL_103;
      v109 = (unint64_t *)(*(_QWORD *)&v436[16] + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
        v111 = *(std::__shared_weak_count **)&v452[16];
        if (!*(_QWORD *)&v452[16])
          goto LABEL_109;
      }
      else
      {
LABEL_103:
        v111 = *(std::__shared_weak_count **)&v452[16];
        if (!*(_QWORD *)&v452[16])
          goto LABEL_109;
      }
      v112 = (unint64_t *)&v111->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
LABEL_109:
      v114 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
      if (!info.__r_.__value_.__r.__words[2])
        goto LABEL_113;
      v115 = (unint64_t *)(info.__r_.__value_.__r.__words[2] + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
        v117 = v363;
        if (v363)
        {
LABEL_114:
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
      }
      else
      {
LABEL_113:
        v117 = v363;
        if (v363)
          goto LABEL_114;
      }
    }
  }
  v120 = (char *)v432[0];
  if (v432[0])
  {
    v121 = (char *)v432[1];
    v122 = v432[0];
    if (v432[1] != v432[0])
    {
      do
      {
        v123 = (std::__shared_weak_count *)*((_QWORD *)v121 - 3);
        if (v123)
        {
          v124 = (unint64_t *)&v123->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        v121 -= 32;
      }
      while (v121 != v120);
      v122 = v432[0];
    }
    v432[1] = v120;
    operator delete(v122);
  }
LABEL_131:
  v126 = *a1;
  *(_QWORD *)v452 = &off_24EC21DF8;
  sub_2237212D0((uint64_t)v395, (uint64_t *)&v452[8]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, void **, float32x4_t *, void **, _QWORD *, void **, void **))(*(_QWORD *)v126 + 16))(&v356, v126, v452, &v369, &v382, &v374, v386, &v372, &v393);
  v127 = *(std::__shared_weak_count **)&v452[16];
  if (*(_QWORD *)&v452[16])
  {
    v128 = (unint64_t *)(*(_QWORD *)&v452[16] + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  sub_2231CC494(v348);
  v130 = v405;
  v131 = HIDWORD(v405);
  v132 = (float)v357;
  v133 = (float)v358;
  v134 = nextafterf((float)v357 + -0.5, 0.0);
  v135 = nextafterf(v133 + -0.5, 0.0);
  if ((_DWORD)v131 && v130)
  {
    v137 = 0;
    LOWORD(v136) = 15360;
    do
    {
      v138 = 0;
      v139 = 0;
      v140 = 0;
      v141 = v406;
      v142 = v404 + 2 * v407 * v137;
      v143 = v400;
      v144 = v399 + 2 * v401 * v137;
      v145 = (float)(v133 / (float)v131) * (float)((float)v137 + 0.5);
      v146 = fmaxf(v145, 0.5);
      if (v135 >= v145)
        v147 = v146;
      else
        v147 = v135;
      v148 = llroundf(v147 + -0.5);
      do
      {
        v149 = (float)(v132 / (float)v130) * (float)((float)v140 + 0.5);
        v150 = fmaxf(v149, 0.5);
        if (v134 >= v149)
          v151 = v150;
        else
          v151 = v134;
        _S7 = *(_DWORD *)(v356 + 4 * (v360 * v148 + v359 * llroundf(v151 + -0.5)));
        __asm { FCVT            H7, S7 }
        if (_NF)
          v157 = v136;
        else
          v157 = 0.0;
        *(_WORD *)(v142 + 2 * v138) = _H7;
        *(_WORD *)(v144 + 2 * v139) = LOWORD(v157);
        ++v140;
        v139 += v143;
        v138 += v141;
      }
      while (v130 != v140);
      ++v137;
    }
    while (v137 != (_DWORD)v131);
  }
  v361 = &off_24EC21DF8;
  sub_2237212D0((uint64_t)v395, (uint64_t *)&v362);
  v158 = atomic_load((unsigned __int8 *)&qword_255795630);
  if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_255795630))
  {
    v341 = operator new(0x20uLL);
    v341[1] = 0;
    v341[2] = 0;
    *v341 = &off_24EC7AA58;
    v341[3] = &off_24EC7A9C0;
    qword_255795620 = (uint64_t)(v341 + 3);
    *(_QWORD *)algn_255795628 = v341;
    *(_QWORD *)&v452[8] = 0;
    *(_QWORD *)v452 = 0;
    sub_223167354((uint64_t)v452);
    __cxa_atexit((void (*)(void *))sub_224569E58, &qword_255795620, &dword_22314D000);
    __cxa_guard_release(&qword_255795630);
  }
  v159 = atomic_load((unsigned __int8 *)&qword_255795618);
  if ((v159 & 1) == 0 && __cxa_guard_acquire(&qword_255795618))
  {
    sub_224568628((uint64_t)v452);
    sub_223199C58("com.apple.cv3d", (unint64_t)v452, &qword_255795600);
    if (v452[24] && (v452[23] & 0x80000000) != 0)
      operator delete(*(void **)v452);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255795600, &dword_22314D000);
    __cxa_guard_release(&qword_255795618);
  }
  if (os_variant_has_internal_diagnostics())
  {
    v160 = sub_2241471F8();
    v161 = v160[2];
    if (!v161)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v161 = v160[2];
    }
    v162 = *(_QWORD *)(v161 + 64);
    v163 = (std::mutex *)(v162 + 32);
    std::mutex::lock((std::mutex *)(v162 + 32));
    v165 = *(_QWORD *)(v162 + 96);
    v164 = *(_QWORD *)(v162 + 104);
    std::mutex::unlock(v163);
    if (v165 != v164)
    {
      *(_QWORD *)v452 = "cv3d.recon.";
      *(_QWORD *)&v452[8] = 11;
      *(_QWORD *)&v452[16] = "Keyframing.KeyframeBundle";
      *(_QWORD *)&v452[24] = 25;
      sub_2231A9820((uint64_t)v452, (uint64_t)&v452[32], 0, 0, &v450);
      sub_2241471F8();
      v166 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 24))(v166))
      {
        v433 = 0u;
        *(_OWORD *)v432 = 0u;
        LODWORD(v434) = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 24))(v166))
        {
          v167 = *(double *)&qword_255788F20;
          v168 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 24))(v166))
          {
            LODWORD(v447) = HIDWORD(v366);
            LODWORD(info.__r_.__value_.__l.__data_) = DWORD2(v366);
            *(_DWORD *)v452 = 2 * DWORD2(v366);
            *(_DWORD *)&v452[4] = 3 * HIDWORD(v366);
            LODWORD(v445.__r_.__value_.__l.__data_) = 0;
            *(_QWORD *)v436 = &off_24EC5A378;
            sub_2237F880C(v452, (uint64_t)&v445, (uint64_t *)&v436[8]);
            *(_QWORD *)v452 = &info;
            *(_QWORD *)&v452[8] = &v447;
            *(_QWORD *)&v452[16] = v436;
            sub_2238B6B14((uint64_t)v452, (uint64_t)&v361, 0, 0);
            sub_2238B6B14((uint64_t)v452, (uint64_t)v369, 0, 1);
            sub_2238B6B14((uint64_t)v452, (uint64_t)v369 + 160, 0, 2);
            sub_2238B6B14((uint64_t)v452, (uint64_t)v369 + 80, 1, 1);
            sub_2238B6B14((uint64_t)v452, (uint64_t)v369 + 240, 1, 2);
            v169 = mach_continuous_time();
            v170 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v170 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info((mach_timebase_info_t)&info);
              LODWORD(v343) = HIDWORD(info.__r_.__value_.__r.__words[0]);
              LODWORD(v342) = info.__r_.__value_.__l.__data_;
              *(double *)&qword_255795558 = (double)v342 / (double)v343;
              __cxa_guard_release(&qword_255795560);
            }
            *(_QWORD *)v452 = llround(*(double *)&qword_255795558 * (double)v169);
            *(_QWORD *)&v452[8] = 2;
            strcpy(&v452[16], "monodepth_bundle");
            *(_DWORD *)&v452[33] = __dst[0];
            *(_WORD *)&v452[37] = WORD2(__dst[0]);
            *(_WORD *)&v452[39] = 272;
            LODWORD(__dst[0]) = 0;
            WORD2(__dst[0]) = 0;
            v452[48] = 0;
            LOBYTE(v453) = 0;
            v454 = (uint64_t)(v167 * 1000000000.0);
            v455 = 2;
            v456 = 1;
            v457 = 0;
            v458 = 0;
            v459 = 0;
            v460 = 0;
            v171 = operator new();
            info.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC219D8;
            v172 = *(_QWORD *)&v436[8];
            size = *(std::__shared_weak_count **)&v436[16];
            v447 = *(_OWORD *)&v436[8];
            if (*(_QWORD *)&v436[16])
            {
              v174 = (unint64_t *)(*(_QWORD *)&v436[16] + 8);
              do
                v175 = __ldxr(v174);
              while (__stxr(v175 + 1, v174));
              v445.__r_.__value_.__l.__size_ = (std::string::size_type)size;
              do
                v176 = __ldxr(v174);
              while (__stxr(v176 + 1, v174));
              v177 = *(_QWORD *)&v436[32];
              v178 = v438;
              v179 = v439;
              do
                v180 = __ldxr(v174);
              while (__stxr(v180 + 1, v174));
            }
            else
            {
              v445.__r_.__value_.__l.__size_ = 0;
              v177 = *(_QWORD *)&v436[32];
              v178 = v438;
              v179 = v439;
            }
            v445.__r_.__value_.__r.__words[0] = v172;
            info.__r_.__value_.__l.__size_ = v172;
            info.__r_.__value_.__r.__words[2] = (std::string::size_type)size;
            *(_QWORD *)v424 = v178;
            *(_DWORD *)&v424[8] = 4 * v179;
            *(_QWORD *)&v424[16] = v177;
            *(_DWORD *)&v424[24] = 24;
            if (v172)
            {
              if (size)
              {
                v181 = (unint64_t *)&size->__shared_owners_;
                do
                  v182 = __ldxr(v181);
                while (__stxr(v182 + 1, v181));
                do
                  v183 = __ldaxr(v181);
                while (__stlxr(v183 - 1, v181));
                if (!v183)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              v184 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v172 + 104))(v172);
              if ((v184 & 0xFFFFFFu) <= 0x10000)
                v185 = 0;
              else
                v185 = v184;
              v186 = v184 & 0xFF00;
              if ((v184 & 0xFF0000) == 0)
                v186 = 0;
              v187 = v186 & 0xFF00 | v185;
              size = (std::__shared_weak_count *)v445.__r_.__value_.__l.__size_;
            }
            else
            {
              v187 = 0;
            }
            *(_WORD *)&v424[28] = v187;
            if (size)
            {
              v188 = (unint64_t *)&size->__shared_owners_;
              do
                v189 = __ldaxr(v188);
              while (__stlxr(v189 - 1, v188));
              if (!v189)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v190 = (std::__shared_weak_count *)*((_QWORD *)&v447 + 1);
            if (*((_QWORD *)&v447 + 1))
            {
              v191 = (unint64_t *)(*((_QWORD *)&v447 + 1) + 8);
              do
                v192 = __ldaxr(v191);
              while (__stlxr(v192 - 1, v191));
              if (!v192)
              {
                ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                std::__shared_weak_count::__release_weak(v190);
              }
            }
            *(_QWORD *)v171 = &off_24EC21AC8;
            *(_QWORD *)(v171 + 8) = &off_24EC219D8;
            v193 = *(_OWORD *)&info.__r_.__value_.__r.__words[1];
            *(_OWORD *)&info.__r_.__value_.__r.__words[1] = 0uLL;
            v194 = *(_OWORD *)v424;
            *(_OWORD *)(v171 + 16) = v193;
            *(_OWORD *)(v171 + 32) = v194;
            *(_OWORD *)(v171 + 46) = *(_OWORD *)&v424[14];
            sub_2231AB0FC(v171 + 64, (uint64_t)v452);
            *(_QWORD *)v171 = &off_24EC6A528;
            info.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)&v408 = &off_24EC6A3B8;
            *((_QWORD *)&v408 + 1) = v171;
            v195 = (_QWORD *)operator new();
            *v195 = &off_24EC6A4B0;
            v195[1] = 0;
            v195[2] = 0;
            v195[3] = v171;
            *(_QWORD *)&v409 = v195;
            sub_2231AD66C((uint64_t)v452);
            v196 = *(std::__shared_weak_count **)&v436[16];
            if (*(_QWORD *)&v436[16])
            {
              v197 = (unint64_t *)(*(_QWORD *)&v436[16] + 8);
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }
            v199 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 56))(v166);
            v200 = *v199;
            v201 = (std::__shared_weak_count *)v199[1];
            if (v201)
            {
              v202 = (unint64_t *)&v201->__shared_owners_;
              do
                v203 = __ldxr(v202);
              while (__stxr(v203 + 1, v202));
            }
            v204 = *((_QWORD *)&v408 + 1);
            v205 = v409;
            *(_QWORD *)v436 = &off_24EC6A3B8;
            *(_QWORD *)&v436[8] = *((_QWORD *)&v408 + 1);
            *(_QWORD *)&v436[16] = v409;
            *((_QWORD *)&v408 + 1) = 0;
            *(_QWORD *)&v409 = 0;
            *(_QWORD *)v452 = v200;
            *(_QWORD *)&v452[8] = v201;
            if (v201)
            {
              v206 = (unint64_t *)&v201->__shared_owners_;
              do
                v207 = __ldxr(v206);
              while (__stxr(v207 + 1, v206));
            }
            *(_QWORD *)&v452[16] = &off_24EC6A3B8;
            *(_QWORD *)&v452[24] = v204;
            *(_QWORD *)&v452[32] = v205;
            if (v205)
            {
              v208 = (unint64_t *)(v205 + 8);
              do
                v209 = __ldxr(v208);
              while (__stxr(v209 + 1, v208));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v168 + 16))(v168, v452);
            v210 = *(std::__shared_weak_count **)&v452[32];
            if (*(_QWORD *)&v452[32])
            {
              v211 = (unint64_t *)(*(_QWORD *)&v452[32] + 8);
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 - 1, v211));
              if (!v212)
              {
                ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                std::__shared_weak_count::__release_weak(v210);
              }
            }
            v213 = *(std::__shared_weak_count **)&v452[8];
            if (*(_QWORD *)&v452[8])
            {
              v214 = (unint64_t *)(*(_QWORD *)&v452[8] + 8);
              do
                v215 = __ldaxr(v214);
              while (__stlxr(v215 - 1, v214));
              if (!v215)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
            v216 = *(std::__shared_weak_count **)&v436[16];
            if (*(_QWORD *)&v436[16])
            {
              v217 = (unint64_t *)(*(_QWORD *)&v436[16] + 8);
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            if (v201)
            {
              v219 = (unint64_t *)&v201->__shared_owners_;
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                std::__shared_weak_count::__release_weak(v201);
              }
            }
            v221 = (std::__shared_weak_count *)v409;
            if ((_QWORD)v409)
            {
              v222 = (unint64_t *)(v409 + 8);
              do
                v223 = __ldaxr(v222);
              while (__stlxr(v223 - 1, v222));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                std::__shared_weak_count::__release_weak(v221);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v450.__r_.__value_.__l.__data_);
    }
  }
  HIBYTE(v419) = 1;
  LOWORD(__src) = 48;
  *(_QWORD *)v452 = "cv3d.recon.";
  *(_QWORD *)&v452[8] = 11;
  *(_QWORD *)&v452[16] = "Keyframing.monodepth_bundle_pose";
  *(_QWORD *)&v452[24] = 32;
  sub_2231A9820((uint64_t)v452, (uint64_t)&v452[32], 0, 0, &info);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v224 = sub_2241471F8();
    v225 = v224[2];
    if (!v225)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v225 = v224[2];
    }
    v226 = *(_QWORD *)(v225 + 64);
    v227 = (std::mutex *)(v226 + 32);
    std::mutex::lock((std::mutex *)(v226 + 32));
    v229 = *(_QWORD *)(v226 + 96);
    v228 = *(_QWORD *)(v226 + 104);
    std::mutex::unlock(v227);
    if (v229 != v228)
    {
      sub_2241471F8();
      v230 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v230 + 24))(v230))
      {
        memset(v436, 0, 32);
        *(_DWORD *)&v436[32] = 728325608;
        kdebug_trace();
        sub_224141CD8((uint64_t *)v432, &v382, flt_22469B46C);
        if (SHIBYTE(v419) < 0)
        {
          sub_223197FA4(__dst, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          *(_OWORD *)__dst = __src;
          v416 = v419;
        }
        v417 = 1;
        v231 = v432[0];
        v232 = operator new();
        *(_BYTE *)v232 = 0;
        *(_DWORD *)(v232 + 128) = -1;
        v233 = *((unsigned int *)v231 + 32);
        if ((_DWORD)v233 != -1)
        {
          ((void (*)(__int128 *, uint64_t, _BYTE *))off_24EC6BD10[v233])(&v408, v232, v231);
          *(_DWORD *)(v232 + 128) = v233;
        }
        *(_BYTE *)(v232 + 136) = v231[136];
        *(_QWORD *)v452 = v232;
        v452[8] = 0;
        v452[32] = 0;
        if (v417)
        {
          *(_OWORD *)&v452[8] = *(_OWORD *)__dst;
          *(_QWORD *)&v452[24] = v416;
          v416 = 0;
          __dst[0] = 0;
          __dst[1] = 0;
          v452[32] = 1;
        }
        v452[40] = 0;
        v452[64] = 0;
        sub_22352DE04((double *)&qword_255788F20, v230, (uint64_t)v452, (uint64_t)&__src);
        if (v452[64] && (v452[63] & 0x80000000) != 0)
          operator delete(*(void **)&v452[40]);
        if (v452[32] && (v452[31] & 0x80000000) != 0)
          operator delete(*(void **)&v452[8]);
        v234 = *(_QWORD *)v452;
        *(_QWORD *)v452 = 0;
        if (v234)
          MEMORY[0x227684CE8](v234, 0x1000C4072FAA15ELL);
        if (v417 && SHIBYTE(v416) < 0)
          operator delete(__dst[0]);
        v235 = v432[0];
        v432[0] = 0;
        if (v235)
          MEMORY[0x227684CE8](v235, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  memset(v452, 0, 32);
  *(_DWORD *)&v452[32] = 728325624;
  kdebug_trace();
  v236 = HIBYTE(info.__r_.__value_.__r.__words[2]);
  if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v236 = info.__r_.__value_.__l.__size_;
  if (v236 >= 0x11)
  {
    p_info = &info;
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_info = (std::string *)info.__r_.__value_.__r.__words[0];
    v238 = p_info->__r_.__value_.__r.__words[0];
    v239 = p_info->__r_.__value_.__l.__size_;
    v240 = p_info->__r_.__value_.__s.__data_[16];
    _ZF = v238 == 0x6365722E64337663 && v239 == 0x73746174532E6E6FLL;
    if (_ZF && v240 == 46)
    {
      sub_223187510();
      sub_224141CD8((uint64_t *)v436, &v382, flt_22469B46C);
      if (SHIBYTE(v419) < 0)
      {
        sub_223197FA4(v412, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        *(_OWORD *)v412 = __src;
        v413 = v419;
      }
      v414 = 1;
      v243 = *(_QWORD *)v436;
      v244 = operator new();
      *(_BYTE *)v244 = 0;
      *(_DWORD *)(v244 + 128) = -1;
      v245 = *(unsigned int *)(v243 + 128);
      if ((_DWORD)v245 != -1)
      {
        ((void (*)(void **, uint64_t, uint64_t))off_24EC6BD10[v245])(v432, v244, v243);
        *(_DWORD *)(v244 + 128) = v245;
      }
      *(_BYTE *)(v244 + 136) = *(_BYTE *)(v243 + 136);
      if (v414)
      {
        v246 = v412[0];
        v247 = SHIBYTE(v413);
        v413 = 0;
        v412[0] = 0;
        v412[1] = 0;
        if (v247 < 0)
          operator delete(v246);
      }
      MEMORY[0x227684CE8](v244, 0x1000C4072FAA15ELL);
      if (v414 && SHIBYTE(v413) < 0)
        operator delete(v412[0]);
      v248 = *(_QWORD *)v436;
      *(_QWORD *)v436 = 0;
      if (v248)
        MEMORY[0x227684CE8](v248, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
    operator delete(info.__r_.__value_.__l.__data_);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v249 = sub_2241471F8();
    v250 = v249[2];
    if (!v250)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v250 = v249[2];
    }
    v251 = *(_QWORD *)(v250 + 64);
    v252 = (std::mutex *)(v251 + 32);
    std::mutex::lock((std::mutex *)(v251 + 32));
    v254 = *(_QWORD *)(v251 + 96);
    v253 = *(_QWORD *)(v251 + 104);
    std::mutex::unlock(v252);
    if (v254 != v253)
    {
      *(_QWORD *)v452 = "cv3d.recon.";
      *(_QWORD *)&v452[8] = 11;
      *(_QWORD *)&v452[16] = "Keyframing.monodepth_bundle_pose";
      *(_QWORD *)&v452[24] = 32;
      sub_2231A9820((uint64_t)v452, (uint64_t)&v452[32], 0, 0, &v411);
      sub_2241471F8();
      v255 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v255 + 24))(v255))
      {
        v408 = 0u;
        v409 = 0u;
        v410 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v255 + 24))(v255))
        {
          if (SHIBYTE(v419) < 0)
          {
            sub_223197FA4(v421, (void *)__src, *((unint64_t *)&__src + 1));
          }
          else
          {
            *(_OWORD *)v421 = __src;
            v422 = v419;
          }
          *(_QWORD *)&v420 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v420 + 1) = 2;
          v256 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v255 + 24))(v255))
          {
            sub_2241498F4((uint64_t)&info, 0);
            v258 = v369;
            v257 = v370;
            HIDWORD(v451) = 0;
            memset(&v450, 0, sizeof(v450));
            HIDWORD(v449) = 0;
            v448 = 0;
            v447 = 0uLL;
            HIDWORD(v446) = 0;
            memset(&v445, 0, sizeof(v445));
            v444[0] = (unint64_t *)&v445;
            v444[1] = (unint64_t *)&v450;
            v444[2] = (unint64_t *)&v447;
            v442 = 1065353216;
            v443 = 0;
            *(_OWORD *)v436 = xmmword_22465385C;
            *(_OWORD *)&v436[16] = *(_OWORD *)algn_22465386C;
            *(_OWORD *)&v436[32] = xmmword_22465387C;
            *(_OWORD *)&v436[48] = unk_22465388C;
            sub_224002D14((uint64_t)v386, (int32x2_t *)v436, &v442, (uint64_t)v452, 0.1);
            memset(&v436[20], 0, 40);
            *(_OWORD *)&v436[4] = 0u;
            *(_DWORD *)v436 = 1065353216;
            *(_DWORD *)&v436[20] = 1065353216;
            *(_DWORD *)&v436[40] = 1065353216;
            *(_DWORD *)&v436[60] = 1065353216;
            sub_2238B6DB0(v444, (uint64_t)v452, (float32x2_t *)v436, (float32x4_t)0, v259, v260, v261, v262, v263, v264, v265);
            v267 = -858993459 * ((v257 - v258) >> 4);
            if (-858993459 * ((v257 - v258) >> 4))
            {
              v268 = 0;
              v269 = v267 << 6;
              do
              {
                v266.i64[0] = *(_QWORD *)((char *)v374 + v268);
                v266.i32[2] = *(_DWORD *)((char *)v374 + v268 + 8);
                v346 = v266;
                v266.i64[0] = *(_QWORD *)((char *)v374 + v268 + 16);
                v266.i32[2] = *(_DWORD *)((char *)v374 + v268 + 24);
                v344 = v266;
                v266.i64[0] = *(_QWORD *)((char *)v374 + v268 + 32);
                v266.i32[2] = *(_DWORD *)((char *)v374 + v268 + 40);
                v349 = (int8x16_t)v266;
                v266.i64[0] = *(_QWORD *)((char *)v374 + v268 + 48);
                v266.i32[2] = *(_DWORD *)((char *)v374 + v268 + 56);
                v345 = (float32x4_t)v266;
                v353 = v383;
                v355 = v382;
                v351 = (float32x4_t)v384;
                v347 = v385;
                v440 = 0x3F80000000000000;
                v441 = 0;
                *(_OWORD *)v432 = xmmword_22465385C;
                v433 = *(_OWORD *)algn_22465386C;
                v434 = xmmword_22465387C;
                v435 = unk_22465388C;
                sub_224002D14((uint64_t)v386, (int32x2_t *)v432, &v440, (uint64_t)v436, 0.1);
                v270 = (float32x2_t)vzip1q_s32(v346, v344).u64[0];
                v271 = (int8x16_t)vnegq_f32(v345);
                v272 = vmul_n_f32(v270, *(float *)v271.i32);
                *(float32x2_t *)v273.f32 = v270;
                v273.i64[1] = v349.u32[0];
                v274 = vtrn2q_s32(v346, v344);
                v275 = (int8x16_t)v274;
                v275.i32[2] = v349.i32[1];
                v276 = vzip2q_s32(v346, v344);
                v277 = (int8x16_t)v276;
                v277.i32[2] = v349.i32[2];
                v278.i32[3] = 0;
                v278.i32[0] = v274.i32[0];
                v280 = vextq_s8(vextq_s8(v275, v275, 0xCuLL), v277, 8uLL);
                v279.i64[0] = v280.i64[1];
                *(uint64_t *)((char *)v278.i64 + 4) = v280.i64[0];
                *(float32x2_t *)v281.f32 = vmls_laneq_f32(vmls_lane_f32(v272, *(float32x2_t *)v274.i8, *(float32x2_t *)v345.f32, 1), *(float32x2_t *)v276.i8, v345, 2);
                v279.i64[1] = vdupq_laneq_s32((int32x4_t)v277, 2).u32[0];
                v281.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v349.i8, *(float32x2_t *)v271.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v349.i8, 1), *(float32x2_t *)v345.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v271, v271, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v349, v349, 8uLL)).u32[0]);
                v282 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v273, v347.f32[0]), v278, *(float32x2_t *)v347.f32, 1), v279, v347, 2), v281, v347, 3);
                v283 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v273, v351.f32[0]), v278, *(float32x2_t *)v351.f32, 1), v279, v351, 2), v281, v351, 3);
                v284 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v273, v353.f32[0]), v278, *(float32x2_t *)v353.f32, 1), v279, v353, 2), v281, v353, 3);
                v285 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v273, v355.f32[0]), v278, *(float32x2_t *)v355.f32, 1), v279, v355, 2), v281, v355, 3);
                v282.i64[0] ^= 0x8000000080000000;
                v281.i64[0] = vzip1q_s32(v285, v284).u64[0];
                v281.i64[1] = v283.u32[0];
                v286 = (int8x16_t)vtrn2q_s32(v285, v284);
                v286.i32[2] = v283.i32[1];
                v287 = vzip2q_s32(v285, v284);
                *(float32x2_t *)v276.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v281.f32, v282.f32[0]), *(float32x2_t *)v286.i8, *(float32x2_t *)v282.f32, 1), *(float32x2_t *)v287.i8, COERCE_FLOAT(v282.i32[2] ^ 0x80000000));
                v287.i32[2] = v283.i32[2];
                v284.i64[0] = vdupq_laneq_s32(v287, 2).u64[0];
                *(float32x2_t *)v282.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v283.i8, *(float32x2_t *)v282.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v282.f32, 1), *(float32x2_t *)v283.i8, 1);
                HIDWORD(v288) = 0;
                LODWORD(v288) = vdupq_lane_s32(*(int32x2_t *)&v286, 0).i32[3];
                *(_QWORD *)((char *)&v288 + 4) = vextq_s8(v286, v283, 4uLL).u64[0];
                v289 = (float32x4_t)vextq_s8(v283, v283, 8uLL);
                v287.i64[1] = v284.u32[0];
                v434 = (__int128)v287;
                *(float32x4_t *)v432 = v281;
                v433 = v288;
                *(_QWORD *)&v435 = v276.i64[0];
                *(float32x2_t *)v282.f32 = vmla_f32(*(float32x2_t *)v282.f32, (float32x2_t)(v282.i64[1] ^ 0xFFFFFFFF80000000), *(float32x2_t *)v289.f32);
                *((_QWORD *)&v435 + 1) = v282.u32[0] | 0x3F80000000000000;
                sub_2238B6DB0(v444, (uint64_t)v436, (float32x2_t *)v432, v289, *(double *)v282.i64, *(double *)v281.i64, *(float32x2_t *)v287.i8, *(double *)v284.i64, *(float32x2_t *)v276.i8, *(double *)((char *)&v288 + 4), (float32x2_t)(v282.i64[1] ^ 0xFFFFFFFF80000000));
                sub_22316F8F4((uint64_t *)v436);
                v268 += 64;
              }
              while (v269 != v268);
            }
            if (info.__r_.__value_.__r.__words[0])
            {
              info.__r_.__value_.__l.__size_ = info.__r_.__value_.__r.__words[0];
              *(_QWORD *)v436 = info.__r_.__value_.__r.__words[0];
              *(_DWORD *)&v436[8] = -1431655765
                                  * ((info.__r_.__value_.__r.__words[2] - info.__r_.__value_.__r.__words[0]) >> 2);
              if (*(_DWORD *)&v424[4] == -1)
                sub_22316DD70();
              v432[0] = v436;
              ((void (*)(void **, _BYTE *))off_24EC5C228[*(unsigned int *)&v424[4]])(v432, v424);
            }
            info = v445;
            *(_QWORD *)v424 = v446;
            memset(&v445, 0, sizeof(v445));
            if ((_QWORD)v427)
            {
              *((_QWORD *)&v427 + 1) = v427;
              *(_QWORD *)v436 = v427;
              *(_DWORD *)&v436[8] = -1431655765 * ((unint64_t)(v428 - v427) >> 2);
              if (HIDWORD(v429) == -1)
                sub_22316DD70();
              v432[0] = v436;
              ((void (*)(void **, uint64_t *))off_24EC5C238[HIDWORD(v429)])(v432, &v429);
            }
            v427 = v447;
            v429 = v449;
            v428 = v448;
            v447 = 0uLL;
            v448 = 0;
            if (*(_QWORD *)&v424[8])
            {
              *(_QWORD *)&v424[16] = *(_QWORD *)&v424[8];
              *(_QWORD *)v436 = *(_QWORD *)&v424[8];
              *(_DWORD *)&v436[8] = -1431655765 * ((*(_QWORD *)&v424[24] - *(_QWORD *)&v424[8]) >> 2);
              if (*(_DWORD *)&v424[36] == -1)
                sub_22316DD70();
              v432[0] = v436;
              ((void (*)(void **, _BYTE *))off_24EC5C228[*(unsigned int *)&v424[36]])(v432, &v424[32]);
            }
            *(std::string *)&v424[8] = v450;
            *(_QWORD *)&v424[32] = v451;
            memset(&v450, 0, sizeof(v450));
            sub_22316F8F4((uint64_t *)v452);
            if (v445.__r_.__value_.__r.__words[0])
            {
              v445.__r_.__value_.__l.__size_ = v445.__r_.__value_.__r.__words[0];
              *(_QWORD *)v452 = v445.__r_.__value_.__r.__words[0];
              *(_DWORD *)&v452[8] = -1431655765
                                  * ((v445.__r_.__value_.__r.__words[2] - v445.__r_.__value_.__r.__words[0]) >> 2);
              if (HIDWORD(v446) == -1)
                sub_22316DD70();
              *(_QWORD *)v436 = v452;
              ((void (*)(_BYTE *, uint64_t *))off_24EC5C228[HIDWORD(v446)])(v436, &v446);
            }
            if ((_QWORD)v447)
            {
              *((_QWORD *)&v447 + 1) = v447;
              *(_QWORD *)v452 = v447;
              *(_DWORD *)&v452[8] = -1431655765 * ((unint64_t)(v448 - v447) >> 2);
              if (HIDWORD(v449) == -1)
                sub_22316DD70();
              *(_QWORD *)v436 = v452;
              ((void (*)(_BYTE *, uint64_t *))off_24EC5C238[HIDWORD(v449)])(v436, &v449);
            }
            if (v450.__r_.__value_.__r.__words[0])
            {
              v450.__r_.__value_.__l.__size_ = v450.__r_.__value_.__r.__words[0];
              *(_QWORD *)v452 = v450.__r_.__value_.__r.__words[0];
              *(_DWORD *)&v452[8] = -1431655765
                                  * ((v450.__r_.__value_.__r.__words[2] - v450.__r_.__value_.__r.__words[0]) >> 2);
              if (HIDWORD(v451) == -1)
                sub_22316DD70();
              *(_QWORD *)v436 = v452;
              ((void (*)(_BYTE *, uint64_t *))off_24EC5C228[HIDWORD(v451)])(v436, &v451);
            }
            *(_OWORD *)v436 = *(_OWORD *)v421;
            *(_QWORD *)&v436[16] = v422;
            v421[1] = 0;
            v421[0] = 0;
            v422 = 0;
            v436[24] = 1;
            sub_22329F414((uint64_t)&info, (__int128 *)v436, &v420, &v430);
            if (v436[24] && (v436[23] & 0x80000000) != 0)
              operator delete(*(void **)v436);
            sub_22316F8F4((uint64_t *)&info);
            v290 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 56))(v255);
            v291 = *v290;
            v292 = (std::__shared_weak_count *)v290[1];
            if (v292)
            {
              v293 = (unint64_t *)&v292->__shared_owners_;
              do
                v294 = __ldxr(v293);
              while (__stxr(v294 + 1, v293));
            }
            v295 = v431;
            info.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&info.__r_.__value_.__r.__words[1] = v431;
            v431 = 0uLL;
            *(_QWORD *)v452 = v291;
            *(_QWORD *)&v452[8] = v292;
            if (v292)
            {
              v296 = (unint64_t *)&v292->__shared_owners_;
              do
                v297 = __ldxr(v296);
              while (__stxr(v297 + 1, v296));
            }
            *(_QWORD *)&v452[16] = &off_24EC6A3B8;
            *(_OWORD *)&v452[24] = v295;
            if (*((_QWORD *)&v295 + 1))
            {
              v298 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
              do
                v299 = __ldxr(v298);
              while (__stxr(v299 + 1, v298));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v256 + 16))(v256, v452);
            v300 = *(std::__shared_weak_count **)&v452[32];
            if (*(_QWORD *)&v452[32])
            {
              v301 = (unint64_t *)(*(_QWORD *)&v452[32] + 8);
              do
                v302 = __ldaxr(v301);
              while (__stlxr(v302 - 1, v301));
              if (!v302)
              {
                ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                std::__shared_weak_count::__release_weak(v300);
              }
            }
            v303 = *(std::__shared_weak_count **)&v452[8];
            if (*(_QWORD *)&v452[8])
            {
              v304 = (unint64_t *)(*(_QWORD *)&v452[8] + 8);
              do
                v305 = __ldaxr(v304);
              while (__stlxr(v305 - 1, v304));
              if (!v305)
              {
                ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                std::__shared_weak_count::__release_weak(v303);
              }
            }
            v306 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
            if (info.__r_.__value_.__r.__words[2])
            {
              v307 = (unint64_t *)(info.__r_.__value_.__r.__words[2] + 8);
              do
                v308 = __ldaxr(v307);
              while (__stlxr(v308 - 1, v307));
              if (!v308)
              {
                ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                std::__shared_weak_count::__release_weak(v306);
              }
            }
            if (v292)
            {
              v309 = (unint64_t *)&v292->__shared_owners_;
              do
                v310 = __ldaxr(v309);
              while (__stlxr(v310 - 1, v309));
              if (!v310)
              {
                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                std::__shared_weak_count::__release_weak(v292);
              }
            }
            v311 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
            if (*((_QWORD *)&v431 + 1))
            {
              v312 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
              do
                v313 = __ldaxr(v312);
              while (__stlxr(v313 - 1, v312));
              if (!v313)
              {
                ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                std::__shared_weak_count::__release_weak(v311);
              }
            }
          }
          if (SHIBYTE(v422) < 0)
            operator delete(v421[0]);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v411.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v419) < 0)
    operator delete((void *)__src);
  v314 = v363;
  if (v363)
  {
    v315 = (unint64_t *)&v363->__shared_owners_;
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
  v317 = (char *)v369;
  if (v369)
  {
    v318 = v370;
    v319 = v369;
    if (v370 != v369)
    {
      do
      {
        v320 = (std::__shared_weak_count *)*((_QWORD *)v318 - 8);
        if (v320)
        {
          v321 = (unint64_t *)&v320->__shared_owners_;
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        v318 -= 80;
      }
      while (v318 != v317);
      v319 = v369;
    }
    v370 = v317;
    operator delete(v319);
  }
  v323 = (char *)v372;
  if (v372)
  {
    v324 = v372;
    if (v373 != v372)
    {
      v325 = v373 - 96;
      v326 = (void (***)(char *))(v373 - 96);
      do
      {
        v327 = *v326;
        v326 -= 12;
        (*v327)(v325);
        _ZF = v325 == v323;
        v325 = (char *)v326;
      }
      while (!_ZF);
      v324 = v372;
    }
    v373 = v323;
    operator delete(v324);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v378 && v377[0])
  {
    v377[1] = v377[0];
    operator delete(v377[0]);
  }
LABEL_398:
  if (__p)
  {
    v380 = (__n128 *)__p;
    operator delete(__p);
  }
  v328 = (char *)v393;
  if (v393)
  {
    v329 = v394;
    v330 = v393;
    if (v394 != v393)
    {
      do
      {
        v331 = (void *)*((_QWORD *)v329 - 3);
        if (v331)
        {
          *((_QWORD *)v329 - 2) = v331;
          operator delete(v331);
        }
        v329 -= 40;
      }
      while (v329 != v328);
      v330 = v393;
    }
    v394 = v328;
    operator delete(v330);
  }
  v332 = v396;
  if (v396)
  {
    v333 = (unint64_t *)&v396->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v335 = v398;
  if (v398)
  {
    v336 = (unint64_t *)&v398->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  v338 = v403;
  if (v403)
  {
    v339 = (unint64_t *)&v403->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
}

void sub_2238B5E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __cxa_guard_abort(&qword_255795560);
  sub_223167354(a29);
  sub_2231874DC((uint64_t)&STACK[0x5E0]);
  if (SLOBYTE(STACK[0x837]) < 0)
    JUMPOUT(0x2238B6548);
  JUMPOUT(0x2238B654CLL);
}

void sub_2238B6290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58,void *a59,uint64_t a60,char a61,void *__p,uint64_t a63)
{
  sub_2238B67A0(&a49);
  sub_2238B6838(&a52);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  if (a61 && a58)
  {
    a59 = a58;
    operator delete(a58);
  }
  if (__p)
  {
    a63 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_22319A750((void **)&STACK[0x260]);
  sub_223167354((uint64_t)&STACK[0x280]);
  sub_2231BD974((uint64_t)&STACK[0x300]);
  sub_2231BD974((uint64_t)&STACK[0x338]);
  _Unwind_Resume(a1);
}

void sub_2238B6298()
{
  JUMPOUT(0x2238B661CLL);
}

void sub_2238B62A0()
{
  JUMPOUT(0x2238B6634);
}

void sub_2238B62A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58,void *a59,uint64_t a60,char a61)
{
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;

  sub_22316F8F4((uint64_t *)&STACK[0x840]);
  v61 = STACK[0x7E0];
  if (STACK[0x7E0])
  {
    STACK[0x7E8] = v61;
    v62 = -1431655765 * ((STACK[0x7F0] - v61) >> 2);
    STACK[0x840] = v61;
    LODWORD(STACK[0x848]) = v62;
    v63 = LODWORD(STACK[0x7FC]);
    if ((_DWORD)v63 == -1)
      sub_22316DD70();
    STACK[0x620] = (unint64_t)&STACK[0x840];
    ((void (*)(unint64_t *, unint64_t *))off_24EC5C228[v63])(&STACK[0x620], &STACK[0x7F8]);
  }
  v64 = STACK[0x800];
  if (STACK[0x800])
  {
    STACK[0x808] = v64;
    v65 = -1431655765 * ((STACK[0x810] - v64) >> 2);
    STACK[0x840] = v64;
    LODWORD(STACK[0x848]) = v65;
    v66 = LODWORD(STACK[0x81C]);
    if ((_DWORD)v66 == -1)
      sub_22316DD70();
    STACK[0x620] = (unint64_t)&STACK[0x840];
    ((void (*)(unint64_t *, unint64_t *))off_24EC5C238[v66])(&STACK[0x620], &STACK[0x818]);
  }
  v67 = STACK[0x820];
  if (STACK[0x820])
  {
    STACK[0x828] = v67;
    v68 = -1431655765 * ((STACK[0x830] - v67) >> 2);
    STACK[0x840] = v67;
    LODWORD(STACK[0x848]) = v68;
    v69 = LODWORD(STACK[0x83C]);
    if ((_DWORD)v69 == -1)
      sub_22316DD70();
    STACK[0x620] = (unint64_t)&STACK[0x840];
    ((void (*)(unint64_t *, unint64_t *))off_24EC5C228[v69])(&STACK[0x620], &STACK[0x838]);
  }
  sub_22316F8F4((uint64_t *)&STACK[0x440]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  sub_2231874DC((uint64_t)&STACK[0x370]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  sub_2231CE1A0((uint64_t)&a39);
  sub_2238B67A0(&a49);
  sub_2238B6838(&a52);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  if (a61)
  {
    if (a58)
    {
      a59 = a58;
      operator delete(a58);
    }
  }
  JUMPOUT(0x2238B6654);
}

void sub_2238B62B0()
{
  sub_22316F8F4((uint64_t *)&STACK[0x620]);
  JUMPOUT(0x2238B62BCLL);
}

void sub_2238B6450(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238B6464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58,void *a59,uint64_t a60,char a61)
{
  sub_2238B67A0(&a49);
  sub_2238B6838(&a52);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  if (a61)
  {
    if (a58)
    {
      a59 = a58;
      operator delete(a58);
    }
  }
  JUMPOUT(0x2238B6654);
}

void sub_2238B646C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58,void *a59,uint64_t a60,char a61)
{
  sub_2238B67A0(&a49);
  sub_2238B6838(&a52);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  if (a61)
  {
    if (a58)
    {
      a59 = a58;
      operator delete(a58);
    }
  }
  JUMPOUT(0x2238B6654);
}

void sub_2238B6474()
{
  JUMPOUT(0x2238B6550);
}

void sub_2238B6480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58,void *a59,uint64_t a60,char a61)
{
  sub_2238B67A0(&a49);
  sub_2238B6838(&a52);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  if (a61)
  {
    if (a58)
    {
      a59 = a58;
      operator delete(a58);
    }
  }
  JUMPOUT(0x2238B6654);
}

void sub_2238B6488()
{
  JUMPOUT(0x2238B6624);
}

void sub_2238B6498()
{
  JUMPOUT(0x2238B6664);
}

void sub_2238B64A0()
{
  JUMPOUT(0x2238B6664);
}

void sub_2238B64A8(_Unwind_Exception *a1)
{
  sub_2231D4840((uint64_t)&STACK[0x840]);
  sub_2231CD9B0((uint64_t)&STACK[0x620]);
  sub_2231BD974((uint64_t)&STACK[0x300]);
  sub_2231BD974((uint64_t)&STACK[0x338]);
  _Unwind_Resume(a1);
}

void sub_2238B64D4(_Unwind_Exception *a1)
{
  sub_2231BD974((uint64_t)&STACK[0x300]);
  sub_2231BD974((uint64_t)&STACK[0x338]);
  _Unwind_Resume(a1);
}

void sub_2238B64F0(_Unwind_Exception *a1)
{
  sub_2231BD974((uint64_t)&STACK[0x338]);
  _Unwind_Resume(a1);
}

void sub_2238B6504()
{
  JUMPOUT(0x2238B654CLL);
}

void sub_2238B650C()
{
  JUMPOUT(0x2238B666CLL);
}

void sub_2238B6520()
{
  JUMPOUT(0x2238B653CLL);
}

void sub_2238B6558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58,void *a59,uint64_t a60,char a61)
{
  sub_2238B67A0(&a49);
  sub_2238B6838(&a52);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  if (a61)
  {
    if (a58)
    {
      a59 = a58;
      operator delete(a58);
    }
  }
  JUMPOUT(0x2238B6654);
}

void sub_2238B6564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_2231D4840((uint64_t)&STACK[0x440]);
  sub_2231CD9B0((uint64_t)&a39);
  JUMPOUT(0x2238B660CLL);
}

void sub_2238B658C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50)
{
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;

  if (a49)
  {
    if (v50 != a49)
    {
      do
      {
        v51 = (std::__shared_weak_count *)*((_QWORD *)v50 - 8);
        if (v51)
        {
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(p_shared_owners);
          while (__stlxr(v53 - 1, p_shared_owners));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v50 -= 80;
      }
      while (v50 != a49);
      v50 = a49;
    }
    operator delete(v50);
  }
  JUMPOUT(0x2238B661CLL);
}

void sub_2238B6608()
{
  sub_2231968B4((void **)&STACK[0x5E0]);
  JUMPOUT(0x2238B6614);
}

int32x4_t **sub_2238B6690(int32x4_t **a1, unint64_t a2)
{
  uint64_t v3;
  int32x4_t *v4;
  char *i8;
  int32x4_t *v6;
  int32x4_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      sub_22316E078();
    v3 = 6 * a2;
    v4 = (int32x4_t *)operator new(96 * a2);
    *a1 = v4;
    a1[1] = v4;
    i8 = v4[v3].i8;
    a1[2] = &v4[v3];
    v6 = v4 + 5;
    v7 = vdupq_n_s32(0x7FC00000u);
    do
    {
      v6[-4].i64[0] = 0;
      v6[-4].i64[1] = 0;
      v6[-3] = v7;
      v6[-2] = v7;
      v6[-1] = v7;
      v6->i64[0] = 0;
      v6->i64[1] = 0;
      v6->i32[0] = 2143289344;
      v6[-5].i64[0] = (uint64_t)&off_24EC207B8;
      v6[-5].i64[1] = (uint64_t)&off_24EC20868;
      v6 += 6;
      v3 -= 6;
    }
    while (v3 * 16);
    a1[1] = (int32x4_t *)i8;
  }
  return a1;
}

void sub_2238B674C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 96;
      v7 = v4 - 96;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 96;
        (*v8)(v6);
        v9 = v6 == v3;
        v6 = v7;
      }
      while (!v9);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void **sub_2238B67A0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_2238B6838(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 96;
      v6 = v3 - 96;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 96;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2238B68A8(uint64_t a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = 4;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_2238B69C4(a1, &v10, &v4);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2238B69B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238B69C4(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_2238B6AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238B6B14(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;

  v7 = *(_DWORD **)a1;
  v8 = *(_DWORD **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v11)
      goto LABEL_47;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v10 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_47;
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (*(_BYTE *)(a2 + 73))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v10 + 96))(&v40, v10, 0);
        v19 = *(_QWORD *)(a2 + 56);
        v20 = *(_QWORD *)(a2 + 24);
        if (*(_BYTE *)(a2 + 72))
          v21 = v20 == 0;
        else
          v21 = 1;
        if (!v21)
          goto LABEL_18;
        goto LABEL_35;
      }
    }
    else
    {
LABEL_47:
      if (*(_BYTE *)(a2 + 73))
        goto LABEL_14;
    }
  }
  v40 = 0;
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 72))
    v30 = v20 == 0;
  else
    v30 = 1;
  if (!v30)
  {
LABEL_18:
    v22 = *(_QWORD *)(a2 + 8);
    v23 = *(std::__shared_weak_count **)(a2 + 16);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v22 + 88))(v22, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v20 = *(_QWORD *)(a2 + 24);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = v27 * *(_DWORD *)(a2 + 60);
    if (v28)
      v29 = 4 * (_DWORD)v19 == 0;
    else
      v29 = 1;
    if (!v29)
      goto LABEL_39;
    goto LABEL_43;
  }
LABEL_35:
  v27 = *(unsigned int *)(a2 + 52);
  v28 = v27 * HIDWORD(v19);
  if ((_DWORD)v27 * HIDWORD(v19))
    v31 = 4 * (_DWORD)v19 == 0;
  else
    v31 = 1;
  if (!v31)
  {
LABEL_39:
    v32 = 0;
    v33 = v20 + 4 * v28;
    v34 = 4 * v27;
    do
    {
      v35 = 0;
      v36 = 0;
      do
      {
        v37 = *(_QWORD *)(v9 + 32)
            + 4 * (*(_DWORD *)(v9 + 120) * (v36 + *v7 * a3) + *(_DWORD *)(v9 + 124) * (v32 + *v8 * a4));
        v38 = *(_QWORD *)(v20 + v35);
        *(_DWORD *)(v37 + 8) = *(_DWORD *)(v20 + v35 + 8);
        *(_QWORD *)v37 = v38;
        ++v36;
        v35 += 16;
      }
      while (16 * (v19 & 0x3FFFFFFF) != v35);
      v20 += v34;
      ++v32;
    }
    while (v20 != v33);
  }
LABEL_43:
  result = v40;
  v40 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2238B6D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unint64_t **sub_2238B6DB0(unint64_t **result, uint64_t a2, float32x2_t *a3, float32x4_t a4, double a5, double a6, float32x2_t a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  unint64_t **v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float32x4_t v18;
  unint64_t *v19;
  unint64_t v20;
  int32x2_t v21;
  int32x2_t *v22;
  int32x2_t *v23;
  int32x2_t v24;
  unint64_t *v25;
  unint64_t v26;
  int32x2_t v27;
  int32x2_t *v28;
  int32x2_t *v29;
  unsigned int v30;
  int32x2_t v31;
  __int32 v32;
  unint64_t *v33;
  unint64_t v34;
  int32x2_t v35;
  int32x2_t v36;
  unsigned __int32 v37;

  v12 = result;
  v14 = **result;
  v13 = (*result)[1];
  v15 = *(float32x2_t **)a2;
  v16 = *(float32x2_t **)(a2 + 8);
  if (*(float32x2_t **)a2 != v16)
  {
    do
    {
      while (1)
      {
        LODWORD(a5) = v15[1].i32[0];
        a7.i32[0] = a3[1].i32[0];
        a9.i32[0] = a3[3].i32[0];
        a11.i32[0] = a3[5].i32[0];
        *(float32x2_t *)v18.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*v15)), a3[2], *v15, 1), a3[4], *(float *)&a5);
        a7 = vmla_f32(vmla_lane_f32(vmul_f32(a7, *v15), a9, *v15, 1), *(float32x2_t *)&a5, a11);
        *(float32x2_t *)&v18.u32[2] = a7;
        v19 = *v12;
        *(float32x2_t *)a4.f32 = a3[6];
        a4.i32[2] = a3[7].i32[0];
        a4 = vaddq_f32(v18, a4);
        v37 = a4.u32[2];
        v36 = *(int32x2_t *)a4.f32;
        v20 = v19[1];
        if (v20 < v19[2])
          break;
        result = (unint64_t **)sub_2233B2838(v19, (uint64_t *)&v36);
        v19[1] = (unint64_t)result;
        v15 = (float32x2_t *)((char *)v15 + 12);
        if (v15 == v16)
          goto LABEL_6;
      }
      v21 = v36;
      *(_DWORD *)(v20 + 8) = v37;
      *(int32x2_t *)v20 = v21;
      result = (unint64_t **)(v20 + 12);
      v19[1] = v20 + 12;
      v15 = (float32x2_t *)((char *)v15 + 12);
    }
    while (v15 != v16);
  }
LABEL_6:
  v22 = *(int32x2_t **)(a2 + 32);
  v23 = *(int32x2_t **)(a2 + 40);
  while (v22 != v23)
  {
    v24 = *v22;
    v37 = v22[1].u32[0];
    v36 = v24;
    v25 = v12[1];
    v26 = v25[1];
    if (v26 >= v25[2])
    {
      result = (unint64_t **)sub_2233B2B48(v12[1], (uint64_t *)&v36);
    }
    else
    {
      v27 = *v22;
      *(_DWORD *)(v26 + 8) = v22[1].i32[0];
      *(int32x2_t *)v26 = v27;
      result = (unint64_t **)(v26 + 12);
    }
    v25[1] = (unint64_t)result;
    v22 = (int32x2_t *)((char *)v22 + 12);
  }
  v28 = *(int32x2_t **)(a2 + 112);
  v29 = *(int32x2_t **)(a2 + 120);
  if (v28 != v29)
  {
    v30 = -1431655765 * ((v13 - v14) >> 2);
    v31 = vdup_n_s32(v30);
    do
    {
      while (1)
      {
        v32 = v28[1].i32[0];
        v33 = v12[2];
        v36 = vadd_s32(*v28, v31);
        v37 = v32 + v30;
        v34 = v33[1];
        if (v34 < v33[2])
          break;
        result = (unint64_t **)sub_2233B29C0(v33, (uint64_t *)&v36);
        v33[1] = (unint64_t)result;
        v28 = (int32x2_t *)((char *)v28 + 12);
        if (v28 == v29)
          return result;
      }
      v35 = v36;
      *(_DWORD *)(v34 + 8) = v37;
      *(int32x2_t *)v34 = v35;
      result = (unint64_t **)(v34 + 12);
      v33[1] = v34 + 12;
      v28 = (int32x2_t *)((char *)v28 + 12);
    }
    while (v28 != v29);
  }
  return result;
}

void sub_2238B6FB8()
{
  JUMPOUT(0x227684CE8);
}

void sub_2238B6FCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  float v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int i;
  char v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned __int8 *v92;
  int v93;
  unsigned __int8 *v94;
  _BYTE *v95;
  int v96;
  int v98;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  _BYTE *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  unsigned int v111;
  int v112;
  unsigned int v113;
  _BYTE *v114;
  uint64_t v115;
  int v116;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned __int8 *v128;
  int v129;
  unsigned __int8 *v131;
  int v132;
  int v134;
  uint64_t (**v136)();
  uint64_t v137;
  unint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  float32x4_t v146;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  __int16 v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  int v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  int8x16_t v187;
  __int16 *v188;
  float32x2_t v189;
  uint64_t v190;
  char v191;
  float v192;
  int v193;
  unint64_t v220;
  unint64_t v221;
  char v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  int v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t (**v233)();
  uint64_t v234;
  std::__shared_weak_count *v235;
  _BYTE *v236;
  unsigned int v237;
  unsigned int v238;
  char v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t (**v246)();
  __int128 v247;
  _BYTE v248[32];
  __int128 v249;
  __int16 v250;
  char v251;
  uint64_t (**v252)();
  __int128 v253;
  _BYTE v254[26];
  _BYTE v255[56];
  __int128 v256;
  __int16 v257;

  sub_2231F761C(*(NSObject **)(a2 + 1328), (const void **)&v246);
  sub_2231F8060((uint64_t)v246, a3);
  v7 = (std::__shared_weak_count *)v247;
  if ((_QWORD)v247)
  {
    v8 = (unint64_t *)(v247 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *a3;
  LOBYTE(v246) = 0;
  sub_2231CBB84(v10, (uint64_t)&v246);
  v11 = *a3;
  v233 = &off_24EC22138;
  sub_2236B487C(v11, &v234);
  v12 = *(unsigned __int8 *)(a1 + 9);
  v241 = *(unsigned __int8 *)(a1 + 8);
  v242 = v12;
  v243 = 0;
  v244 = 0;
  v245 = 728307616;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 8))
    goto LABEL_217;
  if (*(_BYTE *)(a1 + 9))
  {
    v13 = *(unsigned __int8 *)(a2 + 288);
    if (*(_BYTE *)(a2 + 288))
    {
      if ((!*(_DWORD *)(a2 + 264) || !*(_DWORD *)(a2 + 268))
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223C3F490(a2 + 232, (uint64_t)v255);
      v3 = *(std::__shared_weak_count **)&v255[16];
      v246 = &off_24EC21420;
      v247 = *(_OWORD *)&v255[8];
      *(_OWORD *)v248 = *(_OWORD *)&v255[24];
      *(_OWORD *)&v248[10] = *(_OWORD *)&v255[34];
      LOBYTE(v249) = 1;
      if (!*(_BYTE *)(a2 + 56))
        goto LABEL_177;
    }
    else
    {
      LOBYTE(v246) = 0;
      LOBYTE(v249) = 0;
      if (!*(_BYTE *)(a2 + 56))
        goto LABEL_177;
    }
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)&v252);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
    *(_QWORD *)v255 = &off_24EC200A8;
    *(_OWORD *)&v255[8] = v253;
    *(_OWORD *)&v255[24] = *(_OWORD *)v254;
    *(_OWORD *)&v255[34] = *(_OWORD *)&v254[10];
    LOBYTE(v256) = 1;
    if (!v13)
    {
LABEL_172:
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v124 = __ldaxr(p_shared_owners);
        while (__stlxr(v124 - 1, p_shared_owners));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      goto LABEL_177;
    }
    v25 = *(float *)(a1 + 12);
    v26 = *(_DWORD *)&v255[32];
    v27 = *(_DWORD *)&v255[36];
    v226 = a3;
    if (*(_QWORD *)&v248[8] != *(_QWORD *)&v255[32]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsUtils.cpp", 39, (uint64_t)"semantics.Size() == size", 24, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (v27 && v26)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = 0;
        v31 = 0;
        for (i = 0; i < v26; i += 2)
        {
          _H1 = *(_WORD *)(*(_QWORD *)&v255[24] + 2 * v28 * *(_DWORD *)&v255[44] + 2 * v30);
          __asm { FCVT            S1, H1 }
          if (v25 >= _S1
            && *(_BYTE *)(*(_QWORD *)v248 + v28 * *(_DWORD *)&v248[20] + v31) == 10
            && (float)((float)((float)(v27 * v26) * 0.25) * 0.005) <= (float)++v29)
          {
            v38 = 1;
            if (!v3)
              goto LABEL_51;
LABEL_53:
            v43 = (unint64_t *)&v3->__shared_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            do
              v45 = __ldxr(v43);
            while (__stxr(v45 + 1, v43));
            v40 = *(_QWORD *)v248;
            v39 = *(_QWORD *)&v248[8];
            v41 = *(_DWORD *)&v248[16];
            v42 = *(_DWORD *)&v248[20];
            do
              v46 = __ldxr(v43);
            while (__stxr(v46 + 1, v43));
            do
              v47 = __ldaxr(v43);
            while (__stlxr(v47 - 1, v43));
            if (!v47)
            {
              v48 = v39;
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
              v39 = v48;
            }
            do
              v49 = __ldaxr(v43);
            while (__stlxr(v49 - 1, v43));
            if (!v49)
            {
              v50 = v39;
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
              v39 = v50;
            }
            goto LABEL_64;
          }
          v31 += 2 * *(_DWORD *)&v248[16];
          v30 += 2 * *(_DWORD *)&v255[40];
        }
        v28 += 2;
      }
      while (v28 < v27);
    }
    v38 = 0;
    if (v3)
      goto LABEL_53;
LABEL_51:
    v40 = *(_QWORD *)v248;
    v39 = *(_QWORD *)&v248[8];
    v41 = *(_DWORD *)&v248[16];
    v42 = *(_DWORD *)&v248[20];
LABEL_64:
    v51 = *(std::__shared_weak_count **)&v255[16];
    v224 = v3;
    if (*(_QWORD *)&v255[16])
    {
      v222 = v38;
      v52 = (unint64_t *)(*(_QWORD *)&v255[16] + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      do
        v54 = __ldxr(v52);
      while (__stxr(v54 + 1, v52));
      v55 = *(_QWORD *)&v255[24];
      v57 = *(_DWORD *)&v255[40];
      v56 = *(_DWORD *)&v255[44];
      do
        v58 = __ldxr(v52);
      while (__stxr(v58 + 1, v52));
      do
        v59 = __ldaxr(v52);
      while (__stlxr(v59 - 1, v52));
      if (!v59)
      {
        v60 = v51;
        v220 = v39;
        ((void (*)(void))v51->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v60);
        v39 = v220;
        v51 = v60;
      }
      do
        v61 = __ldaxr(v52);
      while (__stlxr(v61 - 1, v52));
      if (!v61)
      {
        v62 = v51;
        v221 = v39;
        ((void (*)(void))v51->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v62);
        v39 = v221;
        v51 = v62;
      }
      v38 = v222;
      v63 = HIDWORD(v39);
      if (!HIDWORD(v39))
        goto LABEL_160;
    }
    else
    {
      v55 = *(_QWORD *)&v255[24];
      v57 = *(_DWORD *)&v255[40];
      v56 = *(_DWORD *)&v255[44];
      v63 = HIDWORD(v39);
      if (!HIDWORD(v39))
        goto LABEL_160;
    }
    if (!(_DWORD)v39)
      goto LABEL_160;
    v100 = 0;
    if ((v38 & 1) == 0)
    {
      do
      {
        v111 = 0;
        v112 = 0;
        v113 = v237;
        v114 = &v236[v238 * v100];
        v115 = v39;
        do
        {
          v116 = *(unsigned __int8 *)(v40 + (v42 * v100) + v111);
          v114[v112] = 0;
          if (v116 == 34 || v116 == 10)
            v114[v112] = 1;
          v112 += v113;
          v111 += v41;
          --v115;
        }
        while (v115);
        ++v100;
      }
      while (v100 != v63);
      goto LABEL_160;
    }
LABEL_137:
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v104 = v237;
    v105 = &v236[v238 * v100];
    v106 = v39;
    while (1)
    {
      v108 = *(unsigned __int8 *)(v40 + (v42 * v100) + v101);
      v105[v102] = 0;
      v107 = 1;
      if ((_DWORD)v108 == 10 || (_DWORD)v108 == 34)
        goto LABEL_139;
      _H1 = *(_WORD *)(v55 + 2 * (v56 * v100) + 2 * v103);
      __asm { FCVT            S1, H1 }
      if (*(float *)(a1 + 12) <= _S1)
        goto LABEL_140;
      if (byte_25578E69A)
      {
        if (v108 <= 0x29)
          goto LABEL_148;
      }
      else
      {
        xmmword_25578E670 = xmmword_2246538D9;
        unk_25578E680 = unk_2246538E9;
        unk_25578E68A = unk_2246538F3;
        byte_25578E69A = 1;
        if (v108 <= 0x29)
        {
LABEL_148:
          if (*((_BYTE *)&xmmword_25578E670 + v108))
            goto LABEL_140;
        }
      }
      v107 = v105[v102] | 1;
LABEL_139:
      v105[v102] = v107;
LABEL_140:
      v103 += v57;
      v102 += v104;
      v101 += v41;
      if (!--v106)
      {
        if (++v100 != v63)
          goto LABEL_137;
LABEL_160:
        a3 = v226;
        if (v51)
        {
          v118 = (unint64_t *)&v51->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            v120 = v51;
            ((void (*)(void))v51->__on_zero_shared)();
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        if (v224)
        {
          v121 = (unint64_t *)&v224->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
          }
        }
        if ((_BYTE)v256)
        {
          v24 = *(std::__shared_weak_count **)&v255[16];
          goto LABEL_172;
        }
LABEL_177:
        if ((_BYTE)v249)
        {
          v125 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
          if (*((_QWORD *)&v247 + 1))
          {
            v126 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
LABEL_215:
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
        }
        goto LABEL_217;
      }
    }
  }
  if (!*(_BYTE *)(a2 + 288))
    goto LABEL_217;
  if ((!*(_DWORD *)(a2 + 264) || !*(_DWORD *)(a2 + 268))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3F490(a2 + 232, (uint64_t)v255);
  v14 = *(_QWORD *)&v255[8];
  v15 = *(std::__shared_weak_count **)&v255[16];
  v246 = &off_24EC21420;
  v247 = *(_OWORD *)&v255[8];
  *(_OWORD *)v248 = *(_OWORD *)&v255[24];
  *(_OWORD *)&v248[10] = *(_OWORD *)&v255[34];
  LOBYTE(v249) = 1;
  if (!*(_QWORD *)&v255[8])
    goto LABEL_78;
  if (*(_QWORD *)&v255[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v255[16] + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
    v14 = v247;
    if (*((_QWORD *)&v247 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (v248[25])
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v14 + 96))(v255, v14, 0);
    v23 = v234;
    if (!v234)
      goto LABEL_94;
  }
  else
  {
LABEL_78:
    *(_QWORD *)v255 = 0;
    v23 = v234;
    if (!v234)
      goto LABEL_94;
  }
  v64 = v235;
  if (v235)
  {
    v65 = (unint64_t *)&v235->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    do
      v67 = __ldaxr(v65);
    while (__stlxr(v67 - 1, v65));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
    v23 = v234;
    v68 = v235;
    if (v235)
    {
      v69 = (unint64_t *)&v235->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      do
        v71 = __ldaxr(v69);
      while (__stlxr(v71 - 1, v69));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  if (v240)
  {
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v23 + 96))(&v252, v23, 1);
    v72 = *(_DWORD *)&v248[8];
    if (!*(_DWORD *)&v248[8])
      goto LABEL_207;
    goto LABEL_95;
  }
LABEL_94:
  v252 = 0;
  v72 = *(_DWORD *)&v248[8];
  if (!*(_DWORD *)&v248[8])
    goto LABEL_207;
LABEL_95:
  v73 = *(_DWORD *)&v248[12];
  if (*(_DWORD *)&v248[12])
  {
    v227 = a3;
    v75 = *(unsigned int *)&v248[16];
    v74 = *(unsigned int *)&v248[20];
    v77 = v237;
    v76 = v238;
    v78 = *(unsigned __int8 **)v248;
    v225 = v72;
    if (v248[24] && *(_QWORD *)v248)
    {
      v79 = v247;
      if (*((_QWORD *)&v247 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
        do
          v82 = __ldaxr(v80);
        while (__stlxr(v82 - 1, v80));
        if (!v82)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
        }
      }
      (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v79 + 88))(v79, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v78 = *(unsigned __int8 **)v248;
      v72 = v225;
    }
    v83 = v236;
    if (v239 && v236)
    {
      v84 = v234;
      v85 = v235;
      if (v235)
      {
        v86 = (unint64_t *)&v235->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
        do
          v88 = __ldaxr(v86);
        while (__stlxr(v88 - 1, v86));
        if (!v88)
        {
          v223 = v84;
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
          v84 = v223;
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v84 + 88))(v84, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v83 = v236;
      v72 = v225;
    }
    v89 = v72 - 1;
    v90 = v73 - 1;
    if (v73 != 1)
    {
      if (v72 == 1)
      {
        v128 = v78;
        do
        {
          v129 = *v128;
          if (v129 == 34 || v129 == 10)
            *v83 |= 1u;
          v128 += v74;
          v83 += v76;
          --v90;
        }
        while (v90);
      }
      else
      {
        v91 = 0;
        v92 = v78;
        do
        {
          v93 = v72 - 1;
          v94 = v92;
          v95 = v83;
          do
          {
            v96 = *v94;
            if (v96 == 34 || v96 == 10)
              *v95 |= 1u;
            v94 += v75;
            v95 += v77;
            --v93;
          }
          while (v93);
          v98 = *v94;
          if (v98 == 34 || v98 == 10)
            *v95 |= 1u;
          v92 += v74;
          v83 += v76;
          ++v91;
        }
        while (v91 != v90);
      }
      v78 += v74 + v74 * (unint64_t)(v73 - 2);
    }
    a3 = v227;
    if (v72 != 1)
    {
      v131 = v78;
      do
      {
        v132 = *v131;
        if (v132 == 34 || v132 == 10)
          *v83 |= 1u;
        v131 += v75;
        v83 += v77;
        --v89;
      }
      while (v89);
      v78 += v75 + v75 * (unint64_t)(v72 - 2);
    }
    v134 = *v78;
    if (v134 == 34 || v134 == 10)
      *v83 |= 1u;
  }
LABEL_207:
  v136 = v252;
  v252 = 0;
  if (v136)
    (*((void (**)(uint64_t (**)()))*v136 + 1))(v136);
  v137 = *(_QWORD *)v255;
  *(_QWORD *)v255 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  if ((_BYTE)v249)
  {
    v125 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
    if (*((_QWORD *)&v247 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
      do
        v127 = __ldaxr(v138);
      while (__stlxr(v127 - 1, v138));
      goto LABEL_215;
    }
  }
LABEL_217:
  kdebug_trace();
  v139 = v235;
  if (v235)
  {
    v140 = (unint64_t *)&v235->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  sub_2236B487C(*a3, &v228);
  if (!*(_BYTE *)(a1 + 16))
  {
LABEL_280:
    v168 = v229;
    if (!v229)
      goto LABEL_284;
    goto LABEL_281;
  }
  if (*(_BYTE *)(a2 + 56))
  {
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_309;
    }
    sub_223C3BF78(a2, (uint64_t)&v246);
    v143 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
    if (*((_QWORD *)&v247 + 1))
    {
      v144 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/PixelFilter.cpp", 131, (uint64_t)"frame.Depth()", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_309;
  }
  if (!*(_DWORD *)(a1 + 24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/PixelFilter.cpp", 132, (uint64_t)"cfg.margin >= 1u", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_309;
  }
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_240;
  if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
LABEL_309:
    abort();
  }
  sub_223C3BF78(a2, (uint64_t)&v246);
  v142 = v247;
  *(_OWORD *)v255 = *(_OWORD *)v248;
  *(_OWORD *)&v255[10] = *(_OWORD *)&v248[10];
LABEL_240:
  v252 = &off_24EC200A8;
  v253 = v142;
  *(_OWORD *)v254 = *(_OWORD *)v255;
  *(_OWORD *)&v254[10] = *(_OWORD *)&v255[10];
  if (!*(_BYTE *)(a2 + 208))
    goto LABEL_276;
  if ((!*(_DWORD *)(a2 + 184) || !*(_DWORD *)(a2 + 188))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3D9D0(a2 + 128, (uint64_t)v255);
  v148 = *(_QWORD *)&v255[8];
  v149 = *(std::__shared_weak_count **)&v255[16];
  v246 = &off_24EC25150;
  v247 = *(_OWORD *)&v255[8];
  *(_OWORD *)v248 = *(_OWORD *)&v255[24];
  *(_OWORD *)&v248[16] = *(_OWORD *)&v255[40];
  v249 = v256;
  v250 = v257;
  v251 = 1;
  *(_QWORD *)v255 = &off_24EC25150;
  if (*(_QWORD *)&v255[16])
  {
    v150 = (unint64_t *)(*(_QWORD *)&v255[16] + 8);
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    v152 = v250;
    do
      v153 = __ldxr(v150);
    while (__stxr(v153 + 1, v150));
    *(_OWORD *)&v255[24] = *(_OWORD *)v248;
    *(_OWORD *)&v255[40] = *(_OWORD *)&v248[16];
    v256 = v249;
    do
      v154 = __ldxr(v150);
    while (__stxr(v154 + 1, v150));
    *(_QWORD *)&v255[8] = v148;
    *(_QWORD *)&v255[16] = v149;
    v257 = v152;
    do
      v155 = __ldaxr(v150);
    while (__stlxr(v155 - 1, v150));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
    do
      v156 = __ldaxr(v150);
    while (__stlxr(v156 - 1, v150));
    if (v156)
    {
      if (*(_DWORD *)(a2 + 1328) != (_DWORD)v256)
      {
LABEL_263:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/PixelFilter.cpp", 149, (uint64_t)"camera.ImageSize() == normals.Size()", 36, (uint64_t)"Size mismatch", 13, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        goto LABEL_264;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
      if (*(_DWORD *)(a2 + 1328) != (_DWORD)v256)
        goto LABEL_263;
    }
  }
  else
  {
    *(_QWORD *)&v255[16] = 0;
    *(_OWORD *)&v255[24] = *(_OWORD *)v248;
    *(_OWORD *)&v255[40] = *(_OWORD *)&v248[16];
    v256 = v249;
    v257 = v250;
    if (*(_DWORD *)(a2 + 1328) != (_DWORD)v249)
      goto LABEL_263;
  }
  if (*(_DWORD *)(a2 + 1332) != DWORD1(v256))
    goto LABEL_263;
LABEL_264:
  v157 = *(_DWORD *)(a1 + 24);
  v158 = DWORD1(v256) - v157;
  if (v157 != DWORD1(v256) - v157)
  {
    v175 = v256;
    v176 = *(_DWORD *)&v255[48];
    v177 = HIDWORD(v256);
    v178 = *(_QWORD *)&v255[24];
    do
    {
      v180 = *(_DWORD *)(a1 + 24);
      v181 = v175 - v180;
      if (v180 == v175 - v180)
      {
        v179 = v157 + 1;
      }
      else
      {
        v182 = v231;
        v183 = v230 + (v232 * v157);
        v179 = v157 + 1;
        do
        {
          v146.f32[0] = (float)v180;
          v146.f32[1] = (float)v157;
          *(float32x2_t *)v146.f32 = vadd_f32(vmul_f32(*(float32x2_t *)(a2 + 1272), *(float32x2_t *)v146.f32), *(float32x2_t *)(a2 + 1280));
          _D3 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v146.f32, 1);
          _D4 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32), _D3, *(float32x2_t *)v146.f32, 1);
          v146.i32[2] = 1.0;
          v187 = (int8x16_t)vmulq_n_f32(v146, 1.0 / sqrtf(_D4.f32[0] + 1.0));
          v188 = (__int16 *)(v178 + 2 * (v157 * v177) + 2 * (v180 * v176));
          _D3.i16[0] = *v188;
          __asm { FCVT            S3, H3 }
          _D4.i16[0] = v188[1];
          __asm { FCVT            S4, H4 }
          _D5.i16[0] = v188[2];
          __asm { FCVT            S5, H5 }
          v189 = vmla_lane_f32(vmul_f32(_D3, *(float32x2_t *)v187.i8), _D4, *(float32x2_t *)v187.i8, 1);
          v146 = (float32x4_t)vextq_s8(v187, v187, 8uLL);
          if (fabsf(vmla_f32(v189, *(float32x2_t *)v146.f32, _D5).f32[0]) > *(float *)(a1 + 20))
          {
            v184 = v180 + 1;
          }
          else
          {
            v190 = (v180 * v182);
            v191 = *(_BYTE *)(v183 + v190);
            *(_BYTE *)(v183 + v190) = v191 | 4;
            v192 = *(float *)(a1 + 28);
            v193 = *(_DWORD *)&v254[16] * v180;
            _H3 = *(_WORD *)(*(_QWORD *)v254
                           + 2 * (*(_DWORD *)&v254[20] * v157 + *(_DWORD *)&v254[16] * v180));
            v184 = v180 + 1;
            _H4 = *(_WORD *)(*(_QWORD *)v254
                           + 2 * (*(_DWORD *)&v254[20] * v157 + *(_DWORD *)&v254[16] * (v180 + 1)));
            __asm
            {
              FCVT            S4, H4
              FCVT            S3, H3
            }
            _S4 = _S3 - _S4;
            __asm
            {
              FCVT            H4, S4
              FCVT            S4, H4
            }
            _S4 = fabsf(_S4);
            __asm
            {
              FCVT            H4, S4
              FCVT            S4, H4
            }
            if (v192 <= _S4)
            {
              _H4 = *(_WORD *)(*(_QWORD *)v254
                             + 2 * (*(_DWORD *)&v254[20] * v157 + *(_DWORD *)&v254[16] * (v180 - 1)));
              __asm { FCVT            S4, H4 }
              _S4 = _S3 - _S4;
              __asm
              {
                FCVT            H4, S4
                FCVT            S4, H4
              }
              _S4 = fabsf(_S4);
              __asm
              {
                FCVT            H4, S4
                FCVT            S4, H4
              }
              if (v192 <= _S4)
              {
                _H4 = *(_WORD *)(*(_QWORD *)v254 + 2 * (v193 + *(_DWORD *)&v254[20] * v179));
                __asm { FCVT            S4, H4 }
                _S4 = _S3 - _S4;
                __asm
                {
                  FCVT            H4, S4
                  FCVT            S4, H4
                }
                _S4 = fabsf(_S4);
                __asm
                {
                  FCVT            H4, S4
                  FCVT            S4, H4
                }
                if (v192 <= _S4)
                {
                  _H4 = *(_WORD *)(*(_QWORD *)v254 + 2 * (v193 + *(_DWORD *)&v254[20] * (v157 - 1)));
                  __asm { FCVT            S4, H4 }
                  _S3 = _S3 - _S4;
                  __asm
                  {
                    FCVT            H3, S3
                    FCVT            S3, H3
                  }
                  _S3 = fabsf(_S3);
                  __asm
                  {
                    FCVT            H3, S3
                    FCVT            S3, H3
                  }
                  if (v192 <= _S3)
                    *(_BYTE *)(v183 + v190) = v191 | 6;
                }
              }
            }
          }
          v180 = v184;
        }
        while (v184 != v181);
      }
      v157 = v179;
    }
    while (v179 != v158);
  }
  v159 = *(std::__shared_weak_count **)&v255[16];
  if (*(_QWORD *)&v255[16])
  {
    v160 = (unint64_t *)(*(_QWORD *)&v255[16] + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v251)
  {
    v162 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
    if (*((_QWORD *)&v247 + 1))
    {
      v163 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
  }
LABEL_276:
  v165 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
  if (!*((_QWORD *)&v253 + 1))
    goto LABEL_280;
  v166 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
  do
    v167 = __ldaxr(v166);
  while (__stlxr(v167 - 1, v166));
  if (v167)
    goto LABEL_280;
  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
  std::__shared_weak_count::__release_weak(v165);
  v168 = v229;
  if (!v229)
    goto LABEL_284;
LABEL_281:
  v169 = (unint64_t *)&v168->__shared_owners_;
  do
    v170 = __ldaxr(v169);
  while (__stlxr(v170 - 1, v169));
  if (v170)
  {
LABEL_284:
    if (!*(_BYTE *)(a1 + 8))
      goto LABEL_285;
    goto LABEL_288;
  }
  ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
  std::__shared_weak_count::__release_weak(v168);
  if (!*(_BYTE *)(a1 + 8))
  {
LABEL_285:
    if (!*(_BYTE *)(a1 + 16))
      return;
  }
LABEL_288:
  v171 = *a3;
  v246 = &off_24EC22138;
  sub_2236B487C(v171, (uint64_t *)&v247);
  sub_223800D78(a2, (uint64_t)&v246);
  v172 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
  if (*((_QWORD *)&v247 + 1))
  {
    v173 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
}

void sub_2238B8344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v36 = *(_QWORD *)(v34 - 192);
  *(_QWORD *)(v34 - 192) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  sub_2231BD90C((uint64_t)&a33);
  sub_2231874DC((uint64_t)&a28);
  sub_2231DE1B4((uint64_t)&a21);
  sub_223167354(v33);
  _Unwind_Resume(a1);
}

void sub_2238B83DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  sub_2231D4840(v34 - 192);
  sub_2231BD3DC((uint64_t)&a33);
  sub_22319EF60(v34 - 248);
  sub_2231DE1B4((uint64_t)&a14);
  sub_223167354(v33);
  _Unwind_Resume(a1);
}

void sub_2238B8420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_2231DE1B4((uint64_t)&a33);
  sub_223167354(v33);
  _Unwind_Resume(a1);
}

void sub_2238B8440(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238B8458(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238B8478(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238B8490(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238B84A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_223167354((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2238B84BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_2231DE1B4((uint64_t)va);
  sub_223167354(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_2238B84DC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  int v16;
  __int16 v17;
  int v18;
  char v19;

  v12 = 0x100000001;
  v13 = 10;
  v14 = 0x3F19999A3F733333;
  v15 = 1;
  v16 = 1063675494;
  v17 = 257;
  v18 = 1069547520;
  v19 = 0;
  v4 = sub_2238F25E8(a1, (__int128 *)&v12);
  *(_QWORD *)(v4 + 208) = 0;
  v5 = (uint64_t *)(v4 + 208);
  if (*a2)
  {
    v6 = a2[1];
    v7 = a2[2];
    v8 = operator new();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 32) = 1065353216;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_DWORD *)(v8 + 72) = 1065353216;
    *(_BYTE *)(v8 + 80) = v6;
    *(_DWORD *)(v8 + 82) = 196658;
    *(_QWORD *)(v8 + 88) = 0x3D4CCCCD3F800000;
    *(_BYTE *)(v8 + 96) = v7;
    *(_DWORD *)(v8 + 98) = 1048608;
    *(_WORD *)(v8 + 102) = 3;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_DWORD *)(v8 + 136) = 1065353216;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_DWORD *)(v8 + 176) = 1065353216;
    *(_OWORD *)(v8 + 184) = 0u;
    *(_OWORD *)(v8 + 200) = 0u;
    *(_DWORD *)(v8 + 216) = 1065353216;
    v9 = *v5;
    *v5 = v8;
    if (v9)
    {
      v10 = sub_223889410(v9);
      MEMORY[0x227684CE8](v10, 0x10A0C40719C5C5ELL);
    }
  }
  return a1;
}

void sub_2238B8624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;

  sub_2238B8650(v2);
  v4 = *(void **)(v1 + 152);
  if (v4)
    free(v4);
  *(_QWORD *)(v1 + 152) = 0;
  sub_2238895FC(v1 + 72);
  _Unwind_Resume(a1);
}

uint64_t *sub_2238B8650(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_223889410(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C40719C5C5ELL);
  }
  return a1;
}

uint64_t sub_2238B8694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[8];
  std::__shared_weak_count *v38;
  char v39;
  _BYTE v40[16];
  std::__shared_weak_count *v41;

  if (!*(_BYTE *)(a2 + 1208))
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/SceneTypeEngine.cpp", 41, (uint64_t)"frame.SceneTypeProbability()", 28, (uint64_t)"Invalid scene type probability image", 36, (void (*)(void **))sub_22457406C))goto LABEL_14;
LABEL_29:
    abort();
  }
  if (*(_DWORD *)(a2 + 1184))
    v6 = *(_DWORD *)(a2 + 1188) == 0;
  else
    v6 = 1;
  if (v6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1211, (uint64_t)"!scene_type.confidence->Empty()", 31, (uint64_t)"Scene type probability buffer not valid", 39, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_29;
  }
  v7 = sub_223C3E368(a2 + 1128, (uint64_t)v40);
  v8 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_14:
  sub_2238F2C74((int *)a1, a2, (uint64_t)v37);
  if (v39)
  {
    v11 = v38;
    if (v38)
    {
      v12 = (unint64_t *)&v38->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  result = sub_2238BB3A4(a3, (_DWORD *)a1);
  v15 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v16 = *(unsigned int *)(a1 + 4);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = *(_DWORD *)(a3 + 8);
      v20 = *(_DWORD *)(a3 + 12);
      v21 = *(_QWORD *)(a3 + 40);
      result = 180;
LABEL_23:
      v22 = 0;
      v23 = v17;
      do
      {
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 80)
                       + 48 * (*(_DWORD *)(a1 + 48) * v18 + *(_DWORD *)(a1 + 52) * v22));
        v25 = v24[5] + v24[4] - 1;
        v26 = *(_QWORD *)(v24[1] + 8 * (v25 / 0x16)) + 180 * (v25 % 0x16);
        v27 = v21 + 180 * v23;
        v28 = *(_OWORD *)(v26 + 112);
        v30 = *(_OWORD *)(v26 + 64);
        v29 = *(_OWORD *)(v26 + 80);
        *(_OWORD *)(v27 + 96) = *(_OWORD *)(v26 + 96);
        *(_OWORD *)(v27 + 112) = v28;
        *(_OWORD *)(v27 + 64) = v30;
        *(_OWORD *)(v27 + 80) = v29;
        v32 = *(_OWORD *)(v26 + 144);
        v31 = *(_OWORD *)(v26 + 160);
        v33 = *(_OWORD *)(v26 + 128);
        *(_DWORD *)(v27 + 176) = *(_DWORD *)(v26 + 176);
        *(_OWORD *)(v27 + 144) = v32;
        *(_OWORD *)(v27 + 160) = v31;
        *(_OWORD *)(v27 + 128) = v33;
        v34 = *(_OWORD *)v26;
        v35 = *(_OWORD *)(v26 + 16);
        v36 = *(_OWORD *)(v26 + 48);
        *(_OWORD *)(v27 + 32) = *(_OWORD *)(v26 + 32);
        *(_OWORD *)(v27 + 48) = v36;
        *(_OWORD *)v27 = v34;
        *(_OWORD *)(v27 + 16) = v35;
        ++v22;
        v23 += v20;
      }
      while (v16 != v22);
      while (++v18 != v15)
      {
        v16 = *(unsigned int *)(a1 + 4);
        v17 += v19;
        if (*(_DWORD *)(a1 + 4))
          goto LABEL_23;
      }
    }
  }
  return result;
}

void sub_2238B88DC(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD *a4, __int128 *a5, uint64_t *a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v22;
  std::string::size_type v23;
  int v24;
  std::chrono::steady_clock::time_point v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  BOOL v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::mutex *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  unint64_t v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __n128 *v51;
  __int128 *v52;
  size_t v53;
  float v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  std::mutex *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  unint64_t v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __n128 *v70;
  __int128 *v71;
  size_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t prime;
  uint64_t *i;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  std::mutex *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  std::string::size_type v91;
  int v92;
  __n128 *v95;
  std::string *v96;
  size_t v97;
  float v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  _QWORD *v102;
  void *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  BOOL v114;
  unint64_t v115;
  uint8x8_t v116;
  uint64_t v117;
  __int128 v118;
  std::string __p;
  __int128 v120;
  void *v121[4];
  float v122;
  void *v123;
  int v124;
  int v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  int v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 208))
    return;
  v121[0] = "cv3d.recon.";
  v121[1] = (void *)11;
  v121[2] = "SceneTypeGraph.Graph";
  v121[3] = (void *)20;
  sub_2231A9820((uint64_t)v121, (uint64_t)&v122, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v12 = sub_2241471F8();
    v13 = v12[2];
    if (!v13)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = v12[2];
    }
    v14 = *(_QWORD *)(v13 + 64);
    v15 = (std::mutex *)(v14 + 32);
    std::mutex::lock((std::mutex *)(v14 + 32));
    v17 = *(_QWORD *)(v14 + 96);
    v16 = *(_QWORD *)(v14 + 104);
    std::mutex::unlock(v15);
    if (v17 != v16)
    {
      sub_2241471F8();
      v18 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
      {
        v132 = 0u;
        v133 = 0u;
        v134 = 728325608;
        kdebug_trace();
        sub_2238EEED0(*(_QWORD **)(a1 + 208), 1, (uint64_t)v121);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
        {
          *(_QWORD *)&v120 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v120 + 1) = 2;
          v19 = sub_2241471F8();
          sub_2238BB49C((uint64_t)v19, v18, (uint64_t)v121, (uint64_t)&unk_2245C9EFE, &v120);
        }
        sub_22316F8F4((uint64_t *)v121);
        kdebug_trace();
      }
    }
  }
  v132 = 0u;
  v133 = 0u;
  v134 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = p_p->__r_.__value_.__r.__words[0];
    v23 = p_p->__r_.__value_.__l.__size_;
    v24 = p_p->__r_.__value_.__s.__data_[16];
    if (v22 == 0x6365722E64337663 && v23 == 0x73746174532E6E6FLL && v24 == 46)
    {
      sub_223187510();
      sub_2238EEED0(*(_QWORD **)(a1 + 208), 1, (uint64_t)v121);
      sub_22316F8F4((uint64_t *)v121);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v28 = *(_QWORD **)(a1 + 208);
  v29 = *a2;
  v30 = a2[1];
  *(_OWORD *)v121 = *a4;
  *(_OWORD *)((char *)&v121[1] + 4) = *(_OWORD *)((char *)a4 + 12);
  sub_223207688((uint64_t)&v122, (uint64_t)(a4 + 2));
  v31 = a5[1];
  v127 = *a5;
  v128 = v31;
  v32 = a5[3];
  v129 = a5[2];
  v130 = v32;
  v131 = *a6;
  sub_2238B9998(v28, v29, v30, (uint64_t)v121);
  v33 = v123;
  if (v123)
  {
    v34 = !v125 || v124 == 0;
    v35 = v34 ? 0 : v125;
    if (v35 * (((381774871 * (v126 >> 34)) >> 32) >> 2) != -1)
      goto LABEL_37;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v33 = v123;
    if (v123)
LABEL_37:
      free(v33);
  }
  v121[0] = "cv3d.recon.";
  v121[1] = (void *)11;
  v121[2] = "Stats.Keyframing.scene_type";
  v121[3] = (void *)27;
  sub_2231A9820((uint64_t)v121, (uint64_t)&v122, 0, 0, (std::string *)&v132);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v36 = sub_2241471F8();
    v37 = v36[2];
    if (!v37)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v37 = v36[2];
    }
    v38 = *(_QWORD *)(v37 + 64);
    v39 = (std::mutex *)(v38 + 32);
    std::mutex::lock((std::mutex *)(v38 + 32));
    v41 = *(_QWORD *)(v38 + 96);
    v40 = *(_QWORD *)(v38 + 104);
    std::mutex::unlock(v39);
    if (v41 != v40)
    {
      sub_2241471F8();
      v42 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))
      {
        memset(v121, 0, sizeof(v121));
        v122 = 8.2909e-13;
        kdebug_trace();
        v43 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v27.__d_.__rep_) / 1000000.0;
        v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&__p.__r_.__value_.__l.__data_ = v43;
        sub_2238B02A0((double *)&qword_255788F20, v42, (float *)&__p, "add_node (ms)");
        kdebug_trace();
      }
    }
  }
  memset(v121, 0, sizeof(v121));
  v122 = 8.2909e-13;
  kdebug_trace();
  v44 = BYTE7(v133);
  if (SBYTE7(v133) < 0)
    v44 = *((_QWORD *)&v132 + 1);
  if (v44 >= 0x11)
  {
    v45 = &v132;
    if (SBYTE7(v133) < 0)
      v45 = (__int128 *)v132;
    v46 = *(_QWORD *)v45;
    v47 = *((_QWORD *)v45 + 1);
    v48 = *((unsigned __int8 *)v45 + 16);
    if (v46 == 0x6365722E64337663 && v47 == 0x73746174532E6E6FLL && v48 == 46)
    {
      v51 = sub_223187510();
      if ((SBYTE7(v133) & 0x80u) == 0)
        v52 = &v132;
      else
        v52 = (__int128 *)v132;
      if ((SBYTE7(v133) & 0x80u) == 0)
        v53 = BYTE7(v133);
      else
        v53 = *((_QWORD *)&v132 + 1);
      v54 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v27.__d_.__rep_) / 1000000.0;
      v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)&__p.__r_.__value_.__l.__data_ = v54;
      sub_2231897A8((uint64_t *)v51, v52, v53, (float *)&__p, (uint64_t)"add_node (ms)", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v133) < 0)
    operator delete((void *)v132);
  sub_2238EC430(*(_QWORD **)(a1 + 208), *a2, a2[1]);
  v121[0] = "cv3d.recon.";
  v121[1] = (void *)11;
  v121[2] = "Stats.Keyframing.scene_type";
  v121[3] = (void *)27;
  sub_2231A9820((uint64_t)v121, (uint64_t)&v122, 0, 0, (std::string *)&v132);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v55 = sub_2241471F8();
    v56 = v55[2];
    if (!v56)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v56 = v55[2];
    }
    v57 = *(_QWORD *)(v56 + 64);
    v58 = (std::mutex *)(v57 + 32);
    std::mutex::lock((std::mutex *)(v57 + 32));
    v60 = *(_QWORD *)(v57 + 96);
    v59 = *(_QWORD *)(v57 + 104);
    std::mutex::unlock(v58);
    if (v60 != v59)
    {
      sub_2241471F8();
      v61 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61))
      {
        memset(v121, 0, sizeof(v121));
        v122 = 8.2909e-13;
        kdebug_trace();
        v62 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v27.__d_.__rep_) / 1000000.0;
        v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&__p.__r_.__value_.__l.__data_ = v62;
        sub_22345EECC((double *)&qword_255788F20, v61, (float *)&__p, "update_edges (ms)");
        kdebug_trace();
      }
    }
  }
  memset(v121, 0, sizeof(v121));
  v122 = 8.2909e-13;
  kdebug_trace();
  v63 = BYTE7(v133);
  if (SBYTE7(v133) < 0)
    v63 = *((_QWORD *)&v132 + 1);
  if (v63 >= 0x11)
  {
    v64 = &v132;
    if (SBYTE7(v133) < 0)
      v64 = (__int128 *)v132;
    v65 = *(_QWORD *)v64;
    v66 = *((_QWORD *)v64 + 1);
    v67 = *((unsigned __int8 *)v64 + 16);
    if (v65 == 0x6365722E64337663 && v66 == 0x73746174532E6E6FLL && v67 == 46)
    {
      v70 = sub_223187510();
      if ((SBYTE7(v133) & 0x80u) == 0)
        v71 = &v132;
      else
        v71 = (__int128 *)v132;
      if ((SBYTE7(v133) & 0x80u) == 0)
        v72 = BYTE7(v133);
      else
        v72 = *((_QWORD *)&v132 + 1);
      v73 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v27.__d_.__rep_) / 1000000.0;
      v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)&__p.__r_.__value_.__l.__data_ = v73;
      sub_2231897A8((uint64_t *)v70, v71, v72, (float *)&__p, (uint64_t)"update_edges (ms)", 17);
    }
  }
  kdebug_trace();
  if (SBYTE7(v133) < 0)
  {
    operator delete((void *)v132);
    v74 = *(_QWORD *)(a1 + 208);
    if (*(_BYTE *)(v74 + 96))
      goto LABEL_96;
  }
  else
  {
    v74 = *(_QWORD *)(a1 + 208);
    if (*(_BYTE *)(v74 + 96))
    {
LABEL_96:
      v75 = sub_2238ED554(v74, *a2, a2[1]);
      goto LABEL_99;
    }
  }
  v75 = (uint64_t)sub_2238EE7DC(v74);
LABEL_99:
  v76 = v75;
  memset(v121, 0, sizeof(v121));
  v122 = *(float *)(v75 + 32);
  prime = *(_QWORD *)(v75 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_101:
    sub_2231B0668((uint64_t)v121, prime);
    goto LABEL_102;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(v75 + 8));
    v113 = v121[1];
    v114 = (void *)prime >= v121[1];
    if ((void *)prime > v121[1])
      goto LABEL_101;
  }
  else
  {
    v113 = 0;
    v114 = 1;
    if (prime)
      goto LABEL_101;
  }
  if (!v114)
  {
    v115 = vcvtps_u32_f32((float)(unint64_t)v121[3] / v122);
    if ((unint64_t)v113 < 3
      || (v116 = (uint8x8_t)vcnt_s8((int8x8_t)v113), v116.i16[0] = vaddlv_u8(v116), v116.u32[0] > 1uLL))
    {
      v115 = std::__next_prime(v115);
    }
    else
    {
      v117 = 1 << -(char)__clz(v115 - 1);
      if (v115 >= 2)
        v115 = v117;
    }
    if (prime <= v115)
      prime = v115;
    if (prime < (unint64_t)v113)
      goto LABEL_101;
  }
LABEL_102:
  for (i = *(uint64_t **)(v76 + 16); i; i = (uint64_t *)*i)
    sub_223340BF8((uint64_t)v121, (uint64_t)(i + 2), (_OWORD *)i + 1);
  v79 = v121[2];
  if (v121[2])
  {
    do
    {
      sub_22319597C(a3, v79 + 2, &v132);
      if (!(_QWORD)v132)
        goto LABEL_148;
      v102 = *(_QWORD **)(a1 + 208);
      v103 = (void *)v79[2];
      v104 = v79[3];
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
      v118 = v132;
      if (*((_QWORD *)&v132 + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
      }
      sub_2238EED18(v102, v103, v104, (uint64_t *)&v118);
      if (!v105)
        goto LABEL_148;
      p_shared_owners = (unint64_t *)&v105->__shared_owners_;
      do
        v109 = __ldaxr(p_shared_owners);
      while (__stlxr(v109 - 1, p_shared_owners));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
        v110 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
        if (*((_QWORD *)&v132 + 1))
        {
LABEL_149:
          v111 = (unint64_t *)&v110->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
      }
      else
      {
LABEL_148:
        v110 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
        if (*((_QWORD *)&v132 + 1))
          goto LABEL_149;
      }
      v79 = (_QWORD *)*v79;
    }
    while (v79);
  }
  *(_QWORD *)&v132 = "cv3d.recon.";
  *((_QWORD *)&v132 + 1) = 11;
  *(_QWORD *)&v133 = "Stats.Keyframing.scene_type";
  *((_QWORD *)&v133 + 1) = 27;
  sub_2231A9820((uint64_t)&v132, (uint64_t)&v134, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v80 = sub_2241471F8();
    v81 = v80[2];
    if (!v81)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v81 = v80[2];
    }
    v82 = *(_QWORD *)(v81 + 64);
    v83 = (std::mutex *)(v82 + 32);
    std::mutex::lock((std::mutex *)(v82 + 32));
    v85 = *(_QWORD *)(v82 + 96);
    v84 = *(_QWORD *)(v82 + 104);
    std::mutex::unlock(v83);
    if (v85 != v84)
    {
      sub_2241471F8();
      v86 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v86 + 24))(v86))
      {
        v132 = 0u;
        v133 = 0u;
        v134 = 728325608;
        kdebug_trace();
        v87 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v27.__d_.__rep_) / 1000000.0;
        v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&v120 = v87;
        sub_2238B9B50((double *)&qword_255788F20, v86, (float *)&v120, "graph_optimization (ms)");
        kdebug_trace();
      }
    }
  }
  v132 = 0u;
  v133 = 0u;
  v134 = 728325624;
  kdebug_trace();
  v88 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v88 = __p.__r_.__value_.__l.__size_;
  if (v88 >= 0x11)
  {
    v89 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v89 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v90 = v89->__r_.__value_.__r.__words[0];
    v91 = v89->__r_.__value_.__l.__size_;
    v92 = v89->__r_.__value_.__s.__data_[16];
    if (v90 == 0x6365722E64337663 && v91 == 0x73746174532E6E6FLL && v92 == 46)
    {
      v95 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = &__p;
      else
        v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v97 = __p.__r_.__value_.__l.__size_;
      v98 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v27.__d_.__rep_) / 1000000.0;
      std::chrono::steady_clock::now();
      *(float *)&v120 = v98;
      sub_2231897A8((uint64_t *)v95, v96, v97, (float *)&v120, (uint64_t)"graph_optimization (ms)", 23);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v99 = v121[2];
  if (v121[2])
  {
    do
    {
      v100 = (_QWORD *)*v99;
      operator delete(v99);
      v99 = v100;
    }
    while (v100);
  }
  v101 = v121[0];
  v121[0] = 0;
  if (v101)
    operator delete(v101);
}

void sub_2238B97E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238B994C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354(v2 - 160);
  sub_22322E828((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2238B9984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22322E828((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2238B9998(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  _OWORD *v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v14[0] = a2;
  v14[1] = a3;
  v6 = sub_223340F28(a1, (uint64_t)v14);
  if (!v6)
  {
    v13 = v14;
    v7 = sub_2238BB5B0((uint64_t)a1, (uint64_t)v14, (uint64_t)&unk_2245BA939, &v13);
    sub_2231CFEAC((uint64_t)(v7 + 4), a4);
    v8 = *(_OWORD *)(a4 + 88);
    v9 = *(_OWORD *)(a4 + 104);
    v10 = *(_OWORD *)(a4 + 120);
    *(_OWORD *)(v7 + 13) = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(v7 + 19) = v10;
    *(_OWORD *)(v7 + 17) = v9;
    *(_OWORD *)(v7 + 15) = v8;
    v7[21] = *(_QWORD *)(a4 + 136);
    v13 = v14;
    v11 = sub_2238BBADC(a1 + 5, (uint64_t)v14, (uint64_t)&unk_2245BA939, &v13);
    sub_2238BC044((uint64_t)(v11 + 4), 0, 0);
  }
  return v6 == 0;
}

uint64_t sub_2238B9AA4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 56) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 60);
    if (v4 * (((381774871 * (unint64_t)(*(_QWORD *)(a1 + 64) >> 34)) >> 32) >> 2) != -1)
      goto LABEL_11;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *(void **)(a1 + 40);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_2238B9B50(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238B9C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238B9C8C(uint64_t a1, _OWORD *a2, __int128 *a3, uint64_t *a4)
{
  _QWORD *v5;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  BOOL v21;
  int v22;
  _OWORD v23[2];
  void *v24;
  int v25;
  int v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)(a1 + 208);
  if (v5)
  {
    v9 = (uint64_t *)a2 + 1;
    v23[0] = *a2;
    v10 = sub_223340F28(v5, (uint64_t)v23);
    v11 = *(_QWORD **)(a1 + 208);
    v12 = *(_QWORD *)a2;
    v13 = *v9;
    if (v10)
    {
      *(_QWORD *)&v23[0] = v12;
      *((_QWORD *)&v23[0] + 1) = v13;
      if (!sub_223340F28(v11, (uint64_t)v23)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 121, (uint64_t)"nodes_.count(id)", 16, (uint64_t)&unk_224597B0F, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = sub_22342DA5C(v11, (uint64_t)v23);
      if (!v14)
        sub_223198218("unordered_map::at: key not found");
      v15 = *a3;
      v16 = a3[1];
      v17 = a3[2];
      *(_OWORD *)(v14 + 19) = a3[3];
      *(_OWORD *)(v14 + 17) = v17;
      *(_OWORD *)(v14 + 15) = v16;
      *(_OWORD *)(v14 + 13) = v15;
    }
    else
    {
      sub_2238BB3A4((uint64_t)v23, (_DWORD *)a1);
      v18 = a3[1];
      v28 = *a3;
      v29 = v18;
      v19 = a3[3];
      v30 = a3[2];
      v31 = v19;
      v32 = *a4;
      sub_2238B9998(v11, v12, v13, (uint64_t)v23);
      v20 = v24;
      if (v24)
      {
        v21 = !v26 || v25 == 0;
        v22 = v21 ? 0 : v26;
        if (v22 * (((381774871 * (v27 >> 34)) >> 32) >> 2) != -1)
          goto LABEL_17;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v20 = v24;
        if (v24)
LABEL_17:
          free(v20);
      }
    }
  }
}

void sub_2238B9E7C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238B9EAC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  float32x2_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  std::mutex *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  std::string::size_type size;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  int v31;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::mutex *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  float32x4_t v58;
  __int8 *v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  std::string::size_type v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  std::mutex *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t *v109;
  std::string::size_type v110;
  float32x4_t v111;
  int v112;
  uint64_t v113;
  int v114;
  std::string v116;
  std::string v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  uint64_t (**v121)();
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::string v124;
  char v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  int v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  char v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  __int32 v169[4];
  std::string v170;
  __int128 v171;
  _QWORD v172[2];
  __int128 __p;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  int v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  char v212;
  __int128 v213;
  const char *v214;
  uint64_t v215;
  _QWORD v216[40];
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 208))
  {
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v5 = sub_2241471F8();
      v6 = v5[2];
      if (!v6)
      {
        v7 = v5;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v6 = v7[2];
      }
      v8 = *(_QWORD *)(v6 + 64);
      v9 = (std::mutex *)(v8 + 32);
      std::mutex::lock((std::mutex *)(v8 + 32));
      v11 = *(_QWORD *)(v8 + 96);
      v10 = *(_QWORD *)(v8 + 104);
      std::mutex::unlock(v9);
      if (v11 != v10)
      {
        *(_QWORD *)&v213 = "cv3d.recon.";
        *((_QWORD *)&v213 + 1) = 11;
        v214 = "SceneTypeGraph";
        v215 = 14;
        sub_2231A9820((uint64_t)&v213, (uint64_t)v216, 0, 0, (std::string *)&__p);
        sub_2241471F8();
        v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v14 = v13;
        if (SBYTE7(v174) < 0)
        {
          operator delete((void *)__p);
          if ((v14 & 1) == 0)
            return;
        }
        else if ((v13 & 1) == 0)
        {
          return;
        }
        v15 = *(_QWORD *)(a1 + 208);
        v16 = *(uint64_t **)(v15 + 16);
        if (v16)
        {
          v114 = *(unsigned __int8 *)(v15 + 80);
          v111 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          do
          {
            v171 = *((_OWORD *)v16 + 1);
            sub_22319597C(a2, &v171, &v118);
            if (v118)
            {
              v17 = (float32x2_t *)sub_22381AF00(a3, v171, *((uint64_t *)&v171 + 1));
              *(_QWORD *)&v213 = "cv3d.recon.";
              *((_QWORD *)&v213 + 1) = 11;
              v214 = "SceneTypeGraph.KF_Pose";
              v215 = 22;
              sub_2231A9820((uint64_t)&v213, (uint64_t)v216, 0, 0, &v170);
              sub_224569D7C();
              sub_224569A80();
              if (os_variant_has_internal_diagnostics())
              {
                v18 = sub_2241471F8();
                v19 = v18[2];
                if (!v19)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v19 = v18[2];
                }
                v20 = *(_QWORD *)(v19 + 64);
                v21 = (std::mutex *)(v20 + 32);
                std::mutex::lock((std::mutex *)(v20 + 32));
                v23 = *(_QWORD *)(v20 + 96);
                v22 = *(_QWORD *)(v20 + 104);
                std::mutex::unlock(v21);
                if (v23 != v22)
                {
                  sub_2241471F8();
                  v24 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
                  {
                    kdebug_trace();
                    sub_2238EFB84(*(_QWORD **)(a1 + 208), (uint64_t (**)())v171, *((uint64_t (***)(_QWORD))&v171 + 1), v114 != 0, (uint64_t)&v213);
                    v25 = (uint64_t)v17[10];
                    sub_2245664AC((unsigned __int8 *)&v171, &__p);
                    sub_22456D250("%.0f_%s", &v124, (double)v25 / 1000000000.0, &__p);
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
                    {
                      v126 = *(_OWORD *)&v124.__r_.__value_.__l.__data_;
                      *(_QWORD *)&v127 = *((_QWORD *)&v124.__r_.__value_.__l + 2);
                      memset(&v124, 0, sizeof(v124));
                      *(_QWORD *)&v166 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                      *((_QWORD *)&v166 + 1) = 2;
                      v26 = sub_2241471F8();
                      sub_223452794((uint64_t)v26, v24, (uint64_t)&v213, (uint64_t)&v126, &v166);
                      if (SBYTE7(v127) < 0)
                        operator delete((void *)v126);
                    }
                    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v124.__r_.__value_.__l.__data_);
                    sub_22316F8F4((uint64_t *)&v213);
                    kdebug_trace();
                  }
                }
              }
              kdebug_trace();
              size = HIBYTE(v170.__r_.__value_.__r.__words[2]);
              if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v170.__r_.__value_.__l.__size_;
              if (size >= 0x11)
              {
                v28 = &v170;
                if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v28 = (std::string *)v170.__r_.__value_.__r.__words[0];
                v29 = v28->__r_.__value_.__r.__words[0];
                v30 = v28->__r_.__value_.__l.__size_;
                v31 = v28->__r_.__value_.__s.__data_[16];
                if (v29 == 0x6365722E64337663 && v30 == 0x73746174532E6E6FLL && v31 == 46)
                {
                  sub_223187510();
                  sub_2238EFB84(*(_QWORD **)(a1 + 208), (uint64_t (**)())v171, *((uint64_t (***)(_QWORD))&v171 + 1), v114 != 0, (uint64_t)&v213);
                  v34 = (uint64_t)v17[10];
                  sub_2245664AC((unsigned __int8 *)&v171, &__p);
                  sub_22456D250("%.0f_%s", (std::string *)&v126, (double)v34 / 1000000000.0, &__p);
                  if (SBYTE7(v127) < 0)
                    operator delete((void *)v126);
                  sub_22316F8F4((uint64_t *)&v213);
                }
              }
              kdebug_trace();
              if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v170.__r_.__value_.__l.__data_);
              v35 = *(_QWORD *)(a1 + 208);
              v213 = v171;
              v36 = (_QWORD *)(v35 + 144);
              if (!sub_223340F28((_QWORD *)(v35 + 144), (uint64_t)&v213)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/SceneTypeGraph.h", 165, (uint64_t)"optimized_nodes_.count(id)", 26, (uint64_t)&unk_224597B0F, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v37 = sub_22342DA5C(v36, (uint64_t)&v213);
              if (!v37)
                sub_223198218("unordered_map::at: key not found");
              v38 = *(unsigned __int8 *)(v37[9] + 132);
              sub_224569D7C();
              sub_224569A80();
              if (os_variant_has_internal_diagnostics())
              {
                v39 = sub_2241471F8();
                v40 = v39[2];
                if (!v40)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v40 = v39[2];
                }
                v41 = *(_QWORD *)(v40 + 64);
                v42 = (std::mutex *)(v41 + 32);
                std::mutex::lock((std::mutex *)(v41 + 32));
                v44 = *(_QWORD *)(v41 + 96);
                v43 = *(_QWORD *)(v41 + 104);
                std::mutex::unlock(v42);
                if (v44 != v43)
                {
                  *(_QWORD *)&v213 = "cv3d.recon.";
                  *((_QWORD *)&v213 + 1) = 11;
                  v214 = "SceneTypeGraph.KF_PointCloud";
                  v215 = 28;
                  sub_2231A9820((uint64_t)&v213, (uint64_t)v216, 0, 0, &v117);
                  sub_2241471F8();
                  v45 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
                  {
                    kdebug_trace();
                    v46 = (uint64_t)v17[10];
                    sub_2245664AC((unsigned __int8 *)v17, &v170);
                    sub_22456D250("%.0f_%s", &v116, (double)v46 / 1000000000.0, &v170);
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
                    {
                      v172[0] = v116.__r_.__value_.__l.__size_;
                      v47 = (void *)v116.__r_.__value_.__r.__words[0];
                      *(_QWORD *)((char *)v172 + 7) = *(std::string::size_type *)((char *)&v116.__r_.__value_.__r.__words[1]
                                                                                + 7);
                      v112 = SHIBYTE(v116.__r_.__value_.__r.__words[2]);
                      memset(&v116, 0, sizeof(v116));
                      *(_QWORD *)&v120 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                      *((_QWORD *)&v120 + 1) = v113 & 0xFFFFFFFFFFFFFF00 | 2;
                      v113 = *((_QWORD *)&v120 + 1);
                      v48 = sub_2241471F8();
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
                      {
                        sub_223CA3918(v118, 4, 0, (uint64_t)&v213);
                        v109 = v48;
                        v110 = (std::string::size_type)v47;
                        sub_2241498F4((uint64_t)&__p, 0);
                        sub_22339E3C8((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v213 + 1) - v213) >> 2));
                        sub_22339E3C8((uint64_t)&v175, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v216[9] - v216[8]) >> 2));
                        v179 = 1;
                        v56 = *((_QWORD *)&v213 + 1);
                        v55 = v213;
                        if ((_QWORD)v213 != *((_QWORD *)&v213 + 1))
                        {
                          v57 = (_DWORD *)*((_QWORD *)&__p + 1);
                          do
                          {
                            v49.i32[0] = *(_DWORD *)v55;
                            v50.i32[0] = *(_DWORD *)(v55 + 4);
                            v51.i32[0] = *(_DWORD *)(v55 + 8);
                            v52.i32[0] = v17[3].i32[0];
                            v53.i32[0] = v17[5].i32[0];
                            v54.i32[0] = v17[7].i32[0];
                            *(float32x2_t *)v58.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v17[2], *(float *)v55), v17[4], v50.f32[0]), v17[6], v51.f32[0]);
                            *(float32x2_t *)&v58.u32[2] = vmla_f32(vmla_f32(vmul_f32(v52, *(float32x2_t *)v49.f32), v50, v53), v51, v54);
                            *(float32x2_t *)v49.f32 = v17[8];
                            v49.i32[2] = v17[9].i32[0];
                            v49 = vaddq_f32(v58, v49);
                            v169[0] = v49.i32[2];
                            v168 = v49.i64[0];
                            if ((unint64_t)v57 < (unint64_t)v174)
                            {
                              *v57 = v49.i32[0];
                              v57[1] = HIDWORD(v168);
                              v49.i32[0] = v169[0];
                              v57[2] = v169[0];
                              v57 += 3;
                            }
                            else
                            {
                              v57 = sub_2238BC6C4((uint64_t)&__p, &v168, (_DWORD *)&v168 + 1, v169);
                            }
                            *((_QWORD *)&__p + 1) = v57;
                            v55 += 12;
                          }
                          while (v55 != v56);
                        }
                        v59 = (char *)&unk_22465395B + 3 * v38;
                        if (v38 >= 0x21)
                          v59 = (__int8 *)&unk_224653958;
                        v49.i8[0] = *v59;
                        v49.f32[0] = (float)v49.u32[0];
                        v50.i8[0] = v59[1];
                        v51.i8[0] = v59[2];
                        v49.f32[1] = (float)v50.u32[0];
                        v49.f32[2] = (float)v51.u32[0];
                        v60 = vdivq_f32(v49, v111);
                        v169[0] = v60.i32[2];
                        v168 = v60.i64[0];
                        v61 = v176;
                        v62 = v175;
                        v63 = 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 2);
                        if (v218 - v217 <= v63)
                        {
                          v65 = v109;
                          v64 = v110;
                          if (v218 - v217 < v63)
                          {
                            v61 = v175 + 12 * (v218 - v217);
                            v176 = v61;
                          }
                        }
                        else
                        {
                          v64 = v110;
                          sub_2235341F4((uint64_t)&v175, v218 - v217 - v63, &v168);
                          v65 = v109;
                          v62 = v175;
                          v61 = v176;
                        }
                        v126 = __p;
                        v127 = v174;
                        __p = 0uLL;
                        *(_QWORD *)&v174 = 0;
                        v128 = v62;
                        v129 = v61;
                        v130 = v177;
                        v131 = v178;
                        v176 = 0;
                        v177 = 0;
                        v175 = 0;
                        v132 = v179;
                        v133 = v180;
                        v134 = v181;
                        v135 = v182;
                        v180 = 0uLL;
                        v181 = 0;
                        v136 = v183;
                        v137 = v184;
                        v139 = v186;
                        v138 = v185;
                        v184 = 0uLL;
                        v185 = 0;
                        v140 = v187;
                        v142 = v189;
                        v141 = v188;
                        v187 = 0uLL;
                        v188 = 0;
                        v143 = v190;
                        v145 = v192;
                        v144 = v191;
                        v190 = 0uLL;
                        v191 = 0;
                        v146 = v193;
                        v148 = v195;
                        v147 = v194;
                        v193 = 0uLL;
                        v194 = 0;
                        v149 = v196;
                        v151 = v198;
                        v150 = v197;
                        v196 = 0uLL;
                        v197 = 0;
                        v152 = v199;
                        v155 = v202;
                        v153 = v200;
                        v154 = v201;
                        v201 = 0uLL;
                        v200 = 0;
                        v156 = v203;
                        v157 = v204;
                        v159 = v206;
                        v158 = v205;
                        v204 = 0uLL;
                        v205 = 0;
                        v160 = v207;
                        LOBYTE(v161) = 0;
                        v165 = 0;
                        if (v212)
                        {
                          v161 = v208;
                          v162 = v209;
                          v163 = v210;
                          v164 = v211;
                          v165 = 1;
                        }
                        sub_22316F8F4((uint64_t *)&__p);
                        sub_22326055C((uint64_t *)&v213);
                        v124.__r_.__value_.__r.__words[0] = v64;
                        v124.__r_.__value_.__l.__size_ = v172[0];
                        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v172 + 7);
                        *((_BYTE *)&v124.__r_.__value_.__s + 23) = v112;
                        v172[0] = 0;
                        *(_QWORD *)((char *)v172 + 7) = 0;
                        v125 = 1;
                        sub_22329F414((uint64_t)&v126, (__int128 *)&v124, &v120, &v166);
                        if (v125 && SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v124.__r_.__value_.__l.__data_);
                        sub_22316F8F4((uint64_t *)&v126);
                        v66 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 56))(v45);
                        v67 = *v66;
                        v68 = (std::__shared_weak_count *)v66[1];
                        if (v68)
                        {
                          p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                          do
                            v70 = __ldxr(p_shared_owners);
                          while (__stxr(v70 + 1, p_shared_owners));
                        }
                        v71 = *((_QWORD *)&v166 + 1);
                        v72 = v167;
                        v121 = &off_24EC6A3B8;
                        v122 = *((_QWORD *)&v166 + 1);
                        v123 = v167;
                        *((_QWORD *)&v166 + 1) = 0;
                        v167 = 0;
                        *(_QWORD *)&v213 = v67;
                        *((_QWORD *)&v213 + 1) = v68;
                        if (v68)
                        {
                          v73 = (unint64_t *)&v68->__shared_owners_;
                          do
                            v74 = __ldxr(v73);
                          while (__stxr(v74 + 1, v73));
                        }
                        v214 = (const char *)&off_24EC6A3B8;
                        v215 = v71;
                        v216[0] = v72;
                        if (v72)
                        {
                          v75 = (unint64_t *)&v72->__shared_owners_;
                          do
                            v76 = __ldxr(v75);
                          while (__stxr(v76 + 1, v75));
                        }
                        (*(void (**)(uint64_t *, __int128 *))(*v65 + 16))(v65, &v213);
                        v77 = (std::__shared_weak_count *)v216[0];
                        if (v216[0])
                        {
                          v78 = (unint64_t *)(v216[0] + 8);
                          do
                            v79 = __ldaxr(v78);
                          while (__stlxr(v79 - 1, v78));
                          if (!v79)
                          {
                            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                            std::__shared_weak_count::__release_weak(v77);
                          }
                        }
                        v80 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
                        if (*((_QWORD *)&v213 + 1))
                        {
                          v81 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
                          do
                            v82 = __ldaxr(v81);
                          while (__stlxr(v82 - 1, v81));
                          if (!v82)
                          {
                            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                            std::__shared_weak_count::__release_weak(v80);
                          }
                        }
                        v83 = v123;
                        if (v123)
                        {
                          v84 = (unint64_t *)&v123->__shared_owners_;
                          do
                            v85 = __ldaxr(v84);
                          while (__stlxr(v85 - 1, v84));
                          if (!v85)
                          {
                            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                            std::__shared_weak_count::__release_weak(v83);
                          }
                        }
                        if (v68)
                        {
                          v86 = (unint64_t *)&v68->__shared_owners_;
                          do
                            v87 = __ldaxr(v86);
                          while (__stlxr(v87 - 1, v86));
                          if (!v87)
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                          }
                        }
                        v88 = v167;
                        if (v167)
                        {
                          v89 = (unint64_t *)&v167->__shared_owners_;
                          do
                            v90 = __ldaxr(v89);
                          while (__stlxr(v90 - 1, v89));
                          if (!v90)
                          {
                            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                            std::__shared_weak_count::__release_weak(v88);
                          }
                        }
                      }
                      else if (v112 < 0)
                      {
                        operator delete(v47);
                      }
                    }
                    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v116.__r_.__value_.__l.__data_);
                    kdebug_trace();
                  }
                  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v117.__r_.__value_.__l.__data_);
                }
              }
            }
            v91 = v119;
            if (v119)
            {
              v92 = (unint64_t *)&v119->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
        *(_QWORD *)&v213 = "cv3d.recon.";
        *((_QWORD *)&v213 + 1) = 11;
        v214 = "SceneTypeGraph.Graph";
        v215 = 20;
        sub_2231A9820((uint64_t)&v213, (uint64_t)v216, 0, 0, (std::string *)&v126);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v94 = sub_2241471F8();
          v95 = v94[2];
          if (!v95)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v95 = v94[2];
          }
          v96 = *(_QWORD *)(v95 + 64);
          v97 = (std::mutex *)(v96 + 32);
          std::mutex::lock((std::mutex *)(v96 + 32));
          v99 = *(_QWORD *)(v96 + 96);
          v98 = *(_QWORD *)(v96 + 104);
          std::mutex::unlock(v97);
          if (v99 != v98)
          {
            sub_2241471F8();
            v100 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100))
            {
              __p = 0u;
              v174 = 0u;
              LODWORD(v175) = 728325608;
              kdebug_trace();
              sub_2238EEED0(*(_QWORD **)(a1 + 208), 0, (uint64_t)&v213);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100))
              {
                v170.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                v170.__r_.__value_.__l.__size_ = 2;
                v101 = sub_2241471F8();
                sub_2238BB49C((uint64_t)v101, v100, (uint64_t)&v213, (uint64_t)&unk_2245C9EFE, (__int128 *)&v170);
              }
              sub_22316F8F4((uint64_t *)&v213);
              kdebug_trace();
            }
          }
        }
        __p = 0u;
        v174 = 0u;
        LODWORD(v175) = 728325624;
        kdebug_trace();
        v102 = BYTE7(v127);
        if (SBYTE7(v127) < 0)
          v102 = *((_QWORD *)&v126 + 1);
        if (v102 >= 0x11)
        {
          v103 = &v126;
          if (SBYTE7(v127) < 0)
            v103 = (__int128 *)v126;
          v104 = *(_QWORD *)v103;
          v105 = *((_QWORD *)v103 + 1);
          v106 = *((unsigned __int8 *)v103 + 16);
          if (v104 == 0x6365722E64337663 && v105 == 0x73746174532E6E6FLL && v106 == 46)
          {
            sub_223187510();
            sub_2238EEED0(*(_QWORD **)(a1 + 208), 0, (uint64_t)&v213);
            sub_22316F8F4((uint64_t *)&v213);
          }
        }
        kdebug_trace();
        if (SBYTE7(v127) < 0)
          operator delete((void *)v126);
      }
    }
  }
}

void sub_2238BB0A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2238BB3A4(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v11[8];
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v16 = 0;
  v15 = 0;
  v17 = 0;
  v11[0] = (__int128)vdupq_n_s32(0x3CF83E10u);
  v11[1] = v11[0];
  v11[2] = v11[0];
  v11[3] = v11[0];
  v11[4] = v11[0];
  v11[5] = v11[0];
  v11[6] = v11[0];
  v11[7] = v11[0];
  v12 = 1022901776;
  v13 = 32;
  v14 = 0;
  v18 = 0;
  v19 = 1065353216;
  v20 = 0;
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  v5 = v4 << 32;
  if (!HIDWORD(v4))
    v5 = 0;
  v6 = v4 != 0;
  if ((_DWORD)v4)
    v7 = HIDWORD(v4) == 0;
  else
    v7 = 1;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5 | v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v8 = (_QWORD *)(a1 + 32);
  if (v7)
    v4 = 0;
  v21 = v4;
  v22 = v5 | v6;
  if (((180 * HIDWORD(v5)) & (180 * HIDWORD(v5) - 1)) != 0)
    v9 = 4;
  else
    v9 = 180 * HIDWORD(v5);
  sub_2232071B8(v8, &v21, (unint64_t *)&v22, 1, v11, 1, v9);
  return a1;
}

uint64_t sub_2238BB49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 __p;
  char v15;
  char v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    LOBYTE(__p) = 0;
    v16 = 0;
    sub_22329F414(a3, &__p, a5, v17);
    sub_2231AA5A4(a1, v9, (uint64_t)v17);
    v10 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v16 && v15 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

void sub_2238BB57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2241231D8((uint64_t)&a18);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2238BB5B0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *result;
  unint64_t v14;
  uint64_t v16;
  _OWORD *v18;
  float v19;
  float v20;
  _QWORD *v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34[8];
  int v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      result = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = result[1];
            if (v16 == v9)
            {
              if (result[2] == *(_QWORD *)a2 && result[3] == *(_QWORD *)(a2 + 8))
                return result;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = result[1];
          if (v14 == v9)
          {
            if (result[2] == *(_QWORD *)a2 && result[3] == *(_QWORD *)(a2 + 8))
              return result;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_31:
  v18 = *a4;
  v33 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = v9;
  *((_OWORD *)v33 + 1) = *v18;
  *((_OWORD *)v33 + 9) = 0u;
  *((_OWORD *)v33 + 10) = 0u;
  *((_OWORD *)v33 + 7) = 0u;
  *((_OWORD *)v33 + 8) = 0u;
  *((_OWORD *)v33 + 5) = 0u;
  *((_OWORD *)v33 + 6) = 0u;
  *((_OWORD *)v33 + 4) = 0u;
  *((_OWORD *)v33 + 3) = 0u;
  v39 = 0;
  v38 = 0;
  v40 = 0;
  v34[0] = (__int128)vdupq_n_s32(0x3CF83E10u);
  v34[1] = v34[0];
  v34[2] = v34[0];
  v34[3] = v34[0];
  v34[4] = v34[0];
  v34[5] = v34[0];
  v34[6] = v34[0];
  v34[7] = v34[0];
  v35 = 1022901776;
  v36 = 32;
  v37 = 0;
  v41 = 0;
  v42 = 1065353216;
  v43 = 0;
  v33[56] = 0;
  *((_QWORD *)v33 + 4) = 0;
  *((_QWORD *)v33 + 5) = 0;
  v33[48] = 0;
  v44 = 0;
  v45 = 0;
  sub_2232071B8((_QWORD *)v33 + 8, &v44, &v45, 1, v34, 1, 0);
  *(_OWORD *)(v33 + 104) = xmmword_224653918;
  *(_OWORD *)(v33 + 120) = unk_224653928;
  *(_OWORD *)(v33 + 136) = xmmword_224653938;
  *(_OWORD *)(v33 + 152) = unk_224653948;
  *((_QWORD *)v33 + 21) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v23 = v10 < 3 || (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_46;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_46:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        v22 = v33;
        if (v21)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        v22 = v33;
        if (v21)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v31 & v9;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v9));
      v22 = v33;
      if (v21)
        goto LABEL_34;
    }
LABEL_59:
    *v22 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v33;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v33)
    {
      v32 = *(_QWORD *)(*(_QWORD *)v33 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v32 >= v10)
          v32 %= v10;
      }
      else
      {
        v32 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v33;
    }
    goto LABEL_70;
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v22 = v33;
  if (!v21)
    goto LABEL_59;
LABEL_34:
  *v22 = *v21;
  *v21 = v33;
LABEL_70:
  result = v33;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2238BB9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;

  if (a10)
    sub_2238BBA0C(v10, a10);
  _Unwind_Resume(exception_object);
}

void sub_2238BBA0C(uint64_t a1, _QWORD *__p)
{
  void *v3;
  BOOL v4;
  int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[9];
    if (v3)
    {
      v4 = !*((_DWORD *)__p + 23) || *((_DWORD *)__p + 22) == 0;
      v5 = v4 ? 0 : *((_DWORD *)__p + 23);
      if (v5 * (((381774871 * (unint64_t)(__p[12] >> 34)) >> 32) >> 2) != -1)
        goto LABEL_12;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = (void *)__p[9];
      if (v3)
      {
LABEL_12:
        free(v3);
        operator delete(__p);
        return;
      }
    }
    goto LABEL_14;
  }
  if (__p)
LABEL_14:
    operator delete(__p);
}

_QWORD *sub_2238BBADC(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v18 = a1 + 2;
  v13 = operator new(0x48uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = **a4;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_DWORD *)v13 + 16) = 1065353216;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = a1[1];
    }
    if (prime > v10)
    {
LABEL_45:
      if (prime >> 61)
        sub_223174E94();
      v27 = operator new(8 * prime);
      v28 = (void *)*a1;
      *a1 = (uint64_t)v27;
      if (v28)
        operator delete(v28);
      v29 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v29++) = 0;
      while (prime != v29);
      v30 = (_QWORD *)*v18;
      if (!*v18)
        goto LABEL_77;
      v31 = v30[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*a1 + 8 * v33) = v18;
        for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v30 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v35))
          {
            *v30 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*a1 + v36);
            **(_QWORD **)(*a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v35) = v30;
            v30 = i;
            v33 = v35;
          }
        }
        goto LABEL_77;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*a1 + 8 * v31) = v18;
      v40 = (_QWORD *)*v30;
      if (!*v30)
      {
LABEL_77:
        v10 = prime;
        v43 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_78;
        goto LABEL_93;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_71;
        if (*(_QWORD *)(*a1 + 8 * v42))
        {
          *v30 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*a1 + v41);
          **(_QWORD **)(*a1 + v41) = v40;
          v40 = v30;
LABEL_71:
          v30 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_77;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v42) = v30;
          v30 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_77;
        }
      }
    }
    if (prime < v10)
    {
      v37 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v10)
      {
        if (!prime)
        {
          v44 = (void *)*a1;
          *a1 = 0;
          if (v44)
            operator delete(v44);
          v10 = 0;
          a1[1] = 0;
          v43 = -1;
          goto LABEL_93;
        }
        goto LABEL_45;
      }
      v10 = a1[1];
    }
    v43 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_78:
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v21 = *a1;
        v22 = *(_QWORD **)(*a1 + 8 * (v9 % v10));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v21 = *a1;
        v22 = *(_QWORD **)(*a1 + 8 * v9);
        if (v22)
          goto LABEL_34;
      }
      goto LABEL_94;
    }
LABEL_93:
    v4 = v43 & v9;
    v21 = *a1;
    v22 = *(_QWORD **)(*a1 + 8 * (v43 & v9));
    if (v22)
      goto LABEL_34;
    goto LABEL_94;
  }
  v21 = *a1;
  v22 = *(_QWORD **)(*a1 + 8 * v4);
  if (v22)
  {
LABEL_34:
    *v13 = *v22;
LABEL_100:
    *v22 = v13;
    goto LABEL_101;
  }
LABEL_94:
  *v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v21 + 8 * v4) = v18;
  if (*v13)
  {
    v45 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10)
        v45 %= v10;
    }
    else
    {
      v45 &= v10 - 1;
    }
    v22 = (_QWORD *)(*a1 + 8 * v45);
    goto LABEL_100;
  }
LABEL_101:
  ++a1[3];
  return v13;
}

void sub_2238BBFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2238BBFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238BBFD8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[6];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[4];
      v2[4] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_2238BC044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t prime;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  uint8x8_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v43;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  float v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v9 = *(_QWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (a2 == a3)
    {
      v10 = v9;
      if (!v9)
        goto LABEL_75;
      goto LABEL_74;
    }
    if (v9)
    {
      while (1)
      {
        prime = (size_t)(v9 + 2);
        *((_OWORD *)v9 + 1) = *(_OWORD *)v5;
        *((_DWORD *)v9 + 8) = *(_DWORD *)(v5 + 16);
        v10 = (_QWORD *)*v9;
        v11 = sub_22456636C((unsigned __int8 *)v9 + 16);
        v9[1] = v11;
        v12 = *(_QWORD *)(a1 + 8);
        if (v12)
        {
          v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            v14 = v11;
            if (v12 <= v11)
              v14 = v11 % v12;
          }
          else
          {
            v14 = (v12 - 1) & v11;
          }
          v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
          if (v15)
          {
            v16 = (_QWORD *)*v15;
            if (v16)
            {
              if (v13.u32[0] < 2uLL)
              {
                while (1)
                {
                  v20 = v16[1];
                  if (v20 == v11)
                  {
                    if (v16[2] == *(_QWORD *)prime && v16[3] == v9[3])
                      goto LABEL_69;
                  }
                  else if ((v20 & (v12 - 1)) != v14)
                  {
                    goto LABEL_32;
                  }
                  v16 = (_QWORD *)*v16;
                  if (!v16)
                    goto LABEL_32;
                }
              }
              do
              {
                v18 = v16[1];
                if (v18 == v11)
                {
                  if (v16[2] == *(_QWORD *)prime && v16[3] == v9[3])
                    goto LABEL_69;
                }
                else
                {
                  if (v18 >= v12)
                    v18 %= v12;
                  if (v18 != v14)
                    break;
                }
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
          }
        }
LABEL_32:
        v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v22 = *(float *)(a1 + 32);
        if (!v12 || (float)(v22 * (float)v12) < v21)
        {
          v23 = (v12 & (v12 - 1)) != 0;
          if (v12 < 3)
            v23 = 1;
          v24 = v23 | (2 * v12);
          v25 = vcvtps_u32_f32(v21 / v22);
          if (v24 <= v25)
            prime = v25;
          else
            prime = v24;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v12 = *(_QWORD *)(a1 + 8);
          }
          if (prime > v12)
            goto LABEL_44;
          if (prime < v12)
          {
            v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
            if (v12 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
            {
              v26 = std::__next_prime(v26);
            }
            else
            {
              v28 = 1 << -(char)__clz(v26 - 1);
              if (v26 >= 2)
                v26 = v28;
            }
            if (prime <= v26)
              prime = v26;
            if (prime < v12)
LABEL_44:
              sub_2231B0668(a1, prime);
          }
        }
        v29 = *(int8x8_t *)(a1 + 8);
        v30 = v9[1];
        v31 = (uint8x8_t)vcnt_s8(v29);
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&v29)
            v30 %= *(_QWORD *)&v29;
        }
        else
        {
          v30 &= *(_QWORD *)&v29 - 1;
        }
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
        if (v32)
        {
          *v9 = *v32;
        }
        else
        {
          *v9 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v9;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = a1 + 16;
          if (!*v9)
            goto LABEL_68;
          v33 = *(_QWORD *)(*v9 + 8);
          if (v31.u32[0] > 1uLL)
          {
            if (v33 >= *(_QWORD *)&v29)
              v33 %= *(_QWORD *)&v29;
          }
          else
          {
            v33 &= *(_QWORD *)&v29 - 1;
          }
          v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
        }
        *v32 = v9;
LABEL_68:
        ++*(_QWORD *)(a1 + 24);
LABEL_69:
        v5 += 20;
        if (v10)
        {
          v9 = v10;
          if (v5 != a3)
            continue;
        }
        goto LABEL_73;
      }
    }
    v10 = 0;
LABEL_73:
    if (v10)
    {
      do
      {
LABEL_74:
        v34 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v34;
      }
      while (v34);
    }
  }
LABEL_75:
  if (v5 != a3)
  {
    v35 = (_QWORD *)(a1 + 16);
    while (1)
    {
      v36 = sub_22456636C((unsigned __int8 *)v5);
      v37 = v36;
      v38 = *(_QWORD *)(a1 + 8);
      if (v38)
      {
        v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
        v39.i16[0] = vaddlv_u8(v39);
        if (v39.u32[0] > 1uLL)
        {
          prime = v36;
          if (v36 >= v38)
            prime = v36 % v38;
        }
        else
        {
          prime = (v38 - 1) & v36;
        }
        v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v40)
        {
          v41 = (_QWORD *)*v40;
          if (v41)
          {
            if (v39.u32[0] < 2uLL)
            {
              while (1)
              {
                v45 = v41[1];
                if (v45 == v36)
                {
                  if (v41[2] == *(_QWORD *)v5 && v41[3] == *(_QWORD *)(v5 + 8))
                    goto LABEL_142;
                }
                else if ((v45 & (v38 - 1)) != prime)
                {
                  goto LABEL_103;
                }
                v41 = (_QWORD *)*v41;
                if (!v41)
                  goto LABEL_103;
              }
            }
            do
            {
              v43 = v41[1];
              if (v43 == v36)
              {
                if (v41[2] == *(_QWORD *)v5 && v41[3] == *(_QWORD *)(v5 + 8))
                  goto LABEL_142;
              }
              else
              {
                if (v43 >= v38)
                  v43 %= v38;
                if (v43 != prime)
                  break;
              }
              v41 = (_QWORD *)*v41;
            }
            while (v41);
          }
        }
      }
LABEL_103:
      v46 = operator new(0x28uLL);
      *v46 = 0;
      v46[1] = v37;
      v47 = *(_DWORD *)(v5 + 16);
      *((_OWORD *)v46 + 1) = *(_OWORD *)v5;
      *((_DWORD *)v46 + 8) = v47;
      v48 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v49 = *(float *)(a1 + 32);
      if (v38 && (float)(v49 * (float)v38) >= v48)
        goto LABEL_131;
      v50 = (v38 & (v38 - 1)) != 0;
      if (v38 < 3)
        v50 = 1;
      v51 = v50 | (2 * v38);
      v52 = vcvtps_u32_f32(v48 / v49);
      if (v51 <= v52)
        v53 = v52;
      else
        v53 = v51;
      if (v53 == 1)
      {
        v53 = 2;
      }
      else if ((v53 & (v53 - 1)) != 0)
      {
        v53 = std::__next_prime(v53);
        v38 = *(_QWORD *)(a1 + 8);
      }
      if (v53 > v38)
        goto LABEL_115;
      if (v53 < v38)
      {
        v54 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v38 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v38), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
        {
          v54 = std::__next_prime(v54);
        }
        else
        {
          v56 = 1 << -(char)__clz(v54 - 1);
          if (v54 >= 2)
            v54 = v56;
        }
        if (v53 <= v54)
          v53 = v54;
        if (v53 < v38)
LABEL_115:
          sub_2231B0668(a1, v53);
      }
      v38 = *(_QWORD *)(a1 + 8);
      v57 = v38 - 1;
      if ((v38 & (v38 - 1)) == 0)
      {
        prime = v57 & v37;
        v58 = *(_QWORD *)a1;
        v59 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v57 & v37));
        if (v59)
          goto LABEL_132;
        goto LABEL_134;
      }
      if (v37 < v38)
        break;
      prime = v37 % v38;
      v58 = *(_QWORD *)a1;
      v59 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v37 % v38));
      if (v59)
      {
LABEL_132:
        *v46 = *v59;
        goto LABEL_140;
      }
LABEL_134:
      *v46 = *v35;
      *v35 = v46;
      *(_QWORD *)(v58 + 8 * prime) = v35;
      if (!*v46)
        goto LABEL_141;
      v60 = *(_QWORD *)(*v46 + 8);
      if ((v38 & (v38 - 1)) != 0)
      {
        if (v60 >= v38)
          v60 %= v38;
      }
      else
      {
        v60 &= v38 - 1;
      }
      v59 = (_QWORD *)(*(_QWORD *)a1 + 8 * v60);
LABEL_140:
      *v59 = v46;
LABEL_141:
      ++*(_QWORD *)(a1 + 24);
LABEL_142:
      v5 += 20;
      if (v5 == a3)
        return;
    }
    prime = v37;
LABEL_131:
    v58 = *(_QWORD *)a1;
    v59 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
    if (v59)
      goto LABEL_132;
    goto LABEL_134;
  }
}

void sub_2238BC67C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238BC690(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2238BC6B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *sub_2238BC6C4(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v5 = 0x1555555555555555;
  v6 = *(_QWORD ***)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) > v9)
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v5 = v9;
  if (v5)
  {
    LODWORD(v25) = v5;
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v23 = &v25;
    v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC5C2A8[v13])(&v23, a1 + 24);
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (_DWORD *)(v14 + 12 * v8);
  *v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  v17 = v16 + 3;
  if ((_QWORD **)v7 != v6)
  {
    do
    {
      v18 = *(_QWORD *)(v7 - 12);
      v7 -= 12;
      v19 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((_QWORD **)v7 != v6);
    v6 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    v23 = v6;
    v24 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v6) >> 2);
    v21 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v25 = &v23;
    ((void (*)(_QWORD **, uint64_t))off_24EC5C298[v21])(&v25, a1 + 24);
  }
  return v17;
}

void sub_2238BC864(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  float32x2_t *v11;
  float32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v25;
  uint64_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35[5];
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  _BOOL4 v42;

  if ((a4 & 1) != 0)
  {
    v11 = (float32x2_t *)operator new(0x240uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = (float32x2_t)&off_24EC20F48;
    v12 = v11 + 3;
    sub_2231CBABC(&v11[3], a3, a5);
    *a6 = (uint64_t *)&v11[3];
    a6[1] = (uint64_t *)v11;
    v13 = sub_2231D0224((uint64_t)a2);
    sub_2231D022C(a2, (uint64_t)&v31);
    v14 = sub_2231D0224((uint64_t)v12);
    sub_2231D0324(v12, (uint64_t)&v27);
    v35[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v27.f32[0]), v32, *(float32x2_t *)v27.f32, 1), v33, v27, 2), v34, v27, 3);
    v35[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v28.f32[0]), v32, *(float32x2_t *)v28.f32, 1), v33, v28, 2), v34, v28, 3);
    v35[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v29.f32[0]), v32, *(float32x2_t *)v29.f32, 1), v33, v29, 2), v34, v29, 3);
    v35[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v30.f32[0]), v32, *(float32x2_t *)v30.f32, 1), v33, v30, 2), v34, v30, 3);
    __asm { FMOV            V0.4S, #1.0 }
    v35[4] = _Q0;
    v19 = *(unsigned int *)(v13 + 88);
    v20 = *(unsigned int *)(v13 + 92);
    v21 = *(unsigned int *)(v14 + 88);
    v22 = *(unsigned int *)(v14 + 92);
    v36 = v19 | (v20 << 32);
    v37 = v21 | (v22 << 32);
    v38 = -1025;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v25 = *(float *)(v13 + 16) != *(float *)(v14 + 16)
       || *(float *)(v13 + 20) != *(float *)(v14 + 20)
       || *(float *)(v13 + 24) != *(float *)(v14 + 24)
       || *(float *)(v13 + 28) != *(float *)(v14 + 28)
       || (_DWORD)v19 != (_DWORD)v21
       || (_DWORD)v20 != (_DWORD)v22;
    v42 = v25;
    sub_2237EE6AC(a1, v35, (uint64_t)a2, (uint64_t *)v12, a5);
  }
  else
  {
    v26 = (uint64_t *)operator new(0x240uLL);
    v26[1] = 0;
    v26[2] = 0;
    *v26 = (uint64_t)&off_24EC20F48;
    *a6 = sub_2231D0CD4(v26 + 3, (uint64_t)a2);
    a6[1] = v26;
  }
}

void sub_2238BCA40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2238BCA58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238BCA6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2238BCA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238BCA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2238BCAAC(uint64_t a1)
{
  unsigned __int8 *v2;
  _QWORD **v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[24];
  unsigned __int8 *v12[2];
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;

  v9 = 0;
  v10 = 0;
  v8 = &v9;
  v3 = (_QWORD **)(a1 + 24);
  v2 = *(unsigned __int8 **)(a1 + 24);
  v4 = *(unsigned __int8 **)a1;
  v15 = (unsigned __int8 *)(a1 + 32);
  v16 = v2;
  v14 = v4;
  v12[1] = (unsigned __int8 *)&v9;
  v13 = (unsigned __int8 *)(a1 + 8);
  v12[0] = (unsigned __int8 *)&v8;
  sub_2238C59A4(&v16, &v15, &v14, &v13, v12, (uint64_t)v11);
  v5 = v10;
  v6 = *(_QWORD *)(a1 + 40);
  if (v3 != &v8 && v10 != v6)
    sub_223475EB0((uint64_t)v3, v8, &v9);
  sub_223198030((uint64_t)&v8, v9);
  return v5 != v6;
}

void sub_2238BCB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_223198030((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_2238BCB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_223198030((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_2238BCBA4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __n128 *v26;
  _BYTE *v27;
  size_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  std::mutex *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __n128 *v43;
  _BYTE *v44;
  size_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  std::mutex *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __n128 *v60;
  _BYTE *v61;
  size_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  std::mutex *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __n128 *v77;
  _BYTE *v78;
  size_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  std::mutex *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __n128 *v95;
  _BYTE *v96;
  size_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  double v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  std::mutex *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  __n128 *v117;
  _BYTE *v118;
  size_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  std::mutex *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  __n128 *v134;
  _BYTE *v135;
  size_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  std::mutex *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  __n128 *v154;
  _BYTE *v155;
  size_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  double v159;
  uint64_t v160;
  unsigned __int8 v161;
  char *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  std::mutex *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  __n128 *v177;
  _BYTE *v178;
  size_t v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  std::mutex *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  __n128 *v196;
  _BYTE *v197;
  size_t v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  std::mutex *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  __n128 *v215;
  _BYTE *v216;
  size_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  std::mutex *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  unint64_t v226;
  void **v227;
  void *v228;
  void *v229;
  int v230;
  __n128 *v233;
  void **v234;
  size_t v235;
  uint64_t v236;
  _BYTE *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  std::mutex *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  void **v247;
  void *v248;
  void *v249;
  int v250;
  __n128 *v253;
  void **v254;
  size_t v255;
  unsigned __int8 v256;
  uint64_t v257;
  unsigned __int8 v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  std::mutex *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  unint64_t v269;
  void **v270;
  void *v271;
  void *v272;
  int v273;
  __n128 *v276;
  void **v277;
  size_t v278;
  unsigned __int8 v279;
  uint64_t v280;
  unsigned __int8 v281;
  uint64_t v282;
  _BYTE *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  std::mutex *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  __n128 *v298;
  _BYTE *v299;
  size_t v300;
  unsigned __int8 v301;
  unint64_t v302;
  unsigned __int8 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  std::mutex *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _BYTE *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  __n128 *v322;
  _BYTE *v323;
  size_t v324;
  uint64_t v325;
  _BYTE *v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  std::mutex *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  _BYTE *v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  __n128 *v341;
  _BYTE *v342;
  size_t v343;
  unsigned __int8 v344;
  uint64_t v345;
  unsigned __int8 v346;
  uint64_t v347;
  _BYTE *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  std::mutex *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  unint64_t v357;
  void **v358;
  void *v359;
  void *v360;
  int v361;
  __n128 *v364;
  void **v365;
  size_t v366;
  unsigned __int8 v367;
  uint64_t v368;
  unsigned __int8 v369;
  uint64_t v370;
  _BYTE *v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  std::mutex *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  _BYTE *v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  __n128 *v386;
  _BYTE *v387;
  size_t v388;
  unsigned __int8 v389;
  uint64_t v390;
  unsigned __int8 v391;
  uint64_t v392;
  _BYTE *v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  std::mutex *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  _BYTE *v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  __n128 *v408;
  _BYTE *v409;
  size_t v410;
  uint64_t v411;
  _BYTE *v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;
  std::mutex *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  _BYTE *v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  __n128 *v427;
  _BYTE *v428;
  size_t v429;
  char *v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  std::mutex *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  void **v440;
  void *v441;
  void *v442;
  int v443;
  __n128 *v446;
  void **v447;
  size_t v448;
  unsigned __int8 v449;
  double v450;
  unsigned __int8 v451;
  double v452;
  uint64_t v453;
  _BYTE *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  std::mutex *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  unint64_t v463;
  void **v464;
  void *v465;
  void *v466;
  int v467;
  __n128 *v470;
  void **v471;
  size_t v472;
  char *v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  std::mutex *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  _BYTE *v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  __n128 *v488;
  _BYTE *v489;
  size_t v490;
  uint64_t v491;
  _BYTE *v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  std::mutex *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  _BYTE *v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  __n128 *v507;
  _BYTE *v508;
  size_t v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  std::mutex *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  int v517;
  char v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  std::mutex *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  std::mutex *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  char v534;
  unsigned __int8 *v535;
  unint64_t v536;
  uint64_t (**v537)();
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  uint64_t v559;
  __int128 v560;
  __int128 v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  std::mutex *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  std::string::size_type v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  std::string::size_type v573;
  unint64_t v574;
  void **v575;
  void *v576;
  void *v577;
  int v578;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  void *v584;
  int v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  std::mutex *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t *v596;
  uint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *p_shared_owners;
  unint64_t v600;
  __int128 v601;
  unint64_t *v602;
  unint64_t v603;
  unint64_t *v604;
  unint64_t v605;
  std::__shared_weak_count *v606;
  unint64_t *v607;
  unint64_t v608;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  std::mutex *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  std::string::size_type v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  std::string::size_type v631;
  unint64_t v632;
  void **v633;
  void *v634;
  void *v635;
  int v636;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  void *v642;
  int v643;
  uint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  std::mutex *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  std::__shared_weak_count *v652;
  uint64_t *v653;
  uint64_t *v654;
  uint64_t v655;
  std::__shared_weak_count *v656;
  unint64_t *v657;
  unint64_t v658;
  __int128 v659;
  unint64_t *v660;
  unint64_t v661;
  unint64_t *v662;
  unint64_t v663;
  std::__shared_weak_count *v664;
  unint64_t *v665;
  unint64_t v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  std::__shared_weak_count *v670;
  unint64_t *v671;
  unint64_t v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  unint64_t *v678;
  unint64_t v679;
  float32x4_t v680;
  unsigned int v681;
  float v682;
  unsigned __int8 *v683;
  unsigned __int8 *v684;
  unint64_t v685;
  uint64_t v686;
  __int8 *v687;
  unint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  std::string::size_type v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  std::mutex *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t *v707;
  unint64_t v708;
  _BYTE *v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  unint64_t v722;
  unint64_t v723;
  unint64_t v724;
  unint64_t v725;
  unint64_t v726;
  unint64_t v727;
  unint64_t v728;
  unint64_t v729;
  unint64_t v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  unint64_t v734;
  unint64_t v735;
  unint64_t v736;
  unint64_t v737;
  _BYTE *v738;
  uint64_t *v739;
  unsigned __int8 *v740;
  float32x4_t v742;
  unint64_t v743;
  unint64_t v744;
  unsigned __int8 *v745;
  std::string v746;
  char v747;
  std::string v748;
  char v749;
  void *v750[2];
  __int128 v751;
  int v752;
  std::string v753;
  std::string v754;
  char v755;
  std::string __dst;
  char v757;
  _BYTE v758[32];
  __int128 v759;
  __int128 v760;
  std::string v761;
  __int128 v762;
  unint64_t v763;
  unsigned __int8 *v764;
  std::string v765;
  std::string v766;
  __int128 v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  __int128 v771;
  std::string v772;
  std::string v773;
  char v774;
  _BYTE __p[32];
  __int128 v776;
  __int128 v777;
  int v778;
  _DWORD v779[42];
  unint64_t v780[4];
  int v781;
  unint64_t v782[4];
  int v783;
  _QWORD v784[4];
  int v785;
  uint64_t (**v786)();
  __int128 v787;
  std::string *v788;
  _BYTE v789[40];
  void *v790;
  char v791;
  void *v792;
  char *v793;
  uint64_t *v794;
  uint64_t *v795;
  uint64_t *v796;
  uint64_t *v797;
  void *v798;
  char *v799;
  void *__src;
  char *v801;
  unsigned __int8 *v802;
  unsigned __int8 *v803;
  uint64_t v804;

  v804 = *MEMORY[0x24BDAC8D0];
  v770 = 0;
  v769 = 0;
  v768 = 0;
  *(_QWORD *)&v789[16] = 0;
  *(_QWORD *)&v789[8] = 0;
  *(_QWORD *)v789 = &v789[8];
  sub_2245314F4(v789, __p);
  v767 = *(_OWORD *)__p;
  sub_22323DF84((uint64_t)v789, *(char **)&v789[8]);
  v3 = *(_QWORD *)(a1 + 1872);
  v4 = *(_QWORD *)(a1 + 1880);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_BYTE *)(v3 + 240);
      if ((v11 & 1) != 0)
      {
        HIDWORD(v770) = ++v5;
        if ((v11 & 4) == 0)
        {
LABEL_6:
          if ((v11 & 8) == 0)
            goto LABEL_7;
          goto LABEL_13;
        }
      }
      else if ((*(_BYTE *)(v3 + 240) & 4) == 0)
      {
        goto LABEL_6;
      }
      HIDWORD(v769) = ++v6;
      if ((v11 & 8) == 0)
      {
LABEL_7:
        if ((v11 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_14;
      }
LABEL_13:
      LODWORD(v770) = ++v7;
      if ((v11 & 0x10) == 0)
      {
LABEL_8:
        if ((v11 & 0x20) == 0)
          goto LABEL_9;
        goto LABEL_15;
      }
LABEL_14:
      LODWORD(v769) = ++v8;
      if ((v11 & 0x20) == 0)
      {
LABEL_9:
        if ((v11 & 2) != 0)
          goto LABEL_16;
        goto LABEL_3;
      }
LABEL_15:
      HIDWORD(v768) = ++v9;
      if ((v11 & 2) != 0)
LABEL_16:
        LODWORD(v768) = ++v10;
LABEL_3:
      v3 += 248;
    }
    while (v3 != v4);
  }
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v12 = sub_2241471F8();
    v13 = v12[2];
    if (!v13)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = v12[2];
    }
    v14 = *(_QWORD *)(v13 + 64);
    v15 = (std::mutex *)(v14 + 32);
    std::mutex::lock((std::mutex *)(v14 + 32));
    v17 = *(_QWORD *)(v14 + 96);
    v16 = *(_QWORD *)(v14 + 104);
    std::mutex::unlock(v15);
    if (v17 != v16)
    {
      sub_2241471F8();
      v18 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        *(_QWORD *)v758 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 2528) - *(_QWORD *)(a1 + 2520)) >> 3);
        sub_223875FE8((double *)&qword_255788F20, v18, (uint64_t *)v758, "nearby");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v19 = __p[23];
  if (__p[23] < 0)
    v19 = *(_QWORD *)&__p[8];
  if (v19 >= 0x11)
  {
    v20 = __p;
    if (__p[23] < 0)
      v20 = *(_BYTE **)__p;
    v21 = *(_QWORD *)v20;
    v22 = *((_QWORD *)v20 + 1);
    v23 = v20[16];
    if (v21 == 0x6365722E64337663 && v22 == 0x73746174532E6E6FLL && v23 == 46)
    {
      v26 = sub_223187510();
      if (__p[23] >= 0)
        v27 = __p;
      else
        v27 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v28 = __p[23];
      else
        v28 = *(_QWORD *)&__p[8];
      *(_QWORD *)v758 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 2528) - *(_QWORD *)(a1 + 2520)) >> 3);
      sub_22318760C((uint64_t *)v26, v27, v28, (uint64_t *)v758, (uint64_t)"nearby", 6);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v29 = sub_2241471F8();
    v30 = v29[2];
    if (!v30)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v30 = v29[2];
    }
    v31 = *(_QWORD *)(v30 + 64);
    v32 = (std::mutex *)(v31 + 32);
    std::mutex::lock((std::mutex *)(v31 + 32));
    v34 = *(_QWORD *)(v31 + 96);
    v33 = *(_QWORD *)(v31 + 104);
    std::mutex::unlock(v32);
    if (v34 != v33)
    {
      sub_2241471F8();
      v35 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        *(_QWORD *)v758 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 1880) - *(_QWORD *)(a1 + 1872)) >> 3);
        sub_223189CA8((double *)&qword_255788F20, v35, (uint64_t *)v758, "updated");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v36 = __p[23];
  if (__p[23] < 0)
    v36 = *(_QWORD *)&__p[8];
  if (v36 >= 0x11)
  {
    v37 = __p;
    if (__p[23] < 0)
      v37 = *(_BYTE **)__p;
    v38 = *(_QWORD *)v37;
    v39 = *((_QWORD *)v37 + 1);
    v40 = v37[16];
    if (v38 == 0x6365722E64337663 && v39 == 0x73746174532E6E6FLL && v40 == 46)
    {
      v43 = sub_223187510();
      if (__p[23] >= 0)
        v44 = __p;
      else
        v44 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v45 = __p[23];
      else
        v45 = *(_QWORD *)&__p[8];
      *(_QWORD *)v758 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 1880) - *(_QWORD *)(a1 + 1872)) >> 3);
      sub_22318760C((uint64_t *)v43, v44, v45, (uint64_t *)v758, (uint64_t)"updated", 7);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v46 = sub_2241471F8();
    v47 = v46[2];
    if (!v47)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v47 = v46[2];
    }
    v48 = *(_QWORD *)(v47 + 64);
    v49 = (std::mutex *)(v48 + 32);
    std::mutex::lock((std::mutex *)(v48 + 32));
    v51 = *(_QWORD *)(v48 + 96);
    v50 = *(_QWORD *)(v48 + 104);
    std::mutex::unlock(v49);
    if (v51 != v50)
    {
      sub_2241471F8();
      v52 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238182BC((double *)&qword_255788F20, v52, (int *)&v770 + 1, "new");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v53 = __p[23];
  if (__p[23] < 0)
    v53 = *(_QWORD *)&__p[8];
  if (v53 >= 0x11)
  {
    v54 = __p;
    if (__p[23] < 0)
      v54 = *(_BYTE **)__p;
    v55 = *(_QWORD *)v54;
    v56 = *((_QWORD *)v54 + 1);
    v57 = v54[16];
    if (v55 == 0x6365722E64337663 && v56 == 0x73746174532E6E6FLL && v57 == 46)
    {
      v60 = sub_223187510();
      if (__p[23] >= 0)
        v61 = __p;
      else
        v61 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v62 = __p[23];
      else
        v62 = *(_QWORD *)&__p[8];
      sub_223532E4C(v60, v61, v62, (unsigned int *)&v770 + 1, (uint64_t)"new", 3);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v63 = sub_2241471F8();
    v64 = v63[2];
    if (!v64)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v64 = v63[2];
    }
    v65 = *(_QWORD *)(v64 + 64);
    v66 = (std::mutex *)(v65 + 32);
    std::mutex::lock((std::mutex *)(v65 + 32));
    v68 = *(_QWORD *)(v65 + 96);
    v67 = *(_QWORD *)(v65 + 104);
    std::mutex::unlock(v66);
    if (v68 != v67)
    {
      sub_2241471F8();
      v69 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_22356511C((double *)&qword_255788F20, v69, (int *)&v770, "content");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v70 = __p[23];
  if (__p[23] < 0)
    v70 = *(_QWORD *)&__p[8];
  if (v70 >= 0x11)
  {
    v71 = __p;
    if (__p[23] < 0)
      v71 = *(_BYTE **)__p;
    v72 = *(_QWORD *)v71;
    v73 = *((_QWORD *)v71 + 1);
    v74 = v71[16];
    if (v72 == 0x6365722E64337663 && v73 == 0x73746174532E6E6FLL && v74 == 46)
    {
      v77 = sub_223187510();
      if (__p[23] >= 0)
        v78 = __p;
      else
        v78 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v79 = __p[23];
      else
        v79 = *(_QWORD *)&__p[8];
      sub_223532E4C(v77, v78, v79, (unsigned int *)&v770, (uint64_t)"content", 7);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v758);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v80 = sub_2241471F8();
    v81 = v80[2];
    if (!v81)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v81 = v80[2];
    }
    v82 = *(_QWORD *)(v81 + 64);
    v83 = (std::mutex *)(v82 + 32);
    std::mutex::lock((std::mutex *)(v82 + 32));
    v85 = *(_QWORD *)(v82 + 96);
    v84 = *(_QWORD *)(v82 + 104);
    std::mutex::unlock(v83);
    if (v85 != v84)
    {
      sub_2241471F8();
      v86 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v86 + 24))(v86))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v86 + 24))(v86))
        {
          __p[23] = 4;
          strcpy(__p, "pose");
          v750[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v750[1] = (void *)2;
          v87 = sub_2241471F8();
          sub_22356F6DC((uint64_t)v87, v86, (int *)&v769 + 1, (uint64_t)__p, (__int128 *)v750);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v88 = v758[23];
  if (v758[23] < 0)
    v88 = *(_QWORD *)&v758[8];
  if (v88 >= 0x11)
  {
    v89 = v758;
    if (v758[23] < 0)
      v89 = *(_BYTE **)v758;
    v90 = *(_QWORD *)v89;
    v91 = *((_QWORD *)v89 + 1);
    v92 = v89[16];
    if (v90 == 0x6365722E64337663 && v91 == 0x73746174532E6E6FLL && v92 == 46)
    {
      v95 = sub_223187510();
      if (v758[23] >= 0)
        v96 = v758;
      else
        v96 = *(_BYTE **)v758;
      if (v758[23] >= 0)
        v97 = v758[23];
      else
        v97 = *(_QWORD *)&v758[8];
      sub_223532E4C(v95, v96, v97, (unsigned int *)&v769 + 1, (uint64_t)"pose", 4);
    }
  }
  kdebug_trace();
  if ((v758[23] & 0x80000000) != 0)
    operator delete(*(void **)v758);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  v98 = mach_absolute_time();
  v99 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v719) = *(_DWORD *)&__p[4];
    LODWORD(v718) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v718 / (double)v719;
    __cxa_guard_release(&qword_255795560);
  }
  v100 = *(double *)&qword_255795558;
  v101 = HIDWORD(v769);
  v102 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  sub_2238C5DB0((uint64_t)&qword_25578BBD0, v101, (double)(uint64_t)llround(v100 * (double)v98) / 1000000000.0);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v103 = sub_2241471F8();
    v104 = v103[2];
    if (!v104)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v104 = v103[2];
    }
    v105 = *(_QWORD *)(v104 + 64);
    v106 = (std::mutex *)(v105 + 32);
    std::mutex::lock((std::mutex *)(v105 + 32));
    v108 = *(_QWORD *)(v105 + 96);
    v107 = *(_QWORD *)(v105 + 104);
    std::mutex::unlock(v106);
    if (v108 != v107)
    {
      sub_2241471F8();
      v109 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v109 + 24))(v109))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_223875EAC((double *)&qword_255788F20, v109, (int *)&v769, "external");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v110 = __p[23];
  if (__p[23] < 0)
    v110 = *(_QWORD *)&__p[8];
  if (v110 >= 0x11)
  {
    v111 = __p;
    if (__p[23] < 0)
      v111 = *(_BYTE **)__p;
    v112 = *(_QWORD *)v111;
    v113 = *((_QWORD *)v111 + 1);
    v114 = v111[16];
    if (v112 == 0x6365722E64337663 && v113 == 0x73746174532E6E6FLL && v114 == 46)
    {
      v117 = sub_223187510();
      if (__p[23] >= 0)
        v118 = __p;
      else
        v118 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v119 = __p[23];
      else
        v119 = *(_QWORD *)&__p[8];
      sub_223532E4C(v117, v118, v119, (unsigned int *)&v769, (uint64_t)"external", 8);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v120 = sub_2241471F8();
    v121 = v120[2];
    if (!v121)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v121 = v120[2];
    }
    v122 = *(_QWORD *)(v121 + 64);
    v123 = (std::mutex *)(v122 + 32);
    std::mutex::lock((std::mutex *)(v122 + 32));
    v125 = *(_QWORD *)(v122 + 96);
    v124 = *(_QWORD *)(v122 + 104);
    std::mutex::unlock(v123);
    if (v125 != v124)
    {
      sub_2241471F8();
      v126 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_22356511C((double *)&qword_255788F20, v126, (int *)&v768 + 1, "deleted");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v127 = __p[23];
  if (__p[23] < 0)
    v127 = *(_QWORD *)&__p[8];
  if (v127 >= 0x11)
  {
    v128 = __p;
    if (__p[23] < 0)
      v128 = *(_BYTE **)__p;
    v129 = *(_QWORD *)v128;
    v130 = *((_QWORD *)v128 + 1);
    v131 = v128[16];
    if (v129 == 0x6365722E64337663 && v130 == 0x73746174532E6E6FLL && v131 == 46)
    {
      v134 = sub_223187510();
      if (__p[23] >= 0)
        v135 = __p;
      else
        v135 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v136 = __p[23];
      else
        v136 = *(_QWORD *)&__p[8];
      sub_223532E4C(v134, v135, v136, (unsigned int *)&v768 + 1, (uint64_t)"deleted", 7);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v137 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v721) = *(_DWORD *)&__p[4];
    LODWORD(v720) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v720 / (double)v721;
    __cxa_guard_release(&qword_255795560);
  }
  v138 = HIDWORD(v768);
  v139 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  sub_2238C6A98((uint64_t)&qword_25578BBD0, v138);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&v789[24] = 29;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v140 = sub_2241471F8();
    v141 = v140[2];
    if (!v141)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v141 = v140[2];
    }
    v142 = *(_QWORD *)(v141 + 64);
    v143 = (std::mutex *)(v142 + 32);
    std::mutex::lock((std::mutex *)(v142 + 32));
    v145 = *(_QWORD *)(v142 + 96);
    v144 = *(_QWORD *)(v142 + 104);
    std::mutex::unlock(v143);
    if (v145 != v144)
    {
      sub_2241471F8();
      v146 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v146 + 24))(v146))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_223875D70((double *)&qword_255788F20, v146, (int *)&v768, "relocalized");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v147 = __p[23];
  if (__p[23] < 0)
    v147 = *(_QWORD *)&__p[8];
  if (v147 >= 0x11)
  {
    v148 = __p;
    if (__p[23] < 0)
      v148 = *(_BYTE **)__p;
    v149 = *(_QWORD *)v148;
    v150 = *((_QWORD *)v148 + 1);
    v151 = v148[16];
    if (v149 == 0x6365722E64337663 && v150 == 0x73746174532E6E6FLL && v151 == 46)
    {
      v154 = sub_223187510();
      if (__p[23] >= 0)
        v155 = __p;
      else
        v155 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v156 = __p[23];
      else
        v156 = *(_QWORD *)&__p[8];
      sub_223532E4C(v154, v155, v156, (unsigned int *)&v768, (uint64_t)"relocalized", 11);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  v157 = mach_absolute_time();
  v158 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v723) = *(_DWORD *)&__p[4];
    LODWORD(v722) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v722 / (double)v723;
    __cxa_guard_release(&qword_255795560);
  }
  v159 = *(double *)&qword_255795558;
  v160 = v768;
  v161 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  sub_2238C6F64((uint64_t)&qword_25578BBD0, v160, (double)(uint64_t)llround(v159 * (double)v157) / 1000000000.0);
  kdebug_trace();
  v162 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v162;
  *(_OWORD *)&__p[8] = xmmword_2245B8D50;
  strcpy(v162, "Stats.Keyframing.disk_count");
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = v162;
  *(_QWORD *)&v789[24] = 27;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v758);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v163 = sub_2241471F8();
    v164 = v163[2];
    if (!v164)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v164 = v163[2];
    }
    v165 = *(_QWORD *)(v164 + 64);
    v166 = (std::mutex *)(v165 + 32);
    std::mutex::lock((std::mutex *)(v165 + 32));
    v168 = *(_QWORD *)(v165 + 96);
    v167 = *(_QWORD *)(v165 + 104);
    std::mutex::unlock(v166);
    if (v168 != v167)
    {
      sub_2241471F8();
      v169 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v169 + 24))(v169))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238C5124((double *)&qword_255788F20, v169, (int *)(a1 + 1928), "saved");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v170 = v758[23];
  if (v758[23] < 0)
    v170 = *(_QWORD *)&v758[8];
  if (v170 >= 0x11)
  {
    v171 = v758;
    if (v758[23] < 0)
      v171 = *(_BYTE **)v758;
    v172 = *(_QWORD *)v171;
    v173 = *((_QWORD *)v171 + 1);
    v174 = v171[16];
    if (v172 == 0x6365722E64337663 && v173 == 0x73746174532E6E6FLL && v174 == 46)
    {
      v177 = sub_223187510();
      if (v758[23] >= 0)
        v178 = v758;
      else
        v178 = *(_BYTE **)v758;
      if (v758[23] >= 0)
        v179 = v758[23];
      else
        v179 = *(_QWORD *)&v758[8];
      sub_223532E4C(v177, v178, v179, (unsigned int *)(a1 + 1928), (uint64_t)"saved", 5);
    }
  }
  kdebug_trace();
  if ((v758[23] & 0x80000000) != 0)
    operator delete(*(void **)v758);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v180 = __p[23];
  v181 = __p;
  if (__p[23] < 0)
  {
    v181 = *(_BYTE **)__p;
    v180 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v789[16] = v181;
  *(_QWORD *)&v789[24] = v180;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v758);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v182 = sub_2241471F8();
    v183 = v182[2];
    if (!v183)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v183 = v182[2];
    }
    v184 = *(_QWORD *)(v183 + 64);
    v185 = (std::mutex *)(v184 + 32);
    std::mutex::lock((std::mutex *)(v184 + 32));
    v187 = *(_QWORD *)(v184 + 96);
    v186 = *(_QWORD *)(v184 + 104);
    std::mutex::unlock(v185);
    if (v187 != v186)
    {
      sub_2241471F8();
      v188 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v188 + 24))(v188))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238C5260((double *)&qword_255788F20, v188, (int *)(a1 + 1932), "loaded");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v189 = v758[23];
  if (v758[23] < 0)
    v189 = *(_QWORD *)&v758[8];
  if (v189 >= 0x11)
  {
    v190 = v758;
    if (v758[23] < 0)
      v190 = *(_BYTE **)v758;
    v191 = *(_QWORD *)v190;
    v192 = *((_QWORD *)v190 + 1);
    v193 = v190[16];
    if (v191 == 0x6365722E64337663 && v192 == 0x73746174532E6E6FLL && v193 == 46)
    {
      v196 = sub_223187510();
      if (v758[23] >= 0)
        v197 = v758;
      else
        v197 = *(_BYTE **)v758;
      if (v758[23] >= 0)
        v198 = v758[23];
      else
        v198 = *(_QWORD *)&v758[8];
      sub_223532E4C(v196, v197, v198, (unsigned int *)(a1 + 1932), (uint64_t)"loaded", 6);
    }
  }
  kdebug_trace();
  if ((v758[23] & 0x80000000) != 0)
    operator delete(*(void **)v758);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v199 = __p[23];
  v200 = __p;
  if (__p[23] < 0)
  {
    v200 = *(_BYTE **)__p;
    v199 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v789[16] = v200;
  *(_QWORD *)&v789[24] = v199;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v758);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v201 = sub_2241471F8();
    v202 = v201[2];
    if (!v202)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v202 = v201[2];
    }
    v203 = *(_QWORD *)(v202 + 64);
    v204 = (std::mutex *)(v203 + 32);
    std::mutex::lock((std::mutex *)(v203 + 32));
    v206 = *(_QWORD *)(v203 + 96);
    v205 = *(_QWORD *)(v203 + 104);
    std::mutex::unlock(v204);
    if (v206 != v205)
    {
      sub_2241471F8();
      v207 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v207 + 24))(v207))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238C539C((double *)&qword_255788F20, v207, (int *)(a1 + 1936), "persisted");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v208 = v758[23];
  if (v758[23] < 0)
    v208 = *(_QWORD *)&v758[8];
  if (v208 >= 0x11)
  {
    v209 = v758;
    if (v758[23] < 0)
      v209 = *(_BYTE **)v758;
    v210 = *(_QWORD *)v209;
    v211 = *((_QWORD *)v209 + 1);
    v212 = v209[16];
    if (v210 == 0x6365722E64337663 && v211 == 0x73746174532E6E6FLL && v212 == 46)
    {
      v215 = sub_223187510();
      if (v758[23] >= 0)
        v216 = v758;
      else
        v216 = *(_BYTE **)v758;
      if (v758[23] >= 0)
        v217 = v758[23];
      else
        v217 = *(_QWORD *)&v758[8];
      sub_223532E4C(v215, v216, v217, (unsigned int *)(a1 + 1936), (uint64_t)"persisted", 9);
    }
  }
  kdebug_trace();
  if ((v758[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v758);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_349;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_349;
  }
  operator delete(*(void **)__p);
LABEL_349:
  strcpy(v758, "Stats.Keyframing.count");
  v758[23] = 22;
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = v758;
  *(_QWORD *)&v789[24] = 22;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v218 = sub_2241471F8();
    v219 = v218[2];
    if (!v219)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v219 = v218[2];
    }
    v220 = *(_QWORD *)(v219 + 64);
    v221 = (std::mutex *)(v220 + 32);
    std::mutex::lock((std::mutex *)(v220 + 32));
    v223 = *(_QWORD *)(v220 + 96);
    v222 = *(_QWORD *)(v220 + 104);
    std::mutex::unlock(v221);
    if (v223 != v222)
    {
      sub_2241471F8();
      v224 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v224 + 24))(v224))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v224 + 24))(v224))
        {
          __p[23] = 9;
          strcpy(__p, "keyframes");
          v773.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v773.__r_.__value_.__l.__size_ = 2;
          v225 = sub_2241471F8();
          sub_223663E94((uint64_t)v225, v224, (uint64_t *)(a1 + 1944), (uint64_t)__p, (__int128 *)&v773);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v226 = BYTE7(v751);
  if (SBYTE7(v751) < 0)
    v226 = (unint64_t)v750[1];
  if (v226 >= 0x11)
  {
    v227 = v750;
    if (SBYTE7(v751) < 0)
      v227 = (void **)v750[0];
    v228 = *v227;
    v229 = v227[1];
    v230 = *((unsigned __int8 *)v227 + 16);
    if (v228 == (void *)0x6365722E64337663 && v229 == (void *)0x73746174532E6E6FLL && v230 == 46)
    {
      v233 = sub_223187510();
      if ((SBYTE7(v751) & 0x80u) == 0)
        v234 = v750;
      else
        v234 = (void **)v750[0];
      if ((SBYTE7(v751) & 0x80u) == 0)
        v235 = BYTE7(v751);
      else
        v235 = (size_t)v750[1];
      sub_22318760C((uint64_t *)v233, v234, v235, (uint64_t *)(a1 + 1944), (uint64_t)"keyframes", 9);
    }
  }
  kdebug_trace();
  if (SBYTE7(v751) < 0)
    operator delete(v750[0]);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v236 = v758[23];
  v237 = v758;
  if (v758[23] < 0)
  {
    v237 = *(_BYTE **)v758;
    v236 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v237;
  *(_QWORD *)&v789[24] = v236;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v238 = sub_2241471F8();
    v239 = v238[2];
    if (!v239)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v239 = v238[2];
    }
    v240 = *(_QWORD *)(v239 + 64);
    v241 = (std::mutex *)(v240 + 32);
    std::mutex::lock((std::mutex *)(v240 + 32));
    v243 = *(_QWORD *)(v240 + 96);
    v242 = *(_QWORD *)(v240 + 104);
    std::mutex::unlock(v241);
    if (v243 != v242)
    {
      sub_2241471F8();
      v244 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v244 + 24))(v244))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v244 + 24))(v244))
        {
          __p[23] = 6;
          strcpy(__p, "shared");
          v773.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v773.__r_.__value_.__l.__size_ = 2;
          v245 = sub_2241471F8();
          sub_223663E94((uint64_t)v245, v244, (uint64_t *)(a1 + 1952), (uint64_t)__p, (__int128 *)&v773);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v246 = BYTE7(v751);
  if (SBYTE7(v751) < 0)
    v246 = (unint64_t)v750[1];
  if (v246 >= 0x11)
  {
    v247 = v750;
    if (SBYTE7(v751) < 0)
      v247 = (void **)v750[0];
    v248 = *v247;
    v249 = v247[1];
    v250 = *((unsigned __int8 *)v247 + 16);
    if (v248 == (void *)0x6365722E64337663 && v249 == (void *)0x73746174532E6E6FLL && v250 == 46)
    {
      v253 = sub_223187510();
      if ((SBYTE7(v751) & 0x80u) == 0)
        v254 = v750;
      else
        v254 = (void **)v750[0];
      if ((SBYTE7(v751) & 0x80u) == 0)
        v255 = BYTE7(v751);
      else
        v255 = (size_t)v750[1];
      sub_22318760C((uint64_t *)v253, v254, v255, (uint64_t *)(a1 + 1952), (uint64_t)"shared", 6);
    }
  }
  kdebug_trace();
  if (SBYTE7(v751) < 0)
    operator delete(v750[0]);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v256 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v256 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v725) = *(_DWORD *)&__p[4];
    LODWORD(v724) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v724 / (double)v725;
    __cxa_guard_release(&qword_255795560);
  }
  v257 = *(_QWORD *)(a1 + 1952);
  v258 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v258 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C2C8);
  qword_25578C308 = v257;
  byte_25578C310 = 1;
  std::mutex::unlock(&stru_25578C2C8);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v259 = v758[23];
  v260 = v758;
  if (v758[23] < 0)
  {
    v260 = *(_BYTE **)v758;
    v259 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v260;
  *(_QWORD *)&v789[24] = v259;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v261 = sub_2241471F8();
    v262 = v261[2];
    if (!v262)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v262 = v261[2];
    }
    v263 = *(_QWORD *)(v262 + 64);
    v264 = (std::mutex *)(v263 + 32);
    std::mutex::lock((std::mutex *)(v263 + 32));
    v266 = *(_QWORD *)(v263 + 96);
    v265 = *(_QWORD *)(v263 + 104);
    std::mutex::unlock(v264);
    if (v266 != v265)
    {
      sub_2241471F8();
      v267 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v267 + 24))(v267))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v267 + 24))(v267))
        {
          __p[23] = 4;
          strcpy(__p, "disk");
          v773.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v773.__r_.__value_.__l.__size_ = 2;
          v268 = sub_2241471F8();
          sub_223663E94((uint64_t)v268, v267, (uint64_t *)(a1 + 1960), (uint64_t)__p, (__int128 *)&v773);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v269 = BYTE7(v751);
  if (SBYTE7(v751) < 0)
    v269 = (unint64_t)v750[1];
  if (v269 >= 0x11)
  {
    v270 = v750;
    if (SBYTE7(v751) < 0)
      v270 = (void **)v750[0];
    v271 = *v270;
    v272 = v270[1];
    v273 = *((unsigned __int8 *)v270 + 16);
    if (v271 == (void *)0x6365722E64337663 && v272 == (void *)0x73746174532E6E6FLL && v273 == 46)
    {
      v276 = sub_223187510();
      if ((SBYTE7(v751) & 0x80u) == 0)
        v277 = v750;
      else
        v277 = (void **)v750[0];
      if ((SBYTE7(v751) & 0x80u) == 0)
        v278 = BYTE7(v751);
      else
        v278 = (size_t)v750[1];
      sub_22318760C((uint64_t *)v276, v277, v278, (uint64_t *)(a1 + 1960), (uint64_t)"disk", 4);
    }
  }
  kdebug_trace();
  if (SBYTE7(v751) < 0)
    operator delete(v750[0]);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v279 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v279 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v727) = *(_DWORD *)&__p[4];
    LODWORD(v726) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v726 / (double)v727;
    __cxa_guard_release(&qword_255795560);
  }
  v280 = *(_QWORD *)(a1 + 1960);
  v281 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v281 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C258);
  qword_25578C298 = v280;
  byte_25578C2A0 = 1;
  std::mutex::unlock(&stru_25578C258);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v282 = v758[23];
  v283 = v758;
  if (v758[23] < 0)
  {
    v283 = *(_BYTE **)v758;
    v282 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v283;
  *(_QWORD *)&v789[24] = v282;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v284 = sub_2241471F8();
    v285 = v284[2];
    if (!v285)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v285 = v284[2];
    }
    v286 = *(_QWORD *)(v285 + 64);
    v287 = (std::mutex *)(v286 + 32);
    std::mutex::lock((std::mutex *)(v286 + 32));
    v289 = *(_QWORD *)(v286 + 96);
    v288 = *(_QWORD *)(v286 + 104);
    std::mutex::unlock(v287);
    if (v289 != v288)
    {
      sub_2241471F8();
      v290 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v290 + 24))(v290))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238C539C((double *)&qword_255788F20, v290, (int *)(a1 + 1984), "localized");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v291 = __p[23];
  if (__p[23] < 0)
    v291 = *(_QWORD *)&__p[8];
  if (v291 >= 0x11)
  {
    v292 = __p;
    if (__p[23] < 0)
      v292 = *(_BYTE **)__p;
    v293 = *(_QWORD *)v292;
    v294 = *((_QWORD *)v292 + 1);
    v295 = v292[16];
    if (v293 == 0x6365722E64337663 && v294 == 0x73746174532E6E6FLL && v295 == 46)
    {
      v298 = sub_223187510();
      if (__p[23] >= 0)
        v299 = __p;
      else
        v299 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v300 = __p[23];
      else
        v300 = *(_QWORD *)&__p[8];
      sub_223532E4C(v298, v299, v300, (unsigned int *)(a1 + 1984), (uint64_t)"localized", 9);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v301 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v301 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v729) = *(_DWORD *)&__p[4];
    LODWORD(v728) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v728 / (double)v729;
    __cxa_guard_release(&qword_255795560);
  }
  v302 = *(unsigned int *)(a1 + 1984);
  v303 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v303 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C168);
  v304 = qword_25578C1A8;
  if (qword_25578C1A8 <= v302)
    v304 = v302;
  if (byte_25578C1B0)
    v305 = v304;
  else
    v305 = v302;
  qword_25578C1A8 = v305;
  byte_25578C1B0 = 1;
  std::mutex::unlock(&stru_25578C168);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v306 = v758[23];
  v307 = v758;
  if (v758[23] < 0)
  {
    v307 = *(_BYTE **)v758;
    v306 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v307;
  *(_QWORD *)&v789[24] = v306;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v308 = sub_2241471F8();
    v309 = v308[2];
    if (!v309)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v309 = v308[2];
    }
    v310 = *(_QWORD *)(v309 + 64);
    v311 = (std::mutex *)(v310 + 32);
    std::mutex::lock((std::mutex *)(v310 + 32));
    v313 = *(_QWORD *)(v310 + 96);
    v312 = *(_QWORD *)(v310 + 104);
    std::mutex::unlock(v311);
    if (v313 != v312)
    {
      sub_2241471F8();
      v314 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v314 + 24))(v314))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238C5260((double *)&qword_255788F20, v314, (int *)(a1 + 1988), "usable");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v315 = __p[23];
  if (__p[23] < 0)
    v315 = *(_QWORD *)&__p[8];
  if (v315 >= 0x11)
  {
    v316 = __p;
    if (__p[23] < 0)
      v316 = *(_BYTE **)__p;
    v317 = *(_QWORD *)v316;
    v318 = *((_QWORD *)v316 + 1);
    v319 = v316[16];
    if (v317 == 0x6365722E64337663 && v318 == 0x73746174532E6E6FLL && v319 == 46)
    {
      v322 = sub_223187510();
      if (__p[23] >= 0)
        v323 = __p;
      else
        v323 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v324 = __p[23];
      else
        v324 = *(_QWORD *)&__p[8];
      sub_223532E4C(v322, v323, v324, (unsigned int *)(a1 + 1988), (uint64_t)"usable", 6);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v325 = v758[23];
  v326 = v758;
  if (v758[23] < 0)
  {
    v326 = *(_BYTE **)v758;
    v325 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v326;
  *(_QWORD *)&v789[24] = v325;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v327 = sub_2241471F8();
    v328 = v327[2];
    if (!v328)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v328 = v327[2];
    }
    v329 = *(_QWORD *)(v328 + 64);
    v330 = (std::mutex *)(v329 + 32);
    std::mutex::lock((std::mutex *)(v329 + 32));
    v332 = *(_QWORD *)(v329 + 96);
    v331 = *(_QWORD *)(v329 + 104);
    std::mutex::unlock(v330);
    if (v332 != v331)
    {
      sub_2241471F8();
      v333 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v333 + 24))(v333))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_223533258((double *)&qword_255788F20, v333, (int *)(a1 + 2012), "content_update");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v334 = __p[23];
  if (__p[23] < 0)
    v334 = *(_QWORD *)&__p[8];
  if (v334 >= 0x11)
  {
    v335 = __p;
    if (__p[23] < 0)
      v335 = *(_BYTE **)__p;
    v336 = *(_QWORD *)v335;
    v337 = *((_QWORD *)v335 + 1);
    v338 = v335[16];
    if (v336 == 0x6365722E64337663 && v337 == 0x73746174532E6E6FLL && v338 == 46)
    {
      v341 = sub_223187510();
      if (__p[23] >= 0)
        v342 = __p;
      else
        v342 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v343 = __p[23];
      else
        v343 = *(_QWORD *)&__p[8];
      sub_223532E4C(v341, v342, v343, (unsigned int *)(a1 + 2012), (uint64_t)"content_update", 14);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v344 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v344 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v731) = *(_DWORD *)&__p[4];
    LODWORD(v730) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v730 / (double)v731;
    __cxa_guard_release(&qword_255795560);
  }
  v345 = *(unsigned int *)(a1 + 2012);
  v346 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v346 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C020);
  qword_25578C060 = v345;
  byte_25578C068 = 1;
  std::mutex::unlock(&stru_25578C020);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v347 = v758[23];
  v348 = v758;
  if (v758[23] < 0)
  {
    v348 = *(_BYTE **)v758;
    v347 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v348;
  *(_QWORD *)&v789[24] = v347;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v349 = sub_2241471F8();
    v350 = v349[2];
    if (!v350)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v350 = v349[2];
    }
    v351 = *(_QWORD *)(v350 + 64);
    v352 = (std::mutex *)(v351 + 32);
    std::mutex::lock((std::mutex *)(v351 + 32));
    v354 = *(_QWORD *)(v351 + 96);
    v353 = *(_QWORD *)(v351 + 104);
    std::mutex::unlock(v352);
    if (v354 != v353)
    {
      sub_2241471F8();
      v355 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v355 + 24))(v355))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v355 + 24))(v355))
        {
          __p[23] = 3;
          strcpy(__p, "new");
          v773.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v773.__r_.__value_.__l.__size_ = 2;
          v356 = sub_2241471F8();
          sub_2235347B4((uint64_t)v356, v355, (int *)(a1 + 2016), (uint64_t)__p, (__int128 *)&v773);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v357 = BYTE7(v751);
  if (SBYTE7(v751) < 0)
    v357 = (unint64_t)v750[1];
  if (v357 >= 0x11)
  {
    v358 = v750;
    if (SBYTE7(v751) < 0)
      v358 = (void **)v750[0];
    v359 = *v358;
    v360 = v358[1];
    v361 = *((unsigned __int8 *)v358 + 16);
    if (v359 == (void *)0x6365722E64337663 && v360 == (void *)0x73746174532E6E6FLL && v361 == 46)
    {
      v364 = sub_223187510();
      if ((SBYTE7(v751) & 0x80u) == 0)
        v365 = v750;
      else
        v365 = (void **)v750[0];
      if ((SBYTE7(v751) & 0x80u) == 0)
        v366 = BYTE7(v751);
      else
        v366 = (size_t)v750[1];
      sub_223532E4C(v364, v365, v366, (unsigned int *)(a1 + 2016), (uint64_t)"new", 3);
    }
  }
  kdebug_trace();
  if (SBYTE7(v751) < 0)
    operator delete(v750[0]);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v367 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v367 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v733) = *(_DWORD *)&__p[4];
    LODWORD(v732) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v732 / (double)v733;
    __cxa_guard_release(&qword_255795560);
  }
  v368 = *(unsigned int *)(a1 + 2016);
  v369 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v369 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C1E8);
  qword_25578C228 = v368;
  byte_25578C230 = 1;
  std::mutex::unlock(&stru_25578C1E8);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v370 = v758[23];
  v371 = v758;
  if (v758[23] < 0)
  {
    v371 = *(_BYTE **)v758;
    v370 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v371;
  *(_QWORD *)&v789[24] = v370;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v372 = sub_2241471F8();
    v373 = v372[2];
    if (!v373)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v373 = v372[2];
    }
    v374 = *(_QWORD *)(v373 + 64);
    v375 = (std::mutex *)(v374 + 32);
    std::mutex::lock((std::mutex *)(v374 + 32));
    v377 = *(_QWORD *)(v374 + 96);
    v376 = *(_QWORD *)(v374 + 104);
    std::mutex::unlock(v375);
    if (v377 != v376)
    {
      sub_2241471F8();
      v378 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v378 + 24))(v378))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_223533258((double *)&qword_255788F20, v378, (int *)(a1 + 1940), "data_corrupted");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v379 = __p[23];
  if (__p[23] < 0)
    v379 = *(_QWORD *)&__p[8];
  if (v379 >= 0x11)
  {
    v380 = __p;
    if (__p[23] < 0)
      v380 = *(_BYTE **)__p;
    v381 = *(_QWORD *)v380;
    v382 = *((_QWORD *)v380 + 1);
    v383 = v380[16];
    if (v381 == 0x6365722E64337663 && v382 == 0x73746174532E6E6FLL && v383 == 46)
    {
      v386 = sub_223187510();
      if (__p[23] >= 0)
        v387 = __p;
      else
        v387 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v388 = __p[23];
      else
        v388 = *(_QWORD *)&__p[8];
      sub_223532E4C(v386, v387, v388, (unsigned int *)(a1 + 1940), (uint64_t)"data_corrupted", 14);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v389 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v389 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v735) = *(_DWORD *)&__p[4];
    LODWORD(v734) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v734 / (double)v735;
    __cxa_guard_release(&qword_255795560);
  }
  v390 = *(unsigned int *)(a1 + 1940);
  v391 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v391 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578D208);
  qword_25578D248 = v390;
  byte_25578D250 = 1;
  std::mutex::unlock(&stru_25578D208);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v392 = v758[23];
  v393 = v758;
  if (v758[23] < 0)
  {
    v393 = *(_BYTE **)v758;
    v392 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v393;
  *(_QWORD *)&v789[24] = v392;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v394 = sub_2241471F8();
    v395 = v394[2];
    if (!v395)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v395 = v394[2];
    }
    v396 = *(_QWORD *)(v395 + 64);
    v397 = (std::mutex *)(v396 + 32);
    std::mutex::lock((std::mutex *)(v396 + 32));
    v399 = *(_QWORD *)(v396 + 96);
    v398 = *(_QWORD *)(v396 + 104);
    std::mutex::unlock(v397);
    if (v399 != v398)
    {
      sub_2241471F8();
      v400 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v400 + 24))(v400))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        v750[0] = (void *)((uint64_t)(*(_QWORD *)(a1 + 2032) - *(_QWORD *)(a1 + 2024)) >> 4);
        sub_223197768((double *)&qword_255788F20, v400, (uint64_t *)v750, "overlapping");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v401 = __p[23];
  if (__p[23] < 0)
    v401 = *(_QWORD *)&__p[8];
  if (v401 >= 0x11)
  {
    v402 = __p;
    if (__p[23] < 0)
      v402 = *(_BYTE **)__p;
    v403 = *(_QWORD *)v402;
    v404 = *((_QWORD *)v402 + 1);
    v405 = v402[16];
    if (v403 == 0x6365722E64337663 && v404 == 0x73746174532E6E6FLL && v405 == 46)
    {
      v408 = sub_223187510();
      if (__p[23] >= 0)
        v409 = __p;
      else
        v409 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v410 = __p[23];
      else
        v410 = *(_QWORD *)&__p[8];
      v750[0] = (void *)((uint64_t)(*(_QWORD *)(a1 + 2032) - *(_QWORD *)(a1 + 2024)) >> 4);
      sub_22318760C((uint64_t *)v408, v409, v410, (uint64_t *)v750, (uint64_t)"overlapping", 11);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v411 = v758[23];
  v412 = v758;
  if (v758[23] < 0)
  {
    v412 = *(_BYTE **)v758;
    v411 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v412;
  *(_QWORD *)&v789[24] = v411;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v413 = sub_2241471F8();
    v414 = v413[2];
    if (!v414)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v414 = v413[2];
    }
    v415 = *(_QWORD *)(v414 + 64);
    v416 = (std::mutex *)(v415 + 32);
    std::mutex::lock((std::mutex *)(v415 + 32));
    v418 = *(_QWORD *)(v415 + 96);
    v417 = *(_QWORD *)(v415 + 104);
    std::mutex::unlock(v416);
    if (v418 != v417)
    {
      sub_2241471F8();
      v419 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v419 + 24))(v419))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        v750[0] = (void *)((uint64_t)(*(_QWORD *)(a1 + 2056) - *(_QWORD *)(a1 + 2048)) >> 4);
        sub_223197768((double *)&qword_255788F20, v419, (uint64_t *)v750, "integration");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v420 = __p[23];
  if (__p[23] < 0)
    v420 = *(_QWORD *)&__p[8];
  if (v420 >= 0x11)
  {
    v421 = __p;
    if (__p[23] < 0)
      v421 = *(_BYTE **)__p;
    v422 = *(_QWORD *)v421;
    v423 = *((_QWORD *)v421 + 1);
    v424 = v421[16];
    if (v422 == 0x6365722E64337663 && v423 == 0x73746174532E6E6FLL && v424 == 46)
    {
      v427 = sub_223187510();
      if (__p[23] >= 0)
        v428 = __p;
      else
        v428 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v429 = __p[23];
      else
        v429 = *(_QWORD *)&__p[8];
      v750[0] = (void *)((uint64_t)(*(_QWORD *)(a1 + 2056) - *(_QWORD *)(a1 + 2048)) >> 4);
      sub_22318760C((uint64_t *)v427, v428, v429, (uint64_t *)v750, (uint64_t)"integration", 11);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v430 = (char *)operator new(0x28uLL);
  *(_QWORD *)v758 = v430;
  *(_OWORD *)&v758[8] = xmmword_2245C4640;
  strcpy(v430, "Stats.Keyframing.KeyframeMemory (MB)");
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = v430;
  *(_QWORD *)&v789[24] = 36;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v431 = sub_2241471F8();
    v432 = v431[2];
    if (!v432)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v432 = v431[2];
    }
    v433 = *(_QWORD *)(v432 + 64);
    v434 = (std::mutex *)(v433 + 32);
    std::mutex::lock((std::mutex *)(v433 + 32));
    v436 = *(_QWORD *)(v433 + 96);
    v435 = *(_QWORD *)(v433 + 104);
    std::mutex::unlock(v434);
    if (v436 != v435)
    {
      sub_2241471F8();
      v437 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v437 + 24))(v437))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v437 + 24))(v437))
        {
          __p[23] = 8;
          strcpy(__p, "occupied");
          v773.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v773.__r_.__value_.__l.__size_ = 2;
          v438 = sub_2241471F8();
          sub_2238C7990((uint64_t)v438, v437, (uint64_t *)(a1 + 1968), (uint64_t)__p, (__int128 *)&v773);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v439 = BYTE7(v751);
  if (SBYTE7(v751) < 0)
    v439 = (unint64_t)v750[1];
  if (v439 >= 0x11)
  {
    v440 = v750;
    if (SBYTE7(v751) < 0)
      v440 = (void **)v750[0];
    v441 = *v440;
    v442 = v440[1];
    v443 = *((unsigned __int8 *)v440 + 16);
    if (v441 == (void *)0x6365722E64337663 && v442 == (void *)0x73746174532E6E6FLL && v443 == 46)
    {
      v446 = sub_223187510();
      if ((SBYTE7(v751) & 0x80u) == 0)
        v447 = v750;
      else
        v447 = (void **)v750[0];
      if ((SBYTE7(v751) & 0x80u) == 0)
        v448 = BYTE7(v751);
      else
        v448 = (size_t)v750[1];
      sub_2231AA374((uint64_t *)v446, v447, v448, (uint64_t *)(a1 + 1968), (uint64_t)"occupied", 8);
    }
  }
  kdebug_trace();
  if (SBYTE7(v751) < 0)
    operator delete(v750[0]);
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v449 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v449 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v737) = *(_DWORD *)&__p[4];
    LODWORD(v736) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v736 / (double)v737;
    __cxa_guard_release(&qword_255795560);
  }
  v450 = *(double *)(a1 + 1968);
  v451 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v451 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C0F0);
  if (byte_25578C138)
  {
    v452 = v450 + *(double *)&qword_25578C130;
  }
  else
  {
    byte_25578C138 = 1;
    v452 = v450;
  }
  qword_25578C130 = *(_QWORD *)&v452;
  *(double *)&qword_25578C140 = *(double *)&qword_25578C140 + 1.0;
  std::mutex::unlock(&stru_25578C0F0);
  std::mutex::lock(&stru_25578BFB0);
  qword_25578BFF0 = *(_QWORD *)&v450;
  byte_25578BFF8 = 1;
  std::mutex::unlock(&stru_25578BFB0);
  kdebug_trace();
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v453 = v758[23];
  v454 = v758;
  if (v758[23] < 0)
  {
    v454 = *(_BYTE **)v758;
    v453 = *(_QWORD *)&v758[8];
  }
  *(_QWORD *)&v789[16] = v454;
  *(_QWORD *)&v789[24] = v453;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v455 = sub_2241471F8();
    v456 = v455[2];
    if (!v456)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v456 = v455[2];
    }
    v457 = *(_QWORD *)(v456 + 64);
    v458 = (std::mutex *)(v457 + 32);
    std::mutex::lock((std::mutex *)(v457 + 32));
    v460 = *(_QWORD *)(v457 + 96);
    v459 = *(_QWORD *)(v457 + 104);
    std::mutex::unlock(v458);
    if (v460 != v459)
    {
      sub_2241471F8();
      v461 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v461 + 24))(v461))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v461 + 24))(v461))
        {
          __p[23] = 3;
          strcpy(__p, "max");
          v773.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v773.__r_.__value_.__l.__size_ = 2;
          v462 = sub_2241471F8();
          sub_2238C7990((uint64_t)v462, v461, (uint64_t *)(a1 + 1976), (uint64_t)__p, (__int128 *)&v773);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v463 = BYTE7(v751);
  if (SBYTE7(v751) < 0)
    v463 = (unint64_t)v750[1];
  if (v463 >= 0x11)
  {
    v464 = v750;
    if (SBYTE7(v751) < 0)
      v464 = (void **)v750[0];
    v465 = *v464;
    v466 = v464[1];
    v467 = *((unsigned __int8 *)v464 + 16);
    if (v465 == (void *)0x6365722E64337663 && v466 == (void *)0x73746174532E6E6FLL && v467 == 46)
    {
      v470 = sub_223187510();
      if ((SBYTE7(v751) & 0x80u) == 0)
        v471 = v750;
      else
        v471 = (void **)v750[0];
      if ((SBYTE7(v751) & 0x80u) == 0)
        v472 = BYTE7(v751);
      else
        v472 = (size_t)v750[1];
      sub_2231AA374((uint64_t *)v470, v471, v472, (uint64_t *)(a1 + 1976), (uint64_t)"max", 3);
    }
  }
  kdebug_trace();
  if (SBYTE7(v751) < 0)
  {
    operator delete(v750[0]);
    if ((v758[23] & 0x80000000) == 0)
      goto LABEL_759;
  }
  else if ((v758[23] & 0x80000000) == 0)
  {
    goto LABEL_759;
  }
  operator delete(*(void **)v758);
LABEL_759:
  v473 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v473;
  *(_OWORD *)&__p[8] = xmmword_2245B8D50;
  strcpy(v473, "Stats.Keyframing.disk_usage");
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = v473;
  *(_QWORD *)&v789[24] = 27;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v758);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v474 = sub_2241471F8();
    v475 = v474[2];
    if (!v475)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v475 = v474[2];
    }
    v476 = *(_QWORD *)(v475 + 64);
    v477 = (std::mutex *)(v476 + 32);
    std::mutex::lock((std::mutex *)(v476 + 32));
    v479 = *(_QWORD *)(v476 + 96);
    v478 = *(_QWORD *)(v476 + 104);
    std::mutex::unlock(v477);
    if (v479 != v478)
    {
      sub_2241471F8();
      v480 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v480 + 24))(v480))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238C54D8((double *)&qword_255788F20, v480, (int *)(a1 + 1992), "valid_pose");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v481 = v758[23];
  if (v758[23] < 0)
    v481 = *(_QWORD *)&v758[8];
  if (v481 >= 0x11)
  {
    v482 = v758;
    if (v758[23] < 0)
      v482 = *(_BYTE **)v758;
    v483 = *(_QWORD *)v482;
    v484 = *((_QWORD *)v482 + 1);
    v485 = v482[16];
    if (v483 == 0x6365722E64337663 && v484 == 0x73746174532E6E6FLL && v485 == 46)
    {
      v488 = sub_223187510();
      if (v758[23] >= 0)
        v489 = v758;
      else
        v489 = *(_BYTE **)v758;
      if (v758[23] >= 0)
        v490 = v758[23];
      else
        v490 = *(_QWORD *)&v758[8];
      sub_223532E4C(v488, v489, v490, (unsigned int *)(a1 + 1992), (uint64_t)"valid_pose", 10);
    }
  }
  kdebug_trace();
  if ((v758[23] & 0x80000000) != 0)
    operator delete(*(void **)v758);
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  v491 = __p[23];
  v492 = __p;
  if (__p[23] < 0)
  {
    v492 = *(_BYTE **)__p;
    v491 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v789[16] = v492;
  *(_QWORD *)&v789[24] = v491;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v758);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v493 = sub_2241471F8();
    v494 = v493[2];
    if (!v494)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v494 = v493[2];
    }
    v495 = *(_QWORD *)(v494 + 64);
    v496 = (std::mutex *)(v495 + 32);
    std::mutex::lock((std::mutex *)(v495 + 32));
    v498 = *(_QWORD *)(v495 + 96);
    v497 = *(_QWORD *)(v495 + 104);
    std::mutex::unlock(v496);
    if (v498 != v497)
    {
      sub_2241471F8();
      v499 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v499 + 24))(v499))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        sub_2238C5124((double *)&qword_255788F20, v499, (int *)(a1 + 1996), "total");
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v500 = v758[23];
  if (v758[23] < 0)
    v500 = *(_QWORD *)&v758[8];
  if (v500 >= 0x11)
  {
    v501 = v758;
    if (v758[23] < 0)
      v501 = *(_BYTE **)v758;
    v502 = *(_QWORD *)v501;
    v503 = *((_QWORD *)v501 + 1);
    v504 = v501[16];
    if (v502 == 0x6365722E64337663 && v503 == 0x73746174532E6E6FLL && v504 == 46)
    {
      v507 = sub_223187510();
      if (v758[23] >= 0)
        v508 = v758;
      else
        v508 = *(_BYTE **)v758;
      if (v758[23] >= 0)
        v509 = v758[23];
      else
        v509 = *(_QWORD *)&v758[8];
      sub_223532E4C(v507, v508, v509, (unsigned int *)(a1 + 1996), (uint64_t)"total", 5);
    }
  }
  kdebug_trace();
  if ((v758[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v758);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_819;
LABEL_851:
    operator delete(*(void **)__p);
    goto LABEL_819;
  }
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_851;
LABEL_819:
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_826;
  v510 = sub_2241471F8();
  v511 = v510[2];
  if (!v511)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v511 = v510[2];
  }
  v512 = *(_QWORD *)(v511 + 64);
  v513 = (std::mutex *)(v512 + 32);
  std::mutex::lock((std::mutex *)(v512 + 32));
  v515 = *(_QWORD *)(v512 + 96);
  v514 = *(_QWORD *)(v512 + 104);
  std::mutex::unlock(v513);
  if (v515 == v514)
  {
LABEL_826:
    v517 = 0;
  }
  else
  {
    *(_QWORD *)v789 = "cv3d.recon.";
    *(_QWORD *)&v789[8] = 11;
    *(_QWORD *)&v789[16] = "Stats.Keyframing";
    *(_QWORD *)&v789[24] = 16;
    sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, &v766);
    sub_2241471F8();
    v516 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    v517 = 1;
    v518 = 1;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v516 + 24))(v516) & 1) != 0)
      goto LABEL_853;
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_834;
  v519 = sub_2241471F8();
  v520 = v519[2];
  if (!v520)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v520 = v519[2];
  }
  v521 = *(_QWORD *)(v520 + 64);
  v522 = (std::mutex *)(v521 + 32);
  std::mutex::lock((std::mutex *)(v521 + 32));
  v524 = *(_QWORD *)(v521 + 96);
  v523 = *(_QWORD *)(v521 + 104);
  std::mutex::unlock(v522);
  if (v524 == v523)
  {
LABEL_834:
    v526 = 0;
  }
  else
  {
    *(_QWORD *)v789 = "cv3d.recon.";
    *(_QWORD *)&v789[8] = 11;
    *(_QWORD *)&v789[16] = "Keyframing.PointCloud";
    *(_QWORD *)&v789[24] = 21;
    sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, &v765);
    sub_2241471F8();
    v525 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    v526 = 1;
    v518 = 1;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v525 + 24))(v525) & 1) != 0)
      goto LABEL_845;
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_844;
  v527 = sub_2241471F8();
  v528 = v527[2];
  if (!v528)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v528 = v527[2];
  }
  v529 = *(_QWORD *)(v528 + 64);
  v530 = (std::mutex *)(v529 + 32);
  std::mutex::lock((std::mutex *)(v529 + 32));
  v532 = *(_QWORD *)(v529 + 96);
  v531 = *(_QWORD *)(v529 + 104);
  std::mutex::unlock(v530);
  if (v532 == v531)
  {
LABEL_844:
    v518 = 0;
    v534 = 0;
    if ((v526 & 1) != 0)
      goto LABEL_845;
LABEL_842:
    v518 = v534;
    if (!v517)
      goto LABEL_854;
    goto LABEL_853;
  }
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Keyframing.Pose";
  *(_QWORD *)&v789[24] = 15;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_2241471F8();
  v533 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v534 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v533 + 24))(v533);
  v518 = v534;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (v526)
      goto LABEL_845;
    goto LABEL_842;
  }
  operator delete(*(void **)__p);
  v534 = v518;
  if (!v526)
    goto LABEL_842;
LABEL_845:
  if (SHIBYTE(v765.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v765.__r_.__value_.__l.__data_);
    if ((v517 & 1) == 0)
      goto LABEL_854;
  }
  else if ((v517 & 1) == 0)
  {
    goto LABEL_854;
  }
LABEL_853:
  if (SHIBYTE(v766.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v766.__r_.__value_.__l.__data_);
    if ((v518 & 1) == 0)
      goto LABEL_1225;
    goto LABEL_855;
  }
LABEL_854:
  if ((v518 & 1) == 0)
    goto LABEL_1225;
LABEL_855:
  v535 = *(unsigned __int8 **)(a1 + 1872);
  v745 = *(unsigned __int8 **)(a1 + 1880);
  if (v535 != v745)
  {
    v536 = 0;
    v738 = &v789[16];
    v742 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v537 = (uint64_t (**)())vdup_n_s32(0x3F4CCCCDu);
    do
    {
      v763 = v536;
      v764 = v535;
      *(_QWORD *)&v789[8] = 0;
      *(_QWORD *)&v789[16] = 0;
      *(_QWORD *)v789 = &v789[8];
      sub_2245314F4(v789, __p);
      v762 = *(_OWORD *)__p;
      sub_22323DF84((uint64_t)v789, *(char **)&v789[8]);
      __p[23] = 4;
      strcpy(__p, "uuid");
      *(_DWORD *)&v789[24] = 0;
      sub_22319B83C((uint64_t)v750, (uint64_t)v789, v764);
      if (*(_DWORD *)&v789[24] == -1)
        sub_22316DD70();
      v750[0] = &v773;
      ((void (*)(_BYTE *__return_ptr, void **, _BYTE *))off_24EC5C2E8[*(unsigned int *)&v789[24]])(v758, v750, v789);
      if (*(_DWORD *)&v789[24] != -1)
        ((void (*)(void **, _BYTE *))off_24EC5C2D0[*(unsigned int *)&v789[24]])(v750, v789);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)v789);
      sub_2231AEDB8((uint64_t)&v762, *(const void **)v789, (uint64_t)v758);
      v538 = *(std::__shared_weak_count **)&v789[8];
      if (!*(_QWORD *)&v789[8])
        goto LABEL_865;
      v539 = (unint64_t *)(*(_QWORD *)&v789[8] + 8);
      do
        v540 = __ldaxr(v539);
      while (__stlxr(v540 - 1, v539));
      if (!v540)
      {
        ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
        std::__shared_weak_count::__release_weak(v538);
        if ((v758[23] & 0x80000000) != 0)
        {
LABEL_918:
          operator delete(*(void **)v758);
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_867;
          goto LABEL_919;
        }
      }
      else
      {
LABEL_865:
        if ((v758[23] & 0x80000000) != 0)
          goto LABEL_918;
      }
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_867;
LABEL_919:
      operator delete(*(void **)__p);
LABEL_867:
      __p[23] = 12;
      strcpy(__p, "update_state");
      *(_DWORD *)&v789[24] = 0;
      sub_22356F9F4((uint64_t)v750, (uint64_t)v789, (char *)v764 + 240);
      if (*(_DWORD *)&v789[24] == -1)
        sub_22316DD70();
      v750[0] = &v773;
      ((void (*)(_BYTE *__return_ptr, void **, _BYTE *))off_24EC5C2E8[*(unsigned int *)&v789[24]])(v758, v750, v789);
      if (*(_DWORD *)&v789[24] != -1)
        ((void (*)(void **, _BYTE *))off_24EC5C2D0[*(unsigned int *)&v789[24]])(v750, v789);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)v789);
      sub_2231AEDB8((uint64_t)&v762, *(const void **)v789, (uint64_t)v758);
      v541 = *(std::__shared_weak_count **)&v789[8];
      if (!*(_QWORD *)&v789[8])
        goto LABEL_874;
      v542 = (unint64_t *)(*(_QWORD *)&v789[8] + 8);
      do
        v543 = __ldaxr(v542);
      while (__stlxr(v543 - 1, v542));
      if (!v543)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
        if ((v758[23] & 0x80000000) == 0)
        {
LABEL_875:
          if ((__p[23] & 0x80000000) != 0)
            goto LABEL_922;
          goto LABEL_876;
        }
      }
      else
      {
LABEL_874:
        if ((v758[23] & 0x80000000) == 0)
          goto LABEL_875;
      }
      operator delete(*(void **)v758);
      if ((__p[23] & 0x80000000) != 0)
LABEL_922:
        operator delete(*(void **)__p);
LABEL_876:
      v789[23] = 17;
      strcpy(v789, "keyframe_to_world");
      sub_2238C5614((_OWORD *)v764 + 2);
      sub_224527BAC((uint64_t)v789, (CFStringRef *)v758);
      sub_2231AEDB8((uint64_t)&v762, *(const void **)v758, (uint64_t)__p);
      v544 = *(std::__shared_weak_count **)&v758[8];
      if (!*(_QWORD *)&v758[8])
        goto LABEL_880;
      v545 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v546 = __ldaxr(v545);
      while (__stlxr(v546 - 1, v545));
      if (!v546)
      {
        ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
        std::__shared_weak_count::__release_weak(v544);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_881:
          if ((v789[23] & 0x80000000) != 0)
            goto LABEL_925;
          goto LABEL_882;
        }
      }
      else
      {
LABEL_880:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_881;
      }
      operator delete(*(void **)__p);
      if ((v789[23] & 0x80000000) != 0)
LABEL_925:
        operator delete(*(void **)v789);
LABEL_882:
      v789[23] = 11;
      strcpy(v789, "create_time");
      sub_2238C5768((uint64_t)__p, (uint64_t *)v764 + 12);
      sub_224527BAC((uint64_t)v789, (CFStringRef *)v758);
      sub_2231AEDB8((uint64_t)&v762, *(const void **)v758, (uint64_t)__p);
      v547 = *(std::__shared_weak_count **)&v758[8];
      if (!*(_QWORD *)&v758[8])
        goto LABEL_886;
      v548 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v549 = __ldaxr(v548);
      while (__stlxr(v549 - 1, v548));
      if (!v549)
      {
        ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
        std::__shared_weak_count::__release_weak(v547);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_887:
          if ((v789[23] & 0x80000000) != 0)
            goto LABEL_928;
          goto LABEL_888;
        }
      }
      else
      {
LABEL_886:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_887;
      }
      operator delete(*(void **)__p);
      if ((v789[23] & 0x80000000) != 0)
LABEL_928:
        operator delete(*(void **)v789);
LABEL_888:
      v789[23] = 11;
      strcpy(v789, "update_time");
      sub_2238C5768((uint64_t)__p, (uint64_t *)v764 + 13);
      sub_224527BAC((uint64_t)v789, (CFStringRef *)v758);
      sub_2231AEDB8((uint64_t)&v762, *(const void **)v758, (uint64_t)__p);
      v550 = *(std::__shared_weak_count **)&v758[8];
      if (!*(_QWORD *)&v758[8])
        goto LABEL_892;
      v551 = (unint64_t *)(*(_QWORD *)&v758[8] + 8);
      do
        v552 = __ldaxr(v551);
      while (__stlxr(v552 - 1, v551));
      if (!v552)
      {
        ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
        std::__shared_weak_count::__release_weak(v550);
        if ((__p[23] & 0x80000000) != 0)
        {
LABEL_930:
          operator delete(*(void **)__p);
          if ((v789[23] & 0x80000000) == 0)
            goto LABEL_894;
          goto LABEL_931;
        }
      }
      else
      {
LABEL_892:
        if ((__p[23] & 0x80000000) != 0)
          goto LABEL_930;
      }
      if ((v789[23] & 0x80000000) == 0)
        goto LABEL_894;
LABEL_931:
      operator delete(*(void **)v789);
LABEL_894:
      __p[23] = 11;
      strcpy(__p, "change_hint");
      *(_DWORD *)&v789[24] = 0;
      sub_223847364((uint64_t)v750, (uint64_t)v789, v764 + 241);
      if (*(_DWORD *)&v789[24] == -1)
        sub_22316DD70();
      v750[0] = &v773;
      ((void (*)(_BYTE *__return_ptr, void **, _BYTE *))off_24EC5C2E8[*(unsigned int *)&v789[24]])(v758, v750, v789);
      if (*(_DWORD *)&v789[24] != -1)
        ((void (*)(void **, _BYTE *))off_24EC5C2D0[*(unsigned int *)&v789[24]])(v750, v789);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)v789);
      sub_2231AEDB8((uint64_t)&v762, *(const void **)v789, (uint64_t)v758);
      v553 = *(std::__shared_weak_count **)&v789[8];
      if (!*(_QWORD *)&v789[8])
        goto LABEL_901;
      v554 = (unint64_t *)(*(_QWORD *)&v789[8] + 8);
      do
        v555 = __ldaxr(v554);
      while (__stlxr(v555 - 1, v554));
      if (!v555)
      {
        ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
        std::__shared_weak_count::__release_weak(v553);
        if ((v758[23] & 0x80000000) == 0)
        {
LABEL_902:
          if ((__p[23] & 0x80000000) != 0)
            goto LABEL_934;
          goto LABEL_903;
        }
      }
      else
      {
LABEL_901:
        if ((v758[23] & 0x80000000) == 0)
          goto LABEL_902;
      }
      operator delete(*(void **)v758);
      if ((__p[23] & 0x80000000) != 0)
LABEL_934:
        operator delete(*(void **)__p);
LABEL_903:
      sub_223425184(&v763);
      sub_224527BAC((uint64_t)v789, (CFStringRef *)__p);
      sub_223427380((uint64_t)&v767, *(void **)__p, (void **)&v762);
      v556 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v557 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v558 = __ldaxr(v557);
        while (__stlxr(v558 - 1, v557));
        if (!v558)
        {
          ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
          std::__shared_weak_count::__release_weak(v556);
          if ((v789[23] & 0x80000000) == 0)
            goto LABEL_909;
LABEL_908:
          operator delete(*(void **)v789);
          goto LABEL_909;
        }
      }
      if ((v789[23] & 0x80000000) != 0)
        goto LABEL_908;
LABEL_909:
      sub_22456D250("%.3f", &v761, (double)*((uint64_t *)v764 + 12) / 1000000000.0, v738);
      v559 = *((_QWORD *)v764 + 2);
      v560 = *((_OWORD *)v764 + 3);
      *(_OWORD *)v758 = *((_OWORD *)v764 + 2);
      *(_OWORD *)&v758[16] = v560;
      v561 = *((_OWORD *)v764 + 5);
      v759 = *((_OWORD *)v764 + 4);
      v760 = v561;
      *(_QWORD *)v789 = "cv3d.recon.";
      *(_QWORD *)&v789[8] = 11;
      *(_QWORD *)&v789[16] = "Keyframing.Pose";
      *(_QWORD *)&v789[24] = 15;
      sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v562 = sub_2241471F8();
        v563 = v562[2];
        if (!v563)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v563 = v562[2];
        }
        v564 = *(_QWORD *)(v563 + 64);
        v565 = (std::mutex *)(v564 + 32);
        std::mutex::lock((std::mutex *)(v564 + 32));
        v567 = *(_QWORD *)(v564 + 96);
        v566 = *(_QWORD *)(v564 + 104);
        std::mutex::unlock(v565);
        if (v567 != v566)
        {
          sub_2241471F8();
          v568 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v568 + 24))(v568))
          {
            memset(__p, 0, sizeof(__p));
            LODWORD(v776) = 728325608;
            kdebug_trace();
            sub_224141CD8((uint64_t *)&v773, v758, flt_22469B46C);
            if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
              sub_223197FA4(&__dst, v761.__r_.__value_.__l.__data_, v761.__r_.__value_.__l.__size_);
            else
              __dst = v761;
            v757 = 1;
            v569 = v773.__r_.__value_.__r.__words[0];
            v570 = operator new();
            *(_BYTE *)v570 = 0;
            *(_DWORD *)(v570 + 128) = -1;
            v571 = *(unsigned int *)(v569 + 128);
            if ((_DWORD)v571 != -1)
            {
              ((void (*)(uint64_t (***)(), uint64_t, std::string::size_type))off_24EC6BD10[v571])(&v786, v570, v569);
              *(_DWORD *)(v570 + 128) = v571;
            }
            *(_BYTE *)(v570 + 136) = *(_BYTE *)(v569 + 136);
            *(_QWORD *)v789 = v570;
            v789[8] = 0;
            v789[32] = 0;
            if (v757)
            {
              *(std::string *)&v789[8] = __dst;
              memset(&__dst, 0, sizeof(__dst));
              v789[32] = 1;
            }
            LOBYTE(v790) = 0;
            LOBYTE(v792) = 0;
            sub_22352DE04((double *)&qword_255788F20, v568, (uint64_t)v789, (uint64_t)&v761);
            if ((_BYTE)v792 && v791 < 0)
              operator delete(v790);
            if (v789[32] && (v789[31] & 0x80000000) != 0)
              operator delete(*(void **)&v789[8]);
            v572 = *(_QWORD *)v789;
            *(_QWORD *)v789 = 0;
            if (v572)
              MEMORY[0x227684CE8](v572, 0x1000C4072FAA15ELL);
            if (v757 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            v573 = v773.__r_.__value_.__r.__words[0];
            v773.__r_.__value_.__r.__words[0] = 0;
            if (v573)
              MEMORY[0x227684CE8](v573, 0x1000C4072FAA15ELL);
            kdebug_trace();
          }
        }
      }
      memset(v789, 0, 32);
      *(_DWORD *)&v789[32] = 728325624;
      kdebug_trace();
      v574 = BYTE7(v751);
      if (SBYTE7(v751) < 0)
        v574 = (unint64_t)v750[1];
      if (v574 >= 0x11)
      {
        v575 = v750;
        if (SBYTE7(v751) < 0)
          v575 = (void **)v750[0];
        v576 = *v575;
        v577 = v575[1];
        v578 = *((unsigned __int8 *)v575 + 16);
        if (v576 == (void *)0x6365722E64337663 && v577 == (void *)0x73746174532E6E6FLL && v578 == 46)
        {
          sub_223187510();
          sub_224141CD8((uint64_t *)__p, v758, flt_22469B46C);
          if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v754, v761.__r_.__value_.__l.__data_, v761.__r_.__value_.__l.__size_);
          else
            v754 = v761;
          v755 = 1;
          v581 = *(_QWORD *)__p;
          v582 = operator new();
          *(_BYTE *)v582 = 0;
          *(_DWORD *)(v582 + 128) = -1;
          v583 = *(unsigned int *)(v581 + 128);
          if ((_DWORD)v583 != -1)
          {
            ((void (*)(std::string *, uint64_t, uint64_t))off_24EC6BD10[v583])(&v773, v582, v581);
            *(_DWORD *)(v582 + 128) = v583;
          }
          *(_BYTE *)(v582 + 136) = *(_BYTE *)(v581 + 136);
          if (v755)
          {
            v584 = (void *)v754.__r_.__value_.__r.__words[0];
            v585 = SHIBYTE(v754.__r_.__value_.__r.__words[2]);
            memset(&v754, 0, sizeof(v754));
            if (v585 < 0)
              operator delete(v584);
          }
          MEMORY[0x227684CE8](v582, 0x1000C4072FAA15ELL);
          if (v755 && SHIBYTE(v754.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v754.__r_.__value_.__l.__data_);
          v586 = *(_QWORD *)__p;
          *(_QWORD *)__p = 0;
          if (v586)
            MEMORY[0x227684CE8](v586, 0x1000C4072FAA15ELL);
        }
      }
      kdebug_trace();
      if (SBYTE7(v751) < 0)
        operator delete(v750[0]);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v587 = sub_2241471F8();
        v588 = v587[2];
        if (!v588)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_1236;
          }
          v588 = v587[2];
        }
        v589 = *(_QWORD *)(v588 + 64);
        v590 = (std::mutex *)(v589 + 32);
        std::mutex::lock((std::mutex *)(v589 + 32));
        v592 = *(_QWORD *)(v589 + 96);
        v591 = *(_QWORD *)(v589 + 104);
        std::mutex::unlock(v590);
        if (v592 != v591)
        {
          *(_QWORD *)v789 = "cv3d.recon.";
          *(_QWORD *)&v789[8] = 11;
          *(_QWORD *)&v789[16] = "Keyframing.Pose";
          *(_QWORD *)&v789[24] = 15;
          sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, &v753);
          sub_2241471F8();
          v593 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v593 + 24))(v593))
          {
            *(_OWORD *)v750 = 0u;
            v751 = 0u;
            v752 = 728325616;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v593 + 24))(v593))
            {
              if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
                sub_223197FA4(&v772, v761.__r_.__value_.__l.__data_, v761.__r_.__value_.__l.__size_);
              else
                v772 = v761;
              *(_QWORD *)&v771 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v744 = v744 & 0xFFFFFFFFFFFFFF00 | 2;
              *((_QWORD *)&v771 + 1) = v744;
              v594 = sub_2241471F8();
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v593 + 24))(v593))
                goto LABEL_1034;
              if (sub_2231D01EC(v559))
              {
                v595 = sub_2231D0224(v559);
                *(_OWORD *)__p = xmmword_2246539C0;
                *(_OWORD *)&__p[16] = unk_2246539D0;
                v776 = xmmword_2246539E0;
                v777 = unk_2246539F0;
                v786 = v537;
                LODWORD(v787) = 1061997773;
                sub_224002D14(v595, (int32x2_t *)__p, (uint64_t *)&v786, (uint64_t)v789, 0.1);
              }
              else
              {
                sub_2241498F4((uint64_t)v789, 0);
              }
              *(std::string *)__p = v772;
              memset(&v772, 0, sizeof(v772));
              __p[24] = 1;
              sub_22329F414((uint64_t)v789, (__int128 *)__p, &v771, &v773);
              if (__p[24] && (__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              sub_22316F8F4((uint64_t *)v789);
              v596 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v593 + 56))(v593);
              v597 = *v596;
              v598 = (std::__shared_weak_count *)v596[1];
              if (v598)
              {
                p_shared_owners = (unint64_t *)&v598->__shared_owners_;
                do
                  v600 = __ldxr(p_shared_owners);
                while (__stxr(v600 + 1, p_shared_owners));
              }
              v601 = *(_OWORD *)&v773.__r_.__value_.__r.__words[1];
              v786 = &off_24EC6A3B8;
              v787 = *(_OWORD *)&v773.__r_.__value_.__r.__words[1];
              *(_OWORD *)&v773.__r_.__value_.__r.__words[1] = 0uLL;
              *(_QWORD *)v789 = v597;
              *(_QWORD *)&v789[8] = v598;
              if (v598)
              {
                v602 = (unint64_t *)&v598->__shared_owners_;
                do
                  v603 = __ldxr(v602);
                while (__stxr(v603 + 1, v602));
              }
              *(_QWORD *)&v789[16] = &off_24EC6A3B8;
              *(_OWORD *)&v789[24] = v601;
              if (*((_QWORD *)&v601 + 1))
              {
                v604 = (unint64_t *)(*((_QWORD *)&v601 + 1) + 8);
                do
                  v605 = __ldxr(v604);
                while (__stxr(v605 + 1, v604));
              }
              (*(void (**)(uint64_t *, _BYTE *))(*v594 + 16))(v594, v789);
              v606 = *(std::__shared_weak_count **)&v789[32];
              if (*(_QWORD *)&v789[32])
              {
                v607 = (unint64_t *)(*(_QWORD *)&v789[32] + 8);
                do
                  v608 = __ldaxr(v607);
                while (__stlxr(v608 - 1, v607));
                if (!v608)
                {
                  ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
                  std::__shared_weak_count::__release_weak(v606);
                }
              }
              v609 = *(std::__shared_weak_count **)&v789[8];
              if (*(_QWORD *)&v789[8])
              {
                v610 = (unint64_t *)(*(_QWORD *)&v789[8] + 8);
                do
                  v611 = __ldaxr(v610);
                while (__stlxr(v611 - 1, v610));
                if (!v611)
                {
                  ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
                  std::__shared_weak_count::__release_weak(v609);
                }
              }
              v612 = (std::__shared_weak_count *)*((_QWORD *)&v787 + 1);
              if (*((_QWORD *)&v787 + 1))
              {
                v613 = (unint64_t *)(*((_QWORD *)&v787 + 1) + 8);
                do
                  v614 = __ldaxr(v613);
                while (__stlxr(v614 - 1, v613));
                if (!v614)
                {
                  ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
                  std::__shared_weak_count::__release_weak(v612);
                }
              }
              if (v598)
              {
                v615 = (unint64_t *)&v598->__shared_owners_;
                do
                  v616 = __ldaxr(v615);
                while (__stlxr(v616 - 1, v615));
                if (!v616)
                {
                  ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
                  std::__shared_weak_count::__release_weak(v598);
                  v617 = (std::__shared_weak_count *)v773.__r_.__value_.__r.__words[2];
                  if (v773.__r_.__value_.__r.__words[2])
                    goto LABEL_1031;
                  goto LABEL_1034;
                }
              }
              v617 = (std::__shared_weak_count *)v773.__r_.__value_.__r.__words[2];
              if (!v773.__r_.__value_.__r.__words[2])
                goto LABEL_1034;
LABEL_1031:
              v618 = (unint64_t *)&v617->__shared_owners_;
              do
                v619 = __ldaxr(v618);
              while (__stlxr(v619 - 1, v618));
              if (v619)
              {
LABEL_1034:
                if (SHIBYTE(v772.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_1035;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
                std::__shared_weak_count::__release_weak(v617);
                if (SHIBYTE(v772.__r_.__value_.__r.__words[2]) < 0)
LABEL_1035:
                  operator delete(v772.__r_.__value_.__l.__data_);
              }
            }
            kdebug_trace();
          }
          if (SHIBYTE(v753.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v753.__r_.__value_.__l.__data_);
        }
      }
      *(_QWORD *)v789 = "cv3d.recon.";
      *(_QWORD *)&v789[8] = 11;
      *(_QWORD *)&v789[16] = "Keyframing.PointCloud";
      *(_QWORD *)&v789[24] = 21;
      sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v750);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v620 = sub_2241471F8();
        v621 = v620[2];
        if (!v621)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v621 = v620[2];
        }
        v622 = *(_QWORD *)(v621 + 64);
        v623 = (std::mutex *)(v622 + 32);
        std::mutex::lock((std::mutex *)(v622 + 32));
        v625 = *(_QWORD *)(v622 + 96);
        v624 = *(_QWORD *)(v622 + 104);
        std::mutex::unlock(v623);
        if (v625 != v624)
        {
          sub_2241471F8();
          v626 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v626 + 24))(v626))
          {
            memset(__p, 0, sizeof(__p));
            LODWORD(v776) = 728325608;
            kdebug_trace();
            sub_224141CD8((uint64_t *)&v773, v758, flt_22469B46C);
            if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
              sub_223197FA4(&v748, v761.__r_.__value_.__l.__data_, v761.__r_.__value_.__l.__size_);
            else
              v748 = v761;
            v749 = 1;
            v627 = v773.__r_.__value_.__r.__words[0];
            v628 = operator new();
            *(_BYTE *)v628 = 0;
            *(_DWORD *)(v628 + 128) = -1;
            v629 = *(unsigned int *)(v627 + 128);
            if ((_DWORD)v629 != -1)
            {
              ((void (*)(uint64_t (***)(), uint64_t, std::string::size_type))off_24EC6BD10[v629])(&v786, v628, v627);
              *(_DWORD *)(v628 + 128) = v629;
            }
            *(_BYTE *)(v628 + 136) = *(_BYTE *)(v627 + 136);
            *(_QWORD *)v789 = v628;
            v789[8] = 0;
            v789[32] = 0;
            if (v749)
            {
              *(std::string *)&v789[8] = v748;
              memset(&v748, 0, sizeof(v748));
              v789[32] = 1;
            }
            LOBYTE(v790) = 0;
            LOBYTE(v792) = 0;
            sub_22352DE04((double *)&qword_255788F20, v626, (uint64_t)v789, (uint64_t)&v761);
            if ((_BYTE)v792 && v791 < 0)
              operator delete(v790);
            if (v789[32] && (v789[31] & 0x80000000) != 0)
              operator delete(*(void **)&v789[8]);
            v630 = *(_QWORD *)v789;
            *(_QWORD *)v789 = 0;
            if (v630)
              MEMORY[0x227684CE8](v630, 0x1000C4072FAA15ELL);
            if (v749 && SHIBYTE(v748.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v748.__r_.__value_.__l.__data_);
            v631 = v773.__r_.__value_.__r.__words[0];
            v773.__r_.__value_.__r.__words[0] = 0;
            if (v631)
              MEMORY[0x227684CE8](v631, 0x1000C4072FAA15ELL);
            kdebug_trace();
          }
        }
      }
      memset(v789, 0, 32);
      *(_DWORD *)&v789[32] = 728325624;
      kdebug_trace();
      v632 = BYTE7(v751);
      if (SBYTE7(v751) < 0)
        v632 = (unint64_t)v750[1];
      if (v632 >= 0x11)
      {
        v633 = v750;
        if (SBYTE7(v751) < 0)
          v633 = (void **)v750[0];
        v634 = *v633;
        v635 = v633[1];
        v636 = *((unsigned __int8 *)v633 + 16);
        if (v634 == (void *)0x6365722E64337663 && v635 == (void *)0x73746174532E6E6FLL && v636 == 46)
        {
          sub_223187510();
          sub_224141CD8((uint64_t *)__p, v758, flt_22469B46C);
          if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v746, v761.__r_.__value_.__l.__data_, v761.__r_.__value_.__l.__size_);
          else
            v746 = v761;
          v747 = 1;
          v639 = *(_QWORD *)__p;
          v640 = operator new();
          *(_BYTE *)v640 = 0;
          *(_DWORD *)(v640 + 128) = -1;
          v641 = *(unsigned int *)(v639 + 128);
          if ((_DWORD)v641 != -1)
          {
            ((void (*)(std::string *, uint64_t, uint64_t))off_24EC6BD10[v641])(&v773, v640, v639);
            *(_DWORD *)(v640 + 128) = v641;
          }
          *(_BYTE *)(v640 + 136) = *(_BYTE *)(v639 + 136);
          if (v747)
          {
            v642 = (void *)v746.__r_.__value_.__r.__words[0];
            v643 = SHIBYTE(v746.__r_.__value_.__r.__words[2]);
            memset(&v746, 0, sizeof(v746));
            if (v643 < 0)
              operator delete(v642);
          }
          MEMORY[0x227684CE8](v640, 0x1000C4072FAA15ELL);
          if (v747 && SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v746.__r_.__value_.__l.__data_);
          v644 = *(_QWORD *)__p;
          *(_QWORD *)__p = 0;
          if (v644)
            MEMORY[0x227684CE8](v644, 0x1000C4072FAA15ELL);
        }
      }
      kdebug_trace();
      if (SBYTE7(v751) < 0)
        operator delete(v750[0]);
      sub_224569D7C();
      sub_224569A80();
      if (!os_variant_has_internal_diagnostics())
      {
LABEL_1157:
        if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1104;
        goto LABEL_1158;
      }
      v645 = sub_2241471F8();
      v646 = v645[2];
      if (!v646)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
LABEL_1236:
          abort();
        }
        v646 = v645[2];
      }
      v647 = *(_QWORD *)(v646 + 64);
      v648 = (std::mutex *)(v647 + 32);
      std::mutex::lock((std::mutex *)(v647 + 32));
      v650 = *(_QWORD *)(v647 + 96);
      v649 = *(_QWORD *)(v647 + 104);
      std::mutex::unlock(v648);
      if (v650 == v649)
      {
        if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1104;
        goto LABEL_1158;
      }
      *(_QWORD *)v789 = "cv3d.recon.";
      *(_QWORD *)&v789[8] = 11;
      *(_QWORD *)&v789[16] = "Keyframing.PointCloud";
      *(_QWORD *)&v789[24] = 21;
      sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, &v753);
      sub_2241471F8();
      v651 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v651 + 24))(v651))
      {
        *(_OWORD *)v750 = 0u;
        v751 = 0u;
        v752 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v651 + 24))(v651))
        {
          if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v772, v761.__r_.__value_.__l.__data_, v761.__r_.__value_.__l.__size_);
          else
            v772 = v761;
          *(_QWORD *)&v771 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v743 = v743 & 0xFFFFFFFFFFFFFF00 | 2;
          *((_QWORD *)&v771 + 1) = v743;
          v653 = sub_2241471F8();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v651 + 24))(v651))
            goto LABEL_1153;
          sub_2241498F4((uint64_t)__p, 0);
          if (sub_2231D01EC(v559))
          {
            v739 = v653;
            sub_223CA3918(v559, a2, 0, (uint64_t)v789);
            sub_22316DC58((uint64_t)__p, (uint64_t)v789);
            sub_22316DE28((uint64_t)__p, *(uint64_t **)v789, *(uint64_t **)&v789[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v789[8] - *(_QWORD *)v789) >> 2));
            v785 = 1;
            sub_22316F4C8((uint64_t)v784, (uint64_t)&v792);
            sub_22316F650(v784, (char *)v792, v793, (v793 - (_BYTE *)v792) >> 2);
            v779[8] = 1;
            sub_22316DC58((uint64_t)v779, (uint64_t)&v796);
            sub_22316DE28((uint64_t)v779, v796, v797, 0xAAAAAAAAAAAAAAABLL * (((char *)v797 - (char *)v796) >> 2));
            if (v794 == v795)
            {
              if (v802 != v803)
              {
                v778 = 1;
                sub_22339E3C8((uint64_t)&v776, 0);
                v683 = v802;
                v684 = v803;
                if (v802 != v803)
                {
                  v685 = *((_QWORD *)&v776 + 1);
                  v740 = v803;
                  do
                  {
                    while (1)
                    {
                      v686 = *v683;
                      v687 = v686 >= 0x21 ? (__int8 *)&unk_224653958 : (char *)&unk_22465395B + 3 * v686;
                      if (v685 >= (unint64_t)v777)
                        break;
                      v680.i8[0] = *v687;
                      v680.f32[0] = (float)v680.u32[0];
                      LOBYTE(v681) = v687[1];
                      LOBYTE(v682) = v687[2];
                      v682 = (float)LODWORD(v682);
                      v680.f32[1] = (float)v681;
                      v680.f32[2] = v682;
                      v681 = v742.i32[0];
                      v680 = vdivq_f32(v680, v742);
                      *(_DWORD *)(v685 + 8) = v680.i32[2];
                      *(_QWORD *)v685 = v680.i64[0];
                      v685 += 12;
                      *((_QWORD *)&v776 + 1) = v685;
                      if (++v683 == v684)
                        goto LABEL_1113;
                    }
                    v688 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v685 - v776) >> 2);
                    v689 = v688 + 1;
                    if (v688 + 1 > 0x1555555555555555)
                      sub_22316E078();
                    if (0x5555555555555556 * ((uint64_t)(v777 - v776) >> 2) > v689)
                      v689 = 0x5555555555555556 * ((uint64_t)(v777 - v776) >> 2);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v777 - v776) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                      v690 = 0x1555555555555555;
                    else
                      v690 = v689;
                    if (v690)
                    {
                      LODWORD(v788) = v690;
                      if (HIDWORD(v777) == -1)
                        sub_22316DD70();
                      v773.__r_.__value_.__r.__words[0] = (std::string::size_type)&v788;
                      v691 = ((uint64_t (*)(std::string *, char *))off_24EC5C310[HIDWORD(v777)])(&v773, (char *)&v777 + 8);
                    }
                    else
                    {
                      v691 = 0;
                      v692 = 0;
                    }
                    v693 = v691 + 12 * v688;
                    v680.i8[0] = *v687;
                    v680.f32[0] = (float)v680.u32[0];
                    LOBYTE(v681) = v687[1];
                    LOBYTE(v682) = v687[2];
                    v682 = (float)LODWORD(v682);
                    v680.f32[1] = (float)v681;
                    v680.f32[2] = v682;
                    v681 = v742.i32[0];
                    v680 = vdivq_f32(v680, v742);
                    *(_DWORD *)(v693 + 8) = v680.i32[2];
                    *(_QWORD *)v693 = v680.i64[0];
                    v694 = *((_QWORD *)&v776 + 1);
                    v695 = v776;
                    v696 = v693;
                    if (*((_QWORD *)&v776 + 1) != (_QWORD)v776)
                    {
                      do
                      {
                        v697 = *(_QWORD *)(v694 - 12);
                        v694 -= 12;
                        v698 = *(_DWORD *)(v694 + 8);
                        *(_QWORD *)(v696 - 12) = v697;
                        v696 -= 12;
                        *(_DWORD *)(v696 + 8) = v698;
                      }
                      while (v694 != v695);
                      v694 = v776;
                    }
                    v685 = v693 + 12;
                    *(_QWORD *)&v776 = v696;
                    *((_QWORD *)&v776 + 1) = v693 + 12;
                    v699 = v777;
                    *(_QWORD *)&v777 = v691 + 12 * v692;
                    if (v694)
                    {
                      v773.__r_.__value_.__r.__words[0] = v694;
                      LODWORD(v773.__r_.__value_.__r.__words[1]) = -1431655765 * ((v699 - v694) >> 2);
                      if (HIDWORD(v777) == -1)
                        sub_22316DD70();
                      v788 = &v773;
                      ((void (*)(std::string **, char *))off_24EC5C300[HIDWORD(v777)])(&v788, (char *)&v777 + 8);
                    }
                    v684 = v740;
                    *((_QWORD *)&v776 + 1) = v685;
                    ++v683;
                  }
                  while (v683 != v740);
                }
              }
            }
            else
            {
              v778 = 1;
              sub_22316DC58((uint64_t)&v776, (uint64_t)&v794);
              sub_22316DE28((uint64_t)&v776, v794, v795, 0xAAAAAAAAAAAAAAABLL * (((char *)v795 - (char *)v794) >> 2));
            }
LABEL_1113:
            if (__src != v801)
            {
              v783 = 1;
              sub_22316F0FC((uint64_t)v782, (uint64_t)&__src);
              sub_22316F27C(v782, (char *)__src, v801, v801 - (_BYTE *)__src);
            }
            if (v798 != v799)
            {
              v781 = 1;
              sub_22316F0FC((uint64_t)v780, (uint64_t)&v798);
              sub_22316F27C(v780, (char *)v798, v799, v799 - (_BYTE *)v798);
            }
            sub_22326055C((uint64_t *)v789);
            v653 = v739;
          }
          v773 = v772;
          memset(&v772, 0, sizeof(v772));
          v774 = 1;
          sub_22329F414((uint64_t)__p, (__int128 *)&v773, &v771, &v786);
          if (v774 && SHIBYTE(v773.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v773.__r_.__value_.__l.__data_);
          sub_22316F8F4((uint64_t *)__p);
          v654 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v651 + 56))(v651);
          v655 = *v654;
          v656 = (std::__shared_weak_count *)v654[1];
          if (v656)
          {
            v657 = (unint64_t *)&v656->__shared_owners_;
            do
              v658 = __ldxr(v657);
            while (__stxr(v658 + 1, v657));
          }
          v659 = v787;
          *(_QWORD *)__p = &off_24EC6A3B8;
          *(_OWORD *)&__p[8] = v787;
          v787 = 0uLL;
          *(_QWORD *)v789 = v655;
          *(_QWORD *)&v789[8] = v656;
          if (v656)
          {
            v660 = (unint64_t *)&v656->__shared_owners_;
            do
              v661 = __ldxr(v660);
            while (__stxr(v661 + 1, v660));
          }
          *(_QWORD *)&v789[16] = &off_24EC6A3B8;
          *(_OWORD *)&v789[24] = v659;
          if (*((_QWORD *)&v659 + 1))
          {
            v662 = (unint64_t *)(*((_QWORD *)&v659 + 1) + 8);
            do
              v663 = __ldxr(v662);
            while (__stxr(v663 + 1, v662));
          }
          (*(void (**)(uint64_t *, _BYTE *))(*v653 + 16))(v653, v789);
          v664 = *(std::__shared_weak_count **)&v789[32];
          if (*(_QWORD *)&v789[32])
          {
            v665 = (unint64_t *)(*(_QWORD *)&v789[32] + 8);
            do
              v666 = __ldaxr(v665);
            while (__stlxr(v666 - 1, v665));
            if (!v666)
            {
              ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
              std::__shared_weak_count::__release_weak(v664);
            }
          }
          v667 = *(std::__shared_weak_count **)&v789[8];
          if (*(_QWORD *)&v789[8])
          {
            v668 = (unint64_t *)(*(_QWORD *)&v789[8] + 8);
            do
              v669 = __ldaxr(v668);
            while (__stlxr(v669 - 1, v668));
            if (!v669)
            {
              ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
              std::__shared_weak_count::__release_weak(v667);
            }
          }
          v670 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v671 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v672 = __ldaxr(v671);
            while (__stlxr(v672 - 1, v671));
            if (!v672)
            {
              ((void (*)(std::__shared_weak_count *))v670->__on_zero_shared)(v670);
              std::__shared_weak_count::__release_weak(v670);
            }
          }
          if (v656)
          {
            v673 = (unint64_t *)&v656->__shared_owners_;
            do
              v674 = __ldaxr(v673);
            while (__stlxr(v674 - 1, v673));
            if (!v674)
            {
              ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
              std::__shared_weak_count::__release_weak(v656);
              v675 = (std::__shared_weak_count *)*((_QWORD *)&v787 + 1);
              if (*((_QWORD *)&v787 + 1))
                goto LABEL_1150;
              goto LABEL_1153;
            }
          }
          v675 = (std::__shared_weak_count *)*((_QWORD *)&v787 + 1);
          if (!*((_QWORD *)&v787 + 1))
            goto LABEL_1153;
LABEL_1150:
          v676 = (unint64_t *)&v675->__shared_owners_;
          do
            v677 = __ldaxr(v676);
          while (__stlxr(v677 - 1, v676));
          if (v677)
          {
LABEL_1153:
            if (SHIBYTE(v772.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_1154;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
            std::__shared_weak_count::__release_weak(v675);
            if (SHIBYTE(v772.__r_.__value_.__r.__words[2]) < 0)
LABEL_1154:
              operator delete(v772.__r_.__value_.__l.__data_);
          }
        }
        kdebug_trace();
      }
      if ((SHIBYTE(v753.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1157;
      operator delete(v753.__r_.__value_.__l.__data_);
      if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_1104:
        operator delete(v761.__r_.__value_.__l.__data_);
        v652 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
        if (*((_QWORD *)&v762 + 1))
          goto LABEL_1159;
        goto LABEL_857;
      }
LABEL_1158:
      v652 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
      if (*((_QWORD *)&v762 + 1))
      {
LABEL_1159:
        v678 = (unint64_t *)&v652->__shared_owners_;
        do
          v679 = __ldaxr(v678);
        while (__stlxr(v679 - 1, v678));
        if (!v679)
        {
          ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
          std::__shared_weak_count::__release_weak(v652);
        }
      }
LABEL_857:
      v535 += 248;
      ++v536;
    }
    while (v535 != v745);
  }
  *(_QWORD *)v789 = "cv3d.recon.";
  *(_QWORD *)&v789[8] = 11;
  *(_QWORD *)&v789[16] = "Stats.Keyframing.update";
  *(_QWORD *)&v789[24] = 23;
  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v700 = sub_2241471F8();
    v701 = v700[2];
    if (!v701)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v701 = v700[2];
    }
    v702 = *(_QWORD *)(v701 + 64);
    v703 = (std::mutex *)(v702 + 32);
    std::mutex::lock((std::mutex *)(v702 + 32));
    v705 = *(_QWORD *)(v702 + 96);
    v704 = *(_QWORD *)(v702 + 104);
    std::mutex::unlock(v703);
    if (v705 != v704)
    {
      sub_2241471F8();
      v706 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v706 + 24))(v706))
      {
        memset(v789, 0, 32);
        *(_DWORD *)&v789[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v706 + 24))(v706))
        {
          *(_QWORD *)v758 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v758[8] = 2;
          v707 = sub_2241471F8();
          sub_2234277D4((uint64_t)v707, v706, (uint64_t)&v767, (uint64_t)&unk_2245C9EFE, (__int128 *)v758);
        }
        kdebug_trace();
      }
    }
  }
  memset(v789, 0, 32);
  *(_DWORD *)&v789[32] = 728325624;
  kdebug_trace();
  v708 = __p[23];
  if (__p[23] < 0)
    v708 = *(_QWORD *)&__p[8];
  if (v708 >= 0x11)
  {
    v709 = __p;
    if (__p[23] < 0)
      v709 = *(_BYTE **)__p;
    v710 = *(_QWORD *)v709;
    v711 = *((_QWORD *)v709 + 1);
    v712 = v709[16];
    if (v710 == 0x6365722E64337663 && v711 == 0x73746174532E6E6FLL && v712 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_1225:
  v715 = (std::__shared_weak_count *)*((_QWORD *)&v767 + 1);
  if (*((_QWORD *)&v767 + 1))
  {
    v716 = (unint64_t *)(*((_QWORD *)&v767 + 1) + 8);
    do
      v717 = __ldaxr(v716);
    while (__stlxr(v717 - 1, v716));
    if (!v717)
    {
      ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
      std::__shared_weak_count::__release_weak(v715);
    }
  }
}

void sub_2238C42C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC((uint64_t)&STACK[0x450]);
  if (a62 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_2238C5124(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2235347B4((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C5244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238C5260(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2235347B4((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C5380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238C539C(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2235347B4((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C54BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238C54D8(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2235347B4((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C55F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238C5614(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  uint64_t result;
  _BYTE v4[24];
  int v5;
  void *__p[2];
  char v7;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  int v11;
  _OWORD v12[4];
  _QWORD v13[5];
  _QWORD *v14;

  v5 = 0;
  v1 = a1[1];
  v12[0] = *a1;
  v12[1] = v1;
  v2 = a1[3];
  v12[2] = a1[2];
  v12[3] = v2;
  v8 = 0x400000004;
  v9 = 4;
  v10 = v12;
  v11 = 0;
  sub_224505D70((unsigned int *)&v8, __p);
  v13[0] = v4;
  v13[1] = __p;
  v13[2] = v4;
  v13[3] = __p;
  v13[4] = __p;
  v14 = v13;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v14, v4);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v5 == -1)
    sub_22316DD70();
  *(_QWORD *)&v12[0] = v13;
  result = ((uint64_t (*)(_OWORD *, _BYTE *))off_24EC5C2E8[v5])(v12, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_OWORD *, _BYTE *))off_24EC5C2D0[v5])(v12, v4);
  return result;
}

void sub_2238C572C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238C5744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2238C5768(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  std::string __p;
  _QWORD v6[5];
  _QWORD *v7;

  v4 = 0;
  sub_2233025E8(a2, &__p);
  v6[0] = v3;
  v6[1] = &__p;
  v6[2] = v3;
  v6[3] = &__p;
  v6[4] = &__p;
  v7 = v6;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v7, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v4 == -1)
    sub_22316DD70();
  v6[0] = &__p;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5C2E8[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5C2D0[v4])(v6, v3);
  return result;
}

void sub_2238C5854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238C586C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL sub_2238C5890(double **a1)
{
  double *v1;
  double *v2;

  v1 = *a1;
  v2 = a1[1];
  return **a1 == *v2
      && v1[1] == v2[1]
      && v1[2] == v2[2]
      && v1[3] == v2[3]
      && v1[4] == v2[4]
      && v1[5] == v2[5]
      && v1[6] == v2[6]
      && v1[7] == v2[7]
      && v1[8] == v2[8]
      && v1[9] == v2[9]
      && v1[10] == v2[10]
      && v1[11] == v2[11]
      && v1[12] == v2[12]
      && v1[13] == v2[13]
      && v1[14] == v2[14]
      && v1[15] == v2[15];
}

double sub_2238C59A4@<D0>(unsigned __int8 **a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X2>, unsigned __int8 **a4@<X3>, unsigned __int8 **a5@<X4>, uint64_t a6@<X8>)
{
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *i;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  double result;
  unsigned __int8 *v28;
  __int128 v29;

  v10 = *a1;
  v11 = *a2;
  if (*a1 == *a2)
  {
LABEL_31:
    v11 = v10;
  }
  else
  {
    for (i = *a3; *a3 != *a4; i = *a3)
    {
      if ((sub_22319835C(v10 + 25, i + 25) & 0x80) != 0)
      {
        sub_2238C5B70((_QWORD **)a5, *a1 + 25);
        v22 = *a1;
        v23 = (unsigned __int8 *)*((_QWORD *)*a1 + 1);
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = *(unsigned __int8 **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
            v18 = *(_QWORD *)v24 == (_QWORD)v22;
            v22 = v24;
          }
          while (!v18);
        }
        *a1 = v24;
        v10 = v24;
        v11 = *a2;
        if (v24 == *a2)
          goto LABEL_31;
      }
      else
      {
        if ((sub_22319835C(*a3 + 25, *a1 + 25) & 0x80) != 0)
        {
          v25 = *a3;
          v26 = (unsigned __int8 *)*((_QWORD *)*a3 + 1);
          if (v26)
          {
            do
            {
              v21 = v26;
              v26 = *(unsigned __int8 **)v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v21 = (unsigned __int8 *)*((_QWORD *)v25 + 2);
              v18 = *(_QWORD *)v21 == (_QWORD)v25;
              v25 = v21;
            }
            while (!v18);
          }
        }
        else
        {
          v15 = *a1;
          v16 = (unsigned __int8 *)*((_QWORD *)*a1 + 1);
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = *(unsigned __int8 **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
              v18 = *(_QWORD *)v17 == (_QWORD)v15;
              v15 = v17;
            }
            while (!v18);
          }
          *a1 = v17;
          v19 = *a3;
          v20 = (unsigned __int8 *)*((_QWORD *)*a3 + 1);
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = *(unsigned __int8 **)v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (unsigned __int8 *)*((_QWORD *)v19 + 2);
              v18 = *(_QWORD *)v21 == (_QWORD)v19;
              v19 = v21;
            }
            while (!v18);
          }
        }
        *a3 = v21;
        v10 = *a1;
        v11 = *a2;
        if (*a1 == *a2)
          goto LABEL_31;
      }
    }
  }
  sub_2238C5C64(v10, v11, *a5, (uint64_t *)a5[1], &v28);
  *(_QWORD *)a6 = v28;
  result = *(double *)&v29;
  *(_OWORD *)(a6 + 8) = v29;
  return result;
}

_QWORD **sub_2238C5B70(_QWORD **a1, unsigned __int8 *a2)
{
  uint64_t **v4;
  unsigned __int8 *v5;
  char *v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  BOOL v13;
  uint64_t v15;
  unsigned __int8 *v16;

  v4 = (uint64_t **)*a1;
  v5 = sub_223426D4C(*a1, a1[1], &v16, &v15, a2);
  v6 = *(char **)v5;
  if (*(_QWORD *)v5)
  {
    a1[1] = v6;
    v7 = (char *)*((_QWORD *)v6 + 1);
    if (!v7)
    {
      do
      {
LABEL_9:
        v12 = (char *)*((_QWORD *)v6 + 2);
        v13 = *(_QWORD *)v12 == (_QWORD)v6;
        v6 = v12;
      }
      while (!v13);
      goto LABEL_11;
    }
  }
  else
  {
    v8 = v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 25) = *(_OWORD *)a2;
    v9 = v16;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v9;
    *(_QWORD *)v8 = v6;
    v10 = (uint64_t *)**v4;
    v11 = (uint64_t *)v6;
    if (v10)
    {
      *v4 = v10;
      v11 = *(uint64_t **)v8;
    }
    sub_2231A9A8C(v4[1], v11);
    v4[2] = (uint64_t *)((char *)v4[2] + 1);
    a1[1] = v6;
    v7 = (char *)*((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_9;
  }
  do
  {
    v12 = v7;
    v7 = *(char **)v7;
  }
  while (v7);
LABEL_11:
  a1[1] = v12;
  return a1;
}

void sub_2238C5C64(unsigned __int8 *a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, uint64_t *a4@<X4>, unsigned __int8 **a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v9;
  char *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t *v15;
  BOOL v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;

  v6 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v9 = sub_223426D4C(a3, a4, &v20, &v19, v6 + 25);
      v10 = *(char **)v9;
      if (*(_QWORD *)v9)
      {
        v11 = (uint64_t *)*((_QWORD *)v10 + 1);
        if (!v11)
          goto LABEL_12;
      }
      else
      {
        v12 = v9;
        v10 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v10 + 25) = *(_OWORD *)(v6 + 25);
        v13 = v20;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v13;
        *(_QWORD *)v12 = v10;
        v14 = **(_QWORD ***)a3;
        v15 = (uint64_t *)v10;
        if (v14)
        {
          *(_QWORD *)a3 = v14;
          v15 = *(uint64_t **)v12;
        }
        sub_2231A9A8C(*((uint64_t **)a3 + 1), v15);
        ++*((_QWORD *)a3 + 2);
        v11 = (uint64_t *)*((_QWORD *)v10 + 1);
        if (!v11)
        {
          do
          {
LABEL_12:
            a4 = (uint64_t *)*((_QWORD *)v10 + 2);
            v16 = *a4 == (_QWORD)v10;
            v10 = (char *)a4;
          }
          while (!v16);
          goto LABEL_14;
        }
      }
      do
      {
        a4 = v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
LABEL_14:
      v17 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(unsigned __int8 **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v16 = *(_QWORD *)v18 == (_QWORD)v6;
          v6 = v18;
        }
        while (!v16);
      }
      v6 = v18;
      if (v18 == a2)
      {
        v6 = a2;
        break;
      }
    }
  }
  *a5 = v6;
  a5[1] = a3;
  a5[2] = (unsigned __int8 *)a4;
}

void sub_2238C5DB0(uint64_t a1, uint64_t a2, double a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v18;
  std::string::size_type v19;
  int v20;
  __n128 *v23;
  size_t v24;
  std::string *v25;
  std::string::size_type v26;
  unsigned __int8 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::mutex *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  int v41;
  BOOL v42;
  __n128 *v44;
  std::string *v45;
  size_t v46;
  double v47;
  double v48;
  double v49;
  std::string __p;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = (std::mutex *)(a1 + 4640);
  std::mutex::lock((std::mutex *)(a1 + 4640));
  v7 = *(_QWORD *)(a1 + 4704);
  if (a2)
    ++v7;
  *(_QWORD *)(a1 + 4704) = v7;
  std::mutex::unlock(v6);
  *(_QWORD *)&v51 = "cv3d.recon.";
  *((_QWORD *)&v51 + 1) = 11;
  *(_QWORD *)&v52 = "Stats.aggregated";
  *((_QWORD *)&v52 + 1) = 16;
  sub_2231A9820((uint64_t)&v51, (uint64_t)&v53, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  v8 = (uint64_t *)(a1 + 4704);
  if (os_variant_has_internal_diagnostics())
  {
    v9 = sub_2241471F8();
    v10 = v9[2];
    if (!v10)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v10 = v9[2];
    }
    v11 = *(_QWORD *)(v10 + 64);
    v12 = (std::mutex *)(v11 + 32);
    std::mutex::lock((std::mutex *)(v11 + 32));
    v14 = *(_QWORD *)(v11 + 96);
    v13 = *(_QWORD *)(v11 + 104);
    std::mutex::unlock(v12);
    if (v14 != v13)
    {
      sub_2241471F8();
      v15 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
      {
        v51 = 0u;
        v52 = 0u;
        v53 = 728325608;
        kdebug_trace();
        std::mutex::lock(v6);
        std::mutex::unlock(v6);
        sub_2238C6504((double *)&qword_255788F20, v15, v8, "keyframe_update_count_pose_update_count");
        kdebug_trace();
      }
    }
  }
  v51 = 0u;
  v52 = 0u;
  v53 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v18 = p_p->__r_.__value_.__r.__words[0];
    v19 = p_p->__r_.__value_.__l.__size_;
    v20 = p_p->__r_.__value_.__s.__data_[16];
    if (v18 == 0x6365722E64337663 && v19 == 0x73746174532E6E6FLL && v20 == 46)
    {
      v23 = sub_223187510();
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v26 = __p.__r_.__value_.__l.__size_;
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      std::mutex::lock(v6);
      if ((v24 & 0x80u) != 0)
        v24 = v26;
      else
        v25 = &__p;
      std::mutex::unlock(v6);
      sub_22365B208(v23, v25, v24, v8, (uint64_t)"keyframe_update_count_pose_update_count", 39);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v27 = atomic_load((unsigned __int8 *)&qword_25578E6F0);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_25578E6F0))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2BD8, &qword_25578E6A0, &dword_22314D000);
    __cxa_guard_release(&qword_25578E6F0);
  }
  *(_QWORD *)&v51 = "cv3d.recon.";
  *((_QWORD *)&v51 + 1) = 11;
  *(_QWORD *)&v52 = "Stats.aggregated";
  *((_QWORD *)&v52 + 1) = 16;
  sub_2231A9820((uint64_t)&v51, (uint64_t)&v53, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v28 = sub_2241471F8();
    v29 = v28[2];
    if (!v29)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v29 = v28[2];
    }
    v30 = *(_QWORD *)(v29 + 64);
    v31 = (std::mutex *)(v30 + 32);
    std::mutex::lock((std::mutex *)(v30 + 32));
    v33 = *(_QWORD *)(v30 + 96);
    v32 = *(_QWORD *)(v30 + 104);
    std::mutex::unlock(v31);
    if (v33 != v32)
    {
      sub_2241471F8();
      v34 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
      {
        v51 = 0u;
        v52 = 0u;
        v53 = 728325608;
        kdebug_trace();
        std::mutex::lock(&stru_25578E6B0);
        if (a2)
        {
          qword_25578E6A0 = *(_QWORD *)&a3;
          byte_25578E6A8 = 1;
          v35 = a3;
        }
        else
        {
          if (!byte_25578E6A8)
          {
            v36 = -1.0;
            goto LABEL_41;
          }
          v35 = *(double *)&qword_25578E6A0;
        }
        v36 = a3 - v35;
LABEL_41:
        std::mutex::unlock(&stru_25578E6B0);
        v49 = v36;
        sub_2238C6640((double *)&qword_255788F20, v34, &v49, "time_since_last_pose_update");
        kdebug_trace();
      }
    }
  }
  v51 = 0u;
  v52 = 0u;
  v53 = 728325624;
  kdebug_trace();
  v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = __p.__r_.__value_.__l.__size_;
  if (v37 >= 0x11)
  {
    v38 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v39 = v38->__r_.__value_.__r.__words[0];
    v40 = v38->__r_.__value_.__l.__size_;
    v41 = v38->__r_.__value_.__s.__data_[16];
    v42 = v39 == 0x6365722E64337663 && v40 == 0x73746174532E6E6FLL;
    if (v42 && v41 == 46)
    {
      v44 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &__p;
      else
        v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v46 = __p.__r_.__value_.__l.__size_;
      std::mutex::lock(&stru_25578E6B0);
      if (a2)
      {
        qword_25578E6A0 = *(_QWORD *)&a3;
        byte_25578E6A8 = 1;
        v47 = a3;
      }
      else
      {
        if (!byte_25578E6A8)
        {
          v48 = -1.0;
          goto LABEL_66;
        }
        v47 = *(double *)&qword_25578E6A0;
      }
      v48 = a3 - v47;
LABEL_66:
      std::mutex::unlock(&stru_25578E6B0);
      v49 = v48;
      sub_2231AA374((uint64_t *)v44, v45, v46, (uint64_t *)&v49, (uint64_t)"time_since_last_pose_update", 27);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2238C6484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238C6504(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C6624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238C6640(double *a1, uint64_t a2, double *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AA49C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C6760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238C677C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2238C68B4(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2238C6880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2238C68B4@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 3;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_2238C6A48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2238C6A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2238C6A98(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v15;
  std::string::size_type v16;
  int v17;
  __n128 *v20;
  size_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string __p;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (std::mutex *)(a1 + 4536);
  std::mutex::lock((std::mutex *)(a1 + 4536));
  *(_QWORD *)(a1 + 4600) += a2;
  std::mutex::unlock(v4);
  *(_QWORD *)&v25 = "cv3d.recon.";
  *((_QWORD *)&v25 + 1) = 11;
  *(_QWORD *)&v26 = "Stats.aggregated";
  *((_QWORD *)&v26 + 1) = 16;
  sub_2231A9820((uint64_t)&v25, (uint64_t)&v27, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  v5 = (uint64_t *)(a1 + 4600);
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v6[2];
    }
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        v25 = 0u;
        v26 = 0u;
        v27 = 728325608;
        kdebug_trace();
        std::mutex::lock(v4);
        std::mutex::unlock(v4);
        sub_2238C6E28((double *)&qword_255788F20, v12, v5, "keyframe_update_count_delete_count");
        kdebug_trace();
      }
    }
  }
  v25 = 0u;
  v26 = 0u;
  v27 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v15 = p_p->__r_.__value_.__r.__words[0];
    v16 = p_p->__r_.__value_.__l.__size_;
    v17 = p_p->__r_.__value_.__s.__data_[16];
    if (v15 == 0x6365722E64337663 && v16 == 0x73746174532E6E6FLL && v17 == 46)
    {
      v20 = sub_223187510();
      v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v23 = __p.__r_.__value_.__l.__size_;
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      std::mutex::lock(v4);
      if ((v21 & 0x80u) != 0)
        v21 = v23;
      else
        v22 = &__p;
      std::mutex::unlock(v4);
      sub_22365B208(v20, v22, v21, v5, (uint64_t)"keyframe_update_count_delete_count", 34);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2238C6DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238C6E28(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C6F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238C6F64(uint64_t a1, uint64_t a2, double a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  double v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v20;
  std::string::size_type v21;
  int v22;
  __n128 *v25;
  std::string *v26;
  size_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  std::mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  int v43;
  BOOL v44;
  __n128 *v46;
  std::string *v47;
  size_t v48;
  double v49;
  double v50;
  double v51;
  std::string __p;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25578E748);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25578E748))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2938, &byte_25578E6F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E748);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25578E798);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25578E798))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25578E758, &dword_22314D000);
    __cxa_guard_release(&qword_25578E798);
  }
  std::mutex::lock(&stru_25578E758);
  v8 = atomic_load(byte_25578E750);
  if ((v8 & 1) == 0)
  {
    std::mutex::lock(&stru_25578E708);
    if (!a2 && !byte_25578E6F8)
    {
      qword_25578E700 = *(_QWORD *)&a3;
LABEL_7:
      byte_25578E6F8 = a2 == 0;
      std::mutex::unlock(&stru_25578E708);
      goto LABEL_13;
    }
    if (!a2 || !byte_25578E6F8)
      goto LABEL_7;
    v9 = *(double *)&qword_25578E700;
    byte_25578E6F8 = 0;
    std::mutex::unlock(&stru_25578E708);
    std::mutex::lock((std::mutex *)(a1 + 4424));
    if (!*(_BYTE *)(a1 + 4496))
    {
      *(double *)(a1 + 4488) = a3 - v9;
      *(_BYTE *)(a1 + 4496) = 1;
    }
    std::mutex::unlock((std::mutex *)(a1 + 4424));
    atomic_store(1u, byte_25578E750);
  }
LABEL_13:
  *(_QWORD *)&v53 = "cv3d.recon.";
  *((_QWORD *)&v53 + 1) = 11;
  *(_QWORD *)&v54 = "Stats.aggregated";
  *((_QWORD *)&v54 + 1) = 16;
  sub_2231A9820((uint64_t)&v53, (uint64_t)&v55, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v10 = sub_2241471F8();
    v11 = v10[2];
    if (!v11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = v10[2];
    }
    v12 = *(_QWORD *)(v11 + 64);
    v13 = (std::mutex *)(v12 + 32);
    std::mutex::lock((std::mutex *)(v12 + 32));
    v15 = *(_QWORD *)(v12 + 96);
    v14 = *(_QWORD *)(v12 + 104);
    std::mutex::unlock(v13);
    if (v15 != v14)
    {
      sub_2241471F8();
      v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
      {
        v53 = 0u;
        v54 = 0u;
        v55 = 728325608;
        kdebug_trace();
        std::mutex::lock((std::mutex *)(a1 + 4424));
        std::mutex::unlock((std::mutex *)(a1 + 4424));
        if (*(_BYTE *)(a1 + 4496))
          v17 = *(_QWORD *)(a1 + 4488);
        else
          v17 = 0;
        v51 = *(double *)&v17;
        sub_2238C7854((double *)&qword_255788F20, v16, &v51, "time_to_first_reloc");
        kdebug_trace();
      }
    }
  }
  v53 = 0u;
  v54 = 0u;
  v55 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v20 = p_p->__r_.__value_.__r.__words[0];
    v21 = p_p->__r_.__value_.__l.__size_;
    v22 = p_p->__r_.__value_.__s.__data_[16];
    if (v20 == 0x6365722E64337663 && v21 == 0x73746174532E6E6FLL && v22 == 46)
    {
      v25 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v27 = __p.__r_.__value_.__l.__size_;
      std::mutex::lock((std::mutex *)(a1 + 4424));
      std::mutex::unlock((std::mutex *)(a1 + 4424));
      if (*(_BYTE *)(a1 + 4496))
        v28 = *(_QWORD *)(a1 + 4488);
      else
        v28 = 0;
      v51 = *(double *)&v28;
      sub_2231AA374((uint64_t *)v25, v26, v27, (uint64_t *)&v51, (uint64_t)"time_to_first_reloc", 19);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29 = atomic_load((unsigned __int8 *)&qword_25578E7F0);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_25578E7F0))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2BD8, &qword_25578E7A0, &dword_22314D000);
    __cxa_guard_release(&qword_25578E7F0);
  }
  *(_QWORD *)&v53 = "cv3d.recon.";
  *((_QWORD *)&v53 + 1) = 11;
  *(_QWORD *)&v54 = "Stats.aggregated";
  *((_QWORD *)&v54 + 1) = 16;
  sub_2231A9820((uint64_t)&v53, (uint64_t)&v55, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v30 = sub_2241471F8();
    v31 = v30[2];
    if (!v31)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v31 = v30[2];
    }
    v32 = *(_QWORD *)(v31 + 64);
    v33 = (std::mutex *)(v32 + 32);
    std::mutex::lock((std::mutex *)(v32 + 32));
    v35 = *(_QWORD *)(v32 + 96);
    v34 = *(_QWORD *)(v32 + 104);
    std::mutex::unlock(v33);
    if (v35 != v34)
    {
      sub_2241471F8();
      v36 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36))
      {
        v53 = 0u;
        v54 = 0u;
        v55 = 728325608;
        kdebug_trace();
        std::mutex::lock(&stru_25578E7B0);
        if (a2)
        {
          qword_25578E7A0 = *(_QWORD *)&a3;
          byte_25578E7A8 = 1;
          v37 = a3;
        }
        else
        {
          if (!byte_25578E7A8)
          {
            v38 = -1.0;
            goto LABEL_60;
          }
          v37 = *(double *)&qword_25578E7A0;
        }
        v38 = a3 - v37;
LABEL_60:
        std::mutex::unlock(&stru_25578E7B0);
        v51 = v38;
        sub_223568370((double *)&qword_255788F20, v36, &v51, "time_since_last_reloc");
        kdebug_trace();
      }
    }
  }
  v53 = 0u;
  v54 = 0u;
  v55 = 728325624;
  kdebug_trace();
  v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v39 = __p.__r_.__value_.__l.__size_;
  if (v39 >= 0x11)
  {
    v40 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v41 = v40->__r_.__value_.__r.__words[0];
    v42 = v40->__r_.__value_.__l.__size_;
    v43 = v40->__r_.__value_.__s.__data_[16];
    v44 = v41 == 0x6365722E64337663 && v42 == 0x73746174532E6E6FLL;
    if (v44 && v43 == 46)
    {
      v46 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &__p;
      else
        v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v48 = __p.__r_.__value_.__l.__size_;
      std::mutex::lock(&stru_25578E7B0);
      if (a2)
      {
        qword_25578E7A0 = *(_QWORD *)&a3;
        byte_25578E7A8 = 1;
        v49 = a3;
      }
      else
      {
        if (!byte_25578E7A8)
        {
          v50 = -1.0;
          goto LABEL_85;
        }
        v49 = *(double *)&qword_25578E7A0;
      }
      v50 = a3 - v49;
LABEL_85:
      std::mutex::unlock(&stru_25578E7B0);
      v51 = v50;
      sub_2231AA374((uint64_t *)v46, v47, v48, (uint64_t *)&v51, (uint64_t)"time_since_last_reloc", 21);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock(&stru_25578E758);
}

void sub_2238C77A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238C7854(double *a1, uint64_t a2, double *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AA49C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238C7974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238C7990(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2238C7AC8(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2238C7A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2238C7AC8@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 12;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_2238C7C64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2238C7C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unint64_t sub_2238C7CB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1)
    && ((*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 272))(&v8, a2, a1),
        (v8 & 0x10000000000) != 0))
  {
    sub_2242B0AE8(a1, 1u, "*", 1uLL, a2, &v8);
    v7 = v8;
    v6 = v9;
    v4 = ((unint64_t)v9 - v8) >> 5;
    if (v8)
    {
      if (v9 != (void **)v8)
      {
        do
        {
          if (*((char *)v6 - 9) < 0)
            operator delete(*(v6 - 4));
          v6 -= 4;
        }
        while (v6 != (void **)v7);
        v6 = (void **)v8;
      }
      v9 = (void **)v7;
      operator delete(v6);
    }
  }
  else
  {
    v4 = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_2238C7DD0(uint64_t **a1, uint64_t a2, _QWORD *a3, double a4, float32x4_t a5, __n128 a6, __n128 a7)
{
  float32x2_t v7;
  __n128 v9;
  __n128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  __int128 *v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x16_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  __int128 *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x2_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float v36;
  __int128 *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  __int128 *v51;
  __int128 v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x2_t v55;
  int32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x4_t v60;
  char *v62;
  __int128 *v63;
  char *v64;

  a6.n128_u64[0] = *(_QWORD *)a2;
  v9 = a6;
  a7.n128_u64[0] = *(_QWORD *)(a2 + 16);
  v10 = a7;
  *(_QWORD *)&v11 = *(_QWORD *)(a2 + 32);
  v7.i32[0] = *(_DWORD *)(a2 + 40);
  v13 = *a1;
  v12 = a1[1];
  v14 = (char *)v12 - (char *)*a1;
  if (v12 != *a1)
  {
    v10.n128_u32[2] = *(_DWORD *)(a2 + 24);
    v53 = (int32x4_t)v10;
    v9.n128_u32[2] = *(_DWORD *)(a2 + 8);
    v54 = (int32x4_t)v9;
    v55 = *(int32x2_t *)(a2 + 16);
    v56 = *(int32x2_t *)a2;
    a5.i32[2] = *(_DWORD *)(a2 + 56);
    a5.i64[0] = *(_QWORD *)(a2 + 48);
    v57 = a5;
    v59 = *(float32x2_t *)(a2 + 32);
    if (v14 < 0)
      sub_22316E078();
    v16 = v14 >> 4;
    v17 = (__int128 *)operator new(20 * (v14 >> 4));
    v18 = (float32x2_t)vtrn2q_s32(v54, v53).u64[0];
    v19 = (float32x2_t)vzip2q_s32(v54, v53).u64[0];
    v20 = (int8x16_t)vnegq_f32(v57);
    v21 = (float32x2_t)vzip1_s32(v56, v55);
    *(float32x2_t *)v22.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v21, *(float *)v20.i32), v18, *(float32x2_t *)v57.f32, 1), v19, v57, 2);
    *(float32x2_t *)&v22.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v59, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1), *(float32x2_t *)v57.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), v7);
    v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
    *(float32x2_t *)v24.f32 = vmla_n_f32(vmla_f32(vmul_f32(v21, 0), 0, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v18, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v18, 1), 0xCuLL)), v19, *(float *)&a4);
    *(float32x2_t *)&v24.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v59, 0), 0, v59, 1), *(float32x2_t *)&a4, v7);
    v58 = vaddq_f32(v24, v22);
    v60 = v22;
    v62 = (char *)v17;
    v63 = v17;
    v64 = (char *)v17 + 20 * v16;
    while (1)
    {
      v26 = (float32x2_t *)sub_22381AF00(a3, *v13, v13[1]);
      v27.i32[0] = v26[3].i32[0];
      v28.i32[0] = v26[5].i32[0];
      v29.i32[0] = v26[7].i32[0];
      *(float32x2_t *)v30.f32 = vmla_f32(vmla_f32(vmul_f32(v26[2], 0), 0, v26[4]), v23, v26[6]);
      *(float32x2_t *)&v30.u32[2] = vmla_f32(vmla_f32(vmul_f32(v27, 0), 0, v28), *(float32x2_t *)&a4, v29);
      *(float32x2_t *)v31.f32 = v26[8];
      v31.i32[2] = v26[9].i32[0];
      v32 = (int8x16_t)vsubq_f32(v58, vaddq_f32(v30, v31));
      v33 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
      *(float *)v32.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1), *(float32x2_t *)v32.i8, 1), v33, v33).f32[0]);
      v34 = (int8x16_t)vsubq_f32(v60, v31);
      v35 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
      v36 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), *(float32x2_t *)v34.i8, 1), v35, v35).f32[0])+ *(float *)v32.i32;
      v37 = v63;
      if (v63 < (__int128 *)v64)
      {
        v11 = *(_OWORD *)v13;
        *v63 = *(_OWORD *)v13;
        *((float *)v63 + 4) = v36;
        v25 = (__int128 *)((char *)v63 + 20);
      }
      else
      {
        v38 = v62;
        v39 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v63 - v62) >> 2) + 1;
        if (v39 > 0xCCCCCCCCCCCCCCCLL)
          sub_22316E078();
        if (0x999999999999999ALL * ((v64 - v62) >> 2) > v39)
          v39 = 0x999999999999999ALL * ((v64 - v62) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((v64 - v62) >> 2) >= 0x666666666666666)
          v40 = 0xCCCCCCCCCCCCCCCLL;
        else
          v40 = v39;
        if (v40 > 0xCCCCCCCCCCCCCCCLL)
          sub_223174E94();
        v41 = (char *)operator new(20 * v40);
        v11 = *(_OWORD *)v13;
        v42 = &v41[4 * (((char *)v63 - v62) >> 2)];
        *(_OWORD *)v42 = *(_OWORD *)v13;
        *((float *)v42 + 4) = v36;
        if (v63 != (__int128 *)v62)
        {
          v43 = &v41[4 * (((char *)v63 - v62) >> 2)];
          do
          {
            v44 = v43 - 20;
            v11 = *(__int128 *)((char *)v37 - 20);
            *((_DWORD *)v43 - 1) = *((_DWORD *)v37 - 1);
            *(_OWORD *)(v43 - 20) = v11;
            v37 = (__int128 *)((char *)v37 - 20);
            v43 -= 20;
          }
          while (v37 != (__int128 *)v62);
          v25 = (__int128 *)(v42 + 20);
          v62 = v44;
          v64 = &v41[20 * v40];
          if (!v38)
            goto LABEL_5;
LABEL_20:
          operator delete(v38);
          goto LABEL_5;
        }
        v25 = (__int128 *)(v42 + 20);
        v62 = &v41[4 * (((char *)v63 - v62) >> 2)];
        v64 = &v41[20 * v40];
        if (v38)
          goto LABEL_20;
      }
LABEL_5:
      v63 = v25;
      v13 += 2;
      if (v13 == v12)
      {
        v45 = (__int128 *)v62;
        goto LABEL_23;
      }
    }
  }
  v25 = 0;
  v45 = 0;
LABEL_23:
  v46 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v25 - (char *)v45) >> 2));
  if (v25 == v45)
    v47 = 0;
  else
    v47 = v46;
  sub_2238E359C(v45, v25, v47, 1, *(float *)&v11);
  v48 = *a1;
  if (a1[1] != *a1)
  {
    v49 = 0;
    v50 = 0;
    v51 = v45;
    do
    {
      v52 = *v51;
      v51 = (__int128 *)((char *)v51 + 20);
      *(_OWORD *)&v48[v49] = v52;
      ++v50;
      v48 = *a1;
      v49 += 2;
    }
    while (v50 < ((char *)a1[1] - (char *)*a1) >> 4);
    goto LABEL_31;
  }
  if (v45)
LABEL_31:
    operator delete(v45);
}

void sub_2238C81B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2238C81DC@<D0>(uint64_t a1@<X0>, uint32x2_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  __int128 v10;
  double result;
  __int128 v12;
  float32x2_t v13;
  float32x2_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  v7 = vdiv_f32(vcvt_f32_u32(a2), vcvt_f32_u32(*(uint32x2_t *)(a1 + 88)));
  v8 = vmul_f32(v7, *(float32x2_t *)(a1 + 16));
  v9 = vadd_f32(vmul_f32(v7, vadd_f32(*(float32x2_t *)(a1 + 24), (float32x2_t)0x3F0000003F000000)), (float32x2_t)0xBF000000BF000000);
  v13 = v8;
  v14 = v9;
  sub_223207E58(&v15, (int *)&v13);
  v13.f32[0] = *(float *)&v16 / a4;
  v13.f32[1] = *((float *)&v16 + 1) / a4;
  v14 = *(float32x2_t *)((char *)&v16 + 8);
  sub_223207E58(&v15, (int *)&v13);
  *(_DWORD *)(a3 + 80) = v20;
  v10 = v17;
  *(_OWORD *)(a3 + 16) = v16;
  *(_OWORD *)(a3 + 32) = v10;
  result = *(double *)&v18;
  v12 = v19;
  *(_OWORD *)(a3 + 48) = v18;
  *(_OWORD *)(a3 + 64) = v12;
  *(uint32x2_t *)(a3 + 88) = a2;
  *(_QWORD *)a3 = &off_24EC207B8;
  *(_QWORD *)(a3 + 8) = &off_24EC20868;
  return result;
}

void sub_2238C82B0(uint64_t **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  float32x4_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  float32x2_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  std::mutex *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  float32x4_t v50;
  int32x2_t v51;
  float32x4_t v52;
  _QWORD *v53;
  int32x2_t *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  float32x2_t *v58;
  uint64_t *v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x2_t v65;
  int8x16_t v66;
  float32x2_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  unsigned __int32 v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x2_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  __float2 v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  float32x2_t *v94;
  float v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int16 v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  __int16 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  int *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t i;
  uint64_t v139;
  int v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *size;
  unint64_t *v167;
  unint64_t v168;
  unsigned int v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int v173;
  int v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  int *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  float v192;
  int8x16_t v193;
  uint64_t *v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x2_t *v199;
  std::string v201;
  float *v202;
  int *v203;
  std::__shared_weak_count *v204;
  unint64_t v205;
  __int128 v206;
  __int16 v207;
  __int128 __p;
  unsigned __int128 v209;
  __int128 v210;
  __int16 v211;
  int8x16_t v212[2];
  float32x4_t v213;
  __int16 v214;
  void *v215;
  char *v216;
  char *v217;
  __int128 v218;
  int *v219;
  int *v220;
  std::__shared_weak_count *v221;
  __int8 v222[3];
  float32x4_t v223;
  unsigned __int128 v224;
  float32x4_t v225;
  float32x4_t v226;
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  *a5 = (char *)&unk_2245C5160;
  *(_OWORD *)(a5 + 1) = 0u;
  *(_OWORD *)(a5 + 3) = 0u;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
    return;
  v194 = (uint64_t *)(a5 + 1);
  do
  {
    v16 = sub_22381AF00(a2, *v5, v5[1]);
    if ((*((_BYTE *)v16 + 113) & 2) == 0)
      goto LABEL_5;
    v17 = *(_QWORD *)(a4 + 24);
    if (!v17)
      sub_223198474();
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(&v223, v17, v5);
    v18 = v223;
    if (!v223.i64[1])
      goto LABEL_12;
    v19 = (unint64_t *)(v223.i64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18.i64[1] + 16))(v18.i64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18.i64[1]);
      if (!v18.i64[0])
        goto LABEL_5;
    }
    else
    {
LABEL_12:
      if (!v18.i64[0])
        goto LABEL_5;
    }
    v21 = v216;
    if (v216 < v217)
    {
      *(_OWORD *)v216 = *(_OWORD *)v16;
      v10 = *((_OWORD *)v16 + 1);
      v11 = *((_OWORD *)v16 + 2);
      v12 = *((_OWORD *)v16 + 4);
      *((_OWORD *)v21 + 3) = *((_OWORD *)v16 + 3);
      *((_OWORD *)v21 + 4) = v12;
      *((_OWORD *)v21 + 1) = v10;
      *((_OWORD *)v21 + 2) = v11;
      v13 = *((_OWORD *)v16 + 5);
      v14 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v21 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v21 + 7) = v14;
      *((_OWORD *)v21 + 5) = v13;
      v15 = v21 + 128;
    }
    else
    {
      v22 = (char *)v215;
      v23 = (v216 - (_BYTE *)v215) >> 7;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 57)
        sub_22316E078();
      v25 = v217 - (_BYTE *)v215;
      if ((v217 - (_BYTE *)v215) >> 6 > v24)
        v24 = v25 >> 6;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFF80)
        v26 = 0x1FFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 57)
          sub_223174E94();
        v27 = (char *)operator new(v26 << 7);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[128 * v23];
      *(_OWORD *)v28 = *(_OWORD *)v16;
      v29 = *((_OWORD *)v16 + 1);
      v30 = *((_OWORD *)v16 + 2);
      v31 = *((_OWORD *)v16 + 4);
      *((_OWORD *)v28 + 3) = *((_OWORD *)v16 + 3);
      *((_OWORD *)v28 + 4) = v31;
      *((_OWORD *)v28 + 1) = v29;
      *((_OWORD *)v28 + 2) = v30;
      v32 = *((_OWORD *)v16 + 5);
      v33 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v28 + 7) = v33;
      *((_OWORD *)v28 + 5) = v32;
      v34 = v28;
      if (v21 != v22)
      {
        do
        {
          *((_OWORD *)v34 - 8) = *((_OWORD *)v21 - 8);
          v35 = *((_OWORD *)v21 - 7);
          v36 = *((_OWORD *)v21 - 6);
          v37 = *((_OWORD *)v21 - 4);
          *((_OWORD *)v34 - 5) = *((_OWORD *)v21 - 5);
          *((_OWORD *)v34 - 4) = v37;
          *((_OWORD *)v34 - 7) = v35;
          *((_OWORD *)v34 - 6) = v36;
          v38 = *((_OWORD *)v21 - 3);
          v39 = *((_OWORD *)v21 - 1);
          *((_OWORD *)v34 - 2) = *((_OWORD *)v21 - 2);
          *((_OWORD *)v34 - 1) = v39;
          *((_OWORD *)v34 - 3) = v38;
          v34 -= 128;
          v21 -= 128;
        }
        while (v21 != v22);
        v21 = (char *)v215;
      }
      v15 = v28 + 128;
      v215 = v34;
      v217 = &v27[128 * v26];
      if (v21)
        operator delete(v21);
    }
    v216 = v15;
LABEL_5:
    v5 += 2;
  }
  while (v5 != v6);
  v40 = v215;
  if (v215 != v216)
  {
    v41 = (float32x2_t *)a2[2];
    if (v41)
    {
      while (v41[18].i8[0] != 1)
      {
        v41 = (float32x2_t *)*v41;
        if (!v41)
          goto LABEL_35;
      }
      v57 = *(_QWORD *)(a4 + 24);
      if (!v57)
        goto LABEL_144;
LABEL_47:
      v58 = v41 + 4;
      v59 = (uint64_t *)a5;
      (*(void (**)(std::string *__return_ptr, uint64_t, float32x2_t *))(*(_QWORD *)v57 + 48))(&v201, v57, v41 + 4);
      if (!v201.__r_.__value_.__r.__words[0])
        goto LABEL_136;
      if ((v41[18].i8[1] & 2) != 0)
        goto LABEL_136;
      v63 = (float32x4_t *)v215;
      v64 = (float32x4_t *)v216;
      if (v215 == v216)
        goto LABEL_136;
      *(float32x2_t *)v60.i8 = v41[6];
      v60.i32[2] = v41[7].i32[0];
      *(float32x2_t *)v61.i8 = v41[8];
      v61.i32[2] = v41[9].i32[0];
      *(float32x2_t *)v62.f32 = v41[12];
      v62.i32[2] = v41[13].i32[0];
      v65 = (float32x2_t)vzip1q_s32(v60, v61).u64[0];
      v66 = (int8x16_t)vnegq_f32(v62);
      v67 = vmul_n_f32(v65, *(float *)v66.i32);
      *(float32x2_t *)v68.f32 = v65;
      v65.i32[0] = v41[11].i32[0];
      v69 = (int8x16_t)vtrn2q_s32(v60, v61);
      v69.i32[2] = HIDWORD(*(_QWORD *)&v41[10]);
      v70 = vzip2q_s32(v60, v61);
      v71 = (int8x16_t)v70;
      v71.i32[2] = v65.i32[0];
      *(float32x2_t *)v72.f32 = vmls_laneq_f32(vmls_lane_f32(v67, *(float32x2_t *)v69.i8, *(float32x2_t *)v62.f32, 1), *(float32x2_t *)v70.i8, v62, 2);
      v73 = vdupq_laneq_s32((int32x4_t)v71, 2).u32[0];
      v72.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v41[10], *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v41[10], 1), *(float32x2_t *)v62.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), v65).u32[0]);
      v74 = vextq_s8(vextq_s8(v69, v69, 0xCuLL), v71, 8uLL);
      v71.i64[0] = __PAIR64__(v74.u32[0], v69.u32[0]);
      v71.i64[1] = v74.u32[1];
      v196 = (float32x4_t)v71;
      v71.i64[0] = v74.i64[1];
      v71.i64[1] = v73;
      v195 = (float32x4_t)v71;
      v68.i64[1] = *(_QWORD *)&v41[10];
      v197 = v68;
      v198 = v72;
      while (1)
      {
        v75 = v63[4];
        v76 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v197, COERCE_FLOAT(*(_OWORD *)&v63[2])), v196, *(float32x2_t *)v63[2].f32, 1), v195, v63[2], 2), v198, v63[2], 3);
        v77 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v197, COERCE_FLOAT(*(_OWORD *)&v63[3])), v196, *(float32x2_t *)v63[3].f32, 1), v195, v63[3], 2), v198, v63[3], 3);
        v223 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v197, COERCE_FLOAT(*(_OWORD *)&v63[1])), v196, *(float32x2_t *)v63[1].f32, 1), v195, v63[1], 2), v198, v63[1], 3);
        v224 = (unsigned __int128)v76;
        v225 = v77;
        v226 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v197, v75.f32[0]), v196, *(float32x2_t *)v75.f32, 1), v195, v75, 2), v198, v75, 3);
        memset(v212, 0, 24);
        *(_QWORD *)&__p = &v223;
        *((_QWORD *)&__p + 1) = 0;
        v202 = (float *)v212;
        v203 = 0;
        sub_2236763FC((float32x2_t **)&__p, &v202);
        v78 = v212[0];
        v79 = (float32x2_t)vextq_s8(v78, v78, 8uLL).u64[0];
        v80 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v212[0].i8, 1), *(float32x2_t *)v212[0].i8, 1), v79, v79).f32[0];
        if (v80 >= 0.0061)
        {
          v85 = sqrtf(v80);
          v192 = v80;
          v193 = v212[0];
          v86 = __sincosf_stret(v85);
          v80 = v192;
          v78 = v193;
          v83 = v86.__sinval / v85;
          v81 = (float)(1.0 / v192) * (float)(1.0 - v86.__cosval);
          v82 = (float)(1.0 / v192) * (float)(1.0 - (float)(v86.__sinval / v85));
          if (v192 < 0.00000149)
          {
LABEL_56:
            v84 = (float)(v80 * 0.000033069) + (float)((float)(v80 * 0.0013889) + 0.083333);
            goto LABEL_58;
          }
        }
        else
        {
          v81 = 0.5 - (float)(v80 * (float)((float)(v80 / -720.0) + 0.041667));
          v82 = 0.16667 - (float)(v80 * (float)((float)(v80 / -5040.0) + 0.0083333));
          v83 = 1.0 - (float)(v80 * v82);
          if (v80 < 0.00000149)
            goto LABEL_56;
        }
        if (v80 <= 9.0)
          v84 = (float)((float)(v81 * 0.5) - v82) / v83;
        else
          v84 = (float)(v81 + (float)(v83 * -0.5)) / (float)(v80 * v81);
LABEL_58:
        v87 = (float32x4_t)vextq_s8(vextq_s8(v78, v78, 0xCuLL), v78, 8uLL);
        v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), v78, 0xCuLL);
        v89 = (int8x16_t)vsubq_f32(vmulq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v226, (int32x4_t)v226), (int8x16_t)v226, 0xCuLL)), vmulq_f32(v88, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v226, (int8x16_t)v226, 0xCuLL), (int8x16_t)v226, 8uLL)));
        v90.i64[0] = 0xBF000000BF000000;
        v90.i64[1] = 0xBF000000BF000000;
        v91 = vaddq_f32(vaddq_f32(v226, vmulq_f32((float32x4_t)v89, v90)), vmulq_n_f32(vsubq_f32(vmulq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), v89, 0xCuLL)), vmulq_f32(v88, (float32x4_t)vextq_s8(vextq_s8(v89, v89, 0xCuLL), v89, 8uLL))), v84));
        v212[1].i32[1] = v91.i32[2];
        *(uint64_t *)((char *)&v212[0].i64[1] + 4) = v91.i64[0];
        v92 = vabsq_f32((float32x4_t)vextq_s8(v212[0], v212[1], 0xCuLL));
        v92.i32[3] = -4194304;
        if (vmaxnmvq_f32(v92) <= *(float *)(a3 + 236))
        {
          v93 = sub_2231D0224((uint64_t)v201.__r_.__value_.__l.__data_);
          v94 = (float32x2_t *)sub_2231CC494((uint64_t)v201.__r_.__value_.__l.__data_);
          v199 = (float32x2_t *)v93;
          v95 = *(float *)(a3 + 216);
          sub_2231CC34C((uint64_t)v201.__r_.__value_.__l.__data_, (uint64_t)v212);
          v223.i64[0] = (uint64_t)&off_24EC200A8;
          v96 = v212[0].i64[1];
          v97 = (std::__shared_weak_count *)v212[1].i64[0];
          if (v212[1].i64[0])
          {
            v98 = (unint64_t *)(v212[1].i64[0] + 8);
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
            v100 = v214;
            do
              v101 = __ldxr(v98);
            while (__stxr(v101 + 1, v98));
            v102 = v212[1].i64[1];
            v225 = v213;
            do
              v103 = __ldxr(v98);
            while (__stxr(v103 + 1, v98));
            v223.i64[1] = v96;
            *(_QWORD *)&v224 = v97;
            *((_QWORD *)&v224 + 1) = v102;
            v226.i16[0] = v100;
            do
              v104 = __ldaxr(v98);
            while (__stlxr(v104 - 1, v98));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
            do
              v105 = __ldaxr(v98);
            while (__stlxr(v105 - 1, v98));
            v59 = (uint64_t *)a5;
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          else
          {
            v223.i64[1] = v212[0].i64[1];
            v224 = __PAIR128__(v212[1].u64[1], 0);
            v225 = v213;
            v226.i16[0] = v214;
          }
          sub_2231CC3F0((uint64_t)v201.__r_.__value_.__l.__data_, (uint64_t)&v202);
          *(_QWORD *)&__p = &off_24EC200A8;
          v106 = v203;
          v107 = v204;
          if (v204)
          {
            p_shared_owners = (unint64_t *)&v204->__shared_owners_;
            do
              v109 = __ldxr(p_shared_owners);
            while (__stxr(v109 + 1, p_shared_owners));
            v110 = v207;
            do
              v111 = __ldxr(p_shared_owners);
            while (__stxr(v111 + 1, p_shared_owners));
            v112 = v205;
            v210 = v206;
            do
              v113 = __ldxr(p_shared_owners);
            while (__stxr(v113 + 1, p_shared_owners));
            *((_QWORD *)&__p + 1) = v106;
            *(_QWORD *)&v209 = v107;
            *((_QWORD *)&v209 + 1) = v112;
            v211 = v110;
            do
              v114 = __ldaxr(p_shared_owners);
            while (__stlxr(v114 - 1, p_shared_owners));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
            do
              v115 = __ldaxr(p_shared_owners);
            while (__stlxr(v115 - 1, p_shared_owners));
            v59 = (uint64_t *)a5;
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          else
          {
            *((_QWORD *)&__p + 1) = v203;
            v209 = __PAIR128__(v205, 0);
            v210 = v206;
            v211 = v207;
          }
          sub_223CF2048(v199, v41 + 6, v94 + 1, (int32x2_t *)&v223, (int32x2_t *)&__p, &v219, v95);
          v116 = (std::__shared_weak_count *)v209;
          if ((_QWORD)v209)
          {
            v117 = (unint64_t *)(v209 + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v119 = v204;
          if (v204)
          {
            v120 = (unint64_t *)&v204->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v122 = (std::__shared_weak_count *)v224;
          if ((_QWORD)v224)
          {
            v123 = (unint64_t *)(v224 + 8);
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          v125 = (std::__shared_weak_count *)v212[1].i64[0];
          if (v212[1].i64[0])
          {
            v126 = (unint64_t *)(v212[1].i64[0] + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v128 = v219;
          v129 = v220;
          if (v219 != v220)
          {
            do
            {
              v139 = 0;
              _X9 = *v59;
              __asm { PRFM            #4, [X9] }
              v145 = v128[1];
              v146 = v128[2];
              v147 = (19349669 * v145) ^ (73856093 * *v128) ^ (83492791 * v146);
              v148 = v59[3];
              v149 = (v147 >> 7) ^ 0x13701D;
              v150 = v59[1];
              while (1)
              {
                v151 = v149 & v148;
                v152 = *(_QWORD *)(_X9 + v151);
                v153 = ((v152 ^ (0x101010101010101 * (v147 & 0x7F))) - 0x101010101010101) & ~(v152 ^ (0x101010101010101 * (v147 & 0x7F))) & 0x8080808080808080;
                if (v153)
                  break;
LABEL_129:
                if ((v152 & (~v152 << 6) & 0x8080808080808080) != 0)
                {
                  v154 = sub_2238E7240(v59, v147);
                  v150 = *v194;
                  v156 = *v194 + 56 * v154;
                  v157 = *(_QWORD *)v128;
                  *(_DWORD *)(v156 + 8) = v128[2];
                  *(_QWORD *)v156 = v157;
                  *(_QWORD *)(v156 + 16) = &unk_2245C5160;
                  *(_OWORD *)(v156 + 24) = 0u;
                  *(_OWORD *)(v156 + 40) = 0u;
                  goto LABEL_132;
                }
                v139 += 8;
                v149 = v139 + v151;
              }
              while (1)
              {
                v154 = (v151 + (__clz(__rbit64(v153)) >> 3)) & v148;
                v155 = (_DWORD *)(v150 + 56 * v154);
                if (*v155 == *v128 && v155[1] == v145 && v155[2] == v146)
                  break;
                v153 &= v153 - 1;
                if (!v153)
                  goto LABEL_129;
              }
LABEL_132:
              v158 = v150 + 56 * v154;
              v161 = *(_QWORD *)(v158 + 16);
              v160 = (uint64_t *)(v158 + 16);
              _X8 = v161;
              __asm { PRFM            #4, [X8] }
              v163 = sub_22456636C((unsigned __int8 *)&v41[4]);
              v137 = 0;
              v164 = (0x9DDFEA08EB382D69 * v163 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v163
                                                                            + 0x376ADF16980614E5) >> 32);
              v165 = v160[3];
              for (i = (v164 >> 7) ^ 0x13701D; ; i = v137 + v130)
              {
                v130 = i & v165;
                v131 = *(_QWORD *)(*v160 + v130);
                v132 = ((v131 ^ (0x101010101010101 * (v164 & 0x7F))) - 0x101010101010101) & ~(v131 ^ (0x101010101010101 * (v164 & 0x7F))) & 0x8080808080808080;
                if (v132)
                  break;
LABEL_119:
                if ((v131 & (~v131 << 6) & 0x8080808080808080) != 0)
                {
                  *(_OWORD *)(v160[1] + 16 * sub_2238E7860(v160, v164)) = *(_OWORD *)v58->f32;
                  goto LABEL_122;
                }
                v137 += 8;
              }
              while (1)
              {
                v133 = (uint64_t *)(v160[1] + 16 * ((v130 + (__clz(__rbit64(v132)) >> 3)) & v165));
                v135 = *v133;
                v134 = v133[1];
                if (v135 == *v58 && v134 == *(_QWORD *)&v41[5])
                  break;
                v132 &= v132 - 1;
                if (!v132)
                  goto LABEL_119;
              }
LABEL_122:
              v128 += 3;
            }
            while (v128 != v129);
            v128 = v219;
          }
          if (v128)
          {
            v220 = v128;
            operator delete(v128);
          }
LABEL_136:
          size = (std::__shared_weak_count *)v201.__r_.__value_.__l.__size_;
          if (v201.__r_.__value_.__l.__size_)
          {
            v167 = (unint64_t *)(v201.__r_.__value_.__l.__size_ + 8);
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          do
          {
            v41 = (float32x2_t *)*v41;
            if (!v41)
              goto LABEL_35;
          }
          while (v41[18].i8[0] != 1);
          v57 = *(_QWORD *)(a4 + 24);
          if (!v57)
LABEL_144:
            sub_223198474();
          goto LABEL_47;
        }
        v63 += 8;
        if (v63 == v64)
          goto LABEL_136;
      }
    }
LABEL_35:
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v42 = sub_2241471F8();
      v43 = v42[2];
      if (!v43)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v43 = v42[2];
      }
      v44 = *(_QWORD *)(v43 + 64);
      v45 = (std::mutex *)(v44 + 32);
      std::mutex::lock((std::mutex *)(v44 + 32));
      v47 = *(_QWORD *)(v44 + 96);
      v46 = *(_QWORD *)(v44 + 104);
      std::mutex::unlock(v45);
      if (v47 != v46)
      {
        v223.i64[0] = (uint64_t)"cv3d.recon.";
        v223.i64[1] = 11;
        *(_QWORD *)&v224 = "Keyframing.Visibility";
        *((_QWORD *)&v224 + 1) = 21;
        sub_2231A9820((uint64_t)&v223, (uint64_t)&v225, 0, 0, &v201);
        sub_2241471F8();
        v48 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48))
        {
          memset(v212, 0, sizeof(v212));
          v213.i32[0] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48))
          {
            *(_QWORD *)&v218 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v218 + 1) = 2;
            v49 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48))
            {
              sub_2241498F4((uint64_t)&v223, 0);
              v53 = *a5;
              v54 = (int32x2_t *)a5[1];
              if (**a5 > -2)
              {
                v56 = **a5;
              }
              else
              {
                do
                {
                  v55 = (__clz(__rbit64(((*v53 >> 7) & ~*v53 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                  v53 = (_QWORD *)((char *)v53 + v55);
                  v54 += 7 * v55;
                }
                while (*(char *)v53 < -1);
                v56 = *(unsigned __int8 *)v53;
              }
              if (v56 != 255)
              {
                do
                {
                  v169 = 20 * v54[4].i32[0] - 20;
                  if (v169 >= 0xFF)
                    LOBYTE(v169) = -1;
                  v222[0] = ~(_BYTE)v169;
                  v222[1] = -1;
                  v50.i32[0] = *(_DWORD *)(a3 + 216);
                  *(float *)v51.i32 = (float)(v50.f32[0] * 0.0) * 0.5;
                  *(float32x2_t *)v52.f32 = vcvt_f32_s32(*v54);
                  v52.f32[2] = (float)v54[1].i32[0];
                  v222[2] = ~(_BYTE)v169;
                  v170 = vmulq_n_f32(v52, v50.f32[0]);
                  v171 = vaddq_f32((float32x4_t)vdupq_lane_s32(v51, 0), v170);
                  DWORD2(__p) = v171.i32[2];
                  *(_QWORD *)&__p = v171.i64[0];
                  v172 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0), v171);
                  LODWORD(v220) = v172.i32[2];
                  v219 = (int *)v172.i64[0];
                  v50 = sub_223CF1130((uint64_t)&__p, (uint64_t)&v219, 1, v222, (uint64_t)&v223, v50, v172, v170);
                  v174 = *((char *)v53 + 1);
                  v53 = (_QWORD *)((char *)v53 + 1);
                  LOBYTE(v173) = v174;
                  v54 += 7;
                  if (v174 <= -2)
                  {
                    do
                    {
                      v175 = (__clz(__rbit64(((*v53 >> 7) & ~*v53 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                      v53 = (_QWORD *)((char *)v53 + v175);
                      v54 += 7 * v175;
                      v173 = *(char *)v53;
                    }
                    while (v173 < -1);
                  }
                }
                while (v173 != 255);
              }
              *(_QWORD *)&__p = 7364973;
              *(_WORD *)((char *)&v209 + 7) = 259;
              sub_22329F414((uint64_t)&v223, &__p, &v218, &v202);
              if (BYTE8(v209) && SBYTE7(v209) < 0)
                operator delete((void *)__p);
              sub_22316F8F4((uint64_t *)&v223);
              v176 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 56))(v48);
              v177 = *v176;
              v178 = (std::__shared_weak_count *)v176[1];
              if (v178)
              {
                v179 = (unint64_t *)&v178->__shared_owners_;
                do
                  v180 = __ldxr(v179);
                while (__stxr(v180 + 1, v179));
              }
              v182 = v203;
              v181 = v204;
              v219 = (int *)&off_24EC6A3B8;
              v220 = v203;
              v221 = v204;
              v203 = 0;
              v204 = 0;
              v223.i64[0] = v177;
              v223.i64[1] = (uint64_t)v178;
              if (v178)
              {
                v183 = (unint64_t *)&v178->__shared_owners_;
                do
                  v184 = __ldxr(v183);
                while (__stxr(v184 + 1, v183));
              }
              *(_QWORD *)&v224 = &off_24EC6A3B8;
              *((_QWORD *)&v224 + 1) = v182;
              v225.i64[0] = (uint64_t)v181;
              if (v181)
              {
                v185 = (unint64_t *)&v181->__shared_owners_;
                do
                  v186 = __ldxr(v185);
                while (__stxr(v186 + 1, v185));
              }
              (*(void (**)(uint64_t *, float32x4_t *))(*v49 + 16))(v49, &v223);
              sub_2241231D8((uint64_t)&v224);
              v187 = (std::__shared_weak_count *)v223.i64[1];
              if (v223.i64[1])
              {
                v188 = (unint64_t *)(v223.i64[1] + 8);
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                }
              }
              sub_2241231D8((uint64_t)&v219);
              if (v178)
              {
                v190 = (unint64_t *)&v178->__shared_owners_;
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
              sub_2241231D8((uint64_t)&v202);
            }
          }
          kdebug_trace();
        }
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v201.__r_.__value_.__l.__data_);
      }
    }
    v40 = v215;
  }
  if (v40)
    operator delete(v40);
}

void sub_2238C939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t a67;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;

  sub_2241231D8(v68);
  v70 = (std::__shared_weak_count *)a67;
  if (a67)
  {
    v71 = (unint64_t *)(a67 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  sub_2241231D8((uint64_t)&a62);
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_2241231D8((uint64_t)&a35);
  sub_2231874DC((uint64_t)&a50);
  if (a34 < 0)
    operator delete(__p);
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  sub_223865960(a28);
  _Unwind_Resume(a1);
}

void sub_2238C9540(uint64_t *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  float v11;
  uint64_t *v12;
  float v13;
  uint64_t v14;
  float32x2_t v15;
  float32x4_t v16;
  __int128 *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t v20;
  int8x16_t v21;
  float32x4_t v22;
  char *v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x2_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  float32x2_t *v38;
  float32x2_t *v39;
  float v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t k;
  uint64_t v57;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  __int128 v90;
  uint64_t j;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  std::mutex *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void **v115;
  void *v116;
  void *v117;
  int v118;
  __n128 *v121;
  void **v122;
  size_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  std::mutex *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void **v132;
  void *v133;
  void *v134;
  int v135;
  __n128 *v138;
  void **v139;
  size_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  std::mutex *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  float32x4_t v149;
  int32x2_t v150;
  float32x4_t v151;
  _QWORD *v152;
  int32x2_t *v153;
  unint64_t v154;
  int v155;
  void **v156;
  int8x16_t v157;
  float32x2_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  void *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  __int128 *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  char *v183;
  uint64_t v184;
  char *v185;
  __int128 *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *p_shared_owners;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unsigned int v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  int v202;
  int v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  float32x4_t v239;
  int *v240;
  uint64_t *v241;
  void **v242;
  std::string v243;
  int v244;
  void *__p[2];
  __int128 v246;
  int v247;
  char *v248;
  __int128 *v249;
  __int128 *v250;
  __int128 v251;
  uint64_t (**v252)();
  uint64_t v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  __int16 v256;
  uint64_t v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  __int8 v260[3];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  void *v267;
  std::__shared_weak_count *v268;
  int v269;
  uint64_t v270;

  v270 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v238 = a4;
  v11 = *(float *)(a4 + 236);
  v248 = 0;
  v249 = 0;
  v250 = 0;
  v12 = *(uint64_t **)(a3 + 16);
  if (!v12)
    goto LABEL_5;
  v13 = v11 * v11;
  while (*((_BYTE *)v12 + 144) != 1)
  {
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_5;
  }
  v156 = &v267;
LABEL_146:
  v157 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*((_OWORD *)v12 + 6))), a2[1], (float32x2_t)v12[12], 1), a2[2], *((float32x4_t *)v12 + 6), 2), a2[3], *((float32x4_t *)v12 + 6), 3);
  v158 = (float32x2_t)vextq_s8(v157, v157, 8uLL).u64[0];
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v157.i8, *(float32x2_t *)v157.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v157.i8, 1), *(float32x2_t *)v157.i8, 1), v158, v158).f32[0] > v13)goto LABEL_184;
  v159 = *(_QWORD *)(a5 + 24);
  if (!v159)
    sub_223198474();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v159 + 48))(__p, v159, v12 + 4);
  v161 = __p[0];
  v160 = (std::__shared_weak_count *)__p[1];
  if (__p[0])
  {
    v261 = *((_OWORD *)v12 + 2);
    v163 = *((_OWORD *)v12 + 3);
    v162 = *((_OWORD *)v12 + 4);
    v164 = *((_OWORD *)v12 + 6);
    v264 = *((_OWORD *)v12 + 5);
    v265 = v164;
    v262 = v163;
    v263 = v162;
    v165 = v12[15];
    v266 = v165;
    v267 = __p[0];
    v268 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v166 = (unint64_t *)((char *)__p[1] + 8);
      do
        v167 = __ldxr(v166);
      while (__stxr(v167 + 1, v166));
    }
    v269 = 2139095039;
    v168 = v249;
    if (v249 < v250)
    {
      *v249 = v261;
      v169 = v262;
      v170 = v263;
      v171 = v265;
      v168[3] = v264;
      v168[4] = v171;
      v168[1] = v169;
      v168[2] = v170;
      *((_QWORD *)v168 + 10) = v165;
      *((_QWORD *)v168 + 11) = v161;
      *((_QWORD *)v168 + 12) = v160;
      *v156 = 0;
      v156[1] = 0;
      *((_DWORD *)v168 + 26) = 2139095039;
      v172 = v168 + 7;
      goto LABEL_173;
    }
    v242 = v156;
    v234 = a1;
    v237 = a5;
    v173 = v248;
    v174 = 0x6DB6DB6DB6DB6DB7 * (((char *)v249 - v248) >> 4);
    v175 = v174 + 1;
    if ((unint64_t)(v174 + 1) > 0x249249249249249)
      sub_22316E078();
    if (0xDB6DB6DB6DB6DB6ELL * (((char *)v250 - v248) >> 4) > v175)
      v175 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v250 - v248) >> 4);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v250 - v248) >> 4)) >= 0x124924924924924)
      v176 = 0x249249249249249;
    else
      v176 = v175;
    if (v176 > 0x249249249249249)
      sub_223174E94();
    v177 = (char *)operator new(112 * v176);
    v178 = &v177[112 * v174];
    v179 = v262;
    v180 = v263;
    *(_OWORD *)v178 = v261;
    *((_OWORD *)v178 + 1) = v179;
    v181 = v264;
    v182 = v265;
    *((_OWORD *)v178 + 2) = v180;
    *((_OWORD *)v178 + 3) = v181;
    v183 = &v177[112 * v176];
    *((_OWORD *)v178 + 4) = v182;
    *((_QWORD *)v178 + 10) = v165;
    *((_QWORD *)v178 + 11) = v161;
    *((_QWORD *)v178 + 12) = v160;
    *v242 = 0;
    v242[1] = 0;
    v172 = (__int128 *)(v178 + 112);
    *((_DWORD *)v178 + 26) = 2139095039;
    if (v168 == (__int128 *)v173)
    {
      v248 = &v177[112 * v174];
      v250 = (__int128 *)&v177[112 * v176];
      a5 = v237;
      a1 = v234;
      v156 = v242;
      if (!v168)
      {
LABEL_173:
        v249 = v172;
        v193 = v268;
        if (v268)
        {
          p_shared_owners = (unint64_t *)&v268->__shared_owners_;
          do
            v195 = __ldaxr(p_shared_owners);
          while (__stlxr(v195 - 1, p_shared_owners));
          if (!v195)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        v160 = (std::__shared_weak_count *)__p[1];
        goto LABEL_179;
      }
    }
    else
    {
      v184 = 0;
      a5 = v237;
      a1 = v234;
      do
      {
        v185 = &v178[v184 * 16];
        v186 = &v168[v184];
        *((_OWORD *)v185 - 7) = v168[v184 - 7];
        v187 = v168[v184 - 6];
        v188 = v168[v184 - 5];
        v189 = v168[v184 - 3];
        *((_OWORD *)v185 - 4) = v168[v184 - 4];
        *((_OWORD *)v185 - 3) = v189;
        *((_OWORD *)v185 - 6) = v187;
        *((_OWORD *)v185 - 5) = v188;
        *((_QWORD *)v185 - 4) = *(_QWORD *)&v168[v184 - 2];
        *(_OWORD *)(v185 - 24) = *(__int128 *)((char *)&v168[v184 - 1] - 8);
        *((_QWORD *)v186 - 3) = 0;
        *((_QWORD *)v186 - 2) = 0;
        *((_DWORD *)v185 - 2) = DWORD2(v168[v184 - 1]);
        v184 -= 7;
      }
      while (&v168[v184] != (__int128 *)v173);
      v248 = &v178[v184 * 16];
      v249 = (__int128 *)(v178 + 112);
      v250 = (__int128 *)v183;
      do
      {
        v190 = (std::__shared_weak_count *)*((_QWORD *)v168 - 2);
        if (v190)
        {
          v191 = (unint64_t *)&v190->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
        v168 -= 7;
      }
      while (v168 != (__int128 *)v173);
      v168 = (__int128 *)v173;
      v156 = v242;
      if (!v168)
        goto LABEL_173;
    }
    operator delete(v168);
    goto LABEL_173;
  }
LABEL_179:
  if (v160)
  {
    v196 = (unint64_t *)&v160->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
LABEL_184:
  while (1)
  {
    v12 = (uint64_t *)*v12;
    if (!v12)
      break;
    if (*((_BYTE *)v12 + 144) == 1)
      goto LABEL_146;
  }
LABEL_5:
  v14 = sub_2231CC494(*a1);
  v18 = (uint64_t)v248;
  v17 = v249;
  if (v248 != (char *)v249)
  {
    v19.i64[0] = 0;
    v19.i32[3] = 0;
    v19.f32[2] = (float)(*(float *)(v14 + 12) + *(float *)(v14 + 8)) * 0.5;
    v20.i32[0] = a2->i32[2];
    v15.i32[0] = a2[2].i32[2];
    v16.i64[0] = a2[3].i64[0];
    v16.i32[2] = a2[3].i32[2];
    v21 = (int8x16_t)vsubq_f32(v19, v16);
    v20.i32[1] = a2[1].i32[2];
    *(float32x2_t *)v22.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a2->f32, *(int32x2_t *)a2[1].f32), *(float *)v21.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)a2->f32, *(int32x2_t *)a2[1].f32), *(float32x2_t *)v21.i8, 1), v20, (float32x4_t)v21, 2);
    *(float32x2_t *)&v22.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a2[2].f32, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), *(float32x2_t *)a2[2].f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v15);
    v239 = v22;
    v23 = v248;
    do
    {
      v24 = sub_2231CC494(*((_QWORD *)v23 + 11));
      v25.f32[0] = (float)(*(float *)(v24 + 12) + *(float *)(v24 + 8)) * 0.5;
      v26.i32[0] = *((_DWORD *)v23 + 6);
      v27.i32[0] = *((_DWORD *)v23 + 10);
      v28.i32[0] = *((_DWORD *)v23 + 14);
      *(float32x2_t *)v29.f32 = vmla_n_f32(vmla_f32(vmul_f32(*(float32x2_t *)(v23 + 16), 0), 0, *(float32x2_t *)(v23 + 32)), *(float32x2_t *)(v23 + 48), v25.f32[0]);
      *(float32x2_t *)&v29.u32[2] = vmla_f32(vmla_f32(vmul_f32(v26, 0), 0, v27), v25, v28);
      v30.i64[0] = *((_QWORD *)v23 + 8);
      v30.i32[2] = *((_DWORD *)v23 + 18);
      v31 = (int8x16_t)vsubq_f32(v239, vaddq_f32(v30, v29));
      v32 = (float32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
      *((_DWORD *)v23 + 26) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), *(float32x2_t *)v31.i8, 1), v32, v32).u32[0];
      v23 += 112;
    }
    while (v23 != (char *)v17);
  }
  v33 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v17 - v18) >> 4);
  v34 = 126 - 2 * __clz(v33);
  if (v17 == (__int128 *)v18)
    v35 = 0;
  else
    v35 = v34;
  sub_2238E49D8(v18, v17, v35, 1);
  v36 = (uint64_t *)a6;
  *a6 = (char *)&unk_2245C5160;
  *(_OWORD *)(a6 + 1) = 0u;
  v236 = (uint64_t *)(a6 + 1);
  *(_OWORD *)(a6 + 3) = 0u;
  v37 = 20;
  if (v33 < 20)
    v37 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v17 - v18) >> 4);
  if (v37)
  {
    v233 = v18 + 112 * v37;
    while (1)
    {
      v38 = (float32x2_t *)sub_2231D0224(*(_QWORD *)(v18 + 88));
      v39 = (float32x2_t *)sub_2231CC494(*(_QWORD *)(v18 + 88));
      v40 = *(float *)(v238 + 216);
      sub_2231D3D90(*(_QWORD *)(v18 + 88), (uint64_t)&v261);
      sub_2231D4288(*(_QWORD *)(v18 + 88), (uint64_t)__p);
      sub_223CF2048(v38, (float32x2_t *)(v18 + 16), v39 + 1, (int32x2_t *)&v261, (int32x2_t *)__p, (int **)v255, v40);
      v41 = (std::__shared_weak_count *)v246;
      if (!(_QWORD)v246)
        goto LABEL_20;
      v42 = (unint64_t *)(v246 + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        v44 = (std::__shared_weak_count *)v262;
        if (!(_QWORD)v262)
          goto LABEL_26;
      }
      else
      {
LABEL_20:
        v44 = (std::__shared_weak_count *)v262;
        if (!(_QWORD)v262)
          goto LABEL_26;
      }
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
LABEL_26:
      v47 = (int *)v255[0];
      v240 = (int *)v255[1];
      if (v255[0] == v255[1])
      {
        if (!v255[0])
          goto LABEL_15;
      }
      else
      {
        do
        {
          v57 = 0;
          _X8 = *v36;
          __asm { PRFM            #4, [X8] }
          v63 = *v47;
          v64 = v47[1];
          v65 = v47[2];
          v66 = (19349669 * v64) ^ (73856093 * *v47) ^ (83492791 * v65);
          v67 = v36[3];
          v68 = (v66 >> 7) ^ 0x13701D;
          v69 = 0x101010101010101 * (v66 & 0x7F);
          v70 = v36[1];
          for (i = v68; ; i = v57 + v72)
          {
            v72 = i & v67;
            v73 = *(_QWORD *)(_X8 + v72);
            v74 = ((v73 ^ v69) - 0x101010101010101) & ~(v73 ^ v69) & 0x8080808080808080;
            if (v74)
              break;
LABEL_45:
            if ((v73 & (~v73 << 6) & 0x8080808080808080) != 0)
              goto LABEL_48;
            v57 += 8;
          }
          while (1)
          {
            v75 = v70 + 56 * ((v72 + (__clz(__rbit64(v74)) >> 3)) & v67);
            if (*(_DWORD *)v75 == v63 && *(_DWORD *)(v75 + 4) == v64 && *(_DWORD *)(v75 + 8) == v65)
              break;
            v74 &= v74 - 1;
            if (!v74)
              goto LABEL_45;
          }
          if (!_X8)
          {
LABEL_48:
            v76 = 0;
            __asm { PRFM            #4, [X8] }
            while (1)
            {
              v78 = v68 & v67;
              v79 = *(_QWORD *)(_X8 + v78);
              v80 = ((v79 ^ v69) - 0x101010101010101) & ~(v79 ^ v69) & 0x8080808080808080;
              if (v80)
                break;
LABEL_54:
              if ((v79 & (~v79 << 6) & 0x8080808080808080) != 0)
              {
                v81 = sub_2238E7240(v36, v66);
                v70 = *v236;
                v83 = *v236 + 56 * v81;
                v84 = *(_QWORD *)v47;
                *(_DWORD *)(v83 + 8) = v47[2];
                *(_QWORD *)v83 = v84;
                *(_QWORD *)(v83 + 16) = &unk_2245C5160;
                *(_OWORD *)(v83 + 24) = 0u;
                *(_OWORD *)(v83 + 40) = 0u;
                goto LABEL_57;
              }
              v76 += 8;
              v68 = v76 + v78;
            }
            while (1)
            {
              v81 = (v78 + (__clz(__rbit64(v80)) >> 3)) & v67;
              v82 = (_DWORD *)(v70 + 56 * v81);
              if (*v82 == v63 && v82[1] == v64 && v82[2] == v65)
                break;
              v80 &= v80 - 1;
              if (!v80)
                goto LABEL_54;
            }
LABEL_57:
            v75 = v70 + 56 * v81;
            if (*(_QWORD *)(v75 + 48) + *(_QWORD *)(v75 + 32) <= 0x13uLL)
            {
              v85 = v18;
              v87 = *(char **)(v75 + 16);
              v86 = *(_QWORD *)(v75 + 24);
              v88 = *(_QWORD *)(v75 + 40);
              *(_QWORD *)(v75 + 40) = 31;
              v89 = (char *)operator new(0x217uLL);
              *(_QWORD *)(v75 + 16) = v89;
              *(_QWORD *)(v75 + 24) = v89 + 39;
              *(_QWORD *)(v89 + 31) = 0x8080808080808080;
              *(_QWORD *)&v90 = 0x8080808080808080;
              *((_QWORD *)&v90 + 1) = 0x8080808080808080;
              *(_OWORD *)v89 = v90;
              *((_OWORD *)v89 + 1) = v90;
              v89[31] = -1;
              *(_QWORD *)(v75 + 48) = 28 - *(_QWORD *)(v75 + 32);
              if (v88)
              {
                for (j = 0; j != v88; ++j)
                {
                  if ((v87[j] & 0x80000000) == 0)
                  {
                    v94 = sub_22456636C((unsigned __int8 *)(v86 + 16 * j));
                    v95 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v94) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                                  - 0x622015F714C7D297 * v94) >> 32);
                    v96 = *(_QWORD *)(v75 + 16);
                    v97 = *(_QWORD *)(v75 + 40);
                    v98 = v97 & ((v95 >> 7) ^ 0x13701D);
                    v99 = *(_QWORD *)(v96 + v98) & (~*(_QWORD *)(v96 + v98) << 7) & 0x8080808080808080;
                    if (!v99)
                    {
                      v100 = 8;
                      do
                      {
                        v98 = (v98 + v100) & v97;
                        v100 += 8;
                        v99 = *(_QWORD *)(v96 + v98) & (~*(_QWORD *)(v96 + v98) << 7) & 0x8080808080808080;
                      }
                      while (!v99);
                    }
                    v92 = (v98 + (__clz(__rbit64(v99)) >> 3)) & v97;
                    v93 = v95 & 0x7F;
                    *(_BYTE *)(v96 + v92) = v93;
                    *(_BYTE *)(v96 + ((v92 - 7) & v97) + (v97 & 7)) = v93;
                    *(_OWORD *)(*(_QWORD *)(v75 + 24) + 16 * v92) = *(_OWORD *)(v86 + 16 * j);
                  }
                }
                operator delete(v87);
                v36 = (uint64_t *)a6;
              }
              v18 = v85;
            }
          }
          _X8 = *(_QWORD *)(v75 + 16);
          __asm { PRFM            #4, [X8] }
          v103 = sub_22456636C((unsigned __int8 *)v18);
          v55 = 0;
          v104 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v103) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                          - 0x622015F714C7D297 * v103) >> 32);
          v105 = *(_QWORD *)(v75 + 40);
          for (k = (v104 >> 7) ^ 0x13701D; ; k = v55 + v48)
          {
            v48 = k & v105;
            v49 = *(_QWORD *)(*(_QWORD *)(v75 + 16) + v48);
            v50 = ((v49 ^ (0x101010101010101 * (v104 & 0x7F))) - 0x101010101010101) & ~(v49 ^ (0x101010101010101
                                                                                                 * (v104 & 0x7F))) & 0x8080808080808080;
            if (v50)
              break;
LABEL_35:
            if ((v49 & (~v49 << 6) & 0x8080808080808080) != 0)
            {
              *(_OWORD *)(*(_QWORD *)(v75 + 24) + 16 * sub_2238E7860((uint64_t *)(v75 + 16), v104)) = *(_OWORD *)v18;
              goto LABEL_38;
            }
            v55 += 8;
          }
          while (1)
          {
            v51 = (uint64_t *)(*(_QWORD *)(v75 + 24) + 16 * ((v48 + (__clz(__rbit64(v50)) >> 3)) & v105));
            v53 = *v51;
            v52 = v51[1];
            if (v53 == *(_QWORD *)v18 && v52 == *(_QWORD *)(v18 + 8))
              break;
            v50 &= v50 - 1;
            if (!v50)
              goto LABEL_35;
          }
LABEL_38:
          v47 += 3;
        }
        while (v47 != v240);
        v47 = (int *)v255[0];
        if (!v255[0])
          goto LABEL_15;
      }
      v255[1] = v47;
      operator delete(v47);
LABEL_15:
      v18 += 112;
      if (v18 == v233)
      {
        v18 = (uint64_t)v248;
        v17 = v249;
        v33 = 0x6DB6DB6DB6DB6DB7 * (((char *)v249 - v248) >> 4);
        break;
      }
    }
  }
  v106 = 20;
  if ((unint64_t)v33 < 0x14)
    v106 = v33;
  v244 = v106;
  *(_QWORD *)&v261 = "cv3d.recon.";
  *((_QWORD *)&v261 + 1) = 11;
  *(_QWORD *)&v262 = "Stats.Keyframing.BuildLocationKeyframeMap";
  *((_QWORD *)&v262 + 1) = 41;
  sub_2231A9820((uint64_t)&v261, (uint64_t)&v263, 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v107 = sub_2241471F8();
    v108 = v107[2];
    if (!v108)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v108 = v107[2];
    }
    v109 = *(_QWORD *)(v108 + 64);
    v110 = (std::mutex *)(v109 + 32);
    std::mutex::lock((std::mutex *)(v109 + 32));
    v112 = *(_QWORD *)(v109 + 96);
    v111 = *(_QWORD *)(v109 + 104);
    std::mutex::unlock(v110);
    if (v112 != v111)
    {
      sub_2241471F8();
      v113 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v113 + 24))(v113))
      {
        v261 = 0u;
        v262 = 0u;
        LODWORD(v263) = 728325608;
        kdebug_trace();
        v255[0] = (void *)v33;
        sub_223875FE8((double *)&qword_255788F20, v113, (uint64_t *)v255, "nearby");
        kdebug_trace();
      }
    }
  }
  v261 = 0u;
  v262 = 0u;
  LODWORD(v263) = 728325624;
  kdebug_trace();
  v114 = BYTE7(v246);
  if (SBYTE7(v246) < 0)
    v114 = (unint64_t)__p[1];
  if (v114 >= 0x11)
  {
    v115 = __p;
    if (SBYTE7(v246) < 0)
      v115 = (void **)__p[0];
    v116 = *v115;
    v117 = v115[1];
    v118 = *((unsigned __int8 *)v115 + 16);
    if (v116 == (void *)0x6365722E64337663 && v117 == (void *)0x73746174532E6E6FLL && v118 == 46)
    {
      v121 = sub_223187510();
      if ((SBYTE7(v246) & 0x80u) == 0)
        v122 = __p;
      else
        v122 = (void **)__p[0];
      if ((SBYTE7(v246) & 0x80u) == 0)
        v123 = BYTE7(v246);
      else
        v123 = (size_t)__p[1];
      v255[0] = (void *)v33;
      sub_22318760C((uint64_t *)v121, v122, v123, (uint64_t *)v255, (uint64_t)"nearby", 6);
    }
  }
  kdebug_trace();
  if (SBYTE7(v246) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v261 = "cv3d.recon.";
  *((_QWORD *)&v261 + 1) = 11;
  *(_QWORD *)&v262 = "Stats.Keyframing.BuildLocationKeyframeMap";
  *((_QWORD *)&v262 + 1) = 41;
  sub_2231A9820((uint64_t)&v261, (uint64_t)&v263, 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v124 = sub_2241471F8();
    v125 = v124[2];
    if (!v125)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v125 = v124[2];
    }
    v126 = *(_QWORD *)(v125 + 64);
    v127 = (std::mutex *)(v126 + 32);
    std::mutex::lock((std::mutex *)(v126 + 32));
    v129 = *(_QWORD *)(v126 + 96);
    v128 = *(_QWORD *)(v126 + 104);
    std::mutex::unlock(v127);
    if (v129 != v128)
    {
      sub_2241471F8();
      v130 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130))
      {
        v261 = 0u;
        v262 = 0u;
        LODWORD(v263) = 728325608;
        kdebug_trace();
        sub_2238CADC8((double *)&qword_255788F20, v130, &v244, "contributing");
        kdebug_trace();
      }
    }
  }
  v261 = 0u;
  v262 = 0u;
  LODWORD(v263) = 728325624;
  kdebug_trace();
  v131 = BYTE7(v246);
  if (SBYTE7(v246) < 0)
    v131 = (unint64_t)__p[1];
  if (v131 >= 0x11)
  {
    v132 = __p;
    if (SBYTE7(v246) < 0)
      v132 = (void **)__p[0];
    v133 = *v132;
    v134 = v132[1];
    v135 = *((unsigned __int8 *)v132 + 16);
    if (v133 == (void *)0x6365722E64337663 && v134 == (void *)0x73746174532E6E6FLL && v135 == 46)
    {
      v138 = sub_223187510();
      if ((SBYTE7(v246) & 0x80u) == 0)
        v139 = __p;
      else
        v139 = (void **)__p[0];
      if ((SBYTE7(v246) & 0x80u) == 0)
        v140 = BYTE7(v246);
      else
        v140 = (size_t)__p[1];
      sub_223532E4C(v138, v139, v140, (unsigned int *)&v244, (uint64_t)"contributing", 12);
    }
  }
  kdebug_trace();
  if (SBYTE7(v246) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v141 = sub_2241471F8();
    v142 = v141[2];
    if (!v142)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v142 = v141[2];
    }
    v143 = *(_QWORD *)(v142 + 64);
    v144 = (std::mutex *)(v143 + 32);
    std::mutex::lock((std::mutex *)(v143 + 32));
    v146 = *(_QWORD *)(v143 + 96);
    v145 = *(_QWORD *)(v143 + 104);
    std::mutex::unlock(v144);
    if (v146 != v145)
    {
      *(_QWORD *)&v261 = "cv3d.recon.";
      *((_QWORD *)&v261 + 1) = 11;
      *(_QWORD *)&v262 = "Keyframing.Visibility";
      *((_QWORD *)&v262 + 1) = 21;
      sub_2231A9820((uint64_t)&v261, (uint64_t)&v263, 0, 0, &v243);
      sub_2241471F8();
      v147 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147))
      {
        *(_OWORD *)__p = 0u;
        v246 = 0u;
        v247 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147))
        {
          *(_QWORD *)&v251 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v251 + 1) = 2;
          v148 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147))
          {
            v241 = v148;
            sub_2241498F4((uint64_t)&v261, 0);
            v152 = *a6;
            v153 = (int32x2_t *)a6[1];
            if (**a6 > -2)
            {
              v155 = **a6;
            }
            else
            {
              do
              {
                v154 = (__clz(__rbit64(((*v152 >> 7) & ~*v152 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v152 = (_QWORD *)((char *)v152 + v154);
                v153 += 7 * v154;
              }
              while (*(char *)v152 < -1);
              v155 = *(unsigned __int8 *)v152;
            }
            if (v155 != 255)
            {
              do
              {
                v198 = 20 * v153[4].i32[0] - 20;
                if (v198 >= 0xFF)
                  LOBYTE(v198) = -1;
                v260[0] = ~(_BYTE)v198;
                v260[1] = -1;
                v149.i32[0] = *(_DWORD *)(v238 + 216);
                *(float *)v150.i32 = (float)(v149.f32[0] * 0.0) * 0.5;
                *(float32x2_t *)v151.f32 = vcvt_f32_s32(*v153);
                v151.f32[2] = (float)v153[1].i32[0];
                v260[2] = ~(_BYTE)v198;
                v199 = vmulq_n_f32(v151, v149.f32[0]);
                v200 = vaddq_f32((float32x4_t)vdupq_lane_s32(v150, 0), v199);
                LODWORD(v255[1]) = v200.i32[2];
                v255[0] = (void *)v200.i64[0];
                v201 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 0), v200);
                LODWORD(v253) = v201.i32[2];
                v252 = (uint64_t (**)())v201.i64[0];
                v149 = sub_223CF1130((uint64_t)v255, (uint64_t)&v252, 1, v260, (uint64_t)&v261, v149, v201, v199);
                v203 = *((char *)v152 + 1);
                v152 = (_QWORD *)((char *)v152 + 1);
                LOBYTE(v202) = v203;
                v153 += 7;
                if (v203 <= -2)
                {
                  do
                  {
                    v204 = (__clz(__rbit64(((*v152 >> 7) & ~*v152 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                    v152 = (_QWORD *)((char *)v152 + v204);
                    v153 += 7 * v204;
                    v202 = *(char *)v152;
                  }
                  while (v202 < -1);
                }
              }
              while (v202 != 255);
            }
            v255[0] = (void *)0x79627261656ELL;
            v256 = 262;
            sub_22329F414((uint64_t)&v261, (__int128 *)v255, &v251, &v257);
            if (HIBYTE(v256) && (char)v256 < 0)
              operator delete(v255[0]);
            sub_22316F8F4((uint64_t *)&v261);
            v205 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 56))(v147);
            v206 = *v205;
            v207 = (std::__shared_weak_count *)v205[1];
            if (v207)
            {
              v208 = (unint64_t *)&v207->__shared_owners_;
              do
                v209 = __ldxr(v208);
              while (__stxr(v209 + 1, v208));
            }
            v211 = v258;
            v210 = v259;
            v252 = &off_24EC6A3B8;
            v253 = v258;
            v254 = v259;
            v258 = 0;
            v259 = 0;
            *(_QWORD *)&v261 = v206;
            *((_QWORD *)&v261 + 1) = v207;
            if (v207)
            {
              v212 = (unint64_t *)&v207->__shared_owners_;
              do
                v213 = __ldxr(v212);
              while (__stxr(v213 + 1, v212));
            }
            *(_QWORD *)&v262 = &off_24EC6A3B8;
            *((_QWORD *)&v262 + 1) = v211;
            *(_QWORD *)&v263 = v210;
            if (v210)
            {
              v214 = (unint64_t *)&v210->__shared_owners_;
              do
                v215 = __ldxr(v214);
              while (__stxr(v215 + 1, v214));
            }
            (*(void (**)(uint64_t *, __int128 *))(*v241 + 16))(v241, &v261);
            v216 = (std::__shared_weak_count *)v263;
            if ((_QWORD)v263)
            {
              v217 = (unint64_t *)(v263 + 8);
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            v219 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
            if (*((_QWORD *)&v261 + 1))
            {
              v220 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 - 1, v220));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                std::__shared_weak_count::__release_weak(v219);
              }
            }
            v222 = v254;
            if (v254)
            {
              v223 = (unint64_t *)&v254->__shared_owners_;
              do
                v224 = __ldaxr(v223);
              while (__stlxr(v224 - 1, v223));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                std::__shared_weak_count::__release_weak(v222);
              }
            }
            if (v207)
            {
              v225 = (unint64_t *)&v207->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
              }
            }
            v227 = v259;
            if (v259)
            {
              v228 = (unint64_t *)&v259->__shared_owners_;
              do
                v229 = __ldaxr(v228);
              while (__stlxr(v229 - 1, v228));
              if (!v229)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v243.__r_.__value_.__l.__data_);
      v18 = (uint64_t)v248;
      v17 = v249;
    }
  }
  kdebug_trace();
  if (v18)
  {
    if (v17 != (__int128 *)v18)
    {
      do
      {
        v230 = (std::__shared_weak_count *)*((_QWORD *)v17 - 2);
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v17 -= 7;
      }
      while (v17 != (__int128 *)v18);
      v17 = (__int128 *)v248;
    }
    v249 = (__int128 *)v18;
    operator delete(v17);
  }
}

void sub_2238CAB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,std::__shared_weak_count *a56)
{
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;

  sub_2241231D8(v57);
  v59 = a56;
  if (a56)
  {
    p_shared_owners = (unint64_t *)&a56->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  sub_2241231D8((uint64_t)&a37);
  if (v56)
  {
    v62 = (unint64_t *)&v56->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  sub_2241231D8((uint64_t)&a49);
  sub_2231874DC((uint64_t)&a22);
  if (a20 < 0)
    operator delete(__p);
  sub_223865960(a10);
  sub_2238CAF04(&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_2238CAD60(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2238CADC8(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2235347B4((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238CAEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_2238CAF04(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 112;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_2238CAF9C(uint64_t a1, float32x2_t *a2, uint64_t *a3, _QWORD *a4, float a5)
{
  float32x2_t *v8;
  float32x2_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int *v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned int v58;
  _BOOL8 v59;
  float v60;
  unsigned int v62;
  int *v63;
  unsigned int v66;
  int32x2_t v67[2];
  std::__shared_weak_count *v68;
  int32x2_t v69[2];
  std::__shared_weak_count *v70;
  int *v71;
  int *v72;

  kdebug_trace();
  v8 = (float32x2_t *)sub_2231D0224(a1);
  v9 = (float32x2_t *)sub_2231CC494(a1);
  sub_2231D3D90(a1, (uint64_t)v69);
  sub_2231D4288(a1, (uint64_t)v67);
  sub_223CF2048(v8, a2, v9 + 1, v69, v67, &v71, a5);
  v10 = v68;
  if (!v68)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = v70;
    if (!v70)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v13 = v70;
    if (!v70)
      goto LABEL_9;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_9:
    v17 = v71;
    v16 = v72;
    if (v71 != v72)
      goto LABEL_10;
LABEL_50:
    v58 = 0;
    v19 = 0;
    v57 = v17;
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  v17 = v71;
  v16 = v72;
  if (v71 == v72)
    goto LABEL_50;
LABEL_10:
  v62 = 0;
  v18 = 0;
  v19 = 0;
  v20 = a3;
  v21 = a4 + 1;
  v63 = v16;
  while (2)
  {
    while (1)
    {
      v26 = 0;
      _X9 = *v20;
      __asm { PRFM            #4, [X9] }
      v52 = v17[1];
      v53 = v17[2];
      v54 = (19349669 * v52) ^ (73856093 * *v17) ^ (83492791 * v53);
      v55 = v20[3];
      v27 = (v54 >> 7) ^ 0x13701D;
      v56 = 0x101010101010101 * (v54 & 0x7F);
      while (1)
      {
        v22 = v27 & v55;
        v23 = *(_QWORD *)(_X9 + v22);
        v24 = ((v23 ^ v56) - 0x101010101010101) & ~(v23 ^ v56) & 0x8080808080808080;
        if (v24)
          break;
LABEL_16:
        if ((v23 & (~v23 << 6) & 0x8080808080808080) != 0)
          goto LABEL_38;
        v26 += 8;
        v27 = v26 + v22;
      }
      while (1)
      {
        v25 = v20[1] + 56 * ((v22 + (__clz(__rbit64(v24)) >> 3)) & v55);
        if (*(_DWORD *)v25 == *v17 && *(_DWORD *)(v25 + 4) == v52 && *(_DWORD *)(v25 + 8) == v53)
          break;
        v24 &= v24 - 1;
        if (!v24)
          goto LABEL_16;
      }
      if (!_X9)
        break;
      v28 = (_QWORD *)*a4;
      if ((_QWORD *)*a4 != v21)
      {
        v66 = v19;
        _X8 = *(_QWORD *)(v25 + 16);
        do
        {
          __asm { PRFM            #4, [X8] }
          v34 = sub_22456636C((unsigned __int8 *)v28 + 25);
          v35 = 0;
          v36 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v34) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                        - 0x622015F714C7D297 * v34) >> 32);
          v37 = *(_QWORD *)(v25 + 40);
          v38 = (v36 >> 7) ^ 0x13701D;
          _X8 = *(_QWORD *)(v25 + 16);
          v39 = 0x101010101010101 * (v36 & 0x7F);
          while (1)
          {
            v40 = v38 & v37;
            v41 = *(_QWORD *)(_X8 + v40);
            v42 = ((v41 ^ v39) - 0x101010101010101) & ~(v41 ^ v39) & 0x8080808080808080;
            if (v42)
              break;
LABEL_29:
            if ((v41 & (~v41 << 6) & 0x8080808080808080) != 0)
              goto LABEL_32;
            v35 += 8;
            v38 = v35 + v40;
          }
          while (1)
          {
            v43 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * ((v40 + (__clz(__rbit64(v42)) >> 3)) & v37));
            v45 = *v43;
            v44 = v43[1];
            _ZF = v45 == *(_QWORD *)((char *)v28 + 25) && v44 == *(_QWORD *)((char *)v28 + 33);
            if (_ZF)
              break;
            v42 &= v42 - 1;
            if (!v42)
              goto LABEL_29;
          }
          if (_X8)
          {
            ++v62;
            break;
          }
LABEL_32:
          v47 = (_QWORD *)v28[1];
          if (v47)
          {
            do
            {
              v48 = v47;
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v28[2];
              _ZF = *v48 == (_QWORD)v28;
              v28 = v48;
            }
            while (!_ZF);
          }
          v28 = v48;
        }
        while (v48 != v21);
        v16 = v63;
        v20 = a3;
        v19 = v66;
      }
      v49 = *(_QWORD *)(v25 + 32);
      v19 += v49;
      v18 += v49 == 0;
      v17 += 3;
      if (v17 == v16)
        goto LABEL_44;
    }
LABEL_38:
    ++v18;
    v17 += 3;
    if (v17 != v16)
      continue;
    break;
  }
LABEL_44:
  if (v18 > 3)
  {
    v59 = 0;
    goto LABEL_54;
  }
  v57 = v71;
  v17 = v72;
  v58 = v62;
LABEL_51:
  v60 = (float)(0xAAAAAAAAAAAAAAABLL * (v17 - v57));
  v59 = (float)((float)v58 / v60) >= 0.6 || (float)((float)v19 / v60) >= 1.0;
LABEL_54:
  kdebug_trace();
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  return v59;
}

void sub_2238CB42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319EF60((uint64_t)va);
  sub_22319EF60((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2238CB448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238CB460(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (!v3)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 - 120) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void sub_2238CB484(char **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__dst[2];
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 __p;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char *v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = a1[1];
  v22 = 0uLL;
  *(_QWORD *)&__p = 0;
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v7 = 0uLL;
  }
  else
  {
    v6 = 0xEF7BDEF7BDEF7BDFLL * (v5 >> 3);
    if (v6 >> 60)
      sub_22316E078();
    *(_QWORD *)&v22 = operator new(0xF7BDEF7BDEF7BDF0 * (v5 >> 3));
    *((_QWORD *)&v22 + 1) = v22;
    *(_QWORD *)&__p = v22 + 16 * v6;
    v33 = (unsigned __int8 *)&v22;
    do
    {
      v39 = *(_OWORD *)v3;
      sub_2232E9564((char ***)&v33, &v39);
      v3 += 248;
    }
    while (v3 != v4);
    v7 = v22;
    v5 = __p;
  }
  v35 = v7;
  v36 = v5;
  sub_2240056F0((unint64_t **)&v35, (uint64_t *)&v33);
  v8 = v33;
  if (v33 != v34)
  {
    v40 = 0;
    sub_2232CFAFC(&v39, "Duplicate entry in kfe result:");
    sub_2231AEF2C((uint64_t)&v38, (uint64_t)&v39, &v33);
    if (v40 == -1)
      sub_22316DD70();
    v38 = &v37;
    ((void (*)(void **__return_ptr, char **, __int128 *))off_24EC5C388[v40])(v11, &v38, &v39);
    if (v40 != -1)
      ((void (*)(char **, __int128 *))off_24EC5C340[v40])(&v38, &v39);
    if (SHIBYTE(v12) < 0)
    {
      sub_223197FA4(__dst, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v11;
      v14 = v12;
    }
    v15 = 1;
    LOBYTE(v16) = 0;
    v20 = 0;
    v21 = 1;
    sub_2231A958C(0x16u, (__int128 *)__dst, (uint64_t)&v22);
    *(_OWORD *)a2 = v22;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v32)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v9 = v25;
      if (v25)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v24;
        v24 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v31)
      {
        v10 = v28;
        *(_QWORD *)(a2 + 64) = v27;
        *(_OWORD *)(a2 + 48) = v26;
        v26 = 0uLL;
        *(_QWORD *)(a2 + 72) = v10;
        *(_OWORD *)(a2 + 80) = v29;
        *(_QWORD *)(a2 + 96) = v30;
        v27 = 0;
        v29 = 0uLL;
        v30 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v9 && SHIBYTE(v24) < 0)
        operator delete((void *)__p);
      if (!v21)
      {
LABEL_33:
        if (SHIBYTE(v12) < 0)
          operator delete(v11[0]);
        v8 = v33;
        if (v33)
          goto LABEL_36;
        goto LABEL_37;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v21)
        goto LABEL_33;
    }
    if (!v20)
      goto LABEL_30;
    if (v19 < 0)
    {
      operator delete(v18);
      if ((v17 & 0x80000000) == 0)
      {
LABEL_30:
        if (!v15)
          goto LABEL_33;
LABEL_31:
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        goto LABEL_33;
      }
    }
    else if ((v17 & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v16);
    if (!v15)
      goto LABEL_33;
    goto LABEL_31;
  }
  *(_BYTE *)(a2 + 120) = 1;
  if (v8)
  {
LABEL_36:
    v34 = v8;
    operator delete(v8);
  }
LABEL_37:
  if ((_QWORD)v35)
  {
    *((_QWORD *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_2238CB7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  if (a15 < 0)
  {
    operator delete(__p);
    v33 = *(void **)(v31 - 168);
    if (!v33)
    {
LABEL_3:
      v34 = *(void **)(v31 - 144);
      if (!v34)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      *(_QWORD *)(v31 - 136) = v34;
      operator delete(v34);
      goto LABEL_8;
    }
  }
  else
  {
    v33 = *(void **)(v31 - 168);
    if (!v33)
      goto LABEL_3;
  }
  *(_QWORD *)(v31 - 160) = v33;
  operator delete(v33);
  v34 = *(void **)(v31 - 144);
  if (!v34)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_2238CB884(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x4_t a9)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  std::string *p_p;
  uint64_t v17;
  size_t v18;
  const char *v19;
  uint64_t v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  size_t v34;
  size_t v35;
  void **p_dst;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  char *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string *v76;
  std::__shared_weak_count *size;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  char *v100;
  uint64_t v102;
  size_t v103;
  const char *v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  const char *v107;
  size_t v108;
  const char *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  size_t v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::string *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  void **v165;
  const char *v166;
  unsigned int *v167;
  int v168;
  const char *v169;
  uint64_t v170;
  const char *v171;
  size_t v172;
  unsigned __int8 v173;
  const char *v174;
  size_t v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  size_t v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  size_t v186;
  size_t v187;
  void **v188;
  unsigned int *v189;
  void *v190;
  unsigned int *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  size_t v195;
  std::string::size_type v196;
  std::string *v197;
  uint64_t v198;
  uint64_t v199;
  size_t v200;
  size_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  __int128 v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  char *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const char *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  int v249;
  const char *v250;
  int v251;
  const char *v252;
  int v253;
  std::string *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  std::mutex *v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  std::string *v265;
  std::string *v266;
  uint64_t v267;
  uint64_t *v268;
  std::string::size_type v269;
  std::string *v270;
  std::string::size_type v271;
  std::string::size_type v272;
  int v273;
  __n128 *v276;
  std::string *v277;
  size_t v278;
  float32x2_t v280;
  int8x16_t v281;
  float32x2_t v282;
  float32x4_t v283;
  int8x16_t v284;
  float32x2_t v285;
  int v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  size_t v291;
  const char *v292;
  unsigned __int8 v293;
  const char *v294;
  size_t v295;
  _BYTE *v296;
  unint64_t v297;
  const char *v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  NSObject *v307;
  size_t v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  std::string::size_type v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  void *v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  const char *v343;
  uint64_t v344;
  int v345;
  unsigned int *v346;
  const char *v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  char *v354;
  char *v355;
  int v356;
  char *v357;
  char *__s;
  char *__sa;
  int __sb;
  int __sc;
  void *v362;
  char v363;
  void *v364;
  char v365;
  void *v366[2];
  char v367;
  uint64_t v368;
  _BYTE v369[24];
  __int128 v370;
  char *v371;
  const char *v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  void *v375[2];
  std::__shared_weak_count *v376;
  char *v377;
  std::__shared_weak_count *v378;
  std::string __p;
  std::string *__dst;
  __int128 v381;
  _BYTE object[56];
  void *v383[4];
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  char v391[16];
  _BYTE v392[56];
  unint64_t v393;
  std::__shared_weak_count *v394;
  _BYTE v395[24];
  uint64_t v396;

  v9 = a2;
  v10 = a1;
  v396 = *MEMORY[0x24BDAC8D0];
  v11 = (double)*(uint64_t *)(a1 + 1232) / 1000000000.0;
  if (!*(_BYTE *)(a2 + 272))
  {
    v12 = 0;
    goto LABEL_244;
  }
  if (!*(_BYTE *)(a1 + 1608))
  {
    *(_WORD *)object = 256;
    object[2] = 0;
    *(_OWORD *)&object[4] = 0uLL;
    memset(&object[24], 0, 32);
    memset(v383, 0, sizeof(v383));
    v384 = 0u;
    v385 = 0u;
    v386 = 0u;
    v387 = 0u;
    v388 = 0u;
    v389 = 0u;
    v390 = 0;
    v391[0] = 0;
    goto LABEL_11;
  }
  *(_OWORD *)object = *(_OWORD *)(a1 + 1408);
  *(_DWORD *)&object[16] = *(_DWORD *)(a1 + 1424);
  sub_223258368(&object[24], a1 + 1432);
  v391[0] = *(_BYTE *)(v10 + 1600);
  if (!object[0] || !object[1] || object[2] || !*(_DWORD *)&object[4])
  {
LABEL_11:
    sub_2238CE8E8(v366);
    if (**((int **)v366[0] + 7) > 4
      || (v13 = *((unsigned __int8 *)v366[0] + 72),
          v14 = sub_22322F254((uint64_t)v366[0], "OSLogSurrogateAppender", 1, 0),
          v15 = v14,
          !v13)
      && !v14)
    {
LABEL_139:
      v12 = 1;
      goto LABEL_140;
    }
    *(_QWORD *)v369 = v366;
    *(std::chrono::steady_clock::time_point *)&v369[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v369[16] = std::chrono::system_clock::now();
    LODWORD(v370) = 4;
    *((_QWORD *)&v370 + 1) = "unknown file";
    LODWORD(v371) = 353;
    v373 = 0;
    v374 = 0;
    v372 = "unknown function";
    *(_DWORD *)&v392[24] = 0;
    sub_2238E7D38((uint64_t)v375, (uint64_t)v392, v391);
    if (*(_DWORD *)&v392[24] == -1)
      sub_22316DD70();
    v375[0] = &__dst;
    ((void (*)(std::string *__return_ptr, void **, _BYTE *))off_24EC5C388[*(unsigned int *)&v392[24]])(&__p, v375, v392);
    if (*(_DWORD *)&v392[24] != -1)
      ((void (*)(void **, _BYTE *))off_24EC5C340[*(unsigned int *)&v392[24]])(v375, v392);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    __s = (char *)p_p;
    v17 = **(_QWORD **)v369;
    v351 = **(_QWORD **)v369;
    if (*(char *)(**(_QWORD **)v369 + 39) < 0)
    {
      v19 = *(const char **)(v17 + 16);
      v18 = *(_QWORD *)(v17 + 24);
    }
    else
    {
      v18 = *(unsigned __int8 *)(**(_QWORD **)v369 + 39);
      v19 = (const char *)(**(_QWORD **)v369 + 16);
    }
    v349 = **(_QWORD **)v369 + 16;
    v356 = v13;
    v20 = v9;
    v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v392);
      sub_223199C58("com.apple.cv3d", (unint64_t)v392, byte_255788F40);
      if (v392[24] && (v392[23] & 0x80000000) != 0)
        operator delete(*(void **)v392);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v22 = byte_255788F40;
    else
      v22 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v23 = byte_255788F40[23];
    else
      v23 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v392 = os_log_create(v22, v19);
    v24 = &v392[8];
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v23 >= 0x17)
    {
      v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v25 = v23 | 7;
      v26 = v25 + 1;
      v24 = operator new(v25 + 1);
      *(_QWORD *)&v392[16] = v23;
      *(_QWORD *)&v392[24] = v26 | 0x8000000000000000;
      *(_QWORD *)&v392[8] = v24;
    }
    else
    {
      v392[31] = v23;
      if (!v23)
      {
LABEL_37:
        v24[v23] = 0;
        v392[32] = 1;
        v27 = &v392[40];
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v9 = v20;
        if (v18 >= 0x17)
        {
          v28 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v28 = v18 | 7;
          v29 = v28 + 1;
          v27 = operator new(v28 + 1);
          *(_QWORD *)&v392[48] = v18;
          v393 = v29 | 0x8000000000000000;
          *(_QWORD *)&v392[40] = v27;
        }
        else
        {
          HIBYTE(v393) = v18;
          if (!v18)
          {
LABEL_45:
            v27[v18] = 0;
            LOBYTE(v394) = 1;
            v30 = *(NSObject **)v392;
            if (SHIBYTE(v393) < 0)
              operator delete(*(void **)&v392[40]);
            if (v392[32] && (v392[31] & 0x80000000) != 0)
              operator delete(*(void **)&v392[8]);
            if (*(_QWORD *)v392)
              os_release(*(void **)v392);
            if (!v15 || !*(_QWORD *)(v15 + 24))
            {
              os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v392 = 134219522;
              *(double *)&v392[4] = v11;
              *(_WORD *)&v392[12] = 1024;
              *(_DWORD *)&v392[14] = object[0];
              *(_WORD *)&v392[18] = 1024;
              *(_DWORD *)&v392[20] = *(_DWORD *)&object[4];
              *(_WORD *)&v392[24] = 1024;
              *(_DWORD *)&v392[26] = object[1];
              *(_WORD *)&v392[30] = 1024;
              *(_DWORD *)&v392[32] = object[2];
              *(_WORD *)&v392[36] = 1024;
              *(_DWORD *)&v392[38] = *(_DWORD *)&object[16];
              *(_WORD *)&v392[42] = 2080;
              *(_QWORD *)&v392[44] = __s;
              v37 = (void *)_os_log_send_and_compose_impl();
              v38 = v356;
              if (v37)
                free(v37);
              goto LABEL_123;
            }
            v31 = _os_log_pack_size();
            v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
            v33 = (std::__shared_weak_count *)operator new();
            v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v33->__shared_owners_ = 0;
            v33->__shared_weak_owners_ = 0;
            v33[1].__vftable = v32;
            v375[0] = v32;
            v375[1] = v32;
            v377 = 0;
            v378 = 0;
            v376 = v33;
            v34 = strlen(__s);
            if (v34 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v35 = v34;
            if (v34 >= 0x17)
            {
              v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v39 = v34 | 7;
              v40 = v39 + 1;
              p_dst = (void **)operator new(v39 + 1);
              *(_QWORD *)&v381 = v35;
              *((_QWORD *)&v381 + 1) = v40 | 0x8000000000000000;
              __dst = (std::string *)p_dst;
            }
            else
            {
              HIBYTE(v381) = v34;
              p_dst = (void **)&__dst;
              if (!v34)
              {
LABEL_64:
                *((_BYTE *)p_dst + v35) = 0;
                v41 = __dst;
                *(_QWORD *)v395 = v381;
                *(_QWORD *)&v395[7] = *(_QWORD *)((char *)&v381 + 7);
                v42 = HIBYTE(v381);
                v43 = operator new(0x38uLL);
                v43[1] = 0;
                v43[2] = 0;
                v43[3] = off_24EC5C400;
                *v43 = &off_24EC5C3B0;
                v44 = *(_QWORD *)v395;
                v43[4] = v41;
                v43[5] = v44;
                *(_QWORD *)((char *)v43 + 47) = *(_QWORD *)&v395[7];
                *((_BYTE *)v43 + 55) = v42;
                *(_QWORD *)v395 = 0;
                *(_QWORD *)&v395[7] = 0;
                v45 = v378;
                v377 = (char *)(v43 + 3);
                v378 = (std::__shared_weak_count *)v43;
                if (v45)
                {
                  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldaxr(p_shared_owners);
                  while (__stlxr(v47 - 1, p_shared_owners));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                *(_OWORD *)v392 = *(_OWORD *)v375;
                v48 = v377;
                *(_QWORD *)&v392[16] = v376;
                if (v376)
                {
                  v49 = (unint64_t *)&v376->__shared_owners_;
                  do
                    v50 = __ldxr(v49);
                  while (__stxr(v50 + 1, v49));
                }
                v51 = v378;
                *(_QWORD *)&v392[24] = v48;
                *(_QWORD *)&v392[32] = v378;
                if (v378)
                {
                  v52 = (unint64_t *)&v378->__shared_owners_;
                  do
                    v53 = __ldxr(v52);
                  while (__stxr(v53 + 1, v52));
                  *(_QWORD *)&v392[40] = v48;
                  do
                    v54 = __ldaxr(v52);
                  while (__stlxr(v54 - 1, v52));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                else
                {
                  *(_QWORD *)&v392[40] = v48;
                }
                v55 = v376;
                if (v376)
                {
                  v56 = (unint64_t *)&v376->__shared_owners_;
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                v58 = *(_QWORD *)v392;
                if (*(char *)(*(_QWORD *)&v392[40] + 31) >= 0)
                  v59 = *(_QWORD *)&v392[40] + 8;
                else
                  v59 = *(_QWORD *)(*(_QWORD *)&v392[40] + 8);
                v60 = _os_log_pack_fill();
                v61 = object[0];
                v62 = object[1];
                v63 = object[2];
                v64 = *(_DWORD *)&object[4];
                v65 = *(_DWORD *)&object[16];
                *(_DWORD *)v60 = 134219522;
                *(double *)(v60 + 4) = v11;
                *(_WORD *)(v60 + 12) = 1024;
                *(_DWORD *)(v60 + 14) = v61;
                *(_WORD *)(v60 + 18) = 1024;
                *(_DWORD *)(v60 + 20) = v64;
                *(_WORD *)(v60 + 24) = 1024;
                *(_DWORD *)(v60 + 26) = v62;
                *(_WORD *)(v60 + 30) = 1024;
                *(_DWORD *)(v60 + 32) = v63;
                *(_WORD *)(v60 + 36) = 1024;
                *(_DWORD *)(v60 + 38) = v65;
                *(_WORD *)(v60 + 42) = 2080;
                *(_QWORD *)(v60 + 44) = v59;
                v66 = (char *)operator new();
                v67 = *(unsigned __int8 *)(v351 + 39);
                v68 = v349;
                if ((v67 & 0x80u) != 0)
                {
                  v68 = *(_QWORD *)(v351 + 16);
                  v67 = *(_QWORD *)(v351 + 24);
                }
                *(_QWORD *)v66 = v58;
                *(_OWORD *)(v66 + 8) = *(_OWORD *)&v392[8];
                *(_QWORD *)&v392[8] = 0;
                *(_QWORD *)&v392[16] = 0;
                *(_OWORD *)(v66 + 24) = *(_OWORD *)&v392[24];
                *(_QWORD *)&v392[24] = 0;
                *(_QWORD *)&v392[32] = 0;
                *((_QWORD *)v66 + 5) = v68;
                *((_QWORD *)v66 + 6) = v67;
                v66[56] = 16;
                __dst = 0;
                v375[0] = v66;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), v375);
                v69 = v375[0];
                v375[0] = 0;
                if (v69)
                {
                  v70 = (std::__shared_weak_count *)*((_QWORD *)v69 + 4);
                  if (v70)
                  {
                    v71 = (unint64_t *)&v70->__shared_owners_;
                    do
                      v72 = __ldaxr(v71);
                    while (__stlxr(v72 - 1, v71));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                  v73 = (std::__shared_weak_count *)*((_QWORD *)v69 + 2);
                  if (v73)
                  {
                    v74 = (unint64_t *)&v73->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                  MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
                  v76 = __dst;
                  __dst = 0;
                  if (v76)
                  {
                    size = (std::__shared_weak_count *)v76[1].__r_.__value_.__l.__size_;
                    if (size)
                    {
                      v78 = (unint64_t *)&size->__shared_owners_;
                      do
                        v79 = __ldaxr(v78);
                      while (__stlxr(v79 - 1, v78));
                      if (!v79)
                      {
                        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                        std::__shared_weak_count::__release_weak(size);
                      }
                    }
                    v80 = (std::__shared_weak_count *)v76->__r_.__value_.__r.__words[2];
                    if (v80)
                    {
                      v81 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
                  }
                }
                v83 = *(std::__shared_weak_count **)&v392[32];
                v38 = v356;
                if (*(_QWORD *)&v392[32])
                {
                  v84 = (unint64_t *)(*(_QWORD *)&v392[32] + 8);
                  do
                    v85 = __ldaxr(v84);
                  while (__stlxr(v85 - 1, v84));
                  if (!v85)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                  }
                }
                v86 = *(std::__shared_weak_count **)&v392[16];
                if (*(_QWORD *)&v392[16])
                {
                  v87 = (unint64_t *)(*(_QWORD *)&v392[16] + 8);
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
LABEL_123:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (v38)
                {
                  v89 = object[0];
                  v90 = object[1];
                  v91 = object[2];
                  v92 = *(_DWORD *)&object[4];
                  v93 = *(_DWORD *)&object[16];
                  *(_DWORD *)&v392[24] = 0;
                  sub_2238E7D38((uint64_t)&__dst, (uint64_t)v392, v391);
                  if (*(_DWORD *)&v392[24] == -1)
                    sub_22316DD70();
                  __dst = &__p;
                  ((void (*)(void **__return_ptr, std::string **, _BYTE *))off_24EC5C388[*(unsigned int *)&v392[24]])(v375, &__dst, v392);
                  if (*(_DWORD *)&v392[24] != -1)
                    ((void (*)(std::string **, _BYTE *))off_24EC5C340[*(unsigned int *)&v392[24]])(&__dst, v392);
                  v94 = v375;
                  if (SHIBYTE(v376) < 0)
                    v94 = (void **)v375[0];
                  sub_22322C138((uint64_t)v369, "Skipping integration due to poor slam at time: %lf vio_initialized(%d) map_size(%u) tracking_state_is_nominal(%d) is_3dof(%d) reinitialize_attempts(%d) slam_mode(%s)", v11, v89, v92, v90, v91, v93, (const char *)v94);
                  if (SHIBYTE(v376) < 0)
                    operator delete(v375[0]);
                  sub_223182C08((uint64_t)v369);
                }
                sub_223182C08((uint64_t)v369);
                v95 = v374;
                if (v374)
                {
                  v96 = (unint64_t *)&v374->__shared_owners_;
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
                goto LABEL_139;
              }
            }
            memcpy(p_dst, __s, v35);
            goto LABEL_64;
          }
        }
        memmove(v27, v19, v18);
        goto LABEL_45;
      }
    }
    memmove(v24, v22, v23);
    goto LABEL_37;
  }
  v12 = 0;
LABEL_140:
  sub_2238CE8E8(&__p);
  if (**(int **)(__p.__r_.__value_.__r.__words[0] + 56) <= 3)
  {
    v98 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 72);
    v99 = sub_22322F254((uint64_t)__p.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
    v100 = (char *)v99;
    if (v98 || v99 != 0)
    {
      *(_QWORD *)v369 = &__p;
      *(std::chrono::steady_clock::time_point *)&v369[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v369[16] = std::chrono::system_clock::now();
      LODWORD(v370) = 3;
      *((_QWORD *)&v370 + 1) = "unknown file";
      LODWORD(v371) = 357;
      v373 = 0;
      v374 = 0;
      v372 = "unknown function";
      v102 = **(_QWORD **)v369;
      v354 = **(char ***)v369;
      if (*(char *)(**(_QWORD **)v369 + 39) < 0)
      {
        v104 = *(const char **)(v102 + 16);
        v103 = *(_QWORD *)(v102 + 24);
        __sa = v100;
        v352 = **(_QWORD **)v369 + 16;
        v106 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v106 & 1) != 0)
          goto LABEL_149;
      }
      else
      {
        v103 = *(unsigned __int8 *)(**(_QWORD **)v369 + 39);
        v104 = (const char *)(**(_QWORD **)v369 + 16);
        __sa = v100;
        v352 = (uint64_t)v104;
        v105 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v105 & 1) != 0)
          goto LABEL_149;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v392);
        sub_223199C58("com.apple.cv3d", (unint64_t)v392, byte_255788F40);
        if (v392[24] && (v392[23] & 0x80000000) != 0)
          operator delete(*(void **)v392);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_149:
      if (byte_255788F40[23] >= 0)
        v107 = byte_255788F40;
      else
        v107 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v108 = byte_255788F40[23];
      else
        v108 = *(_QWORD *)&byte_255788F40[8];
      v109 = v104;
      *(_QWORD *)v392 = os_log_create(v107, v104);
      v110 = &v392[8];
      if (v108 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v108 >= 0x17)
      {
        v111 = v9;
        v112 = v10;
        v113 = v12;
        v114 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17)
          v114 = v108 | 7;
        v115 = v114 + 1;
        v110 = operator new(v114 + 1);
        *(_QWORD *)&v392[16] = v108;
        *(_QWORD *)&v392[24] = v115 | 0x8000000000000000;
        *(_QWORD *)&v392[8] = v110;
        v12 = v113;
        v10 = v112;
        v9 = v111;
      }
      else
      {
        v392[31] = v108;
        if (!v108)
        {
LABEL_163:
          v110[v108] = 0;
          v392[32] = 1;
          v116 = &v392[40];
          if (v103 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v103 >= 0x17)
          {
            v117 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v103 | 7) != 0x17)
              v117 = v103 | 7;
            v118 = v117 + 1;
            v116 = operator new(v117 + 1);
            *(_QWORD *)&v392[48] = v103;
            v393 = v118 | 0x8000000000000000;
            *(_QWORD *)&v392[40] = v116;
          }
          else
          {
            HIBYTE(v393) = v103;
            if (!v103)
              goto LABEL_171;
          }
          memmove(v116, v109, v103);
LABEL_171:
          v116[v103] = 0;
          LOBYTE(v394) = 1;
          v119 = *(NSObject **)v392;
          if (SHIBYTE(v393) < 0)
            operator delete(*(void **)&v392[40]);
          if (v392[32] && (v392[31] & 0x80000000) != 0)
            operator delete(*(void **)&v392[8]);
          if (*(_QWORD *)v392)
            os_release(*(void **)v392);
          if (__sa && *((_QWORD *)__sa + 3))
          {
            v120 = _os_log_pack_size();
            v121 = (std::__shared_weak_count_vtbl *)operator new(v120, (std::align_val_t)8uLL);
            v122 = (std::__shared_weak_count *)operator new();
            v123 = v122;
            v122->__shared_owners_ = 0;
            v124 = (unint64_t *)&v122->__shared_owners_;
            v122->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v122->__shared_weak_owners_ = 0;
            v122[1].__vftable = v121;
            *(_QWORD *)v392 = v121;
            *(_QWORD *)&v392[8] = v121;
            *(_QWORD *)&v392[16] = v122;
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
            memset(&v392[24], 0, 24);
            do
              v126 = __ldaxr(v124);
            while (__stlxr(v126 - 1, v124));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v123);
            }
            v127 = *(_QWORD *)v392;
            v128 = _os_log_pack_fill();
            v129 = object[0];
            v130 = object[1];
            v131 = *(_DWORD *)&object[4];
            v132 = *(_DWORD *)&object[16];
            *(_DWORD *)v128 = 134219008;
            *(double *)(v128 + 4) = v11;
            *(_WORD *)(v128 + 12) = 1024;
            *(_DWORD *)(v128 + 14) = v129;
            *(_WORD *)(v128 + 18) = 1024;
            *(_DWORD *)(v128 + 20) = v131;
            *(_WORD *)(v128 + 24) = 1024;
            *(_DWORD *)(v128 + 26) = v130;
            *(_WORD *)(v128 + 30) = 1024;
            *(_DWORD *)(v128 + 32) = v132;
            v133 = (char *)operator new();
            v134 = v354[39];
            v135 = v352;
            if ((v134 & 0x80u) != 0)
            {
              v135 = *((_QWORD *)v354 + 2);
              v134 = *((_QWORD *)v354 + 3);
            }
            *(_QWORD *)v133 = v127;
            *(_OWORD *)(v133 + 8) = *(_OWORD *)&v392[8];
            *(_QWORD *)&v392[8] = 0;
            *(_QWORD *)&v392[16] = 0;
            *(_OWORD *)(v133 + 24) = *(_OWORD *)&v392[24];
            *(_QWORD *)&v392[24] = 0;
            *(_QWORD *)&v392[32] = 0;
            *((_QWORD *)v133 + 5) = v135;
            *((_QWORD *)v133 + 6) = v134;
            v133[56] = 1;
            __dst = 0;
            v375[0] = v133;
            (*(void (**)(_QWORD, void **))(**((_QWORD **)__sa + 3) + 40))(*((_QWORD *)__sa + 3), v375);
            v136 = v375[0];
            v375[0] = 0;
            if (v136)
            {
              v137 = (std::__shared_weak_count *)*((_QWORD *)v136 + 4);
              if (v137)
              {
                v138 = (unint64_t *)&v137->__shared_owners_;
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              v140 = (std::__shared_weak_count *)*((_QWORD *)v136 + 2);
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              MEMORY[0x227684CE8](v136, 0x10F0C40B62ED6C6);
              v143 = __dst;
              __dst = 0;
              if (v143)
              {
                v144 = (std::__shared_weak_count *)v143[1].__r_.__value_.__l.__size_;
                if (v144)
                {
                  v145 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
                v147 = (std::__shared_weak_count *)v143->__r_.__value_.__r.__words[2];
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                MEMORY[0x227684CE8](v143, 0x10F0C40B62ED6C6);
              }
            }
            v150 = *(std::__shared_weak_count **)&v392[32];
            if (*(_QWORD *)&v392[32])
            {
              v151 = (unint64_t *)(*(_QWORD *)&v392[32] + 8);
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
            v153 = *(std::__shared_weak_count **)&v392[16];
            if (*(_QWORD *)&v392[16])
            {
              v154 = (unint64_t *)(*(_QWORD *)&v392[16] + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
          }
          else
          {
            os_log_type_enabled(v119, OS_LOG_TYPE_INFO);
            *(_DWORD *)v392 = 134219008;
            *(double *)&v392[4] = v11;
            *(_WORD *)&v392[12] = 1024;
            *(_DWORD *)&v392[14] = object[0];
            *(_WORD *)&v392[18] = 1024;
            *(_DWORD *)&v392[20] = *(_DWORD *)&object[4];
            *(_WORD *)&v392[24] = 1024;
            *(_DWORD *)&v392[26] = object[1];
            *(_WORD *)&v392[30] = 1024;
            *(_DWORD *)&v392[32] = *(_DWORD *)&object[16];
            v156 = (void *)_os_log_send_and_compose_impl();
            if (v156)
              free(v156);
          }
          if (v98)
          {
            sub_22322C138((uint64_t)v369, "KFE:SS:t:%f, IN:%d, MS:%d, NS:%d, RI:%d", v11, object[0], *(_DWORD *)&object[4], object[1], *(_DWORD *)&object[16]);
            sub_223182C08((uint64_t)v369);
          }
          sub_223182C08((uint64_t)v369);
          v157 = v374;
          if (v374)
          {
            v158 = (unint64_t *)&v374->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          goto LABEL_230;
        }
      }
      memmove(v110, v107, v108);
      goto LABEL_163;
    }
  }
LABEL_230:
  if ((_QWORD)v389)
  {
    *((_QWORD *)&v389 + 1) = v389;
    operator delete((void *)v389);
  }
  if (*((_QWORD *)&v387 + 1))
  {
    *(_QWORD *)&v388 = *((_QWORD *)&v387 + 1);
    operator delete(*((void **)&v387 + 1));
  }
  if ((_QWORD)v386)
  {
    *((_QWORD *)&v386 + 1) = v386;
    operator delete((void *)v386);
  }
  if (*((_QWORD *)&v384 + 1))
  {
    *(_QWORD *)&v385 = *((_QWORD *)&v384 + 1);
    operator delete(*((void **)&v384 + 1));
  }
  if (v383[2])
  {
    v383[3] = v383[2];
    operator delete(v383[2]);
  }
  if (*(_QWORD *)&object[48])
  {
    v383[0] = *(void **)&object[48];
    operator delete(*(void **)&object[48]);
  }
  if (*(_QWORD *)&object[24])
  {
    *(_QWORD *)&object[32] = *(_QWORD *)&object[24];
    operator delete(*(void **)&object[24]);
  }
LABEL_244:
  v160 = *(_QWORD *)(v10 + 448);
  if ((v160 & 0xFF00000000) != 0
    && (*(_BYTE *)(v9 + 112) && *(_DWORD *)(v9 + 108) > v160
     || *(_BYTE *)(v9 + 120) && *(_DWORD *)(v9 + 116) < v160))
  {
    sub_2238CE8E8(&v368);
    if (**(int **)(v368 + 56) > 4
      || (v161 = *(unsigned __int8 *)(v368 + 72),
          v162 = sub_22322F254(v368, "OSLogSurrogateAppender", 1, 0),
          v163 = v162,
          !v161)
      && !v162)
    {
LABEL_439:
      v12 |= 2u;
      goto LABEL_440;
    }
    *(_QWORD *)v392 = &v368;
    *(std::chrono::steady_clock::time_point *)&v392[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v392[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v392[24] = 4;
    *(_QWORD *)&v392[32] = "unknown file";
    *(_DWORD *)&v392[40] = 370;
    v393 = 0;
    v394 = 0;
    *(_QWORD *)&v392[48] = "unknown function";
    v164 = *(unsigned __int8 *)(v10 + 452);
    if (*(_BYTE *)(v10 + 452))
    {
      sub_2231C4FB4((unsigned int *)(v10 + 448));
      if (v367 >= 0)
        v165 = v366;
      else
        v165 = (void **)v366[0];
    }
    else
    {
      v165 = (void **)"0";
    }
    v357 = (char *)v165;
    v350 = *(unsigned __int8 *)(v9 + 112);
    v353 = v164;
    if (*(_BYTE *)(v9 + 112))
    {
      sub_2231C4FB4((unsigned int *)(v9 + 108));
      if (v365 >= 0)
        v166 = (const char *)&v364;
      else
        v166 = (const char *)v364;
      v347 = v166;
      v167 = (unsigned int *)(v9 + 116);
      v168 = *(unsigned __int8 *)(v9 + 120);
      v346 = (unsigned int *)(v9 + 116);
      if (*(_BYTE *)(v9 + 120))
        goto LABEL_262;
    }
    else
    {
      v347 = "0";
      v167 = (unsigned int *)(v9 + 116);
      v168 = *(unsigned __int8 *)(v9 + 120);
      v346 = (unsigned int *)(v9 + 116);
      if (*(_BYTE *)(v9 + 120))
      {
LABEL_262:
        sub_2231C4FB4(v167);
        if (v363 >= 0)
          v169 = (const char *)&v362;
        else
          v169 = (const char *)v362;
        goto LABEL_267;
      }
    }
    v169 = "0";
LABEL_267:
    v355 = (char *)v169;
    __sb = v12;
    v170 = **(_QWORD **)v392;
    v171 = (const char *)(**(_QWORD **)v392 + 16);
    v343 = v171;
    v344 = **(_QWORD **)v392;
    if (*(char *)(**(_QWORD **)v392 + 39) < 0)
    {
      v171 = *(const char **)(v170 + 16);
      v172 = *(_QWORD *)(v170 + 24);
    }
    else
    {
      v172 = *(unsigned __int8 *)(**(_QWORD **)v392 + 39);
    }
    v345 = v161;
    v348 = v168;
    v173 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v173 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v174 = byte_255788F40;
    else
      v174 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v175 = byte_255788F40[23];
    else
      v175 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v174, v171);
    v176 = &object[8];
    if (v175 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v175 >= 0x17)
    {
      v177 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v175 | 7) != 0x17)
        v177 = v175 | 7;
      v178 = v177 + 1;
      v176 = operator new(v177 + 1);
      *(_QWORD *)&object[16] = v175;
      *(_QWORD *)&object[24] = v178 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v176;
    }
    else
    {
      object[31] = v175;
      if (!v175)
      {
LABEL_285:
        v176[v175] = 0;
        object[32] = 1;
        v179 = &object[40];
        if (v172 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v172 >= 0x17)
        {
          v180 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v172 | 7) != 0x17)
            v180 = v172 | 7;
          v181 = v180 + 1;
          v179 = operator new(v180 + 1);
          *(_QWORD *)&object[48] = v172;
          v383[0] = (void *)(v181 | 0x8000000000000000);
          *(_QWORD *)&object[40] = v179;
        }
        else
        {
          HIBYTE(v383[0]) = v172;
          if (!v172)
          {
LABEL_293:
            v179[v172] = 0;
            LOBYTE(v383[1]) = 1;
            v182 = *(NSObject **)object;
            if (SHIBYTE(v383[0]) < 0)
              operator delete(*(void **)&object[40]);
            v12 = __sb;
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v163 || !*(_QWORD *)(v163 + 24))
            {
              v189 = (unsigned int *)(v10 + 448);
              os_log_type_enabled(v182, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 136315906;
              *(_QWORD *)&object[4] = v357;
              *(_WORD *)&object[12] = 2080;
              *(_QWORD *)&object[14] = v347;
              *(_WORD *)&object[22] = 2080;
              *(_QWORD *)&object[24] = v355;
              *(_WORD *)&object[32] = 2048;
              *(double *)&object[34] = v11;
              v190 = (void *)_os_log_send_and_compose_impl();
              v191 = v346;
              v192 = v350;
              if (v190)
                free(v190);
LABEL_400:
              if (v348 && v363 < 0)
                operator delete(v362);
              if (v192 && v365 < 0)
                operator delete(v364);
              if (v353 && v367 < 0)
                operator delete(v366[0]);
              if (!v345)
                goto LABEL_434;
              v249 = *(unsigned __int8 *)(v10 + 452);
              if (*(_BYTE *)(v10 + 452))
              {
                v250 = v369;
                sub_2231C4FB4(v189);
                if (v369[23] < 0)
                  v250 = *(const char **)v369;
                v251 = *(unsigned __int8 *)(v9 + 112);
                if (*(_BYTE *)(v9 + 112))
                {
LABEL_414:
                  sub_2231C4FB4((unsigned int *)(v9 + 108));
                  if (SHIBYTE(v376) >= 0)
                    v252 = (const char *)v375;
                  else
                    v252 = (const char *)v375[0];
                  v253 = *(unsigned __int8 *)(v9 + 120);
                  if (*(_BYTE *)(v9 + 120))
                    goto LABEL_418;
                  goto LABEL_423;
                }
              }
              else
              {
                v250 = "0";
                v251 = *(unsigned __int8 *)(v9 + 112);
                if (*(_BYTE *)(v9 + 112))
                  goto LABEL_414;
              }
              v252 = "0";
              v253 = *(unsigned __int8 *)(v9 + 120);
              if (*(_BYTE *)(v9 + 120))
              {
LABEL_418:
                sub_2231C4FB4(v191);
                if (v381 >= 0)
                  v254 = (std::string *)&__dst;
                else
                  v254 = __dst;
                goto LABEL_424;
              }
LABEL_423:
              v254 = (std::string *)"0";
LABEL_424:
              sub_22322C138((uint64_t)v392, "Skipping integration due to lux level out of spec: %s, min/max: {%s,%s}, time:%lf", v250, v252, (const char *)v254, v11);
              if (v253 && SHIBYTE(v381) < 0)
                operator delete(__dst);
              if (v251 && SHIBYTE(v376) < 0)
                operator delete(v375[0]);
              if (v249 && (v369[23] & 0x80000000) != 0)
                operator delete(*(void **)v369);
              sub_223182C08((uint64_t)v392);
LABEL_434:
              sub_223182C08((uint64_t)v392);
              v255 = v394;
              if (v394)
              {
                v256 = (unint64_t *)&v394->__shared_owners_;
                do
                  v257 = __ldaxr(v256);
                while (__stlxr(v257 - 1, v256));
                if (!v257)
                {
                  ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                  std::__shared_weak_count::__release_weak(v255);
                }
              }
              goto LABEL_439;
            }
            v183 = _os_log_pack_size();
            v184 = (std::__shared_weak_count_vtbl *)operator new(v183, (std::align_val_t)8uLL);
            v185 = (std::__shared_weak_count *)operator new();
            v185->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v185->__shared_owners_ = 0;
            v185->__shared_weak_owners_ = 0;
            v185[1].__vftable = v184;
            v375[0] = v184;
            v375[1] = v184;
            v377 = 0;
            v378 = 0;
            v376 = v185;
            v186 = strlen(v357);
            if (v186 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v187 = v186;
            if (v186 >= 0x17)
            {
              v193 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v186 | 7) != 0x17)
                v193 = v186 | 7;
              v194 = v193 + 1;
              v188 = (void **)operator new(v193 + 1);
              *(_QWORD *)&v381 = v187;
              *((_QWORD *)&v381 + 1) = v194 | 0x8000000000000000;
              __dst = (std::string *)v188;
            }
            else
            {
              HIBYTE(v381) = v186;
              v188 = (void **)&__dst;
              if (!v186)
              {
LABEL_312:
                *((_BYTE *)v188 + v187) = 0;
                v195 = strlen(v347);
                if (v195 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v196 = v195;
                if (v195 >= 0x17)
                {
                  v198 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v195 | 7) != 0x17)
                    v198 = v195 | 7;
                  v199 = v198 + 1;
                  v197 = (std::string *)operator new(v198 + 1);
                  __p.__r_.__value_.__l.__size_ = v196;
                  __p.__r_.__value_.__r.__words[2] = v199 | 0x8000000000000000;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
                }
                else
                {
                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v195;
                  v197 = &__p;
                  if (!v195)
                  {
LABEL_320:
                    v197->__r_.__value_.__s.__data_[v196] = 0;
                    v200 = strlen(v355);
                    if (v200 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v201 = v200;
                    if (v200 >= 0x17)
                    {
                      v203 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v200 | 7) != 0x17)
                        v203 = v200 | 7;
                      v204 = v203 + 1;
                      v202 = operator new(v203 + 1);
                      *(_QWORD *)&v395[8] = v201;
                      *(_QWORD *)&v395[16] = v204 | 0x8000000000000000;
                      *(_QWORD *)v395 = v202;
                    }
                    else
                    {
                      v395[23] = v200;
                      v202 = v395;
                      if (!v200)
                      {
                        v189 = (unsigned int *)(v10 + 448);
LABEL_328:
                        v202[v201] = 0;
                        *(_QWORD *)&object[8] = __dst;
                        *(_QWORD *)&object[16] = v381;
                        *(_QWORD *)&object[23] = *(_QWORD *)((char *)&v381 + 7);
                        *(_OWORD *)&object[32] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                        *(_QWORD *)&object[47] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1]
                                                                           + 7);
                        *(void **)((char *)&v383[1] + 7) = *(void **)&v395[15];
                        *(_QWORD *)object = off_24EC5C488;
                        object[31] = HIBYTE(v381);
                        object[55] = *((_BYTE *)&__p.__r_.__value_.__s + 23);
                        v383[0] = *(void **)v395;
                        v383[1] = *(void **)&v395[8];
                        HIBYTE(v383[2]) = v395[23];
                        v205 = (char *)operator new(0x68uLL);
                        *((_QWORD *)v205 + 1) = 0;
                        *((_QWORD *)v205 + 2) = 0;
                        *(_QWORD *)v205 = &off_24EC5C438;
                        *((_QWORD *)v205 + 3) = off_24EC5C488;
                        *((_OWORD *)v205 + 2) = *(_OWORD *)&object[8];
                        *((_QWORD *)v205 + 6) = *(_QWORD *)&object[24];
                        memset(&object[8], 0, 24);
                        *(_OWORD *)(v205 + 56) = *(_OWORD *)&object[32];
                        *((_QWORD *)v205 + 9) = *(_QWORD *)&object[48];
                        memset(&object[32], 0, 24);
                        v206 = *(_OWORD *)v383;
                        *((void **)v205 + 12) = v383[2];
                        *((_OWORD *)v205 + 5) = v206;
                        memset(v383, 0, 24);
                        v207 = v378;
                        v377 = v205 + 24;
                        v378 = (std::__shared_weak_count *)v205;
                        v191 = v346;
                        if (v207)
                        {
                          v208 = (unint64_t *)&v207->__shared_owners_;
                          do
                            v209 = __ldaxr(v208);
                          while (__stlxr(v209 - 1, v208));
                          if (!v209)
                          {
                            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                            std::__shared_weak_count::__release_weak(v207);
                          }
                        }
                        if (SHIBYTE(v383[2]) < 0)
                        {
                          operator delete(v383[0]);
                          if ((object[55] & 0x80000000) == 0)
                          {
LABEL_335:
                            if ((object[31] & 0x80000000) == 0)
                              goto LABEL_336;
                            goto LABEL_340;
                          }
                        }
                        else if ((object[55] & 0x80000000) == 0)
                        {
                          goto LABEL_335;
                        }
                        operator delete(*(void **)&object[32]);
                        if ((object[31] & 0x80000000) == 0)
                        {
LABEL_336:
                          *(_OWORD *)v369 = *(_OWORD *)v375;
                          v211 = v376;
                          v210 = v377;
                          *(_QWORD *)&v369[16] = v376;
                          if (!v376)
                            goto LABEL_343;
                          goto LABEL_341;
                        }
LABEL_340:
                        operator delete(*(void **)&object[8]);
                        *(_OWORD *)v369 = *(_OWORD *)v375;
                        v211 = v376;
                        v210 = v377;
                        *(_QWORD *)&v369[16] = v376;
                        if (!v376)
                        {
LABEL_343:
                          v214 = v378;
                          *(_QWORD *)&v370 = v210;
                          *((_QWORD *)&v370 + 1) = v378;
                          if (v378)
                          {
                            v215 = (unint64_t *)&v378->__shared_owners_;
                            do
                              v216 = __ldxr(v215);
                            while (__stxr(v216 + 1, v215));
                            v371 = v210;
                            do
                              v217 = __ldaxr(v215);
                            while (__stlxr(v217 - 1, v215));
                            if (!v217)
                            {
                              ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                              std::__shared_weak_count::__release_weak(v214);
                            }
                          }
                          else
                          {
                            v371 = v210;
                          }
                          v218 = v376;
                          if (v376)
                          {
                            v219 = (unint64_t *)&v376->__shared_owners_;
                            do
                              v220 = __ldaxr(v219);
                            while (__stlxr(v220 - 1, v219));
                            if (!v220)
                            {
                              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                              std::__shared_weak_count::__release_weak(v218);
                            }
                          }
                          v221 = *(_QWORD *)v369;
                          if (v371[31] >= 0)
                            v222 = v371 + 8;
                          else
                            v222 = (char *)*((_QWORD *)v371 + 1);
                          if (v371[55] >= 0)
                            v223 = v371 + 32;
                          else
                            v223 = (char *)*((_QWORD *)v371 + 4);
                          if (v371[79] >= 0)
                            v224 = v371 + 56;
                          else
                            v224 = (char *)*((_QWORD *)v371 + 7);
                          v225 = _os_log_pack_fill();
                          *(_DWORD *)v225 = 136315906;
                          *(_QWORD *)(v225 + 4) = v222;
                          *(_WORD *)(v225 + 12) = 2080;
                          *(_QWORD *)(v225 + 14) = v223;
                          *(_WORD *)(v225 + 22) = 2080;
                          *(_QWORD *)(v225 + 24) = v224;
                          *(_WORD *)(v225 + 32) = 2048;
                          *(double *)(v225 + 34) = v11;
                          v226 = operator new();
                          v227 = *(unsigned __int8 *)(v344 + 39);
                          v228 = v343;
                          if ((v227 & 0x80u) != 0)
                          {
                            v228 = *(const char **)(v344 + 16);
                            v227 = *(_QWORD *)(v344 + 24);
                          }
                          *(_QWORD *)v226 = v221;
                          *(_OWORD *)(v226 + 8) = *(_OWORD *)&v369[8];
                          *(_QWORD *)&v369[8] = 0;
                          *(_QWORD *)&v369[16] = 0;
                          *(_OWORD *)(v226 + 24) = v370;
                          v370 = 0uLL;
                          *(_QWORD *)(v226 + 40) = v228;
                          *(_QWORD *)(v226 + 48) = v227;
                          *(_BYTE *)(v226 + 56) = 16;
                          v375[0] = 0;
                          *(_QWORD *)object = v226;
                          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v163 + 24) + 40))(*(_QWORD *)(v163 + 24), object);
                          v12 = __sb;
                          v229 = *(_QWORD *)object;
                          *(_QWORD *)object = 0;
                          v192 = v350;
                          if (v229)
                          {
                            v230 = *(std::__shared_weak_count **)(v229 + 32);
                            if (v230)
                            {
                              v231 = (unint64_t *)&v230->__shared_owners_;
                              do
                                v232 = __ldaxr(v231);
                              while (__stlxr(v232 - 1, v231));
                              if (!v232)
                              {
                                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                                std::__shared_weak_count::__release_weak(v230);
                              }
                            }
                            v233 = *(std::__shared_weak_count **)(v229 + 16);
                            if (v233)
                            {
                              v234 = (unint64_t *)&v233->__shared_owners_;
                              do
                                v235 = __ldaxr(v234);
                              while (__stlxr(v235 - 1, v234));
                              if (!v235)
                              {
                                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                                std::__shared_weak_count::__release_weak(v233);
                              }
                            }
                            MEMORY[0x227684CE8](v229, 0x10F0C40B62ED6C6);
                            v236 = v375[0];
                            v375[0] = 0;
                            if (v236)
                            {
                              v237 = (std::__shared_weak_count *)*((_QWORD *)v236 + 4);
                              if (v237)
                              {
                                v238 = (unint64_t *)&v237->__shared_owners_;
                                do
                                  v239 = __ldaxr(v238);
                                while (__stlxr(v239 - 1, v238));
                                if (!v239)
                                {
                                  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                                  std::__shared_weak_count::__release_weak(v237);
                                }
                              }
                              v240 = (std::__shared_weak_count *)*((_QWORD *)v236 + 2);
                              if (v240)
                              {
                                v241 = (unint64_t *)&v240->__shared_owners_;
                                do
                                  v242 = __ldaxr(v241);
                                while (__stlxr(v242 - 1, v241));
                                if (!v242)
                                {
                                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                                  std::__shared_weak_count::__release_weak(v240);
                                }
                              }
                              MEMORY[0x227684CE8](v236, 0x10F0C40B62ED6C6);
                            }
                          }
                          v243 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
                          if (*((_QWORD *)&v370 + 1))
                          {
                            v244 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
                            do
                              v245 = __ldaxr(v244);
                            while (__stlxr(v245 - 1, v244));
                            if (!v245)
                            {
                              ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                              std::__shared_weak_count::__release_weak(v243);
                            }
                          }
                          v246 = *(std::__shared_weak_count **)&v369[16];
                          if (*(_QWORD *)&v369[16])
                          {
                            v247 = (unint64_t *)(*(_QWORD *)&v369[16] + 8);
                            do
                              v248 = __ldaxr(v247);
                            while (__stlxr(v248 - 1, v247));
                            if (!v248)
                            {
                              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                              std::__shared_weak_count::__release_weak(v246);
                            }
                          }
                          goto LABEL_400;
                        }
LABEL_341:
                        v212 = (unint64_t *)&v211->__shared_owners_;
                        do
                          v213 = __ldxr(v212);
                        while (__stxr(v213 + 1, v212));
                        goto LABEL_343;
                      }
                    }
                    v189 = (unsigned int *)(v10 + 448);
                    memcpy(v202, v355, v201);
                    goto LABEL_328;
                  }
                }
                memcpy(v197, v347, v196);
                goto LABEL_320;
              }
            }
            memcpy(v188, v357, v187);
            goto LABEL_312;
          }
        }
        memmove(v179, v171, v172);
        goto LABEL_293;
      }
    }
    memmove(v176, v174, v175);
    goto LABEL_285;
  }
LABEL_440:
  if (*(_BYTE *)(v9 + 596))
    goto LABEL_441;
  v280.i32[0] = *(_DWORD *)(v10 + 1344);
  a8.i32[0] = *(_DWORD *)(v10 + 1376);
  a9.i64[0] = *(_QWORD *)(v10 + 1384);
  a9.i32[2] = *(_DWORD *)(v10 + 1392);
  v281 = (int8x16_t)vnegq_f32(a9);
  v280.i32[1] = *(_DWORD *)(v10 + 1360);
  *(float32x2_t *)v283.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)(v10 + 1336), *(int32x2_t *)(v10 + 1352)), *(float *)v281.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)(v10 + 1336), *(int32x2_t *)(v10 + 1352)), *(float32x2_t *)a9.f32, 1), v280, a9, 2);
  v282 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v10 + 1368), *(float32x2_t *)v281.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v10 + 1368), 1), *(float32x2_t *)a9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v281, v281, 8uLL), a8);
  *(float32x2_t *)&v283.u32[2] = v282;
  if (!BYTE12(xmmword_255794BD0))
  {
    DWORD2(xmmword_255794BD0) = v282.i32[0];
    *(_QWORD *)&xmmword_255794BD0 = v283.i64[0];
    BYTE12(xmmword_255794BD0) = 1;
    goto LABEL_441;
  }
  if (*(_BYTE *)(v10 + 1801) && !*(_BYTE *)(v10 + 1800))
  {
    v284 = (int8x16_t)vsubq_f32(v283, (float32x4_t)xmmword_255794BD0);
    v285 = (float32x2_t)vextq_s8(v284, v284, 8uLL).u64[0];
    if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v284.i8, *(float32x2_t *)v284.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v284.i8, 1), *(float32x2_t *)v284.i8, 1), v285, v285).f32[0]) > 0.01)
    {
      DWORD2(xmmword_255794BD0) = v283.i32[2];
      *(_QWORD *)&xmmword_255794BD0 = v283.i64[0];
      goto LABEL_441;
    }
    sub_2238CE8E8(&v368);
    if (**(int **)(v368 + 56) > 3)
      goto LABEL_574;
    v286 = *(unsigned __int8 *)(v368 + 72);
    v287 = sub_22322F254(v368, "OSLogSurrogateAppender", 1, 0);
    v288 = v287;
    if (!v286 && !v287)
      goto LABEL_574;
    __sc = v12;
    *(_QWORD *)v392 = &v368;
    *(std::chrono::steady_clock::time_point *)&v392[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v392[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v392[24] = 3;
    *(_QWORD *)&v392[32] = "unknown file";
    *(_DWORD *)&v392[40] = 395;
    v393 = 0;
    v394 = 0;
    *(_QWORD *)&v392[48] = "unknown function";
    v289 = **(_QWORD **)v392;
    v290 = **(_QWORD **)v392 + 16;
    if (*(char *)(**(_QWORD **)v392 + 39) < 0)
    {
      v292 = *(const char **)(v289 + 16);
      v291 = *(_QWORD *)(v289 + 24);
    }
    else
    {
      v291 = *(unsigned __int8 *)(**(_QWORD **)v392 + 39);
      v292 = (const char *)(v289 + 16);
    }
    v293 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v293 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v294 = byte_255788F40;
    else
      v294 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v295 = byte_255788F40[23];
    else
      v295 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v294, v292);
    v296 = &object[8];
    if (v295 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v295 >= 0x17)
    {
      v297 = v288;
      v298 = v292;
      v299 = v289;
      v300 = v286;
      v301 = v290;
      v302 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v295 | 7) != 0x17)
        v302 = v295 | 7;
      v303 = v302 + 1;
      v296 = operator new(v302 + 1);
      *(_QWORD *)&object[16] = v295;
      *(_QWORD *)&object[24] = v303 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v296;
      v290 = v301;
      v286 = v300;
      v289 = v299;
      v292 = v298;
      v288 = v297;
    }
    else
    {
      object[31] = v295;
      if (!v295)
      {
LABEL_504:
        v296[v295] = 0;
        object[32] = 1;
        v304 = &object[40];
        if (v291 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v291 >= 0x17)
        {
          v305 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v291 | 7) != 0x17)
            v305 = v291 | 7;
          v306 = v305 + 1;
          v304 = operator new(v305 + 1);
          *(_QWORD *)&object[48] = v291;
          v383[0] = (void *)(v306 | 0x8000000000000000);
          *(_QWORD *)&object[40] = v304;
        }
        else
        {
          HIBYTE(v383[0]) = v291;
          if (!v291)
            goto LABEL_512;
        }
        memmove(v304, v292, v291);
LABEL_512:
        v304[v291] = 0;
        LOBYTE(v383[1]) = 1;
        v307 = *(NSObject **)object;
        if (SHIBYTE(v383[0]) < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v288 && *(_QWORD *)(v288 + 24))
        {
          v308 = _os_log_pack_size();
          v309 = (std::__shared_weak_count_vtbl *)operator new(v308, (std::align_val_t)8uLL);
          v310 = (std::__shared_weak_count *)operator new();
          v311 = v310;
          v310->__shared_owners_ = 0;
          v312 = (unint64_t *)&v310->__shared_owners_;
          v310->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v310->__shared_weak_owners_ = 0;
          v310[1].__vftable = v309;
          *(_QWORD *)object = v309;
          *(_QWORD *)&object[8] = v309;
          *(_QWORD *)&object[16] = v310;
          do
            v313 = __ldxr(v312);
          while (__stxr(v313 + 1, v312));
          memset(&object[24], 0, 24);
          do
            v314 = __ldaxr(v312);
          while (__stlxr(v314 - 1, v312));
          if (!v314)
          {
            ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
            std::__shared_weak_count::__release_weak(v311);
          }
          v315 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v316 = operator new();
          v317 = *(unsigned __int8 *)(v289 + 39);
          if ((v317 & 0x80u) == 0)
            v318 = v290;
          else
            v318 = *(_QWORD *)(v289 + 16);
          if ((v317 & 0x80u) != 0)
            v317 = *(_QWORD *)(v289 + 24);
          *(_QWORD *)v316 = v315;
          *(_OWORD *)(v316 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v316 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v316 + 40) = v318;
          *(_QWORD *)(v316 + 48) = v317;
          *(_BYTE *)(v316 + 56) = 1;
          *(_QWORD *)v395 = 0;
          __p.__r_.__value_.__r.__words[0] = v316;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v288 + 24) + 40))(*(_QWORD *)(v288 + 24), &__p);
          v319 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          v12 = __sc;
          if (v319)
          {
            v320 = *(std::__shared_weak_count **)(v319 + 32);
            if (v320)
            {
              v321 = (unint64_t *)&v320->__shared_owners_;
              do
                v322 = __ldaxr(v321);
              while (__stlxr(v322 - 1, v321));
              if (!v322)
              {
                ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                std::__shared_weak_count::__release_weak(v320);
              }
            }
            v323 = *(std::__shared_weak_count **)(v319 + 16);
            if (v323)
            {
              v324 = (unint64_t *)&v323->__shared_owners_;
              do
                v325 = __ldaxr(v324);
              while (__stlxr(v325 - 1, v324));
              if (!v325)
              {
                ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                std::__shared_weak_count::__release_weak(v323);
              }
            }
            MEMORY[0x227684CE8](v319, 0x10F0C40B62ED6C6);
            v326 = *(_QWORD *)v395;
            *(_QWORD *)v395 = 0;
            if (v326)
            {
              v327 = *(std::__shared_weak_count **)(v326 + 32);
              if (v327)
              {
                v328 = (unint64_t *)&v327->__shared_owners_;
                do
                  v329 = __ldaxr(v328);
                while (__stlxr(v329 - 1, v328));
                if (!v329)
                {
                  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                  std::__shared_weak_count::__release_weak(v327);
                }
              }
              v330 = *(std::__shared_weak_count **)(v326 + 16);
              if (v330)
              {
                v331 = (unint64_t *)&v330->__shared_owners_;
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                  std::__shared_weak_count::__release_weak(v330);
                }
              }
              MEMORY[0x227684CE8](v326, 0x10F0C40B62ED6C6);
            }
          }
          v333 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v334 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v335 = __ldaxr(v334);
            while (__stlxr(v335 - 1, v334));
            if (!v335)
            {
              ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
              std::__shared_weak_count::__release_weak(v333);
            }
          }
          v336 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v337 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v338 = __ldaxr(v337);
            while (__stlxr(v338 - 1, v337));
            if (!v338)
            {
              ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
              std::__shared_weak_count::__release_weak(v336);
            }
          }
        }
        else
        {
          os_log_type_enabled(v307, OS_LOG_TYPE_INFO);
          *(_WORD *)object = 0;
          v339 = (void *)_os_log_send_and_compose_impl();
          v12 = __sc;
          if (v339)
            free(v339);
        }
        if (v286)
        {
          sub_22322C138((uint64_t)v392, "Skipping integration due to camera not moving");
          sub_223182C08((uint64_t)v392);
        }
        sub_223182C08((uint64_t)v392);
        v340 = v394;
        if (v394)
        {
          v341 = (unint64_t *)&v394->__shared_owners_;
          do
            v342 = __ldaxr(v341);
          while (__stlxr(v342 - 1, v341));
          if (!v342)
          {
            ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
            std::__shared_weak_count::__release_weak(v340);
          }
        }
LABEL_574:
        v12 |= 4u;
        goto LABEL_441;
      }
    }
    memmove(v296, v294, v295);
    goto LABEL_504;
  }
LABEL_441:
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.integration_type";
  *(_QWORD *)&object[24] = 33;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v258 = sub_2241471F8();
    v259 = v258[2];
    if (!v259)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v259 = v258[2];
    }
    v260 = *(_QWORD *)(v259 + 64);
    v261 = (std::mutex *)(v260 + 32);
    std::mutex::lock((std::mutex *)(v260 + 32));
    v263 = *(_QWORD *)(v260 + 96);
    v262 = *(_QWORD *)(v260 + 104);
    std::mutex::unlock(v261);
    if (v263 != v262)
    {
      v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v265 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v266 = v264 >= 0 ? &__p : v265;
      v267 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v266);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v267 + 24))(v267))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        LODWORD(v368) = v12;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v267 + 24))(v267))
        {
          v392[23] = 9;
          strcpy(v392, "raw frame");
          *(_QWORD *)v395 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v395[8] = 2;
          v268 = sub_2241471F8();
          sub_2238E825C((uint64_t)v268, v267, (int *)&v368, (uint64_t)v392, (__int128 *)v395);
          if ((v392[23] & 0x80000000) != 0)
            operator delete(*(void **)v392);
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v269 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v269 = __p.__r_.__value_.__l.__size_;
  if (v269 >= 0x11)
  {
    v270 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v270 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v271 = v270->__r_.__value_.__r.__words[0];
    v272 = v270->__r_.__value_.__l.__size_;
    v273 = v270->__r_.__value_.__s.__data_[16];
    if (v271 == 0x6365722E64337663 && v272 == 0x73746174532E6E6FLL && v273 == 46)
    {
      v276 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v277 = &__p;
      else
        v277 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v278 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v278 = __p.__r_.__value_.__l.__size_;
      *(_DWORD *)v392 = v12;
      sub_22361F5C4(v276, v277, v278, (int *)v392, (uint64_t)"raw frame", 9);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12 == 0;
}

void sub_2238CE2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  char a67;
  uint64_t v67;

  if (a67)
  {
    if (a66 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v67 - 224);
  _Unwind_Resume(a1);
}

void sub_2238CE308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  if (*(_BYTE *)(v67 - 200) && *(char *)(v67 - 201) < 0)
    operator delete(*(void **)(v67 - 224));
  __cxa_guard_abort(&qword_255788F58);
  if (a60 < 0)
    operator delete(__p);
  sub_223182DAC((uint64_t)&a39);
  sub_223255CAC((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_2238CE868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  sub_223255CAC((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void sub_2238CE880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  sub_223255CAC((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void sub_2238CE898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  sub_223255CAC((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void sub_2238CE8B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238CE8E8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC998);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC998))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC990);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC998);
  }
  *a1 = qword_2540CC990;
}

void sub_2238CE984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC998);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC998);
  _Unwind_Resume(a1);
}

uint64_t sub_2238CE9DC(char **a1, float32x2_t **a2, float32x4_t *a3)
{
  char *v5;
  char *i;
  void *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x2_t *v10;
  char *j;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  float32x2_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  double v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x4_t v65;
  size_t v66;
  uint64_t **v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  float32x2_t v83;
  float32x4_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char **v93;
  float32x2_t *v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  void *v116;
  float32x2_t *v118;
  int8x16_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int8x16_t v123;
  char **v124;
  float32x2_t *v125;
  int8x16_t v126;
  uint64_t v127;
  __int32 v128;
  char *v129;
  __int128 v130;

  kdebug_trace();
  v5 = *a1;
  for (i = a1[1]; i != v5; i -= 40)
  {
    v7 = (void *)*((_QWORD *)i - 3);
    if (v7)
    {
      *((_QWORD *)i - 2) = v7;
      operator delete(v7);
    }
  }
  a1[1] = v5;
  sub_22380992C((uint64_t)a1, 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 5));
  v10 = *a2;
  v118 = a2[1];
  if (*a2 != v118)
  {
    v124 = a1;
    j = "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS"
        "_5recon5frame16ImageInitializerILS5_1EEENSA_13ImageReleaserILS5_1EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeO"
        "bjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"
      + 198;
    do
    {
      v129 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)&v10[9] + 8) - **(_QWORD **)&v10[9];
      v125 = v10;
      if (v12)
      {
        v13 = 0xEEEEEEEEEEEEEEEFLL * (v12 >> 3);
        if (v13 >> 59)
          sub_22316E078();
        v14 = (char *)operator new(0xDDDDDDDDDDDDDDE0 * (v12 >> 3));
        v15 = &v14[32 * v13];
        v129 = v14;
        v16 = v10[9];
        v17 = **(_QWORD ***)&v16;
        v18 = *(_QWORD **)(*(_QWORD *)&v16 + 8);
        v19 = v14;
        while (v17 != v18)
        {
          v22 = v17[1];
          if (v22 == 2)
          {
            v24 = *v17;
            v25 = *(double *)(*v17 + 16);
            v26 = *(double *)(*v17 + 48);
            if (v25 == v26)
              goto LABEL_25;
            v27 = v25 - v26;
            if (v25 < v26)
              v27 = v26 - v25;
            v8.i64[0] = *((_QWORD *)j + 323);
            if (v27 <= *(double *)v8.i64)
LABEL_25:
              LODWORD(v23) = *(float *)(v24 + 8) >= *(float *)(v24 + 40);
            else
              LODWORD(v23) = v25 <= v26;
          }
          else if (v22 == 1)
          {
            LODWORD(v23) = 0;
            v24 = *v17;
          }
          else
          {
            v24 = *v17;
            if (v22 >= 2)
            {
              v42 = v24 + 32;
              v43 = v24 + 32 * v22;
              v44 = *v17;
              do
              {
                if (*(double *)(v44 + 16) < *(double *)(v42 + 16))
                {
                  v43 = v24 + 32 * v22;
                  v44 = v42;
                }
                v42 += 32;
              }
              while (v42 != v43);
              v45 = 0;
              v46 = v44 - v24;
              v23 = v46 >> 5;
              v47 = *(double *)(v24 + (v46 & 0x1FFFFFFFE0) + 16);
              v48 = v47;
              v49 = (double *)(v24 + 16);
              do
              {
                if (v45 != v23)
                {
                  v50 = *v49;
                  if (*v49 == v48)
                    goto LABEL_53;
                  v51 = v50 - v48;
                  v52 = v48 - v50;
                  if (*v49 >= v48)
                    v52 = v51;
                  if (v52 <= *((double *)j + 323))
                  {
LABEL_53:
                    if (*((float *)v49 - 2) < *(float *)(v24 + 32 * v23 + 8))
                      LODWORD(v23) = v45;
                  }
                }
                ++v45;
                v49 += 4;
              }
              while (v22 != v45);
            }
            else
            {
              LODWORD(v23) = 0;
            }
          }
          v28 = v23;
          v29 = (uint64_t *)(v24 + 32 * v23);
          if (v19 < v15)
          {
            v20 = *v29;
            *((_DWORD *)v19 + 2) = *((_DWORD *)v29 + 2);
            *(_QWORD *)v19 = v20;
            v21 = v29[2];
            *((_DWORD *)v19 + 6) = *((_DWORD *)v29 + 6);
            *((_QWORD *)v19 + 2) = v21;
            v19 += 32;
          }
          else
          {
            v30 = (v19 - v14) >> 5;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 59)
              sub_22316E078();
            if ((v15 - v14) >> 4 > v31)
              v31 = (v15 - v14) >> 4;
            if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFE0)
              v32 = 0x7FFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
            {
              if (v32 >> 59)
                sub_223174E94();
              v33 = (char *)operator new(32 * v32);
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[32 * v30];
            v35 = *v29;
            *((_DWORD *)v34 + 2) = *((_DWORD *)v29 + 2);
            *(_QWORD *)v34 = v35;
            v36 = v24 + 32 * v28;
            v37 = *(_QWORD *)(v36 + 16);
            *((_DWORD *)v34 + 6) = *(_DWORD *)(v36 + 24);
            *((_QWORD *)v34 + 2) = v37;
            v38 = v34;
            for (j = "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturn"
                      "ingMakeTIS7_NS_5recon5frame16ImageInitializerILS5_1EEENSA_13ImageReleaserILS5_1EEEEENSt3__110share"
                      "d_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_"
                      "EEE13ObjectDeleterE"
                    + 198; v19 != v14; *((_QWORD *)v38 + 2) = v41)
            {
              v39 = *((_QWORD *)v19 - 4);
              v19 -= 32;
              v40 = *((_DWORD *)v19 + 2);
              *((_QWORD *)v38 - 4) = v39;
              v38 -= 32;
              *((_DWORD *)v38 + 2) = v40;
              v41 = *((_QWORD *)v19 + 2);
              *((_DWORD *)v38 + 6) = *((_DWORD *)v19 + 6);
            }
            v15 = &v33[32 * v32];
            v19 = v34 + 32;
            v129 = v38;
            if (v14)
              operator delete(v14);
            v14 = v38;
          }
          v17 += 15;
        }
      }
      else
      {
        v14 = 0;
        v19 = 0;
      }
      v53 = v125[1];
      v54.i32[0] = v125[2].i32[0];
      v55 = v125[3];
      v56 = v125[5];
      v8.i32[0] = v125[6].i32[0];
      *(float32x2_t *)v9.f32 = v125[7];
      v9.i32[2] = v125[8].i32[0];
      v57 = (int8x16_t)vnegq_f32(v9);
      v58 = a3[1];
      v59 = vmulq_n_f32(*a3, v54.f32[0]);
      v54.i32[1] = v125[4].i32[0];
      v60 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v53, (int32x2_t)v55), *(float *)v57.i32), (float32x2_t)vzip2_s32((int32x2_t)v53, (int32x2_t)v55), *(float32x2_t *)v9.f32, 1), v54, v9, 2);
      v54.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v56, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v56, 1), *(float32x2_t *)v9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), *(float32x2_t *)v8.f32).u32[0];
      v9 = a3[2];
      v61 = a3[3];
      v62 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a3, v53.f32[0]), v58, v55.f32[0]), v9, v56.f32[0]), (float32x4_t)0, v61);
      v63 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*a3, v53, 1), v58, v55, 1), v9, v56, 1), (float32x4_t)0, v61);
      v64 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v59, v58, v54.f32[1]), v9, v8.f32[0]), (float32x4_t)0, v61);
      v126.i32[2] = 0;
      v126.i64[0] = 0;
      v65 = vaddq_f32(v61, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v60.f32[0]), v58, v60, 1), v9, v54.f32[0]));
      v66 = v19 - v14;
      if (v19 == v14)
      {
        v69 = 0;
        v79 = 0;
        *(float32x2_t *)v95.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v62.i8, 0.0), *(float32x2_t *)v63.i8, 0, 1), *(float32x2_t *)v64.i8, (float32x4_t)v126, 2);
        v8.i64[0] = vextq_s8(v64, v64, 8uLL).u64[0];
        *(float32x2_t *)&v95.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), 0), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), 0, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL), *(float32x2_t *)v8.f32);
        v96 = vaddq_f32(v95, v65);
        v128 = v96.i32[2];
        v127 = v96.i64[0];
        v67 = (uint64_t **)v124;
        v86 = (uint64_t *)v124[1];
        v85 = (unint64_t)v124[2];
        if ((unint64_t)v86 >= v85)
          goto LABEL_71;
      }
      else
      {
        v120 = v62;
        v121 = v63;
        v122 = v65;
        v123 = v64;
        v67 = (uint64_t **)v124;
        if ((v66 & 0x8000000000000000) != 0)
          sub_22316E078();
        v68 = (char *)operator new(v66);
        v69 = v68;
        v70 = 0;
        do
        {
          v71 = &v14[v70];
          v72 = &v68[v70];
          v73 = *(_QWORD *)&v14[v70];
          *((_DWORD *)v72 + 2) = *(_DWORD *)&v14[v70 + 8];
          *(_QWORD *)v72 = v73;
          v74 = *(_QWORD *)&v14[v70 + 16];
          *((_DWORD *)v72 + 6) = *(_DWORD *)&v14[v70 + 24];
          *((_QWORD *)v72 + 2) = v74;
          v70 += 32;
        }
        while (v71 + 32 != v19);
        *(float32x2_t *)v75.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v120.i8, 0.0), *(float32x2_t *)v121.i8, 0, 1), *(float32x2_t *)v123.i8, (float32x4_t)v126, 2);
        v76 = (float32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
        v77 = (float32x2_t)vextq_s8(v121, v121, 8uLL).u64[0];
        v78 = (float32x2_t)vextq_s8(v123, v123, 8uLL).u64[0];
        *(float32x2_t *)&v75.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v76, 0), v77, 0, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL), v78);
        v79 = &v68[v70 & 0xFFFFFFFFFFFFFFE0];
        v8 = vaddq_f32(v75, v122);
        v128 = v8.i32[2];
        v127 = v8.i64[0];
        if (v70)
        {
          v80 = 0;
          v81 = 32 * (v70 >> 5);
          do
          {
            v82 = &v68[v80];
            v8.i32[0] = *(_DWORD *)&v68[v80 + 8];
            v83 = *(float32x2_t *)&v68[v80];
            *(float32x2_t *)v84.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v120.i8, v83.f32[0]), *(float32x2_t *)v121.i8, v83, 1), *(float32x2_t *)v123.i8, v8.f32[0]);
            *(float32x2_t *)&v84.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v76, v83), v77, v83, 1), *(float32x2_t *)v8.f32, v78);
            v8 = vaddq_f32(v84, v122);
            *((_DWORD *)v82 + 2) = v8.i32[2];
            *(_QWORD *)v82 = v8.i64[0];
            v80 += 32;
          }
          while (v81 != v80);
          v86 = (uint64_t *)v124[1];
          v85 = (unint64_t)v124[2];
          if ((unint64_t)v86 >= v85)
          {
LABEL_71:
            v97 = *v67;
            v98 = 0xCCCCCCCCCCCCCCCDLL * (v86 - *v67);
            v99 = v98 + 1;
            if (v98 + 1 > 0x666666666666666)
              sub_22316E078();
            v100 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v85 - (_QWORD)v97) >> 3);
            if (2 * v100 > v99)
              v99 = 2 * v100;
            if (v100 >= 0x333333333333333)
              v101 = 0x666666666666666;
            else
              v101 = v99;
            if (v101)
            {
              if (v101 > 0x666666666666666)
                sub_223174E94();
              v102 = (char *)operator new(40 * v101);
            }
            else
            {
              v102 = 0;
            }
            v103 = &v102[40 * v98];
            v104 = &v102[40 * v101];
            *((_QWORD *)&v130 + 1) = v104;
            *(_QWORD *)v103 = v127;
            *((_DWORD *)v103 + 2) = v128;
            *((_QWORD *)v103 + 2) = 0;
            *((_QWORD *)v103 + 3) = 0;
            v105 = v103 + 24;
            *((_QWORD *)v103 + 4) = 0;
            v106 = v79 - v69;
            if (v79 != v69)
            {
              if (v106 < 0)
                sub_22316E078();
              v107 = (char *)operator new(v79 - v69);
              v108 = 0;
              *((_QWORD *)v103 + 2) = v107;
              *v105 = v107;
              *((_QWORD *)v103 + 4) = &v107[32 * (v106 >> 5)];
              do
              {
                v109 = &v69[v108];
                v110 = &v107[v108];
                *(_QWORD *)v110 = *(_QWORD *)&v69[v108];
                *((_DWORD *)v110 + 2) = *(_DWORD *)&v69[v108 + 8];
                *((_QWORD *)v110 + 2) = *(_QWORD *)&v69[v108 + 16];
                *((_DWORD *)v110 + 6) = *(_DWORD *)&v69[v108 + 24];
                v108 += 32;
              }
              while (v109 + 32 != v79);
              *v105 = &v107[v108];
            }
            v92 = v103 + 40;
            v94 = v125;
            if (v86 == v97)
            {
              v93 = v124;
              *v124 = v103;
              v124[1] = v92;
              v124[2] = v104;
              j = "ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE";
            }
            else
            {
              v111 = 0;
              v93 = v124;
              j = "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturningM"
                  "akeTIS7_NS_5recon5frame16ImageInitializerILS5_1EEENSA_13ImageReleaserILS5_1EEEEENSt3__110shared_ptrIS7"
                  "_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"
                + 198;
              do
              {
                v112 = &v103[v111 * 8];
                v113 = &v86[v111];
                v114 = v86[v111 - 5];
                *((_DWORD *)v112 - 8) = v86[v111 - 4];
                *((_QWORD *)v112 - 5) = v114;
                *((_QWORD *)v112 - 2) = 0;
                *((_QWORD *)v112 - 1) = 0;
                *(_OWORD *)(v112 - 24) = *(_OWORD *)&v86[v111 - 3];
                *((_QWORD *)v112 - 1) = v86[v111 - 1];
                *(v113 - 3) = 0;
                *(v113 - 2) = 0;
                *(v113 - 1) = 0;
                v111 -= 5;
              }
              while (&v86[v111] != v97);
              v86 = (uint64_t *)*v124;
              v115 = (uint64_t *)v124[1];
              *v124 = &v103[v111 * 8];
              *(_QWORD *)&v130 = v103 + 40;
              *(_OWORD *)(v124 + 1) = v130;
              v92 = v103 + 40;
              while (v115 != v86)
              {
                v116 = (void *)*(v115 - 3);
                if (v116)
                {
                  *(v115 - 2) = (uint64_t)v116;
                  operator delete(v116);
                }
                v115 -= 5;
              }
            }
            if (v86)
              operator delete(v86);
            goto LABEL_99;
          }
        }
        else
        {
          v86 = (uint64_t *)v124[1];
          v85 = (unint64_t)v124[2];
          if ((unint64_t)v86 >= v85)
            goto LABEL_71;
        }
      }
      *((_DWORD *)v86 + 2) = v128;
      *v86 = v127;
      v86[2] = 0;
      v86[3] = 0;
      v86[4] = 0;
      v87 = v79 - v69;
      if (v79 != v69)
      {
        if (v87 < 0)
          sub_22316E078();
        v88 = (char *)operator new(v79 - v69);
        v89 = 0;
        v86[2] = (uint64_t)v88;
        v86[3] = (uint64_t)v88;
        v86[4] = (uint64_t)&v88[32 * (v87 >> 5)];
        do
        {
          v90 = &v69[v89];
          v91 = &v88[v89];
          *(_QWORD *)v91 = *(_QWORD *)&v69[v89];
          *((_DWORD *)v91 + 2) = *(_DWORD *)&v69[v89 + 8];
          *((_QWORD *)v91 + 2) = *(_QWORD *)&v69[v89 + 16];
          *((_DWORD *)v91 + 6) = *(_DWORD *)&v69[v89 + 24];
          v89 += 32;
        }
        while (v90 + 32 != v79);
        v86[3] = (uint64_t)&v88[v89];
      }
      v92 = (char *)(v86 + 5);
      v93 = v124;
      v124[1] = (char *)(v86 + 5);
      v94 = v125;
LABEL_99:
      v93[1] = v92;
      if (v69)
        operator delete(v69);
      if (v129)
        operator delete(v129);
      v10 = v94 + 28;
    }
    while (v10 != v118);
  }
  return kdebug_trace();
}

void sub_2238CF348(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_2238CF414(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  size_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  const char *v47;
  size_t v48;
  _BYTE *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  size_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *__src;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[3];
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[48];
  size_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)a1[7];
  v4 = (char *)a1[8];
  v6 = ((uint64_t)(a1[2] - a1[1]) >> 4) + ((v4 - v5) >> 4);
  v7 = (char *)a1[16];
  v8 = (char *)a1[17];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!(v6 + ((v8 - v7) >> 4)))
    return;
  if (v5 == v4)
  {
    v103 = 0;
    if (v7 == v8)
      goto LABEL_47;
LABEL_25:
    v104 = 0;
    while (1)
    {
      v25 = *(_QWORD *)v7;
      v24 = *((_QWORD *)v7 + 1);
      *(_QWORD *)v115 = *(_QWORD *)v7;
      *(_QWORD *)&v115[8] = v24;
      if (sub_223340F28(a2, (uint64_t)v115))
        goto LABEL_28;
      v27 = (_QWORD *)a3[1];
      v26 = a3[2];
      if ((unint64_t)v27 >= v26)
        break;
      *v27 = v25;
      v27[1] = v24;
      v23 = v27 + 2;
LABEL_27:
      ++v104;
      a3[1] = (uint64_t)v23;
LABEL_28:
      v7 += 16;
      if (v7 == v8)
        goto LABEL_48;
    }
    v28 = (_QWORD *)*a3;
    v29 = ((uint64_t)v27 - *a3) >> 4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60)
      sub_22316E078();
    v31 = v26 - (_QWORD)v28;
    if (v31 >> 3 > v30)
      v30 = v31 >> 3;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 60)
        sub_223174E94();
      v33 = (char *)operator new(16 * v32);
      v34 = &v33[16 * v29];
      *(_QWORD *)v34 = v25;
      *((_QWORD *)v34 + 1) = v24;
      v35 = (uint64_t)v34;
      if (v27 == v28)
      {
LABEL_40:
        v36 = &v33[16 * v32];
        v23 = v34 + 16;
        *a3 = v35;
        a3[1] = (uint64_t)(v34 + 16);
        a3[2] = (uint64_t)v36;
        if (!v27)
          goto LABEL_27;
        goto LABEL_45;
      }
    }
    else
    {
      v33 = 0;
      v34 = (char *)(16 * v29);
      *(_QWORD *)v34 = v25;
      *((_QWORD *)v34 + 1) = v24;
      v35 = 16 * v29;
      if (v27 == v28)
        goto LABEL_40;
    }
    do
    {
      *(_OWORD *)(v35 - 16) = *((_OWORD *)v27 - 1);
      v35 -= 16;
      v27 -= 2;
    }
    while (v27 != v28);
    v27 = (_QWORD *)*a3;
    v37 = &v33[16 * v32];
    v23 = v34 + 16;
    *a3 = v35;
    a3[1] = (uint64_t)(v34 + 16);
    a3[2] = (uint64_t)v37;
    if (!v27)
      goto LABEL_27;
LABEL_45:
    operator delete(v27);
    goto LABEL_27;
  }
  v103 = 0;
  do
  {
    v11 = *(_QWORD *)v5;
    v12 = *((_QWORD *)v5 + 1);
    *(_QWORD *)v115 = *(_QWORD *)v5;
    *(_QWORD *)&v115[8] = v12;
    if (!sub_223340F28(a2, (uint64_t)v115))
    {
      v14 = (_QWORD *)a3[1];
      v13 = a3[2];
      if ((unint64_t)v14 < v13)
      {
        *v14 = v11;
        v14[1] = v12;
        v10 = v14 + 2;
LABEL_5:
        ++v103;
        a3[1] = (uint64_t)v10;
        goto LABEL_6;
      }
      v15 = (_QWORD *)*a3;
      v16 = ((uint64_t)v14 - *a3) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        sub_22316E078();
      v18 = v13 - (_QWORD)v15;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 60)
          sub_223174E94();
        v20 = (char *)operator new(16 * v19);
        v21 = &v20[16 * v16];
        *(_QWORD *)v21 = v11;
        *((_QWORD *)v21 + 1) = v12;
        v22 = (uint64_t)v21;
        if (v14 == v15)
        {
LABEL_18:
          v10 = v21 + 16;
          *a3 = v22;
          a3[1] = (uint64_t)(v21 + 16);
          a3[2] = (uint64_t)&v20[16 * v19];
          if (!v14)
            goto LABEL_5;
          goto LABEL_23;
        }
      }
      else
      {
        v20 = 0;
        v21 = (char *)(16 * v16);
        *(_QWORD *)v21 = v11;
        *((_QWORD *)v21 + 1) = v12;
        v22 = 16 * v16;
        if (v14 == v15)
          goto LABEL_18;
      }
      do
      {
        *(_OWORD *)(v22 - 16) = *((_OWORD *)v14 - 1);
        v22 -= 16;
        v14 -= 2;
      }
      while (v14 != v15);
      v14 = (_QWORD *)*a3;
      v10 = v21 + 16;
      *a3 = v22;
      a3[1] = (uint64_t)(v21 + 16);
      a3[2] = (uint64_t)&v20[16 * v19];
      if (!v14)
        goto LABEL_5;
LABEL_23:
      operator delete(v14);
      goto LABEL_5;
    }
LABEL_6:
    v5 += 16;
  }
  while (v5 != v4);
  v7 = (char *)a1[16];
  v8 = (char *)a1[17];
  if (v7 != v8)
    goto LABEL_25;
LABEL_47:
  v104 = 0;
LABEL_48:
  sub_2238CE8E8(&v112);
  if (**(int **)(v112 + 56) <= 3)
  {
    v38 = *(unsigned __int8 *)(v112 + 72);
    v39 = sub_22322F254(v112, "OSLogSurrogateAppender", 1, 0);
    v40 = v39;
    if (v38 || v39 != 0)
    {
      v105[0] = &v112;
      v105[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v105[2] = std::chrono::system_clock::now().__d_.__rep_;
      v106 = 3;
      v107 = "unknown file";
      v108 = 527;
      v110 = 0;
      v111 = 0;
      v109 = "unknown function";
      v98 = v112;
      if (*(char *)(v112 + 39) < 0)
      {
        v43 = *(const char **)(v112 + 16);
        v42 = *(_QWORD *)(v112 + 24);
      }
      else
      {
        v42 = *(unsigned __int8 *)(v112 + 39);
        v43 = (const char *)(v112 + 16);
      }
      v97 = v112 + 16;
      v44 = a1[8];
      v45 = a1[17];
      v99 = a1[7];
      v100 = a1[16];
      v46 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v115);
        sub_223199C58("com.apple.cv3d", (unint64_t)v115, byte_255788F40);
        if (v115[24] && (v115[23] & 0x80000000) != 0)
          operator delete(*(void **)v115);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v47 = byte_255788F40;
      else
        v47 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v48 = byte_255788F40[23];
      else
        v48 = *(_QWORD *)&byte_255788F40[8];
      __src = v43;
      *(_QWORD *)v115 = os_log_create(v47, v43);
      v49 = &v115[8];
      if (v48 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v48 >= 0x17)
      {
        v96 = v45;
        v50 = v40;
        v51 = v44;
        v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v52 = v48 | 7;
        v53 = v52 + 1;
        v49 = operator new(v52 + 1);
        *(_QWORD *)&v115[16] = v48;
        *(_QWORD *)&v115[24] = v53 | 0x8000000000000000;
        *(_QWORD *)&v115[8] = v49;
        v44 = v51;
        v40 = v50;
        v45 = v96;
      }
      else
      {
        v115[31] = v48;
        if (!v48)
        {
LABEL_71:
          v49[v48] = 0;
          v115[32] = 1;
          v54 = &v115[40];
          if (v42 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v42 >= 0x17)
          {
            v55 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v42 | 7) != 0x17)
              v55 = v42 | 7;
            v56 = v55 + 1;
            v54 = operator new(v55 + 1);
            v116 = v42;
            v117 = v56 | 0x8000000000000000;
            *(_QWORD *)&v115[40] = v54;
          }
          else
          {
            HIBYTE(v117) = v42;
            if (!v42)
            {
LABEL_79:
              v54[v42] = 0;
              v118 = 1;
              v57 = *(NSObject **)v115;
              if (SHIBYTE(v117) < 0)
                operator delete(*(void **)&v115[40]);
              if (v115[32] && (v115[31] & 0x80000000) != 0)
                operator delete(*(void **)&v115[8]);
              if (*(_QWORD *)v115)
                os_release(*(void **)v115);
              v58 = (v44 - v99) >> 4;
              if (v40 && *(_QWORD *)(v40 + 24))
              {
                v59 = _os_log_pack_size();
                v60 = (std::__shared_weak_count_vtbl *)operator new(v59, (std::align_val_t)8uLL);
                v61 = (std::__shared_weak_count *)operator new();
                v62 = v61;
                v61->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v61->__shared_owners_;
                v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v61->__shared_weak_owners_ = 0;
                v61[1].__vftable = v60;
                *(_QWORD *)v115 = v60;
                *(_QWORD *)&v115[8] = v60;
                *(_QWORD *)&v115[16] = v61;
                do
                  v64 = __ldxr(p_shared_owners);
                while (__stxr(v64 + 1, p_shared_owners));
                memset(&v115[24], 0, 24);
                do
                  v65 = __ldaxr(p_shared_owners);
                while (__stlxr(v65 - 1, p_shared_owners));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v62);
                }
                v66 = *(_QWORD *)v115;
                v67 = _os_log_pack_fill();
                *(_DWORD *)v67 = 134218752;
                v68 = v103;
                *(_QWORD *)(v67 + 4) = v103;
                *(_WORD *)(v67 + 12) = 2048;
                *(_QWORD *)(v67 + 14) = v104;
                *(_WORD *)(v67 + 22) = 2048;
                *(_QWORD *)(v67 + 24) = v58;
                *(_WORD *)(v67 + 32) = 2048;
                *(_QWORD *)(v67 + 34) = (v45 - v100) >> 4;
                v69 = operator new();
                v70 = *(unsigned __int8 *)(v98 + 39);
                v71 = v97;
                if ((v70 & 0x80u) != 0)
                {
                  v71 = *(_QWORD *)(v98 + 16);
                  v70 = *(_QWORD *)(v98 + 24);
                }
                *(_QWORD *)v69 = v66;
                *(_OWORD *)(v69 + 8) = *(_OWORD *)&v115[8];
                *(_OWORD *)&v115[8] = 0uLL;
                *(_OWORD *)(v69 + 24) = *(_OWORD *)&v115[24];
                *(_OWORD *)&v115[24] = 0uLL;
                *(_QWORD *)(v69 + 40) = v71;
                *(_QWORD *)(v69 + 48) = v70;
                *(_BYTE *)(v69 + 56) = 1;
                v113 = 0;
                v114 = v69;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v40 + 24) + 40))(*(_QWORD *)(v40 + 24), &v114);
                v72 = v114;
                v114 = 0;
                if (v72)
                {
                  v73 = *(std::__shared_weak_count **)(v72 + 32);
                  if (v73)
                  {
                    v74 = (unint64_t *)&v73->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                  v76 = *(std::__shared_weak_count **)(v72 + 16);
                  if (v76)
                  {
                    v77 = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  MEMORY[0x227684CE8](v72, 0x10F0C40B62ED6C6);
                  v79 = v113;
                  v113 = 0;
                  if (v79)
                  {
                    v80 = *(std::__shared_weak_count **)(v79 + 32);
                    if (v80)
                    {
                      v81 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    v83 = *(std::__shared_weak_count **)(v79 + 16);
                    if (v83)
                    {
                      v84 = (unint64_t *)&v83->__shared_owners_;
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    MEMORY[0x227684CE8](v79, 0x10F0C40B62ED6C6);
                  }
                }
                v86 = *(std::__shared_weak_count **)&v115[32];
                if (*(_QWORD *)&v115[32])
                {
                  v87 = (unint64_t *)(*(_QWORD *)&v115[32] + 8);
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                v89 = *(std::__shared_weak_count **)&v115[16];
                if (*(_QWORD *)&v115[16])
                {
                  v90 = (unint64_t *)(*(_QWORD *)&v115[16] + 8);
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                    std::__shared_weak_count::__release_weak(v89);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v57, OS_LOG_TYPE_INFO);
                *(_DWORD *)v115 = 134218752;
                v68 = v103;
                *(_QWORD *)&v115[4] = v103;
                *(_WORD *)&v115[12] = 2048;
                *(_QWORD *)&v115[14] = v104;
                *(_WORD *)&v115[22] = 2048;
                *(_QWORD *)&v115[24] = v58;
                *(_WORD *)&v115[32] = 2048;
                *(_QWORD *)&v115[34] = (v45 - v100) >> 4;
                v92 = (void *)_os_log_send_and_compose_impl();
                if (v92)
                  free(v92);
              }
              if (v38)
              {
                sub_22322C138((uint64_t)v105, "KFE:AnSync Y:%lu N:%lu TUA:%lu, TUE:%lu", v68, v104, (uint64_t)(a1[8] - a1[7]) >> 4, (uint64_t)(a1[17] - a1[16]) >> 4);
                sub_223182C08((uint64_t)v105);
              }
              sub_223182C08((uint64_t)v105);
              v93 = v111;
              if (v111)
              {
                v94 = (unint64_t *)&v111->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              return;
            }
          }
          memmove(v54, __src, v42);
          goto LABEL_79;
        }
      }
      memmove(v49, v47, v48);
      goto LABEL_71;
    }
  }
}

void sub_2238CFE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;
  va_list va;

  va_start(va, a15);
  if (*(_BYTE *)(v16 - 152) && *(char *)(v16 - 153) < 0)
    operator delete(*(void **)(v16 - 176));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  v18 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_2238CFF9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  const std::__fs::filesystem::path *v8;
  const std::__fs::filesystem::path *v9;
  std::__fs::filesystem::path::__string_view v10;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  _OWORD *v14;
  __int128 v15;
  char *v16;
  const std::__fs::filesystem::path *v17;
  void *v18;
  const std::__fs::filesystem::path *v19;
  const std::__fs::filesystem::path *v20;
  std::__fs::filesystem::path::__string_view v21;
  std::__fs::filesystem::path *v22;
  std::basic_string_view<_CharT, _Traits>::size_type v23;
  std::basic_string_view<_CharT, _Traits>::size_type v24;
  _OWORD *v25;
  __int128 v26;
  char *v27;
  const std::__fs::filesystem::path *v28;
  void *v29;
  std::__fs::filesystem::path *v30;
  std::__fs::filesystem::path *v31;
  int v32;
  std::__fs::filesystem::path::__string_view v33;
  std::__fs::filesystem::path *v34;
  std::basic_string_view<_CharT, _Traits>::size_type v35;
  std::basic_string_view<_CharT, _Traits>::size_type v36;
  void *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  int v44;
  size_t v45;
  unsigned __int8 v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  const char *v52;
  int v53;
  size_t v54;
  unsigned __int8 v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  const char *v61;
  int v62;
  size_t v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  const char *v66;
  size_t v67;
  std::string::size_type *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  size_t v75;
  void *v76;
  _QWORD *v77;
  char *v78;
  size_t v79;
  size_t v80;
  _QWORD *v81;
  void *v82;
  unsigned __int8 v83;
  const char *v84;
  size_t v85;
  std::string::size_type *p_size;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  void *v94;
  _QWORD *v95;
  const char *v96;
  size_t v97;
  size_t v98;
  _QWORD *v99;
  void *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  char *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::string::size_type v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  std::string::size_type v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  const char *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::string::size_type v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  std::string::size_type v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  const char *v196;
  unint64_t *v197;
  unsigned __int8 v198;
  const char *v199;
  size_t v200;
  std::string::size_type *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  size_t v208;
  void *v209;
  _QWORD *v210;
  char *v211;
  size_t v212;
  size_t v213;
  _QWORD *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char v219;
  _QWORD *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  char *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::string::size_type v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  std::string::size_type v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  const char *v261;
  unint64_t *v262;
  void **v263;
  void *v264;
  const char *v265;
  const char *v266;
  const char *v267;
  int __s;
  char *__sa;
  char *__sb;
  std::__fs::filesystem::path *v271;
  _QWORD *v272;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  int v280;
  void *v282;
  const std::__fs::filesystem::path *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v284;
  int v285;
  const char *v286;
  int v287;
  const char *v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  uint64_t v291;
  _DWORD v292[2];
  void *v293;
  char *v294;
  unint64_t v295;
  std::__fs::filesystem::path __p;
  char *v297;
  std::__shared_weak_count *v298;
  __int128 v299;
  char v300;
  std::__fs::filesystem::path __dst;
  __int128 v302;
  char *v303;
  size_t v304;
  unint64_t v305;
  char v306;
  _QWORD v307[2];
  _QWORD *v308;
  __int128 v309;
  uint64_t v310;

  v310 = *MEMORY[0x24BDAC8D0];
  v293 = 0;
  v294 = 0;
  v295 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    (*(void (**)(std::__fs::filesystem::path *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&__dst, a1, a2);
    if ((__dst.__pn_.__r_.__value_.__r.__words[0] & 0x10000000000) != 0)
    {
      sub_2242B0AE8(a2, 1u, "*", 1uLL, a1, (uint64_t *)&v282);
      v9 = (const std::__fs::filesystem::path *)v282;
      v8 = rep;
      if (v282 != rep)
      {
        while (1)
        {
          v10 = std::__fs::filesystem::path::__filename(v9);
          if (v10.__size_ > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v10.__size_ >= 0x17)
            break;
          *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v10.__size_;
          p_dst = &__dst;
          if (v10.__size_)
            goto LABEL_14;
LABEL_15:
          p_dst->__pn_.__r_.__value_.__s.__data_[v10.__size_] = 0;
          __p = __dst;
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
          else
            __dst = __p;
          sub_224566720((unint64_t)&__dst, (uint64_t)&v308);
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
            if ((*(char *)(a3 + 23) & 0x80000000) == 0)
            {
LABEL_20:
              __dst = *(std::__fs::filesystem::path *)a3;
              goto LABEL_23;
            }
          }
          else if ((*(char *)(a3 + 23) & 0x80000000) == 0)
          {
            goto LABEL_20;
          }
          sub_223197FA4(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_23:
          sub_22319C30C((uint64_t)&__dst, &__p);
          if (BYTE8(v309)
            && ((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a1 + 176))(a1, &__dst) & 1) == 0)
          {
            v14 = v294;
            if ((unint64_t)v294 >= v295)
            {
              v16 = sub_2238E6654((uint64_t)&v293, (uint64_t)v9);
            }
            else
            {
              if (SHIBYTE(v9->__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_223197FA4(v294, v9->__pn_.__r_.__value_.__l.__data_, v9->__pn_.__r_.__value_.__l.__size_);
              }
              else
              {
                v15 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
                *((_QWORD *)v294 + 2) = *((_QWORD *)&v9->__pn_.__r_.__value_.__l + 2);
                *v14 = v15;
              }
              v16 = (char *)v14 + 24;
            }
            v294 = v16;
          }
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_6;
LABEL_34:
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            v9 = (const std::__fs::filesystem::path *)((char *)v9 + 32);
            if (v9 == v8)
            {
LABEL_35:
              v9 = (const std::__fs::filesystem::path *)v282;
              goto LABEL_36;
            }
          }
          else
          {
            if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_34;
LABEL_6:
            v9 = (const std::__fs::filesystem::path *)((char *)v9 + 32);
            if (v9 == v8)
              goto LABEL_35;
          }
        }
        v12 = (v10.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10.__size_ | 7) != 0x17)
          v12 = v10.__size_ | 7;
        v13 = v12 + 1;
        p_dst = (std::__fs::filesystem::path *)operator new(v12 + 1);
        __dst.__pn_.__r_.__value_.__l.__size_ = v10.__size_;
        __dst.__pn_.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
        __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
        memmove(p_dst, v10.__data_, v10.__size_);
        goto LABEL_15;
      }
LABEL_36:
      if (v9)
      {
        v17 = rep;
        v18 = (void *)v9;
        if (rep != v9)
        {
          do
          {
            if (v17[-1].__pn_.__r_.__value_.__s.__data_[15] < 0)
              operator delete((void *)v17[-2].__pn_.__r_.__value_.__r.__words[2]);
            v17 = (const std::__fs::filesystem::path *)((char *)v17 - 32);
          }
          while (v17 != v9);
          v18 = v282;
        }
        rep = v9;
        operator delete(v18);
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, a3))
  {
    (*(void (**)(std::__fs::filesystem::path *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&__dst, a1, a3);
    if ((__dst.__pn_.__r_.__value_.__r.__words[0] & 0x10000000000) != 0)
    {
      sub_2242B0AE8(a3, 1u, "*", 1uLL, a1, (uint64_t *)&v282);
      v20 = (const std::__fs::filesystem::path *)v282;
      v19 = rep;
      if (v282 != rep)
      {
        while (1)
        {
          v21 = std::__fs::filesystem::path::__filename(v20);
          if (v21.__size_ > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v21.__size_ >= 0x17)
            break;
          *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v21.__size_;
          v22 = &__dst;
          if (v21.__size_)
            goto LABEL_57;
LABEL_58:
          v22->__pn_.__r_.__value_.__s.__data_[v21.__size_] = 0;
          __p = __dst;
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
          else
            __dst = __p;
          sub_224566720((unint64_t)&__dst, (uint64_t)&v308);
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
            if ((*(char *)(a2 + 23) & 0x80000000) == 0)
            {
LABEL_63:
              __dst = *(std::__fs::filesystem::path *)a2;
              goto LABEL_66;
            }
          }
          else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
            goto LABEL_63;
          }
          sub_223197FA4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_66:
          sub_22319C30C((uint64_t)&__dst, &__p);
          if (BYTE8(v309)
            && ((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a1 + 176))(a1, &__dst) & 1) == 0)
          {
            v25 = v294;
            if ((unint64_t)v294 >= v295)
            {
              v27 = sub_2238E6654((uint64_t)&v293, (uint64_t)v20);
            }
            else
            {
              if (SHIBYTE(v20->__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_223197FA4(v294, v20->__pn_.__r_.__value_.__l.__data_, v20->__pn_.__r_.__value_.__l.__size_);
              }
              else
              {
                v26 = *(_OWORD *)&v20->__pn_.__r_.__value_.__l.__data_;
                *((_QWORD *)v294 + 2) = *((_QWORD *)&v20->__pn_.__r_.__value_.__l + 2);
                *v25 = v26;
              }
              v27 = (char *)v25 + 24;
            }
            v294 = v27;
          }
          if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_49;
LABEL_77:
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            v20 = (const std::__fs::filesystem::path *)((char *)v20 + 32);
            if (v20 == v19)
            {
LABEL_78:
              v20 = (const std::__fs::filesystem::path *)v282;
              goto LABEL_79;
            }
          }
          else
          {
            if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_77;
LABEL_49:
            v20 = (const std::__fs::filesystem::path *)((char *)v20 + 32);
            if (v20 == v19)
              goto LABEL_78;
          }
        }
        v23 = (v21.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21.__size_ | 7) != 0x17)
          v23 = v21.__size_ | 7;
        v24 = v23 + 1;
        v22 = (std::__fs::filesystem::path *)operator new(v23 + 1);
        __dst.__pn_.__r_.__value_.__l.__size_ = v21.__size_;
        __dst.__pn_.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
        __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
LABEL_57:
        memmove(v22, v21.__data_, v21.__size_);
        goto LABEL_58;
      }
LABEL_79:
      if (v20)
      {
        v28 = rep;
        v29 = (void *)v20;
        if (rep != v20)
        {
          do
          {
            if (v28[-1].__pn_.__r_.__value_.__s.__data_[15] < 0)
              operator delete((void *)v28[-2].__pn_.__r_.__value_.__r.__words[2]);
            v28 = (const std::__fs::filesystem::path *)((char *)v28 - 32);
          }
          while (v28 != v20);
          v29 = v282;
        }
        rep = v20;
        operator delete(v29);
      }
    }
  }
  v30 = (std::__fs::filesystem::path *)v293;
  v31 = (std::__fs::filesystem::path *)v294;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  if (v30 == v31)
    goto LABEL_491;
  v272 = a4;
  v271 = v31;
  do
  {
    while (1)
    {
      v33 = std::__fs::filesystem::path::__filename(v30);
      if (v33.__size_ > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v33.__size_ >= 0x17)
      {
        v35 = (v33.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33.__size_ | 7) != 0x17)
          v35 = v33.__size_ | 7;
        v36 = v35 + 1;
        v34 = (std::__fs::filesystem::path *)operator new(v35 + 1);
        __dst.__pn_.__r_.__value_.__l.__size_ = v33.__size_;
        __dst.__pn_.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
        __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
LABEL_99:
        memmove(v34, v33.__data_, v33.__size_);
        goto LABEL_100;
      }
      *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v33.__size_;
      v34 = &__dst;
      if (v33.__size_)
        goto LABEL_99;
LABEL_100:
      v34->__pn_.__r_.__value_.__s.__data_[v33.__size_] = 0;
      v37 = (void *)__dst.__pn_.__r_.__value_.__r.__words[0];
      v292[0] = __dst.__pn_.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v292 + 3) = *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3);
      v32 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_223197FA4(&__dst, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        LODWORD(__dst.__pn_.__r_.__value_.__r.__words[2]) = v292[0];
        *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v292 + 3);
      }
      sub_224566720((unint64_t)&__dst, (uint64_t)&v299);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
        if (!v300)
          goto LABEL_115;
      }
      else if (!v300)
      {
        goto LABEL_115;
      }
      *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = v299;
      if (sub_223340F28(a4, (uint64_t)&__dst))
      {
        sub_2238D25BC(&v291);
        if (**(int **)(v291 + 56) <= 3)
        {
          v38 = *(unsigned __int8 *)(v291 + 72);
          v39 = sub_22322F254(v291, "OSLogSurrogateAppender", 1, 0);
          v40 = v39;
          if (v38 || v39)
          {
            __s = v38;
            v282 = &v291;
            rep = (const std::__fs::filesystem::path *)std::chrono::steady_clock::now().__d_.__rep_;
            v284 = std::chrono::system_clock::now().__d_.__rep_;
            v285 = 3;
            v286 = "unknown file";
            v287 = 574;
            v288 = "unknown function";
            v289 = 0;
            v290 = 0;
            v41 = (const char *)v30;
            if ((SHIBYTE(v30->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v42 = *(_QWORD *)v282;
              v43 = (const char *)(*(_QWORD *)v282 + 16);
              v44 = *(char *)(*(_QWORD *)v282 + 39);
              v265 = v43;
              if ((v44 & 0x80000000) == 0)
                goto LABEL_113;
LABEL_176:
              v43 = *(const char **)(v42 + 16);
              v45 = *(_QWORD *)(v42 + 24);
              v280 = v32;
              v83 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v83 & 1) != 0)
                goto LABEL_177;
LABEL_480:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&__p);
                sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
                if ((_BYTE)v297 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
              goto LABEL_177;
            }
            v41 = (const char *)v30->__pn_.__r_.__value_.__r.__words[0];
            v42 = *(_QWORD *)v282;
            v43 = (const char *)(*(_QWORD *)v282 + 16);
            v44 = *(char *)(*(_QWORD *)v282 + 39);
            v265 = v43;
            if (v44 < 0)
              goto LABEL_176;
LABEL_113:
            v45 = v44;
            v280 = v32;
            v46 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v46 & 1) == 0)
              goto LABEL_480;
LABEL_177:
            if (byte_255788F57 >= 0)
              v84 = (const char *)&xmmword_255788F40;
            else
              v84 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v85 = byte_255788F57;
            else
              v85 = *((_QWORD *)&xmmword_255788F40 + 1);
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v84, v43);
            if (v85 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v85 >= 0x17)
            {
              v276 = v37;
              v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v85 | 7) != 0x17)
                v87 = v85 | 7;
              v88 = v87 + 1;
              p_size = (std::string::size_type *)operator new(v87 + 1);
              __dst.__pn_.__r_.__value_.__r.__words[2] = v85;
              *(_QWORD *)&v302 = v88 | 0x8000000000000000;
              __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
              v37 = v276;
            }
            else
            {
              BYTE7(v302) = v85;
              p_size = &__dst.__pn_.__r_.__value_.__l.__size_;
              if (!v85)
              {
LABEL_191:
                *((_BYTE *)p_size + v85) = 0;
                BYTE8(v302) = 1;
                if (v45 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a4 = v272;
                if (v45 >= 0x17)
                {
                  v91 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v45 | 7) != 0x17)
                    v91 = v45 | 7;
                  v92 = v91 + 1;
                  v89 = (char *)operator new(v91 + 1);
                  v304 = v45;
                  v305 = v92 | 0x8000000000000000;
                  v303 = v89;
                }
                else
                {
                  HIBYTE(v305) = v45;
                  v89 = (char *)&v303;
                  if (!v45)
                  {
                    LOBYTE(v303) = 0;
                    v306 = 1;
                    v90 = __dst.__pn_.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v305) & 0x80000000) == 0)
                      goto LABEL_195;
LABEL_201:
                    operator delete(v303);
                    if (BYTE8(v302))
                      goto LABEL_202;
                    goto LABEL_204;
                  }
                }
                memmove(v89, v43, v45);
                v89[v45] = 0;
                v306 = 1;
                v90 = __dst.__pn_.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v305) < 0)
                  goto LABEL_201;
LABEL_195:
                if (BYTE8(v302))
                {
LABEL_202:
                  if (SBYTE7(v302) < 0)
                    operator delete((void *)__dst.__pn_.__r_.__value_.__l.__size_);
                }
LABEL_204:
                if (__dst.__pn_.__r_.__value_.__r.__words[0])
                  os_release(__dst.__pn_.__r_.__value_.__l.__data_);
                if (v40 && *(_QWORD *)(v40 + 24))
                {
                  v93 = _os_log_pack_size();
                  v277 = v37;
                  v94 = operator new(v93, (std::align_val_t)8uLL);
                  v95 = (_QWORD *)operator new();
                  v96 = v41;
                  *v95 = &off_24EC1F7F0;
                  v95[1] = 0;
                  v95[2] = 0;
                  v95[3] = v94;
                  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                  __p.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
                  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v95;
                  v297 = 0;
                  v298 = 0;
                  v97 = strlen(v41);
                  if (v97 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v98 = v97;
                  if (v97 >= 0x17)
                  {
                    v118 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v97 | 7) != 0x17)
                      v118 = v97 | 7;
                    v119 = v118 + 1;
                    v99 = operator new(v118 + 1);
                    *(_QWORD *)&v309 = v98;
                    *((_QWORD *)&v309 + 1) = v119 | 0x8000000000000000;
                    v308 = v99;
                    v96 = v41;
                  }
                  else
                  {
                    HIBYTE(v309) = v97;
                    v99 = &v308;
                    if (!v97)
                      goto LABEL_238;
                  }
                  memcpy(v99, v96, v98);
LABEL_238:
                  *((_BYTE *)v99 + v98) = 0;
                  v120 = v308;
                  v307[0] = v309;
                  *(_QWORD *)((char *)v307 + 7) = *(_QWORD *)((char *)&v309 + 7);
                  v121 = HIBYTE(v309);
                  v122 = operator new(0x38uLL);
                  v122[1] = 0;
                  v122[2] = 0;
                  v122[3] = off_24EC1FA48;
                  *v122 = &off_24EC1F9F8;
                  v123 = v307[0];
                  v122[4] = v120;
                  v122[5] = v123;
                  *(_QWORD *)((char *)v122 + 47) = *(_QWORD *)((char *)v307 + 7);
                  *((_BYTE *)v122 + 55) = v121;
                  v307[0] = 0;
                  *(_QWORD *)((char *)v307 + 7) = 0;
                  v124 = v298;
                  v297 = (char *)(v122 + 3);
                  v298 = (std::__shared_weak_count *)v122;
                  v37 = v277;
                  if (v124)
                  {
                    p_shared_owners = (unint64_t *)&v124->__shared_owners_;
                    do
                      v126 = __ldaxr(p_shared_owners);
                    while (__stlxr(v126 - 1, p_shared_owners));
                    if (!v126)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  __dst = __p;
                  v127 = v297;
                  if (__p.__pn_.__r_.__value_.__r.__words[2])
                  {
                    v128 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
                    do
                      v129 = __ldxr(v128);
                    while (__stxr(v129 + 1, v128));
                  }
                  v130 = v298;
                  *(_QWORD *)&v302 = v127;
                  *((_QWORD *)&v302 + 1) = v298;
                  if (v298)
                  {
                    v131 = (unint64_t *)&v298->__shared_owners_;
                    do
                      v132 = __ldxr(v131);
                    while (__stxr(v132 + 1, v131));
                    v303 = v127;
                    do
                      v133 = __ldaxr(v131);
                    while (__stlxr(v133 - 1, v131));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                  }
                  else
                  {
                    v303 = v127;
                  }
                  v167 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
                  if (__p.__pn_.__r_.__value_.__r.__words[2])
                  {
                    v168 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  v170 = __dst.__pn_.__r_.__value_.__r.__words[0];
                  if (v303[31] >= 0)
                    v171 = v303 + 8;
                  else
                    v171 = (char *)*((_QWORD *)v303 + 1);
                  v172 = _os_log_pack_fill();
                  *(_DWORD *)v172 = 136315138;
                  *(_QWORD *)(v172 + 4) = v171;
                  v173 = operator new();
                  v174 = *(unsigned __int8 *)(v42 + 39);
                  v175 = v265;
                  if ((v174 & 0x80u) != 0)
                  {
                    v175 = *(const char **)(v42 + 16);
                    v174 = *(_QWORD *)(v42 + 24);
                  }
                  *(_QWORD *)v173 = v170;
                  *(_OWORD *)(v173 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v173 + 24) = v302;
                  v302 = 0uLL;
                  *(_QWORD *)(v173 + 40) = v175;
                  *(_QWORD *)(v173 + 48) = v174;
                  *(_BYTE *)(v173 + 56) = 1;
                  v308 = 0;
                  __p.__pn_.__r_.__value_.__r.__words[0] = v173;
                  (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v40 + 24) + 40))(*(_QWORD *)(v40 + 24), &__p);
                  v31 = v271;
                  v176 = __p.__pn_.__r_.__value_.__r.__words[0];
                  __p.__pn_.__r_.__value_.__r.__words[0] = 0;
                  v101 = __s;
                  if (v176)
                  {
                    v177 = *(std::__shared_weak_count **)(v176 + 32);
                    if (v177)
                    {
                      v178 = (unint64_t *)&v177->__shared_owners_;
                      do
                        v179 = __ldaxr(v178);
                      while (__stlxr(v179 - 1, v178));
                      if (!v179)
                      {
                        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                        std::__shared_weak_count::__release_weak(v177);
                      }
                    }
                    v180 = *(std::__shared_weak_count **)(v176 + 16);
                    if (v180)
                    {
                      v181 = (unint64_t *)&v180->__shared_owners_;
                      do
                        v182 = __ldaxr(v181);
                      while (__stlxr(v182 - 1, v181));
                      if (!v182)
                      {
                        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                        std::__shared_weak_count::__release_weak(v180);
                      }
                    }
                    MEMORY[0x227684CE8](v176, 0x10F0C40B62ED6C6);
                    v183 = v308;
                    v308 = 0;
                    if (v183)
                    {
                      v184 = (std::__shared_weak_count *)v183[4];
                      if (v184)
                      {
                        v185 = (unint64_t *)&v184->__shared_owners_;
                        do
                          v186 = __ldaxr(v185);
                        while (__stlxr(v186 - 1, v185));
                        if (!v186)
                        {
                          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                          std::__shared_weak_count::__release_weak(v184);
                        }
                      }
                      v187 = (std::__shared_weak_count *)v183[2];
                      if (v187)
                      {
                        v188 = (unint64_t *)&v187->__shared_owners_;
                        do
                          v189 = __ldaxr(v188);
                        while (__stlxr(v189 - 1, v188));
                        if (!v189)
                        {
                          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                          std::__shared_weak_count::__release_weak(v187);
                        }
                      }
                      MEMORY[0x227684CE8](v183, 0x10F0C40B62ED6C6);
                    }
                  }
                  v190 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
                  if (*((_QWORD *)&v302 + 1))
                  {
                    v191 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
                    do
                      v192 = __ldaxr(v191);
                    while (__stlxr(v192 - 1, v191));
                    if (!v192)
                    {
                      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                      std::__shared_weak_count::__release_weak(v190);
                      v193 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
                      if (__dst.__pn_.__r_.__value_.__r.__words[2])
                        goto LABEL_342;
                      goto LABEL_345;
                    }
                  }
                  v193 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
                  if (!__dst.__pn_.__r_.__value_.__r.__words[2])
                    goto LABEL_345;
LABEL_342:
                  v194 = (unint64_t *)&v193->__shared_owners_;
                  do
                    v195 = __ldaxr(v194);
                  while (__stlxr(v195 - 1, v194));
                  if (v195)
                  {
LABEL_345:
                    if (v101)
                      goto LABEL_346;
LABEL_349:
                    sub_223182C08((uint64_t)&v282);
                    v164 = v290;
                    if (v290)
                    {
                      v197 = (unint64_t *)&v290->__shared_owners_;
                      do
                        v166 = __ldaxr(v197);
                      while (__stlxr(v166 - 1, v197));
                      goto LABEL_469;
                    }
                    goto LABEL_89;
                  }
                  ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                  std::__shared_weak_count::__release_weak(v193);
                  if (!__s)
                    goto LABEL_349;
                }
                else
                {
                  os_log_type_enabled(v90, OS_LOG_TYPE_INFO);
                  LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
                  v100 = (void *)_os_log_send_and_compose_impl();
                  v31 = v271;
                  v101 = __s;
                  if (!v100)
                    goto LABEL_345;
                  free(v100);
                  if (!__s)
                    goto LABEL_349;
                }
LABEL_346:
                v196 = (const char *)v30;
                if (SHIBYTE(v30->__pn_.__r_.__value_.__r.__words[2]) < 0)
                  v196 = (const char *)v30->__pn_.__r_.__value_.__r.__words[0];
                sub_22322C138((uint64_t)&v282, "Found active kf being orphaned in persistence path (%s)", v196);
                sub_223182C08((uint64_t)&v282);
                goto LABEL_349;
              }
            }
            memmove(p_size, v84, v85);
            goto LABEL_191;
          }
        }
        goto LABEL_90;
      }
LABEL_115:
      if ((*(unsigned int (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a1 + 176))(a1, v30)
        && ((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a1 + 232))(a1, v30) & 1) == 0)
      {
        sub_2238CE8E8(&v291);
        if (**(int **)(v291 + 56) <= 4)
        {
          v56 = *(unsigned __int8 *)(v291 + 72);
          v57 = sub_22322F254(v291, "OSLogSurrogateAppender", 1, 0);
          v58 = v57;
          if (v56 || v57)
          {
            v282 = &v291;
            rep = (const std::__fs::filesystem::path *)std::chrono::steady_clock::now().__d_.__rep_;
            v284 = std::chrono::system_clock::now().__d_.__rep_;
            v285 = 4;
            v286 = "unknown file";
            v287 = 579;
            v288 = "unknown function";
            v289 = 0;
            v290 = 0;
            v59 = (char *)v30;
            if ((SHIBYTE(v30->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v60 = *(_QWORD *)v282;
              v61 = (const char *)(*(_QWORD *)v282 + 16);
              v62 = *(char *)(*(_QWORD *)v282 + 39);
              v267 = v61;
              if ((v62 & 0x80000000) == 0)
                goto LABEL_133;
LABEL_354:
              v61 = *(const char **)(v60 + 16);
              v63 = *(_QWORD *)(v60 + 24);
              v280 = v32;
              v198 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v198 & 1) != 0)
                goto LABEL_355;
LABEL_485:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&__p);
                sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
                if ((_BYTE)v297 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
              goto LABEL_355;
            }
            v59 = (char *)v30->__pn_.__r_.__value_.__r.__words[0];
            v60 = *(_QWORD *)v282;
            v61 = (const char *)(*(_QWORD *)v282 + 16);
            v62 = *(char *)(*(_QWORD *)v282 + 39);
            v267 = v61;
            if (v62 < 0)
              goto LABEL_354;
LABEL_133:
            v63 = v62;
            v280 = v32;
            v64 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v64 & 1) == 0)
              goto LABEL_485;
LABEL_355:
            if (byte_255788F57 >= 0)
              v199 = (const char *)&xmmword_255788F40;
            else
              v199 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v200 = byte_255788F57;
            else
              v200 = *((_QWORD *)&xmmword_255788F40 + 1);
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v199, v61);
            if (v200 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            __sb = v59;
            if (v200 >= 0x17)
            {
              v278 = v37;
              v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v200 | 7) != 0x17)
                v202 = v200 | 7;
              v203 = v202 + 1;
              v201 = (std::string::size_type *)operator new(v202 + 1);
              __dst.__pn_.__r_.__value_.__r.__words[2] = v200;
              *(_QWORD *)&v302 = v203 | 0x8000000000000000;
              __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v201;
              v37 = v278;
            }
            else
            {
              BYTE7(v302) = v200;
              v201 = &__dst.__pn_.__r_.__value_.__l.__size_;
              if (!v200)
              {
LABEL_369:
                *((_BYTE *)v201 + v200) = 0;
                BYTE8(v302) = 1;
                if (v63 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a4 = v272;
                if (v63 >= 0x17)
                {
                  v206 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v63 | 7) != 0x17)
                    v206 = v63 | 7;
                  v207 = v206 + 1;
                  v204 = (char *)operator new(v206 + 1);
                  v304 = v63;
                  v305 = v207 | 0x8000000000000000;
                  v303 = v204;
                }
                else
                {
                  HIBYTE(v305) = v63;
                  v204 = (char *)&v303;
                  if (!v63)
                  {
                    LOBYTE(v303) = 0;
                    v306 = 1;
                    v205 = __dst.__pn_.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v305) & 0x80000000) == 0)
                      goto LABEL_373;
LABEL_379:
                    operator delete(v303);
                    if (BYTE8(v302))
                      goto LABEL_380;
                    goto LABEL_382;
                  }
                }
                memmove(v204, v61, v63);
                v204[v63] = 0;
                v306 = 1;
                v205 = __dst.__pn_.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v305) < 0)
                  goto LABEL_379;
LABEL_373:
                if (BYTE8(v302))
                {
LABEL_380:
                  if (SBYTE7(v302) < 0)
                    operator delete((void *)__dst.__pn_.__r_.__value_.__l.__size_);
                }
LABEL_382:
                if (__dst.__pn_.__r_.__value_.__r.__words[0])
                  os_release(__dst.__pn_.__r_.__value_.__l.__data_);
                if (v58 && *(_QWORD *)(v58 + 24))
                {
                  v208 = _os_log_pack_size();
                  v279 = v37;
                  v209 = operator new(v208, (std::align_val_t)8uLL);
                  v210 = (_QWORD *)operator new();
                  v211 = __sb;
                  *v210 = &off_24EC1F7F0;
                  v210[1] = 0;
                  v210[2] = 0;
                  v210[3] = v209;
                  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
                  __p.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v209;
                  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v210;
                  v297 = 0;
                  v298 = 0;
                  v212 = strlen(__sb);
                  if (v212 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v213 = v212;
                  if (v212 >= 0x17)
                  {
                    v216 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v212 | 7) != 0x17)
                      v216 = v212 | 7;
                    v217 = v216 + 1;
                    v214 = operator new(v216 + 1);
                    *(_QWORD *)&v309 = v213;
                    *((_QWORD *)&v309 + 1) = v217 | 0x8000000000000000;
                    v308 = v214;
                    v211 = __sb;
                  }
                  else
                  {
                    HIBYTE(v309) = v212;
                    v214 = &v308;
                    if (!v212)
                      goto LABEL_405;
                  }
                  memcpy(v214, v211, v213);
LABEL_405:
                  *((_BYTE *)v214 + v213) = 0;
                  v218 = v308;
                  v307[0] = v309;
                  *(_QWORD *)((char *)v307 + 7) = *(_QWORD *)((char *)&v309 + 7);
                  v219 = HIBYTE(v309);
                  v220 = operator new(0x38uLL);
                  v220[1] = 0;
                  v220[2] = 0;
                  v220[3] = off_24EC1FA48;
                  *v220 = &off_24EC1F9F8;
                  v221 = v307[0];
                  v220[4] = v218;
                  v220[5] = v221;
                  *(_QWORD *)((char *)v220 + 47) = *(_QWORD *)((char *)v307 + 7);
                  *((_BYTE *)v220 + 55) = v219;
                  v307[0] = 0;
                  *(_QWORD *)((char *)v307 + 7) = 0;
                  v222 = v298;
                  v297 = (char *)(v220 + 3);
                  v298 = (std::__shared_weak_count *)v220;
                  v37 = v279;
                  if (v222)
                  {
                    v223 = (unint64_t *)&v222->__shared_owners_;
                    do
                      v224 = __ldaxr(v223);
                    while (__stlxr(v224 - 1, v223));
                    if (!v224)
                    {
                      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                      std::__shared_weak_count::__release_weak(v222);
                    }
                  }
                  __dst = __p;
                  v225 = v297;
                  if (__p.__pn_.__r_.__value_.__r.__words[2])
                  {
                    v226 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
                    do
                      v227 = __ldxr(v226);
                    while (__stxr(v227 + 1, v226));
                  }
                  v228 = v298;
                  *(_QWORD *)&v302 = v225;
                  *((_QWORD *)&v302 + 1) = v298;
                  if (v298)
                  {
                    v229 = (unint64_t *)&v298->__shared_owners_;
                    do
                      v230 = __ldxr(v229);
                    while (__stxr(v230 + 1, v229));
                    v303 = v225;
                    do
                      v231 = __ldaxr(v229);
                    while (__stlxr(v231 - 1, v229));
                    if (!v231)
                    {
                      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                      std::__shared_weak_count::__release_weak(v228);
                    }
                  }
                  else
                  {
                    v303 = v225;
                  }
                  v232 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
                  if (__p.__pn_.__r_.__value_.__r.__words[2])
                  {
                    v233 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
                    do
                      v234 = __ldaxr(v233);
                    while (__stlxr(v234 - 1, v233));
                    if (!v234)
                    {
                      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                      std::__shared_weak_count::__release_weak(v232);
                    }
                  }
                  v235 = __dst.__pn_.__r_.__value_.__r.__words[0];
                  if (v303[31] >= 0)
                    v236 = v303 + 8;
                  else
                    v236 = (char *)*((_QWORD *)v303 + 1);
                  v237 = _os_log_pack_fill();
                  *(_DWORD *)v237 = 136315138;
                  *(_QWORD *)(v237 + 4) = v236;
                  v238 = operator new();
                  v239 = *(unsigned __int8 *)(v60 + 39);
                  v240 = v267;
                  if ((v239 & 0x80u) != 0)
                  {
                    v240 = *(const char **)(v60 + 16);
                    v239 = *(_QWORD *)(v60 + 24);
                  }
                  *(_QWORD *)v238 = v235;
                  *(_OWORD *)(v238 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v238 + 24) = v302;
                  v302 = 0uLL;
                  *(_QWORD *)(v238 + 40) = v240;
                  *(_QWORD *)(v238 + 48) = v239;
                  *(_BYTE *)(v238 + 56) = 16;
                  v308 = 0;
                  __p.__pn_.__r_.__value_.__r.__words[0] = v238;
                  (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), &__p);
                  v31 = v271;
                  v241 = __p.__pn_.__r_.__value_.__r.__words[0];
                  __p.__pn_.__r_.__value_.__r.__words[0] = 0;
                  if (v241)
                  {
                    v242 = *(std::__shared_weak_count **)(v241 + 32);
                    if (v242)
                    {
                      v243 = (unint64_t *)&v242->__shared_owners_;
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                    }
                    v245 = *(std::__shared_weak_count **)(v241 + 16);
                    if (v245)
                    {
                      v246 = (unint64_t *)&v245->__shared_owners_;
                      do
                        v247 = __ldaxr(v246);
                      while (__stlxr(v247 - 1, v246));
                      if (!v247)
                      {
                        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                        std::__shared_weak_count::__release_weak(v245);
                      }
                    }
                    MEMORY[0x227684CE8](v241, 0x10F0C40B62ED6C6);
                    v248 = v308;
                    v308 = 0;
                    if (v248)
                    {
                      v249 = (std::__shared_weak_count *)v248[4];
                      if (v249)
                      {
                        v250 = (unint64_t *)&v249->__shared_owners_;
                        do
                          v251 = __ldaxr(v250);
                        while (__stlxr(v251 - 1, v250));
                        if (!v251)
                        {
                          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                          std::__shared_weak_count::__release_weak(v249);
                        }
                      }
                      v252 = (std::__shared_weak_count *)v248[2];
                      if (v252)
                      {
                        v253 = (unint64_t *)&v252->__shared_owners_;
                        do
                          v254 = __ldaxr(v253);
                        while (__stlxr(v254 - 1, v253));
                        if (!v254)
                        {
                          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                          std::__shared_weak_count::__release_weak(v252);
                        }
                      }
                      MEMORY[0x227684CE8](v248, 0x10F0C40B62ED6C6);
                    }
                  }
                  v255 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
                  if (*((_QWORD *)&v302 + 1))
                  {
                    v256 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
                    do
                      v257 = __ldaxr(v256);
                    while (__stlxr(v257 - 1, v256));
                    if (!v257)
                    {
                      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                      std::__shared_weak_count::__release_weak(v255);
                      v258 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
                      if (__dst.__pn_.__r_.__value_.__r.__words[2])
                        goto LABEL_459;
                      goto LABEL_462;
                    }
                  }
                  v258 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
                  if (!__dst.__pn_.__r_.__value_.__r.__words[2])
                    goto LABEL_462;
LABEL_459:
                  v259 = (unint64_t *)&v258->__shared_owners_;
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (v260)
                  {
LABEL_462:
                    if (v56)
                      goto LABEL_463;
LABEL_466:
                    sub_223182C08((uint64_t)&v282);
                    v164 = v290;
                    if (v290)
                    {
                      v262 = (unint64_t *)&v290->__shared_owners_;
                      do
                        v166 = __ldaxr(v262);
                      while (__stlxr(v166 - 1, v262));
                      goto LABEL_469;
                    }
LABEL_89:
                    v32 = v280;
                    goto LABEL_90;
                  }
                  ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                  std::__shared_weak_count::__release_weak(v258);
                  if (!v56)
                    goto LABEL_466;
                }
                else
                {
                  os_log_type_enabled(v205, OS_LOG_TYPE_ERROR);
                  LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sb;
                  v215 = (void *)_os_log_send_and_compose_impl();
                  v31 = v271;
                  if (!v215)
                    goto LABEL_462;
                  free(v215);
                  if (!v56)
                    goto LABEL_466;
                }
LABEL_463:
                v261 = (const char *)v30;
                if (SHIBYTE(v30->__pn_.__r_.__value_.__r.__words[2]) < 0)
                  v261 = (const char *)v30->__pn_.__r_.__value_.__r.__words[0];
                sub_22322C138((uint64_t)&v282, "Could not remove orphaned file (%s) from persistence path", v261);
                sub_223182C08((uint64_t)&v282);
                goto LABEL_466;
              }
            }
            memmove(v201, v199, v200);
            goto LABEL_369;
          }
        }
      }
      else
      {
        if (v300)
          sub_2231A9984((uint64_t **)a5, (unsigned __int8 *)&v299, &v299);
        sub_2238D25BC(&v291);
        if (**(int **)(v291 + 56) <= 3)
        {
          v47 = *(unsigned __int8 *)(v291 + 72);
          v48 = sub_22322F254(v291, "OSLogSurrogateAppender", 1, 0);
          v49 = v48;
          if (v47 || v48)
          {
            v282 = &v291;
            rep = (const std::__fs::filesystem::path *)std::chrono::steady_clock::now().__d_.__rep_;
            v284 = std::chrono::system_clock::now().__d_.__rep_;
            v285 = 3;
            v286 = "unknown file";
            v287 = 584;
            v288 = "unknown function";
            v289 = 0;
            v290 = 0;
            v50 = (char *)v30;
            if ((SHIBYTE(v30->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v51 = *(_QWORD *)v282;
              v52 = (const char *)(*(_QWORD *)v282 + 16);
              v53 = *(char *)(*(_QWORD *)v282 + 39);
              v266 = v52;
              if ((v53 & 0x80000000) == 0)
                goto LABEL_124;
LABEL_136:
              v52 = *(const char **)(v51 + 16);
              v54 = *(_QWORD *)(v51 + 24);
              v280 = v32;
              v65 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v65 & 1) != 0)
                goto LABEL_137;
LABEL_475:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&__p);
                sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
                if ((_BYTE)v297 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
              goto LABEL_137;
            }
            v50 = (char *)v30->__pn_.__r_.__value_.__r.__words[0];
            v51 = *(_QWORD *)v282;
            v52 = (const char *)(*(_QWORD *)v282 + 16);
            v53 = *(char *)(*(_QWORD *)v282 + 39);
            v266 = v52;
            if (v53 < 0)
              goto LABEL_136;
LABEL_124:
            v54 = v53;
            v280 = v32;
            v55 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v55 & 1) == 0)
              goto LABEL_475;
LABEL_137:
            if (byte_255788F57 >= 0)
              v66 = (const char *)&xmmword_255788F40;
            else
              v66 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v67 = byte_255788F57;
            else
              v67 = *((_QWORD *)&xmmword_255788F40 + 1);
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v66, v52);
            if (v67 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            __sa = v50;
            if (v67 >= 0x17)
            {
              v274 = v37;
              v69 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v67 | 7) != 0x17)
                v69 = v67 | 7;
              v70 = v69 + 1;
              v68 = (std::string::size_type *)operator new(v69 + 1);
              __dst.__pn_.__r_.__value_.__r.__words[2] = v67;
              *(_QWORD *)&v302 = v70 | 0x8000000000000000;
              __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
              v37 = v274;
            }
            else
            {
              BYTE7(v302) = v67;
              v68 = &__dst.__pn_.__r_.__value_.__l.__size_;
              if (!v67)
              {
LABEL_151:
                *((_BYTE *)v68 + v67) = 0;
                BYTE8(v302) = 1;
                if (v54 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a4 = v272;
                if (v54 >= 0x17)
                {
                  v73 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v54 | 7) != 0x17)
                    v73 = v54 | 7;
                  v74 = v73 + 1;
                  v71 = (char *)operator new(v73 + 1);
                  v304 = v54;
                  v305 = v74 | 0x8000000000000000;
                  v303 = v71;
                }
                else
                {
                  HIBYTE(v305) = v54;
                  v71 = (char *)&v303;
                  if (!v54)
                  {
                    LOBYTE(v303) = 0;
                    v306 = 1;
                    v72 = __dst.__pn_.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v305) & 0x80000000) == 0)
                      goto LABEL_155;
LABEL_161:
                    operator delete(v303);
                    if (BYTE8(v302))
                      goto LABEL_162;
                    goto LABEL_164;
                  }
                }
                memmove(v71, v52, v54);
                v71[v54] = 0;
                v306 = 1;
                v72 = __dst.__pn_.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v305) < 0)
                  goto LABEL_161;
LABEL_155:
                if (BYTE8(v302))
                {
LABEL_162:
                  if (SBYTE7(v302) < 0)
                    operator delete((void *)__dst.__pn_.__r_.__value_.__l.__size_);
                }
LABEL_164:
                if (__dst.__pn_.__r_.__value_.__r.__words[0])
                  os_release(__dst.__pn_.__r_.__value_.__l.__data_);
                if (v49 && *(_QWORD *)(v49 + 24))
                {
                  v75 = _os_log_pack_size();
                  v275 = v37;
                  v76 = operator new(v75, (std::align_val_t)8uLL);
                  v77 = (_QWORD *)operator new();
                  v78 = __sa;
                  *v77 = &off_24EC1F7F0;
                  v77[1] = 0;
                  v77[2] = 0;
                  v77[3] = v76;
                  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                  __p.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
                  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v77;
                  v297 = 0;
                  v298 = 0;
                  v79 = strlen(__sa);
                  if (v79 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v80 = v79;
                  if (v79 >= 0x17)
                  {
                    v102 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v79 | 7) != 0x17)
                      v102 = v79 | 7;
                    v103 = v102 + 1;
                    v81 = operator new(v102 + 1);
                    *(_QWORD *)&v309 = v80;
                    *((_QWORD *)&v309 + 1) = v103 | 0x8000000000000000;
                    v308 = v81;
                    v78 = __sa;
                  }
                  else
                  {
                    HIBYTE(v309) = v79;
                    v81 = &v308;
                    if (!v79)
                      goto LABEL_219;
                  }
                  memcpy(v81, v78, v80);
LABEL_219:
                  *((_BYTE *)v81 + v80) = 0;
                  v104 = v308;
                  v307[0] = v309;
                  *(_QWORD *)((char *)v307 + 7) = *(_QWORD *)((char *)&v309 + 7);
                  v105 = HIBYTE(v309);
                  v106 = operator new(0x38uLL);
                  v106[1] = 0;
                  v106[2] = 0;
                  v106[3] = off_24EC1FA48;
                  *v106 = &off_24EC1F9F8;
                  v107 = v307[0];
                  v106[4] = v104;
                  v106[5] = v107;
                  *(_QWORD *)((char *)v106 + 47) = *(_QWORD *)((char *)v307 + 7);
                  *((_BYTE *)v106 + 55) = v105;
                  v307[0] = 0;
                  *(_QWORD *)((char *)v307 + 7) = 0;
                  v108 = v298;
                  v297 = (char *)(v106 + 3);
                  v298 = (std::__shared_weak_count *)v106;
                  v37 = v275;
                  if (v108)
                  {
                    v109 = (unint64_t *)&v108->__shared_owners_;
                    do
                      v110 = __ldaxr(v109);
                    while (__stlxr(v110 - 1, v109));
                    if (!v110)
                    {
                      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                      std::__shared_weak_count::__release_weak(v108);
                    }
                  }
                  __dst = __p;
                  v111 = v297;
                  if (__p.__pn_.__r_.__value_.__r.__words[2])
                  {
                    v112 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
                    do
                      v113 = __ldxr(v112);
                    while (__stxr(v113 + 1, v112));
                  }
                  v114 = v298;
                  *(_QWORD *)&v302 = v111;
                  *((_QWORD *)&v302 + 1) = v298;
                  if (v298)
                  {
                    v115 = (unint64_t *)&v298->__shared_owners_;
                    do
                      v116 = __ldxr(v115);
                    while (__stxr(v116 + 1, v115));
                    v303 = v111;
                    do
                      v117 = __ldaxr(v115);
                    while (__stlxr(v117 - 1, v115));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                      std::__shared_weak_count::__release_weak(v114);
                    }
                  }
                  else
                  {
                    v303 = v111;
                  }
                  v134 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
                  if (__p.__pn_.__r_.__value_.__r.__words[2])
                  {
                    v135 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
                  v137 = __dst.__pn_.__r_.__value_.__r.__words[0];
                  if (v303[31] >= 0)
                    v138 = v303 + 8;
                  else
                    v138 = (char *)*((_QWORD *)v303 + 1);
                  v139 = _os_log_pack_fill();
                  *(_DWORD *)v139 = 136315138;
                  *(_QWORD *)(v139 + 4) = v138;
                  v140 = operator new();
                  v141 = *(unsigned __int8 *)(v51 + 39);
                  v142 = v266;
                  if ((v141 & 0x80u) != 0)
                  {
                    v142 = *(const char **)(v51 + 16);
                    v141 = *(_QWORD *)(v51 + 24);
                  }
                  *(_QWORD *)v140 = v137;
                  *(_OWORD *)(v140 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v140 + 24) = v302;
                  v302 = 0uLL;
                  *(_QWORD *)(v140 + 40) = v142;
                  *(_QWORD *)(v140 + 48) = v141;
                  *(_BYTE *)(v140 + 56) = 1;
                  v308 = 0;
                  __p.__pn_.__r_.__value_.__r.__words[0] = v140;
                  (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v49 + 24) + 40))(*(_QWORD *)(v49 + 24), &__p);
                  v31 = v271;
                  v143 = __p.__pn_.__r_.__value_.__r.__words[0];
                  __p.__pn_.__r_.__value_.__r.__words[0] = 0;
                  if (v143)
                  {
                    v144 = *(std::__shared_weak_count **)(v143 + 32);
                    if (v144)
                    {
                      v145 = (unint64_t *)&v144->__shared_owners_;
                      do
                        v146 = __ldaxr(v145);
                      while (__stlxr(v146 - 1, v145));
                      if (!v146)
                      {
                        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                        std::__shared_weak_count::__release_weak(v144);
                      }
                    }
                    v147 = *(std::__shared_weak_count **)(v143 + 16);
                    if (v147)
                    {
                      v148 = (unint64_t *)&v147->__shared_owners_;
                      do
                        v149 = __ldaxr(v148);
                      while (__stlxr(v149 - 1, v148));
                      if (!v149)
                      {
                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                        std::__shared_weak_count::__release_weak(v147);
                      }
                    }
                    MEMORY[0x227684CE8](v143, 0x10F0C40B62ED6C6);
                    v150 = v308;
                    v308 = 0;
                    if (v150)
                    {
                      v151 = (std::__shared_weak_count *)v150[4];
                      if (v151)
                      {
                        v152 = (unint64_t *)&v151->__shared_owners_;
                        do
                          v153 = __ldaxr(v152);
                        while (__stlxr(v153 - 1, v152));
                        if (!v153)
                        {
                          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                          std::__shared_weak_count::__release_weak(v151);
                        }
                      }
                      v154 = (std::__shared_weak_count *)v150[2];
                      if (v154)
                      {
                        v155 = (unint64_t *)&v154->__shared_owners_;
                        do
                          v156 = __ldaxr(v155);
                        while (__stlxr(v156 - 1, v155));
                        if (!v156)
                        {
                          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                          std::__shared_weak_count::__release_weak(v154);
                        }
                      }
                      MEMORY[0x227684CE8](v150, 0x10F0C40B62ED6C6);
                    }
                  }
                  v157 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
                  if (*((_QWORD *)&v302 + 1))
                  {
                    v158 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
                    do
                      v159 = __ldaxr(v158);
                    while (__stlxr(v159 - 1, v158));
                    if (!v159)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                      v160 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
                      if (__dst.__pn_.__r_.__value_.__r.__words[2])
                        goto LABEL_292;
                      goto LABEL_295;
                    }
                  }
                  v160 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
                  if (!__dst.__pn_.__r_.__value_.__r.__words[2])
                    goto LABEL_295;
LABEL_292:
                  v161 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (v162)
                  {
LABEL_295:
                    if (v47)
                      goto LABEL_296;
LABEL_299:
                    sub_223182C08((uint64_t)&v282);
                    v164 = v290;
                    if (v290)
                    {
                      v165 = (unint64_t *)&v290->__shared_owners_;
                      do
                        v166 = __ldaxr(v165);
                      while (__stlxr(v166 - 1, v165));
LABEL_469:
                      if (!v166)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    goto LABEL_89;
                  }
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                  if (!v47)
                    goto LABEL_299;
                }
                else
                {
                  os_log_type_enabled(v72, OS_LOG_TYPE_INFO);
                  LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sa;
                  v82 = (void *)_os_log_send_and_compose_impl();
                  v31 = v271;
                  if (!v82)
                    goto LABEL_295;
                  free(v82);
                  if (!v47)
                    goto LABEL_299;
                }
LABEL_296:
                v163 = (const char *)v30;
                if (SHIBYTE(v30->__pn_.__r_.__value_.__r.__words[2]) < 0)
                  v163 = (const char *)v30->__pn_.__r_.__value_.__r.__words[0];
                sub_22322C138((uint64_t)&v282, "Removed orphaned file (%s) from persistence path", v163);
                sub_223182C08((uint64_t)&v282);
                goto LABEL_299;
              }
            }
            memmove(v68, v66, v67);
            goto LABEL_151;
          }
        }
      }
LABEL_90:
      if (v32 < 0)
        break;
      if (++v30 == v31)
        goto LABEL_490;
    }
    operator delete(v37);
    ++v30;
  }
  while (v30 != v31);
LABEL_490:
  v31 = (std::__fs::filesystem::path *)v293;
LABEL_491:
  if (v31)
  {
    v263 = (void **)v294;
    v264 = v31;
    if (v294 != (char *)v31)
    {
      do
      {
        if (*((char *)v263 - 1) < 0)
          operator delete(*(v263 - 3));
        v263 -= 3;
      }
      while (v263 != (void **)v31);
      v264 = v293;
    }
    v294 = (char *)v31;
    operator delete(v264);
  }
}

void sub_2238D21B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,int a29,int a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a52 && a51 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a32);
  if (a30 < 0)
    operator delete(a28);
  sub_223198030(a27, *(_QWORD **)(a27 + 8));
  sub_223821EC8(&a43);
  _Unwind_Resume(a1);
}

void sub_2238D25BC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC9A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC9A8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kf");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC9A0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC9A8);
  }
  *a1 = qword_2540CC9A0;
}

void sub_2238D2658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC9A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC9A8);
  _Unwind_Resume(a1);
}

uint64_t sub_2238D26B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t **v29;
  unsigned int v30;
  uint64_t **v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t **v36;
  unsigned int v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t **v42;
  unsigned int v43;
  uint64_t **v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t **v49;
  unsigned int v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t **v55;
  unsigned int v56;
  uint64_t **v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t **v62;
  unsigned int v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t **v68;
  unsigned int v69;
  uint64_t **v70;
  uint64_t *v71;
  unsigned __int8 v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  int v79;
  size_t v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  size_t v89;
  unsigned __int8 v90;
  const char *v91;
  size_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  void *v101;
  _QWORD *v102;
  size_t v103;
  size_t v104;
  _BYTE *v105;
  void *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD *v112;
  std::string::size_type v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unsigned __int8 v124;
  const char *v125;
  size_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  size_t v134;
  void *v135;
  _QWORD *v136;
  size_t v137;
  size_t v138;
  _BYTE *v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  _QWORD *v177;
  std::string::size_type v178;
  std::__shared_weak_count *v179;
  unint64_t *p_shared_owners;
  unint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  void *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  uint64_t v219;
  uint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t *v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  double v237;
  char *v238;
  double v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  void *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int16 *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  int *v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int *v277;
  __int16 *v278;
  int v279;
  int v280;
  float v288;
  float v298;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  unint64_t v310;
  unint64_t v311;
  __int128 *v312;
  uint64_t v313;
  const char *v314;
  size_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  float v323;
  float v333;
  int v339;
  uint64_t v340;
  uint64_t v341;
  std::string::size_type size;
  std::string *v343;
  char *v344;
  std::string *v345;
  char *v346;
  std::string::size_type v347;
  std::string *v348;
  char *v349;
  std::string *v350;
  char *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  unsigned __int8 *v364;
  int v365;
  __int16 v366;
  int v367;
  int v368;
  uint64_t v369;
  unsigned __int8 *v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  __int16 v376;
  int v377;
  int v378;
  std::string::size_type v379;
  std::string *v380;
  std::string::size_type v381;
  std::string *v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  unsigned int v399;
  unsigned int v400;
  uint64_t v401;
  unsigned __int8 *v402;
  int v403;
  int v404;
  int v405;
  int v406;
  unsigned __int8 *v407;
  int v408;
  __int16 v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::string::size_type v422;
  std::string *v423;
  std::string::size_type v424;
  std::string *v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  std::string::size_type v435;
  std::string *v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  __int128 *v440;
  __int128 v441;
  std::string *p_src;
  int v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  const char *v447;
  size_t v448;
  int v449;
  float v454;
  uint64_t v460;
  std::string *v461;
  _QWORD *v462;
  unsigned __int8 v463;
  const char *v464;
  size_t v465;
  _BYTE *v466;
  uint64_t v467;
  uint64_t v468;
  _BYTE *v469;
  uint64_t v470;
  uint64_t v471;
  NSObject *v472;
  size_t v473;
  void *v474;
  unint64_t *v475;
  unint64_t *v476;
  char *v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  void *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  const char *v492;
  uint64_t v493;
  unsigned __int8 *v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  void *v514;
  const char *v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  int v519;
  unsigned __int8 *v520;
  unsigned __int8 v521;
  const char *v522;
  size_t v523;
  _BYTE *v524;
  uint64_t v525;
  uint64_t v526;
  _BYTE *v527;
  uint64_t v528;
  uint64_t v529;
  NSObject *v530;
  size_t v531;
  void *v532;
  _QWORD *v533;
  size_t v534;
  void *v535;
  void *v536;
  char *v537;
  void *v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  char *v545;
  unint64_t *v546;
  unint64_t v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  std::string::size_type v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  const char *v561;
  uint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::string::size_type v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  void *v585;
  int v587;
  float32x4_t v588;
  float32x2_t v589;
  float32x2_t v590;
  float32x2_t v591;
  float32x2_t v592;
  float32x2_t v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  int v609;
  uint64_t v610;
  uint64_t v611;
  float32x4_t v612;
  int32x4_t v613;
  float32x4_t v614;
  float32x2_t v615;
  unsigned int v616;
  float v617;
  unsigned __int8 *v618;
  unsigned __int8 *v619;
  uint64_t v620;
  unsigned int v621;
  char *v622;
  char *v623;
  char *v624;
  unsigned __int8 *v625;
  unsigned __int8 *v626;
  uint64_t v627;
  unsigned int v628;
  __int8 *v629;
  __int8 *v630;
  char *v631;
  unsigned __int8 *v632;
  unsigned __int8 *v633;
  uint64_t v634;
  unsigned int v635;
  __int8 *v636;
  __int8 *v637;
  char *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  float v642;
  float *v643;
  uint64_t v644;
  float v645;
  float v646;
  float v647;
  float v648;
  float v649;
  uint64_t *v650;
  uint64_t **v651;
  uint64_t **v652;
  unsigned int v653;
  _BYTE *v654;
  uint64_t *v655;
  char *v656;
  uint64_t *v657;
  uint64_t **v658;
  uint64_t **v659;
  unsigned int v660;
  _BYTE *v661;
  uint64_t *v662;
  std::string::size_type v663;
  std::string *v664;
  std::string *v665;
  int v666;
  unsigned __int8 v667;
  int v668;
  unint64_t v669;
  unint64_t v670;
  uint64_t v671;
  const char *v672;
  size_t v673;
  unsigned __int8 v674;
  const char *v675;
  size_t v676;
  _BYTE *v677;
  uint64_t v678;
  uint64_t v679;
  _BYTE *v680;
  uint64_t v681;
  uint64_t v682;
  NSObject *v683;
  size_t v684;
  std::__shared_weak_count_vtbl *v685;
  std::__shared_weak_count *v686;
  std::__shared_weak_count *v687;
  unint64_t *v688;
  unint64_t v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  const char *v694;
  std::string::size_type v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  uint64_t v702;
  std::__shared_weak_count *v703;
  unint64_t *v704;
  unint64_t v705;
  std::__shared_weak_count *v706;
  unint64_t *v707;
  unint64_t v708;
  std::__shared_weak_count *v709;
  unint64_t *v710;
  unint64_t v711;
  std::__shared_weak_count *v712;
  unint64_t *v713;
  unint64_t v714;
  void *v715;
  std::__shared_weak_count *v716;
  unint64_t *v717;
  unint64_t v718;
  __int128 v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int32x4_t v723;
  float32x2_t v724;
  float32x2_t v725;
  float32x2_t v726;
  int8x16_t v727;
  float32x2_t v728;
  float v729;
  _QWORD *v730;
  std::string *v731;
  std::string::size_type v732;
  _QWORD *v733;
  _QWORD *v734;
  std::string *v735;
  std::string::size_type v736;
  _QWORD *v737;
  _QWORD *v738;
  std::string *v739;
  std::string::size_type v740;
  _QWORD *v741;
  char *v742;
  int v743;
  char *v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  std::__shared_weak_count *v748;
  unint64_t *v749;
  unint64_t v750;
  std::__shared_weak_count *v751;
  unint64_t *v752;
  unint64_t v753;
  uint64_t i;
  unsigned int v755;
  uint64_t *v756;
  uint64_t **v757;
  uint64_t **v758;
  unsigned int v759;
  char *v760;
  uint64_t *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t *v764;
  uint64_t *v765;
  uint64_t **v766;
  uint64_t **v767;
  unsigned int v768;
  _BYTE *v769;
  uint64_t *v770;
  std::string *v771;
  int v772;
  unsigned __int8 v773;
  int v774;
  unint64_t v775;
  unint64_t v776;
  std::string *v777;
  uint64_t v778;
  size_t v779;
  const char *v780;
  unsigned __int8 v781;
  const char *v782;
  size_t v783;
  _BYTE *v784;
  const char *v785;
  int v786;
  uint64_t v787;
  uint64_t v788;
  _BYTE *v789;
  uint64_t v790;
  uint64_t v791;
  NSObject *v792;
  size_t v793;
  void *v794;
  _QWORD *v795;
  size_t v796;
  size_t v797;
  _BYTE *v798;
  void *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  char v803;
  _QWORD *v804;
  uint64_t v805;
  std::__shared_weak_count *v806;
  unint64_t *v807;
  unint64_t v808;
  uint64_t v809;
  unint64_t *v810;
  unint64_t v811;
  std::__shared_weak_count *v812;
  unint64_t *v813;
  unint64_t v814;
  unint64_t v815;
  std::__shared_weak_count *v816;
  unint64_t *v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  char *v822;
  uint64_t v823;
  uint64_t v824;
  void *v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  uint64_t v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  unint64_t v844;
  std::string *v845;
  std::__shared_weak_count *v846;
  unint64_t *v847;
  unint64_t v848;
  char *v849;
  _QWORD *v850;
  _QWORD *v851;
  _BYTE *v852;
  uint64_t v853;
  uint64_t *v854;
  void *v855;
  uint64_t *v856;
  uint64_t *v857;
  _BYTE *v858;
  uint64_t v859;
  std::string *v860;
  std::string::size_type v861;
  _BYTE *v862;
  uint64_t v863;
  _BYTE *v864;
  double v865;
  uint64_t *v866;
  uint64_t v867;
  uint64_t v868;
  unsigned __int8 *v869;
  _QWORD *v870;
  float32x4_t v871;
  std::string::size_type v872;
  int v873;
  uint64_t v874;
  unsigned __int8 *v875;
  int v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  int v880;
  float32x2_t *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t v890;
  unint64_t v891;
  void *v892;
  int v893;
  int v894;
  uint64_t v895;
  const char *v896;
  uint64_t v897;
  uint64_t v898;
  const char *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  const char *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  uint64_t v911;
  float32x4_t v912;
  unint64_t v913;
  uint64_t v914;
  _QWORD *v915;
  uint64_t v916;
  uint64_t v917;
  int v918;
  char *__s;
  char *__sa;
  char *__sb;
  char *__sc;
  uint64_t v923;
  int v924;
  int v925;
  uint64_t v926;
  void *v927[2];
  uint64_t v928;
  void *v929[2];
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  std::__shared_weak_count *v933;
  __int16 *v934;
  int v935;
  int v936;
  unsigned int v937;
  unsigned int v938;
  char v939;
  char v940;
  uint64_t v941;
  std::string v942;
  std::string v943;
  uint64_t v944;
  std::__shared_weak_count *v945;
  void *v946;
  char *v947;
  unint64_t v948;
  void *v949;
  uint64_t *v950;
  uint64_t *v951;
  void *v952;
  _BYTE __dst[48];
  const char *v954;
  unint64_t v955;
  std::__shared_weak_count *v956;
  __int128 v957;
  uint64_t v958;
  uint64_t v959;
  int v960;
  __int128 v961;
  uint64_t v962;
  uint64_t v963;
  __int128 v964;
  uint64_t v965;
  uint64_t v966;
  __int128 v967;
  uint64_t v968;
  uint64_t v969;
  __int128 v970;
  uint64_t v971;
  uint64_t v972;
  __int128 v973;
  uint64_t v974;
  uint64_t v975;
  int v976;
  uint64_t v977;
  __int128 v978;
  uint64_t v979;
  int v980;
  __int128 v981;
  uint64_t v982;
  uint64_t v983;
  int v984;
  uint64_t v985;
  int v986;
  uint64_t v987;
  int v988;
  char v989;
  void *v990[3];
  _BYTE v991[24];
  const char *v992;
  std::__shared_weak_count *v993;
  int v994;
  __int128 v995;
  uint64_t v996;
  uint64_t v997;
  int v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  unsigned __int8 *v1004;
  unsigned __int8 *v1005;
  uint64_t v1006;
  uint64_t v1007;
  void *v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  unsigned __int8 *v1016;
  unsigned __int8 *v1017;
  uint64_t v1018;
  int v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  int v1024;
  uint64_t v1025;
  __int128 v1026;
  unsigned __int8 *v1027;
  int v1028;
  uint64_t v1029;
  int v1030;
  uint64_t v1031;
  int v1032;
  char v1033;
  uint64_t *v1034;
  uint64_t *v1035;
  uint64_t v1036;
  uint64_t **v1037;
  uint64_t *v1038;
  uint64_t v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  __int128 v1043;
  uint64_t v1044;
  __int128 v1045;
  uint64_t v1046;
  __int128 v1047;
  uint64_t v1048;
  __int128 v1049;
  uint64_t v1050;
  __int128 v1051;
  uint64_t v1052;
  __int128 v1053;
  uint64_t v1054;
  std::string v1055;
  __int128 v1056;
  uint64_t v1057;
  std::string v1058;
  __int128 v1059;
  uint64_t v1060;
  __int128 v1061;
  uint64_t v1062;
  __int128 v1063;
  uint64_t v1064;
  std::string v1065;
  char *v1066;
  std::__shared_weak_count *v1067;
  void *v1068[4];
  std::string __src;
  _BYTE v1070[15];
  char v1071;
  __int128 v1072;
  std::__shared_weak_count *v1073;
  uint64_t v1074;
  __int128 v1075;
  uint64_t v1076;
  uint64_t v1077;
  int v1078;
  __int128 v1079;
  uint64_t v1080;
  uint64_t v1081;
  int v1082;
  __int128 v1083;
  uint64_t v1084;
  uint64_t v1085;
  __int128 v1086;
  uint64_t v1087;
  uint64_t v1088;
  __int128 v1089;
  uint64_t v1090;
  uint64_t v1091;
  __int128 v1092;
  uint64_t v1093;
  uint64_t v1094;
  __int128 v1095;
  uint64_t v1096;
  uint64_t v1097;
  int v1098;
  uint64_t v1099;
  __int128 v1100;
  uint64_t v1101;
  int v1102;
  __int128 v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  uint64_t v1107;
  int v1108;
  uint64_t v1109;
  int v1110;
  char v1111;
  std::string v1112;
  _BYTE v1113[24];
  const char *v1114;
  uint64_t v1115;
  std::__shared_weak_count *v1116;
  __int128 v1117;
  uint64_t v1118;
  uint64_t v1119;
  int v1120;
  __int128 v1121;
  uint64_t v1122;
  uint64_t v1123;
  __int128 v1124;
  uint64_t v1125;
  uint64_t v1126;
  __int128 v1127;
  uint64_t v1128;
  uint64_t v1129;
  __int128 v1130;
  uint64_t v1131;
  uint64_t v1132;
  __int128 v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  __int128 v1137;
  uint64_t v1138;
  uint64_t v1139;
  int v1140;
  __int128 v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  uint64_t v1145;
  int v1146;
  uint64_t v1147;
  int v1148;
  char v1149;
  _BYTE v1150[32];
  const char *v1151;
  __int128 v1152;
  const char *v1153;
  std::__shared_weak_count *v1154;
  int v1155;
  __int128 v1156;
  uint64_t v1157;
  uint64_t v1158;
  int v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  unsigned __int8 *v1165;
  unsigned __int8 *v1166;
  uint64_t v1167;
  uint64_t v1168;
  void *v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unsigned __int8 *v1177;
  unsigned __int8 *v1178;
  uint64_t v1179;
  int v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  unsigned __int8 *v1189;
  int v1190;
  uint64_t v1191;
  int v1192;
  uint64_t v1193;
  int v1194;
  char v1195;
  _BYTE __p[56];
  const char *v1197;
  std::__shared_weak_count *v1198;
  int v1199;
  __int128 v1200;
  uint64_t v1201;
  uint64_t v1202;
  int v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  unsigned __int8 *v1209;
  unsigned __int8 *v1210;
  uint64_t v1211;
  uint64_t v1212;
  void *v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  unsigned __int8 *v1221;
  unsigned __int8 *v1222;
  uint64_t v1223;
  int v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  int v1229;
  uint64_t v1230;
  __int128 v1231;
  unsigned __int8 *v1232;
  _BYTE v1233[12];
  int v1234;
  uint64_t v1235;
  int v1236;
  char v1237;
  unsigned __int8 v1238[8];
  __int128 v1239;
  uint64_t v1240;
  uint64_t v1241;
  __int128 v1242;
  const char *v1243;
  unint64_t v1244;
  int v1245;
  __int128 v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  __int128 v1250;
  uint64_t v1251;
  uint64_t v1252;
  __int128 v1253;
  uint64_t v1254;
  uint64_t v1255;
  __int128 v1256;
  uint64_t v1257;
  uint64_t v1258;
  __int128 v1259;
  uint64_t v1260;
  uint64_t v1261;
  __int128 v1262;
  uint64_t v1263;
  uint64_t v1264;
  int v1265;
  uint64_t v1266;
  __int128 v1267;
  uint64_t v1268;
  int v1269;
  __int128 v1270;
  uint64_t v1271;
  uint64_t v1272;
  int v1273;
  uint64_t v1274;
  int v1275;
  uint64_t v1276;
  int v1277;
  char v1278;
  unsigned __int8 v1279[8];
  std::string v1280;
  uint64_t v1281;
  __int128 v1282;
  const char *v1283;
  uint64_t v1284;
  int v1285;
  __int128 v1286;
  uint64_t v1287;
  uint64_t v1288;
  int v1289;
  __int128 v1290;
  uint64_t v1291;
  uint64_t v1292;
  __int128 v1293;
  uint64_t v1294;
  uint64_t v1295;
  __int128 v1296;
  uint64_t v1297;
  uint64_t v1298;
  __int128 v1299;
  uint64_t v1300;
  uint64_t v1301;
  __int128 v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  __int128 v1306;
  uint64_t v1307;
  uint64_t v1308;
  int v1309;
  __int128 v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  uint64_t v1314;
  int v1315;
  uint64_t v1316;
  int v1317;
  char v1318;
  unsigned __int8 v1319[8];
  __int128 v1320;
  std::__shared_weak_count *v1321;
  uint64_t v1322;
  __int128 v1323;
  uint64_t v1324;
  uint64_t v1325;
  int v1326;
  __int128 v1327;
  uint64_t v1328;
  uint64_t v1329;
  int v1330;
  __int128 v1331;
  uint64_t v1332;
  uint64_t v1333;
  __int128 v1334;
  uint64_t v1335;
  uint64_t v1336;
  __int128 v1337;
  uint64_t v1338;
  uint64_t v1339;
  __int128 v1340;
  uint64_t v1341;
  uint64_t v1342;
  __int128 v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  uint64_t v1347;
  __int128 v1348;
  uint64_t v1349;
  int v1350;
  __int128 v1351;
  uint64_t v1352;
  uint64_t v1353;
  int v1354;
  uint64_t v1355;
  int v1356;
  uint64_t v1357;
  int v1358;
  char v1359;
  __int128 v1360;
  uint64_t v1361;
  __int128 v1362;
  uint64_t v1363;
  __int128 v1364;
  uint64_t v1365;
  std::string v1366;
  __int128 v1367;
  uint64_t v1368;
  std::string v1369;
  __int128 v1370;
  uint64_t v1371;
  __int128 v1372;
  uint64_t v1373;
  __int128 v1374;
  uint64_t v1375;
  uint64_t v1376;

  v0 = MEMORY[0x24BDAC7A8]();
  v914 = v2;
  v915 = v1;
  v4 = v3;
  v923 = v5;
  v6 = v0;
  v1376 = *MEMORY[0x24BDAC8D0];
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"depth", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1063, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1063 = *(_OWORD *)v6;
    v1064 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1063, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"depth_std", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1061, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1061 = *(_OWORD *)v6;
    v1062 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1061, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"labels", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1059, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1059 = *(_OWORD *)v6;
    v1060 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1059, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"votes", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
    sub_223197FA4(&v1058, *(void **)v6, *(_QWORD *)(v6 + 8));
  else
    v1058 = *(std::string *)v6;
  sub_22319C30C((uint64_t)&v1058, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"material_labels", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1056, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1056 = *(_OWORD *)v6;
    v1057 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1056, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"material_votes", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
    sub_223197FA4(&v1055, *(void **)v6, *(_QWORD *)(v6 + 8));
  else
    v1055 = *(std::string *)v6;
  sub_22319C30C((uint64_t)&v1055, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"scene_type", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1053, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1053 = *(_OWORD *)v6;
    v1054 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1053, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"color", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1051, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1051 = *(_OWORD *)v6;
    v1052 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1051, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"pcl", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1049, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1049 = *(_OWORD *)v6;
    v1050 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1049, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"intrinsics.txt", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1047, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1047 = *(_OWORD *)v6;
    v1048 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1047, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"WtoC.traj", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1045, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1045 = *(_OWORD *)v6;
    v1046 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1045, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  memset(__p, 0, 24);
  sub_2231816F0((std::string *)__p, (std::string *)"info.json", (std::string *)"");
  if (*(char *)(v6 + 23) < 0)
  {
    sub_223197FA4(&v1043, *(void **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v1043 = *(_OWORD *)v6;
    v1044 = *(_QWORD *)(v6 + 16);
  }
  sub_22319C30C((uint64_t)&v1043, (std::__fs::filesystem::path *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v923 + 176))(v923, v6) & 1) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 611, (uint64_t)"fs::exists(folder, fs) && \"Folder must already exist\"", 53, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (SHIBYTE(v1064) < 0)
  {
    sub_223197FA4(&v1360, (void *)v1063, *((unint64_t *)&v1063 + 1));
  }
  else
  {
    v1360 = v1063;
    v1361 = v1064;
  }
  __s = v4;
  v7 = (std::string *)&v1362;
  if (SHIBYTE(v1062) < 0)
  {
    sub_223197FA4(&v1362, (void *)v1061, *((unint64_t *)&v1061 + 1));
  }
  else
  {
    v1362 = v1061;
    v1363 = v1062;
  }
  if (SHIBYTE(v1060) < 0)
  {
    sub_223197FA4(&v1364, (void *)v1059, *((unint64_t *)&v1059 + 1));
  }
  else
  {
    v1364 = v1059;
    v1365 = v1060;
  }
  if (SHIBYTE(v1058.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1366, v1058.__r_.__value_.__l.__data_, v1058.__r_.__value_.__l.__size_);
  else
    v1366 = v1058;
  if (SHIBYTE(v1057) < 0)
  {
    sub_223197FA4(&v1367, (void *)v1056, *((unint64_t *)&v1056 + 1));
  }
  else
  {
    v1367 = v1056;
    v1368 = v1057;
  }
  if (SHIBYTE(v1055.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1369, v1055.__r_.__value_.__l.__data_, v1055.__r_.__value_.__l.__size_);
  else
    v1369 = v1055;
  if (SHIBYTE(v1054) < 0)
  {
    sub_223197FA4(&v1370, (void *)v1053, *((unint64_t *)&v1053 + 1));
  }
  else
  {
    v1370 = v1053;
    v1371 = v1054;
  }
  if (SHIBYTE(v1052) < 0)
  {
    sub_223197FA4(&v1372, (void *)v1051, *((unint64_t *)&v1051 + 1));
  }
  else
  {
    v1372 = v1051;
    v1373 = v1052;
  }
  if (SHIBYTE(v1050) < 0)
  {
    sub_223197FA4(&v1374, (void *)v1049, *((unint64_t *)&v1049 + 1));
  }
  else
  {
    v1374 = v1049;
    v1375 = v1050;
  }
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 176))(v923, &v1360)
    && (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 240))(v923, &v1360) == -1)
  {
    v7 = (std::string *)&v1360;
    goto LABEL_226;
  }
  if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 128))(v923, &v1360) & 1) == 0)
  {
    v7 = (std::string *)&v1360;
    goto LABEL_217;
  }
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 176))(v923, &v1362)
    && (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 240))(v923, &v1362) == -1)
  {
LABEL_226:
    v82 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error removing directory: %s", 0x1CuLL);
    sub_2238CE8E8(&v1072);
    if (**(int **)(v1072 + 56) > 5)
      goto LABEL_456;
    v83 = *(unsigned __int8 *)(v1072 + 72);
    v84 = sub_22322F254(v1072, "OSLogSurrogateAppender", 1, 0);
    v85 = v84;
    if (!v83 && !v84)
      goto LABEL_456;
    *(_QWORD *)v1150 = &v1072;
    *(std::chrono::steady_clock::time_point *)&v1150[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v1150[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v1150[24] = 5;
    v1151 = "unknown file";
    LODWORD(v1152) = 619;
    v1154 = 0;
    *((_QWORD *)&v1152 + 1) = "unknown function";
    v1153 = 0;
    v86 = (const char *)v7;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      v86 = (const char *)v7->__r_.__value_.__r.__words[0];
    v87 = **(_QWORD **)v1150;
    v88 = (const char *)(**(_QWORD **)v1150 + 16);
    v917 = **(_QWORD **)v1150;
    __sb = (char *)v88;
    if (*(char *)(**(_QWORD **)v1150 + 39) < 0)
    {
      v88 = *(const char **)(v87 + 16);
      v89 = *(_QWORD *)(v87 + 24);
    }
    else
    {
      v89 = *(unsigned __int8 *)(**(_QWORD **)v1150 + 39);
    }
    v925 = v83;
    v124 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, byte_255788F40);
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v125 = byte_255788F40;
    else
      v125 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v126 = byte_255788F40[23];
    else
      v126 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)__p = os_log_create(v125, v88);
    v127 = &__p[8];
    if (v126 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v126 >= 0x17)
    {
      v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v126 | 7) != 0x17)
        v128 = v126 | 7;
      v129 = v128 + 1;
      v127 = operator new(v128 + 1);
      *(_QWORD *)&__p[24] = v129 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v127;
      *(_QWORD *)&__p[16] = v126;
    }
    else
    {
      __p[31] = v126;
      if (!v126)
      {
LABEL_309:
        v127[v126] = 0;
        __p[32] = 1;
        v130 = &__p[40];
        if (v89 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v89 >= 0x17)
        {
          v131 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v89 | 7) != 0x17)
            v131 = v89 | 7;
          v132 = v131 + 1;
          v130 = operator new(v131 + 1);
          v1197 = (const char *)(v132 | 0x8000000000000000);
          *(_QWORD *)&__p[40] = v130;
          *(_QWORD *)&__p[48] = v89;
        }
        else
        {
          HIBYTE(v1197) = v89;
          if (!v89)
          {
LABEL_317:
            v130[v89] = 0;
            LOBYTE(v1198) = 1;
            v133 = *(NSObject **)__p;
            if (SHIBYTE(v1197) < 0)
              operator delete(*(void **)&__p[40]);
            if (__p[32] && (__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
            if (*(_QWORD *)__p)
              os_release(*(void **)__p);
            if (!v85 || !*(_QWORD *)(v85 + 24))
            {
              os_log_type_enabled(v133, OS_LOG_TYPE_ERROR);
              *(_DWORD *)__p = 136315138;
              *(_QWORD *)&__p[4] = v86;
              v140 = (void *)_os_log_send_and_compose_impl();
              if (v140)
                free(v140);
              goto LABEL_448;
            }
            v134 = _os_log_pack_size();
            v135 = operator new(v134, (std::align_val_t)8uLL);
            v136 = (_QWORD *)operator new();
            *v136 = &off_24EC1F7F0;
            v136[1] = 0;
            v136[2] = 0;
            v136[3] = v135;
            v990[0] = v135;
            v990[1] = v135;
            *(_QWORD *)&v991[8] = 0;
            v990[2] = v136;
            *(_QWORD *)v991 = 0;
            v137 = strlen(v86);
            if (v137 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v138 = v137;
            if (v137 >= 0x17)
            {
              v173 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v137 | 7) != 0x17)
                v173 = v137 | 7;
              v174 = v173 + 1;
              v139 = operator new(v173 + 1);
              *(_QWORD *)&__dst[16] = v174 | 0x8000000000000000;
              *(_QWORD *)__dst = v139;
              *(_QWORD *)&__dst[8] = v138;
            }
            else
            {
              __dst[23] = v137;
              v139 = __dst;
              if (!v137)
              {
LABEL_388:
                v139[v138] = 0;
                v175 = *(_QWORD *)__dst;
                v1112.__r_.__value_.__r.__words[0] = *(_QWORD *)&__dst[8];
                *(std::string::size_type *)((char *)v1112.__r_.__value_.__r.__words + 7) = *(_QWORD *)&__dst[15];
                v176 = __dst[23];
                v177 = operator new(0x38uLL);
                v177[1] = 0;
                v177[2] = 0;
                v177[3] = off_24EC1FA48;
                *v177 = &off_24EC1F9F8;
                v178 = v1112.__r_.__value_.__r.__words[0];
                v177[4] = v175;
                v177[5] = v178;
                *(_QWORD *)((char *)v177 + 47) = *(std::string::size_type *)((char *)v1112.__r_.__value_.__r.__words + 7);
                *((_BYTE *)v177 + 55) = v176;
                v1112.__r_.__value_.__r.__words[0] = 0;
                *(std::string::size_type *)((char *)v1112.__r_.__value_.__r.__words + 7) = 0;
                v179 = *(std::__shared_weak_count **)&v991[8];
                *(_QWORD *)v991 = v177 + 3;
                *(_QWORD *)&v991[8] = v177;
                if (v179)
                {
                  p_shared_owners = (unint64_t *)&v179->__shared_owners_;
                  do
                    v181 = __ldaxr(p_shared_owners);
                  while (__stlxr(v181 - 1, p_shared_owners));
                  if (!v181)
                  {
                    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                    std::__shared_weak_count::__release_weak(v179);
                  }
                }
                *(_OWORD *)__p = *(_OWORD *)v990;
                v182 = *(_QWORD *)v991;
                *(void **)&__p[16] = v990[2];
                if (v990[2])
                {
                  v183 = (unint64_t *)((char *)v990[2] + 8);
                  do
                    v184 = __ldxr(v183);
                  while (__stxr(v184 + 1, v183));
                }
                v185 = *(std::__shared_weak_count **)&v991[8];
                *(_QWORD *)&__p[24] = v182;
                *(_QWORD *)&__p[32] = *(_QWORD *)&v991[8];
                if (*(_QWORD *)&v991[8])
                {
                  v186 = (unint64_t *)(*(_QWORD *)&v991[8] + 8);
                  do
                    v187 = __ldxr(v186);
                  while (__stxr(v187 + 1, v186));
                  *(_QWORD *)&__p[40] = v182;
                  do
                    v188 = __ldaxr(v186);
                  while (__stlxr(v188 - 1, v186));
                  if (!v188)
                  {
                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                    std::__shared_weak_count::__release_weak(v185);
                  }
                }
                else
                {
                  *(_QWORD *)&__p[40] = v182;
                }
                v189 = (std::__shared_weak_count *)v990[2];
                if (v990[2])
                {
                  v190 = (unint64_t *)((char *)v990[2] + 8);
                  do
                    v191 = __ldaxr(v190);
                  while (__stlxr(v191 - 1, v190));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                    std::__shared_weak_count::__release_weak(v189);
                  }
                }
                v192 = *(_QWORD *)__p;
                if (*(char *)(*(_QWORD *)&__p[40] + 31) >= 0)
                  v193 = *(_QWORD *)&__p[40] + 8;
                else
                  v193 = *(_QWORD *)(*(_QWORD *)&__p[40] + 8);
                v194 = _os_log_pack_fill();
                *(_DWORD *)v194 = 136315138;
                *(_QWORD *)(v194 + 4) = v193;
                v195 = (char *)operator new();
                v196 = *(unsigned __int8 *)(v917 + 39);
                v197 = __sb;
                if ((v196 & 0x80u) != 0)
                {
                  v197 = *(char **)(v917 + 16);
                  v196 = *(_QWORD *)(v917 + 24);
                }
                *(_QWORD *)v195 = v192;
                *(_OWORD *)(v195 + 8) = *(_OWORD *)&__p[8];
                *(_QWORD *)&__p[8] = 0;
                *(_QWORD *)&__p[16] = 0;
                *(_OWORD *)(v195 + 24) = *(_OWORD *)&__p[24];
                *(_QWORD *)&__p[24] = 0;
                *(_QWORD *)&__p[32] = 0;
                *((_QWORD *)v195 + 5) = v197;
                *((_QWORD *)v195 + 6) = v196;
                v195[56] = 16;
                *(_QWORD *)__dst = 0;
                v990[0] = v195;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v85 + 24) + 40))(*(_QWORD *)(v85 + 24), v990);
                v198 = v990[0];
                v990[0] = 0;
                if (v198)
                {
                  v199 = (std::__shared_weak_count *)*((_QWORD *)v198 + 4);
                  if (v199)
                  {
                    v200 = (unint64_t *)&v199->__shared_owners_;
                    do
                      v201 = __ldaxr(v200);
                    while (__stlxr(v201 - 1, v200));
                    if (!v201)
                    {
                      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                      std::__shared_weak_count::__release_weak(v199);
                    }
                  }
                  v202 = (std::__shared_weak_count *)*((_QWORD *)v198 + 2);
                  if (v202)
                  {
                    v203 = (unint64_t *)&v202->__shared_owners_;
                    do
                      v204 = __ldaxr(v203);
                    while (__stlxr(v204 - 1, v203));
                    if (!v204)
                    {
                      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                      std::__shared_weak_count::__release_weak(v202);
                    }
                  }
                  MEMORY[0x227684CE8](v198, 0x10F0C40B62ED6C6);
                  v205 = *(_QWORD *)__dst;
                  *(_QWORD *)__dst = 0;
                  if (v205)
                  {
                    v206 = *(std::__shared_weak_count **)(v205 + 32);
                    if (v206)
                    {
                      v207 = (unint64_t *)&v206->__shared_owners_;
                      do
                        v208 = __ldaxr(v207);
                      while (__stlxr(v208 - 1, v207));
                      if (!v208)
                      {
                        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                        std::__shared_weak_count::__release_weak(v206);
                      }
                    }
                    v209 = *(std::__shared_weak_count **)(v205 + 16);
                    if (v209)
                    {
                      v210 = (unint64_t *)&v209->__shared_owners_;
                      do
                        v211 = __ldaxr(v210);
                      while (__stlxr(v211 - 1, v210));
                      if (!v211)
                      {
                        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                        std::__shared_weak_count::__release_weak(v209);
                      }
                    }
                    MEMORY[0x227684CE8](v205, 0x10F0C40B62ED6C6);
                  }
                }
                v212 = *(std::__shared_weak_count **)&__p[32];
                v83 = v925;
                if (*(_QWORD *)&__p[32])
                {
                  v213 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                  do
                    v214 = __ldaxr(v213);
                  while (__stlxr(v214 - 1, v213));
                  if (!v214)
                  {
                    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                    std::__shared_weak_count::__release_weak(v212);
                  }
                }
                v215 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v216 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v217 = __ldaxr(v216);
                  while (__stlxr(v217 - 1, v216));
                  if (!v217)
                  {
                    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                    std::__shared_weak_count::__release_weak(v215);
                  }
                }
LABEL_448:
                if (v83)
                {
                  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
                    v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)v1150, "Error removing directory: %s", (const char *)v7);
                  sub_223182C08((uint64_t)v1150);
                }
                sub_223182C08((uint64_t)v1150);
                v170 = v1154;
                if (!v1154)
                  goto LABEL_456;
                v218 = (unint64_t *)&v1154->__shared_owners_;
                do
                  v172 = __ldaxr(v218);
                while (__stlxr(v172 - 1, v218));
                goto LABEL_455;
              }
            }
            memcpy(v139, v86, v138);
            goto LABEL_388;
          }
        }
        memmove(v130, v88, v89);
        goto LABEL_317;
      }
    }
    memmove(v127, v125, v126);
    goto LABEL_309;
  }
  if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 128))(v923, &v1362))
  {
LABEL_217:
    v72 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error creating directory: %s", 0x1CuLL);
    sub_2238CE8E8(&v1072);
    if (**(int **)(v1072 + 56) > 5)
      goto LABEL_456;
    v73 = *(unsigned __int8 *)(v1072 + 72);
    v74 = sub_22322F254(v1072, "OSLogSurrogateAppender", 1, 0);
    v75 = v74;
    if (!v73 && !v74)
      goto LABEL_456;
    *(_QWORD *)v1150 = &v1072;
    *(std::chrono::steady_clock::time_point *)&v1150[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v1150[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v1150[24] = 5;
    v1151 = "unknown file";
    LODWORD(v1152) = 624;
    v1154 = 0;
    *((_QWORD *)&v1152 + 1) = "unknown function";
    v1153 = 0;
    v76 = (const char *)v7;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    {
      v76 = (const char *)v7->__r_.__value_.__r.__words[0];
      v77 = **(_QWORD **)v1150;
      v78 = (const char *)(**(_QWORD **)v1150 + 16);
      v79 = *(char *)(**(_QWORD **)v1150 + 39);
      v916 = **(_QWORD **)v1150;
      __sa = (char *)v78;
      if ((v79 & 0x80000000) == 0)
      {
LABEL_223:
        v80 = v79;
        v924 = v73;
        v81 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v81 & 1) != 0)
          goto LABEL_236;
LABEL_1638:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)__p);
          sub_223199C58("com.apple.cv3d", (unint64_t)__p, byte_255788F40);
          if (__p[24] && (__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_236:
        if (byte_255788F40[23] >= 0)
          v91 = byte_255788F40;
        else
          v91 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v92 = byte_255788F40[23];
        else
          v92 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)__p = os_log_create(v91, v78);
        v93 = &__p[8];
        if (v92 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v92 >= 0x17)
        {
          v94 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v92 | 7) != 0x17)
            v94 = v92 | 7;
          v95 = v94 + 1;
          v93 = operator new(v94 + 1);
          *(_QWORD *)&__p[24] = v95 | 0x8000000000000000;
          *(_QWORD *)&__p[8] = v93;
          *(_QWORD *)&__p[16] = v92;
        }
        else
        {
          __p[31] = v92;
          if (!v92)
          {
LABEL_250:
            v93[v92] = 0;
            __p[32] = 1;
            v96 = &__p[40];
            if (v80 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v80 >= 0x17)
            {
              v98 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v80 | 7) != 0x17)
                v98 = v80 | 7;
              v99 = v98 + 1;
              v96 = operator new(v98 + 1);
              v1197 = (const char *)(v99 | 0x8000000000000000);
              *(_QWORD *)&__p[40] = v96;
              *(_QWORD *)&__p[48] = v80;
            }
            else
            {
              HIBYTE(v1197) = v80;
              if (!v80)
              {
                __p[40] = 0;
                LOBYTE(v1198) = 1;
                v97 = *(NSObject **)__p;
                if ((SHIBYTE(v1197) & 0x80000000) == 0)
                  goto LABEL_254;
                goto LABEL_260;
              }
            }
            memmove(v96, v78, v80);
            v96[v80] = 0;
            LOBYTE(v1198) = 1;
            v97 = *(NSObject **)__p;
            if ((SHIBYTE(v1197) & 0x80000000) == 0)
            {
LABEL_254:
              if (!__p[32])
                goto LABEL_263;
              goto LABEL_261;
            }
LABEL_260:
            operator delete(*(void **)&__p[40]);
            if (!__p[32])
              goto LABEL_263;
LABEL_261:
            if ((__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
LABEL_263:
            if (*(_QWORD *)__p)
              os_release(*(void **)__p);
            if (!v75 || !*(_QWORD *)(v75 + 24))
            {
              os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
              *(_DWORD *)__p = 136315138;
              *(_QWORD *)&__p[4] = v76;
              v106 = (void *)_os_log_send_and_compose_impl();
              v107 = v924;
              if (v106)
                free(v106);
              goto LABEL_376;
            }
            v100 = _os_log_pack_size();
            v101 = operator new(v100, (std::align_val_t)8uLL);
            v102 = (_QWORD *)operator new();
            *v102 = &off_24EC1F7F0;
            v102[1] = 0;
            v102[2] = 0;
            v102[3] = v101;
            v990[0] = v101;
            v990[1] = v101;
            *(_QWORD *)&v991[8] = 0;
            v990[2] = v102;
            *(_QWORD *)v991 = 0;
            v103 = strlen(v76);
            if (v103 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v104 = v103;
            if (v103 >= 0x17)
            {
              v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v103 | 7) != 0x17)
                v108 = v103 | 7;
              v109 = v108 + 1;
              v105 = operator new(v108 + 1);
              *(_QWORD *)&__dst[16] = v109 | 0x8000000000000000;
              *(_QWORD *)__dst = v105;
              *(_QWORD *)&__dst[8] = v104;
            }
            else
            {
              __dst[23] = v103;
              v105 = __dst;
              if (!v103)
              {
LABEL_277:
                v105[v104] = 0;
                v110 = *(_QWORD *)__dst;
                v1112.__r_.__value_.__r.__words[0] = *(_QWORD *)&__dst[8];
                *(std::string::size_type *)((char *)v1112.__r_.__value_.__r.__words + 7) = *(_QWORD *)&__dst[15];
                v111 = __dst[23];
                v112 = operator new(0x38uLL);
                v112[1] = 0;
                v112[2] = 0;
                v112[3] = off_24EC1FA48;
                *v112 = &off_24EC1F9F8;
                v113 = v1112.__r_.__value_.__r.__words[0];
                v112[4] = v110;
                v112[5] = v113;
                *(_QWORD *)((char *)v112 + 47) = *(std::string::size_type *)((char *)v1112.__r_.__value_.__r.__words + 7);
                *((_BYTE *)v112 + 55) = v111;
                v1112.__r_.__value_.__r.__words[0] = 0;
                *(std::string::size_type *)((char *)v1112.__r_.__value_.__r.__words + 7) = 0;
                v114 = *(std::__shared_weak_count **)&v991[8];
                *(_QWORD *)v991 = v112 + 3;
                *(_QWORD *)&v991[8] = v112;
                if (v114)
                {
                  v115 = (unint64_t *)&v114->__shared_owners_;
                  do
                    v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                *(_OWORD *)__p = *(_OWORD *)v990;
                v117 = *(_QWORD *)v991;
                *(void **)&__p[16] = v990[2];
                if (v990[2])
                {
                  v118 = (unint64_t *)((char *)v990[2] + 8);
                  do
                    v119 = __ldxr(v118);
                  while (__stxr(v119 + 1, v118));
                }
                v120 = *(std::__shared_weak_count **)&v991[8];
                *(_QWORD *)&__p[24] = v117;
                *(_QWORD *)&__p[32] = *(_QWORD *)&v991[8];
                if (*(_QWORD *)&v991[8])
                {
                  v121 = (unint64_t *)(*(_QWORD *)&v991[8] + 8);
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                  *(_QWORD *)&__p[40] = v117;
                  do
                    v123 = __ldaxr(v121);
                  while (__stlxr(v123 - 1, v121));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
                else
                {
                  *(_QWORD *)&__p[40] = v117;
                }
                v141 = (std::__shared_weak_count *)v990[2];
                if (v990[2])
                {
                  v142 = (unint64_t *)((char *)v990[2] + 8);
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                v144 = *(_QWORD *)__p;
                if (*(char *)(*(_QWORD *)&__p[40] + 31) >= 0)
                  v145 = *(_QWORD *)&__p[40] + 8;
                else
                  v145 = *(_QWORD *)(*(_QWORD *)&__p[40] + 8);
                v146 = _os_log_pack_fill();
                *(_DWORD *)v146 = 136315138;
                *(_QWORD *)(v146 + 4) = v145;
                v147 = (char *)operator new();
                v148 = *(unsigned __int8 *)(v916 + 39);
                v149 = __sa;
                if ((v148 & 0x80u) != 0)
                {
                  v149 = *(char **)(v916 + 16);
                  v148 = *(_QWORD *)(v916 + 24);
                }
                *(_QWORD *)v147 = v144;
                *(_OWORD *)(v147 + 8) = *(_OWORD *)&__p[8];
                *(_QWORD *)&__p[8] = 0;
                *(_QWORD *)&__p[16] = 0;
                *(_OWORD *)(v147 + 24) = *(_OWORD *)&__p[24];
                *(_QWORD *)&__p[24] = 0;
                *(_QWORD *)&__p[32] = 0;
                *((_QWORD *)v147 + 5) = v149;
                *((_QWORD *)v147 + 6) = v148;
                v147[56] = 16;
                *(_QWORD *)__dst = 0;
                v990[0] = v147;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v75 + 24) + 40))(*(_QWORD *)(v75 + 24), v990);
                v150 = v990[0];
                v990[0] = 0;
                if (v150)
                {
                  v151 = (std::__shared_weak_count *)*((_QWORD *)v150 + 4);
                  if (v151)
                  {
                    v152 = (unint64_t *)&v151->__shared_owners_;
                    do
                      v153 = __ldaxr(v152);
                    while (__stlxr(v153 - 1, v152));
                    if (!v153)
                    {
                      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                      std::__shared_weak_count::__release_weak(v151);
                    }
                  }
                  v154 = (std::__shared_weak_count *)*((_QWORD *)v150 + 2);
                  if (v154)
                  {
                    v155 = (unint64_t *)&v154->__shared_owners_;
                    do
                      v156 = __ldaxr(v155);
                    while (__stlxr(v156 - 1, v155));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                      std::__shared_weak_count::__release_weak(v154);
                    }
                  }
                  MEMORY[0x227684CE8](v150, 0x10F0C40B62ED6C6);
                  v157 = *(_QWORD *)__dst;
                  *(_QWORD *)__dst = 0;
                  if (v157)
                  {
                    v158 = *(std::__shared_weak_count **)(v157 + 32);
                    if (v158)
                    {
                      v159 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v160 = __ldaxr(v159);
                      while (__stlxr(v160 - 1, v159));
                      if (!v160)
                      {
                        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                        std::__shared_weak_count::__release_weak(v158);
                      }
                    }
                    v161 = *(std::__shared_weak_count **)(v157 + 16);
                    if (v161)
                    {
                      v162 = (unint64_t *)&v161->__shared_owners_;
                      do
                        v163 = __ldaxr(v162);
                      while (__stlxr(v163 - 1, v162));
                      if (!v163)
                      {
                        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                        std::__shared_weak_count::__release_weak(v161);
                      }
                    }
                    MEMORY[0x227684CE8](v157, 0x10F0C40B62ED6C6);
                  }
                }
                v164 = *(std::__shared_weak_count **)&__p[32];
                v107 = v924;
                if (*(_QWORD *)&__p[32])
                {
                  v165 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                  do
                    v166 = __ldaxr(v165);
                  while (__stlxr(v166 - 1, v165));
                  if (!v166)
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                  }
                }
                v167 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v168 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
LABEL_376:
                if (v107)
                {
                  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
                    v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)v1150, "Error creating directory: %s", (const char *)v7);
                  sub_223182C08((uint64_t)v1150);
                }
                sub_223182C08((uint64_t)v1150);
                v170 = v1154;
                if (!v1154)
                  goto LABEL_456;
                v171 = (unint64_t *)&v1154->__shared_owners_;
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
LABEL_455:
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                  v219 = 0;
                  if (SHIBYTE(v1375) < 0)
                    goto LABEL_479;
LABEL_457:
                  if (SHIBYTE(v1373) < 0)
                    goto LABEL_480;
LABEL_458:
                  if (SHIBYTE(v1371) < 0)
                    goto LABEL_481;
LABEL_459:
                  if (SHIBYTE(v1369.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_482;
LABEL_460:
                  if (SHIBYTE(v1368) < 0)
                    goto LABEL_483;
LABEL_461:
                  if (SHIBYTE(v1366.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_484;
LABEL_462:
                  if (SHIBYTE(v1365) < 0)
                    goto LABEL_485;
LABEL_463:
                  if (SHIBYTE(v1363) < 0)
                    goto LABEL_486;
LABEL_464:
                  if (SHIBYTE(v1361) < 0)
                    goto LABEL_487;
LABEL_465:
                  if (SHIBYTE(v1044) < 0)
                    goto LABEL_488;
LABEL_466:
                  if (SHIBYTE(v1046) < 0)
                    goto LABEL_489;
LABEL_467:
                  if (SHIBYTE(v1048) < 0)
                    goto LABEL_490;
LABEL_468:
                  if (SHIBYTE(v1050) < 0)
                    goto LABEL_491;
LABEL_469:
                  if (SHIBYTE(v1052) < 0)
                    goto LABEL_492;
LABEL_470:
                  if (SHIBYTE(v1054) < 0)
                    goto LABEL_493;
LABEL_471:
                  if (SHIBYTE(v1055.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_494;
LABEL_472:
                  if (SHIBYTE(v1057) < 0)
                    goto LABEL_495;
LABEL_473:
                  if (SHIBYTE(v1058.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_496;
LABEL_474:
                  if (SHIBYTE(v1060) < 0)
                    goto LABEL_497;
LABEL_475:
                  if (SHIBYTE(v1062) < 0)
                    goto LABEL_498;
LABEL_476:
                  if (SHIBYTE(v1064) < 0)
                    goto LABEL_499;
                  return v219;
                }
LABEL_456:
                v219 = 0;
                if (SHIBYTE(v1375) < 0)
                  goto LABEL_479;
                goto LABEL_457;
              }
            }
            memcpy(v105, v76, v104);
            goto LABEL_277;
          }
        }
        memmove(v93, v91, v92);
        goto LABEL_250;
      }
    }
    else
    {
      v77 = **(_QWORD **)v1150;
      v78 = (const char *)(**(_QWORD **)v1150 + 16);
      v79 = *(char *)(**(_QWORD **)v1150 + 39);
      v916 = **(_QWORD **)v1150;
      __sa = (char *)v78;
      if ((v79 & 0x80000000) == 0)
        goto LABEL_223;
    }
    v78 = *(const char **)(v77 + 16);
    v80 = *(_QWORD *)(v77 + 24);
    v924 = v73;
    v90 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v90 & 1) != 0)
      goto LABEL_236;
    goto LABEL_1638;
  }
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 176))(v923, &v1364)
    && (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 240))(v923, &v1364) == -1)
  {
    v7 = (std::string *)&v1364;
    goto LABEL_226;
  }
  v7 = (std::string *)&v1364;
  if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 128))(v923, &v1364))
    goto LABEL_217;
  if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v923 + 176))(v923, &v1366)
    && (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v923 + 240))(v923, &v1366) == -1)
  {
    v7 = &v1366;
    goto LABEL_226;
  }
  v7 = &v1366;
  if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v923 + 128))(v923, &v1366))
    goto LABEL_217;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 176))(v923, &v1367)
    && (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 240))(v923, &v1367) == -1)
  {
    v7 = (std::string *)&v1367;
    goto LABEL_226;
  }
  v7 = (std::string *)&v1367;
  if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 128))(v923, &v1367))
    goto LABEL_217;
  if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v923 + 176))(v923, &v1369)
    && (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v923 + 240))(v923, &v1369) == -1)
  {
    v7 = &v1369;
    goto LABEL_226;
  }
  v7 = &v1369;
  if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v923 + 128))(v923, &v1369))
    goto LABEL_217;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 176))(v923, &v1370)
    && (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 240))(v923, &v1370) == -1)
  {
    v7 = (std::string *)&v1370;
    goto LABEL_226;
  }
  v7 = (std::string *)&v1370;
  if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 128))(v923, &v1370))
    goto LABEL_217;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 176))(v923, &v1372)
    && (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 240))(v923, &v1372) == -1)
  {
    v7 = (std::string *)&v1372;
    goto LABEL_226;
  }
  v7 = (std::string *)&v1372;
  if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 128))(v923, &v1372))
    goto LABEL_217;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 176))(v923, &v1374)
    && (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 240))(v923, &v1374) == -1)
  {
    v7 = (std::string *)&v1374;
    goto LABEL_226;
  }
  v7 = (std::string *)&v1374;
  if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v923 + 128))(v923, &v1374))
    goto LABEL_217;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v923 + 376))(&v1041, v923, &v1045, 16);
  if (!v1042
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 631, (uint64_t)"trajectory_file", 15, (uint64_t)"Trajectory file cannot be created", 33, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v1040 = 268509188;
  __p[0] = 32;
  *(_QWORD *)&__p[8] = "scenetype.";
  __p[16] = 4;
  *(_QWORD *)&__p[24] = "color.";
  __p[32] = 1;
  *(_QWORD *)&__p[40] = "semantics.";
  __p[48] = 16;
  v1197 = "material.";
  sub_2238E8578((uint64_t **)&v1037, __p, 4);
  if (v1039 != 4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 647, (uint64_t)"modalities.size() == prefix_for_modality.size()", 47, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2241498F4((uint64_t)v990, 0);
  v1150[0] = 32;
  *(_OWORD *)&v1150[8] = *(_OWORD *)v990;
  v1151 = *(const char **)v991;
  *(void **)&v1150[24] = v990[2];
  memset(v990, 0, sizeof(v990));
  v1152 = *(_OWORD *)&v991[8];
  v1154 = v993;
  v1153 = v992;
  *(_QWORD *)&v991[8] = 0;
  *(_QWORD *)&v991[16] = 0;
  v992 = 0;
  v1155 = v994;
  v1156 = v995;
  v1158 = v997;
  v1157 = v996;
  v995 = 0uLL;
  v1159 = v998;
  v8 = v1000;
  v874 = v999;
  v1160 = v999;
  v1161 = v1000;
  v1163 = v1002;
  v901 = v1001;
  v1162 = v1001;
  v996 = 0;
  v999 = 0;
  v1000 = 0;
  v1001 = 0;
  v9 = v1003;
  v10 = v1004;
  v1164 = v1003;
  v1165 = v1004;
  v11 = v1005;
  v1167 = v1006;
  v1166 = v1005;
  v1003 = 0;
  v1004 = 0;
  v892 = v1008;
  v895 = v1007;
  v1168 = v1007;
  v1169 = v1008;
  v887 = v1009;
  v1171 = v1010;
  v1170 = v1009;
  v1005 = 0;
  v1007 = 0;
  v1008 = 0;
  v1009 = 0;
  v882 = v1012;
  v884 = v1011;
  v1172 = v1011;
  v1173 = v1012;
  v878 = v1013;
  v1175 = v1014;
  v1174 = v1013;
  v1011 = 0;
  v1012 = 0;
  v875 = v1016;
  v877 = v1015;
  v1176 = v1015;
  v1177 = v1016;
  v12 = v1017;
  v1179 = v1018;
  v1178 = v1017;
  v1013 = 0;
  v1015 = 0;
  v1016 = 0;
  v1017 = 0;
  v1180 = v1019;
  v13 = v1020;
  v14 = v1021;
  v1181 = v1020;
  v1182 = v1021;
  v15 = v1022;
  v1184 = v1023;
  v1183 = v1022;
  v1020 = 0;
  v1021 = 0;
  v1185 = v1024;
  v16 = v1025;
  v1189 = v1027;
  v1186 = v1025;
  v17 = v1026;
  v1187 = v1026;
  v1026 = 0uLL;
  v1022 = 0;
  v1025 = 0;
  v1190 = v1028;
  LOBYTE(v1191) = 0;
  v1195 = 0;
  if (v1033)
  {
    v1192 = v1030;
    v1191 = v1029;
    v1193 = v1031;
    v1194 = v1032;
    v1195 = 1;
  }
  v1204 = v874;
  v1205 = v8;
  v1211 = v1006;
  v1210 = v11;
  v1208 = v9;
  v1209 = v10;
  __p[0] = v1150[0];
  *(_QWORD *)&__p[32] = v1151;
  *(_QWORD *)&__p[24] = *(_QWORD *)&v1150[24];
  v1198 = v1154;
  v1197 = v1153;
  v18 = v1152;
  v1153 = 0;
  v1152 = 0uLL;
  v1199 = v1155;
  v1202 = v1158;
  *(_OWORD *)&__p[8] = *(_OWORD *)&v1150[8];
  v1201 = v1157;
  *(_OWORD *)&__p[40] = v18;
  v19 = v1156;
  v1156 = 0uLL;
  v1157 = 0;
  v1203 = v1159;
  v1207 = v1163;
  memset(&v1150[8], 0, 24);
  v1200 = v19;
  v1206 = v901;
  v1160 = 0;
  v1161 = 0;
  v1162 = 0;
  v1164 = 0;
  v1165 = 0;
  v1166 = 0;
  v1212 = v895;
  v1213 = v892;
  v1215 = v1010;
  v1214 = v887;
  v1168 = 0;
  v1169 = 0;
  v1170 = 0;
  v1216 = v884;
  v1217 = v882;
  v1219 = v1014;
  v1218 = v878;
  v1172 = 0;
  v1173 = 0;
  v1174 = 0;
  v1220 = v877;
  v1221 = v875;
  v1223 = v1018;
  v1222 = v12;
  v1176 = 0;
  v1177 = 0;
  v1178 = 0;
  v1224 = v1019;
  v1225 = v13;
  v1226 = v14;
  v1228 = v1023;
  v1227 = v15;
  v1181 = 0;
  v1182 = 0;
  v1183 = 0;
  v1229 = v1024;
  v1232 = v1027;
  v1230 = v16;
  v1231 = v17;
  v1186 = 0;
  v1187 = 0;
  v1188 = 0;
  *(_DWORD *)v1233 = v1028;
  v1233[4] = 0;
  v1237 = 0;
  if (v1195)
  {
    *(_QWORD *)&v1233[4] = v1191;
    v1234 = v1192;
    v1235 = v1193;
    v1236 = v1194;
    v1237 = 1;
  }
  sub_2241498F4((uint64_t)__dst, 0);
  v1238[0] = 4;
  v1239 = *(_OWORD *)__dst;
  v1241 = *(_QWORD *)&__dst[24];
  v1240 = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  v1242 = *(_OWORD *)&__dst[32];
  v1244 = v955;
  v1243 = v954;
  *(_QWORD *)&__dst[32] = 0;
  *(_QWORD *)&__dst[40] = 0;
  v954 = 0;
  v1245 = (int)v956;
  v1246 = v957;
  v1248 = v959;
  v1247 = v958;
  v957 = 0uLL;
  v1249 = v960;
  v1252 = v963;
  v1250 = v961;
  v1251 = v962;
  v958 = 0;
  v961 = 0uLL;
  v962 = 0;
  v1255 = v966;
  v1253 = v964;
  v1254 = v965;
  v964 = 0uLL;
  v1258 = v969;
  v1256 = v967;
  v1257 = v968;
  v965 = 0;
  v967 = 0uLL;
  v968 = 0;
  v1261 = v972;
  v1259 = v970;
  v1260 = v971;
  v970 = 0uLL;
  v1264 = v975;
  v1262 = v973;
  v1263 = v974;
  v971 = 0;
  v973 = 0uLL;
  v974 = 0;
  v1265 = v976;
  v1268 = v979;
  v1266 = v977;
  v1267 = v978;
  v977 = 0;
  v978 = 0uLL;
  v1269 = v980;
  v1272 = v983;
  v1270 = v981;
  v1271 = v982;
  v981 = 0uLL;
  v982 = 0;
  v1273 = v984;
  LOBYTE(v1274) = 0;
  v1278 = 0;
  if (v989)
  {
    v1275 = v986;
    v1274 = v985;
    v1276 = v987;
    v1277 = v988;
    v1278 = 1;
  }
  sub_2241498F4((uint64_t)&v1112, 0);
  v1279[0] = 1;
  v1281 = *(_QWORD *)v1113;
  v1280 = v1112;
  memset(&v1112, 0, sizeof(v1112));
  v1284 = v1115;
  v1282 = *(_OWORD *)&v1113[8];
  v1283 = v1114;
  *(_QWORD *)&v1113[8] = 0;
  *(_QWORD *)&v1113[16] = 0;
  v1114 = 0;
  v1285 = (int)v1116;
  v1288 = v1119;
  v1286 = v1117;
  v1287 = v1118;
  v1117 = 0uLL;
  v1289 = v1120;
  v1292 = v1123;
  v1290 = v1121;
  v1291 = v1122;
  v1118 = 0;
  v1121 = 0uLL;
  v1122 = 0;
  v1295 = v1126;
  v1293 = v1124;
  v1294 = v1125;
  v1124 = 0uLL;
  v1298 = v1129;
  v1296 = v1127;
  v1297 = v1128;
  v1125 = 0;
  v1127 = 0uLL;
  v1128 = 0;
  v1301 = v1132;
  v1299 = v1130;
  v1300 = v1131;
  v1130 = 0uLL;
  v1304 = v1135;
  v1302 = v1133;
  v1303 = v1134;
  v1131 = 0;
  v1133 = 0uLL;
  v1134 = 0;
  v1305 = v1136;
  v1308 = v1139;
  v1306 = v1137;
  v1307 = v1138;
  v1137 = 0uLL;
  v1309 = v1140;
  v1312 = v1143;
  v1310 = v1141;
  v1311 = v1142;
  v1138 = 0;
  v1141 = 0uLL;
  v1142 = 0;
  v1313 = v1144;
  LOBYTE(v1314) = 0;
  v1318 = 0;
  if (v1149)
  {
    v1315 = v1146;
    v1314 = v1145;
    v1316 = v1147;
    v1317 = v1148;
    v1318 = 1;
  }
  sub_2241498F4((uint64_t)&v1072, 0);
  v1319[0] = 16;
  v1322 = v1074;
  v1321 = v1073;
  v1325 = v1077;
  v1324 = v1076;
  v1326 = v1078;
  v1329 = v1081;
  v1320 = v1072;
  v1072 = 0uLL;
  v1323 = v1075;
  v1073 = 0;
  v1075 = 0uLL;
  v1076 = 0;
  v1327 = v1079;
  v1328 = v1080;
  v1079 = 0uLL;
  v1330 = v1082;
  v1333 = v1085;
  v1331 = v1083;
  v1332 = v1084;
  v1080 = 0;
  v1083 = 0uLL;
  v1084 = 0;
  v1336 = v1088;
  v1334 = v1086;
  v1335 = v1087;
  v1086 = 0uLL;
  v1339 = v1091;
  v1337 = v1089;
  v1338 = v1090;
  v1087 = 0;
  v1089 = 0uLL;
  v1090 = 0;
  v1342 = v1094;
  v1340 = v1092;
  v1341 = v1093;
  v1092 = 0uLL;
  v1345 = v1097;
  v1343 = v1095;
  v1344 = v1096;
  v1093 = 0;
  v1095 = 0uLL;
  v1096 = 0;
  v1346 = v1098;
  v1349 = v1101;
  v1347 = v1099;
  v1348 = v1100;
  v1099 = 0;
  v1100 = 0uLL;
  v1350 = v1102;
  v1353 = v1105;
  v1351 = v1103;
  v1352 = v1104;
  v1103 = 0uLL;
  v1104 = 0;
  v1354 = v1106;
  LOBYTE(v1355) = 0;
  v1359 = 0;
  if (v1111)
  {
    v1356 = v1108;
    v1355 = v1107;
    v1357 = v1109;
    v1358 = v1110;
    v1359 = 1;
  }
  v1036 = 0;
  v1035 = 0;
  v1034 = (uint64_t *)&v1035;
  sub_2238E86E8((uint64_t *)&v1034, (uint64_t *)&v1035, __p[0], __p);
  sub_2238E86E8((uint64_t *)&v1034, (uint64_t *)&v1035, v1238[0], v1238);
  sub_2238E86E8((uint64_t *)&v1034, (uint64_t *)&v1035, v1279[0], v1279);
  sub_2238E86E8((uint64_t *)&v1034, (uint64_t *)&v1035, v1319[0], v1319);
  sub_22316F8F4((uint64_t *)&v1320);
  sub_22316F8F4((uint64_t *)&v1280);
  sub_22316F8F4((uint64_t *)&v1239);
  sub_22316F8F4((uint64_t *)&__p[8]);
  sub_22316F8F4((uint64_t *)&v1072);
  sub_22316F8F4((uint64_t *)&v1112);
  sub_22316F8F4((uint64_t *)__dst);
  sub_22316F8F4((uint64_t *)&v1150[8]);
  sub_22316F8F4((uint64_t *)v990);
  v20 = v1040;
  v21 = v1035;
  if (!v1035)
    goto LABEL_1706;
  v22 = &v1035;
  do
  {
    v23 = v21;
    v24 = v22;
    v25 = *((unsigned __int8 *)v21 + 32);
    if (v25 >= v1040)
      v22 = (uint64_t **)v21;
    else
      ++v21;
    v21 = (uint64_t *)*v21;
  }
  while (v21);
  if (v22 == &v1035)
    goto LABEL_1706;
  if (v25 < v1040)
    v23 = (uint64_t *)v24;
  if (v1040 < *((unsigned __int8 *)v23 + 32))
  {
LABEL_1706:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 658, (uint64_t)"it != global_pointclouds.end()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1670;
    }
  }
  v26 = v1038;
  if (!v1038)
    goto LABEL_1705;
  v27 = &v1038;
  do
  {
    v28 = v26;
    v29 = v27;
    v30 = *((unsigned __int8 *)v26 + 32);
    v31 = (uint64_t **)(v26 + 1);
    if (v30 >= v20)
    {
      v31 = (uint64_t **)v28;
      v27 = (uint64_t **)v28;
    }
    v26 = *v31;
  }
  while (v26);
  if (v27 == &v1038)
    goto LABEL_1705;
  if (v30 < v20)
    v28 = (uint64_t *)v29;
  if (v20 < *((unsigned __int8 *)v28 + 32))
  {
LABEL_1705:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 662, (uint64_t)"it != prefix_for_modality.end()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_1671:
      abort();
    }
  }
  v32 = BYTE1(v1040);
  v33 = v1035;
  if (!v1035)
    goto LABEL_161;
  v34 = &v1035;
  do
  {
    v35 = v33;
    v36 = v34;
    v37 = *((unsigned __int8 *)v33 + 32);
    v38 = (uint64_t **)(v33 + 1);
    if (v37 >= BYTE1(v1040))
    {
      v38 = (uint64_t **)v35;
      v34 = (uint64_t **)v35;
    }
    v33 = *v38;
  }
  while (v33);
  if (v34 == &v1035)
    goto LABEL_161;
  if (v37 < BYTE1(v1040))
    v35 = (uint64_t *)v36;
  if (BYTE1(v1040) < *((unsigned __int8 *)v35 + 32))
  {
LABEL_161:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 658, (uint64_t)"it != global_pointclouds.end()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_1670:
      abort();
    }
  }
  v39 = v1038;
  if (!v1038)
    goto LABEL_171;
  v40 = &v1038;
  do
  {
    v41 = v39;
    v42 = v40;
    v43 = *((unsigned __int8 *)v39 + 32);
    v44 = (uint64_t **)(v39 + 1);
    if (v43 >= v32)
    {
      v44 = (uint64_t **)v41;
      v40 = (uint64_t **)v41;
    }
    v39 = *v44;
  }
  while (v39);
  if (v40 == &v1038)
    goto LABEL_171;
  if (v43 < v32)
    v41 = (uint64_t *)v42;
  if (v32 < *((unsigned __int8 *)v41 + 32))
  {
LABEL_171:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 662, (uint64_t)"it != prefix_for_modality.end()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1671;
    }
  }
  v45 = BYTE2(v1040);
  v46 = v1035;
  if (!v1035)
    goto LABEL_181;
  v47 = &v1035;
  do
  {
    v48 = v46;
    v49 = v47;
    v50 = *((unsigned __int8 *)v46 + 32);
    v51 = (uint64_t **)(v46 + 1);
    if (v50 >= BYTE2(v1040))
    {
      v51 = (uint64_t **)v48;
      v47 = (uint64_t **)v48;
    }
    v46 = *v51;
  }
  while (v46);
  if (v47 == &v1035)
    goto LABEL_181;
  if (v50 < BYTE2(v1040))
    v48 = (uint64_t *)v49;
  if (BYTE2(v1040) < *((unsigned __int8 *)v48 + 32))
  {
LABEL_181:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 658, (uint64_t)"it != global_pointclouds.end()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1670;
    }
  }
  v52 = v1038;
  if (!v1038)
    goto LABEL_191;
  v53 = &v1038;
  do
  {
    v54 = v52;
    v55 = v53;
    v56 = *((unsigned __int8 *)v52 + 32);
    v57 = (uint64_t **)(v52 + 1);
    if (v56 >= v45)
    {
      v57 = (uint64_t **)v54;
      v53 = (uint64_t **)v54;
    }
    v52 = *v57;
  }
  while (v52);
  if (v53 == &v1038)
    goto LABEL_191;
  if (v56 < v45)
    v54 = (uint64_t *)v55;
  if (v45 < *((unsigned __int8 *)v54 + 32))
  {
LABEL_191:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 662, (uint64_t)"it != prefix_for_modality.end()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1671;
    }
  }
  v58 = HIBYTE(v1040);
  v59 = v1035;
  if (!v1035)
    goto LABEL_201;
  v60 = &v1035;
  do
  {
    v61 = v59;
    v62 = v60;
    v63 = *((unsigned __int8 *)v59 + 32);
    v64 = (uint64_t **)(v59 + 1);
    if (v63 >= HIBYTE(v1040))
    {
      v64 = (uint64_t **)v61;
      v60 = (uint64_t **)v61;
    }
    v59 = *v64;
  }
  while (v59);
  if (v60 == &v1035)
    goto LABEL_201;
  if (v63 < HIBYTE(v1040))
    v61 = (uint64_t *)v62;
  if (HIBYTE(v1040) < *((unsigned __int8 *)v61 + 32))
  {
LABEL_201:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 658, (uint64_t)"it != global_pointclouds.end()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1670;
    }
  }
  v65 = v1038;
  if (!v1038)
    goto LABEL_211;
  v66 = &v1038;
  do
  {
    v67 = v65;
    v68 = v66;
    v69 = *((unsigned __int8 *)v65 + 32);
    v70 = (uint64_t **)(v65 + 1);
    if (v69 >= v58)
    {
      v70 = (uint64_t **)v67;
      v66 = (uint64_t **)v67;
    }
    v65 = *v70;
  }
  while (v65);
  if (v66 == &v1038)
    goto LABEL_211;
  if (v69 < v58)
    v67 = (uint64_t *)v68;
  if (v58 < *((unsigned __int8 *)v67 + 32))
  {
LABEL_211:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 662, (uint64_t)"it != prefix_for_modality.end()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1671;
    }
  }
  sub_223227930((uint64_t *)&v952);
  v71 = (uint64_t *)v915[2];
  v883 = v6;
  if (v71)
  {
    while (*((_BYTE *)v71 + 144) != 1)
    {
      v71 = (uint64_t *)*v71;
      if (!v71)
        goto LABEL_215;
    }
    v950 = 0;
    v949 = 0;
    v951 = 0;
    v221 = (uint64_t *)*v71;
    if (*v71)
    {
      v222 = 0;
      v223 = 1;
      do
      {
        v224 = v222;
        v222 = v223;
        while (*((_BYTE *)v221 + 144) != 1)
        {
          v221 = (uint64_t *)*v221;
          if (!v221)
            goto LABEL_512;
        }
        ++v223;
        v221 = (uint64_t *)*v221;
        v224 = v222;
      }
      while (v221);
LABEL_512:
      if (v224 >= 0xFFFFFFFFFFFFFFFLL)
        sub_22316E078();
    }
    else
    {
      v223 = 1;
    }
    v225 = (uint64_t *)operator new(16 * v223);
    v949 = v225;
    v951 = &v225[2 * v223];
    *(_OWORD *)v225 = *((_OWORD *)v71 + 2);
    v226 = (uint64_t *)*v71;
    if (*v71)
    {
      do
      {
        while (*((_BYTE *)v226 + 144) != 1)
        {
          v226 = (uint64_t *)*v226;
          if (!v226)
            goto LABEL_520;
        }
        *((_OWORD *)v225 + 1) = *((_OWORD *)v226 + 2);
        v225 += 2;
        v226 = (uint64_t *)*v226;
      }
      while (v226);
    }
LABEL_520:
    v950 = v225 + 2;
  }
  else
  {
LABEL_215:
    v950 = 0;
    v949 = 0;
    v951 = 0;
  }
  sub_2238231AC(v915, (unint64_t *)&v949);
  v947 = 0;
  v946 = 0;
  v948 = 0;
  v227 = (uint64_t *)v949;
  v866 = v950;
  if (v949 != v950)
  {
    v871 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v228 = 1;
    while (1)
    {
      v881 = (float32x2_t *)sub_22381AF00(v915, *v227, v227[1]);
      v229 = *(_QWORD *)(v914 + 24);
      if (!v229)
        sub_223198474();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v229 + 48))(&v944, v229, v227);
      v230 = v944;
      v869 = (unsigned __int8 *)v227;
      if (!v944)
        break;
      v868 = v944;
      if ((v228 & 1) != 0)
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v923 + 376))(__p, v923, &v1047, 16);
        if (!*(_QWORD *)&__p[8])
        {
          sub_2238DC118((uint64_t)v1150, (uint64_t)&v1047);
          if (v1150[23] >= 0)
            v858 = v1150;
          else
            v858 = *(_BYTE **)v1150;
          if (v1150[23] >= 0)
            v859 = v1150[23];
          else
            v859 = *(_QWORD *)&v1150[8];
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 700, (uint64_t)"", 0, (uint64_t)v858, v859, (void (*)(void **))sub_22457406C);
          if ((v1150[23] & 0x80000000) != 0)
            operator delete(*(void **)v1150);
          abort();
        }
        sub_2231D0224(v230);
        sub_2231D020C(v230);
        sub_2231D0214(v230);
        (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        std::ostream::operator<<();
        v231 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        sub_2231813E8(v231, (uint64_t)" ", 1);
        (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        std::ostream::operator<<();
        v232 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        sub_2231813E8(v232, (uint64_t)" ", 1);
        (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        std::ostream::operator<<();
        v233 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        sub_2231813E8(v233, (uint64_t)" ", 1);
        (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        std::ostream::operator<<();
        v234 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        sub_2231813E8(v234, (uint64_t)" ", 1);
        (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        std::ostream::operator<<();
        v235 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        sub_2231813E8(v235, (uint64_t)" ", 1);
        (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
        std::ostream::operator<<();
        sub_2242BB4F8((uint64_t)__p);
        v230 = v868;
      }
      v236 = (uint64_t)v881[10];
      v1150[23] = 0;
      v1150[0] = 0;
      HIBYTE(v990[2]) = 4;
      strcpy((char *)v990, ".png");
      sub_2238DC200((std::string *)__p, (const void **)v1150, (uint64_t)v990);
      v237 = (double)v236;
      if (__p[23] >= 0)
        v238 = __p;
      else
        v238 = *(char **)__p;
      v239 = v237 / 1000000000.0;
      sub_22456D250(v238, &v943, v237 / 1000000000.0, *(_QWORD *)&v865);
      v240 = (uint64_t)__s;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v990[2]) < 0)
        operator delete(v990[0]);
      v1150[23] = 0;
      v1150[0] = 0;
      HIBYTE(v990[2]) = 5;
      strcpy((char *)v990, ".tiff");
      sub_2238DC200((std::string *)__p, (const void **)v1150, (uint64_t)v990);
      if (__p[23] >= 0)
        v241 = __p;
      else
        v241 = *(char **)__p;
      sub_22456D250(v241, &v942, *(_QWORD *)&v239);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v990[2]) < 0)
        operator delete(v990[0]);
      v941 = v923;
      sub_2231D3D90(v230, (uint64_t)&v1072);
      sub_2231D4288(v230, (uint64_t)&v931);
      v990[0] = &off_24EC216B8;
      sub_2231FF60C(&v935, &v990[1]);
      v242 = v932;
      if (!v932)
        goto LABEL_558;
      v243 = v933;
      if (v933)
      {
        v244 = (unint64_t *)&v933->__shared_owners_;
        do
          v245 = __ldxr(v244);
        while (__stxr(v245 + 1, v244));
        do
          v246 = __ldaxr(v244);
        while (__stlxr(v246 - 1, v244));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
          std::__shared_weak_count::__release_weak(v243);
        }
        v247 = v933;
        v242 = v932;
        if (v933)
        {
          v248 = (unint64_t *)&v933->__shared_owners_;
          do
            v249 = __ldxr(v248);
          while (__stxr(v249 + 1, v248));
          do
            v250 = __ldaxr(v248);
          while (__stlxr(v250 - 1, v248));
          if (!v250)
          {
            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
            std::__shared_weak_count::__release_weak(v247);
          }
        }
      }
      if (v940)
        (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v242 + 96))(__p, v242, 0);
      else
LABEL_558:
        *(_QWORD *)__p = 0;
      v251 = v990[1];
      v252 = (std::__shared_weak_count *)v990[2];
      if (v990[2])
      {
        v253 = (unint64_t *)((char *)v990[2] + 8);
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
        do
          v255 = __ldaxr(v253);
        while (__stlxr(v255 - 1, v253));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
      }
      if (v251 && BYTE9(v995))
        (*(void (**)(_BYTE *__return_ptr, void *, uint64_t))(*(_QWORD *)v990[1] + 96))(v1150, v990[1], 1);
      else
        *(_QWORD *)v1150 = 0;
      v256 = v935;
      if (!v935)
        goto LABEL_645;
      v257 = v936;
      if (!v936)
        goto LABEL_645;
      v258 = v937;
      v259 = v938;
      v260 = v995;
      v261 = DWORD1(v995);
      v262 = v934;
      if (v939 && v934)
      {
        v263 = v932;
        v264 = v933;
        if (v933)
        {
          v265 = (unint64_t *)&v933->__shared_owners_;
          do
            v266 = __ldxr(v265);
          while (__stxr(v266 + 1, v265));
          do
            v267 = __ldaxr(v265);
          while (__stlxr(v267 - 1, v265));
          if (!v267)
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v264);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v263 + 88))(v263, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v262 = v934;
      }
      v268 = *(int **)&v991[8];
      if (BYTE8(v995) && *(_QWORD *)&v991[8])
      {
        (*(void (**)(void *, uint64_t, const char *))(*(_QWORD *)v990[1] + 88))(v990[1], 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v268 = *(int **)&v991[8];
      }
      v269 = v256 - 1;
      v270 = v257 - 1;
      if (v257 == 1)
      {
        v240 = (uint64_t)__s;
        goto LABEL_620;
      }
      v271 = 2 * v259;
      v272 = 4 * v261;
      if (v256 == 1)
      {
        v240 = (uint64_t)__s;
        v230 = v868;
        while (1)
        {
          while (1)
          {
            _H0 = *v262;
            __asm { FCVT            S0, H0 }
            if (_S0 > 0.0)
              break;
            v449 = 1008984064;
LABEL_887:
            *v268 = v449;
            v262 = (__int16 *)((char *)v262 + v271);
            v268 = (int *)((char *)v268 + v272);
            if (!--v270)
              goto LABEL_634;
          }
          if (_S0 >= 1.0)
          {
            v449 = 953270272;
            goto LABEL_887;
          }
          _S0 = _S0 * -0.090027;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          HIWORD(v454) = 15820;
          _S0 = _S0 + 0.099976;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          _S0 = _S0 * _S0;
          __asm
          {
            FCVT            H0, S0
            FCVT            S2, H0
          }
          if (_S2 > 0.010002)
          {
            LOWORD(v454) = 8479;
            _S0 = v454;
          }
          LOWORD(v454) = 1678;
          if (_S2 < 0.00010002)
            _S0 = v454;
          __asm { FCVT            S0, H0 }
          *v268 = _S0;
          v262 = (__int16 *)((char *)v262 + v271);
          v268 = (int *)((char *)v268 + v272);
          if (!--v270)
            goto LABEL_634;
        }
      }
      v273 = 0;
      v274 = 2 * v258;
      v275 = 4 * v260;
      v240 = (uint64_t)__s;
      do
      {
LABEL_588:
        v277 = v268;
        v278 = v262;
        v279 = v256 - 1;
        do
        {
          while (1)
          {
            _H0 = *v278;
            __asm { FCVT            S0, H0 }
            if (_S0 > 0.0)
              break;
            v280 = 1008984064;
LABEL_590:
            *v277 = v280;
            v278 = (__int16 *)((char *)v278 + v274);
            v277 = (int *)((char *)v277 + v275);
            if (!--v279)
              goto LABEL_600;
          }
          if (_S0 >= 1.0)
          {
            v280 = 953270272;
            goto LABEL_590;
          }
          _S0 = _S0 * -0.090027;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          HIWORD(v288) = 15820;
          _S0 = _S0 + 0.099976;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          _S0 = _S0 * _S0;
          __asm
          {
            FCVT            H0, S0
            FCVT            S2, H0
          }
          if (_S2 > 0.010002)
          {
            LOWORD(v288) = 8479;
            _S0 = v288;
          }
          LOWORD(v288) = 1678;
          if (_S2 < 0.00010002)
            _S0 = v288;
          __asm { FCVT            S0, H0 }
          *v277 = _S0;
          v278 = (__int16 *)((char *)v278 + v274);
          v277 = (int *)((char *)v277 + v275);
          --v279;
        }
        while (v279);
LABEL_600:
        _H0 = *v278;
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0)
        {
          v276 = 1008984064;
          goto LABEL_587;
        }
        if (_S0 >= 1.0)
        {
          v276 = 953270272;
LABEL_587:
          *v277 = v276;
          v262 = (__int16 *)((char *)v262 + v271);
          v268 = (int *)((char *)v268 + v272);
          if (++v273 == v270)
            break;
          goto LABEL_588;
        }
        _S0 = _S0 * -0.090027;
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        HIWORD(v298) = 15820;
        _S0 = _S0 + 0.099976;
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        _S0 = _S0 * _S0;
        __asm
        {
          FCVT            H0, S0
          FCVT            S2, H0
        }
        if (_S2 > 0.010002)
        {
          LOWORD(v298) = 8479;
          _S0 = v298;
        }
        LOWORD(v298) = 1678;
        if (_S2 < 0.00010002)
          _S0 = v298;
        __asm { FCVT            S0, H0 }
        *v277 = _S0;
        v262 = (__int16 *)((char *)v262 + v271);
        v268 = (int *)((char *)v268 + v272);
        ++v273;
      }
      while (v273 != v270);
LABEL_620:
      if (v256 != 1)
      {
        v316 = 2 * v258;
        v317 = 4 * v260;
        v230 = v868;
        while (1)
        {
          while (1)
          {
            _H0 = *v262;
            __asm { FCVT            S0, H0 }
            if (_S0 > 0.0)
              break;
            v318 = 1008984064;
LABEL_623:
            *v268 = v318;
            v262 = (__int16 *)((char *)v262 + v316);
            v268 = (int *)((char *)v268 + v317);
            if (!--v269)
              goto LABEL_634;
          }
          if (_S0 >= 1.0)
          {
            v318 = 953270272;
            goto LABEL_623;
          }
          _S0 = _S0 * -0.090027;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          HIWORD(v323) = 15820;
          _S0 = _S0 + 0.099976;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          _S0 = _S0 * _S0;
          __asm
          {
            FCVT            H0, S0
            FCVT            S2, H0
          }
          if (_S2 > 0.010002)
          {
            LOWORD(v323) = 8479;
            _S0 = v323;
          }
          LOWORD(v323) = 1678;
          if (_S2 < 0.00010002)
            _S0 = v323;
          __asm { FCVT            S0, H0 }
          *v268 = _S0;
          v262 = (__int16 *)((char *)v262 + v316);
          v268 = (int *)((char *)v268 + v317);
          if (!--v269)
            goto LABEL_634;
        }
      }
      v230 = v868;
LABEL_634:
      _H0 = *v262;
      __asm { FCVT            S0, H0 }
      if (_S0 <= 0.0)
      {
        v339 = 1008984064;
LABEL_643:
        _S0 = v339;
        goto LABEL_644;
      }
      if (_S0 >= 1.0)
      {
        v339 = 953270272;
        goto LABEL_643;
      }
      _S0 = _S0 * -0.090027;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      HIWORD(v333) = 15820;
      _S0 = _S0 + 0.099976;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      _S0 = _S0 * _S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S2, H0
      }
      if (_S2 > 0.010002)
      {
        LOWORD(v333) = 8479;
        _S0 = v333;
      }
      LOWORD(v333) = 1678;
      if (_S2 < 0.00010002)
        _S0 = v333;
      __asm { FCVT            S0, H0 }
LABEL_644:
      *v268 = _S0;
LABEL_645:
      v340 = *(_QWORD *)v1150;
      *(_QWORD *)v1150 = 0;
      if (v340)
        (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
      v341 = *(_QWORD *)__p;
      *(_QWORD *)__p = 0;
      if (v341)
        (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
      memset(v1150, 0, 24);
      size = HIBYTE(v942.__r_.__value_.__r.__words[2]);
      if ((v942.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v343 = &v942;
      else
        v343 = (std::string *)v942.__r_.__value_.__r.__words[0];
      if ((v942.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v942.__r_.__value_.__l.__size_;
      sub_2231816F0((std::string *)v1150, v343, (std::string *)((char *)v343 + size));
      if (SHIBYTE(v1064) < 0)
      {
        sub_223197FA4(__p, (void *)v1063, *((unint64_t *)&v1063 + 1));
      }
      else
      {
        *(_OWORD *)__p = v1063;
        *(_QWORD *)&__p[16] = v1064;
      }
      sub_22319C30C((uint64_t)__p, (std::__fs::filesystem::path *)v1150);
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_223197FA4(v929, *(void **)__p, *(unint64_t *)&__p[8]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else
      {
        *(_OWORD *)v929 = *(_OWORD *)__p;
        v930 = *(_QWORD *)&__p[16];
      }
      if ((v1150[23] & 0x80000000) != 0)
        operator delete(*(void **)v1150);
      memset(v1150, 0, 24);
      v344 = (char *)HIBYTE(v930);
      if (v930 >= 0)
        v345 = (std::string *)v929;
      else
        v345 = (std::string *)v929[0];
      if (v930 < 0)
        v344 = (char *)v929[1];
      sub_2231816F0((std::string *)v1150, v345, (std::string *)&v344[(_QWORD)v345]);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v941 + 376))(__p, v941, v1150, 16);
      if ((v1150[23] & 0x80000000) != 0)
        operator delete(*(void **)v1150);
      v346 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      sub_2238E6808((uint64_t)&v1072, v346);
      sub_2242BB4F8((uint64_t)__p);
      memset(v1150, 0, 24);
      v347 = HIBYTE(v942.__r_.__value_.__r.__words[2]);
      if ((v942.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v348 = &v942;
      else
        v348 = (std::string *)v942.__r_.__value_.__r.__words[0];
      if ((v942.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v347 = v942.__r_.__value_.__l.__size_;
      sub_2231816F0((std::string *)v1150, v348, (std::string *)((char *)v348 + v347));
      if (SHIBYTE(v1062) < 0)
      {
        sub_223197FA4(__p, (void *)v1061, *((unint64_t *)&v1061 + 1));
      }
      else
      {
        *(_OWORD *)__p = v1061;
        *(_QWORD *)&__p[16] = v1062;
      }
      sub_22319C30C((uint64_t)__p, (std::__fs::filesystem::path *)v1150);
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_223197FA4(v927, *(void **)__p, *(unint64_t *)&__p[8]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else
      {
        *(_OWORD *)v927 = *(_OWORD *)__p;
        v928 = *(_QWORD *)&__p[16];
      }
      if ((v1150[23] & 0x80000000) != 0)
        operator delete(*(void **)v1150);
      memset(v1150, 0, 24);
      v349 = (char *)HIBYTE(v928);
      if (v928 >= 0)
        v350 = (std::string *)v927;
      else
        v350 = (std::string *)v927[0];
      if (v928 < 0)
        v349 = (char *)v927[1];
      sub_2231816F0((std::string *)v1150, v350, (std::string *)&v349[(_QWORD)v350]);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v941 + 376))(__p, v941, v1150, 16);
      if ((v1150[23] & 0x80000000) != 0)
        operator delete(*(void **)v1150);
      v351 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      sub_2238E6C7C((uint64_t)v990, v351);
      sub_2242BB4F8((uint64_t)__p);
      if (sub_22321D244(v240, 1))
      {
        sub_2231D494C(v230, (uint64_t)__p);
        sub_2238E8BCC((uint64_t *)v1150, (uint64_t)v1197);
        sub_2238E9F04(&__src, *(uint64_t *)v1150);
        v352 = *(std::__shared_weak_count **)&v1150[8];
        if (*(_QWORD *)&v1150[8])
        {
          v353 = (unint64_t *)(*(_QWORD *)&v1150[8] + 8);
          do
            v354 = __ldaxr(v353);
          while (__stlxr(v354 - 1, v353));
          if (!v354)
          {
            ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
            std::__shared_weak_count::__release_weak(v352);
          }
        }
        sub_2238E8BCC((uint64_t *)v1150, (uint64_t)v1197);
        sub_2238E9F04(v1068, *(uint64_t *)v1150);
        v355 = *(std::__shared_weak_count **)&v1150[8];
        if (*(_QWORD *)&v1150[8])
        {
          v356 = (unint64_t *)(*(_QWORD *)&v1150[8] + 8);
          do
            v357 = __ldaxr(v356);
          while (__stlxr(v357 - 1, v356));
          if (!v357)
          {
            ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
            std::__shared_weak_count::__release_weak(v355);
          }
        }
        v879 = HIDWORD(v1197);
        if (HIDWORD(v1197))
        {
          v885 = 0;
          v872 = __src.__r_.__value_.__r.__words[0];
          v870 = v1068[0];
          do
          {
            v358 = v1197;
            if ((_DWORD)v1197)
            {
              v359 = *(unsigned int *)&__p[48];
              v893 = *(_DWORD *)(v872 + 104);
              v360 = *(_QWORD *)(v872 + 32);
              v903 = v360 + (*(_DWORD *)(v872 + 124) * v885);
              v908 = *(_QWORD *)&__p[24] + 2 * (HIDWORD(v1198) * v885);
              v890 = *((unsigned int *)v870 + 26);
              v897 = v870[4];
              v888 = v897 + (*((_DWORD *)v870 + 31) * v885);
              v361 = 0;
              v362 = 0;
              v363 = 0;
              if (v360)
              {
                while (1)
                {
                  v364 = (unsigned __int8 *)(v908 + 2 * v361);
                  *(_DWORD *)(v903 + v362) = (*((unsigned __int16 *)v364 + 2) << 8) & 0xFF0000 | (HIBYTE(*((_WORD *)v364 + 3)) << 24) | (v364[3] << 8) | v364[1];
                  v365 = *v364;
                  v366 = *((_WORD *)v364 + 1);
                  v367 = v364[4];
                  v368 = v364[6];
                  if (!v897
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    break;
                  }
                  *(_DWORD *)(v888 + v363) = (v367 << 16) | (v368 << 24) | (v366 << 8) | v365;
                  v363 += v890;
                  v362 += v893;
                  v361 += v359;
                  if (!--v358)
                    goto LABEL_704;
                }
              }
              else
              {
                while (1)
                {
                  v369 = v359;
                  v370 = (unsigned __int8 *)(v908 + 2 * v361);
                  v371 = v370[1];
                  v372 = v370[3];
                  v373 = v370[5];
                  v374 = v370[7];
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  *(_DWORD *)(v903 + v362) = (v373 << 16) | (v374 << 24) | (v372 << 8) | v371;
                  v375 = *v370;
                  v376 = *((_WORD *)v370 + 1);
                  v377 = v370[4];
                  v378 = v370[6];
                  v359 = v369;
                  v6 = v883;
                  if (!v897
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    break;
                  }
                  *(_DWORD *)(v888 + v363) = (v377 << 16) | (v378 << 24) | (v376 << 8) | v375;
                  v363 += v890;
                  v362 += v893;
                  v361 += v359;
                  if (!--v358)
                    goto LABEL_704;
                }
              }
              abort();
            }
LABEL_704:
            ++v885;
          }
          while (v885 != v879);
        }
        memset(&v1112, 0, sizeof(v1112));
        v379 = HIBYTE(v943.__r_.__value_.__r.__words[2]);
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v380 = &v943;
        else
          v380 = (std::string *)v943.__r_.__value_.__r.__words[0];
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v379 = v943.__r_.__value_.__l.__size_;
        sub_2231816F0(&v1112, v380, (std::string *)((char *)v380 + v379));
        v240 = (uint64_t)__s;
        v230 = v868;
        if (SHIBYTE(v1060) < 0)
        {
          sub_223197FA4(__dst, (void *)v1059, *((unint64_t *)&v1059 + 1));
        }
        else
        {
          *(_OWORD *)__dst = v1059;
          *(_QWORD *)&__dst[16] = v1060;
        }
        sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)&v1112);
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_223197FA4(v1150, *(void **)__dst, *(unint64_t *)&__dst[8]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        else
        {
          *(_OWORD *)v1150 = *(_OWORD *)__dst;
          *(_QWORD *)&v1150[16] = *(_QWORD *)&__dst[16];
        }
        if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1112.__r_.__value_.__l.__data_);
        *(_DWORD *)__dst = 3;
        sub_2238DC350(&v941, (uint64_t)__src.__r_.__value_.__l.__data_, (uint64_t)v1150, (int *)__dst);
        memset(&v1065, 0, sizeof(v1065));
        v381 = HIBYTE(v943.__r_.__value_.__r.__words[2]);
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v382 = &v943;
        else
          v382 = (std::string *)v943.__r_.__value_.__r.__words[0];
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v381 = v943.__r_.__value_.__l.__size_;
        sub_2231816F0(&v1065, v382, (std::string *)((char *)v382 + v381));
        if (SHIBYTE(v1058.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1112, v1058.__r_.__value_.__l.__data_, v1058.__r_.__value_.__l.__size_);
        else
          v1112 = v1058;
        sub_22319C30C((uint64_t)&v1112, (std::__fs::filesystem::path *)&v1065);
        if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(__dst, v1112.__r_.__value_.__l.__data_, v1112.__r_.__value_.__l.__size_);
          if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1112.__r_.__value_.__l.__data_);
        }
        else
        {
          *(std::string *)__dst = v1112;
        }
        if (SHIBYTE(v1065.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1065.__r_.__value_.__l.__data_);
        LODWORD(v1112.__r_.__value_.__l.__data_) = 3;
        sub_2238DC350(&v941, (uint64_t)v1068[0], (uint64_t)__dst, (int *)&v1112);
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if ((v1150[23] & 0x80000000) != 0)
            goto LABEL_750;
LABEL_747:
          v383 = (std::__shared_weak_count *)v1068[1];
          if (v1068[1])
          {
LABEL_751:
            v384 = (unint64_t *)&v383->__shared_owners_;
            do
              v385 = __ldaxr(v384);
            while (__stlxr(v385 - 1, v384));
            if (!v385)
            {
              ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
              std::__shared_weak_count::__release_weak(v383);
            }
          }
        }
        else
        {
          if ((v1150[23] & 0x80000000) == 0)
            goto LABEL_747;
LABEL_750:
          operator delete(*(void **)v1150);
          v383 = (std::__shared_weak_count *)v1068[1];
          if (v1068[1])
            goto LABEL_751;
        }
        v386 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
        if (__src.__r_.__value_.__l.__size_)
        {
          v387 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
          do
            v388 = __ldaxr(v387);
          while (__stlxr(v388 - 1, v387));
          if (!v388)
          {
            ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
            std::__shared_weak_count::__release_weak(v386);
          }
        }
        v389 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v390 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v391 = __ldaxr(v390);
          while (__stlxr(v391 - 1, v390));
          if (!v391)
          {
            ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
            std::__shared_weak_count::__release_weak(v389);
          }
        }
      }
      if (sub_22321D244(v240, 16))
      {
        sub_2231D4E60(v230, (uint64_t)__p);
        sub_2238E8BCC((uint64_t *)v1150, (uint64_t)v1197);
        sub_2238E9F04(&__src, *(uint64_t *)v1150);
        v392 = *(std::__shared_weak_count **)&v1150[8];
        if (*(_QWORD *)&v1150[8])
        {
          v393 = (unint64_t *)(*(_QWORD *)&v1150[8] + 8);
          do
            v394 = __ldaxr(v393);
          while (__stlxr(v394 - 1, v393));
          if (!v394)
          {
            ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
            std::__shared_weak_count::__release_weak(v392);
          }
        }
        sub_2238E8BCC((uint64_t *)v1150, (uint64_t)v1197);
        sub_2238E9F04(v1068, *(uint64_t *)v1150);
        v395 = *(std::__shared_weak_count **)&v1150[8];
        if (*(_QWORD *)&v1150[8])
        {
          v396 = (unint64_t *)(*(_QWORD *)&v1150[8] + 8);
          do
            v397 = __ldaxr(v396);
          while (__stlxr(v397 - 1, v396));
          if (!v397)
          {
            ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
            std::__shared_weak_count::__release_weak(v395);
          }
        }
        *(_QWORD *)v1150 = &off_24EC23AB0;
        sub_2238EB37C((uint64_t)__src.__r_.__value_.__l.__data_, (uint64_t *)&v1150[8]);
        *(_QWORD *)__dst = &off_24EC23AB0;
        sub_2238EB37C((uint64_t)v1068[0], (uint64_t *)&__dst[8]);
        v873 = HIDWORD(v1197);
        if (HIDWORD(v1197) && (_DWORD)v1197)
        {
          v880 = 0;
          do
          {
            v398 = v1197;
            if ((_DWORD)v1197)
            {
              v894 = *(_DWORD *)&__p[48];
              v891 = DWORD2(v1152);
              v904 = *(_QWORD *)&v1150[24];
              v909 = *(_QWORD *)&__p[24] + 2 * (HIDWORD(v1198) * v880);
              v889 = *(_QWORD *)&v1150[24] + (HIDWORD(v1154) * v880);
              v886 = (int)v954;
              v898 = *(_QWORD *)&__dst[24] + (HIDWORD(v956) * v880);
              v399 = 0;
              v400 = 0;
              v401 = 0;
              if (*(_QWORD *)&__dst[24])
              {
                while (1)
                {
                  v402 = (unsigned __int8 *)(v909 + 2 * v399);
                  *(_DWORD *)(v898 + v400) = (v402[4] << 16) | (*((unsigned __int16 *)v402 + 3) << 24) | (*((_WORD *)v402 + 1) << 8) | *v402;
                  v403 = v402[1];
                  v404 = v402[3];
                  v405 = v402[5];
                  v406 = v402[7];
                  if (!v904
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    break;
                  }
                  *(_DWORD *)(v889 + v401) = (v405 << 16) | (v406 << 24) | (v404 << 8) | v403;
                  v401 += v891;
                  v400 += v886;
                  v399 += v894;
                  if (!--v398)
                    goto LABEL_779;
                }
              }
              else
              {
                while (1)
                {
                  v407 = (unsigned __int8 *)(v909 + 2 * v399);
                  v408 = *v407;
                  v409 = *((_WORD *)v407 + 1);
                  v410 = v407[4];
                  v411 = v407[6];
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    break;
                  }
                  *(_DWORD *)(v898 + v400) = (v410 << 16) | (v411 << 24) | (v409 << 8) | v408;
                  v412 = v407[1];
                  v413 = v407[3];
                  v414 = v407[5];
                  v415 = v407[7];
                  if (!v904
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    break;
                  }
                  *(_DWORD *)(v889 + v401) = (v414 << 16) | (v415 << 24) | (v413 << 8) | v412;
                  v401 += v891;
                  v400 += v886;
                  v399 += v894;
                  if (!--v398)
                    goto LABEL_779;
                }
              }
              abort();
            }
LABEL_779:
            ++v880;
          }
          while (v880 != v873);
        }
        v416 = *(std::__shared_weak_count **)&__dst[16];
        v240 = (uint64_t)__s;
        if (*(_QWORD *)&__dst[16])
        {
          v417 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v418 = __ldaxr(v417);
          while (__stlxr(v418 - 1, v417));
          if (!v418)
          {
            ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
            std::__shared_weak_count::__release_weak(v416);
          }
        }
        v419 = *(std::__shared_weak_count **)&v1150[16];
        if (*(_QWORD *)&v1150[16])
        {
          v420 = (unint64_t *)(*(_QWORD *)&v1150[16] + 8);
          do
            v421 = __ldaxr(v420);
          while (__stlxr(v421 - 1, v420));
          if (!v421)
          {
            ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
            std::__shared_weak_count::__release_weak(v419);
          }
        }
        memset(&v1112, 0, sizeof(v1112));
        v422 = HIBYTE(v943.__r_.__value_.__r.__words[2]);
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v423 = &v943;
        else
          v423 = (std::string *)v943.__r_.__value_.__r.__words[0];
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v422 = v943.__r_.__value_.__l.__size_;
        sub_2231816F0(&v1112, v423, (std::string *)((char *)v423 + v422));
        v230 = v868;
        if (SHIBYTE(v1057) < 0)
        {
          sub_223197FA4(__dst, (void *)v1056, *((unint64_t *)&v1056 + 1));
        }
        else
        {
          *(_OWORD *)__dst = v1056;
          *(_QWORD *)&__dst[16] = v1057;
        }
        sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)&v1112);
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_223197FA4(v1150, *(void **)__dst, *(unint64_t *)&__dst[8]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        else
        {
          *(_OWORD *)v1150 = *(_OWORD *)__dst;
          *(_QWORD *)&v1150[16] = *(_QWORD *)&__dst[16];
        }
        if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1112.__r_.__value_.__l.__data_);
        *(_DWORD *)__dst = 3;
        sub_2238DC350(&v941, (uint64_t)__src.__r_.__value_.__l.__data_, (uint64_t)v1150, (int *)__dst);
        memset(&v1065, 0, sizeof(v1065));
        v424 = HIBYTE(v943.__r_.__value_.__r.__words[2]);
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v425 = &v943;
        else
          v425 = (std::string *)v943.__r_.__value_.__r.__words[0];
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v424 = v943.__r_.__value_.__l.__size_;
        sub_2231816F0(&v1065, v425, (std::string *)((char *)v425 + v424));
        if (SHIBYTE(v1055.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1112, v1055.__r_.__value_.__l.__data_, v1055.__r_.__value_.__l.__size_);
        else
          v1112 = v1055;
        sub_22319C30C((uint64_t)&v1112, (std::__fs::filesystem::path *)&v1065);
        if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(__dst, v1112.__r_.__value_.__l.__data_, v1112.__r_.__value_.__l.__size_);
          if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1112.__r_.__value_.__l.__data_);
        }
        else
        {
          *(std::string *)__dst = v1112;
        }
        if (SHIBYTE(v1065.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1065.__r_.__value_.__l.__data_);
        LODWORD(v1112.__r_.__value_.__l.__data_) = 3;
        sub_2238DC350(&v941, (uint64_t)v1068[0], (uint64_t)__dst, (int *)&v1112);
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if ((v1150[23] & 0x80000000) != 0)
            goto LABEL_835;
LABEL_832:
          v426 = (std::__shared_weak_count *)v1068[1];
          if (v1068[1])
          {
LABEL_836:
            v427 = (unint64_t *)&v426->__shared_owners_;
            do
              v428 = __ldaxr(v427);
            while (__stlxr(v428 - 1, v427));
            if (!v428)
            {
              ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
              std::__shared_weak_count::__release_weak(v426);
            }
          }
        }
        else
        {
          if ((v1150[23] & 0x80000000) == 0)
            goto LABEL_832;
LABEL_835:
          operator delete(*(void **)v1150);
          v426 = (std::__shared_weak_count *)v1068[1];
          if (v1068[1])
            goto LABEL_836;
        }
        v429 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
        if (__src.__r_.__value_.__l.__size_)
        {
          v430 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
          do
            v431 = __ldaxr(v430);
          while (__stlxr(v431 - 1, v430));
          if (!v431)
          {
            ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
            std::__shared_weak_count::__release_weak(v429);
          }
        }
        v432 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v433 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v434 = __ldaxr(v433);
          while (__stlxr(v434 - 1, v433));
          if (!v434)
          {
            ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
            std::__shared_weak_count::__release_weak(v432);
          }
        }
      }
      if (sub_22321D244(v240, 4))
      {
        memset(v1150, 0, 24);
        v435 = HIBYTE(v943.__r_.__value_.__r.__words[2]);
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v436 = &v943;
        else
          v436 = (std::string *)v943.__r_.__value_.__r.__words[0];
        if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v435 = v943.__r_.__value_.__l.__size_;
        sub_2231816F0((std::string *)v1150, v436, (std::string *)((char *)v436 + v435));
        if (SHIBYTE(v1052) < 0)
        {
          sub_223197FA4(__p, (void *)v1051, *((unint64_t *)&v1051 + 1));
        }
        else
        {
          *(_OWORD *)__p = v1051;
          *(_QWORD *)&__p[16] = v1052;
        }
        sub_22319C30C((uint64_t)__p, (std::__fs::filesystem::path *)v1150);
        if ((__p[23] & 0x80000000) != 0)
        {
          sub_223197FA4(__dst, *(void **)__p, *(unint64_t *)&__p[8]);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)__p;
          *(_QWORD *)&__dst[16] = *(_QWORD *)&__p[16];
        }
        if ((v1150[23] & 0x80000000) != 0)
          operator delete(*(void **)v1150);
        sub_2231D48A8(v230, (uint64_t)v1150);
        sub_223CC6DA8((uint64_t)v1150, __p);
        v437 = *(std::__shared_weak_count **)&v1150[16];
        if (*(_QWORD *)&v1150[16])
        {
          v438 = (unint64_t *)(*(_QWORD *)&v1150[16] + 8);
          do
            v439 = __ldaxr(v438);
          while (__stlxr(v439 - 1, v438));
          if (!v439)
          {
            ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
            std::__shared_weak_count::__release_weak(v437);
          }
        }
        *(_DWORD *)v1150 = 3;
        sub_2238DC350(&v941, (uint64_t)__p, (uint64_t)__dst, (int *)v1150);
        sub_223167354((uint64_t)&__p[8]);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
      if (!sub_22321D244(v240, 32))
        goto LABEL_1164;
      v440 = (__int128 *)sub_2231D04FC(v230);
      v441 = *v440;
      *(_OWORD *)&v1150[12] = *(__int128 *)((char *)v440 + 12);
      *(_OWORD *)v1150 = v441;
      sub_223207688((uint64_t)&v1151, (uint64_t)(v440 + 2));
      if (!*(_DWORD *)v1150 || !*(_DWORD *)&v1150[4])
      {
        sub_2238CE8E8(&v926);
        if (**(int **)(v926 + 56) > 4)
          goto LABEL_1153;
        v443 = *(unsigned __int8 *)(v926 + 72);
        v444 = sub_22322F254(v926, "OSLogSurrogateAppender", 1, 0);
        v445 = v444;
        if (!v443 && !v444)
          goto LABEL_1153;
        *(_QWORD *)__dst = &v926;
        *(std::chrono::steady_clock::time_point *)&__dst[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&__dst[16] = std::chrono::system_clock::now();
        *(_DWORD *)&__dst[24] = 4;
        *(_QWORD *)&__dst[32] = "unknown file";
        *(_DWORD *)&__dst[40] = 826;
        v954 = "unknown function";
        v955 = 0;
        v956 = 0;
        sub_2245664AC(v869, &__src);
        v446 = **(_QWORD **)__dst;
        v447 = (const char *)(**(_QWORD **)__dst + 16);
        v905 = v447;
        if (*(char *)(**(_QWORD **)__dst + 39) < 0)
        {
          v447 = *(const char **)(v446 + 16);
          v448 = *(_QWORD *)(v446 + 24);
        }
        else
        {
          v448 = *(unsigned __int8 *)(**(_QWORD **)__dst + 39);
        }
        v911 = **(_QWORD **)__dst;
        v521 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v521 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v1112);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v1112, byte_255788F40);
          if (v1113[0] && SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1112.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F40[23] >= 0)
          v522 = byte_255788F40;
        else
          v522 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v523 = byte_255788F40[23];
        else
          v523 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)__p = os_log_create(v522, v447);
        if (v523 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v523 >= 0x17)
        {
          v525 = (v523 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v523 | 7) != 0x17)
            v525 = v523 | 7;
          v526 = v525 + 1;
          v524 = operator new(v525 + 1);
          *(_QWORD *)&__p[24] = v526 | 0x8000000000000000;
          *(_QWORD *)&__p[8] = v524;
          *(_QWORD *)&__p[16] = v523;
        }
        else
        {
          __p[31] = v523;
          v524 = &__p[8];
          if (!v523)
          {
LABEL_1044:
            v524[v523] = 0;
            __p[32] = 1;
            if (v448 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v448 >= 0x17)
            {
              v528 = (v448 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v448 | 7) != 0x17)
                v528 = v448 | 7;
              v529 = v528 + 1;
              v527 = operator new(v528 + 1);
              v1197 = (const char *)(v529 | 0x8000000000000000);
              *(_QWORD *)&__p[40] = v527;
              *(_QWORD *)&__p[48] = v448;
            }
            else
            {
              HIBYTE(v1197) = v448;
              v527 = &__p[40];
              if (!v448)
              {
LABEL_1052:
                v527[v448] = 0;
                LOBYTE(v1198) = 1;
                v530 = *(NSObject **)__p;
                if (SHIBYTE(v1197) < 0)
                  operator delete(*(void **)&__p[40]);
                if (__p[32] && (__p[31] & 0x80000000) != 0)
                  operator delete(*(void **)&__p[8]);
                if (*(_QWORD *)__p)
                  os_release(*(void **)__p);
                if (v445 && *(_QWORD *)(v445 + 24))
                {
                  v531 = _os_log_pack_size();
                  v532 = operator new(v531, (std::align_val_t)8uLL);
                  v533 = (_QWORD *)operator new();
                  *v533 = &off_24EC1F7F0;
                  v533[1] = 0;
                  v533[2] = 0;
                  v533[3] = v532;
                  v1065.__r_.__value_.__r.__words[0] = (std::string::size_type)v532;
                  v1065.__r_.__value_.__l.__size_ = (std::string::size_type)v532;
                  v1065.__r_.__value_.__r.__words[2] = (std::string::size_type)v533;
                  v1066 = 0;
                  v1067 = 0;
                  v534 = strlen((const char *)&__src);
                  if (v534 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v535 = (void *)v534;
                  if (v534 >= 0x17)
                  {
                    v539 = (v534 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v534 | 7) != 0x17)
                      v539 = v534 | 7;
                    v540 = v539 + 1;
                    v536 = operator new(v539 + 1);
                    v1068[2] = (void *)(v540 | 0x8000000000000000);
                    v1068[0] = v536;
                    v1068[1] = v535;
                  }
                  else
                  {
                    HIBYTE(v1068[2]) = v534;
                    v536 = v1068;
                    if (!v534)
                      goto LABEL_1074;
                  }
                  memcpy(v536, &__src, (size_t)v535);
LABEL_1074:
                  *((_BYTE *)v535 + (_QWORD)v536) = 0;
                  *(_QWORD *)&__p[16] = *(_QWORD *)v1070;
                  *(_QWORD *)&__p[23] = *(_QWORD *)&v1070[7];
                  *(void **)&__p[40] = v1068[1];
                  *(void **)&__p[47] = *(void **)((char *)&v1068[1] + 7);
                  *(_QWORD *)__p = off_24EC20780;
                  *(_QWORD *)&__p[8] = 0x656E656373;
                  __p[31] = 5;
                  *(void **)&__p[32] = v1068[0];
                  __p[55] = HIBYTE(v1068[2]);
                  v541 = (char *)operator new(0x50uLL);
                  *((_QWORD *)v541 + 1) = 0;
                  *((_QWORD *)v541 + 2) = 0;
                  *((_QWORD *)v541 + 3) = off_24EC20780;
                  *(_QWORD *)v541 = &off_24EC20730;
                  *((_OWORD *)v541 + 2) = *(_OWORD *)&__p[8];
                  *((_QWORD *)v541 + 6) = *(_QWORD *)&__p[24];
                  memset(&__p[8], 0, 24);
                  *(_OWORD *)(v541 + 56) = *(_OWORD *)&__p[32];
                  *((_QWORD *)v541 + 9) = *(_QWORD *)&__p[48];
                  memset(&__p[32], 0, 24);
                  v542 = v1067;
                  v1066 = v541 + 24;
                  v1067 = (std::__shared_weak_count *)v541;
                  if (v542)
                  {
                    v543 = (unint64_t *)&v542->__shared_owners_;
                    do
                      v544 = __ldaxr(v543);
                    while (__stlxr(v544 - 1, v543));
                    if (!v544)
                    {
                      ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
                      std::__shared_weak_count::__release_weak(v542);
                    }
                  }
                  if ((__p[55] & 0x80000000) != 0)
                    operator delete(*(void **)&__p[32]);
                  if ((__p[31] & 0x80000000) != 0)
                    operator delete(*(void **)&__p[8]);
                  v1112 = v1065;
                  v545 = v1066;
                  if (v1065.__r_.__value_.__r.__words[2])
                  {
                    v546 = (unint64_t *)(v1065.__r_.__value_.__r.__words[2] + 8);
                    do
                      v547 = __ldxr(v546);
                    while (__stxr(v547 + 1, v546));
                  }
                  v548 = v1067;
                  *(_QWORD *)v1113 = v545;
                  *(_QWORD *)&v1113[8] = v1067;
                  if (v1067)
                  {
                    v549 = (unint64_t *)&v1067->__shared_owners_;
                    do
                      v550 = __ldxr(v549);
                    while (__stxr(v550 + 1, v549));
                    *(_QWORD *)&v1113[16] = v545;
                    do
                      v551 = __ldaxr(v549);
                    while (__stlxr(v551 - 1, v549));
                    if (!v551)
                    {
                      ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
                      std::__shared_weak_count::__release_weak(v548);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v1113[16] = v545;
                  }
                  v552 = (std::__shared_weak_count *)v1065.__r_.__value_.__r.__words[2];
                  if (v1065.__r_.__value_.__r.__words[2])
                  {
                    v553 = (unint64_t *)(v1065.__r_.__value_.__r.__words[2] + 8);
                    do
                      v554 = __ldaxr(v553);
                    while (__stlxr(v554 - 1, v553));
                    if (!v554)
                    {
                      ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
                      std::__shared_weak_count::__release_weak(v552);
                    }
                  }
                  v555 = v1112.__r_.__value_.__r.__words[0];
                  if (*(char *)(*(_QWORD *)&v1113[16] + 31) >= 0)
                    v556 = *(_QWORD *)&v1113[16] + 8;
                  else
                    v556 = *(_QWORD *)(*(_QWORD *)&v1113[16] + 8);
                  if (*(char *)(*(_QWORD *)&v1113[16] + 55) >= 0)
                    v557 = *(_QWORD *)&v1113[16] + 32;
                  else
                    v557 = *(_QWORD *)(*(_QWORD *)&v1113[16] + 32);
                  v558 = _os_log_pack_fill();
                  *(_DWORD *)v558 = 136380931;
                  *(_QWORD *)(v558 + 4) = v556;
                  *(_WORD *)(v558 + 12) = 2080;
                  *(_QWORD *)(v558 + 14) = v557;
                  v559 = operator new();
                  v560 = *(unsigned __int8 *)(v911 + 39);
                  v561 = v905;
                  if ((v560 & 0x80u) != 0)
                  {
                    v561 = *(const char **)(v911 + 16);
                    v560 = *(_QWORD *)(v911 + 24);
                  }
                  *(_QWORD *)v559 = v555;
                  *(_OWORD *)(v559 + 8) = *(_OWORD *)&v1112.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v1112.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v559 + 24) = *(_OWORD *)v1113;
                  *(_QWORD *)v1113 = 0;
                  *(_QWORD *)&v1113[8] = 0;
                  *(_QWORD *)(v559 + 40) = v561;
                  *(_QWORD *)(v559 + 48) = v560;
                  *(_BYTE *)(v559 + 56) = 16;
                  v1065.__r_.__value_.__r.__words[0] = 0;
                  *(_QWORD *)__p = v559;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v445 + 24) + 40))(*(_QWORD *)(v445 + 24), __p);
                  v562 = *(_QWORD *)__p;
                  *(_QWORD *)__p = 0;
                  if (v562)
                  {
                    v563 = *(std::__shared_weak_count **)(v562 + 32);
                    if (v563)
                    {
                      v564 = (unint64_t *)&v563->__shared_owners_;
                      do
                        v565 = __ldaxr(v564);
                      while (__stlxr(v565 - 1, v564));
                      if (!v565)
                      {
                        ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
                        std::__shared_weak_count::__release_weak(v563);
                      }
                    }
                    v566 = *(std::__shared_weak_count **)(v562 + 16);
                    if (v566)
                    {
                      v567 = (unint64_t *)&v566->__shared_owners_;
                      do
                        v568 = __ldaxr(v567);
                      while (__stlxr(v568 - 1, v567));
                      if (!v568)
                      {
                        ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
                        std::__shared_weak_count::__release_weak(v566);
                      }
                    }
                    MEMORY[0x227684CE8](v562, 0x10F0C40B62ED6C6);
                    v569 = v1065.__r_.__value_.__r.__words[0];
                    v1065.__r_.__value_.__r.__words[0] = 0;
                    if (v569)
                    {
                      v570 = *(std::__shared_weak_count **)(v569 + 32);
                      if (v570)
                      {
                        v571 = (unint64_t *)&v570->__shared_owners_;
                        do
                          v572 = __ldaxr(v571);
                        while (__stlxr(v572 - 1, v571));
                        if (!v572)
                        {
                          ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                          std::__shared_weak_count::__release_weak(v570);
                        }
                      }
                      v573 = *(std::__shared_weak_count **)(v569 + 16);
                      if (v573)
                      {
                        v574 = (unint64_t *)&v573->__shared_owners_;
                        do
                          v575 = __ldaxr(v574);
                        while (__stlxr(v575 - 1, v574));
                        if (!v575)
                        {
                          ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
                          std::__shared_weak_count::__release_weak(v573);
                        }
                      }
                      MEMORY[0x227684CE8](v569, 0x10F0C40B62ED6C6);
                    }
                  }
                  if (v443)
                  {
                    *(_DWORD *)__p = 136380931;
                    *(_QWORD *)&__p[4] = "scene";
                    *(_WORD *)&__p[12] = 2080;
                    *(_QWORD *)&__p[14] = &__src;
                    LODWORD(v865) = 22;
                    v864 = __p;
                    v537 = (char *)_os_log_send_and_compose_impl();
                  }
                  else
                  {
                    v537 = 0;
                  }
                  v576 = *(std::__shared_weak_count **)&v1113[8];
                  if (*(_QWORD *)&v1113[8])
                  {
                    v577 = (unint64_t *)(*(_QWORD *)&v1113[8] + 8);
                    do
                      v578 = __ldaxr(v577);
                    while (__stlxr(v578 - 1, v577));
                    if (!v578)
                    {
                      ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
                      std::__shared_weak_count::__release_weak(v576);
                    }
                  }
                  v579 = (std::__shared_weak_count *)v1112.__r_.__value_.__r.__words[2];
                  if (v1112.__r_.__value_.__r.__words[2])
                  {
                    v580 = (unint64_t *)(v1112.__r_.__value_.__r.__words[2] + 8);
                    do
                      v581 = __ldaxr(v580);
                    while (__stlxr(v581 - 1, v580));
                    if (!v581)
                    {
                      ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
                      std::__shared_weak_count::__release_weak(v579);
                    }
                  }
                  if (v443)
                  {
                    sub_22322C138((uint64_t)__dst, v537, v864);
LABEL_1145:
                    sub_223182C08((uint64_t)__dst);
                  }
                  v240 = (uint64_t)__s;
                  v230 = v868;
                  v6 = v883;
                  if (v537)
                    free(v537);
                }
                else
                {
                  os_log_type_enabled(v530, OS_LOG_TYPE_ERROR);
                  if (v443)
                  {
                    *(_DWORD *)__p = 136380931;
                    *(_QWORD *)&__p[4] = "scene";
                    *(_WORD *)&__p[12] = 2080;
                    *(_QWORD *)&__p[14] = &__src;
                    LODWORD(v865) = 22;
                    v537 = (char *)_os_log_send_and_compose_impl();
                    sub_22322C138((uint64_t)__dst, v537, __p);
                    goto LABEL_1145;
                  }
                  *(_DWORD *)__p = 136380931;
                  *(_QWORD *)&__p[4] = "scene";
                  *(_WORD *)&__p[12] = 2080;
                  *(_QWORD *)&__p[14] = &__src;
                  LODWORD(v865) = 22;
                  v538 = (void *)_os_log_send_and_compose_impl();
                  if (v538)
                    free(v538);
                  v240 = (uint64_t)__s;
                  v230 = v868;
                  v6 = v883;
                }
                sub_223182C08((uint64_t)__dst);
                v582 = v956;
                if (v956)
                {
                  v583 = (unint64_t *)&v956->__shared_owners_;
                  do
                    v584 = __ldaxr(v583);
                  while (__stlxr(v584 - 1, v583));
                  if (!v584)
                  {
                    ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
                    std::__shared_weak_count::__release_weak(v582);
                  }
                }
                goto LABEL_1153;
              }
            }
            memmove(v527, v447, v448);
            goto LABEL_1052;
          }
        }
        memmove(v524, v522, v523);
        goto LABEL_1044;
      }
      HIBYTE(v1068[2]) = 0;
      LOBYTE(v1068[0]) = 0;
      v1071 = 4;
      strcpy(v1070, ".txt");
      sub_2238DC200(&__src, (const void **)v1068, (uint64_t)v1070);
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_src = &__src;
      else
        p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
      sub_22456D250((char *)p_src, &v1065, *(_QWORD *)&v239);
      v1112 = v1065;
      memset(&v1065, 0, sizeof(v1065));
      if (SHIBYTE(v1054) < 0)
      {
        sub_223197FA4(__dst, (void *)v1053, *((unint64_t *)&v1053 + 1));
      }
      else
      {
        *(_OWORD *)__dst = v1053;
        *(_QWORD *)&__dst[16] = v1054;
      }
      sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)&v1112);
      if ((__dst[23] & 0x80000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)__dst;
        *(_QWORD *)&__p[16] = *(_QWORD *)&__dst[16];
        if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_900;
LABEL_906:
        if ((SHIBYTE(v1065.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_907;
LABEL_901:
        operator delete(v1065.__r_.__value_.__l.__data_);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_902;
LABEL_908:
        if ((v1071 & 0x80000000) == 0)
          goto LABEL_909;
LABEL_903:
        operator delete(*(void **)v1070);
        goto LABEL_909;
      }
      sub_223197FA4(__p, *(void **)__dst, *(unint64_t *)&__dst[8]);
      if ((__dst[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__dst);
        if ((SHIBYTE(v1112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_906;
      }
      else if ((SHIBYTE(v1112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_906;
      }
LABEL_900:
      operator delete(v1112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1065.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_901;
LABEL_907:
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_908;
LABEL_902:
      operator delete(__src.__r_.__value_.__l.__data_);
      if (v1071 < 0)
        goto LABEL_903;
LABEL_909:
      v460 = *(_QWORD *)&__p[8];
      memset(&v1112, 0, sizeof(v1112));
      if (__p[23] >= 0)
        v461 = (std::string *)__p;
      else
        v461 = *(std::string **)__p;
      if (__p[23] >= 0)
        v460 = __p[23];
      sub_2231816F0(&v1112, v461, (std::string *)((char *)v461 + v460));
      (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v923 + 376))(__dst, v923, &v1112, 16);
      if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1112.__r_.__value_.__l.__data_);
      if (!*(_QWORD *)&__dst[8])
      {
        sub_2238DCA34(&v1112, (uint64_t *)__p);
        if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v860 = &v1112;
        else
          v860 = (std::string *)v1112.__r_.__value_.__r.__words[0];
        if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v861 = HIBYTE(v1112.__r_.__value_.__r.__words[2]);
        else
          v861 = v1112.__r_.__value_.__l.__size_;
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 816, (uint64_t)"", 0, (uint64_t)v860, v861, (void (*)(void **))sub_22457406C);
        if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1112.__r_.__value_.__l.__data_);
        abort();
      }
      v462 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&__dst[8] + 16))(*(_QWORD *)&__dst[8]);
      sub_2238EB484(v462, (int *)v1150);
      sub_2242BB4F8((uint64_t)__dst);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
LABEL_1153:
      v585 = (void *)v1152;
      if ((_QWORD)v1152)
      {
        _ZF = !HIDWORD(v1153) || (_DWORD)v1153 == 0;
        v587 = _ZF ? 0 : HIDWORD(v1153);
        if (v587 * (((381774871 * ((unint64_t)v1154 >> 34)) >> 32) >> 2) != -1)
          goto LABEL_1163;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v585 = (void *)v1152;
        if ((_QWORD)v1152)
LABEL_1163:
          free(v585);
      }
LABEL_1164:
      v867 &= 0xFFFFFFFFFFFF0000;
      sub_223CA3918(v230, *(unsigned int *)(v240 + 808), 0, (uint64_t)__p);
      sub_2241498F4((uint64_t)v1150, 0);
      sub_22339E3C8((uint64_t)v1150, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2));
      v594 = *(_QWORD *)&__p[8];
      v595 = *(_QWORD *)__p;
      v596 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
      v597 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1152 - (_QWORD)v1151) >> 2);
      if (v596 <= v597)
      {
        if (v596 < v597)
          *(_QWORD *)&v1152 = &v1151[4 * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2)];
      }
      else
      {
        sub_22317EF30((uint64_t)&v1151, v596 - v597);
        v595 = *(_QWORD *)__p;
        v594 = *(_QWORD *)&__p[8];
      }
      LODWORD(v1154) = 1;
      if (v595 != v594)
      {
        v598 = *(_QWORD *)&v1150[8];
        do
        {
          v588.i32[0] = *(_DWORD *)v595;
          v589.i32[0] = *(_DWORD *)(v595 + 4);
          v590.i32[0] = *(_DWORD *)(v595 + 8);
          v591.i32[0] = v881[3].i32[0];
          v592.i32[0] = v881[5].i32[0];
          v593.i32[0] = v881[7].i32[0];
          *(float32x2_t *)v599.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v881[2], *(float *)v595), v881[4], v589.f32[0]), v881[6], v590.f32[0]);
          *(float32x2_t *)&v599.u32[2] = vmla_f32(vmla_f32(vmul_f32(v591, *(float32x2_t *)v588.f32), v589, v592), v590, v593);
          *(float32x2_t *)v588.f32 = v881[8];
          v588.i32[2] = v881[9].i32[0];
          v588 = vaddq_f32(v599, v588);
          if (v598 < *(_QWORD *)&v1150[16])
          {
            *(_QWORD *)v598 = v588.i64[0];
            *(_DWORD *)(v598 + 8) = v588.i32[2];
            v598 += 12;
          }
          else
          {
            v600 = *(_QWORD *)v1150;
            v601 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v598 - *(_QWORD *)v1150) >> 2);
            v602 = v601 + 1;
            if (v601 + 1 > 0x1555555555555555)
              sub_22316E078();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1150[16] - *(_QWORD *)v1150) >> 2) > v602)
              v602 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1150[16] - *(_QWORD *)v1150) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1150[16] - *(_QWORD *)v1150) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v603 = 0x1555555555555555;
            else
              v603 = v602;
            if (v603)
            {
              v912 = v588;
              LODWORD(v1112.__r_.__value_.__l.__data_) = v603;
              if (*(_DWORD *)&v1150[28] == -1)
                sub_22316DD70();
              *(_QWORD *)__dst = &v1112;
              v604 = ((uint64_t (*)(_BYTE *, _BYTE *))off_24EC5C330[*(unsigned int *)&v1150[28]])(__dst, &v1150[24]);
              v598 = *(_QWORD *)&v1150[8];
              v600 = *(_QWORD *)v1150;
              v588 = v912;
            }
            else
            {
              v604 = 0;
              v605 = 0;
            }
            v606 = v604 + 12 * v601;
            *(_QWORD *)v606 = v588.i64[0];
            *(_DWORD *)(v606 + 8) = v588.i32[2];
            v607 = v606;
            if (v598 != v600)
            {
              do
              {
                v608 = *(_QWORD *)(v598 - 12);
                v598 -= 12;
                v609 = *(_DWORD *)(v598 + 8);
                *(_QWORD *)(v607 - 12) = v608;
                v607 -= 12;
                *(_DWORD *)(v607 + 8) = v609;
              }
              while (v598 != v600);
              v600 = *(_QWORD *)v1150;
            }
            v598 = v606 + 12;
            *(_QWORD *)v1150 = v607;
            *(_QWORD *)&v1150[8] = v606 + 12;
            v610 = *(_QWORD *)&v1150[16];
            *(_QWORD *)&v1150[16] = v604 + 12 * v605;
            if (v600)
            {
              *(_QWORD *)__dst = v600;
              *(_DWORD *)&__dst[8] = -1431655765 * ((unint64_t)(v610 - v600) >> 2);
              if (*(_DWORD *)&v1150[28] == -1)
                sub_22316DD70();
              v1112.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
              ((void (*)(std::string *, _BYTE *))off_24EC5C320[*(unsigned int *)&v1150[28]])(&v1112, &v1150[24]);
            }
          }
          *(_QWORD *)&v1150[8] = v598;
          v595 += 12;
        }
        while (v595 != v594);
      }
      v611 = 0;
      while (2)
      {
        v616 = *((unsigned __int8 *)&v1040 + v611);
        if (!sub_22321D244(v240, *((_BYTE *)&v1040 + v611)))
          goto LABEL_1192;
        switch(v616)
        {
          case 1u:
            v618 = v1209;
            v619 = v1210;
            if (v1209 != v1210)
            {
              v620 = 0;
              do
              {
                v621 = *v618++;
                v622 = &byte_2245C3FE4[3 * v621];
                v623 = &byte_2245C9FE2;
                if (v621 < 0x2A)
                  v623 = v622;
                v624 = (char *)&v1151[v620];
                v612.i8[0] = *v623;
                v612.f32[0] = (float)v612.u32[0];
                v613.i8[0] = v623[1];
                *(float *)v613.i32 = (float)v613.u32[0];
                LOBYTE(v617) = v623[2];
                v617 = (float)LODWORD(v617);
                v612.i32[1] = v613.i32[0];
                v612.f32[2] = v617;
                v612 = vdivq_f32(v612, v871);
                *(_DWORD *)&v1151[v620 + 8] = v612.i32[2];
                *(_QWORD *)v624 = v612.i64[0];
                v620 += 12;
              }
              while (v618 != v619);
            }
            goto LABEL_1224;
          case 4u:
            v639 = v1201;
            v640 = v1202;
            if (v1201 == v1202)
              goto LABEL_1224;
            v641 = 0;
            break;
          case 0x10u:
            v625 = v1221;
            v626 = v1222;
            if (v1221 != v1222)
            {
              v627 = 0;
              do
              {
                v628 = *v625++;
                v629 = (char *)&unk_2245C4318 + 3 * v628;
                v630 = (__int8 *)&unk_2245C4315;
                if (v628 < 0x1A)
                  v630 = v629;
                v631 = (char *)&v1151[v627];
                v612.i8[0] = *v630;
                v612.f32[0] = (float)v612.u32[0];
                v613.i8[0] = v630[1];
                *(float *)v613.i32 = (float)v613.u32[0];
                LOBYTE(v617) = v630[2];
                v617 = (float)LODWORD(v617);
                v612.i32[1] = v613.i32[0];
                v612.f32[2] = v617;
                v612 = vdivq_f32(v612, v871);
                *(_DWORD *)&v1151[v627 + 8] = v612.i32[2];
                *(_QWORD *)v631 = v612.i64[0];
                v627 += 12;
              }
              while (v625 != v626);
            }
            goto LABEL_1224;
          case 0x20u:
            v632 = v1232;
            v633 = *(unsigned __int8 **)v1233;
            if (v1232 != *(unsigned __int8 **)v1233)
            {
              v634 = 0;
              do
              {
                v635 = *v632++;
                v636 = (char *)&unk_22465395B + 3 * v635;
                v637 = (__int8 *)&unk_224653958;
                if (v635 < 0x21)
                  v637 = v636;
                v638 = (char *)&v1151[v634];
                v612.i8[0] = *v637;
                v612.f32[0] = (float)v612.u32[0];
                v613.i8[0] = v637[1];
                *(float *)v613.i32 = (float)v613.u32[0];
                LOBYTE(v617) = v637[2];
                v617 = (float)LODWORD(v617);
                v612.i32[1] = v613.i32[0];
                v612.f32[2] = v617;
                v612 = vdivq_f32(v612, v871);
                *(_DWORD *)&v1151[v634 + 8] = v612.i32[2];
                *(_QWORD *)v638 = v612.i64[0];
                v634 += 12;
              }
              while (v632 != v633);
            }
            goto LABEL_1224;
          default:
            sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 874, (uint64_t)"", 0, (uint64_t)"Attribute type not handled", 26, (void (*)(void **))sub_22457406C);
            abort();
        }
        while (2)
        {
          v644 = v639 + v641;
          v645 = *(float *)(v639 + v641);
          if (v645 <= 0.0031308)
          {
            v646 = v645 * 12.92;
            v647 = *(float *)(v644 + 4);
            if (v647 > 0.0031308)
              goto LABEL_1222;
LABEL_1219:
            v648 = v647 * 12.92;
            v649 = *(float *)(v644 + 8);
            if (v649 > 0.0031308)
              goto LABEL_1215;
LABEL_1223:
            v642 = v649 * 12.92;
          }
          else
          {
            v646 = (float)((float)(powf(v645, 0.41667) * 211.0) + -11.0) / 200.0;
            v647 = *(float *)(v644 + 4);
            if (v647 <= 0.0031308)
              goto LABEL_1219;
LABEL_1222:
            v648 = (float)((float)(powf(v647, 0.41667) * 211.0) + -11.0) / 200.0;
            v649 = *(float *)(v644 + 8);
            if (v649 <= 0.0031308)
              goto LABEL_1223;
LABEL_1215:
            v642 = (float)((float)(powf(v649, 0.41667) * 211.0) + -11.0) / 200.0;
          }
          v643 = (float *)&v1151[v641];
          *v643 = v646;
          v643[1] = v648;
          v643[2] = v642;
          v641 += 12;
          if (v644 + 12 != v640)
            continue;
          break;
        }
LABEL_1224:
        v650 = v1035;
        v651 = &v1035;
LABEL_1226:
        v652 = v651;
        if (v650)
        {
          while (1)
          {
            v651 = (uint64_t **)v650;
            v653 = *((unsigned __int8 *)v650 + 32);
            if (v616 < v653)
            {
              v650 = *v651;
              goto LABEL_1226;
            }
            if (v653 >= v616)
              break;
            v650 = v651[1];
            if (!v650)
            {
              v652 = v651 + 1;
              goto LABEL_1231;
            }
          }
          v654 = v651;
        }
        else
        {
LABEL_1231:
          v654 = operator new(0x1A8uLL);
          v654[32] = v616;
          sub_2241498F4((uint64_t)(v654 + 40), 0);
          *(_QWORD *)v654 = 0;
          *((_QWORD *)v654 + 1) = 0;
          *((_QWORD *)v654 + 2) = v651;
          *v652 = (uint64_t *)v654;
          v655 = (uint64_t *)v654;
          if (*v1034)
          {
            v1034 = (uint64_t *)*v1034;
            v655 = *v652;
          }
          sub_2231A9A8C(v1035, v655);
          ++v1036;
        }
        sub_22414E9E0((uint64_t)(v654 + 40), (uint64_t)v1150);
        *((_BYTE *)&v1112.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v1112, "%s");
        *((_BYTE *)&v1065.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v1065, ".obj");
        sub_2238DC200((std::string *)__dst, (const void **)&v1112.__r_.__value_.__l.__data_, (uint64_t)&v1065);
        if (__dst[23] >= 0)
          v656 = __dst;
        else
          v656 = *(char **)__dst;
        v657 = v1038;
        v658 = &v1038;
LABEL_1240:
        v659 = v658;
        if (v657)
        {
          while (1)
          {
            v658 = (uint64_t **)v657;
            v660 = *((unsigned __int8 *)v657 + 32);
            if (v616 < v660)
            {
              v657 = *v658;
              goto LABEL_1240;
            }
            if (v660 >= v616)
              break;
            v657 = v658[1];
            if (!v657)
            {
              v659 = v658 + 1;
              goto LABEL_1245;
            }
          }
          v661 = v658;
        }
        else
        {
LABEL_1245:
          v661 = operator new(0x30uLL);
          v661[32] = v616;
          *((_QWORD *)v661 + 5) = 0;
          *(_QWORD *)v661 = 0;
          *((_QWORD *)v661 + 1) = 0;
          *((_QWORD *)v661 + 2) = v658;
          *v659 = (uint64_t *)v661;
          v662 = (uint64_t *)v661;
          if (*v1037)
          {
            v1037 = (uint64_t **)*v1037;
            v662 = *v659;
          }
          sub_2231A9A8C(v1038, v662);
          ++v1039;
        }
        v865 = v239;
        sub_22456D250(v656, &__src, *((_QWORD *)v661 + 5));
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if (SHIBYTE(v1065.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_1260;
LABEL_1251:
          if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
LABEL_1261:
            operator delete(v1112.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v1065.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_1251;
LABEL_1260:
          operator delete(v1065.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_1261;
        }
        memset(&v1112, 0, sizeof(v1112));
        v663 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v664 = &__src;
        else
          v664 = (std::string *)__src.__r_.__value_.__r.__words[0];
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v663 = __src.__r_.__value_.__l.__size_;
        sub_2231816F0(&v1112, v664, (std::string *)((char *)v664 + v663));
        if (SHIBYTE(v1050) < 0)
        {
          sub_223197FA4(__dst, (void *)v1049, *((unint64_t *)&v1049 + 1));
        }
        else
        {
          *(_OWORD *)__dst = v1049;
          *(_QWORD *)&__dst[16] = v1050;
        }
        sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)&v1112);
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_223197FA4(v1068, *(void **)__dst, *(unint64_t *)&__dst[8]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        else
        {
          *(_OWORD *)v1068 = *(_OWORD *)__dst;
          v1068[2] = *(void **)&__dst[16];
        }
        if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1068[2]) >= 0)
          v665 = (std::string *)v1068;
        else
          v665 = (std::string *)v1068[0];
        v666 = sub_22414BFC0(v665, (uint64_t *)v1150, v923);
        if (v666)
        {
          v667 = atomic_load((unsigned __int8 *)&qword_2557892F0);
          if ((v667 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
          {
            __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
            __cxa_guard_release(&qword_2557892F0);
          }
          sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error capturing keyframe point cloud", 0x24uLL);
          sub_2238CE8E8(&v926);
          if (**(int **)(v926 + 56) <= 5)
          {
            v668 = *(unsigned __int8 *)(v926 + 72);
            v669 = sub_22322F254(v926, "OSLogSurrogateAppender", 1, 0);
            v670 = v669;
            if (v668 || v669)
            {
              v1112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v926;
              v1112.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v1112.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
              *(_DWORD *)v1113 = 5;
              *(_QWORD *)&v1113[8] = "unknown file";
              *(_DWORD *)&v1113[16] = 887;
              v1114 = "unknown function";
              v1115 = 0;
              v1116 = 0;
              v671 = *(_QWORD *)v1112.__r_.__value_.__l.__data_;
              v672 = (const char *)(*(_QWORD *)v1112.__r_.__value_.__l.__data_ + 16);
              v899 = v672;
              v906 = *(_QWORD *)v1112.__r_.__value_.__l.__data_;
              if (*(char *)(*(_QWORD *)v1112.__r_.__value_.__l.__data_ + 39) < 0)
              {
                v672 = *(const char **)(v671 + 16);
                v673 = *(_QWORD *)(v671 + 24);
              }
              else
              {
                v673 = *(unsigned __int8 *)(*(_QWORD *)v1112.__r_.__value_.__l.__data_ + 39);
              }
              v913 = v670;
              v674 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v674 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&v1065);
                sub_223199C58("com.apple.cv3d", (unint64_t)&v1065, byte_255788F40);
                if ((_BYTE)v1066 && SHIBYTE(v1065.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v1065.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                v6 = v883;
              }
              if (byte_255788F40[23] >= 0)
                v675 = byte_255788F40;
              else
                v675 = *(const char **)byte_255788F40;
              if (byte_255788F40[23] >= 0)
                v676 = byte_255788F40[23];
              else
                v676 = *(_QWORD *)&byte_255788F40[8];
              *(_QWORD *)__dst = os_log_create(v675, v672);
              if (v676 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v676 >= 0x17)
              {
                v678 = (v676 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v676 | 7) != 0x17)
                  v678 = v676 | 7;
                v679 = v678 + 1;
                v677 = operator new(v678 + 1);
                *(_QWORD *)&__dst[24] = v679 | 0x8000000000000000;
                *(_QWORD *)&__dst[8] = v677;
                *(_QWORD *)&__dst[16] = v676;
              }
              else
              {
                __dst[31] = v676;
                v677 = &__dst[8];
                if (!v676)
                {
LABEL_1296:
                  v677[v676] = 0;
                  __dst[32] = 1;
                  if (v673 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v240 = (uint64_t)__s;
                  if (v673 >= 0x17)
                  {
                    v681 = (v673 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v673 | 7) != 0x17)
                      v681 = v673 | 7;
                    v682 = v681 + 1;
                    v680 = operator new(v681 + 1);
                    v955 = v682 | 0x8000000000000000;
                    *(_QWORD *)&__dst[40] = v680;
                    v954 = (const char *)v673;
                  }
                  else
                  {
                    HIBYTE(v955) = v673;
                    v680 = &__dst[40];
                    if (!v673)
                    {
LABEL_1304:
                      v680[v673] = 0;
                      LOBYTE(v956) = 1;
                      v683 = *(NSObject **)__dst;
                      if (SHIBYTE(v955) < 0)
                        operator delete(*(void **)&__dst[40]);
                      if (__dst[32] && (__dst[31] & 0x80000000) != 0)
                        operator delete(*(void **)&__dst[8]);
                      if (*(_QWORD *)__dst)
                        os_release(*(void **)__dst);
                      if (v913 && *(_QWORD *)(v913 + 24))
                      {
                        v684 = _os_log_pack_size();
                        v685 = (std::__shared_weak_count_vtbl *)operator new(v684, (std::align_val_t)8uLL);
                        v686 = (std::__shared_weak_count *)operator new();
                        v687 = v686;
                        v686->__shared_owners_ = 0;
                        v688 = (unint64_t *)&v686->__shared_owners_;
                        v686->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                        v686->__shared_weak_owners_ = 0;
                        v686[1].__vftable = v685;
                        *(_QWORD *)__dst = v685;
                        *(_QWORD *)&__dst[8] = v685;
                        *(_QWORD *)&__dst[16] = v686;
                        do
                          v689 = __ldxr(v688);
                        while (__stxr(v689 + 1, v688));
                        memset(&__dst[24], 0, 24);
                        do
                          v690 = __ldaxr(v688);
                        while (__stlxr(v690 - 1, v688));
                        if (!v690)
                        {
                          ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
                          std::__shared_weak_count::__release_weak(v687);
                        }
                        v691 = *(_QWORD *)__dst;
                        *(_WORD *)_os_log_pack_fill() = 0;
                        v692 = operator new();
                        v693 = *(unsigned __int8 *)(v906 + 39);
                        v694 = v899;
                        if ((v693 & 0x80u) != 0)
                        {
                          v694 = *(const char **)(v906 + 16);
                          v693 = *(_QWORD *)(v906 + 24);
                        }
                        *(_QWORD *)v692 = v691;
                        *(_OWORD *)(v692 + 8) = *(_OWORD *)&__dst[8];
                        *(_QWORD *)&__dst[8] = 0;
                        *(_QWORD *)&__dst[16] = 0;
                        *(_OWORD *)(v692 + 24) = *(_OWORD *)&__dst[24];
                        *(_QWORD *)&__dst[24] = 0;
                        *(_QWORD *)&__dst[32] = 0;
                        *(_QWORD *)(v692 + 40) = v694;
                        *(_QWORD *)(v692 + 48) = v693;
                        *(_BYTE *)(v692 + 56) = 16;
                        *(_QWORD *)v1070 = 0;
                        v1065.__r_.__value_.__r.__words[0] = v692;
                        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v913 + 24) + 40))(*(_QWORD *)(v913 + 24), &v1065);
                        v695 = v1065.__r_.__value_.__r.__words[0];
                        v1065.__r_.__value_.__r.__words[0] = 0;
                        if (v695)
                        {
                          v696 = *(std::__shared_weak_count **)(v695 + 32);
                          if (v696)
                          {
                            v697 = (unint64_t *)&v696->__shared_owners_;
                            do
                              v698 = __ldaxr(v697);
                            while (__stlxr(v698 - 1, v697));
                            if (!v698)
                            {
                              ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                              std::__shared_weak_count::__release_weak(v696);
                            }
                          }
                          v699 = *(std::__shared_weak_count **)(v695 + 16);
                          if (v699)
                          {
                            v700 = (unint64_t *)&v699->__shared_owners_;
                            do
                              v701 = __ldaxr(v700);
                            while (__stlxr(v701 - 1, v700));
                            if (!v701)
                            {
                              ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
                              std::__shared_weak_count::__release_weak(v699);
                            }
                          }
                          MEMORY[0x227684CE8](v695, 0x10F0C40B62ED6C6);
                          v702 = *(_QWORD *)v1070;
                          *(_QWORD *)v1070 = 0;
                          if (v702)
                          {
                            v703 = *(std::__shared_weak_count **)(v702 + 32);
                            if (v703)
                            {
                              v704 = (unint64_t *)&v703->__shared_owners_;
                              do
                                v705 = __ldaxr(v704);
                              while (__stlxr(v705 - 1, v704));
                              if (!v705)
                              {
                                ((void (*)(std::__shared_weak_count *))v703->__on_zero_shared)(v703);
                                std::__shared_weak_count::__release_weak(v703);
                              }
                            }
                            v706 = *(std::__shared_weak_count **)(v702 + 16);
                            if (v706)
                            {
                              v707 = (unint64_t *)&v706->__shared_owners_;
                              do
                                v708 = __ldaxr(v707);
                              while (__stlxr(v708 - 1, v707));
                              if (!v708)
                              {
                                ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
                                std::__shared_weak_count::__release_weak(v706);
                              }
                            }
                            MEMORY[0x227684CE8](v702, 0x10F0C40B62ED6C6);
                          }
                        }
                        v709 = *(std::__shared_weak_count **)&__dst[32];
                        if (*(_QWORD *)&__dst[32])
                        {
                          v710 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
                          do
                            v711 = __ldaxr(v710);
                          while (__stlxr(v711 - 1, v710));
                          if (!v711)
                          {
                            ((void (*)(std::__shared_weak_count *))v709->__on_zero_shared)(v709);
                            std::__shared_weak_count::__release_weak(v709);
                          }
                        }
                        v712 = *(std::__shared_weak_count **)&__dst[16];
                        if (*(_QWORD *)&__dst[16])
                        {
                          v713 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                          do
                            v714 = __ldaxr(v713);
                          while (__stlxr(v714 - 1, v713));
                          if (!v714)
                          {
                            ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
                            std::__shared_weak_count::__release_weak(v712);
                          }
                        }
                      }
                      else
                      {
                        os_log_type_enabled(v683, OS_LOG_TYPE_ERROR);
                        *(_WORD *)__dst = 0;
                        LODWORD(v865) = 2;
                        v715 = (void *)_os_log_send_and_compose_impl();
                        if (v715)
                          free(v715);
                      }
                      if (v668)
                      {
                        sub_22322C138((uint64_t)&v1112, "Error capturing keyframe point cloud");
                        sub_223182C08((uint64_t)&v1112);
                      }
                      sub_223182C08((uint64_t)&v1112);
                      v716 = v1116;
                      if (v1116)
                      {
                        v717 = (unint64_t *)&v1116->__shared_owners_;
                        do
                          v718 = __ldaxr(v717);
                        while (__stlxr(v718 - 1, v717));
                        if (!v718)
                        {
                          ((void (*)(std::__shared_weak_count *))v716->__on_zero_shared)(v716);
                          std::__shared_weak_count::__release_weak(v716);
                        }
                      }
                      goto LABEL_1363;
                    }
                  }
                  memmove(v680, v672, v673);
                  goto LABEL_1304;
                }
              }
              memmove(v677, v675, v676);
              goto LABEL_1296;
            }
          }
LABEL_1363:
          v519 = 1;
        }
        else
        {
          v519 = 0;
        }
        if (SHIBYTE(v1068[2]) < 0)
        {
          operator delete(v1068[0]);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_1366;
LABEL_1191:
          if (v666)
            goto LABEL_1405;
          goto LABEL_1192;
        }
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1191;
LABEL_1366:
        operator delete(__src.__r_.__value_.__l.__data_);
        if (v666)
          goto LABEL_1405;
LABEL_1192:
        if (++v611 != 4)
          continue;
        break;
      }
      *(float32x2_t *)v612.f32 = v881[2];
      v612.i32[2] = v881[3].i32[0];
      *(float32x2_t *)v613.i8 = v881[4];
      v613.i32[2] = v881[5].i32[0];
      *(float32x2_t *)v614.f32 = v881[8];
      v614.i32[2] = v881[9].i32[0];
      *(_QWORD *)&v719 = vzip1q_s32((int32x4_t)v612, v613).u64[0];
      v720 = (int8x16_t)vnegq_f32(v614);
      v615.i32[0] = v881[7].i32[0];
      v721 = (int8x16_t)vtrn2q_s32((int32x4_t)v612, v613);
      v721.i32[2] = HIDWORD(*(_QWORD *)&v881[6]);
      v722 = (int8x16_t)vzip2q_s32((int32x4_t)v612, v613);
      v723 = (int32x4_t)v722;
      v723.i32[2] = v615.i32[0];
      v724 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v719, *(float *)v720.i32), *(float32x2_t *)v721.i8, *(float32x2_t *)v614.f32, 1), *(float32x2_t *)v722.i8, v614, 2);
      v725 = vmls_lane_f32(vmul_f32(v881[6], *(float32x2_t *)v720.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v881[6], 1), *(float32x2_t *)v614.f32, 1);
      v726 = (float32x2_t)vextq_s8(v720, v720, 8uLL).u64[0];
      *((_QWORD *)&v719 + 1) = *(_QWORD *)&v881[6];
      v720.i32[3] = 0;
      v720.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v721, 0).i32[3];
      *(uint64_t *)((char *)v720.i64 + 4) = vextq_s8(v721, v722, 4uLL).u64[0];
      v723.i64[1] = vdupq_laneq_s32(v723, 2).u32[0];
      *(int8x16_t *)&__dst[16] = v720;
      *(int32x4_t *)&__dst[32] = v723;
      *(_OWORD *)__dst = v719;
      v954 = (const char *)v724;
      LODWORD(v955) = vmla_f32(v725, v726, v615).u32[0];
      HIDWORD(v955) = 1065353216;
      memset(&v1112, 0, sizeof(v1112));
      *(_OWORD *)&v1065.__r_.__value_.__l.__data_ = (unint64_t)__dst;
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1112;
      __src.__r_.__value_.__l.__size_ = 0;
      sub_2236763FC((float32x2_t **)&v1065, (float **)&__src);
      v727 = *(int8x16_t *)&v1112.__r_.__value_.__l.__data_;
      v728 = (float32x2_t)vextq_s8(v727, v727, 8uLL).u64[0];
      v729 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v727.i8, *(float32x2_t *)v727.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v1112.__r_.__value_.__l.__data_, 1), (float32x2_t)v1112.__r_.__value_.__l.__data_, 1), v728, v728).f32[0];
      if (v729 >= 0.0061)
        __sincosf_stret(sqrtf(v729));
      LODWORD(v1068[1]) = v1112.__r_.__value_.__r.__words[1];
      v1068[0] = v1112.__r_.__value_.__l.__data_;
      LODWORD(v1065.__r_.__value_.__r.__words[1]) = v955;
      v1065.__r_.__value_.__r.__words[0] = (std::string::size_type)v954;
      sub_22456D250("%.8f", &v1112, *(_QWORD *)&v239);
      v730 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1042 + 16))(v1042);
      if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v731 = &v1112;
      else
        v731 = (std::string *)v1112.__r_.__value_.__r.__words[0];
      if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v732 = HIBYTE(v1112.__r_.__value_.__r.__words[2]);
      else
        v732 = v1112.__r_.__value_.__l.__size_;
      sub_2231813E8(v730, (uint64_t)v731, v732);
      v733 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1042 + 16))(v1042);
      sub_2231813E8(v733, (uint64_t)" ", 1);
      if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1112.__r_.__value_.__l.__data_);
      sub_2238DCAC4(&v1112, (float *)v1068, (float *)((unint64_t)v1068 | 0xC));
      v734 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1042 + 16))(v1042);
      if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v735 = &v1112;
      else
        v735 = (std::string *)v1112.__r_.__value_.__r.__words[0];
      if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v736 = HIBYTE(v1112.__r_.__value_.__r.__words[2]);
      else
        v736 = v1112.__r_.__value_.__l.__size_;
      sub_2231813E8(v734, (uint64_t)v735, v736);
      v737 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1042 + 16))(v1042);
      sub_2231813E8(v737, (uint64_t)" ", 1);
      if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1112.__r_.__value_.__l.__data_);
      sub_2238DCAC4(&v1112, (float *)&v1065, (float *)((unint64_t)&v1065 | 0xC));
      v738 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1042 + 16))(v1042);
      if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v739 = &v1112;
      else
        v739 = (std::string *)v1112.__r_.__value_.__r.__words[0];
      if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v740 = HIBYTE(v1112.__r_.__value_.__r.__words[2]);
      else
        v740 = v1112.__r_.__value_.__l.__size_;
      sub_2231813E8(v738, (uint64_t)v739, v740);
      v741 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1042 + 16))(v1042);
      __src.__r_.__value_.__s.__data_[0] = 10;
      sub_2231813E8(v741, (uint64_t)&__src, 1);
      if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1112.__r_.__value_.__l.__data_);
      v1112.__r_.__value_.__s.__data_[0] = 0;
      v1112.__r_.__value_.__l.__size_ = 0;
      sub_2238366F0((unsigned __int8 *)&v1112, (uint64_t)v881);
      v742 = v947;
      if ((unint64_t)v947 >= v948)
      {
        v744 = sub_22345497C(&v946, (char *)&v1112);
        v743 = v1112.__r_.__value_.__s.__data_[0];
      }
      else
      {
        v743 = 0;
        *v947 = v1112.__r_.__value_.__s.__data_[0];
        *((_QWORD *)v742 + 1) = v1112.__r_.__value_.__l.__size_;
        v1112.__r_.__value_.__s.__data_[0] = 0;
        v1112.__r_.__value_.__l.__size_ = 0;
        v744 = v742 + 16;
      }
      v947 = v744;
      sub_223454278((uint64_t *)&v1112.__r_.__value_.__l.__size_, v743);
      v519 = 0;
LABEL_1405:
      sub_22316F8F4((uint64_t *)v1150);
      sub_22326055C((uint64_t *)__p);
      if (SHIBYTE(v928) < 0)
      {
        operator delete(v927[0]);
        v520 = v869;
        if (SHIBYTE(v930) < 0)
          goto LABEL_1410;
LABEL_1407:
        sub_223167354((uint64_t)&v990[1]);
        v745 = v933;
        if (v933)
        {
LABEL_1411:
          v746 = (unint64_t *)&v745->__shared_owners_;
          do
            v747 = __ldaxr(v746);
          while (__stlxr(v747 - 1, v746));
          if (!v747)
          {
            ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
            std::__shared_weak_count::__release_weak(v745);
          }
        }
      }
      else
      {
        v520 = v869;
        if ((SHIBYTE(v930) & 0x80000000) == 0)
          goto LABEL_1407;
LABEL_1410:
        operator delete(v929[0]);
        sub_223167354((uint64_t)&v990[1]);
        v745 = v933;
        if (v933)
          goto LABEL_1411;
      }
      v748 = v1073;
      if (v1073)
      {
        v749 = (unint64_t *)&v1073->__shared_owners_;
        do
          v750 = __ldaxr(v749);
        while (__stlxr(v750 - 1, v749));
        if (!v750)
        {
          ((void (*)(std::__shared_weak_count *))v748->__on_zero_shared)(v748);
          std::__shared_weak_count::__release_weak(v748);
        }
      }
      if (SHIBYTE(v942.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v942.__r_.__value_.__l.__data_);
      if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v943.__r_.__value_.__l.__data_);
      v228 = 0;
LABEL_1425:
      v751 = v945;
      if (v945)
      {
        v752 = (unint64_t *)&v945->__shared_owners_;
        do
          v753 = __ldaxr(v752);
        while (__stlxr(v753 - 1, v752));
        if (!v753)
        {
          ((void (*)(std::__shared_weak_count *))v751->__on_zero_shared)(v751);
          std::__shared_weak_count::__release_weak(v751);
        }
      }
      if (v519 != 43 && v519)
      {
LABEL_1609:
        v219 = 0;
        goto LABEL_1620;
      }
      v227 = (uint64_t *)(v520 + 16);
      if (v227 == v866)
        goto LABEL_1443;
    }
    sub_2238CE8E8(&v931);
    if (**(int **)(v931 + 56) > 4
      || (v309 = *(unsigned __int8 *)(v931 + 72),
          v310 = sub_22322F254(v931, "OSLogSurrogateAppender", 1, 0),
          v311 = v310,
          !v309)
      && !v310)
    {
LABEL_1025:
      v519 = 43;
      v520 = v869;
      goto LABEL_1425;
    }
    *(_QWORD *)v1150 = &v931;
    *(std::chrono::steady_clock::time_point *)&v1150[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v1150[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v1150[24] = 4;
    v1151 = "unknown file";
    LODWORD(v1152) = 688;
    *((_QWORD *)&v1152 + 1) = "unknown function";
    v1153 = 0;
    v1154 = 0;
    sub_2245664AC(v869, &v1112);
    __src.__r_.__value_.__s.__data_[0] = v881[14].i8[1];
    *(_DWORD *)&__p[24] = 0;
    sub_22356F9F4((uint64_t)v990, (uint64_t)__p, (char *)&__src);
    if (*(_DWORD *)&__p[24] == -1)
      sub_22316DD70();
    v990[0] = __dst;
    ((void (*)(__int128 *__return_ptr, void **, _BYTE *))off_24EC5C388[*(unsigned int *)&__p[24]])(&v1072, v990, __p);
    if (*(_DWORD *)&__p[24] != -1)
      ((void (*)(void **, _BYTE *))off_24EC5C340[*(unsigned int *)&__p[24]])(v990, __p);
    v312 = &v1072;
    if (SHIBYTE(v1073) < 0)
      v312 = (__int128 *)v1072;
    v1065.__r_.__value_.__r.__words[0] = (std::string::size_type)v312;
    v313 = **(_QWORD **)v1150;
    v314 = (const char *)(**(_QWORD **)v1150 + 16);
    v896 = v314;
    v902 = **(_QWORD **)v1150;
    if (*(char *)(**(_QWORD **)v1150 + 39) < 0)
    {
      v314 = *(const char **)(v313 + 16);
      v315 = *(_QWORD *)(v313 + 24);
    }
    else
    {
      v315 = *(unsigned __int8 *)(**(_QWORD **)v1150 + 39);
    }
    v463 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v463 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v990);
      sub_223199C58("com.apple.cv3d", (unint64_t)v990, byte_255788F40);
      if (v991[0] && SHIBYTE(v990[2]) < 0)
        operator delete(v990[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v6 = v883;
    }
    if (byte_255788F40[23] >= 0)
      v464 = byte_255788F40;
    else
      v464 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v465 = byte_255788F40[23];
    else
      v465 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)__p = os_log_create(v464, v314);
    if (v465 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v465 >= 0x17)
    {
      v467 = (v465 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v465 | 7) != 0x17)
        v467 = v465 | 7;
      v468 = v467 + 1;
      v466 = operator new(v467 + 1);
      *(_QWORD *)&__p[24] = v468 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v466;
      *(_QWORD *)&__p[16] = v465;
    }
    else
    {
      __p[31] = v465;
      v466 = &__p[8];
      if (!v465)
      {
LABEL_935:
        v466[v465] = 0;
        __p[32] = 1;
        if (v315 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v315 >= 0x17)
        {
          v470 = (v315 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v315 | 7) != 0x17)
            v470 = v315 | 7;
          v471 = v470 + 1;
          v469 = operator new(v470 + 1);
          v1197 = (const char *)(v471 | 0x8000000000000000);
          *(_QWORD *)&__p[40] = v469;
          *(_QWORD *)&__p[48] = v315;
        }
        else
        {
          HIBYTE(v1197) = v315;
          v469 = &__p[40];
          if (!v315)
            goto LABEL_943;
        }
        memmove(v469, v314, v315);
LABEL_943:
        v469[v315] = 0;
        LOBYTE(v1198) = 1;
        v472 = *(NSObject **)__p;
        if (SHIBYTE(v1197) < 0)
          operator delete(*(void **)&__p[40]);
        if (__p[32] && (__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        if (*(_QWORD *)__p)
          os_release(*(void **)__p);
        v910 = v309;
        if (v311 && *(_QWORD *)(v311 + 24))
        {
          v473 = _os_log_pack_size();
          v474 = operator new(v473, (std::align_val_t)8uLL);
          v475 = (unint64_t *)operator new();
          v475[1] = 0;
          v476 = v475 + 1;
          *v475 = (unint64_t)&off_24EC1F7F0;
          v475[2] = 0;
          v475[3] = (unint64_t)v474;
          *(_QWORD *)__dst = v474;
          *(_QWORD *)&__dst[8] = v474;
          *(_QWORD *)&__dst[16] = v475;
          *(_QWORD *)&__dst[24] = 0;
          *(_QWORD *)&__dst[32] = 0;
          sub_2238E8940((uint64_t)__p, (char *)&v1112, (const char **)&v1065.__r_.__value_.__l.__data_);
          v477 = (char *)operator new(0x50uLL);
          v478 = (std::__shared_weak_count *)v477;
          *((_QWORD *)v477 + 1) = 0;
          v479 = (unint64_t *)(v477 + 8);
          *((_QWORD *)v477 + 2) = 0;
          *(_QWORD *)v477 = &off_24EC20730;
          *((_QWORD *)v477 + 3) = off_24EC20780;
          *((_OWORD *)v477 + 2) = *(_OWORD *)&__p[8];
          *((_QWORD *)v477 + 6) = *(_QWORD *)&__p[24];
          *(_OWORD *)(v477 + 56) = *(_OWORD *)&__p[32];
          *((_QWORD *)v477 + 9) = *(_QWORD *)&__p[48];
          *(_QWORD *)&__dst[24] = v477 + 24;
          *(_QWORD *)&__dst[32] = v477;
          v990[0] = v474;
          v990[1] = v474;
          v990[2] = v475;
          do
            v480 = __ldxr(v476);
          while (__stxr(v480 + 1, v476));
          *(_QWORD *)v991 = v477 + 24;
          *(_QWORD *)&v991[8] = v477;
          do
            v481 = __ldxr(v479);
          while (__stxr(v481 + 1, v479));
          *(_QWORD *)&v991[16] = v477 + 24;
          do
            v482 = __ldaxr(v479);
          while (__stlxr(v482 - 1, v479));
          if (!v482)
          {
            (*(void (**)(char *))(*(_QWORD *)v477 + 16))(v477);
            std::__shared_weak_count::__release_weak(v478);
          }
          v483 = *(std::__shared_weak_count **)&__dst[16];
          if (*(_QWORD *)&__dst[16])
          {
            v484 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
            do
              v485 = __ldaxr(v484);
            while (__stlxr(v485 - 1, v484));
            if (!v485)
            {
              ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
              std::__shared_weak_count::__release_weak(v483);
            }
          }
          v486 = v990[0];
          if (*(char *)(*(_QWORD *)&v991[16] + 31) >= 0)
            v487 = *(_QWORD *)&v991[16] + 8;
          else
            v487 = *(_QWORD *)(*(_QWORD *)&v991[16] + 8);
          if (*(char *)(*(_QWORD *)&v991[16] + 55) >= 0)
            v488 = *(_QWORD *)&v991[16] + 32;
          else
            v488 = *(_QWORD *)(*(_QWORD *)&v991[16] + 32);
          v489 = _os_log_pack_fill();
          *(_DWORD *)v489 = 136315394;
          *(_QWORD *)(v489 + 4) = v487;
          *(_WORD *)(v489 + 12) = 2080;
          *(_QWORD *)(v489 + 14) = v488;
          v490 = operator new();
          v491 = *(unsigned __int8 *)(v902 + 39);
          v492 = v896;
          if ((v491 & 0x80u) != 0)
          {
            v492 = *(const char **)(v902 + 16);
            v491 = *(_QWORD *)(v902 + 24);
          }
          *(_QWORD *)v490 = v486;
          *(_OWORD *)(v490 + 8) = *(_OWORD *)&v990[1];
          v990[1] = 0;
          v990[2] = 0;
          *(_OWORD *)(v490 + 24) = *(_OWORD *)v991;
          *(_QWORD *)v991 = 0;
          *(_QWORD *)&v991[8] = 0;
          *(_QWORD *)(v490 + 40) = v492;
          *(_QWORD *)(v490 + 48) = v491;
          *(_BYTE *)(v490 + 56) = 16;
          *(_QWORD *)__dst = 0;
          *(_QWORD *)__p = v490;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v311 + 24) + 40))(*(_QWORD *)(v311 + 24), __p);
          v493 = *(_QWORD *)__p;
          *(_QWORD *)__p = 0;
          v494 = v869;
          if (v493)
          {
            v495 = *(std::__shared_weak_count **)(v493 + 32);
            if (v495)
            {
              v496 = (unint64_t *)&v495->__shared_owners_;
              do
                v497 = __ldaxr(v496);
              while (__stlxr(v497 - 1, v496));
              if (!v497)
              {
                ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                std::__shared_weak_count::__release_weak(v495);
              }
            }
            v498 = *(std::__shared_weak_count **)(v493 + 16);
            if (v498)
            {
              v499 = (unint64_t *)&v498->__shared_owners_;
              do
                v500 = __ldaxr(v499);
              while (__stlxr(v500 - 1, v499));
              if (!v500)
              {
                ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
                std::__shared_weak_count::__release_weak(v498);
              }
            }
            MEMORY[0x227684CE8](v493, 0x10F0C40B62ED6C6);
            v501 = *(_QWORD *)__dst;
            *(_QWORD *)__dst = 0;
            v494 = v869;
            v6 = v883;
            if (v501)
            {
              v502 = *(std::__shared_weak_count **)(v501 + 32);
              if (v502)
              {
                v503 = (unint64_t *)&v502->__shared_owners_;
                do
                  v504 = __ldaxr(v503);
                while (__stlxr(v504 - 1, v503));
                if (!v504)
                {
                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                  std::__shared_weak_count::__release_weak(v502);
                }
              }
              v505 = *(std::__shared_weak_count **)(v501 + 16);
              if (v505)
              {
                v506 = (unint64_t *)&v505->__shared_owners_;
                do
                  v507 = __ldaxr(v506);
                while (__stlxr(v507 - 1, v506));
                if (!v507)
                {
                  ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                  std::__shared_weak_count::__release_weak(v505);
                }
              }
              MEMORY[0x227684CE8](v501, 0x10F0C40B62ED6C6);
              v494 = v869;
              v6 = v883;
            }
          }
          v508 = *(std::__shared_weak_count **)&v991[8];
          if (*(_QWORD *)&v991[8])
          {
            v509 = (unint64_t *)(*(_QWORD *)&v991[8] + 8);
            do
              v510 = __ldaxr(v509);
            while (__stlxr(v510 - 1, v509));
            if (!v510)
            {
              ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
              std::__shared_weak_count::__release_weak(v508);
            }
          }
          v511 = (std::__shared_weak_count *)v990[2];
          if (v990[2])
          {
            v512 = (unint64_t *)((char *)v990[2] + 8);
            do
              v513 = __ldaxr(v512);
            while (__stlxr(v513 - 1, v512));
            if (!v513)
            {
              ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
              std::__shared_weak_count::__release_weak(v511);
            }
          }
        }
        else
        {
          os_log_type_enabled(v472, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = &v1112;
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = v1065.__r_.__value_.__r.__words[0];
          LODWORD(v865) = 22;
          v514 = (void *)_os_log_send_and_compose_impl();
          v494 = v869;
          if (v514)
            free(v514);
        }
        if (SHIBYTE(v1073) < 0)
          operator delete((void *)v1072);
        if (v910)
        {
          sub_2245664AC(v494, __p);
          v1065.__r_.__value_.__s.__data_[0] = v881[14].i8[1];
          *(_DWORD *)v991 = 0;
          sub_22356F9F4((uint64_t)&v1112, (uint64_t)v990, (char *)&v1065);
          if (*(_DWORD *)v991 == -1)
            sub_22316DD70();
          v1112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1072;
          ((void (*)(_BYTE *__return_ptr, std::string *, void **))off_24EC5C388[*(unsigned int *)v991])(__dst, &v1112, v990);
          if (*(_DWORD *)v991 != -1)
            ((void (*)(std::string *, void **))off_24EC5C340[*(unsigned int *)v991])(&v1112, v990);
          if (__dst[23] >= 0)
            v515 = __dst;
          else
            v515 = *(const char **)__dst;
          sub_22322C138((uint64_t)v1150, "Keyframe cannot be retrieved: %s with state: %s", __p, v515);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          sub_223182C08((uint64_t)v1150);
        }
        sub_223182C08((uint64_t)v1150);
        v516 = v1154;
        if (v1154)
        {
          v517 = (unint64_t *)&v1154->__shared_owners_;
          do
            v518 = __ldaxr(v517);
          while (__stlxr(v518 - 1, v517));
          if (!v518)
          {
            ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
            std::__shared_weak_count::__release_weak(v516);
          }
        }
        goto LABEL_1025;
      }
    }
    memmove(v466, v464, v465);
    goto LABEL_935;
  }
LABEL_1443:
  for (i = 0; i != 4; ++i)
  {
    v755 = *((unsigned __int8 *)&v1040 + i);
    v756 = v1035;
    v757 = &v1035;
    v758 = &v1035;
    if (v1035)
    {
      while (1)
      {
        while (1)
        {
          v758 = (uint64_t **)v756;
          v759 = *((unsigned __int8 *)v756 + 32);
          if (v755 >= v759)
            break;
          v756 = *v758;
          v757 = v758;
          if (!*v758)
            goto LABEL_1453;
        }
        if (v759 >= v755)
          break;
        v756 = v758[1];
        if (!v756)
        {
          v757 = v758 + 1;
          goto LABEL_1453;
        }
      }
      v760 = (char *)v758;
    }
    else
    {
LABEL_1453:
      v760 = (char *)operator new(0x1A8uLL);
      v760[32] = v755;
      sub_2241498F4((uint64_t)(v760 + 40), 0);
      *(_QWORD *)v760 = 0;
      *((_QWORD *)v760 + 1) = 0;
      *((_QWORD *)v760 + 2) = v758;
      *v757 = (uint64_t *)v760;
      v761 = (uint64_t *)v760;
      if (*v1034)
      {
        v1034 = (uint64_t *)*v1034;
        v761 = *v757;
      }
      sub_2231A9A8C(v1035, v761);
      ++v1036;
    }
    v762 = *((_QWORD *)v760 + 5);
    v763 = *((_QWORD *)v760 + 6);
    v764 = (uint64_t *)(v760 + 40);
    if (v762 == v763)
      continue;
    v765 = v1038;
    v766 = &v1038;
LABEL_1460:
    v767 = v766;
    if (v765)
    {
      while (1)
      {
        v766 = (uint64_t **)v765;
        v768 = *((unsigned __int8 *)v765 + 32);
        if (v755 < v768)
        {
          v765 = *v766;
          goto LABEL_1460;
        }
        if (v768 >= v755)
          break;
        v765 = v766[1];
        if (!v765)
        {
          v767 = v766 + 1;
          goto LABEL_1465;
        }
      }
      v769 = v766;
    }
    else
    {
LABEL_1465:
      v769 = operator new(0x30uLL);
      v769[32] = v755;
      *((_QWORD *)v769 + 5) = 0;
      *(_QWORD *)v769 = 0;
      *((_QWORD *)v769 + 1) = 0;
      *((_QWORD *)v769 + 2) = v766;
      *v767 = (uint64_t *)v769;
      v770 = (uint64_t *)v769;
      if (*v1037)
      {
        v1037 = (uint64_t **)*v1037;
        v770 = *v767;
      }
      sub_2231A9A8C(v1038, v770);
      ++v1039;
    }
    sub_22456D250("%sglobal_pointcloud.obj", (std::string *)v1150, *((_QWORD *)v769 + 5), *(_QWORD *)&v865);
    *(_OWORD *)__p = *(_OWORD *)v1150;
    *(_QWORD *)&__p[16] = *(_QWORD *)&v1150[16];
    memset(v1150, 0, 24);
    if (*(char *)(v6 + 23) < 0)
      sub_223197FA4(&v1112, *(void **)v6, *(_QWORD *)(v6 + 8));
    else
      v1112 = *(std::string *)v6;
    sub_22319C30C((uint64_t)&v1112, (std::__fs::filesystem::path *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v1150[23] & 0x80000000) != 0)
      operator delete(*(void **)v1150);
    if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v771 = &v1112;
    else
      v771 = (std::string *)v1112.__r_.__value_.__r.__words[0];
    v772 = sub_22414BFC0(v771, v764, v923);
    if (v772)
    {
      v773 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v773 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error capturing global point cloud: %s", 0x26uLL);
      sub_2238CE8E8(&v931);
      if (**(int **)(v931 + 56) <= 5)
      {
        v774 = *(unsigned __int8 *)(v931 + 72);
        v775 = sub_22322F254(v931, "OSLogSurrogateAppender", 1, 0);
        v776 = v775;
        if (v774 || v775)
        {
          *(_QWORD *)v1150 = &v931;
          *(std::chrono::steady_clock::time_point *)&v1150[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v1150[16] = std::chrono::system_clock::now();
          *(_DWORD *)&v1150[24] = 5;
          v1151 = "unknown file";
          LODWORD(v1152) = 919;
          *((_QWORD *)&v1152 + 1) = "unknown function";
          v1153 = 0;
          v1154 = 0;
          v777 = &v1112;
          if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v777 = (std::string *)v1112.__r_.__value_.__r.__words[0];
          __sc = (char *)v777;
          v778 = **(_QWORD **)v1150;
          if (*(char *)(**(_QWORD **)v1150 + 39) < 0)
          {
            v780 = *(const char **)(v778 + 16);
            v779 = *(_QWORD *)(v778 + 24);
          }
          else
          {
            v779 = *(unsigned __int8 *)(**(_QWORD **)v1150 + 39);
            v780 = (const char *)(**(_QWORD **)v1150 + 16);
          }
          v918 = v772;
          v900 = **(_QWORD **)v1150 + 16;
          v907 = **(_QWORD **)v1150;
          v781 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v781 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v990);
            sub_223199C58("com.apple.cv3d", (unint64_t)v990, byte_255788F40);
            if (v991[0] && SHIBYTE(v990[2]) < 0)
              operator delete(v990[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
            v6 = v883;
          }
          if (byte_255788F40[23] >= 0)
            v782 = byte_255788F40;
          else
            v782 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v783 = byte_255788F40[23];
          else
            v783 = *(_QWORD *)&byte_255788F40[8];
          *(_QWORD *)__p = os_log_create(v782, v780);
          if (v783 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v783 >= 0x17)
          {
            v785 = v780;
            v786 = v774;
            v787 = (v783 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v783 | 7) != 0x17)
              v787 = v783 | 7;
            v788 = v787 + 1;
            v784 = operator new(v787 + 1);
            *(_QWORD *)&__p[24] = v788 | 0x8000000000000000;
            *(_QWORD *)&__p[8] = v784;
            *(_QWORD *)&__p[16] = v783;
            v774 = v786;
            v780 = v785;
          }
          else
          {
            __p[31] = v783;
            v784 = &__p[8];
            if (!v783)
            {
LABEL_1504:
              v784[v783] = 0;
              __p[32] = 1;
              if (v779 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v779 >= 0x17)
              {
                v790 = (v779 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v779 | 7) != 0x17)
                  v790 = v779 | 7;
                v791 = v790 + 1;
                v789 = operator new(v790 + 1);
                v1197 = (const char *)(v791 | 0x8000000000000000);
                *(_QWORD *)&__p[40] = v789;
                *(_QWORD *)&__p[48] = v779;
              }
              else
              {
                HIBYTE(v1197) = v779;
                v789 = &__p[40];
                if (!v779)
                {
LABEL_1512:
                  v789[v779] = 0;
                  LOBYTE(v1198) = 1;
                  v792 = *(NSObject **)__p;
                  if (SHIBYTE(v1197) < 0)
                    operator delete(*(void **)&__p[40]);
                  if (__p[32] && (__p[31] & 0x80000000) != 0)
                    operator delete(*(void **)&__p[8]);
                  if (*(_QWORD *)__p)
                    os_release(*(void **)__p);
                  if (!v776 || !*(_QWORD *)(v776 + 24))
                  {
                    os_log_type_enabled(v792, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)__p = 136315138;
                    *(_QWORD *)&__p[4] = __sc;
                    LODWORD(v865) = 12;
                    v799 = (void *)_os_log_send_and_compose_impl();
                    if (v799)
                      free(v799);
                    goto LABEL_1590;
                  }
                  v793 = _os_log_pack_size();
                  v794 = operator new(v793, (std::align_val_t)8uLL);
                  v795 = (_QWORD *)operator new();
                  *v795 = &off_24EC1F7F0;
                  v795[1] = 0;
                  v795[2] = 0;
                  v795[3] = v794;
                  v990[0] = v794;
                  v990[1] = v794;
                  v990[2] = v795;
                  *(_QWORD *)v991 = 0;
                  *(_QWORD *)&v991[8] = 0;
                  v796 = strlen(__sc);
                  if (v796 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v797 = v796;
                  v876 = v774;
                  if (v796 >= 0x17)
                  {
                    v800 = (v796 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v796 | 7) != 0x17)
                      v800 = v796 | 7;
                    v801 = v800 + 1;
                    v798 = operator new(v800 + 1);
                    *(_QWORD *)&__dst[16] = v801 | 0x8000000000000000;
                    *(_QWORD *)__dst = v798;
                    *(_QWORD *)&__dst[8] = v797;
                  }
                  else
                  {
                    __dst[23] = v796;
                    v798 = __dst;
                    if (!v796)
                    {
LABEL_1531:
                      v798[v797] = 0;
                      v802 = *(_QWORD *)__dst;
                      *(_QWORD *)&v1072 = *(_QWORD *)&__dst[8];
                      *(_QWORD *)((char *)&v1072 + 7) = *(_QWORD *)&__dst[15];
                      v803 = __dst[23];
                      v804 = operator new(0x38uLL);
                      v804[1] = 0;
                      v804[2] = 0;
                      v804[3] = off_24EC1FA48;
                      *v804 = &off_24EC1F9F8;
                      v805 = v1072;
                      v804[4] = v802;
                      v804[5] = v805;
                      *(_QWORD *)((char *)v804 + 47) = *(_QWORD *)((char *)&v1072 + 7);
                      *((_BYTE *)v804 + 55) = v803;
                      *(_QWORD *)&v1072 = 0;
                      *(_QWORD *)((char *)&v1072 + 7) = 0;
                      v806 = *(std::__shared_weak_count **)&v991[8];
                      *(_QWORD *)v991 = v804 + 3;
                      *(_QWORD *)&v991[8] = v804;
                      if (v806)
                      {
                        v807 = (unint64_t *)&v806->__shared_owners_;
                        do
                          v808 = __ldaxr(v807);
                        while (__stlxr(v808 - 1, v807));
                        if (!v808)
                        {
                          ((void (*)(std::__shared_weak_count *))v806->__on_zero_shared)(v806);
                          std::__shared_weak_count::__release_weak(v806);
                        }
                      }
                      *(_OWORD *)__p = *(_OWORD *)v990;
                      v809 = *(_QWORD *)v991;
                      *(void **)&__p[16] = v990[2];
                      if (v990[2])
                      {
                        v810 = (unint64_t *)((char *)v990[2] + 8);
                        do
                          v811 = __ldxr(v810);
                        while (__stxr(v811 + 1, v810));
                      }
                      v812 = *(std::__shared_weak_count **)&v991[8];
                      *(_QWORD *)&__p[24] = v809;
                      *(_QWORD *)&__p[32] = *(_QWORD *)&v991[8];
                      if (*(_QWORD *)&v991[8])
                      {
                        v813 = (unint64_t *)(*(_QWORD *)&v991[8] + 8);
                        do
                          v814 = __ldxr(v813);
                        while (__stxr(v814 + 1, v813));
                        *(_QWORD *)&__p[40] = v809;
                        do
                          v815 = __ldaxr(v813);
                        while (__stlxr(v815 - 1, v813));
                        v6 = v883;
                        if (!v815)
                        {
                          ((void (*)(std::__shared_weak_count *))v812->__on_zero_shared)(v812);
                          std::__shared_weak_count::__release_weak(v812);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&__p[40] = v809;
                        v6 = v883;
                      }
                      v816 = (std::__shared_weak_count *)v990[2];
                      if (v990[2])
                      {
                        v817 = (unint64_t *)((char *)v990[2] + 8);
                        do
                          v818 = __ldaxr(v817);
                        while (__stlxr(v818 - 1, v817));
                        if (!v818)
                        {
                          ((void (*)(std::__shared_weak_count *))v816->__on_zero_shared)(v816);
                          std::__shared_weak_count::__release_weak(v816);
                        }
                      }
                      v819 = *(_QWORD *)__p;
                      if (*(char *)(*(_QWORD *)&__p[40] + 31) >= 0)
                        v820 = *(_QWORD *)&__p[40] + 8;
                      else
                        v820 = *(_QWORD *)(*(_QWORD *)&__p[40] + 8);
                      v821 = _os_log_pack_fill();
                      *(_DWORD *)v821 = 136315138;
                      *(_QWORD *)(v821 + 4) = v820;
                      v822 = (char *)operator new();
                      v823 = *(unsigned __int8 *)(v907 + 39);
                      v824 = v900;
                      if ((v823 & 0x80u) != 0)
                      {
                        v824 = *(_QWORD *)(v907 + 16);
                        v823 = *(_QWORD *)(v907 + 24);
                      }
                      *(_QWORD *)v822 = v819;
                      *(_OWORD *)(v822 + 8) = *(_OWORD *)&__p[8];
                      *(_QWORD *)&__p[8] = 0;
                      *(_QWORD *)&__p[16] = 0;
                      *(_OWORD *)(v822 + 24) = *(_OWORD *)&__p[24];
                      *(_QWORD *)&__p[24] = 0;
                      *(_QWORD *)&__p[32] = 0;
                      *((_QWORD *)v822 + 5) = v824;
                      *((_QWORD *)v822 + 6) = v823;
                      v822[56] = 16;
                      *(_QWORD *)__dst = 0;
                      v990[0] = v822;
                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v776 + 24) + 40))(*(_QWORD *)(v776 + 24), v990);
                      v825 = v990[0];
                      v990[0] = 0;
                      if (v825)
                      {
                        v826 = (std::__shared_weak_count *)*((_QWORD *)v825 + 4);
                        if (v826)
                        {
                          v827 = (unint64_t *)&v826->__shared_owners_;
                          do
                            v828 = __ldaxr(v827);
                          while (__stlxr(v828 - 1, v827));
                          if (!v828)
                          {
                            ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
                            std::__shared_weak_count::__release_weak(v826);
                          }
                        }
                        v829 = (std::__shared_weak_count *)*((_QWORD *)v825 + 2);
                        if (v829)
                        {
                          v830 = (unint64_t *)&v829->__shared_owners_;
                          do
                            v831 = __ldaxr(v830);
                          while (__stlxr(v831 - 1, v830));
                          if (!v831)
                          {
                            ((void (*)(std::__shared_weak_count *))v829->__on_zero_shared)(v829);
                            std::__shared_weak_count::__release_weak(v829);
                          }
                        }
                        MEMORY[0x227684CE8](v825, 0x10F0C40B62ED6C6);
                        v832 = *(_QWORD *)__dst;
                        *(_QWORD *)__dst = 0;
                        v6 = v883;
                        if (v832)
                        {
                          v833 = *(std::__shared_weak_count **)(v832 + 32);
                          if (v833)
                          {
                            v834 = (unint64_t *)&v833->__shared_owners_;
                            do
                              v835 = __ldaxr(v834);
                            while (__stlxr(v835 - 1, v834));
                            if (!v835)
                            {
                              ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
                              std::__shared_weak_count::__release_weak(v833);
                            }
                          }
                          v836 = *(std::__shared_weak_count **)(v832 + 16);
                          if (v836)
                          {
                            v837 = (unint64_t *)&v836->__shared_owners_;
                            do
                              v838 = __ldaxr(v837);
                            while (__stlxr(v838 - 1, v837));
                            if (!v838)
                            {
                              ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
                              std::__shared_weak_count::__release_weak(v836);
                            }
                          }
                          MEMORY[0x227684CE8](v832, 0x10F0C40B62ED6C6);
                          v6 = v883;
                        }
                      }
                      v839 = *(std::__shared_weak_count **)&__p[32];
                      v774 = v876;
                      if (*(_QWORD *)&__p[32])
                      {
                        v840 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                        do
                          v841 = __ldaxr(v840);
                        while (__stlxr(v841 - 1, v840));
                        if (!v841)
                        {
                          ((void (*)(std::__shared_weak_count *))v839->__on_zero_shared)(v839);
                          std::__shared_weak_count::__release_weak(v839);
                        }
                      }
                      v842 = *(std::__shared_weak_count **)&__p[16];
                      if (*(_QWORD *)&__p[16])
                      {
                        v843 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                        do
                          v844 = __ldaxr(v843);
                        while (__stlxr(v844 - 1, v843));
                        if (!v844)
                        {
                          ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
                          std::__shared_weak_count::__release_weak(v842);
                        }
                      }
LABEL_1590:
                      if (v774)
                      {
                        v845 = &v1112;
                        if ((v1112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v845 = (std::string *)v1112.__r_.__value_.__r.__words[0];
                        sub_22322C138((uint64_t)v1150, "Error capturing global point cloud: %s", (const char *)v845);
                        sub_223182C08((uint64_t)v1150);
                      }
                      sub_223182C08((uint64_t)v1150);
                      v846 = v1154;
                      if (v1154)
                      {
                        v847 = (unint64_t *)&v1154->__shared_owners_;
                        do
                          v848 = __ldaxr(v847);
                        while (__stlxr(v848 - 1, v847));
                        if (!v848)
                        {
                          ((void (*)(std::__shared_weak_count *))v846->__on_zero_shared)(v846);
                          std::__shared_weak_count::__release_weak(v846);
                        }
                      }
                      v772 = v918;
                      goto LABEL_1600;
                    }
                  }
                  memcpy(v798, __sc, v797);
                  goto LABEL_1531;
                }
              }
              memmove(v789, v780, v779);
              goto LABEL_1512;
            }
          }
          memmove(v784, v782, v783);
          goto LABEL_1504;
        }
      }
    }
LABEL_1600:
    if (SHIBYTE(v1112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1112.__r_.__value_.__l.__data_);
    if (v772)
      goto LABEL_1609;
  }
  (*(void (**)(void **__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v923 + 376))(v990, v923, &v1043, 16);
  if (!v990[1])
  {
    sub_2238DCCE0((uint64_t)__p, (uint64_t)&v1043);
    if (__p[23] >= 0)
      v862 = __p;
    else
      v862 = *(_BYTE **)__p;
    if (__p[23] >= 0)
      v863 = __p[23];
    else
      v863 = *(_QWORD *)&__p[8];
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 927, (uint64_t)"", 0, (uint64_t)v862, v863, (void (*)(void **))sub_22457406C);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    abort();
  }
  __p[0] = 3;
  v849 = (char *)operator new(0x18uLL);
  v849[23] = 9;
  strcpy(v849, "keyframes");
  *(_QWORD *)&__p[8] = v849;
  *(_QWORD *)&__p[16] = __p;
  __p[24] = 1;
  *(_QWORD *)&__p[40] = 0;
  __p[32] = 2;
  v850 = operator new(0x18uLL);
  *v850 = 0;
  v850[1] = 0;
  v850[2] = 0;
  sub_22379A290(v850, (uint64_t)v946, (uint64_t)v947, (v947 - (_BYTE *)v946) >> 4);
  *(_QWORD *)&__p[40] = v850;
  *(_QWORD *)&__p[48] = &__p[32];
  LOBYTE(v1197) = 1;
  sub_2237995F8((uint64_t)v1150, (uint64_t)__p, 2, 1, 2);
  *(_QWORD *)&v1150[16] = v1150;
  v1150[24] = 1;
  sub_2237995F8((uint64_t)__dst, (uint64_t)v1150, 1, 1, 2);
  sub_223454278((uint64_t *)&v1150[8], v1150[0]);
  sub_223454278((uint64_t *)&__p[40], __p[32]);
  sub_223454278((uint64_t *)&__p[8], __p[0]);
  *(_OWORD *)v1150 = xmmword_2246546D0;
  v1150[16] = 1;
  sub_224533734(__dst, (uint64_t)v1150, __p);
  v851 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v990[1] + 16))(v990[1]);
  if (__p[23] >= 0)
    v852 = __p;
  else
    v852 = *(_BYTE **)__p;
  if (__p[23] >= 0)
    v853 = __p[23];
  else
    v853 = *(_QWORD *)&__p[8];
  sub_2231813E8(v851, (uint64_t)v852, v853);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_223454278((uint64_t *)&__dst[8], __dst[0]);
  sub_2242BB4F8((uint64_t)v990);
  v219 = 1;
LABEL_1620:
  v854 = (uint64_t *)v946;
  if (v946)
  {
    v855 = v946;
    if (v947 != v946)
    {
      v856 = (uint64_t *)(v947 - 8);
      do
      {
        v857 = v856 - 1;
        sub_223454278(v856, *((unsigned __int8 *)v856 - 8));
        v856 -= 2;
      }
      while (v857 != v854);
      v855 = v946;
    }
    v947 = (char *)v854;
    operator delete(v855);
  }
  if (v949)
  {
    v950 = (uint64_t *)v949;
    operator delete(v949);
  }
  sub_22322797C(&v952, v304, v305, v306, v307, v308);
  sub_2238E8900(v1035);
  sub_2233FADDC(v1038);
  sub_2242BB4F8((uint64_t)&v1041);
  if ((SHIBYTE(v1375) & 0x80000000) == 0)
    goto LABEL_457;
LABEL_479:
  operator delete((void *)v1374);
  if ((SHIBYTE(v1373) & 0x80000000) == 0)
    goto LABEL_458;
LABEL_480:
  operator delete((void *)v1372);
  if ((SHIBYTE(v1371) & 0x80000000) == 0)
    goto LABEL_459;
LABEL_481:
  operator delete((void *)v1370);
  if ((SHIBYTE(v1369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_460;
LABEL_482:
  operator delete(v1369.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1368) & 0x80000000) == 0)
    goto LABEL_461;
LABEL_483:
  operator delete((void *)v1367);
  if ((SHIBYTE(v1366.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_462;
LABEL_484:
  operator delete(v1366.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1365) & 0x80000000) == 0)
    goto LABEL_463;
LABEL_485:
  operator delete((void *)v1364);
  if ((SHIBYTE(v1363) & 0x80000000) == 0)
    goto LABEL_464;
LABEL_486:
  operator delete((void *)v1362);
  if ((SHIBYTE(v1361) & 0x80000000) == 0)
    goto LABEL_465;
LABEL_487:
  operator delete((void *)v1360);
  if ((SHIBYTE(v1044) & 0x80000000) == 0)
    goto LABEL_466;
LABEL_488:
  operator delete((void *)v1043);
  if ((SHIBYTE(v1046) & 0x80000000) == 0)
    goto LABEL_467;
LABEL_489:
  operator delete((void *)v1045);
  if ((SHIBYTE(v1048) & 0x80000000) == 0)
    goto LABEL_468;
LABEL_490:
  operator delete((void *)v1047);
  if ((SHIBYTE(v1050) & 0x80000000) == 0)
    goto LABEL_469;
LABEL_491:
  operator delete((void *)v1049);
  if ((SHIBYTE(v1052) & 0x80000000) == 0)
    goto LABEL_470;
LABEL_492:
  operator delete((void *)v1051);
  if ((SHIBYTE(v1054) & 0x80000000) == 0)
    goto LABEL_471;
LABEL_493:
  operator delete((void *)v1053);
  if ((SHIBYTE(v1055.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_472;
LABEL_494:
  operator delete(v1055.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1057) & 0x80000000) == 0)
    goto LABEL_473;
LABEL_495:
  operator delete((void *)v1056);
  if ((SHIBYTE(v1058.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_474;
LABEL_496:
  operator delete(v1058.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1060) & 0x80000000) == 0)
    goto LABEL_475;
LABEL_497:
  operator delete((void *)v1059);
  if ((SHIBYTE(v1062) & 0x80000000) == 0)
    goto LABEL_476;
LABEL_498:
  operator delete((void *)v1061);
  if (SHIBYTE(v1064) < 0)
LABEL_499:
    operator delete((void *)v1063);
  return v219;
}

void sub_2238DAB94(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xCC8]) && SLOBYTE(STACK[0xCC7]) < 0)
    operator delete((void *)STACK[0xCB0]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0xB20]);
  if (SLOBYTE(STACK[0x13A7]) < 0)
  {
    operator delete((void *)STACK[0x1390]);
    if ((SLOBYTE(STACK[0x138F]) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((SLOBYTE(STACK[0x138F]) & 0x80000000) == 0)
  {
LABEL_6:
    if (SLOBYTE(STACK[0x1377]) < 0)
      goto LABEL_7;
    goto LABEL_41;
  }
  operator delete((void *)STACK[0x1378]);
  if (SLOBYTE(STACK[0x1377]) < 0)
  {
LABEL_7:
    operator delete((void *)STACK[0x1360]);
    if ((SLOBYTE(STACK[0x135F]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  if ((SLOBYTE(STACK[0x135F]) & 0x80000000) == 0)
  {
LABEL_8:
    if (SLOBYTE(STACK[0x1347]) < 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  operator delete((void *)STACK[0x1348]);
  if (SLOBYTE(STACK[0x1347]) < 0)
  {
LABEL_9:
    operator delete((void *)STACK[0x1330]);
    if ((SLOBYTE(STACK[0x132F]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  if ((SLOBYTE(STACK[0x132F]) & 0x80000000) == 0)
  {
LABEL_10:
    if (SLOBYTE(STACK[0x1317]) < 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  operator delete((void *)STACK[0x1318]);
  if (SLOBYTE(STACK[0x1317]) < 0)
  {
LABEL_11:
    operator delete((void *)STACK[0x1300]);
    if ((SLOBYTE(STACK[0x12FF]) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  if ((SLOBYTE(STACK[0x12FF]) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SLOBYTE(STACK[0x12E7]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_46:
  operator delete((void *)STACK[0x12E8]);
  if ((SLOBYTE(STACK[0x12E7]) & 0x80000000) == 0)
  {
LABEL_14:
    if (SLOBYTE(STACK[0x627]) < 0)
      operator delete((void *)STACK[0x610]);
    if (SLOBYTE(STACK[0x647]) < 0)
      operator delete((void *)STACK[0x630]);
    if (SLOBYTE(STACK[0x667]) < 0)
      operator delete((void *)STACK[0x650]);
    if (SLOBYTE(STACK[0x687]) < 0)
      operator delete((void *)STACK[0x670]);
    if (SLOBYTE(STACK[0x6A7]) < 0)
      operator delete((void *)STACK[0x690]);
    if (SLOBYTE(STACK[0x6C7]) < 0)
      operator delete((void *)STACK[0x6B0]);
    if (SLOBYTE(STACK[0x6E7]) < 0)
      operator delete((void *)STACK[0x6D0]);
    if (SLOBYTE(STACK[0x707]) < 0)
      operator delete((void *)STACK[0x6F0]);
    if (SLOBYTE(STACK[0x727]) < 0)
      operator delete((void *)STACK[0x710]);
    if (SLOBYTE(STACK[0x747]) < 0)
      operator delete((void *)STACK[0x730]);
    if (SLOBYTE(STACK[0x767]) < 0)
      operator delete((void *)STACK[0x750]);
    if (SLOBYTE(STACK[0x787]) < 0)
      operator delete((void *)STACK[0x770]);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete((void *)STACK[0x12D0]);
  goto LABEL_14;
}

uint64_t sub_2238DC118(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_2238E8ADC(v4, "Error creating intrinsics file ");
  sub_22384465C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC5C388[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC5C340[v5])(&v7, v4);
  return result;
}

void sub_2238DC1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238DC1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238DC1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238DC200(std::string *a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string __dst;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 4;
  if (v4 + 4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 4;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 4;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a2;
  else
    v12 = *a2;
  memmove(p_dst, v12, v4);
LABEL_15:
  strcpy((char *)p_dst + v4, "%.8f");
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  *a1 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_2238DC334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238DC350(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  std::string *v8;
  char *v9;
  int v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned __int8 v24;
  __int16 v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE *v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *exception;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50[2];
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  void *v55;
  std::__shared_weak_count *v56;
  char v57;
  __int128 v58;
  __int128 v59;
  char v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  char v66;
  char v67;
  __int128 v68;
  void *__p[2];
  int v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  char v79;
  std::string v80;
  char v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  char v87;
  char v88;
  char v89;
  int v90;
  _QWORD v91[2];

  memset(&v80, 0, sizeof(v80));
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::string *)a3;
  else
    v8 = *(std::string **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  sub_2231816F0(&v80, v8, (std::string *)((char *)v8 + v7));
  (*(void (**)(uint64_t *__return_ptr, _QWORD, std::string *, uint64_t))(*(_QWORD *)*a1 + 376))(&v40, *a1, &v80, 16);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
  v10 = *a4;
  *(_QWORD *)&v68 = &off_24EC1F8C8;
  v12 = *(void **)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *((_QWORD *)&v58 + 1) = v11;
    v56 = v11;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = *(_QWORD *)(a2 + 80);
    v17 = *(void **)(a2 + 92);
    v18 = *(_DWORD *)(a2 + 108);
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  else
  {
    *((_QWORD *)&v58 + 1) = 0;
    v56 = 0;
    v16 = *(_QWORD *)(a2 + 80);
    v17 = *(void **)(a2 + 92);
    v18 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)&v58 = v12;
  v55 = v12;
  *((_QWORD *)&v68 + 1) = v12;
  __p[0] = v11;
  __p[1] = v17;
  v70 = v18;
  v72 = v16;
  LODWORD(v73) = 29;
  if (!v12)
  {
    WORD2(v73) = 0;
    if (!v11)
      goto LABEL_36;
    goto LABEL_32;
  }
  if (v11)
  {
    v20 = (unint64_t *)&v11->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 104))(v12);
  if ((v23 & 0xFFFFFFu) <= 0x10000)
    v24 = 0;
  else
    v24 = v23;
  v25 = v23 & 0xFF00;
  if ((v23 & 0xFF0000) == 0)
    v25 = 0;
  v11 = v56;
  WORD2(v73) = v25 & 0xFF00 | v24;
  if (v56)
  {
LABEL_32:
    v26 = (unint64_t *)&v11->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_36:
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_224160FB8(&v68, v9, v10, (uint64_t)&v80);
  v31 = (std::__shared_weak_count *)__p[0];
  if (!__p[0])
    goto LABEL_45;
  v32 = (unint64_t *)((char *)__p[0] + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (v89)
      goto LABEL_46;
  }
  else
  {
LABEL_45:
    if (v89)
    {
LABEL_46:
      v54 = 1;
      goto LABEL_81;
    }
  }
  v91[0] = "save";
  v91[1] = 4;
  v90 = v10;
  sub_224160DE4("Failure during ", (uint64_t)v91, (uint64_t)" from stream with file format ", &v90, (uint64_t)": ");
  if (v89)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  sub_22456BA60(&v55, (__int128 *)&v80, (uint64_t)&v58);
  v68 = v58;
  v34 = sub_22319FFBC(__p, &v59);
  v43 = v68;
  LOBYTE(v44) = 0;
  v53 = 0;
  if (v79)
  {
    v46 = 0;
    v35 = v72;
    if ((_BYTE)v72)
    {
      v44 = *(_OWORD *)v34;
      v45 = *((_QWORD *)v34 + 2);
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = 0;
      *(_QWORD *)v34 = 0;
      v46 = 1;
    }
    LOBYTE(v47) = 0;
    v52 = 0;
    if (v78)
    {
      v48 = v74;
      v47 = v73;
      v73 = 0uLL;
      v49 = v75;
      *(_OWORD *)v50 = v76;
      v51 = v77;
      v74 = 0;
      v76 = 0uLL;
      v77 = 0;
      v52 = 1;
    }
    v53 = 1;
    v54 = 0;
    if (v35 && v71 < 0)
      operator delete(__p[0]);
    if (!v67)
      goto LABEL_68;
    goto LABEL_60;
  }
  v54 = 0;
  if (v67)
  {
LABEL_60:
    if (v66)
    {
      if (v65 < 0)
        operator delete(v64);
      if (v63 < 0)
        operator delete(v62);
    }
    if (v61 && v60 < 0)
      operator delete((void *)v59);
  }
LABEL_68:
  if (v57 < 0)
  {
    operator delete(v55);
    if (v89)
      goto LABEL_81;
  }
  else if (v89)
  {
    goto LABEL_81;
  }
  if (v88)
  {
    if (v87)
    {
      if (v86 < 0)
        operator delete(v85);
      if (v84 < 0)
        operator delete(v83);
    }
    if (v82 && v81 < 0)
      operator delete((void *)v80.__r_.__value_.__r.__words[2]);
  }
LABEL_81:
  sub_22319FC44((uint64_t)&v43);
  if (!v54 && v53)
  {
    if (v52)
    {
      if (SHIBYTE(v51) < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v48) < 0)
        operator delete((void *)v47);
    }
    if (v46 && SHIBYTE(v45) < 0)
      operator delete((void *)v44);
  }
  v36 = v42;
  if (v42)
  {
    v37 = (unint64_t *)&v42->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_2238DC8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;

  sub_22319723C((uint64_t)&a35);
  if (a34 < 0)
    operator delete(__p);
  sub_223197D38(v52 - 200);
  sub_2242BB4F8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2238DC960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223197D38((uint64_t)va1);
  sub_2242BB4F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238DC97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_22319A5E0((uint64_t)&a47);
  sub_2242BB4F8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2238DC998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2242BB4F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238DC9AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238DC9CC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2238DCA34(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Scene type file cannot be created ";
  v4[1] = 34;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_2238DCAC4(std::string *this, float *a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  float *v11;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v14;
  float *i;
  std::string *v16;
  std::string::size_type v17;
  std::string __p;

  v6 = a2 - a3;
  if (v6 >= -1)
    v7 = -1;
  else
    v7 = a2 - a3;
  v8 = ~v7;
  v9 = 0;
  v10 = (char *)a2 - (char *)a3;
  if (a2 != a3)
  {
    v11 = a2;
    do
    {
      sub_22456D250("%.8f", &__p, *v11);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v9 += size;
      ++v11;
    }
    while (v11 != a3);
  }
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(this, v9 + v8);
  if (v10 < 0)
  {
    sub_22456D250("%.8f", &__p, *a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v14 = __p.__r_.__value_.__l.__size_;
    std::string::append(this, (const std::string::value_type *)p_p, v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((unint64_t)(v6 + 1) < 2)
        return;
    }
    else if ((unint64_t)(v6 + 1) < 2)
    {
      return;
    }
    for (i = a2 + 1; i != a3; ++i)
    {
      std::string::append(this, " ", 1uLL);
      sub_22456D250("%.8f", &__p, *i);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &__p;
      else
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v17 = __p.__r_.__value_.__l.__size_;
      std::string::append(this, (const std::string::value_type *)v16, v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2238DCC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238DCCE0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_2238EB9FC(v4, "Keyframes info file cannot be created ");
  sub_22384465C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC5C388[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC5C340[v5])(&v7, v4);
  return result;
}

void sub_2238DCD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238DCDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238DCDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2238DCDC8(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4, const void ***a5, const void ***a6, const void ***a7, uint64_t a8)
{
  unsigned __int8 v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  std::string *p_src;
  uint64_t v35;
  const char *v36;
  size_t v37;
  const void **v38;
  const void ***v39;
  const void **v40;
  _QWORD **v41;
  uint64_t *v42;
  uint64_t *v43;
  const void **v44;
  char *v45;
  _BYTE *v46;
  __int128 v47;
  double v48;
  std::string::size_type v49;
  _QWORD *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  const void ***v63;
  char **v64;
  char *v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  std::string *v69;
  std::string::size_type size;
  const void **v71;
  _QWORD **v72;
  char *v73;
  char *v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type v77;
  uint64_t *v78;
  const void **v79;
  _BYTE *v80;
  _QWORD *v81;
  __int128 v82;
  float *v83;
  float *v84;
  double **v85;
  std::string::size_type v86;
  _QWORD *v87;
  const void ***v88;
  const void **v89;
  _QWORD **v90;
  uint64_t *v91;
  uint64_t *v92;
  const void **v93;
  _QWORD *v94;
  std::string::size_type v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _BYTE *v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  const void ***v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  std::string *v114;
  std::string::size_type v115;
  const void **v116;
  uint64_t *v117;
  char *v118;
  _QWORD *v119;
  std::string *v120;
  std::string::size_type v121;
  const void **v122;
  uint64_t *v123;
  char *v124;
  _QWORD *v125;
  std::string *v126;
  std::string::size_type v127;
  std::string *v128;
  int v129;
  int v130;
  _BOOL8 v131;
  unsigned __int8 v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  unsigned __int8 v136;
  const char *v137;
  size_t v138;
  std::string::size_type *v139;
  std::string *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  size_t v148;
  void *v149;
  _QWORD *v150;
  size_t v151;
  size_t v152;
  _QWORD *v153;
  void *v154;
  unsigned __int8 v155;
  const char *v156;
  size_t v157;
  std::string::size_type *p_size;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  size_t v165;
  void *v166;
  _QWORD *v167;
  size_t v168;
  size_t v169;
  _QWORD *p_dst;
  void *v171;
  std::string *v172;
  uint64_t v173;
  size_t v174;
  const char *v175;
  unsigned __int8 v176;
  const char *v177;
  size_t v178;
  std::string::size_type *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  size_t v186;
  void *v187;
  _QWORD *v188;
  size_t v189;
  size_t v190;
  _QWORD *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char v196;
  _QWORD *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  char *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unsigned __int8 v209;
  const char *v210;
  size_t v211;
  std::string::size_type *v212;
  std::string *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  NSObject *v220;
  size_t v221;
  void *v222;
  _QWORD *v223;
  size_t v224;
  size_t v225;
  _QWORD *v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  char v231;
  _QWORD *v232;
  std::string::size_type v233;
  std::__shared_weak_count *v234;
  unint64_t *p_shared_owners;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::string::size_type v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  std::string::size_type v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  _QWORD *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::string *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  char v278;
  _QWORD *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  char *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  std::string::size_type v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  const char *v298;
  std::string::size_type v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  _QWORD *v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  const char *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::string::size_type v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  std::string::size_type v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  _QWORD *v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::string *v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  char v374;
  _QWORD *v375;
  uint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  char *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::string::size_type v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  const char *v395;
  std::string::size_type v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  _QWORD *v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::string *v416;
  unint64_t *v417;
  std::string *v419;
  std::string::size_type v420;
  std::string *v421;
  std::string::size_type v422;
  std::string *v423;
  std::string::size_type v424;
  std::string *v425;
  std::string::size_type v426;
  std::string *v427;
  std::string::size_type v428;
  const void ***v429;
  uint64_t *v430;
  uint64_t v431;
  const void ***v432;
  uint64_t v433;
  int v434;
  uint64_t v436;
  const char *v438;
  const char *v439;
  const char *v440;
  int v441;
  const char *v442;
  std::string v443;
  uint64_t v444;
  std::string v445;
  unsigned __int8 v446[8];
  uint64_t v447;
  unsigned __int8 v448[8];
  uint64_t *v449;
  uint64_t v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unsigned __int8 v453[8];
  uint64_t v454;
  unsigned __int8 v455[8];
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  std::__shared_weak_count *v459;
  unsigned __int8 v460[8];
  uint64_t v461;
  unsigned __int8 v462[8];
  _QWORD **v463;
  uint64_t v464;
  uint64_t v465;
  std::__shared_weak_count *v466;
  unsigned __int8 v467[8];
  uint64_t v468;
  unsigned __int8 v469[8];
  _QWORD **v470;
  uint64_t v471;
  uint64_t v472;
  std::__shared_weak_count *v473;
  unsigned __int8 v474[8];
  uint64_t v475;
  unsigned __int8 v476[8];
  _QWORD **v477;
  std::string v478;
  __int128 v479;
  _QWORD *__dst;
  __int128 v481;
  __int128 v482;
  std::__shared_weak_count *v483;
  std::string __src;
  std::string __p;
  int v486;
  const char *v487;
  int v488;
  const char *v489;
  uint64_t v490;
  std::__shared_weak_count *v491;
  std::string v492;
  __int128 v493;
  char *v494;
  uint64_t v495;
  unint64_t v496;
  char v497;
  _QWORD v498[5];

  v498[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a8 + 176))(a8, a1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a8 + 128))(a8, a1) & 1) == 0)
  {
    v22 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error creating directory: %s", 0x1CuLL);
    sub_2238CE8E8(&v482);
    if (**(int **)(v482 + 56) > 5)
      return 0;
    v23 = *(unsigned __int8 *)(v482 + 72);
    v24 = sub_22322F254(v482, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && !v24)
      return 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v482;
    __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v486 = 5;
    v487 = "unknown file";
    v488 = 945;
    v491 = 0;
    v489 = "unknown function";
    v490 = 0;
    if (*(char *)(a1 + 23) >= 0)
      v26 = (const char *)a1;
    else
      v26 = *(const char **)a1;
    v27 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
    v28 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
    v436 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
    v438 = v28;
    if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v28 = *(const char **)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
    }
    else
    {
      v29 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    }
    v441 = v23;
    v155 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v492);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v492, byte_255788F40);
      if ((_BYTE)v493 && SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v492.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v156 = byte_255788F40;
    else
      v156 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v157 = byte_255788F40[23];
    else
      v157 = *(_QWORD *)&byte_255788F40[8];
    v492.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v156, v28);
    p_size = &v492.__r_.__value_.__l.__size_;
    if (v157 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v157 >= 0x17)
    {
      v159 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v157 | 7) != 0x17)
        v159 = v157 | 7;
      v160 = v159 + 1;
      p_size = (std::string::size_type *)operator new(v159 + 1);
      v492.__r_.__value_.__r.__words[2] = v157;
      *(_QWORD *)&v493 = v160 | 0x8000000000000000;
      v492.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    }
    else
    {
      BYTE7(v493) = v157;
      if (!v157)
      {
LABEL_305:
        *((_BYTE *)p_size + v157) = 0;
        BYTE8(v493) = 1;
        v161 = (char *)&v494;
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v29 >= 0x17)
        {
          v162 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v162 = v29 | 7;
          v163 = v162 + 1;
          v161 = (char *)operator new(v162 + 1);
          v495 = v29;
          v496 = v163 | 0x8000000000000000;
          v494 = v161;
        }
        else
        {
          HIBYTE(v496) = v29;
          if (!v29)
          {
LABEL_313:
            v161[v29] = 0;
            v497 = 1;
            v164 = v492.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v496) < 0)
              operator delete(v494);
            if (BYTE8(v493) && SBYTE7(v493) < 0)
              operator delete((void *)v492.__r_.__value_.__l.__size_);
            if (v492.__r_.__value_.__r.__words[0])
              os_release(v492.__r_.__value_.__l.__data_);
            if (!v25 || !*(_QWORD *)(v25 + 24))
            {
              os_log_type_enabled(v164, OS_LOG_TYPE_ERROR);
              LODWORD(v492.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v492.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
              v171 = (void *)_os_log_send_and_compose_impl();
              if (v171)
                free(v171);
              goto LABEL_564;
            }
            v165 = _os_log_pack_size();
            v166 = operator new(v165, (std::align_val_t)8uLL);
            v167 = (_QWORD *)operator new();
            *v167 = &off_24EC1F7F0;
            v167[1] = 0;
            v167[2] = 0;
            v167[3] = v166;
            v478.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
            v478.__r_.__value_.__l.__size_ = (std::string::size_type)v166;
            v479 = 0uLL;
            v478.__r_.__value_.__r.__words[2] = (std::string::size_type)v167;
            v168 = strlen(v26);
            if (v168 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v169 = v168;
            if (v168 >= 0x17)
            {
              v228 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v168 | 7) != 0x17)
                v228 = v168 | 7;
              v229 = v228 + 1;
              p_dst = operator new(v228 + 1);
              *(_QWORD *)&v481 = v169;
              *((_QWORD *)&v481 + 1) = v229 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v481) = v168;
              p_dst = &__dst;
              if (!v168)
              {
LABEL_434:
                *((_BYTE *)p_dst + v169) = 0;
                v230 = __dst;
                __src.__r_.__value_.__r.__words[0] = v481;
                *(std::string::size_type *)((char *)__src.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v481 + 7);
                v231 = HIBYTE(v481);
                v232 = operator new(0x38uLL);
                v232[1] = 0;
                v232[2] = 0;
                v232[3] = off_24EC1FA48;
                *v232 = &off_24EC1F9F8;
                v233 = __src.__r_.__value_.__r.__words[0];
                v232[4] = v230;
                v232[5] = v233;
                *(_QWORD *)((char *)v232 + 47) = *(std::string::size_type *)((char *)__src.__r_.__value_.__r.__words + 7);
                *((_BYTE *)v232 + 55) = v231;
                __src.__r_.__value_.__r.__words[0] = 0;
                *(std::string::size_type *)((char *)__src.__r_.__value_.__r.__words + 7) = 0;
                v234 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
                *(_QWORD *)&v479 = v232 + 3;
                *((_QWORD *)&v479 + 1) = v232;
                if (v234)
                {
                  p_shared_owners = (unint64_t *)&v234->__shared_owners_;
                  do
                    v236 = __ldaxr(p_shared_owners);
                  while (__stlxr(v236 - 1, p_shared_owners));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                v492 = v478;
                if (v478.__r_.__value_.__r.__words[2])
                {
                  v237 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                  do
                    v238 = __ldxr(v237);
                  while (__stxr(v238 + 1, v237));
                }
                v493 = v479;
                if (*((_QWORD *)&v479 + 1))
                {
                  v239 = (unint64_t *)(*((_QWORD *)&v479 + 1) + 8);
                  do
                    v240 = __ldxr(v239);
                  while (__stxr(v240 + 1, v239));
                  v494 = (char *)v479;
                  do
                    v241 = __ldaxr(v239);
                  while (__stlxr(v241 - 1, v239));
                  if (!v241)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v479 + 1) + 16))(*((_QWORD *)&v479 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v479 + 1));
                  }
                }
                else
                {
                  v494 = (char *)v479;
                }
                if (v478.__r_.__value_.__r.__words[2])
                {
                  v291 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                  do
                    v292 = __ldaxr(v291);
                  while (__stlxr(v292 - 1, v291));
                  if (!v292)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v478.__r_.__value_.__r.__words[2] + 16))(v478.__r_.__value_.__r.__words[2]);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v478.__r_.__value_.__r.__words[2]);
                  }
                }
                v293 = v492.__r_.__value_.__r.__words[0];
                if (v494[31] >= 0)
                  v294 = v494 + 8;
                else
                  v294 = (char *)*((_QWORD *)v494 + 1);
                v295 = _os_log_pack_fill();
                *(_DWORD *)v295 = 136315138;
                *(_QWORD *)(v295 + 4) = v294;
                v296 = operator new();
                v297 = *(unsigned __int8 *)(v436 + 39);
                v298 = v438;
                if ((v297 & 0x80u) != 0)
                {
                  v298 = *(const char **)(v436 + 16);
                  v297 = *(_QWORD *)(v436 + 24);
                }
                *(_QWORD *)v296 = v293;
                *(_OWORD *)(v296 + 8) = *(_OWORD *)&v492.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v492.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v296 + 24) = v493;
                v493 = 0uLL;
                *(_QWORD *)(v296 + 40) = v298;
                *(_QWORD *)(v296 + 48) = v297;
                *(_BYTE *)(v296 + 56) = 16;
                __dst = 0;
                v478.__r_.__value_.__r.__words[0] = v296;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), &v478);
                v299 = v478.__r_.__value_.__r.__words[0];
                v478.__r_.__value_.__r.__words[0] = 0;
                if (v299)
                {
                  v300 = *(std::__shared_weak_count **)(v299 + 32);
                  if (v300)
                  {
                    v301 = (unint64_t *)&v300->__shared_owners_;
                    do
                      v302 = __ldaxr(v301);
                    while (__stlxr(v302 - 1, v301));
                    if (!v302)
                    {
                      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                      std::__shared_weak_count::__release_weak(v300);
                    }
                  }
                  v303 = *(std::__shared_weak_count **)(v299 + 16);
                  if (v303)
                  {
                    v304 = (unint64_t *)&v303->__shared_owners_;
                    do
                      v305 = __ldaxr(v304);
                    while (__stlxr(v305 - 1, v304));
                    if (!v305)
                    {
                      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                      std::__shared_weak_count::__release_weak(v303);
                    }
                  }
                  MEMORY[0x227684CE8](v299, 0x10F0C40B62ED6C6);
                  v306 = __dst;
                  __dst = 0;
                  if (v306)
                  {
                    v307 = (std::__shared_weak_count *)v306[4];
                    if (v307)
                    {
                      v308 = (unint64_t *)&v307->__shared_owners_;
                      do
                        v309 = __ldaxr(v308);
                      while (__stlxr(v309 - 1, v308));
                      if (!v309)
                      {
                        ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                        std::__shared_weak_count::__release_weak(v307);
                      }
                    }
                    v310 = (std::__shared_weak_count *)v306[2];
                    if (v310)
                    {
                      v311 = (unint64_t *)&v310->__shared_owners_;
                      do
                        v312 = __ldaxr(v311);
                      while (__stlxr(v312 - 1, v311));
                      if (!v312)
                      {
                        ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                        std::__shared_weak_count::__release_weak(v310);
                      }
                    }
                    MEMORY[0x227684CE8](v306, 0x10F0C40B62ED6C6);
                  }
                }
                v313 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
                v23 = v441;
                if (*((_QWORD *)&v493 + 1))
                {
                  v314 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
                  do
                    v315 = __ldaxr(v314);
                  while (__stlxr(v315 - 1, v314));
                  if (!v315)
                  {
                    ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                    std::__shared_weak_count::__release_weak(v313);
                  }
                }
                v316 = (std::__shared_weak_count *)v492.__r_.__value_.__r.__words[2];
                if (v492.__r_.__value_.__r.__words[2])
                {
                  v317 = (unint64_t *)(v492.__r_.__value_.__r.__words[2] + 8);
                  do
                    v318 = __ldaxr(v317);
                  while (__stlxr(v318 - 1, v317));
                  if (!v318)
                  {
                    ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                    std::__shared_weak_count::__release_weak(v316);
                  }
                }
LABEL_564:
                if (v23)
                {
                  if (*(char *)(a1 + 23) >= 0)
                    v319 = (const char *)a1;
                  else
                    v319 = *(const char **)a1;
                  sub_22322C138((uint64_t)&__p, "Error creating directory: %s", v319);
                  sub_223182C08((uint64_t)&__p);
                }
                sub_223182C08((uint64_t)&__p);
                v320 = v491;
                if (v491)
                {
                  v321 = (unint64_t *)&v491->__shared_owners_;
                  do
                    v322 = __ldaxr(v321);
                  while (__stlxr(v322 - 1, v321));
                  if (!v322)
                  {
                    ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                    std::__shared_weak_count::__release_weak(v320);
                  }
                }
                return 0;
              }
            }
            memcpy(p_dst, v26, v169);
            goto LABEL_434;
          }
        }
        memmove(v161, v28, v29);
        goto LABEL_313;
      }
    }
    memmove(p_size, v156, v157);
    goto LABEL_305;
  }
  memset(&v492, 0, sizeof(v492));
  sub_2231816F0(&v492, (std::string *)"rooms", (std::string *)"");
  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__src, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __src = *(std::string *)a1;
  sub_22319C30C((uint64_t)&__src, (std::__fs::filesystem::path *)&v492);
  if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v492.__r_.__value_.__l.__data_);
  if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)a8 + 176))(a8, &__src)
    && (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a8 + 240))(a8, &__src) == -1)
  {
    v30 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error removing rooms directory: %s", 0x22uLL);
    sub_2238CE8E8(&v471);
    if (**(int **)(v471 + 56) > 5)
      goto LABEL_734;
    v31 = *(unsigned __int8 *)(v471 + 72);
    v32 = sub_22322F254(v471, "OSLogSurrogateAppender", 1, 0);
    v33 = v32;
    if (!v31 && !v32)
      goto LABEL_734;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v471;
    __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v486 = 5;
    v487 = "unknown file";
    v488 = 952;
    v491 = 0;
    v489 = "unknown function";
    v490 = 0;
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_src = &__src;
    else
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    v35 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
    v36 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
    v440 = v36;
    if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v36 = *(const char **)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
    }
    else
    {
      v37 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    }
    v209 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v209 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v492);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v492, byte_255788F40);
      if ((_BYTE)v493 && SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v492.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v210 = byte_255788F40;
    else
      v210 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v211 = byte_255788F40[23];
    else
      v211 = *(_QWORD *)&byte_255788F40[8];
    v492.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v210, v36);
    v212 = &v492.__r_.__value_.__l.__size_;
    if (v211 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v211 >= 0x17)
    {
      v213 = p_src;
      v214 = v31;
      v215 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v211 | 7) != 0x17)
        v215 = v211 | 7;
      v216 = v215 + 1;
      v212 = (std::string::size_type *)operator new(v215 + 1);
      v492.__r_.__value_.__r.__words[2] = v211;
      *(_QWORD *)&v493 = v216 | 0x8000000000000000;
      v492.__r_.__value_.__l.__size_ = (std::string::size_type)v212;
      v31 = v214;
      p_src = v213;
    }
    else
    {
      BYTE7(v493) = v211;
      if (!v211)
      {
LABEL_407:
        *((_BYTE *)v212 + v211) = 0;
        BYTE8(v493) = 1;
        v217 = (char *)&v494;
        if (v37 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v37 >= 0x17)
        {
          v218 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17)
            v218 = v37 | 7;
          v219 = v218 + 1;
          v217 = (char *)operator new(v218 + 1);
          v495 = v37;
          v496 = v219 | 0x8000000000000000;
          v494 = v217;
        }
        else
        {
          HIBYTE(v496) = v37;
          if (!v37)
          {
LABEL_415:
            v217[v37] = 0;
            v497 = 1;
            v220 = v492.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v496) < 0)
              operator delete(v494);
            if (BYTE8(v493) && SBYTE7(v493) < 0)
              operator delete((void *)v492.__r_.__value_.__l.__size_);
            if (v492.__r_.__value_.__r.__words[0])
              os_release(v492.__r_.__value_.__l.__data_);
            if (!v33 || !*(_QWORD *)(v33 + 24))
            {
              os_log_type_enabled(v220, OS_LOG_TYPE_ERROR);
              LODWORD(v492.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v492.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_src;
              v227 = (void *)_os_log_send_and_compose_impl();
              if (v227)
                free(v227);
              goto LABEL_725;
            }
            v221 = _os_log_pack_size();
            v222 = operator new(v221, (std::align_val_t)8uLL);
            v223 = (_QWORD *)operator new();
            *v223 = &off_24EC1F7F0;
            v223[1] = 0;
            v223[2] = 0;
            v223[3] = v222;
            v478.__r_.__value_.__r.__words[0] = (std::string::size_type)v222;
            v478.__r_.__value_.__l.__size_ = (std::string::size_type)v222;
            v479 = 0uLL;
            v478.__r_.__value_.__r.__words[2] = (std::string::size_type)v223;
            v224 = strlen((const char *)p_src);
            if (v224 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v225 = v224;
            if (v224 >= 0x17)
            {
              v371 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v224 | 7) != 0x17)
                v371 = v224 | 7;
              v372 = v371 + 1;
              v226 = operator new(v371 + 1);
              *(_QWORD *)&v481 = v225;
              *((_QWORD *)&v481 + 1) = v372 | 0x8000000000000000;
              __dst = v226;
            }
            else
            {
              HIBYTE(v481) = v224;
              v226 = &__dst;
              if (!v224)
              {
LABEL_666:
                *((_BYTE *)v226 + v225) = 0;
                v373 = __dst;
                *(_QWORD *)&v482 = v481;
                *(_QWORD *)((char *)&v482 + 7) = *(_QWORD *)((char *)&v481 + 7);
                v374 = HIBYTE(v481);
                v375 = operator new(0x38uLL);
                v375[1] = 0;
                v375[2] = 0;
                v375[3] = off_24EC1FA48;
                *v375 = &off_24EC1F9F8;
                v376 = v482;
                v375[4] = v373;
                v375[5] = v376;
                *(_QWORD *)((char *)v375 + 47) = *(_QWORD *)((char *)&v482 + 7);
                *((_BYTE *)v375 + 55) = v374;
                *(_QWORD *)&v482 = 0;
                *(_QWORD *)((char *)&v482 + 7) = 0;
                v377 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
                *(_QWORD *)&v479 = v375 + 3;
                *((_QWORD *)&v479 + 1) = v375;
                if (v377)
                {
                  v378 = (unint64_t *)&v377->__shared_owners_;
                  do
                    v379 = __ldaxr(v378);
                  while (__stlxr(v379 - 1, v378));
                  if (!v379)
                  {
                    ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                    std::__shared_weak_count::__release_weak(v377);
                  }
                }
                v492 = v478;
                v380 = (char *)v479;
                if (v478.__r_.__value_.__r.__words[2])
                {
                  v381 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                  do
                    v382 = __ldxr(v381);
                  while (__stxr(v382 + 1, v381));
                }
                v383 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
                *(_QWORD *)&v493 = v380;
                *((_QWORD *)&v493 + 1) = *((_QWORD *)&v479 + 1);
                if (*((_QWORD *)&v479 + 1))
                {
                  v384 = (unint64_t *)(*((_QWORD *)&v479 + 1) + 8);
                  do
                    v385 = __ldxr(v384);
                  while (__stxr(v385 + 1, v384));
                  v494 = v380;
                  do
                    v386 = __ldaxr(v384);
                  while (__stlxr(v386 - 1, v384));
                  if (!v386)
                  {
                    ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                    std::__shared_weak_count::__release_weak(v383);
                  }
                }
                else
                {
                  v494 = v380;
                }
                v387 = (std::__shared_weak_count *)v478.__r_.__value_.__r.__words[2];
                if (v478.__r_.__value_.__r.__words[2])
                {
                  v388 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                  do
                    v389 = __ldaxr(v388);
                  while (__stlxr(v389 - 1, v388));
                  if (!v389)
                  {
                    ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                    std::__shared_weak_count::__release_weak(v387);
                  }
                }
                v390 = v492.__r_.__value_.__r.__words[0];
                if (v494[31] >= 0)
                  v391 = v494 + 8;
                else
                  v391 = (char *)*((_QWORD *)v494 + 1);
                v392 = _os_log_pack_fill();
                *(_DWORD *)v392 = 136315138;
                *(_QWORD *)(v392 + 4) = v391;
                v393 = operator new();
                v394 = *(unsigned __int8 *)(v35 + 39);
                v395 = v440;
                if ((v394 & 0x80u) != 0)
                {
                  v395 = *(const char **)(v35 + 16);
                  v394 = *(_QWORD *)(v35 + 24);
                }
                *(_QWORD *)v393 = v390;
                *(_OWORD *)(v393 + 8) = *(_OWORD *)&v492.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v492.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v393 + 24) = v493;
                v493 = 0uLL;
                *(_QWORD *)(v393 + 40) = v395;
                *(_QWORD *)(v393 + 48) = v394;
                *(_BYTE *)(v393 + 56) = 16;
                __dst = 0;
                v478.__r_.__value_.__r.__words[0] = v393;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v33 + 24) + 40))(*(_QWORD *)(v33 + 24), &v478);
                v396 = v478.__r_.__value_.__r.__words[0];
                v478.__r_.__value_.__r.__words[0] = 0;
                if (v396)
                {
                  v397 = *(std::__shared_weak_count **)(v396 + 32);
                  if (v397)
                  {
                    v398 = (unint64_t *)&v397->__shared_owners_;
                    do
                      v399 = __ldaxr(v398);
                    while (__stlxr(v399 - 1, v398));
                    if (!v399)
                    {
                      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                      std::__shared_weak_count::__release_weak(v397);
                    }
                  }
                  v400 = *(std::__shared_weak_count **)(v396 + 16);
                  if (v400)
                  {
                    v401 = (unint64_t *)&v400->__shared_owners_;
                    do
                      v402 = __ldaxr(v401);
                    while (__stlxr(v402 - 1, v401));
                    if (!v402)
                    {
                      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
                      std::__shared_weak_count::__release_weak(v400);
                    }
                  }
                  MEMORY[0x227684CE8](v396, 0x10F0C40B62ED6C6);
                  v403 = __dst;
                  __dst = 0;
                  if (v403)
                  {
                    v404 = (std::__shared_weak_count *)v403[4];
                    if (v404)
                    {
                      v405 = (unint64_t *)&v404->__shared_owners_;
                      do
                        v406 = __ldaxr(v405);
                      while (__stlxr(v406 - 1, v405));
                      if (!v406)
                      {
                        ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                        std::__shared_weak_count::__release_weak(v404);
                      }
                    }
                    v407 = (std::__shared_weak_count *)v403[2];
                    if (v407)
                    {
                      v408 = (unint64_t *)&v407->__shared_owners_;
                      do
                        v409 = __ldaxr(v408);
                      while (__stlxr(v409 - 1, v408));
                      if (!v409)
                      {
                        ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                        std::__shared_weak_count::__release_weak(v407);
                      }
                    }
                    MEMORY[0x227684CE8](v403, 0x10F0C40B62ED6C6);
                  }
                }
                v410 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
                if (*((_QWORD *)&v493 + 1))
                {
                  v411 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
                  do
                    v412 = __ldaxr(v411);
                  while (__stlxr(v412 - 1, v411));
                  if (!v412)
                  {
                    ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                    std::__shared_weak_count::__release_weak(v410);
                  }
                }
                v413 = (std::__shared_weak_count *)v492.__r_.__value_.__r.__words[2];
                if (v492.__r_.__value_.__r.__words[2])
                {
                  v414 = (unint64_t *)(v492.__r_.__value_.__r.__words[2] + 8);
                  do
                    v415 = __ldaxr(v414);
                  while (__stlxr(v415 - 1, v414));
                  if (!v415)
                  {
                    ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                    std::__shared_weak_count::__release_weak(v413);
                  }
                }
LABEL_725:
                if (v31)
                {
                  v416 = &__src;
                  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v416 = (std::string *)__src.__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)&__p, "Error removing rooms directory: %s", (const char *)v416);
                  sub_223182C08((uint64_t)&__p);
                }
                sub_223182C08((uint64_t)&__p);
                v272 = v491;
                if (!v491)
                  goto LABEL_734;
                v417 = (unint64_t *)&v491->__shared_owners_;
                do
                  v274 = __ldaxr(v417);
                while (__stlxr(v274 - 1, v417));
LABEL_732:
                if (!v274)
                {
                  ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                  std::__shared_weak_count::__release_weak(v272);
                }
                goto LABEL_734;
              }
            }
            memcpy(v226, p_src, v225);
            goto LABEL_666;
          }
        }
        memmove(v217, v36, v37);
        goto LABEL_415;
      }
    }
    memmove(v212, v210, v211);
    goto LABEL_407;
  }
  if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a8 + 128))(a8, &__src) & 1) != 0)
  {
    memset(&__p, 0, sizeof(__p));
    sub_2231816F0(&__p, (std::string *)"rooms_metadata_completeness.json", (std::string *)"");
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&v492, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      v492 = __src;
    sub_22319C30C((uint64_t)&v492, (std::__fs::filesystem::path *)&__p);
    (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)a8 + 376))(&v482, a8, &v492, 16);
    if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v492.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_43:
        v432 = a6;
        if (*((_QWORD *)&v482 + 1))
          goto LABEL_44;
        goto LABEL_100;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v432 = a6;
    if (*((_QWORD *)&v482 + 1))
    {
LABEL_44:
      v430 = a2;
      v477 = 0;
      v476[0] = 1;
      v40 = *a3;
      v39 = a3 + 1;
      v38 = v40;
      v41 = (_QWORD **)operator new(0x18uLL);
      v41[1] = 0;
      v42 = (uint64_t *)(v41 + 1);
      v41[2] = 0;
      *v41 = v41 + 1;
      if (v40 != (const void **)v39)
      {
        do
        {
          v43 = sub_223453BB8(v41, v42, (uint64_t **)&v492, (uint64_t **)&__p, v38 + 4);
          if (*v43)
          {
            v44 = (const void **)v38[1];
            if (!v44)
              goto LABEL_79;
            goto LABEL_73;
          }
          v45 = (char *)operator new(0x48uLL);
          v46 = v45 + 32;
          if (*((char *)v38 + 55) < 0)
          {
            sub_223197FA4(v46, (void *)v38[4], (unint64_t)v38[5]);
          }
          else
          {
            v47 = *((_OWORD *)v38 + 2);
            *((_QWORD *)v45 + 6) = v38[6];
            *(_OWORD *)v46 = v47;
          }
          v48 = *((float *)v38 + 14);
          v45[56] = 7;
          *((double *)v45 + 8) = v48;
          v49 = v492.__r_.__value_.__r.__words[0];
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v45 + 1) = 0;
          *((_QWORD *)v45 + 2) = v49;
          *v43 = (uint64_t)v45;
          v50 = (_QWORD *)**v41;
          if (v50)
          {
            *v41 = v50;
            v45 = (char *)*v43;
          }
          v51 = *v42;
          v52 = v45 == (char *)*v42;
          v45[24] = v52;
          if (v52)
          {
LABEL_72:
            v41[2] = (_QWORD *)((char *)v41[2] + 1);
            v44 = (const void **)v38[1];
            if (!v44)
              goto LABEL_79;
            goto LABEL_73;
          }
          while (1)
          {
            v53 = *((_QWORD *)v45 + 2);
            if (*(_BYTE *)(v53 + 24))
              goto LABEL_72;
            v54 = *(char **)(v53 + 16);
            v55 = *(_QWORD *)v54;
            if (*(_QWORD *)v54 != v53)
              break;
            v58 = *((_QWORD *)v54 + 1);
            if (!v58 || (v59 = *(unsigned __int8 *)(v58 + 24), v56 = (_BYTE *)(v58 + 24), v59))
            {
              if (*(char **)v53 == v45)
              {
                *(_BYTE *)(v53 + 24) = 1;
                v54[24] = 0;
                v62 = *(_QWORD *)(v53 + 8);
                *(_QWORD *)v54 = v62;
                if (v62)
                  goto LABEL_70;
              }
              else
              {
                v60 = *(uint64_t **)(v53 + 8);
                v61 = *v60;
                *(_QWORD *)(v53 + 8) = *v60;
                if (v61)
                {
                  *(_QWORD *)(v61 + 16) = v53;
                  v54 = *(char **)(v53 + 16);
                }
                v60[2] = (uint64_t)v54;
                *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8 * (**(_QWORD **)(v53 + 16) != v53)) = v60;
                *v60 = v53;
                *(_QWORD *)(v53 + 16) = v60;
                v54 = (char *)v60[2];
                v53 = *(_QWORD *)v54;
                *((_BYTE *)v60 + 24) = 1;
                v54[24] = 0;
                v62 = *(_QWORD *)(v53 + 8);
                *(_QWORD *)v54 = v62;
                if (v62)
LABEL_70:
                  *(_QWORD *)(v62 + 16) = v54;
              }
              *(_QWORD *)(v53 + 16) = *((_QWORD *)v54 + 2);
              *(_QWORD *)(*((_QWORD *)v54 + 2) + 8 * (**((_QWORD **)v54 + 2) != (_QWORD)v54)) = v53;
              *(_QWORD *)(v53 + 8) = v54;
              *((_QWORD *)v54 + 2) = v53;
              goto LABEL_72;
            }
LABEL_58:
            *(_BYTE *)(v53 + 24) = 1;
            v45 = v54;
            v54[24] = v54 == (char *)v51;
            *v56 = 1;
            if (v54 == (char *)v51)
              goto LABEL_72;
          }
          if (v55)
          {
            v57 = *(unsigned __int8 *)(v55 + 24);
            v56 = (_BYTE *)(v55 + 24);
            if (!v57)
              goto LABEL_58;
          }
          if (*(char **)v53 == v45)
          {
            v66 = *((_QWORD *)v45 + 1);
            *(_QWORD *)v53 = v66;
            if (v66)
            {
              *(_QWORD *)(v66 + 16) = v53;
              v54 = *(char **)(v53 + 16);
            }
            *((_QWORD *)v45 + 2) = v54;
            *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8 * (**(_QWORD **)(v53 + 16) != v53)) = v45;
            *((_QWORD *)v45 + 1) = v53;
            *(_QWORD *)(v53 + 16) = v45;
            v54 = (char *)*((_QWORD *)v45 + 2);
            v45[24] = 1;
            v54[24] = 0;
            v64 = (char **)*((_QWORD *)v54 + 1);
            v65 = *v64;
            *((_QWORD *)v54 + 1) = *v64;
            if (v65)
LABEL_77:
              *((_QWORD *)v65 + 2) = v54;
          }
          else
          {
            *(_BYTE *)(v53 + 24) = 1;
            v54[24] = 0;
            v64 = (char **)*((_QWORD *)v54 + 1);
            v65 = *v64;
            *((_QWORD *)v54 + 1) = *v64;
            if (v65)
              goto LABEL_77;
          }
          v64[2] = (char *)*((_QWORD *)v54 + 2);
          *(_QWORD *)(*((_QWORD *)v54 + 2) + 8 * (**((_QWORD **)v54 + 2) != (_QWORD)v54)) = v64;
          *v64 = v54;
          *((_QWORD *)v54 + 2) = v64;
          v41[2] = (_QWORD *)((char *)v41[2] + 1);
          v44 = (const void **)v38[1];
          if (!v44)
          {
            do
            {
LABEL_79:
              v63 = (const void ***)v38[2];
              v52 = *v63 == v38;
              v38 = (const void **)v63;
            }
            while (!v52);
            goto LABEL_46;
          }
          do
          {
LABEL_73:
            v63 = (const void ***)v44;
            v44 = (const void **)*v44;
          }
          while (v44);
LABEL_46:
          v38 = (const void **)v63;
        }
        while (v63 != v39);
      }
      v477 = v41;
      v492.__r_.__value_.__s.__data_[0] = 3;
      v67 = (char *)operator new(0x18uLL);
      v67[23] = 18;
      strcpy(v67, "rooms_completeness");
      v492.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
      v492.__r_.__value_.__r.__words[2] = (std::string::size_type)&v492;
      LOBYTE(v493) = 1;
      v495 = sub_223799EE8((uint64_t)&v493 + 8, v476);
      LOBYTE(v496) = 1;
      sub_2237995F8((uint64_t)&__p, (uint64_t)&v492, 2, 1, 2);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
      LOBYTE(v486) = 1;
      sub_2237995F8((uint64_t)v474, (uint64_t)&__p, 1, 1, 2);
      sub_223454278((uint64_t *)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_223454278((uint64_t *)&v494, BYTE8(v493));
      sub_223454278((uint64_t *)&v492.__r_.__value_.__l.__size_, v492.__r_.__value_.__s.__data_[0]);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_2246546D0;
      __p.__r_.__value_.__s.__data_[16] = 1;
      sub_224533734(v474, (uint64_t)&__p, &v492);
      v68 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v482 + 1) + 16))(*((_QWORD *)&v482 + 1));
      if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &v492;
      else
        v69 = (std::string *)v492.__r_.__value_.__r.__words[0];
      if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v492.__r_.__value_.__r.__words[2]);
      else
        size = v492.__r_.__value_.__l.__size_;
      sub_2231813E8(v68, (uint64_t)v69, size);
      if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v492.__r_.__value_.__l.__data_);
      memset(&__p, 0, sizeof(__p));
      sub_2231816F0(&__p, (std::string *)"rooms_metadata_edge_completeness.json", (std::string *)"");
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        sub_223197FA4(&v492, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      else
        v492 = __src;
      sub_22319C30C((uint64_t)&v492, (std::__fs::filesystem::path *)&__p);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)a8 + 376))(&v471, a8, &v492, 16);
      if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v492.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_105:
          v429 = a7;
          v433 = a8;
          if (v472)
            goto LABEL_106;
          goto LABEL_134;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_105;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v429 = a7;
      v433 = a8;
      if (v472)
      {
LABEL_106:
        v470 = 0;
        v469[0] = 1;
        v71 = *a4;
        v72 = (_QWORD **)operator new(0x18uLL);
        v72[1] = 0;
        v72[2] = 0;
        *v72 = v72 + 1;
        if (v71 == (const void **)(a4 + 1))
        {
LABEL_107:
          v470 = v72;
          v492.__r_.__value_.__l.__size_ = 0;
          v492.__r_.__value_.__s.__data_[0] = 3;
          v73 = (char *)operator new(0x18uLL);
          v74 = (char *)operator new(0x19uLL);
          *(_QWORD *)v73 = v74;
          *(_OWORD *)(v73 + 8) = xmmword_2245B9430;
          strcpy(v74, "rooms_edge_completeness");
          v492.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
          v492.__r_.__value_.__r.__words[2] = (std::string::size_type)&v492;
          LOBYTE(v493) = 1;
          v495 = sub_223799EE8((uint64_t)&v493 + 8, v469);
          LOBYTE(v496) = 1;
          sub_2237995F8((uint64_t)&__p, (uint64_t)&v492, 2, 1, 2);
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
          LOBYTE(v486) = 1;
          sub_2237995F8((uint64_t)v467, (uint64_t)&__p, 1, 1, 2);
          sub_223454278((uint64_t *)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
          sub_223454278((uint64_t *)&v494, BYTE8(v493));
          sub_223454278((uint64_t *)&v492.__r_.__value_.__l.__size_, v492.__r_.__value_.__s.__data_[0]);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_2246546D0;
          __p.__r_.__value_.__s.__data_[16] = 1;
          sub_224533734(v467, (uint64_t)&__p, &v492);
          v75 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v472 + 16))(v472);
          if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = &v492;
          else
            v76 = (std::string *)v492.__r_.__value_.__r.__words[0];
          if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
          else
            v77 = v492.__r_.__value_.__l.__size_;
          sub_2231813E8(v75, (uint64_t)v76, v77);
          if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v492.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
          sub_2231816F0(&__p, (std::string *)"rooms_metadata_kfs.json", (std::string *)"");
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v492, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          else
            v492 = __src;
          sub_22319C30C((uint64_t)&v492, (std::__fs::filesystem::path *)&__p);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v433 + 376))(&v464, v433, &v492, 16);
          if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v492.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_139:
              if (v465)
                goto LABEL_140;
              goto LABEL_193;
            }
          }
          else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_139;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v465)
          {
LABEL_140:
            v463 = 0;
            v462[0] = 1;
            v89 = *a5;
            v90 = (_QWORD **)operator new(0x18uLL);
            v90[1] = 0;
            v91 = (uint64_t *)(v90 + 1);
            v90[2] = 0;
            *v90 = v90 + 1;
            if (v89 != (const void **)(a5 + 1))
            {
              do
              {
                v92 = sub_223453BB8(v90, v91, (uint64_t **)&v492, (uint64_t **)&__p, v89 + 4);
                if (*v92)
                {
                  v93 = (const void **)v89[1];
                  if (!v93)
                    goto LABEL_172;
                  goto LABEL_166;
                }
                v94 = operator new(0x48uLL);
                sub_223453F60(v94 + 4, (__int128 *)v89 + 2);
                v95 = v492.__r_.__value_.__r.__words[0];
                *v94 = 0;
                v94[1] = 0;
                v94[2] = v95;
                *v92 = (uint64_t)v94;
                v96 = (_QWORD *)**v90;
                if (v96)
                {
                  *v90 = v96;
                  v94 = (_QWORD *)*v92;
                }
                v97 = *v91;
                v52 = v94 == (_QWORD *)*v91;
                *((_BYTE *)v94 + 24) = v52;
                if (v52)
                {
LABEL_165:
                  v90[2] = (_QWORD *)((char *)v90[2] + 1);
                  v93 = (const void **)v89[1];
                  if (!v93)
                    goto LABEL_172;
                  goto LABEL_166;
                }
                while (1)
                {
                  v98 = v94[2];
                  if (*(_BYTE *)(v98 + 24))
                    goto LABEL_165;
                  v99 = *(uint64_t **)(v98 + 16);
                  v100 = *v99;
                  if (*v99 != v98)
                    break;
                  v103 = v99[1];
                  if (!v103 || (v104 = *(unsigned __int8 *)(v103 + 24), v101 = (_BYTE *)(v103 + 24), v104))
                  {
                    if (*(_QWORD **)v98 == v94)
                    {
                      *(_BYTE *)(v98 + 24) = 1;
                      *((_BYTE *)v99 + 24) = 0;
                      v107 = *(_QWORD *)(v98 + 8);
                      *v99 = v107;
                      if (v107)
                        goto LABEL_163;
                    }
                    else
                    {
                      v105 = *(uint64_t **)(v98 + 8);
                      v106 = *v105;
                      *(_QWORD *)(v98 + 8) = *v105;
                      if (v106)
                      {
                        *(_QWORD *)(v106 + 16) = v98;
                        v99 = *(uint64_t **)(v98 + 16);
                      }
                      v105[2] = (uint64_t)v99;
                      *(_QWORD *)(*(_QWORD *)(v98 + 16) + 8 * (**(_QWORD **)(v98 + 16) != v98)) = v105;
                      *v105 = v98;
                      *(_QWORD *)(v98 + 16) = v105;
                      v99 = (uint64_t *)v105[2];
                      v98 = *v99;
                      *((_BYTE *)v105 + 24) = 1;
                      *((_BYTE *)v99 + 24) = 0;
                      v107 = *(_QWORD *)(v98 + 8);
                      *v99 = v107;
                      if (v107)
LABEL_163:
                        *(_QWORD *)(v107 + 16) = v99;
                    }
                    *(_QWORD *)(v98 + 16) = v99[2];
                    *(_QWORD *)(v99[2] + 8 * (*(_QWORD *)v99[2] != (_QWORD)v99)) = v98;
                    *(_QWORD *)(v98 + 8) = v99;
                    v99[2] = v98;
                    goto LABEL_165;
                  }
LABEL_151:
                  *(_BYTE *)(v98 + 24) = 1;
                  v94 = v99;
                  *((_BYTE *)v99 + 24) = v99 == (uint64_t *)v97;
                  *v101 = 1;
                  if (v99 == (uint64_t *)v97)
                    goto LABEL_165;
                }
                if (v100)
                {
                  v102 = *(unsigned __int8 *)(v100 + 24);
                  v101 = (_BYTE *)(v100 + 24);
                  if (!v102)
                    goto LABEL_151;
                }
                if (*(_QWORD **)v98 == v94)
                {
                  v111 = v94[1];
                  *(_QWORD *)v98 = v111;
                  if (v111)
                  {
                    *(_QWORD *)(v111 + 16) = v98;
                    v99 = *(uint64_t **)(v98 + 16);
                  }
                  v94[2] = v99;
                  *(_QWORD *)(*(_QWORD *)(v98 + 16) + 8 * (**(_QWORD **)(v98 + 16) != v98)) = v94;
                  v94[1] = v98;
                  *(_QWORD *)(v98 + 16) = v94;
                  v99 = (uint64_t *)v94[2];
                  *((_BYTE *)v94 + 24) = 1;
                  *((_BYTE *)v99 + 24) = 0;
                  v109 = (uint64_t *)v99[1];
                  v110 = *v109;
                  v99[1] = *v109;
                  if (v110)
LABEL_170:
                    *(_QWORD *)(v110 + 16) = v99;
                }
                else
                {
                  *(_BYTE *)(v98 + 24) = 1;
                  *((_BYTE *)v99 + 24) = 0;
                  v109 = (uint64_t *)v99[1];
                  v110 = *v109;
                  v99[1] = *v109;
                  if (v110)
                    goto LABEL_170;
                }
                v109[2] = v99[2];
                *(_QWORD *)(v99[2] + 8 * (*(_QWORD *)v99[2] != (_QWORD)v99)) = v109;
                *v109 = (uint64_t)v99;
                v99[2] = (uint64_t)v109;
                v90[2] = (_QWORD *)((char *)v90[2] + 1);
                v93 = (const void **)v89[1];
                if (!v93)
                {
                  do
                  {
LABEL_172:
                    v108 = (const void ***)v89[2];
                    v52 = *v108 == v89;
                    v89 = (const void **)v108;
                  }
                  while (!v52);
                  goto LABEL_142;
                }
                do
                {
LABEL_166:
                  v108 = (const void ***)v93;
                  v93 = (const void **)*v93;
                }
                while (v93);
LABEL_142:
                v89 = (const void **)v108;
              }
              while (v108 != a5 + 1);
            }
            v463 = v90;
            v492.__r_.__value_.__s.__data_[0] = 3;
            v112 = (char *)operator new(0x18uLL);
            v112[23] = 9;
            strcpy(v112, "rooms_kfs");
            v492.__r_.__value_.__l.__size_ = (std::string::size_type)v112;
            v492.__r_.__value_.__r.__words[2] = (std::string::size_type)&v492;
            LOBYTE(v493) = 1;
            v495 = sub_223799EE8((uint64_t)&v493 + 8, v462);
            LOBYTE(v496) = 1;
            sub_2237995F8((uint64_t)&__p, (uint64_t)&v492, 2, 1, 2);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
            LOBYTE(v486) = 1;
            sub_2237995F8((uint64_t)v460, (uint64_t)&__p, 1, 1, 2);
            sub_223454278((uint64_t *)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
            sub_223454278((uint64_t *)&v494, BYTE8(v493));
            sub_223454278((uint64_t *)&v492.__r_.__value_.__l.__size_, v492.__r_.__value_.__s.__data_[0]);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_2246546D0;
            __p.__r_.__value_.__s.__data_[16] = 1;
            sub_224533734(v460, (uint64_t)&__p, &v492);
            v113 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 16))(v465);
            if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = &v492;
            else
              v114 = (std::string *)v492.__r_.__value_.__r.__words[0];
            if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
            else
              v115 = v492.__r_.__value_.__l.__size_;
            sub_2231813E8(v113, (uint64_t)v114, v115);
            if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v492.__r_.__value_.__l.__data_);
            memset(&__p, 0, sizeof(__p));
            sub_2231816F0(&__p, (std::string *)"rooms_metadata_ceiling_points.json", (std::string *)"");
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              sub_223197FA4(&v492, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
            else
              v492 = __src;
            sub_22319C30C((uint64_t)&v492, (std::__fs::filesystem::path *)&__p);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v433 + 376))(&v457, v433, &v492, 16);
            if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v492.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_198:
                if (v458)
                  goto LABEL_199;
                goto LABEL_211;
              }
            }
            else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_198;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v458)
            {
LABEL_199:
              v456 = 0;
              v455[0] = 1;
              v116 = *v432;
              v117 = (uint64_t *)operator new(0x18uLL);
              v117[2] = 0;
              v117[1] = 0;
              *v117 = (uint64_t)(v117 + 1);
              sub_2238EBBE8(v117, v116, v432 + 1);
              v456 = v117;
              v492.__r_.__value_.__s.__data_[0] = 3;
              v118 = (char *)operator new(0x18uLL);
              v118[23] = 20;
              strcpy(v118, "rooms_ceiling_points");
              v492.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
              v492.__r_.__value_.__r.__words[2] = (std::string::size_type)&v492;
              LOBYTE(v493) = 1;
              v495 = sub_223799EE8((uint64_t)&v493 + 8, v455);
              LOBYTE(v496) = 1;
              sub_2237995F8((uint64_t)&__p, (uint64_t)&v492, 2, 1, 2);
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
              LOBYTE(v486) = 1;
              sub_2237995F8((uint64_t)v453, (uint64_t)&__p, 1, 1, 2);
              sub_223454278((uint64_t *)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
              sub_223454278((uint64_t *)&v494, BYTE8(v493));
              sub_223454278((uint64_t *)&v492.__r_.__value_.__l.__size_, v492.__r_.__value_.__s.__data_[0]);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_2246546D0;
              __p.__r_.__value_.__s.__data_[16] = 1;
              sub_224533734(v453, (uint64_t)&__p, &v492);
              v119 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v458 + 16))(v458);
              if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v120 = &v492;
              else
                v120 = (std::string *)v492.__r_.__value_.__r.__words[0];
              if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v121 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
              else
                v121 = v492.__r_.__value_.__l.__size_;
              sub_2231813E8(v119, (uint64_t)v120, v121);
              if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v492.__r_.__value_.__l.__data_);
              memset(&__p, 0, sizeof(__p));
              sub_2231816F0(&__p, (std::string *)"rooms_metadata_floor_points.json", (std::string *)"");
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                sub_223197FA4(&v492, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
              else
                v492 = __src;
              sub_22319C30C((uint64_t)&v492, (std::__fs::filesystem::path *)&__p);
              (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v433 + 376))(&v450, v433, &v492, 16);
              if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v492.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_216:
                  if (v451)
                    goto LABEL_217;
                  goto LABEL_229;
                }
              }
              else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_216;
              }
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v451)
              {
LABEL_217:
                v449 = 0;
                v448[0] = 1;
                v122 = *v429;
                v123 = (uint64_t *)operator new(0x18uLL);
                v123[2] = 0;
                v123[1] = 0;
                *v123 = (uint64_t)(v123 + 1);
                sub_2238EBBE8(v123, v122, v429 + 1);
                v449 = v123;
                v492.__r_.__value_.__s.__data_[0] = 3;
                v124 = (char *)operator new(0x18uLL);
                v124[23] = 18;
                strcpy(v124, "rooms_floor_points");
                v492.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
                v492.__r_.__value_.__r.__words[2] = (std::string::size_type)&v492;
                LOBYTE(v493) = 1;
                v495 = sub_223799EE8((uint64_t)&v493 + 8, v448);
                LOBYTE(v496) = 1;
                sub_2237995F8((uint64_t)&__p, (uint64_t)&v492, 2, 1, 2);
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
                LOBYTE(v486) = 1;
                sub_2237995F8((uint64_t)v446, (uint64_t)&__p, 1, 1, 2);
                sub_223454278((uint64_t *)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
                sub_223454278((uint64_t *)&v494, BYTE8(v493));
                sub_223454278((uint64_t *)&v492.__r_.__value_.__l.__size_, v492.__r_.__value_.__s.__data_[0]);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_2246546D0;
                __p.__r_.__value_.__s.__data_[16] = 1;
                sub_224533734(v446, (uint64_t)&__p, &v492);
                v125 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v451 + 16))(v451);
                if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v126 = &v492;
                else
                  v126 = (std::string *)v492.__r_.__value_.__r.__words[0];
                if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v127 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
                else
                  v127 = v492.__r_.__value_.__l.__size_;
                sub_2231813E8(v125, (uint64_t)v126, v127);
                if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v492.__r_.__value_.__l.__data_);
                sub_223CD4718((uint64_t)v430, 1);
                memset(&v492, 0, sizeof(v492));
                sub_2231816F0(&v492, (std::string *)"rooms_mesh.obj", (std::string *)"");
                if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                  sub_223197FA4(&v445, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
                else
                  v445 = __src;
                sub_22319C30C((uint64_t)&v445, (std::__fs::filesystem::path *)&v492);
                if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v492.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v445.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_234;
                }
                else if ((SHIBYTE(v445.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_234:
                  v492 = v445;
                  goto LABEL_237;
                }
                sub_223197FA4(&v492, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
LABEL_237:
                if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v128 = &v492;
                else
                  v128 = (std::string *)v492.__r_.__value_.__r.__words[0];
                v129 = sub_22414BFC0(v128, v430, v433);
                v130 = v129;
                v131 = v129 == 0;
                if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v492.__r_.__value_.__l.__data_);
                  if (!v130)
                  {
LABEL_635:
                    if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v445.__r_.__value_.__l.__data_);
                    sub_223454278(&v447, v446[0]);
                    sub_223454278((uint64_t *)&v449, v448[0]);
                    v356 = v452;
                    if (v452)
                    {
                      v357 = (unint64_t *)&v452->__shared_owners_;
                      do
                        v358 = __ldaxr(v357);
                      while (__stlxr(v358 - 1, v357));
                      if (!v358)
                      {
                        ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                        std::__shared_weak_count::__release_weak(v356);
                      }
                    }
                    sub_223454278(&v454, v453[0]);
                    sub_223454278((uint64_t *)&v456, v455[0]);
                    v359 = v459;
                    if (v459)
                    {
                      v360 = (unint64_t *)&v459->__shared_owners_;
                      do
                        v361 = __ldaxr(v360);
                      while (__stlxr(v361 - 1, v360));
                      if (!v361)
                      {
                        ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
                        std::__shared_weak_count::__release_weak(v359);
                      }
                    }
                    sub_223454278(&v461, v460[0]);
                    sub_223454278((uint64_t *)&v463, v462[0]);
                    v362 = v466;
                    if (v466)
                    {
                      v363 = (unint64_t *)&v466->__shared_owners_;
                      do
                        v364 = __ldaxr(v363);
                      while (__stlxr(v364 - 1, v363));
                      if (!v364)
                      {
                        ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                        std::__shared_weak_count::__release_weak(v362);
                      }
                    }
                    sub_223454278(&v468, v467[0]);
                    sub_223454278((uint64_t *)&v470, v469[0]);
                    v365 = v473;
                    if (v473)
                    {
                      v366 = (unint64_t *)&v473->__shared_owners_;
                      do
                        v367 = __ldaxr(v366);
                      while (__stlxr(v367 - 1, v366));
                      if (!v367)
                      {
                        ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                        std::__shared_weak_count::__release_weak(v365);
                      }
                    }
                    sub_223454278(&v475, v474[0]);
                    sub_223454278((uint64_t *)&v477, v476[0]);
                    v368 = v483;
                    if (v483)
                    {
                      v369 = (unint64_t *)&v483->__shared_owners_;
                      do
                        v370 = __ldaxr(v369);
                      while (__stlxr(v370 - 1, v369));
                      if (!v370)
                      {
                        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                        std::__shared_weak_count::__release_weak(v368);
                      }
                    }
                    goto LABEL_735;
                  }
                }
                else if (!v129)
                {
                  goto LABEL_635;
                }
                v132 = atomic_load((unsigned __int8 *)&qword_2557892F0);
                if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
                {
                  __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
                  __cxa_guard_release(&qword_2557892F0);
                }
                sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error capturing mesh: %s", 0x18uLL);
                sub_2238CE8E8(&v444);
                if (**(int **)(v444 + 56) > 5)
                  goto LABEL_635;
                v133 = *(unsigned __int8 *)(v444 + 72);
                v134 = sub_22322F254(v444, "OSLogSurrogateAppender", 1, 0);
                v135 = v134;
                if (!v133 && !v134)
                  goto LABEL_635;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
                __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                v486 = 5;
                v487 = "unknown file";
                v488 = 1023;
                v491 = 0;
                v489 = "unknown function";
                v490 = 0;
                if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
                  sub_223197FA4(&v443, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
                else
                  v443 = v445;
                v172 = &v443;
                if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v172 = (std::string *)v443.__r_.__value_.__r.__words[0];
                v442 = (const char *)v172;
                v173 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
                if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
                {
                  v175 = *(const char **)(v173 + 16);
                  v174 = *(_QWORD *)(v173 + 24);
                }
                else
                {
                  v174 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
                  v175 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
                }
                v431 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
                v434 = v133;
                v176 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&v492);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&v492, byte_255788F40);
                  if ((_BYTE)v493 && SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v492.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
                if (byte_255788F40[23] >= 0)
                  v177 = byte_255788F40;
                else
                  v177 = *(const char **)byte_255788F40;
                if (byte_255788F40[23] >= 0)
                  v178 = byte_255788F40[23];
                else
                  v178 = *(_QWORD *)&byte_255788F40[8];
                v492.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v177, v175);
                v179 = &v492.__r_.__value_.__l.__size_;
                if (v178 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v178 >= 0x17)
                {
                  v180 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v178 | 7) != 0x17)
                    v180 = v178 | 7;
                  v181 = v180 + 1;
                  v179 = (std::string::size_type *)operator new(v180 + 1);
                  v492.__r_.__value_.__r.__words[2] = v178;
                  *(_QWORD *)&v493 = v181 | 0x8000000000000000;
                  v492.__r_.__value_.__l.__size_ = (std::string::size_type)v179;
                }
                else
                {
                  BYTE7(v493) = v178;
                  if (!v178)
                  {
LABEL_349:
                    *((_BYTE *)v179 + v178) = 0;
                    BYTE8(v493) = 1;
                    v182 = (char *)&v494;
                    if (v174 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    if (v174 >= 0x17)
                    {
                      v183 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v174 | 7) != 0x17)
                        v183 = v174 | 7;
                      v184 = v183 + 1;
                      v182 = (char *)operator new(v183 + 1);
                      v495 = v174;
                      v496 = v184 | 0x8000000000000000;
                      v494 = v182;
                    }
                    else
                    {
                      HIBYTE(v496) = v174;
                      if (!v174)
                      {
LABEL_357:
                        v182[v174] = 0;
                        v497 = 1;
                        v185 = v492.__r_.__value_.__r.__words[0];
                        if (SHIBYTE(v496) < 0)
                          operator delete(v494);
                        if (BYTE8(v493) && SBYTE7(v493) < 0)
                          operator delete((void *)v492.__r_.__value_.__l.__size_);
                        if (v492.__r_.__value_.__r.__words[0])
                          os_release(v492.__r_.__value_.__l.__data_);
                        if (!v135 || !*(_QWORD *)(v135 + 24))
                        {
                          os_log_type_enabled(v185, OS_LOG_TYPE_ERROR);
                          LODWORD(v492.__r_.__value_.__l.__data_) = 136315138;
                          *(std::string::size_type *)((char *)v492.__r_.__value_.__r.__words + 4) = (std::string::size_type)v442;
                          v192 = (void *)_os_log_send_and_compose_impl();
                          if (v192)
                            free(v192);
                          goto LABEL_619;
                        }
                        v186 = _os_log_pack_size();
                        v187 = operator new(v186, (std::align_val_t)8uLL);
                        v188 = (_QWORD *)operator new();
                        *v188 = &off_24EC1F7F0;
                        v188[1] = 0;
                        v188[2] = 0;
                        v188[3] = v187;
                        v478.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
                        v478.__r_.__value_.__l.__size_ = (std::string::size_type)v187;
                        v479 = 0uLL;
                        v478.__r_.__value_.__r.__words[2] = (std::string::size_type)v188;
                        v189 = strlen(v442);
                        if (v189 > 0x7FFFFFFFFFFFFFF7)
                          sub_22316DBC0();
                        v190 = v189;
                        if (v189 >= 0x17)
                        {
                          v275 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v189 | 7) != 0x17)
                            v275 = v189 | 7;
                          v276 = v275 + 1;
                          v191 = operator new(v275 + 1);
                          *(_QWORD *)&v481 = v190;
                          *((_QWORD *)&v481 + 1) = v276 | 0x8000000000000000;
                          __dst = v191;
                        }
                        else
                        {
                          HIBYTE(v481) = v189;
                          v191 = &__dst;
                          if (!v189)
                          {
LABEL_505:
                            *((_BYTE *)v191 + v190) = 0;
                            v277 = __dst;
                            v498[0] = v481;
                            *(_QWORD *)((char *)v498 + 7) = *(_QWORD *)((char *)&v481 + 7);
                            v278 = HIBYTE(v481);
                            v279 = operator new(0x38uLL);
                            v279[1] = 0;
                            v279[2] = 0;
                            v279[3] = off_24EC1FA48;
                            *v279 = &off_24EC1F9F8;
                            v280 = v498[0];
                            v279[4] = v277;
                            v279[5] = v280;
                            *(_QWORD *)((char *)v279 + 47) = *(_QWORD *)((char *)v498 + 7);
                            *((_BYTE *)v279 + 55) = v278;
                            v498[0] = 0;
                            *(_QWORD *)((char *)v498 + 7) = 0;
                            v281 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
                            *(_QWORD *)&v479 = v279 + 3;
                            *((_QWORD *)&v479 + 1) = v279;
                            if (v281)
                            {
                              v282 = (unint64_t *)&v281->__shared_owners_;
                              do
                                v283 = __ldaxr(v282);
                              while (__stlxr(v283 - 1, v282));
                              if (!v283)
                              {
                                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                                std::__shared_weak_count::__release_weak(v281);
                              }
                            }
                            v492 = v478;
                            v284 = (char *)v479;
                            if (v478.__r_.__value_.__r.__words[2])
                            {
                              v285 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                              do
                                v286 = __ldxr(v285);
                              while (__stxr(v286 + 1, v285));
                            }
                            v287 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
                            *(_QWORD *)&v493 = v284;
                            *((_QWORD *)&v493 + 1) = *((_QWORD *)&v479 + 1);
                            if (*((_QWORD *)&v479 + 1))
                            {
                              v288 = (unint64_t *)(*((_QWORD *)&v479 + 1) + 8);
                              do
                                v289 = __ldxr(v288);
                              while (__stxr(v289 + 1, v288));
                              v494 = v284;
                              do
                                v290 = __ldaxr(v288);
                              while (__stlxr(v290 - 1, v288));
                              if (!v290)
                              {
                                ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                                std::__shared_weak_count::__release_weak(v287);
                              }
                            }
                            else
                            {
                              v494 = v284;
                            }
                            v323 = (std::__shared_weak_count *)v478.__r_.__value_.__r.__words[2];
                            if (v478.__r_.__value_.__r.__words[2])
                            {
                              v324 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                              do
                                v325 = __ldaxr(v324);
                              while (__stlxr(v325 - 1, v324));
                              if (!v325)
                              {
                                ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                                std::__shared_weak_count::__release_weak(v323);
                              }
                            }
                            v326 = v492.__r_.__value_.__r.__words[0];
                            if (v494[31] >= 0)
                              v327 = v494 + 8;
                            else
                              v327 = (char *)*((_QWORD *)v494 + 1);
                            v328 = _os_log_pack_fill();
                            *(_DWORD *)v328 = 136315138;
                            *(_QWORD *)(v328 + 4) = v327;
                            v329 = operator new();
                            v330 = *(unsigned __int8 *)(v173 + 39);
                            v331 = v431;
                            if ((v330 & 0x80u) != 0)
                            {
                              v331 = *(_QWORD *)(v173 + 16);
                              v330 = *(_QWORD *)(v173 + 24);
                            }
                            *(_QWORD *)v329 = v326;
                            *(_OWORD *)(v329 + 8) = *(_OWORD *)&v492.__r_.__value_.__r.__words[1];
                            *(_OWORD *)&v492.__r_.__value_.__r.__words[1] = 0uLL;
                            *(_OWORD *)(v329 + 24) = v493;
                            v493 = 0uLL;
                            *(_QWORD *)(v329 + 40) = v331;
                            *(_QWORD *)(v329 + 48) = v330;
                            *(_BYTE *)(v329 + 56) = 16;
                            __dst = 0;
                            v478.__r_.__value_.__r.__words[0] = v329;
                            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v135 + 24) + 40))(*(_QWORD *)(v135 + 24), &v478);
                            v332 = v478.__r_.__value_.__r.__words[0];
                            v478.__r_.__value_.__r.__words[0] = 0;
                            if (v332)
                            {
                              v333 = *(std::__shared_weak_count **)(v332 + 32);
                              if (v333)
                              {
                                v334 = (unint64_t *)&v333->__shared_owners_;
                                do
                                  v335 = __ldaxr(v334);
                                while (__stlxr(v335 - 1, v334));
                                if (!v335)
                                {
                                  ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                                  std::__shared_weak_count::__release_weak(v333);
                                }
                              }
                              v336 = *(std::__shared_weak_count **)(v332 + 16);
                              if (v336)
                              {
                                v337 = (unint64_t *)&v336->__shared_owners_;
                                do
                                  v338 = __ldaxr(v337);
                                while (__stlxr(v338 - 1, v337));
                                if (!v338)
                                {
                                  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                                  std::__shared_weak_count::__release_weak(v336);
                                }
                              }
                              MEMORY[0x227684CE8](v332, 0x10F0C40B62ED6C6);
                              v339 = __dst;
                              __dst = 0;
                              if (v339)
                              {
                                v340 = (std::__shared_weak_count *)v339[4];
                                if (v340)
                                {
                                  v341 = (unint64_t *)&v340->__shared_owners_;
                                  do
                                    v342 = __ldaxr(v341);
                                  while (__stlxr(v342 - 1, v341));
                                  if (!v342)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                                    std::__shared_weak_count::__release_weak(v340);
                                  }
                                }
                                v343 = (std::__shared_weak_count *)v339[2];
                                if (v343)
                                {
                                  v344 = (unint64_t *)&v343->__shared_owners_;
                                  do
                                    v345 = __ldaxr(v344);
                                  while (__stlxr(v345 - 1, v344));
                                  if (!v345)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                                    std::__shared_weak_count::__release_weak(v343);
                                  }
                                }
                                MEMORY[0x227684CE8](v339, 0x10F0C40B62ED6C6);
                              }
                            }
                            v346 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
                            if (*((_QWORD *)&v493 + 1))
                            {
                              v347 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
                              do
                                v348 = __ldaxr(v347);
                              while (__stlxr(v348 - 1, v347));
                              if (!v348)
                              {
                                ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                                std::__shared_weak_count::__release_weak(v346);
                              }
                            }
                            v349 = (std::__shared_weak_count *)v492.__r_.__value_.__r.__words[2];
                            if (v492.__r_.__value_.__r.__words[2])
                            {
                              v350 = (unint64_t *)(v492.__r_.__value_.__r.__words[2] + 8);
                              do
                                v351 = __ldaxr(v350);
                              while (__stlxr(v351 - 1, v350));
                              if (!v351)
                              {
                                ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                                std::__shared_weak_count::__release_weak(v349);
                              }
                            }
LABEL_619:
                            if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v443.__r_.__value_.__l.__data_);
                            if (v434)
                            {
                              if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
                                sub_223197FA4(&v492, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
                              else
                                v492 = v445;
                              v352 = &v492;
                              if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                v352 = (std::string *)v492.__r_.__value_.__r.__words[0];
                              sub_22322C138((uint64_t)&__p, "Error capturing mesh: %s", (const char *)v352);
                              if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v492.__r_.__value_.__l.__data_);
                              sub_223182C08((uint64_t)&__p);
                            }
                            sub_223182C08((uint64_t)&__p);
                            v353 = v491;
                            if (v491)
                            {
                              v354 = (unint64_t *)&v491->__shared_owners_;
                              do
                                v355 = __ldaxr(v354);
                              while (__stlxr(v355 - 1, v354));
                              if (!v355)
                              {
                                ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                                std::__shared_weak_count::__release_weak(v353);
                              }
                            }
                            goto LABEL_635;
                          }
                        }
                        memcpy(v191, v442, v190);
                        goto LABEL_505;
                      }
                    }
                    memmove(v182, v175, v174);
                    goto LABEL_357;
                  }
                }
                memmove(v179, v177, v178);
                goto LABEL_349;
              }
LABEL_229:
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                sub_223197FA4(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
              else
                __p = __src;
              sub_2238E1660(&v492, "Rooms floor_points file cannot be created ", (uint64_t *)&__p);
              if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v427 = &v492;
              else
                v427 = (std::string *)v492.__r_.__value_.__r.__words[0];
              if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v428 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
              else
                v428 = v492.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 1011, (uint64_t)"", 0, (uint64_t)v427, v428, (void (*)(void **))sub_22457406C);
              if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v492.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              abort();
            }
LABEL_211:
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              sub_223197FA4(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
            else
              __p = __src;
            sub_2238E182C(&v492, (uint64_t *)&__p);
            if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v425 = &v492;
            else
              v425 = (std::string *)v492.__r_.__value_.__r.__words[0];
            if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v426 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
            else
              v426 = v492.__r_.__value_.__l.__size_;
            sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 1000, (uint64_t)"", 0, (uint64_t)v425, v426, (void (*)(void **))sub_22457406C);
            if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v492.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            abort();
          }
LABEL_193:
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          else
            __p = __src;
          sub_2238E1790("Rooms kfs file cannot be created ", (uint64_t *)&__p, &v492);
          if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v423 = &v492;
          else
            v423 = (std::string *)v492.__r_.__value_.__r.__words[0];
          if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v424 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
          else
            v424 = v492.__r_.__value_.__l.__size_;
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 989, (uint64_t)"", 0, (uint64_t)v423, v424, (void (*)(void **))sub_22457406C);
          if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v492.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          abort();
        }
        while (1)
        {
          v78 = sub_223453BB8(v72, (uint64_t *)v72 + 1, (uint64_t **)&v492, (uint64_t **)&__p, v71 + 4);
          if (*v78)
          {
            v79 = (const void **)v71[1];
            if (v79)
              goto LABEL_127;
          }
          else
          {
            v80 = operator new(0x48uLL);
            v81 = v80;
            if (*((char *)v71 + 55) < 0)
            {
              sub_223197FA4(v80 + 32, (void *)v71[4], (unint64_t)v71[5]);
            }
            else
            {
              v82 = *((_OWORD *)v71 + 2);
              *((_QWORD *)v80 + 6) = v71[6];
              *((_OWORD *)v80 + 2) = v82;
            }
            v81[8] = 0;
            *((_BYTE *)v81 + 56) = 2;
            v84 = (float *)v71[7];
            v83 = (float *)v71[8];
            v85 = (double **)operator new(0x18uLL);
            sub_2238EBAEC(v85, v84, v83);
            v81[8] = v85;
            v86 = v492.__r_.__value_.__r.__words[0];
            *v81 = 0;
            v81[1] = 0;
            v81[2] = v86;
            *v78 = (uint64_t)v81;
            v87 = (_QWORD *)**v72;
            if (v87)
            {
              *v72 = v87;
              v81 = (_QWORD *)*v78;
            }
            sub_2231A9A8C(v72[1], v81);
            v72[2] = (_QWORD *)((char *)v72[2] + 1);
            v79 = (const void **)v71[1];
            if (v79)
            {
              do
              {
LABEL_127:
                v88 = (const void ***)v79;
                v79 = (const void **)*v79;
              }
              while (v79);
              goto LABEL_117;
            }
          }
          do
          {
            v88 = (const void ***)v71[2];
            v52 = *v88 == v71;
            v71 = (const void **)v88;
          }
          while (!v52);
LABEL_117:
          v71 = (const void **)v88;
          if (v88 == a4 + 1)
            goto LABEL_107;
        }
      }
LABEL_134:
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        sub_223197FA4(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      else
        __p = __src;
      sub_2238E1700(&v492, (uint64_t *)&__p);
      if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v421 = &v492;
      else
        v421 = (std::string *)v492.__r_.__value_.__r.__words[0];
      if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v422 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
      else
        v422 = v492.__r_.__value_.__l.__size_;
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 977, (uint64_t)"", 0, (uint64_t)v421, v422, (void (*)(void **))sub_22457406C);
      if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v492.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      abort();
    }
LABEL_100:
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      __p = __src;
    sub_2238E1660(&v492, "Rooms completeness file cannot be created ", (uint64_t *)&__p);
    if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v419 = &v492;
    else
      v419 = (std::string *)v492.__r_.__value_.__r.__words[0];
    if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v420 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
    else
      v420 = v492.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Util.cpp", 966, (uint64_t)"", 0, (uint64_t)v419, v420, (void (*)(void **))sub_22457406C);
    if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v492.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    abort();
  }
  v14 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error creating rooms directory: %s", 0x22uLL);
  sub_2238CE8E8(&v471);
  if (**(int **)(v471 + 56) <= 5)
  {
    v15 = *(unsigned __int8 *)(v471 + 72);
    v16 = sub_22322F254(v471, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (v15 || v16)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v471;
      __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v486 = 5;
      v487 = "unknown file";
      v488 = 957;
      v491 = 0;
      v489 = "unknown function";
      v490 = 0;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__src;
      else
        v18 = (std::string *)__src.__r_.__value_.__r.__words[0];
      v19 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      v20 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
      v439 = v20;
      if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v20 = *(const char **)(v19 + 16);
        v21 = *(_QWORD *)(v19 + 24);
      }
      else
      {
        v21 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
      }
      v136 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v492);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v492, byte_255788F40);
        if ((_BYTE)v493 && SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v492.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v137 = byte_255788F40;
      else
        v137 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v138 = byte_255788F40[23];
      else
        v138 = *(_QWORD *)&byte_255788F40[8];
      v492.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v137, v20);
      v139 = &v492.__r_.__value_.__l.__size_;
      if (v138 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v138 >= 0x17)
      {
        v140 = v18;
        v141 = v15;
        v142 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v138 | 7) != 0x17)
          v142 = v138 | 7;
        v143 = v142 + 1;
        v139 = (std::string::size_type *)operator new(v142 + 1);
        v492.__r_.__value_.__r.__words[2] = v138;
        *(_QWORD *)&v493 = v143 | 0x8000000000000000;
        v492.__r_.__value_.__l.__size_ = (std::string::size_type)v139;
        v15 = v141;
        v18 = v140;
      }
      else
      {
        BYTE7(v493) = v138;
        if (!v138)
        {
LABEL_266:
          *((_BYTE *)v139 + v138) = 0;
          BYTE8(v493) = 1;
          v144 = (char *)&v494;
          if (v21 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v21 >= 0x17)
          {
            v145 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v145 = v21 | 7;
            v146 = v145 + 1;
            v144 = (char *)operator new(v145 + 1);
            v495 = v21;
            v496 = v146 | 0x8000000000000000;
            v494 = v144;
          }
          else
          {
            HIBYTE(v496) = v21;
            if (!v21)
            {
LABEL_274:
              v144[v21] = 0;
              v497 = 1;
              v147 = v492.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v496) < 0)
                operator delete(v494);
              if (BYTE8(v493) && SBYTE7(v493) < 0)
                operator delete((void *)v492.__r_.__value_.__l.__size_);
              if (v492.__r_.__value_.__r.__words[0])
                os_release(v492.__r_.__value_.__l.__data_);
              if (!v17 || !*(_QWORD *)(v17 + 24))
              {
                os_log_type_enabled(v147, OS_LOG_TYPE_ERROR);
                LODWORD(v492.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v492.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
                v154 = (void *)_os_log_send_and_compose_impl();
                if (v154)
                  free(v154);
                goto LABEL_493;
              }
              v148 = _os_log_pack_size();
              v149 = operator new(v148, (std::align_val_t)8uLL);
              v150 = (_QWORD *)operator new();
              *v150 = &off_24EC1F7F0;
              v150[1] = 0;
              v150[2] = 0;
              v150[3] = v149;
              v478.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
              v478.__r_.__value_.__l.__size_ = (std::string::size_type)v149;
              v479 = 0uLL;
              v478.__r_.__value_.__r.__words[2] = (std::string::size_type)v150;
              v151 = strlen((const char *)v18);
              if (v151 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v152 = v151;
              if (v151 >= 0x17)
              {
                v193 = (v151 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v151 | 7) != 0x17)
                  v193 = v151 | 7;
                v194 = v193 + 1;
                v153 = operator new(v193 + 1);
                *(_QWORD *)&v481 = v152;
                *((_QWORD *)&v481 + 1) = v194 | 0x8000000000000000;
                __dst = v153;
              }
              else
              {
                HIBYTE(v481) = v151;
                v153 = &__dst;
                if (!v151)
                {
LABEL_376:
                  *((_BYTE *)v153 + v152) = 0;
                  v195 = __dst;
                  *(_QWORD *)&v482 = v481;
                  *(_QWORD *)((char *)&v482 + 7) = *(_QWORD *)((char *)&v481 + 7);
                  v196 = HIBYTE(v481);
                  v197 = operator new(0x38uLL);
                  v197[1] = 0;
                  v197[2] = 0;
                  v197[3] = off_24EC1FA48;
                  *v197 = &off_24EC1F9F8;
                  v198 = v482;
                  v197[4] = v195;
                  v197[5] = v198;
                  *(_QWORD *)((char *)v197 + 47) = *(_QWORD *)((char *)&v482 + 7);
                  *((_BYTE *)v197 + 55) = v196;
                  *(_QWORD *)&v482 = 0;
                  *(_QWORD *)((char *)&v482 + 7) = 0;
                  v199 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
                  *(_QWORD *)&v479 = v197 + 3;
                  *((_QWORD *)&v479 + 1) = v197;
                  if (v199)
                  {
                    v200 = (unint64_t *)&v199->__shared_owners_;
                    do
                      v201 = __ldaxr(v200);
                    while (__stlxr(v201 - 1, v200));
                    if (!v201)
                    {
                      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                      std::__shared_weak_count::__release_weak(v199);
                    }
                  }
                  v492 = v478;
                  v202 = (char *)v479;
                  if (v478.__r_.__value_.__r.__words[2])
                  {
                    v203 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                    do
                      v204 = __ldxr(v203);
                    while (__stxr(v204 + 1, v203));
                  }
                  v205 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
                  *(_QWORD *)&v493 = v202;
                  *((_QWORD *)&v493 + 1) = *((_QWORD *)&v479 + 1);
                  if (*((_QWORD *)&v479 + 1))
                  {
                    v206 = (unint64_t *)(*((_QWORD *)&v479 + 1) + 8);
                    do
                      v207 = __ldxr(v206);
                    while (__stxr(v207 + 1, v206));
                    v494 = v202;
                    do
                      v208 = __ldaxr(v206);
                    while (__stlxr(v208 - 1, v206));
                    if (!v208)
                    {
                      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                      std::__shared_weak_count::__release_weak(v205);
                    }
                  }
                  else
                  {
                    v494 = v202;
                  }
                  v242 = (std::__shared_weak_count *)v478.__r_.__value_.__r.__words[2];
                  if (v478.__r_.__value_.__r.__words[2])
                  {
                    v243 = (unint64_t *)(v478.__r_.__value_.__r.__words[2] + 8);
                    do
                      v244 = __ldaxr(v243);
                    while (__stlxr(v244 - 1, v243));
                    if (!v244)
                    {
                      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                      std::__shared_weak_count::__release_weak(v242);
                    }
                  }
                  v245 = v492.__r_.__value_.__r.__words[0];
                  if (v494[31] >= 0)
                    v246 = v494 + 8;
                  else
                    v246 = (char *)*((_QWORD *)v494 + 1);
                  v247 = _os_log_pack_fill();
                  *(_DWORD *)v247 = 136315138;
                  *(_QWORD *)(v247 + 4) = v246;
                  v248 = operator new();
                  v249 = *(unsigned __int8 *)(v19 + 39);
                  v250 = v439;
                  if ((v249 & 0x80u) != 0)
                  {
                    v250 = *(const char **)(v19 + 16);
                    v249 = *(_QWORD *)(v19 + 24);
                  }
                  *(_QWORD *)v248 = v245;
                  *(_OWORD *)(v248 + 8) = *(_OWORD *)&v492.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v492.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v248 + 24) = v493;
                  v493 = 0uLL;
                  *(_QWORD *)(v248 + 40) = v250;
                  *(_QWORD *)(v248 + 48) = v249;
                  *(_BYTE *)(v248 + 56) = 16;
                  __dst = 0;
                  v478.__r_.__value_.__r.__words[0] = v248;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v478);
                  v251 = v478.__r_.__value_.__r.__words[0];
                  v478.__r_.__value_.__r.__words[0] = 0;
                  if (v251)
                  {
                    v252 = *(std::__shared_weak_count **)(v251 + 32);
                    if (v252)
                    {
                      v253 = (unint64_t *)&v252->__shared_owners_;
                      do
                        v254 = __ldaxr(v253);
                      while (__stlxr(v254 - 1, v253));
                      if (!v254)
                      {
                        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                        std::__shared_weak_count::__release_weak(v252);
                      }
                    }
                    v255 = *(std::__shared_weak_count **)(v251 + 16);
                    if (v255)
                    {
                      v256 = (unint64_t *)&v255->__shared_owners_;
                      do
                        v257 = __ldaxr(v256);
                      while (__stlxr(v257 - 1, v256));
                      if (!v257)
                      {
                        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                        std::__shared_weak_count::__release_weak(v255);
                      }
                    }
                    MEMORY[0x227684CE8](v251, 0x10F0C40B62ED6C6);
                    v258 = __dst;
                    __dst = 0;
                    if (v258)
                    {
                      v259 = (std::__shared_weak_count *)v258[4];
                      if (v259)
                      {
                        v260 = (unint64_t *)&v259->__shared_owners_;
                        do
                          v261 = __ldaxr(v260);
                        while (__stlxr(v261 - 1, v260));
                        if (!v261)
                        {
                          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                          std::__shared_weak_count::__release_weak(v259);
                        }
                      }
                      v262 = (std::__shared_weak_count *)v258[2];
                      if (v262)
                      {
                        v263 = (unint64_t *)&v262->__shared_owners_;
                        do
                          v264 = __ldaxr(v263);
                        while (__stlxr(v264 - 1, v263));
                        if (!v264)
                        {
                          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                          std::__shared_weak_count::__release_weak(v262);
                        }
                      }
                      MEMORY[0x227684CE8](v258, 0x10F0C40B62ED6C6);
                    }
                  }
                  v265 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
                  if (*((_QWORD *)&v493 + 1))
                  {
                    v266 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
                    do
                      v267 = __ldaxr(v266);
                    while (__stlxr(v267 - 1, v266));
                    if (!v267)
                    {
                      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                      std::__shared_weak_count::__release_weak(v265);
                    }
                  }
                  v268 = (std::__shared_weak_count *)v492.__r_.__value_.__r.__words[2];
                  if (v492.__r_.__value_.__r.__words[2])
                  {
                    v269 = (unint64_t *)(v492.__r_.__value_.__r.__words[2] + 8);
                    do
                      v270 = __ldaxr(v269);
                    while (__stlxr(v270 - 1, v269));
                    if (!v270)
                    {
                      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                      std::__shared_weak_count::__release_weak(v268);
                    }
                  }
LABEL_493:
                  if (v15)
                  {
                    v271 = &__src;
                    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v271 = (std::string *)__src.__r_.__value_.__r.__words[0];
                    sub_22322C138((uint64_t)&__p, "Error creating rooms directory: %s", (const char *)v271);
                    sub_223182C08((uint64_t)&__p);
                  }
                  sub_223182C08((uint64_t)&__p);
                  v272 = v491;
                  if (!v491)
                    goto LABEL_734;
                  v273 = (unint64_t *)&v491->__shared_owners_;
                  do
                    v274 = __ldaxr(v273);
                  while (__stlxr(v274 - 1, v273));
                  goto LABEL_732;
                }
              }
              memcpy(v153, v18, v152);
              goto LABEL_376;
            }
          }
          memmove(v144, v20, v21);
          goto LABEL_274;
        }
      }
      memmove(v139, v137, v138);
      goto LABEL_266;
    }
  }
LABEL_734:
  v131 = 0;
LABEL_735:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  return v131;
}

void sub_2238E097C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 168) && *(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x220]);
  if (SLOBYTE(STACK[0x217]) < 0)
  {
    operator delete((void *)STACK[0x200]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2238E1660(std::string *a1, char *__s, uint64_t *a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[0] = __s;
  v5 = strlen(__s);
  v6 = *((unsigned __int8 *)a3 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a3;
  else
    v7 = (uint64_t *)*a3;
  if ((v6 & 0x80u) != 0)
    v6 = a3[1];
  v8[1] = v5;
  v8[2] = v7;
  v8[3] = v6;
  sub_2231A9820((uint64_t)v8, (uint64_t)&v9, 0, 0, a1);
}

void sub_2238E1700(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Rooms edge completeness file cannot be created ";
  v4[1] = 47;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_2238E1790(const char *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  size_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[0] = a1;
  v5 = strlen(a1);
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v8[1] = v5;
  v8[2] = v7;
  v8[3] = v6;
  sub_2231A9820((uint64_t)v8, (uint64_t)&v9, 0, 0, a3);
}

void sub_2238E182C(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Rooms ceiling_points file cannot be created ";
  v4[1] = 44;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_2238E18BC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned __int8 v9;
  const void *v10;
  size_t v11;
  unsigned __int8 v12;
  const void *v13;
  size_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  double v22;
  unsigned __int8 v23;
  unsigned int *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  double v43;
  size_t v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  std::string::size_type v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  int v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  void *v85;
  unsigned __int8 v86;
  const char *v87;
  size_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  size_t v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  char *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::string::size_type v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  int v137;
  const char *v138;
  const char *v139;
  std::string *p_p;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  int v150;
  char *__s;
  char *__sa;
  int v153;
  unsigned int *v154;
  std::string v155;
  char v156;
  void *v157;
  char v158;
  void *v159;
  char v160;
  char v161;
  char v162;
  void *v163[2];
  char v164;
  void **v165;
  void *v166[2];
  char v167;
  uint64_t v168;
  void *__dst[2];
  std::__shared_weak_count *v170;
  char v171;
  void *v172;
  char v173;
  void *v174;
  char v175;
  char v176;
  char v177;
  char *v178;
  __int128 v179;
  int v180;
  const char *v181;
  int v182;
  const char *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  double v186;
  std::string __p;
  __int128 v188;
  char *v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  char *v192;
  char *v193;
  _BYTE v194[48];
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  char v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 1232);
  v186 = (double)v7 / 1000000000.0;
  if (v7 >= 1 && v7 <= *a2)
  {
    v9 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2238D25BC(v194);
    if (*(char *)(*(_QWORD *)v194 + 39) < 0)
    {
      v10 = *(const void **)(*(_QWORD *)v194 + 16);
      v11 = *(_QWORD *)(*(_QWORD *)v194 + 24);
    }
    else
    {
      v10 = (const void *)(*(_QWORD *)v194 + 16);
      v11 = *(unsigned __int8 *)(*(_QWORD *)v194 + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v10, v11, "Found out of order bundle to process at time: %lf with latest bundle processed at time: %lf", 0x5BuLL);
    sub_2238CE8E8(v166);
    if (**((int **)v166[0] + 7) > 5
      || (v15 = *((unsigned __int8 *)v166[0] + 72),
          v16 = sub_22322F254((uint64_t)v166[0], "OSLogSurrogateAppender", 1, 0),
          v17 = v16,
          !v15)
      && !v16)
    {
LABEL_115:
      kdebug_trace();
      *(double *)v163 = (double)*a2 / 1000000000.0;
      v180 = -1;
      v178 = (char *)operator new(0x30uLL);
      v179 = xmmword_2245C43D0;
      strcpy(v178, "Found out of order bundle to process at time: ");
      v180 = 1;
      sub_223701C90((uint64_t *)&v186, &__p);
      *(_QWORD *)v194 = &v178;
      *(_QWORD *)&v194[8] = &__p;
      *(_QWORD *)&v194[16] = &v178;
      *(_QWORD *)&v194[24] = &__p;
      *(_QWORD *)&v194[32] = &__p;
      if (v180 == -1)
        sub_22316DD70();
      v166[0] = v194;
      ((void (*)(void **, char **))off_24EC5C358[v180])(v166, &v178);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v194 = &v178;
      *(_QWORD *)&v194[8] = " with latest bundle processed at time: ";
      *(_QWORD *)&v194[16] = &v178;
      *(_QWORD *)&v194[24] = " with latest bundle processed at time: ";
      *(_QWORD *)&v194[32] = " with latest bundle processed at time: ";
      if (v180 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
      ((void (*)(std::string *, char **))off_24EC5C5A0[v180])(&__p, &v178);
      sub_223701C90((uint64_t *)v163, &__p);
      *(_QWORD *)v194 = &v178;
      *(_QWORD *)&v194[8] = &__p;
      *(_QWORD *)&v194[16] = &v178;
      *(_QWORD *)&v194[24] = &__p;
      *(_QWORD *)&v194[32] = &__p;
      if (v180 == -1)
        sub_22316DD70();
      v166[0] = v194;
      ((void (*)(void **, char **))off_24EC5C358[v180])(v166, &v178);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v180 == -1)
        sub_22316DD70();
      *(_QWORD *)v194 = &__p;
      ((void (*)(__int128 *__return_ptr, _BYTE *, char **))off_24EC5C388[v180])(&v190, v194, &v178);
      if (v180 != -1)
        ((void (*)(_BYTE *, char **))off_24EC5C340[v180])(v194, &v178);
      if (SHIBYTE(v191) < 0)
      {
        sub_223197FA4(__dst, (void *)v190, *((unint64_t *)&v190 + 1));
      }
      else
      {
        *(_OWORD *)__dst = v190;
        v170 = v191;
      }
      v171 = 1;
      LOBYTE(v172) = 0;
      v176 = 0;
      v177 = 1;
      sub_2231A958C(5u, (__int128 *)__dst, (uint64_t)v194);
      *(_OWORD *)a4 = *(_OWORD *)v194;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v201)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v83 = v194[40];
        if (v194[40])
        {
          *(_OWORD *)(a4 + 16) = *(_OWORD *)&v194[16];
          *(_QWORD *)(a4 + 32) = *(_QWORD *)&v194[32];
          memset(&v194[16], 0, 24);
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v200)
        {
          v84 = v197;
          *(_QWORD *)(a4 + 64) = v196;
          *(_OWORD *)(a4 + 48) = v195;
          v195 = 0uLL;
          *(_QWORD *)(a4 + 72) = v84;
          *(_OWORD *)(a4 + 80) = v198;
          *(_QWORD *)(a4 + 96) = v199;
          v196 = 0;
          v198 = 0uLL;
          v199 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v83 && (v194[39] & 0x80000000) != 0)
          operator delete(*(void **)&v194[16]);
        if (!v177)
          goto LABEL_145;
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
        if (!v177)
          goto LABEL_145;
      }
      if (!v176)
        goto LABEL_142;
      if (v175 < 0)
      {
        operator delete(v174);
        if ((v173 & 0x80000000) == 0)
        {
LABEL_142:
          if (v171)
            goto LABEL_143;
          goto LABEL_145;
        }
      }
      else if ((v173 & 0x80000000) == 0)
      {
        goto LABEL_142;
      }
      operator delete(v172);
      if (v171)
      {
LABEL_143:
        if (SHIBYTE(v170) < 0)
          operator delete(__dst[0]);
      }
LABEL_145:
      if ((SHIBYTE(v191) & 0x80000000) == 0)
        return;
      v85 = (void *)v190;
      goto LABEL_288;
    }
    v153 = v15;
    v178 = (char *)v166;
    *(std::chrono::steady_clock::time_point *)&v179 = std::chrono::steady_clock::now();
    *((std::chrono::system_clock::time_point *)&v179 + 1) = std::chrono::system_clock::now();
    v180 = 5;
    v181 = "unknown file";
    v182 = 1039;
    v184 = 0;
    v185 = 0;
    v183 = "unknown function";
    v18 = *(_QWORD *)v178;
    v19 = (const char *)(*(_QWORD *)v178 + 16);
    v149 = *(_QWORD *)v178;
    __s = (char *)v19;
    if (*(char *)(*(_QWORD *)v178 + 39) < 0)
    {
      v19 = *(const char **)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      v21 = *a2;
      v22 = v186;
      v33 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v33 & 1) != 0)
        goto LABEL_33;
    }
    else
    {
      v20 = *(unsigned __int8 *)(*(_QWORD *)v178 + 39);
      v21 = *a2;
      v22 = v186;
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v23 & 1) != 0)
        goto LABEL_33;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v194);
      sub_223199C58("com.apple.cv3d", (unint64_t)v194, byte_255788F40);
      if (v194[24] && (v194[23] & 0x80000000) != 0)
        operator delete(*(void **)v194);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_33:
    if (byte_255788F40[23] >= 0)
      v34 = byte_255788F40;
    else
      v34 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v35 = byte_255788F40[23];
    else
      v35 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v194 = os_log_create(v34, v19);
    v36 = &v194[8];
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v35 >= 0x17)
    {
      v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v37 = v35 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      *(_QWORD *)&v194[16] = v35;
      *(_QWORD *)&v194[24] = v38 | 0x8000000000000000;
      *(_QWORD *)&v194[8] = v36;
    }
    else
    {
      v194[31] = v35;
      if (!v35)
      {
LABEL_47:
        v36[v35] = 0;
        v194[32] = 1;
        v39 = &v194[40];
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v20 >= 0x17)
        {
          v40 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v40 = v20 | 7;
          v41 = v40 + 1;
          v39 = operator new(v40 + 1);
          *(_QWORD *)&v195 = v20;
          *((_QWORD *)&v195 + 1) = v41 | 0x8000000000000000;
          *(_QWORD *)&v194[40] = v39;
        }
        else
        {
          HIBYTE(v195) = v20;
          if (!v20)
            goto LABEL_55;
        }
        memmove(v39, v19, v20);
LABEL_55:
        v39[v20] = 0;
        LOBYTE(v196) = 1;
        v42 = *(NSObject **)v194;
        if (SHIBYTE(v195) < 0)
          operator delete(*(void **)&v194[40]);
        if (v194[32] && (v194[31] & 0x80000000) != 0)
          operator delete(*(void **)&v194[8]);
        if (*(_QWORD *)v194)
          os_release(*(void **)v194);
        v43 = (double)v21 / 1000000000.0;
        if (v17 && *(_QWORD *)(v17 + 24))
        {
          v44 = _os_log_pack_size();
          v45 = (std::__shared_weak_count_vtbl *)operator new(v44, (std::align_val_t)8uLL);
          v46 = (std::__shared_weak_count *)operator new();
          v47 = v46;
          v46->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          v46->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v46->__shared_weak_owners_ = 0;
          v46[1].__vftable = v45;
          *(_QWORD *)v194 = v45;
          *(_QWORD *)&v194[8] = v45;
          *(_QWORD *)&v194[16] = v46;
          do
            v49 = __ldxr(p_shared_owners);
          while (__stxr(v49 + 1, p_shared_owners));
          memset(&v194[24], 0, 24);
          do
            v50 = __ldaxr(p_shared_owners);
          while (__stlxr(v50 - 1, p_shared_owners));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v47);
          }
          v51 = *(_QWORD *)v194;
          v52 = _os_log_pack_fill();
          *(_DWORD *)v52 = 134218240;
          *(double *)(v52 + 4) = v22;
          *(_WORD *)(v52 + 12) = 2048;
          *(double *)(v52 + 14) = v43;
          v53 = operator new();
          v54 = *(unsigned __int8 *)(v149 + 39);
          v55 = *(char **)(v149 + 16);
          v56 = *(_QWORD *)(v149 + 24);
          v57 = *(_OWORD *)&v194[24];
          *(_OWORD *)(v53 + 8) = *(_OWORD *)&v194[8];
          if ((v54 & 0x80u) != 0)
            v54 = v56;
          else
            v55 = __s;
          *(_QWORD *)v53 = v51;
          *(_QWORD *)&v194[8] = 0;
          *(_QWORD *)&v194[16] = 0;
          *(_OWORD *)(v53 + 24) = v57;
          *(_QWORD *)&v194[24] = 0;
          *(_QWORD *)&v194[32] = 0;
          *(_QWORD *)(v53 + 40) = v55;
          *(_QWORD *)(v53 + 48) = v54;
          *(_BYTE *)(v53 + 56) = 16;
          *(_QWORD *)&v190 = 0;
          __p.__r_.__value_.__r.__words[0] = v53;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &__p);
          v58 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          if (v58)
          {
            v59 = *(std::__shared_weak_count **)(v58 + 32);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            v62 = *(std::__shared_weak_count **)(v58 + 16);
            if (v62)
            {
              v63 = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            MEMORY[0x227684CE8](v58, 0x10F0C40B62ED6C6);
            v65 = v190;
            *(_QWORD *)&v190 = 0;
            if (v65)
            {
              v66 = *(std::__shared_weak_count **)(v65 + 32);
              if (v66)
              {
                v67 = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              v69 = *(std::__shared_weak_count **)(v65 + 16);
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              MEMORY[0x227684CE8](v65, 0x10F0C40B62ED6C6);
            }
          }
          v72 = *(std::__shared_weak_count **)&v194[32];
          v73 = v153;
          if (*(_QWORD *)&v194[32])
          {
            v74 = (unint64_t *)(*(_QWORD *)&v194[32] + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v76 = *(std::__shared_weak_count **)&v194[16];
          if (*(_QWORD *)&v194[16])
          {
            v77 = (unint64_t *)(*(_QWORD *)&v194[16] + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
        }
        else
        {
          os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v194 = 134218240;
          *(double *)&v194[4] = v22;
          *(_WORD *)&v194[12] = 2048;
          *(double *)&v194[14] = v43;
          v79 = (void *)_os_log_send_and_compose_impl();
          v73 = v153;
          if (v79)
            free(v79);
        }
        if (v73)
        {
          sub_22322C138((uint64_t)&v178, "Found out of order bundle to process at time: %lf with latest bundle processed at time: %lf", v186, (double)*a2 / 1000000000.0);
          sub_223182C08((uint64_t)&v178);
        }
        sub_223182C08((uint64_t)&v178);
        v80 = v185;
        if (v185)
        {
          v81 = (unint64_t *)&v185->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        goto LABEL_115;
      }
    }
    memmove(v36, v34, v35);
    goto LABEL_47;
  }
  if (!*(_BYTE *)(a3 + 8) || *(_DWORD *)(a1 + 1328) == *(_DWORD *)a3 && *(_DWORD *)(a1 + 1332) == *(_DWORD *)(a3 + 4))
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v12 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_2238D25BC(v194);
  if (*(char *)(*(_QWORD *)v194 + 39) < 0)
  {
    v13 = *(const void **)(*(_QWORD *)v194 + 16);
    v14 = *(_QWORD *)(*(_QWORD *)v194 + 24);
  }
  else
  {
    v13 = (const void *)(*(_QWORD *)v194 + 16);
    v14 = *(unsigned __int8 *)(*(_QWORD *)v194 + 39);
  }
  sub_223195728((uint64_t)&stru_255789280, v13, v14, "Frame dimensions do not match, expected %s received %s", 0x36uLL);
  sub_2238CE8E8(&v168);
  v24 = (unsigned int *)(a1 + 1328);
  if (**(int **)(v168 + 56) <= 5)
  {
    v25 = *(unsigned __int8 *)(v168 + 72);
    v26 = sub_22322F254(v168, "OSLogSurrogateAppender", 1, 0);
    v27 = v26;
    if (v25 || v26)
    {
      v150 = v25;
      v178 = (char *)&v168;
      *(std::chrono::steady_clock::time_point *)&v179 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v179 + 1) = std::chrono::system_clock::now();
      v180 = 5;
      v181 = "unknown file";
      v182 = 1050;
      v184 = 0;
      v185 = 0;
      v183 = "unknown function";
      sub_2238E33B4((int)v166, *(_DWORD *)a3, (unsigned int *)(a3 + 4));
      if (v167 >= 0)
        v28 = v166;
      else
        v28 = (void **)v166[0];
      __sa = (char *)v28;
      sub_2238E33B4((int)v163, *(_DWORD *)(a1 + 1328), (unsigned int *)(a1 + 1332));
      v148 = (unsigned int *)(a1 + 1332);
      if (v164 >= 0)
        v29 = v163;
      else
        v29 = (void **)v163[0];
      v165 = v29;
      v30 = *(_QWORD *)v178;
      v31 = (const char *)(*(_QWORD *)v178 + 16);
      v146 = v31;
      v147 = *(_QWORD *)v178;
      if (*(char *)(*(_QWORD *)v178 + 39) < 0)
      {
        v31 = *(const char **)(v30 + 16);
        v32 = *(_QWORD *)(v30 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(*(_QWORD *)v178 + 39);
      }
      v154 = v24;
      v86 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v194);
        sub_223199C58("com.apple.cv3d", (unint64_t)v194, byte_255788F40);
        if (v194[24] && (v194[23] & 0x80000000) != 0)
          operator delete(*(void **)v194);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v87 = byte_255788F40;
      else
        v87 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v88 = byte_255788F40[23];
      else
        v88 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v194 = os_log_create(v87, v31);
      v89 = &v194[8];
      if (v88 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v88 >= 0x17)
      {
        v90 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v88 | 7) != 0x17)
          v90 = v88 | 7;
        v91 = v90 + 1;
        v89 = operator new(v90 + 1);
        *(_QWORD *)&v194[16] = v88;
        *(_QWORD *)&v194[24] = v91 | 0x8000000000000000;
        *(_QWORD *)&v194[8] = v89;
      }
      else
      {
        v194[31] = v88;
        if (!v88)
        {
LABEL_166:
          v89[v88] = 0;
          v194[32] = 1;
          v92 = &v194[40];
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v32 >= 0x17)
          {
            v93 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v93 = v32 | 7;
            v94 = v93 + 1;
            v92 = operator new(v93 + 1);
            *(_QWORD *)&v195 = v32;
            *((_QWORD *)&v195 + 1) = v94 | 0x8000000000000000;
            *(_QWORD *)&v194[40] = v92;
          }
          else
          {
            HIBYTE(v195) = v32;
            if (!v32)
            {
LABEL_174:
              v92[v32] = 0;
              LOBYTE(v196) = 1;
              v95 = *(NSObject **)v194;
              if (SHIBYTE(v195) < 0)
                operator delete(*(void **)&v194[40]);
              v24 = v154;
              if (v194[32] && (v194[31] & 0x80000000) != 0)
                operator delete(*(void **)&v194[8]);
              if (*(_QWORD *)v194)
                os_release(*(void **)v194);
              if (v27 && *(_QWORD *)(v27 + 24))
              {
                v96 = _os_log_pack_size();
                v97 = (std::__shared_weak_count_vtbl *)operator new(v96, (std::align_val_t)8uLL);
                v98 = (std::__shared_weak_count *)operator new();
                v98->__shared_owners_ = 0;
                v99 = (unint64_t *)&v98->__shared_owners_;
                v98->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v98->__shared_weak_owners_ = 0;
                v98[1].__vftable = v97;
                *(_QWORD *)&v190 = v97;
                *((_QWORD *)&v190 + 1) = v97;
                v193 = 0;
                v191 = v98;
                v192 = 0;
                sub_2238E8940((uint64_t)v194, __sa, (const char **)&v165);
                v100 = (char *)operator new(0x50uLL);
                v101 = (std::__shared_weak_count *)v100;
                *((_QWORD *)v100 + 1) = 0;
                v102 = (unint64_t *)(v100 + 8);
                *((_QWORD *)v100 + 2) = 0;
                *(_QWORD *)v100 = &off_24EC20730;
                *((_QWORD *)v100 + 3) = off_24EC20780;
                *((_OWORD *)v100 + 2) = *(_OWORD *)&v194[8];
                *((_QWORD *)v100 + 6) = *(_QWORD *)&v194[24];
                *(_OWORD *)(v100 + 56) = *(_OWORD *)&v194[32];
                *((_QWORD *)v100 + 9) = v195;
                v192 = v100 + 24;
                v193 = v100;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v97;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v98;
                do
                  v103 = __ldxr(v99);
                while (__stxr(v103 + 1, v99));
                *(_QWORD *)&v188 = v100 + 24;
                *((_QWORD *)&v188 + 1) = v100;
                do
                  v104 = __ldxr(v102);
                while (__stxr(v104 + 1, v102));
                v189 = v100 + 24;
                do
                  v105 = __ldaxr(v102);
                while (__stlxr(v105 - 1, v102));
                if (!v105)
                {
                  (*(void (**)(char *))(*(_QWORD *)v100 + 16))(v100);
                  std::__shared_weak_count::__release_weak(v101);
                }
                v106 = v191;
                if (v191)
                {
                  v107 = (unint64_t *)&v191->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                v109 = __p.__r_.__value_.__r.__words[0];
                if (v189[31] >= 0)
                  v110 = v189 + 8;
                else
                  v110 = (char *)*((_QWORD *)v189 + 1);
                if (v189[55] >= 0)
                  v111 = v189 + 32;
                else
                  v111 = (char *)*((_QWORD *)v189 + 4);
                v112 = _os_log_pack_fill();
                *(_DWORD *)v112 = 136315394;
                *(_QWORD *)(v112 + 4) = v110;
                *(_WORD *)(v112 + 12) = 2080;
                *(_QWORD *)(v112 + 14) = v111;
                v113 = operator new();
                v114 = *(unsigned __int8 *)(v147 + 39);
                v115 = v146;
                if ((v114 & 0x80u) != 0)
                {
                  v115 = *(const char **)(v147 + 16);
                  v114 = *(_QWORD *)(v147 + 24);
                }
                *(_QWORD *)v113 = v109;
                *(_OWORD *)(v113 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v113 + 24) = v188;
                v188 = 0uLL;
                *(_QWORD *)(v113 + 40) = v115;
                *(_QWORD *)(v113 + 48) = v114;
                *(_BYTE *)(v113 + 56) = 16;
                *(_QWORD *)&v190 = 0;
                *(_QWORD *)v194 = v113;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), v194);
                v25 = v150;
                v116 = *(_QWORD *)v194;
                *(_QWORD *)v194 = 0;
                if (v116)
                {
                  v117 = *(std::__shared_weak_count **)(v116 + 32);
                  if (v117)
                  {
                    v118 = (unint64_t *)&v117->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  v120 = *(std::__shared_weak_count **)(v116 + 16);
                  if (v120)
                  {
                    v121 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                  MEMORY[0x227684CE8](v116, 0x10F0C40B62ED6C6);
                  v123 = v190;
                  *(_QWORD *)&v190 = 0;
                  if (v123)
                  {
                    v124 = *(std::__shared_weak_count **)(v123 + 32);
                    if (v124)
                    {
                      v125 = (unint64_t *)&v124->__shared_owners_;
                      do
                        v126 = __ldaxr(v125);
                      while (__stlxr(v126 - 1, v125));
                      if (!v126)
                      {
                        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                        std::__shared_weak_count::__release_weak(v124);
                      }
                    }
                    v127 = *(std::__shared_weak_count **)(v123 + 16);
                    if (v127)
                    {
                      v128 = (unint64_t *)&v127->__shared_owners_;
                      do
                        v129 = __ldaxr(v128);
                      while (__stlxr(v129 - 1, v128));
                      if (!v129)
                      {
                        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                        std::__shared_weak_count::__release_weak(v127);
                      }
                    }
                    MEMORY[0x227684CE8](v123, 0x10F0C40B62ED6C6);
                  }
                }
                v130 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
                if (*((_QWORD *)&v188 + 1))
                {
                  v131 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                  }
                }
                v133 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v134 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
                v24 = v154;
              }
              else
              {
                os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v194 = 136315394;
                *(_QWORD *)&v194[4] = __sa;
                *(_WORD *)&v194[12] = 2080;
                *(_QWORD *)&v194[14] = v165;
                v136 = (void *)_os_log_send_and_compose_impl();
                if (v136)
                  free(v136);
              }
              if (v164 < 0)
              {
                operator delete(v163[0]);
                if ((v167 & 0x80000000) == 0)
                {
LABEL_242:
                  if (!v25)
                    goto LABEL_256;
                  goto LABEL_246;
                }
              }
              else if ((v167 & 0x80000000) == 0)
              {
                goto LABEL_242;
              }
              operator delete(v166[0]);
              if (!v25)
              {
LABEL_256:
                sub_223182C08((uint64_t)&v178);
                v141 = v185;
                if (v185)
                {
                  v142 = (unint64_t *)&v185->__shared_owners_;
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                goto LABEL_261;
              }
LABEL_246:
              sub_2238E33B4((int)v194, *(_DWORD *)a3, (unsigned int *)(a3 + 4));
              v137 = v194[23];
              v138 = *(const char **)v194;
              sub_2238E33B4((int)&__p, *v154, v148);
              v139 = v194;
              if (v137 < 0)
                v139 = v138;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              sub_22322C138((uint64_t)&v178, "Frame dimensions do not match, expected %s received %s", v139, (const char *)p_p);
              v24 = v154;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if ((v194[23] & 0x80000000) != 0)
                operator delete(*(void **)v194);
              sub_223182C08((uint64_t)&v178);
              goto LABEL_256;
            }
          }
          memmove(v92, v31, v32);
          goto LABEL_174;
        }
      }
      memmove(v89, v87, v88);
      goto LABEL_166;
    }
  }
LABEL_261:
  kdebug_trace();
  v180 = 0;
  sub_223701BA0(&v178, "Frame dimensions do not match, expected ");
  sub_2231BFC9C((uint64_t)v166, (uint64_t)&v178, (unsigned int *)a3);
  *(_QWORD *)v194 = &v178;
  *(_QWORD *)&v194[8] = " received ";
  *(_QWORD *)&v194[16] = &v178;
  *(_QWORD *)&v194[24] = " received ";
  *(_QWORD *)&v194[32] = " received ";
  if (v180 == -1)
    sub_22316DD70();
  *(_QWORD *)&v190 = v194;
  ((void (*)(__int128 *, char **))off_24EC5C5B8[v180])(&v190, &v178);
  sub_2231BFC9C((uint64_t)v194, (uint64_t)&v178, v24);
  if (v180 == -1)
    sub_22316DD70();
  *(_QWORD *)v194 = &v190;
  ((void (*)(std::string *__return_ptr, _BYTE *, char **))off_24EC5C388[v180])(&__p, v194, &v178);
  if (v180 != -1)
    ((void (*)(_BYTE *, char **))off_24EC5C340[v180])(v194, &v178);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v155, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v155 = __p;
  v156 = 1;
  LOBYTE(v157) = 0;
  v161 = 0;
  v162 = 1;
  sub_2231A958C(5u, (__int128 *)&v155, (uint64_t)v194);
  *(_OWORD *)a4 = *(_OWORD *)v194;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v201)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v144 = v194[40];
    if (v194[40])
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)&v194[16];
      *(_QWORD *)(a4 + 32) = *(_QWORD *)&v194[32];
      memset(&v194[16], 0, 24);
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v200)
    {
      v145 = v197;
      *(_QWORD *)(a4 + 64) = v196;
      *(_OWORD *)(a4 + 48) = v195;
      v195 = 0uLL;
      *(_QWORD *)(a4 + 72) = v145;
      *(_OWORD *)(a4 + 80) = v198;
      *(_QWORD *)(a4 + 96) = v199;
      v196 = 0;
      v198 = 0uLL;
      v199 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v144 && (v194[39] & 0x80000000) != 0)
      operator delete(*(void **)&v194[16]);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (v162)
  {
    if (v161)
    {
      if (v160 < 0)
        operator delete(v159);
      if (v158 < 0)
        operator delete(v157);
    }
    if (v156 && SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v85 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_288:
    operator delete(v85);
  }
}

void sub_2238E3000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  if (*(_BYTE *)(v60 - 216) && *(char *)(v60 - 217) < 0)
    operator delete(*(void **)(v60 - 240));
  __cxa_guard_abort(&qword_255788F58);
  if (a38 < 0)
    operator delete(__p);
  if (a45 < 0)
  {
    operator delete(a40);
    sub_223182DAC((uint64_t)&a60);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_2238E32E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22319FD28((uint64_t)va);
  JUMPOUT(0x2238E32F0);
}

void sub_2238E3328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_22319FD28((uint64_t)&a41);
  JUMPOUT(0x2238E3334);
}

void sub_2238E3358(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2238E3370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_22319B964((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_2238E3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;

  if (a69 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a54);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2238E3374);
}

uint64_t sub_2238E33B4(int a1, unsigned int __val, unsigned int *a3)
{
  uint64_t result;
  _BYTE v5[24];
  int v6;
  std::string v7;
  std::string *v8;
  std::string *v9;
  _BYTE *v10;
  std::string *v11;
  std::string *v12;
  std::string **v13;

  v6 = 0;
  std::to_string(&v7, __val);
  v8 = (std::string *)v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v13 = &v8;
  ((void (*)(std::string ***, _BYTE *))sub_22319B9BC)(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v8 = (std::string *)v5;
  v9 = (std::string *)",";
  v10 = v5;
  v11 = (std::string *)",";
  v12 = (std::string *)",";
  if (v6 == -1)
    sub_22316DD70();
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  ((void (*)(std::string *, _BYTE *))off_24EC5C370[v6])(&v7, v5);
  std::to_string(&v7, *a3);
  v8 = (std::string *)v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  if (v6 == -1)
    sub_22316DD70();
  v13 = &v8;
  ((void (*)(std::string ***, _BYTE *))off_24EC5C358[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (v6 == -1)
    sub_22316DD70();
  v8 = &v7;
  result = ((uint64_t (*)(std::string **, _BYTE *))off_24EC5C388[v6])(&v8, v5);
  if (v6 != -1)
    return ((uint64_t (*)(std::string **, _BYTE *))off_24EC5C340[v6])(&v8, v5);
  return result;
}

void sub_2238E3554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

float sub_2238E359C(_OWORD *a1, __int128 *a2, uint64_t a3, char a4, float result)
{
  __int128 *v9;
  float *v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float *v18;
  float v19;
  float *v20;
  int *v21;
  float *v22;
  float v23;
  int v24;
  int *v25;
  int v26;
  float v27;
  int v28;
  __int128 *v29;
  unint64_t v30;
  float *v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  float v36;
  __int128 v37;
  float v38;
  __int128 v39;
  float *v40;
  float v41;
  __int128 v42;
  float v43;
  __int128 *v44;
  unint64_t v45;
  float *v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  float v51;
  __int128 v52;
  float v53;
  __int128 v54;
  float *v55;
  __int128 v56;
  float v57;
  float v58;
  int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  unint64_t v67;
  __int128 *v68;
  __int128 *v69;
  float v70;
  __int128 *v71;
  float v72;
  unint64_t v73;
  int v74;
  float v75;
  float v76;
  __int128 *v77;
  BOOL v78;
  unint64_t v79;
  float v80;
  unint64_t v81;
  float v82;
  __int128 *v83;
  __int128 *v84;
  float v85;
  int v86;
  float v87;
  float v88;
  __int128 *v89;
  float *v90;
  float *v91;
  float v92;
  __int128 *v93;
  float *v94;
  float *v95;
  float v96;
  __int128 *v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  float v102;
  __int128 v103;
  float v104;
  __int128 *v105;
  BOOL v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  int64_t v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  float v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  float *v137;
  float v138;
  float *v139;
  float *v140;
  int v141;
  __int128 v142;
  __int128 *v143;
  __int128 *v144;
  float *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;

BOOL sub_2238E440C(__int128 *a1, __int128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  float *v7;
  float v8;
  float *v9;
  __int128 *v10;
  float *v11;
  float v12;
  float v13;
  __int128 v14;
  float *v15;
  float v16;
  float *v17;
  float v18;
  __int128 *v19;
  __int128 *v20;
  _DWORD *v21;
  float v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  float v28;
  float v29;
  __int128 v30;
  float v31;
  __int128 v32;
  float v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  uint64_t v42;
  int v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  float v50;
  __int128 v51;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*((float *)a2 - 1) < *((float *)a1 + 4))
      {
        v6 = *a1;
        *a1 = *(__int128 *)((char *)a2 - 20);
        *(__int128 *)((char *)a2 - 20) = v6;
        LODWORD(v6) = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v6;
      }
      return result;
    case 3uLL:
      v15 = (float *)(a1 + 1);
      v16 = *((float *)a1 + 4);
      v17 = (float *)a2 - 1;
      v18 = *((float *)a2 - 1);
      v19 = (__int128 *)((char *)a1 + 20);
      v20 = (__int128 *)((char *)a2 - 20);
      v21 = (_DWORD *)a1 + 9;
      v22 = *((float *)a1 + 9);
      if (v22 < v16)
      {
        if (v18 >= v22)
        {
          v48 = *a1;
          *a1 = *v19;
          *v19 = v48;
          *((float *)a1 + 4) = v22;
          *((float *)a1 + 9) = v16;
          if (*v17 >= v16)
            return result;
          v49 = *v19;
          *v19 = *v20;
          *v20 = v49;
          v15 = (float *)a1 + 9;
        }
        else
        {
          v23 = *a1;
          *a1 = *v20;
          *v20 = v23;
        }
        v21 = (_DWORD *)a2 - 1;
        goto LABEL_41;
      }
      if (v18 < v22)
      {
        v37 = *v19;
        *v19 = *v20;
        *v20 = v37;
        LODWORD(v37) = *v21;
        *v21 = *(_DWORD *)v17;
        *(_DWORD *)v17 = v37;
        if (*(float *)v21 < *v15)
        {
          v38 = *a1;
          *a1 = *v19;
          *v19 = v38;
LABEL_41:
          v50 = *v15;
          *v15 = *(float *)v21;
          *(float *)v21 = v50;
          return result;
        }
      }
      return result;
    case 4uLL:
      sub_2238E481C((float *)a1, (float *)a1 + 5, (float *)a1 + 10, (float *)a2 - 5);
      return 1;
    case 5uLL:
      v24 = (__int128 *)((char *)a1 + 20);
      v25 = (__int128 *)((char *)a1 + 40);
      v26 = (__int128 *)((char *)a1 + 60);
      sub_2238E481C((float *)a1, (float *)a1 + 5, (float *)a1 + 10, (float *)a1 + 15);
      if (*((float *)a2 - 1) < *((float *)a1 + 19))
      {
        v27 = *v26;
        *v26 = *(__int128 *)((char *)a2 - 20);
        *(__int128 *)((char *)a2 - 20) = v27;
        LODWORD(v27) = *((_DWORD *)a1 + 19);
        *((_DWORD *)a1 + 19) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v27;
        v28 = *((float *)a1 + 19);
        v29 = *((float *)a1 + 14);
        if (v28 < v29)
        {
          v30 = *v25;
          *v25 = *v26;
          *v26 = v30;
          *((float *)a1 + 14) = v28;
          *((float *)a1 + 19) = v29;
          v31 = *((float *)a1 + 9);
          if (v28 < v31)
          {
            v32 = *v24;
            *v24 = *v25;
            *v25 = v32;
            *((float *)a1 + 9) = v28;
            *((float *)a1 + 14) = v31;
            v33 = *((float *)a1 + 4);
            if (v28 < v33)
            {
              v34 = *a1;
              *a1 = *v24;
              *v24 = v34;
              *((float *)a1 + 4) = v28;
              *((float *)a1 + 9) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v7 = (float *)(a1 + 1);
      v8 = *((float *)a1 + 4);
      v9 = (float *)a1 + 10;
      v10 = (__int128 *)((char *)a1 + 20);
      v11 = (float *)a1 + 9;
      v12 = *((float *)a1 + 9);
      v13 = *((float *)a1 + 14);
      if (v12 < v8)
      {
        if (v13 >= v12)
        {
          v39 = *a1;
          *a1 = *v10;
          *v10 = v39;
          *((float *)a1 + 4) = v12;
          *((float *)a1 + 9) = v8;
          if (v13 >= v8)
            goto LABEL_26;
          v40 = *v10;
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v40;
          v7 = (float *)a1 + 9;
        }
        else
        {
          v14 = *a1;
          *a1 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v14;
        }
        v11 = (float *)a1 + 14;
        goto LABEL_25;
      }
      if (v13 < v12)
      {
        v35 = *v10;
        *v10 = *(_OWORD *)v9;
        *(_OWORD *)v9 = v35;
        *v11 = v13;
        *((float *)a1 + 14) = v12;
        if (v13 < v8)
        {
          v36 = *a1;
          *a1 = *v10;
          *v10 = v36;
LABEL_25:
          *v7 = v13;
          *v11 = v8;
        }
      }
LABEL_26:
      v41 = (__int128 *)((char *)a1 + 60);
      if ((__int128 *)((char *)a1 + 60) == a2)
        return 1;
      v42 = 0;
      v43 = 0;
      while (1)
      {
        v44 = *((float *)v41 + 4);
        if (v44 < v9[4])
          break;
LABEL_35:
        v9 = (float *)v41;
        v42 += 20;
        v41 = (__int128 *)((char *)v41 + 20);
        if (v41 == a2)
          return 1;
      }
      v51 = *v41;
      v45 = v42;
      do
      {
        v46 = (uint64_t)a1 + v45;
        *(_OWORD *)(v46 + 60) = *(__int128 *)((char *)a1 + v45 + 40);
        *(_DWORD *)(v46 + 76) = *(_DWORD *)((char *)a1 + v45 + 56);
        if (v45 == -40)
        {
          *a1 = v51;
          *((float *)a1 + 4) = v44;
          if (++v43 != 8)
            goto LABEL_35;
          return (__int128 *)((char *)v41 + 20) == a2;
        }
        v45 -= 20;
      }
      while (v44 < *(float *)(v46 + 36));
      v47 = (uint64_t)a1 + v45;
      *(_OWORD *)(v47 + 60) = v51;
      *(float *)(v47 + 76) = v44;
      if (++v43 != 8)
        goto LABEL_35;
      return (__int128 *)((char *)v41 + 20) == a2;
  }
}

float sub_2238E481C(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float *v5;
  float *v6;
  float result;
  __int128 v8;
  int *v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  __int128 v13;
  float v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a2[4];
  v5 = a1 + 4;
  v6 = a3 + 4;
  result = a3[4];
  if (v4 >= a1[4])
  {
    if (result < v4)
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      result = a2[4];
      a2[4] = a3[4];
      a3[4] = result;
      if (a2[4] < *v5)
      {
        v11 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v11;
        v9 = (int *)(a1 + 4);
        v12 = (int *)(a2 + 4);
LABEL_10:
        v16 = *v9;
        *v9 = *v12;
        *v12 = v16;
        result = *v6;
      }
    }
  }
  else
  {
    if (result < v4)
    {
      v8 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v8;
      v9 = (int *)(a1 + 4);
LABEL_9:
      v12 = (int *)(a3 + 4);
      goto LABEL_10;
    }
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v14 = a1[4];
    a1[4] = a2[4];
    a2[4] = v14;
    result = *v6;
    if (*v6 < v14)
    {
      v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v15;
      v9 = (int *)(a2 + 4);
      goto LABEL_9;
    }
  }
  if (a4[4] < result)
  {
    v17 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v17;
    *(float *)&v17 = a3[4];
    a3[4] = a4[4];
    *((_DWORD *)a4 + 4) = v17;
    result = a3[4];
    if (result < a2[4])
    {
      v18 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v18;
      *(float *)&v18 = a2[4];
      a2[4] = a3[4];
      *((_DWORD *)a3 + 4) = v18;
      result = a2[4];
      if (result < *v5)
      {
        v19 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v19;
        result = a1[4];
        a1[4] = a2[4];
        a2[4] = result;
      }
    }
  }
  return result;
}

void sub_2238E49D8(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _DWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  BOOL v33;
  uint64_t v34;
  float v35;
  float v36;
  BOOL v37;
  unint64_t v38;
  float v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  float v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  __int128 *v47;
  float v48;
  _BOOL4 v49;
  unint64_t v50;
  float v51;
  BOOL v52;
  BOOL v53;
  __int128 *v54;
  uint64_t v55;
  float v56;
  BOOL v57;
  uint64_t v58;
  float v59;
  _BOOL4 v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  float v74;
  _BOOL4 v75;
  _BOOL4 v76;
  __int128 *v77;
  unint64_t v78;
  float v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  float v83;
  _BOOL4 v84;
  uint64_t v85;
  float v86;
  BOOL v87;
  uint64_t v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  float v100;
  float v101;
  _BOOL4 v102;
  _OWORD *v103;
  _OWORD *v104;
  _OWORD *v105;
  float v106;
  float v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  float v113;
  _OWORD *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  float v121;
  BOOL v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  float v132;
  float v133;
  _BOOL4 v134;
  uint64_t v135;
  float v136;
  uint64_t v137;
  float v138;
  BOOL v139;
  uint64_t v140;
  float v141;
  _BOOL4 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  _BOOL4 v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v160;
  __int128 *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float v167;
  float v168;
  _BOOL4 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  __int128 *v177;
  __int128 *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  __int128 *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  float v193;
  uint64_t v194;
  float v195;
  _BOOL4 v196;
  unint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  float v205;
  BOOL v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  _OWORD *v213;
  _OWORD *v214;
  float v215;
  float v216;
  _BOOL4 v217;
  uint64_t v218;
  _OWORD *v219;
  float v220;
  float v221;
  BOOL v222;
  _OWORD *v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  __int128 *v234;
  uint64_t v235;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;

void sub_2238E5DD0(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v19 = *a1;
  v20 = a1[1];
  v21 = a1[2];
  v22 = a1[3];
  v23 = a1[4];
  v4 = *((_QWORD *)a1 + 10);
  v5 = *(__int128 *)((char *)a1 + 88);
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 12) = 0;
  v6 = *((_DWORD *)a1 + 26);
  *a1 = *a2;
  v7 = a2 + 1;
  v9 = a2[3];
  v8 = a2[4];
  v10 = a2[2];
  a1[1] = a2[1];
  a1[2] = v10;
  a1[3] = v9;
  a1[4] = v8;
  *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
  v11 = *(__int128 *)((char *)a2 + 88);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 12);
  *(__int128 *)((char *)a1 + 88) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      v18 = v5;
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v5 = v18;
    }
  }
  *((_DWORD *)a1 + 26) = *((_DWORD *)a2 + 26);
  *a2 = v19;
  *v7 = v20;
  v7[1] = v21;
  v7[2] = v22;
  v7[3] = v23;
  *((_QWORD *)a2 + 10) = v4;
  v15 = (std::__shared_weak_count *)*((_QWORD *)a2 + 12);
  *(__int128 *)((char *)a2 + 88) = v5;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *((_DWORD *)a2 + 26) = v6;
}

void sub_2238E5F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v10;
  float v11;
  _BOOL4 v12;
  float v13;
  float v14;
  _BOOL4 v15;
  float v16;
  float v17;
  _BOOL4 v18;
  float v19;
  float v20;
  _BOOL4 v21;

  sub_2238E6548(a1, a2, a3, a4);
  v10 = *(float *)(a5 + 104);
  v11 = *(float *)(a4 + 104);
  v12 = *(_QWORD *)(a5 + 80) > *(_QWORD *)(a4 + 80);
  if (vabds_f32(v10, v11) >= 0.00000011921)
    v12 = v10 < v11;
  if (v12)
  {
    sub_2238E5DD0((__int128 *)a4, (__int128 *)a5);
    v13 = *(float *)(a4 + 104);
    v14 = *(float *)(a3 + 104);
    v15 = *(_QWORD *)(a4 + 80) > *(_QWORD *)(a3 + 80);
    if (vabds_f32(v13, v14) >= 0.00000011921)
      v15 = v13 < v14;
    if (v15)
    {
      sub_2238E5DD0((__int128 *)a3, (__int128 *)a4);
      v16 = *(float *)(a3 + 104);
      v17 = *(float *)(a2 + 104);
      v18 = *(_QWORD *)(a3 + 80) > *(_QWORD *)(a2 + 80);
      if (vabds_f32(v16, v17) >= 0.00000011921)
        v18 = v16 < v17;
      if (v18)
      {
        sub_2238E5DD0((__int128 *)a2, (__int128 *)a3);
        v19 = *(float *)(a2 + 104);
        v20 = *(float *)(a1 + 104);
        v21 = *(_QWORD *)(a2 + 80) > *(_QWORD *)(a1 + 80);
        if (vabds_f32(v19, v20) >= 0.00000011921)
          v21 = v19 < v20;
        if (v21)
          sub_2238E5DD0((__int128 *)a1, (__int128 *)a2);
      }
    }
  }
}

void sub_2238E60A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  _BOOL4 v11;
  float v12;
  float v13;
  _BOOL4 v14;
  float v15;
  float v16;
  _BOOL4 v17;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(float *)(a2 + 104);
  v8 = *(float *)(a1 + 104);
  v9 = v6 > *(_QWORD *)(a1 + 80);
  if (vabds_f32(v7, v8) >= 0.00000011921)
    v9 = v7 < v8;
  v10 = *(float *)(a3 + 104);
  v11 = *(_QWORD *)(a3 + 80) > v6;
  if (vabds_f32(v10, v7) >= 0.00000011921)
    v11 = v10 < v7;
  if (v9)
  {
    if (v11)
    {
LABEL_11:
      sub_2238E5DD0((__int128 *)a1, (__int128 *)a3);
      return;
    }
    sub_2238E5DD0((__int128 *)a1, (__int128 *)a2);
    v12 = *(float *)(a3 + 104);
    v13 = *(float *)(a2 + 104);
    v14 = *(_QWORD *)(a3 + 80) > *(_QWORD *)(a2 + 80);
    if (vabds_f32(v12, v13) >= 0.00000011921)
      v14 = v12 < v13;
    if (v14)
    {
      a1 = a2;
      goto LABEL_11;
    }
  }
  else if (v11)
  {
    sub_2238E5DD0((__int128 *)a2, (__int128 *)a3);
    v15 = *(float *)(a2 + 104);
    v16 = *(float *)(v5 + 104);
    v17 = *(_QWORD *)(a2 + 80) > *(_QWORD *)(v5 + 80);
    if (vabds_f32(v15, v16) >= 0.00000011921)
      v17 = v15 < v16;
    if (v17)
      sub_2238E5DD0((__int128 *)v5, (__int128 *)a2);
  }
}

BOOL sub_2238E61E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  float v22;
  BOOL v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  float v28;
  float v29;
  _BOOL4 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v28 = *(float *)(a2 - 8);
      v29 = *(float *)(a1 + 104);
      v30 = *(_QWORD *)(a2 - 32) > *(_QWORD *)(a1 + 80);
      if (vabds_f32(v28, v29) >= 0.00000011921)
        v30 = v28 < v29;
      if (v30)
      {
        sub_2238E5DD0((__int128 *)a1, (__int128 *)(a2 - 112));
        return 1;
      }
      return result;
    case 3:
      sub_2238E60A0(a1, a1 + 112, a2 - 112);
      return 1;
    case 4:
      sub_2238E6548(a1, a1 + 112, a1 + 224, a2 - 112);
      return 1;
    case 5:
      sub_2238E5F40(a1, a1 + 112, a1 + 224, a1 + 336, a2 - 112);
      return 1;
    default:
      v6 = a1 + 224;
      sub_2238E60A0(a1, a1 + 112, a1 + 224);
      v7 = a1 + 336;
      if (a1 + 336 == a2)
        return 1;
      v8 = 0;
      break;
  }
  while (1)
  {
    v9 = *(_QWORD *)(v7 + 80);
    v10 = *(float *)(v7 + 104);
    v11 = *(float *)(v6 + 104);
    v12 = v9 > *(_QWORD *)(v6 + 80);
    if (vabds_f32(v10, v11) >= 0.00000011921)
      v12 = v10 < v11;
    if (v12)
    {
      v32 = *(_OWORD *)v7;
      v33 = *(_OWORD *)(v7 + 16);
      v34 = *(_OWORD *)(v7 + 32);
      v35 = *(_OWORD *)(v7 + 48);
      v36 = *(_OWORD *)(v7 + 64);
      v13 = *(_QWORD *)(v7 + 96);
      v31 = *(_QWORD *)(v7 + 88);
      v14 = v7;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 96) = 0;
      while (1)
      {
        v15 = v6;
        *(_OWORD *)v14 = *(_OWORD *)v6;
        v16 = *(_OWORD *)(v6 + 32);
        *(_OWORD *)(v14 + 16) = *(_OWORD *)(v6 + 16);
        *(_OWORD *)(v14 + 32) = v16;
        v17 = *(_OWORD *)(v6 + 64);
        *(_OWORD *)(v14 + 48) = *(_OWORD *)(v6 + 48);
        *(_OWORD *)(v14 + 64) = v17;
        *(_QWORD *)(v14 + 80) = *(_QWORD *)(v6 + 80);
        v18 = *(_OWORD *)(v6 + 88);
        *(_QWORD *)(v6 + 88) = 0;
        *(_QWORD *)(v6 + 96) = 0;
        v19 = *(std::__shared_weak_count **)(v14 + 96);
        *(_OWORD *)(v14 + 88) = v18;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        *(_DWORD *)(v14 + 104) = *(_DWORD *)(v15 + 104);
        if (v15 == a1)
          break;
        v6 = v15 - 112;
        v22 = *(float *)(v15 - 8);
        v23 = v9 > *(_QWORD *)(v15 - 32);
        if (vabds_f32(v10, v22) >= 0.00000011921)
          v23 = v10 < v22;
        v14 = v15;
        if (!v23)
        {
          v24 = v15;
          goto LABEL_22;
        }
      }
      v24 = a1;
LABEL_22:
      *(_OWORD *)v24 = v32;
      *(_OWORD *)(v15 + 48) = v35;
      *(_OWORD *)(v15 + 64) = v36;
      *(_OWORD *)(v15 + 16) = v33;
      *(_OWORD *)(v15 + 32) = v34;
      *(_QWORD *)(v24 + 80) = v9;
      *(_QWORD *)(v15 + 88) = v31;
      v25 = *(std::__shared_weak_count **)(v24 + 96);
      *(_QWORD *)(v24 + 96) = v13;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      *(float *)(v24 + 104) = v10;
      if (++v8 == 8)
        return v7 + 112 == a2;
    }
    v6 = v7;
    v7 += 112;
    if (v7 == a2)
      return 1;
  }
}

void sub_2238E6548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8;
  float v9;
  _BOOL4 v10;
  float v11;
  float v12;
  _BOOL4 v13;
  float v14;
  float v15;
  _BOOL4 v16;

  sub_2238E60A0(a1, a2, a3);
  v8 = *(float *)(a4 + 104);
  v9 = *(float *)(a3 + 104);
  v10 = *(_QWORD *)(a4 + 80) > *(_QWORD *)(a3 + 80);
  if (vabds_f32(v8, v9) >= 0.00000011921)
    v10 = v8 < v9;
  if (v10)
  {
    sub_2238E5DD0((__int128 *)a3, (__int128 *)a4);
    v11 = *(float *)(a3 + 104);
    v12 = *(float *)(a2 + 104);
    v13 = *(_QWORD *)(a3 + 80) > *(_QWORD *)(a2 + 80);
    if (vabds_f32(v11, v12) >= 0.00000011921)
      v13 = v11 < v12;
    if (v13)
    {
      sub_2238E5DD0((__int128 *)a2, (__int128 *)a3);
      v14 = *(float *)(a2 + 104);
      v15 = *(float *)(a1 + 104);
      v16 = *(_QWORD *)(a2 + 80) > *(_QWORD *)(a1 + 80);
      if (vabds_f32(v14, v15) >= 0.00000011921)
        v16 = v14 < v15;
      if (v16)
        sub_2238E5DD0((__int128 *)a1, (__int128 *)a2);
    }
  }
}

char *sub_2238E6654(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  void **v13;
  char *v15;
  char *v16;
  char *v17;

  v3 = *(void ***)a1;
  v4 = *(char **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-*(_QWORD *)a1] >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v15 = v10;
  v16 = v10;
  v17 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v10 = v15;
    v3 = *(void ***)a1;
    v4 = *(char **)(a1 + 8);
    v11 = v16 + 24;
    if (v4 == *(char **)a1)
    {
LABEL_21:
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v17;
      goto LABEL_22;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == (char *)v3)
      goto LABEL_21;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != (char *)v3);
  v3 = *(void ***)a1;
  v13 = *(void ***)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v17;
  while (v13 != v3)
  {
    if (*((char *)v13 - 1) < 0)
      operator delete(*(v13 - 3));
    v13 -= 3;
  }
LABEL_22:
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_2238E67F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238E6808(uint64_t a1, char *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  int v20;
  _QWORD *exception;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  void *v34;
  char v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  __int128 v46;
  void *__p[2];
  int v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  char v57;
  __int128 v58;
  void *v59;
  char v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  char v66;
  char v67;
  char v68;
  int v69;
  _QWORD v70[2];

  *(_QWORD *)&v46 = &off_24EC1F8C8;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_DWORD *)(a1 + 44);
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(void **)(a1 + 32);
    v10 = *(_WORD *)(a1 + 48);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 44);
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(void **)(a1 + 32);
    v10 = *(_WORD *)(a1 + 48);
  }
  *((_QWORD *)&v46 + 1) = v3;
  __p[0] = v4;
  __p[1] = v8;
  v48 = 2 * v7;
  v50 = v9;
  LODWORD(v51) = 3;
  WORD2(v51) = v10;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_224160FB8(&v46, a2, 5, (uint64_t)&v58);
  v16 = (std::__shared_weak_count *)__p[0];
  if (!__p[0])
    goto LABEL_21;
  v17 = (unint64_t *)((char *)__p[0] + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v68)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v68)
    {
LABEL_22:
      v33 = 1;
      goto LABEL_57;
    }
  }
  v70[0] = "save";
  v70[1] = 4;
  v69 = 5;
  sub_224160DE4("Failure during ", (uint64_t)v70, (uint64_t)" from stream with file format ", &v69, (uint64_t)": ");
  if (v68)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  sub_22456BA60(&v34, &v58, (uint64_t)&v36);
  v46 = v36;
  v19 = sub_22319FFBC(__p, &v37);
  v22 = v46;
  LOBYTE(v23[0]) = 0;
  v32 = 0;
  if (v57)
  {
    v25 = 0;
    v20 = v50;
    if ((_BYTE)v50)
    {
      *(_OWORD *)v23 = *(_OWORD *)v19;
      v24 = *((_QWORD *)v19 + 2);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = 0;
      v25 = 1;
    }
    LOBYTE(v26) = 0;
    v31 = 0;
    if (v56)
    {
      v27 = v52;
      v26 = v51;
      v51 = 0uLL;
      v28 = v53;
      *(_OWORD *)v29 = v54;
      v30 = v55;
      v52 = 0;
      v54 = 0uLL;
      v55 = 0;
      v31 = 1;
    }
    v32 = 1;
    v33 = 0;
    if (v20 && v49 < 0)
      operator delete(__p[0]);
    if (!v45)
      goto LABEL_44;
    goto LABEL_36;
  }
  v33 = 0;
  if (v45)
  {
LABEL_36:
    if (v44)
    {
      if (v43 < 0)
        operator delete(v42);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39 && v38 < 0)
      operator delete((void *)v37);
  }
LABEL_44:
  if (v35 < 0)
  {
    operator delete(v34);
    if (v68)
      goto LABEL_57;
  }
  else if (v68)
  {
    goto LABEL_57;
  }
  if (v67)
  {
    if (v66)
    {
      if (v65 < 0)
        operator delete(v64);
      if (v63 < 0)
        operator delete(v62);
    }
    if (v61 && v60 < 0)
      operator delete(v59);
  }
LABEL_57:
  sub_22319FC44((uint64_t)&v22);
  if (!v33 && v32)
  {
    if (v31)
    {
      if (SHIBYTE(v30) < 0)
        operator delete(v29[0]);
      if (SHIBYTE(v27) < 0)
        operator delete((void *)v26);
    }
    if (v25)
    {
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
    }
  }
}

void sub_2238E6C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  sub_22319723C((uint64_t)&a31);
  if (a30 < 0)
    operator delete(__p);
  sub_223197D38(v31 - 184);
  _Unwind_Resume(a1);
}

void sub_2238E6C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223197D38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238E6C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_22319A5E0((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_2238E6C7C(uint64_t a1, char *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  int v7;
  _QWORD *exception;
  __int128 v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  __int128 v33;
  void *__p;
  char v35;
  unsigned __int8 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  char v43;
  __int128 v44;
  void *v45;
  char v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  int v55;
  _QWORD v56[2];

  *(_QWORD *)&v33 = &off_24EC1F8C8;
  sub_2238E7018(a1, (uint64_t)&v33 + 8);
  sub_224160FB8(&v33, a2, 5, (uint64_t)&v44);
  v3 = (std::__shared_weak_count *)__p;
  if (!__p)
    goto LABEL_5;
  v4 = (unint64_t *)((char *)__p + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v54)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    if (v54)
    {
LABEL_6:
      v20 = 1;
      goto LABEL_41;
    }
  }
  v56[0] = "save";
  v56[1] = 4;
  v55 = 5;
  sub_224160DE4("Failure during ", (uint64_t)v56, (uint64_t)" from stream with file format ", &v55, (uint64_t)": ");
  if (v54)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  sub_22456BA60(&v21, &v44, (uint64_t)&v23);
  v33 = v23;
  v6 = sub_22319FFBC(&__p, &v24);
  v9 = v33;
  LOBYTE(v10[0]) = 0;
  v19 = 0;
  if (v43)
  {
    v12 = 0;
    v7 = v36;
    if (v36)
    {
      *(_OWORD *)v10 = *(_OWORD *)v6;
      v11 = *((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      v12 = 1;
    }
    LOBYTE(v13) = 0;
    v18 = 0;
    if (v42)
    {
      v14 = v38;
      v13 = v37;
      v37 = 0uLL;
      v15 = v39;
      *(_OWORD *)v16 = v40;
      v17 = v41;
      v38 = 0;
      v40 = 0uLL;
      v41 = 0;
      v18 = 1;
    }
    v19 = 1;
    v20 = 0;
    if (v7 && v35 < 0)
      operator delete(__p);
    if (!v32)
      goto LABEL_28;
    goto LABEL_20;
  }
  v20 = 0;
  if (v32)
  {
LABEL_20:
    if (v31)
    {
      if (v30 < 0)
        operator delete(v29);
      if (v28 < 0)
        operator delete(v27);
    }
    if (v26 && v25 < 0)
      operator delete((void *)v24);
  }
LABEL_28:
  if (v22 < 0)
  {
    operator delete(v21);
    if (v54)
      goto LABEL_41;
  }
  else if (v54)
  {
    goto LABEL_41;
  }
  if (v53)
  {
    if (v52)
    {
      if (v51 < 0)
        operator delete(v50);
      if (v49 < 0)
        operator delete(v48);
    }
    if (v47 && v46 < 0)
      operator delete(v45);
  }
LABEL_41:
  sub_22319FC44((uint64_t)&v9);
  if (!v20 && v19)
  {
    if (v18)
    {
      if (SHIBYTE(v17) < 0)
        operator delete(v16[0]);
      if (SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v12)
    {
      if (SHIBYTE(v11) < 0)
        operator delete(v10[0]);
    }
  }
}

void sub_2238E6FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  sub_22319723C((uint64_t)&a31);
  if (a30 < 0)
    operator delete(__p);
  sub_223197D38(v31 - 168);
  _Unwind_Resume(a1);
}

void sub_2238E6FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223197D38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238E7004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_22319A5E0((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_2238E7018(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 76);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = 4 * v10;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 4;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a2 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_2238E71D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2238E722C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

unint64_t sub_2238E7240(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[3];
  v6 = v5 & ((a2 >> 7) ^ 0x13701D);
  v7 = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    v8 = 8;
    do
    {
      v6 = (v6 + v8) & v5;
      v8 += 8;
      v7 = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v5;
  v10 = a1[4];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + result) == 254)
    {
      v10 = 0;
    }
    else
    {
      sub_2238E7338((uint64_t)a1);
      result = sub_22322944C(*a1, a2, a1[3]);
      v4 = *a1;
      v5 = a1[3];
      v10 = a1[4];
    }
  }
  ++a1[2];
  a1[4] = v10 - (*(unsigned __int8 *)(v4 + result) == 128);
  *(_BYTE *)(v4 + result) = a2 & 0x7F;
  *(_BYTE *)(v4 + ((result - 7) & v5) + (v5 & 7)) = a2 & 0x7F;
  return result;
}

void sub_2238E7338(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 < 9 || 25 * v1 < 32 * *(_QWORD *)(a1 + 16))
  {
    v2 = (2 * v1) | 1;
LABEL_5:
    sub_2238E7374((char **)a1, (char *)v2);
    return;
  }
  sub_2238E757C((unint64_t *)a1);
}

void sub_2238E7374(char **a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *i;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v7 = (unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (char *)operator new((unint64_t)&a2[56 * (_QWORD)a2 + 15] & 0xFFFFFFFFFFFFFFF8);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(_QWORD)v8] = -1;
  v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (char *)7)
    v9 = 6;
  a1[4] = (char *)(v9 - (_QWORD)a1[2]);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((i[(_QWORD)v4] & 0x80000000) == 0)
      {
        v11 = &v5[56 * (_QWORD)i];
        v12 = (19349669 * *((int *)v11 + 1)) ^ (73856093 * *(int *)v11) ^ (83492791 * *((int *)v11 + 2));
        v13 = *a1;
        v14 = a1[3];
        v15 = ((v12 >> 7) ^ 0x13701D) & (unint64_t)v14;
        v16 = *(_QWORD *)&(*a1)[v15] & (~*(_QWORD *)&(*a1)[v15] << 7) & 0x8080808080808080;
        if (!v16)
        {
          v17 = 8;
          do
          {
            v15 = (v15 + v17) & (unint64_t)v14;
            v17 += 8;
            v16 = *(_QWORD *)&v13[v15] & (~*(_QWORD *)&v13[v15] << 7) & 0x8080808080808080;
          }
          while (!v16);
        }
        v18 = (v15 + (__clz(__rbit64(v16)) >> 3)) & (unint64_t)v14;
        v19 = v12 & 0x7F;
        v13[v18] = v19;
        v13[((v18 - 7) & (unint64_t)v14) + (v14 & 7)] = v19;
        v20 = (uint64_t)&a1[1][56 * v18];
        v21 = *(_QWORD *)v11;
        *(_DWORD *)(v20 + 8) = *((_DWORD *)v11 + 2);
        *(_QWORD *)v20 = v21;
        v22 = *((_QWORD *)v11 + 2);
        *((_QWORD *)v11 + 2) = &unk_2245C5160;
        *(_QWORD *)(v20 + 16) = v22;
        v23 = *((_QWORD *)v11 + 3);
        v24 = *((_QWORD *)v11 + 4);
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *(_QWORD *)(v20 + 24) = v23;
        *(_QWORD *)(v20 + 32) = v24;
        v25 = *((_QWORD *)v11 + 5);
        *((_QWORD *)v11 + 5) = 0;
        *(_QWORD *)(v20 + 40) = v25;
        v27 = *((_QWORD *)v11 + 5);
        v26 = *((_QWORD *)v11 + 6);
        *((_QWORD *)v11 + 6) = 0;
        *(_QWORD *)(v20 + 48) = v26;
        if (v27)
        {
          operator delete(*((void **)v11 + 2));
          *((_QWORD *)v11 + 2) = &unk_2245C5160;
          *(_OWORD *)(v11 + 24) = 0u;
          *(_OWORD *)(v11 + 40) = 0u;
        }
      }
    }
    operator delete(v4);
  }
}

void sub_2238E757C(unint64_t *a1)
{
  unint64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_2232294A8(*a1, a1[3]);
  v2 = a1[3];
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v6 = *a1;
      if (*(unsigned __int8 *)(*a1 + i) == 254)
      {
        v7 = a1[1];
        v8 = (uint64_t *)(v7 + 56 * i);
        v9 = (19349669 * *((int *)v8 + 1)) ^ (73856093 * *(int *)v8) ^ (83492791 * *((int *)v8 + 2));
        v10 = ((v9 >> 7) ^ 0x13701D) & v2;
        v11 = *(_QWORD *)(v6 + v10) & (~*(_QWORD *)(v6 + v10) << 7) & 0x8080808080808080;
        if (v11)
        {
          v4 = ((v9 >> 7) ^ 0x13701D) & v2;
        }
        else
        {
          v12 = 8;
          v4 = ((v9 >> 7) ^ 0x13701D) & v2;
          do
          {
            v4 = (v4 + v12) & v2;
            v12 += 8;
            v11 = *(_QWORD *)(v6 + v4) & (~*(_QWORD *)(v6 + v4) << 7) & 0x8080808080808080;
          }
          while (!v11);
        }
        v5 = (v4 + (__clz(__rbit64(v11)) >> 3)) & v2;
        if ((((v5 - v10) ^ (i - v10)) & v2) > 7)
        {
          v13 = *(unsigned __int8 *)(v6 + v5);
          v14 = v9 & 0x7F;
          *(_BYTE *)(v6 + v5) = v14;
          *(_BYTE *)(v6 + ((v5 - 7) & v2) + (v2 & 7)) = v14;
          if (v13 == 128)
          {
            sub_2238E77D8(v7 + 56 * v5, v8);
            v2 = a1[3];
            v15 = *a1;
            *(_BYTE *)(v15 + i) = 0x80;
            *(_BYTE *)(v15 + (v2 & (i - 7)) + (v2 & 7)) = 0x80;
          }
          else
          {
            sub_2238E77D8((uint64_t)&v23, v8);
            v16 = 56 * v5;
            sub_2238E77D8(a1[1] + 56 * i, (uint64_t *)(a1[1] + v16));
            v17 = a1[1] + v16;
            *(_DWORD *)(v17 + 8) = v24;
            *(_QWORD *)v17 = v23;
            v18 = v25;
            v19 = v26;
            v25 = (unint64_t)&unk_2245C5160;
            v26 = 0uLL;
            *(_OWORD *)(v17 + 16) = v18;
            *(_OWORD *)(v17 + 32) = v19;
            v20 = v27;
            v27 = 0;
            *(_QWORD *)(v17 + 48) = v20;
            --i;
            v2 = a1[3];
          }
        }
        else
        {
          *(_BYTE *)(v6 + i) = v9 & 0x7F;
          *(_BYTE *)(v6 + ((i - 7) & v2) + (v2 & 7)) = v9 & 0x7F;
        }
      }
    }
    v21 = v2 - (v2 >> 3);
    v22 = v2 == 7;
    v2 = 6;
    if (!v22)
      v2 = v21;
  }
  a1[4] = v2 - a1[2];
}

double sub_2238E77D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v2 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v2;
  v3 = a2[2];
  a2[2] = (uint64_t)&unk_2245C5160;
  *(_QWORD *)(a1 + 16) = v3;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2 + 3;
  a2[3] = 0;
  a2[4] = 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[5];
  v8 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    operator delete((void *)a2[2]);
    a2[2] = (uint64_t)&unk_2245C5160;
    result = 0.0;
    *v6 = 0u;
    v6[1] = 0u;
  }
  return result;
}

unint64_t sub_2238E7860(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[3];
  v6 = v5 & ((a2 >> 7) ^ 0x13701D);
  v7 = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    v8 = 8;
    do
    {
      v6 = (v6 + v8) & v5;
      v8 += 8;
      v7 = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v5;
  v10 = a1[4];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + result) == 254)
    {
      v10 = 0;
    }
    else
    {
      sub_2238E7958((uint64_t)a1);
      result = sub_22322944C(*a1, a2, a1[3]);
      v4 = *a1;
      v5 = a1[3];
      v10 = a1[4];
    }
  }
  ++a1[2];
  a1[4] = v10 - (*(unsigned __int8 *)(v4 + result) == 128);
  *(_BYTE *)(v4 + result) = a2 & 0x7F;
  *(_BYTE *)(v4 + ((result - 7) & v5) + (v5 & 7)) = a2 & 0x7F;
  return result;
}

void sub_2238E7958(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 < 9 || 25 * v1 < 32 * *(_QWORD *)(a1 + 16))
  {
    v2 = (2 * v1) | 1;
LABEL_5:
    sub_2238E7994((char **)a1, (char *)v2);
    return;
  }
  sub_2238E7B28((unint64_t *)a1);
}

void sub_2238E7994(char **a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *i;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v7 = (size_t)(a2 + 8);
  v8 = (char *)operator new((size_t)&a2[16 * (_QWORD)a2 + 8]);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, v7);
  a2[(_QWORD)v8] = -1;
  v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (char *)7)
    v9 = 6;
  a1[4] = (char *)(v9 - (_QWORD)a1[2]);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((i[(_QWORD)v4] & 0x80000000) == 0)
      {
        v13 = sub_22456636C((unsigned __int8 *)&v5[16 * (_QWORD)i]);
        v14 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v13) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                      - 0x622015F714C7D297 * v13) >> 32);
        v15 = *a1;
        v16 = a1[3];
        v17 = ((v14 >> 7) ^ 0x13701D) & (unint64_t)v16;
        v18 = *(_QWORD *)&(*a1)[v17] & (~*(_QWORD *)&(*a1)[v17] << 7) & 0x8080808080808080;
        if (!v18)
        {
          v19 = 8;
          do
          {
            v17 = (v17 + v19) & (unint64_t)v16;
            v19 += 8;
            v18 = *(_QWORD *)&v15[v17] & (~*(_QWORD *)&v15[v17] << 7) & 0x8080808080808080;
          }
          while (!v18);
        }
        v11 = (v17 + (__clz(__rbit64(v18)) >> 3)) & (unint64_t)v16;
        v12 = v14 & 0x7F;
        v15[v11] = v12;
        v15[((v11 - 7) & (unint64_t)v16) + (v16 & 7)] = v12;
        *(_OWORD *)&a1[1][16 * v11] = *(_OWORD *)&v5[16 * (_QWORD)i];
      }
    }
    operator delete(v4);
  }
}

unint64_t sub_2238E7B28(unint64_t *a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  BOOL v19;

  result = sub_2232294A8(*a1, a1[3]);
  v3 = a1[3];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(unsigned __int8 *)(*a1 + i) == 254)
      {
        result = sub_22456636C((unsigned __int8 *)(a1[1] + 16 * i));
        v8 = (0x376ADF16980614E5 - 0x622015F714C7D297 * result) ^ ((0x376ADF16980614E5
                                                                      - 0x622015F714C7D297 * result) >> 32);
        v9 = *a1;
        v3 = a1[3];
        v10 = ((v8 >> 7) ^ 0x13701D) & v3;
        v11 = *(_QWORD *)(*a1 + v10) & (~*(_QWORD *)(*a1 + v10) << 7) & 0x8080808080808080;
        if (v11)
        {
          v5 = ((v8 >> 7) ^ 0x13701D) & v3;
        }
        else
        {
          v12 = 8;
          v5 = ((v8 >> 7) ^ 0x13701D) & v3;
          do
          {
            v5 = (v5 + v12) & v3;
            v12 += 8;
            v11 = *(_QWORD *)(v9 + v5) & (~*(_QWORD *)(v9 + v5) << 7) & 0x8080808080808080;
          }
          while (!v11);
        }
        v6 = (v5 + (__clz(__rbit64(v11)) >> 3)) & v3;
        if ((((v6 - v10) ^ (i - v10)) & v3) > 7)
        {
          v13 = *(unsigned __int8 *)(v9 + v6);
          v14 = v8 & 0x7F;
          *(_BYTE *)(v9 + v6) = v14;
          *(_BYTE *)(v9 + ((v6 - 7) & v3) + (v3 & 7)) = v14;
          v15 = a1[1];
          if (v13 == 128)
          {
            *(_OWORD *)(v15 + 16 * v6) = *(_OWORD *)(v15 + 16 * i);
            v3 = a1[3];
            v16 = *a1;
            *(_BYTE *)(v16 + i) = 0x80;
            *(_BYTE *)(v16 + (v3 & (i - 7)) + (v3 & 7)) = 0x80;
          }
          else
          {
            v17 = *(_OWORD *)(v15 + 16 * i);
            *(_OWORD *)(v15 + 16 * i) = *(_OWORD *)(v15 + 16 * v6);
            *(_OWORD *)(a1[1] + 16 * v6) = v17;
            --i;
            v3 = a1[3];
          }
        }
        else
        {
          v7 = v8 & 0x7F;
          *(_BYTE *)(v9 + i) = v7;
          *(_BYTE *)(v9 + (v3 & (i - 7)) + (v3 & 7)) = v7;
        }
      }
    }
    v18 = v3 - (v3 >> 3);
    v19 = v3 == 7;
    v3 = 6;
    if (!v19)
      v3 = v18;
  }
  a1[4] = v3 - a1[2];
  return result;
}

void sub_2238E7D38(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)off_24EC5C7F8[*a3], *(_QWORD *)&asc_2246546B0[8 * *a3]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5C358[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2238E7FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2238E7FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238E7FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238E7FF8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_2238E8038(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2238E8048(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2238E8078(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_2238E8090(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2238E80D0(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2238E8140(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2238E8150(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2238E8180(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*(void **)(a1 + 32));
      return;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_7;
}

void sub_2238E81E8(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x227684CE8);
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

uint64_t sub_2238E825C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2238E8394(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2238E8360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2238E8394@<X0>(int *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  _DWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _DWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 7;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_2238E8528(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2238E8540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t **sub_2238E8578(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  _OWORD *v17;
  uint64_t *v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = &a2[16 * a3];
    while (1)
    {
      v7 = a1[1];
      v8 = v4;
      if (*a1 != v4)
      {
        v9 = a1[1];
        v10 = v4;
        if (v7)
        {
          do
          {
            v8 = v9;
            v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = *v5;
        if (*((unsigned __int8 *)v8 + 32) >= v12)
          break;
      }
      if (v7)
        v13 = v8;
      else
        v13 = v4;
      if (v7)
        v14 = v8 + 1;
      else
        v14 = v4;
      if (!*v14)
        goto LABEL_26;
LABEL_4:
      v5 += 16;
      if (v5 == v6)
        return a1;
    }
    v14 = v4;
    v13 = v4;
    if (v7)
    {
      v15 = a1[1];
      while (1)
      {
        while (1)
        {
          v13 = v15;
          v16 = *((unsigned __int8 *)v15 + 32);
          if (v16 <= v12)
            break;
          v15 = (uint64_t *)*v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_26;
        }
        if (v16 >= v12)
          goto LABEL_4;
        v15 = (uint64_t *)v13[1];
        if (!v15)
        {
          v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_26:
    v17 = operator new(0x30uLL);
    v17[2] = *(_OWORD *)v5;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v13;
    *v14 = (uint64_t)v17;
    v18 = (uint64_t *)**a1;
    if (v18)
    {
      *a1 = v18;
      v17 = (_OWORD *)*v14;
    }
    sub_2231A9A8C(a1[1], (uint64_t *)v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    goto LABEL_4;
  }
  return a1;
}

void sub_2238E86D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_2233FADDC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2238E86E8(uint64_t *result, uint64_t *a2, unsigned __int8 a3, _BYTE *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;

  v5 = a2;
  v6 = result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = *((unsigned __int8 *)a2 + 32), v8 > a3))
  {
    v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = v11;
      else
        v17 = a2;
      if (v9)
        v13 = v11 + 1;
      else
        v13 = a2;
      if (*v13)
        return result;
      v5 = v17;
LABEL_37:
      v22 = operator new(0x1A8uLL);
      v22[32] = *a4;
      sub_223180698((uint64_t)(v22 + 40), (uint64_t)(a4 + 8));
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v5;
      *v13 = (uint64_t)v22;
      v23 = *(_QWORD *)*v6;
      if (v23)
      {
        *v6 = v23;
        v22 = (_BYTE *)*v13;
      }
      result = sub_2231A9A8C((uint64_t *)v6[1], (uint64_t *)v22);
      ++v6[2];
      return result;
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((unsigned __int8 *)v11 + 32) < a3)
      goto LABEL_16;
    v18 = *v7;
    v13 = result + 1;
    v5 = result + 1;
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = v18;
        v19 = *((unsigned __int8 *)v18 + 32);
        if (v19 <= a3)
          break;
        v18 = (uint64_t *)*v18;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v19 >= a3)
        break;
      v18 = (uint64_t *)v18[1];
      if (!v18)
        goto LABEL_30;
    }
  }
  else
  {
    if (v8 >= a3)
      return result;
    v13 = a2 + 1;
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
        v5 = v13;
        v14 = v13;
      }
      while (v12);
    }
    else
    {
      v14 = a2;
      do
      {
        v20 = v14;
        v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v20);
    }
    if (v14 == (uint64_t *)v7)
      goto LABEL_37;
    if (*((unsigned __int8 *)v14 + 32) > a3)
      goto LABEL_37;
    v21 = *v7;
    v13 = result + 1;
    v5 = result + 1;
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = v21;
        v24 = *((unsigned __int8 *)v21 + 32);
        if (v24 <= a3)
          break;
        v21 = (uint64_t *)*v21;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v24 >= a3)
        break;
      v21 = (uint64_t *)v21[1];
      if (!v21)
      {
LABEL_30:
        v13 = v5 + 1;
        goto LABEL_37;
      }
    }
  }
  return result;
}

void sub_2238E88EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238E8900(_QWORD *a1)
{
  if (a1)
  {
    sub_2238E8900(*a1);
    sub_2238E8900(a1[1]);
    sub_22316F8F4(a1 + 5);
    operator delete(a1);
  }
}

unint64_t sub_2238E8940(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_2238E8AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2238E8ADC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5C340[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2238E8BCC(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t *v10;
  unsigned int v11;
  _BOOL4 v12;
  char *v13;
  _QWORD *v14;
  unsigned __int8 v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  void **v20;
  void **v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  size_t v44;
  size_t v45;
  void ***p_dst;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  size_t v52;
  size_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  const void *v99;
  const char *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  unsigned int v113;
  unsigned int v114;
  _BOOL4 v115;
  _BOOL4 v116;
  int v117;
  uint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  const char *v121;
  int v122;
  const void *v123;
  const char *__src;
  char *__s;
  void *__p[2];
  char v127;
  unsigned int v128;
  void *v129[2];
  char v130;
  uint64_t *v131[3];
  int v132;
  const char *v133;
  int v134;
  const char *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[24];
  __int128 v141;
  char *v142;
  void *v143[2];
  std::__shared_weak_count *v144;
  char *v145;
  std::__shared_weak_count *v146;
  _QWORD *v147;
  __int128 v148;
  void **__dst;
  __int128 v150;
  _QWORD v151[7];
  unint64_t v152;
  char v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v139 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540CC9B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC9B0))
  {
    qword_2540CC9D8 = 0;
    qword_2540CC9D0 = 0;
    qword_2540CC9C8 = (uint64_t)&qword_2540CC9D0;
    __cxa_atexit((void (*)(void *))sub_2238EA1DC, &qword_2540CC9C8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC9B0);
  }
  v4 = qword_2540CC9D0;
  v5 = v139;
  if (qword_2540CC9D0)
  {
    v6 = &qword_2540CC9D0;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v9 = v7 == (_DWORD)v139;
      v8 = v7 < v139;
      if (v9)
        v8 = *(_DWORD *)(v4 + 36) < HIDWORD(v139);
      v9 = !v8;
      if (v8)
        v10 = (uint64_t *)(v4 + 8);
      else
        v10 = (uint64_t *)v4;
      if (v9)
        v6 = (uint64_t *)v4;
      v4 = *v10;
    }
    while (*v10);
    if (v6 != &qword_2540CC9D0)
    {
      v11 = *((_DWORD *)v6 + 8);
      v9 = (_DWORD)v139 == v11;
      v12 = v139 < v11;
      if (v9)
        v12 = HIDWORD(v139) < *((_DWORD *)v6 + 9);
      if (!v12)
      {
        v26 = v6[5];
        if ((_DWORD)v139 != *(_DWORD *)(v26 + 136) || HIDWORD(v139) != *(_DWORD *)(v26 + 140))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 260, (uint64_t)"it->second->ImageSize() == size", 31, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v26 = v6[5];
        }
        *a1 = v26;
        v28 = v6[6];
        a1[1] = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        return;
      }
    }
  }
  v13 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24EC5C4C0;
  *((_QWORD *)v13 + 3) = v5;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = xmmword_2245C43A0;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *((_QWORD *)v13 + 17) = 0;
  v14 = operator new(0x70uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_24EC5C510;
  v14[3] = 850045863;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  v14[10] = 0;
  v14[11] = v13 + 24;
  v14[12] = v5;
  *((_QWORD *)v13 + 18) = v14 + 3;
  *((_QWORD *)v13 + 19) = v14;
  *((_QWORD *)v13 + 20) = v5;
  *a1 = (uint64_t)(v13 + 24);
  a1[1] = (uint64_t)v13;
  v15 = atomic_load((unsigned __int8 *)&qword_2540CC9C0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC9C0))
  {
    sub_22455F53C(v131);
    sub_223174DE4(v151, "cv3d.recon.frame");
    sub_2232300E0(v131, (uint64_t)v151, &qword_2540CC9B8);
    if (SHIBYTE(v151[2]) < 0)
      operator delete((void *)v151[0]);
    __cxa_guard_release(&qword_2540CC9C0);
  }
  v138 = qword_2540CC9B8;
  if (**(int **)(qword_2540CC9B8 + 56) <= 3)
  {
    v16 = *(unsigned __int8 *)(qword_2540CC9B8 + 72);
    v17 = sub_22322F254(qword_2540CC9B8, "OSLogSurrogateAppender", 1, 0);
    v18 = v17;
    if (v16 || v17)
    {
      v131[0] = &v138;
      v131[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v131[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v132 = 3;
      v133 = "unknown file";
      v134 = 256;
      v136 = 0;
      v137 = 0;
      v135 = "unknown function";
      v19 = (const void *)*a1;
      v128 = 29;
      LODWORD(v151[3]) = 0;
      sub_2231A0B14((uint64_t)v140, (uint64_t)v151, &v128);
      if (LODWORD(v151[3]) == -1)
        sub_22316DD70();
      *(_QWORD *)v140 = v143;
      ((void (*)(void **__return_ptr, _BYTE *, _QWORD *))off_24EC5C388[LODWORD(v151[3])])(v129, v140, v151);
      if (LODWORD(v151[3]) != -1)
        ((void (*)(_BYTE *, _QWORD *))off_24EC5C340[LODWORD(v151[3])])(v140, v151);
      v20 = v129;
      if (v130 < 0)
        v20 = (void **)v129[0];
      __s = (char *)v20;
      LODWORD(v151[3]) = 0;
      sub_2231BFC9C((uint64_t)v140, (uint64_t)v151, (unsigned int *)&v139);
      if (LODWORD(v151[3]) == -1)
        sub_22316DD70();
      *(_QWORD *)v140 = v143;
      ((void (*)(void **__return_ptr, _BYTE *, _QWORD *))off_24EC5C388[LODWORD(v151[3])])(__p, v140, v151);
      if (LODWORD(v151[3]) != -1)
        ((void (*)(_BYTE *, _QWORD *))off_24EC5C340[LODWORD(v151[3])])(v140, v151);
      v123 = v19;
      if (v127 >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      v22 = *v131[0];
      v23 = (const char *)(*v131[0] + 16);
      v121 = v23;
      if (*(char *)(*v131[0] + 39) < 0)
      {
        v23 = *(const char **)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 24);
        v122 = v16;
        v31 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v31 & 1) != 0)
          goto LABEL_46;
      }
      else
      {
        v24 = *(unsigned __int8 *)(*v131[0] + 39);
        v122 = v16;
        v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v25 & 1) != 0)
          goto LABEL_46;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v151);
        sub_223199C58("com.apple.cv3d", (unint64_t)v151, byte_255788F40);
        if (LOBYTE(v151[3]) && SHIBYTE(v151[2]) < 0)
          operator delete((void *)v151[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_46:
      if (byte_255788F40[23] >= 0)
        v32 = byte_255788F40;
      else
        v32 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v33 = byte_255788F40[23];
      else
        v33 = *(_QWORD *)&byte_255788F40[8];
      __src = v23;
      v151[0] = os_log_create(v32, v23);
      v34 = &v151[1];
      if (v33 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v33 >= 0x17)
      {
        v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v35 = v33 | 7;
        v36 = v35 + 1;
        v34 = operator new(v35 + 1);
        v151[2] = v33;
        v151[3] = v36 | 0x8000000000000000;
        v151[1] = v34;
      }
      else
      {
        HIBYTE(v151[3]) = v33;
        if (!v33)
        {
LABEL_60:
          *((_BYTE *)v34 + v33) = 0;
          LOBYTE(v151[4]) = 1;
          v37 = &v151[5];
          if (v24 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v24 >= 0x17)
          {
            v39 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v39 = v24 | 7;
            v40 = v39 + 1;
            v37 = operator new(v39 + 1);
            v151[6] = v24;
            v152 = v40 | 0x8000000000000000;
            v151[5] = v37;
          }
          else
          {
            HIBYTE(v152) = v24;
            if (!v24)
            {
              LOBYTE(v151[5]) = 0;
              v153 = 1;
              v38 = v151[0];
              if ((SHIBYTE(v152) & 0x80000000) == 0)
                goto LABEL_64;
              goto LABEL_70;
            }
          }
          memmove(v37, __src, v24);
          *((_BYTE *)v37 + v24) = 0;
          v153 = 1;
          v38 = v151[0];
          if ((SHIBYTE(v152) & 0x80000000) == 0)
          {
LABEL_64:
            if (!LOBYTE(v151[4]))
              goto LABEL_73;
            goto LABEL_71;
          }
LABEL_70:
          operator delete((void *)v151[5]);
          if (!LOBYTE(v151[4]))
            goto LABEL_73;
LABEL_71:
          if (SHIBYTE(v151[3]) < 0)
            operator delete((void *)v151[1]);
LABEL_73:
          if (v151[0])
            os_release((void *)v151[0]);
          if (!v18 || !*(_QWORD *)(v18 + 24))
          {
            os_log_type_enabled(v38, OS_LOG_TYPE_INFO);
            LODWORD(v151[0]) = 134218498;
            *(_QWORD *)((char *)v151 + 4) = v123;
            WORD2(v151[1]) = 2080;
            *(_QWORD *)((char *)&v151[1] + 6) = __s;
            HIWORD(v151[2]) = 2080;
            v151[3] = v21;
            v47 = (void *)_os_log_send_and_compose_impl();
            v48 = v122;
            if (v47)
              free(v47);
LABEL_162:
            if (v127 < 0)
            {
              operator delete(__p[0]);
              if ((v130 & 0x80000000) == 0)
              {
LABEL_164:
                if (!v48)
                  goto LABEL_184;
                goto LABEL_168;
              }
            }
            else if ((v130 & 0x80000000) == 0)
            {
              goto LABEL_164;
            }
            operator delete(v129[0]);
            if (!v48)
            {
LABEL_184:
              sub_223182C08((uint64_t)v131);
              v102 = v137;
              if (v137)
              {
                p_shared_owners = (unint64_t *)&v137->__shared_owners_;
                do
                  v104 = __ldaxr(p_shared_owners);
                while (__stlxr(v104 - 1, p_shared_owners));
                if (!v104)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
              }
              goto LABEL_189;
            }
LABEL_168:
            v99 = (const void *)*a1;
            LODWORD(v147) = 29;
            LODWORD(v151[3]) = 0;
            sub_2231A0B14((uint64_t)v143, (uint64_t)v151, (unsigned int *)&v147);
            if (LODWORD(v151[3]) == -1)
              sub_22316DD70();
            v143[0] = &__dst;
            ((void (*)(_BYTE *__return_ptr, void **, _QWORD *))off_24EC5C388[LODWORD(v151[3])])(v140, v143, v151);
            if (LODWORD(v151[3]) != -1)
              ((void (*)(void **, _QWORD *))off_24EC5C340[LODWORD(v151[3])])(v143, v151);
            if (v140[23] >= 0)
              v100 = v140;
            else
              v100 = *(const char **)v140;
            LODWORD(v151[3]) = 0;
            sub_2231BFC9C((uint64_t)&__dst, (uint64_t)v151, (unsigned int *)&v139);
            if (LODWORD(v151[3]) == -1)
              sub_22316DD70();
            __dst = v129;
            ((void (*)(void **__return_ptr, void ***, _QWORD *))off_24EC5C388[LODWORD(v151[3])])(v143, &__dst, v151);
            if (LODWORD(v151[3]) != -1)
              ((void (*)(void ***, _QWORD *))off_24EC5C340[LODWORD(v151[3])])(&__dst, v151);
            v101 = v143;
            if (SHIBYTE(v144) < 0)
              v101 = (void **)v143[0];
            sub_22322C138((uint64_t)v131, "New image pool %p with format %s and size %s", v99, v100, (const char *)v101);
            if (SHIBYTE(v144) < 0)
              operator delete(v143[0]);
            if ((v140[23] & 0x80000000) != 0)
              operator delete(*(void **)v140);
            sub_223182C08((uint64_t)v131);
            goto LABEL_184;
          }
          v41 = _os_log_pack_size();
          v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
          v43 = (std::__shared_weak_count *)operator new();
          v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v43->__shared_owners_ = 0;
          v43->__shared_weak_owners_ = 0;
          v43[1].__vftable = v42;
          v143[0] = v42;
          v143[1] = v42;
          v145 = 0;
          v146 = 0;
          v144 = v43;
          v44 = strlen(__s);
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v45 = v44;
          if (v44 >= 0x17)
          {
            v49 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v49 = v44 | 7;
            v50 = v49 + 1;
            p_dst = (void ***)operator new(v49 + 1);
            *(_QWORD *)&v150 = v45;
            *((_QWORD *)&v150 + 1) = v50 | 0x8000000000000000;
            __dst = (void **)p_dst;
          }
          else
          {
            HIBYTE(v150) = v44;
            p_dst = &__dst;
            if (!v44)
            {
LABEL_87:
              *((_BYTE *)p_dst + v45) = 0;
              v51 = v21;
              v52 = strlen((const char *)v21);
              if (v52 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v53 = v52;
              if (v52 >= 0x17)
              {
                v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v52 | 7) != 0x17)
                  v55 = v52 | 7;
                v56 = v55 + 1;
                v54 = operator new(v55 + 1);
                *(_QWORD *)&v148 = v53;
                *((_QWORD *)&v148 + 1) = v56 | 0x8000000000000000;
                v147 = v54;
              }
              else
              {
                HIBYTE(v148) = v52;
                v54 = &v147;
                if (!v52)
                  goto LABEL_95;
              }
              memcpy(v54, v51, v53);
LABEL_95:
              *((_BYTE *)v54 + v53) = 0;
              v151[1] = __dst;
              v151[2] = v150;
              *(_QWORD *)((char *)&v151[2] + 7) = *(_QWORD *)((char *)&v150 + 7);
              v151[4] = v147;
              v151[5] = v148;
              *(_QWORD *)((char *)&v151[5] + 7) = *(_QWORD *)((char *)&v148 + 7);
              v151[0] = off_24EC24648;
              HIBYTE(v151[3]) = HIBYTE(v150);
              HIBYTE(v151[6]) = HIBYTE(v148);
              v57 = (char *)operator new(0x50uLL);
              *((_QWORD *)v57 + 3) = off_24EC24648;
              *((_QWORD *)v57 + 1) = 0;
              *((_QWORD *)v57 + 2) = 0;
              *(_QWORD *)v57 = &off_24EC245F8;
              *((_OWORD *)v57 + 2) = *(_OWORD *)&v151[1];
              *((_QWORD *)v57 + 6) = v151[3];
              memset(&v151[1], 0, 24);
              *(_OWORD *)(v57 + 56) = *(_OWORD *)&v151[4];
              *((_QWORD *)v57 + 9) = v151[6];
              memset(&v151[4], 0, 24);
              v58 = v146;
              v145 = v57 + 24;
              v146 = (std::__shared_weak_count *)v57;
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              if (SHIBYTE(v151[6]) < 0)
              {
                operator delete((void *)v151[4]);
                if ((SHIBYTE(v151[3]) & 0x80000000) == 0)
                {
LABEL_102:
                  *(_OWORD *)v140 = *(_OWORD *)v143;
                  v62 = v144;
                  v61 = v145;
                  *(_QWORD *)&v140[16] = v144;
                  if (!v144)
                    goto LABEL_108;
                  goto LABEL_106;
                }
              }
              else if ((SHIBYTE(v151[3]) & 0x80000000) == 0)
              {
                goto LABEL_102;
              }
              operator delete((void *)v151[1]);
              *(_OWORD *)v140 = *(_OWORD *)v143;
              v62 = v144;
              v61 = v145;
              *(_QWORD *)&v140[16] = v144;
              if (!v144)
              {
LABEL_108:
                v65 = v146;
                *(_QWORD *)&v141 = v61;
                *((_QWORD *)&v141 + 1) = v146;
                if (v146)
                {
                  v66 = (unint64_t *)&v146->__shared_owners_;
                  do
                    v67 = __ldxr(v66);
                  while (__stxr(v67 + 1, v66));
                  v142 = v61;
                  do
                    v68 = __ldaxr(v66);
                  while (__stlxr(v68 - 1, v66));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                else
                {
                  v142 = v61;
                }
                v69 = v144;
                if (v144)
                {
                  v70 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v71 = __ldaxr(v70);
                  while (__stlxr(v71 - 1, v70));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                  }
                }
                v72 = *(_QWORD *)v140;
                if (v142[31] >= 0)
                  v73 = v142 + 8;
                else
                  v73 = (char *)*((_QWORD *)v142 + 1);
                if (v142[55] >= 0)
                  v74 = v142 + 32;
                else
                  v74 = (char *)*((_QWORD *)v142 + 4);
                v75 = _os_log_pack_fill();
                *(_DWORD *)v75 = 134218498;
                *(_QWORD *)(v75 + 4) = v123;
                *(_WORD *)(v75 + 12) = 2080;
                *(_QWORD *)(v75 + 14) = v73;
                *(_WORD *)(v75 + 22) = 2080;
                *(_QWORD *)(v75 + 24) = v74;
                v76 = operator new();
                v77 = *(unsigned __int8 *)(v22 + 39);
                v78 = v121;
                if ((v77 & 0x80u) != 0)
                {
                  v78 = *(const char **)(v22 + 16);
                  v77 = *(_QWORD *)(v22 + 24);
                }
                *(_QWORD *)v76 = v72;
                *(_OWORD *)(v76 + 8) = *(_OWORD *)&v140[8];
                *(_QWORD *)&v140[8] = 0;
                *(_QWORD *)&v140[16] = 0;
                *(_OWORD *)(v76 + 24) = v141;
                v141 = 0uLL;
                *(_QWORD *)(v76 + 40) = v78;
                *(_QWORD *)(v76 + 48) = v77;
                *(_BYTE *)(v76 + 56) = 1;
                v143[0] = 0;
                v151[0] = v76;
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), v151);
                v79 = v151[0];
                v151[0] = 0;
                v48 = v122;
                if (v79)
                {
                  v80 = *(std::__shared_weak_count **)(v79 + 32);
                  if (v80)
                  {
                    v81 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v83 = *(std::__shared_weak_count **)(v79 + 16);
                  if (v83)
                  {
                    v84 = (unint64_t *)&v83->__shared_owners_;
                    do
                      v85 = __ldaxr(v84);
                    while (__stlxr(v85 - 1, v84));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                      std::__shared_weak_count::__release_weak(v83);
                    }
                  }
                  MEMORY[0x227684CE8](v79, 0x10F0C40B62ED6C6);
                  v86 = v143[0];
                  v143[0] = 0;
                  if (v86)
                  {
                    v87 = (std::__shared_weak_count *)*((_QWORD *)v86 + 4);
                    if (v87)
                    {
                      v88 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v89 = __ldaxr(v88);
                      while (__stlxr(v89 - 1, v88));
                      if (!v89)
                      {
                        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                        std::__shared_weak_count::__release_weak(v87);
                      }
                    }
                    v90 = (std::__shared_weak_count *)*((_QWORD *)v86 + 2);
                    if (v90)
                    {
                      v91 = (unint64_t *)&v90->__shared_owners_;
                      do
                        v92 = __ldaxr(v91);
                      while (__stlxr(v92 - 1, v91));
                      if (!v92)
                      {
                        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                        std::__shared_weak_count::__release_weak(v90);
                      }
                    }
                    MEMORY[0x227684CE8](v86, 0x10F0C40B62ED6C6);
                  }
                }
                v93 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                if (*((_QWORD *)&v141 + 1))
                {
                  v94 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
                  do
                    v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                    std::__shared_weak_count::__release_weak(v93);
                  }
                }
                v96 = *(std::__shared_weak_count **)&v140[16];
                if (*(_QWORD *)&v140[16])
                {
                  v97 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                goto LABEL_162;
              }
LABEL_106:
              v63 = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
              goto LABEL_108;
            }
          }
          memcpy(p_dst, __s, v45);
          goto LABEL_87;
        }
      }
      memmove(v34, v32, v33);
      goto LABEL_60;
    }
  }
LABEL_189:
  v105 = v139;
  v107 = *a1;
  v106 = (std::__shared_weak_count *)a1[1];
  v151[0] = v139;
  v151[1] = v107;
  v151[2] = v106;
  if (v106)
  {
    v108 = (unint64_t *)&v106->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  v110 = qword_2540CC9D0;
  if (qword_2540CC9D0)
  {
    while (1)
    {
      while (1)
      {
        v112 = (uint64_t *)v110;
        v113 = *(_DWORD *)(v110 + 32);
        v114 = *((_DWORD *)v112 + 9);
        v115 = HIDWORD(v105) < v114;
        if ((_DWORD)v105 != v113)
          v115 = v105 < v113;
        if (!v115)
          break;
        v110 = *v112;
        v111 = v112;
        if (!*v112)
          goto LABEL_205;
      }
      v116 = v114 < HIDWORD(v105);
      v117 = (_DWORD)v105 == v113 ? v116 : v113 < v105;
      if (v117 != 1)
        break;
      v110 = v112[1];
      if (!v110)
      {
        v111 = v112 + 1;
        goto LABEL_205;
      }
    }
  }
  else
  {
    v111 = &qword_2540CC9D0;
    v112 = &qword_2540CC9D0;
LABEL_205:
    v118 = (uint64_t *)operator new(0x38uLL);
    v118[4] = v105;
    v118[5] = v107;
    v118[6] = (uint64_t)v106;
    v151[1] = 0;
    v151[2] = 0;
    *v118 = 0;
    v118[1] = 0;
    v118[2] = (uint64_t)v112;
    *v111 = (uint64_t)v118;
    if (*(_QWORD *)qword_2540CC9C8)
    {
      qword_2540CC9C8 = *(_QWORD *)qword_2540CC9C8;
      v118 = (uint64_t *)*v111;
    }
    sub_2231A9A8C((uint64_t *)qword_2540CC9D0, v118);
    ++qword_2540CC9D8;
    v106 = (std::__shared_weak_count *)v151[2];
  }
  if (v106)
  {
    v119 = (unint64_t *)&v106->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
}

void sub_2238E9BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (*(_BYTE *)(v57 - 152) && *(char *)(v57 - 153) < 0)
    operator delete(*(void **)(v57 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
  {
    operator delete(a26);
    sub_223182DAC((uint64_t)&a32);
    sub_223167354(a13);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)&a32);
  sub_223167354(a13);
  _Unwind_Resume(a1);
}

void sub_2238E9E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238E9E64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223197300(v2 - 176);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2238E9E84()
{
  uint64_t v0;
  void **v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  std::mutex::~mutex((std::mutex *)(v0 + 80));
  v2 = *(_QWORD **)(v0 + 40);
  if (v2)
  {
    v3 = *(_QWORD **)(v0 + 48);
    v4 = *(void **)(v0 + 40);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          sub_223167354(v5 + 8);
          MEMORY[0x227684CE8](v5, 0x10F1C40EC83FD22);
        }
      }
      while (v3 != v2);
      v4 = *v1;
    }
    *(_QWORD *)(v0 + 48) = v2;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v0);
  operator delete(v7);
  JUMPOUT(0x2238E9EFCLL);
}

void sub_2238E9F04(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *exception;

  v4 = *(_QWORD *)(a2 + 120);
  v5 = *(std::__shared_weak_count **)(a2 + 128);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::mutex::lock((std::mutex *)(a2 + 56));
  v8 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a2 + 16) == v8)
  {
    v17 = *(_QWORD *)(a2 + 40);
    if (v17 >= *(_QWORD *)(a2 + 48))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    *(_QWORD *)(a2 + 40) = v17 + 1;
    v9 = (_QWORD *)operator new();
    *v9 = &off_24EC5C5E0;
    sub_2238EA468((_DWORD *)a2, v9 + 1);
  }
  else
  {
    v9 = *(_QWORD **)(v8 - 8);
    *(_QWORD *)(v8 - 8) = 0;
    v10 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(v10 - 8);
    v12 = (_QWORD *)(v10 - 8);
    v11 = v13;
    *v12 = 0;
    if (v13)
    {
      v14 = *(std::__shared_weak_count **)(v11 + 16);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      MEMORY[0x227684CE8](v11, 0x10F1C40EC83FD22);
    }
    *(_QWORD *)(a2 + 24) = v12;
  }
  std::mutex::unlock((std::mutex *)(a2 + 56));
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a1 = v9;
  v20 = (_QWORD *)operator new();
  *v20 = &off_24EC5C560;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = v9;
  v20[4] = v4;
  v20[5] = v5;
  a1[1] = v20;
  if (v5)
  {
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2238EA108()
{
  __break(1u);
}

void sub_2238EA19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_end_catch();
  sub_223167354((uint64_t)&a9);
  sub_2238EA3E4(&a11);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_2238EA1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238EA1DC(uint64_t a1)
{
  sub_223809BEC(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_2238EA204(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2238EA214(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2238EA244(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  v2 = *(std::mutex **)(a1 + 144);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 144));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v6 = *(_QWORD **)(a1 + 40);
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v6 = *(_QWORD **)(a1 + 40);
    if (!v6)
      return;
  }
  v7 = *(_QWORD **)(a1 + 48);
  if (v7 == v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v6);
  }
  else
  {
    do
    {
      v9 = *--v7;
      v8 = v9;
      *v7 = 0;
      if (v9)
      {
        v10 = *(std::__shared_weak_count **)(v8 + 16);
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        MEMORY[0x227684CE8](v8, 0x10F1C40EC83FD22);
      }
    }
    while (v7 != v6);
    v13 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v13);
  }
}

void sub_2238EA398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2238EA3A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2238EA3D8(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_2238EA3E4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10F1C40EC83FD22);
  }
  return a1;
}

void sub_2238EA468(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24EC5C6D8;
  sub_22449A848(a1, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC5C720;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C7B8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 29);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a2 + 3) = *v14;
  *(_OWORD *)(a2 + 5) = v8;
  *(_OWORD *)(a2 + 7) = v7;
  v14 = 0;
  MEMORY[0x227684CE8]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a2 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2238EA65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_2238EA690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_2238EA6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_2238EA6BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2238EA724()
{
  return 29;
}

uint64_t sub_2238EA72C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2238EA734(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2238EA7B4()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2238EA7C8()
{
  return 29;
}

__int128 *sub_2238EA7D4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E810);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578E810))
  {
    v2 = sub_2238EA8AC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578E7F8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578E808 = *((_QWORD *)v2 + 2);
      xmmword_25578E7F8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E7F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E810);
  }
  if (byte_25578E80F >= 0)
    return &xmmword_25578E7F8;
  else
    return (__int128 *)xmmword_25578E7F8;
}

void sub_2238EA894(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E810);
  _Unwind_Resume(a1);
}

__int128 *sub_2238EA8AC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E830))
    return &xmmword_25578E818;
  v2 = sub_2238EA988();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578E818, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578E828 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578E818 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E818, &dword_22314D000);
  __cxa_guard_release(&qword_25578E830);
  return &xmmword_25578E818;
}

void sub_2238EA970(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E830);
  _Unwind_Resume(a1);
}

std::string *sub_2238EA988()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E850);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E850))
    return &stru_25578E838;
  sub_2238EABA0((uint64_t)__p);
  sub_2238EAA78((char *)__p, &stru_25578E838);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E838, &dword_22314D000);
  __cxa_guard_release(&qword_25578E850);
  return &stru_25578E838;
}

void sub_2238EAA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578E850);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578E850);
  _Unwind_Resume(a1);
}

void sub_2238EAA78(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231EE344();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2238EAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2238EABA0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E870);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E870))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba8u>]", qword_25578E858);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E858, &dword_22314D000);
    __cxa_guard_release(&qword_25578E870);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578E890);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578E890))
  {
    v5 = sub_2231A38CC(qword_25578E858, "<", 0);
    sub_2231A37C8(qword_25578E858, 0, v5, qword_25578E878);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E878, &dword_22314D000);
    __cxa_guard_release(&qword_25578E890);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578E8B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578E8B0))
  {
    sub_224573040((uint64_t)qword_25578E878, (uint64_t)&xmmword_25578E898);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E898, &dword_22314D000);
    __cxa_guard_release(&qword_25578E8B0);
  }
  if (byte_25578E8AF < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578E898, *((unint64_t *)&xmmword_25578E898 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578E898;
    *(_QWORD *)(a1 + 16) = unk_25578E8A8;
  }
}

void sub_2238EAD3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E8B0);
  _Unwind_Resume(a1);
}

void sub_2238EAD54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E890);
  _Unwind_Resume(a1);
}

void sub_2238EAD6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E870);
  _Unwind_Resume(a1);
}

void sub_2238EAD88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2238EADAC(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2238EADFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2238EAE6C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C560;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_2238EAEE0(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5C560;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_2238EAF58(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_2238EB09C(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v5 = *(std::__shared_weak_count **)(v2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10F1C40EC83FD22);
  }
  v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t sub_2238EB02C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE29ENS3_13DynamicBufferEEENS1_18AutoReturn"
                     "ingMakeTIS7_NS_5recon5frame16ImageInitializerILS5_29EEENSA_13ImageReleaserILS5_29EEEEENSt3__110shar"
                     "ed_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_"
                     "EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE29ENS3_13DynamicBufferEEENS1_1"
                                "8AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_29EEENSA_13ImageReleaserILS"
                                "5_29EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS"
                                "7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE29ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_29EEENSA_13ImageReleaserILS5_29EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE29ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_29EEENSA_13ImageReleaserILS5_29EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_2238EB09C(std::mutex *a1, uint64_t a2)
{
  uint64_t sig;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    std::mutex::lock((std::mutex *)(sig + 56));
    v6 = *(char **)(sig + 24);
    v5 = *(_QWORD *)(sig + 32);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(char **)(sig + 16);
      v9 = (v6 - v8) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_22316E078();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_223174E94();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v7 = v14 + 8;
      if (v6 == v8)
      {
        *(_QWORD *)(sig + 16) = v14;
        *(_QWORD *)(sig + 24) = v7;
        *(_QWORD *)(sig + 32) = v15;
      }
      else
      {
        v16 = v6 - v8 - 8;
        if (v16 < 0x78)
          goto LABEL_43;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v6 - v8 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_43;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v14 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v13[8 * v9 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_43:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v14 - 1) = v26;
            v14 -= 8;
          }
          while (v6 != v8);
        }
        v6 = *(char **)(sig + 16);
        v27 = *(char **)(sig + 24);
        *(_QWORD *)(sig + 16) = v14;
        *(_QWORD *)(sig + 24) = v7;
        *(_QWORD *)(sig + 32) = v15;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            v30 = *(std::__shared_weak_count **)(v28 + 16);
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            MEMORY[0x227684CE8](v28, 0x10F1C40EC83FD22);
          }
        }
      }
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v6 = a2;
      v7 = v6 + 8;
    }
    *(_QWORD *)(sig + 24) = v7;
    std::mutex::unlock((std::mutex *)(sig + 56));
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_2238EB33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2238EA3E4((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_2238EB358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_2238EA3E4(&a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2238EB37C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231EE43C(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2238EB468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_2238EB484(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v4 = (_QWORD *)std::ostream::operator<<();
  v60 = 32;
  sub_2231813E8(v4, (uint64_t)&v60, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  v61 = 10;
  sub_2231813E8(v5, (uint64_t)&v61, 1);
  v59 = *a2;
  if (*a2)
  {
    v6 = a2[1];
    if (v6)
    {
      v7 = 0;
LABEL_4:
      for (i = 0; i != v6; ++i)
      {
        v9 = *((_QWORD *)a2 + 5) + 180 * (a2[2] * v7 + a2[3] * i);
        v10 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v10, (uint64_t)" ", 1);
        v11 = (_QWORD *)std::ostream::operator<<();
        v12 = sub_2231813E8(v11, (uint64_t)" ", 1);
        v62 = *(_BYTE *)(v9 + 132);
        v13 = sub_2231813E8(v12, (uint64_t)&v62, 1);
        sub_2231813E8(v13, (uint64_t)" ", 1);
        v14 = (_QWORD *)std::ostream::operator<<();
        v15 = sub_2231813E8(v14, (uint64_t)" ", 1);
        v16 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v16, (uint64_t)" ", 1);
        v17 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v17, (uint64_t)" ", 1);
        v18 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v18, (uint64_t)" ", 1);
        v19 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v19, (uint64_t)" ", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v20, (uint64_t)" ", 1);
        std::ostream::operator<<();
        sub_2231813E8(v15, (uint64_t)"\n", 1);
        v21 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v21, (uint64_t)" ", 1);
        v22 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v22, (uint64_t)" ", 1);
        v23 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v23, (uint64_t)" ", 1);
        v24 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v24, (uint64_t)" ", 1);
        v25 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v25, (uint64_t)" ", 1);
        v26 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v26, (uint64_t)" ", 1);
        v27 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v27, (uint64_t)" ", 1);
        v28 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v28, (uint64_t)" ", 1);
        v29 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v29, (uint64_t)" ", 1);
        v30 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v30, (uint64_t)" ", 1);
        v31 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v31, (uint64_t)" ", 1);
        v32 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v32, (uint64_t)" ", 1);
        v33 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v33, (uint64_t)" ", 1);
        v34 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v34, (uint64_t)" ", 1);
        v35 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v35, (uint64_t)" ", 1);
        v36 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v36, (uint64_t)" ", 1);
        v37 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v37, (uint64_t)" ", 1);
        v38 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v38, (uint64_t)" ", 1);
        v39 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v39, (uint64_t)" ", 1);
        v40 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v40, (uint64_t)" ", 1);
        v41 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v41, (uint64_t)" ", 1);
        v42 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v42, (uint64_t)" ", 1);
        v43 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v43, (uint64_t)" ", 1);
        v44 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v44, (uint64_t)" ", 1);
        v45 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v45, (uint64_t)" ", 1);
        v46 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v46, (uint64_t)" ", 1);
        v47 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v47, (uint64_t)" ", 1);
        v48 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v48, (uint64_t)" ", 1);
        v49 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v49, (uint64_t)" ", 1);
        v50 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v50, (uint64_t)" ", 1);
        v51 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v51, (uint64_t)" ", 1);
        v52 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v52, (uint64_t)" ", 1);
        v53 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v53, (uint64_t)" ", 1);
        sub_2231813E8(a1, (uint64_t)"\n", 1);
        v63 = *(_BYTE *)(v9 + 164);
        v54 = sub_2231813E8(a1, (uint64_t)&v63, 1);
        sub_2231813E8(v54, (uint64_t)" ", 1);
        v55 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v55, (uint64_t)" ", 1);
        v56 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v56, (uint64_t)" ", 1);
        v57 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v57, (uint64_t)" ", 1);
        sub_2231813E8(a1, (uint64_t)"\n", 1);
      }
      while (++v7 != v59)
      {
        v6 = a2[1];
        if (v6)
          goto LABEL_4;
      }
    }
  }
  return a1;
}

_DWORD *sub_2238EB9FC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5C340[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

double **sub_2238EBAEC(double **a1, float *a2, float *a3)
{
  uint64_t v4;
  float *v6;
  double *v7;
  float v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_223452694();
    v6 = a2;
    v7 = (double *)operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0.0;
      v8 = *v6++;
      *(_BYTE *)v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2238EBB98(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_223454278(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2238EBBE8(uint64_t *result, const void **a2, const void ***a3)
{
  const void ***v3;
  const void **v4;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  _BYTE *v8;
  _BYTE *v9;
  __int128 v10;
  float *v11;
  float *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  uint64_t *v22;
  _QWORD *v23;
  const void ***v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;

  if (a2 != (const void **)a3)
  {
    v3 = a3;
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    v28 = result + 1;
    v26 = result;
    do
    {
      result = sub_223453BB8((uint64_t **)v5, v6, &v32, &v31, v4 + 4);
      if (*result)
      {
        v7 = (const void **)v4[1];
        if (v7)
          goto LABEL_18;
      }
      else
      {
        v30 = result;
        v8 = operator new(0x48uLL);
        v9 = v8;
        if (*((char *)v4 + 55) < 0)
        {
          sub_223197FA4(v8 + 32, (void *)v4[4], (unint64_t)v4[5]);
        }
        else
        {
          v10 = *((_OWORD *)v4 + 2);
          *((_QWORD *)v8 + 6) = v4[6];
          *((_OWORD *)v8 + 2) = v10;
        }
        *((_QWORD *)v9 + 8) = 0;
        v9[56] = 2;
        v12 = (float *)v4[7];
        v11 = (float *)v4[8];
        v13 = operator new(0x18uLL);
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        if (v11 != v12)
        {
          v29 = v9;
          if ((0xAAAAAAAAAAAAAAABLL * (v11 - v12)) >> 60)
            sub_223452694();
          v14 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * (v11 - v12));
          v15 = 0;
          *v13 = v14;
          v13[1] = v14;
          v13[2] = &v14[0xAAAAAAAAAAAAAAB0 * (v11 - v12)];
          do
          {
            v16 = &v14[v15];
            *((_QWORD *)v16 + 1) = 0;
            *v16 = 2;
            v17 = operator new(0x18uLL);
            *v17 = 0;
            v17[1] = 0;
            v17[2] = 0;
            v18 = (double *)operator new(0x30uLL);
            *v17 = v18;
            v17[2] = v18 + 6;
            v19 = *v12;
            *(_BYTE *)v18 = 7;
            v18[1] = v19;
            v20 = v12[1];
            *((_BYTE *)v18 + 16) = 7;
            v18[3] = v20;
            v21 = v12[2];
            *((_BYTE *)v18 + 32) = 7;
            v18[5] = v21;
            v17[1] = v18 + 6;
            *((_QWORD *)v16 + 1) = v17;
            v15 += 16;
            v12 += 3;
          }
          while (v12 != v11);
          v13[1] = &v14[v15];
          v9 = v29;
          v5 = v26;
          v3 = a3;
        }
        *((_QWORD *)v9 + 8) = v13;
        v22 = v32;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v22;
        *v30 = (uint64_t)v9;
        v23 = *(_QWORD **)*v5;
        if (v23)
        {
          *v5 = (uint64_t)v23;
          v9 = (_BYTE *)*v30;
        }
        result = sub_2231A9A8C((uint64_t *)v5[1], (uint64_t *)v9);
        ++v5[2];
        v6 = v28;
        v7 = (const void **)v4[1];
        if (v7)
        {
          do
          {
LABEL_18:
            v24 = (const void ***)v7;
            v7 = (const void **)*v7;
          }
          while (v7);
          goto LABEL_3;
        }
      }
      do
      {
        v24 = (const void ***)v4[2];
        v25 = *v24 == v4;
        v4 = (const void **)v24;
      }
      while (!v25);
LABEL_3:
      v4 = (const void **)v24;
    }
    while (v24 != v3);
  }
  return result;
}

void sub_2238EBE40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238EBE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t **v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;

  v15 = *v13;
  if (*v13)
  {
    v16 = v13[1];
    v17 = *v13;
    if (v16 != v15)
    {
      v18 = v16 - 1;
      do
      {
        v19 = v18 - 1;
        sub_223454278(v18, *((unsigned __int8 *)v18 - 8));
        v18 -= 2;
      }
      while (v19 != v15);
      v17 = *v13;
    }
    v13[1] = v15;
    operator delete(v17);
  }
  operator delete(v13);
  if (a13[55] < 0)
    operator delete(*a9);
  operator delete(a13);
  _Unwind_Resume(a1);
}

_DWORD *sub_2238EBF14(_DWORD ***a1)
{
  return sub_223714EB8(**a1, (char *)(*a1)[1]);
}

void sub_2238EBF20(uint64_t a1, uint64_t a2)
{
  sub_2238EBF30((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_2238EBF30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5C340[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2238EC0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2238EC128(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2238EC220((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2238EC218(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2238EC220(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2238EC41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238EC430(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int8x16_t v6;
  float32x4_t v7;
  _QWORD *v8;
  uint64_t *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v14;
  float v15;
  float *v16;
  int v17;
  int v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v34;
  float v35;
  float *v36;
  float32x4_t v37;
  float32x4_t v38;
  float *v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  float32x2_t v49;
  float v50;
  float v51;
  float v52;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v55 = a2;
  v56 = a3;
  v57 = a2;
  v58 = a3;
  if (!sub_223340F28(a1, (uint64_t)&v57)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 121, (uint64_t)"nodes_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v5 = sub_22342DA5C(a1, (uint64_t)&v57);
  v8 = v5;
  if (!v5)
    sub_223198218("unordered_map::at: key not found");
  v9 = (uint64_t *)a1[2];
  if (v9)
  {
    v10 = (float *)(v5 + 19);
    do
    {
      v11 = v9[2];
      v12 = v9[3];
      v57 = v11;
      v58 = v12;
      if (v55 != v11 || v56 != v12)
      {
        v6.i64[0] = *(_QWORD *)v10;
        v6.i32[2] = *((_DWORD *)v8 + 40);
        v7.i64[0] = v9[19];
        v7.i32[2] = *((_DWORD *)v9 + 40);
        v6 = (int8x16_t)vsubq_f32((float32x4_t)v6, v7);
        v14 = (float32x2_t)vextq_s8(v6, v6, 8uLL).u64[0];
        *(float *)v6.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1), *(float32x2_t *)v6.i8, 1), v14, v14).f32[0]);
        if (*(float *)v6.i32 < 0.5)
        {
          v15 = *((float *)v8 + 34) * *((float *)v9 + 34);
          v16 = (float *)v9 + 35;
          v17 = 1;
          v18 = 1;
          v19 = (float *)v8 + 35;
          do
          {
            v15 = v15 + (float)(*v19 * *v16);
            if (v18 >= 2)
              v20 = 8;
            else
              v20 = 4;
            v19 = (float *)((char *)v19 + v20);
            if (v18 < 2)
              ++v18;
            else
              v18 = 0;
            if (v17 >= 2)
              v21 = 8;
            else
              v21 = 4;
            v16 = (float *)((char *)v16 + v21);
            if (v17 < 2)
              ++v17;
            else
              v17 = 0;
          }
          while (v10 != v19);
          v22 = *(float *)v6.i32 + *(float *)v6.i32;
          if (v22 > 1.0)
            v22 = 1.0;
          v23 = (1.0 - v15) * 0.5;
          v24 = v22 + v23;
          v25 = v24 * 0.5;
          if ((float)(v24 * 0.5) <= 0.75)
          {
            v54 = v24 * 0.5;
            sub_2238EC898(a1, a2, a3, v11, v12, &v54);
            v54 = v25;
            sub_2238EC898(a1, v11, v12, a2, a3, &v54);
          }
        }
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  if (a1[3] >= 2uLL)
  {
    v26 = (_QWORD *)a1[2];
    if (v26)
    {
      v27 = 0;
      v28 = 0;
      v29 = 100000000.0;
      do
      {
        v30 = v26[2];
        v31 = v26[3];
        v32 = v26[21];
        v57 = v30;
        v58 = v31;
        if (v55 != v30 || v56 != v31)
        {
          v34 = (double)(v32 - v8[21]) / 1000000000.0;
          if (fabs(v34) < v29)
          {
            v35 = v34;
            v29 = fabsf(v35);
            v27 = v31;
            v28 = v30;
          }
        }
        v26 = (_QWORD *)*v26;
      }
      while (v26);
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    v57 = v28;
    v58 = v27;
    if (!sub_223340F28(a1, (uint64_t)&v57)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 121, (uint64_t)"nodes_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v36 = (float *)sub_22342DA5C(a1, (uint64_t)&v57);
    if (!v36)
      sub_223198218("unordered_map::at: key not found");
    v40 = v8[19];
    v39 = (float *)(v8 + 19);
    v37.i64[0] = v40;
    v41 = v39 - 3;
    v42 = v36 + 35;
    v43 = *(v39 - 4) * v36[34];
    v44 = 1;
    v45 = 1;
    do
    {
      v43 = v43 + (float)(*v41 * *v42);
      if (v45 >= 2)
        v46 = 8;
      else
        v46 = 4;
      v41 = (float *)((char *)v41 + v46);
      if (v45 < 2)
        ++v45;
      else
        v45 = 0;
      if (v44 >= 2)
        v47 = 8;
      else
        v47 = 4;
      v42 = (float *)((char *)v42 + v47);
      if (v44 < 2)
        ++v44;
      else
        v44 = 0;
    }
    while (v39 != v41);
    v37.f32[2] = v39[2];
    v38.f32[2] = v36[40];
    v38.i64[0] = *((_QWORD *)v36 + 19);
    v48 = (int8x16_t)vsubq_f32(v37, v38);
    v49 = (float32x2_t)vextq_s8(v48, v48, 8uLL).u64[0];
    *(float *)v48.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1), *(float32x2_t *)v48.i8, 1), v49, v49).f32[0]);
    v50 = *(float *)v48.i32 + *(float *)v48.i32;
    if (v50 > 1.0)
      v50 = 1.0;
    v51 = (1.0 - v43) * 0.5;
    v52 = (float)(v50 + v51) * 0.5;
    *(float *)&v57 = v52;
    sub_2238EC898(a1, a2, a3, v28, v27, &v57);
    *(float *)&v57 = v52;
    sub_2238EC898(a1, v28, v27, a2, a3, &v57);
  }
}

void sub_2238EC898(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  unint64_t v6;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint8x8_t v27;
  void **v28;
  _QWORD *v29;
  unint64_t v31;
  uint64_t v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  __int128 v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v48[0] = a2;
  v48[1] = a3;
  *(_QWORD *)&v47 = a4;
  *((_QWORD *)&v47 + 1) = a5;
  if (!sub_223340F28(a1, (uint64_t)v48) || !sub_223340F28(a1, (uint64_t)&v47))
    return;
  v9 = a1 + 5;
  v10 = sub_22342DA5C(v9, (uint64_t)v48);
  if (!v10)
    sub_223198218("unordered_map::at: key not found");
  v11 = sub_22456636C((unsigned __int8 *)&v47);
  v12 = (int8x8_t)v10[5];
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = v11;
      if (v11 >= *(_QWORD *)&v12)
        v14 = v11 % *(_QWORD *)&v12;
    }
    else
    {
      v14 = (*(_QWORD *)&v12 - 1) & v11;
    }
    v15 = *(_QWORD **)(v10[4] + 8 * v14);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (v16)
      {
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v12 - 1;
          while (1)
          {
            v21 = v16[1];
            if (v11 == v21)
            {
              if (v16[2] == (_QWORD)v47 && v16[3] == *((_QWORD *)&v47 + 1))
                return;
            }
            else if ((v21 & v17) != v14)
            {
              goto LABEL_30;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_30;
          }
        }
        do
        {
          v19 = v16[1];
          if (v11 == v19)
          {
            if (v16[2] == (_QWORD)v47 && v16[3] == *((_QWORD *)&v47 + 1))
              return;
          }
          else
          {
            if (v19 >= *(_QWORD *)&v12)
              v19 %= *(_QWORD *)&v12;
            if (v19 != v14)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_30:
  v22 = sub_22342DA5C(v9, (uint64_t)v48);
  if (!v22)
    sub_223198218("unordered_map::at: key not found");
  v23 = sub_22456636C((unsigned __int8 *)&v47);
  v24 = v23;
  v25 = v22 + 4;
  v26 = v22[5];
  if (v26)
  {
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      v6 = v23;
      if (v23 >= v26)
        v6 = v23 % v26;
    }
    else
    {
      v6 = (v26 - 1) & v23;
    }
    v28 = *(void ***)(*v25 + 8 * v6);
    if (v28)
    {
      v29 = *v28;
      if (*v28)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            v33 = v29[1];
            if (v33 == v23)
            {
              if (v29[2] == (_QWORD)v47 && v29[3] == *((_QWORD *)&v47 + 1))
                goto LABEL_96;
            }
            else if ((v33 & (v26 - 1)) != v6)
            {
              goto LABEL_58;
            }
            v29 = (_QWORD *)*v29;
            if (!v29)
              goto LABEL_58;
          }
        }
        do
        {
          v31 = v29[1];
          if (v31 == v23)
          {
            if (v29[2] == (_QWORD)v47 && v29[3] == *((_QWORD *)&v47 + 1))
              goto LABEL_96;
          }
          else
          {
            if (v31 >= v26)
              v31 %= v26;
            if (v31 != v6)
              break;
          }
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
    }
  }
LABEL_58:
  v29 = operator new(0x28uLL);
  v29[1] = v24;
  *((_OWORD *)v29 + 1) = v47;
  *((_DWORD *)v29 + 8) = 0;
  v34 = (float)(unint64_t)(v22[7] + 1);
  *v29 = 0;
  v35 = *((float *)v22 + 16);
  if ((((float)(v35 * (float)v26) >= v34) & ~(v26 == 0)) == 0)
  {
    v36 = 1;
    if (v26 >= 3)
      v36 = (v26 & (v26 - 1)) != 0;
    v37 = v36 | (2 * v26);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v26 = v22[5];
    }
    if (prime > v26)
      goto LABEL_69;
    if (prime < v26)
    {
      v40 = vcvtps_u32_f32((float)(unint64_t)v22[7] / *((float *)v22 + 16));
      if (v26 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v26)
LABEL_69:
        sub_2231B0668((uint64_t)(v22 + 4), prime);
    }
    v26 = v22[5];
    v43 = v26 - 1;
    if ((v26 & (v26 - 1)) == 0)
    {
      v6 = v43 & v24;
      v44 = *v25;
      v45 = *(_QWORD **)(*v25 + 8 * (v43 & v24));
      if (!v45)
        goto LABEL_88;
LABEL_86:
      *v29 = *v45;
      goto LABEL_94;
    }
    if (v24 >= v26)
    {
      v6 = v24 % v26;
      v44 = *v25;
      v45 = *(_QWORD **)(*v25 + 8 * (v24 % v26));
      if (v45)
        goto LABEL_86;
      goto LABEL_88;
    }
    v6 = v24;
  }
  v44 = *v25;
  v45 = *(_QWORD **)(*v25 + 8 * v6);
  if (v45)
    goto LABEL_86;
LABEL_88:
  *v29 = v22[6];
  v22[6] = v29;
  *(_QWORD *)(v44 + 8 * v6) = v22 + 6;
  if (!*v29)
    goto LABEL_95;
  v46 = *(_QWORD *)(*v29 + 8);
  if ((v26 & (v26 - 1)) != 0)
  {
    if (v46 >= v26)
      v46 %= v26;
  }
  else
  {
    v46 &= v26 - 1;
  }
  v45 = (_QWORD *)(*v25 + 8 * v46);
LABEL_94:
  *v45 = v29;
LABEL_95:
  ++v22[7];
LABEL_96:
  *((_DWORD *)v29 + 8) = *a6;
}

void sub_2238ECD34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_2238ECD4C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, float a6)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  float v12;
  _QWORD *v13;
  uint64_t v14;
  float *v15;
  _QWORD *v16;
  uint64_t *v17;
  double v18;
  _QWORD *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float *v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v52[0] = a2;
  v52[1] = a3;
  *(_QWORD *)&v53 = a2;
  *((_QWORD *)&v53 + 1) = a3;
  v9 = (_QWORD *)(a1 + 144);
  if (!sub_223340F28((_QWORD *)(a1 + 144), (uint64_t)&v53)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/SceneTypeGraph.h", 165, (uint64_t)"optimized_nodes_.count(id)", 26, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v10 = sub_22342DA5C(v9, (uint64_t)&v53);
  if (!v10)
    sub_223198218("unordered_map::at: key not found");
  v49 = v10[9];
  v50 = *((_DWORD *)v10 + 10) * a4 + *((_DWORD *)v10 + 11) * a5;
  v11 = v49 + 180 * v50;
  v12 = *(float *)(v11 + 136);
  v13 = sub_22342DA5C((_QWORD *)(a1 + 104), (uint64_t)v52);
  if (!v13)
    sub_223198218("unordered_map::at: key not found");
  v47 = v13[9];
  v48 = *((_DWORD *)v13 + 10) * a4 + *((_DWORD *)v13 + 11) * a5;
  v14 = v47 + 180 * v48;
  *(_DWORD *)(v14 + 136) = 0;
  v15 = (float *)(v14 + 136);
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_DWORD *)(v14 + 128) = 0;
  v16 = sub_22342DA5C((_QWORD *)(a1 + 40), (uint64_t)v52);
  if (!v16)
    sub_223198218("unordered_map::at: key not found");
  v17 = (uint64_t *)v16[6];
  if (v17)
  {
    v18 = a6;
    do
    {
      v53 = *((_OWORD *)v17 + 1);
      if (!sub_223340F28(v9, (uint64_t)&v53)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/SceneTypeGraph.h", 165, (uint64_t)"optimized_nodes_.count(id)", 26, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v19 = sub_22342DA5C(v9, (uint64_t)&v53);
      if (!v19)
        sub_223198218("unordered_map::at: key not found");
      v20 = (float *)(v19[9] + 180 * (*((_DWORD *)v19 + 10) * a4 + *((_DWORD *)v19 + 11) * a5));
      v21 = v20[34];
      v22 = (1.0 - *((float *)v17 + 8)) / v18;
      v23 = *(float *)(v14 + 4);
      *(float *)v14 = *(float *)v14 + (float)(*v20 * v22);
      *(float *)(v14 + 4) = v23 + (float)(v20[1] * v22);
      v24 = *(float *)(v14 + 12);
      *(float *)(v14 + 8) = *(float *)(v14 + 8) + (float)(v20[2] * v22);
      *(float *)(v14 + 12) = v24 + (float)(v20[3] * v22);
      v25 = *(float *)(v14 + 20);
      *(float *)(v14 + 16) = *(float *)(v14 + 16) + (float)(v20[4] * v22);
      *(float *)(v14 + 20) = v25 + (float)(v20[5] * v22);
      v26 = *(float *)(v14 + 28);
      *(float *)(v14 + 24) = *(float *)(v14 + 24) + (float)(v20[6] * v22);
      *(float *)(v14 + 28) = v26 + (float)(v20[7] * v22);
      v27 = *(float *)(v14 + 36);
      *(float *)(v14 + 32) = *(float *)(v14 + 32) + (float)(v20[8] * v22);
      *(float *)(v14 + 36) = v27 + (float)(v20[9] * v22);
      v28 = *(float *)(v14 + 44);
      *(float *)(v14 + 40) = *(float *)(v14 + 40) + (float)(v20[10] * v22);
      *(float *)(v14 + 44) = v28 + (float)(v20[11] * v22);
      v29 = *(float *)(v14 + 52);
      *(float *)(v14 + 48) = *(float *)(v14 + 48) + (float)(v20[12] * v22);
      *(float *)(v14 + 52) = v29 + (float)(v20[13] * v22);
      v30 = *(float *)(v14 + 60);
      *(float *)(v14 + 56) = *(float *)(v14 + 56) + (float)(v20[14] * v22);
      *(float *)(v14 + 60) = v30 + (float)(v20[15] * v22);
      v31 = *(float *)(v14 + 68);
      *(float *)(v14 + 64) = *(float *)(v14 + 64) + (float)(v20[16] * v22);
      *(float *)(v14 + 68) = v31 + (float)(v20[17] * v22);
      v32 = *(float *)(v14 + 76);
      *(float *)(v14 + 72) = *(float *)(v14 + 72) + (float)(v20[18] * v22);
      *(float *)(v14 + 76) = v32 + (float)(v20[19] * v22);
      v33 = *(float *)(v14 + 84);
      *(float *)(v14 + 80) = *(float *)(v14 + 80) + (float)(v20[20] * v22);
      *(float *)(v14 + 84) = v33 + (float)(v20[21] * v22);
      v34 = *(float *)(v14 + 92);
      *(float *)(v14 + 88) = *(float *)(v14 + 88) + (float)(v20[22] * v22);
      *(float *)(v14 + 92) = v34 + (float)(v20[23] * v22);
      v35 = *(float *)(v14 + 100);
      *(float *)(v14 + 96) = *(float *)(v14 + 96) + (float)(v20[24] * v22);
      *(float *)(v14 + 100) = v35 + (float)(v20[25] * v22);
      v36 = *(float *)(v14 + 108);
      *(float *)(v14 + 104) = *(float *)(v14 + 104) + (float)(v20[26] * v22);
      *(float *)(v14 + 108) = v36 + (float)(v20[27] * v22);
      v37 = *(float *)(v14 + 116);
      *(float *)(v14 + 112) = *(float *)(v14 + 112) + (float)(v20[28] * v22);
      *(float *)(v14 + 116) = v37 + (float)(v20[29] * v22);
      v38 = *(float *)(v14 + 124);
      *(float *)(v14 + 120) = *(float *)(v14 + 120) + (float)(v20[30] * v22);
      *(float *)(v14 + 124) = v38 + (float)(v20[31] * v22);
      *(float *)(v14 + 128) = *(float *)(v14 + 128) + (float)(v20[32] * v22);
      *v15 = (float)(v21 * v22) + *v15;
      v17 = (uint64_t *)*v17;
    }
    while (v17);
  }
  v39 = 0;
  v40 = 0.0;
  do
  {
    v41 = *(float *)(v14 + v39);
    v42 = (float)(v12 * *(float *)(v11 + v39)) + (float)((float)(1.0 - v12) * v41);
    v43 = vabds_f32(v42, v41);
    if (v43 >= v40)
      v40 = v43;
    *(float *)(v14 + v39) = v42;
    v39 += 4;
  }
  while (v39 != 132);
  *v15 = (float)(v12 * (float)(1.0 - *(float *)(a1 + 92))) + (float)(*(float *)(a1 + 92) * *v15);
  v44 = sub_2238ED2D4((float *)v14);
  if (*(unsigned __int8 *)(v49 + 180 * v50 + 132) == (((_DWORD)v44 - v14) >> 2))
  {
    v45 = 0;
  }
  else
  {
    *(_BYTE *)(v47 + 180 * v48 + 132) = ((unint64_t)v44 - v14) >> 2;
    v45 = 1;
  }
  return v45 | ((unint64_t)LODWORD(v40) << 32);
}

float *sub_2238ED2D4(float *a1)
{
  float v1;
  float *v2;
  float *result;
  float v4;

  v1 = *a1;
  v2 = a1 + 1;
  if (*a1 >= a1[1])
    v2 = a1;
  else
    v1 = a1[1];
  if (v1 < a1[2])
  {
    v1 = a1[2];
    v2 = a1 + 2;
  }
  if (v1 < a1[3])
  {
    v1 = a1[3];
    v2 = a1 + 3;
  }
  if (v1 < a1[4])
  {
    v1 = a1[4];
    v2 = a1 + 4;
  }
  if (v1 < a1[5])
  {
    v1 = a1[5];
    v2 = a1 + 5;
  }
  if (v1 < a1[6])
  {
    v1 = a1[6];
    v2 = a1 + 6;
  }
  if (v1 < a1[7])
  {
    v1 = a1[7];
    v2 = a1 + 7;
  }
  if (v1 < a1[8])
  {
    v1 = a1[8];
    v2 = a1 + 8;
  }
  if (v1 < a1[9])
  {
    v1 = a1[9];
    v2 = a1 + 9;
  }
  if (v1 < a1[10])
  {
    v1 = a1[10];
    v2 = a1 + 10;
  }
  if (v1 < a1[11])
  {
    v1 = a1[11];
    v2 = a1 + 11;
  }
  if (v1 < a1[12])
  {
    v1 = a1[12];
    v2 = a1 + 12;
  }
  if (v1 < a1[13])
  {
    v1 = a1[13];
    v2 = a1 + 13;
  }
  if (v1 < a1[14])
  {
    v1 = a1[14];
    v2 = a1 + 14;
  }
  if (v1 < a1[15])
  {
    v1 = a1[15];
    v2 = a1 + 15;
  }
  if (v1 < a1[16])
  {
    v1 = a1[16];
    v2 = a1 + 16;
  }
  if (v1 < a1[17])
  {
    v1 = a1[17];
    v2 = a1 + 17;
  }
  if (v1 < a1[18])
  {
    v1 = a1[18];
    v2 = a1 + 18;
  }
  if (v1 < a1[19])
  {
    v1 = a1[19];
    v2 = a1 + 19;
  }
  if (v1 < a1[20])
  {
    v1 = a1[20];
    v2 = a1 + 20;
  }
  if (v1 < a1[21])
  {
    v1 = a1[21];
    v2 = a1 + 21;
  }
  if (v1 < a1[22])
  {
    v1 = a1[22];
    v2 = a1 + 22;
  }
  if (v1 < a1[23])
  {
    v1 = a1[23];
    v2 = a1 + 23;
  }
  if (v1 < a1[24])
  {
    v1 = a1[24];
    v2 = a1 + 24;
  }
  if (v1 < a1[25])
  {
    v1 = a1[25];
    v2 = a1 + 25;
  }
  if (v1 < a1[26])
  {
    v1 = a1[26];
    v2 = a1 + 26;
  }
  if (v1 < a1[27])
  {
    v1 = a1[27];
    v2 = a1 + 27;
  }
  if (v1 < a1[28])
  {
    v1 = a1[28];
    v2 = a1 + 28;
  }
  if (v1 < a1[29])
  {
    v1 = a1[29];
    v2 = a1 + 29;
  }
  if (v1 < a1[30])
  {
    v1 = a1[30];
    v2 = a1 + 30;
  }
  if (v1 < a1[31])
  {
    v1 = a1[31];
    v2 = a1 + 31;
  }
  v4 = a1[32];
  result = a1 + 32;
  if (v1 >= v4)
    return v2;
  return result;
}

uint64_t sub_2238ED554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  unint64_t v17;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  BOOL v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  _DWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  uint64_t *i;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v68;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  int v84;
  int v85;
  uint64_t *v87;
  uint64_t v88;
  float v89;
  float v90;
  unint64_t v91;
  uint8x8_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v97;
  uint64_t v99;
  unint64_t v100;
  int8x8_t v101;
  uint8x8_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v109;
  float *v111;
  float v112;
  unint64_t v113;
  int8x8_t v114;
  uint8x8_t v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t *k;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  uint8x8_t v138;
  unint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v143;
  uint64_t v145;
  unint64_t v146;
  int8x8_t v147;
  uint8x8_t v148;
  unint64_t v149;
  uint64_t **v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v155;
  unint64_t v157;
  int8x8_t v158;
  uint8x8_t v159;
  unint64_t v160;
  uint64_t **v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v166;
  _QWORD *v168;
  _QWORD *v169;
  void *v170;
  void **v171;
  void **v172;
  unint64_t v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  _QWORD *v177;
  void *v178;
  uint64_t v180;
  _QWORD *v181;
  int v182;
  void *v183[2];
  void *v184[2];
  int v185;
  void *v186;
  __int128 *v187;
  __int128 *v188;
  void *v189[2];
  void *__p[2];
  int j;
  void *v192[2];
  _OWORD v193[2];
  void *v194[2];
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v202 = a2;
  *((_QWORD *)&v202 + 1) = a3;
  v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 144);
    v181 = (_QWORD *)(a1 + 160);
    while (1)
    {
      v6 = (unint64_t)(v4 + 2);
      if (!sub_223340F28((_QWORD *)(a1 + 144), (uint64_t)(v4 + 2)))
        break;
LABEL_4:
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_83;
    }
    *(_OWORD *)v192 = *(_OWORD *)v6;
    v7 = *((_OWORD *)v4 + 2);
    *(_OWORD *)((char *)v193 + 12) = *(_OWORD *)((char *)v4 + 44);
    v193[0] = v7;
    sub_223207688((uint64_t)v194, (uint64_t)(v4 + 8));
    v8 = *(_OWORD *)(v4 + 15);
    v197 = *(_OWORD *)(v4 + 13);
    v198 = v8;
    v9 = *(_OWORD *)(v4 + 19);
    v199 = *(_OWORD *)(v4 + 17);
    v200 = v9;
    v201 = v4[21];
    v10 = sub_22456636C((unsigned __int8 *)v192);
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 152);
    if (v12)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v6 = v10;
        if (v10 >= v12)
          v6 = v10 % v12;
      }
      else
      {
        v6 = (v12 - 1) & v10;
      }
      v14 = *(uint64_t ****)(*v5 + 8 * v6);
      if (v14)
      {
        v15 = *v14;
        if (v15)
        {
          if (v13.u32[0] < 2uLL)
          {
            while (1)
            {
              v19 = v15[1];
              if (v19 == (uint64_t *)v10)
              {
                if (v15[2] == v192[0] && v15[3] == v192[1])
                  goto LABEL_72;
              }
              else if (((unint64_t)v19 & (v12 - 1)) != v6)
              {
                goto LABEL_32;
              }
              v15 = (uint64_t **)*v15;
              if (!v15)
                goto LABEL_32;
            }
          }
          do
          {
            v17 = (unint64_t)v15[1];
            if (v17 == v10)
            {
              if (v15[2] == v192[0] && v15[3] == v192[1])
                goto LABEL_72;
            }
            else
            {
              if (v17 >= v12)
                v17 %= v12;
              if (v17 != v6)
                break;
            }
            v15 = (uint64_t **)*v15;
          }
          while (v15);
        }
      }
    }
LABEL_32:
    v20 = (char *)operator new(0xB0uLL);
    v21 = v201;
    *((_QWORD *)v20 + 10) = v195;
    v183[0] = v20;
    v183[1] = v181;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = v11;
    v22 = v193[0];
    v23 = *(_OWORD *)v194;
    *((_OWORD *)v20 + 1) = *(_OWORD *)v192;
    *((_OWORD *)v20 + 2) = v22;
    *(_OWORD *)(v20 + 44) = *(_OWORD *)((char *)v193 + 12);
    *((_OWORD *)v20 + 4) = v23;
    v194[0] = 0;
    v194[1] = 0;
    *(_OWORD *)(v20 + 88) = v196;
    v24 = v198;
    *(_OWORD *)(v20 + 104) = v197;
    *(_OWORD *)(v20 + 120) = v24;
    v25 = v200;
    *(_OWORD *)(v20 + 136) = v199;
    *(_OWORD *)(v20 + 152) = v25;
    *((_QWORD *)v20 + 21) = v21;
    LOBYTE(v184[0]) = 1;
    v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 168) + 1);
    v27 = *(float *)(a1 + 176);
    if (!v12 || (float)(v27 * (float)v12) < v26)
    {
      v28 = v12 < 3 || (v12 & (v12 - 1)) != 0;
      v29 = v28 | (2 * v12);
      v30 = vcvtps_u32_f32(v26 / v27);
      if (v29 <= v30)
        prime = v30;
      else
        prime = v29;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v12 = *(_QWORD *)(a1 + 152);
      }
      if (prime > v12)
        goto LABEL_45;
      if (prime < v12)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 168) / *(float *)(a1 + 176));
        if (v12 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (prime <= v32)
          prime = v32;
        if (prime < v12)
LABEL_45:
          sub_2231B0668(a1 + 144, prime);
      }
      v12 = *(_QWORD *)(a1 + 152);
      v35 = v12 - 1;
      if ((v12 & (v12 - 1)) == 0)
      {
        v6 = v35 & v11;
        v36 = *v5;
        v37 = *(_QWORD **)(*v5 + 8 * (v35 & v11));
        if (!v37)
          goto LABEL_64;
LABEL_62:
        *(_QWORD *)v20 = *v37;
        goto LABEL_70;
      }
      if (v11 >= v12)
      {
        v6 = v11 % v12;
        v36 = *v5;
        v37 = *(_QWORD **)(*v5 + 8 * (v11 % v12));
        if (v37)
          goto LABEL_62;
        goto LABEL_64;
      }
      v6 = v11;
    }
    v36 = *v5;
    v37 = *(_QWORD **)(*v5 + 8 * v6);
    if (v37)
      goto LABEL_62;
LABEL_64:
    *(_QWORD *)v20 = *v181;
    *v181 = v20;
    *(_QWORD *)(v36 + 8 * v6) = v181;
    if (!*(_QWORD *)v20)
      goto LABEL_71;
    v38 = *(_QWORD *)(*(_QWORD *)v20 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12)
        v38 %= v12;
    }
    else
    {
      v38 &= v12 - 1;
    }
    v37 = (_QWORD *)(*v5 + 8 * v38);
LABEL_70:
    *v37 = v20;
LABEL_71:
    ++*(_QWORD *)(a1 + 168);
LABEL_72:
    v39 = v194[1];
    if (v194[1])
    {
      v40 = !DWORD1(v196) || (_DWORD)v196 == 0;
      v41 = v40 ? 0 : DWORD1(v196);
      if (v41 * (((381774871 * (unint64_t)(*((_QWORD *)&v196 + 1) >> 34)) >> 32) >> 2) != -1)
        goto LABEL_3;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v39 = v194[1];
      if (v194[1])
LABEL_3:
        free(v39);
    }
    goto LABEL_4;
  }
LABEL_83:
  if (!*(_BYTE *)(a1 + 80))
    return a1 + 184;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  *(_OWORD *)v183 = 0u;
  *(_OWORD *)v184 = 0u;
  v185 = 1065353216;
  memset(v193, 0, sizeof(v193));
  *(_OWORD *)v192 = 0u;
  *(_OWORD *)v189 = v202;
  sub_2238F1708(v192);
  v42 = *((_QWORD *)&v193[1] + 1);
  v43 = *((_QWORD *)v192[1] + (*(_QWORD *)&v193[1] + *((_QWORD *)&v193[1] + 1)) / 0xAAuLL)
      + 24 * ((*(_QWORD *)&v193[1] + *((_QWORD *)&v193[1] + 1)) % 0xAAuLL);
  LODWORD(v44) = v189[0];
  *(_OWORD *)v43 = *(_OWORD *)v189;
  *(_QWORD *)(v43 + 16) = 0x3F80000000000000;
  v45 = __CFADD__(v42, 1);
  v46 = v42 + 1;
  *((_QWORD *)&v193[1] + 1) = v46;
  if (v45)
  {
    v47 = 0;
    v48 = 0;
  }
  else
  {
    while (1)
    {
      v49 = (char *)v192[1];
      v50 = *(_QWORD *)&v193[1];
      v51 = *((_QWORD *)v192[1] + *(_QWORD *)&v193[1] / 0xAAuLL) + 24 * (*(_QWORD *)&v193[1] % 0xAAuLL);
      *(_OWORD *)v189 = *(_OWORD *)v51;
      LODWORD(__p[0]) = *(_DWORD *)(v51 + 16);
      v52 = *(_DWORD *)(v51 + 20);
      HIDWORD(__p[0]) = v52;
      ++*(_QWORD *)&v193[1];
      *((_QWORD *)&v193[1] + 1) = v46 - 1;
      if (*(_QWORD *)&v193[1] >= 0x154uLL)
      {
        operator delete(*(void **)v192[1]);
        v192[1] = v49 + 8;
        *(_QWORD *)&v193[1] = v50 - 169;
        v52 = HIDWORD(__p[0]);
      }
      v53 = v187;
      if (v187 >= v188)
      {
        v54 = v186;
        v55 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v187 - (_BYTE *)v186) >> 2);
        v56 = v55 + 1;
        if (v55 + 1 > 0xCCCCCCCCCCCCCCCLL)
          sub_22316E078();
        if (0x999999999999999ALL * (((char *)v188 - (_BYTE *)v186) >> 2) > v56)
          v56 = 0x999999999999999ALL * (((char *)v188 - (_BYTE *)v186) >> 2);
        v57 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v188 - (_BYTE *)v186) >> 2) >= 0x666666666666666
            ? 0xCCCCCCCCCCCCCCCLL
            : v56;
        if (v57)
        {
          if (v57 > 0xCCCCCCCCCCCCCCCLL)
            sub_223174E94();
          v58 = (char *)operator new(20 * v57);
        }
        else
        {
          v58 = 0;
        }
        LODWORD(v44) = v189[0];
        v59 = &v58[20 * v55];
        *(_OWORD *)v59 = *(_OWORD *)v189;
        *((_DWORD *)v59 + 4) = v52;
        v48 = (__int128 *)v59;
        if (v53 != v54)
        {
          do
          {
            v44 = *(_OWORD *)(v53 - 5);
            *((_DWORD *)v48 - 1) = *(v53 - 1);
            *(__int128 *)((char *)v48 - 20) = v44;
            v48 = (__int128 *)((char *)v48 - 20);
            v53 -= 5;
          }
          while (v53 != v54);
          v53 = v186;
        }
        v47 = (__int128 *)(v59 + 20);
        v186 = v48;
        v188 = (__int128 *)&v58[20 * v57];
        if (v53)
          operator delete(v53);
      }
      else
      {
        LODWORD(v44) = v189[0];
        *v187 = *(_OWORD *)v189;
        v53[4] = v52;
        v47 = (__int128 *)(v53 + 5);
        v48 = (__int128 *)v186;
      }
      v187 = v47;
      if (0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (char *)v48) >> 2) > *(unsigned __int16 *)(a1 + 98))
        break;
      if (SLODWORD(__p[0]) < *(unsigned __int16 *)(a1 + 102))
      {
        v60 = sub_22342DA5C((_QWORD *)(a1 + 40), (uint64_t)v189);
        if (!v60)
          sub_223198218("unordered_map::at: key not found");
        for (i = (uint64_t *)v60[6]; i; i = (uint64_t *)*i)
        {
          v62 = i + 2;
          v63 = sub_22456636C((unsigned __int8 *)i + 16);
          if (v183[1])
          {
            *(int8x8_t *)&v44 = vcnt_s8((int8x8_t)v183[1]);
            LOWORD(v44) = vaddlv_u8(*(uint8x8_t *)&v44);
            if (v44 > 1uLL)
            {
              v64 = v63;
              if ((void *)v63 >= v183[1])
                v64 = v63 % (unint64_t)v183[1];
            }
            else
            {
              v64 = ((unint64_t)v183[1] - 1) & v63;
            }
            v65 = (_QWORD *)*((_QWORD *)v183[0] + v64);
            if (v65)
            {
              v66 = (_QWORD *)*v65;
              if (v66)
              {
                if (v44 < 2uLL)
                {
                  while (1)
                  {
                    v70 = v66[1];
                    if (v70 == v63)
                    {
                      if (v66[2] == *v62 && v66[3] == i[3])
                        goto LABEL_144;
                    }
                    else if ((v70 & ((uint64_t)v183[1] - 1)) != v64)
                    {
                      goto LABEL_138;
                    }
                    v66 = (_QWORD *)*v66;
                    if (!v66)
                      goto LABEL_138;
                  }
                }
                do
                {
                  v68 = v66[1];
                  if (v68 == v63)
                  {
                    if (v66[2] == *v62 && v66[3] == i[3])
                      goto LABEL_144;
                  }
                  else
                  {
                    if ((void *)v68 >= v183[1])
                      v68 %= (unint64_t)v183[1];
                    if (v68 != v64)
                      break;
                  }
                  v66 = (_QWORD *)*v66;
                }
                while (v66);
              }
            }
          }
LABEL_138:
          sub_223340BF8((uint64_t)v183, (uint64_t)(i + 2), (_OWORD *)i + 1);
          v71 = v192[1];
          v72 = (int)__p[0];
          v73 = *((float *)__p + 1);
          v74 = *((float *)i + 8);
          v204 = *(_OWORD *)v62;
          if (*(void **)&v193[0] == v192[1])
            v75 = 0;
          else
            v75 = 170 * ((uint64_t)(*(_QWORD *)&v193[0] - (unint64_t)v192[1]) >> 3) - 1;
          v76 = *((_QWORD *)&v193[1] + 1);
          v77 = *((_QWORD *)&v193[1] + 1) + *(_QWORD *)&v193[1];
          if (v75 == *((_QWORD *)&v193[1] + 1) + *(_QWORD *)&v193[1])
          {
            sub_2238F1708(v192);
            v71 = v192[1];
            v76 = *((_QWORD *)&v193[1] + 1);
            v77 = *((_QWORD *)&v193[1] + 1) + *(_QWORD *)&v193[1];
          }
          *(float *)&v44 = v73 * v74;
          v78 = v71[v77 / 0xAA] + 24 * (v77 % 0xAA);
          *(_OWORD *)v78 = v204;
          *(_DWORD *)(v78 + 16) = v72 + 1;
          *(float *)(v78 + 20) = v73 * v74;
          *((_QWORD *)&v193[1] + 1) = v76 + 1;
LABEL_144:
          ;
        }
      }
      v46 = *((_QWORD *)&v193[1] + 1);
      if (!*((_QWORD *)&v193[1] + 1))
      {
        v48 = (__int128 *)v186;
        v47 = v187;
        break;
      }
    }
  }
  v79 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (char *)v48) >> 2));
  if (v47 == v48)
    v80 = 0;
  else
    v80 = v79;
  sub_2238F001C(v48, v47, v80, 1, *(float *)&v44);
  v81 = v186;
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v187 - (_BYTE *)v186) >> 2) >= *(unsigned __int16 *)(a1 + 100))
    v82 = *(unsigned __int16 *)(a1 + 100);
  else
    v82 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v187 - (_BYTE *)v186) >> 2);
  *(_OWORD *)v189 = 0u;
  *(_OWORD *)__p = 0u;
  for (j = 1065353216; v82; --v82)
  {
    sub_223340BF8((uint64_t)v189, (uint64_t)v81, v81);
    v81 = (_OWORD *)((char *)v81 + 20);
  }
  v180 = a1 + 184;
  sub_223340BF8(a1 + 184, (uint64_t)&v202, &v202);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 176);
  sub_2238F151C((_QWORD *)(a1 + 104), *(uint64_t **)(a1 + 160));
  v83 = (_QWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 136);
  sub_2238F151C((_QWORD *)(a1 + 144), *(uint64_t **)(a1 + 120));
  if (*(_WORD *)(a1 + 82))
  {
    v84 = 0;
    v85 = 1;
    do
    {
      v87 = *(uint64_t **)(a1 + 16);
      if (v87)
      {
        v182 = v84;
        v88 = 0;
        v89 = 0.0;
        do
        {
          v203 = *((_OWORD *)v87 + 1);
          v91 = sub_22456636C((unsigned __int8 *)&v203);
          if (v189[1])
          {
            v92 = (uint8x8_t)vcnt_s8((int8x8_t)v189[1]);
            v92.i16[0] = vaddlv_u8(v92);
            if (v92.u32[0] > 1uLL)
            {
              v93 = v91;
              if ((void *)v91 >= v189[1])
                v93 = v91 % (unint64_t)v189[1];
            }
            else
            {
              v93 = ((unint64_t)v189[1] - 1) & v91;
            }
            v94 = (_QWORD *)*((_QWORD *)v189[0] + v93);
            if (v94)
            {
              v95 = (_QWORD *)*v94;
              if (v95)
              {
                if (v92.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v99 = v95[1];
                    if (v91 == v99)
                    {
                      if (v95[2] == (_QWORD)v203 && v95[3] == *((_QWORD *)&v203 + 1))
                        goto LABEL_193;
                    }
                    else if ((v99 & ((uint64_t)v189[1] - 1)) != v93)
                    {
                      goto LABEL_165;
                    }
                    v95 = (_QWORD *)*v95;
                    if (!v95)
                      goto LABEL_165;
                  }
                }
                do
                {
                  v97 = v95[1];
                  if (v91 == v97)
                  {
                    if (v95[2] == (_QWORD)v203 && v95[3] == *((_QWORD *)&v203 + 1))
                    {
LABEL_193:
                      v204 = v203;
                      v100 = sub_22456636C((unsigned __int8 *)&v204);
                      v101 = *(int8x8_t *)(a1 + 48);
                      if (!*(_QWORD *)&v101)
                        goto LABEL_376;
                      v102 = (uint8x8_t)vcnt_s8(v101);
                      v102.i16[0] = vaddlv_u8(v102);
                      if (v102.u32[0] > 1uLL)
                      {
                        v103 = v100;
                        if (v100 >= *(_QWORD *)&v101)
                          v103 = v100 % *(_QWORD *)&v101;
                      }
                      else
                      {
                        v103 = (*(_QWORD *)&v101 - 1) & v100;
                      }
                      v104 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v103);
                      if (!v104)
                        goto LABEL_376;
                      v105 = (_QWORD *)*v104;
                      if (!v105)
                        goto LABEL_376;
                      if (v102.u32[0] < 2uLL)
                      {
                        v106 = *(_QWORD *)&v101 - 1;
                        while (1)
                        {
                          v109 = v105[1];
                          if (v109 == v100)
                          {
                            if (v105[2] == (_QWORD)v204 && v105[3] == *((_QWORD *)&v204 + 1))
                              goto LABEL_221;
                          }
                          else if ((v109 & v106) != v103)
                          {
                            goto LABEL_376;
                          }
                          v105 = (_QWORD *)*v105;
                          if (!v105)
                            goto LABEL_376;
                        }
                      }
                      while (1)
                      {
                        v107 = v105[1];
                        if (v107 == v100)
                        {
                          if (v105[2] == (_QWORD)v204 && v105[3] == *((_QWORD *)&v204 + 1))
                          {
LABEL_221:
                            v111 = (float *)v105[6];
                            if (v111)
                            {
                              v112 = 0.000001;
                              do
                              {
                                v112 = 1.0 - v111[8] + v112;
                                v111 = *(float **)v111;
                              }
                              while (v111);
                            }
                            else
                            {
                              v112 = 0.000001;
                            }
                            v113 = sub_22456636C((unsigned __int8 *)&v204);
                            v114 = *(int8x8_t *)(a1 + 152);
                            if (v114)
                            {
                              v115 = (uint8x8_t)vcnt_s8(v114);
                              v115.i16[0] = vaddlv_u8(v115);
                              if (v115.u32[0] > 1uLL)
                              {
                                v116 = v113;
                                if (v113 >= *(_QWORD *)&v114)
                                  v116 = v113 % *(_QWORD *)&v114;
                              }
                              else
                              {
                                v116 = (*(_QWORD *)&v114 - 1) & v113;
                              }
                              v117 = *(_QWORD **)(*v83 + 8 * v116);
                              if (v117)
                              {
                                v118 = (_QWORD *)*v117;
                                if (v118)
                                {
                                  if (v115.u32[0] < 2uLL)
                                  {
                                    v119 = *(_QWORD *)&v114 - 1;
                                    while (1)
                                    {
                                      v122 = v118[1];
                                      if (v122 == v113)
                                      {
                                        if (v118[2] == (_QWORD)v204 && v118[3] == *((_QWORD *)&v204 + 1))
                                          goto LABEL_254;
                                      }
                                      else if ((v122 & v119) != v116)
                                      {
                                        goto LABEL_376;
                                      }
                                      v118 = (_QWORD *)*v118;
                                      if (!v118)
                                        goto LABEL_376;
                                    }
                                  }
                                  do
                                  {
                                    v120 = v118[1];
                                    if (v120 == v113)
                                    {
                                      if (v118[2] == (_QWORD)v204 && v118[3] == *((_QWORD *)&v204 + 1))
                                      {
LABEL_254:
                                        v124 = HIDWORD(v118[4]);
                                        v125 = v118[4];
                                        if (v124)
                                          v126 = v125 == 0;
                                        else
                                          v126 = 1;
                                        if (v126)
                                        {
                                          v90 = 0.0;
                                        }
                                        else
                                        {
                                          v127 = v88;
                                          v128 = 0;
                                          v129 = 0;
                                          v90 = 0.0;
                                          do
                                          {
                                            v130 = 0;
                                            do
                                            {
                                              v131 = sub_2238ECD4C(a1, v204, *((uint64_t *)&v204 + 1), v128, v130, v112);
                                              v132 = v131 | v129;
                                              v129 = v132 != 0;
                                              if (v90 < *((float *)&v131 + 1))
                                                v90 = *((float *)&v131 + 1);
                                              ++v130;
                                            }
                                            while (v124 != v130);
                                            ++v128;
                                          }
                                          while (v128 != v125);
                                          v88 = v127;
                                          if (v132)
                                          {
                                            sub_223340BF8(v180, (uint64_t)&v203, &v203);
                                            v88 = (v127 + 1);
                                          }
                                        }
                                        if (v89 < v90)
                                          v89 = v90;
                                        goto LABEL_165;
                                      }
                                    }
                                    else
                                    {
                                      if (v120 >= *(_QWORD *)&v114)
                                        v120 %= *(_QWORD *)&v114;
                                      if (v120 != v116)
                                        break;
                                    }
                                    v118 = (_QWORD *)*v118;
                                  }
                                  while (v118);
                                }
                              }
                            }
LABEL_376:
                            sub_223198218("unordered_map::at: key not found");
                          }
                        }
                        else
                        {
                          if (v107 >= *(_QWORD *)&v101)
                            v107 %= *(_QWORD *)&v101;
                          if (v107 != v103)
                            goto LABEL_376;
                        }
                        v105 = (_QWORD *)*v105;
                        if (!v105)
                          goto LABEL_376;
                      }
                    }
                  }
                  else
                  {
                    if ((void *)v97 >= v189[1])
                      v97 %= (unint64_t)v189[1];
                    if (v97 != v93)
                      break;
                  }
                  v95 = (_QWORD *)*v95;
                }
                while (v95);
              }
            }
          }
LABEL_165:
          v87 = (uint64_t *)*v87;
        }
        while (v87);
        for (k = *(uint64_t **)(a1 + 16); k; k = (uint64_t *)*k)
        {
          v204 = *((_OWORD *)k + 1);
          v137 = sub_22456636C((unsigned __int8 *)&v204);
          if (v189[1])
          {
            v138 = (uint8x8_t)vcnt_s8((int8x8_t)v189[1]);
            v138.i16[0] = vaddlv_u8(v138);
            if (v138.u32[0] > 1uLL)
            {
              v139 = v137;
              if ((void *)v137 >= v189[1])
                v139 = v137 % (unint64_t)v189[1];
            }
            else
            {
              v139 = ((unint64_t)v189[1] - 1) & v137;
            }
            v140 = (_QWORD *)*((_QWORD *)v189[0] + v139);
            if (v140)
            {
              v141 = (_QWORD *)*v140;
              if (v141)
              {
                if (v138.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v145 = v141[1];
                    if (v137 == v145)
                    {
                      if (v141[2] == (_QWORD)v204 && v141[3] == *((_QWORD *)&v204 + 1))
                        goto LABEL_299;
                    }
                    else if ((v145 & ((uint64_t)v189[1] - 1)) != v139)
                    {
                      goto LABEL_271;
                    }
                    v141 = (_QWORD *)*v141;
                    if (!v141)
                      goto LABEL_271;
                  }
                }
                do
                {
                  v143 = v141[1];
                  if (v137 == v143)
                  {
                    if (v141[2] == (_QWORD)v204 && v141[3] == *((_QWORD *)&v204 + 1))
                    {
LABEL_299:
                      v146 = sub_22456636C((unsigned __int8 *)&v204);
                      v147 = *(int8x8_t *)(a1 + 112);
                      if (!*(_QWORD *)&v147)
                        goto LABEL_377;
                      v148 = (uint8x8_t)vcnt_s8(v147);
                      v148.i16[0] = vaddlv_u8(v148);
                      if (v148.u32[0] > 1uLL)
                      {
                        v149 = v146;
                        if (v146 >= *(_QWORD *)&v147)
                          v149 = v146 % *(_QWORD *)&v147;
                      }
                      else
                      {
                        v149 = (*(_QWORD *)&v147 - 1) & v146;
                      }
                      v150 = *(uint64_t ***)(*(_QWORD *)(a1 + 104) + 8 * v149);
                      if (!v150)
                        goto LABEL_377;
                      v151 = *v150;
                      if (!*v150)
                        goto LABEL_377;
                      if (v148.u32[0] < 2uLL)
                      {
                        v152 = *(_QWORD *)&v147 - 1;
                        while (1)
                        {
                          v155 = v151[1];
                          if (v155 == v146)
                          {
                            if (v151[2] == (_QWORD)v204 && v151[3] == *((_QWORD *)&v204 + 1))
                              goto LABEL_327;
                          }
                          else if ((v155 & v152) != v149)
                          {
                            goto LABEL_377;
                          }
                          v151 = (uint64_t *)*v151;
                          if (!v151)
                            goto LABEL_377;
                        }
                      }
                      while (1)
                      {
                        v153 = v151[1];
                        if (v153 == v146)
                        {
                          if (v151[2] == (_QWORD)v204 && v151[3] == *((_QWORD *)&v204 + 1))
                          {
LABEL_327:
                            v157 = sub_22456636C((unsigned __int8 *)&v204);
                            v158 = *(int8x8_t *)(a1 + 152);
                            if (v158)
                            {
                              v159 = (uint8x8_t)vcnt_s8(v158);
                              v159.i16[0] = vaddlv_u8(v159);
                              if (v159.u32[0] > 1uLL)
                              {
                                v160 = v157;
                                if (v157 >= *(_QWORD *)&v158)
                                  v160 = v157 % *(_QWORD *)&v158;
                              }
                              else
                              {
                                v160 = (*(_QWORD *)&v158 - 1) & v157;
                              }
                              v161 = *(uint64_t ***)(*v83 + 8 * v160);
                              if (v161)
                              {
                                v162 = *v161;
                                if (*v161)
                                {
                                  if (v159.u32[0] < 2uLL)
                                  {
                                    v163 = *(_QWORD *)&v158 - 1;
                                    while (1)
                                    {
                                      v166 = v162[1];
                                      if (v166 == v157)
                                      {
                                        if (v162[2] == (_QWORD)v204 && v162[3] == *((_QWORD *)&v204 + 1))
                                          goto LABEL_270;
                                      }
                                      else if ((v166 & v163) != v160)
                                      {
                                        goto LABEL_377;
                                      }
                                      v162 = (uint64_t *)*v162;
                                      if (!v162)
                                        goto LABEL_377;
                                    }
                                  }
                                  do
                                  {
                                    v164 = v162[1];
                                    if (v164 == v157)
                                    {
                                      if (v162[2] == (_QWORD)v204 && v162[3] == *((_QWORD *)&v204 + 1))
                                      {
LABEL_270:
                                        sub_2231CFEAC((uint64_t)(v162 + 4), (uint64_t)(v151 + 4));
                                        v134 = *(_OWORD *)(v151 + 13);
                                        v135 = *(_OWORD *)(v151 + 15);
                                        v136 = *(_OWORD *)(v151 + 17);
                                        *(_OWORD *)(v162 + 19) = *(_OWORD *)(v151 + 19);
                                        *(_OWORD *)(v162 + 17) = v136;
                                        *(_OWORD *)(v162 + 15) = v135;
                                        *(_OWORD *)(v162 + 13) = v134;
                                        v162[21] = v151[21];
                                        goto LABEL_271;
                                      }
                                    }
                                    else
                                    {
                                      if (v164 >= *(_QWORD *)&v158)
                                        v164 %= *(_QWORD *)&v158;
                                      if (v164 != v160)
                                        break;
                                    }
                                    v162 = (uint64_t *)*v162;
                                  }
                                  while (v162);
                                }
                              }
                            }
LABEL_377:
                            sub_223198218("unordered_map::at: key not found");
                          }
                        }
                        else
                        {
                          if (v153 >= *(_QWORD *)&v147)
                            v153 %= *(_QWORD *)&v147;
                          if (v153 != v149)
                            goto LABEL_377;
                        }
                        v151 = (uint64_t *)*v151;
                        if (!v151)
                          goto LABEL_377;
                      }
                    }
                  }
                  else
                  {
                    if ((void *)v143 >= v189[1])
                      v143 %= (unint64_t)v189[1];
                    if (v143 != v139)
                      break;
                  }
                  v141 = (_QWORD *)*v141;
                }
                while (v141);
              }
            }
          }
LABEL_271:
          ;
        }
        if ((_WORD)v88)
        {
          v84 = 0;
          continue;
        }
        v84 = v182 + 1;
        if (*(unsigned __int16 *)(a1 + 84) >= (unsigned __int16)(v182 + 1))
          continue;
      }
      else
      {
        v89 = 0.0;
        if (*(unsigned __int16 *)(a1 + 84) >= (unsigned __int16)++v84)
          continue;
      }
      if (v89 < *(float *)(a1 + 88))
        break;
    }
    while (*(unsigned __int16 *)(a1 + 82) > (unsigned __int16)v85++);
  }
  v168 = __p[0];
  if (__p[0])
  {
    do
    {
      v169 = (_QWORD *)*v168;
      operator delete(v168);
      v168 = v169;
    }
    while (v169);
  }
  v170 = v189[0];
  v189[0] = 0;
  if (v170)
    operator delete(v170);
  v171 = (void **)v192[1];
  v172 = *(void ***)&v193[0];
  v173 = *(_QWORD *)&v193[0] - (unint64_t)v192[1];
  if (*(_QWORD *)&v193[0] - (unint64_t)v192[1] >= 0x11)
  {
    do
    {
      v174 = *v171++;
      operator delete(v174);
      v173 -= 8;
    }
    while (v173 > 0x10);
  }
  while (v171 != v172)
  {
    v175 = *v171++;
    operator delete(v175);
  }
  if (v192[0])
    operator delete(v192[0]);
  v176 = v184[0];
  if (v184[0])
  {
    do
    {
      v177 = (_QWORD *)*v176;
      operator delete(v176);
      v176 = v177;
    }
    while (v177);
  }
  v178 = v183[0];
  v183[0] = 0;
  if (v178)
    operator delete(v178);
  if (v186)
    operator delete(v186);
  return v180;
}

void sub_2238EE700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2238F1458((uint64_t)&a27);
  sub_22322E828((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a19 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_2238EE7DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  float *v25;
  float v26;
  unint64_t v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  int v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 80))
  {
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 32);
    sub_2238F151C((_QWORD *)(a1 + 144), *(uint64_t **)(a1 + 16));
    return (_QWORD *)(a1 + 184);
  }
  v2 = (_QWORD *)(a1 + 184);
  if (*(_QWORD *)(a1 + 208))
  {
    v3 = *(_QWORD **)(a1 + 200);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    *(_QWORD *)(a1 + 200) = 0;
    v5 = *(_QWORD *)(a1 + 192);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 208) = 0;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 32);
  sub_2238F151C((_QWORD *)(a1 + 104), *(uint64_t **)(a1 + 16));
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 136);
  sub_2238F151C((_QWORD *)(a1 + 144), *(uint64_t **)(a1 + 120));
  if (*(_WORD *)(a1 + 82))
  {
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = *(_QWORD **)(a1 + 16);
      v47 = v7;
      v48 = v8;
      v10 = 0;
      v11 = 0.0;
      if (!v9)
        goto LABEL_14;
      while (2)
      {
        v13 = v9[3];
        *(_QWORD *)&v49 = v9[2];
        *((_QWORD *)&v49 + 1) = v13;
        v50 = v49;
        v51 = v13;
        v14 = sub_22456636C((unsigned __int8 *)&v50);
        v15 = *(int8x8_t *)(a1 + 48);
        if (!*(_QWORD *)&v15)
          goto LABEL_97;
        v16 = (uint8x8_t)vcnt_s8(v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v17 = v14;
          if (v14 >= *(_QWORD *)&v15)
            v17 = v14 % *(_QWORD *)&v15;
        }
        else
        {
          v17 = (*(_QWORD *)&v15 - 1) & v14;
        }
        v18 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v17);
        if (!v18 || (v19 = (_QWORD *)*v18) == 0)
LABEL_97:
          sub_223198218("unordered_map::at: key not found");
        if (v16.u32[0] < 2uLL)
        {
          v20 = *(_QWORD *)&v15 - 1;
          while (1)
          {
            v23 = v19[1];
            if (v23 == v14)
            {
              if (v19[2] == v50 && v19[3] == v51)
                goto LABEL_50;
            }
            else if ((v23 & v20) != v17)
            {
              goto LABEL_97;
            }
            v19 = (_QWORD *)*v19;
            if (!v19)
              goto LABEL_97;
          }
        }
        while (1)
        {
          v21 = v19[1];
          if (v21 == v14)
            break;
          if (v21 >= *(_QWORD *)&v15)
            v21 %= *(_QWORD *)&v15;
          if (v21 != v17)
            goto LABEL_97;
LABEL_32:
          v19 = (_QWORD *)*v19;
          if (!v19)
            goto LABEL_97;
        }
        if (v19[2] != v50 || v19[3] != v51)
          goto LABEL_32;
LABEL_50:
        v25 = (float *)v19[6];
        if (v25)
        {
          v26 = 0.000001;
          do
          {
            v26 = 1.0 - v25[8] + v26;
            v25 = *(float **)v25;
          }
          while (v25);
        }
        else
        {
          v26 = 0.000001;
        }
        v27 = sub_22456636C((unsigned __int8 *)&v50);
        v28 = *(int8x8_t *)(a1 + 152);
        if (!*(_QWORD *)&v28)
          goto LABEL_98;
        v29 = (uint8x8_t)vcnt_s8(v28);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          v30 = v27;
          if (v27 >= *(_QWORD *)&v28)
            v30 = v27 % *(_QWORD *)&v28;
        }
        else
        {
          v30 = (*(_QWORD *)&v28 - 1) & v27;
        }
        v31 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 8 * v30);
        if (!v31 || (v32 = (_QWORD *)*v31) == 0)
LABEL_98:
          sub_223198218("unordered_map::at: key not found");
        if (v29.u32[0] < 2uLL)
        {
          v33 = *(_QWORD *)&v28 - 1;
          while (1)
          {
            v36 = v32[1];
            if (v36 == v27)
            {
              if (v32[2] == v50 && v32[3] == v51)
                goto LABEL_83;
            }
            else if ((v36 & v33) != v30)
            {
              goto LABEL_98;
            }
            v32 = (_QWORD *)*v32;
            if (!v32)
              goto LABEL_98;
          }
        }
        while (2)
        {
          v34 = v32[1];
          if (v34 != v27)
          {
            if (v34 >= *(_QWORD *)&v28)
              v34 %= *(_QWORD *)&v28;
            if (v34 != v30)
              goto LABEL_98;
            goto LABEL_65;
          }
          if (v32[2] != v50 || v32[3] != v51)
          {
LABEL_65:
            v32 = (_QWORD *)*v32;
            if (!v32)
              goto LABEL_98;
            continue;
          }
          break;
        }
LABEL_83:
        v38 = HIDWORD(v32[4]);
        v39 = v32[4];
        if (v38)
          v40 = v39 == 0;
        else
          v40 = 1;
        if (v40)
        {
          v12 = 0.0;
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v12 = 0.0;
          do
          {
            v43 = 0;
            do
            {
              v44 = sub_2238ECD4C(a1, v50, v51, v41, v43, v26);
              v45 = v44 | v42;
              v42 = v45 != 0;
              if (v12 < *((float *)&v44 + 1))
                v12 = *((float *)&v44 + 1);
              ++v43;
            }
            while (v38 != v43);
            ++v41;
          }
          while (v41 != v39);
          if (v45)
          {
            sub_223340BF8(a1 + 184, (uint64_t)&v49, &v49);
            ++v10;
          }
        }
        if (v11 < v12)
          v11 = v12;
        v9 = (_QWORD *)*v9;
        if (v9)
          continue;
        break;
      }
LABEL_14:
      *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 136);
      sub_2238F151C((_QWORD *)(a1 + 144), *(uint64_t **)(a1 + 120));
      if (v10)
      {
        v7 = 0;
      }
      else
      {
        v7 = v47 + 1;
        if (*(unsigned __int16 *)(a1 + 84) < (unsigned __int16)(v47 + 1) && v11 < *(float *)(a1 + 88))
          return v2;
      }
      v8 = v48 + 1;
    }
    while (*(unsigned __int16 *)(a1 + 82) > (unsigned __int16)v48);
  }
  return v2;
}

uint64_t sub_2238EEC6C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 72) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 76);
    if (v4 * (((381774871 * (unint64_t)(*(_QWORD *)(a1 + 80) >> 34)) >> 32) >> 2) != -1)
      goto LABEL_11;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *(void **)(a1 + 56);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_2238EED18(_QWORD *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v12 = a3;
  __p = a2;
  v14 = a3;
  if (sub_223340F28(a1, (uint64_t)&__p))
  {
    if (sub_223340F28(a1 + 18, (uint64_t)&v11))
    {
      __p = v11;
      v14 = v12;
      if (!sub_223340F28(a1 + 18, (uint64_t)&__p)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/SceneTypeGraph.h", 165, (uint64_t)"optimized_nodes_.count(id)", 26, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = sub_22342DA5C(a1 + 18, (uint64_t)&__p);
      if (!v6)
        sub_223198218("unordered_map::at: key not found");
    }
    else
    {
      __p = v11;
      v14 = v12;
      if (!sub_223340F28(a1, (uint64_t)&__p)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 121, (uint64_t)"nodes_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = sub_22342DA5C(a1, (uint64_t)&__p);
      if (!v6)
        sub_223198218("unordered_map::at: key not found");
    }
    v7 = sub_2231D04FC(*a4);
    sub_2231CFEAC(v7, (uint64_t)(v6 + 4));
    v8 = a1 + 23;
    v9 = sub_22342DA5C(v8, (uint64_t)&v11);
    if (v9)
    {
      sub_2231AFBB8(v8, v9, (uint64_t)&__p);
      v10 = __p;
      __p = 0;
      if (v10)
        operator delete(v10);
    }
  }
}

void sub_2238EEED0(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  _DWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  int v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t i;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t *v58;
  float32x2_t v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  __int128 *v69;
  uint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  int8x8_t v74;
  uint8x8_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v81;
  uint64_t v83;
  unint64_t v84;
  int8x8_t v85;
  uint8x8_t v86;
  unint64_t v87;
  uint64_t ***v88;
  uint64_t **v89;
  uint64_t v90;
  unint64_t v92;
  uint64_t *v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unint64_t v97;
  int8x8_t v98;
  uint8x8_t v99;
  unint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v106;
  uint64_t v108;
  _QWORD *v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float32x2_t v116;
  float32x2_t v117;
  uint64_t v118;
  uint64_t j;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  void *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t *v128;
  float32x2_t v129;
  float v130;
  uint64_t v131;
  int v132;
  __int128 *v133;
  int v134;
  __int128 v135;
  void *v136[2];
  int v137;
  void *v138[2];
  void *__p[2];
  int v140;
  __int128 v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  sub_2241498F4(a3, 0);
  if (!a2)
  {
    v135 = 0uLL;
    *(_OWORD *)v136 = 0uLL;
    v137 = 1065353216;
    v49 = (uint64_t *)a1[2];
    if (!v49)
      goto LABEL_188;
    do
    {
      *(_OWORD *)v138 = *((_OWORD *)v49 + 1);
      *(_QWORD *)&v141 = v138;
      v50 = sub_2238F2290((uint64_t)&v135, (uint64_t)v138, (uint64_t)&unk_2245BA939, (_OWORD **)&v141);
      v51 = v50[5];
      if (v51)
      {
        for (i = 0; i != v51; ++i)
          *(_QWORD *)(v50[4] + 8 * i) = 0;
        v53 = (_QWORD *)v50[6];
        v50[6] = 0;
        v50[7] = 0;
        if (v53)
        {
          do
          {
            v54 = (_QWORD *)*v53;
            operator delete(v53);
            v53 = v54;
          }
          while (v54);
        }
      }
      v49 = (uint64_t *)*v49;
    }
    while (v49);
    v58 = (uint64_t *)a1[2];
    if (!v58)
      goto LABEL_188;
    v126 = a1 + 5;
    __asm
    {
      FMOV            V10.2S, #-4.0
      FMOV            V11.2S, #1.5
      FMOV            V12.2S, #1.0
    }
    v65 = (float32x2_t)vdup_n_s32(0x437F0000u);
LABEL_80:
    v128 = v58;
    v66 = (void *)v58[2];
    v67 = (void *)v58[3];
    *(_QWORD *)&v141 = v66;
    *((_QWORD *)&v141 + 1) = v67;
    v138[0] = v66;
    v138[1] = v67;
    if (sub_223340F28(v126, (uint64_t)v138)
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 141, (uint64_t)"edges_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v68 = sub_223340F28(v126, (uint64_t)v138);
      if (!v68)
LABEL_197:
        sub_223198218("unordered_map::at: key not found");
      v69 = (__int128 *)v128[19];
      v134 = *((_DWORD *)v128 + 40);
      v133 = v69;
      v70 = (uint64_t *)v68[6];
      if (!v70)
        goto LABEL_79;
LABEL_84:
      v138[0] = &v141;
      v71 = sub_2238F2290((uint64_t)&v135, (uint64_t)&v141, (uint64_t)&unk_2245BA939, (_OWORD **)v138);
      v72 = v70 + 2;
      v73 = sub_22456636C((unsigned __int8 *)v70 + 16);
      v74 = (int8x8_t)v71[5];
      if (v74)
      {
        v75 = (uint8x8_t)vcnt_s8(v74);
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          v76 = v73;
          if (v73 >= *(_QWORD *)&v74)
            v76 = v73 % *(_QWORD *)&v74;
        }
        else
        {
          v76 = (*(_QWORD *)&v74 - 1) & v73;
        }
        v77 = *(_QWORD **)(v71[4] + 8 * v76);
        if (v77)
        {
          v78 = (_QWORD *)*v77;
          if (v78)
          {
            if (v75.u32[0] < 2uLL)
            {
              v79 = *(_QWORD *)&v74 - 1;
              while (1)
              {
                v83 = v78[1];
                if (v73 == v83)
                {
                  if (v78[2] == *v72 && v78[3] == v70[3])
                    goto LABEL_179;
                }
                else if ((v83 & v79) != v76)
                {
                  goto LABEL_110;
                }
                v78 = (_QWORD *)*v78;
                if (!v78)
                  goto LABEL_110;
              }
            }
            do
            {
              v81 = v78[1];
              if (v73 == v81)
              {
                if (v78[2] == *v72 && v78[3] == v70[3])
                  goto LABEL_179;
              }
              else
              {
                if (v81 >= *(_QWORD *)&v74)
                  v81 %= *(_QWORD *)&v74;
                if (v81 != v76)
                  break;
              }
              v78 = (_QWORD *)*v78;
            }
            while (v78);
          }
        }
      }
LABEL_110:
      *(_OWORD *)v138 = *(_OWORD *)v72;
      v84 = sub_22456636C((unsigned __int8 *)v138);
      v85 = (int8x8_t)a1[1];
      if (v85)
      {
        v86 = (uint8x8_t)vcnt_s8(v85);
        v86.i16[0] = vaddlv_u8(v86);
        if (v86.u32[0] > 1uLL)
        {
          v87 = v84;
          if (v84 >= *(_QWORD *)&v85)
            v87 = v84 % *(_QWORD *)&v85;
        }
        else
        {
          v87 = (*(_QWORD *)&v85 - 1) & v84;
        }
        v88 = *(uint64_t ****)(*a1 + 8 * v87);
        if (v88)
        {
          v89 = *v88;
          if (v89)
          {
            if (v86.u32[0] < 2uLL)
            {
              v90 = *(_QWORD *)&v85 - 1;
              while (1)
              {
                v94 = v89[1];
                if ((uint64_t *)v84 == v94)
                {
                  if (v89[2] == v138[0] && v89[3] == v138[1])
                    goto LABEL_142;
                }
                else if (((unint64_t)v94 & v90) != v87)
                {
                  goto LABEL_136;
                }
                v89 = (uint64_t **)*v89;
                if (!v89)
                  goto LABEL_136;
              }
            }
            do
            {
              v92 = (unint64_t)v89[1];
              if (v84 == v92)
              {
                if (v89[2] == v138[0] && v89[3] == v138[1])
                  goto LABEL_142;
              }
              else
              {
                if (v92 >= *(_QWORD *)&v85)
                  v92 %= *(_QWORD *)&v85;
                if (v92 != v87)
                  break;
              }
              v89 = (uint64_t **)*v89;
            }
            while (v89);
          }
        }
      }
LABEL_136:
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 125, (uint64_t)"nodes_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v95 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v118 = qword_255795648;
        for (j = qword_255795650; v118 != j; v118 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v118)(*(_QWORD *)(v118 + 8), "nodes_.count(id)", 16, "", 0);
      }
      v96 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (byte_255795670)
      {
        qword_255795660(*(_QWORD *)algn_255795668, "nodes_.count(id)", 16, "", 0);
LABEL_142:
        v97 = sub_22456636C((unsigned __int8 *)v138);
        v98 = (int8x8_t)a1[1];
        if (!*(_QWORD *)&v98)
          goto LABEL_197;
        v99 = (uint8x8_t)vcnt_s8(v98);
        v99.i16[0] = vaddlv_u8(v99);
        if (v99.u32[0] > 1uLL)
        {
          v100 = v97;
          if (v97 >= *(_QWORD *)&v98)
            v100 = v97 % *(_QWORD *)&v98;
        }
        else
        {
          v100 = (*(_QWORD *)&v98 - 1) & v97;
        }
        v101 = *(uint64_t ***)(*a1 + 8 * v100);
        if (!v101)
          goto LABEL_197;
        v102 = *v101;
        if (!v102)
          goto LABEL_197;
        if (v99.u32[0] < 2uLL)
        {
          v103 = *(_QWORD *)&v98 - 1;
          while (1)
          {
            v106 = v102[1];
            if (v97 == v106)
            {
              if ((void *)v102[2] == v138[0] && (void *)v102[3] == v138[1])
                goto LABEL_170;
            }
            else if ((v106 & v103) != v100)
            {
              goto LABEL_197;
            }
            v102 = (uint64_t *)*v102;
            if (!v102)
              goto LABEL_197;
          }
        }
        while (1)
        {
          v104 = v102[1];
          if (v97 == v104)
          {
            if ((void *)v102[2] == v138[0] && (void *)v102[3] == v138[1])
            {
LABEL_170:
              v108 = v102[19];
              v132 = *((_DWORD *)v102 + 40);
              v131 = v108;
              v138[0] = v70 + 2;
              v109 = sub_2238F2290((uint64_t)&v135, (uint64_t)(v70 + 2), (uint64_t)&unk_2245BA939, (_OWORD **)v138);
              sub_223340BF8((uint64_t)(v109 + 4), (uint64_t)&v141, &v141);
              v110 = *((float *)v70 + 8);
              v111 = fmaxf(v110, 0.0);
              if (v110 <= 1.0)
                v112 = v111;
              else
                v112 = 1.0;
              v113 = (float)(fabsf((float)(v112 + 0.25) + -0.5) * -4.0) + 1.5;
              v114 = v113 * 255.0;
              if (v113 <= 0.0)
                v114 = 0.0;
              if (v113 <= 1.0)
                v115 = v114;
              else
                v115 = 255.0;
              v116.f32[0] = v112 + -0.25;
              v116.f32[1] = v112;
              v117 = vadd_f32(vmul_f32(vabs_f32(vadd_f32(v116, (float32x2_t)0xBF000000BF000000)), _D10), _D11);
              v129 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vcvt_s32_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v117, _D12), (int8x8_t)v65, vand_s8((int8x8_t)vmul_f32(v117, v65), (int8x8_t)vcgtz_f32(v117))))), v65);
              v130 = (float)(int)v115 / 255.0;
              sub_2240030D0((uint64_t)&v133, (uint64_t)&v131, (uint64_t *)&v129, 8u, (uint64_t)v138, 0.0025);
              sub_22414E9E0(a3, (uint64_t)v138);
              sub_22316F8F4((uint64_t *)v138);
LABEL_179:
              v70 = (uint64_t *)*v70;
              if (!v70)
              {
LABEL_79:
                v58 = (uint64_t *)*v128;
                if (*v128)
                  goto LABEL_80;
LABEL_188:
                v120 = v136[0];
                if (v136[0])
                {
                  do
                  {
                    v121 = (_QWORD *)*v120;
                    v122 = (_QWORD *)v120[6];
                    if (v122)
                    {
                      do
                      {
                        v123 = (_QWORD *)*v122;
                        operator delete(v122);
                        v122 = v123;
                      }
                      while (v123);
                    }
                    v124 = (void *)v120[4];
                    v120[4] = 0;
                    if (v124)
                      operator delete(v124);
                    operator delete(v120);
                    v120 = v121;
                  }
                  while (v121);
                }
                v57 = (void *)v135;
                *(_QWORD *)&v135 = 0;
                if (v57)
                  goto LABEL_75;
                return;
              }
              goto LABEL_84;
            }
          }
          else
          {
            if (v104 >= *(_QWORD *)&v98)
              v104 %= *(_QWORD *)&v98;
            if (v104 != v100)
              goto LABEL_197;
          }
          v102 = (uint64_t *)*v102;
          if (!v102)
            goto LABEL_197;
        }
      }
    }
    abort();
  }
  *(_OWORD *)v138 = 0uLL;
  *(_OWORD *)__p = 0uLL;
  v140 = 1065353216;
  v6 = (uint64_t *)a1[2];
  if (!v6)
    goto LABEL_72;
  v7 = *(_QWORD *)(a3 + 8);
  do
  {
    while (1)
    {
      v135 = *((_OWORD *)v6 + 1);
      v9 = *(_QWORD *)a3;
      *(_QWORD *)&v141 = &v135;
      *((_DWORD *)sub_2238F1DD0((uint64_t)v138, (uint64_t)&v135, (uint64_t)&unk_2245BA939, (_OWORD **)&v141) + 8) = -1431655765 * ((v7 - v9) >> 2);
      v10 = v6[19];
      DWORD2(v141) = *((_DWORD *)v6 + 40);
      *(_QWORD *)&v141 = v10;
      v11 = *(_QWORD *)(a3 + 8);
      if (v11 >= *(_QWORD *)(a3 + 16))
        break;
      v8 = v141;
      *(_DWORD *)(v11 + 8) = DWORD2(v141);
      *(_QWORD *)v11 = v8;
      v7 = v11 + 12;
      *(_QWORD *)(a3 + 8) = v11 + 12;
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_7;
    }
    v7 = sub_2238F2108((unint64_t *)a3, (uint64_t *)&v141);
    *(_QWORD *)(a3 + 8) = v7;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_7:
  v12 = (_QWORD *)a1[2];
  if (!v12)
    goto LABEL_72;
  v127 = a1 + 5;
  v13 = (uint64_t *)(a3 + 112);
  while (2)
  {
    v125 = v12;
    v14 = v12[2];
    v15 = v12[3];
    *(_QWORD *)&v141 = v14;
    *((_QWORD *)&v141 + 1) = v15;
    *(_QWORD *)&v135 = v14;
    *((_QWORD *)&v135 + 1) = v15;
    if (!sub_223340F28(v127, (uint64_t)&v135)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 141, (uint64_t)"edges_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v16 = sub_223340F28(v127, (uint64_t)&v135);
    if (!v16)
      goto LABEL_196;
    v17 = sub_22342DA5C(v138, (uint64_t)&v141);
    if (!v17)
      goto LABEL_196;
    v18 = (_QWORD *)v16[6];
    if (!v18)
      goto LABEL_9;
    v19 = *((_DWORD *)v17 + 8);
    while (2)
    {
      v21 = v18 + 2;
      v22 = sub_22456636C((unsigned __int8 *)v18 + 16);
      if (!v138[1])
        goto LABEL_196;
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)v138[1]);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v24 = v22;
        if ((void *)v22 >= v138[1])
          v24 = v22 % (unint64_t)v138[1];
      }
      else
      {
        v24 = ((unint64_t)v138[1] - 1) & v22;
      }
      v25 = (uint64_t **)*((_QWORD *)v138[0] + v24);
      if (!v25 || (v26 = *v25) == 0)
LABEL_196:
        sub_223198218("unordered_map::at: key not found");
      if (v23.u32[0] < 2uLL)
      {
        while (1)
        {
          v29 = v26[1];
          if (v29 == v22)
          {
            if (v26[2] == *v21 && v26[3] == v18[3])
              goto LABEL_46;
          }
          else if ((v29 & ((uint64_t)v138[1] - 1)) != v24)
          {
            goto LABEL_196;
          }
          v26 = (uint64_t *)*v26;
          if (!v26)
            goto LABEL_196;
        }
      }
      while (1)
      {
        v27 = v26[1];
        if (v27 == v22)
          break;
        if ((void *)v27 >= v138[1])
          v27 %= (unint64_t)v138[1];
        if (v27 != v24)
          goto LABEL_196;
LABEL_28:
        v26 = (uint64_t *)*v26;
        if (!v26)
          goto LABEL_196;
      }
      if (v26[2] != *v21 || v26[3] != v18[3])
        goto LABEL_28;
LABEL_46:
      v31 = *((_DWORD *)v26 + 8);
      v33 = *(_DWORD **)(a3 + 120);
      v32 = *(_QWORD *)(a3 + 128);
      if ((unint64_t)v33 < v32)
      {
        *v33 = v19;
        v33[1] = v31;
        v20 = v33 + 3;
        v33[2] = v19;
      }
      else
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v33 - *v13) >> 2);
        v35 = v34 + 1;
        if (v34 + 1 > 0x1555555555555555)
          sub_22316E078();
        v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *v13) >> 2);
        if (2 * v36 > v35)
          v35 = 2 * v36;
        if (v36 >= 0xAAAAAAAAAAAAAAALL)
          v37 = 0x1555555555555555;
        else
          v37 = v35;
        if (v37)
        {
          LODWORD(v133) = v37;
          v38 = *(unsigned int *)(a3 + 140);
          if ((_DWORD)v38 == -1)
            sub_22316DD70();
          *(_QWORD *)&v135 = &v133;
          v39 = ((uint64_t (*)(__int128 *, uint64_t))off_24EC5C840[v38])(&v135, a3 + 136);
        }
        else
        {
          v39 = 0;
          v40 = 0;
        }
        v41 = (_DWORD *)(v39 + 12 * v34);
        *v41 = v19;
        v41[1] = v31;
        v41[2] = v19;
        v43 = *(_QWORD *)(a3 + 112);
        v42 = *(_QWORD *)(a3 + 120);
        v44 = v41;
        if (v42 != v43)
        {
          do
          {
            v45 = *(_QWORD *)(v42 - 12);
            v42 -= 12;
            v46 = *(_DWORD *)(v42 + 8);
            *(_QWORD *)(v44 - 3) = v45;
            v44 -= 3;
            v44[2] = v46;
          }
          while (v42 != v43);
          v42 = *v13;
        }
        v20 = v41 + 3;
        *(_QWORD *)(a3 + 112) = v44;
        *(_QWORD *)(a3 + 120) = v41 + 3;
        v47 = *(_QWORD *)(a3 + 128);
        *(_QWORD *)(a3 + 128) = v39 + 12 * v40;
        if (v42)
        {
          *(_QWORD *)&v135 = v42;
          DWORD2(v135) = -1431655765 * ((unint64_t)(v47 - v42) >> 2);
          v48 = *(unsigned int *)(a3 + 140);
          if ((_DWORD)v48 == -1)
            sub_22316DD70();
          v133 = &v135;
          ((void (*)(__int128 **, uint64_t))off_24EC5C810[v48])(&v133, a3 + 136);
        }
      }
      *(_QWORD *)(a3 + 120) = v20;
      v18 = (_QWORD *)*v18;
      if (v18)
        continue;
      break;
    }
LABEL_9:
    v12 = (_QWORD *)*v125;
    if (*v125)
      continue;
    break;
  }
LABEL_72:
  v55 = __p[0];
  if (__p[0])
  {
    do
    {
      v56 = (_QWORD *)*v55;
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
  v57 = v138[0];
  v138[0] = 0;
  if (v57)
LABEL_75:
    operator delete(v57);
}

void sub_2238EFA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t *v9;
  va_list va;

  va_start(va, a9);
  sub_2238EFB04((uint64_t)va);
  sub_22316F8F4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2238EFB04(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[6];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[4];
      v2[4] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_2238EFB84@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X1>, uint64_t (**a3)(_QWORD)@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v14;
  __int8 *v15;
  float v16;
  float32x2_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x2_t v27;
  int8x16_t v28;
  float32x2_t v29;
  float32x2_t v30;
  __int128 v31;
  float32x4_t v32;
  float v33;
  uint64_t v34;
  __int32 v35;
  _OWORD v36[3];
  float32x2_t v37;
  unsigned __int32 v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t (**v47)();
  uint64_t (**v48)(_QWORD);
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v47 = a2;
  v48 = a3;
  if (!sub_223340F28(a1, (uint64_t)&v47))
    return sub_2241498F4(a5, 0);
  if (a4)
  {
    v47 = a2;
    v48 = a3;
    if (!sub_223340F28(a1 + 18, (uint64_t)&v47)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/SceneTypeGraph.h", 169, (uint64_t)"optimized_nodes_.count(id)", 26, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v10 = sub_223340F28(a1 + 18, (uint64_t)&v47);
    if (!v10)
      sub_223198218("unordered_map::at: key not found");
    v11 = *(unsigned __int8 *)(v10[9] + 132);
    v47 = a2;
    v48 = a3;
    if (!sub_223340F28(a1 + 18, (uint64_t)&v47)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/SceneTypeGraph.h", 169, (uint64_t)"optimized_nodes_.count(id)", 26, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = sub_223340F28(a1 + 18, (uint64_t)&v47);
    if (!v12)
      sub_223198218("unordered_map::at: key not found");
  }
  else
  {
    v47 = a2;
    v48 = a3;
    if (!sub_223340F28(a1, (uint64_t)&v47)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 125, (uint64_t)"nodes_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v14 = sub_223340F28(a1, (uint64_t)&v47);
    if (!v14)
      sub_223198218("unordered_map::at: key not found");
    v11 = *(unsigned __int8 *)(v14[9] + 132);
    v47 = a2;
    v48 = a3;
    if (!sub_223340F28(a1, (uint64_t)&v47)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 125, (uint64_t)"nodes_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = sub_223340F28(a1, (uint64_t)&v47);
    if (!v12)
      sub_223198218("unordered_map::at: key not found");
  }
  if (v11 >= 0x21)
    v15 = (__int8 *)&unk_224653958;
  else
    v15 = (char *)&unk_22465395B + 3 * v11;
  if (*(float *)(v12[9] + 136) >= 0.1)
    v16 = *(float *)(v12[9] + 136);
  else
    v16 = 0.1;
  v47 = a2;
  v48 = a3;
  if (!sub_223340F28(a1, (uint64_t)&v47)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/KeyframeGraph.hpp", 125, (uint64_t)"nodes_.count(id)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v17 = (float32x2_t *)sub_223340F28(a1, (uint64_t)&v47);
  if (!v17)
    sub_223198218("unordered_map::at: key not found");
  *(float32x2_t *)v18.i8 = v17[13];
  v18.i32[2] = v17[14].i32[0];
  *(float32x2_t *)v19.i8 = v17[15];
  v19.i32[2] = v17[16].i32[0];
  v20.i32[0] = v17[18].i32[0];
  *(_QWORD *)&v22 = vzip1q_s32(v18, v19).u64[0];
  *(float32x2_t *)v21.f32 = v17[19];
  v21.i32[2] = v17[20].i32[0];
  v23 = (int8x16_t)vnegq_f32(v21);
  v24 = (int8x16_t)vtrn2q_s32(v18, v19);
  v24.i32[2] = HIDWORD(*(_QWORD *)&v17[17]);
  v25 = vzip2q_s32(v18, v19);
  v26 = v25;
  v26.i32[2] = v20.i32[0];
  v27 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v22, *(float *)v23.i32), *(float32x2_t *)v24.i8, *(float32x2_t *)v21.f32, 1), *(float32x2_t *)v25.i8, v21, 2);
  v28 = (int8x16_t)vdupq_laneq_s32(v26, 2);
  v29 = vmls_lane_f32(vmul_f32(v17[17], *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v17[17], 1), *(float32x2_t *)v21.f32, 1);
  *((_QWORD *)&v22 + 1) = *(_QWORD *)&v17[17];
  v30 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
  HIDWORD(v31) = 0;
  LODWORD(v31) = vdupq_lane_s32(*(int32x2_t *)&v24, 0).i32[3];
  *(_QWORD *)((char *)&v31 + 4) = vextq_s8(v24, v28, 4uLL).u64[0];
  v26.i64[1] = v28.u32[0];
  v36[1] = v31;
  v36[2] = v26;
  v36[0] = v22;
  v37 = v27;
  v38 = vmla_f32(v29, v30, v20).u32[0];
  v39 = 1065353216;
  v28.i8[0] = *v15;
  *(float *)v28.i32 = (float)v28.u32[0];
  v26.i8[0] = v15[1];
  v30.i8[0] = v15[2];
  *(float *)&v28.i32[1] = (float)v26.u32[0];
  *(float *)&v28.i32[2] = (float)v30.u32[0];
  v32 = vdivq_f32((float32x4_t)v28, (float32x4_t)vdupq_n_s32(0x437F0000u));
  v35 = v32.i32[2];
  v34 = v32.i64[0];
  v40 = xmmword_224651370;
  sub_223207E58(&v41, (int *)&v40);
  v33 = v16 * 0.01;
  v49 = v42;
  v50 = v43;
  v51 = v44;
  v52 = v45;
  v53 = v46;
  v54 = 0xA0000000ALL;
  v47 = &off_24EC207B8;
  v48 = &off_24EC20868;
  return sub_224002D14((uint64_t)&v47, (int32x2_t *)v36, &v34, a5, v33);
}

float sub_2238F001C(_OWORD *a1, __int128 *a2, uint64_t a3, char a4, float result)
{
  __int128 *v9;
  float *v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float *v18;
  float v19;
  float *v20;
  int *v21;
  float *v22;
  float v23;
  int v24;
  int *v25;
  int v26;
  float v27;
  int v28;
  __int128 *v29;
  unint64_t v30;
  float *v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  float v36;
  __int128 v37;
  float v38;
  __int128 v39;
  float *v40;
  float v41;
  __int128 v42;
  float v43;
  __int128 *v44;
  unint64_t v45;
  float *v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  float v51;
  __int128 v52;
  float v53;
  __int128 v54;
  float *v55;
  __int128 v56;
  float v57;
  float v58;
  int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  unint64_t v67;
  __int128 *v68;
  __int128 *v69;
  float v70;
  __int128 *v71;
  float v72;
  unint64_t v73;
  int v74;
  float v75;
  float v76;
  __int128 *v77;
  BOOL v78;
  unint64_t v79;
  float v80;
  unint64_t v81;
  float v82;
  __int128 *v83;
  __int128 *v84;
  float v85;
  int v86;
  float v87;
  float v88;
  __int128 *v89;
  float *v90;
  float *v91;
  float v92;
  __int128 *v93;
  float *v94;
  float *v95;
  float v96;
  __int128 *v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  float v102;
  __int128 v103;
  float v104;
  __int128 *v105;
  BOOL v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  int64_t v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  float v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  float *v137;
  float v138;
  float *v139;
  float *v140;
  int v141;
  __int128 v142;
  __int128 *v143;
  __int128 *v144;
  float *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;

BOOL sub_2238F0E8C(__int128 *a1, __int128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  float *v7;
  float v8;
  float *v9;
  __int128 *v10;
  float *v11;
  float v12;
  float v13;
  __int128 v14;
  float *v15;
  float v16;
  float *v17;
  float v18;
  __int128 *v19;
  __int128 *v20;
  _DWORD *v21;
  float v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  float v28;
  float v29;
  __int128 v30;
  float v31;
  __int128 v32;
  float v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  uint64_t v42;
  int v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  float v50;
  __int128 v51;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*((float *)a2 - 1) > *((float *)a1 + 4))
      {
        v6 = *a1;
        *a1 = *(__int128 *)((char *)a2 - 20);
        *(__int128 *)((char *)a2 - 20) = v6;
        LODWORD(v6) = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v6;
      }
      return result;
    case 3uLL:
      v15 = (float *)(a1 + 1);
      v16 = *((float *)a1 + 4);
      v17 = (float *)a2 - 1;
      v18 = *((float *)a2 - 1);
      v19 = (__int128 *)((char *)a1 + 20);
      v20 = (__int128 *)((char *)a2 - 20);
      v21 = (_DWORD *)a1 + 9;
      v22 = *((float *)a1 + 9);
      if (v22 > v16)
      {
        if (v18 <= v22)
        {
          v48 = *a1;
          *a1 = *v19;
          *v19 = v48;
          *((float *)a1 + 4) = v22;
          *((float *)a1 + 9) = v16;
          if (*v17 <= v16)
            return result;
          v49 = *v19;
          *v19 = *v20;
          *v20 = v49;
          v15 = (float *)a1 + 9;
        }
        else
        {
          v23 = *a1;
          *a1 = *v20;
          *v20 = v23;
        }
        v21 = (_DWORD *)a2 - 1;
        goto LABEL_41;
      }
      if (v18 > v22)
      {
        v37 = *v19;
        *v19 = *v20;
        *v20 = v37;
        LODWORD(v37) = *v21;
        *v21 = *(_DWORD *)v17;
        *(_DWORD *)v17 = v37;
        if (*(float *)v21 > *v15)
        {
          v38 = *a1;
          *a1 = *v19;
          *v19 = v38;
LABEL_41:
          v50 = *v15;
          *v15 = *(float *)v21;
          *(float *)v21 = v50;
          return result;
        }
      }
      return result;
    case 4uLL:
      sub_2238F129C((float *)a1, (float *)a1 + 5, (float *)a1 + 10, (float *)a2 - 5);
      return 1;
    case 5uLL:
      v24 = (__int128 *)((char *)a1 + 20);
      v25 = (__int128 *)((char *)a1 + 40);
      v26 = (__int128 *)((char *)a1 + 60);
      sub_2238F129C((float *)a1, (float *)a1 + 5, (float *)a1 + 10, (float *)a1 + 15);
      if (*((float *)a2 - 1) > *((float *)a1 + 19))
      {
        v27 = *v26;
        *v26 = *(__int128 *)((char *)a2 - 20);
        *(__int128 *)((char *)a2 - 20) = v27;
        LODWORD(v27) = *((_DWORD *)a1 + 19);
        *((_DWORD *)a1 + 19) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v27;
        v28 = *((float *)a1 + 19);
        v29 = *((float *)a1 + 14);
        if (v28 > v29)
        {
          v30 = *v25;
          *v25 = *v26;
          *v26 = v30;
          *((float *)a1 + 14) = v28;
          *((float *)a1 + 19) = v29;
          v31 = *((float *)a1 + 9);
          if (v28 > v31)
          {
            v32 = *v24;
            *v24 = *v25;
            *v25 = v32;
            *((float *)a1 + 9) = v28;
            *((float *)a1 + 14) = v31;
            v33 = *((float *)a1 + 4);
            if (v28 > v33)
            {
              v34 = *a1;
              *a1 = *v24;
              *v24 = v34;
              *((float *)a1 + 4) = v28;
              *((float *)a1 + 9) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v7 = (float *)(a1 + 1);
      v8 = *((float *)a1 + 4);
      v9 = (float *)a1 + 10;
      v10 = (__int128 *)((char *)a1 + 20);
      v11 = (float *)a1 + 9;
      v12 = *((float *)a1 + 9);
      v13 = *((float *)a1 + 14);
      if (v12 > v8)
      {
        if (v13 <= v12)
        {
          v39 = *a1;
          *a1 = *v10;
          *v10 = v39;
          *((float *)a1 + 4) = v12;
          *((float *)a1 + 9) = v8;
          if (v13 <= v8)
            goto LABEL_26;
          v40 = *v10;
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v40;
          v7 = (float *)a1 + 9;
        }
        else
        {
          v14 = *a1;
          *a1 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v14;
        }
        v11 = (float *)a1 + 14;
        goto LABEL_25;
      }
      if (v13 > v12)
      {
        v35 = *v10;
        *v10 = *(_OWORD *)v9;
        *(_OWORD *)v9 = v35;
        *v11 = v13;
        *((float *)a1 + 14) = v12;
        if (v13 > v8)
        {
          v36 = *a1;
          *a1 = *v10;
          *v10 = v36;
LABEL_25:
          *v7 = v13;
          *v11 = v8;
        }
      }
LABEL_26:
      v41 = (__int128 *)((char *)a1 + 60);
      if ((__int128 *)((char *)a1 + 60) == a2)
        return 1;
      v42 = 0;
      v43 = 0;
      while (1)
      {
        v44 = *((float *)v41 + 4);
        if (v44 > v9[4])
          break;
LABEL_35:
        v9 = (float *)v41;
        v42 += 20;
        v41 = (__int128 *)((char *)v41 + 20);
        if (v41 == a2)
          return 1;
      }
      v51 = *v41;
      v45 = v42;
      do
      {
        v46 = (uint64_t)a1 + v45;
        *(_OWORD *)(v46 + 60) = *(__int128 *)((char *)a1 + v45 + 40);
        *(_DWORD *)(v46 + 76) = *(_DWORD *)((char *)a1 + v45 + 56);
        if (v45 == -40)
        {
          *a1 = v51;
          *((float *)a1 + 4) = v44;
          if (++v43 != 8)
            goto LABEL_35;
          return (__int128 *)((char *)v41 + 20) == a2;
        }
        v45 -= 20;
      }
      while (v44 > *(float *)(v46 + 36));
      v47 = (uint64_t)a1 + v45;
      *(_OWORD *)(v47 + 60) = v51;
      *(float *)(v47 + 76) = v44;
      if (++v43 != 8)
        goto LABEL_35;
      return (__int128 *)((char *)v41 + 20) == a2;
  }
}

float sub_2238F129C(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float *v5;
  float *v6;
  float result;
  __int128 v8;
  int *v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  __int128 v13;
  float v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a2[4];
  v5 = a1 + 4;
  v6 = a3 + 4;
  result = a3[4];
  if (v4 <= a1[4])
  {
    if (result > v4)
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      result = a2[4];
      a2[4] = a3[4];
      a3[4] = result;
      if (a2[4] > *v5)
      {
        v11 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v11;
        v9 = (int *)(a1 + 4);
        v12 = (int *)(a2 + 4);
LABEL_10:
        v16 = *v9;
        *v9 = *v12;
        *v12 = v16;
        result = *v6;
      }
    }
  }
  else
  {
    if (result > v4)
    {
      v8 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v8;
      v9 = (int *)(a1 + 4);
LABEL_9:
      v12 = (int *)(a3 + 4);
      goto LABEL_10;
    }
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v14 = a1[4];
    a1[4] = a2[4];
    a2[4] = v14;
    result = *v6;
    if (*v6 > v14)
    {
      v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v15;
      v9 = (int *)(a2 + 4);
      goto LABEL_9;
    }
  }
  if (a4[4] > result)
  {
    v17 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v17;
    *(float *)&v17 = a3[4];
    a3[4] = a4[4];
    *((_DWORD *)a4 + 4) = v17;
    result = a3[4];
    if (result > a2[4])
    {
      v18 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v18;
      *(float *)&v18 = a2[4];
      a2[4] = a3[4];
      *((_DWORD *)a3 + 4) = v18;
      result = a2[4];
      if (result > *v5)
      {
        v19 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v19;
        result = a1[4];
        a1[4] = a2[4];
        a2[4] = result;
      }
    }
  }
  return result;
}

uint64_t sub_2238F1458(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 170;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2238F151C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      *((_OWORD *)v6 + 1) = *((_OWORD *)a2 + 1);
      sub_2231CFEAC((uint64_t)(v6 + 4), (uint64_t)(a2 + 4));
      v7 = *(_OWORD *)(a2 + 13);
      v8 = *(_OWORD *)(a2 + 15);
      v9 = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v6 + 19) = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(v6 + 17) = v9;
      *(_OWORD *)(v6 + 15) = v8;
      *(_OWORD *)(v6 + 13) = v7;
      v6[21] = a2[21];
      v10 = (uint64_t *)*v6;
      sub_2234838BC((uint64_t)a1, v6);
      a2 = (uint64_t *)*a2;
      v6 = v10;
      if (!v10)
        goto LABEL_7;
    }
    sub_22388950C((uint64_t)a1, v6);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v15 = (char *)operator new(0xB0uLL);
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_OWORD *)v15 + 1) = *((_OWORD *)a2 + 1);
      v11 = *(_OWORD *)((char *)a2 + 44);
      *((_OWORD *)v15 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v15 + 44) = v11;
      sub_223207688((uint64_t)(v15 + 64), (uint64_t)(a2 + 8));
      v12 = *(_OWORD *)(a2 + 13);
      v13 = *(_OWORD *)(a2 + 15);
      v14 = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v15 + 152) = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(v15 + 136) = v14;
      *(_OWORD *)(v15 + 120) = v13;
      *(_OWORD *)(v15 + 104) = v12;
      *((_QWORD *)v15 + 21) = a2[21];
      *((_QWORD *)v15 + 1) = sub_22456636C((unsigned __int8 *)v15 + 16);
      sub_2234838BC((uint64_t)a1, v15);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2238F1698(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_22388950C(v1, v2);
  __cxa_rethrow();
}

void sub_2238F16B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2238F16EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;

  sub_2238BBA0C(v10, v11);
  _Unwind_Resume(a1);
}

void sub_2238F1708(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_223174E94();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_223174E94();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_223174E94();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_2238F1D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238F1D8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238F1DA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238F1DB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2238F1DD0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = **a4;
  *((_DWORD *)v13 + 8) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_34:
      *v13 = *v21;
LABEL_69:
      *v21 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_34;
    }
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_2238F20F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_2238F2108(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC5C830[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC5C820[v18])(&v22, a1 + 3);
  }
  return v12;
}

_QWORD *sub_2238F2290(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v18 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x48uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = **a4;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_DWORD *)v13 + 16) = 1065353216;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *v13 = *v22;
LABEL_69:
      *v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v10)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v22)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v30 & v9;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v9));
      if (v22)
        goto LABEL_34;
    }
  }
  *v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v21 + 8 * v4) = v18;
  if (*v13)
  {
    v31 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_2238F25D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2238BBFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238F25E8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  int v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  sub_2238F9AB8(a1 + 40);
  v6 = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  v7 = 0;
  v8 = 0;
  sub_22346A424((unint64_t *)(a1 + 144), &v7, &v8, 1, &v6, 1, 0);
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  sub_2238F26B4((uint64_t *)a1);
  return a1;
}

void sub_2238F267C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 152);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 152) = 0;
  sub_2238895FC(v1 + 72);
  _Unwind_Resume(a1);
}

void sub_2238F26A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2238895FC(v1 + 72);
  _Unwind_Resume(a1);
}

void sub_2238F26B4(uint64_t *a1)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  _BOOL8 v5;
  BOOL v6;
  uint64_t v7;
  void **v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  void **v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  int v39;
  int32x4_t v40;
  int i;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int32x4_t v53;
  _BYTE v54[28];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  void *__p[2];
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63[2];

  v60 = 0u;
  v61 = 0u;
  *(_OWORD *)__p = 0u;
  if (*((_DWORD *)a1 + 1))
    v2 = *(_DWORD *)a1 == 0;
  else
    v2 = 1;
  v3 = *a1;
  if (v2)
    v3 = 0;
  v4 = v3 << 32;
  if (!HIDWORD(v3))
    v4 = 0;
  v5 = v3 != 0;
  if ((_DWORD)v3)
    v6 = HIDWORD(v3) == 0;
  else
    v6 = 1;
  *(_QWORD *)v54 = v3;
  *(_QWORD *)&v54[8] = v4 | v5;
  v54[16] = 0;
  v54[24] = 0;
  if (v6)
    v3 = 0;
  v62 = v3;
  v63[0] = v4 | v5;
  if (((16 * ((v4 >> 31) + HIDWORD(v4))) & (16 * ((v4 >> 31) + HIDWORD(v4)) - 1)) != 0)
    v7 = 8;
  else
    v7 = 16 * ((v4 >> 31) + HIDWORD(v4));
  sub_2238F9BD8((unint64_t *)&v55, &v62, v63, 1, __p, 1, v7);
  v8 = (void **)__p[1];
  v9 = (void **)v60;
  *((_QWORD *)&v61 + 1) = 0;
  v10 = v60 - (unint64_t)__p[1];
  if ((unint64_t)v60 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v8);
      v9 = (void **)v60;
      v8 = (void **)((char *)__p[1] + 8);
      __p[1] = v8;
      v10 = v60 - (_QWORD)v8;
    }
    while ((_QWORD)v60 - (_QWORD)v8 > 0x10uLL);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 11;
    goto LABEL_22;
  }
  if (v11 == 2)
  {
    v12 = 22;
LABEL_22:
    *(_QWORD *)&v61 = v12;
  }
  if (v8 != v9)
  {
    do
    {
      v13 = *v8++;
      operator delete(v13);
    }
    while (v8 != v9);
    if ((void *)v60 != __p[1])
      *(_QWORD *)&v60 = v60 + (((unint64_t)__p[1] - v60 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)v54;
  *(_OWORD *)((char *)a1 + 52) = *(_OWORD *)&v54[12];
  *((_OWORD *)a1 + 6) = v58;
  v14 = a1[10];
  if (v14)
  {
    v15 = a1[13];
    v16 = HIDWORD(v15) / 0x30;
    if (*((_DWORD *)a1 + 25))
      v17 = *((_DWORD *)a1 + 24) == 0;
    else
      v17 = 1;
    if (v17)
      v18 = 0;
    else
      v18 = a1[12];
    v19 = HIDWORD(v18);
    if (v16 * HIDWORD(v18) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if ((_DWORD)v18 && HIDWORD(v18))
    {
      v20 = v15 / 0x30;
      v21 = v18 - 1;
      v22 = HIDWORD(v18) - 1;
      v50 = v20;
      if (HIDWORD(v18) != 1)
      {
        if ((_DWORD)v18 != 1)
        {
          v23 = 0;
          v24 = v20;
          v51 = HIDWORD(v15) / 0x30;
          while (1)
          {
            v25 = 0;
            v26 = v14;
            do
            {
              v28 = *(void ***)(v26 + 8);
              v27 = *(void ***)(v26 + 16);
              *(_QWORD *)(v26 + 40) = 0;
              v29 = (char *)v27 - (char *)v28;
              if ((unint64_t)((char *)v27 - (char *)v28) >= 0x11)
              {
                do
                {
                  operator delete(*v28);
                  v27 = *(void ***)(v26 + 16);
                  v28 = (void **)(*(_QWORD *)(v26 + 8) + 8);
                  *(_QWORD *)(v26 + 8) = v28;
                  v29 = (char *)v27 - (char *)v28;
                }
                while ((unint64_t)((char *)v27 - (char *)v28) > 0x10);
              }
              v30 = v29 >> 3;
              if (v30 == 1)
              {
                v31 = 11;
                goto LABEL_52;
              }
              if (v30 == 2)
              {
                v31 = 22;
LABEL_52:
                *(_QWORD *)(v26 + 32) = v31;
              }
              if (v28 != v27)
              {
                do
                {
                  v32 = *v28++;
                  operator delete(v32);
                }
                while (v28 != v27);
                v34 = *(_QWORD *)(v26 + 8);
                v33 = *(_QWORD *)(v26 + 16);
                if (v33 != v34)
                  *(_QWORD *)(v26 + 16) = v33 + ((v34 - v33 + 7) & 0xFFFFFFFFFFFFFFF8);
              }
              if (*(_QWORD *)v26)
                operator delete(*(void **)v26);
              v26 += 48 * v24;
              ++v25;
            }
            while (v25 != v21);
            sub_223889878(v26);
            v14 += 48 * v51;
            if (++v23 == (_DWORD)v19 - 1)
              goto LABEL_62;
          }
        }
        v35 = 48 * v16;
        do
        {
          sub_223889878(v14);
          v14 += v35;
          --v22;
        }
        while (v22);
      }
LABEL_62:
      while (v21)
      {
        sub_223889878(v14);
        v14 += 48 * v50;
        --v21;
      }
      sub_223889878(v14);
    }
    v36 = (void *)a1[10];
    a1[9] = v55;
    if (v36)
      free(v36);
  }
  else
  {
    a1[9] = v55;
  }
  v37 = v57;
  a1[10] = v56;
  a1[11] = v37;
  v55 = 0;
  v56 = 0;
  sub_2238895FC((uint64_t)&v55);
  v52 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v38 = *((_DWORD *)a1 + 1);
    if (v38)
    {
      v39 = 0;
      v40 = vdupq_n_s32(0x3CF83E10u);
      v53 = v40;
LABEL_70:
      for (i = 0; i != v38; ++i)
      {
        v43 = (_QWORD *)(a1[10] + 48 * (*((_DWORD *)a1 + 12) * v39 + *((_DWORD *)a1 + 13) * i));
        v44 = v43[1];
        if (v43[2] == v44)
          v45 = 0;
        else
          v45 = 22 * ((v43[2] - v44) >> 3) - 1;
        v46 = v43 + 5;
        v47 = v43[5] + v43[4];
        if (v45 == v47)
        {
          sub_2238FAFA8(a1[10] + 48 * (*((_DWORD *)a1 + 12) * v39 + *((_DWORD *)a1 + 13) * i));
          v40 = v53;
          v44 = v43[1];
          v47 = *v46 + v43[4];
        }
        v42 = *(_QWORD *)(v44 + 8 * (v47 / 0x16)) + 180 * (v47 % 0x16);
        *(int32x4_t *)v42 = v40;
        *(int32x4_t *)(v42 + 16) = v40;
        *(int32x4_t *)(v42 + 32) = v40;
        *(int32x4_t *)(v42 + 48) = v40;
        *(int32x4_t *)(v42 + 64) = v40;
        *(int32x4_t *)(v42 + 80) = v40;
        *(int32x4_t *)(v42 + 96) = v40;
        *(int32x4_t *)(v42 + 112) = v40;
        *(_DWORD *)(v42 + 128) = 1022901776;
        *(_BYTE *)(v42 + 132) = 32;
        *(_QWORD *)(v42 + 144) = 0;
        *(_QWORD *)(v42 + 152) = 0;
        *(_QWORD *)(v42 + 136) = 0;
        *(_QWORD *)(v42 + 157) = 0;
        *(_QWORD *)(v42 + 168) = 1065353216;
        *(_DWORD *)(v42 + 176) = 0;
        ++*v46;
      }
      while (++v39 != v52)
      {
        v38 = *((_DWORD *)a1 + 1);
        if (v38)
          goto LABEL_70;
      }
    }
  }
  LODWORD(v62) = 0;
  v54[24] = 0;
  memset(v54, 0, 17);
  __p[0] = 0;
  v63[0] = 0;
  sub_22346A424((unint64_t *)&v55, v63, (unint64_t *)__p, 1, &v62, 1, 0);
  *((_OWORD *)a1 + 7) = 0uLL;
  *(_OWORD *)((char *)a1 + 124) = *(_OWORD *)&v54[12];
  *(_OWORD *)(a1 + 21) = v58;
  a1[18] = v55;
  v48 = (void *)a1[19];
  if (v48)
    free(v48);
  v49 = v57;
  a1[19] = v56;
  a1[20] = v49;
  if (*((_BYTE *)a1 + 36))
  {
    a1[23] = 0;
    a1[24] = 0;
    a1[25] = 0;
  }
}

void sub_2238F2C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2238895FC(v1);
  _Unwind_Resume(a1);
}

void sub_2238F2C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_223889878((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238F2C74@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  float v10;
  float v11;
  float v12;
  float v13;
  char v14;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  const std::error_category *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::mutex *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __n128 *v53;
  _BYTE *v54;
  size_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __n128 *v68;
  _BYTE *v69;
  size_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  std::mutex *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  std::string::size_type size;
  std::string *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  int v87;
  BOOL v88;
  __n128 *v90;
  uint64_t v91;
  __int128 v92;
  std::string *v93;
  size_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  uint64_t v99;
  _OWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  std::mutex *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  std::string::size_type v112;
  int v113;
  BOOL v114;
  __n128 *v116;
  uint64_t v117;
  __int128 v118;
  std::string *v119;
  size_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  std::mutex *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  unint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  __n128 *v138;
  _BYTE *v139;
  size_t v140;
  float v141;
  uint64_t v142;
  float v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  void **v154;
  uint64_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  uint64_t v160;
  float v161;
  float v162;
  float v163;
  std::__shared_weak_count *v164;
  float v165;
  float v166;
  int v167;
  float v168;
  uint64_t v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  long double v176;
  uint64_t v177;
  unint64_t *p_shared_owners;
  unint64_t v179;
  std::__shared_weak_count *v180;
  float v181;
  unint64_t v182;
  unint64_t v183;
  float v184;
  float v185;
  unsigned int v186;
  unint64_t v187;
  unsigned int v188;
  unint64_t v189;
  float v194;
  float v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  unsigned __int8 v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  std::mutex *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  void *v226;
  int v227;
  uint64_t *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  __int128 v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  _QWORD *v274;
  _BYTE *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  std::mutex *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  float v283;
  unint64_t v284;
  _BYTE *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  __n128 *v291;
  _BYTE *v292;
  size_t v293;
  float v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::chrono::steady_clock::time_point v301;
  uint64_t v303;
  unint64_t v304;
  float v305;
  float v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int __val[2];
  int *v311;
  uint64_t v312;
  unsigned int v313;
  void *key[2];
  uint64_t v315;
  uint64_t v316;
  float v317;
  _BYTE v318[56];
  __int128 v319;
  char v320;
  uint64_t (**v321)();
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int16 v326;
  char v327;
  _BYTE v328[28];
  __int128 v329;
  _BYTE v330[24];
  char v331;
  _BYTE v332[80];
  __int128 v333;
  __int128 v334;
  __int128 v335;
  int v336;
  char v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char v342;
  uint64_t v343;
  int v344;
  std::string v345;
  __int128 v346;
  _OWORD v347[2];
  __int128 v348;
  __int128 v349;
  _QWORD v350[2];
  _BYTE __p[72];
  __int16 v352;
  _BYTE v353[28];
  uint64_t v354;

  v354 = *MEMORY[0x24BDAC8D0];
  v301.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v340 = 0;
  v339 = 0;
  v341 = 0;
  *(int32x4_t *)v332 = vdupq_n_s32(0x3CF83E10u);
  *(_OWORD *)&v332[16] = *(_OWORD *)v332;
  *(_OWORD *)&v332[32] = *(_OWORD *)v332;
  *(_OWORD *)&v332[48] = *(_OWORD *)v332;
  *(_OWORD *)&v332[64] = *(_OWORD *)v332;
  v333 = *(_OWORD *)v332;
  v334 = *(_OWORD *)v332;
  v335 = *(_OWORD *)v332;
  v336 = 1022901776;
  v337 = 32;
  v338 = 0;
  v342 = 0;
  v343 = 1065353216;
  v344 = 0;
  v328[24] = 0;
  memset(v328, 0, 17);
  v321 = 0;
  *(_QWORD *)__p = 0;
  sub_2232071B8(&v329, __p, (unint64_t *)&v321, 1, (__int128 *)v332, 1, 0);
  v331 = 1;
  v5 = *(unsigned __int8 *)(a2 + 1120);
  if (!*(_BYTE *)(a2 + 1120))
  {
    v332[0] = 0;
    LOBYTE(v333) = 0;
    if (*(_BYTE *)(a2 + 1208))
      goto LABEL_6;
LABEL_34:
    v6 = 0;
    LOBYTE(v321) = 0;
    v327 = 0;
    goto LABEL_35;
  }
  if ((!*(_DWORD *)(a2 + 1096) || !*(_DWORD *)(a2 + 1100))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1205, (uint64_t)"!scene_type.labels->Empty()", 27, (uint64_t)"Scene type buffer not valid", 27, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C40728(a2 + 1040, (uint64_t)&v321);
  *(_QWORD *)v332 = &off_24EC28E38;
  *(_OWORD *)&v332[8] = v322;
  *(_OWORD *)&v332[24] = v323;
  *(_OWORD *)&v332[40] = v324;
  *(_OWORD *)&v332[56] = v325;
  *(_WORD *)&v332[72] = v326;
  LOBYTE(v333) = 1;
  if (!*(_BYTE *)(a2 + 1208))
    goto LABEL_34;
LABEL_6:
  if ((!*(_DWORD *)(a2 + 1184) || !*(_DWORD *)(a2 + 1188))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1211, (uint64_t)"!scene_type.confidence->Empty()", 31, (uint64_t)"Scene type probability buffer not valid", 39, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3E368(a2 + 1128, (uint64_t)__p);
  v321 = &off_24EC21DF8;
  v322 = *(_OWORD *)&__p[8];
  v323 = *(_OWORD *)&__p[24];
  v324 = *(_OWORD *)&__p[40];
  v325 = *(_OWORD *)&__p[56];
  v326 = v352;
  v6 = 1;
  v327 = 1;
  if (!v5)
  {
LABEL_35:
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9450;
    strcpy(*(char **)__p, "Scene type data not found in frame bundle.");
    v20 = std::generic_category();
    *(_QWORD *)v353 = 22;
    *(_QWORD *)&v353[8] = v20;
    sub_2245321DC((const std::error_condition *)v353, (uint64_t)__p, (CFErrorRef *)v347);
    *(_OWORD *)a3 = v347[0];
    v347[0] = 0uLL;
    *(_BYTE *)(a3 + 16) = 1;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (v6)
      goto LABEL_554;
    goto LABEL_559;
  }
  sub_2238F61A4((uint64_t)v318, a1, (uint64_t)v332, (uint64_t)&v321);
  LOBYTE(v352) = v320;
  if (v320)
  {
    *(_OWORD *)__p = *(_OWORD *)v318;
    *(_OWORD *)&__p[12] = *(_OWORD *)&v318[12];
    v8 = *(_QWORD *)&v318[32];
    v7 = *(_QWORD *)&v318[40];
    *(_QWORD *)&__p[48] = *(_QWORD *)&v318[48];
    *(_QWORD *)&v318[32] = 0;
    *(_QWORD *)&v318[40] = 0;
    *(_OWORD *)&__p[56] = v319;
    if (v331)
    {
      *(_OWORD *)__p = *(_OWORD *)v328;
      *(_OWORD *)&__p[12] = *(_OWORD *)&v328[12];
      *(_OWORD *)&__p[56] = *(_OWORD *)&v330[8];
      *(_OWORD *)&__p[32] = v329;
      *(_QWORD *)&__p[48] = *(_QWORD *)v330;
      *(_OWORD *)v328 = *(_OWORD *)v318;
      *(_OWORD *)&v328[12] = *(_OWORD *)&v318[12];
      *(_OWORD *)&v330[8] = v319;
      *(_QWORD *)&v329 = v8;
      *((_QWORD *)&v329 + 1) = v7;
      *(_QWORD *)v330 = *(_QWORD *)&v318[48];
      sub_2238F99BC((uint64_t)__p);
      sub_2238F99BC((uint64_t)v318);
      if (v331)
        goto LABEL_13;
LABEL_41:
      sub_2232E56F4((_QWORD *)a3, (uint64_t)v328);
      *(_BYTE *)(a3 + 16) = 1;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
      if (*((_QWORD *)&v322 + 1))
        goto LABEL_555;
      goto LABEL_559;
    }
    v25 = *(_OWORD *)v328;
    *(_OWORD *)v328 = *(_OWORD *)v318;
    *(_OWORD *)&v328[12] = *(_OWORD *)&v318[12];
    *(_QWORD *)&v329 = v8;
    *((_QWORD *)&v329 + 1) = v7;
    *(_QWORD *)v330 = *(_QWORD *)&v318[48];
    *(_OWORD *)&__p[32] = 0uLL;
    *(_OWORD *)&v330[8] = v319;
    *(_OWORD *)__p = v25;
    LOBYTE(v352) = 0;
    v331 = v320;
    sub_2238F99BC((uint64_t)__p);
    sub_2238F99BC((uint64_t)v318);
    if (!v331)
      goto LABEL_41;
  }
  else
  {
    v22 = *(_QWORD *)v318;
    v21 = *(_QWORD *)&v318[8];
    *(_QWORD *)v318 = 0;
    *(_QWORD *)&v318[8] = 0;
    if (v331)
    {
      *(_OWORD *)v353 = *(_OWORD *)v328;
      *(_OWORD *)&v353[12] = *(_OWORD *)&v328[12];
      v23 = v329;
      v329 = 0uLL;
      *(_QWORD *)v328 = v22;
      *(_QWORD *)&v328[8] = v21;
      *(_OWORD *)__p = *(_OWORD *)v353;
      *(_OWORD *)&__p[12] = *(_OWORD *)&v353[12];
      *(_OWORD *)&__p[32] = v23;
      *(_OWORD *)&__p[48] = *(_OWORD *)v330;
      *(_QWORD *)&__p[64] = *(_QWORD *)&v330[16];
      LOBYTE(v352) = v331;
      v331 = 0;
      sub_2238F99BC((uint64_t)__p);
      sub_2238F99BC((uint64_t)v318);
      if (!v331)
        goto LABEL_41;
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v328;
      *(_QWORD *)v328 = v22;
      *(_QWORD *)&v328[8] = v21;
      sub_2238F99BC((uint64_t)__p);
      sub_2238F99BC((uint64_t)v318);
      if (!v331)
        goto LABEL_41;
    }
  }
LABEL_13:
  v9 = *(_BYTE *)(a2 + 1216);
  if (*((_BYTE *)a1 + 36))
  {
    v10 = *(float *)(a2 + 1220);
    if (*((_BYTE *)a1 + 188))
      v10 = (float)(v10 * 0.2) + (float)(*((float *)a1 + 46) * 0.8);
    *((float *)a1 + 46) = v10;
    *((_BYTE *)a1 + 188) = 1;
    v11 = *(float *)(a2 + 1224);
    if (*((_BYTE *)a1 + 196))
      v11 = (float)(v11 * 0.2) + (float)(*((float *)a1 + 48) * 0.8);
    *((float *)a1 + 48) = v11;
    *((_BYTE *)a1 + 196) = 1;
    v12 = *(float *)(a2 + 1228);
    if (*((_BYTE *)a1 + 204))
      v12 = (float)(v12 * 0.2) + (float)(*((float *)a1 + 50) * 0.8);
    v13 = fmaxf(v10, 0.0);
    if (v10 <= 0.0)
      v14 = v9;
    else
      v14 = 0;
    _NF = v13 < v11;
    if (v13 < v11)
      v13 = v11;
    *((float *)a1 + 50) = v12;
    *((_BYTE *)a1 + 204) = 1;
    if (_NF)
      v14 = 1;
    if (v13 >= v12)
      v9 = v14;
    else
      v9 = 2;
    *(float *)&v316 = v10;
    *((float *)&v316 + 1) = v11;
    v317 = v12;
    v17 = *(_DWORD *)&v328[8];
    v16 = *(_DWORD *)v328;
    v18 = HIDWORD(*(_QWORD *)&v328[8]);
    v19 = *(_DWORD *)&v328[12] * *(_DWORD *)&v328[4];
    if (!(*(_DWORD *)&v328[12] * *(_DWORD *)&v328[4]))
      goto LABEL_54;
    goto LABEL_46;
  }
  v317 = *(float *)(a2 + 1228);
  v316 = *(_QWORD *)(a2 + 1220);
  v17 = *(_DWORD *)&v328[8];
  v16 = *(_DWORD *)v328;
  v18 = HIDWORD(*(_QWORD *)&v328[8]);
  v19 = *(_DWORD *)&v328[12] * *(_DWORD *)&v328[4];
  if (*(_DWORD *)&v328[12] * *(_DWORD *)&v328[4])
  {
LABEL_46:
    v26 = 0;
    v27 = *((_QWORD *)&v329 + 1);
    v28 = *((_QWORD *)&v329 + 1) + 180 * v19;
    v29 = v17;
    v30 = v18 + v17 - v17 * v16;
    do
    {
      *(_BYTE *)(v27 + 164) = v9;
      *(_QWORD *)(v27 + 168) = v316;
      *(float *)(v27 + 176) = v317;
      v31 = v26 + 1;
      if (v26 + 1 == v16)
        v26 = 0;
      else
        ++v26;
      if (v31 == v16)
        v32 = v30;
      else
        v32 = v29;
      v27 += 180 * v32;
    }
    while (v27 != v28);
  }
LABEL_54:
  sub_224569D7C();
  sub_224569A80();
  v307 = a2;
  v311 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    v33 = sub_2241471F8();
    v34 = v33[2];
    if (!v34)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v34 = v33[2];
    }
    v35 = *(_QWORD *)(v34 + 64);
    v36 = (std::mutex *)(v35 + 32);
    std::mutex::lock((std::mutex *)(v35 + 32));
    v38 = *(_QWORD *)(v35 + 96);
    v37 = *(_QWORD *)(v35 + 104);
    std::mutex::unlock(v36);
    if (v38 != v37)
    {
      *(_QWORD *)__p = "cv3d.recon.";
      *(_QWORD *)&__p[8] = 11;
      *(_QWORD *)&__p[16] = "Keyframing.SceneTypes.IO";
      *(_QWORD *)&__p[24] = 24;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)v318);
      sub_2241471F8();
      v39 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
      if ((v318[23] & 0x80000000) != 0)
        operator delete(*(void **)v318);
      if (v40)
      {
        *(_DWORD *)&__p[24] = 0;
        sub_2232CFAFC(__p, "Keyframing.SceneTypes.IO.label");
        if (*(_DWORD *)&__p[24] == -1)
          sub_22316DD70();
        *(_QWORD *)v318 = v347;
        ((void (*)(_BYTE *__return_ptr, _BYTE *, _BYTE *))off_24EC5C880[*(unsigned int *)&__p[24]])(v353, v318, __p);
        if (*(_DWORD *)&__p[24] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24EC5C850[*(unsigned int *)&__p[24]])(v318, __p);
        *(_QWORD *)__p = "cv3d.recon.";
        *(_QWORD *)&__p[8] = 11;
        v41 = v353[23];
        v42 = v353;
        if (v353[23] < 0)
        {
          v41 = *(_QWORD *)&v353[8];
          v42 = *(_BYTE **)v353;
        }
        *(_QWORD *)&__p[16] = v42;
        *(_QWORD *)&__p[24] = v41;
        sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)v318);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v43 = sub_2241471F8();
          v44 = sub_2241486EC((uint64_t)v43);
          if (!sub_2241053B4(v44))
          {
            sub_2241471F8();
            v45 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
            {
              memset(__p, 0, 32);
              *(_DWORD *)&__p[32] = 728325608;
              kdebug_trace();
              sub_2238F940C(v45, (char *)(a2 + 1216));
              sub_2231874DC((uint64_t)__p);
            }
          }
        }
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 728325624;
        kdebug_trace();
        v46 = v318[23];
        if (v318[23] < 0)
          v46 = *(_QWORD *)&v318[8];
        if (v46 >= 0x11)
        {
          v47 = v318;
          if (v318[23] < 0)
            v47 = *(_BYTE **)v318;
          v48 = *(_QWORD *)v47;
          v49 = *((_QWORD *)v47 + 1);
          v50 = v47[16];
          _ZF = v48 == 0x6365722E64337663 && v49 == 0x73746174532E6E6FLL;
          if (_ZF && v50 == 46)
          {
            v53 = sub_223187510();
            if (v318[23] >= 0)
              v54 = v318;
            else
              v54 = *(_BYTE **)v318;
            if (v318[23] >= 0)
              v55 = v318[23];
            else
              v55 = *(_QWORD *)&v318[8];
            sub_22387FA8C(v53, v54, v55, (unsigned __int8 *)(a2 + 1216), (uint64_t)"input", 5);
          }
        }
        kdebug_trace();
        if ((v318[23] & 0x80000000) != 0)
          operator delete(*(void **)v318);
        *(_QWORD *)__p = "cv3d.recon.";
        *(_QWORD *)&__p[8] = 11;
        v56 = v353[23];
        v57 = v353;
        if (v353[23] < 0)
        {
          v56 = *(_QWORD *)&v353[8];
          v57 = *(_BYTE **)v353;
        }
        *(_QWORD *)&__p[16] = v57;
        *(_QWORD *)&__p[24] = v56;
        sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)v318);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v58 = sub_2241471F8();
          v59 = sub_2241486EC((uint64_t)v58);
          if (!sub_2241053B4(v59))
          {
            sub_2241471F8();
            v60 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60))
            {
              memset(__p, 0, 32);
              *(_DWORD *)&__p[32] = 728325608;
              kdebug_trace();
              LOBYTE(v347[0]) = v9;
              sub_2238F94D8(v60, (char *)v347);
              sub_2231874DC((uint64_t)__p);
            }
          }
        }
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 728325624;
        kdebug_trace();
        v61 = v318[23];
        if (v318[23] < 0)
          v61 = *(_QWORD *)&v318[8];
        if (v61 >= 0x11)
        {
          v62 = v318;
          if (v318[23] < 0)
            v62 = *(_BYTE **)v318;
          v63 = *(_QWORD *)v62;
          v64 = *((_QWORD *)v62 + 1);
          v65 = v62[16];
          if (v63 == 0x6365722E64337663 && v64 == 0x73746174532E6E6FLL && v65 == 46)
          {
            v68 = sub_223187510();
            if (v318[23] >= 0)
              v69 = v318;
            else
              v69 = *(_BYTE **)v318;
            if (v318[23] >= 0)
              v70 = v318[23];
            else
              v70 = *(_QWORD *)&v318[8];
            LOBYTE(v347[0]) = v9;
            sub_22387FA8C(v68, v69, v70, (unsigned __int8 *)v347, (uint64_t)"output", 6);
          }
        }
        kdebug_trace();
        if ((v318[23] & 0x80000000) != 0)
          operator delete(*(void **)v318);
        *(_DWORD *)&__p[24] = 0;
        sub_2232CFAFC(__p, "Keyframing.SceneTypes.IO.probs");
        if (*(_DWORD *)&__p[24] == -1)
          sub_22316DD70();
        *(_QWORD *)v318 = &v345;
        ((void (*)(_OWORD *__return_ptr, _BYTE *, _BYTE *))off_24EC5C880[*(unsigned int *)&__p[24]])(v347, v318, __p);
        if (*(_DWORD *)&__p[24] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24EC5C850[*(unsigned int *)&__p[24]])(v318, __p);
        v71 = 0;
        v72 = (int *)(a2 + 1220);
        do
        {
          *(_QWORD *)__p = "cv3d.recon.";
          *(_QWORD *)&__p[8] = 11;
          v73 = BYTE7(v347[1]);
          if ((SBYTE7(v347[1]) & 0x80u) == 0)
            v74 = v347;
          else
            v74 = *(_OWORD **)&v347[0];
          if (SBYTE7(v347[1]) < 0)
            v73 = *((_QWORD *)&v347[0] + 1);
          *(_QWORD *)&__p[16] = v74;
          *(_QWORD *)&__p[24] = v73;
          sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, &v345);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v75 = sub_2241471F8();
            v76 = v75[2];
            if (!v76)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v76 = v75[2];
            }
            v77 = *(_QWORD *)(v76 + 64);
            v78 = (std::mutex *)(v77 + 32);
            std::mutex::lock((std::mutex *)(v77 + 32));
            v80 = *(_QWORD *)(v77 + 96);
            v79 = *(_QWORD *)(v77 + 104);
            std::mutex::unlock(v78);
            if (v80 != v79)
            {
              sub_2241471F8();
              v81 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
              {
                memset(__p, 0, 32);
                *(_DWORD *)&__p[32] = 728325608;
                kdebug_trace();
                *(_QWORD *)&v348 = (&off_24EC57138)[v71];
                sub_2238F95A8((uint64_t)key, (const char *)&v348);
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
                {
                  *(_OWORD *)v318 = *(_OWORD *)key;
                  *(_QWORD *)&v318[16] = v315;
                  key[0] = 0;
                  key[1] = 0;
                  v315 = 0;
                  *(_QWORD *)&v349 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v349 + 1) = 2;
                  v82 = sub_2241471F8();
                  sub_22361FE58((uint64_t)v82, v81, v72, (uint64_t)v318, &v349);
                  if ((v318[23] & 0x80000000) != 0)
                    operator delete(*(void **)v318);
                }
                if (SHIBYTE(v315) < 0)
                  operator delete(key[0]);
                kdebug_trace();
              }
            }
          }
          memset(__p, 0, 32);
          *(_DWORD *)&__p[32] = 728325624;
          kdebug_trace();
          size = HIBYTE(v345.__r_.__value_.__r.__words[2]);
          if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v345.__r_.__value_.__l.__size_;
          if (size >= 0x11)
          {
            v84 = (v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v345
                : (std::string *)v345.__r_.__value_.__r.__words[0];
            v85 = v84->__r_.__value_.__r.__words[0];
            v86 = v84->__r_.__value_.__l.__size_;
            v87 = v84->__r_.__value_.__s.__data_[16];
            v88 = v85 == 0x6365722E64337663 && v86 == 0x73746174532E6E6FLL;
            if (v88 && v87 == 46)
            {
              v90 = sub_223187510();
              v91 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
              v92 = *(_OWORD *)&v345.__r_.__value_.__l.__data_;
              key[0] = (&off_24EC57138)[v71];
              sub_2238F95A8((uint64_t)v318, (const char *)key);
              v93 = (v91 & 0x80u) == 0 ? &v345 : (std::string *)v92;
              v94 = (v91 & 0x80u) == 0 ? v91 : *((_QWORD *)&v92 + 1);
              v95 = v318[23] >= 0 ? v318 : *(_BYTE **)v318;
              v96 = v318[23] >= 0 ? v318[23] : *(_QWORD *)&v318[8];
              sub_2231897A8((uint64_t *)v90, v93, v94, (float *)v72, (uint64_t)v95, v96);
              a1 = v311;
              if ((v318[23] & 0x80000000) != 0)
                operator delete(*(void **)v318);
            }
          }
          kdebug_trace();
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v345.__r_.__value_.__l.__data_);
          v71 += 2;
          ++v72;
        }
        while (v71 != 6);
        v97 = 0;
        v98 = (float *)&v316;
        do
        {
          *(_QWORD *)__p = "cv3d.recon.";
          *(_QWORD *)&__p[8] = 11;
          v99 = BYTE7(v347[1]);
          if ((SBYTE7(v347[1]) & 0x80u) == 0)
            v100 = v347;
          else
            v100 = *(_OWORD **)&v347[0];
          if (SBYTE7(v347[1]) < 0)
            v99 = *((_QWORD *)&v347[0] + 1);
          *(_QWORD *)&__p[16] = v100;
          *(_QWORD *)&__p[24] = v99;
          sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, &v345);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v101 = sub_2241471F8();
            v102 = v101[2];
            if (!v102)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v102 = v101[2];
            }
            v103 = *(_QWORD *)(v102 + 64);
            v104 = (std::mutex *)(v103 + 32);
            std::mutex::lock((std::mutex *)(v103 + 32));
            v106 = *(_QWORD *)(v103 + 96);
            v105 = *(_QWORD *)(v103 + 104);
            std::mutex::unlock(v104);
            if (v106 != v105)
            {
              sub_2241471F8();
              v107 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
              {
                memset(__p, 0, 32);
                *(_DWORD *)&__p[32] = 728325608;
                kdebug_trace();
                *(_QWORD *)&v348 = (&off_24EC57138)[v97];
                sub_2238F9714((uint64_t)key, (const char *)&v348);
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
                {
                  *(_OWORD *)v318 = *(_OWORD *)key;
                  *(_QWORD *)&v318[16] = v315;
                  key[0] = 0;
                  key[1] = 0;
                  v315 = 0;
                  *(_QWORD *)&v349 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v349 + 1) = 2;
                  v108 = sub_2241471F8();
                  sub_2231AF940((uint64_t)v108, v107, v98, (uint64_t)v318, &v349);
                  if ((v318[23] & 0x80000000) != 0)
                    operator delete(*(void **)v318);
                }
                if (SHIBYTE(v315) < 0)
                  operator delete(key[0]);
                kdebug_trace();
              }
            }
          }
          memset(__p, 0, 32);
          *(_DWORD *)&__p[32] = 728325624;
          kdebug_trace();
          v109 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
          if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v109 = v345.__r_.__value_.__l.__size_;
          if (v109 >= 0x11)
          {
            v110 = (v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v345
                 : (std::string *)v345.__r_.__value_.__r.__words[0];
            v111 = v110->__r_.__value_.__r.__words[0];
            v112 = v110->__r_.__value_.__l.__size_;
            v113 = v110->__r_.__value_.__s.__data_[16];
            v114 = v111 == 0x6365722E64337663 && v112 == 0x73746174532E6E6FLL;
            if (v114 && v113 == 46)
            {
              v116 = sub_223187510();
              v117 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
              v118 = *(_OWORD *)&v345.__r_.__value_.__l.__data_;
              key[0] = (&off_24EC57138)[v97];
              sub_2238F9714((uint64_t)v318, (const char *)key);
              v119 = (v117 & 0x80u) == 0 ? &v345 : (std::string *)v118;
              v120 = (v117 & 0x80u) == 0 ? v117 : *((_QWORD *)&v118 + 1);
              v121 = v318[23] >= 0 ? v318 : *(_BYTE **)v318;
              v122 = v318[23] >= 0 ? v318[23] : *(_QWORD *)&v318[8];
              sub_2231897A8((uint64_t *)v116, v119, v120, v98, (uint64_t)v121, v122);
              a1 = v311;
              if ((v318[23] & 0x80000000) != 0)
                operator delete(*(void **)v318);
            }
          }
          kdebug_trace();
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v345.__r_.__value_.__l.__data_);
          v97 += 2;
          ++v98;
        }
        while (v97 != 6);
        if (SBYTE7(v347[1]) < 0)
          operator delete(*(void **)&v347[0]);
        if ((v353[23] & 0x80000000) != 0)
          operator delete(*(void **)v353);
      }
    }
  }
  *(_QWORD *)__p = "cv3d.recon.";
  *(_QWORD *)&__p[8] = 11;
  *(_QWORD *)&__p[16] = "Stats.Keyframing.AddFrame";
  *(_QWORD *)&__p[24] = 25;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)v318);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v123 = sub_2241471F8();
    v124 = v123[2];
    if (!v124)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v124 = v123[2];
    }
    v125 = *(_QWORD *)(v124 + 64);
    v126 = (std::mutex *)(v125 + 32);
    std::mutex::lock((std::mutex *)(v125 + 32));
    v128 = *(_QWORD *)(v125 + 96);
    v127 = *(_QWORD *)(v125 + 104);
    std::mutex::unlock(v126);
    if (v128 != v127)
    {
      sub_2241471F8();
      v129 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v129 + 24))(v129))
      {
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 728325608;
        kdebug_trace();
        v130 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v301.__d_.__rep_) / 1000000.0;
        v301.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)v353 = v130;
        sub_2238F9880((double *)&qword_255788F20, v129, (float *)v353, "decode (ms)");
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 728325624;
  kdebug_trace();
  v131 = v318[23];
  if (v318[23] < 0)
    v131 = *(_QWORD *)&v318[8];
  if (v131 >= 0x11)
  {
    v132 = v318;
    if (v318[23] < 0)
      v132 = *(_BYTE **)v318;
    v133 = *(_QWORD *)v132;
    v134 = *((_QWORD *)v132 + 1);
    v135 = v132[16];
    if (v133 == 0x6365722E64337663 && v134 == 0x73746174532E6E6FLL && v135 == 46)
    {
      v138 = sub_223187510();
      if (v318[23] >= 0)
        v139 = v318;
      else
        v139 = *(_BYTE **)v318;
      if (v318[23] >= 0)
        v140 = v318[23];
      else
        v140 = *(_QWORD *)&v318[8];
      v141 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v301.__d_.__rep_) / 1000000.0;
      v301.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)v353 = v141;
      sub_2231897A8((uint64_t *)v138, v139, v140, (float *)v353, (uint64_t)"decode (ms)", 11);
    }
  }
  kdebug_trace();
  if ((v318[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v318);
    v303 = *a1;
    if (!(_DWORD)v303)
      goto LABEL_522;
  }
  else
  {
    v303 = *a1;
    if (!(_DWORD)v303)
      goto LABEL_522;
  }
  v142 = a1[1];
  if (!(_DWORD)v142)
    goto LABEL_522;
  v308 = a2 + 232;
  *(_QWORD *)__val = 0;
  v143 = 1.0;
LABEL_262:
  v309 = v142;
  v144 = 0;
  do
  {
    v145 = v311[12] * __val[0] + v311[13] * v144;
    v146 = *((_QWORD *)v311 + 10);
    v147 = (_QWORD *)(v146 + 48 * v145);
    v312 = *((_QWORD *)&v329 + 1);
    v313 = *(_DWORD *)&v328[8] * __val[0] + *(_DWORD *)&v328[12] * v144;
    v148 = *((_QWORD *)&v329 + 1) + 180 * v313;
    v150 = v147 + 5;
    v149 = v147[5];
    if (v149 >= *((unsigned __int8 *)v311 + 8))
    {
      v151 = v146 + 48 * v145;
      v153 = *(_QWORD *)(v151 + 32);
      v152 = (_QWORD *)(v151 + 32);
      v154 = (void **)v147[1];
      *v150 = v149 - 1;
      *v152 = v153 + 1;
      if ((unint64_t)(v153 + 1) >= 0x2C)
      {
        operator delete(*v154);
        v147[1] += 8;
        *v152 -= 22;
      }
    }
    v155 = v312 + 180 * v313;
    if ((*(_BYTE *)(v155 + 132) & 0xDF) != 0)
      v156 = v143;
    else
      v156 = 0.0;
    if (*((_BYTE *)v311 + 28))
      v157 = v156;
    else
      v157 = v143;
    v158 = *(float *)v148;
    v159 = *(float *)(v148 + 4);
    if (*(float *)v148 < v159)
      v158 = *(float *)(v148 + 4);
    v160 = 4 * (*(float *)v148 < v159);
    if (v158 < *(float *)(v148 + 8))
    {
      v158 = *(float *)(v148 + 8);
      v160 = 8;
    }
    if (v158 < *(float *)(v148 + 12))
    {
      v158 = *(float *)(v148 + 12);
      v160 = 12;
    }
    if (v158 < *(float *)(v148 + 16))
    {
      v158 = *(float *)(v148 + 16);
      v160 = 16;
    }
    if (v158 < *(float *)(v148 + 20))
    {
      v158 = *(float *)(v148 + 20);
      v160 = 20;
    }
    if (v158 < *(float *)(v148 + 24))
    {
      v158 = *(float *)(v148 + 24);
      v160 = 24;
    }
    if (v158 < *(float *)(v148 + 28))
    {
      v158 = *(float *)(v148 + 28);
      v160 = 28;
    }
    if (v158 < *(float *)(v148 + 32))
    {
      v158 = *(float *)(v148 + 32);
      v160 = 32;
    }
    if (v158 < *(float *)(v148 + 36))
    {
      v158 = *(float *)(v148 + 36);
      v160 = 36;
    }
    if (v158 < *(float *)(v148 + 40))
    {
      v158 = *(float *)(v148 + 40);
      v160 = 40;
    }
    if (v158 < *(float *)(v148 + 44))
    {
      v158 = *(float *)(v148 + 44);
      v160 = 44;
    }
    if (v158 < *(float *)(v148 + 48))
    {
      v158 = *(float *)(v148 + 48);
      v160 = 48;
    }
    if (v158 < *(float *)(v148 + 52))
    {
      v158 = *(float *)(v148 + 52);
      v160 = 52;
    }
    if (v158 < *(float *)(v148 + 56))
    {
      v158 = *(float *)(v148 + 56);
      v160 = 56;
    }
    if (v158 < *(float *)(v148 + 60))
    {
      v158 = *(float *)(v148 + 60);
      v160 = 60;
    }
    if (v158 < *(float *)(v148 + 64))
    {
      v158 = *(float *)(v148 + 64);
      v160 = 64;
    }
    if (v158 < *(float *)(v148 + 68))
    {
      v158 = *(float *)(v148 + 68);
      v160 = 68;
    }
    if (v158 < *(float *)(v148 + 72))
    {
      v158 = *(float *)(v148 + 72);
      v160 = 72;
    }
    if (v158 < *(float *)(v148 + 76))
    {
      v158 = *(float *)(v148 + 76);
      v160 = 76;
    }
    if (v158 < *(float *)(v148 + 80))
    {
      v158 = *(float *)(v148 + 80);
      v160 = 80;
    }
    if (v158 < *(float *)(v148 + 84))
    {
      v158 = *(float *)(v148 + 84);
      v160 = 84;
    }
    if (v158 < *(float *)(v148 + 88))
    {
      v158 = *(float *)(v148 + 88);
      v160 = 88;
    }
    if (v158 < *(float *)(v148 + 92))
    {
      v158 = *(float *)(v148 + 92);
      v160 = 92;
    }
    if (v158 < *(float *)(v148 + 96))
    {
      v158 = *(float *)(v148 + 96);
      v160 = 96;
    }
    if (v158 < *(float *)(v148 + 100))
    {
      v158 = *(float *)(v148 + 100);
      v160 = 100;
    }
    if (v158 < *(float *)(v148 + 104))
    {
      v158 = *(float *)(v148 + 104);
      v160 = 104;
    }
    if (v158 < *(float *)(v148 + 108))
    {
      v158 = *(float *)(v148 + 108);
      v160 = 108;
    }
    if (v158 < *(float *)(v148 + 112))
    {
      v158 = *(float *)(v148 + 112);
      v160 = 112;
    }
    if (v158 < *(float *)(v148 + 116))
    {
      v158 = *(float *)(v148 + 116);
      v160 = 116;
    }
    if (v158 < *(float *)(v148 + 120))
    {
      v158 = *(float *)(v148 + 120);
      v160 = 120;
    }
    if (v158 < *(float *)(v148 + 124))
    {
      v158 = *(float *)(v148 + 124);
      v160 = 124;
    }
    if (v158 < *(float *)(v148 + 128))
      v160 = 128;
    v161 = *(float *)(v148 + v160);
    *(float *)(v155 + 140) = v161;
    if (*((_BYTE *)v311 + 20))
    {
      v162 = *((float *)v311 + 6);
      v163 = 1.0;
      if (v161 <= v162)
        v163 = expf((float)(v161 - v162) + (float)(v161 - v162));
      v157 = v157 * v163;
    }
    if (!*(_BYTE *)(a2 + 288))
    {
LABEL_370:
      if (!*(_BYTE *)(a2 + 56))
        goto LABEL_399;
      goto LABEL_371;
    }
    if ((!*(_DWORD *)(a2 + 264) || !*(_DWORD *)(a2 + 268))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
    {
LABEL_566:
      abort();
    }
    sub_223C3F490(v308, (uint64_t)v318);
    v164 = *(std::__shared_weak_count **)&v318[16];
    *(_QWORD *)__p = &off_24EC21420;
    *(_QWORD *)&__p[8] = *(_QWORD *)&v318[8];
    *(_QWORD *)&__p[16] = *(_QWORD *)&v318[16];
    *(_OWORD *)&__p[24] = *(_OWORD *)&v318[24];
    *(_OWORD *)&__p[34] = *(_OWORD *)&v318[34];
    __p[56] = 1;
    if (*((_BYTE *)v311 + 9))
    {
      v165 = *((float *)v311 + 3);
      v166 = *((float *)v311 + 4);
      sub_223CA69C4((uint64_t)__p, 4, (uint64_t)v318, *(uint32x4_t *)&v318[34]);
      v167 = *(_DWORD *)&v318[4];
      v169 = *(_QWORD *)&v318[8];
      v168 = *(float *)&v318[16];
      v170 = *(float *)&v318[16]
           + (float)((float)(*(float *)&v318[4] + *(float *)&v318[8]) + (float)(*(float *)&v318[12] * 0.75));
      if (v170 <= v165)
      {
        v172 = 1.0;
        v173 = 1.0;
        if (*(float *)&v318[4] >= v166)
          v173 = exp((float)((float)(*(float *)&v318[4] - v166) * -2.0) / (1.0 - v166));
        v305 = v173;
        if (*(float *)&v169 >= v166)
          v172 = exp((float)((float)(*(float *)&v169 - v166) * -2.0) / (1.0 - v166));
        v306 = v172;
        v174 = 1.0;
        v175 = 1.0;
        if (*((float *)&v169 + 1) >= 0.9)
        {
          v176 = exp((float)(*((float *)&v169 + 1) + -0.9) / -0.100000024);
          v174 = 1.0;
          v175 = v176;
        }
        if (v168 >= v166)
          v174 = exp((float)((float)(v168 - v166) * -2.0) / (1.0 - v166));
        v171 = (float)((float)(v305 * v306) * v175) * v174;
      }
      else
      {
        v171 = 1.0;
        if (v170 >= v165)
          v171 = exp((float)-(float)(v170 - v165) / (1.0 - v165));
      }
      v157 = v157 * v171;
      v177 = v312 + 180 * v313;
      *(_DWORD *)(v177 + 144) = v167;
      *(_QWORD *)(v177 + 148) = v169;
      *(float *)(v177 + 156) = v168;
      if (!__p[56])
      {
        v143 = 1.0;
        if (!*(_BYTE *)(a2 + 56))
          goto LABEL_399;
        goto LABEL_371;
      }
      v164 = *(std::__shared_weak_count **)&__p[16];
      v143 = 1.0;
    }
    if (!v164)
      goto LABEL_370;
    p_shared_owners = (unint64_t *)&v164->__shared_owners_;
    do
      v179 = __ldaxr(p_shared_owners);
    while (__stlxr(v179 - 1, p_shared_owners));
    if (v179)
      goto LABEL_370;
    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
    std::__shared_weak_count::__release_weak(v164);
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_399;
LABEL_371:
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_566;
    }
    sub_223C3BF78(a2, (uint64_t)v318);
    v180 = *(std::__shared_weak_count **)&v318[16];
    *(_QWORD *)__p = &off_24EC200A8;
    *(_QWORD *)&__p[8] = *(_QWORD *)&v318[8];
    *(_QWORD *)&__p[16] = *(_QWORD *)&v318[16];
    *(_OWORD *)&__p[24] = *(_OWORD *)&v318[24];
    *(_OWORD *)&__p[34] = *(_OWORD *)&v318[34];
    __p[56] = 1;
    if (*((_BYTE *)v311 + 29))
    {
      v181 = *((float *)v311 + 8);
      v182 = *(unsigned int *)&__p[32];
      v183 = *(unsigned int *)&__p[36];
      if (*(_DWORD *)&__p[32] && *(_DWORD *)&__p[36])
        goto LABEL_380;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/SceneTypeBundle.cpp", 94, (uint64_t)"(depth.Width() >= 1 && depth.Height() >= 1)", 43, (uint64_t)"Depth size is too small", 23, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v184 = 0.0;
      v185 = 0.0;
      if ((_DWORD)v183)
      {
        if ((_DWORD)v182)
        {
LABEL_380:
          v186 = 0;
          v187 = 0;
          v185 = 0.0;
          do
          {
            v188 = 0;
            v189 = 0;
            do
            {
              _H1 = *(_WORD *)(*(_QWORD *)&__p[24] + 2 * (*(_DWORD *)&__p[44] * v187) + 2 * v188);
              __asm { FCVT            S1, H1 }
              if (_S1 <= -65504.0)
                _S1 = -0.0;
              else
                ++v186;
              v185 = v185 + _S1;
              v189 += 4;
              v188 += 4 * *(_DWORD *)&__p[40];
            }
            while (v189 < v182);
            v187 += 4;
          }
          while (v187 < v183);
          v184 = (float)v186;
        }
      }
      v194 = v185 / v184;
      v195 = 1.0;
      if (v194 <= v181)
        v195 = expf((float)(v194 - v181) * 0.5);
      v157 = v157 * v195;
      *(float *)(v312 + 180 * v313 + 160) = v194;
      a2 = v307;
    }
    if (v180)
    {
      v196 = (unint64_t *)&v180->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
LABEL_399:
    v198 = v147[1];
    _ZF = v147[2] == v198;
    v199 = 22 * ((v147[2] - v198) >> 3) - 1;
    v200 = v312 + 180 * v313;
    *(float *)(v200 + 136) = v157;
    v201 = (void *)(v200 + 136);
    if (_ZF)
      v202 = 0;
    else
      v202 = v199;
    v203 = v146 + 48 * v145;
    v205 = *(_QWORD *)(v203 + 32);
    v204 = (_QWORD *)(v203 + 32);
    v206 = *v150 + v205;
    if (v202 == v206)
    {
      sub_2238FAFA8(v146 + 48 * v145);
      v198 = v147[1];
      v206 = *v150 + *v204;
    }
    v207 = *(_QWORD *)(v198 + 8 * (v206 / 0x16)) + 180 * (v206 % 0x16);
    v208 = *(_OWORD *)v148;
    v209 = *(_OWORD *)(v148 + 16);
    v210 = *(_OWORD *)(v148 + 48);
    *(_OWORD *)(v207 + 32) = *(_OWORD *)(v148 + 32);
    *(_OWORD *)(v207 + 48) = v210;
    *(_OWORD *)v207 = v208;
    *(_OWORD *)(v207 + 16) = v209;
    v211 = *(_OWORD *)(v148 + 64);
    v212 = *(_OWORD *)(v148 + 80);
    v213 = *(_OWORD *)(v148 + 112);
    *(_OWORD *)(v207 + 96) = *(_OWORD *)(v148 + 96);
    *(_OWORD *)(v207 + 112) = v213;
    *(_OWORD *)(v207 + 64) = v211;
    *(_OWORD *)(v207 + 80) = v212;
    v214 = *(_OWORD *)(v148 + 128);
    v215 = *(_OWORD *)(v148 + 144);
    v216 = *(_OWORD *)(v148 + 160);
    *(_DWORD *)(v207 + 176) = *(_DWORD *)(v148 + 176);
    *(_OWORD *)(v207 + 144) = v215;
    *(_OWORD *)(v207 + 160) = v216;
    *(_OWORD *)(v207 + 128) = v214;
    ++*v150;
    LOBYTE(v207) = atomic_load((unsigned __int8 *)&qword_255795630);
    if ((v207 & 1) == 0 && __cxa_guard_acquire(&qword_255795630))
    {
      v274 = operator new(0x20uLL);
      v274[1] = 0;
      v274[2] = 0;
      *v274 = &off_24EC7AA58;
      v274[3] = &off_24EC7A9C0;
      qword_255795620 = (uint64_t)(v274 + 3);
      *(_QWORD *)algn_255795628 = v274;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)__p = 0;
      sub_223167354((uint64_t)__p);
      __cxa_atexit((void (*)(void *))sub_224569E58, &qword_255795620, &dword_22314D000);
      __cxa_guard_release(&qword_255795630);
      a2 = v307;
      v143 = 1.0;
    }
    v217 = atomic_load((unsigned __int8 *)&qword_255795618);
    if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_255795618))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, &qword_255795600);
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255795600, &dword_22314D000);
      __cxa_guard_release(&qword_255795618);
      a2 = v307;
      v143 = 1.0;
    }
    if (os_variant_has_internal_diagnostics())
    {
      v218 = sub_2241471F8();
      v219 = v218[2];
      if (!v219)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_566;
        }
        v219 = v218[2];
      }
      v220 = *(_QWORD *)(v219 + 64);
      v221 = (std::mutex *)(v220 + 32);
      std::mutex::lock((std::mutex *)(v220 + 32));
      v223 = *(_QWORD *)(v220 + 96);
      v222 = *(_QWORD *)(v220 + 104);
      std::mutex::unlock(v221);
      if (v223 != v222)
      {
        v224 = (char *)operator new(0x28uLL);
        strcpy(v224, "cv3d.recon.Keyframing.SceneTypes.Stats");
        sub_2241471F8();
        v225 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v225 + 24))(v225))
        {
          kdebug_trace();
          *(_DWORD *)&v318[24] = 0;
          sub_223846334(v318, "block_");
          std::to_string((std::string *)v353, __val[0]);
          *(_QWORD *)__p = v318;
          *(_QWORD *)&__p[8] = v353;
          *(_QWORD *)&__p[16] = v318;
          *(_QWORD *)&__p[24] = v353;
          *(_QWORD *)&__p[32] = v353;
          if (*(_DWORD *)&v318[24] == -1)
            sub_22316DD70();
          *(_QWORD *)&v347[0] = __p;
          ((void (*)(_OWORD *, _BYTE *))off_24EC5C8B0[*(unsigned int *)&v318[24]])(v347, v318);
          if ((v353[23] & 0x80000000) != 0)
            operator delete(*(void **)v353);
          *(_QWORD *)__p = v318;
          *(_QWORD *)&__p[8] = "_";
          *(_QWORD *)&__p[16] = v318;
          *(_QWORD *)&__p[24] = "_";
          *(_QWORD *)&__p[32] = "_";
          if (*(_DWORD *)&v318[24] == -1)
            sub_22316DD70();
          *(_QWORD *)v353 = __p;
          ((void (*)(_BYTE *, _BYTE *))off_24EC5C898[*(unsigned int *)&v318[24]])(v353, v318);
          std::to_string((std::string *)v353, (*(_QWORD *)__val | (unint64_t)(v144 << 32)) >> 32);
          *(_QWORD *)__p = v318;
          *(_QWORD *)&__p[8] = v353;
          *(_QWORD *)&__p[16] = v318;
          *(_QWORD *)&__p[24] = v353;
          *(_QWORD *)&__p[32] = v353;
          if (*(_DWORD *)&v318[24] == -1)
            sub_22316DD70();
          *(_QWORD *)&v347[0] = __p;
          ((void (*)(_OWORD *, _BYTE *))off_24EC5C8B0[*(unsigned int *)&v318[24]])(v347, v318);
          if ((v353[23] & 0x80000000) != 0)
            operator delete(*(void **)v353);
          if (*(_DWORD *)&v318[24] == -1)
            sub_22316DD70();
          *(_QWORD *)__p = v353;
          ((void (*)(std::string *__return_ptr, _BYTE *, _BYTE *))off_24EC5C880[*(unsigned int *)&v318[24]])(&v345, __p, v318);
          if (*(_DWORD *)&v318[24] != -1)
            ((void (*)(_BYTE *, _BYTE *))off_24EC5C850[*(unsigned int *)&v318[24]])(__p, v318);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v225 + 24))(v225))
          {
            v350[0] = v345.__r_.__value_.__l.__size_;
            v226 = (void *)v345.__r_.__value_.__r.__words[0];
            *(_QWORD *)((char *)v350 + 7) = *(std::string::size_type *)((char *)&v345.__r_.__value_.__r.__words[1] + 7);
            v227 = SHIBYTE(v345.__r_.__value_.__r.__words[2]);
            memset(&v345, 0, sizeof(v345));
            *(_QWORD *)&v346 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v304 = v304 & 0xFFFFFFFFFFFFFF00 | 2;
            *((_QWORD *)&v346 + 1) = v304;
            v228 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v225 + 24))(v225))
            {
              *(_QWORD *)&__p[8] = 0;
              *(_QWORD *)&__p[16] = 0;
              *(_QWORD *)__p = &__p[8];
              sub_2245314F4(__p, key);
              v349 = *(_OWORD *)key;
              sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
              __p[23] = 10;
              strcpy(__p, "confidence");
              sub_224527BAC((uint64_t)__p, (CFStringRef *)key);
              sub_223426BD4((uint64_t)&v349, key[0], v201);
              v229 = (std::__shared_weak_count *)key[1];
              if (!key[1])
                goto LABEL_428;
              v230 = (unint64_t *)((char *)key[1] + 8);
              do
                v231 = __ldaxr(v230);
              while (__stlxr(v231 - 1, v230));
              if (!v231)
              {
                ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                std::__shared_weak_count::__release_weak(v229);
                if ((__p[23] & 0x80000000) != 0)
LABEL_429:
                  operator delete(*(void **)__p);
              }
              else
              {
LABEL_428:
                if ((__p[23] & 0x80000000) != 0)
                  goto LABEL_429;
              }
              __p[23] = 11;
              strcpy(__p, "floor_ratio");
              sub_224527BAC((uint64_t)__p, (CFStringRef *)key);
              sub_223426BD4((uint64_t)&v349, key[0], (void *)(v312 + 180 * v313 + 144));
              v232 = (std::__shared_weak_count *)key[1];
              if (!key[1])
                goto LABEL_434;
              v233 = (unint64_t *)((char *)key[1] + 8);
              do
                v234 = __ldaxr(v233);
              while (__stlxr(v234 - 1, v233));
              if (!v234)
              {
                ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                std::__shared_weak_count::__release_weak(v232);
                if ((__p[23] & 0x80000000) != 0)
LABEL_435:
                  operator delete(*(void **)__p);
              }
              else
              {
LABEL_434:
                if ((__p[23] & 0x80000000) != 0)
                  goto LABEL_435;
              }
              __p[23] = 13;
              strcpy(__p, "ceiling_ratio");
              sub_224527BAC((uint64_t)__p, (CFStringRef *)key);
              sub_223426BD4((uint64_t)&v349, key[0], (void *)(v312 + 180 * v313 + 148));
              v235 = (std::__shared_weak_count *)key[1];
              if (!key[1])
                goto LABEL_440;
              v236 = (unint64_t *)((char *)key[1] + 8);
              do
                v237 = __ldaxr(v236);
              while (__stlxr(v237 - 1, v236));
              if (!v237)
              {
                ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                std::__shared_weak_count::__release_weak(v235);
                if ((__p[23] & 0x80000000) != 0)
LABEL_441:
                  operator delete(*(void **)__p);
              }
              else
              {
LABEL_440:
                if ((__p[23] & 0x80000000) != 0)
                  goto LABEL_441;
              }
              __p[23] = 10;
              strcpy(__p, "wall_ratio");
              sub_224527BAC((uint64_t)__p, (CFStringRef *)key);
              sub_223426BD4((uint64_t)&v349, key[0], (void *)(v312 + 180 * v313 + 152));
              v238 = (std::__shared_weak_count *)key[1];
              if (!key[1])
                goto LABEL_446;
              v239 = (unint64_t *)((char *)key[1] + 8);
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                std::__shared_weak_count::__release_weak(v238);
                if ((__p[23] & 0x80000000) != 0)
LABEL_447:
                  operator delete(*(void **)__p);
              }
              else
              {
LABEL_446:
                if ((__p[23] & 0x80000000) != 0)
                  goto LABEL_447;
              }
              __p[23] = 13;
              strcpy(__p, "unknown_ratio");
              sub_224527BAC((uint64_t)__p, (CFStringRef *)key);
              sub_223426BD4((uint64_t)&v349, key[0], (void *)(v312 + 180 * v313 + 156));
              v241 = (std::__shared_weak_count *)key[1];
              if (!key[1])
                goto LABEL_452;
              v242 = (unint64_t *)((char *)key[1] + 8);
              do
                v243 = __ldaxr(v242);
              while (__stlxr(v243 - 1, v242));
              if (!v243)
              {
                ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                std::__shared_weak_count::__release_weak(v241);
                if ((__p[23] & 0x80000000) != 0)
LABEL_453:
                  operator delete(*(void **)__p);
              }
              else
              {
LABEL_452:
                if ((__p[23] & 0x80000000) != 0)
                  goto LABEL_453;
              }
              __p[23] = 13;
              strcpy(__p, "average_depth");
              sub_224527BAC((uint64_t)__p, (CFStringRef *)key);
              sub_223426BD4((uint64_t)&v349, key[0], (void *)(v312 + 180 * v313 + 160));
              v244 = (std::__shared_weak_count *)key[1];
              if (!key[1])
                goto LABEL_458;
              v245 = (unint64_t *)((char *)key[1] + 8);
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (!v246)
              {
                ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                std::__shared_weak_count::__release_weak(v244);
                if ((__p[23] & 0x80000000) != 0)
LABEL_459:
                  operator delete(*(void **)__p);
              }
              else
              {
LABEL_458:
                if ((__p[23] & 0x80000000) != 0)
                  goto LABEL_459;
              }
              v348 = v349;
              *(_QWORD *)v318 = v226;
              *(_QWORD *)&v318[8] = v350[0];
              *(_QWORD *)&v318[15] = *(_QWORD *)((char *)v350 + 7);
              v318[23] = v227;
              v350[0] = 0;
              *(_QWORD *)((char *)v350 + 7) = 0;
              v318[24] = 1;
              sub_2231AD9F0((uint64_t)&v348, (__int128 *)v318, &v346, v353);
              if (v318[24] && (v318[23] & 0x80000000) != 0)
                operator delete(*(void **)v318);
              v247 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
              if (*((_QWORD *)&v348 + 1))
              {
                v248 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
                do
                  v249 = __ldaxr(v248);
                while (__stlxr(v249 - 1, v248));
                if (!v249)
                {
                  ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                  std::__shared_weak_count::__release_weak(v247);
                }
              }
              v250 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v225 + 56))(v225);
              v251 = *v250;
              v252 = (std::__shared_weak_count *)v250[1];
              if (v252)
              {
                v253 = (unint64_t *)&v252->__shared_owners_;
                do
                  v254 = __ldxr(v253);
                while (__stxr(v254 + 1, v253));
              }
              v255 = *(_OWORD *)&v353[8];
              *(_QWORD *)&v347[0] = &off_24EC6A3B8;
              *(_OWORD *)((char *)v347 + 8) = *(_OWORD *)&v353[8];
              *(_OWORD *)&v353[8] = 0uLL;
              *(_QWORD *)__p = v251;
              *(_QWORD *)&__p[8] = v252;
              if (v252)
              {
                v256 = (unint64_t *)&v252->__shared_owners_;
                do
                  v257 = __ldxr(v256);
                while (__stxr(v257 + 1, v256));
              }
              *(_QWORD *)&__p[16] = &off_24EC6A3B8;
              *(_OWORD *)&__p[24] = v255;
              if (*((_QWORD *)&v255 + 1))
              {
                v258 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
                do
                  v259 = __ldxr(v258);
                while (__stxr(v259 + 1, v258));
              }
              (*(void (**)(uint64_t *, _BYTE *))(*v228 + 16))(v228, __p);
              v260 = *(std::__shared_weak_count **)&__p[32];
              if (!*(_QWORD *)&__p[32])
                goto LABEL_481;
              v261 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
              do
                v262 = __ldaxr(v261);
              while (__stlxr(v262 - 1, v261));
              if (!v262)
              {
                ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                std::__shared_weak_count::__release_weak(v260);
                v263 = *(std::__shared_weak_count **)&__p[8];
                if (*(_QWORD *)&__p[8])
                {
LABEL_482:
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
              }
              else
              {
LABEL_481:
                v263 = *(std::__shared_weak_count **)&__p[8];
                if (*(_QWORD *)&__p[8])
                  goto LABEL_482;
              }
              v266 = *(std::__shared_weak_count **)&v347[1];
              if (!*(_QWORD *)&v347[1])
                goto LABEL_503;
              v267 = (unint64_t *)(*(_QWORD *)&v347[1] + 8);
              do
                v268 = __ldaxr(v267);
              while (__stlxr(v268 - 1, v267));
              if (!v268)
              {
                ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                std::__shared_weak_count::__release_weak(v266);
                if (v252)
                {
LABEL_504:
                  v269 = (unint64_t *)&v252->__shared_owners_;
                  do
                    v270 = __ldaxr(v269);
                  while (__stlxr(v270 - 1, v269));
                  if (!v270)
                  {
                    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                    std::__shared_weak_count::__release_weak(v252);
                  }
                }
              }
              else
              {
LABEL_503:
                if (v252)
                  goto LABEL_504;
              }
              v271 = *(std::__shared_weak_count **)&v353[16];
              if (*(_QWORD *)&v353[16])
              {
                v272 = (unint64_t *)(*(_QWORD *)&v353[16] + 8);
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                  std::__shared_weak_count::__release_weak(v271);
                }
              }
            }
            else if (v227 < 0)
            {
              operator delete(v226);
            }
          }
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v345.__r_.__value_.__l.__data_);
          kdebug_trace();
        }
        operator delete(v224);
      }
    }
    ++v144;
  }
  while (v144 != v309);
  while (++*(_QWORD *)__val != v303)
  {
    v142 = v311[1];
    if (v311[1])
      goto LABEL_262;
  }
LABEL_522:
  *(_QWORD *)__p = "cv3d.recon.";
  *(_QWORD *)&__p[8] = 11;
  *(_QWORD *)&__p[16] = "Stats.Keyframing.AddFrame";
  *(_QWORD *)&__p[24] = 25;
  sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)v318);
  sub_224569D7C();
  v275 = (_BYTE *)a3;
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v276 = sub_2241471F8();
    v277 = v276[2];
    if (!v277)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v277 = v276[2];
    }
    v278 = *(_QWORD *)(v277 + 64);
    v279 = (std::mutex *)(v278 + 32);
    std::mutex::lock((std::mutex *)(v278 + 32));
    v281 = *(_QWORD *)(v278 + 96);
    v280 = *(_QWORD *)(v278 + 104);
    std::mutex::unlock(v279);
    if (v281 == v280)
    {
      v275 = (_BYTE *)a3;
    }
    else
    {
      sub_2241471F8();
      v282 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v275 = (_BYTE *)a3;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v282 + 24))(v282))
      {
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 728325608;
        kdebug_trace();
        v283 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v301.__d_.__rep_) / 1000000.0;
        v301.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)v353 = v283;
        sub_2238B9B50((double *)&qword_255788F20, v282, (float *)v353, "compute_confidence (ms)");
        kdebug_trace();
      }
    }
  }
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 728325624;
  kdebug_trace();
  v284 = v318[23];
  if (v318[23] < 0)
    v284 = *(_QWORD *)&v318[8];
  if (v284 >= 0x11)
  {
    v285 = v318;
    if (v318[23] < 0)
      v285 = *(_BYTE **)v318;
    v286 = *(_QWORD *)v285;
    v287 = *((_QWORD *)v285 + 1);
    v288 = v285[16];
    if (v286 == 0x6365722E64337663 && v287 == 0x73746174532E6E6FLL && v288 == 46)
    {
      v291 = sub_223187510();
      if (v318[23] >= 0)
        v292 = v318;
      else
        v292 = *(_BYTE **)v318;
      if (v318[23] >= 0)
        v293 = v318[23];
      else
        v293 = *(_QWORD *)&v318[8];
      v294 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v301.__d_.__rep_) / 1000000.0;
      std::chrono::steady_clock::now();
      *(float *)v353 = v294;
      sub_2231897A8((uint64_t *)v291, v292, v293, (float *)v353, (uint64_t)"compute_confidence (ms)", 23);
      v275 = (_BYTE *)a3;
    }
  }
  kdebug_trace();
  if ((v318[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v318);
    *v275 = 0;
    v275[16] = 0;
    if (v327)
      goto LABEL_554;
  }
  else
  {
    *v275 = 0;
    v275[16] = 0;
    if (!v327)
      goto LABEL_559;
LABEL_554:
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
    if (*((_QWORD *)&v322 + 1))
    {
LABEL_555:
      v295 = (unint64_t *)&v24->__shared_owners_;
      do
        v296 = __ldaxr(v295);
      while (__stlxr(v296 - 1, v295));
      if (!v296)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
LABEL_559:
  if ((_BYTE)v333)
  {
    v297 = *(std::__shared_weak_count **)&v332[16];
    if (*(_QWORD *)&v332[16])
    {
      v298 = (unint64_t *)(*(_QWORD *)&v332[16] + 8);
      do
        v299 = __ldaxr(v298);
      while (__stlxr(v299 - 1, v298));
      if (!v299)
      {
        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
        std::__shared_weak_count::__release_weak(v297);
      }
    }
  }
  return sub_2238F99BC((uint64_t)v328);
}

void sub_2238F5B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  if (LOBYTE(STACK[0x318]))
  {
    if (SLOBYTE(STACK[0x317]) < 0)
      operator delete((void *)STACK[0x300]);
  }
  __cxa_guard_abort(&qword_255795618);
  sub_2231BD3DC((uint64_t)&a46);
  sub_2236FE284((uint64_t)&a67);
  sub_2238F99BC((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_2238F61A4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  BOOL v28;
  char v29;
  std::string::size_type v30;
  _BOOL8 v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  size_t v35;
  float *v36;
  float v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  long double v44;
  float v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int i;
  float *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  std::mutex *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  std::string::size_type v72;
  std::string *p_p;
  uint64_t v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void **v79;
  size_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  size_t v88;
  unint64_t v89;
  size_t v90;
  unint64_t v91;
  void **v92;
  size_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  uint64_t v102;
  uint64_t v103;
  std::mutex *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  void **v108;
  void **v109;
  uint64_t v110;
  char **v111;
  std::string::size_type v112;
  char *v113;
  std::string *p_dst;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  void **v144;
  void *v145;
  void *v146;
  int v147;
  BOOL v148;
  unsigned __int8 v150;
  void **v151;
  size_t v152;
  char **v153;
  size_t v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  unint64_t v167;
  std::mutex *v168;
  size_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  size_t v176;
  unint64_t v177;
  _BYTE *v178;
  size_t v179;
  unint64_t v180;
  _BYTE *v181;
  unint64_t v182;
  _BYTE *v183;
  unint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  unint64_t v188;
  size_t v189;
  unint64_t v190;
  _BYTE *v191;
  size_t v192;
  unint64_t v193;
  float *v194;
  _BYTE *v195;
  size_t v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  size_t v202;
  size_t v203;
  _BYTE *v204;
  _BYTE *v205;
  size_t v206;
  _QWORD *v207;
  uint64_t *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unsigned __int8 v213;
  const char *v214;
  size_t v215;
  _BYTE *v216;
  unint64_t v217;
  const char *v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void **v224;
  NSObject *v225;
  uint64_t v226;
  uint64_t v227;
  size_t v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  unint64_t *p_shared_owners;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::string::size_type v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  void *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  const std::error_category *v264;
  __int128 v265;
  __int128 *v266;
  __int128 *v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  float v272;
  unsigned int v273;
  unsigned __int8 v274;
  unsigned __int8 v275;
  uint64_t v276;
  const void *v277;
  size_t v278;
  unsigned __int8 v279;
  int v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  size_t v285;
  unsigned __int8 v286;
  unsigned __int8 v287;
  const char *v288;
  size_t v289;
  _BYTE *v290;
  __int128 *v291;
  uint64_t v292;
  uint64_t v293;
  void **v294;
  uint64_t v295;
  uint64_t v296;
  NSObject *v297;
  size_t v298;
  std::__shared_weak_count_vtbl *v299;
  std::__shared_weak_count *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  _DWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  void *v316;
  uint64_t *v317;
  uint64_t v318;
  _QWORD *v319;
  __int128 v320;
  int v321;
  const char *v322;
  int v323;
  const char *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::string::size_type v337;
  uint64_t v338;
  _QWORD *v339;
  __int128 v340;
  int v341;
  const char *v342;
  int v343;
  const char *v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *size;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  int v365;
  uint64_t v366;
  unsigned int v369;
  uint64_t v370;
  char *v371;
  int v372;
  int v373;
  char *v374;
  _BYTE *v375;
  char *__src;
  unsigned int *v377;
  uint64_t v378;
  uint64_t v379;
  char *category;
  int categorya;
  char *categoryb;
  int v383;
  uint64_t v384;
  unsigned int v385[2];
  int v386;
  unsigned int v387[2];
  unsigned int __val[2];
  int __vala;
  unsigned int __valb[2];
  _BYTE v391[28];
  __int128 v392;
  uint64_t v393;
  __int128 v394;
  std::string __p;
  int v396;
  const char *v397;
  int v398;
  const char *v399;
  __int128 v400;
  std::string v401;
  char v402;
  void *v403[3];
  void *v404[2];
  unsigned __int8 v405;
  __int128 v406;
  std::string __dst;
  _BYTE *v408;
  __int128 v409;
  _BYTE v410[40];
  void **v411;
  size_t v412;
  __int128 v413;
  uint64_t v414;

  v414 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a3 + 56);
  if (v5)
    v6 = *(_DWORD *)(a3 + 60) == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Utils/SceneTypePreprocessor.cpp", 314, (uint64_t)"!scene_type.Empty()", 19, (uint64_t)"Expect valid scene type", 23, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_DWORD *)(a3 + 56);
  }
  if (v5 != *(_DWORD *)(a4 + 56) || *(_DWORD *)(a3 + 60) != *(_DWORD *)(a4 + 60))
  {
    v16 = atomic_load((unsigned __int8 *)&qword_2540CC9E8);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC9E8))
    {
      sub_22455F53C(&__p);
      sub_223174DE4(v410, "cv3d.recon.kf");
      sub_2232300E0((uint64_t **)&__p, (uint64_t)v410, &qword_2540CC9E0);
      if ((v410[23] & 0x80000000) != 0)
        operator delete(*(void **)v410);
      __cxa_guard_release(&qword_2540CC9E8);
    }
    v408 = (_BYTE *)qword_2540CC9E0;
    if (**(int **)(qword_2540CC9E0 + 56) > 2)
      goto LABEL_440;
    v17 = *(unsigned __int8 *)(qword_2540CC9E0 + 72);
    v18 = sub_22322F254(qword_2540CC9E0, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (!v17 && v18 == 0)
      goto LABEL_440;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408;
    __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v396 = 2;
    v397 = "unknown file";
    v398 = 318;
    v400 = 0uLL;
    v399 = "unknown function";
    v21 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
    v22 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
    if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v24 = *(const char **)(v21 + 16);
      v23 = *(_QWORD *)(v21 + 24);
    }
    else
    {
      v23 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
      v24 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
    }
    categorya = *(_DWORD *)(a3 + 56);
    v383 = *(_DWORD *)(a3 + 60);
    v386 = *(_DWORD *)(a4 + 56);
    __vala = *(_DWORD *)(a4 + 60);
    v213 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v213 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v410);
      sub_223199C58("com.apple.cv3d", (unint64_t)v410, byte_255788F40);
      if (v410[24] && (v410[23] & 0x80000000) != 0)
        operator delete(*(void **)v410);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v214 = byte_255788F40;
    else
      v214 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v215 = byte_255788F40[23];
    else
      v215 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v410 = os_log_create(v214, v24);
    v216 = &v410[8];
    if (v215 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v215 >= 0x17)
    {
      v217 = v19;
      v218 = v24;
      v219 = v21;
      v220 = v17;
      v221 = v22;
      v222 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v215 | 7) != 0x17)
        v222 = v215 | 7;
      v223 = v222 + 1;
      v216 = operator new(v222 + 1);
      *(_QWORD *)&v410[16] = v215;
      *(_QWORD *)&v410[24] = v223 | 0x8000000000000000;
      *(_QWORD *)&v410[8] = v216;
      v22 = v221;
      v17 = v220;
      v21 = v219;
      v24 = v218;
      v19 = v217;
    }
    else
    {
      v410[31] = v215;
      if (!v215)
      {
LABEL_370:
        v216[v215] = 0;
        v410[32] = 1;
        v224 = (void **)&v411;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v23 >= 0x17)
        {
          v226 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v226 = v23 | 7;
          v227 = v226 + 1;
          v224 = (void **)operator new(v226 + 1);
          v412 = v23;
          *(_QWORD *)&v413 = v227 | 0x8000000000000000;
          v411 = v224;
        }
        else
        {
          BYTE7(v413) = v23;
          if (!v23)
          {
            LOBYTE(v411) = 0;
            BYTE8(v413) = 1;
            v225 = *(NSObject **)v410;
            if ((SBYTE7(v413) & 0x80000000) == 0)
              goto LABEL_374;
            goto LABEL_380;
          }
        }
        memmove(v224, v24, v23);
        *((_BYTE *)v224 + v23) = 0;
        BYTE8(v413) = 1;
        v225 = *(NSObject **)v410;
        if ((SBYTE7(v413) & 0x80000000) == 0)
        {
LABEL_374:
          if (!v410[32])
            goto LABEL_383;
          goto LABEL_381;
        }
LABEL_380:
        operator delete(v411);
        if (!v410[32])
        {
LABEL_383:
          if (*(_QWORD *)v410)
            os_release(*(void **)v410);
          if (v19 && *(_QWORD *)(v19 + 24))
          {
            v228 = _os_log_pack_size();
            v229 = (std::__shared_weak_count_vtbl *)operator new(v228, (std::align_val_t)8uLL);
            v230 = (std::__shared_weak_count *)operator new();
            v231 = v230;
            v230->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v230->__shared_owners_;
            v230->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v230->__shared_weak_owners_ = 0;
            v230[1].__vftable = v229;
            *(_QWORD *)v410 = v229;
            *(_QWORD *)&v410[8] = v229;
            *(_QWORD *)&v410[16] = v230;
            do
              v233 = __ldxr(p_shared_owners);
            while (__stxr(v233 + 1, p_shared_owners));
            *(_QWORD *)&v410[24] = 0;
            *(_QWORD *)&v410[32] = 0;
            v411 = 0;
            do
              v234 = __ldaxr(p_shared_owners);
            while (__stlxr(v234 - 1, p_shared_owners));
            if (!v234)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v231);
            }
            v235 = *(_QWORD *)v410;
            v236 = _os_log_pack_fill();
            *(_DWORD *)v236 = 67109888;
            *(_DWORD *)(v236 + 4) = categorya;
            *(_WORD *)(v236 + 8) = 1024;
            *(_DWORD *)(v236 + 10) = v383;
            *(_WORD *)(v236 + 14) = 1024;
            *(_DWORD *)(v236 + 16) = v386;
            *(_WORD *)(v236 + 20) = 1024;
            *(_DWORD *)(v236 + 22) = __vala;
            v237 = operator new();
            v238 = *(unsigned __int8 *)(v21 + 39);
            if ((v238 & 0x80u) == 0)
              v239 = v22;
            else
              v239 = *(_QWORD *)(v21 + 16);
            if ((v238 & 0x80u) != 0)
              v238 = *(_QWORD *)(v21 + 24);
            *(_QWORD *)v237 = v235;
            *(_OWORD *)(v237 + 8) = *(_OWORD *)&v410[8];
            *(_QWORD *)&v410[8] = 0;
            *(_QWORD *)&v410[16] = 0;
            *(_OWORD *)(v237 + 24) = *(_OWORD *)&v410[24];
            *(_QWORD *)&v410[24] = 0;
            *(_QWORD *)&v410[32] = 0;
            *(_QWORD *)(v237 + 40) = v239;
            *(_QWORD *)(v237 + 48) = v238;
            *(_BYTE *)(v237 + 56) = 2;
            v401.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v391 = v237;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), v391);
            v240 = *(_QWORD *)v391;
            *(_QWORD *)v391 = 0;
            if (v240)
            {
              v241 = *(std::__shared_weak_count **)(v240 + 32);
              if (v241)
              {
                v242 = (unint64_t *)&v241->__shared_owners_;
                do
                  v243 = __ldaxr(v242);
                while (__stlxr(v243 - 1, v242));
                if (!v243)
                {
                  ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                  std::__shared_weak_count::__release_weak(v241);
                }
              }
              v244 = *(std::__shared_weak_count **)(v240 + 16);
              if (v244)
              {
                v245 = (unint64_t *)&v244->__shared_owners_;
                do
                  v246 = __ldaxr(v245);
                while (__stlxr(v246 - 1, v245));
                if (!v246)
                {
                  ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                  std::__shared_weak_count::__release_weak(v244);
                }
              }
              MEMORY[0x227684CE8](v240, 0x10F0C40B62ED6C6);
              v247 = v401.__r_.__value_.__r.__words[0];
              v401.__r_.__value_.__r.__words[0] = 0;
              if (v247)
              {
                v248 = *(std::__shared_weak_count **)(v247 + 32);
                if (v248)
                {
                  v249 = (unint64_t *)&v248->__shared_owners_;
                  do
                    v250 = __ldaxr(v249);
                  while (__stlxr(v250 - 1, v249));
                  if (!v250)
                  {
                    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                    std::__shared_weak_count::__release_weak(v248);
                  }
                }
                v251 = *(std::__shared_weak_count **)(v247 + 16);
                if (v251)
                {
                  v252 = (unint64_t *)&v251->__shared_owners_;
                  do
                    v253 = __ldaxr(v252);
                  while (__stlxr(v253 - 1, v252));
                  if (!v253)
                  {
                    ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                    std::__shared_weak_count::__release_weak(v251);
                  }
                }
                MEMORY[0x227684CE8](v247, 0x10F0C40B62ED6C6);
              }
            }
            v254 = *(std::__shared_weak_count **)&v410[32];
            if (*(_QWORD *)&v410[32])
            {
              v255 = (unint64_t *)(*(_QWORD *)&v410[32] + 8);
              do
                v256 = __ldaxr(v255);
              while (__stlxr(v256 - 1, v255));
              if (!v256)
              {
                ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                std::__shared_weak_count::__release_weak(v254);
              }
            }
            v257 = *(std::__shared_weak_count **)&v410[16];
            if (*(_QWORD *)&v410[16])
            {
              v258 = (unint64_t *)(*(_QWORD *)&v410[16] + 8);
              do
                v259 = __ldaxr(v258);
              while (__stlxr(v259 - 1, v258));
              if (!v259)
              {
                ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                std::__shared_weak_count::__release_weak(v257);
              }
            }
          }
          else
          {
            os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG);
            *(_DWORD *)v410 = 67109888;
            *(_DWORD *)&v410[4] = categorya;
            *(_WORD *)&v410[8] = 1024;
            *(_DWORD *)&v410[10] = v383;
            *(_WORD *)&v410[14] = 1024;
            *(_DWORD *)&v410[16] = v386;
            *(_WORD *)&v410[20] = 1024;
            *(_DWORD *)&v410[22] = __vala;
            v260 = (void *)_os_log_send_and_compose_impl();
            if (v260)
              free(v260);
          }
          if (v17)
          {
            sub_22322C138((uint64_t)&__p, "Different scene type label and scene type probability image sizes: %dx%d vs %dx%d", *(_DWORD *)(a3 + 56), *(_DWORD *)(a3 + 60), *(_DWORD *)(a4 + 56), *(_DWORD *)(a4 + 60));
            sub_223182C08((uint64_t)&__p);
          }
          sub_223182C08((uint64_t)&__p);
          v261 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
          if (*((_QWORD *)&v400 + 1))
          {
            v262 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
            do
              v263 = __ldaxr(v262);
            while (__stlxr(v263 - 1, v262));
            if (!v263)
            {
              ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
              std::__shared_weak_count::__release_weak(v261);
            }
          }
LABEL_440:
          sub_22456D250("Different scene type label and scene type probability image sizes: %dx%d vs %dx%d", (std::string *)v410, *(unsigned int *)(a3 + 56), *(unsigned int *)(a3 + 60), *(unsigned int *)(a4 + 56), *(unsigned int *)(a4 + 60));
          v264 = std::generic_category();
          *(_QWORD *)v391 = 22;
          *(_QWORD *)&v391[8] = v264;
          sub_2245321DC((const std::error_condition *)v391, (uint64_t)v410, (CFErrorRef *)&v401);
          v265 = *(_OWORD *)&v401.__r_.__value_.__l.__data_;
          *(_OWORD *)&v401.__r_.__value_.__l.__data_ = 0uLL;
          *(_OWORD *)a1 = v265;
          *(_BYTE *)(a1 + 72) = 0;
          if ((v410[23] & 0x80000000) != 0)
            operator delete(*(void **)v410);
          return;
        }
LABEL_381:
        if ((v410[31] & 0x80000000) != 0)
          operator delete(*(void **)&v410[8]);
        goto LABEL_383;
      }
    }
    memmove(v216, v214, v215);
    goto LABEL_370;
  }
  sub_2238BB3A4((uint64_t)v391, a2);
  v7 = *a2;
  if (*a2)
  {
    v8 = a2[1];
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_DWORD *)&v391[8];
      v12 = *(_DWORD *)&v391[12];
      v13 = *((_QWORD *)&v392 + 1);
      v14 = 0;
      do
      {
LABEL_13:
        v15 = v13 + 180 * v14;
        *(_DWORD *)(v15 + 128) = 0;
        *(_OWORD *)(v15 + 96) = 0uLL;
        *(_OWORD *)(v15 + 112) = 0uLL;
        *(_OWORD *)(v15 + 64) = 0uLL;
        *(_OWORD *)(v15 + 80) = 0uLL;
        *(_OWORD *)(v15 + 32) = 0uLL;
        *(_OWORD *)(v15 + 48) = 0uLL;
        *(_OWORD *)v15 = 0uLL;
        *(_OWORD *)(v15 + 16) = 0uLL;
        v14 += v12;
        --v8;
      }
      while (v8);
      while (++v10 != v7)
      {
        v8 = a2[1];
        v9 += v11;
        v14 = v9;
        if (a2[1])
          goto LABEL_13;
      }
    }
  }
  v25 = *(unsigned int *)(a3 + 56);
  v26 = *(unsigned int *)(a3 + 60);
  v27 = v25 | (v26 << 32);
  LODWORD(v408) = 0;
  v369 = v25;
  if ((_DWORD)v25)
    v28 = (_DWORD)v26 == 0;
  else
    v28 = 1;
  v29 = v28;
  if (v28)
    v27 = 0;
  v30 = v27 << 32;
  if (!HIDWORD(v27))
    v30 = 0;
  v31 = v27 != 0;
  if ((_DWORD)v27)
    v32 = HIDWORD(v27) == 0;
  else
    v32 = 1;
  *(_QWORD *)v410 = v27;
  *(_QWORD *)&v410[8] = v30 | v31;
  v410[16] = 0;
  v410[24] = 0;
  __p.__r_.__value_.__r.__words[0] = v30 | v31;
  if (v32)
    v27 = 0;
  v401.__r_.__value_.__r.__words[0] = v27;
  if (((v30 >> 30) & ((v30 >> 30) - 1)) != 0)
    v33 = 4;
  else
    v33 = v30 >> 30;
  sub_22346A424((unint64_t *)&v410[32], &v401, (unint64_t *)&__p, 1, &v408, 1, v33);
  *((_OWORD *)a2 + 7) = *(_OWORD *)v410;
  *(_OWORD *)(a2 + 31) = *(_OWORD *)&v410[12];
  *(_OWORD *)(a2 + 42) = v413;
  *((_QWORD *)a2 + 18) = *(_QWORD *)&v410[32];
  v34 = (void *)*((_QWORD *)a2 + 19);
  if (v34)
    free(v34);
  v36 = (float *)v411;
  v35 = v412;
  *((_QWORD *)a2 + 19) = v411;
  *((_QWORD *)a2 + 20) = v35;
  v377 = (unsigned int *)a2;
  v37 = 0.0;
  v366 = v26;
  if (v369 && (_DWORD)v26)
  {
    v38 = 0;
    v39 = 0;
    v40 = v377[30];
    v41 = v377[31];
    do
    {
      v42 = 0;
      v43 = v38;
      do
      {
        v44 = exp((float)-(float)((float)((float)((float)v39 - (float)((float)v369 * 0.5))* (float)((float)v39 - (float)((float)v369 * 0.5)))+ (float)((float)((float)v42 - (float)((float)v366 * 0.5))* (float)((float)v42 - (float)((float)v366 * 0.5))))/ ((double)(v366 + v369)* 0.5* ((double)(v366 + v369)* 0.5)));
        v45 = v44;
        v36[v43] = v45;
        v37 = v44 + v37;
        ++v42;
        v43 += v41;
      }
      while (v366 != v42);
      ++v39;
      v38 += v40;
    }
    while (v39 != v369);
  }
  v46 = v377;
  v47 = v377[28];
  if (!v47)
    goto LABEL_64;
  v48 = v377[29];
  if (!v48)
    goto LABEL_64;
  v49 = v47 - 1;
  v50 = v377[30];
  v51 = v48 - 1;
  if (!v51)
    goto LABEL_59;
  v52 = 4 * v377[31];
  if (v49)
  {
    for (i = 0; i != v51; ++i)
    {
      v54 = v36;
      v55 = v49;
      do
      {
        *v54 = *v54 / v37;
        v54 += v50;
        --v55;
      }
      while (v55);
      *v54 = *v54 / v37;
      v36 = (float *)((char *)v36 + v52);
    }
LABEL_59:
    while (v49)
    {
      *v36 = *v36 / v37;
      v36 += v50;
      --v49;
    }
    goto LABEL_63;
  }
  do
  {
    *v36 = *v36 / v37;
    v36 = (float *)((char *)v36 + v52);
    --v51;
  }
  while (v51);
LABEL_63:
  *v36 = *v36 / v37;
LABEL_64:
  if (!*v377)
    goto LABEL_67;
  v56 = v377[1];
  if (!v56 || (v29 & 1) != 0)
    goto LABEL_67;
  v361 = *v377;
  v363 = 0;
  v266 = &v400;
  v375 = &v410[8];
  v267 = &xmmword_2540CC000;
LABEL_444:
  v268 = 0;
  v362 = v56;
  while (2)
  {
    v372 = 0;
    v365 = v268;
    v384 = *((_QWORD *)&v392 + 1) + 180 * (*(_DWORD *)&v391[8] * v363 + *(_DWORD *)&v391[12] * v268);
    while (2)
    {
      v269 = 0;
      while (2)
      {
        v270 = 0;
        v271 = *(_QWORD *)(a3 + 24) + (*(_DWORD *)(a3 + 64) * v269 + *(_DWORD *)(a3 + 68) * v372);
        v272 = *(float *)(*((_QWORD *)v46 + 19) + 4 * (v46[30] * v269 + v46[31] * v372));
        v373 = v269;
        *(_QWORD *)v387 = v271;
        *(_QWORD *)__valb = *(_QWORD *)(a4 + 24)
                          + 4 * (*(_DWORD *)(a4 + 64) * v269 + *(_DWORD *)(a4 + 68) * v372);
        do
        {
          while (1)
          {
            while (1)
            {
              v273 = *(unsigned __int8 *)(v271 + v270);
              if (v273 >= 0x21)
                break;
              *(float *)(v384 + 4 * *(unsigned __int8 *)(v271 + v270)) = *(float *)(v384
                                                                                    + 4
                                                                                    * *(unsigned __int8 *)(v271 + v270))
                                                                         + (float)(v272
                                                                                 * *(float *)(*(_QWORD *)__valb
                                                                                            + 4 * v270));
              if (++v270 == 4)
                goto LABEL_449;
            }
            v274 = atomic_load((unsigned __int8 *)&qword_2557892F0);
            if ((v274 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
            {
              __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
              __cxa_guard_release(&qword_2557892F0);
            }
            v275 = atomic_load((unsigned __int8 *)&qword_2540CC9E8);
            if ((v275 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC9E8))
            {
              sub_22455F53C(&__p);
              v410[23] = 13;
              strcpy(v410, "cv3d.recon.kf");
              sub_2232300E0((uint64_t **)&__p, (uint64_t)v410, &qword_2540CC9E0);
              if ((v410[23] & 0x80000000) != 0)
                operator delete(*(void **)v410);
              __cxa_guard_release(&qword_2540CC9E8);
            }
            v276 = *((_QWORD *)v267 + 316);
            if (*(char *)(v276 + 39) < 0)
            {
              v277 = *(const void **)(v276 + 16);
              v278 = *(_QWORD *)(v276 + 24);
            }
            else
            {
              v277 = (const void *)(v276 + 16);
              v278 = *(unsigned __int8 *)(v276 + 39);
            }
            sub_223195728((uint64_t)&stru_255789280, v277, v278, "ISTL %d", 7uLL);
            v279 = atomic_load((unsigned __int8 *)&qword_2540CC9F8);
            if ((v279 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC9F8))
            {
              sub_22455F53C(&__p);
              v410[23] = 15;
              strcpy(v410, "cv3dapi.recon3d");
              sub_2232300E0((uint64_t **)&__p, (uint64_t)v410, &qword_2540CC9F0);
              if ((v410[23] & 0x80000000) != 0)
                operator delete(*(void **)v410);
              __cxa_guard_release(&qword_2540CC9F8);
            }
            v408 = (_BYTE *)qword_2540CC9F0;
            if (**(int **)(qword_2540CC9F0 + 56) <= 5)
            {
              v280 = *(unsigned __int8 *)(qword_2540CC9F0 + 72);
              v281 = sub_22322F254(qword_2540CC9F0, "OSLogSurrogateAppender", 1, 0);
              v282 = v281;
              if (v280 || v281)
                break;
            }
            v271 = *(_QWORD *)v387;
            if (++v270 == 4)
              goto LABEL_449;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v396 = 5;
          v397 = "unknown file";
          v398 = 358;
          v399 = "unknown function";
          *(_QWORD *)v266 = 0;
          *((_QWORD *)v266 + 1) = 0;
          v283 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v284 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v285 = *(_QWORD *)(v283 + 24);
            categoryb = *(char **)(v283 + 16);
            v287 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v287 & 1) != 0)
              goto LABEL_468;
          }
          else
          {
            v285 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            categoryb = (char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
            v286 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v286 & 1) != 0)
              goto LABEL_468;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v401);
            if (v402)
            {
              *(std::string *)byte_255788F40 = v401;
            }
            else
            {
              byte_255788F40[23] = 14;
              strcpy(byte_255788F40, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_468:
          if (byte_255788F40[23] >= 0)
            v288 = byte_255788F40;
          else
            v288 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v289 = byte_255788F40[23];
          else
            v289 = *(_QWORD *)&byte_255788F40[8];
          *(_QWORD *)v410 = os_log_create(v288, categoryb);
          if (v289 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v378 = v284;
          v379 = v283;
          if (v289 >= 0x17)
          {
            v291 = v266;
            v292 = (v289 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v289 | 7) != 0x17)
              v292 = v289 | 7;
            v293 = v292 + 1;
            v290 = operator new(v292 + 1);
            *(_QWORD *)&v410[16] = v289;
            *(_QWORD *)&v410[24] = v293 | 0x8000000000000000;
            *(_QWORD *)&v410[8] = v290;
            v266 = v291;
LABEL_481:
            memmove(v290, v288, v289);
            goto LABEL_482;
          }
          v410[31] = v289;
          v290 = &v410[8];
          if (v289)
            goto LABEL_481;
LABEL_482:
          v290[v289] = 0;
          v410[32] = 1;
          if (v285 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v285 >= 0x17)
          {
            v295 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v285 | 7) != 0x17)
              v295 = v285 | 7;
            v296 = v295 + 1;
            v46 = v377;
            v294 = (void **)operator new(v295 + 1);
            v412 = v285;
            *(_QWORD *)&v413 = v296 | 0x8000000000000000;
            v411 = v294;
LABEL_489:
            memmove(v294, categoryb, v285);
            goto LABEL_490;
          }
          BYTE7(v413) = v285;
          v294 = (void **)&v411;
          v46 = v377;
          if (v285)
            goto LABEL_489;
LABEL_490:
          *((_BYTE *)v294 + v285) = 0;
          BYTE8(v413) = 1;
          v297 = *(NSObject **)v410;
          if (SBYTE7(v413) < 0)
            operator delete(v411);
          if (v410[32] && (v410[31] & 0x80000000) != 0)
            operator delete(*(void **)&v410[8]);
          if (*(_QWORD *)v410)
            os_release(*(void **)v410);
          if (v282 && *(_QWORD *)(v282 + 24))
          {
            v298 = _os_log_pack_size();
            v299 = (std::__shared_weak_count_vtbl *)operator new(v298, (std::align_val_t)8uLL);
            v300 = (std::__shared_weak_count *)operator new();
            v301 = v300;
            v300->__shared_owners_ = 0;
            v302 = (unint64_t *)&v300->__shared_owners_;
            v300->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v300->__shared_weak_owners_ = 0;
            v300[1].__vftable = v299;
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
            do
              v304 = __ldaxr(v302);
            while (__stlxr(v304 - 1, v302));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v301);
            }
            v305 = (_DWORD *)_os_log_pack_fill();
            *v305 = 67109120;
            v305[1] = v273;
            v306 = operator new();
            v307 = *(unsigned __int8 *)(v379 + 39);
            v308 = v378;
            if ((v307 & 0x80u) != 0)
            {
              v308 = *(_QWORD *)(v379 + 16);
              v307 = *(_QWORD *)(v379 + 24);
            }
            *(_QWORD *)v306 = v299;
            *(_QWORD *)(v306 + 8) = v299;
            *(_QWORD *)(v306 + 16) = v301;
            *(_QWORD *)(v306 + 24) = 0;
            *(_QWORD *)(v306 + 32) = 0;
            *(_QWORD *)(v306 + 40) = v308;
            *(_QWORD *)(v306 + 48) = v307;
            *(_BYTE *)(v306 + 56) = 16;
            *(_QWORD *)v410 = v306;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v282 + 24) + 40))(*(_QWORD *)(v282 + 24), v410);
            v309 = *(_QWORD *)v410;
            *(_QWORD *)v410 = 0;
            if (v309)
            {
              v310 = *(std::__shared_weak_count **)(v309 + 32);
              if (!v310)
                goto LABEL_511;
              v311 = (unint64_t *)&v310->__shared_owners_;
              do
                v312 = __ldaxr(v311);
              while (__stlxr(v312 - 1, v311));
              if (!v312)
              {
                ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                std::__shared_weak_count::__release_weak(v310);
                v313 = *(std::__shared_weak_count **)(v309 + 16);
                if (!v313)
                  goto LABEL_548;
              }
              else
              {
LABEL_511:
                v313 = *(std::__shared_weak_count **)(v309 + 16);
                if (!v313)
                  goto LABEL_548;
              }
              v314 = (unint64_t *)&v313->__shared_owners_;
              do
                v315 = __ldaxr(v314);
              while (__stlxr(v315 - 1, v314));
              if (!v315)
              {
                ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                std::__shared_weak_count::__release_weak(v313);
              }
LABEL_548:
              MEMORY[0x227684CE8](v309, 0x10F0C40B62ED6C6);
              v267 = &xmmword_2540CC000;
              if (!v280)
                goto LABEL_549;
              goto LABEL_519;
            }
          }
          else
          {
            os_log_type_enabled(v297, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v410 = 67109120;
            *(_DWORD *)&v410[4] = v273;
            v316 = (void *)_os_log_send_and_compose_impl();
            if (v316)
              free(v316);
          }
          v267 = &xmmword_2540CC000;
          if (!v280)
            goto LABEL_549;
LABEL_519:
          sub_22322C138((uint64_t)&__p, "ISTL %d", v273);
          v317 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          if (!__p.__r_.__value_.__r.__words[0])
            goto LABEL_576;
          v318 = v400;
          if (!(_QWORD)v400)
            goto LABEL_576;
          v319 = (_QWORD *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
            v319 = (_QWORD *)*v319;
          v320 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          v321 = v396;
          v322 = v397;
          v323 = v398;
          v324 = v399;
          v325 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
          if (*((_QWORD *)&v400 + 1))
          {
            v326 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
            *(_OWORD *)&v410[8] = v320;
            *(_DWORD *)&v410[24] = v321;
            *(_QWORD *)&v410[32] = v322;
            LODWORD(v411) = v323;
            v412 = (size_t)v324;
            *(_QWORD *)&v413 = v318;
            *((_QWORD *)&v413 + 1) = v325;
            do
              v328 = __ldxr(v326);
            while (__stxr(v328 + 1, v326));
          }
          else
          {
            *(_OWORD *)&v410[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_DWORD *)&v410[24] = v396;
            *(_QWORD *)&v410[32] = v397;
            LODWORD(v411) = v398;
            v412 = (size_t)v399;
            v413 = (unint64_t)v400;
          }
          *(_QWORD *)v410 = v319;
          v329 = v325;
          if (v321 >= **(_DWORD **)(*v317 + 56))
          {
            sub_22323003C(*v317, (uint64_t)v410);
            v329 = (std::__shared_weak_count *)*((_QWORD *)&v413 + 1);
          }
          if (!v329)
            goto LABEL_536;
          v330 = (unint64_t *)&v329->__shared_owners_;
          do
            v331 = __ldaxr(v330);
          while (__stlxr(v331 - 1, v330));
          if (!v331)
          {
            ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
            std::__shared_weak_count::__release_weak(v329);
            if (v325)
            {
LABEL_537:
              v332 = (unint64_t *)&v325->__shared_owners_;
              do
                v333 = __ldaxr(v332);
              while (__stlxr(v333 - 1, v332));
              if (!v333)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
              }
            }
          }
          else
          {
LABEL_536:
            if (v325)
              goto LABEL_537;
          }
          v334 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
          v400 = 0uLL;
          v267 = &xmmword_2540CC000;
          if (v334)
          {
            v335 = (unint64_t *)&v334->__shared_owners_;
            do
              v336 = __ldaxr(v335);
            while (__stlxr(v336 - 1, v335));
            if (!v336)
            {
              ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
              std::__shared_weak_count::__release_weak(v334);
            }
          }
LABEL_549:
          v337 = __p.__r_.__value_.__r.__words[0];
          if (!__p.__r_.__value_.__r.__words[0])
            goto LABEL_576;
          v338 = v400;
          if (!(_QWORD)v400)
            goto LABEL_576;
          v339 = (_QWORD *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
            v339 = (_QWORD *)*v339;
          v340 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          v341 = v396;
          v342 = v397;
          v343 = v398;
          v344 = v399;
          v345 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
          *(_OWORD *)&v401.__r_.__value_.__l.__data_ = v400;
          if (*((_QWORD *)&v400 + 1))
          {
            v346 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
            do
              v347 = __ldxr(v346);
            while (__stxr(v347 + 1, v346));
            *(_OWORD *)&v410[8] = v340;
            *(_DWORD *)&v410[24] = v341;
            *(_QWORD *)&v410[32] = v342;
            LODWORD(v411) = v343;
            v412 = (size_t)v344;
            *(_QWORD *)&v413 = v338;
            *((_QWORD *)&v413 + 1) = v345;
            do
              v348 = __ldxr(v346);
            while (__stxr(v348 + 1, v346));
            *(_QWORD *)v410 = v339;
            v349 = *(_QWORD *)v337;
            if (v341 < **(_DWORD **)(*(_QWORD *)v337 + 56))
            {
LABEL_559:
              if (!v345)
                goto LABEL_566;
              goto LABEL_563;
            }
          }
          else
          {
            *(_OWORD *)&v410[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_DWORD *)&v410[24] = v396;
            *(_QWORD *)&v410[32] = v397;
            LODWORD(v411) = v398;
            v412 = (size_t)v399;
            v413 = (unint64_t)v400;
            *(_QWORD *)v410 = v339;
            v349 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            if (v396 < **(_DWORD **)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 56))
              goto LABEL_559;
          }
          sub_22323003C(v349, (uint64_t)v410);
          v345 = (std::__shared_weak_count *)*((_QWORD *)&v413 + 1);
          if (!*((_QWORD *)&v413 + 1))
            goto LABEL_566;
LABEL_563:
          v350 = (unint64_t *)&v345->__shared_owners_;
          do
            v351 = __ldaxr(v350);
          while (__stlxr(v351 - 1, v350));
          if (!v351)
          {
            ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
            std::__shared_weak_count::__release_weak(v345);
            size = (std::__shared_weak_count *)v401.__r_.__value_.__l.__size_;
            v267 = &xmmword_2540CC000;
            if (!v401.__r_.__value_.__l.__size_)
              goto LABEL_572;
            goto LABEL_567;
          }
LABEL_566:
          size = (std::__shared_weak_count *)v401.__r_.__value_.__l.__size_;
          v267 = &xmmword_2540CC000;
          if (!v401.__r_.__value_.__l.__size_)
            goto LABEL_572;
LABEL_567:
          v353 = (unint64_t *)&size->__shared_owners_;
          do
            v354 = __ldaxr(v353);
          while (__stlxr(v354 - 1, v353));
          if (!v354)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
LABEL_572:
          v355 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
          v400 = 0uLL;
          if (!v355)
            goto LABEL_581;
          v356 = (unint64_t *)&v355->__shared_owners_;
          do
            v357 = __ldaxr(v356);
          while (__stlxr(v357 - 1, v356));
          if (!v357)
          {
            ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
            std::__shared_weak_count::__release_weak(v355);
            v358 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
            if (!*((_QWORD *)&v400 + 1))
              goto LABEL_581;
            goto LABEL_577;
          }
LABEL_576:
          v358 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
          if (!*((_QWORD *)&v400 + 1))
            goto LABEL_581;
LABEL_577:
          v359 = (unint64_t *)&v358->__shared_owners_;
          do
            v360 = __ldaxr(v359);
          while (__stlxr(v360 - 1, v359));
          if (!v360)
          {
            ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
            std::__shared_weak_count::__release_weak(v358);
          }
LABEL_581:
          v271 = *(_QWORD *)v387;
          ++v270;
        }
        while (v270 != 4);
LABEL_449:
        v269 = v373 + 1;
        if (v373 + 1 != v369)
          continue;
        break;
      }
      if (++v372 != (_DWORD)v366)
        continue;
      break;
    }
    v268 = v365 + 1;
    if (v365 + 1 != v362)
      continue;
    break;
  }
  while (++v363 != v361)
  {
    v56 = v46[1];
    if (v56)
      goto LABEL_444;
  }
LABEL_67:
  v57 = *(_DWORD *)v391;
  if (*(_DWORD *)&v391[12] * *(_DWORD *)&v391[4])
  {
    v58 = 0;
    v59 = *((_QWORD *)&v392 + 1);
    v60 = *((_QWORD *)&v392 + 1) + 180 * (*(_DWORD *)&v391[12] * *(_DWORD *)&v391[4]);
    v61 = *(unsigned int *)&v391[8];
    v62 = HIDWORD(*(_QWORD *)&v391[8]) + *(unsigned int *)&v391[8] - *(_DWORD *)&v391[8] * *(_DWORD *)v391;
    do
    {
      *(_BYTE *)(v59 + 132) = (sub_2238ED2D4((float *)v59) - v59) >> 2;
      v63 = v58 + 1;
      if (v58 + 1 == v57)
        v58 = 0;
      else
        ++v58;
      if (v63 == v57)
        v64 = v62;
      else
        v64 = v61;
      v59 += 180 * v64;
    }
    while (v59 != v60);
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_353;
  v65 = sub_2241471F8();
  v66 = v65[2];
  if (!v66)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v66 = v65[2];
  }
  v67 = *(_QWORD *)(v66 + 64);
  v68 = (std::mutex *)(v67 + 32);
  std::mutex::lock((std::mutex *)(v67 + 32));
  v70 = *(_QWORD *)(v67 + 96);
  v69 = *(_QWORD *)(v67 + 104);
  std::mutex::unlock(v68);
  if (v70 == v69)
    goto LABEL_353;
  *(_QWORD *)v410 = "cv3d.recon.";
  *(_QWORD *)&v410[8] = 11;
  *(_QWORD *)&v410[16] = "Keyframing.SceneTypes.Labels";
  *(_QWORD *)&v410[24] = 28;
  sub_2231A9820((uint64_t)v410, (uint64_t)&v410[32], 0, 0, &__p);
  v71 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v72 = __p.__r_.__value_.__r.__words[0];
  sub_2241471F8();
  if (v71 >= 0)
    p_p = &__p;
  else
    p_p = (std::string *)v72;
  v74 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, p_p);
  v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v75)
    goto LABEL_353;
  v370 = *v46;
  if (!(_DWORD)v370)
    goto LABEL_353;
  v76 = (char *)v46[1];
  if (!(_DWORD)v76)
    goto LABEL_353;
  *(_QWORD *)__val = 0;
LABEL_90:
  v77 = 0;
  v371 = v76;
  while (2)
  {
    v78 = 0;
    v374 = v77;
    category = (char *)(*((_QWORD *)&v392 + 1)
                      + 180 * (*(_DWORD *)&v391[8] * __val[0] + *(_DWORD *)&v391[12] * (_DWORD)v77));
    *(_QWORD *)v385 = (*(_QWORD *)__val | ((_QWORD)v77 << 32)) >> 32;
    while (2)
    {
      v396 = -1;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245C65C0;
      strcpy(__p.__r_.__value_.__l.__data_, "Keyframing.SceneTypes.Labels.block_");
      v396 = 1;
      std::to_string(&v401, __val[0]);
      *(_QWORD *)v410 = &__p;
      *(_QWORD *)&v410[8] = &v401;
      *(_QWORD *)&v410[16] = &__p;
      *(_QWORD *)&v410[24] = &v401;
      *(_QWORD *)&v410[32] = &v401;
      if (v396 == -1)
        sub_22316DD70();
      v408 = v410;
      ((void (*)(_BYTE **, std::string *))off_24EC5C8B0[v396])(&v408, &__p);
      if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v401.__r_.__value_.__l.__data_);
      *(_QWORD *)v410 = &__p;
      *(_QWORD *)&v410[8] = "_";
      *(_QWORD *)&v410[16] = &__p;
      *(_QWORD *)&v410[24] = "_";
      *(_QWORD *)&v410[32] = "_";
      if (v396 == -1)
        sub_22316DD70();
      v401.__r_.__value_.__r.__words[0] = (std::string::size_type)v410;
      ((void (*)(std::string *, std::string *))off_24EC5C898[v396])(&v401, &__p);
      std::to_string(&v401, v385[0]);
      *(_QWORD *)v410 = &__p;
      *(_QWORD *)&v410[8] = &v401;
      *(_QWORD *)&v410[16] = &__p;
      *(_QWORD *)&v410[24] = &v401;
      *(_QWORD *)&v410[32] = &v401;
      if (v396 == -1)
        sub_22316DD70();
      v408 = v410;
      ((void (*)(_BYTE **, std::string *))off_24EC5C8B0[v396])(&v408, &__p);
      if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v401.__r_.__value_.__l.__data_);
      if (v396 == -1)
        sub_22316DD70();
      *(_QWORD *)v410 = &v401;
      ((void (*)(void **__return_ptr, _BYTE *, std::string *))off_24EC5C880[v396])(v404, v410, &__p);
      if (v396 != -1)
        ((void (*)(_BYTE *, std::string *))off_24EC5C850[v396])(v410, &__p);
      if ((v405 & 0x80u) == 0)
        v79 = v404;
      else
        v79 = (void **)v404[0];
      if ((v405 & 0x80u) == 0)
        v80 = v405;
      else
        v80 = (size_t)v404[1];
      v81 = v80 + 11;
      memset(v403, 0, sizeof(v403));
      if (v80 + 11 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v81 < 0x17)
      {
        qmemcpy(v403, "cv3d.recon.", 11);
        HIBYTE(v403[2]) = 11;
        v86 = v403;
        v85 = 0x6365722E64337663;
      }
      else
      {
        v82 = v81 | 7;
        if ((v81 | 7) == 0x17)
          v82 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
        v83 = v82 + 1;
        v84 = operator new(v82 + 1);
        v85 = (uint64_t)v84;
        *v84 = 0;
        v403[1] = 0;
        v403[2] = (void *)(v83 | 0x8000000000000000);
        v403[0] = v84;
        if ((v83 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xB)
        {
          *(_DWORD *)(v84 + 7) = 778989411;
          *(_QWORD *)v84 = *(_QWORD *)"cv3d.recon.";
          v403[1] = (void *)11;
          v86 = v84;
        }
        else
        {
          v86 = operator new(0x17uLL);
          *(_DWORD *)(v86 + 7) = 778989411;
          *(_QWORD *)v86 = *(_QWORD *)"cv3d.recon.";
          operator delete((void *)v85);
          v403[0] = v86;
          *(_OWORD *)&v403[1] = xmmword_22461D680;
          v85 = (uint64_t)v86;
        }
      }
      v86[11] = 0;
      if (SHIBYTE(v403[2]) >= 0)
        v87 = 22;
      else
        v87 = ((unint64_t)v403[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (SHIBYTE(v403[2]) >= 0)
        v88 = HIBYTE(v403[2]);
      else
        v88 = (size_t)v403[1];
      if (v87 - v88 >= v80)
      {
        if (v80)
        {
          if (SHIBYTE(v403[2]) >= 0)
            v92 = v403;
          else
            v92 = (void **)v85;
          memmove((char *)v92 + v88, v79, v80);
          v93 = v88 + v80;
          if (SHIBYTE(v403[2]) < 0)
            v403[1] = (void *)(v88 + v80);
          else
            HIBYTE(v403[2]) = v93 & 0x7F;
          v94 = (char *)v92 + v93;
          goto LABEL_148;
        }
      }
      else
      {
        v89 = v88 + v80;
        if (0x7FFFFFFFFFFFFFF6 - v87 < v88 + v80 - v87)
          sub_22316DBC0();
        if (SHIBYTE(v403[2]) >= 0)
          v85 = (uint64_t)v403;
        v90 = 0x7FFFFFFFFFFFFFF7;
        if (v87 < 0x3FFFFFFFFFFFFFF3)
        {
          v91 = 2 * v87;
          if (v89 > 2 * v87)
            v91 = v88 + v80;
          if (v91 >= 0x17)
          {
            v95 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
            v96 = v91 | 7;
            if (v96 == 23)
              v96 = v95;
            v90 = v96 + 1;
          }
          else
          {
            v90 = 23;
          }
        }
        v97 = (char *)operator new(v90);
        v98 = v97;
        if (v88)
          memcpy(v97, (const void *)v85, v88);
        memcpy(&v98[v88], v79, v80);
        if (v87 != 22)
          operator delete((void *)v85);
        v403[1] = (void *)(v88 + v80);
        v403[2] = (void *)(v90 | 0x8000000000000000);
        v403[0] = v98;
        v94 = &v98[v89];
        v46 = v377;
LABEL_148:
        *v94 = 0;
      }
      v99 = atomic_load((unsigned __int8 *)&qword_255795630);
      if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_255795630))
      {
        v207 = operator new(0x20uLL);
        v207[1] = 0;
        v207[2] = 0;
        *v207 = &off_24EC7AA58;
        v207[3] = &off_24EC7A9C0;
        qword_255795620 = (uint64_t)(v207 + 3);
        *(_QWORD *)algn_255795628 = v207;
        *(_QWORD *)v410 = 0;
        *(_QWORD *)&v410[8] = 0;
        sub_223167354((uint64_t)v410);
        __cxa_atexit((void (*)(void *))sub_224569E58, &qword_255795620, &dword_22314D000);
        __cxa_guard_release(&qword_255795630);
      }
      v100 = atomic_load((unsigned __int8 *)&qword_255795618);
      if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_255795618))
      {
        sub_224568628((uint64_t)v410);
        sub_223199C58("com.apple.cv3d", (unint64_t)v410, &qword_255795600);
        if (v410[24] && (v410[23] & 0x80000000) != 0)
          operator delete(*(void **)v410);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255795600, &dword_22314D000);
        __cxa_guard_release(&qword_255795618);
        v46 = v377;
      }
      if (!os_variant_has_internal_diagnostics())
        goto LABEL_213;
      v101 = atomic_load((unsigned __int8 *)&qword_2557952F8);
      if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_2557952F8))
      {
        v410[0] = 0;
        v410[24] = 0;
        sub_224147A1C(&qword_2557952D8, (uint64_t)v410);
        if (v410[24] && (v410[23] & 0x80000000) != 0)
          operator delete(*(void **)v410);
        __cxa_atexit((void (*)(void *))sub_224148004, &qword_2557952D8, &dword_22314D000);
        __cxa_guard_release(&qword_2557952F8);
        v46 = v377;
      }
      v102 = qword_2557952E8;
      if (!qword_2557952E8)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v102 = qword_2557952E8;
      }
      v103 = *(_QWORD *)(v102 + 64);
      v104 = (std::mutex *)(v103 + 32);
      std::mutex::lock((std::mutex *)(v103 + 32));
      v106 = *(_QWORD *)(v103 + 96);
      v105 = *(_QWORD *)(v103 + 104);
      std::mutex::unlock(v104);
      if (v106 == v105)
        goto LABEL_213;
      v107 = HIBYTE(v403[2]);
      v108 = (void **)v403[0];
      sub_2241471F8();
      v109 = v107 >= 0 ? v403 : v108;
      v110 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v109);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v110 + 24))(v110))
        goto LABEL_213;
      kdebug_trace();
      v111 = &(&off_24EC5C8E0)[2 * v78];
      v113 = *v111;
      v112 = (std::string::size_type)v111[1];
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v110 + 24))(v110))
        goto LABEL_212;
      if (v112 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v112 >= 0x17)
      {
        v116 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v112 | 7) != 0x17)
          v116 = v112 | 7;
        v117 = v116 + 1;
        p_dst = (std::string *)operator new(v116 + 1);
        __dst.__r_.__value_.__l.__size_ = v112;
        __dst.__r_.__value_.__r.__words[2] = v117 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        v115 = (unint64_t)v375;
        goto LABEL_171;
      }
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v112;
      p_dst = &__dst;
      v115 = (unint64_t)v375;
      if (v112)
LABEL_171:
        memmove(p_dst, v113, v112);
      p_dst->__r_.__value_.__s.__data_[v112] = 0;
      *(_QWORD *)&v406 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v406 + 1) = v115 & 0xFFFFFFFFFFFFFF00 | 2;
      v375 = (_BYTE *)*((_QWORD *)&v406 + 1);
      v118 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v110 + 24))(v110))
      {
        v119 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 56))(v110);
        __p = __dst;
        memset(&__dst, 0, sizeof(__dst));
        LOBYTE(v396) = 1;
        sub_22361FF90((int *)&category[4 * v78], (__int128 *)&__p, &v406, &v408);
        v120 = *v119;
        v121 = (std::__shared_weak_count *)v119[1];
        if (v121)
        {
          v122 = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
        v124 = v409;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v401.__r_.__value_.__r.__words[1] = v409;
        v409 = 0uLL;
        *(_QWORD *)v410 = v120;
        *(_QWORD *)&v410[8] = v121;
        if (v121)
        {
          v125 = (unint64_t *)&v121->__shared_owners_;
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        *(_QWORD *)&v410[16] = &off_24EC6A3B8;
        *(_OWORD *)&v410[24] = v124;
        if (*((_QWORD *)&v124 + 1))
        {
          v127 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
        }
        (*(void (**)(uint64_t *, _BYTE *))(*v118 + 16))(v118, v410);
        v129 = *(std::__shared_weak_count **)&v410[32];
        if (!*(_QWORD *)&v410[32])
          goto LABEL_186;
        v130 = (unint64_t *)(*(_QWORD *)&v410[32] + 8);
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
          v132 = *(std::__shared_weak_count **)&v410[8];
          if (*(_QWORD *)&v410[8])
          {
LABEL_187:
            v133 = (unint64_t *)&v132->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
        }
        else
        {
LABEL_186:
          v132 = *(std::__shared_weak_count **)&v410[8];
          if (*(_QWORD *)&v410[8])
            goto LABEL_187;
        }
        v135 = (std::__shared_weak_count *)v401.__r_.__value_.__r.__words[2];
        if (!v401.__r_.__value_.__r.__words[2])
          goto LABEL_196;
        v136 = (unint64_t *)(v401.__r_.__value_.__r.__words[2] + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
          if (v121)
          {
LABEL_197:
            v138 = (unint64_t *)&v121->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
        }
        else
        {
LABEL_196:
          if (v121)
            goto LABEL_197;
        }
        v140 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
        if (*((_QWORD *)&v409 + 1))
        {
          v141 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        if ((_BYTE)v396 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_212:
      kdebug_trace();
LABEL_213:
      kdebug_trace();
      v143 = HIBYTE(v403[2]);
      if (SHIBYTE(v403[2]) < 0)
        v143 = (unint64_t)v403[1];
      if (v143 >= 0x11)
      {
        v144 = v403;
        if (SHIBYTE(v403[2]) < 0)
          v144 = (void **)v403[0];
        v145 = *v144;
        v146 = v144[1];
        v147 = *((unsigned __int8 *)v144 + 16);
        v148 = v145 == (void *)0x6365722E64337663 && v146 == (void *)0x73746174532E6E6FLL;
        if (v148 && v147 == 46)
        {
          v150 = atomic_load((unsigned __int8 *)&qword_255788F38);
          if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_255788F38))
          {
            v208 = sub_223FD6598();
            v210 = *v208;
            v209 = v208[1];
            if (v209)
            {
              v211 = (unint64_t *)(v209 + 8);
              do
                v212 = __ldxr(v211);
              while (__stxr(v212 + 1, v211));
            }
            off_255788F28.n128_u64[0] = v210;
            unk_255788F30 = v209;
            __cxa_atexit((void (*)(void *))sub_2231982F4, &off_255788F28, &dword_22314D000);
            __cxa_guard_release(&qword_255788F38);
          }
          if (SHIBYTE(v403[2]) >= 0)
            v151 = v403;
          else
            v151 = (void **)v403[0];
          if (SHIBYTE(v403[2]) >= 0)
            v152 = HIBYTE(v403[2]);
          else
            v152 = (size_t)v403[1];
          v153 = &(&off_24EC5C8E0)[2 * v78];
          v154 = (size_t)v153[1];
          if (!v154)
          {
            v167 = off_255788F28.n128_u64[0];
            v168 = (std::mutex *)(off_255788F28.n128_u64[0] + 152);
            std::mutex::lock((std::mutex *)(off_255788F28.n128_u64[0] + 152));
            sub_223FD4C28(v167 + 80, v151, v152, (float *)&category[4 * v78]);
            v46 = v377;
            std::mutex::unlock(v168);
            goto LABEL_225;
          }
          v155 = *v153;
          v156 = off_255788F28.n128_u64[0];
          v157 = v152 + v154 + 1;
          memset(v410, 0, 24);
          if (v157 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          __src = v155;
          if (v157 < 0x17)
          {
            v162 = 0;
            v164 = 0;
            v161 = v410;
            v163 = 22;
            v165 = v152 - 22;
            if (v152 <= 0x16)
            {
LABEL_243:
              if (!v152)
              {
                v171 = 0;
                goto LABEL_263;
              }
              memmove(v161, v151, v152);
              if ((v410[23] & 0x80000000) != 0)
                *(_QWORD *)&v410[8] = v152;
              else
                v410[23] = v152 & 0x7F;
              v166 = v161;
LABEL_262:
              v166[v152] = 0;
              v164 = v410[23];
              v171 = *(_QWORD *)&v410[8];
              v162 = *(_QWORD *)&v410[16];
LABEL_263:
              v174 = (char)v164;
              v175 = (v162 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v164 & 0x80u) == 0)
                v176 = 22;
              else
                v176 = v175;
              if ((v164 & 0x80u) != 0)
                v164 = v171;
              if (v176 != v164)
              {
                v181 = *(_BYTE **)v410;
                if (v174 >= 0)
                  v181 = v410;
                v181[v164] = 46;
                v182 = v164 + 1;
                if ((v410[23] & 0x80000000) != 0)
                  *(_QWORD *)&v410[8] = v182;
                else
                  v410[23] = v182 & 0x7F;
                v183 = &v181[v182];
                goto LABEL_293;
              }
              if (v176 == 0x7FFFFFFFFFFFFFF6)
                goto LABEL_613;
              v177 = v176 + 1;
              if (v174 >= 0)
                v178 = v410;
              else
                v178 = *(_BYTE **)v410;
              v179 = 0x7FFFFFFFFFFFFFF7;
              if (v176 < 0x3FFFFFFFFFFFFFF3)
              {
                v180 = 2 * v176;
                if (v177 > 2 * v176)
                  v180 = v176 + 1;
                if (v180 >= 0x17)
                {
                  v184 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
                  v185 = v180 | 7;
                  if (v185 == 23)
                    v185 = v184;
                  v179 = v185 + 1;
                }
                else
                {
                  v179 = 23;
                }
              }
              v186 = operator new(v179);
              v187 = v186;
              if (v176)
              {
                memmove(v186, v178, v176);
                v187[v176] = 46;
                if (v176 == 22)
                  goto LABEL_292;
              }
              else
              {
                *v186 = 46;
              }
              operator delete(v178);
LABEL_292:
              *(_QWORD *)&v410[8] = v176 + 1;
              *(_QWORD *)&v410[16] = v179 | 0x8000000000000000;
              *(_QWORD *)v410 = v187;
              v183 = &v187[v177];
LABEL_293:
              *v183 = 0;
              if (*(uint64_t *)&v410[16] >= 0)
                v188 = 22;
              else
                v188 = (*(_QWORD *)&v410[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (*(uint64_t *)&v410[16] >= 0)
                v189 = HIBYTE(*(_QWORD *)&v410[16]);
              else
                v189 = *(_QWORD *)&v410[8];
              if (v188 - v189 >= v154)
              {
                v194 = (float *)&category[4 * v78];
                if (*(uint64_t *)&v410[16] >= 0)
                  v195 = v410;
                else
                  v195 = *(_BYTE **)v410;
                memmove(&v195[v189], __src, v154);
                v196 = v189 + v154;
                if ((v410[23] & 0x80000000) != 0)
                  *(_QWORD *)&v410[8] = v189 + v154;
                else
                  v410[23] = v196 & 0x7F;
                v46 = v377;
                v197 = &v195[v196];
              }
              else
              {
                v190 = v189 + v154;
                if (0x7FFFFFFFFFFFFFF6 - v188 < v189 + v154 - v188)
LABEL_613:
                  sub_22316DBC0();
                if (*(uint64_t *)&v410[16] >= 0)
                  v191 = v410;
                else
                  v191 = *(_BYTE **)v410;
                v192 = 0x7FFFFFFFFFFFFFF7;
                if (v188 < 0x3FFFFFFFFFFFFFF3)
                {
                  v193 = 2 * v188;
                  if (v190 > 2 * v188)
                    v193 = v189 + v154;
                  if (v193 >= 0x17)
                  {
                    v198 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
                    v199 = v193 | 7;
                    if (v199 == 23)
                      v199 = v198;
                    v192 = v199 + 1;
                  }
                  else
                  {
                    v192 = 23;
                  }
                }
                v200 = (char *)operator new(v192);
                v201 = v200;
                if (v189)
                  memmove(v200, v191, v189);
                v194 = (float *)&category[4 * v78];
                memcpy(&v201[v189], __src, v154);
                if (v188 != 22)
                  operator delete(v191);
                *(_QWORD *)&v410[8] = v189 + v154;
                *(_QWORD *)&v410[16] = v192 | 0x8000000000000000;
                *(_QWORD *)v410 = v201;
                v197 = &v201[v190];
                v46 = v377;
              }
              *v197 = 0;
              v202 = v410[23];
              v204 = *(_BYTE **)v410;
              v203 = *(_QWORD *)&v410[8];
              std::mutex::lock((std::mutex *)(v156 + 152));
              if ((v202 & 0x80u) == 0)
                v205 = v410;
              else
                v205 = v204;
              if ((v202 & 0x80u) == 0)
                v206 = v202;
              else
                v206 = v203;
              sub_223FD4C28(v156 + 80, v205, v206, v194);
              std::mutex::unlock((std::mutex *)(v156 + 152));
              if ((v410[23] & 0x80000000) != 0)
                operator delete(*(void **)v410);
              goto LABEL_225;
            }
          }
          else
          {
            v158 = v157 | 7;
            v6 = (v157 | 7) == 23;
            v159 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
            if (!v6)
              v159 = v158;
            v160 = v159 + 1;
            v161 = operator new(v159 + 1);
            *v161 = 0;
            v162 = v160 | 0x8000000000000000;
            *(_QWORD *)&v410[8] = 0;
            *(_QWORD *)&v410[16] = v160 | 0x8000000000000000;
            *(_QWORD *)v410 = v161;
            v163 = (v160 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            v164 = (v160 | 0x8000000000000000) >> 56;
            v165 = v152 - v163;
            if (v152 <= v163)
              goto LABEL_243;
          }
          if (0x7FFFFFFFFFFFFFF6 - v163 < v165)
            sub_22316DBC0();
          v169 = 0x7FFFFFFFFFFFFFF7;
          if (v163 < 0x3FFFFFFFFFFFFFF3)
          {
            v170 = 2 * v163;
            if (v152 > 2 * v163)
              v170 = v152;
            if (v170 >= 0x17)
            {
              v172 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
              v173 = v170 | 7;
              if (v173 == 23)
                v173 = v172;
              v169 = v173 + 1;
            }
            else
            {
              v169 = 23;
            }
          }
          v166 = operator new(v169);
          memcpy(v166, v151, v152);
          if (v163 != 22)
            operator delete(v161);
          *(_QWORD *)&v410[8] = v152;
          *(_QWORD *)&v410[16] = v169 | 0x8000000000000000;
          *(_QWORD *)v410 = v166;
          goto LABEL_262;
        }
      }
LABEL_225:
      kdebug_trace();
      if (SHIBYTE(v403[2]) < 0)
      {
        operator delete(v403[0]);
        if ((char)v405 < 0)
          goto LABEL_229;
      }
      else if ((char)v405 < 0)
      {
LABEL_229:
        operator delete(v404[0]);
      }
      if (++v78 != 33)
        continue;
      break;
    }
    v77 = v374 + 1;
    if (v374 + 1 != v371)
      continue;
    break;
  }
  while (++*(_QWORD *)__val != v370)
  {
    v76 = (char *)v46[1];
    if (v46[1])
      goto LABEL_90;
  }
LABEL_353:
  *(_OWORD *)a1 = *(_OWORD *)v391;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)&v391[12];
  *(_OWORD *)(a1 + 32) = v392;
  *(_QWORD *)(a1 + 48) = v393;
  *(_OWORD *)(a1 + 56) = v394;
  *(_BYTE *)(a1 + 72) = 1;
}

void sub_2238F8C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  if (*(_BYTE *)(v47 - 200))
  {
    if (*(char *)(v47 - 201) < 0)
      operator delete(*(void **)(v47 - 224));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2238F8CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
  {
    operator delete(*(void **)(v1 - 224));
    __cxa_guard_abort(&qword_2540CC9E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC9E8);
  _Unwind_Resume(a1);
}

void sub_2238F8D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,int a46,unint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  uint64_t v72;
  void *v74;
  BOOL v75;
  int v76;

  if (*(_BYTE *)(v72 - 200) && *(char *)(v72 - 201) < 0)
    operator delete(*(void **)(v72 - 224));
  __cxa_guard_abort(&qword_2557952F8);
  if (a67 < 0)
    operator delete(__p);
  if (a72 < 0)
    operator delete(a68);
  v74 = a43;
  if (a43)
  {
    if (a46)
      v75 = a45 == 0;
    else
      v75 = 1;
    if (v75)
      v76 = 0;
    else
      v76 = a46;
    if (v76 * (((381774871 * (a47 >> 34)) >> 32) >> 2) == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v74 = a43;
    }
    free(v74);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2238F940C(uint64_t a1, char *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 5;
    strcpy((char *)__p, "input");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2238FB548((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_2238F94BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238F94D8(uint64_t a1, char *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 6;
    strcpy((char *)__p, "output");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22389549C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_2238F958C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238F95A8(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_223846334(v4, "Input_");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC5C8C8[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5C868[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5C880[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5C850[v5])(&v6, v4);
  return result;
}

void sub_2238F96D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238F96EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238F9700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2238F9714(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_2231A0D14(v4, "Output_");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC5C8C8[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5C868[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5C880[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5C850[v5])(&v6, v4);
  return result;
}

void sub_2238F9844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238F9858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238F986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238F9880(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238F99A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238F99BC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
    {
      v3 = !*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 56) == 0;
      v4 = v3 ? 0 : *(_DWORD *)(a1 + 60);
      if (v4 * (((381774871 * (unint64_t)(*(_QWORD *)(a1 + 64) >> 34)) >> 32) >> 2) != -1)
        goto LABEL_12;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v2 = *(void **)(a1 + 40);
      if (v2)
LABEL_12:
        free(v2);
    }
    *(_QWORD *)(a1 + 40) = 0;
    return a1;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    return a1;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_2238F9AB8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *__p[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;

  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)__p = 0u;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v13 = 0;
  v12 = 0;
  sub_2238F9BD8((unint64_t *)(a1 + 32), &v12, &v13, 1, __p, 1, 0);
  v2 = (void **)__p[1];
  v3 = (void **)v10;
  *((_QWORD *)&v11 + 1) = 0;
  v4 = v10 - (unint64_t)__p[1];
  if ((unint64_t)v10 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v10;
      v2 = (void **)((char *)__p[1] + 8);
      __p[1] = v2;
      v4 = v10 - (_QWORD)v2;
    }
    while ((_QWORD)v10 - (_QWORD)v2 > 0x10uLL);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 11;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 22;
LABEL_7:
    *(_QWORD *)&v11 = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    if ((void *)v10 != __p[1])
      *(_QWORD *)&v10 = v10 + (((unint64_t)__p[1] - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return a1;
}

void sub_2238F9BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223889878((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t *sub_2238F9BD8(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _QWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  _OWORD *v73;
  _OWORD *v74;
  int v75;
  uint64_t v76;
  int v78;
  uint64_t v79;
  int v80;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 48 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    v20 = malloc_type_posix_memalign(&memptr, v19, 48 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2244E2E20(v20, a1[2], v15);
    v21 = memptr;
    a1[1] = (unint64_t)memptr;
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_QWORD *)a2;
  a1[3] = *(_QWORD *)a2;
  a1[4] = (48 * v11) & 0xFFFFFFF0 | ((unint64_t)(3 * HIDWORD(v11)) << 36);
  if (v21)
  {
    v23 = v21;
    v24 = 48 * (int)v11 / 0x30u;
    v25 = 48 * HIDWORD(v11) / 0x30u;
    if (a6)
    {
      if (HIDWORD(v22))
        v26 = (_DWORD)v22 == 0;
      else
        v26 = 1;
      if (v26)
        v27 = 0;
      else
        v27 = v22;
      if (v25 * HIDWORD(v27) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if ((_DWORD)v27 && HIDWORD(v27))
      {
        v28 = v27 - 1;
        v29 = HIDWORD(v27) - 1;
        if (HIDWORD(v27) == 1)
        {
          v30 = (uint64_t)v23;
        }
        else if ((_DWORD)v27 == 1)
        {
          v76 = 48 * v25;
          v30 = (uint64_t)v23;
          do
          {
            v30 = sub_2238FA290(v30, a5) + v76;
            --v29;
          }
          while (v29);
        }
        else
        {
          v80 = 0;
          v30 = (uint64_t)v23;
          v78 = HIDWORD(v27) - 1;
          do
          {
            v31 = v30;
            v32 = 0;
            v79 = v30;
            do
            {
              *(_OWORD *)(v31 + 16) = 0u;
              *(_OWORD *)(v31 + 32) = 0u;
              *(_OWORD *)v31 = 0u;
              v33 = a5[4];
              v34 = v33 / 0x16;
              v35 = a5[1];
              if (a5[2] != v35)
              {
                v36 = *(_QWORD *)(v35 + 8 * (v33 / 0x16)) + 180 * (v33 % 0x16);
                v37 = a5[5] + v33;
                v38 = (_QWORD *)(v35 + 8 * (v37 / 0x16));
                v39 = *v38 + 180 * (v37 % 0x16);
                if (v39 != v36)
                {
                  v40 = (_QWORD *)(v35 + 8 * v34);
                  v41 = 22 * (v38 - v40) + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v39 - *v38) >> 2);
                  v42 = (uint64_t)(v36 - *v40) >> 2;
                  v43 = v41 - 0x4FA4FA4FA4FA4FA5 * v42;
                  if (v43)
                  {
                    sub_2238FA620(v31, v41 - 0x4FA4FA4FA4FA4FA5 * v42);
                    v44 = *(_QWORD *)(v31 + 40);
                    v45 = *(_QWORD *)(v31 + 8);
                    v46 = *(_QWORD *)(v31 + 32) + v44;
                    v47 = (unint64_t *)(v45 + 8 * (v46 / 0x16));
                    v48 = *v47;
                    v49 = *v47 + 180 * (v46 % 0x16);
                    if (*(_QWORD *)(v31 + 16) == v45)
                      v50 = 0;
                    else
                      v50 = v49;
                    v51 = v43 + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v50 - v48) >> 2);
                    if (v51 < 1)
                    {
                      v54 = 21 - v51;
                      v52 = &v47[-(v54 / 0x16)];
                      v53 = *v52 + 180 * (22 * (v54 / 0x16) - v54) + 3780;
                      if (v50 != v53)
                      {
                        do
                        {
LABEL_43:
                          v55 = v48 + 3960;
                          if (v47 == v52)
                            v55 = v53;
                          if (v50 == v55)
                          {
                            *(_QWORD *)(v31 + 40) = v44;
                            if (v47 == v52)
                              break;
                          }
                          else
                          {
                            v56 = v50;
                            do
                            {
                              v57 = *(_OWORD *)v36;
                              v58 = *(_OWORD *)(v36 + 16);
                              v59 = *(_OWORD *)(v36 + 48);
                              *(_OWORD *)(v56 + 32) = *(_OWORD *)(v36 + 32);
                              *(_OWORD *)(v56 + 48) = v59;
                              *(_OWORD *)v56 = v57;
                              *(_OWORD *)(v56 + 16) = v58;
                              v60 = *(_OWORD *)(v36 + 64);
                              v61 = *(_OWORD *)(v36 + 80);
                              v62 = *(_OWORD *)(v36 + 112);
                              *(_OWORD *)(v56 + 96) = *(_OWORD *)(v36 + 96);
                              *(_OWORD *)(v56 + 112) = v62;
                              *(_OWORD *)(v56 + 64) = v60;
                              *(_OWORD *)(v56 + 80) = v61;
                              v63 = *(_OWORD *)(v36 + 128);
                              v64 = *(_OWORD *)(v36 + 144);
                              v65 = *(_OWORD *)(v36 + 160);
                              *(_DWORD *)(v56 + 176) = *(_DWORD *)(v36 + 176);
                              *(_OWORD *)(v56 + 144) = v64;
                              *(_OWORD *)(v56 + 160) = v65;
                              *(_OWORD *)(v56 + 128) = v63;
                              v36 += 180;
                              if (v36 - *v40 == 3960)
                              {
                                v66 = v40[1];
                                ++v40;
                                v36 = v66;
                              }
                              v56 += 180;
                            }
                            while (v56 != v55);
                            v44 = *(_QWORD *)(v31 + 40) + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v55 - v50) >> 2);
                            *(_QWORD *)(v31 + 40) = v44;
                            if (v47 == v52)
                              break;
                          }
                          v67 = v47[1];
                          ++v47;
                          v48 = v67;
                          v50 = v67;
                        }
                        while (v67 != v53);
                      }
                    }
                    else
                    {
                      v52 = &v47[v51 / 0x16uLL];
                      v53 = *v52 + 180 * (v51 % 0x16uLL);
                      if (v50 != v53)
                        goto LABEL_43;
                    }
                  }
                }
              }
              v31 += 48 * v24;
              ++v32;
            }
            while (v32 != v28);
            sub_2238FA290(v31, a5);
            v30 = v79 + 48 * v25;
            ++v80;
          }
          while (v80 != v78);
        }
        for (; v28; --v28)
          v30 = sub_2238FA290(v30, a5) + 48 * v24;
        sub_2238FA290(v30, a5);
      }
    }
    else
    {
      if (HIDWORD(v22))
        v68 = (_DWORD)v22 == 0;
      else
        v68 = 1;
      if (v68)
        v69 = 0;
      else
        v69 = v22;
      if (v25 * HIDWORD(v69) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if ((_DWORD)v69 && HIDWORD(v69))
      {
        v70 = v69 - 1;
        v71 = HIDWORD(v69) - 1;
        if (HIDWORD(v69) == 1)
        {
          v73 = v23;
        }
        else if ((_DWORD)v69 == 1)
        {
          v73 = v23;
          do
          {
            v73[1] = 0uLL;
            v73[2] = 0uLL;
            *v73 = 0uLL;
            v73 += 3 * v25;
            --v71;
          }
          while (v71);
        }
        else
        {
          v72 = 0;
          v73 = v23;
          do
          {
            v74 = v73;
            v75 = v69 - 1;
            do
            {
              v74[1] = 0uLL;
              v74[2] = 0uLL;
              *v74 = 0uLL;
              v74 += 3 * v24;
              --v75;
            }
            while (v75);
            v74[1] = 0uLL;
            v74[2] = 0uLL;
            *v74 = 0uLL;
            v73 += 3 * v25;
            ++v72;
          }
          while (v72 != v71);
        }
        if ((_DWORD)v69 != 1)
        {
          do
          {
            v73[1] = 0uLL;
            v73[2] = 0uLL;
            *v73 = 0uLL;
            v73 += 3 * v24;
            --v70;
          }
          while (v70);
        }
        v73[1] = 0u;
        v73[2] = 0u;
        *v73 = 0u;
      }
    }
  }
  return a1;
}

void sub_2238FA208(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2238895FC(v1);
  _Unwind_Resume(a1);
}

void sub_2238FA238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v12 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  if (v11 == v12)
  {
    v13 = *(void **)v9;
    if (!*(_QWORD *)v9)
      goto LABEL_3;
  }
  else
  {
    *(_QWORD *)(v9 + 16) = v11 + ((v12 - v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = *(void **)v9;
    if (!*(_QWORD *)v9)
    {
LABEL_3:
      sub_2238895FC(a9);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  sub_2238895FC(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2238FA290(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  v5 = (_QWORD *)(v4 + 8 * (v3 / 0x16));
  if (a2[2] != v4)
  {
    v6 = *(_QWORD *)(v4 + 8 * (v3 / 0x16)) + 180 * (v3 % 0x16);
    v7 = a2[5] + v3;
    v8 = (_QWORD *)(v4 + 8 * (v7 / 0x16));
    v9 = *v8 + 180 * (v7 % 0x16);
    if (v9 != v6)
    {
      v10 = 22 * (v8 - v5) + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v9 - *v8) >> 2);
      v11 = (uint64_t)(v6 - *v5) >> 2;
      v12 = v10 - 0x4FA4FA4FA4FA4FA5 * v11;
      v13 = (uint64_t *)(a1 + 40);
      if (v12)
      {
        sub_2238FA620(a1, v10 - 0x4FA4FA4FA4FA4FA5 * v11);
        v14 = *(_QWORD *)(a1 + 40);
        v15 = *(_QWORD *)(a1 + 8);
        v16 = *(_QWORD *)(a1 + 32) + v14;
        v17 = (_QWORD *)(v15 + 8 * (v16 / 0x16));
        if (*(_QWORD *)(a1 + 16) == v15)
          v18 = 0;
        else
          v18 = *v17 + 180 * (v16 % 0x16);
        v19 = v12 + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v18 - *v17) >> 2);
        if (v19 < 1)
        {
          v22 = 21 - v19;
          v20 = &v17[-(v22 / 0x16)];
          v21 = *v20 + 180 * (22 * (v22 / 0x16) - v22) + 3780;
          if (v18 != v21)
          {
            do
            {
LABEL_13:
              v23 = v21;
              if (v17 != v20)
                v23 = *v17 + 3960;
              if (v18 == v23)
              {
                *v13 = v14;
                if (v17 == v20)
                  return a1;
              }
              else
              {
                v24 = v18;
                do
                {
                  v25 = *(_OWORD *)v6;
                  v26 = *(_OWORD *)(v6 + 16);
                  v27 = *(_OWORD *)(v6 + 48);
                  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v6 + 32);
                  *(_OWORD *)(v24 + 48) = v27;
                  *(_OWORD *)v24 = v25;
                  *(_OWORD *)(v24 + 16) = v26;
                  v28 = *(_OWORD *)(v6 + 64);
                  v29 = *(_OWORD *)(v6 + 80);
                  v30 = *(_OWORD *)(v6 + 112);
                  *(_OWORD *)(v24 + 96) = *(_OWORD *)(v6 + 96);
                  *(_OWORD *)(v24 + 112) = v30;
                  *(_OWORD *)(v24 + 64) = v28;
                  *(_OWORD *)(v24 + 80) = v29;
                  v31 = *(_OWORD *)(v6 + 128);
                  v32 = *(_OWORD *)(v6 + 144);
                  v33 = *(_OWORD *)(v6 + 160);
                  *(_DWORD *)(v24 + 176) = *(_DWORD *)(v6 + 176);
                  *(_OWORD *)(v24 + 144) = v32;
                  *(_OWORD *)(v24 + 160) = v33;
                  *(_OWORD *)(v24 + 128) = v31;
                  v6 += 180;
                  if (v6 - *v5 == 3960)
                  {
                    v34 = v5[1];
                    ++v5;
                    v6 = v34;
                  }
                  v24 += 180;
                }
                while (v24 != v23);
                v14 = *v13 + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v23 - v18) >> 2);
                *v13 = v14;
                if (v17 == v20)
                  return a1;
              }
              v35 = v17[1];
              ++v17;
              v18 = v35;
            }
            while (v35 != v21);
          }
        }
        else
        {
          v20 = &v17[v19 / 0x16uLL];
          v21 = *v20 + 180 * (v19 % 0x16uLL);
          if (v18 != v21)
            goto LABEL_13;
        }
      }
    }
  }
  return a1;
}

void sub_2238FA5D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 == v4)
  {
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  else
  {
    *(_QWORD *)(v1 + 16) = v3 + ((v4 - v3 + 7) & 0xFFFFFFFFFFFFFFF8);
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_2238FA620(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x16)
    v6 = v5 / 0x16 + 1;
  else
    v6 = v5 / 0x16;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 / 0x16)
    v8 = v7 / 0x16;
  else
    v8 = v6;
  if (v6 <= v7 / 0x16)
  {
    *(_QWORD *)(a1 + 32) = v7 - 22 * v8;
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0xF78uLL);
        sub_22323CCA0((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0xF78uLL);
        sub_22323CE2C((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 21;
        else
          v116 = 22;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - 22 * v6;
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= 22 * v8;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_223174E94();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = -22 * v8;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0xF78uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_223174E94();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_223174E94();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_223174E94();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) += v144;
  if (v71)
    operator delete(v71);
}

void sub_2238FAF3C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2238FAF88()
{
  __cxa_end_catch();
  JUMPOUT(0x2238FAF90);
}

void sub_2238FAFA8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x16;
  v4 = v2 - 22;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xF78uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xF78uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xF78uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_2238FB4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238FB504(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238FB518(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2238FB530(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2238FB548(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2238FB680(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2238FB64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2238FB680@<X0>(char *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  _BYTE *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _BYTE *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 0;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(1uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_2238FB810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2238FB828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2238FB860@<X0>(unint64_t *a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, float a8@<S0>, float a9@<S1>)
{
  int32x4_t v15;
  char v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  unsigned __int32 v24;
  float32x4_t v25;
  unsigned __int32 v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  float32x2_t v30;
  float32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v52;
  float32x4_t v53;
  unsigned int v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  int v73;
  float32x2_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  unsigned int v88;
  unint64_t v89;
  _DWORD *v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v109;
  int v111;
  uint64_t v112;
  int32x4_t v113;
  float32x2_t v114;
  int32x4_t v115;
  float v116;
  float32x2_t v117;
  float32x4_t v118;
  int v119;
  int8x16_t v120;
  float32x2_t v121;
  int32x4_t v122;
  float32x4_t v123;
  int32x4_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int8x16_t v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *__p;
  void *v141;
  uint64_t v142;
  int v143;
  __int128 v144;
  __int128 v145;
  int v146;

  v144 = 0u;
  v145 = 0u;
  v146 = 728303468;
  kdebug_trace();
  v15.i32[3] = 0;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_DWORD *)(a7 + 32) = 1065353216;
  v15.i64[0] = *a1;
  v124 = (int32x4_t)*a1;
  v15.i32[2] = *((_DWORD *)a1 + 2);
  v122 = v15;
  v15.i64[0] = a1[2];
  v113 = v15;
  v15.i32[2] = *((_DWORD *)a1 + 6);
  v115 = v15;
  v15.i32[0] = *((_DWORD *)a1 + 10);
  v126 = *(float32x2_t *)v15.i8;
  v15.i64[0] = a1[4];
  v120 = (int8x16_t)v15;
  v15.i64[0] = a1[6];
  v15.i32[2] = *((_DWORD *)a1 + 14);
  v118 = (float32x4_t)v15;
  if (*(_DWORD *)(a5 + 32))
    _ZF = *(_DWORD *)(a5 + 36) == 0;
  else
    _ZF = 1;
  v17 = _ZF;
  v142 = 0x8000000080000000;
  v143 = 0x7FFFFFFF;
  v112 = a7;
  sub_223902174((uint64_t)&v132, &v142, 8);
  v18 = v120;
  v18.i32[2] = v126.i32[0];
  v125 = (float32x2_t)vzip1q_s32(v124, v113).u64[0];
  v19 = (int8x16_t)vtrn2q_s32(v122, v115);
  v20 = (int8x16_t)vnegq_f32(v118);
  v19.i32[2] = v120.i32[1];
  v21 = vzip2q_s32(v122, v115);
  *(float32x2_t *)v22.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)*(_OWORD *)&vzip1q_s32(v122, v115), *(float *)v20.i32), *(float32x2_t *)v19.i8, *(float32x2_t *)v118.f32, 1), *(float32x2_t *)v21.i8, v118, 2);
  v23 = v21;
  v23.i32[2] = v126.i32[0];
  v24 = vextq_s8(v19, (int8x16_t)vdupq_laneq_s32(v23, 2), 4uLL).u32[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
  v26 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.i8, 1), *(float32x2_t *)v118.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), v126).u32[0];
  v127 = (float32x2_t)__PAIR64__(v24, v25.u32[3]);
  v22.i64[1] = __PAIR64__(1.0, v26);
  v121 = *(float32x2_t *)v21.i8;
  v123 = v22;
  v27 = *(_DWORD *)(a3 + 36);
  v129 = v18;
  if (v27)
  {
    v28 = 0;
    v29 = *(unsigned int *)(a3 + 32);
    v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1);
    v31 = (float32x4_t)vextq_s8(v18, v18, 8uLL);
    v114 = *(float32x2_t *)v31.f32;
    v32 = v29;
    v109 = a5;
    do
    {
      if (v32)
      {
        v33 = 0;
        v119 = *(_DWORD *)(a3 + 40);
        v34 = a3;
        v35 = *(_QWORD *)(a3 + 24) + 2 * (*(_DWORD *)(a3 + 44) * v28);
        v36 = *(_DWORD *)(a4 + 40);
        v37 = *(_QWORD *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 44) * v28);
        v38 = *(_DWORD *)(a5 + 40);
        v39 = *(_QWORD *)(a5 + 24) + 4 * (*(_DWORD *)(a5 + 44) * v28);
        v111 = v28;
        v116 = (float)v28;
        do
        {
          if ((v17 & 1) != 0 || *(float *)(v39 + 4 * (v38 * v33)) <= 10.0)
          {
            _H0 = *(_WORD *)(v37 + 2 * (v36 * v33));
            __asm { FCVT            S0, H0 }
            if (_S0 >= a9)
            {
              v31.f32[0] = (float)(int)v33;
              v31.f32[1] = v116;
              _H1 = *(_WORD *)(v35 + 2 * (v119 * v33));
              *(float32x2_t *)v31.f32 = vadd_f32(vmul_f32(a2[4], *(float32x2_t *)v31.f32), a2[5]);
              v31.i32[2] = 1.0;
              __asm { FCVT            S1, H1 }
              v52 = (int8x16_t)vmulq_n_f32(v31, _S1);
              *(float32x2_t *)v53.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v125, *(float *)v52.i32), v127, *(float32x2_t *)v52.i8, 1), v121, (float32x4_t)v52, 2);
              *(float32x2_t *)&v53.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v52.i8), v30, *(float32x2_t *)v52.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), v114);
              v31 = vaddq_f32(v123, v53);
              v53.i64[0] = 0x3F0000003F000000;
              v53.i64[1] = 0x3F0000003F000000;
              v25 = vmlaq_n_f32(v53, v31, a8);
              v54 = vcvtms_s32_f32(v25.f32[2]) & 0xFFFFFFF8;
              v31.i64[0] = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v25.f32)) & 0xFFFFFFF8FFFFFFF8;
              v130 = v31.i64[0];
              v131 = v54;
              v55 = __p;
              v56 = *((unsigned int *)__p + v132);
              v57 = v56;
              if (v56 < v133)
              {
                v57 = *((unsigned int *)__p + v132);
                do
                {
                  v58 = (char *)v136 + 12 * v57;
                  if (v31.i32[0] == *(_DWORD *)v58 && __PAIR64__(v54, v31.u32[1]) == *(_QWORD *)(v58 + 4))
                    break;
                  v57 = *((unsigned int *)__p + v57);
                }
                while (v57 < v133);
              }
              if (v57 == v133)
              {
                v59 = v135;
                if (v135 <= v134)
                {
                  v68 = (unint64_t *)((char *)v136 + 12 * v135);
                  if (v68 != &v130)
                  {
                    v69 = v130;
                    *((_DWORD *)v68 + 2) = v131;
                    *v68 = v69;
                    v59 = v135;
                    v55 = __p;
                    v56 = *((unsigned int *)__p + v132);
                  }
                  v70 = v59;
                  v55[v70] = v56;
                  v71 = (char *)v138;
                  *((_DWORD *)v138 + v56) = v59;
                  v55[v132] = v59;
                  *(_DWORD *)&v71[v70 * 4] = v132;
                  ++v135;
                }
                else
                {
                  v60 = v138;
                  v61 = *((unsigned int *)v138 + v133);
                  v62 = *((unsigned int *)v138 + v61);
                  v63 = *((unsigned int *)__p + v61);
                  *((_DWORD *)__p + v62) = v63;
                  v60[v63] = v62;
                  v64 = (unint64_t *)((char *)v136 + 12 * v61);
                  if (v64 != &v130)
                  {
                    v65 = v130;
                    *((_DWORD *)v64 + 2) = v131;
                    *v64 = v65;
                    v55 = __p;
                    v60 = v138;
                  }
                  v66 = v55[v132];
                  v67 = v61;
                  v55[v67] = v66;
                  v60[v66] = v61;
                  v55[v132] = v61;
                  v60[v67] = v132;
                }
                sub_22390246C(v112, (int *)&v130, (uint64_t)&v130);
              }
              else
              {
                v40 = v138;
                v41 = v57;
                v42 = *((unsigned int *)v138 + v57);
                v43 = *((unsigned int *)__p + v57);
                *((_DWORD *)__p + v42) = v43;
                v40[v43] = v42;
                v44 = v55[v132];
                v55[v41] = v44;
                v40[v44] = v57;
                v55[v132] = v57;
                v40[v41] = v132;
              }
              v29 = *(unsigned int *)(v34 + 32);
            }
          }
          ++v33;
        }
        while (v33 < v29);
        a3 = v34;
        v27 = *(_DWORD *)(v34 + 36);
        v32 = v29;
        a5 = v109;
        v28 = v111;
      }
      ++v28;
    }
    while (v28 < v27);
  }
  if (v27)
  {
    if (*(_DWORD *)(a6 + 32))
    {
      if (*(_DWORD *)(a6 + 36))
      {
        v72 = *(unsigned int *)(a3 + 32);
        if ((_DWORD)v72)
        {
          v73 = 0;
          v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v129.i8, 1);
          v117 = (float32x2_t)vextq_s8(v129, v129, 8uLL).u64[0];
          v75 = 1;
          do
          {
            if (v75)
            {
              v76 = 0;
              v77 = *(_DWORD *)(a6 + 40);
              v78 = *(_QWORD *)(a6 + 24) + 4 * (*(_DWORD *)(a6 + 44) * v73);
              do
              {
                v84 = *(float *)(v78 + 4 * (v77 * v76));
                if (v84 > -65504.0)
                {
                  v25.f32[0] = (float)(int)v76;
                  v25.f32[1] = (float)v73;
                  *(float32x2_t *)v25.f32 = vadd_f32(vmul_f32(a2[4], *(float32x2_t *)v25.f32), a2[5]);
                  v25.i32[2] = 1.0;
                  v85 = (int8x16_t)vmulq_n_f32(v25, v84);
                  *(float32x2_t *)v86.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v125, *(float *)v85.i32), v127, *(float32x2_t *)v85.i8, 1), v121, (float32x4_t)v85, 2);
                  *(float32x2_t *)&v86.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v85.i8), v74, *(float32x2_t *)v85.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), v117);
                  v87 = vaddq_f32(v123, v86);
                  v86.i64[0] = 0x3F0000003F000000;
                  v86.i64[1] = 0x3F0000003F000000;
                  v25 = vmlaq_n_f32(v86, v87, a8);
                  v88 = vcvtms_s32_f32(v25.f32[2]) & 0xFFFFFFF8;
                  v89 = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v25.f32)) & 0xFFFFFFF8FFFFFFF8;
                  v130 = v89;
                  v131 = v88;
                  v90 = __p;
                  v91 = *((unsigned int *)__p + v132);
                  v92 = v91;
                  if (v91 < v133)
                  {
                    v92 = *((unsigned int *)__p + v132);
                    do
                    {
                      v93 = (char *)v136 + 12 * v92;
                      if ((_DWORD)v89 == *(_DWORD *)v93 && __PAIR64__(v88, HIDWORD(v89)) == *(_QWORD *)(v93 + 4))
                        break;
                      v92 = *((unsigned int *)__p + v92);
                    }
                    while (v92 < v133);
                  }
                  if (v92 == v133)
                  {
                    v94 = v135;
                    if (v135 <= v134)
                    {
                      v103 = (unint64_t *)((char *)v136 + 12 * v135);
                      if (v103 != &v130)
                      {
                        v104 = v130;
                        *((_DWORD *)v103 + 2) = v131;
                        *v103 = v104;
                        v94 = v135;
                        v90 = __p;
                        v91 = *((unsigned int *)__p + v132);
                      }
                      v105 = v94;
                      v90[v105] = v91;
                      v106 = (char *)v138;
                      *((_DWORD *)v138 + v91) = v94;
                      v90[v132] = v94;
                      *(_DWORD *)&v106[v105 * 4] = v132;
                      ++v135;
                    }
                    else
                    {
                      v95 = v138;
                      v96 = *((unsigned int *)v138 + v133);
                      v97 = *((unsigned int *)v138 + v96);
                      v98 = *((unsigned int *)__p + v96);
                      *((_DWORD *)__p + v97) = v98;
                      v95[v98] = v97;
                      v99 = (unint64_t *)((char *)v136 + 12 * v96);
                      if (v99 != &v130)
                      {
                        v100 = v130;
                        *((_DWORD *)v99 + 2) = v131;
                        *v99 = v100;
                        v90 = __p;
                        v95 = v138;
                      }
                      v101 = v90[v132];
                      v102 = v96;
                      v90[v102] = v101;
                      v95[v101] = v96;
                      v90[v132] = v96;
                      v95[v102] = v132;
                    }
                    sub_22390246C(v112, (int *)&v130, (uint64_t)&v130);
                  }
                  else
                  {
                    v79 = v138;
                    v80 = v92;
                    v81 = *((unsigned int *)v138 + v92);
                    v82 = *((unsigned int *)__p + v92);
                    *((_DWORD *)__p + v81) = v82;
                    v79[v82] = v81;
                    v83 = v90[v132];
                    v90[v80] = v83;
                    v79[v83] = v92;
                    v90[v132] = v92;
                    v79[v80] = v132;
                  }
                  v72 = *(unsigned int *)(a3 + 32);
                }
                ++v76;
              }
              while (v76 < v72);
              v27 = *(_DWORD *)(a3 + 36);
              v75 = v72;
            }
            ++v73;
          }
          while (v73 < v27);
        }
      }
    }
  }
  if (__p)
  {
    v141 = __p;
    operator delete(__p);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  return kdebug_trace();
}

void sub_2238FC040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  sub_22322E828(a14);
  sub_2231874DC(v14 - 160);
  _Unwind_Resume(a1);
}

void sub_2238FC060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  sub_2238FC088(&a36);
  sub_22322E828(a14);
  sub_2231874DC(v36 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_2238FC088(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2238FC0D8@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>)
{
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float *v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x2_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  float v41;
  float v42;
  float v43;
  float v44;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float *v59;
  float *v60;
  float *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  std::mutex *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  float32x4_t v71;
  float *v72;
  float32x4_t v73;
  int v74;
  __int32 *v75;
  float32x2_t *v76;
  float32x4_t v77;
  _QWORD *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  const char *v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  int v90;
  const char *v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x2_t v94;
  float v95;
  float32x2_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  float32x2_t *v103;
  std::__shared_weak_count *v104;
  unint64_t v105;
  uint64_t v106;
  __int32 v107;
  unint64_t v108;
  float *v109;
  float *v110;
  const char **v111;
  const char *v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  std::mutex *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t *v144;
  int32x2_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float *v148;
  float32x4_t v149;
  float32x4_t v150;
  float *v151;
  float *v152;
  const char **v153;
  const char *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _QWORD *v179;
  float *v180;
  float *v181;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  float v194;
  float32x2_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  float32x2_t v200;
  float32x4_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  float v205;
  int v206;
  float32x4_t v207;
  int v208;
  int8x16_t v209;
  int v210;
  float v211;
  float32x4_t v212;
  int v213;
  float32x4_t v214;
  float32x4_t v215;
  uint64_t v216;
  float32x4_t v217;
  float32x4_t v218;
  std::string v219;
  _QWORD v220[4];
  uint64_t v221;
  int v222;
  int v223;
  __int16 v224[2];
  int v225;
  __int128 v226;
  __int128 v227;
  _WORD v228[2];
  int v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  int v234;
  float v235;
  __int128 v236;
  __int128 v237;
  uint64_t (**v238)();
  uint64_t v239;
  std::__shared_weak_count *v240;
  void *__p;
  __int128 v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  __int16 v247;
  char v248;
  __int128 *v249;
  __int32 v250;
  const char *v251;
  unint64_t v252;
  const char *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  float32x2_t *v256;
  unint64_t v257;
  _BYTE v258[4];
  int v259;
  int v260;
  uint64_t v261;

  v261 = *MEMORY[0x24BDAC8D0];
  v235 = a10;
  v232 = 0u;
  v233 = 0u;
  v234 = 728303460;
  kdebug_trace();
  a9[1] = 0;
  v18 = (float *)(a9 + 1);
  a9[2] = 0;
  *a9 = a9 + 1;
  *(_OWORD *)(a9 + 3) = 0u;
  *(_OWORD *)(a9 + 5) = 0u;
  *(_OWORD *)(a9 + 7) = 0u;
  v230 = 0u;
  v231 = 0u;
  v229 = 1036831949;
  v228[0] = 1;
  v224[0] = 256;
  v226 = 0u;
  v227 = 0u;
  v225 = 1036831949;
  v223 = 4;
  v221 = 0x200000001;
  v222 = 4;
  v220[0] = &v235;
  v220[1] = a9;
  v220[2] = &v223;
  v220[3] = &v221;
  v187 = *(_DWORD *)(a3 + 36);
  if (!v187)
    goto LABEL_28;
  v179 = a9;
  v180 = (float *)(a9 + 1);
  v189 = 0;
  v14.i32[0] = *(_DWORD *)(a1 + 8);
  v15.i64[0] = *(_QWORD *)a1;
  v19 = v15;
  v19.i32[2] = v14.i32[0];
  v16.i64[0] = *(_QWORD *)(a1 + 16);
  v20 = v16;
  v20.i32[2] = *(_DWORD *)(a1 + 24);
  v17.i64[0] = *(_QWORD *)(a1 + 32);
  v21 = (int8x16_t)vtrn2q_s32(v19, v20);
  v21.i32[2] = v17.i32[1];
  v17.i32[2] = *(_DWORD *)(a1 + 40);
  v22 = vzip2q_s32(v19, v20);
  v14.i32[1] = v20.i32[2];
  v22.i32[2] = v17.i32[2];
  v23 = (float32x4_t)vdupq_laneq_s32(v22, 2);
  v24.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v21, 0).i32[3];
  v24.i32[1] = vextq_s8(v21, v14, 4uLL).u32[0];
  v199 = *(float32x2_t *)v17.i8;
  v200 = v24;
  v197 = (float32x2_t)vzip1q_s32(v15, v16).u64[0];
  v198 = *(float32x2_t *)v22.i8;
  v23.i64[0] = *(_QWORD *)(a1 + 48);
  v23.i32[2] = *(_DWORD *)(a1 + 56);
  v25 = (int8x16_t)vnegq_f32(v23);
  *(float32x2_t *)v26.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v197, *(float *)v25.i32), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v15, v16), *(float32x2_t *)v23.f32, 1), *(float32x2_t *)v14.i8, v23, 2);
  v20.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
  _Q0 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
  v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1);
  *(float32x2_t *)&v26.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v25.i8), v28, *(float32x2_t *)v23.f32, 1), *(float32x2_t *)_Q0.f32, *(float32x2_t *)v20.i8);
  v195 = *(float32x2_t *)v20.i8;
  v196 = v26;
  v188 = a3;
  do
  {
    v216 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v216)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v213 = *(_DWORD *)(a7 + 40);
      v210 = *(_DWORD *)(a8 + 40);
      v190 = *(_QWORD *)(a8 + 24) + 4 * (*(_DWORD *)(a8 + 44) * v189);
      v208 = *(_DWORD *)(v188 + 40);
      v192 = *(_QWORD *)(v188 + 24) + (*(_DWORD *)(v188 + 44) * v189);
      v193 = *(_QWORD *)(a7 + 24) + 2 * (*(_DWORD *)(a7 + 44) * v189);
      v206 = *(_DWORD *)(a4 + 40);
      v36 = *(_DWORD *)(a5 + 40);
      v191 = *(_QWORD *)(a5 + 24) + (*(_DWORD *)(a5 + 44) * v189);
      v37 = *(_DWORD *)(a6 + 40);
      v203 = *(_QWORD *)(a6 + 24) + 4 * (*(_DWORD *)(a6 + 44) * v189);
      _Q0.f32[0] = (float)v189;
      v201 = _Q0;
      while (1)
      {
        __asm { FMOV            V0.4S, #1.0 }
        if (_NF ^ _VF | _ZF)
          break;
        v42 = a2[4].f32[0];
        v41 = a2[4].f32[1];
        v44 = a2[5].f32[0];
        v43 = a2[5].f32[1];
        if (!*(_BYTE *)(v192 + v30))
          goto LABEL_16;
        _H5 = *(_WORD *)(v193 + 2 * v32);
        __asm { FCVT            S6, H5 }
        _Q0.f32[0] = (float)(v42 * (float)(int)v35) + v44;
        _Q0.f32[1] = (float)(v41 * v201.f32[0]) + v43;
        v194 = _S6;
        v47 = (int8x16_t)vmulq_n_f32(_Q0, _S6);
        *(float32x2_t *)v48.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v197, *(float *)v47.i32), v200, *(float32x2_t *)v47.i8, 1), v198, (float32x4_t)v47, 2);
        *(float32x2_t *)&v48.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v199, *(float32x2_t *)v47.i8), v28, *(float32x2_t *)v47.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), v195);
        v49 = vaddq_f32(v196, v48);
        LODWORD(v252) = v49.i32[2];
        v251 = (const char *)v49.i64[0];
        sub_2238FD728((uint64_t)v220, (uint64_t)&v251, (uint64_t)v228, *(double *)v49.i64, v48);
        _Q0.i32[0] = *(_DWORD *)(v190 + 4 * v31);
        _NF = _Q0.f32[0] > -65504.0 && _Q0.f32[0] < v194;
        if (_NF)
        {
          *(float32x2_t *)v51.f32 = vadd_f32(vmul_f32(a2[4], (float32x2_t)__PAIR64__(v201.u32[0], (float)(int)v35)), a2[5]);
          v51.i64[1] = __PAIR64__(v201.u32[3], 1.0);
          v52 = (int8x16_t)vmulq_n_f32(v51, _Q0.f32[0]);
          *(float32x2_t *)v51.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v197, *(float *)v52.i32), v200, *(float32x2_t *)v52.i8, 1), v198, (float32x4_t)v52, 2);
          *(float32x2_t *)&v51.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v199, *(float32x2_t *)v52.i8), v28, *(float32x2_t *)v52.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), v195);
          v53 = vaddq_f32(v196, v51);
          LODWORD(v252) = v53.i32[2];
          v251 = (const char *)v53.i64[0];
          sub_2238FD728((uint64_t)v220, (uint64_t)&v251, (uint64_t)v228, *(double *)v53.i64, v51);
        }
LABEL_6:
        ++v35;
        v34 += v36;
        v33 += v37;
        v32 += v213;
        v31 += v210;
        v30 += v208;
        v29 += v206;
        if (v216 == v35)
          goto LABEL_3;
      }
      v42 = a2[4].f32[0];
      v41 = a2[4].f32[1];
      v44 = a2[5].f32[0];
      v43 = a2[5].f32[1];
LABEL_16:
      if (*(float *)(v203 + 4 * v33) > 0.8 && *(_BYTE *)(v191 + v34))
      {
        _H5 = *(_WORD *)(v193 + 2 * v32);
        __asm { FCVT            S5, H5 }
        _Q0.f32[0] = v44 + (float)(v42 * (float)(int)v35);
        _Q0.f32[1] = v43 + (float)(v41 * v201.f32[0]);
        v56 = (int8x16_t)vmulq_n_f32(_Q0, _S5);
        *(float32x2_t *)v57.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v197, *(float *)v56.i32), v200, *(float32x2_t *)v56.i8, 1), v198, (float32x4_t)v56, 2);
        *(float32x2_t *)&v57.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v199, *(float32x2_t *)v56.i8), v28, *(float32x2_t *)v56.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), v195);
        v58 = vaddq_f32(v196, v57);
        LODWORD(v252) = v58.i32[2];
        v251 = (const char *)v58.i64[0];
        sub_2238FD728((uint64_t)v220, (uint64_t)&v251, (uint64_t)v224, *(double *)v58.i64, v57);
      }
      goto LABEL_6;
    }
LABEL_3:
    ++v189;
    a3 = v188;
  }
  while (v189 != v187);
  a9 = v179;
  v18 = v180;
  v59 = (float *)*v179;
  if ((float *)*v179 != v180)
  {
    do
    {
      v59[11] = fminf(v59[11], 1.0);
      v60 = (float *)*((_QWORD *)v59 + 1);
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = *(float **)v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (float *)*((_QWORD *)v59 + 2);
          _ZF = *(_QWORD *)v61 == (_QWORD)v59;
          v59 = v61;
        }
        while (!_ZF);
      }
      v59 = v61;
    }
    while (v61 != v180);
  }
LABEL_28:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v62 = sub_2241471F8();
    v63 = v62[2];
    if (!v63)
    {
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        v63 = v62[2];
        goto LABEL_32;
      }
LABEL_191:
      abort();
    }
LABEL_32:
    v64 = *(_QWORD *)(v63 + 64);
    v65 = (std::mutex *)(v64 + 32);
    std::mutex::lock((std::mutex *)(v64 + 32));
    v67 = *(_QWORD *)(v64 + 96);
    v66 = *(_QWORD *)(v64 + 104);
    std::mutex::unlock(v65);
    if (v67 != v66)
    {
      v251 = "cv3d.recon.";
      v252 = 11;
      v253 = "Monitoring.ChangeTracking";
      v254 = 25;
      sub_2231A9820((uint64_t)&v251, (uint64_t)&v255, 0, 0, &v219);
      sub_2241471F8();
      v68 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
        {
          v69 = (char *)operator new(0x20uLL);
          strcpy(v69, "ChangedSubblockDensities");
          *(_QWORD *)&v236 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v236 + 1) = 2;
          v70 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
          {
            v204 = v69;
            v202 = v68;
            sub_2241498F4((uint64_t)&v251, 0);
            v72 = (float *)*a9;
            if ((float *)*a9 != v18)
            {
              v205 = 1.0 / v235;
              v211 = (float)(1.0 / v235) * 4.0;
              v73 = (float32x4_t)vdupq_n_s32(0x437F0000u);
              v209 = (int8x16_t)v73;
              v181 = v18;
              do
              {
                v74 = 0;
                *(float32x2_t *)v73.f32 = vcvt_f32_s32(*(int32x2_t *)(v72 + 7));
                v73.f32[2] = (float)*((int *)v72 + 9);
                v73 = vmulq_n_f32(v73, v205);
                v214 = v73;
                v75 = (__int32 *)(v72 + 12);
                do
                {
                  v73.f32[0] = (float)(v74 % SHIDWORD(v221));
                  v73.f32[1] = (float)(v74 / SHIDWORD(v221) % SHIDWORD(v221));
                  v73.f32[2] = (float)(v74 / v222 % SHIDWORD(v221));
                  v71.i32[0] = *v75;
                  v77 = vaddq_f32(v214, vmulq_n_f32(v73, v211));
                  v78 = (_QWORD *)v252;
                  if (v252 >= (unint64_t)v253)
                  {
                    v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v252 - (_QWORD)v251) >> 2);
                    v81 = v80 + 1;
                    if (v80 + 1 > 0x1555555555555555)
                      sub_22316E078();
                    if (0x5555555555555556 * ((v253 - v251) >> 2) > v81)
                      v81 = 0x5555555555555556 * ((v253 - v251) >> 2);
                    if (0xAAAAAAAAAAAAAAABLL * ((v253 - v251) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                      v82 = 0x1555555555555555;
                    else
                      v82 = v81;
                    v217 = v71;
                    if (v82)
                    {
                      v207 = v77;
                      LODWORD(v249) = v82;
                      if (HIDWORD(v254) == -1)
                        sub_22316DD70();
                      *(_QWORD *)&v237 = &v249;
                      v83 = ((uint64_t (*)(__int128 *, uint64_t *))off_24EC5CAF0[HIDWORD(v254)])(&v237, &v254);
                      v71 = v217;
                      v77 = v207;
                    }
                    else
                    {
                      v83 = 0;
                      v84 = 0;
                    }
                    v85 = v83 + 12 * v80;
                    *(_QWORD *)v85 = v77.i64[0];
                    *(_DWORD *)(v85 + 8) = v77.i32[2];
                    v86 = (const char *)v252;
                    v87 = v251;
                    v88 = (const char *)v85;
                    if ((const char *)v252 != v251)
                    {
                      do
                      {
                        v89 = *(_QWORD *)(v86 - 12);
                        v86 -= 12;
                        v90 = *((_DWORD *)v86 + 2);
                        *(_QWORD *)(v88 - 12) = v89;
                        v88 -= 12;
                        *((_DWORD *)v88 + 2) = v90;
                      }
                      while (v86 != v87);
                      v86 = v251;
                    }
                    v79 = (char *)(v85 + 12);
                    v251 = v88;
                    v252 = v85 + 12;
                    v91 = v253;
                    v253 = (const char *)(v83 + 12 * v84);
                    if (v86)
                    {
                      *(_QWORD *)&v237 = v86;
                      DWORD2(v237) = -1431655765 * ((unint64_t)(v91 - v86) >> 2);
                      if (HIDWORD(v254) == -1)
                        sub_22316DD70();
                      v249 = &v237;
                      ((void (*)(__int128 **, uint64_t *))off_24EC5CB00[HIDWORD(v254)])(&v249, &v254);
                      v71 = v217;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v252 + 8) = v77.i32[2];
                    *v78 = v77.i64[0];
                    v79 = (char *)v78 + 12;
                  }
                  v77.i32[0] = 1132396544;
                  v92 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v71, v77), 0);
                  v71 = (float32x4_t)v209;
                  v93 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v92, (float32x4_t)v209), v209, v92);
                  v73 = (float32x4_t)vbicq_s8(v93, (int8x16_t)vcltzq_f32((float32x4_t)v93));
                  v252 = (unint64_t)v79;
                  v94 = vcvt_f32_u32((uint32x2_t)vcvt_s32_f32(*(float32x2_t *)v73.f32));
                  v95 = (float)(int)v73.f32[2];
                  v96 = v256;
                  if ((unint64_t)v256 < v257)
                  {
                    *v256 = v94;
                    v96[1].f32[0] = v95;
                    v76 = (float32x2_t *)((char *)v96 + 12);
                  }
                  else
                  {
                    v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v256 - (char *)v255) >> 2);
                    v98 = v97 + 1;
                    if (v97 + 1 > 0x1555555555555555)
                      sub_22316E078();
                    if (0x5555555555555556 * ((uint64_t)(v257 - (_QWORD)v255) >> 2) > v98)
                      v98 = 0x5555555555555556 * ((uint64_t)(v257 - (_QWORD)v255) >> 2);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v257 - (_QWORD)v255) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                      v99 = 0x1555555555555555;
                    else
                      v99 = v98;
                    if (v99)
                    {
                      LODWORD(v249) = v99;
                      if (v259 == -1)
                        sub_22316DD70();
                      *(_QWORD *)&v237 = &v249;
                      v100 = ((uint64_t (*)(__int128 *, _BYTE *))off_24EC5CAF0[v259])(&v237, v258);
                    }
                    else
                    {
                      v100 = 0;
                      v101 = 0;
                    }
                    v102 = v100 + 12 * v97;
                    *(float32x2_t *)v102 = v94;
                    *(float *)(v102 + 8) = v95;
                    v103 = v256;
                    v104 = v255;
                    v105 = v102;
                    if (v256 != (float32x2_t *)v255)
                    {
                      do
                      {
                        v106 = *(uint64_t *)((char *)&v103[-2] + 4);
                        v103 = (float32x2_t *)((char *)v103 - 12);
                        v107 = v103[1].i32[0];
                        *(_QWORD *)(v105 - 12) = v106;
                        v105 -= 12;
                        *(_DWORD *)(v105 + 8) = v107;
                      }
                      while (v103 != (float32x2_t *)v104);
                      v103 = (float32x2_t *)v255;
                    }
                    v76 = (float32x2_t *)(v102 + 12);
                    v255 = (std::__shared_weak_count *)v105;
                    v256 = (float32x2_t *)(v102 + 12);
                    v108 = v257;
                    v257 = v100 + 12 * v101;
                    if (v103)
                    {
                      *(_QWORD *)&v237 = v103;
                      DWORD2(v237) = -1431655765 * ((v108 - (unint64_t)v103) >> 2);
                      if (v259 == -1)
                        sub_22316DD70();
                      v249 = &v237;
                      ((void (*)(__int128 **, _BYTE *))off_24EC5CB00[v259])(&v249, v258);
                    }
                  }
                  v256 = v76;
                  ++v74;
                  ++v75;
                }
                while (v75 != (__int32 *)(v72 + 20));
                v109 = (float *)*((_QWORD *)v72 + 1);
                if (v109)
                {
                  do
                  {
                    v110 = v109;
                    v109 = *(float **)v109;
                  }
                  while (v109);
                }
                else
                {
                  do
                  {
                    v110 = (float *)*((_QWORD *)v72 + 2);
                    _ZF = *(_QWORD *)v110 == (_QWORD)v72;
                    v72 = v110;
                  }
                  while (!_ZF);
                }
                v72 = v110;
                v18 = v181;
              }
              while (v110 != v181);
            }
            v260 = 1;
            __p = v204;
            v242 = xmmword_2245B9420;
            v243 = 1;
            sub_22329F414((uint64_t)&v251, (__int128 *)&__p, &v236, &v244);
            if (v243 && SHIBYTE(v242) < 0)
              operator delete(__p);
            sub_22316F8F4((uint64_t *)&v251);
            v111 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 56))(v202);
            v112 = *v111;
            v113 = (std::__shared_weak_count *)v111[1];
            if (v113)
            {
              p_shared_owners = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldxr(p_shared_owners);
              while (__stxr(v115 + 1, p_shared_owners));
            }
            v116 = v245;
            v117 = v246;
            v238 = &off_24EC6A3B8;
            v239 = v245;
            v240 = v246;
            v246 = 0;
            v245 = 0;
            v251 = v112;
            v252 = (unint64_t)v113;
            if (v113)
            {
              v118 = (unint64_t *)&v113->__shared_owners_;
              do
                v119 = __ldxr(v118);
              while (__stxr(v119 + 1, v118));
            }
            v253 = (const char *)&off_24EC6A3B8;
            v254 = v116;
            v255 = v117;
            if (v117)
            {
              v120 = (unint64_t *)&v117->__shared_owners_;
              do
                v121 = __ldxr(v120);
              while (__stxr(v121 + 1, v120));
            }
            (*(void (**)(uint64_t *, const char **))(*v70 + 16))(v70, &v251);
            v122 = v255;
            if (v255)
            {
              v123 = (unint64_t *)&v255->__shared_owners_;
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            v125 = (std::__shared_weak_count *)v252;
            if (v252)
            {
              v126 = (unint64_t *)(v252 + 8);
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v128 = v240;
            if (v240)
            {
              v129 = (unint64_t *)&v240->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            if (v113)
            {
              v131 = (unint64_t *)&v113->__shared_owners_;
              do
                v132 = __ldaxr(v131);
              while (__stlxr(v132 - 1, v131));
              if (!v132)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            v133 = v246;
            if (v246)
            {
              v134 = (unint64_t *)&v246->__shared_owners_;
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              if (!v135)
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
            }
          }
          else
          {
            operator delete(v69);
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v136 = sub_2241471F8();
    v137 = v136[2];
    if (!v137)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_191;
      }
      v137 = v136[2];
    }
    v138 = *(_QWORD *)(v137 + 64);
    v139 = (std::mutex *)(v138 + 32);
    std::mutex::lock((std::mutex *)(v138 + 32));
    v141 = *(_QWORD *)(v138 + 96);
    v140 = *(_QWORD *)(v138 + 104);
    std::mutex::unlock(v139);
    if (v141 != v140)
    {
      v251 = "cv3d.recon.";
      v252 = 11;
      v253 = "Monitoring.ChangeTracking";
      v254 = 25;
      sub_2231A9820((uint64_t)&v251, (uint64_t)&v255, 0, 0, &v219);
      sub_2241471F8();
      v142 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142))
        {
          v143 = (char *)operator new(0x19uLL);
          strcpy(v143, "ChangedBlocksUnfiltered");
          *(_QWORD *)&v237 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v237 + 1) = 2;
          v144 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142))
          {
            sub_2241498F4((uint64_t)&v251, 0);
            v247 = -1;
            v248 = -1;
            v148 = (float *)*a9;
            if ((float *)*a9 != v18)
            {
              v146.f32[0] = 1.0 / v235;
              v218 = v146;
              *(float *)v145.i32 = (float)(1.0 / v235) * 8.0;
              v146.f32[0] = (float)(*(float *)v145.i32 * 0.0) * 0.5;
              v212 = (float32x4_t)vdupq_lane_s32(v145, 0);
              v215 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 0);
              do
              {
                *(float32x2_t *)v147.f32 = vcvt_f32_s32(*(int32x2_t *)(v148 + 7));
                v147.f32[2] = (float)*((int *)v148 + 9);
                v149 = vaddq_f32(v215, vmulq_n_f32(v147, v218.f32[0]));
                DWORD2(v236) = v149.i32[2];
                *(_QWORD *)&v236 = v149.i64[0];
                v150 = vaddq_f32(v212, v149);
                v250 = v150.i32[2];
                v249 = (__int128 *)v150.i64[0];
                sub_223CF1130((uint64_t)&v236, (uint64_t)&v249, 1, (__int8 *)&v247, (uint64_t)&v251, v218, v150, v212);
                v151 = (float *)*((_QWORD *)v148 + 1);
                if (v151)
                {
                  do
                  {
                    v152 = v151;
                    v151 = *(float **)v151;
                  }
                  while (v151);
                }
                else
                {
                  do
                  {
                    v152 = (float *)*((_QWORD *)v148 + 2);
                    _ZF = *(_QWORD *)v152 == (_QWORD)v148;
                    v148 = v152;
                  }
                  while (!_ZF);
                }
                v148 = v152;
              }
              while (v152 != v18);
            }
            __p = v143;
            v242 = xmmword_2245B9430;
            v243 = 1;
            sub_22329F414((uint64_t)&v251, (__int128 *)&__p, &v237, &v244);
            if (v243 && SHIBYTE(v242) < 0)
              operator delete(__p);
            sub_22316F8F4((uint64_t *)&v251);
            v153 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 56))(v142);
            v154 = *v153;
            v155 = (std::__shared_weak_count *)v153[1];
            if (v155)
            {
              v156 = (unint64_t *)&v155->__shared_owners_;
              do
                v157 = __ldxr(v156);
              while (__stxr(v157 + 1, v156));
            }
            v158 = v245;
            v159 = v246;
            v238 = &off_24EC6A3B8;
            v239 = v245;
            v240 = v246;
            v246 = 0;
            v245 = 0;
            v251 = v154;
            v252 = (unint64_t)v155;
            if (v155)
            {
              v160 = (unint64_t *)&v155->__shared_owners_;
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
            }
            v253 = (const char *)&off_24EC6A3B8;
            v254 = v158;
            v255 = v159;
            if (v159)
            {
              v162 = (unint64_t *)&v159->__shared_owners_;
              do
                v163 = __ldxr(v162);
              while (__stxr(v163 + 1, v162));
            }
            (*(void (**)(uint64_t *, const char **))(*v144 + 16))(v144, &v251);
            v164 = v255;
            if (v255)
            {
              v165 = (unint64_t *)&v255->__shared_owners_;
              do
                v166 = __ldaxr(v165);
              while (__stlxr(v166 - 1, v165));
              if (!v166)
              {
                ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                std::__shared_weak_count::__release_weak(v164);
              }
            }
            v167 = (std::__shared_weak_count *)v252;
            if (v252)
            {
              v168 = (unint64_t *)(v252 + 8);
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 - 1, v168));
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            v170 = v240;
            if (v240)
            {
              v171 = (unint64_t *)&v240->__shared_owners_;
              do
                v172 = __ldaxr(v171);
              while (__stlxr(v172 - 1, v171));
              if (!v172)
              {
                ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                std::__shared_weak_count::__release_weak(v170);
              }
            }
            if (v155)
            {
              v173 = (unint64_t *)&v155->__shared_owners_;
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            v175 = v246;
            if (v246)
            {
              v176 = (unint64_t *)&v246->__shared_owners_;
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
          }
          else
          {
            operator delete(v143);
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
    }
  }
  return kdebug_trace();
}

void sub_2238FD490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;

  sub_2241231D8(v66);
  v68 = (std::__shared_weak_count *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x288]);
  if (v65)
  {
    v71 = (unint64_t *)&v65->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x2C0]);
  sub_2231874DC((uint64_t)&a55);
  if (a65 < 0)
    operator delete(__p);
  sub_2238AA8CC(a9);
  sub_2231874DC((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_2238FD728(uint64_t a1, uint64_t a2, uint64_t a3, double a4, float32x4_t a5)
{
  uint64_t **v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  signed int v15;
  int *v16;
  uint64_t **v17;
  char *v18;
  int v19;
  int v20;
  signed int v21;
  char *v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float *v30;
  _QWORD *v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  unint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int32x2_t v58;

  v8 = *(uint64_t ***)(a1 + 8);
  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  v9 = vmulq_n_f32(a5, **(float **)a1);
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v11 = vaddq_f32(v9, v10);
  v12 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v11.f32));
  v13 = vcvtms_s32_f32(v11.f32[2]);
  v14 = *(_QWORD *)&v12 & 0xFFFFFFF8FFFFFFF8;
  v15 = v13 & 0xFFFFFFF8;
  v17 = v8 + 1;
  v16 = (int *)v8[1];
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        v18 = (char *)v16;
        v19 = v16[7];
        if ((_DWORD)v14 == v19)
          break;
        if ((int)v14 < v19)
          goto LABEL_3;
        if (v19 >= (int)v14)
          goto LABEL_20;
LABEL_14:
        v16 = (int *)*((_QWORD *)v18 + 1);
        if (!v16)
        {
          v17 = (uint64_t **)(v18 + 8);
          goto LABEL_17;
        }
      }
      v20 = *((_DWORD *)v18 + 8);
      if (HIDWORD(v14) != v20)
      {
        if (SHIDWORD(v14) < v20)
          goto LABEL_3;
        if (v20 >= SHIDWORD(v14))
        {
LABEL_20:
          v18[40] |= *(_BYTE *)a3;
          v18[41] |= *(_BYTE *)(a3 + 1);
          *((float *)v18 + 11) = *((float *)v18 + 11) + 0.1;
          goto LABEL_21;
        }
        goto LABEL_14;
      }
      v21 = *((_DWORD *)v18 + 9);
      if (v15 >= v21)
      {
        if (v21 >= v15)
          goto LABEL_20;
        goto LABEL_14;
      }
LABEL_3:
      v16 = *(int **)v18;
      v17 = (uint64_t **)v18;
      if (!*(_QWORD *)v18)
        goto LABEL_17;
    }
  }
  v18 = (char *)(v8 + 1);
LABEL_17:
  v57 = *(_QWORD *)&v12 & 0xFFFFFFF8FFFFFFF8;
  v58 = v12;
  v22 = v18;
  v18 = (char *)operator new(0x50uLL);
  *(_QWORD *)(v18 + 28) = v57;
  v23 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v18 + 40) = *(_OWORD *)a3;
  *((_DWORD *)v18 + 9) = v15;
  *(_OWORD *)(v18 + 56) = v23;
  *((_QWORD *)v18 + 9) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = v22;
  *v17 = (uint64_t *)v18;
  v24 = (uint64_t *)**v8;
  v25 = (uint64_t *)v18;
  if (v24)
  {
    *v8 = v24;
    v25 = *v17;
  }
  sub_2231A9A8C(v8[1], v25);
  v8[2] = (uint64_t *)((char *)v8[2] + 1);
  v12 = v58;
LABEL_21:
  v26 = **(_DWORD **)(a1 + 16);
  v27 = (v12.i8[0] & 7) / v26;
  v28 = (v12.i8[4] & 7) / v26;
  v29 = (v13 & 7) / v26;
  if ((v27 < 0 || v28 < 0 || v29 < 0)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Monitoring/src/ChangeProposalAggregator.cpp", 220, (uint64_t)"local_subblock_pos[0] >= 0 && local_subblock_pos[1] >= 0 && local_subblock_pos[2] >= 0", 86, (uint64_t)"Local position has positive coordinates", 39, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v30 = (float *)&v18[4
                    * (**(_DWORD **)(a1 + 24) * v27
                     + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4) * v28
                     + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) * v29)];
  v30[12] = v30[12] + 0.1;
  if (*(_BYTE *)a3)
  {
    v31 = *(_QWORD **)(a1 + 8);
    v33 = (_DWORD *)v31[4];
    v32 = v31[5];
    if ((unint64_t)v33 >= v32)
    {
      v36 = (_DWORD *)v31[3];
      v37 = 0xAAAAAAAAAAAAAAABLL * (v33 - v36) + 1;
      if (v37 > 0x1555555555555555)
        sub_22316E078();
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)v36) >> 2);
      if (2 * v38 > v37)
        v37 = 2 * v38;
      if (v38 >= 0xAAAAAAAAAAAAAAALL)
        v39 = 0x1555555555555555;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 > 0x1555555555555555)
          goto LABEL_65;
        v40 = (char *)operator new(12 * v39);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[4 * (v33 - v36)];
      *(_QWORD *)v41 = *(_QWORD *)a2;
      *((_DWORD *)v41 + 2) = *(_DWORD *)(a2 + 8);
      v35 = v41 + 12;
      if (v33 != v36)
      {
        do
        {
          v42 = *(_QWORD *)(v33 - 3);
          v33 -= 3;
          v43 = v33[2];
          *(_QWORD *)(v41 - 12) = v42;
          v41 -= 12;
          *((_DWORD *)v41 + 2) = v43;
        }
        while (v33 != v36);
        v33 = (_DWORD *)v31[3];
      }
      v31[3] = v41;
      v31[4] = v35;
      v31[5] = &v40[12 * v39];
      if (v33)
        operator delete(v33);
    }
    else
    {
      v34 = *(_QWORD *)a2;
      v33[2] = *(_DWORD *)(a2 + 8);
      *(_QWORD *)v33 = v34;
      v35 = v33 + 3;
    }
    v31[4] = v35;
  }
  if (!*(_BYTE *)(a3 + 1))
    return;
  v44 = *(_QWORD **)(a1 + 8);
  v46 = (_DWORD *)v44[7];
  v45 = v44[8];
  if ((unint64_t)v46 >= v45)
  {
    v49 = (_DWORD *)v44[6];
    v50 = 0xAAAAAAAAAAAAAAABLL * (v46 - v49) + 1;
    if (v50 > 0x1555555555555555)
      sub_22316E078();
    v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (_QWORD)v49) >> 2);
    if (2 * v51 > v50)
      v50 = 2 * v51;
    if (v51 >= 0xAAAAAAAAAAAAAAALL)
      v52 = 0x1555555555555555;
    else
      v52 = v50;
    if (!v52)
    {
      v53 = 0;
      goto LABEL_57;
    }
    if (v52 <= 0x1555555555555555)
    {
      v53 = (char *)operator new(12 * v52);
LABEL_57:
      v54 = &v53[4 * (v46 - v49)];
      *(_QWORD *)v54 = *(_QWORD *)a2;
      *((_DWORD *)v54 + 2) = *(_DWORD *)(a2 + 8);
      v48 = v54 + 12;
      if (v46 != v49)
      {
        do
        {
          v55 = *(_QWORD *)(v46 - 3);
          v46 -= 3;
          v56 = v46[2];
          *(_QWORD *)(v54 - 12) = v55;
          v54 -= 12;
          *((_DWORD *)v54 + 2) = v56;
        }
        while (v46 != v49);
        v46 = (_DWORD *)v44[6];
      }
      v44[6] = v54;
      v44[7] = v48;
      v44[8] = &v53[12 * v52];
      if (v46)
        operator delete(v46);
      goto LABEL_62;
    }
LABEL_65:
    sub_223174E94();
  }
  v47 = *(_QWORD *)a2;
  v46[2] = *(_DWORD *)(a2 + 8);
  *(_QWORD *)v46 = v47;
  v48 = v46 + 3;
LABEL_62:
  v44[7] = v48;
}

void sub_2238FDBA0(float **a1)
{
  float *v1;
  float **v2;
  uint64_t *v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float **v28;
  BOOL v29;
  float *v30;
  float *v31;

  v2 = a1 + 1;
  v1 = *a1;
  if (*a1 != (float *)(a1 + 1))
  {
    do
    {
      v5 = v1[12];
      v6 = v1[13];
      v7 = v5 > 0.5;
      if (v6 > 0.5)
        ++v7;
      v8 = v1[14];
      v9 = v1[15];
      if (v8 > 0.5)
        ++v7;
      if (v9 > 0.5)
        ++v7;
      v10 = v1[16];
      v11 = v1[17];
      if (v10 > 0.5)
        ++v7;
      if (v11 > 0.5)
        ++v7;
      v12 = v1[18];
      v13 = v1[19];
      if (v12 > 0.5)
        ++v7;
      if (v13 > 0.5)
        ++v7;
      if (v7 < 3)
      {
        v30 = (float *)*((_QWORD *)v1 + 1);
        v31 = v1;
        if (v30)
        {
          do
          {
            v28 = (float **)v30;
            v30 = *(float **)v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v28 = (float **)*((_QWORD *)v31 + 2);
            v29 = *v28 == v31;
            v31 = (float *)v28;
          }
          while (!v29);
        }
        if (*a1 == v1)
          *a1 = (float *)v28;
        v4 = (uint64_t *)a1[1];
        a1[2] = (float *)((char *)a1[2] - 1);
        sub_2231AFE60(v4, (uint64_t *)v1);
        operator delete(v1);
      }
      else
      {
        if (v5 <= 0.5)
          v14 = 0.0;
        else
          v14 = v5 + 0.0;
        if (v6 <= 0.5)
          v6 = -0.0;
        v15 = v14 + v6;
        if (v8 <= 0.5)
          v16 = -0.0;
        else
          v16 = v1[14];
        v17 = v15 + v16;
        if (v9 <= 0.5)
          v18 = -0.0;
        else
          v18 = v1[15];
        v19 = v17 + v18;
        if (v10 <= 0.5)
          v20 = -0.0;
        else
          v20 = v1[16];
        v21 = v19 + v20;
        if (v11 <= 0.5)
          v22 = -0.0;
        else
          v22 = v1[17];
        v23 = v21 + v22;
        if (v12 <= 0.5)
          v24 = -0.0;
        else
          v24 = v1[18];
        v25 = v23 + v24;
        if (v13 <= 0.5)
          v26 = -0.0;
        else
          v26 = v1[19];
        v1[11] = fminf(v25 + v26, 1.0);
        v27 = (float *)*((_QWORD *)v1 + 1);
        if (v27)
        {
          do
          {
            v28 = (float **)v27;
            v27 = *(float **)v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (float **)*((_QWORD *)v1 + 2);
            v29 = *v28 == v1;
            v1 = (float *)v28;
          }
          while (!v29);
        }
      }
      v1 = (float *)v28;
    }
    while (v28 != v2);
  }
}

void sub_2238FDD54(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCA08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCA08))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.monitor");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCA00);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCA08);
  }
  *a1 = qword_2540CCA00;
}

void sub_2238FDDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCA08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCA08);
  _Unwind_Resume(a1);
}

void sub_2238FDE48(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCA18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCA18))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCA10);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCA18);
  }
  *a1 = qword_2540CCA10;
}

void sub_2238FDEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCA18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCA18);
  _Unwind_Resume(a1);
}

BOOL sub_2238FDF3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;
  const void *v5;
  size_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  double v29;
  double v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v68;
  _QWORD v69[3];
  int v70;
  const char *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE object[24];
  __int128 v80;
  void *__p[2];
  unint64_t v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = a1[2];
  if (*a1 < v2)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2238FDD54(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v5 = *(const void **)(*(_QWORD *)object + 16);
      v6 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v5 = (const void *)(*(_QWORD *)object + 16);
      v6 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v5, v6, "Expect non-decreasing timestamp. Last frame: %lf Last visible: %lf", 0x42uLL);
    sub_2238FDE48(&v76);
    if (**(int **)(v76 + 56) > 5)
      goto LABEL_94;
    v7 = *(unsigned __int8 *)(v76 + 72);
    v8 = sub_22322F254(v76, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (!v7 && !v8)
      goto LABEL_94;
    v69[0] = &v76;
    v69[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v69[2] = std::chrono::system_clock::now().__d_.__rep_;
    v70 = 5;
    v71 = "unknown file";
    v72 = 479;
    v74 = 0;
    v75 = 0;
    v73 = "unknown function";
    v10 = v76;
    if (*(char *)(v76 + 39) < 0)
    {
      v12 = *(const char **)(v76 + 16);
      v11 = *(_QWORD *)(v76 + 24);
    }
    else
    {
      v11 = *(unsigned __int8 *)(v76 + 39);
      v12 = (const char *)(*(_QWORD *)v69[0] + 16);
    }
    v68 = *(_QWORD *)v69[0] + 16;
    v13 = *a1;
    v14 = a1[2];
    v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if ((_BYTE)v80 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v16 = (const char *)&xmmword_255788F40;
    else
      v16 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v17 = byte_255788F57;
    else
      v17 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v16, v12);
    v18 = &object[8];
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v17 >= 0x17)
    {
      v19 = v9;
      v20 = v12;
      v21 = v10;
      v22 = v7;
      v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v23 = v17 | 7;
      v24 = v23 + 1;
      v18 = operator new(v23 + 1);
      *(_QWORD *)&object[16] = v17;
      *(_QWORD *)&v80 = v24 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v18;
      v7 = v22;
      v10 = v21;
      v12 = v20;
      v9 = v19;
    }
    else
    {
      BYTE7(v80) = v17;
      if (!v17)
      {
LABEL_27:
        v18[v17] = 0;
        BYTE8(v80) = 1;
        v25 = __p;
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v11 >= 0x17)
        {
          v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v26 = v11 | 7;
          v27 = v26 + 1;
          v25 = operator new(v26 + 1);
          __p[1] = (void *)v11;
          v82 = v27 | 0x8000000000000000;
          __p[0] = v25;
        }
        else
        {
          HIBYTE(v82) = v11;
          if (!v11)
            goto LABEL_35;
        }
        memmove(v25, v12, v11);
LABEL_35:
        *((_BYTE *)v25 + v11) = 0;
        v83 = 1;
        v28 = *(NSObject **)object;
        if (SHIBYTE(v82) < 0)
          operator delete(__p[0]);
        if (BYTE8(v80) && SBYTE7(v80) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v29 = (double)v13 / 1000000000.0;
        v30 = (double)v14 / 1000000000.0;
        if (v9 && *(_QWORD *)(v9 + 24))
        {
          v31 = _os_log_pack_size();
          v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
          v33 = (std::__shared_weak_count *)operator new();
          v34 = v33;
          v33->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v33->__shared_weak_owners_ = 0;
          v33[1].__vftable = v32;
          *(_QWORD *)object = v32;
          *(_QWORD *)&object[8] = v32;
          *(_QWORD *)&object[16] = v33;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
          v80 = 0uLL;
          __p[0] = 0;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v34);
          }
          v38 = *(_QWORD *)object;
          v39 = _os_log_pack_fill();
          *(_DWORD *)v39 = 134218240;
          *(double *)(v39 + 4) = v29;
          *(_WORD *)(v39 + 12) = 2048;
          *(double *)(v39 + 14) = v30;
          v40 = operator new();
          v41 = *(unsigned __int8 *)(v10 + 39);
          v42 = v68;
          if ((v41 & 0x80u) != 0)
          {
            v42 = *(_QWORD *)(v10 + 16);
            v41 = *(_QWORD *)(v10 + 24);
          }
          *(_QWORD *)v40 = v38;
          *(_OWORD *)(v40 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v40 + 24) = v80;
          v80 = 0uLL;
          *(_QWORD *)(v40 + 40) = v42;
          *(_QWORD *)(v40 + 48) = v41;
          *(_BYTE *)(v40 + 56) = 16;
          v77 = 0;
          v78 = v40;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v78);
          v43 = v78;
          v78 = 0;
          if (v43)
          {
            v44 = *(std::__shared_weak_count **)(v43 + 32);
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v47 = *(std::__shared_weak_count **)(v43 + 16);
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            MEMORY[0x227684CE8](v43, 0x10F0C40B62ED6C6);
            v50 = v77;
            v77 = 0;
            if (v50)
            {
              v51 = *(std::__shared_weak_count **)(v50 + 32);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              v54 = *(std::__shared_weak_count **)(v50 + 16);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              MEMORY[0x227684CE8](v50, 0x10F0C40B62ED6C6);
            }
          }
          v57 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
          if (*((_QWORD *)&v80 + 1))
          {
            v58 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v61 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
        }
        else
        {
          os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 134218240;
          *(double *)&object[4] = v29;
          *(_WORD *)&object[12] = 2048;
          *(double *)&object[14] = v30;
          v63 = (void *)_os_log_send_and_compose_impl();
          if (v63)
            free(v63);
        }
        if (v7)
        {
          sub_22322C138((uint64_t)v69, "Expect non-decreasing timestamp. Last frame: %lf Last visible: %lf", (double)*a1 / 1000000000.0, (double)a1[2] / 1000000000.0);
          sub_223182C08((uint64_t)v69);
        }
        sub_223182C08((uint64_t)v69);
        v64 = v75;
        if (v75)
        {
          v65 = (unint64_t *)&v75->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
LABEL_94:
        v2 = a1[2];
        v1 = *a1;
        return v2 == v1;
      }
    }
    memmove(v18, v16, v17);
    goto LABEL_27;
  }
  return v2 == v1;
}

void sub_2238FE748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2238FE788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238FE7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238FE7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238FE7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238FE874(uint64_t *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t **v26;
  uint64_t **v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t ***v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t **v40;
  _QWORD *v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  _BOOL8 v72;
  unint64_t v73;
  unint64_t v74;
  size_t prime;
  void *v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  size_t v81;
  size_t v82;
  _QWORD *j;
  size_t v84;
  uint64_t v85;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  uint64_t v91;
  size_t v92;
  unint64_t v93;
  uint8x8_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  _QWORD *v100;
  int v101;
  uint64_t *v102;
  uint64_t *v103;
  int v104;
  int v105;
  float v106;
  int v107;
  uint64_t **v108;
  BOOL v109;
  int v110;
  uint64_t **v111;
  uint64_t *v112;
  uint64_t **v113;
  int v114;
  int v115;
  _DWORD *v116;
  int v117;
  _DWORD *v118;
  int v119;
  _DWORD *v120;
  int8x8_t v121;
  unint64_t v122;
  uint8x8_t v123;
  uint64_t v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  const void *v132;
  size_t v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  size_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 v142;
  const char *v143;
  size_t v144;
  _BYTE *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  NSObject *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  double v155;
  size_t v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  unint64_t *p_shared_owners;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  void *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  BOOL v193;
  BOOL v194;
  int8x8_t v195;
  unint64_t v196;
  uint8x8_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  std::mutex *v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  void **v212;
  void **v213;
  uint64_t v214;
  unint64_t v215;
  void **v216;
  void *v217;
  void *v218;
  int v219;
  BOOL v220;
  __n128 *v222;
  void **v223;
  size_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  std::mutex *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  void **v232;
  void **v233;
  uint64_t v234;
  unint64_t v235;
  void **v236;
  void *v237;
  void *v238;
  int v239;
  __n128 *v242;
  void **v243;
  size_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  std::mutex *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  void **v252;
  void **v253;
  uint64_t v254;
  unint64_t v255;
  void **v256;
  void *v257;
  void *v258;
  int v259;
  __n128 *v262;
  void **v263;
  size_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  std::mutex *v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  std::string::size_type v272;
  std::string *v273;
  uint64_t v274;
  uint64_t *v275;
  int32x2_t v276;
  float32x4_t v277;
  uint64_t *v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  _BOOL4 v283;
  float32x4_t v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  float32x4_t v288;
  float32x4_t v289;
  uint64_t *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v316;
  uint64_t v317;
  const char *__src;
  _QWORD *v319;
  float32x4_t v321;
  uint64_t *v322;
  float32x4_t v323;
  float32x4_t v324;
  std::string v325;
  uint64_t **v326;
  uint64_t *v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  int v331;
  __int128 v332;
  uint64_t (**v333)();
  uint64_t v334;
  std::__shared_weak_count *v335;
  uint64_t v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  __int8 v339[3];
  void *v340[2];
  __int128 v341;
  const char *v342;
  int v343;
  const char *v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  __int128 v347;
  __int16 v348;
  _BYTE object[40];
  void *__p[2];
  unint64_t v351;
  char v352;
  uint64_t v353;

  v353 = *MEMORY[0x24BDAC8D0];
  v329 = 0u;
  v330 = 0u;
  v331 = 728303476;
  kdebug_trace();
  if (*((_BYTE *)a1 + 44) && a5 == 1 && *((_BYTE *)a1 + 45) == 2 && a1[3])
  {
    v9 = (_QWORD *)a1[2];
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    a1[2] = 0;
    v11 = a1[1];
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
  v322 = a2;
  v319 = a4;
  *((_BYTE *)a1 + 45) = a5;
  v327 = 0;
  v328 = 0;
  v326 = &v327;
  v15 = (_QWORD *)*a3;
  v14 = a3 + 1;
  v13 = v15;
  if (v15 != v14)
  {
    while (1)
    {
      v16 = (int *)v13 + 7;
      v17 = v327;
      v18 = &v327;
      if (v326 != &v327)
      {
        v19 = v327;
        v20 = &v327;
        if (v327)
        {
          do
          {
            v18 = (uint64_t **)v19;
            v19 = (uint64_t *)v19[1];
          }
          while (v19);
        }
        else
        {
          do
          {
            v18 = (uint64_t **)v20[2];
            v220 = *v18 == (uint64_t *)v20;
            v20 = v18;
          }
          while (v220);
        }
        v21 = *((_DWORD *)v18 + 7);
        v22 = *v16;
        v23 = v21 < *v16;
        if (v21 == *v16 && (v24 = *((_DWORD *)v18 + 8), v25 = *((_DWORD *)v13 + 8), v23 = v24 < v25, v24 == v25))
        {
          if (*((_DWORD *)v18 + 9) >= *((_DWORD *)v13 + 9))
            goto LABEL_22;
        }
        else if (!v23)
        {
LABEL_22:
          v26 = &v327;
          v27 = &v327;
          if (!v327)
            goto LABEL_51;
          v28 = *((_DWORD *)v13 + 8);
          v29 = *((_DWORD *)v13 + 9);
          while (1)
          {
            v27 = (uint64_t **)v17;
            v30 = *((_DWORD *)v17 + 7);
            if (v22 == v30)
            {
              v31 = *((_DWORD *)v27 + 8);
              if (v28 == v31)
              {
                v32 = *((_DWORD *)v27 + 9);
                if (v29 < v32)
                  goto LABEL_24;
                if (v32 >= v29)
                  goto LABEL_49;
              }
              else
              {
                if (v28 < v31)
                {
LABEL_24:
                  v17 = *v27;
                  v26 = v27;
                  if (!*v27)
                    goto LABEL_51;
                  continue;
                }
                if (v31 >= v28)
                  goto LABEL_49;
              }
            }
            else
            {
              if (v22 < v30)
                goto LABEL_24;
              if (v30 >= v22)
                goto LABEL_49;
            }
            v17 = v27[1];
            if (!v17)
            {
              v26 = v27 + 1;
              goto LABEL_51;
            }
          }
        }
      }
      if (v327)
        v27 = v18;
      else
        v27 = &v327;
      if (v327)
        v33 = (uint64_t ***)v18;
      else
        v33 = &v326;
      if (v327)
        v26 = v18 + 1;
      else
        v26 = &v327;
      if (v33[1])
      {
LABEL_49:
        v34 = (_QWORD *)v13[1];
        if (v34)
          goto LABEL_54;
      }
      else
      {
LABEL_51:
        v35 = (char *)operator new(0x50uLL);
        v36 = *(_QWORD *)v16;
        *((_DWORD *)v35 + 9) = *((_DWORD *)v13 + 9);
        *(_QWORD *)(v35 + 28) = v36;
        v37 = *(_OWORD *)(v13 + 5);
        v38 = *(_OWORD *)(v13 + 7);
        *((_QWORD *)v35 + 9) = v13[9];
        *(_OWORD *)(v35 + 56) = v38;
        *(_OWORD *)(v35 + 40) = v37;
        *(_QWORD *)v35 = 0;
        *((_QWORD *)v35 + 1) = 0;
        *((_QWORD *)v35 + 2) = v27;
        *v26 = (uint64_t *)v35;
        if (*v326)
        {
          v326 = (uint64_t **)*v326;
          v35 = (char *)*v26;
        }
        sub_2231A9A8C(v327, (uint64_t *)v35);
        ++v328;
        v34 = (_QWORD *)v13[1];
        if (v34)
        {
          do
          {
LABEL_54:
            v39 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
          goto LABEL_13;
        }
      }
      do
      {
        v39 = (_QWORD *)v13[2];
        v220 = *v39 == (_QWORD)v13;
        v13 = v39;
      }
      while (!v220);
LABEL_13:
      v13 = v39;
      if (v39 == v14)
      {
        v40 = v326;
        if (v326 == &v327)
          break;
        v41 = a1 + 2;
LABEL_62:
        v43 = (uint64_t *)((char *)v40 + 28);
        v42 = *((_DWORD *)v40 + 7);
        v44 = a1[1];
        if (v44)
        {
          v45 = *((_DWORD *)v40 + 8);
          v46 = *((_DWORD *)v40 + 9);
          v47 = (19349669 * v45) ^ (73856093 * v42) ^ (83492791 * v46);
          v48 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
          v48.i16[0] = vaddlv_u8(v48);
          if (v48.u32[0] > 1uLL)
          {
            v49 = (19349669 * v45) ^ (73856093 * v42) ^ (83492791 * v46);
            if (v47 >= v44)
              v49 = v47 % v44;
          }
          else
          {
            v49 = v47 & (v44 - 1);
          }
          v50 = *(uint64_t ***)(*a1 + 8 * v49);
          if (v50)
          {
            v51 = *v50;
            if (v51)
            {
              if (v48.u32[0] < 2uLL)
              {
                while (1)
                {
                  v53 = v51[1];
                  if (v53 == v47)
                  {
                    if (*((_DWORD *)v51 + 4) == v42 && *((_DWORD *)v51 + 5) == v45 && *((_DWORD *)v51 + 6) == v46)
                      goto LABEL_86;
                  }
                  else if ((v53 & (v44 - 1)) != v49)
                  {
                    goto LABEL_88;
                  }
                  v51 = (uint64_t *)*v51;
                  if (!v51)
                    goto LABEL_88;
                }
              }
              do
              {
                v52 = v51[1];
                if (v52 == v47)
                {
                  if (*((_DWORD *)v51 + 4) == v42 && *((_DWORD *)v51 + 5) == v45 && *((_DWORD *)v51 + 6) == v46)
                  {
LABEL_86:
                    v54 = v40[1];
                    if (v54)
                      goto LABEL_186;
                    goto LABEL_188;
                  }
                }
                else
                {
                  if (v52 >= v44)
                    v52 %= v44;
                  if (v52 != v49)
                    break;
                }
                v51 = (uint64_t *)*v51;
              }
              while (v51);
            }
          }
        }
LABEL_88:
        v55 = *((unsigned __int8 *)v40 + 40);
        v56 = operator new(0x60uLL);
        v57 = v56;
        if (v55)
          v58 = 5000000000;
        else
          v58 = 2500000000;
        *v56 = 0;
        v59 = *((_DWORD *)v40 + 9);
        v60 = *v43;
        v56[2] = *v43;
        *((_DWORD *)v56 + 6) = v59;
        *((_OWORD *)v56 + 2) = 0u;
        *((_OWORD *)v56 + 3) = 0u;
        v56[8] = 0;
        v56[9] = v58;
        *((_OWORD *)v56 + 5) = xmmword_224654700;
        v61 = *((_DWORD *)v56 + 5);
        v62 = 83492791 * v59;
        v63 = (19349669 * v61) ^ (73856093 * (int)v60) ^ v62;
        v56[1] = v63;
        if (!v44)
          goto LABEL_117;
        v64 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
        v64.i16[0] = vaddlv_u8(v64);
        if (v64.u32[0] > 1uLL)
        {
          v65 = (19349669 * v61) ^ (73856093 * (int)v60) ^ v62;
          if (v44 <= v63)
            v65 = v63 % v44;
        }
        else
        {
          v65 = v63 & (v44 - 1);
        }
        v66 = *(uint64_t ***)(*a1 + 8 * v65);
        if (!v66 || (v67 = *v66) == 0)
        {
LABEL_117:
          v70 = (float)(unint64_t)(a1[3] + 1);
          v71 = *((float *)a1 + 8);
          if (v44 && (float)(v71 * (float)v44) >= v70)
            goto LABEL_172;
          v72 = (v44 & (v44 - 1)) != 0;
          if (v44 < 3)
            v72 = 1;
          v73 = v72 | (2 * v44);
          v74 = vcvtps_u32_f32(v70 / v71);
          if (v73 <= v74)
            prime = v74;
          else
            prime = v73;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v44 = a1[1];
          }
          if (prime <= v44)
          {
            if (prime < v44)
            {
              v86 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
              if (v44 < 3 || (v87 = (uint8x8_t)vcnt_s8((int8x8_t)v44), v87.i16[0] = vaddlv_u8(v87), v87.u32[0] > 1uLL))
              {
                v86 = std::__next_prime(v86);
              }
              else
              {
                v88 = 1 << -(char)__clz(v86 - 1);
                if (v86 >= 2)
                  v86 = v88;
              }
              if (prime <= v86)
                prime = v86;
              if (prime >= v44)
              {
                v44 = a1[1];
              }
              else
              {
                if (prime)
                  goto LABEL_129;
                v90 = (void *)*a1;
                *a1 = 0;
                if (v90)
                  operator delete(v90);
                v44 = 0;
                a1[1] = 0;
              }
            }
            goto LABEL_172;
          }
LABEL_129:
          if (prime >> 61)
            sub_223174E94();
          v76 = operator new(8 * prime);
          v77 = (void *)*a1;
          *a1 = (uint64_t)v76;
          if (v77)
            operator delete(v77);
          v78 = 0;
          a1[1] = prime;
          do
            *(_QWORD *)(*a1 + 8 * v78++) = 0;
          while (prime != v78);
          v79 = (_QWORD *)*v41;
          if (!*v41)
            goto LABEL_171;
          v80 = v79[1];
          v81 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v82 = v80 & v81;
            *(_QWORD *)(*a1 + 8 * v82) = v41;
            for (j = (_QWORD *)*v79; *v79; j = (_QWORD *)*v79)
            {
              v84 = j[1] & v81;
              if (v84 == v82)
              {
                v79 = j;
              }
              else if (*(_QWORD *)(*a1 + 8 * v84))
              {
                *v79 = *j;
                v85 = 8 * v84;
                *j = **(_QWORD **)(*a1 + v85);
                **(_QWORD **)(*a1 + v85) = j;
              }
              else
              {
                *(_QWORD *)(*a1 + 8 * v84) = v79;
                v79 = j;
                v82 = v84;
              }
            }
            goto LABEL_171;
          }
          if (v80 < prime)
          {
            *(_QWORD *)(*a1 + 8 * v80) = v41;
            v89 = (_QWORD *)*v79;
            if (*v79)
              goto LABEL_166;
LABEL_171:
            v44 = prime;
LABEL_172:
            v93 = v57[1];
            v94 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
            v94.i16[0] = vaddlv_u8(v94);
            if (v94.u32[0] > 1uLL)
            {
              if (v93 >= v44)
                v93 %= v44;
            }
            else
            {
              v93 &= v44 - 1;
            }
            v95 = *a1;
            v96 = *(_QWORD **)(*a1 + 8 * v93);
            if (v96)
            {
              *v57 = *v96;
              goto LABEL_184;
            }
            *v57 = *v41;
            *v41 = v57;
            *(_QWORD *)(v95 + 8 * v93) = v41;
            if (*v57)
            {
              v97 = *(_QWORD *)(*v57 + 8);
              if (v94.u32[0] > 1uLL)
              {
                if (v97 >= v44)
                  v97 %= v44;
              }
              else
              {
                v97 &= v44 - 1;
              }
              v96 = (_QWORD *)(*a1 + 8 * v97);
LABEL_184:
              *v96 = v57;
            }
            ++a1[3];
            v54 = v40[1];
            if (v54)
              goto LABEL_186;
            do
            {
LABEL_188:
              v98 = (uint64_t **)v40[2];
              v220 = *v98 == (uint64_t *)v40;
              v40 = v98;
            }
            while (!v220);
            goto LABEL_61;
          }
          v80 %= prime;
          *(_QWORD *)(*a1 + 8 * v80) = v41;
          v89 = (_QWORD *)*v79;
          if (!*v79)
            goto LABEL_171;
          while (1)
          {
LABEL_166:
            v92 = v89[1];
            if (v92 >= prime)
              v92 %= prime;
            if (v92 == v80)
              goto LABEL_165;
            if (*(_QWORD *)(*a1 + 8 * v92))
              break;
            *(_QWORD *)(*a1 + 8 * v92) = v79;
            v79 = v89;
            v89 = (_QWORD *)*v89;
            v80 = v92;
            if (!v89)
              goto LABEL_171;
          }
          *v79 = *v89;
          v91 = 8 * v92;
          *v89 = **(_QWORD **)(*a1 + v91);
          **(_QWORD **)(*a1 + v91) = v89;
          v89 = v79;
LABEL_165:
          v79 = v89;
          v89 = (_QWORD *)*v89;
          if (!v89)
            goto LABEL_171;
          goto LABEL_166;
        }
        if (v64.u32[0] < 2uLL)
        {
          while (1)
          {
            v69 = v67[1];
            if (v69 == v63)
            {
              if (*((_DWORD *)v67 + 4) == (_DWORD)v60 && *((_DWORD *)v67 + 5) == v61 && *((_DWORD *)v67 + 6) == v59)
                goto LABEL_115;
            }
            else if ((v69 & (v44 - 1)) != v65)
            {
              goto LABEL_117;
            }
            v67 = (uint64_t *)*v67;
            if (!v67)
              goto LABEL_117;
          }
        }
        while (1)
        {
          v68 = v67[1];
          if (v68 == v63)
          {
            if (*((_DWORD *)v67 + 4) == (_DWORD)v60 && *((_DWORD *)v67 + 5) == v61 && *((_DWORD *)v67 + 6) == v59)
            {
LABEL_115:
              operator delete(v56);
              v54 = v40[1];
              if (!v54)
                goto LABEL_188;
              do
              {
LABEL_186:
                v98 = (uint64_t **)v54;
                v54 = (uint64_t *)*v54;
              }
              while (v54);
LABEL_61:
              v40 = v98;
              if (v98 == &v327)
                goto LABEL_191;
              goto LABEL_62;
            }
          }
          else
          {
            if (v68 >= v44)
              v68 %= v44;
            if (v68 != v65)
              goto LABEL_117;
          }
          v67 = (uint64_t *)*v67;
          if (!v67)
            goto LABEL_117;
        }
      }
    }
  }
LABEL_191:
  v99 = (uint64_t *)a1[2];
  v100 = v319;
  v101 = a5;
  v102 = a2;
  if (v99)
  {
    while (1)
    {
      v103 = v327;
      v104 = *((_DWORD *)v99 + 4);
      v105 = *((_DWORD *)v99 + 5);
      v106 = 0.0;
      v107 = *((_DWORD *)v99 + 6);
      if (v327)
      {
        v108 = &v327;
        do
        {
          v112 = v103;
          v113 = v108;
          v114 = *((_DWORD *)v103 + 7);
          if (v114 == v104)
          {
            v115 = *((_DWORD *)v103 + 8);
            if (v115 == v105)
              v109 = *((_DWORD *)v103 + 9) < v107;
            else
              v109 = v115 < v105;
          }
          else
          {
            v109 = v114 < v104;
          }
          v110 = v109;
          v111 = (uint64_t **)(v103 + 1);
          if (!v110)
          {
            v111 = (uint64_t **)v112;
            v108 = (uint64_t **)v112;
          }
          v103 = *v111;
        }
        while (v103);
        if (v108 != &v327)
        {
          if (v110)
            v116 = v113;
          else
            v116 = v112;
          v117 = v116[7];
          if (v104 == v117)
          {
            if (v110)
              v118 = v113;
            else
              v118 = v112;
            v119 = v118[8];
            if (v105 == v119)
            {
              if (v110)
                v120 = v113;
              else
                v120 = v112;
              if (v107 < v120[9])
                goto LABEL_225;
            }
            else if (v105 < v119)
            {
              goto LABEL_225;
            }
          }
          else if (v104 < v117)
          {
            goto LABEL_225;
          }
          if (v110)
            v112 = (uint64_t *)v113;
          v106 = *((float *)v112 + 11);
        }
      }
LABEL_225:
      v121 = (int8x8_t)v100[1];
      if (!*(_QWORD *)&v121)
        goto LABEL_252;
      v122 = (19349669 * v105) ^ (73856093 * v104) ^ (83492791 * v107);
      v123 = (uint8x8_t)vcnt_s8(v121);
      v123.i16[0] = vaddlv_u8(v123);
      if (v123.u32[0] > 1uLL)
      {
        v124 = (19349669 * v105) ^ (73856093 * v104) ^ (83492791 * v107);
        if (v122 >= *(_QWORD *)&v121)
          v124 = v122 % *(_QWORD *)&v121;
      }
      else
      {
        v124 = v122 & (*(_QWORD *)&v121 - 1);
      }
      v125 = *(uint64_t ***)(*v100 + 8 * v124);
      if (v125)
      {
        v126 = *v125;
        if (*v125)
        {
          if (v123.u32[0] < 2uLL)
          {
            v127 = *(_QWORD *)&v121 - 1;
            while (1)
            {
              v129 = v126[1];
              if (v122 == v129)
              {
                if (*((_DWORD *)v126 + 4) == v104 && *((_DWORD *)v126 + 5) == v105 && *((_DWORD *)v126 + 6) == v107)
                  goto LABEL_249;
              }
              else if ((v129 & v127) != v124)
              {
                goto LABEL_252;
              }
              v126 = (uint64_t *)*v126;
              if (!v126)
                goto LABEL_249;
            }
          }
          do
          {
            v128 = v126[1];
            if (v122 == v128)
            {
              if (*((_DWORD *)v126 + 4) == v104 && *((_DWORD *)v126 + 5) == v105 && *((_DWORD *)v126 + 6) == v107)
                break;
            }
            else
            {
              if (v128 >= *(_QWORD *)&v121)
                v128 %= *(_QWORD *)&v121;
              if (v128 != v124)
                goto LABEL_252;
            }
            v126 = (uint64_t *)*v126;
          }
          while (v126);
        }
LABEL_249:
        v130 = *v102;
        if (*v102 > v99[4])
        {
LABEL_250:
          v99[4] = v130;
          if (v106 <= 0.0)
            goto LABEL_349;
          goto LABEL_251;
        }
      }
      else
      {
LABEL_252:
        v126 = 0;
        v130 = *v102;
        if (*v102 > v99[4])
          goto LABEL_250;
      }
      v131 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v131 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_2238FDD54(object);
      if (*(char *)(*(_QWORD *)object + 39) < 0)
      {
        v132 = *(const void **)(*(_QWORD *)object + 16);
        v133 = *(_QWORD *)(*(_QWORD *)object + 24);
      }
      else
      {
        v132 = (const void *)(*(_QWORD *)object + 16);
        v133 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
      }
      sub_223195728((uint64_t)&stru_255789280, v132, v133, "Expect increasing timestamps. New: %lf Last: %lf", 0x30uLL);
      sub_2238FDE48(&v333);
      if (*(int *)v333[7] <= 5)
      {
        v134 = *((unsigned __int8 *)v333 + 72);
        v135 = sub_22322F254((uint64_t)v333, "OSLogSurrogateAppender", 1, 0);
        v136 = v135;
        if (v134 || v135)
        {
          v340[0] = &v333;
          v340[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)&v341 = std::chrono::system_clock::now();
          DWORD2(v341) = 5;
          v342 = "unknown file";
          v343 = 375;
          v344 = "unknown function";
          v345 = 0;
          v346 = 0;
          v137 = *(_QWORD *)v340[0];
          if (*(char *)(*(_QWORD *)v340[0] + 39) < 0)
          {
            v139 = *(const char **)(v137 + 16);
            v138 = *(_QWORD *)(v137 + 24);
          }
          else
          {
            v138 = *(unsigned __int8 *)(*(_QWORD *)v340[0] + 39);
            v139 = (const char *)(*(_QWORD *)v340[0] + 16);
          }
          v316 = *(_QWORD *)v340[0] + 16;
          v317 = *(_QWORD *)v340[0];
          v140 = *v322;
          v141 = v99[4];
          v142 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v347);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v347, &xmmword_255788F40);
            if (HIBYTE(v348) && (char)v348 < 0)
              operator delete((void *)v347);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F57 >= 0)
            v143 = (const char *)&xmmword_255788F40;
          else
            v143 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v144 = byte_255788F57;
          else
            v144 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)object = os_log_create(v143, v139);
          if (v144 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          __src = v139;
          if (v144 >= 0x17)
          {
            v146 = v134;
            v147 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v144 | 7) != 0x17)
              v147 = v144 | 7;
            v148 = v147 + 1;
            v145 = operator new(v147 + 1);
            *(_QWORD *)&object[16] = v144;
            *(_QWORD *)&object[24] = v148 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v145;
            v134 = v146;
          }
          else
          {
            object[31] = v144;
            v145 = &object[8];
            if (!v144)
            {
LABEL_280:
              v145[v144] = 0;
              object[32] = 1;
              if (v138 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v138 >= 0x17)
              {
                v151 = v134;
                v152 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v138 | 7) != 0x17)
                  v152 = v138 | 7;
                v153 = v152 + 1;
                v149 = operator new(v152 + 1);
                __p[1] = (void *)v138;
                v351 = v153 | 0x8000000000000000;
                __p[0] = v149;
                v134 = v151;
              }
              else
              {
                HIBYTE(v351) = v138;
                v149 = __p;
                if (!v138)
                {
                  LOBYTE(__p[0]) = 0;
                  v352 = 1;
                  v150 = *(NSObject **)object;
                  if ((SHIBYTE(v351) & 0x80000000) == 0)
                    goto LABEL_284;
LABEL_290:
                  operator delete(__p[0]);
                  if (object[32])
                    goto LABEL_291;
                  goto LABEL_293;
                }
              }
              memmove(v149, __src, v138);
              *((_BYTE *)v149 + v138) = 0;
              v352 = 1;
              v150 = *(NSObject **)object;
              if (SHIBYTE(v351) < 0)
                goto LABEL_290;
LABEL_284:
              if (object[32])
              {
LABEL_291:
                if ((object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_293:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              v154 = (double)v140 / 1000000000.0;
              v155 = (double)v141 / 1000000000.0;
              if (v136 && *(_QWORD *)(v136 + 24))
              {
                v156 = _os_log_pack_size();
                v157 = (std::__shared_weak_count_vtbl *)operator new(v156, (std::align_val_t)8uLL);
                v158 = (std::__shared_weak_count *)operator new();
                v159 = v158;
                v158->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v158->__shared_owners_;
                v158->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v158->__shared_weak_owners_ = 0;
                v158[1].__vftable = v157;
                *(_QWORD *)object = v157;
                *(_QWORD *)&object[8] = v157;
                *(_QWORD *)&object[16] = v158;
                do
                  v161 = __ldxr(p_shared_owners);
                while (__stxr(v161 + 1, p_shared_owners));
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                __p[0] = 0;
                do
                  v162 = __ldaxr(p_shared_owners);
                while (__stlxr(v162 - 1, p_shared_owners));
                if (!v162)
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v159);
                }
                v163 = *(_QWORD *)object;
                v164 = _os_log_pack_fill();
                *(_DWORD *)v164 = 134218240;
                *(double *)(v164 + 4) = v154;
                *(_WORD *)(v164 + 12) = 2048;
                *(double *)(v164 + 14) = v155;
                v165 = operator new();
                v166 = *(unsigned __int8 *)(v317 + 39);
                v167 = v316;
                if ((v166 & 0x80u) != 0)
                {
                  v167 = *(_QWORD *)(v317 + 16);
                  v166 = *(_QWORD *)(v317 + 24);
                }
                *(_QWORD *)v165 = v163;
                *(_OWORD *)(v165 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v165 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v165 + 40) = v167;
                *(_QWORD *)(v165 + 48) = v166;
                *(_BYTE *)(v165 + 56) = 16;
                v336 = 0;
                *(_QWORD *)&v347 = v165;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v136 + 24) + 40))(*(_QWORD *)(v136 + 24), &v347);
                v100 = v319;
                v102 = v322;
                v168 = v347;
                *(_QWORD *)&v347 = 0;
                if (v168)
                {
                  v169 = *(std::__shared_weak_count **)(v168 + 32);
                  if (v169)
                  {
                    v170 = (unint64_t *)&v169->__shared_owners_;
                    do
                      v171 = __ldaxr(v170);
                    while (__stlxr(v171 - 1, v170));
                    if (!v171)
                    {
                      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                      std::__shared_weak_count::__release_weak(v169);
                    }
                  }
                  v172 = *(std::__shared_weak_count **)(v168 + 16);
                  if (v172)
                  {
                    v173 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v174 = __ldaxr(v173);
                    while (__stlxr(v174 - 1, v173));
                    if (!v174)
                    {
                      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                      std::__shared_weak_count::__release_weak(v172);
                    }
                  }
                  MEMORY[0x227684CE8](v168, 0x10F0C40B62ED6C6);
                  v175 = v336;
                  v336 = 0;
                  if (v175)
                  {
                    v176 = *(std::__shared_weak_count **)(v175 + 32);
                    if (v176)
                    {
                      v177 = (unint64_t *)&v176->__shared_owners_;
                      do
                        v178 = __ldaxr(v177);
                      while (__stlxr(v178 - 1, v177));
                      if (!v178)
                      {
                        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                        std::__shared_weak_count::__release_weak(v176);
                      }
                    }
                    v179 = *(std::__shared_weak_count **)(v175 + 16);
                    if (v179)
                    {
                      v180 = (unint64_t *)&v179->__shared_owners_;
                      do
                        v181 = __ldaxr(v180);
                      while (__stlxr(v181 - 1, v180));
                      if (!v181)
                      {
                        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                        std::__shared_weak_count::__release_weak(v179);
                      }
                    }
                    MEMORY[0x227684CE8](v175, 0x10F0C40B62ED6C6);
                  }
                }
                v182 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v183 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v184 = __ldaxr(v183);
                  while (__stlxr(v184 - 1, v183));
                  if (!v184)
                  {
                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                    std::__shared_weak_count::__release_weak(v182);
                  }
                }
                v185 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v186 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v187 = __ldaxr(v186);
                  while (__stlxr(v187 - 1, v186));
                  if (!v187)
                  {
                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                    std::__shared_weak_count::__release_weak(v185);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v150, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 134218240;
                *(double *)&object[4] = v154;
                *(_WORD *)&object[12] = 2048;
                *(double *)&object[14] = v155;
                v188 = (void *)_os_log_send_and_compose_impl();
                v100 = v319;
                v102 = v322;
                if (v188)
                  free(v188);
              }
              if (v134)
              {
                sub_22322C138((uint64_t)v340, "Expect increasing timestamps. New: %lf Last: %lf", (double)*v102 / 1000000000.0, (double)v99[4] / 1000000000.0);
                sub_223182C08((uint64_t)v340);
              }
              sub_223182C08((uint64_t)v340);
              v189 = v346;
              if (v346)
              {
                v190 = (unint64_t *)&v346->__shared_owners_;
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                }
              }
              v101 = a5;
              goto LABEL_348;
            }
          }
          memmove(v145, v143, v144);
          goto LABEL_280;
        }
      }
LABEL_348:
      v130 = *v102;
      v99[4] = *v102;
      if (v106 <= 0.0)
      {
LABEL_349:
        if (!v126)
          goto LABEL_351;
        goto LABEL_350;
      }
LABEL_251:
      ++*((_DWORD *)v99 + 10);
      v99[7] = v130;
      *((float *)v99 + 11) = (float)(v106 * 0.5) + (float)(*((float *)v99 + 11) * 0.5);
LABEL_350:
      v99[6] = v130;
LABEL_351:
      v192 = v99[8];
      if (v101 == 2)
      {
        if (v192)
        {
          v193 = v99[6] <= v130 - v99[11];
          goto LABEL_356;
        }
        v192 = *v102;
        v99[8] = *v102;
      }
      v193 = v99[6] <= v130 - v99[11];
      if (v192)
      {
LABEL_356:
        if (v130 < v99[9] + v192)
          v194 = v193;
        else
          v194 = v130 >= v99[10] + v192;
        if (!v194)
          goto LABEL_363;
LABEL_360:
        v195 = (int8x8_t)a1[1];
        v196 = v99[1];
        v197 = (uint8x8_t)vcnt_s8(v195);
        v197.i16[0] = vaddlv_u8(v197);
        if (v197.u32[0] > 1uLL)
        {
          if (v196 >= *(_QWORD *)&v195)
            v196 %= *(_QWORD *)&v195;
        }
        else
        {
          v196 &= *(_QWORD *)&v195 - 1;
        }
        v198 = (uint64_t *)*v99;
        v199 = *(uint64_t **)(*a1 + 8 * v196);
        do
        {
          v200 = v199;
          v199 = (uint64_t *)*v199;
        }
        while (v199 != v99);
        if (v200 == a1 + 2)
          goto LABEL_580;
        v201 = v200[1];
        if (v197.u32[0] > 1uLL)
        {
          if (v201 >= *(_QWORD *)&v195)
            v201 %= *(_QWORD *)&v195;
        }
        else
        {
          v201 &= *(_QWORD *)&v195 - 1;
        }
        v202 = *v99;
        if (v201 != v196)
        {
LABEL_580:
          if (v198)
          {
            v203 = v198[1];
            if (v197.u32[0] > 1uLL)
            {
              if (v203 >= *(_QWORD *)&v195)
                v203 %= *(_QWORD *)&v195;
            }
            else
            {
              v203 &= *(_QWORD *)&v195 - 1;
            }
            v202 = *v99;
            if (v203 == v196)
            {
LABEL_383:
              v204 = *(_QWORD *)(v202 + 8);
              if (v197.u32[0] > 1uLL)
              {
                if (v204 >= *(_QWORD *)&v195)
                  v204 %= *(_QWORD *)&v195;
              }
              else
              {
                v204 &= *(_QWORD *)&v195 - 1;
              }
              if (v204 != v196)
              {
                *(_QWORD *)(*a1 + 8 * v204) = v200;
                v202 = *v99;
              }
              goto LABEL_193;
            }
          }
          *(_QWORD *)(*a1 + 8 * v196) = 0;
          v202 = *v99;
        }
        if (v202)
          goto LABEL_383;
LABEL_193:
        *v200 = v202;
        *v99 = 0;
        --a1[3];
        operator delete(v99);
        v99 = v198;
        if (!v198)
          break;
      }
      else
      {
        if (v99[6] <= v130 - v99[11])
          goto LABEL_360;
LABEL_363:
        v99 = (uint64_t *)*v99;
        if (!v99)
          break;
      }
    }
  }
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Monitoring.ChangeTracking";
  *(_QWORD *)&object[24] = 31;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)v340);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v205 = sub_2241471F8();
    v206 = v205[2];
    if (!v206)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v206 = v205[2];
    }
    v207 = *(_QWORD *)(v206 + 64);
    v208 = (std::mutex *)(v207 + 32);
    std::mutex::lock((std::mutex *)(v207 + 32));
    v210 = *(_QWORD *)(v207 + 96);
    v209 = *(_QWORD *)(v207 + 104);
    std::mutex::unlock(v208);
    if (v210 != v209)
    {
      v211 = BYTE7(v341);
      v212 = (void **)v340[0];
      sub_2241471F8();
      v213 = v211 >= 0 ? v340 : v212;
      v214 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v213);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v214 + 24))(v214))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        *(_QWORD *)&v347 = v328;
        sub_223187394((double *)&qword_255788F20, v214, (uint64_t *)&v347, "ChangedBlocks");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v215 = BYTE7(v341);
  if (SBYTE7(v341) < 0)
    v215 = (unint64_t)v340[1];
  if (v215 >= 0x11)
  {
    v216 = v340;
    if (SBYTE7(v341) < 0)
      v216 = (void **)v340[0];
    v217 = *v216;
    v218 = v216[1];
    v219 = *((unsigned __int8 *)v216 + 16);
    v220 = v217 == (void *)0x6365722E64337663 && v218 == (void *)0x73746174532E6E6FLL;
    if (v220 && v219 == 46)
    {
      v222 = sub_223187510();
      if ((SBYTE7(v341) & 0x80u) == 0)
        v223 = v340;
      else
        v223 = (void **)v340[0];
      if ((SBYTE7(v341) & 0x80u) == 0)
        v224 = BYTE7(v341);
      else
        v224 = (size_t)v340[1];
      *(_QWORD *)&v347 = v328;
      sub_22318760C((uint64_t *)v222, v223, v224, (uint64_t *)&v347, (uint64_t)"ChangedBlocks", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v341) < 0)
    operator delete(v340[0]);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Monitoring.ChangeTracking";
  *(_QWORD *)&object[24] = 31;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)v340);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v225 = sub_2241471F8();
    v226 = v225[2];
    if (!v226)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v226 = v225[2];
    }
    v227 = *(_QWORD *)(v226 + 64);
    v228 = (std::mutex *)(v227 + 32);
    std::mutex::lock((std::mutex *)(v227 + 32));
    v230 = *(_QWORD *)(v227 + 96);
    v229 = *(_QWORD *)(v227 + 104);
    std::mutex::unlock(v228);
    if (v230 != v229)
    {
      v231 = BYTE7(v341);
      v232 = (void **)v340[0];
      sub_2241471F8();
      v233 = v231 >= 0 ? v340 : v232;
      v234 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v233);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v234 + 24))(v234))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        *(_QWORD *)&v347 = v319[3];
        sub_223187394((double *)&qword_255788F20, v234, (uint64_t *)&v347, "VisibleBlocks");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v235 = BYTE7(v341);
  if (SBYTE7(v341) < 0)
    v235 = (unint64_t)v340[1];
  if (v235 >= 0x11)
  {
    v236 = v340;
    if (SBYTE7(v341) < 0)
      v236 = (void **)v340[0];
    v237 = *v236;
    v238 = v236[1];
    v239 = *((unsigned __int8 *)v236 + 16);
    if (v237 == (void *)0x6365722E64337663 && v238 == (void *)0x73746174532E6E6FLL && v239 == 46)
    {
      v242 = sub_223187510();
      if ((SBYTE7(v341) & 0x80u) == 0)
        v243 = v340;
      else
        v243 = (void **)v340[0];
      if ((SBYTE7(v341) & 0x80u) == 0)
        v244 = BYTE7(v341);
      else
        v244 = (size_t)v340[1];
      *(_QWORD *)&v347 = v319[3];
      sub_22318760C((uint64_t *)v242, v243, v244, (uint64_t *)&v347, (uint64_t)"VisibleBlocks", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v341) < 0)
    operator delete(v340[0]);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Monitoring.ChangeTracking";
  *(_QWORD *)&object[24] = 31;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)v340);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v245 = sub_2241471F8();
    v246 = v245[2];
    if (!v246)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v246 = v245[2];
    }
    v247 = *(_QWORD *)(v246 + 64);
    v248 = (std::mutex *)(v247 + 32);
    std::mutex::lock((std::mutex *)(v247 + 32));
    v250 = *(_QWORD *)(v247 + 96);
    v249 = *(_QWORD *)(v247 + 104);
    std::mutex::unlock(v248);
    if (v250 != v249)
    {
      v251 = BYTE7(v341);
      v252 = (void **)v340[0];
      sub_2241471F8();
      v253 = v251 >= 0 ? v340 : v252;
      v254 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v253);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v254 + 24))(v254))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        *(_QWORD *)&v347 = a1[3];
        sub_223187394((double *)&qword_255788F20, v254, (uint64_t *)&v347, "TrackedBlocks");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v255 = BYTE7(v341);
  if (SBYTE7(v341) < 0)
    v255 = (unint64_t)v340[1];
  if (v255 >= 0x11)
  {
    v256 = v340;
    if (SBYTE7(v341) < 0)
      v256 = (void **)v340[0];
    v257 = *v256;
    v258 = v256[1];
    v259 = *((unsigned __int8 *)v256 + 16);
    if (v257 == (void *)0x6365722E64337663 && v258 == (void *)0x73746174532E6E6FLL && v259 == 46)
    {
      v262 = sub_223187510();
      if ((SBYTE7(v341) & 0x80u) == 0)
        v263 = v340;
      else
        v263 = (void **)v340[0];
      if ((SBYTE7(v341) & 0x80u) == 0)
        v264 = BYTE7(v341);
      else
        v264 = (size_t)v340[1];
      *(_QWORD *)&v347 = a1[3];
      sub_22318760C((uint64_t *)v262, v263, v264, (uint64_t *)&v347, (uint64_t)"TrackedBlocks", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v341) < 0)
    operator delete(v340[0]);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v265 = sub_2241471F8();
    v266 = v265[2];
    if (!v266)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v266 = v265[2];
    }
    v267 = *(_QWORD *)(v266 + 64);
    v268 = (std::mutex *)(v267 + 32);
    std::mutex::lock((std::mutex *)(v267 + 32));
    v270 = *(_QWORD *)(v267 + 96);
    v269 = *(_QWORD *)(v267 + 104);
    std::mutex::unlock(v268);
    if (v270 != v269)
    {
      *(_QWORD *)object = "cv3d.recon.";
      *(_QWORD *)&object[8] = 11;
      *(_QWORD *)&object[16] = "Monitoring.ChangeTracking";
      *(_QWORD *)&object[24] = 25;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v325);
      v271 = HIBYTE(v325.__r_.__value_.__r.__words[2]);
      v272 = v325.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v271 >= 0)
        v273 = &v325;
      else
        v273 = (std::string *)v272;
      v274 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v273);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v274 + 24))(v274))
      {
        *(_OWORD *)v340 = 0u;
        v341 = 0u;
        LODWORD(v342) = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v274 + 24))(v274))
        {
          *(_QWORD *)&v332 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v332 + 1) = 2;
          v275 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v274 + 24))(v274))
          {
            sub_2241498F4((uint64_t)object, 0);
            v278 = (uint64_t *)a1[2];
            if (v278)
            {
              v277.f32[0] = 1.0 / *((float *)a1 + 10);
              v324 = v277;
              *(float *)v276.i32 = v277.f32[0] * 8.0;
              v277.f32[0] = (float)((float)(v277.f32[0] * 8.0) * 0.0) * 0.5;
              v321 = (float32x4_t)vdupq_lane_s32(v276, 0);
              v323 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v277.f32, 0);
              while (*((_DWORD *)v278 + 10) < 2u)
              {
                v281 = 44;
                v280 = 57;
                v279 = 238;
                v282 = v278[8];
                if (v282)
                  goto LABEL_518;
LABEL_527:
                v283 = sub_2238FDF3C(v278 + 4);
                v285 = v279 >> 2;
                v286 = v280 >> 2;
                v287 = v281 >> 2;
                if (v283)
                {
                  LOBYTE(v285) = v279;
                  LOBYTE(v286) = v280;
                  LOBYTE(v287) = v281;
                }
                v339[0] = v285;
                v339[1] = v286;
                *(float32x2_t *)v284.f32 = vcvt_f32_s32((int32x2_t)v278[2]);
                v284.f32[2] = (float)*((int *)v278 + 6);
                v339[2] = v287;
                v288 = vaddq_f32(v323, vmulq_n_f32(v284, v324.f32[0]));
                DWORD2(v347) = v288.i32[2];
                *(_QWORD *)&v347 = v288.i64[0];
                v289 = vaddq_f32(v321, v288);
                LODWORD(v334) = v289.i32[2];
                v333 = (uint64_t (**)())v289.i64[0];
                sub_223CF1130((uint64_t)&v347, (uint64_t)&v333, 1, v339, (uint64_t)object, v324, v289, v321);
                v278 = (uint64_t *)*v278;
                if (!v278)
                  goto LABEL_530;
              }
              if (v278[7] >= v278[4] - 2000000000)
                v279 = 244;
              else
                v279 = 238;
              if (v278[7] >= v278[4] - 2000000000)
                v280 = 244;
              else
                v280 = 57;
              if (v278[7] >= v278[4] - 2000000000)
                v281 = 32;
              else
                v281 = 44;
              v282 = v278[8];
              if (!v282)
                goto LABEL_527;
LABEL_518:
              if (v278[4] >= v278[9] + v282)
                v279 = 195;
              else
                v279 = 112;
              if (v278[4] >= v278[9] + v282)
                v280 = 163;
              else
                v280 = 190;
              if (v278[4] >= v278[9] + v282)
                v281 = 205;
              else
                v281 = 68;
              goto LABEL_527;
            }
LABEL_530:
            strcpy((char *)&v347, "TrackedBlocks");
            v348 = 269;
            sub_22329F414((uint64_t)object, &v347, &v332, &v336);
            if (HIBYTE(v348) && (char)v348 < 0)
              operator delete((void *)v347);
            sub_22316F8F4((uint64_t *)object);
            v290 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v274 + 56))(v274);
            v291 = *v290;
            v292 = (std::__shared_weak_count *)v290[1];
            if (v292)
            {
              v293 = (unint64_t *)&v292->__shared_owners_;
              do
                v294 = __ldxr(v293);
              while (__stxr(v294 + 1, v293));
            }
            v296 = v337;
            v295 = v338;
            v333 = &off_24EC6A3B8;
            v334 = v337;
            v335 = v338;
            v337 = 0;
            v338 = 0;
            *(_QWORD *)object = v291;
            *(_QWORD *)&object[8] = v292;
            if (v292)
            {
              v297 = (unint64_t *)&v292->__shared_owners_;
              do
                v298 = __ldxr(v297);
              while (__stxr(v298 + 1, v297));
            }
            *(_QWORD *)&object[16] = &off_24EC6A3B8;
            *(_QWORD *)&object[24] = v296;
            *(_QWORD *)&object[32] = v295;
            if (v295)
            {
              v299 = (unint64_t *)&v295->__shared_owners_;
              do
                v300 = __ldxr(v299);
              while (__stxr(v300 + 1, v299));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v275 + 16))(v275, object);
            v301 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v302 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v303 = __ldaxr(v302);
              while (__stlxr(v303 - 1, v302));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                std::__shared_weak_count::__release_weak(v301);
              }
            }
            v304 = *(std::__shared_weak_count **)&object[8];
            if (*(_QWORD *)&object[8])
            {
              v305 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
              do
                v306 = __ldaxr(v305);
              while (__stlxr(v306 - 1, v305));
              if (!v306)
              {
                ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                std::__shared_weak_count::__release_weak(v304);
              }
            }
            v307 = v335;
            if (v335)
            {
              v308 = (unint64_t *)&v335->__shared_owners_;
              do
                v309 = __ldaxr(v308);
              while (__stlxr(v309 - 1, v308));
              if (!v309)
              {
                ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                std::__shared_weak_count::__release_weak(v307);
              }
            }
            if (v292)
            {
              v310 = (unint64_t *)&v292->__shared_owners_;
              do
                v311 = __ldaxr(v310);
              while (__stlxr(v311 - 1, v310));
              if (!v311)
              {
                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                std::__shared_weak_count::__release_weak(v292);
              }
            }
            v312 = v338;
            if (v338)
            {
              v313 = (unint64_t *)&v338->__shared_owners_;
              do
                v314 = __ldaxr(v313);
              while (__stlxr(v314 - 1, v313));
              if (!v314)
              {
                ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                std::__shared_weak_count::__release_weak(v312);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v325.__r_.__value_.__l.__data_);
    }
  }
  sub_223198030((uint64_t)&v326, v327);
  return kdebug_trace();
}

