void sub_223815480(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;

  v3 = (std::__shared_weak_count *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)STACK[0x338];
  if (STACK[0x338])
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)STACK[0x388];
  if (STACK[0x388])
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)STACK[0x3D8];
  if (STACK[0x3D8])
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)STACK[0x448];
  if (STACK[0x448])
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)STACK[0x498];
  if (STACK[0x498])
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)STACK[0x4E8];
  if (STACK[0x4E8])
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)STACK[0x538];
  if (STACK[0x538])
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)STACK[0x588];
  if (STACK[0x588])
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)STACK[0x5C0];
  if (STACK[0x5C0])
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)STACK[0x5F8];
  if (STACK[0x5F8])
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)STACK[0x648];
  if (STACK[0x648])
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)STACK[0x698];
  if (STACK[0x698])
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)STACK[0x6E8];
  if (STACK[0x6E8])
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)STACK[0x738];
  if (STACK[0x738])
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *(std::__shared_weak_count **)(v1 - 192);
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2238178E8(uint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  __int128 v14;
  _BYTE v15[28];
  _BYTE v16[28];
  unint64_t v17[3];
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  unint64_t v21;

  v19 = 0;
  v16[24] = 0;
  memset(v16, 0, 17);
  v20 = 0;
  v21 = 0;
  sub_223F79614(v17, &v20, &v21, 1, &v19, 1, 0);
  *(_OWORD *)v15 = 0uLL;
  *(_OWORD *)&v15[12] = *(_OWORD *)&v16[12];
  v3 = v17[0];
  v2 = v17[1];
  v4 = v17[2];
  v14 = v18;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24EC5AB40;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v15;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v15[12];
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v14;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AD18;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *a1 = v5;
  a1[1] = (uint64_t)v6;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v16, v5, 2);
  v9 = *(_QWORD *)(*(_QWORD *)v16 + 16);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)v16;
  a1[5] = v9;
  *(_QWORD *)v16 = 0;
  MEMORY[0x227684CE8]();
  a1[6] = a1[3];
  *(_OWORD *)(a1 + 7) = *((_OWORD *)a1 + 2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 36) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_223817AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_22380AC98((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223817B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22380AC98((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223817B3C(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_223817B5C()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223817B70(uint64_t a1, uint64_t **a2, float32x2_t *a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t *v10;
  uint64_t (**v11)(_QWORD);
  _QWORD *v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t *v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  __int128 v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x2_t v55;
  unsigned __int32 v56;
  int8x16_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  char *v61;
  char *v62;
  char *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  BOOL v72;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  float32x4_t v87;
  uint64_t (**v88)();
  uint64_t (**v89)(_QWORD);
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  float32x2_t v110;
  __int32 v111;
  uint64_t v112;
  __int32 v113;
  uint64_t v114;
  __int32 v115;
  _OWORD v116[3];
  float32x2_t v117;
  unsigned __int32 v118;
  int v119;
  float32x2_t v120;
  uint64_t v121;
  int v122;

  if (!*(_BYTE *)(a1 + 33) && !*(_DWORD *)sub_2231CC494((uint64_t)a3))
    return 0;
  v82 = a4;
  v83 = a1;
  v105 = ((char *)a2[1] - (char *)*a2) >> 4;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 728307640;
  kdebug_trace();
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v10 = *a2;
  v84 = a2[1];
  if (*a2 != v84)
  {
    v11 = &off_24EC20868;
    do
    {
      v12 = sub_22381AF00(a5, *v10, v10[1]);
      sub_22319597C(*a6, v12, v116);
      if (*(_QWORD *)&v116[0])
      {
        v13 = v11;
        v14 = sub_2231D0224(*(uint64_t *)&v116[0]);
        v15 = *(_QWORD *)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = *(_OWORD *)(v14 + 48);
        v92 = *(_OWORD *)(v14 + 32);
        v90 = v15;
        v91 = v16;
        v93 = v17;
        v94 = *(_OWORD *)(v14 + 64);
        v95 = *(_DWORD *)(v14 + 80);
        v18 = *(_QWORD *)(v14 + 88);
        v96 = v18;
        v88 = &off_24EC207B8;
        v89 = v13;
        v19 = *(_QWORD *)(sub_2231CC494(*(uint64_t *)&v116[0]) + 8);
        v97 = v19;
        v98 = *((_OWORD *)v12 + 1);
        v99 = *((_OWORD *)v12 + 2);
        v100 = *((_OWORD *)v12 + 3);
        v101 = *((_OWORD *)v12 + 4);
        v20 = v103;
        if ((unint64_t)v103 >= v104)
        {
          v24 = sub_223819F24((void **)&v102, (uint64_t)&v88);
          v11 = v13;
        }
        else
        {
          *((_QWORD *)v103 + 1) = v13;
          *((_QWORD *)v20 + 2) = v15;
          v11 = v13;
          *((_QWORD *)v20 + 3) = v16;
          *((_OWORD *)v20 + 2) = v92;
          *((_OWORD *)v20 + 3) = v93;
          *((_OWORD *)v20 + 4) = v94;
          *((_DWORD *)v20 + 20) = v95;
          *(_QWORD *)v20 = &off_24EC207B8;
          *((_QWORD *)v20 + 11) = v18;
          *((_QWORD *)v20 + 12) = v19;
          v21 = v98;
          v22 = v99;
          v23 = v100;
          *(_OWORD *)(v20 + 152) = v101;
          *(_OWORD *)(v20 + 136) = v23;
          *(_OWORD *)(v20 + 120) = v22;
          *(_OWORD *)(v20 + 104) = v21;
          v24 = v20 + 168;
        }
      }
      else
      {
        v25 = sub_2231D0224((uint64_t)a3);
        v26 = *(_QWORD *)(v25 + 16);
        v27 = *(_QWORD *)(v25 + 24);
        v28 = *(_OWORD *)(v25 + 48);
        v92 = *(_OWORD *)(v25 + 32);
        v90 = v26;
        v91 = v27;
        v93 = v28;
        v94 = *(_OWORD *)(v25 + 64);
        v95 = *(_DWORD *)(v25 + 80);
        v29 = *(_QWORD *)(v25 + 88);
        v88 = &off_24EC207B8;
        v89 = v11;
        v30 = *(_QWORD *)(v83 + 56);
        v96 = v29;
        v97 = v30;
        v101 = *((_OWORD *)v12 + 4);
        v100 = *((_OWORD *)v12 + 3);
        v99 = *((_OWORD *)v12 + 2);
        v98 = *((_OWORD *)v12 + 1);
        v31 = v103;
        if ((unint64_t)v103 >= v104)
        {
          v24 = sub_223819F24((void **)&v102, (uint64_t)&v88);
        }
        else
        {
          *((_QWORD *)v103 + 1) = v11;
          *((_QWORD *)v31 + 2) = v26;
          *((_QWORD *)v31 + 3) = v27;
          *((_OWORD *)v31 + 2) = v92;
          *((_OWORD *)v31 + 3) = v93;
          *((_OWORD *)v31 + 4) = v94;
          *((_DWORD *)v31 + 20) = v95;
          *(_QWORD *)v31 = &off_24EC207B8;
          *((_QWORD *)v31 + 11) = v29;
          *((_QWORD *)v31 + 12) = v30;
          v32 = v98;
          v33 = v99;
          v34 = v100;
          *(_OWORD *)(v31 + 152) = v101;
          *(_OWORD *)(v31 + 136) = v34;
          *(_OWORD *)(v31 + 120) = v33;
          *(_OWORD *)(v31 + 104) = v32;
          v24 = v31 + 168;
        }
      }
      v103 = v24;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v116[0] + 1);
      if (*((_QWORD *)&v116[0] + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v116[0] + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v10 += 2;
    }
    while (v10 != v84);
  }
  v38 = sub_2231D0214((uint64_t)a3);
  v39 = sub_2231D020C((uint64_t)a3);
  sub_2231D022C(a3, (uint64_t)&v88);
  v41 = *(float *)(v83 + 16);
  v40 = *(float *)(v83 + 20);
  v42 = atan2f(0.5, *((float *)&v90 + 1) / (float)v38);
  v43 = atan2f(0.5, *(float *)&v88 / (float)v39);
  v120 = *(float32x2_t *)(sub_2231CC494((uint64_t)a3) + 8);
  v44 = (float32x2_t *)sub_2231D0224((uint64_t)a3);
  *(float *)v45.i32 = v41 * 0.017453;
  *(float *)v46.i32 = v40 * (float)(v42 + v42);
  *(float *)v47.i32 = v40 * (float)(v43 + v43);
  v48.i64[0] = *(_QWORD *)v82;
  v48.i32[2] = *(_DWORD *)(v82 + 8);
  v49.i64[0] = *(_QWORD *)(v82 + 16);
  v49.i32[2] = *(_DWORD *)(v82 + 24);
  v50.i32[0] = *(_DWORD *)(v82 + 40);
  v51.i64[0] = *(_QWORD *)(v82 + 48);
  v51.i32[2] = *(_DWORD *)(v82 + 56);
  *(_QWORD *)&v52 = vzip1q_s32(v48, v49).u64[0];
  v53 = (int8x16_t)vnegq_f32(v51);
  v54 = (int8x16_t)vtrn2q_s32(v48, v49);
  v54.i32[2] = HIDWORD(*(_QWORD *)(v82 + 32));
  v58 = (int8x16_t)vzip2q_s32(v48, v49);
  v58.i32[2] = v50.i32[0];
  v55 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v58, 2).u64[0];
  v56 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v82 + 32), *(float32x2_t *)v53.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v82 + 32), 1), *(float32x2_t *)v51.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), *(float32x2_t *)v50.i8).u32[0];
  *((_QWORD *)&v52 + 1) = *(_QWORD *)(v82 + 32);
  v57.i32[3] = 0;
  v57.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v54, 0).i32[3];
  *(uint64_t *)((char *)v57.i64 + 4) = vextq_s8(v54, v45, 4uLL).u64[0];
  v58.i64[1] = v55.u32[0];
  v116[1] = v57;
  v116[2] = v58;
  v116[0] = v52;
  v117 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v52, *(float *)v53.i32), *(float32x2_t *)v54.i8, *(float32x2_t *)v51.f32, 1), *(float32x2_t *)v58.i8, v51, 2);
  v118 = v56;
  v119 = 1065353216;
  if (*(float *)v46.i32 >= (float)(v41 * 0.017453))
    v59 = v41 * 0.017453;
  else
    v59 = v40 * (float)(v42 + v42);
  if (*(float *)v47.i32 >= *(float *)v45.i32)
    v60 = v41 * 0.017453;
  else
    v60 = v40 * (float)(v43 + v43);
  v61 = v102;
  v62 = v103;
  if (v102 == v103)
  {
    v75 = 1;
    if (v102)
    {
LABEL_41:
      if (v103 != v61)
      {
        v76 = v103 - v61 - 168;
        v77 = v103;
        if (v76 < 0xA8)
          goto LABEL_53;
        v78 = v76 / 0xA8 + 1;
        v77 = &v103[-168 * (v78 & 0x3FFFFFFFFFFFFFELL)];
        v79 = v103 - 336;
        v80 = v78 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          *((_QWORD *)v79 + 21) = &off_24EC20828;
          *(_QWORD *)v79 = &off_24EC20828;
          v79 -= 336;
          v80 -= 2;
        }
        while (v80);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_53:
          do
          {
            *((_QWORD *)v77 - 21) = &off_24EC20828;
            v77 -= 168;
          }
          while (v77 != v61);
        }
      }
      operator delete(v61);
    }
  }
  else
  {
    v63 = v102 + 96;
    while (1)
    {
      if (*(_BYTE *)(v83 + 28))
      {
        v45.i32[0] = *(_DWORD *)(v83 + 24);
        if (sub_223EA6200(&v120, (float32x2_t *)v116, v44, (unint64_t *)v63, (uint64_t)(v63 + 8), (uint64_t)(v63 - 96), (float32x4_t)v45, v46, v47, v58, *(double *)&v55, v57, v50, *(float32x2_t *)v51.f32))
        {
          break;
        }
      }
      v64 = *(float32x4_t *)(v82 + 16);
      v65 = *(float32x4_t *)(v82 + 32);
      v66 = *(float32x4_t *)(v82 + 48);
      v67 = *(float32x4_t *)(v63 + 56);
      v68 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v82, COERCE_FLOAT(*(_OWORD *)(v63 + 8))), v64, *(float32x2_t *)(v63 + 8), 1), v65, *(float32x4_t *)(v63 + 8), 2), v66, *(float32x4_t *)(v63 + 8), 3);
      v69 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v82, COERCE_FLOAT(*(_OWORD *)(v63 + 24))), v64, *(float32x2_t *)(v63 + 24), 1), v65, *(float32x4_t *)(v63 + 24), 2), v66, *(float32x4_t *)(v63 + 24), 3);
      v70 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v82, COERCE_FLOAT(*(_OWORD *)(v63 + 40))), v64, *(float32x2_t *)(v63 + 40), 1), v65, *(float32x4_t *)(v63 + 40), 2), v66, *(float32x4_t *)(v63 + 40), 3);
      v71 = vmulq_n_f32(*(float32x4_t *)v82, v67.f32[0]);
      v111 = v68.i32[2];
      v110 = *(float32x2_t *)v68.f32;
      v113 = v69.i32[2];
      v87 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v71, v64, *(float32x2_t *)v67.f32, 1), v65, v67, 2), v66, v67, 3);
      v112 = v69.i64[0];
      v115 = v70.i32[2];
      v114 = v70.i64[0];
      v121 = 0;
      v122 = 0;
      sub_22381A174(&v110, (float *)&v121);
      v57 = (int8x16_t)v87;
      *(int32x2_t *)v47.i8 = vdup_lane_s32(*(int32x2_t *)v87.f32, 1);
      v58.i32[0] = v87.i32[0];
      v55 = (float32x2_t)vextq_s8(v57, v57, 8uLL).u64[0];
      *(float32x2_t *)v58.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), *(float32x2_t *)v47.i8, *(float32x2_t *)v87.f32, 1), v55, v55);
      *(float *)v47.i32 = sqrtf(*(float *)v58.i32);
      v58.i32[0] = *(_DWORD *)(v83 + 12);
      *(float *)v45.i32 = fabsf(*(float *)&v121);
      *(float *)v46.i32 = fabsf(*((float *)&v121 + 1));
      v72 = *(float *)v47.i32 < *(float *)v58.i32 && *(float *)v45.i32 < v59;
      if (v72 && *(float *)v46.i32 < v60)
        break;
      v74 = v63 + 72;
      v63 += 168;
      if (v74 == v62)
      {
        v75 = 1;
        v61 = v102;
        if (v102)
          goto LABEL_41;
        goto LABEL_48;
      }
    }
    v75 = 0;
    v61 = v102;
    if (v102)
      goto LABEL_41;
  }
LABEL_48:
  kdebug_trace();
  return v75;
}

void sub_2238181DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *__p,char *a40,uint64_t a41,char a42)
{
  uint64_t v42;
  int64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;

  sub_223167354(v42 - 208);
  if (__p)
  {
    v44 = a40 - __p;
    if (a40 != __p)
    {
      v45 = a40;
      if ((unint64_t)(v44 - 168) < 0xA8)
        goto LABEL_12;
      v46 = (v44 - 168) / 0xA8uLL + 1;
      v45 = &a40[-168 * (v46 & 0x3FFFFFFFFFFFFFELL)];
      v47 = a40 - 336;
      v48 = v46 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *((_QWORD *)v47 + 21) = &off_24EC20828;
        *(_QWORD *)v47 = &off_24EC20828;
        v47 -= 336;
        v48 -= 2;
      }
      while (v48);
      if (v46 != (v46 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_12:
        do
        {
          *((_QWORD *)v45 - 21) = &off_24EC20828;
          v45 -= 168;
        }
        while (v45 != __p);
      }
    }
    operator delete(__p);
  }
  sub_2231874DC((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_2238182A8()
{
  JUMPOUT(0x227684CE8);
}

void sub_2238182BC(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238183DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238183F8(uint64_t a1, unsigned __int8 **a2, uint64_t a3, float32x2_t *a4, _QWORD *a5, uint64_t a6, void **a7)
{
  int32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x4_t v15;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t *v23;
  float32x2_t *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  std::mutex *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  int32x2_t v72;
  int32x2_t *v73;
  int32x2_t *v74;
  float32x4_t v75;
  uint64_t v76;
  int v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _DWORD *v90;
  char *v91;
  __int8 *v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  std::mutex *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  void **v130;
  void *v131;
  void *v132;
  int v133;
  __n128 *v136;
  void **v137;
  size_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  std::mutex *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void **v147;
  void *v148;
  void *v149;
  int v150;
  __n128 *v153;
  void **v154;
  size_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  std::mutex *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void **v164;
  void *v165;
  void *v166;
  int v167;
  __n128 *v170;
  void **v171;
  size_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  unsigned __int8 *v182;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  float32x4_t *v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x2_t v197;
  float v198;
  float v199;
  unsigned __int8 *v202;
  unsigned __int8 *v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unsigned __int8 *v211;
  BOOL v212;
  unsigned __int8 *v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  _QWORD *v216;
  float32x4_t v217;
  float32x4_t v218;
  int8x16_t v219;
  float32x2_t v220;
  int32x2_t *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t *v229;
  float32x4_t v230;
  float32x4_t v231;
  uint64_t v232;
  _QWORD *v233;
  float32x4_t v234;
  int8x16_t v235;
  int32x2_t v237[2];
  std::__shared_weak_count *v238;
  int32x2_t v239[2];
  std::__shared_weak_count *v240;
  void *v241[2];
  __int128 v242;
  int v243;
  std::string v244;
  unsigned int v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  void *v249;
  int32x2_t *v250;
  _OWORD v251[3];
  uint64_t v252;
  __int32 v253;
  int v254;
  __int128 v255;
  uint64_t (**v256)();
  uint64_t v257;
  std::__shared_weak_count *v258;
  void *__p[2];
  __int16 v260;
  __int128 v261;
  std::__shared_weak_count *v262;
  __int16 v263;
  char v264;
  __int16 v265;
  char v266;
  _OWORD v267[2];
  _QWORD v268[48];

  v268[45] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)sub_2231CC494(a3))
    return 0;
  sub_2231D3D90(a3, (uint64_t)v239);
  sub_2231D4288(a3, (uint64_t)v237);
  v233 = a5;
  *(float32x2_t *)v12.i8 = *a4;
  v12.i32[2] = a4[1].i32[0];
  *(float32x2_t *)v13.i8 = a4[2];
  v13.i32[2] = a4[3].i32[0];
  v14.i32[0] = a4[5].i32[0];
  *(float32x2_t *)v15.f32 = a4[6];
  v15.i32[2] = a4[7].i32[0];
  *(_QWORD *)&v16 = vzip1q_s32(v12, v13).u64[0];
  v17 = (int8x16_t)vnegq_f32(v15);
  v18 = (int8x16_t)vtrn2q_s32(v12, v13);
  v18.i32[2] = HIDWORD(*(_QWORD *)&a4[4]);
  v19 = (int8x16_t)vzip2q_s32(v12, v13);
  v20 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v16, *(float *)v17.i32), *(float32x2_t *)v18.i8, *(float32x2_t *)v15.f32, 1), *(float32x2_t *)v19.i8, v15, 2);
  v19.i32[2] = v14.i32[0];
  v232 = a1;
  v21.i32[0] = *(_DWORD *)(a1 + 224);
  v234 = v21;
  v22 = vmls_lane_f32(vmul_f32(a4[4], *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a4[4], 1), *(float32x2_t *)v15.f32, 1);
  v15.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
  *((_QWORD *)&v16 + 1) = *(_QWORD *)&a4[4];
  v17.i32[3] = 0;
  v17.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v18, 0).i32[3];
  *(uint64_t *)((char *)v17.i64 + 4) = vextq_s8(v18, v19, 4uLL).u64[0];
  v19.i64[1] = vdupq_laneq_s32((int32x4_t)v19, 2).u32[0];
  v251[1] = v17;
  v251[2] = v19;
  v251[0] = v16;
  v252 = (uint64_t)v20;
  v253 = vmla_f32(v22, *(float32x2_t *)v15.f32, v14).u32[0];
  v254 = 1065353216;
  v23 = (float32x2_t *)sub_2231D0224(a3);
  v24 = (float32x2_t *)sub_2231CC494(a3);
  sub_223CF2048(v23, (float32x2_t *)v251, v24 + 1, v239, v237, (int **)&v249, v234.f32[0]);
  v247 = 0;
  v248 = 0;
  v246 = &v247;
  v245 = 0;
  v25 = (int *)v249;
  v26 = (int *)v250;
  if (v249 != v250)
  {
    while (1)
    {
      v31 = 0;
      _X9 = (char *)*a7;
      __asm { PRFM            #4, [X9] }
      v59 = v25[1];
      v60 = v25[2];
      v61 = (19349669 * v59) ^ (73856093 * *v25) ^ (83492791 * v60);
      v62 = (unint64_t)a7[3];
      v32 = (v61 >> 7) ^ 0x13701D;
      v63 = 0x101010101010101 * (v61 & 0x7F);
      while (1)
      {
        v27 = v32 & v62;
        v28 = *(_QWORD *)&_X9[v27];
        v29 = ((v28 ^ v63) - 0x101010101010101) & ~(v28 ^ v63) & 0x8080808080808080;
        if (v29)
          break;
LABEL_9:
        if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
          goto LABEL_52;
        v31 += 8;
        v32 = v31 + v27;
      }
      while (1)
      {
        v30 = (unint64_t)a7[1] + 56 * ((v27 + (__clz(__rbit64(v29)) >> 3)) & v62);
        if (*(_DWORD *)v30 == *v25 && *(_DWORD *)(v30 + 4) == v59 && *(_DWORD *)(v30 + 8) == v60)
          break;
        v29 &= v29 - 1;
        if (!v29)
          goto LABEL_9;
      }
      if (_X9 && *(_QWORD *)(v30 + 32))
        break;
LABEL_52:
      ++v245;
LABEL_53:
      v25 += 3;
      if (v25 == v26)
        goto LABEL_55;
    }
    v33 = *(_QWORD **)(v30 + 16);
    v34 = *(unsigned __int8 **)(v30 + 24);
    v35 = *(char *)v33;
    if (v35 <= -2)
    {
      do
      {
        v36 = (__clz(__rbit64(((*v33 >> 7) & ~*v33 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v33 = (_QWORD *)((char *)v33 + v36);
        v34 += 16 * v36;
        v35 = *(char *)v33;
      }
      while (v35 < -1);
    }
    while (1)
    {
      while (1)
      {
        if (v35 == 255)
          goto LABEL_53;
        v37 = sub_223426D4C(&v246, (uint64_t *)&v247, (unsigned __int8 **)v267, (uint64_t *)v241, v34);
        if (!*(_QWORD *)v37)
          break;
        v38 = *((char *)v33 + 1);
        v33 = (_QWORD *)((char *)v33 + 1);
        LOBYTE(v35) = v38;
        v34 += 16;
        if (v38 <= -2)
          goto LABEL_44;
      }
      v39 = operator new(0x30uLL);
      *(_OWORD *)((char *)v39 + 25) = *(_OWORD *)v34;
      v40 = *(_QWORD *)&v267[0];
      *v39 = 0;
      v39[1] = 0;
      v39[2] = v40;
      *(_QWORD *)v37 = v39;
      if (*v246)
      {
        v246 = (_QWORD *)*v246;
        v39 = *(_QWORD **)v37;
      }
      v41 = v247;
      _ZF = v39 == v247;
      *((_BYTE *)v39 + 24) = v39 == v247;
      if (!_ZF)
      {
        do
        {
          v42 = v39[2];
          if (*(_BYTE *)(v42 + 24))
            break;
          v43 = *(_QWORD **)(v42 + 16);
          v44 = *v43;
          if (*v43 == v42)
          {
            v47 = v43[1];
            if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), v45 = (_BYTE *)(v47 + 24), v48))
            {
              if (*(_QWORD **)v42 == v39)
              {
                *(_BYTE *)(v42 + 24) = 1;
                *((_BYTE *)v43 + 24) = 0;
                v51 = *(_QWORD *)(v42 + 8);
                *v43 = v51;
                if (v51)
                  goto LABEL_36;
              }
              else
              {
                v49 = *(uint64_t **)(v42 + 8);
                v50 = *v49;
                *(_QWORD *)(v42 + 8) = *v49;
                if (v50)
                {
                  *(_QWORD *)(v50 + 16) = v42;
                  v43 = *(_QWORD **)(v42 + 16);
                }
                v49[2] = (uint64_t)v43;
                *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v49;
                *v49 = v42;
                *(_QWORD *)(v42 + 16) = v49;
                v43 = (_QWORD *)v49[2];
                v42 = *v43;
                *((_BYTE *)v49 + 24) = 1;
                *((_BYTE *)v43 + 24) = 0;
                v51 = *(_QWORD *)(v42 + 8);
                *v43 = v51;
                if (v51)
LABEL_36:
                  *(_QWORD *)(v51 + 16) = v43;
              }
              *(_QWORD *)(v42 + 16) = v43[2];
              *(_QWORD *)(v43[2] + 8 * (*(_QWORD *)v43[2] != (_QWORD)v43)) = v42;
              *(_QWORD *)(v42 + 8) = v43;
LABEL_42:
              v43[2] = v42;
              break;
            }
          }
          else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), v45 = (_BYTE *)(v44 + 24), v46))
          {
            if (*(_QWORD **)v42 == v39)
            {
              v55 = v39[1];
              *(_QWORD *)v42 = v55;
              if (v55)
              {
                *(_QWORD *)(v55 + 16) = v42;
                v43 = *(_QWORD **)(v42 + 16);
              }
              v39[2] = v43;
              *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v39;
              v39[1] = v42;
              *(_QWORD *)(v42 + 16) = v39;
              v43 = (_QWORD *)v39[2];
              *((_BYTE *)v39 + 24) = 1;
              *((_BYTE *)v43 + 24) = 0;
              v42 = v43[1];
              v52 = *(_QWORD **)v42;
              v43[1] = *(_QWORD *)v42;
              if (v52)
LABEL_40:
                v52[2] = v43;
            }
            else
            {
              *(_BYTE *)(v42 + 24) = 1;
              *((_BYTE *)v43 + 24) = 0;
              v42 = v43[1];
              v52 = *(_QWORD **)v42;
              v43[1] = *(_QWORD *)v42;
              if (v52)
                goto LABEL_40;
            }
            *(_QWORD *)(v42 + 16) = v43[2];
            *(_QWORD *)(v43[2] + 8 * (*(_QWORD *)v43[2] != (_QWORD)v43)) = v42;
            *(_QWORD *)v42 = v43;
            goto LABEL_42;
          }
          *(_BYTE *)(v42 + 24) = 1;
          v39 = v43;
          *((_BYTE *)v43 + 24) = v43 == v41;
          *v45 = 1;
        }
        while (v43 != v41);
      }
      ++v248;
      v53 = *((char *)v33 + 1);
      v33 = (_QWORD *)((char *)v33 + 1);
      LOBYTE(v35) = v53;
      v34 += 16;
      if (v53 <= -2)
      {
        do
        {
LABEL_44:
          v54 = (__clz(__rbit64(((*v33 >> 7) & ~*v33 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v33 = (_QWORD *)((char *)v33 + v54);
          v34 += 16 * v54;
          v35 = *(char *)v33;
        }
        while (v35 < -1);
      }
    }
  }
LABEL_55:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v64 = sub_2241471F8();
    v65 = v64[2];
    if (!v65)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v65 = v64[2];
    }
    v66 = *(_QWORD *)(v65 + 64);
    v67 = (std::mutex *)(v66 + 32);
    std::mutex::lock((std::mutex *)(v66 + 32));
    v69 = *(_QWORD *)(v66 + 96);
    v68 = *(_QWORD *)(v66 + 104);
    std::mutex::unlock(v67);
    if (v69 != v68)
    {
      *(_QWORD *)&v267[0] = "cv3d.recon.";
      *((_QWORD *)&v267[0] + 1) = 11;
      *(_QWORD *)&v267[1] = "Keyframing.Visibility";
      *((_QWORD *)&v267[1] + 1) = 21;
      sub_2231A9820((uint64_t)v267, (uint64_t)v268, 0, 0, &v244);
      sub_2241471F8();
      v70 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
      {
        *(_OWORD *)v241 = 0u;
        v242 = 0u;
        v243 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
        {
          *(_QWORD *)&v255 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v255 + 1) = 2;
          v71 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
          {
            v229 = v71;
            v265 = 0;
            v266 = -1;
            v263 = 255;
            v264 = 0;
            sub_2241498F4((uint64_t)v267, 0);
            v73 = (int32x2_t *)v249;
            v74 = v250;
            if (v249 != v250)
            {
              v75.i32[3] = v234.i32[3];
              *(float *)v72.i32 = (float)(v234.f32[0] * 0.0) * 0.5;
              v230 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v234.f32, 0);
              v231 = (float32x4_t)vdupq_lane_s32(v72, 0);
              do
              {
                v76 = 0;
                _X10 = (char *)*a7;
                __asm { PRFM            #4, [X10] }
                v79 = (int)*v73;
                v80 = HIDWORD(*(unint64_t *)v73);
                v81 = v73[1].i32[0];
                v82 = (19349669 * v80) ^ (73856093 * v79) ^ (83492791 * v81);
                v83 = (unint64_t)a7[3];
                v84 = (v82 >> 7) ^ 0x13701D;
                v85 = 0x101010101010101 * (v82 & 0x7F);
                while (1)
                {
                  v86 = v84 & v83;
                  v87 = *(_QWORD *)&_X10[v86];
                  v88 = ((v87 ^ v85) - 0x101010101010101) & ~(v87 ^ v85) & 0x8080808080808080;
                  if (v88)
                    break;
LABEL_71:
                  if ((v87 & (~v87 << 6) & 0x8080808080808080) != 0)
                  {
                    v91 = 0;
                    goto LABEL_75;
                  }
                  v76 += 8;
                  v84 = v76 + v86;
                }
                while (1)
                {
                  v89 = (v86 + (__clz(__rbit64(v88)) >> 3)) & v83;
                  v90 = (char *)a7[1] + 56 * v89;
                  if (*v90 == v79 && v90[1] == v80 && v90[2] == v81)
                    break;
                  v88 &= v88 - 1;
                  if (!v88)
                    goto LABEL_71;
                }
                v91 = &_X10[v89];
LABEL_75:
                *(float32x2_t *)v75.f32 = vcvt_f32_s32(*v73);
                if (v91)
                  v92 = (__int8 *)&v265;
                else
                  v92 = (__int8 *)&v263;
                v75.f32[2] = (float)v81;
                v93 = vaddq_f32(v231, vmulq_n_f32(v75, v234.f32[0]));
                LODWORD(__p[1]) = v93.i32[2];
                __p[0] = (void *)v93.i64[0];
                v94 = vaddq_f32(v230, v93);
                LODWORD(v257) = v94.i32[2];
                v256 = (uint64_t (**)())v94.i64[0];
                sub_223CF1130((uint64_t)__p, (uint64_t)&v256, 1, v92, (uint64_t)v267, v234, v94, v230);
                v73 = (int32x2_t *)((char *)v73 + 12);
              }
              while (v73 != v74);
            }
            strcpy((char *)__p, "creation");
            v260 = 264;
            sub_22329F414((uint64_t)v267, (__int128 *)__p, &v255, &v261);
            if (HIBYTE(v260) && (char)v260 < 0)
              operator delete(__p[0]);
            sub_22316F8F4((uint64_t *)v267);
            v95 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
            v96 = *v95;
            v97 = (std::__shared_weak_count *)v95[1];
            if (v97)
            {
              p_shared_owners = (unint64_t *)&v97->__shared_owners_;
              do
                v99 = __ldxr(p_shared_owners);
              while (__stxr(v99 + 1, p_shared_owners));
            }
            v101 = *((_QWORD *)&v261 + 1);
            v100 = v262;
            v256 = &off_24EC6A3B8;
            v257 = *((_QWORD *)&v261 + 1);
            v258 = v262;
            *((_QWORD *)&v261 + 1) = 0;
            v262 = 0;
            *(_QWORD *)&v267[0] = v96;
            *((_QWORD *)&v267[0] + 1) = v97;
            if (v97)
            {
              v102 = (unint64_t *)&v97->__shared_owners_;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            *(_QWORD *)&v267[1] = &off_24EC6A3B8;
            *((_QWORD *)&v267[1] + 1) = v101;
            v268[0] = v100;
            if (v100)
            {
              v104 = (unint64_t *)&v100->__shared_owners_;
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }
            (*(void (**)(uint64_t *, _OWORD *))(*v229 + 16))(v229, v267);
            v106 = (std::__shared_weak_count *)v268[0];
            if (v268[0])
            {
              v107 = (unint64_t *)(v268[0] + 8);
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            v109 = (std::__shared_weak_count *)*((_QWORD *)&v267[0] + 1);
            if (*((_QWORD *)&v267[0] + 1))
            {
              v110 = (unint64_t *)(*((_QWORD *)&v267[0] + 1) + 8);
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
            v112 = v258;
            if (v258)
            {
              v113 = (unint64_t *)&v258->__shared_owners_;
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            if (v97)
            {
              v115 = (unint64_t *)&v97->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            v117 = v262;
            if (v262)
            {
              v118 = (unint64_t *)&v262->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v244.__r_.__value_.__l.__data_);
    }
  }
  *(_QWORD *)&v267[0] = "cv3d.recon.";
  *((_QWORD *)&v267[0] + 1) = 11;
  *(_QWORD *)&v267[1] = "Stats.Keyframing.KeyframeCreationContentAware";
  *((_QWORD *)&v267[1] + 1) = 45;
  sub_2231A9820((uint64_t)v267, (uint64_t)v268, 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v121 = sub_2241471F8();
    v122 = v121[2];
    if (!v122)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v122 = v121[2];
    }
    v123 = *(_QWORD *)(v122 + 64);
    v124 = (std::mutex *)(v123 + 32);
    std::mutex::lock((std::mutex *)(v123 + 32));
    v126 = *(_QWORD *)(v123 + 96);
    v125 = *(_QWORD *)(v123 + 104);
    std::mutex::unlock(v124);
    if (v126 != v125)
    {
      sub_2241471F8();
      v127 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127))
      {
        memset(v267, 0, sizeof(v267));
        LODWORD(v268[0]) = 728325608;
        kdebug_trace();
        v256 = (uint64_t (**)())a7[2];
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127))
        {
          BYTE7(v242) = 3;
          LODWORD(v241[0]) = 7364973;
          *(_QWORD *)&v261 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v261 + 1) = 2;
          v128 = sub_2241471F8();
          sub_2231AD778((uint64_t)v128, v127, (uint64_t *)&v256, (uint64_t)v241, &v261);
          if (SBYTE7(v242) < 0)
            operator delete(v241[0]);
        }
        kdebug_trace();
      }
    }
  }
  memset(v267, 0, sizeof(v267));
  LODWORD(v268[0]) = 728325624;
  kdebug_trace();
  v129 = v260;
  if ((v260 & 0x80u) != 0)
    v129 = (unint64_t)__p[1];
  if (v129 >= 0x11)
  {
    v130 = __p;
    if ((v260 & 0x80u) != 0)
      v130 = (void **)__p[0];
    v131 = *v130;
    v132 = v130[1];
    v133 = *((unsigned __int8 *)v130 + 16);
    _ZF = v131 == (void *)0x6365722E64337663 && v132 == (void *)0x73746174532E6E6FLL;
    if (_ZF && v133 == 46)
    {
      v136 = sub_223187510();
      if ((v260 & 0x80u) == 0)
        v137 = __p;
      else
        v137 = (void **)__p[0];
      if ((v260 & 0x80u) == 0)
        v138 = v260;
      else
        v138 = (size_t)__p[1];
      v241[0] = a7[2];
      sub_22318760C((uint64_t *)v136, v137, v138, (uint64_t *)v241, (uint64_t)"map", 3);
    }
  }
  kdebug_trace();
  if ((char)v260 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v267[0] = "cv3d.recon.";
  *((_QWORD *)&v267[0] + 1) = 11;
  *(_QWORD *)&v267[1] = "Stats.Keyframing.KeyframeCreationContentAware";
  *((_QWORD *)&v267[1] + 1) = 45;
  sub_2231A9820((uint64_t)v267, (uint64_t)v268, 0, 0, (std::string *)v241);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v139 = sub_2241471F8();
    v140 = v139[2];
    if (!v140)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v140 = v139[2];
    }
    v141 = *(_QWORD *)(v140 + 64);
    v142 = (std::mutex *)(v141 + 32);
    std::mutex::lock((std::mutex *)(v141 + 32));
    v144 = *(_QWORD *)(v141 + 96);
    v143 = *(_QWORD *)(v141 + 104);
    std::mutex::unlock(v142);
    if (v144 != v143)
    {
      sub_2241471F8();
      v145 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v145 + 24))(v145))
      {
        memset(v267, 0, sizeof(v267));
        LODWORD(v268[0]) = 728325608;
        kdebug_trace();
        __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (((char *)v250 - (_BYTE *)v249) >> 2));
        sub_223189CA8((double *)&qword_255788F20, v145, (uint64_t *)__p, "visible");
        kdebug_trace();
      }
    }
  }
  memset(v267, 0, sizeof(v267));
  LODWORD(v268[0]) = 728325624;
  kdebug_trace();
  v146 = BYTE7(v242);
  if (SBYTE7(v242) < 0)
    v146 = (unint64_t)v241[1];
  if (v146 >= 0x11)
  {
    v147 = v241;
    if (SBYTE7(v242) < 0)
      v147 = (void **)v241[0];
    v148 = *v147;
    v149 = v147[1];
    v150 = *((unsigned __int8 *)v147 + 16);
    if (v148 == (void *)0x6365722E64337663 && v149 == (void *)0x73746174532E6E6FLL && v150 == 46)
    {
      v153 = sub_223187510();
      if ((SBYTE7(v242) & 0x80u) == 0)
        v154 = v241;
      else
        v154 = (void **)v241[0];
      if ((SBYTE7(v242) & 0x80u) == 0)
        v155 = BYTE7(v242);
      else
        v155 = (size_t)v241[1];
      __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (((char *)v250 - (_BYTE *)v249) >> 2));
      sub_22318760C((uint64_t *)v153, v154, v155, (uint64_t *)__p, (uint64_t)"visible", 7);
    }
  }
  kdebug_trace();
  if (SBYTE7(v242) < 0)
    operator delete(v241[0]);
  *(_QWORD *)&v267[0] = "cv3d.recon.";
  *((_QWORD *)&v267[0] + 1) = 11;
  *(_QWORD *)&v267[1] = "Stats.Keyframing.KeyframeCreationContentAware";
  *((_QWORD *)&v267[1] + 1) = 45;
  sub_2231A9820((uint64_t)v267, (uint64_t)v268, 0, 0, (std::string *)v241);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v156 = sub_2241471F8();
    v157 = v156[2];
    if (!v157)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v157 = v156[2];
    }
    v158 = *(_QWORD *)(v157 + 64);
    v159 = (std::mutex *)(v158 + 32);
    std::mutex::lock((std::mutex *)(v158 + 32));
    v161 = *(_QWORD *)(v158 + 96);
    v160 = *(_QWORD *)(v158 + 104);
    std::mutex::unlock(v159);
    if (v161 != v160)
    {
      sub_2241471F8();
      v162 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
      {
        memset(v267, 0, sizeof(v267));
        LODWORD(v268[0]) = 728325608;
        kdebug_trace();
        sub_2238182BC((double *)&qword_255788F20, v162, (int *)&v245, "new");
        kdebug_trace();
      }
    }
  }
  memset(v267, 0, sizeof(v267));
  LODWORD(v268[0]) = 728325624;
  kdebug_trace();
  v163 = BYTE7(v242);
  if (SBYTE7(v242) < 0)
    v163 = (unint64_t)v241[1];
  if (v163 >= 0x11)
  {
    v164 = v241;
    if (SBYTE7(v242) < 0)
      v164 = (void **)v241[0];
    v165 = *v164;
    v166 = v164[1];
    v167 = *((unsigned __int8 *)v164 + 16);
    if (v165 == (void *)0x6365722E64337663 && v166 == (void *)0x73746174532E6E6FLL && v167 == 46)
    {
      v170 = sub_223187510();
      if ((SBYTE7(v242) & 0x80u) == 0)
        v171 = v241;
      else
        v171 = (void **)v241[0];
      if ((SBYTE7(v242) & 0x80u) == 0)
        v172 = BYTE7(v242);
      else
        v172 = (size_t)v241[1];
      sub_223532E4C(v170, v171, v172, &v245, (uint64_t)"new", 3);
    }
  }
  kdebug_trace();
  if (SBYTE7(v242) < 0)
  {
    operator delete(v241[0]);
    v174 = *a2;
    v173 = a2[1];
    if (*a2 == v173)
      goto LABEL_253;
  }
  else
  {
    v174 = *a2;
    v173 = a2[1];
    if (*a2 == v173)
      goto LABEL_253;
  }
  v175 = (unsigned __int8 *)v247;
  if (v247)
  {
LABEL_216:
    v176 = (unsigned __int8 *)&v247;
    do
    {
      v177 = v175;
      v178 = v176;
      v179 = v175[25];
      v180 = *v174;
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[26];
      v180 = v174[1];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[27];
      v180 = v174[2];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[28];
      v180 = v174[3];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[29];
      v180 = v174[4];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[30];
      v180 = v174[5];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[31];
      v180 = v174[6];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[32];
      v180 = v174[7];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[33];
      v180 = v174[8];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[34];
      v180 = v174[9];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[35];
      v180 = v174[10];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[36];
      v180 = v174[11];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[37];
      v180 = v174[12];
      if (v179 != v180)
        goto LABEL_234;
      v179 = v177[38];
      v180 = v174[13];
      if (v179 == v180
        && (v179 = v177[39], v180 = v174[14], v179 == v180)
        && (v179 = v177[40], v180 = v174[15], v179 == v180))
      {
        v181 = 0;
        v182 = v177;
        v176 = v177;
      }
      else
      {
LABEL_234:
        _CF = v179 >= v180;
        v182 = v177 + 8;
        if (_CF)
        {
          v182 = v177;
          v181 = 0;
        }
        else
        {
          v181 = 1;
        }
        if (_CF)
          v176 = v177;
      }
      v175 = *(unsigned __int8 **)v182;
    }
    while (v175);
    if (v176 != (unsigned __int8 *)&v247)
    {
      v184 = v177 + 25;
      v185 = v178 + 25;
      v186 = v181 ? v185 : v184;
      if (((char)sub_22319835C(v174, v186) & 0x80000000) == 0)
      {
        v187 = (float32x4_t *)sub_22381AF00(v233, *(_QWORD *)v174, *((_QWORD *)v174 + 1));
        v188 = v187[1];
        v189 = v187[2];
        v190 = v187[3];
        v191 = v187[4];
        v192 = *(float32x4_t *)a4[6].f32;
        v193 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)a4->f32)), v189, *a4, 1), v190, *(float32x4_t *)a4->f32, 2), v191, *(float32x4_t *)a4->f32, 3);
        v194 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)a4[2].f32)), v189, a4[2], 1), v190, *(float32x4_t *)a4[2].f32, 2), v191, *(float32x4_t *)a4[2].f32, 3);
        v195 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)a4[4].f32)), v189, a4[4], 1), v190, *(float32x4_t *)a4[4].f32, 2), v191, *(float32x4_t *)a4[4].f32, 3);
        DWORD2(v267[0]) = v193.i32[2];
        DWORD1(v267[1]) = v194.i32[2];
        *(_QWORD *)((char *)v267 + 12) = v194.i64[0];
        LODWORD(v268[0]) = v195.i32[2];
        v235 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, v192.f32[0]), v189, *(float32x2_t *)v192.f32, 1), v190, v192, 2), v191, v192, 3);
        *(_QWORD *)&v267[0] = v193.i64[0];
        *((_QWORD *)&v267[1] + 1) = v195.i64[0];
        v241[0] = 0;
        LODWORD(v241[1]) = 0;
        sub_22381A174((float32x2_t *)v267, (float *)v241);
        v196.i32[0] = v235.i32[0];
        v197 = (float32x2_t)vextq_s8(v235, v235, 8uLL).u64[0];
        v198 = fabsf(*(float *)v241);
        v199 = fabsf(*((float *)v241 + 1));
        _NF = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(v196, v196), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235.i8, 1), *(float32x2_t *)v235.i8, 1), v197, v197).f32[0]) < 0.2&& v198 < 0.17453;
        if (_NF && v199 < 0.17453)
          goto LABEL_302;
      }
    }
    while (1)
    {
      v174 += 16;
      if (v174 == v173)
        break;
      v175 = (unsigned __int8 *)v247;
      if (v247)
        goto LABEL_216;
    }
  }
LABEL_253:
  if ((float)(*(float *)(v232 + 108) * (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v250 - (_BYTE *)v249) >> 2))) <= (float)v245)
    goto LABEL_289;
  v203 = *a2;
  v202 = a2[1];
  if (*a2 == v202)
    goto LABEL_289;
  v204 = (unsigned __int8 *)v247;
  if (!v247)
    goto LABEL_289;
LABEL_258:
  v205 = (unsigned __int8 *)&v247;
  do
  {
    v206 = v204;
    v207 = v205;
    v208 = v204[25];
    v209 = *v203;
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[26];
    v209 = v203[1];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[27];
    v209 = v203[2];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[28];
    v209 = v203[3];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[29];
    v209 = v203[4];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[30];
    v209 = v203[5];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[31];
    v209 = v203[6];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[32];
    v209 = v203[7];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[33];
    v209 = v203[8];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[34];
    v209 = v203[9];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[35];
    v209 = v203[10];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[36];
    v209 = v203[11];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[37];
    v209 = v203[12];
    if (v208 != v209)
      goto LABEL_276;
    v208 = v206[38];
    v209 = v203[13];
    if (v208 == v209
      && (v208 = v206[39], v209 = v203[14], v208 == v209)
      && (v208 = v206[40], v209 = v203[15], v208 == v209))
    {
      v210 = 0;
      v211 = v206;
      v205 = v206;
    }
    else
    {
LABEL_276:
      v212 = v208 >= v209;
      v211 = v206 + 8;
      if (v212)
      {
        v211 = v206;
        v210 = 0;
      }
      else
      {
        v210 = 1;
      }
      if (v212)
        v205 = v206;
    }
    v204 = *(unsigned __int8 **)v211;
  }
  while (v204);
  if (v205 == (unsigned __int8 *)&v247)
    goto LABEL_310;
  v213 = v206 + 25;
  v214 = v207 + 25;
  v215 = v210 ? v214 : v213;
  if ((char)sub_22319835C(v203, v215) < 0
    || (v216 = sub_22381AF00(v233, *(_QWORD *)v203, *((_QWORD *)v203 + 1)),
        v217.i64[0] = v216[8],
        v217.i32[2] = *((_DWORD *)v216 + 18),
        v218.i64[0] = v252,
        v218.i32[2] = v253,
        v219 = (int8x16_t)vsubq_f32(v217, v218),
        v220 = (float32x2_t)vextq_s8(v219, v219, 8uLL).u64[0],
        sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v219.i8, *(float32x2_t *)v219.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v219.i8, 1), *(float32x2_t *)v219.i8, 1), v220, v220).f32[0]) > *(float *)(v232 + 84)))
  {
LABEL_310:
    while (1)
    {
      v203 += 16;
      if (v203 == v202)
        break;
      v204 = (unsigned __int8 *)v247;
      if (v247)
        goto LABEL_258;
    }
LABEL_289:
    v120 = 1;
    sub_223198030((uint64_t)&v246, v247);
    v221 = (int32x2_t *)v249;
    if (!v249)
      goto LABEL_291;
    goto LABEL_290;
  }
LABEL_302:
  v120 = 0;
  sub_223198030((uint64_t)&v246, v247);
  v221 = (int32x2_t *)v249;
  if (v249)
  {
LABEL_290:
    v250 = v221;
    operator delete(v221);
  }
LABEL_291:
  v222 = v238;
  if (v238)
  {
    v223 = (unint64_t *)&v238->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v240;
  if (v240)
  {
    v226 = (unint64_t *)&v240->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  return v120;
}

void sub_223819CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  __int16 a72;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;

  sub_2241231D8(v72);
  v75 = (std::__shared_weak_count *)STACK[0x218];
  if (STACK[0x218])
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  sub_2241231D8((uint64_t)&a66);
  if (v73)
  {
    v78 = (unint64_t *)&v73->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  sub_2241231D8((uint64_t)&a72);
  sub_2231874DC((uint64_t)&a37);
  if (a48 < 0)
    operator delete(__p);
  sub_223198030((uint64_t)&a50, (_QWORD *)a51);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  sub_22319EF60((uint64_t)&a23);
  sub_22319EF60((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_223819F08()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223819F1C()
{
  return 1;
}

char *sub_223819F24(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x186186186186186)
    sub_22316E078();
  if (0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0xC30C30C30C30C3)
    v8 = 0x186186186186186;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x186186186186186)
      sub_223174E94();
    v9 = (char *)operator new(168 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_OWORD *)(a2 + 32);
  v11 = &v9[168 * v4];
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v11 + 2) = v10;
  v12 = &v9[168 * v8];
  v13 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 4) = v13;
  *((_DWORD *)v11 + 20) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)v11 = &off_24EC207B8;
  *((_QWORD *)v11 + 1) = &off_24EC20868;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  v14 = *(_OWORD *)(a2 + 104);
  v15 = *(_OWORD *)(a2 + 120);
  v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v16;
  *(_OWORD *)(v11 + 120) = v15;
  v17 = v11 + 168;
  *(_OWORD *)(v11 + 104) = v14;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v17;
    a1[2] = v12;
    if (!v2)
      return v17;
    goto LABEL_21;
  }
  v18 = 0;
  do
  {
    v19 = &v11[v18];
    *((_QWORD *)v19 - 21) = &off_24EC20828;
    *((_QWORD *)v19 - 20) = &off_24EC20868;
    *((_QWORD *)v19 - 19) = *(_QWORD *)&v2[v18 - 152];
    *((_QWORD *)v19 - 18) = *(_QWORD *)&v2[v18 - 144];
    *(_OWORD *)(v19 - 136) = *(_OWORD *)&v2[v18 - 136];
    v20 = *(_OWORD *)&v2[v18 - 120];
    v21 = *(_OWORD *)&v2[v18 - 104];
    *((_DWORD *)v19 - 22) = *(_DWORD *)&v2[v18 - 88];
    *(_OWORD *)(v19 - 104) = v21;
    *(_OWORD *)(v19 - 120) = v20;
    *((_QWORD *)v19 - 10) = *(_QWORD *)&v2[v18 - 80];
    *((_QWORD *)v19 - 21) = &off_24EC207B8;
    *((_QWORD *)v19 - 9) = *(_QWORD *)&v2[v18 - 72];
    v22 = *(_OWORD *)&v2[v18 - 64];
    v23 = *(_OWORD *)&v2[v18 - 48];
    v24 = *(_OWORD *)&v2[v18 - 16];
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v2[v18 - 32];
    *((_OWORD *)v19 - 1) = v24;
    *((_OWORD *)v19 - 4) = v22;
    *((_OWORD *)v19 - 3) = v23;
    v18 -= 168;
  }
  while (&v2[v18] != v3);
  v2 = (char *)*a1;
  v25 = (char *)a1[1];
  *a1 = &v11[v18];
  a1[1] = v17;
  a1[2] = v12;
  if (v25 != v2)
  {
    v26 = v25 - v2 - 168;
    v27 = v25;
    if (v26 < 0xA8)
      goto LABEL_29;
    v28 = v26 / 0xA8 + 1;
    v27 = &v25[-168 * (v28 & 0x3FFFFFFFFFFFFFELL)];
    v29 = v25 - 336;
    v30 = v28 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *((_QWORD *)v29 + 21) = &off_24EC20828;
      *(_QWORD *)v29 = &off_24EC20828;
      v29 -= 336;
      v30 -= 2;
    }
    while (v30);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_29:
      do
      {
        *((_QWORD *)v27 - 21) = &off_24EC20828;
        v27 -= 168;
      }
      while (v27 != v2);
    }
  }
  if (v2)
LABEL_21:
    operator delete(v2);
  return v17;
}

void sub_22381A174(float32x2_t *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v4 = (float)(a1[2].f32[1] - a1[3].f32[1]) * 0.5;
  *a2 = v4;
  v5 = (float)(a1[3].f32[0] - a1[1].f32[0]) * 0.5;
  a2[1] = v5;
  v6 = (float)(a1->f32[1] - a1[1].f32[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f32[0];
  v8 = a1[2].f32[0];
  v9 = a1[4].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
    }
    *a2 = v4 * v16;
    a2[1] = v5 * v16;
    a2[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      a2[2] = v33;
      v34.i32[0] = a1[1].i32[0];
      v34.i32[1] = a1[2].i32[1];
      *(float32x2_t *)a2 = vmul_n_f32(vmul_n_f32(vadd_f32(a1[3], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      a2[1] = v27;
      v28 = 1.0 / v27;
      v29 = a1[3].f32[1] + a1[2].f32[1];
      *a2 = v28 * (float)(v26 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(a1[3].f32[0] + a1[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      a2[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(a1[3].f32[1] + a1[2].f32[1]));
      *a2 = v31 * v23;
      a2[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v4 < 0.0)
        v24 = -v24;
      *a2 = v24;
      v25 = 1.0 / v24;
      a2[1] = v25 * (float)(v22 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v25 * v23;
    }
  }
}

void sub_22381A488()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22381A49C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5AEB8;
  result[1] = v3;
  return result;
}

uint64_t sub_22381A4D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5AEB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_22381A4EC@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v3 = result;
  v5 = *(_QWORD *)(result + 8);
  v8 = *(_QWORD *)(v5 + 8);
  v6 = v5 + 8;
  v7 = v8;
  if (!v8)
    goto LABEL_13;
  v10 = v6;
  do
  {
    result = sub_22319835C((unsigned __int8 *)(v7 + 32), a2);
    if ((result & 0x80u) == 0)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if ((result & 0x80u) == 0)
      v10 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v10 == v6 || (result = sub_22319835C(a2, (unsigned __int8 *)(v10 + 32)), (result & 0x80) != 0))
  {
LABEL_13:
    v10 = v6;
    if (v6 != *(_QWORD *)(v3 + 8) + 8)
      goto LABEL_15;
  }
  else if (v10 != *(_QWORD *)(v3 + 8) + 8)
  {
    goto LABEL_15;
  }
  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDataProvider.cpp", 32, (uint64_t)"iter != kf_collection.keyframes.end()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
  if ((_DWORD)result)
    abort();
LABEL_15:
  v12 = *(_QWORD *)(v10 + 48);
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  *a3 = v14;
  a3[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return result;
}

uint64_t sub_22381A5F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22381A660()
{
  return &unk_24EC5AF28;
}

_QWORD *sub_22381A66C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22381A800(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

void sub_22381A810()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22381A824(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5AF48;
  result[1] = v3;
  return result;
}

uint64_t sub_22381A858(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5AF48;
  a2[1] = v2;
  return result;
}

__n128 sub_22381A874@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __n128 result;
  __int128 v16;

  v5 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v5 + 8);
  v6 = v5 + 8;
  v7 = v8;
  if (!v8)
    goto LABEL_13;
  v10 = v6;
  do
  {
    v11 = sub_22319835C((unsigned __int8 *)(v7 + 32), a2);
    if (v11 >= 0)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11 >= 0)
      v10 = v7;
    v7 = *v12;
  }
  while (*v12);
  if (v10 == v6 || (sub_22319835C(a2, (unsigned __int8 *)(v10 + 32)) & 0x80) != 0)
  {
LABEL_13:
    v10 = v6;
    if (v6 != *(_QWORD *)(a1 + 8) + 8)
      goto LABEL_15;
  }
  else if (v10 != *(_QWORD *)(a1 + 8) + 8)
  {
    goto LABEL_15;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDataProvider.cpp", 38, (uint64_t)"iter != kf_collection.keyframes.end()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_15:
  v13 = *(_QWORD *)(v10 + 48);
  v14 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)a3 = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a3 + 16) = v14;
  result = *(__n128 *)(v13 + 64);
  v16 = *(_OWORD *)(v13 + 80);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v16;
  return result;
}

uint64_t sub_22381A96C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf20KeyframeDataProviderC1ERKNS1_28KeyframeDataCollectionSharedEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22381A9D8()
{
  return &unk_24EC5AFB8;
}

_QWORD *sub_22381A9E4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22381AB78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

void sub_22381AB84(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 __p;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41[3];
  int v42;
  char v43;
  char *v44;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 176))(a4) & 1) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 128))(a4, a2) & 1) == 0)
  {
    v42 = 0;
    sub_223627410(v41, "Could not create folder: ");
    sub_22384465C((uint64_t)&v44, (uint64_t)v41, a2);
    if (v42 == -1)
      sub_22316DD70();
    v44 = &v43;
    ((void (*)(void **__return_ptr, char **, uint64_t *))off_24EC5B118[v42])(v19, &v44, v41);
    if (v42 != -1)
      ((void (*)(char **, uint64_t *))off_24EC5B100[v42])(&v44, v41);
    if (SHIBYTE(v20) < 0)
    {
      sub_223197FA4(__dst, v19[0], (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      v22 = v20;
    }
    v23 = 1;
    LOBYTE(v24) = 0;
    v28 = 0;
    v29 = 1;
    sub_2231A958C(5u, (__int128 *)__dst, (uint64_t)&v30);
    *(_OWORD *)a6 = v30;
    *(_BYTE *)(a6 + 16) = 0;
    *(_BYTE *)(a6 + 112) = 0;
    if (v40)
    {
      *(_BYTE *)(a6 + 40) = 0;
      v17 = v33;
      if (v33)
      {
        *(_OWORD *)(a6 + 16) = __p;
        *(_QWORD *)(a6 + 32) = v32;
        v32 = 0;
        __p = 0uLL;
        *(_BYTE *)(a6 + 40) = 1;
      }
      *(_BYTE *)(a6 + 48) = 0;
      *(_BYTE *)(a6 + 104) = 0;
      if (v39)
      {
        v18 = v36;
        *(_QWORD *)(a6 + 64) = v35;
        *(_OWORD *)(a6 + 48) = v34;
        v34 = 0uLL;
        *(_QWORD *)(a6 + 72) = v18;
        *(_OWORD *)(a6 + 80) = v37;
        *(_QWORD *)(a6 + 96) = v38;
        v35 = 0;
        v37 = 0uLL;
        v38 = 0;
        *(_BYTE *)(a6 + 104) = 1;
      }
      *(_BYTE *)(a6 + 112) = 1;
      *(_BYTE *)(a6 + 120) = 0;
      if (v17 && SHIBYTE(v32) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a6 + 120) = 0;
    }
    if (v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && SHIBYTE(v22) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    return;
  }
  v41[0] = a4;
  LOBYTE(v30) = 0;
  BYTE8(v30) = 0;
  if (a5)
  {
    v12 = a1[14];
    BYTE8(v30) = 1;
    *(_QWORD *)&v30 = v12;
  }
  if (!*(_BYTE *)(a3 + 24))
  {
    v16 = (__int128 *)(a1 + 2);
    while (1)
    {
      v16 = *(__int128 **)v16;
      if (!v16)
        break;
      sub_22381AFEC(a6, v41, v16 + 2, a2, (uint64_t)&v30);
      if (!*(_BYTE *)(a6 + 120))
        return;
    }
    goto LABEL_9;
  }
  v14 = *(uint64_t **)a3;
  v13 = *(uint64_t **)(a3 + 8);
  if (v14 == v13)
  {
LABEL_9:
    *(_BYTE *)(a6 + 120) = 1;
    return;
  }
  while (1)
  {
    v15 = (__int128 *)sub_22381AF00(a1, *v14, v14[1]);
    sub_22381AFEC(a6, v41, v15, a2, (uint64_t)&v30);
    if (!*(_BYTE *)(a6 + 120))
      break;
    v14 += 2;
    if (v14 == v13)
      goto LABEL_9;
  }
}

void sub_22381AE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22381AEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22381AED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22381AEEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

_QWORD *sub_22381AF00(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  std::string *v5;
  std::string::size_type size;
  std::string v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v8[0] = a2;
  v8[1] = a3;
  v3 = sub_223340F28(a1, (uint64_t)v8);
  if (!v3)
  {
    sub_2238227C8("Entry not found ", (unsigned __int8 *)v8);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v7;
    else
      v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    else
      size = v7.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v5, size, (void (*)(void **))sub_22457406C);
    std::string::~string(&v7);
    abort();
  }
  return v3 + 4;
}

void sub_22381AFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22381AFEC(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  int v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48[2];
  void *v49;
  uint64_t v50;
  void *v51[2];
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__fs::filesystem::path __dst;
  char v64;
  char *v65;
  __int128 v66;
  void *__p[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  char v76;
  unint64_t v77;
  char v78;
  _BYTE v79[32];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a3 + 113) & 0x20) != 0)
  {
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  sub_2245664AC((unsigned __int8 *)a3, &v66);
  v10 = operator new(0x28uLL);
  v11 = *(_OWORD *)__p;
  *v10 = v66;
  v10[1] = v11;
  *((_DWORD *)v10 + 8) = v68;
  *((_BYTE *)v10 + 36) = 0;
  *(_QWORD *)v79 = v10;
  *(_OWORD *)&v79[8] = xmmword_2245C4640;
  if (*(char *)(a4 + 23) < 0)
    sub_223197FA4(&__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
  else
    __dst = *(std::__fs::filesystem::path *)a4;
  sub_22319C30C((uint64_t)&__dst, (std::__fs::filesystem::path *)v79);
  if ((v79[23] & 0x80000000) != 0)
    operator delete(*(void **)v79);
  sub_2242B0918(&__dst, 0x30u, *a2, &v60);
  if (v61)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
    v48[1] = (void *)1;
    v13 = operator new();
    *(_QWORD *)v13 = v12;
    *(_QWORD *)(v13 + 8) = v12;
    *(_BYTE *)(v13 + 16) = 0;
    *(_BYTE *)(v13 + 40) = 0;
    *(_BYTE *)(v13 + 48) = 0;
    v14 = (uint64_t *)(v13 + 48);
    *(_QWORD *)(v13 + 80) = 0;
    v15 = (void **)(v13 + 80);
    *(_BYTE *)(v13 + 72) = 0;
    *(_QWORD *)(v13 + 88) = 0;
    *(_QWORD *)(v13 + 96) = 0;
    v48[0] = &off_24EC1FA80;
    v49 = &unk_24EC1FBD0;
    v50 = v13;
    v16 = *a3;
    v17 = a3[1];
    *(_OWORD *)v79 = *a3;
    *(_OWORD *)&v79[16] = v17;
    v18 = a3[2];
    v19 = a3[3];
    v80 = v18;
    v81 = v19;
    v20 = a3[4];
    v82 = v20;
    v21 = *((_QWORD *)a3 + 10);
    v22 = *((_QWORD *)a3 + 11);
    v23 = *((_QWORD *)a3 + 12);
    v24 = *((_BYTE *)a3 + 112);
    v25 = (unint64_t *)a3 + 15;
    if (*(_BYTE *)(a5 + 8))
      v25 = (unint64_t *)a5;
    v26 = *v25;
    v68 = v18;
    v69 = v19;
    v70 = v20;
    v66 = v16;
    *(_OWORD *)__p = v17;
    *(_QWORD *)&v71 = v21;
    BYTE8(v71) = 0;
    v72 = v22;
    v73 = 0;
    v74 = v23;
    v75 = 0;
    v76 = v24;
    v77 = v26;
    v78 = 0;
    sub_22455AA60((uint64_t)&v65, v13 + 8);
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_224559C04((uint64_t **)&v65, v66);
      sub_224559C04((uint64_t **)&v65, SBYTE1(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE2(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE3(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE4(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE5(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE6(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE7(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE8(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE9(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE10(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE11(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE12(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE13(v66));
      sub_224559C04((uint64_t **)&v65, SBYTE14(v66));
      sub_224559C04((uint64_t **)&v65, SHIBYTE(v66));
    }
    else
    {
      for (i = 0; i != 16; ++i)
      {
        v28 = *((char *)&__p[-2] + i);
        if (v28 < 0)
        {
          LOBYTE(v65) = -52;
          BYTE1(v65) = v28;
        }
        else
        {
          LOBYTE(v65) = *((_BYTE *)&__p[-2] + i);
        }
        std::ostream::write();
      }
    }
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)__p);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)__p + 1);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&__p[1]);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&__p[1] + 1);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v68);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v68 + 1);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v68 + 2);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v68 + 3);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v69);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v69 + 1);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v69 + 2);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v69 + 3);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v70);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v70 + 1);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v70 + 2);
      sub_22455B5CC((uint64_t)&v64, (uint64_t **)&v65, (unsigned int *)&v70 + 3);
    }
    else
    {
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(__p[0]);
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(HIDWORD(__p[0]));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(__p[1]);
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(HIDWORD(__p[1]));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(v68);
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(DWORD1(v68));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(DWORD2(v68));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(HIDWORD(v68));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(v69);
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(DWORD1(v69));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(DWORD2(v69));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(HIDWORD(v69));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(v70);
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(DWORD1(v70));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(DWORD2(v70));
      std::ostream::write();
      LOBYTE(v65) = -54;
      *(_DWORD *)((char *)&v65 + 1) = bswap32(HIDWORD(v70));
      std::ostream::write();
    }
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455A7EC((uint64_t **)&v65, 2u);
    }
    else
    {
      LOBYTE(v65) = 2;
      std::ostream::write();
    }
    sub_224555278(v13);
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455AB50((uint64_t **)&v65, v71);
    }
    else
    {
      sub_22455B08C();
    }
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_224559C04((uint64_t **)&v65, SBYTE8(v71));
    }
    else
    {
      if (SBYTE8(v71) < 0)
      {
        LOBYTE(v65) = -52;
        BYTE1(v65) = BYTE8(v71);
      }
      else
      {
        LOBYTE(v65) = BYTE8(v71);
      }
      std::ostream::write();
    }
    v32 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_224554D6C(v14, *(_QWORD *)(v13 + 16) - v32 - 9);
    if (*v14)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v32), *(const void **)(v13 + 56), *v14);
    *(_QWORD *)(v13 + 48) = 0;
    v33 = *(_QWORD *)(v13 + 80);
    v34 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v34;
    if (v33 == v34)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
    }
    else if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455A7EC((uint64_t **)&v65, 2u);
      goto LABEL_69;
    }
    LOBYTE(v65) = 2;
    std::ostream::write();
LABEL_69:
    sub_224555278(v13);
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455AB50((uint64_t **)&v65, v72);
    }
    else
    {
      sub_22455B08C();
    }
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_224559C04((uint64_t **)&v65, v73);
    }
    else
    {
      if (v73 < 0)
      {
        LOBYTE(v65) = -52;
        BYTE1(v65) = v73;
      }
      else
      {
        LOBYTE(v65) = v73;
      }
      std::ostream::write();
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_224554D6C(v14, *(_QWORD *)(v13 + 16) - v35 - 9);
    if (*v14)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v35), *(const void **)(v13 + 56), *v14);
    *(_QWORD *)(v13 + 48) = 0;
    v36 = *(_QWORD *)(v13 + 80);
    v37 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v37;
    if (v36 == v37)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
    }
    else if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455A7EC((uint64_t **)&v65, 2u);
      goto LABEL_86;
    }
    LOBYTE(v65) = 2;
    std::ostream::write();
LABEL_86:
    sub_224555278(v13);
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455AB50((uint64_t **)&v65, v74);
    }
    else
    {
      sub_22455B08C();
    }
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_224559C04((uint64_t **)&v65, v75);
    }
    else
    {
      if (v75 < 0)
      {
        LOBYTE(v65) = -52;
        BYTE1(v65) = v75;
      }
      else
      {
        LOBYTE(v65) = v75;
      }
      std::ostream::write();
    }
    v38 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_224554D6C(v14, *(_QWORD *)(v13 + 16) - v38 - 9);
    if (*v14)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v38), *(const void **)(v13 + 56), *v14);
    *(_QWORD *)(v13 + 48) = 0;
    v39 = *(_QWORD *)(v13 + 80);
    v40 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v40;
    if (v39 == v40)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
      v41 = v76;
    }
    else
    {
      v41 = v76;
      if (*(_BYTE *)(v13 + 40))
      {
        v65 = (char *)(v13 + 16);
        sub_224559C04((uint64_t **)&v65, v76);
        goto LABEL_107;
      }
    }
    if (v41 < 0)
    {
      LOBYTE(v65) = -52;
      BYTE1(v65) = v41;
    }
    else
    {
      LOBYTE(v65) = v41;
    }
    std::ostream::write();
LABEL_107:
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455A7EC((uint64_t **)&v65, 2u);
    }
    else
    {
      LOBYTE(v65) = 2;
      std::ostream::write();
    }
    sub_224555278(v13);
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_22455AB50((uint64_t **)&v65, v77);
    }
    else
    {
      sub_22455B08C();
    }
    if (*(_BYTE *)(v13 + 40))
    {
      v65 = (char *)(v13 + 16);
      sub_224559C04((uint64_t **)&v65, v78);
    }
    else
    {
      if (v78 < 0)
      {
        LOBYTE(v65) = -52;
        BYTE1(v65) = v78;
      }
      else
      {
        LOBYTE(v65) = v78;
      }
      std::ostream::write();
    }
    v42 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_224554D6C(v14, *(_QWORD *)(v13 + 16) - v42 - 9);
    if (*v14)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v42), *(const void **)(v13 + 56), *v14);
    *(_QWORD *)(v13 + 48) = 0;
    v43 = *(_QWORD *)(v13 + 80);
    v44 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v44;
    if (v43 == v44)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
    }
    *(_BYTE *)(a1 + 120) = 1;
    v45 = *v15;
    if (*v15)
    {
      *(_QWORD *)(v13 + 88) = v45;
      operator delete(v45);
    }
    if (*(_BYTE *)(v13 + 72))
      free(*(void **)(v13 + 56));
    if (*(_BYTE *)(v13 + 40))
      free(*(void **)(v13 + 24));
    MEMORY[0x227684CE8](v13, 0x1030C408C1A3048);
    v31 = v62;
    if (v62)
      goto LABEL_131;
LABEL_134:
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_135;
  }
  *(_DWORD *)&v79[24] = 0;
  sub_223844F44(v79, "Could not write file: ");
  sub_22384465C((uint64_t)&v65, (uint64_t)v79, (uint64_t)&__dst);
  if (*(_DWORD *)&v79[24] == -1)
    sub_22316DD70();
  v65 = &v64;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC5B118[*(unsigned int *)&v79[24]])(v48, &v65, v79);
  if (*(_DWORD *)&v79[24] != -1)
    ((void (*)(char **, _BYTE *))off_24EC5B100[*(unsigned int *)&v79[24]])(&v65, v79);
  if (SHIBYTE(v49) < 0)
  {
    sub_223197FA4(v51, v48[0], (unint64_t)v48[1]);
  }
  else
  {
    *(_OWORD *)v51 = *(_OWORD *)v48;
    v52 = v49;
  }
  v53 = 1;
  LOBYTE(v54) = 0;
  v58 = 0;
  v59 = 1;
  sub_2231A958C(5u, (__int128 *)v51, (uint64_t)&v66);
  *(_OWORD *)a1 = v66;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if ((_BYTE)v74)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v29 = BYTE8(v68);
    if (BYTE8(v68))
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 32) = v68;
      __p[1] = 0;
      *(_QWORD *)&v68 = 0;
      __p[0] = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v73)
    {
      v30 = *((_QWORD *)&v70 + 1);
      *(_QWORD *)(a1 + 64) = v70;
      *(_OWORD *)(a1 + 48) = v69;
      v69 = 0uLL;
      *(_QWORD *)(a1 + 72) = v30;
      *(_OWORD *)(a1 + 80) = v71;
      *(_QWORD *)(a1 + 96) = v72;
      *(_QWORD *)&v70 = 0;
      v71 = 0uLL;
      v72 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v29 && SBYTE7(v68) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v59)
  {
    if (v58)
    {
      if (v57 < 0)
        operator delete(v56);
      if (v55 < 0)
        operator delete(v54);
    }
    if (v53 && SHIBYTE(v52) < 0)
      operator delete(v51[0]);
  }
  if (SHIBYTE(v49) < 0)
    operator delete(v48[0]);
  v31 = v62;
  if (!v62)
    goto LABEL_134;
LABEL_131:
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (v47)
    goto LABEL_134;
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_135:
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
}

void sub_22381BDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a14 < 0)
    operator delete(__p);
  sub_2242BB4F8((uint64_t)&a29);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_22381BEC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  unsigned __int8 v23;
  void **v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  void **v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  void **v49;
  void *v50;
  size_t v51;
  char v52;
  __int128 v53;
  unsigned __int8 v54;
  const char *v55;
  size_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  size_t v65;
  void *v66;
  _QWORD *v67;
  size_t v68;
  size_t v69;
  _BYTE *v70;
  int v71;
  void *v72;
  void *v73;
  size_t v74;
  char v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unsigned __int8 v93;
  const char *v94;
  size_t v95;
  _BYTE *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  size_t v104;
  void *v105;
  _QWORD *v106;
  size_t v107;
  size_t v108;
  _BYTE *v109;
  void *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  __int128 v115;
  char *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  const char *v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  const char *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  void *v153;
  void **v154;
  void **v155;
  uint64_t v156;
  __int128 v157;
  void **v158;
  void **v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  _QWORD *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  void *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  const char *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  int v209;
  unint64_t v210;
  void *v211;
  char *v212;
  unsigned __int8 v213;
  const char *v214;
  size_t v215;
  _BYTE *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  NSObject *v223;
  unint64_t v224;
  size_t v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  const char *v236;
  void *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  void *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  char *v275;
  int v276;
  unint64_t v277;
  unint64_t v278;
  const char *v280;
  uint64_t v281;
  const char *v282;
  int v283;
  size_t v284;
  unsigned __int8 v285;
  _QWORD *v286;
  size_t v287;
  __int128 *v288;
  unsigned __int8 v289;
  const char *v290;
  size_t v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  NSObject *v296;
  uint64_t v297;
  uint64_t v298;
  size_t v299;
  void *v300;
  _QWORD *v301;
  size_t v302;
  size_t v303;
  char *p_category;
  void *v305;
  unint64_t v306;
  void **v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char v311;
  _QWORD *v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  const char *v329;
  size_t v330;
  unsigned __int8 v331;
  unsigned __int8 v332;
  const char *v333;
  size_t v334;
  _BYTE *v335;
  uint64_t v336;
  uint64_t v337;
  void **v338;
  NSObject *v339;
  uint64_t v340;
  uint64_t v341;
  size_t v342;
  std::__shared_weak_count_vtbl *v343;
  std::__shared_weak_count *v344;
  size_t v345;
  size_t v346;
  _QWORD *v347;
  void *v348;
  int v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  char *v358;
  void *v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  char *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  const char *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  unsigned __int8 v383;
  int v384;
  unint64_t v385;
  unint64_t v386;
  const char *v387;
  uint64_t v388;
  const char *v389;
  size_t v390;
  unsigned __int8 v391;
  unsigned __int8 v392;
  const char *v393;
  size_t v394;
  _BYTE *v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  NSObject *v399;
  uint64_t v400;
  uint64_t v401;
  size_t v402;
  void *v403;
  _QWORD *v404;
  size_t v405;
  size_t v406;
  char *v407;
  void *v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  char v413;
  _QWORD *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  char *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  char v429;
  _QWORD *v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  void *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  unint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  const char *v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  uint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  const char *v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  char *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  char *v480;
  char *v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  char *v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  uint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  char *v502;
  uint64_t v503;
  const char *v504;
  void *v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  char *v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  const char *v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  uint64_t v532;
  unsigned __int8 v533;
  uint64_t v534;
  unsigned __int8 v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  std::mutex *v539;
  uint64_t v540;
  uint64_t v541;
  char v542;
  mach_timebase_info *v543;
  mach_timebase_info *v544;
  uint64_t v545;
  mach_timebase_info v546;
  mach_timebase_info *v547;
  mach_timebase_info v548;
  mach_timebase_info v549;
  int numer_low;
  __n128 *v553;
  mach_timebase_info *v554;
  size_t v555;
  unsigned __int8 *v556;
  unsigned __int8 *v557;
  int v558;
  unint64_t v559;
  unint64_t v560;
  uint64_t v562;
  size_t v563;
  const char *v564;
  char *v565;
  void *v566;
  unsigned __int8 v567;
  const char *v568;
  size_t v569;
  _BYTE *v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  void *v574;
  uint64_t v575;
  uint64_t v576;
  NSObject *v577;
  uint64_t v578;
  size_t v579;
  std::__shared_weak_count_vtbl *v580;
  std::__shared_weak_count *v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  uint64_t v590;
  void *v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  char *v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  void *v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  char *v615;
  char *v616;
  uint64_t v617;
  __int128 v618;
  uint64_t v619;
  void **v620;
  void **v621;
  unint64_t v622;
  unint64_t v623;
  const char *v624;
  const char *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  char *v633;
  char *v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  char *v644;
  void *v645;
  const char *v646;
  const char *v647;
  uint64_t v648;
  uint64_t v649;
  char *__s;
  char *__sa;
  char *__sb;
  char *__sc;
  char *category;
  __int128 v655;
  void *v656;
  void *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  std::__shared_weak_count *v662;
  int v663[27];
  void *__p;
  char *v665;
  char *v666;
  void *v667[2];
  uint64_t v668;
  char v669;
  void *v670;
  char v671;
  void *v672;
  char v673;
  char v674;
  char v675;
  __int128 v676;
  uint64_t v677;
  char v678;
  void *v679;
  char v680;
  void *v681;
  char v682;
  char v683;
  char v684;
  void *v685;
  char *v686;
  char *v687;
  uint64_t v688;
  unsigned int v689;
  _BYTE v690[24];
  __int128 v691;
  char *v692;
  __int128 v693;
  std::__shared_weak_count *v694;
  char *v695;
  std::__shared_weak_count *v696;
  uint64_t v697;
  uint64_t v698;
  _QWORD *v699;
  __int128 v700;
  int v701;
  char v702;
  char v703;
  char v704;
  unsigned __int8 v705;
  char v706;
  __int128 v707;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v709;
  const char *v710;
  int v711;
  const char *v712;
  uint64_t v713;
  std::__shared_weak_count *v714;
  __int128 v715;
  int64_t v716;
  _BYTE object[40];
  void *v718;
  __int128 v719;
  uint64_t v720;
  unint64_t v721;
  void *v722[2];
  uint64_t v723;
  char v724;
  char v725;
  unint64_t v726;
  int v727;
  uint64_t v728;
  void *__src[2];
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  mach_timebase_info info[2];
  __int128 v738;
  __int128 v739;
  __int128 v740;
  _OWORD v741[2];
  uint64_t v742;
  char v743;
  unint64_t v744;
  char v745;
  unsigned __int8 v746;
  uint64_t v747;
  char v748;
  _BYTE __dst[24];
  unint64_t v750;
  char v751;
  void *v752[2];
  unint64_t v753;
  char v754;
  void *v755[2];
  char v756;
  char v757;
  uint64_t v758;

  v6 = a1;
  v758 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 76) == 5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 95, (uint64_t)"!HasLoaded()", 12, (uint64_t)"Metadata database has already been loaded", 41, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v686 = 0;
  v685 = 0;
  v687 = 0;
  *(_BYTE *)(v6 + 76) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 176))(a3, a2) & 1) == 0)
  {
    sub_223821DD4(&category);
    if (**((int **)category + 7) > 2)
      goto LABEL_248;
    v15 = category[72];
    v16 = sub_22322F254((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (!v15 && v16 == 0)
      goto LABEL_248;
    v640 = v6;
    info[0] = (mach_timebase_info)&category;
    info[1] = (mach_timebase_info)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v738 = std::chrono::system_clock::now();
    DWORD2(v738) = 2;
    *(_QWORD *)&v739 = "unknown file";
    DWORD2(v739) = 104;
    *(_QWORD *)&v741[0] = 0;
    *(_QWORD *)&v740 = "unknown function";
    *((_QWORD *)&v740 + 1) = 0;
    if (*(char *)(a2 + 23) >= 0)
      v19 = (char *)a2;
    else
      v19 = *(char **)a2;
    __sa = v19;
    v20 = **(_QWORD **)info;
    v21 = (const char *)(**(_QWORD **)info + 16);
    v646 = v21;
    if (*(char *)(**(_QWORD **)info + 39) < 0)
    {
      v21 = *(const char **)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      v636 = a4;
      v54 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v54 & 1) != 0)
        goto LABEL_67;
    }
    else
    {
      v22 = *(unsigned __int8 *)(**(_QWORD **)info + 39);
      v636 = a4;
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v23 & 1) != 0)
        goto LABEL_67;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_67:
    if (byte_255788F57 >= 0)
      v55 = (const char *)&xmmword_255788F40;
    else
      v55 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v56 = byte_255788F57;
    else
      v56 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v55, v21);
    v57 = &object[8];
    if (v56 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v56 >= 0x17)
    {
      v58 = v15;
      v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17)
        v59 = v56 | 7;
      v60 = v59 + 1;
      v57 = operator new(v59 + 1);
      *(_QWORD *)&object[24] = v60 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v57;
      *(_QWORD *)&object[16] = v56;
      v15 = v58;
    }
    else
    {
      object[31] = v56;
      if (!v56)
      {
LABEL_81:
        v57[v56] = 0;
        object[32] = 1;
        v61 = &v718;
        if (v22 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v22 >= 0x17)
        {
          v62 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v62 = v22 | 7;
          v63 = v62 + 1;
          v61 = operator new(v62 + 1);
          *((_QWORD *)&v719 + 1) = v63 | 0x8000000000000000;
          v718 = v61;
          *(_QWORD *)&v719 = v22;
        }
        else
        {
          HIBYTE(v719) = v22;
          if (!v22)
          {
LABEL_89:
            *((_BYTE *)v61 + v22) = 0;
            LOBYTE(v720) = 1;
            v64 = *(NSObject **)object;
            if (SHIBYTE(v719) < 0)
              operator delete(v718);
            v6 = v640;
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v17 || !*(_QWORD *)(v17 + 24))
            {
              os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = __sa;
              v72 = (void *)_os_log_send_and_compose_impl();
              a4 = v636;
              if (v72)
                free(v72);
              goto LABEL_238;
            }
            v65 = _os_log_pack_size();
            v66 = operator new(v65, (std::align_val_t)8uLL);
            v67 = (_QWORD *)operator new();
            *v67 = &off_24EC1F7F0;
            v67[1] = 0;
            v67[2] = 0;
            v67[3] = v66;
            __src[0] = v66;
            __src[1] = v66;
            *(_QWORD *)&v731 = 0;
            v730 = (unint64_t)v67;
            v68 = strlen(__sa);
            if (v68 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v69 = v68;
            a4 = v636;
            if (v68 >= 0x17)
            {
              v77 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v68 | 7) != 0x17)
                v77 = v68 | 7;
              v78 = v77 + 1;
              v70 = operator new(v77 + 1);
              *(_QWORD *)&__dst[8] = v69;
              *(_QWORD *)&__dst[16] = v78 | 0x8000000000000000;
              *(_QWORD *)__dst = v70;
              v6 = v640;
            }
            else
            {
              __dst[23] = v68;
              v70 = __dst;
              if (!v68)
              {
                v71 = v15;
                goto LABEL_123;
              }
            }
            v71 = v15;
            memcpy(v70, __sa, v69);
LABEL_123:
            v70[v69] = 0;
            v79 = *(_QWORD *)__dst;
            *(_QWORD *)&v707 = *(_QWORD *)&__dst[8];
            *(_QWORD *)((char *)&v707 + 7) = *(_QWORD *)&__dst[15];
            v80 = __dst[23];
            v81 = operator new(0x38uLL);
            v81[1] = 0;
            v81[2] = 0;
            v81[3] = off_24EC1FA48;
            *v81 = &off_24EC1F9F8;
            v82 = v707;
            v81[4] = v79;
            v81[5] = v82;
            *(_QWORD *)((char *)v81 + 47) = *(_QWORD *)((char *)&v707 + 7);
            *((_BYTE *)v81 + 55) = v80;
            *(_QWORD *)&v707 = 0;
            *(_QWORD *)((char *)&v707 + 7) = 0;
            v83 = (std::__shared_weak_count *)v731;
            *((_QWORD *)&v730 + 1) = v81 + 3;
            *(_QWORD *)&v731 = v81;
            v15 = v71;
            if (v83)
            {
              p_shared_owners = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(p_shared_owners);
              while (__stlxr(v85 - 1, p_shared_owners));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            *(_OWORD *)object = *(_OWORD *)__src;
            v86 = (void *)*((_QWORD *)&v730 + 1);
            *(_QWORD *)&object[16] = v730;
            if ((_QWORD)v730)
            {
              v87 = (unint64_t *)(v730 + 8);
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
            }
            v89 = (std::__shared_weak_count *)v731;
            *(_QWORD *)&object[24] = v86;
            *(_QWORD *)&object[32] = v731;
            if ((_QWORD)v731)
            {
              v90 = (unint64_t *)(v731 + 8);
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
              v718 = v86;
              do
                v92 = __ldaxr(v90);
              while (__stlxr(v92 - 1, v90));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            else
            {
              v718 = v86;
            }
            v118 = (std::__shared_weak_count *)v730;
            if ((_QWORD)v730)
            {
              v119 = (unint64_t *)(v730 + 8);
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            v121 = *(_QWORD *)object;
            if (*((char *)v718 + 31) >= 0)
              v122 = (char *)v718 + 8;
            else
              v122 = (char *)*((_QWORD *)v718 + 1);
            v123 = _os_log_pack_fill();
            *(_DWORD *)v123 = 136315138;
            *(_QWORD *)(v123 + 4) = v122;
            v124 = (char *)operator new();
            v125 = *(unsigned __int8 *)(v20 + 39);
            v126 = v646;
            if ((v125 & 0x80u) != 0)
            {
              v126 = *(const char **)(v20 + 16);
              v125 = *(_QWORD *)(v20 + 24);
            }
            *(_QWORD *)v124 = v121;
            *(_OWORD *)(v124 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v124 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v124 + 5) = v126;
            *((_QWORD *)v124 + 6) = v125;
            v124[56] = 2;
            *(_QWORD *)__dst = 0;
            __src[0] = v124;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), __src);
            v127 = __src[0];
            __src[0] = 0;
            if (v127)
            {
              v128 = (std::__shared_weak_count *)*((_QWORD *)v127 + 4);
              if (v128)
              {
                v129 = (unint64_t *)&v128->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              v131 = (std::__shared_weak_count *)*((_QWORD *)v127 + 2);
              if (v131)
              {
                v132 = (unint64_t *)&v131->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
              MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
              v134 = *(_QWORD *)__dst;
              *(_QWORD *)__dst = 0;
              if (v134)
              {
                v135 = *(std::__shared_weak_count **)(v134 + 32);
                if (v135)
                {
                  v136 = (unint64_t *)&v135->__shared_owners_;
                  do
                    v137 = __ldaxr(v136);
                  while (__stlxr(v137 - 1, v136));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                }
                v138 = *(std::__shared_weak_count **)(v134 + 16);
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
              }
            }
            v141 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v142 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 - 1, v142));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                std::__shared_weak_count::__release_weak(v141);
              }
            }
            v144 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v145 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
LABEL_238:
            if (v15)
            {
              if (*(char *)(a2 + 23) >= 0)
                v147 = (const char *)a2;
              else
                v147 = *(const char **)a2;
              sub_22322C138((uint64_t)info, "Folder does not exist: %s", v147);
              sub_223182C08((uint64_t)info);
            }
            sub_223182C08((uint64_t)info);
            v148 = *(std::__shared_weak_count **)&v741[0];
            if (*(_QWORD *)&v741[0])
            {
              v149 = (unint64_t *)(*(_QWORD *)&v741[0] + 8);
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
LABEL_248:
            *(_BYTE *)(v6 + 76) = 1;
            DWORD2(v738) = 0;
            sub_223845034(info, "Folder does not exist: ");
            sub_22384465C((uint64_t)__dst, (uint64_t)info, a2);
            if (DWORD2(v738) == -1)
              sub_22316DD70();
            *(_QWORD *)__dst = &v707;
            ((void (*)(void **__return_ptr, _BYTE *, mach_timebase_info *))off_24EC5B118[DWORD2(v738)])(__src, __dst, info);
            if (DWORD2(v738) != -1)
              ((void (*)(_BYTE *, mach_timebase_info *))off_24EC5B100[DWORD2(v738)])(__dst, info);
            if (SBYTE7(v730) < 0)
            {
              sub_223197FA4(&v676, __src[0], (unint64_t)__src[1]);
            }
            else
            {
              v676 = *(_OWORD *)__src;
              v677 = v730;
            }
            v678 = 1;
            LOBYTE(v679) = 0;
            v683 = 0;
            v684 = 1;
            sub_2231A958C(5u, &v676, (uint64_t)object);
            *(_OWORD *)a4 = *(_OWORD *)object;
            *(_BYTE *)(a4 + 16) = 0;
            *(_BYTE *)(a4 + 112) = 0;
            if ((_BYTE)v726)
            {
              *(_BYTE *)(a4 + 40) = 0;
              v151 = v718;
              if ((_BYTE)v718)
              {
                *(_OWORD *)(a4 + 16) = *(_OWORD *)&object[16];
                *(_QWORD *)(a4 + 32) = *(_QWORD *)&object[32];
                memset(&object[16], 0, 24);
                *(_BYTE *)(a4 + 40) = 1;
              }
              *(_BYTE *)(a4 + 48) = 0;
              *(_BYTE *)(a4 + 104) = 0;
              if (v724)
              {
                v152 = v721;
                *(_QWORD *)(a4 + 64) = v720;
                *(_OWORD *)(a4 + 48) = v719;
                v719 = 0uLL;
                *(_QWORD *)(a4 + 72) = v152;
                *(_OWORD *)(a4 + 80) = *(_OWORD *)v722;
                *(_QWORD *)(a4 + 96) = v723;
                v720 = 0;
                v722[0] = 0;
                v722[1] = 0;
                v723 = 0;
                *(_BYTE *)(a4 + 104) = 1;
              }
              *(_BYTE *)(a4 + 112) = 1;
              *(_BYTE *)(a4 + 120) = 0;
              if (v151 && (object[39] & 0x80000000) != 0)
                operator delete(*(void **)&object[16]);
              if (!v684)
                goto LABEL_389;
            }
            else
            {
              *(_BYTE *)(a4 + 120) = 0;
              if (!v684)
                goto LABEL_389;
            }
            if (!v683)
              goto LABEL_268;
            if (v682 < 0)
            {
              operator delete(v681);
              if ((v680 & 0x80000000) == 0)
              {
LABEL_268:
                if (!v678)
                  goto LABEL_389;
                goto LABEL_269;
              }
            }
            else if ((v680 & 0x80000000) == 0)
            {
              goto LABEL_268;
            }
            operator delete(v679);
            if (!v678)
              goto LABEL_389;
LABEL_269:
            if (SHIBYTE(v677) < 0)
            {
              v153 = (void *)v676;
LABEL_388:
              operator delete(v153);
            }
LABEL_389:
            if ((SBYTE7(v730) & 0x80000000) == 0)
              goto LABEL_1055;
            v211 = __src[0];
            goto LABEL_1054;
          }
        }
        memmove(v61, v21, v22);
        goto LABEL_89;
      }
    }
    memmove(v57, v55, v56);
    goto LABEL_81;
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 272))(object, a3, a2);
  if ((*(_WORD *)&object[4] & 0x100) == 0)
  {
    sub_223821DD4(&category);
    if (**((int **)category + 7) > 2
      || (v8 = category[72],
          v9 = sub_22322F254((uint64_t)category, "OSLogSurrogateAppender", 1, 0),
          v10 = v9,
          !v8)
      && !v9)
    {
LABEL_364:
      *(_BYTE *)(v6 + 76) = 2;
      DWORD2(v738) = 0;
      sub_2232C8A68(info, "Unable to read metadata folder: ");
      sub_22384465C((uint64_t)__dst, (uint64_t)info, a2);
      if (DWORD2(v738) == -1)
        sub_22316DD70();
      *(_QWORD *)__dst = &v707;
      ((void (*)(void **__return_ptr, _BYTE *, mach_timebase_info *))off_24EC5B118[DWORD2(v738)])(__src, __dst, info);
      if (DWORD2(v738) != -1)
        ((void (*)(_BYTE *, mach_timebase_info *))off_24EC5B100[DWORD2(v738)])(__dst, info);
      if (SBYTE7(v730) < 0)
      {
        sub_223197FA4(v667, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        *(_OWORD *)v667 = *(_OWORD *)__src;
        v668 = v730;
      }
      v669 = 1;
      LOBYTE(v670) = 0;
      v674 = 0;
      v675 = 1;
      sub_2231A958C(5u, (__int128 *)v667, (uint64_t)object);
      *(_OWORD *)a4 = *(_OWORD *)object;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if ((_BYTE)v726)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v209 = v718;
        if ((_BYTE)v718)
        {
          *(_OWORD *)(a4 + 16) = *(_OWORD *)&object[16];
          *(_QWORD *)(a4 + 32) = *(_QWORD *)&object[32];
          memset(&object[16], 0, 24);
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v724)
        {
          v210 = v721;
          *(_QWORD *)(a4 + 64) = v720;
          *(_OWORD *)(a4 + 48) = v719;
          v719 = 0uLL;
          *(_QWORD *)(a4 + 72) = v210;
          *(_OWORD *)(a4 + 80) = *(_OWORD *)v722;
          *(_QWORD *)(a4 + 96) = v723;
          v720 = 0;
          v722[0] = 0;
          v722[1] = 0;
          v723 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v209 && (object[39] & 0x80000000) != 0)
          operator delete(*(void **)&object[16]);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v675)
        goto LABEL_389;
      if (v674)
      {
        if (v673 < 0)
          operator delete(v672);
        if (v671 < 0)
          operator delete(v670);
      }
      if (!v669 || (SHIBYTE(v668) & 0x80000000) == 0)
        goto LABEL_389;
      v153 = v667[0];
      goto LABEL_388;
    }
    v639 = v6;
    info[0] = (mach_timebase_info)&category;
    info[1] = (mach_timebase_info)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v738 = std::chrono::system_clock::now();
    DWORD2(v738) = 2;
    *(_QWORD *)&v739 = "unknown file";
    DWORD2(v739) = 112;
    *(_QWORD *)&v741[0] = 0;
    *(_QWORD *)&v740 = "unknown function";
    *((_QWORD *)&v740 + 1) = 0;
    if (*(char *)(a2 + 23) >= 0)
      v11 = (const char *)a2;
    else
      v11 = *(const char **)a2;
    v12 = **(_QWORD **)info;
    v13 = (const char *)(**(_QWORD **)info + 16);
    __s = (char *)v13;
    if (*(char *)(**(_QWORD **)info + 39) < 0)
    {
      v13 = *(const char **)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
    }
    else
    {
      v14 = *(unsigned __int8 *)(**(_QWORD **)info + 39);
    }
    v648 = **(_QWORD **)info;
    v638 = a4;
    v93 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v94 = (const char *)&xmmword_255788F40;
    else
      v94 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v95 = byte_255788F57;
    else
      v95 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v94, v13);
    v96 = &object[8];
    if (v95 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v95 >= 0x17)
    {
      v97 = v8;
      v98 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v95 | 7) != 0x17)
        v98 = v95 | 7;
      v99 = v98 + 1;
      v96 = operator new(v98 + 1);
      *(_QWORD *)&object[24] = v99 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v96;
      *(_QWORD *)&object[16] = v95;
      v8 = v97;
    }
    else
    {
      object[31] = v95;
      if (!v95)
      {
LABEL_154:
        v96[v95] = 0;
        object[32] = 1;
        v100 = &v718;
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v14 >= 0x17)
        {
          v101 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v101 = v14 | 7;
          v102 = v101 + 1;
          v100 = operator new(v101 + 1);
          *((_QWORD *)&v719 + 1) = v102 | 0x8000000000000000;
          v718 = v100;
          *(_QWORD *)&v719 = v14;
        }
        else
        {
          HIBYTE(v719) = v14;
          if (!v14)
          {
LABEL_162:
            *((_BYTE *)v100 + v14) = 0;
            LOBYTE(v720) = 1;
            v103 = *(NSObject **)object;
            if (SHIBYTE(v719) < 0)
              operator delete(v718);
            v6 = v639;
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v10 || !*(_QWORD *)(v10 + 24))
            {
              os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v11;
              v110 = (void *)_os_log_send_and_compose_impl();
              a4 = v638;
              if (v110)
                free(v110);
              goto LABEL_354;
            }
            v104 = _os_log_pack_size();
            v105 = operator new(v104, (std::align_val_t)8uLL);
            v106 = (_QWORD *)operator new();
            *v106 = &off_24EC1F7F0;
            v106[1] = 0;
            v106[2] = 0;
            v106[3] = v105;
            __src[0] = v105;
            __src[1] = v105;
            *(_QWORD *)&v731 = 0;
            v730 = (unint64_t)v106;
            v107 = strlen(v11);
            if (v107 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v108 = v107;
            a4 = v638;
            if (v107 >= 0x17)
            {
              v160 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v107 | 7) != 0x17)
                v160 = v107 | 7;
              v161 = v160 + 1;
              v109 = operator new(v160 + 1);
              *(_QWORD *)&__dst[8] = v108;
              *(_QWORD *)&__dst[16] = v161 | 0x8000000000000000;
              *(_QWORD *)__dst = v109;
              v6 = v639;
            }
            else
            {
              __dst[23] = v107;
              v109 = __dst;
              if (!v107)
              {
LABEL_290:
                v109[v108] = 0;
                v162 = *(_QWORD *)__dst;
                *(_QWORD *)&v707 = *(_QWORD *)&__dst[8];
                *(_QWORD *)((char *)&v707 + 7) = *(_QWORD *)&__dst[15];
                v163 = __dst[23];
                v164 = operator new(0x38uLL);
                v164[1] = 0;
                v164[2] = 0;
                v164[3] = off_24EC1FA48;
                *v164 = &off_24EC1F9F8;
                v165 = v707;
                v164[4] = v162;
                v164[5] = v165;
                *(_QWORD *)((char *)v164 + 47) = *(_QWORD *)((char *)&v707 + 7);
                *((_BYTE *)v164 + 55) = v163;
                *(_QWORD *)&v707 = 0;
                *(_QWORD *)((char *)&v707 + 7) = 0;
                v166 = (std::__shared_weak_count *)v731;
                *((_QWORD *)&v730 + 1) = v164 + 3;
                *(_QWORD *)&v731 = v164;
                if (v166)
                {
                  v167 = (unint64_t *)&v166->__shared_owners_;
                  do
                    v168 = __ldaxr(v167);
                  while (__stlxr(v168 - 1, v167));
                  if (!v168)
                  {
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)__src;
                v169 = (void *)*((_QWORD *)&v730 + 1);
                *(_QWORD *)&object[16] = v730;
                if ((_QWORD)v730)
                {
                  v170 = (unint64_t *)(v730 + 8);
                  do
                    v171 = __ldxr(v170);
                  while (__stxr(v171 + 1, v170));
                }
                v172 = (std::__shared_weak_count *)v731;
                *(_QWORD *)&object[24] = v169;
                *(_QWORD *)&object[32] = v731;
                if ((_QWORD)v731)
                {
                  v173 = (unint64_t *)(v731 + 8);
                  do
                    v174 = __ldxr(v173);
                  while (__stxr(v174 + 1, v173));
                  v718 = v169;
                  do
                    v175 = __ldaxr(v173);
                  while (__stlxr(v175 - 1, v173));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
                else
                {
                  v718 = v169;
                }
                v176 = (std::__shared_weak_count *)v730;
                if ((_QWORD)v730)
                {
                  v177 = (unint64_t *)(v730 + 8);
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                  }
                }
                v179 = *(_QWORD *)object;
                if (*((char *)v718 + 31) >= 0)
                  v180 = (char *)v718 + 8;
                else
                  v180 = (char *)*((_QWORD *)v718 + 1);
                v181 = _os_log_pack_fill();
                *(_DWORD *)v181 = 136315138;
                *(_QWORD *)(v181 + 4) = v180;
                v182 = (char *)operator new();
                v183 = *(unsigned __int8 *)(v648 + 39);
                v184 = __s;
                if ((v183 & 0x80u) != 0)
                {
                  v184 = *(char **)(v648 + 16);
                  v183 = *(_QWORD *)(v648 + 24);
                }
                *(_QWORD *)v182 = v179;
                *(_OWORD *)(v182 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v182 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *((_QWORD *)v182 + 5) = v184;
                *((_QWORD *)v182 + 6) = v183;
                v182[56] = 2;
                *(_QWORD *)__dst = 0;
                __src[0] = v182;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), __src);
                v185 = __src[0];
                __src[0] = 0;
                if (v185)
                {
                  v186 = (std::__shared_weak_count *)*((_QWORD *)v185 + 4);
                  if (v186)
                  {
                    v187 = (unint64_t *)&v186->__shared_owners_;
                    do
                      v188 = __ldaxr(v187);
                    while (__stlxr(v188 - 1, v187));
                    if (!v188)
                    {
                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                      std::__shared_weak_count::__release_weak(v186);
                    }
                  }
                  v189 = (std::__shared_weak_count *)*((_QWORD *)v185 + 2);
                  if (v189)
                  {
                    v190 = (unint64_t *)&v189->__shared_owners_;
                    do
                      v191 = __ldaxr(v190);
                    while (__stlxr(v191 - 1, v190));
                    if (!v191)
                    {
                      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                      std::__shared_weak_count::__release_weak(v189);
                    }
                  }
                  MEMORY[0x227684CE8](v185, 0x10F0C40B62ED6C6);
                  v192 = *(_QWORD *)__dst;
                  *(_QWORD *)__dst = 0;
                  if (v192)
                  {
                    v193 = *(std::__shared_weak_count **)(v192 + 32);
                    if (v193)
                    {
                      v194 = (unint64_t *)&v193->__shared_owners_;
                      do
                        v195 = __ldaxr(v194);
                      while (__stlxr(v195 - 1, v194));
                      if (!v195)
                      {
                        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                        std::__shared_weak_count::__release_weak(v193);
                      }
                    }
                    v196 = *(std::__shared_weak_count **)(v192 + 16);
                    if (v196)
                    {
                      v197 = (unint64_t *)&v196->__shared_owners_;
                      do
                        v198 = __ldaxr(v197);
                      while (__stlxr(v198 - 1, v197));
                      if (!v198)
                      {
                        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                        std::__shared_weak_count::__release_weak(v196);
                      }
                    }
                    MEMORY[0x227684CE8](v192, 0x10F0C40B62ED6C6);
                  }
                }
                v199 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v200 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v201 = __ldaxr(v200);
                  while (__stlxr(v201 - 1, v200));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
                v202 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v203 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v204 = __ldaxr(v203);
                  while (__stlxr(v204 - 1, v203));
                  if (!v204)
                  {
                    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                    std::__shared_weak_count::__release_weak(v202);
                  }
                }
LABEL_354:
                if (v8)
                {
                  if (*(char *)(a2 + 23) >= 0)
                    v205 = (const char *)a2;
                  else
                    v205 = *(const char **)a2;
                  sub_22322C138((uint64_t)info, "Unable to read metadata folder: %s", v205);
                  sub_223182C08((uint64_t)info);
                }
                sub_223182C08((uint64_t)info);
                v206 = *(std::__shared_weak_count **)&v741[0];
                if (*(_QWORD *)&v741[0])
                {
                  v207 = (unint64_t *)(*(_QWORD *)&v741[0] + 8);
                  do
                    v208 = __ldaxr(v207);
                  while (__stlxr(v208 - 1, v207));
                  if (!v208)
                  {
                    ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                    std::__shared_weak_count::__release_weak(v206);
                  }
                }
                goto LABEL_364;
              }
            }
            memcpy(v109, v11, v108);
            goto LABEL_290;
          }
        }
        memmove(v100, v13, v14);
        goto LABEL_162;
      }
    }
    memmove(v96, v94, v95);
    goto LABEL_154;
  }
  sub_2242B1564(a2, 1u, "*", 1uLL, a3, (int64x2_t *)object);
  v637 = a4;
  v24 = *(void ***)object;
  v25 = *(void ***)&object[8];
  __p = *(void **)object;
  v665 = *(char **)&object[8];
  v26 = *(_QWORD *)&object[16];
  v666 = *(char **)&object[16];
  v27 = (void **)(v6 + 80);
  v643 = a3;
  if (!*(_BYTE *)(v6 + 104))
  {
    *v27 = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)object = v6 + 80;
    object[8] = 0;
    if (v25 != v24)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v25 - v24) > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      v33 = (char *)operator new((char *)v25 - (char *)v24);
      v34 = 0;
      *(_QWORD *)(v6 + 80) = v33;
      *(_QWORD *)(v6 + 88) = v33;
      *(_QWORD *)(v6 + 96) = &v33[8 * (v25 - v24)];
      do
      {
        v36 = &v33[v34 * 8];
        v37 = &v24[v34];
        if (SHIBYTE(v24[v34 + 2]) < 0)
        {
          sub_223197FA4(v36, *v37, (unint64_t)v37[1]);
        }
        else
        {
          v35 = *(_OWORD *)v37;
          *((_QWORD *)v36 + 2) = v37[2];
          *(_OWORD *)v36 = v35;
        }
        v34 += 3;
      }
      while (&v24[v34] != v25);
      *(_QWORD *)(v6 + 88) = &v33[v34 * 8];
    }
    *(_BYTE *)(v6 + 104) = 1;
    sub_223821DD4(&v707);
    if (**(int **)(v707 + 56) > 2
      || ((v40 = *(unsigned __int8 *)(v707 + 72),
           v41 = sub_22322F254(v707, "OSLogSurrogateAppender", 1, 0),
           v42 = v41,
           !v40)
        ? (v43 = v41 == 0)
        : (v43 = 0),
          v43))
    {
LABEL_474:
      v38 = v665;
      v663[0] = 0;
      v39 = (char *)__p;
      if (__p == v665)
        goto LABEL_913;
      goto LABEL_475;
    }
    info[0] = (mach_timebase_info)&v707;
    info[1] = (mach_timebase_info)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v738 = std::chrono::system_clock::now();
    DWORD2(v738) = 2;
    *(_QWORD *)&v739 = "unknown file";
    DWORD2(v739) = 130;
    *(_QWORD *)&v741[0] = 0;
    *(_QWORD *)&v740 = "unknown function";
    *((_QWORD *)&v740 + 1) = 0;
    v44 = **(_QWORD **)info;
    v45 = (const char *)(**(_QWORD **)info + 16);
    v647 = v45;
    if (*(char *)(**(_QWORD **)info + 39) < 0)
    {
      v45 = *(const char **)(v44 + 16);
      v46 = *(_QWORD *)(v44 + 24);
    }
    else
    {
      v46 = *(unsigned __int8 *)(**(_QWORD **)info + 39);
    }
    v641 = v6;
    v212 = v665;
    __sb = (char *)__p;
    v213 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v213 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v214 = (const char *)&xmmword_255788F40;
    else
      v214 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v215 = byte_255788F57;
    else
      v215 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v214, v45);
    v216 = &object[8];
    if (v215 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v215 >= 0x17)
    {
      v217 = v40;
      v218 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v215 | 7) != 0x17)
        v218 = v215 | 7;
      v219 = v218 + 1;
      v216 = operator new(v218 + 1);
      *(_QWORD *)&object[24] = v219 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v216;
      *(_QWORD *)&object[16] = v215;
      v40 = v217;
      v212 = v665;
    }
    else
    {
      object[31] = v215;
      if (!v215)
      {
LABEL_407:
        v216[v215] = 0;
        object[32] = 1;
        v220 = &v718;
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v6 = v641;
        if (v46 >= 0x17)
        {
          v221 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v221 = v46 | 7;
          v222 = v221 + 1;
          v220 = operator new(v221 + 1);
          *((_QWORD *)&v719 + 1) = v222 | 0x8000000000000000;
          v718 = v220;
          *(_QWORD *)&v719 = v46;
        }
        else
        {
          HIBYTE(v719) = v46;
          if (!v46)
            goto LABEL_415;
        }
        memmove(v220, v45, v46);
LABEL_415:
        *((_BYTE *)v220 + v46) = 0;
        LOBYTE(v720) = 1;
        v223 = *(NSObject **)object;
        if (SHIBYTE(v719) < 0)
          operator delete(v718);
        a3 = v643;
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v224 = 0xAAAAAAAAAAAAAAABLL * ((v212 - __sb) >> 3);
        if (v42 && *(_QWORD *)(v42 + 24))
        {
          v225 = _os_log_pack_size();
          v226 = (std::__shared_weak_count_vtbl *)operator new(v225, (std::align_val_t)8uLL);
          v227 = (std::__shared_weak_count *)operator new();
          v228 = v227;
          v227->__shared_owners_ = 0;
          v229 = (unint64_t *)&v227->__shared_owners_;
          v227->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v227->__shared_weak_owners_ = 0;
          v227[1].__vftable = v226;
          *(_QWORD *)object = v226;
          *(_QWORD *)&object[8] = v226;
          *(_QWORD *)&object[16] = v227;
          do
            v230 = __ldxr(v229);
          while (__stxr(v230 + 1, v229));
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)&object[24] = 0;
          v718 = 0;
          do
            v231 = __ldaxr(v229);
          while (__stlxr(v231 - 1, v229));
          if (!v231)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v228);
          }
          v232 = *(_QWORD *)object;
          v233 = _os_log_pack_fill();
          *(_DWORD *)v233 = 134217984;
          *(_QWORD *)(v233 + 4) = v224;
          v234 = (char *)operator new();
          v235 = *(unsigned __int8 *)(v44 + 39);
          v236 = v647;
          if ((v235 & 0x80u) != 0)
          {
            v236 = *(const char **)(v44 + 16);
            v235 = *(_QWORD *)(v44 + 24);
          }
          *(_QWORD *)v234 = v232;
          *(_OWORD *)(v234 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v234 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v234 + 5) = v236;
          *((_QWORD *)v234 + 6) = v235;
          v234[56] = 2;
          *(_QWORD *)__dst = 0;
          __src[0] = v234;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v42 + 24) + 40))(*(_QWORD *)(v42 + 24), __src);
          v237 = __src[0];
          __src[0] = 0;
          v6 = v641;
          a3 = v643;
          if (v237)
          {
            v238 = (std::__shared_weak_count *)*((_QWORD *)v237 + 4);
            if (v238)
            {
              v239 = (unint64_t *)&v238->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                std::__shared_weak_count::__release_weak(v238);
              }
            }
            v241 = (std::__shared_weak_count *)*((_QWORD *)v237 + 2);
            if (v241)
            {
              v242 = (unint64_t *)&v241->__shared_owners_;
              do
                v243 = __ldaxr(v242);
              while (__stlxr(v243 - 1, v242));
              if (!v243)
              {
                ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                std::__shared_weak_count::__release_weak(v241);
              }
            }
            MEMORY[0x227684CE8](v237, 0x10F0C40B62ED6C6);
            v244 = *(_QWORD *)__dst;
            *(_QWORD *)__dst = 0;
            if (v244)
            {
              v245 = *(std::__shared_weak_count **)(v244 + 32);
              if (v245)
              {
                v246 = (unint64_t *)&v245->__shared_owners_;
                do
                  v247 = __ldaxr(v246);
                while (__stlxr(v247 - 1, v246));
                if (!v247)
                {
                  ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                  std::__shared_weak_count::__release_weak(v245);
                }
              }
              v248 = *(std::__shared_weak_count **)(v244 + 16);
              if (v248)
              {
                v249 = (unint64_t *)&v248->__shared_owners_;
                do
                  v250 = __ldaxr(v249);
                while (__stlxr(v250 - 1, v249));
                if (!v250)
                {
                  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                  std::__shared_weak_count::__release_weak(v248);
                }
              }
              MEMORY[0x227684CE8](v244, 0x10F0C40B62ED6C6);
            }
          }
          v251 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v252 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v253 = __ldaxr(v252);
            while (__stlxr(v253 - 1, v252));
            if (!v253)
            {
              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
              std::__shared_weak_count::__release_weak(v251);
            }
          }
          v254 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v255 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v256 = __ldaxr(v255);
            while (__stlxr(v256 - 1, v255));
            if (!v256)
            {
              ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
              std::__shared_weak_count::__release_weak(v254);
            }
          }
        }
        else
        {
          os_log_type_enabled(v223, OS_LOG_TYPE_DEBUG);
          *(_DWORD *)object = 134217984;
          *(_QWORD *)&object[4] = v224;
          v257 = (void *)_os_log_send_and_compose_impl();
          if (v257)
            free(v257);
        }
        if (v40)
        {
          sub_22322C138((uint64_t)info, "First load attempt; number of files in path=%lu",
            0xAAAAAAAAAAAAAAABLL * ((v665 - (_BYTE *)__p) >> 3));
          sub_223182C08((uint64_t)info);
        }
        sub_223182C08((uint64_t)info);
        v258 = *(std::__shared_weak_count **)&v741[0];
        if (*(_QWORD *)&v741[0])
        {
          v259 = (unint64_t *)(*(_QWORD *)&v741[0] + 8);
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        goto LABEL_474;
      }
    }
    memmove(v216, v214, v215);
    goto LABEL_407;
  }
  if (&__p == v27)
  {
    v38 = *(char **)&object[8];
    v663[0] = 0;
    v39 = (char *)__p;
    if (__p == *(void **)&object[8])
      goto LABEL_913;
    goto LABEL_475;
  }
  v29 = *(void ***)(v6 + 80);
  v28 = *(void ***)(v6 + 88);
  v30 = v6;
  v31 = 0xAAAAAAAAAAAAAAABLL * (v28 - v29);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 3) >= v31)
  {
    v47 = *(_QWORD *)&object[8] - *(_QWORD *)object;
    v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 3);
    if (v48 >= v31)
    {
      v6 = v30;
      if (v29 == v28)
      {
        v38 = *(char **)object;
        a3 = v643;
      }
      else
      {
        v38 = *(char **)object;
        a3 = v643;
        do
        {
          if (v29 != v24)
          {
            v75 = *((_BYTE *)v29 + 23);
            if (*((char *)v24 + 23) < 0)
            {
              if (v75 >= 0)
                v73 = v29;
              else
                v73 = *v29;
              if (v75 >= 0)
                v74 = *((unsigned __int8 *)v29 + 23);
              else
                v74 = (size_t)v29[1];
              sub_22319C4B8(v24, v73, v74);
            }
            else if ((*((_BYTE *)v29 + 23) & 0x80) != 0)
            {
              sub_22319C3F4(v24, *v29, (size_t)v29[1]);
            }
            else
            {
              v76 = *(_OWORD *)v29;
              v24[2] = v29[2];
              *(_OWORD *)v24 = v76;
            }
          }
          v29 += 3;
          v24 += 3;
          v38 += 24;
        }
        while (v29 != v28);
        v25 = (void **)v665;
      }
      while (v25 != (void **)v38)
      {
        if (*((char *)v25 - 1) < 0)
          operator delete(*(v25 - 3));
        v25 -= 3;
      }
    }
    else
    {
      v6 = v30;
      if (*(_QWORD *)&object[8] != *(_QWORD *)object)
      {
        v49 = v29;
        do
        {
          if (v49 != v24)
          {
            v52 = *((_BYTE *)v49 + 23);
            if (*((char *)v24 + 23) < 0)
            {
              if (v52 >= 0)
                v50 = v49;
              else
                v50 = *v49;
              if (v52 >= 0)
                v51 = *((unsigned __int8 *)v49 + 23);
              else
                v51 = (size_t)v49[1];
              sub_22319C4B8(v24, v50, v51);
            }
            else if ((*((_BYTE *)v49 + 23) & 0x80) != 0)
            {
              sub_22319C3F4(v24, *v49, (size_t)v49[1]);
            }
            else
            {
              v53 = *(_OWORD *)v49;
              v24[2] = v49[2];
              *(_OWORD *)v24 = v53;
            }
          }
          v49 += 3;
          v24 += 3;
          v47 -= 24;
        }
        while (v47);
        v24 = (void **)v665;
      }
      v154 = &v29[3 * v48];
      v155 = v24;
      a3 = v643;
      if (v154 != v28)
      {
        v156 = 0;
        do
        {
          v158 = &v24[v156];
          v159 = &v154[v156];
          if (SHIBYTE(v154[v156 + 2]) < 0)
          {
            sub_223197FA4(v158, *v159, (unint64_t)v159[1]);
          }
          else
          {
            v157 = *(_OWORD *)v159;
            v158[2] = v159[2];
            *(_OWORD *)v158 = v157;
          }
          v156 += 3;
        }
        while (&v154[v156] != v28);
        v155 = &v24[v156];
      }
      v38 = (char *)v155;
    }
LABEL_284:
    v665 = v38;
    v663[0] = 0;
    v39 = (char *)__p;
    if (__p == v38)
      goto LABEL_913;
    goto LABEL_475;
  }
  if (*(_QWORD *)object)
  {
    v32 = *(void **)object;
    if (*(_QWORD *)&object[8] != *(_QWORD *)object)
    {
      do
      {
        if (*((char *)v25 - 1) < 0)
          operator delete(*(v25 - 3));
        v25 -= 3;
      }
      while (v25 != v24);
      v32 = __p;
    }
    v665 = (char *)v24;
    operator delete(v32);
    v26 = 0;
    v665 = 0;
    __p = 0;
    v666 = 0;
  }
  if (v31 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_1078;
  v111 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
  v112 = 2 * v111;
  if (2 * v111 <= v31)
    v112 = 0xAAAAAAAAAAAAAAABLL * (v28 - v29);
  v113 = v111 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v112;
  if (v113 > 0xAAAAAAAAAAAAAAALL)
LABEL_1078:
    sub_22316E078();
  v38 = (char *)operator new(24 * v113);
  __p = v38;
  v665 = v38;
  v666 = &v38[24 * v113];
  v6 = v30;
  if (v29 == v28)
    goto LABEL_284;
  v114 = 0;
  do
  {
    v116 = &v38[v114 * 8];
    v117 = &v29[v114];
    if (SHIBYTE(v29[v114 + 2]) < 0)
    {
      sub_223197FA4(v116, *v117, (unint64_t)v117[1]);
    }
    else
    {
      v115 = *(_OWORD *)v117;
      *((_QWORD *)v116 + 2) = v117[2];
      *(_OWORD *)v116 = v115;
    }
    v114 += 3;
  }
  while (&v29[v114] != v28);
  v38 += v114 * 8;
  v665 = v38;
  v663[0] = 0;
  v39 = (char *)__p;
  if (__p != v38)
  {
LABEL_475:
    v629 = MEMORY[0x24BEDB848] + 16;
    v627 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v628 = *MEMORY[0x24BEDB7F0];
    v626 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v644 = v38;
    v642 = v6;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, char *, uint64_t))(*(_QWORD *)a3 + 368))(&v660, a3, v39, 8);
      if (!v661)
      {
        sub_2238220A4(&v659);
        if (**(int **)(v659 + 56) > 4)
          goto LABEL_667;
        v276 = *(unsigned __int8 *)(v659 + 72);
        v277 = sub_22322F254(v659, "OSLogSurrogateAppender", 1, 0);
        v278 = v277;
        if (!v276 && v277 == 0)
          goto LABEL_667;
        info[0] = (mach_timebase_info)&v659;
        info[1] = (mach_timebase_info)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v738 = std::chrono::system_clock::now();
        DWORD2(v738) = 4;
        *(_QWORD *)&v739 = "unknown file";
        DWORD2(v739) = 146;
        *(_QWORD *)&v740 = "unknown function";
        *((_QWORD *)&v740 + 1) = 0;
        *(_QWORD *)&v741[0] = 0;
        v280 = v39;
        if ((v39[23] & 0x80000000) == 0)
        {
          v281 = **(_QWORD **)info;
          v282 = (const char *)(**(_QWORD **)info + 16);
          v283 = *(char *)(**(_QWORD **)info + 39);
          v633 = (char *)v282;
          if ((v283 & 0x80000000) == 0)
            goto LABEL_497;
LABEL_503:
          v282 = *(const char **)(v281 + 16);
          v284 = *(_QWORD *)(v281 + 24);
          v630 = v281;
          v289 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v289 & 1) != 0)
            goto LABEL_504;
LABEL_893:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)__src);
            sub_223199C58("com.apple.cv3d", (unint64_t)__src, &xmmword_255788F40);
            if (BYTE8(v730) && SBYTE7(v730) < 0)
              operator delete(__src[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          goto LABEL_504;
        }
        v280 = *(const char **)v39;
        v281 = **(_QWORD **)info;
        v282 = (const char *)(**(_QWORD **)info + 16);
        v283 = *(char *)(**(_QWORD **)info + 39);
        v633 = (char *)v282;
        if (v283 < 0)
          goto LABEL_503;
LABEL_497:
        v284 = v283;
        v630 = v281;
        v285 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v285 & 1) == 0)
          goto LABEL_893;
LABEL_504:
        if (byte_255788F57 >= 0)
          v290 = (const char *)&xmmword_255788F40;
        else
          v290 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v291 = byte_255788F57;
        else
          v291 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v290, v282);
        if (v291 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v291 >= 0x17)
        {
          v293 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v291 | 7) != 0x17)
            v293 = v291 | 7;
          v294 = v293 + 1;
          v292 = operator new(v293 + 1);
          *(_QWORD *)&object[24] = v294 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v292;
          *(_QWORD *)&object[16] = v291;
        }
        else
        {
          object[31] = v291;
          v292 = &object[8];
          if (!v291)
          {
LABEL_518:
            v292[v291] = 0;
            object[32] = 1;
            if (v284 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            a3 = v643;
            if (v284 >= 0x17)
            {
              v297 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v284 | 7) != 0x17)
                v297 = v284 | 7;
              v298 = v297 + 1;
              v295 = operator new(v297 + 1);
              *((_QWORD *)&v719 + 1) = v298 | 0x8000000000000000;
              v718 = v295;
              *(_QWORD *)&v719 = v284;
            }
            else
            {
              HIBYTE(v719) = v284;
              v295 = &v718;
              if (!v284)
              {
                LOBYTE(v718) = 0;
                LOBYTE(v720) = 1;
                v296 = *(NSObject **)object;
                if ((SHIBYTE(v719) & 0x80000000) == 0)
                  goto LABEL_522;
LABEL_528:
                operator delete(v718);
                v38 = v644;
                if (object[32])
                  goto LABEL_529;
                goto LABEL_531;
              }
            }
            memmove(v295, v282, v284);
            *((_BYTE *)v295 + v284) = 0;
            LOBYTE(v720) = 1;
            v296 = *(NSObject **)object;
            if (SHIBYTE(v719) < 0)
              goto LABEL_528;
LABEL_522:
            v38 = v644;
            if (object[32])
            {
LABEL_529:
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
            }
LABEL_531:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v278 && *(_QWORD *)(v278 + 24))
            {
              v299 = _os_log_pack_size();
              v300 = operator new(v299, (std::align_val_t)8uLL);
              v301 = (_QWORD *)operator new();
              *v301 = &off_24EC1F7F0;
              v301[1] = 0;
              v301[2] = 0;
              v301[3] = v300;
              __src[0] = v300;
              __src[1] = v300;
              v730 = (unint64_t)v301;
              *(_QWORD *)&v731 = 0;
              v302 = strlen(v280);
              if (v302 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v303 = v302;
              if (v302 >= 0x17)
              {
                v308 = (v302 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v302 | 7) != 0x17)
                  v308 = v302 | 7;
                v309 = v308 + 1;
                p_category = (char *)operator new(v308 + 1);
                *((_QWORD *)&v655 + 1) = v309 | 0x8000000000000000;
                category = p_category;
                *(_QWORD *)&v655 = v303;
              }
              else
              {
                HIBYTE(v655) = v302;
                p_category = (char *)&category;
                if (!v302)
                  goto LABEL_547;
              }
              memcpy(p_category, v280, v303);
LABEL_547:
              p_category[v303] = 0;
              v310 = category;
              *(_QWORD *)&v715 = v655;
              *(_QWORD *)((char *)&v715 + 7) = *(_QWORD *)((char *)&v655 + 7);
              v311 = HIBYTE(v655);
              v312 = operator new(0x38uLL);
              v312[1] = 0;
              v312[2] = 0;
              v312[3] = off_24EC1FA48;
              *v312 = &off_24EC1F9F8;
              v313 = v715;
              v312[4] = v310;
              v312[5] = v313;
              *(_QWORD *)((char *)v312 + 47) = *(_QWORD *)((char *)&v715 + 7);
              *((_BYTE *)v312 + 55) = v311;
              *(_QWORD *)&v715 = 0;
              *(_QWORD *)((char *)&v715 + 7) = 0;
              v314 = (std::__shared_weak_count *)v731;
              *((_QWORD *)&v730 + 1) = v312 + 3;
              *(_QWORD *)&v731 = v312;
              if (v314)
              {
                v315 = (unint64_t *)&v314->__shared_owners_;
                do
                  v316 = __ldaxr(v315);
                while (__stlxr(v316 - 1, v315));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                  std::__shared_weak_count::__release_weak(v314);
                }
              }
              *(_OWORD *)object = *(_OWORD *)__src;
              v317 = (void *)*((_QWORD *)&v730 + 1);
              *(_QWORD *)&object[16] = v730;
              if ((_QWORD)v730)
              {
                v318 = (unint64_t *)(v730 + 8);
                do
                  v319 = __ldxr(v318);
                while (__stxr(v319 + 1, v318));
              }
              v320 = (std::__shared_weak_count *)v731;
              *(_QWORD *)&object[24] = v317;
              *(_QWORD *)&object[32] = v731;
              if ((_QWORD)v731)
              {
                v321 = (unint64_t *)(v731 + 8);
                do
                  v322 = __ldxr(v321);
                while (__stxr(v322 + 1, v321));
                v718 = v317;
                do
                  v323 = __ldaxr(v321);
                while (__stlxr(v323 - 1, v321));
                if (!v323)
                {
                  ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                  std::__shared_weak_count::__release_weak(v320);
                }
              }
              else
              {
                v718 = v317;
              }
              v350 = (std::__shared_weak_count *)v730;
              if ((_QWORD)v730)
              {
                v351 = (unint64_t *)(v730 + 8);
                do
                  v352 = __ldaxr(v351);
                while (__stlxr(v352 - 1, v351));
                if (!v352)
                {
                  ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                  std::__shared_weak_count::__release_weak(v350);
                }
              }
              v353 = *(_QWORD *)object;
              if (*((char *)v718 + 31) >= 0)
                v354 = (char *)v718 + 8;
              else
                v354 = (char *)*((_QWORD *)v718 + 1);
              v355 = _os_log_pack_fill();
              *(_DWORD *)v355 = 136315138;
              *(_QWORD *)(v355 + 4) = v354;
              v356 = (char *)operator new();
              v357 = *(unsigned __int8 *)(v630 + 39);
              v358 = v633;
              if ((v357 & 0x80u) != 0)
              {
                v358 = *(char **)(v630 + 16);
                v357 = *(_QWORD *)(v630 + 24);
              }
              *(_QWORD *)v356 = v353;
              *(_OWORD *)(v356 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v356 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_QWORD *)v356 + 5) = v358;
              *((_QWORD *)v356 + 6) = v357;
              v356[56] = 16;
              category = 0;
              __src[0] = v356;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v278 + 24) + 40))(*(_QWORD *)(v278 + 24), __src);
              v38 = v644;
              v359 = __src[0];
              __src[0] = 0;
              v6 = v642;
              if (v359)
              {
                v360 = (std::__shared_weak_count *)*((_QWORD *)v359 + 4);
                if (v360)
                {
                  v361 = (unint64_t *)&v360->__shared_owners_;
                  do
                    v362 = __ldaxr(v361);
                  while (__stlxr(v362 - 1, v361));
                  if (!v362)
                  {
                    ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                    std::__shared_weak_count::__release_weak(v360);
                  }
                }
                v363 = (std::__shared_weak_count *)*((_QWORD *)v359 + 2);
                if (v363)
                {
                  v364 = (unint64_t *)&v363->__shared_owners_;
                  do
                    v365 = __ldaxr(v364);
                  while (__stlxr(v365 - 1, v364));
                  if (!v365)
                  {
                    ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                    std::__shared_weak_count::__release_weak(v363);
                  }
                }
                MEMORY[0x227684CE8](v359, 0x10F0C40B62ED6C6);
                v366 = category;
                category = 0;
                if (v366)
                {
                  v367 = (std::__shared_weak_count *)*((_QWORD *)v366 + 4);
                  if (v367)
                  {
                    v368 = (unint64_t *)&v367->__shared_owners_;
                    do
                      v369 = __ldaxr(v368);
                    while (__stlxr(v369 - 1, v368));
                    if (!v369)
                    {
                      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                      std::__shared_weak_count::__release_weak(v367);
                    }
                  }
                  v370 = (std::__shared_weak_count *)*((_QWORD *)v366 + 2);
                  if (v370)
                  {
                    v371 = (unint64_t *)&v370->__shared_owners_;
                    do
                      v372 = __ldaxr(v371);
                    while (__stlxr(v372 - 1, v371));
                    if (!v372)
                    {
                      ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                      std::__shared_weak_count::__release_weak(v370);
                    }
                  }
                  MEMORY[0x227684CE8](v366, 0x10F0C40B62ED6C6);
                }
              }
              v373 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v374 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v375 = __ldaxr(v374);
                while (__stlxr(v375 - 1, v374));
                if (!v375)
                {
                  ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
                  std::__shared_weak_count::__release_weak(v373);
                }
              }
              v376 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v377 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v378 = __ldaxr(v377);
                while (__stlxr(v378 - 1, v377));
                if (!v378)
                {
                  ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                  std::__shared_weak_count::__release_weak(v376);
                }
              }
            }
            else
            {
              os_log_type_enabled(v296, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v280;
              v305 = (void *)_os_log_send_and_compose_impl();
              v6 = v642;
              if (v305)
                free(v305);
            }
            if (v276)
            {
              v379 = v39;
              if (v39[23] < 0)
                v379 = *(const char **)v39;
              sub_22322C138((uint64_t)info, "Could not read file(possible corruption), deleting: %s", v379);
              sub_223182C08((uint64_t)info);
            }
            sub_223182C08((uint64_t)info);
            v380 = *(std::__shared_weak_count **)&v741[0];
            if (*(_QWORD *)&v741[0])
            {
              v381 = (unint64_t *)(*(_QWORD *)&v741[0] + 8);
              do
                v382 = __ldaxr(v381);
              while (__stlxr(v382 - 1, v381));
              if (!v382)
              {
                ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                std::__shared_weak_count::__release_weak(v380);
              }
            }
LABEL_667:
            if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a3 + 232))(a3, v39) & 1) != 0)
              goto LABEL_885;
            v383 = atomic_load((unsigned __int8 *)&qword_2557892F0);
            if ((v383 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
            {
              __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
              __cxa_guard_release(&qword_2557892F0);
            }
            sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Could not remove unreadable file: %s", 0x24uLL);
            sub_2238220A4(&v659);
            if (**(int **)(v659 + 56) > 5)
              goto LABEL_885;
            v384 = *(unsigned __int8 *)(v659 + 72);
            v385 = sub_22322F254(v659, "OSLogSurrogateAppender", 1, 0);
            v386 = v385;
            if (!v384 && !v385)
              goto LABEL_885;
            info[0] = (mach_timebase_info)&v659;
            info[1] = (mach_timebase_info)std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)&v738 = std::chrono::system_clock::now();
            DWORD2(v738) = 5;
            *(_QWORD *)&v739 = "unknown file";
            DWORD2(v739) = 149;
            *(_QWORD *)&v740 = "unknown function";
            *((_QWORD *)&v740 + 1) = 0;
            *(_QWORD *)&v741[0] = 0;
            v387 = v39;
            if (v39[23] < 0)
              v387 = *(const char **)v39;
            v388 = **(_QWORD **)info;
            v389 = (const char *)(**(_QWORD **)info + 16);
            v632 = **(_QWORD **)info;
            v625 = v389;
            if (*(char *)(**(_QWORD **)info + 39) < 0)
            {
              v389 = *(const char **)(v388 + 16);
              v390 = *(_QWORD *)(v388 + 24);
              v635 = v384;
              v392 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v392 & 1) == 0)
              {
LABEL_906:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)__src);
                  sub_223199C58("com.apple.cv3d", (unint64_t)__src, &xmmword_255788F40);
                  if (BYTE8(v730) && SBYTE7(v730) < 0)
                    operator delete(__src[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v390 = *(unsigned __int8 *)(**(_QWORD **)info + 39);
              v635 = v384;
              v391 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v391 & 1) == 0)
                goto LABEL_906;
            }
            if (byte_255788F57 >= 0)
              v393 = (const char *)&xmmword_255788F40;
            else
              v393 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v394 = byte_255788F57;
            else
              v394 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)object = os_log_create(v393, v389);
            if (v394 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v394 >= 0x17)
            {
              v396 = (v394 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v394 | 7) != 0x17)
                v396 = v394 | 7;
              v397 = v396 + 1;
              v395 = operator new(v396 + 1);
              *(_QWORD *)&object[24] = v397 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v395;
              *(_QWORD *)&object[16] = v394;
            }
            else
            {
              object[31] = v394;
              v395 = &object[8];
              if (!v394)
              {
LABEL_692:
                v395[v394] = 0;
                object[32] = 1;
                if (v390 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a3 = v643;
                if (v390 >= 0x17)
                {
                  v400 = (v390 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v390 | 7) != 0x17)
                    v400 = v390 | 7;
                  v401 = v400 + 1;
                  v398 = operator new(v400 + 1);
                  *((_QWORD *)&v719 + 1) = v401 | 0x8000000000000000;
                  v718 = v398;
                  *(_QWORD *)&v719 = v390;
                }
                else
                {
                  HIBYTE(v719) = v390;
                  v398 = &v718;
                  if (!v390)
                  {
                    LOBYTE(v718) = 0;
                    LOBYTE(v720) = 1;
                    v399 = *(NSObject **)object;
                    if ((SHIBYTE(v719) & 0x80000000) == 0)
                      goto LABEL_696;
LABEL_702:
                    operator delete(v718);
                    v38 = v644;
                    if (object[32])
                      goto LABEL_703;
                    goto LABEL_705;
                  }
                }
                memmove(v398, v389, v390);
                *((_BYTE *)v398 + v390) = 0;
                LOBYTE(v720) = 1;
                v399 = *(NSObject **)object;
                if (SHIBYTE(v719) < 0)
                  goto LABEL_702;
LABEL_696:
                v38 = v644;
                if (object[32])
                {
LABEL_703:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_705:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v386 && *(_QWORD *)(v386 + 24))
                {
                  v402 = _os_log_pack_size();
                  v403 = operator new(v402, (std::align_val_t)8uLL);
                  v404 = (_QWORD *)operator new();
                  *v404 = &off_24EC1F7F0;
                  v404[1] = 0;
                  v404[2] = 0;
                  v404[3] = v403;
                  __src[0] = v403;
                  __src[1] = v403;
                  v730 = (unint64_t)v404;
                  *(_QWORD *)&v731 = 0;
                  v405 = strlen(v387);
                  if (v405 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v406 = v405;
                  if (v405 >= 0x17)
                  {
                    v426 = (v405 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v405 | 7) != 0x17)
                      v426 = v405 | 7;
                    v427 = v426 + 1;
                    v407 = (char *)operator new(v426 + 1);
                    *((_QWORD *)&v655 + 1) = v427 | 0x8000000000000000;
                    category = v407;
                    *(_QWORD *)&v655 = v406;
                  }
                  else
                  {
                    HIBYTE(v655) = v405;
                    v407 = (char *)&category;
                    if (!v405)
                      goto LABEL_738;
                  }
                  memcpy(v407, v387, v406);
LABEL_738:
                  v407[v406] = 0;
                  v428 = category;
                  *(_QWORD *)&v715 = v655;
                  *(_QWORD *)((char *)&v715 + 7) = *(_QWORD *)((char *)&v655 + 7);
                  v429 = HIBYTE(v655);
                  v430 = operator new(0x38uLL);
                  v430[1] = 0;
                  v430[2] = 0;
                  v430[3] = off_24EC1FA48;
                  *v430 = &off_24EC1F9F8;
                  v431 = v715;
                  v430[4] = v428;
                  v430[5] = v431;
                  *(_QWORD *)((char *)v430 + 47) = *(_QWORD *)((char *)&v715 + 7);
                  *((_BYTE *)v430 + 55) = v429;
                  *(_QWORD *)&v715 = 0;
                  *(_QWORD *)((char *)&v715 + 7) = 0;
                  v432 = (std::__shared_weak_count *)v731;
                  *((_QWORD *)&v730 + 1) = v430 + 3;
                  *(_QWORD *)&v731 = v430;
                  if (v432)
                  {
                    v433 = (unint64_t *)&v432->__shared_owners_;
                    do
                      v434 = __ldaxr(v433);
                    while (__stlxr(v434 - 1, v433));
                    if (!v434)
                    {
                      ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
                      std::__shared_weak_count::__release_weak(v432);
                    }
                  }
                  *(_OWORD *)object = *(_OWORD *)__src;
                  v435 = (void *)*((_QWORD *)&v730 + 1);
                  *(_QWORD *)&object[16] = v730;
                  if ((_QWORD)v730)
                  {
                    v436 = (unint64_t *)(v730 + 8);
                    do
                      v437 = __ldxr(v436);
                    while (__stxr(v437 + 1, v436));
                  }
                  v438 = (std::__shared_weak_count *)v731;
                  *(_QWORD *)&object[24] = v435;
                  *(_QWORD *)&object[32] = v731;
                  if ((_QWORD)v731)
                  {
                    v439 = (unint64_t *)(v731 + 8);
                    do
                      v440 = __ldxr(v439);
                    while (__stxr(v440 + 1, v439));
                    v718 = v435;
                    do
                      v441 = __ldaxr(v439);
                    while (__stlxr(v441 - 1, v439));
                    if (!v441)
                    {
                      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                      std::__shared_weak_count::__release_weak(v438);
                    }
                  }
                  else
                  {
                    v718 = v435;
                  }
                  v496 = (std::__shared_weak_count *)v730;
                  if ((_QWORD)v730)
                  {
                    v497 = (unint64_t *)(v730 + 8);
                    do
                      v498 = __ldaxr(v497);
                    while (__stlxr(v498 - 1, v497));
                    if (!v498)
                    {
                      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
                      std::__shared_weak_count::__release_weak(v496);
                    }
                  }
                  v499 = *(_QWORD *)object;
                  if (*((char *)v718 + 31) >= 0)
                    v500 = (char *)v718 + 8;
                  else
                    v500 = (char *)*((_QWORD *)v718 + 1);
                  v501 = _os_log_pack_fill();
                  *(_DWORD *)v501 = 136315138;
                  *(_QWORD *)(v501 + 4) = v500;
                  v502 = (char *)operator new();
                  v503 = *(unsigned __int8 *)(v632 + 39);
                  v504 = v625;
                  if ((v503 & 0x80u) != 0)
                  {
                    v504 = *(const char **)(v632 + 16);
                    v503 = *(_QWORD *)(v632 + 24);
                  }
                  *(_QWORD *)v502 = v499;
                  *(_OWORD *)(v502 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v502 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v502 + 5) = v504;
                  *((_QWORD *)v502 + 6) = v503;
                  v502[56] = 16;
                  category = 0;
                  __src[0] = v502;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v386 + 24) + 40))(*(_QWORD *)(v386 + 24), __src);
                  v38 = v644;
                  v505 = __src[0];
                  __src[0] = 0;
                  if (v505)
                  {
                    v506 = (std::__shared_weak_count *)*((_QWORD *)v505 + 4);
                    if (v506)
                    {
                      v507 = (unint64_t *)&v506->__shared_owners_;
                      do
                        v508 = __ldaxr(v507);
                      while (__stlxr(v508 - 1, v507));
                      if (!v508)
                      {
                        ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
                        std::__shared_weak_count::__release_weak(v506);
                      }
                    }
                    v509 = (std::__shared_weak_count *)*((_QWORD *)v505 + 2);
                    if (v509)
                    {
                      v510 = (unint64_t *)&v509->__shared_owners_;
                      do
                        v511 = __ldaxr(v510);
                      while (__stlxr(v511 - 1, v510));
                      if (!v511)
                      {
                        ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
                        std::__shared_weak_count::__release_weak(v509);
                      }
                    }
                    MEMORY[0x227684CE8](v505, 0x10F0C40B62ED6C6);
                    v512 = category;
                    category = 0;
                    if (v512)
                    {
                      v513 = (std::__shared_weak_count *)*((_QWORD *)v512 + 4);
                      if (v513)
                      {
                        v514 = (unint64_t *)&v513->__shared_owners_;
                        do
                          v515 = __ldaxr(v514);
                        while (__stlxr(v515 - 1, v514));
                        if (!v515)
                        {
                          ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                          std::__shared_weak_count::__release_weak(v513);
                        }
                      }
                      v516 = (std::__shared_weak_count *)*((_QWORD *)v512 + 2);
                      if (v516)
                      {
                        v517 = (unint64_t *)&v516->__shared_owners_;
                        do
                          v518 = __ldaxr(v517);
                        while (__stlxr(v518 - 1, v517));
                        if (!v518)
                        {
                          ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                          std::__shared_weak_count::__release_weak(v516);
                        }
                      }
                      MEMORY[0x227684CE8](v512, 0x10F0C40B62ED6C6);
                    }
                  }
                  v519 = *(std::__shared_weak_count **)&object[32];
                  v409 = v635;
                  if (*(_QWORD *)&object[32])
                  {
                    v520 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v521 = __ldaxr(v520);
                    while (__stlxr(v521 - 1, v520));
                    if (!v521)
                    {
                      ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                      std::__shared_weak_count::__release_weak(v519);
                    }
                  }
                  v522 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v523 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v524 = __ldaxr(v523);
                    while (__stlxr(v524 - 1, v523));
                    if (!v524)
                    {
                      ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
                      std::__shared_weak_count::__release_weak(v522);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v399, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = v387;
                  v408 = (void *)_os_log_send_and_compose_impl();
                  v409 = v635;
                  if (v408)
                    free(v408);
                }
                if (v409)
                {
                  v525 = v39;
                  if (v39[23] < 0)
                    v525 = *(const char **)v39;
                  sub_22322C138((uint64_t)info, "Could not remove unreadable file: %s", v525);
                  sub_223182C08((uint64_t)info);
                }
                sub_223182C08((uint64_t)info);
                v526 = *(std::__shared_weak_count **)&v741[0];
                if (*(_QWORD *)&v741[0])
                {
                  v527 = (unint64_t *)(*(_QWORD *)&v741[0] + 8);
                  do
                    v528 = __ldaxr(v527);
                  while (__stlxr(v528 - 1, v527));
                  if (!v528)
                  {
                    ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
                    std::__shared_weak_count::__release_weak(v526);
                  }
                }
                goto LABEL_885;
              }
            }
            memmove(v395, v393, v394);
            goto LABEL_692;
          }
        }
        memmove(v292, v290, v291);
        goto LABEL_518;
      }
      v742 = 0;
      v743 = 0;
      v744 = 0;
      v745 = 0;
      v746 = 0;
      v747 = 0;
      v748 = 0;
      v738 = 0u;
      v739 = 0u;
      v740 = 0u;
      memset(v741, 0, 25);
      v261 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v661 + 16))(v661);
      v688 = 1;
      sub_224555660(&category, &v688, v261, 0x2800uLL);
      category = (char *)&off_24EC20B48;
      *((_QWORD *)&v655 + 1) = &unk_24EC20C90;
      v689 = 5;
      sub_224554038(v658, &v689);
      v262 = v689;
      if (v689 <= 1)
      {
        v701 = 0;
        sub_224554038(v658, &v701);
      }
      v263 = v658;
      sub_224553CF0(v658, info);
      sub_224553CF0(v263, (_BYTE *)info + 1);
      sub_224553CF0(v263, (_BYTE *)info + 2);
      sub_224553CF0(v263, (_BYTE *)info + 3);
      sub_224553CF0(v263, &info[0].denom);
      sub_224553CF0(v263, (_BYTE *)&info[0].denom + 1);
      sub_224553CF0(v263, (_BYTE *)&info[0].denom + 2);
      sub_224553CF0(v263, (_BYTE *)&info[0].denom + 3);
      sub_224553CF0(v263, &info[1]);
      sub_224553CF0(v263, (_BYTE *)&info[1] + 1);
      sub_224553CF0(v263, (_BYTE *)&info[1] + 2);
      sub_224553CF0(v263, (_BYTE *)&info[1] + 3);
      sub_224553CF0(v263, &info[1].denom);
      sub_224553CF0(v263, (_BYTE *)&info[1].denom + 1);
      sub_224553CF0(v263, (_BYTE *)&info[1].denom + 2);
      sub_224553CF0(v263, (_BYTE *)&info[1].denom + 3);
      v264 = v658;
      sub_2245544CC(v658, (float *)&v738);
      sub_2245544CC(v264, (float *)&v738 + 1);
      sub_2245544CC(v264, (float *)&v738 + 2);
      sub_2245544CC(v264, (float *)&v738 + 3);
      sub_2245544CC(v264, (float *)&v739);
      sub_2245544CC(v264, (float *)&v739 + 1);
      sub_2245544CC(v264, (float *)&v739 + 2);
      sub_2245544CC(v264, (float *)&v739 + 3);
      sub_2245544CC(v264, (float *)&v740);
      sub_2245544CC(v264, (float *)&v740 + 1);
      sub_2245544CC(v264, (float *)&v740 + 2);
      sub_2245544CC(v264, (float *)&v740 + 3);
      sub_2245544CC(v264, (float *)v741);
      sub_2245544CC(v264, (float *)v741 + 1);
      sub_2245544CC(v264, (float *)v741 + 2);
      sub_2245544CC(v264, (float *)v741 + 3);
      sub_2231B2E50((uint64_t)&v702, (uint64_t)&category, (uint64_t)&v741[1]);
      if (v262 >= 3)
      {
        sub_2231B2E50((uint64_t)&v703, (uint64_t)&category, (uint64_t)&v742);
        sub_2231B2E50((uint64_t)&v704, (uint64_t)&category, (uint64_t)&v744);
        if (v262 != 3)
        {
          v705 = 0;
          sub_224553CF0(v658, &v705);
          v746 = v705;
          if (v262 >= 5)
            sub_2231B2E50((uint64_t)&v706, (uint64_t)&category, (uint64_t)&v747);
        }
      }
      BYTE2(v736) = 1;
      __src[0] = (void *)info[0];
      __src[1] = (void *)info[1];
      v733 = v741[0];
      v732 = v740;
      v731 = v739;
      v730 = v738;
      *(_QWORD *)&v734 = *(_QWORD *)&v741[1];
      *((_QWORD *)&v734 + 1) = v742;
      v735 = v744;
      LOWORD(v736) = v746;
      *((_QWORD *)&v736 + 1) = v747;
      v755[0] = (void *)info[0];
      v755[1] = (void *)info[1];
      if (!sub_223340F28((_QWORD *)v6, (uint64_t)v755))
        break;
LABEL_826:
      category = (char *)&off_24EC798B8;
      *((_QWORD *)&v655 + 1) = &unk_24EC79A00;
      v495 = v658;
      v658 = 0;
      if (v495)
      {
        sub_22455612C((_QWORD *)(v495 + 8));
        MEMORY[0x227684CE8](v495, 0x10F2C40853B94B7);
      }
      *((_QWORD *)&v655 + 1) = off_24EC79B20;
      if (v656)
      {
        v657 = v656;
        operator delete(v656);
      }
LABEL_885:
      v529 = v662;
      if (v662)
      {
        v530 = (unint64_t *)&v662->__shared_owners_;
        do
          v531 = __ldaxr(v530);
        while (__stlxr(v531 - 1, v530));
        if (!v531)
        {
          ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
          std::__shared_weak_count::__release_weak(v529);
        }
      }
      v39 += 24;
      if (v39 == v38)
        goto LABEL_913;
    }
    sub_223821DD4(&v688);
    if (**(int **)(v688 + 56) > 2
      || (v265 = *(unsigned __int8 *)(v688 + 72),
          v266 = sub_22322F254(v688, "OSLogSurrogateAppender", 1, 0),
          v267 = v266,
          !v265)
      && !v266)
    {
      v268 = v686;
      v269 = v687;
      if (v686 < v687)
      {
LABEL_489:
        *(_OWORD *)v268 = *(_OWORD *)__src;
        v270 = v730;
        v271 = v731;
        v272 = v733;
        *((_OWORD *)v268 + 3) = v732;
        *((_OWORD *)v268 + 4) = v272;
        *((_OWORD *)v268 + 1) = v270;
        *((_OWORD *)v268 + 2) = v271;
        v273 = v734;
        v274 = v736;
        *((_OWORD *)v268 + 6) = v735;
        *((_OWORD *)v268 + 7) = v274;
        *((_OWORD *)v268 + 5) = v273;
        v275 = v268 + 128;
LABEL_825:
        v686 = v275;
        goto LABEL_826;
      }
LABEL_810:
      v475 = (char *)v685;
      v476 = (v268 - (_BYTE *)v685) >> 7;
      v477 = v476 + 1;
      if ((unint64_t)(v476 + 1) >> 57)
        sub_22316E078();
      v478 = v269 - (_BYTE *)v685;
      if (v478 >> 6 > v477)
        v477 = v478 >> 6;
      if ((unint64_t)v478 >= 0x7FFFFFFFFFFFFF80)
        v479 = 0x1FFFFFFFFFFFFFFLL;
      else
        v479 = v477;
      if (v479)
      {
        if (v479 >> 57)
          sub_223174E94();
        v480 = (char *)operator new(v479 << 7);
      }
      else
      {
        v480 = 0;
      }
      v481 = &v480[128 * v476];
      v482 = v730;
      v483 = v731;
      *(_OWORD *)v481 = *(_OWORD *)__src;
      *((_OWORD *)v481 + 1) = v482;
      v484 = v732;
      v485 = v733;
      *((_OWORD *)v481 + 2) = v483;
      *((_OWORD *)v481 + 3) = v484;
      v486 = v734;
      v487 = v735;
      *((_OWORD *)v481 + 4) = v485;
      *((_OWORD *)v481 + 5) = v486;
      v488 = v736;
      *((_OWORD *)v481 + 6) = v487;
      *((_OWORD *)v481 + 7) = v488;
      v489 = v481;
      if (v268 != v475)
      {
        do
        {
          *((_OWORD *)v489 - 8) = *((_OWORD *)v268 - 8);
          v490 = *((_OWORD *)v268 - 7);
          v491 = *((_OWORD *)v268 - 6);
          v492 = *((_OWORD *)v268 - 4);
          *((_OWORD *)v489 - 5) = *((_OWORD *)v268 - 5);
          *((_OWORD *)v489 - 4) = v492;
          *((_OWORD *)v489 - 7) = v490;
          *((_OWORD *)v489 - 6) = v491;
          v493 = *((_OWORD *)v268 - 3);
          v494 = *((_OWORD *)v268 - 1);
          *((_OWORD *)v489 - 2) = *((_OWORD *)v268 - 2);
          *((_OWORD *)v489 - 1) = v494;
          *((_OWORD *)v489 - 3) = v493;
          v489 -= 128;
          v268 -= 128;
        }
        while (v268 != v475);
        v268 = (char *)v685;
      }
      v275 = v481 + 128;
      v685 = v489;
      v686 = v481 + 128;
      v687 = &v480[128 * v479];
      if (v268)
        operator delete(v268);
      goto LABEL_825;
    }
    sub_223195210((uint64_t)object);
    v286 = sub_2231813E8(&object[16], (uint64_t)"Loaded keyframe: ", 17);
    sub_2245664AC((unsigned __int8 *)__src, &v707);
    sub_2231813E8(v286, (uint64_t)&v707, 36);
    v631 = v265;
    if ((v727 & 0x10) != 0)
    {
      v306 = v726;
      v307 = (void **)&v720;
      if (v726 < v721)
      {
        v726 = v721;
        v306 = v721;
        v307 = (void **)&v720;
      }
    }
    else
    {
      if ((v727 & 8) == 0)
      {
        v287 = 0;
        HIBYTE(v716) = 0;
        v288 = &v715;
        goto LABEL_571;
      }
      v306 = *((_QWORD *)&v719 + 1);
      v307 = &v718;
    }
    v324 = *v307;
    v287 = v306 - (_QWORD)*v307;
    if (v287 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v287 >= 0x17)
    {
      v325 = (v287 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v287 | 7) != 0x17)
        v325 = v287 | 7;
      v326 = v325 + 1;
      v288 = (__int128 *)operator new(v325 + 1);
      v716 = v326 | 0x8000000000000000;
      *(_QWORD *)&v715 = v288;
      *((_QWORD *)&v715 + 1) = v287;
    }
    else
    {
      HIBYTE(v716) = v306 - *(_BYTE *)v307;
      v288 = &v715;
      if (!v287)
      {
LABEL_571:
        *((_BYTE *)v288 + v287) = 0;
        *(_QWORD *)&v707 = &v688;
        *((std::chrono::steady_clock::time_point *)&v707 + 1) = std::chrono::steady_clock::now();
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v709 = 2;
        v710 = "unknown file";
        v711 = 159;
        v712 = "unknown function";
        v713 = 0;
        v714 = 0;
        v327 = (char *)&v715;
        if (v716 < 0)
          v327 = (char *)v715;
        v634 = v327;
        v328 = *(_QWORD *)v707;
        v329 = (const char *)(*(_QWORD *)v707 + 16);
        v624 = v329;
        if (*(char *)(*(_QWORD *)v707 + 39) < 0)
        {
          v329 = *(const char **)(v328 + 16);
          v330 = *(_QWORD *)(v328 + 24);
          v332 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v332 & 1) != 0)
            goto LABEL_577;
        }
        else
        {
          v330 = *(unsigned __int8 *)(*(_QWORD *)v707 + 39);
          v331 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v331 & 1) != 0)
            goto LABEL_577;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v755);
          sub_223199C58("com.apple.cv3d", (unint64_t)v755, &xmmword_255788F40);
          if (v757 && v756 < 0)
            operator delete(v755[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_577:
        if (byte_255788F57 >= 0)
          v333 = (const char *)&xmmword_255788F40;
        else
          v333 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v334 = byte_255788F57;
        else
          v334 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)__dst = os_log_create(v333, v329);
        if (v334 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v334 >= 0x17)
        {
          v336 = (v334 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v334 | 7) != 0x17)
            v336 = v334 | 7;
          v337 = v336 + 1;
          v335 = operator new(v336 + 1);
          *(_QWORD *)&__dst[16] = v334;
          v750 = v337 | 0x8000000000000000;
          *(_QWORD *)&__dst[8] = v335;
        }
        else
        {
          HIBYTE(v750) = v334;
          v335 = &__dst[8];
          if (!v334)
          {
LABEL_591:
            v335[v334] = 0;
            v751 = 1;
            if (v330 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            a3 = v643;
            if (v330 >= 0x17)
            {
              v340 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v330 | 7) != 0x17)
                v340 = v330 | 7;
              v341 = v340 + 1;
              v338 = (void **)operator new(v340 + 1);
              v752[1] = (void *)v330;
              v753 = v341 | 0x8000000000000000;
              v752[0] = v338;
            }
            else
            {
              HIBYTE(v753) = v330;
              v338 = v752;
              if (!v330)
              {
                LOBYTE(v752[0]) = 0;
                v754 = 1;
                v339 = *(NSObject **)__dst;
                if ((SHIBYTE(v753) & 0x80000000) == 0)
                  goto LABEL_595;
                goto LABEL_601;
              }
            }
            memmove(v338, v329, v330);
            *((_BYTE *)v338 + v330) = 0;
            v754 = 1;
            v339 = *(NSObject **)__dst;
            if ((SHIBYTE(v753) & 0x80000000) == 0)
            {
LABEL_595:
              v38 = v644;
              if (!v751)
                goto LABEL_604;
              goto LABEL_602;
            }
LABEL_601:
            operator delete(v752[0]);
            v38 = v644;
            if (!v751)
              goto LABEL_604;
LABEL_602:
            if (SHIBYTE(v750) < 0)
              operator delete(*(void **)&__dst[8]);
LABEL_604:
            if (*(_QWORD *)__dst)
              os_release(*(void **)__dst);
            if (!v267 || !*(_QWORD *)(v267 + 24))
            {
              os_log_type_enabled(v339, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)__dst = 136315138;
              *(_QWORD *)&__dst[4] = v634;
              v348 = (void *)_os_log_send_and_compose_impl();
              v349 = v631;
              if (v348)
                free(v348);
LABEL_797:
              if (v349)
              {
                v471 = (const char *)&v715;
                if (v716 < 0)
                  v471 = (const char *)v715;
                sub_22322C138((uint64_t)&v707, "%s", v471);
                sub_223182C08((uint64_t)&v707);
              }
              sub_223182C08((uint64_t)&v707);
              v472 = v714;
              if (!v714)
                goto LABEL_805;
              v473 = (unint64_t *)&v714->__shared_owners_;
              do
                v474 = __ldaxr(v473);
              while (__stlxr(v474 - 1, v473));
              if (!v474)
              {
                ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                std::__shared_weak_count::__release_weak(v472);
                if ((SHIBYTE(v716) & 0x80000000) == 0)
                {
LABEL_807:
                  *(_QWORD *)object = v628;
                  *(_QWORD *)&object[*(_QWORD *)(v628 - 24)] = v627;
                  *(_QWORD *)&object[16] = v626;
                  *(_QWORD *)&object[24] = v629;
                  if (v725 < 0)
                    operator delete(v722[1]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x227684BE0](&v728);
                  v268 = v686;
                  v269 = v687;
                  if (v686 < v687)
                    goto LABEL_489;
                  goto LABEL_810;
                }
              }
              else
              {
LABEL_805:
                if ((SHIBYTE(v716) & 0x80000000) == 0)
                  goto LABEL_807;
              }
              operator delete((void *)v715);
              goto LABEL_807;
            }
            v342 = _os_log_pack_size();
            v343 = (std::__shared_weak_count_vtbl *)operator new(v342, (std::align_val_t)8uLL);
            v344 = (std::__shared_weak_count *)operator new();
            v344->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v344->__shared_owners_ = 0;
            v344->__shared_weak_owners_ = 0;
            v344[1].__vftable = v343;
            *(_QWORD *)&v693 = v343;
            *((_QWORD *)&v693 + 1) = v343;
            v694 = v344;
            v695 = 0;
            v696 = 0;
            v345 = strlen(v634);
            if (v345 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v346 = v345;
            if (v345 >= 0x17)
            {
              v410 = (v345 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v345 | 7) != 0x17)
                v410 = v345 | 7;
              v411 = v410 + 1;
              v347 = operator new(v410 + 1);
              *((_QWORD *)&v700 + 1) = v411 | 0x8000000000000000;
              v699 = v347;
              *(_QWORD *)&v700 = v346;
            }
            else
            {
              HIBYTE(v700) = v345;
              v347 = &v699;
              if (!v345)
              {
LABEL_719:
                *((_BYTE *)v347 + v346) = 0;
                v412 = v699;
                *(_QWORD *)__dst = v700;
                *(_QWORD *)&__dst[7] = *(_QWORD *)((char *)&v700 + 7);
                v413 = HIBYTE(v700);
                v414 = operator new(0x38uLL);
                v414[1] = 0;
                v414[2] = 0;
                v414[3] = off_24EC1FA48;
                *v414 = &off_24EC1F9F8;
                v415 = *(_QWORD *)__dst;
                v414[4] = v412;
                v414[5] = v415;
                *(_QWORD *)((char *)v414 + 47) = *(_QWORD *)&__dst[7];
                *((_BYTE *)v414 + 55) = v413;
                *(_QWORD *)__dst = 0;
                *(_QWORD *)&__dst[7] = 0;
                v416 = v696;
                v695 = (char *)(v414 + 3);
                v696 = (std::__shared_weak_count *)v414;
                if (v416)
                {
                  v417 = (unint64_t *)&v416->__shared_owners_;
                  do
                    v418 = __ldaxr(v417);
                  while (__stlxr(v418 - 1, v417));
                  if (!v418)
                  {
                    ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                    std::__shared_weak_count::__release_weak(v416);
                  }
                }
                *(_OWORD *)v690 = v693;
                v419 = v695;
                *(_QWORD *)&v690[16] = v694;
                if (v694)
                {
                  v420 = (unint64_t *)&v694->__shared_owners_;
                  do
                    v421 = __ldxr(v420);
                  while (__stxr(v421 + 1, v420));
                }
                v422 = v696;
                *(_QWORD *)&v691 = v419;
                *((_QWORD *)&v691 + 1) = v696;
                if (v696)
                {
                  v423 = (unint64_t *)&v696->__shared_owners_;
                  do
                    v424 = __ldxr(v423);
                  while (__stxr(v424 + 1, v423));
                  v692 = v419;
                  do
                    v425 = __ldaxr(v423);
                  while (__stlxr(v425 - 1, v423));
                  if (!v425)
                  {
                    ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                    std::__shared_weak_count::__release_weak(v422);
                  }
                }
                else
                {
                  v692 = v419;
                }
                v442 = v694;
                if (v694)
                {
                  v443 = (unint64_t *)&v694->__shared_owners_;
                  do
                    v444 = __ldaxr(v443);
                  while (__stlxr(v444 - 1, v443));
                  if (!v444)
                  {
                    ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
                    std::__shared_weak_count::__release_weak(v442);
                  }
                }
                v445 = *(_QWORD *)v690;
                if (v692[31] >= 0)
                  v446 = v692 + 8;
                else
                  v446 = (char *)*((_QWORD *)v692 + 1);
                v447 = _os_log_pack_fill();
                *(_DWORD *)v447 = 136315138;
                *(_QWORD *)(v447 + 4) = v446;
                v448 = operator new();
                v449 = *(unsigned __int8 *)(v328 + 39);
                v450 = v624;
                if ((v449 & 0x80u) != 0)
                {
                  v450 = *(const char **)(v328 + 16);
                  v449 = *(_QWORD *)(v328 + 24);
                }
                *(_QWORD *)v448 = v445;
                *(_OWORD *)(v448 + 8) = *(_OWORD *)&v690[8];
                *(_QWORD *)&v690[8] = 0;
                *(_QWORD *)&v690[16] = 0;
                *(_OWORD *)(v448 + 24) = v691;
                v691 = 0uLL;
                *(_QWORD *)(v448 + 40) = v450;
                *(_QWORD *)(v448 + 48) = v449;
                *(_BYTE *)(v448 + 56) = 2;
                v697 = 0;
                v698 = v448;
                v38 = v644;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v267 + 24) + 40))(*(_QWORD *)(v267 + 24), &v698);
                v451 = v698;
                v698 = 0;
                v349 = v631;
                if (v451)
                {
                  v452 = *(std::__shared_weak_count **)(v451 + 32);
                  if (v452)
                  {
                    v453 = (unint64_t *)&v452->__shared_owners_;
                    do
                      v454 = __ldaxr(v453);
                    while (__stlxr(v454 - 1, v453));
                    if (!v454)
                    {
                      ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                      std::__shared_weak_count::__release_weak(v452);
                    }
                  }
                  v455 = *(std::__shared_weak_count **)(v451 + 16);
                  if (v455)
                  {
                    v456 = (unint64_t *)&v455->__shared_owners_;
                    do
                      v457 = __ldaxr(v456);
                    while (__stlxr(v457 - 1, v456));
                    if (!v457)
                    {
                      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
                      std::__shared_weak_count::__release_weak(v455);
                    }
                  }
                  MEMORY[0x227684CE8](v451, 0x10F0C40B62ED6C6);
                  v458 = v697;
                  v697 = 0;
                  if (v458)
                  {
                    v459 = *(std::__shared_weak_count **)(v458 + 32);
                    if (v459)
                    {
                      v460 = (unint64_t *)&v459->__shared_owners_;
                      do
                        v461 = __ldaxr(v460);
                      while (__stlxr(v461 - 1, v460));
                      if (!v461)
                      {
                        ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                        std::__shared_weak_count::__release_weak(v459);
                      }
                    }
                    v462 = *(std::__shared_weak_count **)(v458 + 16);
                    if (v462)
                    {
                      v463 = (unint64_t *)&v462->__shared_owners_;
                      do
                        v464 = __ldaxr(v463);
                      while (__stlxr(v464 - 1, v463));
                      if (!v464)
                      {
                        ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
                        std::__shared_weak_count::__release_weak(v462);
                      }
                    }
                    MEMORY[0x227684CE8](v458, 0x10F0C40B62ED6C6);
                  }
                }
                v465 = (std::__shared_weak_count *)*((_QWORD *)&v691 + 1);
                if (*((_QWORD *)&v691 + 1))
                {
                  v466 = (unint64_t *)(*((_QWORD *)&v691 + 1) + 8);
                  do
                    v467 = __ldaxr(v466);
                  while (__stlxr(v467 - 1, v466));
                  if (!v467)
                  {
                    ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                    std::__shared_weak_count::__release_weak(v465);
                  }
                }
                v468 = *(std::__shared_weak_count **)&v690[16];
                if (*(_QWORD *)&v690[16])
                {
                  v469 = (unint64_t *)(*(_QWORD *)&v690[16] + 8);
                  do
                    v470 = __ldaxr(v469);
                  while (__stlxr(v470 - 1, v469));
                  if (!v470)
                  {
                    ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                    std::__shared_weak_count::__release_weak(v468);
                  }
                }
                goto LABEL_797;
              }
            }
            memcpy(v347, v634, v346);
            goto LABEL_719;
          }
        }
        memmove(v335, v333, v334);
        goto LABEL_591;
      }
    }
    memmove(v288, v324, v287);
    goto LABEL_571;
  }
LABEL_913:
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v532 = v637;
  v533 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v533 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(info);
    LODWORD(v622) = info[0].numer;
    LODWORD(v623) = info[0].denom;
    *(double *)&qword_255795558 = (double)v622 / (double)v623;
    __cxa_guard_release(&qword_255795560);
    v532 = v637;
  }
  v534 = v663[0];
  v535 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v535 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
    v532 = v637;
  }
  std::mutex::lock(&stru_25578D198);
  qword_25578D1D8 = v534;
  byte_25578D1E0 = 1;
  std::mutex::unlock(&stru_25578D198);
  kdebug_trace();
  if (v663[0])
  {
    *(_QWORD *)object = "cv3d.recon.";
    *(_QWORD *)&object[8] = 11;
    *(_QWORD *)&object[16] = "Stats.Keyframing.count";
    *(_QWORD *)&object[24] = 22;
    sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v536 = sub_2241471F8();
      v537 = v536[2];
      if (!v537)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v537 = v536[2];
      }
      v538 = *(_QWORD *)(v537 + 64);
      v539 = (std::mutex *)(v538 + 32);
      std::mutex::lock((std::mutex *)(v538 + 32));
      v541 = *(_QWORD *)(v538 + 96);
      v540 = *(_QWORD *)(v538 + 104);
      std::mutex::unlock(v539);
      if (v541 != v540)
      {
        v542 = BYTE7(v738);
        v543 = (mach_timebase_info *)info[0];
        sub_2241471F8();
        v544 = v542 >= 0 ? info : v543;
        v545 = (*(uint64_t (**)(uint64_t *, mach_timebase_info *))(qword_2557952E0 + 48))(&qword_2557952E0, v544);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v545 + 24))(v545))
        {
          memset(object, 0, 32);
          *(_DWORD *)&object[32] = 728325608;
          kdebug_trace();
          sub_223822198((double *)&qword_255788F20, v545, v663, "metadata_corrupted");
          kdebug_trace();
        }
      }
    }
    memset(object, 0, 32);
    *(_DWORD *)&object[32] = 728325624;
    kdebug_trace();
    v546 = (mach_timebase_info)BYTE7(v738);
    if (SBYTE7(v738) < 0)
      v546 = info[1];
    if (*(unint64_t *)&v546 >= 0x11)
    {
      v547 = info;
      if (SBYTE7(v738) < 0)
        v547 = (mach_timebase_info *)info[0];
      v548 = *v547;
      v549 = v547[1];
      numer_low = LOBYTE(v547[2].numer);
      if (v548 == 0x6365722E64337663 && v549 == 0x73746174532E6E6FLL && numer_low == 46)
      {
        v553 = sub_223187510();
        if ((SBYTE7(v738) & 0x80u) == 0)
          v554 = info;
        else
          v554 = (mach_timebase_info *)info[0];
        if ((SBYTE7(v738) & 0x80u) == 0)
          v555 = BYTE7(v738);
        else
          v555 = (size_t)info[1];
        sub_223532E4C(v553, v554, v555, (unsigned int *)v663, (uint64_t)"metadata_corrupted", 18);
      }
    }
    kdebug_trace();
    if (SBYTE7(v738) < 0)
      operator delete(*(void **)info);
  }
  v556 = (unsigned __int8 *)v685;
  v557 = (unsigned __int8 *)v686;
  if (v685 != v686)
  {
    do
    {
      sub_2238222D4((float *)v6, v556);
      v556 += 128;
    }
    while (v556 != v557);
  }
  *(_BYTE *)(v6 + 76) = 5;
  sub_223821DD4(&v660);
  if (**(int **)(v660 + 56) <= 3)
  {
    v558 = *(unsigned __int8 *)(v660 + 72);
    v559 = sub_22322F254(v660, "OSLogSurrogateAppender", 1, 0);
    v560 = v559;
    if (v558 || v559 != 0)
    {
      info[0] = (mach_timebase_info)&v660;
      info[1] = (mach_timebase_info)std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v738 = std::chrono::system_clock::now();
      DWORD2(v738) = 3;
      *(_QWORD *)&v739 = "unknown file";
      DWORD2(v739) = 188;
      *(_QWORD *)&v741[0] = 0;
      *(_QWORD *)&v740 = "unknown function";
      *((_QWORD *)&v740 + 1) = 0;
      v562 = **(_QWORD **)info;
      if (*(char *)(**(_QWORD **)info + 39) < 0)
      {
        v564 = *(const char **)(v562 + 16);
        v563 = *(_QWORD *)(v562 + 24);
      }
      else
      {
        v563 = *(unsigned __int8 *)(**(_QWORD **)info + 39);
        v564 = (const char *)(**(_QWORD **)info + 16);
      }
      v649 = **(_QWORD **)info + 16;
      v565 = v686;
      v566 = v685;
      v567 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v567 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v568 = (const char *)&xmmword_255788F40;
      else
        v568 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v569 = byte_255788F57;
      else
        v569 = *((_QWORD *)&xmmword_255788F40 + 1);
      __sc = (char *)v564;
      *(_QWORD *)object = os_log_create(v568, v564);
      v570 = &object[8];
      if (v569 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v569 >= 0x17)
      {
        v645 = v566;
        v571 = v558;
        v572 = (v569 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v569 | 7) != 0x17)
          v572 = v569 | 7;
        v573 = v572 + 1;
        v570 = operator new(v572 + 1);
        *(_QWORD *)&object[24] = v573 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v570;
        *(_QWORD *)&object[16] = v569;
        v558 = v571;
        v566 = v645;
      }
      else
      {
        object[31] = v569;
        if (!v569)
        {
LABEL_973:
          v570[v569] = 0;
          object[32] = 1;
          v574 = &v718;
          if (v563 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v563 >= 0x17)
          {
            v575 = (v563 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v563 | 7) != 0x17)
              v575 = v563 | 7;
            v576 = v575 + 1;
            v574 = operator new(v575 + 1);
            *((_QWORD *)&v719 + 1) = v576 | 0x8000000000000000;
            v718 = v574;
            *(_QWORD *)&v719 = v563;
          }
          else
          {
            HIBYTE(v719) = v563;
            if (!v563)
              goto LABEL_981;
          }
          memmove(v574, __sc, v563);
LABEL_981:
          *((_BYTE *)v574 + v563) = 0;
          LOBYTE(v720) = 1;
          v577 = *(NSObject **)object;
          if (SHIBYTE(v719) < 0)
            operator delete(v718);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          v578 = (v565 - (_BYTE *)v566) >> 7;
          if (v560 && *(_QWORD *)(v560 + 24))
          {
            v579 = _os_log_pack_size();
            v580 = (std::__shared_weak_count_vtbl *)operator new(v579, (std::align_val_t)8uLL);
            v581 = (std::__shared_weak_count *)operator new();
            v582 = v581;
            v581->__shared_owners_ = 0;
            v583 = (unint64_t *)&v581->__shared_owners_;
            v581->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v581->__shared_weak_owners_ = 0;
            v581[1].__vftable = v580;
            *(_QWORD *)object = v580;
            *(_QWORD *)&object[8] = v580;
            *(_QWORD *)&object[16] = v581;
            do
              v584 = __ldxr(v583);
            while (__stxr(v584 + 1, v583));
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)&object[24] = 0;
            v718 = 0;
            do
              v585 = __ldaxr(v583);
            while (__stlxr(v585 - 1, v583));
            if (!v585)
            {
              ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
              std::__shared_weak_count::__release_weak(v582);
            }
            v586 = *(_QWORD *)object;
            v587 = _os_log_pack_fill();
            *(_DWORD *)v587 = 134217984;
            *(_QWORD *)(v587 + 4) = v578;
            v588 = (char *)operator new();
            v589 = *(unsigned __int8 *)(v562 + 39);
            v590 = v649;
            if ((v589 & 0x80u) != 0)
            {
              v590 = *(_QWORD *)(v562 + 16);
              v589 = *(_QWORD *)(v562 + 24);
            }
            *(_QWORD *)v588 = v586;
            *(_OWORD *)(v588 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v588 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v588 + 5) = v590;
            *((_QWORD *)v588 + 6) = v589;
            v588[56] = 1;
            category = 0;
            __src[0] = v588;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v560 + 24) + 40))(*(_QWORD *)(v560 + 24), __src);
            v532 = v637;
            v591 = __src[0];
            __src[0] = 0;
            if (v591)
            {
              v592 = (std::__shared_weak_count *)*((_QWORD *)v591 + 4);
              if (v592)
              {
                v593 = (unint64_t *)&v592->__shared_owners_;
                do
                  v594 = __ldaxr(v593);
                while (__stlxr(v594 - 1, v593));
                if (!v594)
                {
                  ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
                  std::__shared_weak_count::__release_weak(v592);
                }
              }
              v595 = (std::__shared_weak_count *)*((_QWORD *)v591 + 2);
              if (v595)
              {
                v596 = (unint64_t *)&v595->__shared_owners_;
                do
                  v597 = __ldaxr(v596);
                while (__stlxr(v597 - 1, v596));
                if (!v597)
                {
                  ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                  std::__shared_weak_count::__release_weak(v595);
                }
              }
              MEMORY[0x227684CE8](v591, 0x10F0C40B62ED6C6);
              v598 = category;
              category = 0;
              if (v598)
              {
                v599 = (std::__shared_weak_count *)*((_QWORD *)v598 + 4);
                if (v599)
                {
                  v600 = (unint64_t *)&v599->__shared_owners_;
                  do
                    v601 = __ldaxr(v600);
                  while (__stlxr(v601 - 1, v600));
                  if (!v601)
                  {
                    ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                    std::__shared_weak_count::__release_weak(v599);
                  }
                }
                v602 = (std::__shared_weak_count *)*((_QWORD *)v598 + 2);
                if (v602)
                {
                  v603 = (unint64_t *)&v602->__shared_owners_;
                  do
                    v604 = __ldaxr(v603);
                  while (__stlxr(v604 - 1, v603));
                  if (!v604)
                  {
                    ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
                    std::__shared_weak_count::__release_weak(v602);
                  }
                }
                MEMORY[0x227684CE8](v598, 0x10F0C40B62ED6C6);
              }
            }
            v605 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v606 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v607 = __ldaxr(v606);
              while (__stlxr(v607 - 1, v606));
              if (!v607)
              {
                ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
                std::__shared_weak_count::__release_weak(v605);
              }
            }
            v608 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v609 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v610 = __ldaxr(v609);
              while (__stlxr(v610 - 1, v609));
              if (!v610)
              {
                ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
                std::__shared_weak_count::__release_weak(v608);
              }
            }
          }
          else
          {
            os_log_type_enabled(v577, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134217984;
            *(_QWORD *)&object[4] = (v565 - (_BYTE *)v566) >> 7;
            v611 = (void *)_os_log_send_and_compose_impl();
            v532 = v637;
            if (v611)
              free(v611);
          }
          if (v558)
          {
            sub_22322C138((uint64_t)info, "Loaded %lu kfs to database", (v686 - (_BYTE *)v685) >> 7);
            sub_223182C08((uint64_t)info);
          }
          sub_223182C08((uint64_t)info);
          v612 = *(std::__shared_weak_count **)&v741[0];
          if (*(_QWORD *)&v741[0])
          {
            v613 = (unint64_t *)(*(_QWORD *)&v741[0] + 8);
            do
              v614 = __ldaxr(v613);
            while (__stlxr(v614 - 1, v613));
            if (!v614)
            {
              ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
              std::__shared_weak_count::__release_weak(v612);
            }
          }
          goto LABEL_1040;
        }
      }
      memmove(v570, v568, v569);
      goto LABEL_973;
    }
  }
LABEL_1040:
  v615 = (char *)v685;
  v616 = v686;
  memset(object, 0, 24);
  v617 = v686 - (_BYTE *)v685;
  if (v686 == v685)
  {
    v619 = 0;
    v618 = 0uLL;
  }
  else
  {
    if (v617 < 0)
      sub_22316E078();
    *(_QWORD *)object = operator new((unint64_t)v617 >> 3);
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    *(_QWORD *)&object[16] = *(_QWORD *)object + 16 * (v617 >> 7);
    __src[0] = object;
    do
    {
      *(_OWORD *)&info[0].numer = *(_OWORD *)v615;
      sub_2232E9564((char ***)__src, info);
      v615 += 128;
    }
    while (v615 != v616);
    v618 = *(_OWORD *)object;
    v619 = *(_QWORD *)&object[16];
  }
  *(_OWORD *)v532 = v618;
  *(_QWORD *)(v532 + 16) = v619;
  *(_BYTE *)(v532 + 120) = 1;
  v620 = (void **)__p;
  if (__p)
  {
    v621 = (void **)v665;
    v211 = __p;
    if (v665 != __p)
    {
      do
      {
        if (*((char *)v621 - 1) < 0)
          operator delete(*(v621 - 3));
        v621 -= 3;
      }
      while (v621 != v620);
      v211 = __p;
    }
    v665 = (char *)v620;
LABEL_1054:
    operator delete(v211);
  }
LABEL_1055:
  if (v685)
  {
    v686 = (char *)v685;
    operator delete(v685);
  }
}

void sub_223821554(_Unwind_Exception *a1)
{
  void *v2;

  if (LOBYTE(STACK[0x518]) && SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x6A0]);
  sub_223821EC8((void **)&STACK[0x2F8]);
  v2 = (void *)STACK[0x3E8];
  if (!STACK[0x3E8])
    _Unwind_Resume(a1);
  STACK[0x3F0] = (unint64_t)v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_223821DD4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC878))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kf");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC870);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC878);
  }
  *a1 = qword_2540CC870;
}

void sub_223821E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC878);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC878);
  _Unwind_Resume(a1);
}

void **sub_223821EC8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223821F38(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_223845124(v4, "Error listing contents of ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC5B160[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5B148[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5B118[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC5B100[v5])(&v6, v4);
  return result;
}

void sub_223822068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22382207C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223822090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238220A4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC888);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC888))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC880);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC888);
  }
  *a1 = qword_2540CC880;
}

void sub_223822140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC888);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC888);
  _Unwind_Resume(a1);
}

void sub_223822198(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238222B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2238222D4(float *a1, unsigned __int8 *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::logic_error *exception;
  unsigned __int8 *v12;
  std::logic_error *v13;
  std::string v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  if (sub_223340F28(a1, (uint64_t)&v14))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v12 = a2;
    v13 = exception;
    sub_223822678((uint64_t)&v14, v12);
    std::logic_error::logic_error(v13, &v14);
    v13->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v13, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v4 = sub_223845E1C(a1, (uint64_t)a2, &v14);
  v4[2] = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  v7 = *((_OWORD *)a2 + 4);
  v4[5] = *((_OWORD *)a2 + 3);
  v4[6] = v7;
  v4[3] = v5;
  v4[4] = v6;
  v8 = *((_OWORD *)a2 + 5);
  v9 = *((_OWORD *)a2 + 7);
  v4[8] = *((_OWORD *)a2 + 6);
  v4[9] = v9;
  v4[7] = v8;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return sub_223845E1C(a1, (uint64_t)a2, &v14) + 4;
}

void sub_2238223F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

_QWORD *sub_223822434(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  std::string *v5;
  std::string::size_type size;
  std::string v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v8[0] = a2;
  v8[1] = a3;
  v3 = sub_22342DA5C(a1, (uint64_t)v8);
  if (!v3)
  {
    sub_2238227C8("Entry not found ", (unsigned __int8 *)v8);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v7;
    else
      v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    else
      size = v7.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 258, (uint64_t)&unk_224595B55, 0, (uint64_t)v5, size, (void (*)(void **))sub_22457406C);
    std::string::~string(&v7);
    abort();
  }
  return v3 + 4;
}

void sub_2238224F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223822520(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v20[0] = *(_QWORD *)(a1 + 40);
  sub_2232D69F0((unsigned int *)&v16, v20);
  v6 = (v16 | ((unint64_t)BYTE4(v16) << 32) | ((unint64_t)BYTE5(v16) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)BYTE7(v16) << 56) | ((unint64_t)(HIWORD(DWORD1(v16)) & 0xF | 0x40u) << 48);
  v7 = ((unint64_t)BYTE12(v16) << 32) | ((unint64_t)BYTE13(v16) << 40) | DWORD2(v16) & 0xFFFFFF00 | ((unint64_t)HIDWORD(v16) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE14(v16) << 48) | BYTE8(v16) & 0x3F | 0x80;
  v20[0] = v6;
  v20[1] = v7;
  v8 = a2[1];
  v16 = *a2;
  v17 = v8;
  v9 = a2[3];
  v18 = a2[2];
  v19 = v9;
  v10 = *a3;
  v15 = v20;
  v11 = sub_223845E1C((float *)a1, (uint64_t)v20, (_OWORD **)&v15);
  v11[4] = v6;
  v11[5] = v7;
  v12 = v17;
  *((_OWORD *)v11 + 3) = v16;
  *((_OWORD *)v11 + 4) = v12;
  v13 = v19;
  *((_OWORD *)v11 + 5) = v18;
  *((_OWORD *)v11 + 6) = v13;
  v11[14] = v10;
  v11[15] = v10;
  v11[16] = 0;
  v11[17] = 0;
  *((_WORD *)v11 + 72) = 2305;
  *((_BYTE *)v11 + 146) = 0;
  v11[19] = 0;
  *(_QWORD *)&v16 = v20;
  return sub_223845E1C((float *)a1, (uint64_t)v20, (_OWORD **)&v16) + 4;
}

uint64_t sub_223822678(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  char v4;
  _DWORD v5[6];
  int v6;
  _QWORD v7[5];
  _QWORD *v8;

  v6 = 0;
  sub_223846334(v5, "Entry ");
  sub_22319B83C((uint64_t)&v4, (uint64_t)v5, a2);
  v7[0] = v5;
  v7[1] = " already in the database.";
  v7[2] = v5;
  v7[3] = " already in the database.";
  v7[4] = " already in the database.";
  if (v6 == -1)
    sub_22316DD70();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5B130[v6])(&v8, v5);
  if (v6 == -1)
    sub_22316DD70();
  v7[0] = &v8;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5B118[v6])(v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5B100[v6])(v7, v5);
  return result;
}

void sub_223822778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22382278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238227A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238227B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238227C8(char *__s, unsigned __int8 *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_223846924(v4, __s);
  sub_22319B83C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC5B118[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC5B100[v5])(&v7, v4);
  return result;
}

void sub_223822870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223822884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223822898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2238228AC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 __p;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  char v39;
  _DWORD v40[6];
  int v41;
  char v42;
  char *v43;
  _QWORD v44[3];

  v44[2] = *MEMORY[0x24BDAC8D0];
  v44[0] = a2;
  v44[1] = a3;
  v6 = sub_22342DA5C(a1, (uint64_t)v44);
  if (v6)
  {
    v7 = (int8x8_t)a1[1];
    v8 = v6[1];
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v7)
        v8 %= *(_QWORD *)&v7;
    }
    else
    {
      v8 &= *(_QWORD *)&v7 - 1;
    }
    v10 = *(_QWORD **)(*a1 + 8 * v8);
    do
    {
      v11 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10 != v6);
    if (v11 == a1 + 2)
      goto LABEL_46;
    v12 = v11[1];
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v7)
        v12 %= *(_QWORD *)&v7;
    }
    else
    {
      v12 &= *(_QWORD *)&v7 - 1;
    }
    if (v12 != v8)
    {
LABEL_46:
      if (!*v6)
        goto LABEL_47;
      v13 = *(_QWORD *)(*v6 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
      }
      else
      {
        v13 &= *(_QWORD *)&v7 - 1;
      }
      if (v13 != v8)
LABEL_47:
        *(_QWORD *)(*a1 + 8 * v8) = 0;
    }
    v16 = *v6;
    if (*v6)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v17 >= *(_QWORD *)&v7)
          v17 %= *(_QWORD *)&v7;
      }
      else
      {
        v17 &= *(_QWORD *)&v7 - 1;
      }
      if (v17 != v8)
      {
        *(_QWORD *)(*a1 + 8 * v17) = v11;
        v16 = *v6;
      }
    }
    *v11 = v16;
    *v6 = 0;
    --a1[3];
    operator delete(v6);
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v41 = 0;
  sub_223846A14(v40, "Keyframe not found in the database: ");
  sub_22319B83C((uint64_t)&v43, (uint64_t)v40, (unsigned __int8 *)v44);
  if (v41 == -1)
    sub_22316DD70();
  v43 = &v42;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24EC5B118[v41])(v18, &v43, v40);
  if (v41 != -1)
    ((void (*)(char **, _DWORD *))off_24EC5B100[v41])(&v43, v40);
  if (SHIBYTE(v19) < 0)
  {
    sub_223197FA4(__dst, v18[0], (unint64_t)v18[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v18;
    v21 = v19;
  }
  v22 = 1;
  LOBYTE(v23) = 0;
  v27 = 0;
  v28 = 1;
  sub_2231A958C(5u, (__int128 *)__dst, (uint64_t)&v29);
  *(_OWORD *)a4 = v29;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v39)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v14 = v32;
    if (v32)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v31;
      v31 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v38)
    {
      v15 = v35;
      *(_QWORD *)(a4 + 64) = v34;
      *(_OWORD *)(a4 + 48) = v33;
      v33 = 0uLL;
      *(_QWORD *)(a4 + 72) = v15;
      *(_OWORD *)(a4 + 80) = v36;
      *(_QWORD *)(a4 + 96) = v37;
      v34 = 0;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v14 && SHIBYTE(v31) < 0)
      operator delete((void *)__p);
    if (!v28)
      goto LABEL_42;
    goto LABEL_34;
  }
  *(_BYTE *)(a4 + 120) = 0;
  if (v28)
  {
LABEL_34:
    if (v27)
    {
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
    }
    if (v22 && SHIBYTE(v21) < 0)
      operator delete(__dst[0]);
  }
LABEL_42:
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

void sub_223822C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223822CC8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 __p;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  __int128 __dst;
  uint64_t v34;
  char v35;
  std::__fs::filesystem::path v36;
  int v37;
  std::__fs::filesystem::path v38;
  const char *v39;
  const char *v40;
  std::__fs::filesystem::path *v41;
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  v42[0] = a2;
  v42[1] = a3;
  sub_2238228AC(a1, a2, a3, a6);
  if (!*(_BYTE *)(a6 + 120))
    return;
  DWORD2(__p) = 0;
  sub_22319B83C((uint64_t)v11, (uint64_t)&v22, (unsigned __int8 *)v42);
  if (DWORD2(__p) == -1)
    sub_22316DD70();
  v11[0] = &v41;
  ((void (*)(std::__fs::filesystem::path *__return_ptr, void **, __int128 *))off_24EC5B118[DWORD2(__p)])(&v36, v11, &v22);
  if (DWORD2(__p) != -1)
    ((void (*)(void **, __int128 *))off_24EC5B100[DWORD2(__p)])(v11, &v22);
  v38 = v36;
  memset(&v36, 0, sizeof(v36));
  if (*((char *)a4 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    __dst = *a4;
    v34 = *((_QWORD *)a4 + 2);
  }
  sub_22319C30C((uint64_t)&__dst, &v38);
  if (SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v38.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v36.__pn_.__r_.__value_.__l.__data_);
LABEL_10:
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a5 + 176))(a5, &__dst)
    && ((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a5 + 232))(a5, &__dst) & 1) == 0)
  {
    v37 = 0;
    sub_223627500(&v36, "Could not remove keyframe: ");
    sub_22319B83C((uint64_t)&v35, (uint64_t)&v36, (unsigned __int8 *)v42);
    v38.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v38.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)" from: ";
    v38.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&v36;
    v39 = " from: ";
    v40 = " from: ";
    if (v37 == -1)
      sub_22316DD70();
    v41 = &v38;
    ((void (*)(std::__fs::filesystem::path **, std::__fs::filesystem::path *))off_24EC5B148[v37])(&v41, &v36);
    sub_22384465C((uint64_t)&v38, (uint64_t)&v36, (uint64_t)&__dst);
    if (v37 == -1)
      sub_22316DD70();
    v38.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    ((void (*)(void **__return_ptr, std::__fs::filesystem::path *, std::__fs::filesystem::path *))off_24EC5B118[v37])(v11, &v38, &v36);
    if (v37 != -1)
      ((void (*)(std::__fs::filesystem::path *, std::__fs::filesystem::path *))off_24EC5B100[v37])(&v38, &v36);
    if (SHIBYTE(v12) < 0)
    {
      sub_223197FA4(v13, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)v11;
      v14 = v12;
    }
    v15 = 1;
    LOBYTE(v16) = 0;
    v20 = 0;
    v21 = 1;
    sub_2231A958C(5u, (__int128 *)v13, (uint64_t)&v22);
    *(_OWORD *)a6 = v22;
    *(_BYTE *)(a6 + 16) = 0;
    *(_BYTE *)(a6 + 112) = 0;
    if (v32)
    {
      *(_BYTE *)(a6 + 40) = 0;
      v9 = v25;
      if (v25)
      {
        *(_OWORD *)(a6 + 16) = __p;
        *(_QWORD *)(a6 + 32) = v24;
        v24 = 0;
        __p = 0uLL;
        *(_BYTE *)(a6 + 40) = 1;
      }
      *(_BYTE *)(a6 + 48) = 0;
      *(_BYTE *)(a6 + 104) = 0;
      if (v31)
      {
        v10 = v28;
        *(_QWORD *)(a6 + 64) = v27;
        *(_OWORD *)(a6 + 48) = v26;
        v26 = 0uLL;
        *(_QWORD *)(a6 + 72) = v10;
        *(_OWORD *)(a6 + 80) = v29;
        *(_QWORD *)(a6 + 96) = v30;
        v27 = 0;
        v29 = 0uLL;
        v30 = 0;
        *(_BYTE *)(a6 + 104) = 1;
      }
      *(_BYTE *)(a6 + 112) = 1;
      *(_BYTE *)(a6 + 120) = 0;
      if (v9 && SHIBYTE(v24) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a6 + 120) = 0;
    }
    if (v21)
    {
      if (v20)
      {
        if (v19 < 0)
          operator delete(v18);
        if (v17 < 0)
          operator delete(v16);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete(v13[0]);
    }
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  else
  {
    *(_BYTE *)(a6 + 120) = 1;
  }
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__dst);
}

void sub_2238230BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 169) < 0)
  {
    operator delete(*(void **)(v29 - 192));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2238231AC(_QWORD *a1, unint64_t *a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *a2;
  v2 = (uint64_t *)a2[1];
  v4 = 126 - 2 * __clz((uint64_t)((uint64_t)v2 - v3) >> 4);
  v7 = a1;
  if (v2 == (uint64_t *)v3)
    v5 = 0;
  else
    v5 = v4;
  return sub_22383748C(v3, v2, &v7, v5, 1);
}

void sub_2238231F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void **v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t **v134;
  uint64_t **v135;
  uint64_t **v136;
  _QWORD *v137;
  uint64_t **v138;
  _QWORD *v139;
  uint64_t **v140;
  _QWORD *v141;
  uint64_t **v142;
  _QWORD *v143;
  uint64_t **v144;
  _QWORD *v145;
  uint64_t **v146;
  _QWORD *v147;
  uint64_t **v148;
  _QWORD *v149;
  uint64_t **v150;
  _QWORD *v151;
  uint64_t **v152;
  _QWORD *v153;
  uint64_t **v154;
  _QWORD *v155;
  void **v156;
  void **v157;
  void **v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void **v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t *v209;
  char *v210;
  _OWORD *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  void **v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  __int128 *v297;
  uint64_t v298;
  char *v299;
  __int128 *v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 *v306;
  unint64_t v307;
  uint64_t v308;
  __int128 *v309;
  uint64_t v310;
  __int128 *v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 *v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  unint64_t v327;
  uint64_t v328;
  __int128 *v329;
  __int128 *v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  __int128 *v335;
  void *v336;
  size_t v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v342;
  char *__p;
  char *v344;
  uint64_t *v345;
  _BYTE v346[24];
  _BYTE *v347;
  uint64_t *v348;
  _BYTE v349[24];
  _BYTE *v350;
  __int128 *v351;
  __int128 *v352;
  __int128 *v353;
  void **v354;
  _QWORD v355[3];
  _QWORD *v356;
  uint64_t *v357;
  _QWORD v358[3];
  _QWORD *v359;
  uint64_t *v360;
  _QWORD v361[3];
  _QWORD *v362;
  _QWORD v363[3];
  _QWORD *v364;
  uint64_t *v365;
  _QWORD v366[3];
  _QWORD *v367;
  uint64_t *v368;
  _QWORD v369[3];
  _QWORD *v370;
  _QWORD v371[3];
  _QWORD *v372;
  uint64_t *v373;
  _QWORD v374[3];
  _QWORD *v375;
  __int128 *v376;
  _QWORD v377[3];
  _QWORD *v378;
  _QWORD v379[3];
  _QWORD *v380;
  uint64_t *v381;
  _QWORD v382[3];
  _QWORD *v383;
  uint64_t *v384;
  _QWORD v385[3];
  _QWORD *v386;
  _QWORD v387[3];
  _QWORD *v388;
  uint64_t *v389;
  _QWORD v390[3];
  _QWORD *v391;
  uint64_t *v392;
  _QWORD v393[3];
  _QWORD *v394;
  _QWORD v395[3];
  _QWORD *v396;
  uint64_t *v397;
  _QWORD v398[3];
  _QWORD *v399;
  uint64_t *v400;
  _QWORD v401[3];
  _QWORD *v402;
  _QWORD v403[3];
  _QWORD *v404;
  uint64_t *v405;
  _QWORD v406[3];
  _QWORD *v407;
  __int128 *v408;
  _QWORD v409[3];
  _QWORD *v410;
  _QWORD v411[3];
  _QWORD *v412;
  uint64_t *v413;
  _QWORD v414[3];
  _QWORD *v415;
  uint64_t *v416;
  _QWORD v417[3];
  _QWORD *v418;
  _QWORD v419[3];
  _QWORD *v420;
  uint64_t *v421;
  _QWORD v422[3];
  _QWORD *v423;
  uint64_t *v424;
  _QWORD v425[3];
  _QWORD *v426;
  _QWORD v427[3];
  _QWORD *v428;
  uint64_t *v429;
  _QWORD v430[3];
  _QWORD *v431;
  uint64_t *v432;
  _QWORD v433[3];
  _QWORD *v434;
  _QWORD v435[3];
  _QWORD *v436;
  uint64_t *v437;
  _QWORD v438[3];
  _QWORD *v439;
  uint64_t *v440;
  _QWORD v441[3];
  _QWORD *v442;
  _QWORD v443[3];
  _QWORD *v444;
  uint64_t *v445;
  _QWORD v446[3];
  _QWORD *v447;
  uint64_t *v448;
  _QWORD v449[3];
  _QWORD *v450;
  _QWORD v451[3];
  _QWORD *v452;
  uint64_t *v453;
  _QWORD v454[3];
  _QWORD *v455;
  uint64_t *v456;
  _QWORD v457[3];
  _QWORD *v458;
  _QWORD v459[3];
  _QWORD *v460;
  uint64_t *v461;
  _QWORD v462[3];
  _QWORD *v463;
  void *v464;
  void (**v465)(void **, _QWORD *);
  char *v466;
  void **v467;
  _QWORD v468[3];
  _QWORD *v469;
  uint64_t *v470;
  _QWORD v471[3];
  _QWORD *v472;
  uint64_t *v473;
  _QWORD v474[3];
  _QWORD *v475;
  _QWORD v476[3];
  _QWORD *v477;
  uint64_t *v478;
  _QWORD v479[3];
  _QWORD *v480;
  uint64_t *v481;
  _QWORD v482[3];
  _QWORD *v483;
  _QWORD v484[3];
  _QWORD *v485;
  uint64_t *v486;
  _QWORD v487[3];
  _QWORD *v488;
  uint64_t *v489;
  _QWORD v490[3];
  _QWORD *v491;
  _QWORD v492[3];
  _QWORD *v493;
  uint64_t *v494;
  _QWORD v495[3];
  _QWORD *v496;
  uint64_t *v497;
  _QWORD v498[3];
  _QWORD *v499;
  _BYTE v500[24];
  _BYTE *v501;
  uint64_t *v502;
  _BYTE v503[24];
  _BYTE *v504;
  uint64_t *v505;
  _QWORD v506[3];
  _QWORD *v507;
  _BYTE v508[24];
  _BYTE *v509;
  uint64_t *v510;
  _BYTE v511[24];
  _BYTE *v512;
  uint64_t *v513;
  _BYTE v514[24];
  _BYTE *v515;
  _BYTE v516[24];
  _BYTE *v517;
  uint64_t *v518;
  _BYTE v519[24];
  _BYTE *v520;
  _OWORD v521[2];
  void **v522;
  _QWORD v523[3];
  _QWORD *v524;
  uint64_t *v525;
  _QWORD v526[3];
  _QWORD *v527;
  uint64_t v528;

  v528 = *MEMORY[0x24BDAC8D0];
  sub_223840028(&v345, a2, a2);
  v4 = (uint64_t)v347;
  v505 = v345;
  if (!v347)
    goto LABEL_4;
  if (v347 != v346)
  {
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)v347 + 16))();
LABEL_4:
    v507 = (_QWORD *)v4;
    goto LABEL_6;
  }
  v507 = v506;
  (*(void (**)(void))(*(_QWORD *)v347 + 24))();
LABEL_6:
  v5 = (uint64_t)v350;
  v497 = v348;
  v6 = v498;
  if (!v350)
  {
LABEL_9:
    v499 = (_QWORD *)v5;
    goto LABEL_11;
  }
  if (v350 != v349)
  {
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)v350 + 16))();
    goto LABEL_9;
  }
  v499 = v498;
  (*(void (**)(void))(*(_QWORD *)v350 + 24))();
LABEL_11:
  v7 = (uint64_t)v507;
  v489 = v505;
  if (!v507)
  {
LABEL_14:
    v491 = (_QWORD *)v7;
    goto LABEL_16;
  }
  if (v507 != v506)
  {
    v7 = (*(uint64_t (**)(void))(*v507 + 16))();
    goto LABEL_14;
  }
  v491 = v490;
  (*(void (**)(_QWORD *, _QWORD *))(v506[0] + 24))(v506, v490);
LABEL_16:
  v8 = (uint64_t)v499;
  v481 = v497;
  v9 = v482;
  if (!v499)
  {
LABEL_19:
    v483 = (_QWORD *)v8;
    goto LABEL_21;
  }
  if (v499 != v498)
  {
    v8 = (*(uint64_t (**)(void))(*v499 + 16))();
    goto LABEL_19;
  }
  v483 = v482;
  (*(void (**)(_QWORD *, _QWORD *))(v498[0] + 24))(v498, v482);
LABEL_21:
  v342 = a3;
  sub_22383FD44((uint64_t **)v521, &v489, &v481);
  v10 = (uint64_t)v499;
  v456 = v497;
  v11 = v457;
  if (!v499)
  {
    v458 = 0;
    v448 = v497;
    v12 = v449;
LABEL_29:
    v450 = (_QWORD *)v10;
    goto LABEL_30;
  }
  if (v499 == v498)
  {
    v458 = v457;
    (*(void (**)(_QWORD *, _QWORD *))(v498[0] + 24))(v498, v457);
  }
  else
  {
    v458 = (_QWORD *)(*(uint64_t (**)(void))(*v499 + 16))();
  }
  v10 = (uint64_t)v499;
  v448 = v497;
  v12 = v449;
  if (!v499)
    goto LABEL_29;
  if (v499 != v498)
  {
    v10 = (*(uint64_t (**)(void))(*v499 + 16))();
    goto LABEL_29;
  }
  v450 = v449;
  (*(void (**)(_QWORD *, _QWORD *))(v498[0] + 24))(v498, v449);
LABEL_30:
  sub_22383FD44(&v513, &v456, &v448);
  v464 = *(void **)&v521[0];
  v13 = &v464;
  v14 = (void **)&v465;
  if (!v522)
  {
LABEL_33:
    v13[4] = 0;
    goto LABEL_35;
  }
  v13 = (void **)v521;
  if (v522 != (void **)((char *)v521 + 8))
  {
    v467 = v522;
    goto LABEL_33;
  }
  v467 = (void **)&v465;
  (*(void (**)(void))(*((_QWORD *)&v521[0] + 1) + 24))();
LABEL_35:
  v15 = &v464;
  v16 = v468;
  if (!v524)
  {
LABEL_38:
    v15[8] = 0;
    goto LABEL_40;
  }
  v15 = (void **)v521;
  if (v524 != v523)
  {
    v469 = v524;
    goto LABEL_38;
  }
  v469 = v468;
  (*(void (**)(void))(v523[0] + 24))();
LABEL_40:
  v470 = v525;
  v17 = &v464;
  v18 = v471;
  if (!v527)
  {
LABEL_43:
    v17[13] = 0;
    goto LABEL_45;
  }
  v17 = (void **)v521;
  if (v527 != v526)
  {
    v472 = v527;
    goto LABEL_43;
  }
  v472 = v471;
  (*(void (**)(void))(v526[0] + 24))();
LABEL_45:
  v473 = v513;
  v19 = v474;
  if (v515)
  {
    if (v515 == v514)
    {
      v475 = v474;
      (*(void (**)(void))(*(_QWORD *)v515 + 24))();
    }
    else
    {
      v475 = v515;
      v515 = 0;
    }
  }
  else
  {
    v475 = 0;
  }
  v20 = v476;
  if (v517)
  {
    if (v517 == v516)
    {
      v477 = v476;
      (*(void (**)(void))(*(_QWORD *)v517 + 24))();
    }
    else
    {
      v477 = v517;
      v517 = 0;
    }
  }
  else
  {
    v477 = 0;
  }
  v478 = v518;
  v21 = v479;
  if (v520)
  {
    if (v520 == v519)
    {
      v480 = v479;
      (*(void (**)(void))(*(_QWORD *)v520 + 24))();
    }
    else
    {
      v480 = v520;
      v520 = 0;
    }
  }
  else
  {
    v480 = 0;
  }
  v22 = v520;
  if (v520 == v519)
  {
    v23 = 4;
    v22 = v519;
  }
  else
  {
    if (!v520)
      goto LABEL_65;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_65:
  v24 = v517;
  if (v517 == v516)
  {
    v25 = 4;
    v24 = v516;
  }
  else
  {
    if (!v517)
      goto LABEL_70;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_70:
  v26 = v515;
  if (v515 == v514)
  {
    v27 = 4;
    v26 = v514;
  }
  else
  {
    if (!v515)
      goto LABEL_75;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_75:
  if (v450 == v449)
  {
    v28 = 4;
  }
  else
  {
    if (!v450)
      goto LABEL_80;
    v28 = 5;
    v12 = v450;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v28))(v12);
LABEL_80:
  if (v458 == v457)
  {
    v30 = 4;
    v29 = v506;
  }
  else
  {
    v29 = v506;
    if (!v458)
      goto LABEL_85;
    v30 = 5;
    v11 = v458;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v30))(v11);
LABEL_85:
  v31 = v527;
  if (v527 == v526)
  {
    v32 = 4;
    v31 = v526;
  }
  else
  {
    if (!v527)
      goto LABEL_90;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_90:
  v33 = v524;
  if (v524 == v523)
  {
    v34 = 4;
    v33 = v523;
  }
  else
  {
    if (!v524)
      goto LABEL_95;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_95:
  v35 = v522;
  if (v522 == (void **)((char *)v521 + 8))
  {
    v36 = 4;
    v35 = (void **)v521 + 1;
  }
  else
  {
    if (!v522)
      goto LABEL_100;
    v36 = 5;
  }
  (*((void (**)(void))*v35 + v36))();
LABEL_100:
  if (v483 == v482)
  {
    v37 = 4;
  }
  else
  {
    if (!v483)
      goto LABEL_105;
    v37 = 5;
    v9 = v483;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v37))(v9);
LABEL_105:
  v38 = v490;
  if (v491 == v490)
  {
    v39 = 4;
  }
  else
  {
    if (!v491)
      goto LABEL_110;
    v39 = 5;
    v38 = v491;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_110:
  if (v499 == v498)
  {
    v40 = 4;
  }
  else
  {
    if (!v499)
      goto LABEL_115;
    v40 = 5;
    v6 = v499;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v40))(v6);
LABEL_115:
  if (v507 == v506)
  {
    v41 = 4;
  }
  else
  {
    if (!v507)
      goto LABEL_120;
    v41 = 5;
    v29 = v507;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v41))(v29);
LABEL_120:
  v351 = (__int128 *)v464;
  v42 = (void **)&v351;
  if (!v467)
  {
LABEL_123:
    v42[4] = 0;
    goto LABEL_125;
  }
  if (v467 != (void **)&v465)
  {
    v42 = &v464;
    v354 = v467;
    goto LABEL_123;
  }
  v354 = (void **)&v352;
  ((void (**)(void **, __int128 **))v465)[3]((void **)&v465, &v352);
LABEL_125:
  v43 = (void **)&v351;
  if (!v469)
  {
LABEL_128:
    v43[8] = 0;
    goto LABEL_130;
  }
  if (v469 != v468)
  {
    v43 = &v464;
    v356 = v469;
    goto LABEL_128;
  }
  v356 = v355;
  (*(void (**)(_QWORD *, _QWORD *))(v468[0] + 24))(v468, v355);
LABEL_130:
  v357 = v470;
  v44 = (void **)&v351;
  if (!v472)
  {
LABEL_133:
    v44[13] = 0;
    goto LABEL_135;
  }
  if (v472 != v471)
  {
    v44 = &v464;
    v359 = v472;
    goto LABEL_133;
  }
  v359 = v358;
  (*(void (**)(_QWORD *, _QWORD *))(v471[0] + 24))(v471, v358);
LABEL_135:
  v360 = v473;
  v45 = (void **)&v351;
  if (!v475)
  {
LABEL_138:
    v45[18] = 0;
    goto LABEL_140;
  }
  if (v475 != v474)
  {
    v45 = &v464;
    v362 = v475;
    goto LABEL_138;
  }
  v362 = v361;
  (*(void (**)(_QWORD *, _QWORD *))(v474[0] + 24))(v474, v361);
LABEL_140:
  v46 = (void **)&v351;
  if (!v477)
  {
LABEL_143:
    v46[22] = 0;
    goto LABEL_145;
  }
  if (v477 != v476)
  {
    v46 = &v464;
    v364 = v477;
    goto LABEL_143;
  }
  v364 = v363;
  (*(void (**)(_QWORD *, _QWORD *))(v476[0] + 24))(v476, v363);
LABEL_145:
  v365 = v478;
  v47 = (void **)&v351;
  if (!v480)
  {
LABEL_148:
    v47[27] = 0;
    goto LABEL_150;
  }
  if (v480 != v479)
  {
    v47 = &v464;
    v367 = v480;
    goto LABEL_148;
  }
  v367 = v366;
  (*(void (**)(_QWORD *, _QWORD *))(v479[0] + 24))(v479, v366);
LABEL_150:
  if (v480 == v479)
  {
    v48 = 4;
  }
  else
  {
    if (!v480)
      goto LABEL_155;
    v48 = 5;
    v21 = v480;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v48))(v21);
LABEL_155:
  if (v477 == v476)
  {
    v49 = 4;
  }
  else
  {
    if (!v477)
      goto LABEL_160;
    v49 = 5;
    v20 = v477;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v49))(v20);
LABEL_160:
  if (v475 == v474)
  {
    v50 = 4;
  }
  else
  {
    if (!v475)
      goto LABEL_165;
    v50 = 5;
    v19 = v475;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v50))(v19);
LABEL_165:
  if (v472 == v471)
  {
    v51 = 4;
  }
  else
  {
    if (!v472)
      goto LABEL_170;
    v51 = 5;
    v18 = v472;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v51))(v18);
LABEL_170:
  if (v469 == v468)
  {
    v52 = 4;
  }
  else
  {
    if (!v469)
      goto LABEL_175;
    v52 = 5;
    v16 = v469;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v52))(v16);
LABEL_175:
  if (v467 == (void **)&v465)
  {
    v53 = 4;
  }
  else
  {
    if (!v467)
      goto LABEL_180;
    v53 = 5;
    v14 = v467;
  }
  (*((void (**)(void **))*v14 + v53))(v14);
LABEL_180:
  v54 = (uint64_t)v354;
  v376 = v351;
  if (!v354)
  {
LABEL_183:
    v378 = (_QWORD *)v54;
    goto LABEL_185;
  }
  if (v354 != (void **)&v352)
  {
    v54 = (*((uint64_t (**)(void))*v354 + 2))();
    goto LABEL_183;
  }
  v378 = v377;
  (*((void (**)(__int128 **, _QWORD *))v352 + 3))(&v352, v377);
LABEL_185:
  v55 = (uint64_t)v356;
  if (!v356)
  {
LABEL_188:
    v380 = (_QWORD *)v55;
    goto LABEL_190;
  }
  if (v356 != v355)
  {
    v55 = (*(uint64_t (**)(void))(*v356 + 16))();
    goto LABEL_188;
  }
  v380 = v379;
  (*(void (**)(_QWORD *, _QWORD *))(v355[0] + 24))(v355, v379);
LABEL_190:
  v56 = (uint64_t)v359;
  v381 = v357;
  if (!v359)
  {
LABEL_193:
    v383 = (_QWORD *)v56;
    goto LABEL_195;
  }
  if (v359 != v358)
  {
    v56 = (*(uint64_t (**)(void))(*v359 + 16))();
    goto LABEL_193;
  }
  v383 = v382;
  (*(void (**)(_QWORD *, _QWORD *))(v358[0] + 24))(v358, v382);
LABEL_195:
  v57 = (uint64_t)v362;
  v368 = v360;
  if (!v362)
  {
LABEL_198:
    v370 = (_QWORD *)v57;
    goto LABEL_200;
  }
  if (v362 != v361)
  {
    v57 = (*(uint64_t (**)(void))(*v362 + 16))();
    goto LABEL_198;
  }
  v370 = v369;
  (*(void (**)(_QWORD *, _QWORD *))(v361[0] + 24))(v361, v369);
LABEL_200:
  v58 = (uint64_t)v364;
  if (!v364)
  {
LABEL_203:
    v372 = (_QWORD *)v58;
    goto LABEL_205;
  }
  if (v364 != v363)
  {
    v58 = (*(uint64_t (**)(void))(*v364 + 16))();
    goto LABEL_203;
  }
  v372 = v371;
  (*(void (**)(_QWORD *))(v363[0] + 24))(v363);
LABEL_205:
  v59 = (uint64_t)v367;
  v373 = v365;
  if (!v367)
  {
LABEL_208:
    v375 = (_QWORD *)v59;
    goto LABEL_210;
  }
  if (v367 != v366)
  {
    v59 = (*(uint64_t (**)(void))(*v367 + 16))();
    goto LABEL_208;
  }
  v375 = v374;
  (*(void (**)(_QWORD *))(v366[0] + 24))(v366);
LABEL_210:
  v344 = 0;
  __p = 0;
  v60 = (uint64_t)v378;
  v408 = v376;
  v61 = v409;
  if (!v378)
  {
LABEL_213:
    v410 = (_QWORD *)v60;
    goto LABEL_215;
  }
  if (v378 != v377)
  {
    v60 = (*(uint64_t (**)(void))(*v378 + 16))();
    goto LABEL_213;
  }
  v410 = v409;
  (*(void (**)(_QWORD *, _QWORD *))(v377[0] + 24))(v377, v409);
LABEL_215:
  v62 = v411;
  v63 = (uint64_t)v380;
  if (!v380)
  {
LABEL_218:
    v412 = (_QWORD *)v63;
    goto LABEL_220;
  }
  if (v380 != v379)
  {
    v63 = (*(uint64_t (**)(void))(*v380 + 16))();
    goto LABEL_218;
  }
  v412 = v411;
  (*(void (**)(_QWORD *, _QWORD *))(v379[0] + 24))(v379, v411);
LABEL_220:
  v64 = (uint64_t)v383;
  v413 = v381;
  if (!v383)
  {
LABEL_223:
    v415 = (_QWORD *)v64;
    goto LABEL_225;
  }
  if (v383 != v382)
  {
    v64 = (*(uint64_t (**)(void))(*v383 + 16))();
    goto LABEL_223;
  }
  v415 = v414;
  (*(void (**)(_QWORD *, _QWORD *))(v382[0] + 24))(v382, v414);
LABEL_225:
  v65 = (uint64_t)v370;
  v400 = v368;
  if (!v370)
  {
LABEL_228:
    v402 = (_QWORD *)v65;
    goto LABEL_230;
  }
  if (v370 != v369)
  {
    v65 = (*(uint64_t (**)(void))(*v370 + 16))();
    goto LABEL_228;
  }
  v402 = v401;
  (*(void (**)(_QWORD *, _QWORD *))(v369[0] + 24))(v369, v401);
LABEL_230:
  v66 = (uint64_t)v372;
  if (!v372)
  {
LABEL_233:
    v404 = (_QWORD *)v66;
    goto LABEL_235;
  }
  if (v372 != v371)
  {
    v66 = (*(uint64_t (**)(void))(*v372 + 16))();
    goto LABEL_233;
  }
  v404 = v403;
  (*(void (**)(_QWORD *))(v371[0] + 24))(v371);
LABEL_235:
  v67 = (uint64_t)v375;
  v405 = v373;
  v68 = v406;
  if (!v375)
  {
LABEL_238:
    v407 = (_QWORD *)v67;
    goto LABEL_240;
  }
  if (v375 != v374)
  {
    v67 = (*(uint64_t (**)(void))(*v375 + 16))();
    goto LABEL_238;
  }
  v407 = v406;
  (*(void (**)(_QWORD *, _QWORD *))(v374[0] + 24))(v374, v406);
LABEL_240:
  v69 = (uint64_t)v410;
  v464 = v408;
  v70 = (void **)&v465;
  if (!v410)
  {
LABEL_243:
    v467 = (void **)v69;
    goto LABEL_245;
  }
  if (v410 != v409)
  {
    v69 = (*(uint64_t (**)(void))(*v410 + 16))();
    goto LABEL_243;
  }
  v467 = (void **)&v465;
  (*(void (**)(_QWORD *, void **))(v409[0] + 24))(v409, (void **)&v465);
LABEL_245:
  v71 = v468;
  v72 = (uint64_t)v412;
  if (!v412)
  {
LABEL_248:
    v469 = (_QWORD *)v72;
    goto LABEL_250;
  }
  if (v412 != v411)
  {
    v72 = (*(uint64_t (**)(void))(*v412 + 16))();
    goto LABEL_248;
  }
  v469 = v468;
  (*(void (**)(_QWORD *, _QWORD *))(v411[0] + 24))(v411, v468);
LABEL_250:
  v73 = (uint64_t)v415;
  v470 = v413;
  v74 = v471;
  if (!v415)
  {
LABEL_253:
    v472 = (_QWORD *)v73;
    goto LABEL_255;
  }
  if (v415 != v414)
  {
    v73 = (*(uint64_t (**)(void))(*v415 + 16))();
    goto LABEL_253;
  }
  v472 = v471;
  (*(void (**)(_QWORD *, _QWORD *))(v414[0] + 24))(v414, v471);
LABEL_255:
  v75 = (uint64_t)v402;
  *(_QWORD *)&v521[0] = v400;
  v76 = (void **)v521 + 1;
  if (!v402)
  {
LABEL_258:
    v522 = (void **)v75;
    goto LABEL_260;
  }
  if (v402 != v401)
  {
    v75 = (*(uint64_t (**)(void))(*v402 + 16))();
    goto LABEL_258;
  }
  v522 = (void **)v521 + 1;
  (*(void (**)(_QWORD *, char *))(v401[0] + 24))(v401, (char *)v521 + 8);
LABEL_260:
  v77 = v523;
  v78 = (uint64_t)v404;
  if (!v404)
  {
LABEL_263:
    v524 = (_QWORD *)v78;
    goto LABEL_265;
  }
  if (v404 != v403)
  {
    v78 = (*(uint64_t (**)(void))(*v404 + 16))();
    goto LABEL_263;
  }
  v524 = v523;
  (*(void (**)(_QWORD *, _QWORD *))(v403[0] + 24))(v403, v523);
LABEL_265:
  v79 = (uint64_t)v407;
  v525 = v405;
  v80 = v526;
  if (!v407)
  {
LABEL_268:
    v527 = (_QWORD *)v79;
    goto LABEL_270;
  }
  if (v407 != v406)
  {
    v79 = (*(uint64_t (**)(void))(*v407 + 16))();
    goto LABEL_268;
  }
  v527 = v526;
  (*(void (**)(_QWORD *, _QWORD *))(v406[0] + 24))(v406, v526);
LABEL_270:
  v81 = (uint64_t *)v464;
  v82 = *(uint64_t **)&v521[0];
  if (v464 == *(void **)&v521[0])
  {
    v83 = 0;
  }
  else
  {
    v83 = 0;
    do
    {
      v81 = (uint64_t *)*v81;
      v464 = v81;
      if (v81 != v470)
      {
        do
        {
          if (!v467 || (v84 = (*((uint64_t (**)(void **, uint64_t *))*v467 + 6))(v467, v81 + 2), !v469))
            sub_223198474();
          v85 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v469 + 48))(v469, v84);
          v81 = (uint64_t *)v464;
          if ((v85 & 1) != 0)
            break;
          v81 = *(uint64_t **)v464;
          v464 = v81;
        }
        while (v81 != v470);
        v82 = *(uint64_t **)&v521[0];
      }
      ++v83;
    }
    while (v81 != v82);
  }
  if (v527 == v526)
  {
    v86 = 4;
  }
  else
  {
    if (!v527)
      goto LABEL_286;
    v86 = 5;
    v80 = v527;
  }
  (*(void (**)(_QWORD *))(*v80 + 8 * v86))(v80);
LABEL_286:
  if (v524 == v523)
  {
    v87 = 4;
  }
  else
  {
    if (!v524)
      goto LABEL_291;
    v87 = 5;
    v77 = v524;
  }
  (*(void (**)(_QWORD *))(*v77 + 8 * v87))(v77);
LABEL_291:
  if (v522 == (void **)((char *)v521 + 8))
  {
    v90 = 4;
    v88 = v414;
    v89 = v403;
  }
  else
  {
    v88 = v414;
    v89 = v403;
    if (!v522)
      goto LABEL_296;
    v90 = 5;
    v76 = v522;
  }
  (*((void (**)(void **))*v76 + v90))(v76);
LABEL_296:
  if (v472 == v471)
  {
    v92 = 4;
    v91 = v382;
  }
  else
  {
    v91 = v382;
    if (!v472)
      goto LABEL_301;
    v92 = 5;
    v74 = v472;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v92))(v74);
LABEL_301:
  if (v469 == v468)
  {
    v94 = 4;
    v93 = v379;
  }
  else
  {
    v93 = v379;
    if (!v469)
      goto LABEL_306;
    v94 = 5;
    v71 = v469;
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v94))(v71);
LABEL_306:
  if (v467 == (void **)&v465)
  {
    v96 = 4;
    v95 = v377;
  }
  else
  {
    v95 = v377;
    if (!v467)
      goto LABEL_311;
    v96 = 5;
    v70 = v467;
  }
  (*((void (**)(void **))*v70 + v96))(v70);
LABEL_311:
  if (v407 == v406)
  {
    v98 = 4;
    v97 = v358;
  }
  else
  {
    v97 = v358;
    if (!v407)
      goto LABEL_316;
    v98 = 5;
    v68 = v407;
  }
  (*(void (**)(_QWORD *))(*v68 + 8 * v98))(v68);
LABEL_316:
  if (v404 == v403)
  {
    v100 = 4;
    v99 = v361;
  }
  else
  {
    v99 = v361;
    if (!v404)
      goto LABEL_321;
    v100 = 5;
    v89 = v404;
  }
  (*(void (**)(_QWORD *))(*v89 + 8 * v100))(v89);
LABEL_321:
  v101 = v401;
  if (v402 == v401)
  {
    v102 = 4;
  }
  else
  {
    if (!v402)
      goto LABEL_326;
    v102 = 5;
    v101 = v402;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_326:
  if (v415 == v414)
  {
    v103 = 4;
  }
  else
  {
    if (!v415)
      goto LABEL_331;
    v103 = 5;
    v88 = v415;
  }
  (*(void (**)(_QWORD *))(*v88 + 8 * v103))(v88);
LABEL_331:
  if (v412 == v411)
  {
    v104 = 4;
  }
  else
  {
    if (!v412)
      goto LABEL_336;
    v104 = 5;
    v62 = v412;
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v104))(v62);
LABEL_336:
  if (v410 == v409)
  {
    v105 = 4;
  }
  else
  {
    if (!v410)
      goto LABEL_341;
    v105 = 5;
    v61 = v410;
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v105))(v61);
LABEL_341:
  v106 = (uint64_t)v378;
  v392 = (uint64_t *)v376;
  if (!v378)
  {
LABEL_344:
    v394 = (_QWORD *)v106;
    goto LABEL_346;
  }
  if (v378 != v377)
  {
    v106 = (*(uint64_t (**)(void))(*v378 + 16))();
    goto LABEL_344;
  }
  v394 = v393;
  (*(void (**)(_QWORD *, _QWORD *))(v377[0] + 24))(v377, v393);
LABEL_346:
  v107 = (uint64_t)v380;
  if (!v380)
  {
LABEL_349:
    v396 = (_QWORD *)v107;
    goto LABEL_351;
  }
  if (v380 != v379)
  {
    v107 = (*(uint64_t (**)(void))(*v380 + 16))();
    goto LABEL_349;
  }
  v396 = v395;
  (*(void (**)(_QWORD *))(v379[0] + 24))(v379);
LABEL_351:
  v108 = v398;
  v109 = (uint64_t)v383;
  v397 = v381;
  if (!v383)
  {
LABEL_354:
    v399 = (_QWORD *)v109;
    goto LABEL_356;
  }
  if (v383 != v382)
  {
    v109 = (*(uint64_t (**)(void))(*v383 + 16))();
    goto LABEL_354;
  }
  v399 = v398;
  (*(void (**)(_QWORD *, _QWORD *))(v382[0] + 24))(v382, v398);
LABEL_356:
  v110 = (uint64_t)v370;
  v384 = v368;
  v111 = v385;
  if (!v370)
  {
LABEL_359:
    v386 = (_QWORD *)v110;
    goto LABEL_361;
  }
  if (v370 != v369)
  {
    v110 = (*(uint64_t (**)(void))(*v370 + 16))();
    goto LABEL_359;
  }
  v386 = v385;
  (*(void (**)(_QWORD *, _QWORD *))(v369[0] + 24))(v369, v385);
LABEL_361:
  v112 = v387;
  v113 = (uint64_t)v372;
  if (!v372)
  {
LABEL_364:
    v388 = (_QWORD *)v113;
    goto LABEL_366;
  }
  if (v372 != v371)
  {
    v113 = (*(uint64_t (**)(void))(*v372 + 16))();
    goto LABEL_364;
  }
  v388 = v387;
  (*(void (**)(_QWORD *, _QWORD *))(v371[0] + 24))(v371, v387);
LABEL_366:
  v114 = (uint64_t)v375;
  v389 = v373;
  if (!v375)
  {
LABEL_369:
    v391 = (_QWORD *)v114;
    goto LABEL_371;
  }
  if (v375 != v374)
  {
    v114 = (*(uint64_t (**)(void))(*v375 + 16))();
    goto LABEL_369;
  }
  v391 = v390;
  (*(void (**)(_QWORD *, _QWORD *))(v374[0] + 24))(v374, v390);
LABEL_371:
  if (!v83)
    goto LABEL_835;
  if (v83 >> 57)
    sub_22316E078();
  v115 = (char *)operator new(v83 << 7);
  __p = v115;
  v116 = (uint64_t)v394;
  v424 = v392;
  if (!v394)
    goto LABEL_376;
  if (v394 != v393)
  {
    v116 = (*(uint64_t (**)(void))(*v394 + 16))();
LABEL_376:
    v426 = (_QWORD *)v116;
    goto LABEL_379;
  }
  v426 = v425;
  (*(void (**)(_QWORD *, _QWORD *))(v393[0] + 24))(v393, v425);
LABEL_379:
  v117 = (uint64_t)v396;
  if (!v396)
  {
LABEL_382:
    v428 = (_QWORD *)v117;
    goto LABEL_384;
  }
  if (v396 != v395)
  {
    v117 = (*(uint64_t (**)(void))(*v396 + 16))();
    goto LABEL_382;
  }
  v428 = v427;
  (*(void (**)(_QWORD *, _QWORD *))(v395[0] + 24))(v395, v427);
LABEL_384:
  v118 = (uint64_t)v399;
  v429 = v397;
  if (!v399)
  {
LABEL_387:
    v431 = (_QWORD *)v118;
    goto LABEL_389;
  }
  if (v399 != v398)
  {
    v118 = (*(uint64_t (**)(void))(*v399 + 16))();
    goto LABEL_387;
  }
  v431 = v430;
  (*(void (**)(_QWORD *, _QWORD *))(v398[0] + 24))(v398, v430);
LABEL_389:
  v119 = (uint64_t)v386;
  v416 = v384;
  if (!v386)
  {
LABEL_392:
    v418 = (_QWORD *)v119;
    goto LABEL_394;
  }
  if (v386 != v385)
  {
    v119 = (*(uint64_t (**)(void))(*v386 + 16))();
    goto LABEL_392;
  }
  v418 = v417;
  (*(void (**)(_QWORD *, _QWORD *))(v385[0] + 24))(v385, v417);
LABEL_394:
  v340 = v115;
  v120 = (uint64_t)v388;
  if (!v388)
  {
LABEL_397:
    v420 = (_QWORD *)v120;
    goto LABEL_399;
  }
  if (v388 != v387)
  {
    v120 = (*(uint64_t (**)(void))(*v388 + 16))();
    goto LABEL_397;
  }
  v420 = v419;
  (*(void (**)(_QWORD *, _QWORD *))(v387[0] + 24))(v387, v419);
LABEL_399:
  v121 = (uint64_t)v391;
  v421 = v389;
  if (!v391)
  {
LABEL_402:
    v423 = (_QWORD *)v121;
    goto LABEL_404;
  }
  if (v391 != v390)
  {
    v121 = (*(uint64_t (**)(void))(*v391 + 16))();
    goto LABEL_402;
  }
  v423 = v422;
  (*(void (**)(_QWORD *, _QWORD *))(v390[0] + 24))(v390, v422);
LABEL_404:
  v122 = (uint64_t)v426;
  v440 = v424;
  if (!v426)
  {
LABEL_407:
    v442 = (_QWORD *)v122;
    goto LABEL_409;
  }
  if (v426 != v425)
  {
    v122 = (*(uint64_t (**)(void))(*v426 + 16))();
    goto LABEL_407;
  }
  v442 = v441;
  (*(void (**)(_QWORD *))(v425[0] + 24))(v425);
LABEL_409:
  v123 = (uint64_t)v428;
  if (!v428)
  {
LABEL_412:
    v444 = (_QWORD *)v123;
    goto LABEL_414;
  }
  if (v428 != v427)
  {
    v123 = (*(uint64_t (**)(void))(*v428 + 16))();
    goto LABEL_412;
  }
  v444 = v443;
  (*(void (**)(_QWORD *))(v427[0] + 24))(v427);
LABEL_414:
  v124 = (uint64_t)v431;
  v445 = v429;
  if (!v431)
  {
LABEL_417:
    v447 = (_QWORD *)v124;
    goto LABEL_419;
  }
  if (v431 != v430)
  {
    v124 = (*(uint64_t (**)(void))(*v431 + 16))();
    goto LABEL_417;
  }
  v447 = v446;
  (*(void (**)(_QWORD *))(v430[0] + 24))(v430);
LABEL_419:
  v125 = (uint64_t)v418;
  v432 = v416;
  if (!v418)
  {
LABEL_422:
    v434 = (_QWORD *)v125;
    goto LABEL_424;
  }
  if (v418 != v417)
  {
    v125 = (*(uint64_t (**)(void))(*v418 + 16))();
    goto LABEL_422;
  }
  v434 = v433;
  (*(void (**)(_QWORD *))(v417[0] + 24))(v417);
LABEL_424:
  v126 = (uint64_t)v420;
  if (!v420)
  {
LABEL_427:
    v436 = (_QWORD *)v126;
    goto LABEL_429;
  }
  if (v420 != v419)
  {
    v126 = (*(uint64_t (**)(void))(*v420 + 16))();
    goto LABEL_427;
  }
  v436 = v435;
  (*(void (**)(_QWORD *))(v419[0] + 24))(v419);
LABEL_429:
  v127 = (uint64_t)v423;
  v437 = v421;
  if (!v423)
  {
LABEL_432:
    v439 = (_QWORD *)v127;
    goto LABEL_434;
  }
  if (v423 != v422)
  {
    v127 = (*(uint64_t (**)(void))(*v423 + 16))();
    goto LABEL_432;
  }
  v439 = v438;
  (*(void (**)(_QWORD *))(v422[0] + 24))(v422);
LABEL_434:
  v128 = (uint64_t)v442;
  v456 = v440;
  if (!v442)
  {
LABEL_437:
    v458 = (_QWORD *)v128;
    goto LABEL_439;
  }
  if (v442 != v441)
  {
    v128 = (*(uint64_t (**)(void))(*v442 + 16))();
    goto LABEL_437;
  }
  v458 = v457;
  (*(void (**)(_QWORD *))(v441[0] + 24))(v441);
LABEL_439:
  v129 = (uint64_t)v444;
  if (!v444)
  {
LABEL_442:
    v460 = (_QWORD *)v129;
    goto LABEL_444;
  }
  if (v444 != v443)
  {
    v129 = (*(uint64_t (**)(void))(*v444 + 16))();
    goto LABEL_442;
  }
  v460 = v459;
  (*(void (**)(_QWORD *))(v443[0] + 24))(v443);
LABEL_444:
  v130 = (uint64_t)v447;
  v461 = v445;
  if (!v447)
  {
LABEL_447:
    v463 = (_QWORD *)v130;
    goto LABEL_449;
  }
  if (v447 != v446)
  {
    v130 = (*(uint64_t (**)(void))(*v447 + 16))();
    goto LABEL_447;
  }
  v463 = v462;
  (*(void (**)(_QWORD *))(v446[0] + 24))(v446);
LABEL_449:
  v131 = (uint64_t)v434;
  v448 = v432;
  if (!v434)
  {
LABEL_452:
    v450 = (_QWORD *)v131;
    goto LABEL_454;
  }
  if (v434 != v433)
  {
    v131 = (*(uint64_t (**)(void))(*v434 + 16))();
    goto LABEL_452;
  }
  v450 = v449;
  (*(void (**)(_QWORD *))(v433[0] + 24))(v433);
LABEL_454:
  v132 = (uint64_t)v436;
  if (!v436)
  {
LABEL_457:
    v452 = (_QWORD *)v132;
    goto LABEL_459;
  }
  if (v436 != v435)
  {
    v132 = (*(uint64_t (**)(void))(*v436 + 16))();
    goto LABEL_457;
  }
  v452 = v451;
  (*(void (**)(_QWORD *))(v435[0] + 24))(v435);
LABEL_459:
  v133 = (uint64_t)v439;
  v453 = v437;
  if (!v439)
  {
LABEL_462:
    v455 = (_QWORD *)v133;
    goto LABEL_464;
  }
  if (v439 != v438)
  {
    v133 = (*(uint64_t (**)(void))(*v439 + 16))();
    goto LABEL_462;
  }
  v455 = v454;
  (*(void (**)(_QWORD *))(v438[0] + 24))(v438);
LABEL_464:
  v489 = v456;
  v134 = &v489;
  if (!v458)
  {
LABEL_467:
    v134[4] = 0;
    goto LABEL_469;
  }
  if (v458 != v457)
  {
    v134 = &v456;
    v491 = v458;
    goto LABEL_467;
  }
  v491 = v490;
  (*(void (**)(void))(v457[0] + 24))();
LABEL_469:
  v135 = &v489;
  if (!v460)
  {
LABEL_472:
    v135[8] = 0;
    goto LABEL_474;
  }
  if (v460 != v459)
  {
    v135 = &v456;
    v493 = v460;
    goto LABEL_472;
  }
  v493 = v492;
  (*(void (**)(void))(v459[0] + 24))();
LABEL_474:
  v494 = v461;
  v136 = &v489;
  v137 = v495;
  if (!v463)
  {
LABEL_477:
    v136[13] = 0;
    goto LABEL_479;
  }
  if (v463 != v462)
  {
    v136 = &v456;
    v496 = v463;
    goto LABEL_477;
  }
  v496 = v495;
  (*(void (**)(void))(v462[0] + 24))();
LABEL_479:
  v481 = v448;
  v138 = &v481;
  v139 = v482;
  if (!v450)
  {
LABEL_482:
    v138[4] = 0;
    goto LABEL_484;
  }
  if (v450 != v449)
  {
    v138 = &v448;
    v483 = v450;
    goto LABEL_482;
  }
  v483 = v482;
  (*(void (**)(void))(v449[0] + 24))();
LABEL_484:
  v140 = &v481;
  v141 = v484;
  if (!v452)
  {
LABEL_487:
    v140[8] = 0;
    goto LABEL_489;
  }
  if (v452 != v451)
  {
    v140 = &v448;
    v485 = v452;
    goto LABEL_487;
  }
  v485 = v484;
  (*(void (**)(void))(v451[0] + 24))();
LABEL_489:
  v486 = v453;
  v142 = &v481;
  v143 = v487;
  if (!v455)
  {
LABEL_492:
    v142[13] = 0;
    goto LABEL_494;
  }
  if (v455 != v454)
  {
    v142 = &v448;
    v488 = v455;
    goto LABEL_492;
  }
  v488 = v487;
  (*(void (**)(void))(v454[0] + 24))();
LABEL_494:
  v513 = v489;
  v144 = &v513;
  v145 = v514;
  if (!v491)
  {
LABEL_497:
    v144[4] = 0;
    goto LABEL_499;
  }
  if (v491 != v490)
  {
    v144 = &v489;
    v515 = v491;
    goto LABEL_497;
  }
  v515 = v514;
  (*(void (**)(void))(v490[0] + 24))();
LABEL_499:
  v146 = &v513;
  v147 = v516;
  if (!v493)
  {
LABEL_502:
    v146[8] = 0;
    goto LABEL_504;
  }
  if (v493 != v492)
  {
    v146 = &v489;
    v517 = v493;
    goto LABEL_502;
  }
  v517 = v516;
  (*(void (**)(void))(v492[0] + 24))();
LABEL_504:
  v518 = v494;
  v148 = &v513;
  v149 = v519;
  if (!v496)
  {
LABEL_507:
    v148[13] = 0;
    goto LABEL_509;
  }
  if (v496 != v495)
  {
    v148 = &v489;
    v520 = v496;
    goto LABEL_507;
  }
  v520 = v519;
  (*(void (**)(_QWORD *, _BYTE *))(v495[0] + 24))(v495, v519);
LABEL_509:
  sub_22383FB4C(v521, &v513);
  v497 = v481;
  v150 = &v497;
  v151 = v498;
  if (!v483)
  {
LABEL_512:
    v150[4] = 0;
    goto LABEL_514;
  }
  if (v483 != v482)
  {
    v150 = &v481;
    v499 = v483;
    goto LABEL_512;
  }
  v499 = v498;
  (*(void (**)(_QWORD *, _QWORD *))(v482[0] + 24))(v482, v498);
LABEL_514:
  v152 = &v497;
  v153 = v500;
  if (!v485)
  {
LABEL_517:
    v152[8] = 0;
    goto LABEL_519;
  }
  if (v485 != v484)
  {
    v152 = &v481;
    v501 = v485;
    goto LABEL_517;
  }
  v501 = v500;
  (*(void (**)(_QWORD *, _BYTE *))(v484[0] + 24))(v484, v500);
LABEL_519:
  v502 = v486;
  v154 = &v497;
  v155 = v503;
  if (!v488)
  {
LABEL_522:
    v154[13] = 0;
    goto LABEL_524;
  }
  if (v488 != v487)
  {
    v154 = &v481;
    v504 = v488;
    goto LABEL_522;
  }
  v504 = v503;
  (*(void (**)(_QWORD *, _BYTE *))(v487[0] + 24))(v487, v503);
LABEL_524:
  sub_22383FB4C(&v505, &v497);
  v464 = *(void **)&v521[0];
  v156 = &v464;
  if (!v522)
  {
LABEL_527:
    v156[4] = 0;
    goto LABEL_529;
  }
  v156 = (void **)v521;
  if (v522 != (void **)((char *)v521 + 8))
  {
    v467 = v522;
    goto LABEL_527;
  }
  v467 = (void **)&v465;
  (*((void (**)(void))*v522 + 3))();
LABEL_529:
  v157 = &v464;
  if (!v524)
  {
LABEL_532:
    v157[8] = 0;
    goto LABEL_534;
  }
  v157 = (void **)v521;
  if (v524 != v523)
  {
    v469 = v524;
    goto LABEL_532;
  }
  v469 = v468;
  (*(void (**)(void))(*v524 + 24))();
LABEL_534:
  v470 = v525;
  v158 = &v464;
  if (!v527)
  {
LABEL_537:
    v158[13] = 0;
    goto LABEL_539;
  }
  v158 = (void **)v521;
  if (v527 != v526)
  {
    v472 = v527;
    goto LABEL_537;
  }
  v472 = v471;
  (*(void (**)(void))(*v527 + 24))();
LABEL_539:
  v473 = v505;
  if (v507)
  {
    if (v507 == v506)
    {
      v475 = v474;
      (*(void (**)(void))(*v507 + 24))();
    }
    else
    {
      v475 = v507;
      v507 = 0;
    }
  }
  else
  {
    v475 = 0;
  }
  if (v509)
  {
    if (v509 == v508)
    {
      v477 = v476;
      (*(void (**)(void))(*(_QWORD *)v509 + 24))();
    }
    else
    {
      v477 = v509;
      v509 = 0;
    }
  }
  else
  {
    v477 = 0;
  }
  v478 = v510;
  if (v512)
  {
    if (v512 == v511)
    {
      v480 = v479;
      (*(void (**)(void))(*(_QWORD *)v512 + 24))();
    }
    else
    {
      v480 = v512;
      v512 = 0;
    }
  }
  else
  {
    v480 = 0;
  }
  v159 = v512;
  if (v512 == v511)
  {
    v160 = 4;
    v159 = v511;
  }
  else
  {
    if (!v512)
      goto LABEL_559;
    v160 = 5;
  }
  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_559:
  v161 = v509;
  if (v509 == v508)
  {
    v162 = 4;
    v161 = v508;
  }
  else
  {
    if (!v509)
      goto LABEL_564;
    v162 = 5;
  }
  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_564:
  v163 = v507;
  if (v507 == v506)
  {
    v164 = 4;
    v163 = v506;
  }
  else
  {
    if (!v507)
      goto LABEL_569;
    v164 = 5;
  }
  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_569:
  if (v504 == v503)
  {
    v165 = 4;
  }
  else
  {
    if (!v504)
      goto LABEL_574;
    v165 = 5;
    v155 = v504;
  }
  (*(void (**)(_QWORD *))(*v155 + 8 * v165))(v155);
LABEL_574:
  if (v501 == v500)
  {
    v166 = 4;
    v93 = v379;
  }
  else
  {
    v93 = v379;
    if (!v501)
      goto LABEL_579;
    v166 = 5;
    v153 = v501;
  }
  (*(void (**)(_QWORD *))(*v153 + 8 * v166))(v153);
LABEL_579:
  if (v499 == v498)
  {
    v168 = 4;
    v167 = v459;
  }
  else
  {
    v167 = v459;
    if (!v499)
      goto LABEL_584;
    v168 = 5;
    v151 = v499;
  }
  (*(void (**)(_QWORD *))(*v151 + 8 * v168))(v151);
LABEL_584:
  v169 = v527;
  if (v527 == v526)
  {
    v170 = 4;
    v169 = v526;
    v108 = v398;
  }
  else
  {
    v108 = v398;
    if (!v527)
      goto LABEL_589;
    v170 = 5;
  }
  (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_589:
  v171 = v524;
  if (v524 == v523)
  {
    v172 = 4;
    v171 = v523;
  }
  else
  {
    if (!v524)
      goto LABEL_594;
    v172 = 5;
  }
  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_594:
  v173 = v522;
  if (v522 == (void **)((char *)v521 + 8))
  {
    v174 = 4;
    v173 = (void **)v521 + 1;
  }
  else
  {
    if (!v522)
      goto LABEL_599;
    v174 = 5;
  }
  (*((void (**)(void))*v173 + v174))();
LABEL_599:
  if (v520 == v519)
  {
    v175 = 4;
  }
  else
  {
    if (!v520)
      goto LABEL_604;
    v175 = 5;
    v149 = v520;
  }
  (*(void (**)(_QWORD *))(*v149 + 8 * v175))(v149);
LABEL_604:
  if (v517 == v516)
  {
    v177 = 4;
    v176 = v462;
  }
  else
  {
    v176 = v462;
    if (!v517)
      goto LABEL_609;
    v177 = 5;
    v147 = v517;
  }
  (*(void (**)(_QWORD *))(*v147 + 8 * v177))(v147);
LABEL_609:
  if (v515 == v514)
  {
    v179 = 4;
    v178 = v449;
  }
  else
  {
    v178 = v449;
    if (!v515)
      goto LABEL_614;
    v179 = 5;
    v145 = v515;
  }
  (*(void (**)(_QWORD *))(*v145 + 8 * v179))(v145);
LABEL_614:
  if (v488 == v487)
  {
    v181 = 4;
    v180 = v454;
  }
  else
  {
    v180 = v454;
    if (!v488)
      goto LABEL_619;
    v181 = 5;
    v143 = v488;
  }
  (*(void (**)(_QWORD *))(*v143 + 8 * v181))(v143);
LABEL_619:
  if (v485 == v484)
  {
    v182 = 4;
    v91 = v382;
  }
  else
  {
    v91 = v382;
    if (!v485)
      goto LABEL_624;
    v182 = 5;
    v141 = v485;
  }
  (*(void (**)(_QWORD *))(*v141 + 8 * v182))(v141);
LABEL_624:
  if (v483 == v482)
  {
    v184 = 4;
    v183 = v457;
  }
  else
  {
    v183 = v457;
    if (!v483)
      goto LABEL_629;
    v184 = 5;
    v139 = v483;
  }
  (*(void (**)(_QWORD *))(*v139 + 8 * v184))(v139);
LABEL_629:
  if (v496 == v495)
  {
    v186 = 4;
    v185 = v490;
  }
  else
  {
    v185 = v490;
    if (!v496)
      goto LABEL_634;
    v186 = 5;
    v137 = v496;
  }
  (*(void (**)(_QWORD *))(*v137 + 8 * v186))(v137);
LABEL_634:
  v187 = v492;
  if (v493 == v492)
  {
    v189 = 4;
    v188 = v451;
  }
  else
  {
    v188 = v451;
    if (!v493)
      goto LABEL_639;
    v189 = 5;
    v187 = v493;
  }
  (*(void (**)(void))(*v187 + 8 * v189))();
LABEL_639:
  if (v491 == v490)
  {
    v190 = 4;
  }
  else
  {
    if (!v491)
      goto LABEL_644;
    v190 = 5;
    v185 = v491;
  }
  (*(void (**)(_QWORD *))(*v185 + 8 * v190))(v185);
LABEL_644:
  if (v455 == v454)
  {
    v191 = 4;
  }
  else
  {
    if (!v455)
      goto LABEL_649;
    v191 = 5;
    v180 = v455;
  }
  (*(void (**)(_QWORD *))(*v180 + 8 * v191))(v180);
LABEL_649:
  if (v452 == v451)
  {
    v192 = 4;
  }
  else
  {
    if (!v452)
      goto LABEL_654;
    v192 = 5;
    v188 = v452;
  }
  (*(void (**)(_QWORD *))(*v188 + 8 * v192))(v188);
LABEL_654:
  if (v450 == v449)
  {
    v193 = 4;
  }
  else
  {
    if (!v450)
      goto LABEL_659;
    v193 = 5;
    v178 = v450;
  }
  (*(void (**)(_QWORD *))(*v178 + 8 * v193))(v178);
LABEL_659:
  if (v463 == v462)
  {
    v194 = 4;
  }
  else
  {
    if (!v463)
      goto LABEL_664;
    v194 = 5;
    v176 = v463;
  }
  (*(void (**)(_QWORD *))(*v176 + 8 * v194))(v176);
LABEL_664:
  if (v460 == v459)
  {
    v195 = 4;
  }
  else
  {
    if (!v460)
      goto LABEL_669;
    v195 = 5;
    v167 = v460;
  }
  (*(void (**)(_QWORD *))(*v167 + 8 * v195))(v167);
LABEL_669:
  if (v458 == v457)
  {
    v196 = 4;
  }
  else
  {
    if (!v458)
      goto LABEL_674;
    v196 = 5;
    v183 = v458;
  }
  (*(void (**)(_QWORD *))(*v183 + 8 * v196))(v183);
LABEL_674:
  v197 = (uint64_t)v467;
  *(_QWORD *)&v521[0] = v464;
  v198 = (void **)v521 + 1;
  if (!v467)
  {
LABEL_677:
    v522 = (void **)v197;
    goto LABEL_679;
  }
  if (v467 != (void **)&v465)
  {
    v197 = (*((uint64_t (**)(void))*v467 + 2))();
    goto LABEL_677;
  }
  v522 = (void **)v521 + 1;
  v465[3]((void **)&v465, (_QWORD *)v521 + 1);
LABEL_679:
  v199 = v523;
  v200 = (uint64_t)v469;
  if (!v469)
  {
LABEL_682:
    v524 = (_QWORD *)v200;
    goto LABEL_684;
  }
  if (v469 != v468)
  {
    v200 = (*(uint64_t (**)(void))(*v469 + 16))();
    goto LABEL_682;
  }
  v524 = v523;
  (*(void (**)(_QWORD *, _QWORD *))(v468[0] + 24))(v468, v523);
LABEL_684:
  v201 = (uint64_t)v472;
  v525 = v470;
  v202 = v526;
  if (!v472)
  {
LABEL_687:
    v527 = (_QWORD *)v201;
    goto LABEL_689;
  }
  if (v472 != v471)
  {
    v201 = (*(uint64_t (**)(void))(*v472 + 16))();
    goto LABEL_687;
  }
  v527 = v526;
  (*(void (**)(_QWORD *, _QWORD *))(v471[0] + 24))(v471, v526);
LABEL_689:
  v203 = (uint64_t)v475;
  v513 = v473;
  v204 = v514;
  if (!v475)
  {
LABEL_692:
    v515 = (_BYTE *)v203;
    goto LABEL_694;
  }
  if (v475 != v474)
  {
    v203 = (*(uint64_t (**)(void))(*v475 + 16))();
    goto LABEL_692;
  }
  v515 = v514;
  (*(void (**)(_QWORD *, _BYTE *))(v474[0] + 24))(v474, v514);
LABEL_694:
  v205 = v516;
  v206 = (uint64_t)v477;
  if (!v477)
  {
LABEL_697:
    v517 = (_BYTE *)v206;
    goto LABEL_699;
  }
  if (v477 != v476)
  {
    v206 = (*(uint64_t (**)(void))(*v477 + 16))();
    goto LABEL_697;
  }
  v517 = v516;
  (*(void (**)(_QWORD *, _BYTE *))(v476[0] + 24))(v476, v516);
LABEL_699:
  v207 = (uint64_t)v480;
  v518 = v478;
  v208 = v519;
  if (!v480)
  {
LABEL_702:
    v520 = (_BYTE *)v207;
    goto LABEL_704;
  }
  if (v480 != v479)
  {
    v207 = (*(uint64_t (**)(void))(*v480 + 16))();
    goto LABEL_702;
  }
  v520 = v519;
  (*(void (**)(_QWORD *, _BYTE *))(v479[0] + 24))(v479, v519);
LABEL_704:
  v209 = *(uint64_t **)&v521[0];
  if (*(uint64_t **)&v521[0] != v513)
  {
    v210 = v340;
    while (1)
    {
      if (!v522)
        goto LABEL_991;
      v211 = (_OWORD *)(*((uint64_t (**)(void **, uint64_t *))*v522 + 6))(v522, v209 + 2);
      *(_OWORD *)v210 = *v211;
      v212 = v211[1];
      v213 = v211[2];
      v214 = v211[4];
      *((_OWORD *)v210 + 3) = v211[3];
      *((_OWORD *)v210 + 4) = v214;
      *((_OWORD *)v210 + 1) = v212;
      *((_OWORD *)v210 + 2) = v213;
      v215 = v211[5];
      v216 = v211[7];
      *((_OWORD *)v210 + 6) = v211[6];
      *((_OWORD *)v210 + 7) = v216;
      *((_OWORD *)v210 + 5) = v215;
      v209 = **(uint64_t ***)&v521[0];
      *(_QWORD *)&v521[0] = v209;
      if (v209 != v525)
        break;
LABEL_706:
      v210 += 128;
      if (v209 == v513)
        goto LABEL_715;
    }
    while (v522)
    {
      v217 = (*((uint64_t (**)(void **, uint64_t *))*v522 + 6))(v522, v209 + 2);
      if (!v524)
        break;
      v218 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v524 + 48))(v524, v217);
      v209 = *(uint64_t **)&v521[0];
      if ((v218 & 1) == 0)
      {
        v209 = **(uint64_t ***)&v521[0];
        *(_QWORD *)&v521[0] = v209;
        if (v209 != v525)
          continue;
      }
      goto LABEL_706;
    }
LABEL_991:
    sub_223198474();
  }
  v210 = v340;
LABEL_715:
  if (v520 == v519)
  {
    v219 = 4;
  }
  else
  {
    if (!v520)
      goto LABEL_720;
    v219 = 5;
    v208 = v520;
  }
  (*(void (**)(_QWORD *))(*v208 + 8 * v219))(v208);
LABEL_720:
  if (v517 == v516)
  {
    v220 = 4;
    v97 = v358;
  }
  else
  {
    v97 = v358;
    if (!v517)
      goto LABEL_725;
    v220 = 5;
    v205 = v517;
  }
  (*(void (**)(_QWORD *))(*v205 + 8 * v220))(v205);
LABEL_725:
  if (v515 == v514)
  {
    v221 = 4;
    v112 = v387;
  }
  else
  {
    v112 = v387;
    if (!v515)
      goto LABEL_730;
    v221 = 5;
    v204 = v515;
  }
  (*(void (**)(_QWORD *))(*v204 + 8 * v221))(v204);
LABEL_730:
  if (v527 == v526)
  {
    v222 = 4;
    v99 = v361;
  }
  else
  {
    v99 = v361;
    if (!v527)
      goto LABEL_735;
    v222 = 5;
    v202 = v527;
  }
  (*(void (**)(_QWORD *))(*v202 + 8 * v222))(v202);
LABEL_735:
  if (v524 == v523)
  {
    v223 = 4;
    v111 = v385;
  }
  else
  {
    v111 = v385;
    if (!v524)
      goto LABEL_740;
    v223 = 5;
    v199 = v524;
  }
  (*(void (**)(_QWORD *))(*v199 + 8 * v223))(v199);
LABEL_740:
  if (v522 == (void **)((char *)v521 + 8))
  {
    v225 = 4;
    v224 = v425;
  }
  else
  {
    v224 = v425;
    if (!v522)
      goto LABEL_745;
    v225 = 5;
    v198 = v522;
  }
  (*((void (**)(void **))*v198 + v225))(v198);
LABEL_745:
  v226 = v479;
  if (v480 == v479)
  {
    v227 = 4;
  }
  else
  {
    if (!v480)
      goto LABEL_750;
    v227 = 5;
    v226 = v480;
  }
  (*(void (**)(void))(*v226 + 8 * v227))();
LABEL_750:
  if (v477 == v476)
  {
    v228 = 4;
    v229 = v476;
  }
  else
  {
    if (!v477)
      goto LABEL_755;
    v228 = 5;
    v229 = v477;
  }
  (*(void (**)(void))(*v229 + 8 * v228))();
LABEL_755:
  v230 = v474;
  if (v475 == v474)
  {
    v231 = 4;
  }
  else
  {
    if (!v475)
      goto LABEL_760;
    v231 = 5;
    v230 = v475;
  }
  (*(void (**)(void))(*v230 + 8 * v231))();
LABEL_760:
  if (v472 == v471)
  {
    v232 = 4;
    v233 = v471;
  }
  else
  {
    if (!v472)
      goto LABEL_765;
    v232 = 5;
    v233 = v472;
  }
  (*(void (**)(void))(*v233 + 8 * v232))();
LABEL_765:
  if (v469 == v468)
  {
    v234 = 4;
    v235 = v468;
  }
  else
  {
    if (!v469)
      goto LABEL_770;
    v234 = 5;
    v235 = v469;
  }
  (*(void (**)(void))(*v235 + 8 * v234))();
LABEL_770:
  if (v467 == (void **)&v465)
  {
    v236 = 4;
    v237 = (void **)&v465;
  }
  else
  {
    if (!v467)
      goto LABEL_775;
    v236 = 5;
    v237 = v467;
  }
  (*((void (**)(void))*v237 + v236))();
LABEL_775:
  if (v439 == v438)
  {
    v238 = 4;
    v239 = v438;
  }
  else
  {
    if (!v439)
      goto LABEL_780;
    v238 = 5;
    v239 = v439;
  }
  (*(void (**)(void))(*v239 + 8 * v238))();
LABEL_780:
  if (v436 == v435)
  {
    v240 = 4;
    v241 = v435;
  }
  else
  {
    if (!v436)
      goto LABEL_785;
    v240 = 5;
    v241 = v436;
  }
  (*(void (**)(void))(*v241 + 8 * v240))();
LABEL_785:
  v242 = v433;
  if (v434 == v433)
  {
    v243 = 4;
  }
  else
  {
    if (!v434)
      goto LABEL_790;
    v243 = 5;
    v242 = v434;
  }
  (*(void (**)(void))(*v242 + 8 * v243))();
LABEL_790:
  if (v447 == v446)
  {
    v244 = 4;
    v245 = v446;
  }
  else
  {
    if (!v447)
      goto LABEL_795;
    v244 = 5;
    v245 = v447;
  }
  (*(void (**)(void))(*v245 + 8 * v244))();
LABEL_795:
  if (v444 == v443)
  {
    v246 = 4;
    v247 = v443;
  }
  else
  {
    if (!v444)
      goto LABEL_800;
    v246 = 5;
    v247 = v444;
  }
  (*(void (**)(void))(*v247 + 8 * v246))();
LABEL_800:
  v248 = v441;
  if (v442 == v441)
  {
    v249 = 4;
  }
  else
  {
    if (!v442)
      goto LABEL_805;
    v249 = 5;
    v248 = v442;
  }
  (*(void (**)(void))(*v248 + 8 * v249))();
LABEL_805:
  v344 = v210;
  v250 = v422;
  if (v423 == v422)
  {
    v251 = 4;
    v95 = v377;
  }
  else
  {
    v95 = v377;
    if (!v423)
      goto LABEL_810;
    v251 = 5;
    v250 = v423;
  }
  (*(void (**)(void))(*v250 + 8 * v251))();
LABEL_810:
  v252 = v419;
  if (v420 == v419)
  {
    v253 = 4;
  }
  else
  {
    if (!v420)
      goto LABEL_815;
    v253 = 5;
    v252 = v420;
  }
  (*(void (**)(void))(*v252 + 8 * v253))();
LABEL_815:
  v254 = v417;
  if (v418 == v417)
  {
    v255 = 4;
  }
  else
  {
    if (!v418)
      goto LABEL_820;
    v255 = 5;
    v254 = v418;
  }
  (*(void (**)(void))(*v254 + 8 * v255))();
LABEL_820:
  v256 = v430;
  if (v431 == v430)
  {
    v257 = 4;
  }
  else
  {
    if (!v431)
      goto LABEL_825;
    v257 = 5;
    v256 = v431;
  }
  (*(void (**)(void))(*v256 + 8 * v257))();
LABEL_825:
  v258 = v427;
  if (v428 == v427)
  {
    v259 = 4;
  }
  else
  {
    if (!v428)
      goto LABEL_830;
    v259 = 5;
    v258 = v428;
  }
  (*(void (**)(void))(*v258 + 8 * v259))();
LABEL_830:
  if (v426 == v425)
  {
    v260 = 4;
  }
  else
  {
    if (!v426)
      goto LABEL_835;
    v260 = 5;
    v224 = v426;
  }
  (*(void (**)(_QWORD *))(*v224 + 8 * v260))(v224);
LABEL_835:
  if (v391 == v390)
  {
    v263 = 4;
    v264 = v390;
    v262 = v355;
    v261 = &v352;
  }
  else
  {
    v262 = v355;
    v261 = &v352;
    if (!v391)
      goto LABEL_840;
    v263 = 5;
    v264 = v391;
  }
  (*(void (**)(void))(*v264 + 8 * v263))();
LABEL_840:
  if (v388 == v387)
  {
    v265 = 4;
  }
  else
  {
    if (!v388)
      goto LABEL_845;
    v265 = 5;
    v112 = v388;
  }
  (*(void (**)(_QWORD *))(*v112 + 8 * v265))(v112);
LABEL_845:
  if (v386 == v385)
  {
    v267 = 4;
    v266 = v371;
  }
  else
  {
    v266 = v371;
    if (!v386)
      goto LABEL_850;
    v267 = 5;
    v111 = v386;
  }
  (*(void (**)(_QWORD *))(*v111 + 8 * v267))(v111);
LABEL_850:
  if (v399 == v398)
  {
    v269 = 4;
    v268 = v369;
  }
  else
  {
    v268 = v369;
    if (!v399)
      goto LABEL_855;
    v269 = 5;
    v108 = v399;
  }
  (*(void (**)(_QWORD *))(*v108 + 8 * v269))(v108);
LABEL_855:
  v270 = v395;
  if (v396 == v395)
  {
    v272 = 4;
    v271 = v393;
  }
  else
  {
    v271 = v393;
    if (!v396)
      goto LABEL_860;
    v272 = 5;
    v270 = v396;
  }
  (*(void (**)(void))(*v270 + 8 * v272))();
LABEL_860:
  if (v394 == v393)
  {
    v273 = 4;
  }
  else
  {
    if (!v394)
      goto LABEL_865;
    v273 = 5;
    v271 = v394;
  }
  (*(void (**)(_QWORD *))(*v271 + 8 * v273))(v271);
LABEL_865:
  v274 = v374;
  if (v375 == v374)
  {
    v275 = 4;
  }
  else
  {
    if (!v375)
      goto LABEL_870;
    v275 = 5;
    v274 = v375;
  }
  (*(void (**)(void))(*v274 + 8 * v275))();
LABEL_870:
  if (v372 == v371)
  {
    v276 = 4;
  }
  else
  {
    if (!v372)
      goto LABEL_875;
    v276 = 5;
    v266 = v372;
  }
  (*(void (**)(_QWORD *))(*v266 + 8 * v276))(v266);
LABEL_875:
  if (v370 == v369)
  {
    v277 = 4;
  }
  else
  {
    if (!v370)
      goto LABEL_880;
    v277 = 5;
    v268 = v370;
  }
  (*(void (**)(_QWORD *))(*v268 + 8 * v277))(v268);
LABEL_880:
  if (v383 == v382)
  {
    v278 = 4;
  }
  else
  {
    if (!v383)
      goto LABEL_885;
    v278 = 5;
    v91 = v383;
  }
  (*(void (**)(_QWORD *))(*v91 + 8 * v278))(v91);
LABEL_885:
  if (v380 == v379)
  {
    v279 = 4;
  }
  else
  {
    if (!v380)
      goto LABEL_890;
    v279 = 5;
    v93 = v380;
  }
  (*(void (**)(_QWORD *))(*v93 + 8 * v279))(v93);
LABEL_890:
  if (v378 == v377)
  {
    v280 = 4;
  }
  else
  {
    if (!v378)
      goto LABEL_895;
    v280 = 5;
    v95 = v378;
  }
  (*(void (**)(_QWORD *))(*v95 + 8 * v280))(v95);
LABEL_895:
  v281 = v366;
  if (v367 == v366)
  {
    v282 = 4;
  }
  else
  {
    if (!v367)
      goto LABEL_900;
    v282 = 5;
    v281 = v367;
  }
  (*(void (**)(void))(*v281 + 8 * v282))();
LABEL_900:
  v283 = v363;
  if (v364 == v363)
  {
    v284 = 4;
  }
  else
  {
    if (!v364)
      goto LABEL_905;
    v284 = 5;
    v283 = v364;
  }
  (*(void (**)(void))(*v283 + 8 * v284))();
LABEL_905:
  if (v362 == v361)
  {
    v285 = 4;
  }
  else
  {
    if (!v362)
      goto LABEL_910;
    v285 = 5;
    v99 = v362;
  }
  (*(void (**)(_QWORD *))(*v99 + 8 * v285))(v99);
LABEL_910:
  if (v359 == v358)
  {
    v286 = 4;
  }
  else
  {
    if (!v359)
      goto LABEL_915;
    v286 = 5;
    v97 = v359;
  }
  (*(void (**)(_QWORD *))(*v97 + 8 * v286))(v97);
LABEL_915:
  if (v356 == v355)
  {
    v287 = 4;
  }
  else
  {
    if (!v356)
      goto LABEL_920;
    v287 = 5;
    v262 = v356;
  }
  (*(void (**)(_QWORD *))(*v262 + 8 * v287))(v262);
LABEL_920:
  if (v354 == (void **)&v352)
  {
    v288 = 4;
  }
  else
  {
    if (!v354)
      goto LABEL_925;
    v288 = 5;
    v261 = v354;
  }
  (*(void (**)(_QWORD *))(*v261 + 8 * v288))(v261);
LABEL_925:
  v289 = v350;
  if (v350 == v349)
  {
    v290 = 4;
    v289 = v349;
  }
  else
  {
    if (!v350)
      goto LABEL_930;
    v290 = 5;
  }
  (*(void (**)(void))(*v289 + 8 * v290))();
LABEL_930:
  v291 = v347;
  if (v347 == v346)
  {
    v292 = 4;
    v291 = v346;
    goto LABEL_934;
  }
  if (v347)
  {
    v292 = 5;
LABEL_934:
    (*(void (**)(void))(*v291 + 8 * v292))();
  }
  v293 = __p;
  if (*(_BYTE *)(v342 + 8) != 1
    || ((v294 = v344 - __p, v295 = (unint64_t)(v344 - __p) >> 7, v295 >= *(_DWORD *)v342)
      ? (v296 = (v295 - *(_DWORD *)v342))
      : (v296 = 0),
        *(_DWORD *)v342 >= v295))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (!__p)
      return;
    goto LABEL_950;
  }
  v351 = 0;
  v352 = 0;
  v353 = 0;
  if (v344 == __p)
  {
    v297 = 0;
    v306 = 0;
  }
  else
  {
    if (v294 < 0)
      sub_22316E078();
    v297 = (__int128 *)operator new(v344 - __p);
    v298 = 0;
    v351 = v297;
    v353 = &v297[8 * (v294 >> 7)];
    do
    {
      v299 = &__p[v298];
      v300 = &v297[(unint64_t)v298 / 0x10];
      *v300 = *(_OWORD *)&__p[v298];
      v301 = *(_OWORD *)&__p[v298 + 16];
      v302 = *(_OWORD *)&__p[v298 + 32];
      v303 = *(_OWORD *)&__p[v298 + 64];
      v300[3] = *(_OWORD *)&__p[v298 + 48];
      v300[4] = v303;
      v300[1] = v301;
      v300[2] = v302;
      v304 = *(_OWORD *)&__p[v298 + 80];
      v305 = *(_OWORD *)&__p[v298 + 112];
      v300[6] = *(_OWORD *)&__p[v298 + 96];
      v300[7] = v305;
      v300[5] = v304;
      v298 += 128;
    }
    while (v299 + 128 != v344);
    v306 = (__int128 *)((char *)v297 + (v298 & 0xFFFFFFFFFFFFFF80));
    v352 = v306;
    if (v298)
    {
      v307 = 0;
      v308 = v298 >> 7 << 7;
      while (1)
      {
        v309 = &v297[v307 / 0x10];
        if (LOBYTE(v297[v307 / 0x10 + 7]) == 1)
          break;
        v307 += 128;
        if (v308 == v307)
          goto LABEL_967;
      }
      if (v308 != v307 && v308 - 128 != v307)
      {
        v310 = v308 - v307 - 128;
        v311 = v309 + 8;
        do
        {
          if (*((_BYTE *)v311 + 112) != 1)
          {
            *v309 = *v311;
            v312 = v311[1];
            v313 = v311[2];
            v314 = v311[4];
            v309[3] = v311[3];
            v309[4] = v314;
            v309[1] = v312;
            v309[2] = v313;
            v315 = v311[5];
            v316 = v311[7];
            v309[6] = v311[6];
            v309[7] = v316;
            v309[5] = v315;
            v309 += 8;
          }
          v311 += 8;
          v310 -= 128;
        }
        while (v310);
        v297 = v351;
        v306 = v352;
      }
      if (v309 != v306)
      {
        v317 = v309;
        v318 = (char *)v306 - (char *)v309;
        if ((__int128 *)((char *)v317 + v318) != v306)
        {
          v319 = v318 >> 7 << 7;
          do
          {
            v320 = *(__int128 *)((char *)v317 + v319 + 32);
            v321 = *(__int128 *)((char *)v317 + v319 + 48);
            v322 = *(__int128 *)((char *)v317 + v319 + 16);
            v323 = *(__int128 *)((char *)v317 + v319 + 64);
            v324 = *(__int128 *)((char *)v317 + v319 + 80);
            *v317 = *(__int128 *)((char *)v317 + v319);
            v317[1] = v322;
            v317[2] = v320;
            v317[3] = v321;
            v326 = *(__int128 *)((char *)v317 + v319 + 96);
            v325 = *(__int128 *)((char *)v317 + v319 + 112);
            v317[4] = v323;
            v317[5] = v324;
            v317[6] = v326;
            v317[7] = v325;
            v317 += 8;
          }
          while ((__int128 *)((char *)v317 + v319) != v306);
          v297 = v351;
        }
        v352 = v317;
        v306 = v317;
      }
    }
    else
    {
      v297 = v306;
    }
  }
LABEL_967:
  v327 = 126 - 2 * __clz(((char *)v306 - (char *)v297) >> 7);
  if (v306 == v297)
    v328 = 0;
  else
    v328 = v327;
  sub_223840540((uint64_t)v297, v306, v328, 1);
  v329 = v351;
  v330 = v352;
  v331 = ((char *)v352 - (char *)v351) >> 7;
  if (v331 >= v296)
    v332 = v296;
  else
    v332 = ((char *)v352 - (char *)v351) >> 7;
  if (v332 >= *(unsigned int *)(v342 + 4))
    v333 = *(unsigned int *)(v342 + 4);
  else
    v333 = v332;
  v465 = 0;
  v464 = 0;
  v466 = 0;
  v334 = (char *)v352 - (char *)v351;
  if (v352 == v351)
  {
    v336 = 0;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (!v333)
      goto LABEL_984;
    goto LABEL_983;
  }
  if ((v334 & 0x8000000000000000) != 0)
    sub_22316E078();
  v464 = operator new(v334 >> 3);
  v465 = (void (**)(void **, _QWORD *))v464;
  v466 = (char *)v464 + 16 * v331;
  v513 = (uint64_t *)&v464;
  v335 = v329;
  do
  {
    v521[0] = *v335;
    sub_2232E9564((char ***)&v513, v521);
    v335 += 8;
  }
  while (v335 != v330);
  v336 = v464;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v333)
  {
LABEL_983:
    v337 = 16 * v333;
    v338 = (char *)operator new(16 * v333);
    *a1 = v338;
    v339 = &v338[16 * v333];
    a1[2] = v339;
    memmove(v338, v336, v337);
    a1[1] = v339;
  }
LABEL_984:
  if (v336)
    operator delete(v336);
  if (v329)
    operator delete(v329);
  v293 = __p;
  if (__p)
LABEL_950:
    operator delete(v293);
}

void sub_223826430(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223826F3C()
{
  JUMPOUT(0x223827724);
}

void sub_223826F44()
{
  JUMPOUT(0x22382743CLL);
}

void sub_223826F4C()
{
  if (STACK[0x800])
    JUMPOUT(0x223826F58);
  JUMPOUT(0x223826F60);
}

void sub_223826F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, _QWORD *a11, uint64_t a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, uint64_t a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v63 = a9;
  v64 = a14;
  v65 = a16;
  if ((_QWORD *)STACK[0xB08] == v61)
  {
    v66 = 4;
  }
  else
  {
    if (!STACK[0xB08])
      goto LABEL_6;
    v66 = 5;
    v61 = (_QWORD *)STACK[0xB08];
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v66))(v61);
LABEL_6:
  if ((_QWORD *)STACK[0xAE0] == v60)
  {
    v67 = 4;
    v68 = a12;
  }
  else
  {
    v68 = a12;
    if (!STACK[0xAE0])
      goto LABEL_11;
    v67 = 5;
    v60 = (_QWORD *)STACK[0xAE0];
  }
  (*(void (**)(_QWORD *))(*v60 + 8 * v67))(v60);
LABEL_11:
  if ((_QWORD *)STACK[0xAC0] == v59)
  {
    v69 = 4;
    v70 = a17;
  }
  else
  {
    v70 = a17;
    if (!STACK[0xAC0])
      goto LABEL_16;
    v69 = 5;
    v59 = (_QWORD *)STACK[0xAC0];
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v69))(v59);
LABEL_16:
  v71 = *(_QWORD **)(v62 - 104);
  v72 = a13;
  if (v71 == v58)
  {
    v73 = 4;
  }
  else
  {
    if (!v71)
      goto LABEL_21;
    v73 = 5;
    v58 = *(_QWORD **)(v62 - 104);
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v73))(v58);
LABEL_21:
  v74 = *(_QWORD **)(v62 - 144);
  if (v74 == v57)
  {
    v75 = 4;
    v76 = a11;
  }
  else
  {
    v76 = a11;
    if (!v74)
      goto LABEL_26;
    v75 = 5;
    v57 = *(_QWORD **)(v62 - 144);
  }
  (*(void (**)(_QWORD *))(*v57 + 8 * v75))(v57);
LABEL_26:
  v77 = *(_QWORD **)(v62 - 176);
  if (v77 == v56)
  {
    v78 = 4;
    v79 = a10;
  }
  else
  {
    v79 = a10;
    if (!v77)
      goto LABEL_31;
    v78 = 5;
    v56 = *(_QWORD **)(v62 - 176);
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v78))(v56);
LABEL_31:
  v80 = a15;
  if ((_QWORD *)STACK[0x8D8] == a35)
  {
    v81 = 4;
  }
  else
  {
    if (!STACK[0x8D8])
      goto LABEL_36;
    v81 = 5;
    a35 = (_QWORD *)STACK[0x8D8];
  }
  (*(void (**)(void))(*a35 + 8 * v81))();
LABEL_36:
  if ((_QWORD *)STACK[0x8B0] == a32)
  {
    v82 = 4;
    v83 = a32;
  }
  else
  {
    if (!STACK[0x8B0])
      goto LABEL_41;
    v82 = 5;
    v83 = (_QWORD *)STACK[0x8B0];
  }
  (*(void (**)(void))(*v83 + 8 * v82))();
LABEL_41:
  if ((_QWORD *)STACK[0x890] == a36)
  {
    v84 = 4;
  }
  else
  {
    if (!STACK[0x890])
      goto LABEL_46;
    v84 = 5;
    a36 = (_QWORD *)STACK[0x890];
  }
  (*(void (**)(void))(*a36 + 8 * v84))();
LABEL_46:
  if ((_QWORD *)STACK[0x868] == a33)
  {
    v85 = 4;
    v86 = a33;
  }
  else
  {
    if (!STACK[0x868])
      goto LABEL_51;
    v85 = 5;
    v86 = (_QWORD *)STACK[0x868];
  }
  (*(void (**)(void))(*v86 + 8 * v85))();
LABEL_51:
  if ((_QWORD *)STACK[0x840] == a34)
  {
    v87 = 4;
    v88 = a34;
  }
  else
  {
    if (!STACK[0x840])
      goto LABEL_56;
    v87 = 5;
    v88 = (_QWORD *)STACK[0x840];
  }
  (*(void (**)(void))(*v88 + 8 * v87))();
LABEL_56:
  if ((_QWORD *)STACK[0x820] == a23)
  {
    v89 = 4;
    v90 = a23;
  }
  else
  {
    if (!STACK[0x820])
      goto LABEL_61;
    v90 = (_QWORD *)STACK[0x820];
    v89 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v89))();
LABEL_61:
  if ((_QWORD *)STACK[0x6A8] == a19)
  {
    v91 = 4;
    v92 = a19;
  }
  else
  {
    if (!STACK[0x6A8])
      goto LABEL_66;
    v91 = 5;
    v92 = (_QWORD *)STACK[0x6A8];
  }
  (*(void (**)(void))(*v92 + 8 * v91))();
LABEL_66:
  if ((_QWORD *)STACK[0x680] == a20)
  {
    v93 = 4;
    v94 = a20;
  }
  else
  {
    if (!STACK[0x680])
      goto LABEL_71;
    v93 = 5;
    v94 = (_QWORD *)STACK[0x680];
  }
  (*(void (**)(void))(*v94 + 8 * v93))();
LABEL_71:
  if (STACK[0x660] != a37)
    JUMPOUT(0x223826834);
  (*(void (**)(uint64_t))(*(_QWORD *)a37 + 32))(a37);
  if ((_QWORD *)STACK[0x718] == a21)
  {
    v95 = 4;
    v96 = a21;
  }
  else
  {
    if (!STACK[0x718])
      goto LABEL_77;
    v95 = 5;
    v96 = (_QWORD *)STACK[0x718];
  }
  (*(void (**)(void))(*v96 + 8 * v95))();
LABEL_77:
  if ((_QWORD *)STACK[0x6F0] == a22)
  {
    v97 = 4;
    v98 = a22;
  }
  else
  {
    if (!STACK[0x6F0])
      goto LABEL_82;
    v97 = 5;
    v98 = (_QWORD *)STACK[0x6F0];
  }
  (*(void (**)(void))(*v98 + 8 * v97))();
LABEL_82:
  if (STACK[0x6D0] != a38)
    JUMPOUT(0x22382689CLL);
  (*(void (**)(uint64_t))(*(_QWORD *)a38 + 32))(a38);
  if ((_QWORD *)STACK[0x5C8] == a16)
  {
    v99 = 4;
  }
  else
  {
    if (!STACK[0x5C8])
      goto LABEL_88;
    v99 = 5;
    v65 = (_QWORD *)STACK[0x5C8];
  }
  (*(void (**)(_QWORD *))(*v65 + 8 * v99))(v65);
LABEL_88:
  if ((_QWORD *)STACK[0x5A0] == a14)
  {
    v100 = 4;
  }
  else
  {
    if (!STACK[0x5A0])
      goto LABEL_93;
    v100 = 5;
    v64 = (_QWORD *)STACK[0x5A0];
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v100))(v64);
LABEL_93:
  if (STACK[0x580] != v68)
    JUMPOUT(0x2238268FCLL);
  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 32))(v68);
  if ((_QWORD *)STACK[0x638] == a13)
  {
    v101 = 4;
  }
  else
  {
    if (!STACK[0x638])
      goto LABEL_99;
    v101 = 5;
    v72 = (_QWORD *)STACK[0x638];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v101))(v72);
LABEL_99:
  if ((_QWORD *)STACK[0x610] == a9)
  {
    v102 = 4;
  }
  else
  {
    if (!STACK[0x610])
      goto LABEL_104;
    v102 = 5;
    v63 = (_QWORD *)STACK[0x610];
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v102))(v63);
LABEL_104:
  if (STACK[0x5F0] != v79)
    JUMPOUT(0x22382695CLL);
  (*(void (**)(uint64_t))(*(_QWORD *)v79 + 32))(v79);
  if (a56)
    operator delete(a56);
  if ((_QWORD *)STACK[0x408] == a15)
  {
    v103 = 4;
  }
  else
  {
    if (!STACK[0x408])
      goto LABEL_112;
    v103 = 5;
    v80 = (_QWORD *)STACK[0x408];
  }
  (*(void (**)(_QWORD *))(*v80 + 8 * v103))(v80);
LABEL_112:
  if ((_QWORD *)STACK[0x3E0] == v70)
  {
    v104 = 4;
  }
  else
  {
    if (!STACK[0x3E0])
      goto LABEL_117;
    v104 = 5;
    v70 = (_QWORD *)STACK[0x3E0];
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v104))(v70);
LABEL_117:
  if ((_QWORD *)STACK[0x3C0] == v76)
  {
    v105 = 4;
  }
  else
  {
    if (!STACK[0x3C0])
      goto LABEL_127;
    v105 = 5;
    v76 = (_QWORD *)STACK[0x3C0];
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v105))(v76);
LABEL_127:
  JUMPOUT(0x223827694);
}

void sub_2238274E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,_QWORD *a51,uint64_t a52,_QWORD *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;

  v78 = *(_QWORD **)(v76 - 104);
  if (v78 == v69)
  {
    v79 = 4;
  }
  else
  {
    if (!v78)
      goto LABEL_6;
    v79 = 5;
    v69 = *(_QWORD **)(v76 - 104);
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v79))(v69);
LABEL_6:
  v80 = *(_QWORD **)(v76 - 144);
  if (v80 == v75)
  {
    v81 = 4;
    v82 = a43;
  }
  else
  {
    v82 = a43;
    if (!v80)
      goto LABEL_11;
    v81 = 5;
    v75 = *(_QWORD **)(v76 - 144);
  }
  (*(void (**)(_QWORD *))(*v75 + 8 * v81))(v75);
LABEL_11:
  v83 = *(_QWORD **)(v76 - 176);
  v84 = a53;
  if (v83 == v74)
  {
    v85 = 4;
  }
  else
  {
    if (!v83)
      goto LABEL_16;
    v85 = 5;
    v74 = *(_QWORD **)(v76 - 176);
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v85))(v74);
LABEL_16:
  if ((_QWORD *)STACK[0x868] == v73)
  {
    v86 = 4;
  }
  else
  {
    if (!STACK[0x868])
      goto LABEL_21;
    v86 = 5;
    v73 = (_QWORD *)STACK[0x868];
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v86))(v73);
LABEL_21:
  if ((_QWORD *)STACK[0x840] == v72)
  {
    v87 = 4;
  }
  else
  {
    if (!STACK[0x840])
      goto LABEL_26;
    v87 = 5;
    v72 = (_QWORD *)STACK[0x840];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v87))(v72);
LABEL_26:
  if (STACK[0x820] != v71)
    JUMPOUT(0x223826B30);
  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 32))(v71);
  if ((_QWORD *)STACK[0x4E8] == v70)
  {
    v88 = 4;
  }
  else
  {
    if (!STACK[0x4E8])
      goto LABEL_32;
    v88 = 5;
    v70 = (_QWORD *)STACK[0x4E8];
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v88))(v70);
LABEL_32:
  if ((_QWORD *)STACK[0x4C0] == a51)
  {
    v89 = 4;
  }
  else
  {
    if (!STACK[0x4C0])
      goto LABEL_37;
    v89 = 5;
    a51 = (_QWORD *)STACK[0x4C0];
  }
  (*(void (**)(void))(*a51 + 8 * v89))();
LABEL_37:
  if (STACK[0x4A0] != v82)
    JUMPOUT(0x223826B94);
  (*(void (**)(uint64_t))(*(_QWORD *)v82 + 32))(v82);
  if ((_QWORD *)STACK[0x558] == a53)
  {
    v90 = 4;
  }
  else
  {
    if (!STACK[0x558])
      goto LABEL_43;
    v90 = 5;
    v84 = (_QWORD *)STACK[0x558];
  }
  (*(void (**)(_QWORD *))(*v84 + 8 * v90))(v84);
LABEL_43:
  v91 = (unint64_t *)STACK[0x530];
  if ((unint64_t *)STACK[0x530] == &STACK[0x518])
  {
    v92 = 4;
    v91 = &STACK[0x518];
  }
  else
  {
    if (!v91)
      goto LABEL_48;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_48:
  v93 = (unint64_t *)STACK[0x510];
  if ((unint64_t *)STACK[0x510] == &STACK[0x4F8])
  {
    v94 = 4;
    v93 = &STACK[0x4F8];
  }
  else
  {
    if (!v93)
      goto LABEL_53;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_53:
  sub_22383F8F4(&STACK[0x2C0]);
  sub_22383F8F4(&STACK[0x330]);
  sub_22382774C(&a69);
  sub_2236CE728(&a59);
  _Unwind_Resume(a1);
}

_QWORD *sub_22382774C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = a1 + 24;
  v3 = (_QWORD *)a1[27];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[22];
  if (v5 == a1 + 19)
  {
    v6 = 4;
    v5 = a1 + 19;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[18];
  if (v7 == a1 + 15)
  {
    v8 = 4;
    v7 = a1 + 15;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[13];
  if (v9 == a1 + 10)
  {
    v10 = 4;
    v9 = a1 + 10;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[8];
  if (v11 == a1 + 5)
  {
    v12 = 4;
    v11 = a1 + 5;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[4];
  if (v13 == a1 + 1)
  {
    v14 = 4;
    v13 = a1 + 1;
    goto LABEL_30;
  }
  if (v13)
  {
    v14 = 5;
LABEL_30:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_22382788C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  void **v11;
  size_t v12;
  char v13;
  size_t v14;
  void **v15;
  unint64_t v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  size_t v39;
  size_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  int64_t v94;
  char *v95;
  char *v96;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  const char *v104;
  char *__s;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v108;
  const char *v109;
  int v110;
  const char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void *__dst[2];
  int64_t v115;
  _QWORD v116[2];
  _QWORD v117[3];
  _QWORD v118[3];
  uint64_t v119;
  unint64_t v120;
  void *v121;
  char v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  char *v128;
  unint64_t v129;
  int v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  char *v133;
  std::__shared_weak_count *v134;
  _QWORD *v135;
  __int128 v136;
  _BYTE v137[24];
  __int128 v138;
  void *v139[2];
  unint64_t v140;
  char v141;
  _QWORD v142[5];

  v3 = (_QWORD *)a1;
  v142[2] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v129 = *(_QWORD *)(a1 + 64);
    LOBYTE(v130) = *(_BYTE *)(a1 + 72);
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 72);
    v129 = *(_QWORD *)(a1 + 64) | 0xFFFFFFFF00000000;
    v130 = v4;
  }
  sub_2238231F8(&v127, a1, (uint64_t)&v129);
  v5 = (char *)v127;
  v6 = v128;
  if (v127 == v128)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v5)
      goto LABEL_169;
    return;
  }
  v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v102 = *MEMORY[0x24BEDB7F0];
  v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v99 = MEMORY[0x24BEDB848] + 16;
  v98 = v3;
  v103 = v128;
  do
  {
    sub_223821DD4(&v126);
    if (**(int **)(v126 + 56) > 3)
      goto LABEL_152;
    v7 = *(unsigned __int8 *)(v126 + 72);
    v8 = sub_22322F254(v126, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (!v7 && v8 == 0)
      goto LABEL_152;
    sub_223195210((uint64_t)v116);
    LODWORD(v138) = 0;
    sub_22330048C(v137, "Found keyframe to prune (persisted on disk): ");
    sub_22319B83C((uint64_t)&v131, (uint64_t)v137, (unsigned __int8 *)v5);
    if ((_DWORD)v138 == -1)
      sub_22316DD70();
    *(_QWORD *)&v131 = &v135;
    ((void (*)(void **__return_ptr, __int128 *, _BYTE *))off_24EC5B118[v138])(__p, &v131, v137);
    if ((_DWORD)v138 != -1)
      ((void (*)(__int128 *, _BYTE *))off_24EC5B100[v138])(&v131, v137);
    if (rep >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    v12 = strlen((const char *)v11);
    sub_2231813E8(v117, (uint64_t)v11, v12);
    if (SHIBYTE(rep) < 0)
    {
      operator delete(__p[0]);
      v13 = v124;
      if ((v124 & 0x10) != 0)
      {
LABEL_22:
        v16 = v123;
        v17 = (const void **)&v119;
        if (v123 < v120)
        {
          v123 = v120;
          v16 = v120;
          v17 = (const void **)&v119;
        }
        goto LABEL_25;
      }
    }
    else
    {
      v13 = v124;
      if ((v124 & 0x10) != 0)
        goto LABEL_22;
    }
    if ((v13 & 8) == 0)
    {
      v14 = 0;
      HIBYTE(v115) = 0;
      v15 = __dst;
      goto LABEL_33;
    }
    v16 = v118[2];
    v17 = (const void **)v118;
LABEL_25:
    v18 = *v17;
    v14 = v16 - (_QWORD)*v17;
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v14 >= 0x17)
    {
      v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v19 = v14 | 7;
      v20 = v19 + 1;
      v15 = (void **)operator new(v19 + 1);
      __dst[1] = (void *)v14;
      v115 = v20 | 0x8000000000000000;
      __dst[0] = v15;
LABEL_32:
      memmove(v15, v18, v14);
      goto LABEL_33;
    }
    HIBYTE(v115) = v16 - *(_BYTE *)v17;
    v15 = __dst;
    if (v14)
      goto LABEL_32;
LABEL_33:
    *((_BYTE *)v15 + v14) = 0;
    __p[0] = &v126;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v108 = 3;
    v109 = "unknown file";
    v110 = 389;
    v111 = "unknown function";
    v112 = 0;
    v113 = 0;
    if (v115 >= 0)
      v21 = __dst;
    else
      v21 = (void **)__dst[0];
    v22 = *(_QWORD *)__p[0];
    v23 = (const char *)(*(_QWORD *)__p[0] + 16);
    v104 = v23;
    __s = (char *)v21;
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v23 = *(const char **)(v22 + 16);
      v24 = *(_QWORD *)(v22 + 24);
      v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v26 & 1) != 0)
        goto LABEL_40;
    }
    else
    {
      v24 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v25 & 1) != 0)
        goto LABEL_40;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v131);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v131, &xmmword_255788F40);
      if ((_BYTE)v133 && SHIBYTE(v132) < 0)
        operator delete((void *)v131);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v3 = v98;
    }
LABEL_40:
    if (byte_255788F57 >= 0)
      v27 = (const char *)&xmmword_255788F40;
    else
      v27 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v28 = byte_255788F57;
    else
      v28 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v137 = os_log_create(v27, v23);
    if (v28 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v28 >= 0x17)
    {
      v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v30 = v28 | 7;
      v31 = v30 + 1;
      v29 = operator new(v30 + 1);
      *(_QWORD *)&v137[16] = v28;
      *(_QWORD *)&v138 = v31 | 0x8000000000000000;
      *(_QWORD *)&v137[8] = v29;
      v3 = v98;
LABEL_53:
      memmove(v29, v27, v28);
      goto LABEL_54;
    }
    BYTE7(v138) = v28;
    v29 = &v137[8];
    if (v28)
      goto LABEL_53;
LABEL_54:
    v29[v28] = 0;
    BYTE8(v138) = 1;
    if (v24 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v24 >= 0x17)
    {
      v34 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v34 = v24 | 7;
      v35 = v34 + 1;
      v32 = (void **)operator new(v34 + 1);
      v139[1] = (void *)v24;
      v140 = v35 | 0x8000000000000000;
      v139[0] = v32;
    }
    else
    {
      HIBYTE(v140) = v24;
      v32 = v139;
      if (!v24)
      {
        LOBYTE(v139[0]) = 0;
        v141 = 1;
        v33 = *(NSObject **)v137;
        if ((SHIBYTE(v140) & 0x80000000) == 0)
          goto LABEL_58;
        goto LABEL_64;
      }
    }
    memmove(v32, v23, v24);
    *((_BYTE *)v32 + v24) = 0;
    v141 = 1;
    v33 = *(NSObject **)v137;
    if ((SHIBYTE(v140) & 0x80000000) == 0)
    {
LABEL_58:
      if (!BYTE8(v138))
        goto LABEL_67;
      goto LABEL_65;
    }
LABEL_64:
    operator delete(v139[0]);
    if (!BYTE8(v138))
      goto LABEL_67;
LABEL_65:
    if (SBYTE7(v138) < 0)
      operator delete(*(void **)&v137[8]);
LABEL_67:
    if (*(_QWORD *)v137)
      os_release(*(void **)v137);
    if (!v9 || !*(_QWORD *)(v9 + 24))
    {
      os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
      *(_DWORD *)v137 = 136315138;
      *(_QWORD *)&v137[4] = __s;
      v42 = (void *)_os_log_send_and_compose_impl();
      if (!v42)
        goto LABEL_139;
      free(v42);
      if (!v7)
        goto LABEL_143;
      goto LABEL_140;
    }
    v36 = _os_log_pack_size();
    v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
    v38 = (std::__shared_weak_count *)operator new();
    v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v38->__shared_owners_ = 0;
    v38->__shared_weak_owners_ = 0;
    v38[1].__vftable = v37;
    *(_QWORD *)&v131 = v37;
    *((_QWORD *)&v131 + 1) = v37;
    v132 = v38;
    v133 = 0;
    v134 = 0;
    v39 = strlen(__s);
    if (v39 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v40 = v39;
    if (v39 >= 0x17)
    {
      v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v43 = v39 | 7;
      v44 = v43 + 1;
      v41 = operator new(v43 + 1);
      *(_QWORD *)&v136 = v40;
      *((_QWORD *)&v136 + 1) = v44 | 0x8000000000000000;
      v135 = v41;
LABEL_81:
      memcpy(v41, __s, v40);
      goto LABEL_82;
    }
    HIBYTE(v136) = v39;
    v41 = &v135;
    if (v39)
      goto LABEL_81;
LABEL_82:
    *((_BYTE *)v41 + v40) = 0;
    v45 = v135;
    v142[0] = v136;
    *(_QWORD *)((char *)v142 + 7) = *(_QWORD *)((char *)&v136 + 7);
    v46 = HIBYTE(v136);
    v47 = operator new(0x38uLL);
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = off_24EC1FA48;
    *v47 = &off_24EC1F9F8;
    v48 = v142[0];
    v47[4] = v45;
    v47[5] = v48;
    *(_QWORD *)((char *)v47 + 47) = *(_QWORD *)((char *)v142 + 7);
    *((_BYTE *)v47 + 55) = v46;
    v142[0] = 0;
    *(_QWORD *)((char *)v142 + 7) = 0;
    v49 = v134;
    v133 = (char *)(v47 + 3);
    v134 = (std::__shared_weak_count *)v47;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    *(_OWORD *)v137 = v131;
    v52 = v133;
    *(_QWORD *)&v137[16] = v132;
    if (v132)
    {
      v53 = (unint64_t *)&v132->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = v134;
    *(_QWORD *)&v138 = v52;
    *((_QWORD *)&v138 + 1) = v134;
    if (v134)
    {
      v56 = (unint64_t *)&v134->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      v139[0] = v52;
      do
        v58 = __ldaxr(v56);
      while (__stlxr(v58 - 1, v56));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    else
    {
      v139[0] = v52;
    }
    v59 = v132;
    if (v132)
    {
      v60 = (unint64_t *)&v132->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = *(_QWORD *)v137;
    if (*((char *)v139[0] + 31) >= 0)
      v63 = (char *)v139[0] + 8;
    else
      v63 = (char *)*((_QWORD *)v139[0] + 1);
    v64 = _os_log_pack_fill();
    *(_DWORD *)v64 = 136315138;
    *(_QWORD *)(v64 + 4) = v63;
    v65 = operator new();
    v66 = *(unsigned __int8 *)(v22 + 39);
    v67 = v104;
    if ((v66 & 0x80u) != 0)
    {
      v67 = *(const char **)(v22 + 16);
      v66 = *(_QWORD *)(v22 + 24);
    }
    *(_QWORD *)v65 = v62;
    *(_OWORD *)(v65 + 8) = *(_OWORD *)&v137[8];
    *(_QWORD *)&v137[8] = 0;
    *(_QWORD *)&v137[16] = 0;
    *(_OWORD *)(v65 + 24) = v138;
    v138 = 0uLL;
    *(_QWORD *)(v65 + 40) = v67;
    *(_QWORD *)(v65 + 48) = v66;
    *(_BYTE *)(v65 + 56) = 1;
    v135 = 0;
    *(_QWORD *)&v131 = v65;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v131);
    v68 = v131;
    *(_QWORD *)&v131 = 0;
    if (v68)
    {
      v69 = *(std::__shared_weak_count **)(v68 + 32);
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *(std::__shared_weak_count **)(v68 + 16);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x227684CE8](v68, 0x10F0C40B62ED6C6);
      v75 = v135;
      v135 = 0;
      if (v75)
      {
        v76 = (std::__shared_weak_count *)v75[4];
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = (std::__shared_weak_count *)v75[2];
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
      }
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    if (!*((_QWORD *)&v138 + 1))
      goto LABEL_135;
    v83 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      v85 = *(std::__shared_weak_count **)&v137[16];
      if (!*(_QWORD *)&v137[16])
        goto LABEL_139;
    }
    else
    {
LABEL_135:
      v85 = *(std::__shared_weak_count **)&v137[16];
      if (!*(_QWORD *)&v137[16])
        goto LABEL_139;
    }
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (v87)
    {
LABEL_139:
      if (!v7)
        goto LABEL_143;
      goto LABEL_140;
    }
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    if (!v7)
      goto LABEL_143;
LABEL_140:
    v88 = (const char *)__dst;
    if (v115 < 0)
      v88 = (const char *)__dst[0];
    sub_22322C138((uint64_t)__p, "%s", v88);
    sub_223182C08((uint64_t)__p);
LABEL_143:
    sub_223182C08((uint64_t)__p);
    v89 = v113;
    if (v113)
    {
      v90 = (unint64_t *)&v113->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
        if ((SHIBYTE(v115) & 0x80000000) == 0)
          goto LABEL_149;
LABEL_148:
        operator delete(__dst[0]);
        goto LABEL_149;
      }
    }
    if (SHIBYTE(v115) < 0)
      goto LABEL_148;
LABEL_149:
    v116[0] = v102;
    *(_QWORD *)((char *)v116 + *(_QWORD *)(v102 - 24)) = v101;
    v117[0] = v100;
    v117[1] = v99;
    v6 = v103;
    if (v122 < 0)
      operator delete(v121);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](&v125);
LABEL_152:
    v92 = sub_223822434(v3, *(_QWORD *)v5, *((_QWORD *)v5 + 1));
    *((_WORD *)v92 + 56) = 0x2000;
    *((_BYTE *)v92 + 114) = 0;
    v5 += 16;
  }
  while (v5 != v6);
  v5 = (char *)v127;
  v93 = v128;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v94 = v93 - v5;
  if (v93 != v5)
  {
    if (v94 < 0)
      sub_22316E078();
    v95 = (char *)operator new(v93 - v5);
    *a3 = v95;
    v96 = &v95[16 * (v94 >> 4)];
    a3[2] = v96;
    memcpy(v95, v5, v94);
    a3[1] = v96;
  }
  if (v5)
LABEL_169:
    operator delete(v5);
}

void sub_223828538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  uint64_t v51;

  if (*(_BYTE *)(v51 - 232) && *(char *)(v51 - 233) < 0)
    operator delete(*(void **)(v51 - 256));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a36);
  if (a50 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a51);
  if (!STACK[0x258])
    _Unwind_Resume(a1);
  operator delete((void *)STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_223828708(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  size_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void **p_src;
  _QWORD *v21;
  void **p_p;
  unint64_t *v23;
  uint64_t **v24;
  void **v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v66;
  uint64_t v67;
  unint64_t *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  __int128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t **v105;
  _QWORD *v106;
  uint64_t **v107;
  void **v108;
  uint64_t **v109;
  _QWORD *v110;
  uint64_t **v111;
  _QWORD *v112;
  __int128 *v113;
  _QWORD *v114;
  __int128 *v115;
  void **v116;
  size_t *v117;
  std::__shared_weak_count **v118;
  uint64_t **p_dst;
  _QWORD *v120;
  void **v121;
  void **v122;
  void **v123;
  uint64_t v124;
  __int128 *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  void **v130;
  uint64_t v131;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v147;
  uint64_t v148;
  unint64_t *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  void **v153;
  char *v154;
  __int128 *v155;
  __int128 *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  uint64_t v168;
  uint64_t **v169;
  uint64_t v170;
  unint64_t *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t *v197;
  uint64_t **v198;
  uint64_t **v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t **v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  void *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  size_t *v219;
  unint64_t v220;
  uint64_t v221;
  __int128 *v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  float32x4_t v233;
  void **v234;
  _QWORD *v235;
  void **v236;
  unint64_t *v237;
  uint64_t **v238;
  void **v239;
  void **v240;
  uint64_t v241;
  __int128 *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void **v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void **v254;
  void **v255;
  void **v256;
  void **v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void **v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  void **v272;
  uint64_t **v273;
  _QWORD *v274;
  uint64_t **v275;
  void **v276;
  uint64_t **v277;
  __int128 *v278;
  uint64_t **v279;
  void **v280;
  void **v281;
  void **v282;
  unint64_t *v283;
  uint64_t *v284;
  void **v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  size_t *v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void **v304;
  void **v305;
  void **v306;
  void **v307;
  uint64_t v308;
  uint64_t v309;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  unint64_t *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  void **v331;
  char *v332;
  char *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  void **v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  _QWORD *v367;
  uint64_t **v368;
  _QWORD *v369;
  uint64_t **v370;
  _QWORD *v371;
  uint64_t **v372;
  _QWORD *v373;
  uint64_t **v374;
  void **v375;
  uint64_t **v376;
  __int128 *v377;
  uint64_t **v378;
  void **v379;
  uint64_t **v380;
  _QWORD *v381;
  uint64_t **v382;
  void **v383;
  void **v384;
  void **v385;
  _QWORD *v386;
  uint64_t v387;
  size_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  void **v392;
  _QWORD *v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  void **v411;
  uint64_t v412;
  __int128 *v413;
  uint64_t v414;
  void **v415;
  uint64_t *v416;
  uint64_t *v417;
  float32x4_t *v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  void **v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  unint64_t *v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  _QWORD *v457;
  unint64_t *v458;
  uint64_t *v459;
  uint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void **v471;
  uint64_t v472;
  uint64_t **v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  _QWORD *v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  __int128 *v485;
  char *v486;
  char *v487;
  uint64_t *v488;
  uint64_t *v489;
  int v490;
  unint64_t v491;
  unint64_t v492;
  const char *v494;
  size_t v495;
  char v496;
  size_t v497;
  uint64_t **v498;
  unint64_t v499;
  const void **v500;
  const void *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t **v504;
  char *v505;
  size_t v506;
  const char *v507;
  unsigned __int8 v508;
  unsigned __int8 v509;
  const char *v510;
  size_t v511;
  _BYTE *v512;
  uint64_t v513;
  uint64_t v514;
  void *v515;
  NSObject *v516;
  uint64_t v517;
  uint64_t v518;
  size_t v519;
  std::__shared_weak_count_vtbl *v520;
  std::__shared_weak_count *v521;
  size_t v522;
  size_t v523;
  uint64_t *v524;
  void *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  char v529;
  _QWORD *v530;
  uint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *p_shared_owners;
  unint64_t v534;
  void *v535;
  unint64_t *v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  char *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  uint64_t *v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  const char *v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  _QWORD *v575;
  uint64_t *v576;
  __int128 *v577;
  uint64_t v578;
  uint64_t **v579;
  uint64_t v580;
  uint64_t v581;
  void *v582;
  unint64_t v583;
  void *v584;
  uint64_t *v585;
  unint64_t v586;
  _QWORD *v587;
  uint64_t v588;
  char *__s;
  uint64_t *v590;
  uint64_t *v591;
  uint64_t v592;
  __int128 *v593;
  void *__src;
  _BYTE *v595;
  _QWORD v596[2];
  _QWORD *v597;
  uint64_t v598;
  const char *v599;
  unint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t *v603;
  void *v604;
  uint64_t *v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t **v608;
  uint64_t *v609;
  uint64_t *v610;
  void (**v611)(void **, uint64_t **);
  _QWORD v612[2];
  void **v613;
  void **v614;
  uint64_t *v615;
  _BYTE v616[24];
  _BYTE *v617;
  uint64_t v618;
  _BYTE v619[24];
  _BYTE *v620;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v623;
  int v624;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v625;
  int v626;
  const char *v627;
  uint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  uint64_t *v631;
  _QWORD v632[3];
  uint64_t **v633;
  uint64_t *v634;
  _QWORD v635[3];
  void **v636;
  _BYTE object[24];
  __int128 v638;
  void *v639;
  size_t v640;
  unint64_t v641;
  char v642;
  unint64_t *v643;
  void *v644;
  uint64_t *v645;
  _QWORD v646[2];
  uint64_t **v647;
  uint64_t *v648;
  uint64_t *v649;
  uint64_t *v650;
  _QWORD v651[2];
  uint64_t **v652;
  void **v653;
  uint64_t *v654;
  _QWORD v655[3];
  _QWORD *v656;
  uint64_t *v657;
  uint64_t *v658;
  _QWORD v659[2];
  uint64_t **v660;
  _QWORD *v661;
  void *v662;
  _QWORD v663[3];
  _QWORD *v664;
  const char *v665;
  _QWORD v666[3];
  _QWORD *v667;
  uint64_t *v668;
  _QWORD v669[3];
  _QWORD *v670;
  size_t v671;
  _QWORD v672[3];
  _QWORD *v673;
  uint64_t *v674;
  _QWORD v675[3];
  _QWORD *v676;
  const char *v677;
  _QWORD v678[3];
  _QWORD *v679;
  uint64_t *v680;
  _QWORD v681[3];
  _QWORD *v682;
  uint64_t *v683;
  _QWORD v684[3];
  _QWORD *v685;
  void *v686;
  _QWORD v687[3];
  _QWORD *v688;
  const char *v689;
  _QWORD v690[3];
  _QWORD *v691;
  uint64_t *v692;
  _QWORD v693[3];
  _QWORD *v694;
  const char *v695;
  _QWORD v696[3];
  _QWORD *v697;
  uint64_t *v698;
  _QWORD v699[3];
  _QWORD *v700;
  const char *v701;
  _QWORD v702[3];
  _QWORD *v703;
  uint64_t *v704;
  _QWORD v705[3];
  _QWORD *v706;
  uint64_t *v707;
  _QWORD v708[3];
  _QWORD *v709;
  uint64_t *v710;
  _QWORD v711[3];
  _QWORD *v712;
  const char *v713;
  _QWORD v714[3];
  _QWORD *v715;
  uint64_t *v716;
  _QWORD v717[3];
  std::__shared_weak_count *v718;
  uint64_t *v719;
  _QWORD v720[3];
  _QWORD *v721;
  uint64_t *v722;
  _QWORD v723[3];
  std::__shared_weak_count *v724;
  const char *v725;
  _QWORD v726[3];
  _QWORD *v727;
  uint64_t *v728;
  _QWORD v729[3];
  std::__shared_weak_count *v730;
  uint64_t *v731;
  _QWORD v732[3];
  void **v733;
  uint64_t *v734;
  _QWORD v735[3];
  std::__shared_weak_count *v736;
  const char *v737;
  _QWORD v738[3];
  _QWORD *v739;
  _OWORD v740[2];
  std::__shared_weak_count *v741;
  uint64_t *v742;
  _QWORD v743[3];
  void **v744;
  uint64_t *__dst;
  size_t v746;
  int64_t v747;
  std::__shared_weak_count *v748;
  uint64_t *v749;
  _QWORD v750[3];
  _QWORD *v751;
  uint64_t *v752;
  __int128 v753;
  __int128 *v754;
  const char *v755;
  _QWORD v756[3];
  void **v757;
  __int128 v758;
  std::__shared_weak_count *v759;
  char *v760;
  std::__shared_weak_count *v761;
  uint64_t *v762;
  _QWORD v763[3];
  void **v764;
  uint64_t v765;

  v765 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v5 - a2;
  if (v5 <= a2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_223840028(&v654, a1, a1);
  v9 = (uint64_t)v656;
  v752 = v654;
  v10 = &v753;
  if (!v656)
    goto LABEL_5;
  if (v656 != v655)
  {
    v9 = (*(uint64_t (**)(void))(*v656 + 16))();
LABEL_5:
    v754 = (__int128 *)v9;
    goto LABEL_8;
  }
  v754 = &v753;
  (*(void (**)(void))(*v656 + 24))();
LABEL_8:
  v579 = a4;
  v11 = (uint64_t)v660;
  __dst = v657;
  v12 = &v746;
  if (!v660)
  {
LABEL_11:
    v748 = (std::__shared_weak_count *)v11;
    goto LABEL_13;
  }
  if (v660 != &v658)
  {
    v11 = ((uint64_t (*)(void))(*v660)[2])();
    goto LABEL_11;
  }
  v748 = (std::__shared_weak_count *)&v746;
  ((void (*)(void))(*v660)[3])();
LABEL_13:
  v13 = (uint64_t)v754;
  *(_QWORD *)&v740[0] = v752;
  v14 = (_QWORD *)v740 + 1;
  if (!v754)
  {
LABEL_16:
    v741 = (std::__shared_weak_count *)v13;
    goto LABEL_18;
  }
  if (v754 != &v753)
  {
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v754 + 16))();
    goto LABEL_16;
  }
  v741 = (std::__shared_weak_count *)((char *)v740 + 8);
  (*(void (**)(__int128 *, char *))(v753 + 24))(&v753, (char *)v740 + 8);
LABEL_18:
  v15 = (uint64_t)v748;
  v734 = __dst;
  v16 = v735;
  if (!v748)
  {
LABEL_21:
    v736 = (std::__shared_weak_count *)v15;
    goto LABEL_23;
  }
  if (v748 != (std::__shared_weak_count *)&v746)
  {
    v15 = ((uint64_t (*)(void))v748->__on_zero_shared)();
    goto LABEL_21;
  }
  v736 = (std::__shared_weak_count *)v735;
  (*(void (**)(size_t *, _QWORD *))(v746 + 24))(&v746, v735);
LABEL_23:
  sub_2238425D8((uint64_t **)&__p, (uint64_t **)v740, &v734);
  v17 = (uint64_t)v748;
  v728 = __dst;
  v18 = v729;
  v586 = v6;
  if (!v748)
  {
    v730 = 0;
    v722 = __dst;
    v19 = v723;
LABEL_31:
    v724 = (std::__shared_weak_count *)v17;
    goto LABEL_32;
  }
  if (v748 == (std::__shared_weak_count *)&v746)
  {
    v730 = (std::__shared_weak_count *)v729;
    (*(void (**)(size_t *, _QWORD *))(v746 + 24))(&v746, v729);
  }
  else
  {
    v730 = (std::__shared_weak_count *)((uint64_t (*)(void))v748->__on_zero_shared)();
  }
  v17 = (uint64_t)v748;
  v722 = __dst;
  v19 = v723;
  if (!v748)
    goto LABEL_31;
  if (v748 != (std::__shared_weak_count *)&v746)
  {
    v17 = ((uint64_t (*)(void))v748->__on_zero_shared)();
    goto LABEL_31;
  }
  v724 = (std::__shared_weak_count *)v723;
  (*(void (**)(size_t *, _QWORD *))(v746 + 24))(&v746, v723);
LABEL_32:
  sub_2238425D8((uint64_t **)&v758, &v728, &v722);
  __src = __p;
  p_src = &__src;
  v21 = &v595;
  if (!v625)
  {
LABEL_35:
    p_src[4] = 0;
    goto LABEL_37;
  }
  p_src = &__p;
  if (v625 != &rep)
  {
    v597 = v625;
    goto LABEL_35;
  }
  v597 = &v595;
  (*(void (**)(void))(rep + 24))();
LABEL_37:
  v599 = v627;
  p_p = &__src;
  v23 = &v600;
  v587 = (_QWORD *)a1;
  if (!v630)
  {
LABEL_40:
    p_p[10] = 0;
    goto LABEL_42;
  }
  p_p = &__p;
  if (v630 != (unint64_t *)&v628)
  {
    v603 = v630;
    goto LABEL_40;
  }
  v603 = &v600;
  (*(void (**)(void))(v628 + 24))();
LABEL_42:
  v604 = (void *)v758;
  v24 = &v605;
  v578 = a3;
  if (v761)
  {
    if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
    {
      v608 = &v605;
      ((void (*)(std::__shared_weak_count *, uint64_t **))v761->__get_deleter)(v761, &v605);
    }
    else
    {
      v608 = (uint64_t **)v761;
      v761 = 0;
    }
  }
  else
  {
    v608 = 0;
  }
  v610 = v762;
  v25 = (void **)&v611;
  if (v764)
  {
    if (v764 == v763)
    {
      v613 = (void **)&v611;
      (*((void (**)(void))*v764 + 3))();
    }
    else
    {
      v613 = v764;
      v764 = 0;
    }
  }
  else
  {
    v613 = 0;
  }
  v26 = v764;
  if (v764 == v763)
  {
    v27 = 4;
    v26 = (void **)v763;
  }
  else
  {
    if (!v764)
      goto LABEL_57;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_57:
  v28 = &v761->__vftable;
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v29 = 4;
    v28 = (_QWORD *)&v758 + 1;
  }
  else
  {
    if (!v761)
      goto LABEL_62;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_62:
  if (v724 == (std::__shared_weak_count *)v723)
  {
    v30 = 4;
  }
  else
  {
    if (!v724)
      goto LABEL_67;
    v30 = 5;
    v19 = &v724->__vftable;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v30))(v19);
LABEL_67:
  if (v730 == (std::__shared_weak_count *)v729)
  {
    v32 = 4;
    v31 = v586;
  }
  else
  {
    v31 = v586;
    if (!v730)
      goto LABEL_72;
    v32 = 5;
    v18 = &v730->__vftable;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v32))(v18);
LABEL_72:
  v33 = v630;
  if (v630 == (unint64_t *)&v628)
  {
    v34 = 4;
    v33 = (unint64_t *)&v628;
  }
  else
  {
    if (!v630)
      goto LABEL_77;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_77:
  v35 = v625;
  if (v625 == &rep)
  {
    v36 = 4;
    v35 = &rep;
  }
  else
  {
    if (!v625)
      goto LABEL_82;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_82:
  if (v736 == (std::__shared_weak_count *)v735)
  {
    v37 = 4;
  }
  else
  {
    if (!v736)
      goto LABEL_87;
    v37 = 5;
    v16 = &v736->__vftable;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v37))(v16);
LABEL_87:
  if (v741 == (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v38 = 4;
  }
  else
  {
    if (!v741)
      goto LABEL_92;
    v38 = 5;
    v14 = &v741->__vftable;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v38))(v14);
LABEL_92:
  if (v748 == (std::__shared_weak_count *)&v746)
  {
    v39 = 4;
  }
  else
  {
    if (!v748)
      goto LABEL_97;
    v39 = 5;
    v12 = (size_t *)v748;
  }
  (*(void (**)(size_t *))(*v12 + 8 * v39))(v12);
LABEL_97:
  if (v754 == &v753)
  {
    v40 = 4;
  }
  else
  {
    if (!v754)
      goto LABEL_102;
    v40 = 5;
    v10 = v754;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v10 + 8 * v40))(v10);
LABEL_102:
  *(_QWORD *)object = __src;
  v41 = (void **)object;
  if (!v597)
  {
LABEL_105:
    v41[4] = 0;
    goto LABEL_107;
  }
  if (v597 != &v595)
  {
    v41 = &__src;
    *((_QWORD *)&v638 + 1) = v597;
    goto LABEL_105;
  }
  *((_QWORD *)&v638 + 1) = &object[8];
  (*((void (**)(_BYTE **, _BYTE *))v595 + 3))(&v595, &object[8]);
LABEL_107:
  v640 = (size_t)v599;
  v42 = (void **)object;
  if (!v603)
  {
LABEL_110:
    v42[10] = 0;
    goto LABEL_112;
  }
  if (v603 != &v600)
  {
    v42 = &__src;
    v643 = v603;
    goto LABEL_110;
  }
  v643 = &v641;
  (*(void (**)(unint64_t *, unint64_t *))(v600 + 24))(&v600, &v641);
LABEL_112:
  v644 = v604;
  v43 = (void **)object;
  if (!v608)
  {
LABEL_115:
    v43[15] = 0;
    goto LABEL_117;
  }
  if (v608 != &v605)
  {
    v43 = &__src;
    v647 = v608;
    goto LABEL_115;
  }
  v647 = &v645;
  ((void (*)(uint64_t **, uint64_t **))v605[3])(&v605, &v645);
LABEL_117:
  v649 = v610;
  v44 = (void **)object;
  if (!v613)
  {
LABEL_120:
    v44[21] = 0;
    goto LABEL_122;
  }
  if (v613 != (void **)&v611)
  {
    v44 = &__src;
    v652 = (uint64_t **)v613;
    goto LABEL_120;
  }
  v652 = &v650;
  v611[3]((void **)&v611, &v650);
LABEL_122:
  if (v613 == (void **)&v611)
  {
    v45 = 4;
  }
  else
  {
    if (!v613)
      goto LABEL_127;
    v45 = 5;
    v25 = v613;
  }
  (*((void (**)(void **))*v25 + v45))(v25);
LABEL_127:
  if (v608 == &v605)
  {
    v46 = 4;
  }
  else
  {
    if (!v608)
      goto LABEL_132;
    v46 = 5;
    v24 = v608;
  }
  ((void (*)(uint64_t **))(*v24)[v46])(v24);
LABEL_132:
  if (v603 == &v600)
  {
    v47 = 4;
  }
  else
  {
    if (!v603)
      goto LABEL_137;
    v47 = 5;
    v23 = v603;
  }
  (*(void (**)(unint64_t *))(*v23 + 8 * v47))(v23);
LABEL_137:
  if (v597 == &v595)
  {
    v48 = 4;
  }
  else
  {
    if (!v597)
      goto LABEL_142;
    v48 = 5;
    v21 = v597;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v48))(v21);
LABEL_142:
  v49 = *((_QWORD *)&v638 + 1);
  v668 = *(uint64_t **)object;
  if (!*((_QWORD *)&v638 + 1))
  {
LABEL_145:
    v670 = (_QWORD *)v49;
    goto LABEL_147;
  }
  if (*((_BYTE **)&v638 + 1) != &object[8])
  {
    v49 = (*(uint64_t (**)(void))(**((_QWORD **)&v638 + 1) + 16))();
    goto LABEL_145;
  }
  v670 = v669;
  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)&object[8] + 24))(&object[8], v669);
LABEL_147:
  v50 = (uint64_t)v643;
  v671 = v640;
  if (!v643)
  {
LABEL_150:
    v673 = (_QWORD *)v50;
    goto LABEL_152;
  }
  if (v643 != &v641)
  {
    v50 = (*(uint64_t (**)(void))(*v643 + 16))();
    goto LABEL_150;
  }
  v673 = v672;
  (*(void (**)(unint64_t *, _QWORD *))(v641 + 24))(&v641, v672);
LABEL_152:
  v51 = (uint64_t)v647;
  v662 = v644;
  if (!v647)
  {
LABEL_155:
    v664 = (_QWORD *)v51;
    goto LABEL_157;
  }
  if (v647 != &v645)
  {
    v51 = ((uint64_t (*)(void))(*v647)[2])();
    goto LABEL_155;
  }
  v664 = v663;
  ((void (*)(uint64_t **, _QWORD *))v645[3])(&v645, v663);
LABEL_157:
  v52 = (uint64_t)v652;
  v665 = (const char *)v649;
  if (!v652)
  {
LABEL_160:
    v667 = (_QWORD *)v52;
    goto LABEL_162;
  }
  if (v652 != &v650)
  {
    v52 = ((uint64_t (*)(void))(*v652)[2])();
    goto LABEL_160;
  }
  v667 = v666;
  ((void (*)(uint64_t **, _QWORD *))v650[3])(&v650, v666);
LABEL_162:
  v593 = 0;
  v592 = 0;
  v53 = (uint64_t)v670;
  v692 = v668;
  v54 = v693;
  if (!v670)
  {
LABEL_165:
    v694 = (_QWORD *)v53;
    goto LABEL_167;
  }
  if (v670 != v669)
  {
    v53 = (*(uint64_t (**)(void))(*v670 + 16))();
    goto LABEL_165;
  }
  v694 = v693;
  (*(void (**)(_QWORD *, _QWORD *))(v669[0] + 24))(v669, v693);
LABEL_167:
  v55 = (uint64_t)v673;
  v695 = (const char *)v671;
  v56 = v696;
  if (!v673)
  {
LABEL_170:
    v697 = (_QWORD *)v55;
    goto LABEL_172;
  }
  if (v673 != v672)
  {
    v55 = (*(uint64_t (**)(void))(*v673 + 16))();
    goto LABEL_170;
  }
  v697 = v696;
  (*(void (**)(_QWORD *, _QWORD *))(v672[0] + 24))(v672, v696);
LABEL_172:
  v57 = (uint64_t)v664;
  v686 = v662;
  v58 = v687;
  if (!v664)
  {
LABEL_175:
    v688 = (_QWORD *)v57;
    goto LABEL_177;
  }
  if (v664 != v663)
  {
    v57 = (*(uint64_t (**)(void))(*v664 + 16))();
    goto LABEL_175;
  }
  v688 = v687;
  (*(void (**)(_QWORD *, _QWORD *))(v663[0] + 24))(v663, v687);
LABEL_177:
  v59 = (uint64_t)v667;
  v689 = v665;
  v60 = v690;
  if (!v667)
  {
LABEL_180:
    v691 = (_QWORD *)v59;
    goto LABEL_182;
  }
  if (v667 != v666)
  {
    v59 = (*(uint64_t (**)(void))(*v667 + 16))();
    goto LABEL_180;
  }
  v691 = v690;
  (*(void (**)(_QWORD *, _QWORD *))(v666[0] + 24))(v666, v690);
LABEL_182:
  v61 = (uint64_t)v694;
  __src = v692;
  v62 = &v595;
  if (!v694)
  {
LABEL_185:
    v597 = (_QWORD *)v61;
    goto LABEL_187;
  }
  if (v694 != v693)
  {
    v61 = (*(uint64_t (**)(void))(*v694 + 16))();
    goto LABEL_185;
  }
  v597 = &v595;
  (*(void (**)(_QWORD *, _BYTE **))(v693[0] + 24))(v693, &v595);
LABEL_187:
  v63 = (uint64_t)v697;
  v599 = v695;
  v64 = &v600;
  if (!v697)
  {
LABEL_190:
    v603 = (unint64_t *)v63;
    goto LABEL_192;
  }
  if (v697 != v696)
  {
    v63 = (*(uint64_t (**)(void))(*v697 + 16))();
    goto LABEL_190;
  }
  v603 = &v600;
  (*(void (**)(_QWORD *, unint64_t *))(v696[0] + 24))(v696, &v600);
LABEL_192:
  v65 = (uint64_t)v688;
  __p = v686;
  v66 = &rep;
  if (!v688)
  {
LABEL_195:
    v625 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)v65;
    goto LABEL_197;
  }
  if (v688 != v687)
  {
    v65 = (*(uint64_t (**)(void))(*v688 + 16))();
    goto LABEL_195;
  }
  v625 = &rep;
  (*(void (**)(_QWORD *, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *))(v687[0] + 24))(v687, &rep);
LABEL_197:
  v67 = (uint64_t)v691;
  v627 = v689;
  v68 = (unint64_t *)&v628;
  if (!v691)
  {
LABEL_200:
    v630 = (unint64_t *)v67;
    goto LABEL_202;
  }
  if (v691 != v690)
  {
    v67 = (*(uint64_t (**)(void))(*v691 + 16))();
    goto LABEL_200;
  }
  v630 = (unint64_t *)&v628;
  (*(void (**)(_QWORD *, uint64_t *))(v690[0] + 24))(v690, &v628);
LABEL_202:
  v69 = (char *)__src;
  v70 = (char *)__p;
  if (__src == __p)
  {
    v71 = 0;
  }
  else
  {
    v71 = 0;
    do
    {
      v69 = *(char **)v69;
      __src = v69;
      if (v69 != v599)
      {
        do
        {
          if (!v597)
            sub_223198474();
          v72 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v597 + 48))(v597, (_QWORD *)v69 + 2);
          v69 = (char *)__src;
          if (*(_BYTE *)(v72 + 112) != 1)
            break;
          v69 = *(char **)__src;
          __src = v69;
        }
        while (v69 != v599);
        v70 = (char *)__p;
      }
      ++v71;
    }
    while (v69 != v70);
  }
  if (v630 == (unint64_t *)&v628)
  {
    v73 = 4;
  }
  else
  {
    if (!v630)
      goto LABEL_217;
    v73 = 5;
    v68 = v630;
  }
  (*(void (**)(unint64_t *))(*v68 + 8 * v73))(v68);
LABEL_217:
  if (v625 == &rep)
  {
    v75 = 4;
    v74 = v587;
  }
  else
  {
    v74 = v587;
    if (!v625)
      goto LABEL_222;
    v75 = 5;
    v66 = v625;
  }
  (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *))(*v66 + 8 * v75))(v66);
LABEL_222:
  if (v603 == &v600)
  {
    v77 = 4;
    v76 = v669;
  }
  else
  {
    v76 = v669;
    if (!v603)
      goto LABEL_227;
    v77 = 5;
    v64 = v603;
  }
  (*(void (**)(unint64_t *))(*v64 + 8 * v77))(v64);
LABEL_227:
  if (v597 == &v595)
  {
    v78 = 4;
  }
  else
  {
    if (!v597)
      goto LABEL_232;
    v78 = 5;
    v62 = v597;
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v78))(v62);
LABEL_232:
  if (v691 == v690)
  {
    v79 = 4;
  }
  else
  {
    if (!v691)
      goto LABEL_237;
    v79 = 5;
    v60 = v691;
  }
  (*(void (**)(_QWORD *))(*v60 + 8 * v79))(v60);
LABEL_237:
  if (v688 == v687)
  {
    v80 = 4;
  }
  else
  {
    if (!v688)
      goto LABEL_242;
    v80 = 5;
    v58 = v688;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v80))(v58);
LABEL_242:
  if (v697 == v696)
  {
    v81 = 4;
  }
  else
  {
    if (!v697)
      goto LABEL_247;
    v81 = 5;
    v56 = v697;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v81))(v56);
LABEL_247:
  if (v694 == v693)
  {
    v82 = 4;
  }
  else
  {
    if (!v694)
      goto LABEL_252;
    v82 = 5;
    v54 = v694;
  }
  (*(void (**)(_QWORD *))(*v54 + 8 * v82))(v54);
LABEL_252:
  v83 = (uint64_t)v670;
  v680 = v668;
  v84 = v681;
  if (!v670)
  {
LABEL_255:
    v682 = (_QWORD *)v83;
    goto LABEL_257;
  }
  if (v670 != v669)
  {
    v83 = (*(uint64_t (**)(void))(*v670 + 16))();
    goto LABEL_255;
  }
  v682 = v681;
  (*(void (**)(_QWORD *, _QWORD *))(v669[0] + 24))(v669, v681);
LABEL_257:
  v85 = (uint64_t)v673;
  v683 = (uint64_t *)v671;
  v86 = v684;
  if (!v673)
  {
LABEL_260:
    v685 = (_QWORD *)v85;
    goto LABEL_262;
  }
  if (v673 != v672)
  {
    v85 = (*(uint64_t (**)(void))(*v673 + 16))();
    goto LABEL_260;
  }
  v685 = v684;
  (*(void (**)(_QWORD *, _QWORD *))(v672[0] + 24))(v672, v684);
LABEL_262:
  v87 = (uint64_t)v664;
  v674 = (uint64_t *)v662;
  v88 = v675;
  if (!v664)
  {
LABEL_265:
    v676 = (_QWORD *)v87;
    goto LABEL_267;
  }
  if (v664 != v663)
  {
    v87 = (*(uint64_t (**)(void))(*v664 + 16))();
    goto LABEL_265;
  }
  v676 = v675;
  (*(void (**)(_QWORD *, _QWORD *))(v663[0] + 24))(v663, v675);
LABEL_267:
  v89 = (uint64_t)v667;
  v677 = v665;
  v90 = v678;
  if (!v667)
  {
LABEL_270:
    v679 = (_QWORD *)v89;
    goto LABEL_272;
  }
  if (v667 != v666)
  {
    v89 = (*(uint64_t (**)(void))(*v667 + 16))();
    goto LABEL_270;
  }
  v679 = v678;
  (*(void (**)(_QWORD *, _QWORD *))(v666[0] + 24))(v666, v678);
LABEL_272:
  if (!v71)
    goto LABEL_586;
  if (v71 >> 57)
    sub_22316E078();
  v91 = (__int128 *)operator new(v71 << 7);
  v592 = (uint64_t)v91;
  v92 = (uint64_t)v682;
  v704 = v680;
  if (!v682)
    goto LABEL_277;
  if (v682 != v681)
  {
    v92 = (*(uint64_t (**)(void))(*v682 + 16))();
LABEL_277:
    v706 = (_QWORD *)v92;
    goto LABEL_280;
  }
  v706 = v705;
  (*(void (**)(_QWORD *, _QWORD *))(v681[0] + 24))(v681, v705);
LABEL_280:
  v93 = (uint64_t)v685;
  v707 = v683;
  if (!v685)
  {
LABEL_283:
    v709 = (_QWORD *)v93;
    goto LABEL_285;
  }
  if (v685 != v684)
  {
    v93 = (*(uint64_t (**)(void))(*v685 + 16))();
    goto LABEL_283;
  }
  v709 = v708;
  (*(void (**)(_QWORD *, _QWORD *))(v684[0] + 24))(v684, v708);
LABEL_285:
  v94 = (uint64_t)v676;
  v698 = v674;
  if (!v676)
  {
LABEL_288:
    v700 = (_QWORD *)v94;
    goto LABEL_290;
  }
  if (v676 != v675)
  {
    v94 = (*(uint64_t (**)(void))(*v676 + 16))();
    goto LABEL_288;
  }
  v700 = v699;
  (*(void (**)(_QWORD *, _QWORD *))(v675[0] + 24))(v675, v699);
LABEL_290:
  v95 = (uint64_t)v679;
  v701 = v677;
  if (!v679)
  {
LABEL_293:
    v703 = (_QWORD *)v95;
    goto LABEL_295;
  }
  if (v679 != v678)
  {
    v95 = (*(uint64_t (**)(void))(*v679 + 16))();
    goto LABEL_293;
  }
  v703 = v702;
  (*(void (**)(_QWORD *, _QWORD *))(v678[0] + 24))(v678, v702);
LABEL_295:
  v577 = v91;
  v96 = (uint64_t)v706;
  v716 = v704;
  if (!v706)
  {
LABEL_298:
    v718 = (std::__shared_weak_count *)v96;
    goto LABEL_300;
  }
  if (v706 != v705)
  {
    v96 = (*(uint64_t (**)(void))(*v706 + 16))();
    goto LABEL_298;
  }
  v718 = (std::__shared_weak_count *)v717;
  (*(void (**)(_QWORD *, _QWORD *))(v705[0] + 24))(v705, v717);
LABEL_300:
  v97 = (uint64_t)v709;
  v719 = v707;
  if (!v709)
  {
LABEL_303:
    v721 = (_QWORD *)v97;
    goto LABEL_305;
  }
  if (v709 != v708)
  {
    v97 = (*(uint64_t (**)(void))(*v709 + 16))();
    goto LABEL_303;
  }
  v721 = v720;
  (*(void (**)(_QWORD *))(v708[0] + 24))(v708);
LABEL_305:
  v98 = (uint64_t)v700;
  v710 = v698;
  if (!v700)
  {
LABEL_308:
    v712 = (_QWORD *)v98;
    goto LABEL_310;
  }
  if (v700 != v699)
  {
    v98 = (*(uint64_t (**)(void))(*v700 + 16))();
    goto LABEL_308;
  }
  v712 = v711;
  (*(void (**)(_QWORD *))(v699[0] + 24))(v699);
LABEL_310:
  v99 = (uint64_t)v703;
  v713 = v701;
  if (!v703)
  {
LABEL_313:
    v715 = (_QWORD *)v99;
    goto LABEL_315;
  }
  if (v703 != v702)
  {
    v99 = (*(uint64_t (**)(void))(*v703 + 16))();
    goto LABEL_313;
  }
  v715 = v714;
  (*(void (**)(_QWORD *))(v702[0] + 24))(v702);
LABEL_315:
  v100 = (uint64_t)v718;
  v728 = v716;
  if (!v718)
  {
LABEL_318:
    v730 = (std::__shared_weak_count *)v100;
    goto LABEL_320;
  }
  if (v718 != (std::__shared_weak_count *)v717)
  {
    v100 = ((uint64_t (*)(void))v718->__on_zero_shared)();
    goto LABEL_318;
  }
  v730 = (std::__shared_weak_count *)v729;
  (*(void (**)(_QWORD *))(v717[0] + 24))(v717);
LABEL_320:
  v101 = (uint64_t)v721;
  v731 = v719;
  if (!v721)
  {
LABEL_323:
    v733 = (void **)v101;
    goto LABEL_325;
  }
  if (v721 != v720)
  {
    v101 = (*(uint64_t (**)(void))(*v721 + 16))();
    goto LABEL_323;
  }
  v733 = (void **)v732;
  (*(void (**)(_QWORD *))(v720[0] + 24))(v720);
LABEL_325:
  v102 = (uint64_t)v712;
  v722 = v710;
  if (!v712)
  {
LABEL_328:
    v724 = (std::__shared_weak_count *)v102;
    goto LABEL_330;
  }
  if (v712 != v711)
  {
    v102 = (*(uint64_t (**)(void))(*v712 + 16))();
    goto LABEL_328;
  }
  v724 = (std::__shared_weak_count *)v723;
  (*(void (**)(_QWORD *, _QWORD *))(v711[0] + 24))(v711, v723);
LABEL_330:
  v103 = (uint64_t)v715;
  v725 = v713;
  v104 = v726;
  if (!v715)
  {
LABEL_333:
    v727 = (_QWORD *)v103;
    goto LABEL_335;
  }
  if (v715 != v714)
  {
    v103 = (*(uint64_t (**)(void))(*v715 + 16))();
    goto LABEL_333;
  }
  v727 = v726;
  (*(void (**)(_QWORD *, _QWORD *))(v714[0] + 24))(v714, v726);
LABEL_335:
  *(_QWORD *)&v740[0] = v728;
  v105 = (uint64_t **)v740;
  v106 = (_QWORD *)v740 + 1;
  if (!v730)
  {
LABEL_338:
    v105[4] = 0;
    goto LABEL_340;
  }
  if (v730 != (std::__shared_weak_count *)v729)
  {
    v105 = &v728;
    v741 = v730;
    goto LABEL_338;
  }
  v741 = (std::__shared_weak_count *)((char *)v740 + 8);
  (*(void (**)(void))(v729[0] + 24))();
LABEL_340:
  v742 = v731;
  v107 = (uint64_t **)v740;
  v108 = (void **)v743;
  if (!v733)
  {
LABEL_343:
    v107[10] = 0;
    goto LABEL_345;
  }
  if (v733 != v732)
  {
    v107 = &v728;
    v744 = v733;
    goto LABEL_343;
  }
  v744 = (void **)v743;
  (*(void (**)(void))(v732[0] + 24))();
LABEL_345:
  v734 = v722;
  v109 = &v734;
  v110 = v735;
  if (!v724)
  {
LABEL_348:
    v109[4] = 0;
    goto LABEL_350;
  }
  if (v724 != (std::__shared_weak_count *)v723)
  {
    v109 = &v722;
    v736 = v724;
    goto LABEL_348;
  }
  v736 = (std::__shared_weak_count *)v735;
  (*(void (**)(_QWORD *, _QWORD *))(v723[0] + 24))(v723, v735);
LABEL_350:
  v737 = v725;
  v111 = &v734;
  v112 = v738;
  if (!v727)
  {
LABEL_353:
    v111[10] = 0;
    goto LABEL_355;
  }
  if (v727 != v726)
  {
    v111 = &v722;
    v739 = v727;
    goto LABEL_353;
  }
  v739 = v738;
  (*(void (**)(_QWORD *, _QWORD *))(v726[0] + 24))(v726, v738);
LABEL_355:
  *(_QWORD *)&v758 = *(_QWORD *)&v740[0];
  v113 = &v758;
  v114 = (_QWORD *)&v758 + 1;
  if (!v741)
  {
LABEL_358:
    *((_QWORD *)v113 + 4) = 0;
    goto LABEL_360;
  }
  if (v741 != (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v113 = v740;
    v761 = v741;
    goto LABEL_358;
  }
  v761 = (std::__shared_weak_count *)((char *)&v758 + 8);
  (*(void (**)(char *, char *))(*((_QWORD *)&v740[0] + 1) + 24))((char *)v740 + 8, (char *)&v758 + 8);
LABEL_360:
  v762 = v742;
  v115 = &v758;
  v116 = (void **)v763;
  if (!v744)
  {
LABEL_363:
    *((_QWORD *)v115 + 10) = 0;
    goto LABEL_365;
  }
  if (v744 != v743)
  {
    v115 = v740;
    v764 = v744;
    goto LABEL_363;
  }
  v764 = (void **)v763;
  (*(void (**)(_QWORD *, _QWORD *))(v743[0] + 24))(v743, v763);
LABEL_365:
  sub_223842390(&__p, (uint64_t *)&v758);
  __dst = v734;
  v117 = &v746;
  if (!v736)
  {
    v118 = &v748;
    goto LABEL_369;
  }
  if (v736 != (std::__shared_weak_count *)v735)
  {
    v118 = &v736;
    v748 = v736;
LABEL_369:
    *v118 = 0;
    goto LABEL_371;
  }
  v748 = (std::__shared_weak_count *)&v746;
  (*(void (**)(_QWORD *, size_t *))(v735[0] + 24))(v735, &v746);
LABEL_371:
  v749 = (uint64_t *)v737;
  p_dst = &__dst;
  v120 = v750;
  if (!v739)
  {
LABEL_374:
    p_dst[10] = 0;
    goto LABEL_376;
  }
  if (v739 != v738)
  {
    p_dst = &v734;
    v751 = v739;
    goto LABEL_374;
  }
  v751 = v750;
  (*(void (**)(_QWORD *, _QWORD *))(v738[0] + 24))(v738, v750);
LABEL_376:
  sub_223842390(&v752, (uint64_t *)&__dst);
  __src = __p;
  v121 = &__src;
  if (!v625)
  {
LABEL_379:
    v121[4] = 0;
    goto LABEL_381;
  }
  v121 = &__p;
  if (v625 != &rep)
  {
    v597 = v625;
    goto LABEL_379;
  }
  v597 = &v595;
  (*(void (**)(void))(*v625 + 24))();
LABEL_381:
  v599 = v627;
  v122 = &__src;
  if (!v630)
  {
LABEL_384:
    v122[10] = 0;
    goto LABEL_386;
  }
  v122 = &__p;
  if (v630 != (unint64_t *)&v628)
  {
    v603 = v630;
    goto LABEL_384;
  }
  v603 = &v600;
  (*(void (**)(void))(*v630 + 24))();
LABEL_386:
  v604 = v752;
  if (v754)
  {
    if (v754 == &v753)
    {
      v608 = &v605;
      (*(void (**)(void))(*(_QWORD *)v754 + 24))();
    }
    else
    {
      v608 = (uint64_t **)v754;
      v754 = 0;
    }
  }
  else
  {
    v608 = 0;
  }
  v610 = (uint64_t *)v755;
  if (v757)
  {
    if (v757 == v756)
    {
      v613 = (void **)&v611;
      (*((void (**)(void))*v757 + 3))();
    }
    else
    {
      v613 = v757;
      v757 = 0;
    }
  }
  else
  {
    v613 = 0;
  }
  v123 = v757;
  if (v757 == v756)
  {
    v124 = 4;
    v123 = (void **)v756;
  }
  else
  {
    if (!v757)
      goto LABEL_401;
    v124 = 5;
  }
  (*((void (**)(void))*v123 + v124))();
LABEL_401:
  v125 = v754;
  if (v754 == &v753)
  {
    v126 = 4;
    v125 = &v753;
  }
  else
  {
    if (!v754)
      goto LABEL_406;
    v126 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v125 + 8 * v126))();
LABEL_406:
  if (v751 == v750)
  {
    v127 = 4;
  }
  else
  {
    if (!v751)
      goto LABEL_411;
    v127 = 5;
    v120 = v751;
  }
  (*(void (**)(_QWORD *))(*v120 + 8 * v127))(v120);
LABEL_411:
  if (v748 == (std::__shared_weak_count *)&v746)
  {
    v128 = 4;
    v84 = v681;
  }
  else
  {
    v84 = v681;
    if (!v748)
      goto LABEL_416;
    v128 = 5;
    v117 = (size_t *)v748;
  }
  (*(void (**)(size_t *))(*v117 + 8 * v128))(v117);
LABEL_416:
  v129 = v630;
  if (v630 == (unint64_t *)&v628)
  {
    v131 = 4;
    v129 = (unint64_t *)&v628;
    v130 = (void **)v732;
  }
  else
  {
    v130 = (void **)v732;
    if (!v630)
      goto LABEL_421;
    v131 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v131))();
LABEL_421:
  v132 = v625;
  if (v625 == &rep)
  {
    v133 = 4;
    v132 = &rep;
  }
  else
  {
    if (!v625)
      goto LABEL_426;
    v133 = 5;
  }
  (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_426:
  if (v764 == v763)
  {
    v134 = 4;
  }
  else
  {
    if (!v764)
      goto LABEL_431;
    v134 = 5;
    v116 = v764;
  }
  (*((void (**)(void **))*v116 + v134))(v116);
LABEL_431:
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v136 = 4;
    v135 = v723;
  }
  else
  {
    v135 = v723;
    if (!v761)
      goto LABEL_436;
    v136 = 5;
    v114 = &v761->__vftable;
  }
  (*(void (**)(_QWORD *))(*v114 + 8 * v136))(v114);
LABEL_436:
  if (v739 == v738)
  {
    v137 = 4;
  }
  else
  {
    if (!v739)
      goto LABEL_441;
    v137 = 5;
    v112 = v739;
  }
  (*(void (**)(_QWORD *))(*v112 + 8 * v137))(v112);
LABEL_441:
  if (v736 == (std::__shared_weak_count *)v735)
  {
    v138 = 4;
    v76 = v669;
  }
  else
  {
    v76 = v669;
    if (!v736)
      goto LABEL_446;
    v138 = 5;
    v110 = &v736->__vftable;
  }
  (*(void (**)(_QWORD *))(*v110 + 8 * v138))(v110);
LABEL_446:
  if (v744 == v743)
  {
    v139 = 4;
    v31 = v586;
  }
  else
  {
    v31 = v586;
    if (!v744)
      goto LABEL_451;
    v139 = 5;
    v108 = v744;
  }
  (*((void (**)(void **))*v108 + v139))(v108);
LABEL_451:
  if (v741 == (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v140 = 4;
  }
  else
  {
    if (!v741)
      goto LABEL_456;
    v140 = 5;
    v106 = &v741->__vftable;
  }
  (*(void (**)(_QWORD *))(*v106 + 8 * v140))(v106);
LABEL_456:
  if (v727 == v726)
  {
    v141 = 4;
    v74 = v587;
  }
  else
  {
    v74 = v587;
    if (!v727)
      goto LABEL_461;
    v141 = 5;
    v104 = v727;
  }
  (*(void (**)(_QWORD *))(*v104 + 8 * v141))(v104);
LABEL_461:
  if (v724 == (std::__shared_weak_count *)v723)
  {
    v143 = 4;
    v142 = v729;
  }
  else
  {
    v142 = v729;
    if (!v724)
      goto LABEL_466;
    v143 = 5;
    v135 = &v724->__vftable;
  }
  (*(void (**)(_QWORD *))(*v135 + 8 * v143))(v135);
LABEL_466:
  if (v733 == v732)
  {
    v144 = 4;
  }
  else
  {
    if (!v733)
      goto LABEL_471;
    v144 = 5;
    v130 = v733;
  }
  (*((void (**)(void **))*v130 + v144))(v130);
LABEL_471:
  if (v730 == (std::__shared_weak_count *)v729)
  {
    v145 = 4;
  }
  else
  {
    if (!v730)
      goto LABEL_476;
    v145 = 5;
    v142 = &v730->__vftable;
  }
  (*(void (**)(_QWORD *))(*v142 + 8 * v145))(v142);
LABEL_476:
  v146 = (uint64_t)v597;
  __p = __src;
  v147 = &rep;
  if (!v597)
  {
LABEL_479:
    v625 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)v146;
    goto LABEL_481;
  }
  if (v597 != &v595)
  {
    v146 = (*(uint64_t (**)(void))(*v597 + 16))();
    goto LABEL_479;
  }
  v625 = &rep;
  (*((void (**)(_BYTE **, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *))v595 + 3))(&v595, &rep);
LABEL_481:
  v148 = (uint64_t)v603;
  v627 = v599;
  v149 = (unint64_t *)&v628;
  if (!v603)
  {
LABEL_484:
    v630 = (unint64_t *)v148;
    goto LABEL_486;
  }
  if (v603 != &v600)
  {
    v148 = (*(uint64_t (**)(void))(*v603 + 16))();
    goto LABEL_484;
  }
  v630 = (unint64_t *)&v628;
  (*(void (**)(unint64_t *, uint64_t *))(v600 + 24))(&v600, &v628);
LABEL_486:
  v150 = (uint64_t)v608;
  *(_QWORD *)&v758 = v604;
  v151 = (_QWORD *)&v758 + 1;
  if (!v608)
  {
LABEL_489:
    v761 = (std::__shared_weak_count *)v150;
    goto LABEL_491;
  }
  if (v608 != &v605)
  {
    v150 = ((uint64_t (*)(void))(*v608)[2])();
    goto LABEL_489;
  }
  v761 = (std::__shared_weak_count *)((char *)&v758 + 8);
  ((void (*)(uint64_t **, char *))v605[3])(&v605, (char *)&v758 + 8);
LABEL_491:
  v152 = (uint64_t)v613;
  v762 = v610;
  v153 = (void **)v763;
  if (!v613)
  {
LABEL_494:
    v764 = (void **)v152;
    goto LABEL_496;
  }
  if (v613 != (void **)&v611)
  {
    v152 = (*((uint64_t (**)(void))*v613 + 2))();
    goto LABEL_494;
  }
  v764 = (void **)v763;
  v611[3]((void **)&v611, (uint64_t **)v763);
LABEL_496:
  v154 = (char *)__p;
  if (__p != (void *)v758)
  {
    v155 = v577;
    while (1)
    {
      if (!v625)
        goto LABEL_1696;
      v156 = (__int128 *)(*(uint64_t (**)(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *, char *))(*v625 + 48))(v625, v154 + 16);
      *v155 = *v156;
      v157 = v156[1];
      v158 = v156[2];
      v159 = v156[4];
      v155[3] = v156[3];
      v155[4] = v159;
      v155[1] = v157;
      v155[2] = v158;
      v160 = v156[5];
      v161 = v156[7];
      v155[6] = v156[6];
      v155[7] = v161;
      v155[5] = v160;
      v154 = *(char **)__p;
      __p = v154;
      if (v154 != v627)
        break;
LABEL_498:
      v155 += 8;
      if (v154 == (char *)v758)
        goto LABEL_506;
    }
    while (v625)
    {
      v162 = (*(uint64_t (**)(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *, char *))(*v625 + 48))(v625, v154 + 16);
      v154 = (char *)__p;
      if (*(_BYTE *)(v162 + 112) == 1)
      {
        v154 = *(char **)__p;
        __p = v154;
        if (v154 != v627)
          continue;
      }
      goto LABEL_498;
    }
LABEL_1696:
    sub_223198474();
  }
  v155 = v577;
LABEL_506:
  if (v764 == v763)
  {
    v163 = 4;
  }
  else
  {
    if (!v764)
      goto LABEL_511;
    v163 = 5;
    v153 = v764;
  }
  (*((void (**)(void **))*v153 + v163))(v153);
LABEL_511:
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v164 = 4;
    v86 = v684;
  }
  else
  {
    v86 = v684;
    if (!v761)
      goto LABEL_516;
    v164 = 5;
    v151 = &v761->__vftable;
  }
  (*(void (**)(_QWORD *))(*v151 + 8 * v164))(v151);
LABEL_516:
  if (v630 == (unint64_t *)&v628)
  {
    v165 = 4;
    v88 = v675;
  }
  else
  {
    v88 = v675;
    if (!v630)
      goto LABEL_521;
    v165 = 5;
    v149 = v630;
  }
  (*(void (**)(unint64_t *))(*v149 + 8 * v165))(v149);
LABEL_521:
  if (v625 == &rep)
  {
    v166 = 4;
    v90 = v678;
  }
  else
  {
    v90 = v678;
    if (!v625)
      goto LABEL_526;
    v166 = 5;
    v147 = v625;
  }
  (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *))(*v147 + 8 * v166))(v147);
LABEL_526:
  v167 = (void **)&v611;
  if (v613 == (void **)&v611)
  {
    v168 = 4;
  }
  else
  {
    if (!v613)
      goto LABEL_531;
    v168 = 5;
    v167 = v613;
  }
  (*((void (**)(void))*v167 + v168))();
LABEL_531:
  v169 = &v605;
  if (v608 == &v605)
  {
    v170 = 4;
  }
  else
  {
    if (!v608)
      goto LABEL_536;
    v170 = 5;
    v169 = v608;
  }
  ((void (*)(void))(*v169)[v170])();
LABEL_536:
  v171 = &v600;
  if (v603 == &v600)
  {
    v172 = 4;
  }
  else
  {
    if (!v603)
      goto LABEL_541;
    v172 = 5;
    v171 = v603;
  }
  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_541:
  v173 = &v595;
  if (v597 == &v595)
  {
    v174 = 4;
  }
  else
  {
    if (!v597)
      goto LABEL_546;
    v174 = 5;
    v173 = v597;
  }
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_546:
  if (v715 == v714)
  {
    v175 = 4;
    v176 = v714;
  }
  else
  {
    if (!v715)
      goto LABEL_551;
    v175 = 5;
    v176 = v715;
  }
  (*(void (**)(void))(*v176 + 8 * v175))();
LABEL_551:
  v177 = v711;
  if (v712 == v711)
  {
    v178 = 4;
  }
  else
  {
    if (!v712)
      goto LABEL_556;
    v178 = 5;
    v177 = v712;
  }
  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_556:
  if (v721 == v720)
  {
    v179 = 4;
    v180 = v720;
  }
  else
  {
    if (!v721)
      goto LABEL_561;
    v179 = 5;
    v180 = v721;
  }
  (*(void (**)(void))(*v180 + 8 * v179))();
LABEL_561:
  v181 = v717;
  if (v718 == (std::__shared_weak_count *)v717)
  {
    v182 = 4;
  }
  else
  {
    if (!v718)
      goto LABEL_566;
    v182 = 5;
    v181 = &v718->__vftable;
  }
  (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_566:
  v593 = v155;
  if (v703 == v702)
  {
    v184 = 4;
    v185 = v702;
    v183 = v705;
  }
  else
  {
    v183 = v705;
    if (!v703)
      goto LABEL_571;
    v184 = 5;
    v185 = v703;
  }
  (*(void (**)(void))(*v185 + 8 * v184))();
LABEL_571:
  v186 = v699;
  if (v700 == v699)
  {
    v187 = 4;
  }
  else
  {
    if (!v700)
      goto LABEL_576;
    v187 = 5;
    v186 = v700;
  }
  (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_576:
  v188 = v708;
  if (v709 == v708)
  {
    v189 = 4;
  }
  else
  {
    if (!v709)
      goto LABEL_581;
    v189 = 5;
    v188 = v709;
  }
  (*(void (**)(void))(*v188 + 8 * v189))();
LABEL_581:
  if (v706 == v705)
  {
    v190 = 4;
  }
  else
  {
    if (!v706)
      goto LABEL_586;
    v190 = 5;
    v183 = v706;
  }
  (*(void (**)(_QWORD *))(*v183 + 8 * v190))(v183);
LABEL_586:
  if (v679 == v678)
  {
    v191 = 4;
  }
  else
  {
    if (!v679)
      goto LABEL_591;
    v191 = 5;
    v90 = v679;
  }
  (*(void (**)(_QWORD *))(*v90 + 8 * v191))(v90);
LABEL_591:
  if (v676 == v675)
  {
    v192 = 4;
  }
  else
  {
    if (!v676)
      goto LABEL_596;
    v192 = 5;
    v88 = v676;
  }
  (*(void (**)(_QWORD *))(*v88 + 8 * v192))(v88);
LABEL_596:
  if (v685 == v684)
  {
    v193 = 4;
  }
  else
  {
    if (!v685)
      goto LABEL_601;
    v193 = 5;
    v86 = v685;
  }
  (*(void (**)(_QWORD *))(*v86 + 8 * v193))(v86);
LABEL_601:
  if (v682 == v681)
  {
    v194 = 4;
  }
  else
  {
    if (!v682)
      goto LABEL_606;
    v194 = 5;
    v84 = v682;
  }
  (*(void (**)(_QWORD *))(*v84 + 8 * v194))(v84);
LABEL_606:
  v195 = v666;
  if (v667 == v666)
  {
    v202 = 4;
    v197 = &v641;
    v196 = &object[8];
    v199 = &v650;
    v198 = &v645;
    v200 = v672;
    v201 = v663;
  }
  else
  {
    v197 = &v641;
    v196 = &object[8];
    v199 = &v650;
    v198 = &v645;
    v200 = v672;
    v201 = v663;
    if (!v667)
      goto LABEL_611;
    v202 = 5;
    v195 = v667;
  }
  (*(void (**)(void))(*v195 + 8 * v202))();
LABEL_611:
  if (v664 == v663)
  {
    v203 = 4;
  }
  else
  {
    if (!v664)
      goto LABEL_616;
    v203 = 5;
    v201 = v664;
  }
  (*(void (**)(_QWORD *))(*v201 + 8 * v203))(v201);
LABEL_616:
  if (v673 == v672)
  {
    v204 = 4;
  }
  else
  {
    if (!v673)
      goto LABEL_621;
    v204 = 5;
    v200 = v673;
  }
  (*(void (**)(_QWORD *))(*v200 + 8 * v204))(v200);
LABEL_621:
  if (v670 == v669)
  {
    v205 = 4;
  }
  else
  {
    if (!v670)
      goto LABEL_626;
    v205 = 5;
    v76 = v670;
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v205))(v76);
LABEL_626:
  if (v652 == &v650)
  {
    v206 = 4;
  }
  else
  {
    if (!v652)
      goto LABEL_631;
    v206 = 5;
    v199 = v652;
  }
  ((void (*)(uint64_t **))(*v199)[v206])(v199);
LABEL_631:
  if (v647 == &v645)
  {
    v207 = 4;
  }
  else
  {
    if (!v647)
      goto LABEL_636;
    v207 = 5;
    v198 = v647;
  }
  ((void (*)(uint64_t **))(*v198)[v207])(v198);
LABEL_636:
  if (v643 == &v641)
  {
    v208 = 4;
  }
  else
  {
    if (!v643)
      goto LABEL_641;
    v208 = 5;
    v197 = v643;
  }
  (*(void (**)(unint64_t *))(*v197 + 8 * v208))(v197);
LABEL_641:
  if (*((_BYTE **)&v638 + 1) == &object[8])
  {
    v209 = 4;
  }
  else
  {
    if (!*((_QWORD *)&v638 + 1))
      goto LABEL_646;
    v209 = 5;
    v196 = (_QWORD *)*((_QWORD *)&v638 + 1);
  }
  (*(void (**)(_QWORD *))(*v196 + 8 * v209))(v196);
LABEL_646:
  v210 = v660;
  if (v660 == &v658)
  {
    v211 = 4;
    v210 = &v658;
  }
  else
  {
    if (!v660)
      goto LABEL_651;
    v211 = 5;
  }
  ((void (*)(void))(*v210)[v211])();
LABEL_651:
  v212 = v656;
  if (v656 == v655)
  {
    v213 = 4;
    v212 = v655;
  }
  else
  {
    if (!v656)
      goto LABEL_656;
    v213 = 5;
  }
  (*(void (**)(void))(*v212 + 8 * v213))();
LABEL_656:
  v214 = (void *)v592;
  v215 = (unint64_t)v593 - v592;
  v216 = ((uint64_t)v593 - v592) >> 7;
  v579[1] = 0;
  v579[2] = 0;
  *v579 = 0;
  v217 = v216 - v31;
  if (v216 >= v31)
  {
    v220 = 126 - 2 * __clz(v216);
    if (v593 == (__int128 *)v592)
      v221 = 0;
    else
      v221 = v220;
    sub_223842BC0(v592, v593, v221, 1);
    __src = 0;
    v595 = 0;
    v596[0] = 0;
    if (v593 == (__int128 *)v592)
    {
      v223 = 0;
    }
    else
    {
      if ((v215 & 0x8000000000000000) != 0)
        sub_22316E078();
      __src = operator new(v215 >> 3);
      v595 = __src;
      v596[0] = (char *)__src + 16 * v216;
      __p = &__src;
      v222 = (__int128 *)v592;
      do
      {
        *(_OWORD *)object = *v222;
        sub_2232E9564((char ***)&__p, object);
        v222 += 8;
      }
      while (v222 != v593);
      v223 = (char *)__src;
    }
    sub_223198B3C((uint64_t)v579, (uint64_t)v579[1], v223, &v223[16 * v31], v31);
    goto LABEL_1530;
  }
  sub_223840028(&v615, (uint64_t)v74, (uint64_t)v74);
  v218 = (uint64_t)v617;
  __dst = v615;
  v219 = &v746;
  if (!v617)
    goto LABEL_660;
  if (v617 != v616)
  {
    v218 = (*(uint64_t (**)(void))(*(_QWORD *)v617 + 16))();
LABEL_660:
    v748 = (std::__shared_weak_count *)v218;
    goto LABEL_672;
  }
  v748 = (std::__shared_weak_count *)&v746;
  (*(void (**)(void))(*(_QWORD *)v617 + 24))();
LABEL_672:
  v224 = (uint64_t)v620;
  *(_QWORD *)&v740[0] = v618;
  v225 = (_QWORD *)v740 + 1;
  if (!v620)
  {
LABEL_675:
    v741 = (std::__shared_weak_count *)v224;
    goto LABEL_677;
  }
  if (v620 != v619)
  {
    v224 = (*(uint64_t (**)(void))(*(_QWORD *)v620 + 16))();
    goto LABEL_675;
  }
  v741 = (std::__shared_weak_count *)((char *)v740 + 8);
  (*(void (**)(void))(*(_QWORD *)v620 + 24))();
LABEL_677:
  v226 = (uint64_t)v748;
  v734 = __dst;
  v227 = v735;
  if (!v748)
  {
LABEL_680:
    v736 = (std::__shared_weak_count *)v226;
    goto LABEL_682;
  }
  if (v748 != (std::__shared_weak_count *)&v746)
  {
    v226 = ((uint64_t (*)(void))v748->__on_zero_shared)();
    goto LABEL_680;
  }
  v736 = (std::__shared_weak_count *)v735;
  (*(void (**)(size_t *, _QWORD *))(v746 + 24))(&v746, v735);
LABEL_682:
  v228 = (uint64_t)v741;
  v728 = *(uint64_t **)&v740[0];
  v229 = v729;
  if (!v741)
  {
LABEL_685:
    v730 = (std::__shared_weak_count *)v228;
    goto LABEL_687;
  }
  if (v741 != (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v228 = ((uint64_t (*)(void))v741->__on_zero_shared)();
    goto LABEL_685;
  }
  v730 = (std::__shared_weak_count *)v729;
  (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v740[0] + 1) + 24))((char *)v740 + 8, v729);
LABEL_687:
  sub_2238429F0((uint64_t **)&v758, &v734, &v728);
  v230 = (uint64_t)v741;
  v722 = *(uint64_t **)&v740[0];
  v231 = v723;
  if (!v741)
  {
    v724 = 0;
    v716 = *(uint64_t **)&v740[0];
    v232 = v717;
LABEL_695:
    v718 = (std::__shared_weak_count *)v230;
    goto LABEL_696;
  }
  if (v741 == (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v724 = (std::__shared_weak_count *)v723;
    (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v740[0] + 1) + 24))((char *)v740 + 8, v723);
  }
  else
  {
    v724 = (std::__shared_weak_count *)((uint64_t (*)(void))v741->__on_zero_shared)();
  }
  v230 = (uint64_t)v741;
  v716 = *(uint64_t **)&v740[0];
  v232 = v717;
  if (!v741)
    goto LABEL_695;
  if (v741 != (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v230 = ((uint64_t (*)(void))v741->__on_zero_shared)();
    goto LABEL_695;
  }
  v718 = (std::__shared_weak_count *)v717;
  (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v740[0] + 1) + 24))((char *)v740 + 8, v717);
LABEL_696:
  sub_2238429F0(&v752, &v722, &v716);
  __src = (void *)v758;
  v234 = &__src;
  v235 = &v595;
  if (!v761)
  {
LABEL_699:
    v234[4] = 0;
    goto LABEL_701;
  }
  v234 = (void **)&v758;
  if (v761 != (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v597 = &v761->__vftable;
    goto LABEL_699;
  }
  v597 = &v595;
  (*(void (**)(void))(*((_QWORD *)&v758 + 1) + 24))();
LABEL_701:
  v599 = (const char *)v762;
  v236 = &__src;
  v237 = &v600;
  if (!v764)
  {
LABEL_704:
    v236[10] = 0;
    goto LABEL_706;
  }
  v236 = (void **)&v758;
  if (v764 != v763)
  {
    v603 = (unint64_t *)v764;
    goto LABEL_704;
  }
  v603 = &v600;
  (*(void (**)(void))(v763[0] + 24))();
LABEL_706:
  v604 = v752;
  v238 = &v605;
  v583 = v217;
  if (v754)
  {
    if (v754 == &v753)
    {
      v608 = &v605;
      (*(void (**)(void))(*(_QWORD *)v754 + 24))();
    }
    else
    {
      v608 = (uint64_t **)v754;
      v754 = 0;
    }
  }
  else
  {
    v608 = 0;
  }
  v610 = (uint64_t *)v755;
  v239 = (void **)&v611;
  if (v757)
  {
    if (v757 == v756)
    {
      v613 = (void **)&v611;
      (*((void (**)(void))*v757 + 3))();
    }
    else
    {
      v613 = v757;
      v757 = 0;
    }
  }
  else
  {
    v613 = 0;
  }
  v240 = v757;
  if (v757 == v756)
  {
    v241 = 4;
    v240 = (void **)v756;
  }
  else
  {
    if (!v757)
      goto LABEL_721;
    v241 = 5;
  }
  (*((void (**)(void))*v240 + v241))();
LABEL_721:
  v242 = v754;
  if (v754 == &v753)
  {
    v243 = 4;
    v242 = &v753;
  }
  else
  {
    if (!v754)
      goto LABEL_726;
    v243 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v242 + 8 * v243))();
LABEL_726:
  if (v718 == (std::__shared_weak_count *)v717)
  {
    v244 = 4;
  }
  else
  {
    if (!v718)
      goto LABEL_731;
    v244 = 5;
    v232 = &v718->__vftable;
  }
  (*(void (**)(_QWORD *))(*v232 + 8 * v244))(v232);
LABEL_731:
  if (v724 == (std::__shared_weak_count *)v723)
  {
    v245 = 4;
  }
  else
  {
    if (!v724)
      goto LABEL_736;
    v245 = 5;
    v231 = &v724->__vftable;
  }
  (*(void (**)(_QWORD *))(*v231 + 8 * v245))(v231);
LABEL_736:
  v246 = v764;
  if (v764 == v763)
  {
    v247 = 4;
    v246 = (void **)v763;
  }
  else
  {
    if (!v764)
      goto LABEL_741;
    v247 = 5;
  }
  (*((void (**)(void))*v246 + v247))();
LABEL_741:
  v248 = &v761->__vftable;
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v249 = 4;
    v248 = (_QWORD *)&v758 + 1;
  }
  else
  {
    if (!v761)
      goto LABEL_746;
    v249 = 5;
  }
  (*(void (**)(void))(*v248 + 8 * v249))();
LABEL_746:
  if (v730 == (std::__shared_weak_count *)v729)
  {
    v250 = 4;
  }
  else
  {
    if (!v730)
      goto LABEL_751;
    v250 = 5;
    v229 = &v730->__vftable;
  }
  (*(void (**)(_QWORD *))(*v229 + 8 * v250))(v229);
LABEL_751:
  if (v736 == (std::__shared_weak_count *)v735)
  {
    v251 = 4;
  }
  else
  {
    if (!v736)
      goto LABEL_756;
    v251 = 5;
    v227 = &v736->__vftable;
  }
  (*(void (**)(_QWORD *))(*v227 + 8 * v251))(v227);
LABEL_756:
  if (v741 == (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v252 = 4;
  }
  else
  {
    if (!v741)
      goto LABEL_761;
    v252 = 5;
    v225 = &v741->__vftable;
  }
  (*(void (**)(_QWORD *))(*v225 + 8 * v252))(v225);
LABEL_761:
  if (v748 == (std::__shared_weak_count *)&v746)
  {
    v253 = 4;
  }
  else
  {
    if (!v748)
      goto LABEL_766;
    v253 = 5;
    v219 = (size_t *)v748;
  }
  (*(void (**)(size_t *))(*v219 + 8 * v253))(v219);
LABEL_766:
  __p = __src;
  v254 = &__p;
  if (!v597)
  {
LABEL_769:
    v254[4] = 0;
    goto LABEL_771;
  }
  if (v597 != &v595)
  {
    v254 = &__src;
    v625 = v597;
    goto LABEL_769;
  }
  v625 = &rep;
  (*((void (**)(_BYTE **, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *))v595 + 3))(&v595, &rep);
LABEL_771:
  v627 = v599;
  v255 = &__p;
  if (!v603)
  {
LABEL_774:
    v255[10] = 0;
    goto LABEL_776;
  }
  if (v603 != &v600)
  {
    v255 = &__src;
    v630 = v603;
    goto LABEL_774;
  }
  v630 = (unint64_t *)&v628;
  (*(void (**)(unint64_t *, uint64_t *))(v600 + 24))(&v600, &v628);
LABEL_776:
  v631 = (uint64_t *)v604;
  v256 = &__p;
  if (!v608)
  {
LABEL_779:
    v256[15] = 0;
    goto LABEL_781;
  }
  if (v608 != &v605)
  {
    v256 = &__src;
    v633 = v608;
    goto LABEL_779;
  }
  v633 = (uint64_t **)v632;
  ((void (*)(uint64_t **, _QWORD *))v605[3])(&v605, v632);
LABEL_781:
  v634 = v610;
  v257 = &__p;
  if (!v613)
  {
LABEL_784:
    v257[21] = 0;
    goto LABEL_786;
  }
  if (v613 != (void **)&v611)
  {
    v257 = &__src;
    v636 = v613;
    goto LABEL_784;
  }
  v636 = (void **)v635;
  v611[3]((void **)&v611, (uint64_t **)v635);
LABEL_786:
  if (v613 == (void **)&v611)
  {
    v258 = 4;
  }
  else
  {
    if (!v613)
      goto LABEL_791;
    v258 = 5;
    v239 = v613;
  }
  (*((void (**)(void **))*v239 + v258))(v239);
LABEL_791:
  if (v608 == &v605)
  {
    v259 = 4;
  }
  else
  {
    if (!v608)
      goto LABEL_796;
    v259 = 5;
    v238 = v608;
  }
  ((void (*)(uint64_t **))(*v238)[v259])(v238);
LABEL_796:
  if (v603 == &v600)
  {
    v260 = 4;
  }
  else
  {
    if (!v603)
      goto LABEL_801;
    v260 = 5;
    v237 = v603;
  }
  (*(void (**)(unint64_t *))(*v237 + 8 * v260))(v237);
LABEL_801:
  if (v597 == &v595)
  {
    v261 = 4;
  }
  else
  {
    if (!v597)
      goto LABEL_806;
    v261 = 5;
    v235 = v597;
  }
  (*(void (**)(_QWORD *))(*v235 + 8 * v261))(v235);
LABEL_806:
  v262 = (uint64_t)v625;
  v734 = (uint64_t *)__p;
  if (!v625)
  {
LABEL_809:
    v736 = (std::__shared_weak_count *)v262;
    goto LABEL_811;
  }
  if (v625 != &rep)
  {
    v262 = (*(uint64_t (**)(void))(*v625 + 16))();
    goto LABEL_809;
  }
  v736 = (std::__shared_weak_count *)v735;
  (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *, _QWORD *))(rep + 24))(&rep, v735);
LABEL_811:
  v263 = (uint64_t)v630;
  v737 = v627;
  if (!v630)
  {
LABEL_814:
    v739 = (_QWORD *)v263;
    goto LABEL_816;
  }
  if (v630 != (unint64_t *)&v628)
  {
    v263 = (*(uint64_t (**)(void))(*v630 + 16))();
    goto LABEL_814;
  }
  v739 = v738;
  (*(void (**)(uint64_t *, _QWORD *))(v628 + 24))(&v628, v738);
LABEL_816:
  v264 = (uint64_t)v736;
  __dst = v734;
  if (!v736)
  {
LABEL_819:
    v748 = (std::__shared_weak_count *)v264;
    goto LABEL_821;
  }
  if (v736 != (std::__shared_weak_count *)v735)
  {
    v264 = ((uint64_t (*)(void))v736->__on_zero_shared)();
    goto LABEL_819;
  }
  v748 = (std::__shared_weak_count *)&v746;
  (*(void (**)(_QWORD *, size_t *))(v735[0] + 24))(v735, &v746);
LABEL_821:
  v265 = (uint64_t)v739;
  v749 = (uint64_t *)v737;
  if (!v739)
  {
LABEL_824:
    v751 = (_QWORD *)v265;
    goto LABEL_826;
  }
  if (v739 != v738)
  {
    v265 = (*(uint64_t (**)(void))(*v739 + 16))();
    goto LABEL_824;
  }
  v751 = v750;
  (*(void (**)(_QWORD *, _QWORD *))(v738[0] + 24))(v738, v750);
LABEL_826:
  v266 = (uint64_t)v633;
  v728 = v631;
  if (!v633)
  {
LABEL_829:
    v730 = (std::__shared_weak_count *)v266;
    goto LABEL_831;
  }
  if (v633 != v632)
  {
    v266 = ((uint64_t (*)(void))(*v633)[2])();
    goto LABEL_829;
  }
  v730 = (std::__shared_weak_count *)v729;
  (*(void (**)(_QWORD *, _QWORD *))(v632[0] + 24))(v632, v729);
LABEL_831:
  v267 = (uint64_t)v636;
  v731 = v634;
  v268 = (void **)v732;
  if (!v636)
  {
LABEL_834:
    v733 = (void **)v267;
    goto LABEL_836;
  }
  if (v636 != v635)
  {
    v267 = (*((uint64_t (**)(void))*v636 + 2))();
    goto LABEL_834;
  }
  v733 = (void **)v732;
  (*(void (**)(_QWORD *, _QWORD *))(v635[0] + 24))(v635, v732);
LABEL_836:
  v269 = (uint64_t)v730;
  *(_QWORD *)&v740[0] = v728;
  v270 = (_QWORD *)v740 + 1;
  if (!v730)
  {
LABEL_839:
    v741 = (std::__shared_weak_count *)v269;
    goto LABEL_841;
  }
  if (v730 != (std::__shared_weak_count *)v729)
  {
    v269 = ((uint64_t (*)(void))v730->__on_zero_shared)();
    goto LABEL_839;
  }
  v741 = (std::__shared_weak_count *)((char *)v740 + 8);
  (*(void (**)(_QWORD *, char *))(v729[0] + 24))(v729, (char *)v740 + 8);
LABEL_841:
  v271 = (uint64_t)v733;
  v742 = v731;
  v272 = (void **)v743;
  if (!v733)
  {
LABEL_844:
    v744 = (void **)v271;
    goto LABEL_846;
  }
  if (v733 != v732)
  {
    v271 = (*((uint64_t (**)(void))*v733 + 2))();
    goto LABEL_844;
  }
  v744 = (void **)v743;
  (*(void (**)(_QWORD *, _QWORD *))(v732[0] + 24))(v732, v743);
LABEL_846:
  *(_QWORD *)&v758 = __dst;
  v273 = (uint64_t **)&v758;
  v274 = (_QWORD *)&v758 + 1;
  if (!v748)
  {
LABEL_849:
    v273[4] = 0;
    goto LABEL_851;
  }
  if (v748 != (std::__shared_weak_count *)&v746)
  {
    v273 = &__dst;
    v761 = v748;
    goto LABEL_849;
  }
  v761 = (std::__shared_weak_count *)((char *)&v758 + 8);
  (*(void (**)(size_t *, char *))(v746 + 24))(&v746, (char *)&v758 + 8);
LABEL_851:
  v762 = v749;
  v275 = (uint64_t **)&v758;
  v276 = (void **)v763;
  if (!v751)
  {
LABEL_854:
    v275[10] = 0;
    goto LABEL_856;
  }
  if (v751 != v750)
  {
    v275 = &__dst;
    v764 = (void **)v751;
    goto LABEL_854;
  }
  v764 = (void **)v763;
  (*(void (**)(void))(v750[0] + 24))();
LABEL_856:
  v752 = *(uint64_t **)&v740[0];
  v277 = &v752;
  v278 = &v753;
  if (!v741)
  {
LABEL_859:
    v277[4] = 0;
    goto LABEL_861;
  }
  if (v741 != (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v277 = (uint64_t **)v740;
    v754 = (__int128 *)v741;
    goto LABEL_859;
  }
  v754 = &v753;
  (*(void (**)(char *, __int128 *))(*((_QWORD *)&v740[0] + 1) + 24))((char *)v740 + 8, &v753);
LABEL_861:
  v755 = (const char *)v742;
  v279 = &v752;
  v280 = (void **)v756;
  if (!v744)
  {
LABEL_864:
    v279[10] = 0;
    goto LABEL_866;
  }
  if (v744 != v743)
  {
    v279 = (uint64_t **)v740;
    v757 = v744;
    goto LABEL_864;
  }
  v757 = (void **)v756;
  (*(void (**)(_QWORD *, _QWORD *))(v743[0] + 24))(v743, v756);
LABEL_866:
  __src = (void *)v758;
  v281 = &__src;
  if (!v761)
  {
LABEL_869:
    v281[4] = 0;
    goto LABEL_871;
  }
  if (v761 != (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v281 = (void **)&v758;
    v597 = &v761->__vftable;
    goto LABEL_869;
  }
  v597 = &v595;
  (*(void (**)(char *))(*((_QWORD *)&v758 + 1) + 24))((char *)&v758 + 8);
LABEL_871:
  v599 = (const char *)v762;
  v282 = &__src;
  v283 = &v600;
  if (!v764)
  {
LABEL_874:
    v282[10] = 0;
    goto LABEL_876;
  }
  if (v764 != v763)
  {
    v282 = (void **)&v758;
    v603 = (unint64_t *)v764;
    goto LABEL_874;
  }
  v603 = &v600;
  (*(void (**)(_QWORD *, unint64_t *))(v763[0] + 24))(v763, &v600);
LABEL_876:
  v605 = v752;
  v284 = &v606;
  if (v754)
  {
    if (v754 == &v753)
    {
      v609 = &v606;
      (*(void (**)(__int128 *, uint64_t *))(v753 + 24))(&v753, &v606);
    }
    else
    {
      v609 = (uint64_t *)v754;
      v754 = 0;
    }
  }
  else
  {
    v609 = 0;
  }
  v611 = (void (**)(void **, uint64_t **))v755;
  v285 = (void **)v612;
  if (v757)
  {
    if (v757 == v756)
    {
      v614 = (void **)v612;
      (*(void (**)(_QWORD *, _QWORD *))(v756[0] + 24))(v756, v612);
    }
    else
    {
      v614 = v757;
      v757 = 0;
    }
  }
  else
  {
    v614 = 0;
  }
  if (v757 == v756)
  {
    v286 = 4;
  }
  else
  {
    if (!v757)
      goto LABEL_891;
    v286 = 5;
    v280 = v757;
  }
  (*((void (**)(void **))*v280 + v286))(v280);
LABEL_891:
  if (v754 == &v753)
  {
    v288 = 4;
    v287 = v735;
  }
  else
  {
    v287 = v735;
    if (!v754)
      goto LABEL_896;
    v288 = 5;
    v278 = v754;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v278 + 8 * v288))(v278);
LABEL_896:
  if (v764 == v763)
  {
    v289 = 4;
  }
  else
  {
    if (!v764)
      goto LABEL_901;
    v289 = 5;
    v276 = v764;
  }
  (*((void (**)(void **))*v276 + v289))(v276);
LABEL_901:
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v291 = 4;
    v290 = &v746;
  }
  else
  {
    v290 = &v746;
    if (!v761)
      goto LABEL_906;
    v291 = 5;
    v274 = &v761->__vftable;
  }
  (*(void (**)(_QWORD *))(*v274 + 8 * v291))(v274);
LABEL_906:
  if (v744 == v743)
  {
    v292 = 4;
  }
  else
  {
    if (!v744)
      goto LABEL_911;
    v292 = 5;
    v272 = v744;
  }
  (*((void (**)(void **))*v272 + v292))(v272);
LABEL_911:
  if (v741 == (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v294 = 4;
    v293 = v738;
  }
  else
  {
    v293 = v738;
    if (!v741)
      goto LABEL_916;
    v294 = 5;
    v270 = &v741->__vftable;
  }
  (*(void (**)(_QWORD *))(*v270 + 8 * v294))(v270);
LABEL_916:
  if (v733 == v732)
  {
    v296 = 4;
    v295 = v729;
  }
  else
  {
    v295 = v729;
    if (!v733)
      goto LABEL_921;
    v296 = 5;
    v268 = v733;
  }
  (*((void (**)(void **))*v268 + v296))(v268);
LABEL_921:
  if (v730 == (std::__shared_weak_count *)v729)
  {
    v298 = 4;
    v297 = v750;
  }
  else
  {
    v297 = v750;
    if (!v730)
      goto LABEL_926;
    v298 = 5;
    v295 = &v730->__vftable;
  }
  (*(void (**)(_QWORD *))(*v295 + 8 * v298))(v295);
LABEL_926:
  if (v751 == v750)
  {
    v300 = 4;
    v299 = &v595;
  }
  else
  {
    v299 = &v595;
    if (!v751)
      goto LABEL_931;
    v300 = 5;
    v297 = v751;
  }
  (*(void (**)(_QWORD *))(*v297 + 8 * v300))(v297);
LABEL_931:
  if (v748 == (std::__shared_weak_count *)&v746)
  {
    v301 = 4;
  }
  else
  {
    if (!v748)
      goto LABEL_936;
    v301 = 5;
    v290 = (size_t *)v748;
  }
  (*(void (**)(size_t *))(*v290 + 8 * v301))(v290);
LABEL_936:
  if (v739 == v738)
  {
    v302 = 4;
  }
  else
  {
    if (!v739)
      goto LABEL_941;
    v302 = 5;
    v293 = v739;
  }
  (*(void (**)(_QWORD *))(*v293 + 8 * v302))(v293);
LABEL_941:
  if (v736 == (std::__shared_weak_count *)v735)
  {
    v303 = 4;
  }
  else
  {
    if (!v736)
      goto LABEL_946;
    v303 = 5;
    v287 = &v736->__vftable;
  }
  (*(void (**)(_QWORD *))(*v287 + 8 * v303))(v287);
LABEL_946:
  *(_QWORD *)object = __src;
  v304 = (void **)object;
  if (!v597)
  {
LABEL_949:
    v304[4] = 0;
    goto LABEL_951;
  }
  if (v597 != &v595)
  {
    v304 = &__src;
    *((_QWORD *)&v638 + 1) = v597;
    goto LABEL_949;
  }
  *((_QWORD *)&v638 + 1) = &object[8];
  (*((void (**)(_BYTE **, _BYTE *))v595 + 3))(&v595, &object[8]);
LABEL_951:
  v640 = (size_t)v599;
  v305 = (void **)object;
  if (!v603)
  {
LABEL_954:
    v305[10] = 0;
    goto LABEL_956;
  }
  if (v603 != &v600)
  {
    v305 = &__src;
    v643 = v603;
    goto LABEL_954;
  }
  v643 = &v641;
  (*(void (**)(unint64_t *, unint64_t *))(v600 + 24))(&v600, &v641);
LABEL_956:
  v645 = v605;
  v306 = (void **)object;
  if (!v609)
  {
LABEL_959:
    v306[16] = 0;
    goto LABEL_961;
  }
  if (v609 != &v606)
  {
    v306 = &__src;
    v648 = v609;
    goto LABEL_959;
  }
  v648 = v646;
  (*(void (**)(uint64_t *, _QWORD *))(v606 + 24))(&v606, v646);
LABEL_961:
  v650 = (uint64_t *)v611;
  v307 = (void **)object;
  if (!v614)
  {
LABEL_964:
    v307[22] = 0;
    goto LABEL_966;
  }
  if (v614 != v612)
  {
    v307 = &__src;
    v653 = v614;
    goto LABEL_964;
  }
  v653 = (void **)v651;
  (*(void (**)(_QWORD *, _QWORD *))(v612[0] + 24))(v612, v651);
LABEL_966:
  if (v614 == v612)
  {
    v308 = 4;
  }
  else
  {
    if (!v614)
      goto LABEL_971;
    v308 = 5;
    v285 = v614;
  }
  (*((void (**)(void **))*v285 + v308))(v285);
LABEL_971:
  if (v609 == &v606)
  {
    v309 = 4;
  }
  else
  {
    if (!v609)
      goto LABEL_976;
    v309 = 5;
    v284 = v609;
  }
  (*(void (**)(uint64_t *))(*v284 + 8 * v309))(v284);
LABEL_976:
  if (v603 == &v600)
  {
    v311 = 4;
    v310 = &rep;
  }
  else
  {
    v310 = &rep;
    if (!v603)
      goto LABEL_981;
    v311 = 5;
    v283 = v603;
  }
  (*(void (**)(unint64_t *))(*v283 + 8 * v311))(v283);
LABEL_981:
  if (v597 == &v595)
  {
    v312 = 4;
  }
  else
  {
    if (!v597)
      goto LABEL_986;
    v312 = 5;
    v299 = v597;
  }
  (*(void (**)(_QWORD *))(*v299 + 8 * v312))(v299);
LABEL_986:
  v313 = *((_QWORD *)&v638 + 1);
  v662 = *(void **)object;
  if (!*((_QWORD *)&v638 + 1))
  {
LABEL_989:
    v664 = (_QWORD *)v313;
    goto LABEL_991;
  }
  if (*((_BYTE **)&v638 + 1) != &object[8])
  {
    v313 = (*(uint64_t (**)(void))(**((_QWORD **)&v638 + 1) + 16))();
    goto LABEL_989;
  }
  v664 = v663;
  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)&object[8] + 24))(&object[8], v663);
LABEL_991:
  v314 = (uint64_t)v643;
  v665 = (const char *)v640;
  if (!v643)
  {
LABEL_994:
    v667 = (_QWORD *)v314;
    goto LABEL_996;
  }
  if (v643 != &v641)
  {
    v314 = (*(uint64_t (**)(void))(*v643 + 16))();
    goto LABEL_994;
  }
  v667 = v666;
  (*(void (**)(unint64_t *))(v641 + 24))(&v641);
LABEL_996:
  v315 = (uint64_t)v648;
  v654 = v645;
  if (!v648)
  {
LABEL_999:
    v656 = (_QWORD *)v315;
    goto LABEL_1001;
  }
  if (v648 != v646)
  {
    v315 = (*(uint64_t (**)(void))(*v648 + 16))();
    goto LABEL_999;
  }
  v656 = v655;
  (*(void (**)(_QWORD *))(v646[0] + 24))(v646);
LABEL_1001:
  v316 = (uint64_t)v653;
  v658 = v650;
  if (!v653)
  {
LABEL_1004:
    v661 = (_QWORD *)v316;
    goto LABEL_1006;
  }
  if (v653 != v651)
  {
    v316 = (*((uint64_t (**)(void))*v653 + 2))();
    goto LABEL_1004;
  }
  v661 = v659;
  (*(void (**)(_QWORD *))(v651[0] + 24))(v651);
LABEL_1006:
  v591 = 0;
  v590 = 0;
  v317 = (uint64_t)v664;
  v686 = v662;
  if (!v664)
  {
LABEL_1009:
    v688 = (_QWORD *)v317;
    goto LABEL_1011;
  }
  if (v664 != v663)
  {
    v317 = (*(uint64_t (**)(void))(*v664 + 16))();
    goto LABEL_1009;
  }
  v688 = v687;
  (*(void (**)(_QWORD *, _QWORD *))(v663[0] + 24))(v663, v687);
LABEL_1011:
  v318 = (uint64_t)v667;
  v689 = v665;
  v319 = v690;
  if (!v667)
  {
LABEL_1014:
    v691 = (_QWORD *)v318;
    goto LABEL_1016;
  }
  if (v667 != v666)
  {
    v318 = (*(uint64_t (**)(void))(*v667 + 16))();
    goto LABEL_1014;
  }
  v691 = v690;
  (*(void (**)(_QWORD *, _QWORD *))(v666[0] + 24))(v666, v690);
LABEL_1016:
  v320 = (uint64_t)v656;
  v680 = v654;
  v321 = v681;
  if (!v656)
  {
LABEL_1019:
    v682 = (_QWORD *)v320;
    goto LABEL_1021;
  }
  if (v656 != v655)
  {
    v320 = (*(uint64_t (**)(void))(*v656 + 16))();
    goto LABEL_1019;
  }
  v682 = v681;
  (*(void (**)(_QWORD *, _QWORD *))(v655[0] + 24))(v655, v681);
LABEL_1021:
  v322 = (uint64_t)v661;
  v683 = v658;
  v323 = v684;
  if (!v661)
  {
LABEL_1024:
    v685 = (_QWORD *)v322;
    goto LABEL_1026;
  }
  if (v661 != v659)
  {
    v322 = (*(uint64_t (**)(void))(*v661 + 16))();
    goto LABEL_1024;
  }
  v685 = v684;
  (*(void (**)(_QWORD *, _QWORD *))(v659[0] + 24))(v659, v684);
LABEL_1026:
  v324 = (uint64_t)v688;
  __src = v686;
  v325 = &v595;
  if (!v688)
  {
LABEL_1029:
    v597 = (_QWORD *)v324;
    goto LABEL_1031;
  }
  if (v688 != v687)
  {
    v324 = (*(uint64_t (**)(void))(*v688 + 16))();
    goto LABEL_1029;
  }
  v597 = &v595;
  (*(void (**)(_QWORD *, _BYTE **))(v687[0] + 24))(v687, &v595);
LABEL_1031:
  v326 = (uint64_t)v691;
  v599 = v689;
  v327 = &v600;
  if (!v691)
  {
LABEL_1034:
    v603 = (unint64_t *)v326;
    goto LABEL_1036;
  }
  if (v691 != v690)
  {
    v326 = (*(uint64_t (**)(void))(*v691 + 16))();
    goto LABEL_1034;
  }
  v603 = &v600;
  (*(void (**)(_QWORD *, unint64_t *))(v690[0] + 24))(v690, &v600);
LABEL_1036:
  v328 = (uint64_t)v682;
  *(_QWORD *)&v758 = v680;
  v329 = (_QWORD *)&v758 + 1;
  if (!v682)
  {
LABEL_1039:
    v761 = (std::__shared_weak_count *)v328;
    goto LABEL_1041;
  }
  if (v682 != v681)
  {
    v328 = (*(uint64_t (**)(void))(*v682 + 16))();
    goto LABEL_1039;
  }
  v761 = (std::__shared_weak_count *)((char *)&v758 + 8);
  (*(void (**)(_QWORD *, char *))(v681[0] + 24))(v681, (char *)&v758 + 8);
LABEL_1041:
  v330 = (uint64_t)v685;
  v762 = v683;
  v331 = (void **)v763;
  if (!v685)
  {
LABEL_1044:
    v764 = (void **)v330;
    goto LABEL_1046;
  }
  if (v685 != v684)
  {
    v330 = (*(uint64_t (**)(void))(*v685 + 16))();
    goto LABEL_1044;
  }
  v764 = (void **)v763;
  (*(void (**)(_QWORD *, _QWORD *))(v684[0] + 24))(v684, v763);
LABEL_1046:
  v332 = (char *)__src;
  v333 = (char *)v758;
  if (__src == (void *)v758)
  {
    v334 = 0;
  }
  else
  {
    v334 = 0;
    do
    {
      v332 = *(char **)v332;
      __src = v332;
      if (v332 != v599)
      {
        do
        {
          if (!v597)
            sub_223198474();
          v335 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v597 + 48))(v597, (_QWORD *)v332 + 2);
          v332 = (char *)__src;
          if (*(_BYTE *)(v335 + 112) == 1)
            break;
          v332 = *(char **)__src;
          __src = v332;
        }
        while (v332 != v599);
        v333 = (char *)v758;
      }
      ++v334;
    }
    while (v332 != v333);
  }
  if (v764 == v763)
  {
    v336 = 4;
  }
  else
  {
    if (!v764)
      goto LABEL_1061;
    v336 = 5;
    v331 = v764;
  }
  (*((void (**)(void **))*v331 + v336))(v331);
LABEL_1061:
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v337 = 4;
    v74 = v587;
  }
  else
  {
    v74 = v587;
    if (!v761)
      goto LABEL_1066;
    v337 = 5;
    v329 = &v761->__vftable;
  }
  (*(void (**)(_QWORD *))(*v329 + 8 * v337))(v329);
LABEL_1066:
  if (v603 == &v600)
  {
    v340 = 4;
    v338 = v687;
    v339 = (void **)v651;
  }
  else
  {
    v338 = v687;
    v339 = (void **)v651;
    if (!v603)
      goto LABEL_1071;
    v340 = 5;
    v327 = v603;
  }
  (*(void (**)(unint64_t *))(*v327 + 8 * v340))(v327);
LABEL_1071:
  if (v597 == &v595)
  {
    v341 = 4;
  }
  else
  {
    if (!v597)
      goto LABEL_1076;
    v341 = 5;
    v325 = v597;
  }
  (*(void (**)(_QWORD *))(*v325 + 8 * v341))(v325);
LABEL_1076:
  if (v685 == v684)
  {
    v342 = 4;
  }
  else
  {
    if (!v685)
      goto LABEL_1081;
    v342 = 5;
    v323 = v685;
  }
  (*(void (**)(_QWORD *))(*v323 + 8 * v342))(v323);
LABEL_1081:
  if (v682 == v681)
  {
    v343 = 4;
  }
  else
  {
    if (!v682)
      goto LABEL_1086;
    v343 = 5;
    v321 = v682;
  }
  (*(void (**)(_QWORD *))(*v321 + 8 * v343))(v321);
LABEL_1086:
  if (v691 == v690)
  {
    v344 = 4;
  }
  else
  {
    if (!v691)
      goto LABEL_1091;
    v344 = 5;
    v319 = v691;
  }
  (*(void (**)(_QWORD *))(*v319 + 8 * v344))(v319);
LABEL_1091:
  if (v688 == v687)
  {
    v345 = 4;
  }
  else
  {
    if (!v688)
      goto LABEL_1096;
    v345 = 5;
    v338 = v688;
  }
  (*(void (**)(_QWORD *))(*v338 + 8 * v345))(v338);
LABEL_1096:
  v346 = (uint64_t)v664;
  v674 = (uint64_t *)v662;
  v347 = v675;
  if (!v664)
  {
LABEL_1099:
    v676 = (_QWORD *)v346;
    goto LABEL_1101;
  }
  if (v664 != v663)
  {
    v346 = (*(uint64_t (**)(void))(*v664 + 16))();
    goto LABEL_1099;
  }
  v676 = v675;
  (*(void (**)(_QWORD *, _QWORD *))(v663[0] + 24))(v663, v675);
LABEL_1101:
  v348 = (uint64_t)v667;
  v677 = v665;
  v349 = v678;
  if (!v667)
  {
LABEL_1104:
    v679 = (_QWORD *)v348;
    goto LABEL_1106;
  }
  if (v667 != v666)
  {
    v348 = (*(uint64_t (**)(void))(*v667 + 16))();
    goto LABEL_1104;
  }
  v679 = v678;
  (*(void (**)(_QWORD *, _QWORD *))(v666[0] + 24))(v666, v678);
LABEL_1106:
  v350 = (uint64_t)v656;
  v668 = v654;
  v351 = v669;
  if (!v656)
  {
LABEL_1109:
    v670 = (_QWORD *)v350;
    goto LABEL_1111;
  }
  if (v656 != v655)
  {
    v350 = (*(uint64_t (**)(void))(*v656 + 16))();
    goto LABEL_1109;
  }
  v670 = v669;
  (*(void (**)(_QWORD *, _QWORD *))(v655[0] + 24))(v655, v669);
LABEL_1111:
  v352 = (uint64_t)v661;
  v671 = (size_t)v658;
  if (!v661)
  {
LABEL_1114:
    v673 = (_QWORD *)v352;
    goto LABEL_1116;
  }
  if (v661 != v659)
  {
    v352 = (*(uint64_t (**)(void))(*v661 + 16))();
    goto LABEL_1114;
  }
  v673 = v672;
  (*(void (**)(_QWORD *, _QWORD *))(v659[0] + 24))(v659, v672);
LABEL_1116:
  if (!v334)
    goto LABEL_1429;
  if (v334 >> 60)
    sub_22316E078();
  v353 = (uint64_t *)operator new(16 * v334);
  v590 = v353;
  v354 = (uint64_t)v676;
  v698 = v674;
  if (!v676)
    goto LABEL_1121;
  if (v676 != v675)
  {
    v354 = (*(uint64_t (**)(void))(*v676 + 16))();
LABEL_1121:
    v700 = (_QWORD *)v354;
    goto LABEL_1124;
  }
  v700 = v699;
  (*(void (**)(_QWORD *, _QWORD *))(v675[0] + 24))(v675, v699);
LABEL_1124:
  v355 = (uint64_t)v679;
  v701 = v677;
  if (!v679)
  {
LABEL_1127:
    v703 = (_QWORD *)v355;
    goto LABEL_1129;
  }
  if (v679 != v678)
  {
    v355 = (*(uint64_t (**)(void))(*v679 + 16))();
    goto LABEL_1127;
  }
  v703 = v702;
  (*(void (**)(_QWORD *, _QWORD *))(v678[0] + 24))(v678, v702);
LABEL_1129:
  v356 = (uint64_t)v670;
  v692 = v668;
  if (!v670)
  {
LABEL_1132:
    v694 = (_QWORD *)v356;
    goto LABEL_1134;
  }
  if (v670 != v669)
  {
    v356 = (*(uint64_t (**)(void))(*v670 + 16))();
    goto LABEL_1132;
  }
  v694 = v693;
  (*(void (**)(_QWORD *, _QWORD *))(v669[0] + 24))(v669, v693);
LABEL_1134:
  v357 = (uint64_t)v673;
  v695 = (const char *)v671;
  if (!v673)
  {
LABEL_1137:
    v697 = (_QWORD *)v357;
    goto LABEL_1139;
  }
  if (v673 != v672)
  {
    v357 = (*(uint64_t (**)(void))(*v673 + 16))();
    goto LABEL_1137;
  }
  v697 = v696;
  (*(void (**)(_QWORD *, _QWORD *))(v672[0] + 24))(v672, v696);
LABEL_1139:
  v576 = v353;
  v358 = (uint64_t)v700;
  v710 = v698;
  if (!v700)
  {
LABEL_1142:
    v712 = (_QWORD *)v358;
    goto LABEL_1144;
  }
  if (v700 != v699)
  {
    v358 = (*(uint64_t (**)(void))(*v700 + 16))();
    goto LABEL_1142;
  }
  v712 = v711;
  (*(void (**)(_QWORD *, _QWORD *))(v699[0] + 24))(v699, v711);
LABEL_1144:
  v359 = (uint64_t)v703;
  v713 = v701;
  if (!v703)
  {
LABEL_1147:
    v715 = (_QWORD *)v359;
    goto LABEL_1149;
  }
  if (v703 != v702)
  {
    v359 = (*(uint64_t (**)(void))(*v703 + 16))();
    goto LABEL_1147;
  }
  v715 = v714;
  (*(void (**)(_QWORD *))(v702[0] + 24))(v702);
LABEL_1149:
  v360 = (uint64_t)v694;
  v704 = v692;
  if (!v694)
  {
LABEL_1152:
    v706 = (_QWORD *)v360;
    goto LABEL_1154;
  }
  if (v694 != v693)
  {
    v360 = (*(uint64_t (**)(void))(*v694 + 16))();
    goto LABEL_1152;
  }
  v706 = v705;
  (*(void (**)(_QWORD *))(v693[0] + 24))(v693);
LABEL_1154:
  v361 = (uint64_t)v697;
  v707 = (uint64_t *)v695;
  if (!v697)
  {
LABEL_1157:
    v709 = (_QWORD *)v361;
    goto LABEL_1159;
  }
  if (v697 != v696)
  {
    v361 = (*(uint64_t (**)(void))(*v697 + 16))();
    goto LABEL_1157;
  }
  v709 = v708;
  (*(void (**)(_QWORD *))(v696[0] + 24))(v696);
LABEL_1159:
  v362 = (uint64_t)v712;
  v722 = v710;
  if (!v712)
  {
LABEL_1162:
    v724 = (std::__shared_weak_count *)v362;
    goto LABEL_1164;
  }
  if (v712 != v711)
  {
    v362 = (*(uint64_t (**)(void))(*v712 + 16))();
    goto LABEL_1162;
  }
  v724 = (std::__shared_weak_count *)v723;
  (*(void (**)(_QWORD *))(v711[0] + 24))(v711);
LABEL_1164:
  v363 = (uint64_t)v715;
  v725 = v713;
  if (!v715)
  {
LABEL_1167:
    v727 = (_QWORD *)v363;
    goto LABEL_1169;
  }
  if (v715 != v714)
  {
    v363 = (*(uint64_t (**)(void))(*v715 + 16))();
    goto LABEL_1167;
  }
  v727 = v726;
  (*(void (**)(_QWORD *))(v714[0] + 24))(v714);
LABEL_1169:
  v364 = (uint64_t)v706;
  v716 = v704;
  v365 = v717;
  if (!v706)
  {
LABEL_1172:
    v718 = (std::__shared_weak_count *)v364;
    goto LABEL_1174;
  }
  if (v706 != v705)
  {
    v364 = (*(uint64_t (**)(void))(*v706 + 16))();
    goto LABEL_1172;
  }
  v718 = (std::__shared_weak_count *)v717;
  (*(void (**)(_QWORD *, _QWORD *))(v705[0] + 24))(v705, v717);
LABEL_1174:
  v366 = (uint64_t)v709;
  v719 = v707;
  v367 = v720;
  if (!v709)
  {
LABEL_1177:
    v721 = (_QWORD *)v366;
    goto LABEL_1179;
  }
  if (v709 != v708)
  {
    v366 = (*(uint64_t (**)(void))(*v709 + 16))();
    goto LABEL_1177;
  }
  v721 = v720;
  (*(void (**)(_QWORD *, _QWORD *))(v708[0] + 24))(v708, v720);
LABEL_1179:
  v734 = v722;
  v368 = &v734;
  v369 = v735;
  if (!v724)
  {
LABEL_1182:
    v368[4] = 0;
    goto LABEL_1184;
  }
  if (v724 != (std::__shared_weak_count *)v723)
  {
    v368 = &v722;
    v736 = v724;
    goto LABEL_1182;
  }
  v736 = (std::__shared_weak_count *)v735;
  (*(void (**)(void))(v723[0] + 24))();
LABEL_1184:
  v737 = v725;
  v370 = &v734;
  v371 = v738;
  if (!v727)
  {
LABEL_1187:
    v370[10] = 0;
    goto LABEL_1189;
  }
  if (v727 != v726)
  {
    v370 = &v722;
    v739 = v727;
    goto LABEL_1187;
  }
  v739 = v738;
  (*(void (**)(void))(v726[0] + 24))();
LABEL_1189:
  v728 = v716;
  v372 = &v728;
  v373 = v729;
  if (!v718)
  {
LABEL_1192:
    v372[4] = 0;
    goto LABEL_1194;
  }
  if (v718 != (std::__shared_weak_count *)v717)
  {
    v372 = &v716;
    v730 = v718;
    goto LABEL_1192;
  }
  v730 = (std::__shared_weak_count *)v729;
  (*(void (**)(_QWORD *, _QWORD *))(v717[0] + 24))(v717, v729);
LABEL_1194:
  v731 = v719;
  v374 = &v728;
  v375 = (void **)v732;
  if (!v721)
  {
LABEL_1197:
    v374[10] = 0;
    goto LABEL_1199;
  }
  if (v721 != v720)
  {
    v374 = &v716;
    v733 = (void **)v721;
    goto LABEL_1197;
  }
  v733 = (void **)v732;
  (*(void (**)(_QWORD *, _QWORD *))(v720[0] + 24))(v720, v732);
LABEL_1199:
  v752 = v734;
  v376 = &v752;
  v377 = &v753;
  if (!v736)
  {
LABEL_1202:
    v376[4] = 0;
    goto LABEL_1204;
  }
  if (v736 != (std::__shared_weak_count *)v735)
  {
    v376 = &v734;
    v754 = (__int128 *)v736;
    goto LABEL_1202;
  }
  v754 = &v753;
  (*(void (**)(_QWORD *, __int128 *))(v735[0] + 24))(v735, &v753);
LABEL_1204:
  v755 = v737;
  v378 = &v752;
  v379 = (void **)v756;
  if (!v739)
  {
LABEL_1207:
    v378[10] = 0;
    goto LABEL_1209;
  }
  if (v739 != v738)
  {
    v378 = &v734;
    v757 = (void **)v739;
    goto LABEL_1207;
  }
  v757 = (void **)v756;
  (*(void (**)(_QWORD *, _QWORD *))(v738[0] + 24))(v738, v756);
LABEL_1209:
  sub_2238427A8(&v758, (uint64_t *)&v752);
  *(_QWORD *)&v740[0] = v728;
  v380 = (uint64_t **)v740;
  v381 = (_QWORD *)v740 + 1;
  if (!v730)
  {
LABEL_1212:
    v380[4] = 0;
    goto LABEL_1214;
  }
  if (v730 != (std::__shared_weak_count *)v729)
  {
    v380 = &v728;
    v741 = v730;
    goto LABEL_1212;
  }
  v741 = (std::__shared_weak_count *)((char *)v740 + 8);
  (*(void (**)(_QWORD *, char *))(v729[0] + 24))(v729, (char *)v740 + 8);
LABEL_1214:
  v742 = v731;
  v382 = (uint64_t **)v740;
  v383 = (void **)v743;
  if (!v733)
  {
LABEL_1217:
    v382[10] = 0;
    goto LABEL_1219;
  }
  if (v733 != v732)
  {
    v382 = &v728;
    v744 = v733;
    goto LABEL_1217;
  }
  v744 = (void **)v743;
  (*(void (**)(_QWORD *, _QWORD *))(v732[0] + 24))(v732, v743);
LABEL_1219:
  sub_2238427A8(&__dst, (uint64_t *)v740);
  __src = (void *)v758;
  v384 = &__src;
  if (!v761)
  {
LABEL_1222:
    v384[4] = 0;
    goto LABEL_1224;
  }
  v384 = (void **)&v758;
  if (v761 != (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v597 = &v761->__vftable;
    goto LABEL_1222;
  }
  v597 = &v595;
  ((void (*)(void))v761->__get_deleter)();
LABEL_1224:
  v599 = (const char *)v762;
  v385 = &__src;
  if (!v764)
  {
LABEL_1227:
    v385[10] = 0;
    goto LABEL_1229;
  }
  v385 = (void **)&v758;
  if (v764 != v763)
  {
    v603 = (unint64_t *)v764;
    goto LABEL_1227;
  }
  v603 = &v600;
  (*((void (**)(void))*v764 + 3))();
LABEL_1229:
  v605 = __dst;
  if (v748)
  {
    if (v748 == (std::__shared_weak_count *)&v746)
    {
      v609 = &v606;
      ((void (*)(void))v748->__get_deleter)();
    }
    else
    {
      v609 = (uint64_t *)v748;
      v748 = 0;
    }
  }
  else
  {
    v609 = 0;
  }
  v611 = (void (**)(void **, uint64_t **))v749;
  if (v751)
  {
    if (v751 == v750)
    {
      v614 = (void **)v612;
      (*(void (**)(void))(*v751 + 24))();
    }
    else
    {
      v614 = (void **)v751;
      v751 = 0;
    }
  }
  else
  {
    v614 = 0;
  }
  v386 = v751;
  if (v751 == v750)
  {
    v387 = 4;
    v386 = v750;
  }
  else
  {
    if (!v751)
      goto LABEL_1244;
    v387 = 5;
  }
  (*(void (**)(void))(*v386 + 8 * v387))();
LABEL_1244:
  v388 = (size_t *)v748;
  if (v748 == (std::__shared_weak_count *)&v746)
  {
    v389 = 4;
    v388 = &v746;
  }
  else
  {
    if (!v748)
      goto LABEL_1249;
    v389 = 5;
  }
  (*(void (**)(void))(*v388 + 8 * v389))();
LABEL_1249:
  if (v744 == v743)
  {
    v390 = 4;
  }
  else
  {
    if (!v744)
      goto LABEL_1254;
    v390 = 5;
    v383 = v744;
  }
  (*((void (**)(void **))*v383 + v390))(v383);
LABEL_1254:
  if (v741 == (std::__shared_weak_count *)((char *)v740 + 8))
  {
    v391 = 4;
  }
  else
  {
    if (!v741)
      goto LABEL_1259;
    v391 = 5;
    v381 = &v741->__vftable;
  }
  (*(void (**)(_QWORD *))(*v381 + 8 * v391))(v381);
LABEL_1259:
  v392 = v764;
  if (v764 == v763)
  {
    v394 = 4;
    v392 = (void **)v763;
    v393 = v726;
  }
  else
  {
    v393 = v726;
    if (!v764)
      goto LABEL_1264;
    v394 = 5;
  }
  (*((void (**)(void))*v392 + v394))();
LABEL_1264:
  v395 = &v761->__vftable;
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v396 = 4;
    v395 = (_QWORD *)&v758 + 1;
  }
  else
  {
    if (!v761)
      goto LABEL_1269;
    v396 = 5;
  }
  (*(void (**)(void))(*v395 + 8 * v396))();
LABEL_1269:
  if (v757 == v756)
  {
    v397 = 4;
  }
  else
  {
    if (!v757)
      goto LABEL_1274;
    v397 = 5;
    v379 = v757;
  }
  (*((void (**)(void **))*v379 + v397))(v379);
LABEL_1274:
  if (v754 == &v753)
  {
    v398 = 4;
  }
  else
  {
    if (!v754)
      goto LABEL_1279;
    v398 = 5;
    v377 = v754;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v377 + 8 * v398))(v377);
LABEL_1279:
  if (v733 == v732)
  {
    v399 = 4;
  }
  else
  {
    if (!v733)
      goto LABEL_1284;
    v399 = 5;
    v375 = v733;
  }
  (*((void (**)(void **))*v375 + v399))(v375);
LABEL_1284:
  if (v730 == (std::__shared_weak_count *)v729)
  {
    v400 = 4;
    v310 = &rep;
  }
  else
  {
    v310 = &rep;
    if (!v730)
      goto LABEL_1289;
    v400 = 5;
    v373 = &v730->__vftable;
  }
  (*(void (**)(_QWORD *))(*v373 + 8 * v400))(v373);
LABEL_1289:
  if (v739 == v738)
  {
    v401 = 4;
    v347 = v675;
  }
  else
  {
    v347 = v675;
    if (!v739)
      goto LABEL_1294;
    v401 = 5;
    v371 = v739;
  }
  (*(void (**)(_QWORD *))(*v371 + 8 * v401))(v371);
LABEL_1294:
  if (v736 == (std::__shared_weak_count *)v735)
  {
    v402 = 4;
  }
  else
  {
    if (!v736)
      goto LABEL_1299;
    v402 = 5;
    v369 = &v736->__vftable;
  }
  (*(void (**)(_QWORD *))(*v369 + 8 * v402))(v369);
LABEL_1299:
  if (v721 == v720)
  {
    v403 = 4;
    v339 = (void **)v651;
  }
  else
  {
    v339 = (void **)v651;
    if (!v721)
      goto LABEL_1304;
    v403 = 5;
    v367 = v721;
  }
  (*(void (**)(_QWORD *))(*v367 + 8 * v403))(v367);
LABEL_1304:
  if (v718 == (std::__shared_weak_count *)v717)
  {
    v405 = 4;
    v404 = v723;
  }
  else
  {
    v404 = v723;
    if (!v718)
      goto LABEL_1309;
    v405 = 5;
    v365 = &v718->__vftable;
  }
  (*(void (**)(_QWORD *))(*v365 + 8 * v405))(v365);
LABEL_1309:
  if (v727 == v726)
  {
    v406 = 4;
    v74 = v587;
  }
  else
  {
    v74 = v587;
    if (!v727)
      goto LABEL_1314;
    v406 = 5;
    v393 = v727;
  }
  (*(void (**)(_QWORD *))(*v393 + 8 * v406))(v393);
LABEL_1314:
  if (v724 == (std::__shared_weak_count *)v723)
  {
    v407 = 4;
  }
  else
  {
    if (!v724)
      goto LABEL_1319;
    v407 = 5;
    v404 = &v724->__vftable;
  }
  (*(void (**)(_QWORD *))(*v404 + 8 * v407))(v404);
LABEL_1319:
  v408 = (uint64_t)v597;
  *(_QWORD *)&v758 = __src;
  v409 = (_QWORD *)&v758 + 1;
  if (!v597)
  {
LABEL_1322:
    v761 = (std::__shared_weak_count *)v408;
    goto LABEL_1324;
  }
  if (v597 != &v595)
  {
    v408 = (*(uint64_t (**)(void))(*v597 + 16))();
    goto LABEL_1322;
  }
  v761 = (std::__shared_weak_count *)((char *)&v758 + 8);
  (*((void (**)(_BYTE **, char *))v595 + 3))(&v595, (char *)&v758 + 8);
LABEL_1324:
  v410 = (uint64_t)v603;
  v762 = (uint64_t *)v599;
  v411 = (void **)v763;
  if (!v603)
  {
LABEL_1327:
    v764 = (void **)v410;
    goto LABEL_1329;
  }
  if (v603 != &v600)
  {
    v410 = (*(uint64_t (**)(void))(*v603 + 16))();
    goto LABEL_1327;
  }
  v764 = (void **)v763;
  (*(void (**)(unint64_t *, _QWORD *))(v600 + 24))(&v600, v763);
LABEL_1329:
  v412 = (uint64_t)v609;
  v752 = v605;
  v413 = &v753;
  if (!v609)
  {
LABEL_1332:
    v754 = (__int128 *)v412;
    goto LABEL_1334;
  }
  if (v609 != &v606)
  {
    v412 = (*(uint64_t (**)(void))(*v609 + 16))();
    goto LABEL_1332;
  }
  v754 = &v753;
  (*(void (**)(uint64_t *, __int128 *))(v606 + 24))(&v606, &v753);
LABEL_1334:
  v414 = (uint64_t)v614;
  v755 = (const char *)v611;
  v415 = (void **)v756;
  if (!v614)
  {
LABEL_1337:
    v757 = (void **)v414;
    goto LABEL_1339;
  }
  if (v614 != v612)
  {
    v414 = (*((uint64_t (**)(void))*v614 + 2))();
    goto LABEL_1337;
  }
  v757 = (void **)v756;
  (*(void (**)(_QWORD *, _QWORD *))(v612[0] + 24))(v612, v756);
LABEL_1339:
  v416 = (uint64_t *)v758;
  if ((uint64_t *)v758 != v752)
  {
    v417 = v576;
    while (1)
    {
      if (!v761)
        goto LABEL_1698;
      v418 = (float32x4_t *)((uint64_t (*)(std::__shared_weak_count *, uint64_t *))v761->__vftable[1].~__shared_weak_count_0)(v761, v416 + 2);
      v233 = *v418;
      *(float32x4_t *)v417 = *v418;
      v416 = *(uint64_t **)v758;
      *(_QWORD *)&v758 = v416;
      if (v416 != v762)
        break;
LABEL_1341:
      v417 += 2;
      if (v416 == v752)
        goto LABEL_1349;
    }
    while (v761)
    {
      v419 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t *))v761->__vftable[1].~__shared_weak_count_0)(v761, v416 + 2);
      v416 = (uint64_t *)v758;
      if (*(_BYTE *)(v419 + 112) != 1)
      {
        v416 = *(uint64_t **)v758;
        *(_QWORD *)&v758 = v416;
        if (v416 != v762)
          continue;
      }
      goto LABEL_1341;
    }
LABEL_1698:
    sub_223198474();
  }
  v417 = v576;
LABEL_1349:
  if (v757 == v756)
  {
    v420 = 4;
  }
  else
  {
    if (!v757)
      goto LABEL_1354;
    v420 = 5;
    v415 = v757;
  }
  (*((void (**)(void **))*v415 + v420))(v415);
LABEL_1354:
  if (v754 == &v753)
  {
    v422 = 4;
    v421 = v702;
  }
  else
  {
    v421 = v702;
    if (!v754)
      goto LABEL_1359;
    v422 = 5;
    v413 = v754;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v413 + 8 * v422))(v413);
LABEL_1359:
  if (v764 == v763)
  {
    v423 = 4;
    v349 = v678;
  }
  else
  {
    v349 = v678;
    if (!v764)
      goto LABEL_1364;
    v423 = 5;
    v411 = v764;
  }
  (*((void (**)(void **))*v411 + v423))(v411);
LABEL_1364:
  if (v761 == (std::__shared_weak_count *)((char *)&v758 + 8))
  {
    v425 = 4;
    v424 = v699;
  }
  else
  {
    v424 = v699;
    if (!v761)
      goto LABEL_1369;
    v425 = 5;
    v409 = &v761->__vftable;
  }
  (*(void (**)(_QWORD *))(*v409 + 8 * v425))(v409);
LABEL_1369:
  v426 = (void **)v612;
  if (v614 == v612)
  {
    v427 = 4;
    v351 = v669;
  }
  else
  {
    v351 = v669;
    if (!v614)
      goto LABEL_1374;
    v427 = 5;
    v426 = v614;
  }
  (*((void (**)(void))*v426 + v427))();
LABEL_1374:
  v428 = &v606;
  if (v609 == &v606)
  {
    v429 = 4;
  }
  else
  {
    if (!v609)
      goto LABEL_1379;
    v429 = 5;
    v428 = v609;
  }
  (*(void (**)(void))(*v428 + 8 * v429))();
LABEL_1379:
  v430 = &v600;
  if (v603 == &v600)
  {
    v431 = 4;
  }
  else
  {
    if (!v603)
      goto LABEL_1384;
    v431 = 5;
    v430 = v603;
  }
  (*(void (**)(void))(*v430 + 8 * v431))();
LABEL_1384:
  v432 = &v595;
  if (v597 == &v595)
  {
    v433 = 4;
  }
  else
  {
    if (!v597)
      goto LABEL_1389;
    v433 = 5;
    v432 = v597;
  }
  (*(void (**)(void))(*v432 + 8 * v433))();
LABEL_1389:
  if (v709 == v708)
  {
    v434 = 4;
    v435 = v708;
  }
  else
  {
    if (!v709)
      goto LABEL_1394;
    v434 = 5;
    v435 = v709;
  }
  (*(void (**)(void))(*v435 + 8 * v434))();
LABEL_1394:
  v436 = v705;
  if (v706 == v705)
  {
    v437 = 4;
  }
  else
  {
    if (!v706)
      goto LABEL_1399;
    v437 = 5;
    v436 = v706;
  }
  (*(void (**)(void))(*v436 + 8 * v437))();
LABEL_1399:
  if (v715 == v714)
  {
    v438 = 4;
    v439 = v714;
  }
  else
  {
    if (!v715)
      goto LABEL_1404;
    v438 = 5;
    v439 = v715;
  }
  (*(void (**)(void))(*v439 + 8 * v438))();
LABEL_1404:
  v440 = v711;
  if (v712 == v711)
  {
    v441 = 4;
  }
  else
  {
    if (!v712)
      goto LABEL_1409;
    v441 = 5;
    v440 = v712;
  }
  (*(void (**)(void))(*v440 + 8 * v441))();
LABEL_1409:
  v591 = v417;
  v442 = v696;
  if (v697 == v696)
  {
    v443 = 4;
  }
  else
  {
    if (!v697)
      goto LABEL_1414;
    v443 = 5;
    v442 = v697;
  }
  (*(void (**)(void))(*v442 + 8 * v443))();
LABEL_1414:
  v444 = v693;
  if (v694 == v693)
  {
    v445 = 4;
  }
  else
  {
    if (!v694)
      goto LABEL_1419;
    v445 = 5;
    v444 = v694;
  }
  (*(void (**)(void))(*v444 + 8 * v445))();
LABEL_1419:
  if (v703 == v702)
  {
    v446 = 4;
  }
  else
  {
    if (!v703)
      goto LABEL_1424;
    v446 = 5;
    v421 = v703;
  }
  (*(void (**)(_QWORD *))(*v421 + 8 * v446))(v421);
LABEL_1424:
  if (v700 == v699)
  {
    v447 = 4;
  }
  else
  {
    if (!v700)
      goto LABEL_1429;
    v447 = 5;
    v424 = v700;
  }
  (*(void (**)(_QWORD *))(*v424 + 8 * v447))(v424);
LABEL_1429:
  if (v673 == v672)
  {
    v451 = 4;
    v448 = v578;
    v452 = v672;
    v449 = v583;
    v450 = v663;
  }
  else
  {
    v448 = v578;
    v449 = v583;
    v450 = v663;
    if (!v673)
      goto LABEL_1434;
    v451 = 5;
    v452 = v673;
  }
  (*(void (**)(void))(*v452 + 8 * v451))();
LABEL_1434:
  if (v670 == v669)
  {
    v453 = 4;
  }
  else
  {
    if (!v670)
      goto LABEL_1439;
    v453 = 5;
    v351 = v670;
  }
  (*(void (**)(_QWORD *))(*v351 + 8 * v453))(v351);
LABEL_1439:
  if (v679 == v678)
  {
    v454 = 4;
  }
  else
  {
    if (!v679)
      goto LABEL_1444;
    v454 = 5;
    v349 = v679;
  }
  (*(void (**)(_QWORD *))(*v349 + 8 * v454))(v349);
LABEL_1444:
  if (v676 == v675)
  {
    v455 = 4;
  }
  else
  {
    if (!v676)
      goto LABEL_1449;
    v455 = 5;
    v347 = v676;
  }
  (*(void (**)(_QWORD *))(*v347 + 8 * v455))(v347);
LABEL_1449:
  v456 = v659;
  if (v661 == v659)
  {
    v460 = 4;
    v457 = &object[8];
    v458 = &v641;
    v459 = v646;
  }
  else
  {
    v457 = &object[8];
    v458 = &v641;
    v459 = v646;
    if (!v661)
      goto LABEL_1454;
    v460 = 5;
    v456 = v661;
  }
  (*(void (**)(void))(*v456 + 8 * v460))();
LABEL_1454:
  v461 = v655;
  if (v656 == v655)
  {
    v462 = 4;
  }
  else
  {
    if (!v656)
      goto LABEL_1459;
    v462 = 5;
    v461 = v656;
  }
  (*(void (**)(void))(*v461 + 8 * v462))();
LABEL_1459:
  v463 = v666;
  if (v667 == v666)
  {
    v464 = 4;
  }
  else
  {
    if (!v667)
      goto LABEL_1464;
    v464 = 5;
    v463 = v667;
  }
  (*(void (**)(void))(*v463 + 8 * v464))();
LABEL_1464:
  if (v664 == v663)
  {
    v465 = 4;
  }
  else
  {
    if (!v664)
      goto LABEL_1469;
    v465 = 5;
    v450 = v664;
  }
  (*(void (**)(_QWORD *))(*v450 + 8 * v465))(v450);
LABEL_1469:
  if (v653 == v651)
  {
    v467 = 4;
    v466 = (unint64_t *)&v628;
  }
  else
  {
    v466 = (unint64_t *)&v628;
    if (!v653)
      goto LABEL_1474;
    v467 = 5;
    v339 = v653;
  }
  (*((void (**)(void **))*v339 + v467))(v339);
LABEL_1474:
  if (v648 == v646)
  {
    v468 = 4;
  }
  else
  {
    if (!v648)
      goto LABEL_1479;
    v468 = 5;
    v459 = v648;
  }
  (*(void (**)(uint64_t *))(*v459 + 8 * v468))(v459);
LABEL_1479:
  if (v643 == &v641)
  {
    v469 = 4;
  }
  else
  {
    if (!v643)
      goto LABEL_1484;
    v469 = 5;
    v458 = v643;
  }
  (*(void (**)(unint64_t *))(*v458 + 8 * v469))(v458);
LABEL_1484:
  if (*((_BYTE **)&v638 + 1) == &object[8])
  {
    v470 = 4;
  }
  else
  {
    if (!*((_QWORD *)&v638 + 1))
      goto LABEL_1489;
    v470 = 5;
    v457 = (_QWORD *)*((_QWORD *)&v638 + 1);
  }
  (*(void (**)(_QWORD *))(*v457 + 8 * v470))(v457);
LABEL_1489:
  v471 = (void **)v635;
  if (v636 == v635)
  {
    v472 = 4;
  }
  else
  {
    if (!v636)
      goto LABEL_1494;
    v472 = 5;
    v471 = v636;
  }
  (*((void (**)(void))*v471 + v472))();
LABEL_1494:
  v473 = (uint64_t **)v632;
  if (v633 == v632)
  {
    v474 = 4;
  }
  else
  {
    if (!v633)
      goto LABEL_1499;
    v474 = 5;
    v473 = v633;
  }
  ((void (*)(void))(*v473)[v474])();
LABEL_1499:
  if (v630 == (unint64_t *)&v628)
  {
    v475 = 4;
  }
  else
  {
    if (!v630)
      goto LABEL_1504;
    v475 = 5;
    v466 = v630;
  }
  (*(void (**)(unint64_t *))(*v466 + 8 * v475))(v466);
LABEL_1504:
  if (v625 == &rep)
  {
    v476 = 4;
  }
  else
  {
    if (!v625)
      goto LABEL_1509;
    v476 = 5;
    v310 = v625;
  }
  (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *))(*v310 + 8 * v476))(v310);
LABEL_1509:
  v477 = v620;
  if (v620 == v619)
  {
    v478 = 4;
    v477 = v619;
  }
  else
  {
    if (!v620)
      goto LABEL_1514;
    v478 = 5;
  }
  (*(void (**)(void))(*v477 + 8 * v478))();
LABEL_1514:
  v479 = v617;
  if (v617 == v616)
  {
    v480 = 4;
    v479 = v616;
    goto LABEL_1518;
  }
  if (v617)
  {
    v480 = 5;
LABEL_1518:
    (*(void (**)(void))(*v479 + 8 * v480))();
  }
  v223 = (char *)v590;
  v481 = 126 - 2 * __clz(((char *)v591 - (char *)v590) >> 4);
  v482 = *(_QWORD *)(v448 + 48);
  v233.i32[0] = *(_DWORD *)(v448 + 56);
  *(_DWORD *)&object[8] = v233.i32[0];
  *(_QWORD *)object = v482;
  __src = v74;
  v595 = object;
  if (v591 == v590)
    v483 = 0;
  else
    v483 = v481;
  sub_22383ACC8(v590, v591, (int8x8_t **)&__src, v483, 1, v233);
  sub_223198B3C((uint64_t)v579, (uint64_t)v579[1], (char *)&v591[2 * v449], (char *)v591, (uint64_t)(-16 * v449) >> 4);
  v214 = (void *)v592;
  __src = 0;
  v595 = 0;
  v596[0] = 0;
  v484 = (uint64_t)v593 - v592;
  if (v593 == (__int128 *)v592)
  {
    v486 = 0;
    v487 = 0;
  }
  else
  {
    if (v484 < 0)
      sub_22316E078();
    __src = operator new((unint64_t)v484 >> 3);
    v595 = __src;
    v596[0] = (char *)__src + 16 * (v484 >> 7);
    __p = &__src;
    v485 = (__int128 *)v592;
    do
    {
      *(_OWORD *)object = *v485;
      sub_2232E9564((char ***)&__p, object);
      v485 += 8;
    }
    while (v485 != v593);
    v487 = (char *)__src;
    v486 = v595;
  }
  sub_223198B3C((uint64_t)v579, (uint64_t)v579[1], v487, v486, (v486 - v487) >> 4);
  if (v487)
    operator delete(v487);
LABEL_1530:
  if (v223)
    operator delete(v223);
  v488 = *v579;
  v489 = v579[1];
  if (*v579 != v489)
  {
    v582 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v584 = (void *)*MEMORY[0x24BEDB7F0];
    v581 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v580 = MEMORY[0x24BEDB848] + 16;
    v585 = v579[1];
    while (1)
    {
      sub_223821DD4(&v734);
      if (*(int *)v734[7] <= 3)
      {
        v490 = *((unsigned __int8 *)v734 + 72);
        v491 = sub_22322F254((uint64_t)v734, "OSLogSurrogateAppender", 1, 0);
        v492 = v491;
        if (v490 || v491 != 0)
          break;
      }
LABEL_1679:
      v575 = sub_223822434(v74, *v488, v488[1]);
      *((_WORD *)v575 + 56) = 0x2000;
      *((_BYTE *)v575 + 114) = 0;
      v488 += 2;
      if (v488 == v489)
      {
        v214 = (void *)v592;
        goto LABEL_1692;
      }
    }
    sub_223195210((uint64_t)&__src);
    LODWORD(v638) = 0;
    sub_223701BA0(object, "Found keyframe to prune (anchor limit): ");
    sub_22319B83C((uint64_t)&v758, (uint64_t)object, (unsigned __int8 *)v488);
    if ((_DWORD)v638 == -1)
      sub_22316DD70();
    *(_QWORD *)&v758 = &v752;
    ((void (*)(void **__return_ptr, __int128 *, _BYTE *))off_24EC5B118[v638])(&__p, &v758, object);
    if ((_DWORD)v638 != -1)
      ((void (*)(__int128 *, _BYTE *))off_24EC5B100[v638])(&v758, object);
    if (v623 >= 0)
      v494 = (const char *)&__p;
    else
      v494 = (const char *)__p;
    v495 = strlen(v494);
    sub_2231813E8(v596, (uint64_t)v494, v495);
    if (SHIBYTE(v623) < 0)
    {
      operator delete(__p);
      v496 = (char)v608;
      if ((v608 & 0x10) == 0)
        goto LABEL_1547;
    }
    else
    {
      v496 = (char)v608;
      if ((v608 & 0x10) == 0)
      {
LABEL_1547:
        if ((v496 & 8) == 0)
        {
          v497 = 0;
          HIBYTE(v747) = 0;
          v498 = &__dst;
          goto LABEL_1561;
        }
        v499 = v600;
        v500 = (const void **)&v598;
LABEL_1553:
        v501 = *v500;
        v497 = v499 - (_QWORD)*v500;
        if (v497 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v497 >= 0x17)
        {
          v502 = (v497 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v497 | 7) != 0x17)
            v502 = v497 | 7;
          v503 = v502 + 1;
          v498 = (uint64_t **)operator new(v502 + 1);
          v747 = v503 | 0x8000000000000000;
          __dst = (uint64_t *)v498;
          v746 = v497;
        }
        else
        {
          HIBYTE(v747) = v499 - *(_BYTE *)v500;
          v498 = &__dst;
          if (!v497)
          {
LABEL_1561:
            *((_BYTE *)v498 + v497) = 0;
            __p = &v734;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v623 = std::chrono::system_clock::now().__d_.__rep_;
            v624 = 3;
            v625 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)"unknown file";
            v626 = 458;
            v627 = "unknown function";
            v628 = 0;
            v629 = 0;
            v504 = &__dst;
            if (v747 < 0)
              v504 = (uint64_t **)__dst;
            __s = (char *)v504;
            v505 = *(char **)__p;
            if (*(char *)(*(_QWORD *)__p + 39) < 0)
            {
              v507 = (const char *)*((_QWORD *)v505 + 2);
              v506 = *((_QWORD *)v505 + 3);
              v588 = *(_QWORD *)__p + 16;
              v509 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v509 & 1) != 0)
                goto LABEL_1567;
            }
            else
            {
              v506 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
              v507 = (const char *)(*(_QWORD *)__p + 16);
              v588 = (uint64_t)v507;
              v508 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v508 & 1) != 0)
                goto LABEL_1567;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v758);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v758, &xmmword_255788F40);
              if ((_BYTE)v760 && SHIBYTE(v759) < 0)
                operator delete((void *)v758);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
              v74 = v587;
            }
LABEL_1567:
            if (byte_255788F57 >= 0)
              v510 = (const char *)&xmmword_255788F40;
            else
              v510 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v511 = byte_255788F57;
            else
              v511 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)object = os_log_create(v510, v507);
            if (v511 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v511 >= 0x17)
            {
              v513 = (v511 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v511 | 7) != 0x17)
                v513 = v511 | 7;
              v514 = v513 + 1;
              v512 = operator new(v513 + 1);
              *(_QWORD *)&v638 = v514 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v512;
              *(_QWORD *)&object[16] = v511;
              v74 = v587;
            }
            else
            {
              BYTE7(v638) = v511;
              v512 = &object[8];
              if (!v511)
              {
LABEL_1581:
                v512[v511] = 0;
                BYTE8(v638) = 1;
                if (v506 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v506 >= 0x17)
                {
                  v517 = (v506 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v506 | 7) != 0x17)
                    v517 = v506 | 7;
                  v518 = v517 + 1;
                  v515 = operator new(v517 + 1);
                  v641 = v518 | 0x8000000000000000;
                  v639 = v515;
                  v640 = v506;
                }
                else
                {
                  HIBYTE(v641) = v506;
                  v515 = &v639;
                  if (!v506)
                  {
                    LOBYTE(v639) = 0;
                    v642 = 1;
                    v516 = *(NSObject **)object;
                    if ((SHIBYTE(v641) & 0x80000000) == 0)
                      goto LABEL_1585;
                    goto LABEL_1591;
                  }
                }
                memmove(v515, v507, v506);
                *((_BYTE *)v515 + v506) = 0;
                v642 = 1;
                v516 = *(NSObject **)object;
                if ((SHIBYTE(v641) & 0x80000000) == 0)
                {
LABEL_1585:
                  if (!BYTE8(v638))
                    goto LABEL_1594;
                  goto LABEL_1592;
                }
LABEL_1591:
                operator delete(v639);
                if (!BYTE8(v638))
                  goto LABEL_1594;
LABEL_1592:
                if (SBYTE7(v638) < 0)
                  operator delete(*(void **)&object[8]);
LABEL_1594:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v492 || !*(_QWORD *)(v492 + 24))
                {
                  os_log_type_enabled(v516, OS_LOG_TYPE_INFO);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = __s;
                  v525 = (void *)_os_log_send_and_compose_impl();
                  if (!v525)
                    goto LABEL_1666;
                  free(v525);
                  if (!v490)
                    goto LABEL_1670;
                  goto LABEL_1667;
                }
                v519 = _os_log_pack_size();
                v520 = (std::__shared_weak_count_vtbl *)operator new(v519, (std::align_val_t)8uLL);
                v521 = (std::__shared_weak_count *)operator new();
                v521->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v521->__shared_owners_ = 0;
                v521->__shared_weak_owners_ = 0;
                v521[1].__vftable = v520;
                *(_QWORD *)&v758 = v520;
                *((_QWORD *)&v758 + 1) = v520;
                v759 = v521;
                v760 = 0;
                v761 = 0;
                v522 = strlen(__s);
                if (v522 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v523 = v522;
                if (v522 >= 0x17)
                {
                  v526 = (v522 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v522 | 7) != 0x17)
                    v526 = v522 | 7;
                  v527 = v526 + 1;
                  v524 = (uint64_t *)operator new(v526 + 1);
                  *((_QWORD *)&v753 + 1) = v527 | 0x8000000000000000;
                  v752 = v524;
                  *(_QWORD *)&v753 = v523;
                }
                else
                {
                  HIBYTE(v753) = v522;
                  v524 = (uint64_t *)&v752;
                  if (!v522)
                  {
LABEL_1609:
                    *((_BYTE *)v524 + v523) = 0;
                    v528 = v752;
                    *(_QWORD *)&v740[0] = v753;
                    *(_QWORD *)((char *)v740 + 7) = *(_QWORD *)((char *)&v753 + 7);
                    v529 = HIBYTE(v753);
                    v530 = operator new(0x38uLL);
                    v530[1] = 0;
                    v530[2] = 0;
                    v530[3] = off_24EC1FA48;
                    *v530 = &off_24EC1F9F8;
                    v531 = *(_QWORD *)&v740[0];
                    v530[4] = v528;
                    v530[5] = v531;
                    *(_QWORD *)((char *)v530 + 47) = *(_QWORD *)((char *)v740 + 7);
                    *((_BYTE *)v530 + 55) = v529;
                    *(_QWORD *)&v740[0] = 0;
                    *(_QWORD *)((char *)v740 + 7) = 0;
                    v532 = v761;
                    v760 = (char *)(v530 + 3);
                    v761 = (std::__shared_weak_count *)v530;
                    if (v532)
                    {
                      p_shared_owners = (unint64_t *)&v532->__shared_owners_;
                      do
                        v534 = __ldaxr(p_shared_owners);
                      while (__stlxr(v534 - 1, p_shared_owners));
                      if (!v534)
                      {
                        ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
                        std::__shared_weak_count::__release_weak(v532);
                      }
                    }
                    *(_OWORD *)object = v758;
                    v535 = v760;
                    *(_QWORD *)&object[16] = v759;
                    if (v759)
                    {
                      v536 = (unint64_t *)&v759->__shared_owners_;
                      do
                        v537 = __ldxr(v536);
                      while (__stxr(v537 + 1, v536));
                    }
                    v538 = v761;
                    *(_QWORD *)&v638 = v535;
                    *((_QWORD *)&v638 + 1) = v761;
                    if (v761)
                    {
                      v539 = (unint64_t *)&v761->__shared_owners_;
                      do
                        v540 = __ldxr(v539);
                      while (__stxr(v540 + 1, v539));
                      v639 = v535;
                      do
                        v541 = __ldaxr(v539);
                      while (__stlxr(v541 - 1, v539));
                      if (!v541)
                      {
                        ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
                        std::__shared_weak_count::__release_weak(v538);
                      }
                    }
                    else
                    {
                      v639 = v535;
                    }
                    v542 = v759;
                    if (v759)
                    {
                      v543 = (unint64_t *)&v759->__shared_owners_;
                      do
                        v544 = __ldaxr(v543);
                      while (__stlxr(v544 - 1, v543));
                      if (!v544)
                      {
                        ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
                        std::__shared_weak_count::__release_weak(v542);
                      }
                    }
                    v545 = *(_QWORD *)object;
                    if (*((char *)v639 + 31) >= 0)
                      v546 = (char *)v639 + 8;
                    else
                      v546 = (char *)*((_QWORD *)v639 + 1);
                    v547 = _os_log_pack_fill();
                    *(_DWORD *)v547 = 136315138;
                    *(_QWORD *)(v547 + 4) = v546;
                    v548 = operator new();
                    v549 = v505[39];
                    v550 = v588;
                    if ((v549 & 0x80u) != 0)
                    {
                      v550 = *((_QWORD *)v505 + 2);
                      v549 = *((_QWORD *)v505 + 3);
                    }
                    *(_QWORD *)v548 = v545;
                    *(_OWORD *)(v548 + 8) = *(_OWORD *)&object[8];
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v548 + 24) = v638;
                    v638 = 0uLL;
                    *(_QWORD *)(v548 + 40) = v550;
                    *(_QWORD *)(v548 + 48) = v549;
                    *(_BYTE *)(v548 + 56) = 1;
                    v752 = 0;
                    *(_QWORD *)&v758 = v548;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v492 + 24) + 40))(*(_QWORD *)(v492 + 24), &v758);
                    v551 = v758;
                    *(_QWORD *)&v758 = 0;
                    if (v551)
                    {
                      v552 = *(std::__shared_weak_count **)(v551 + 32);
                      if (v552)
                      {
                        v553 = (unint64_t *)&v552->__shared_owners_;
                        do
                          v554 = __ldaxr(v553);
                        while (__stlxr(v554 - 1, v553));
                        if (!v554)
                        {
                          ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
                          std::__shared_weak_count::__release_weak(v552);
                        }
                      }
                      v555 = *(std::__shared_weak_count **)(v551 + 16);
                      if (v555)
                      {
                        v556 = (unint64_t *)&v555->__shared_owners_;
                        do
                          v557 = __ldaxr(v556);
                        while (__stlxr(v557 - 1, v556));
                        if (!v557)
                        {
                          ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
                          std::__shared_weak_count::__release_weak(v555);
                        }
                      }
                      MEMORY[0x227684CE8](v551, 0x10F0C40B62ED6C6);
                      v558 = v752;
                      v752 = 0;
                      if (v558)
                      {
                        v559 = (std::__shared_weak_count *)v558[4];
                        if (v559)
                        {
                          v560 = (unint64_t *)&v559->__shared_owners_;
                          do
                            v561 = __ldaxr(v560);
                          while (__stlxr(v561 - 1, v560));
                          if (!v561)
                          {
                            ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
                            std::__shared_weak_count::__release_weak(v559);
                          }
                        }
                        v562 = (std::__shared_weak_count *)v558[2];
                        if (v562)
                        {
                          v563 = (unint64_t *)&v562->__shared_owners_;
                          do
                            v564 = __ldaxr(v563);
                          while (__stlxr(v564 - 1, v563));
                          if (!v564)
                          {
                            ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
                            std::__shared_weak_count::__release_weak(v562);
                          }
                        }
                        MEMORY[0x227684CE8](v558, 0x10F0C40B62ED6C6);
                      }
                    }
                    v565 = (std::__shared_weak_count *)*((_QWORD *)&v638 + 1);
                    if (!*((_QWORD *)&v638 + 1))
                      goto LABEL_1662;
                    v566 = (unint64_t *)(*((_QWORD *)&v638 + 1) + 8);
                    do
                      v567 = __ldaxr(v566);
                    while (__stlxr(v567 - 1, v566));
                    if (!v567)
                    {
                      ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
                      std::__shared_weak_count::__release_weak(v565);
                      v568 = *(std::__shared_weak_count **)&object[16];
                      if (!*(_QWORD *)&object[16])
                        goto LABEL_1666;
                    }
                    else
                    {
LABEL_1662:
                      v568 = *(std::__shared_weak_count **)&object[16];
                      if (!*(_QWORD *)&object[16])
                        goto LABEL_1666;
                    }
                    v569 = (unint64_t *)&v568->__shared_owners_;
                    do
                      v570 = __ldaxr(v569);
                    while (__stlxr(v570 - 1, v569));
                    if (v570)
                    {
LABEL_1666:
                      if (!v490)
                        goto LABEL_1670;
                      goto LABEL_1667;
                    }
                    ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
                    std::__shared_weak_count::__release_weak(v568);
                    if (!v490)
                      goto LABEL_1670;
LABEL_1667:
                    v571 = (const char *)&__dst;
                    if (v747 < 0)
                      v571 = (const char *)__dst;
                    sub_22322C138((uint64_t)&__p, "%s", v571);
                    sub_223182C08((uint64_t)&__p);
LABEL_1670:
                    sub_223182C08((uint64_t)&__p);
                    v572 = v629;
                    if (!v629)
                      goto LABEL_1674;
                    v573 = (unint64_t *)&v629->__shared_owners_;
                    do
                      v574 = __ldaxr(v573);
                    while (__stlxr(v574 - 1, v573));
                    if (!v574)
                    {
                      ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
                      std::__shared_weak_count::__release_weak(v572);
                      if ((SHIBYTE(v747) & 0x80000000) == 0)
                        goto LABEL_1676;
                    }
                    else
                    {
LABEL_1674:
                      if ((SHIBYTE(v747) & 0x80000000) == 0)
                      {
LABEL_1676:
                        __src = v584;
                        *(void **)((char *)&__src + *((_QWORD *)v584 - 3)) = v582;
                        v596[0] = v581;
                        v596[1] = v580;
                        v489 = v585;
                        if (SHIBYTE(v606) < 0)
                          operator delete(v604);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x227684BE0](&v609);
                        goto LABEL_1679;
                      }
                    }
                    operator delete(__dst);
                    goto LABEL_1676;
                  }
                }
                memcpy(v524, __s, v523);
                goto LABEL_1609;
              }
            }
            memmove(v512, v510, v511);
            goto LABEL_1581;
          }
        }
        memmove(v498, v501, v497);
        goto LABEL_1561;
      }
    }
    v499 = v607;
    v500 = (const void **)&v601;
    if (v607 < v602)
    {
      v607 = v602;
      v499 = v602;
      v500 = (const void **)&v601;
    }
    goto LABEL_1553;
  }
LABEL_1692:
  if (v214)
    operator delete(v214);
}

void sub_22382E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54)
{
  uint64_t v54;
  void *v56;

  if (*(_BYTE *)(v54 - 184) && *(char *)(v54 - 185) < 0)
    operator delete(*(void **)(v54 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x9F7]) < 0)
    operator delete((void *)STACK[0x9E0]);
  sub_223195348((uint64_t)&a54);
  v56 = *(void **)a33;
  if (*(_QWORD *)a33)
  {
    *(_QWORD *)(a33 + 8) = v56;
    operator delete(v56);
  }
  if (a51)
  {
    operator delete(a51);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_22382FBD0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[16];
  if (v5 == a1 + 13)
  {
    v6 = 4;
    v5 = a1 + 13;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[10];
  if (v7 == a1 + 7)
  {
    v8 = 4;
    v7 = a1 + 7;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[4];
  if (v9 == a1 + 1)
  {
    v10 = 4;
    v9 = a1 + 1;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void sub_22382FCB0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  double v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *p_src;
  size_t v14;
  char v15;
  size_t v16;
  _BYTE *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  size_t v23;
  const char *v24;
  unsigned __int8 v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  _QWORD *v45;
  size_t v46;
  size_t v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  void *v61;
  _QWORD *v62;
  size_t v63;
  size_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  const void **v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  size_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  const char *v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  void *v88;
  _QWORD *v89;
  size_t v90;
  size_t v91;
  void *v92;
  void *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  char v130;
  _QWORD *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  void *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  std::string::size_type v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  std::string::size_type v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  std::string::size_type v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  void *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  const char *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  int v240;
  char v241;
  BOOL v242;
  uint64_t *v243;
  uint64_t *v244;
  int v245;
  unint64_t v246;
  unint64_t v247;
  const char *v249;
  size_t v250;
  char v251;
  size_t v252;
  _BYTE *v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v258;
  const char *v259;
  size_t v260;
  unsigned __int8 v261;
  uint64_t v262;
  const void **v263;
  const void *v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  const char *v269;
  size_t v270;
  unsigned __int8 v271;
  unsigned __int8 v272;
  const char *v273;
  size_t v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  NSObject *v279;
  uint64_t v280;
  uint64_t v281;
  size_t v282;
  void *v283;
  _QWORD *v284;
  size_t v285;
  size_t v286;
  void *v287;
  void *v288;
  unsigned __int8 v289;
  const char *v290;
  size_t v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  NSObject *v296;
  uint64_t v297;
  uint64_t v298;
  size_t v299;
  void *v300;
  _QWORD *v301;
  size_t v302;
  size_t v303;
  void *v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  char v309;
  _QWORD *v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  void *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  const char *v330;
  std::string::size_type v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  void *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  const char *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  char v359;
  _QWORD *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  const char *v380;
  std::string::size_type v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  void *v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  uint64_t *v404;
  uint64_t *v405;
  float32x4_t *v406;
  float32x4_t *v407;
  int8x8_t v408;
  float32x4_t *v409;
  char v410;
  __int8 v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  int8x16_t v419;
  float32x2_t v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  int v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  const char *v430;
  size_t v431;
  unsigned __int8 v432;
  float v433;
  __float2 v434;
  float32x4_t v435;
  float32x4_t v436;
  int8x16_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  int8x16_t v441;
  float64x2_t v442;
  float64x2_t v443;
  __int8 v444;
  int v445;
  unint64_t v446;
  unint64_t v447;
  std::string *v448;
  uint64_t v449;
  const char *v450;
  size_t v451;
  unsigned __int8 v452;
  int8x8_t v453;
  int v454;
  unint64_t v455;
  unint64_t v456;
  int v457;
  int v458;
  int8x8_t v459;
  BOOL v460;
  int v461;
  __int8 v462;
  BOOL v463;
  float32x4_t v464;
  int8x16_t v465;
  int8x16_t v466;
  int8x16_t v467;
  float32x4_t v468;
  unsigned __int32 v469;
  int8x16_t v470;
  unint64_t v471;
  _OWORD *v472;
  _OWORD *v473;
  _OWORD *v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  char *v479;
  char *v480;
  uint64_t v481;
  int8x16_t v482;
  float64x2_t v483;
  int8x16_t v484;
  float64x2_t v485;
  const char *v486;
  size_t v487;
  char v488;
  size_t v489;
  _BYTE *v490;
  unsigned __int8 v491;
  const char *v492;
  size_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  NSObject *v498;
  uint64_t v499;
  uint64_t v500;
  size_t v501;
  void *v502;
  _QWORD *v503;
  size_t v504;
  size_t v505;
  void *v506;
  void *v507;
  unsigned __int8 v508;
  const char *v509;
  size_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  NSObject *v515;
  uint64_t v516;
  uint64_t v517;
  size_t v518;
  void *v519;
  _QWORD *v520;
  size_t v521;
  size_t v522;
  _BYTE *v523;
  void *v524;
  uint64_t v525;
  const void **v526;
  const void *v527;
  uint64_t v528;
  uint64_t v529;
  const char *v530;
  uint64_t v531;
  size_t v532;
  const char *v533;
  unsigned __int8 v534;
  unsigned __int8 v535;
  const char *v536;
  size_t v537;
  _BYTE *v538;
  float32x4_t *v539;
  const char *v540;
  unint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  NSObject *v547;
  uint64_t v548;
  uint64_t v549;
  size_t v550;
  void *v551;
  _QWORD *v552;
  size_t v553;
  size_t v554;
  void *v555;
  int v556;
  void *v557;
  uint64_t v558;
  uint64_t v559;
  void *v560;
  char v561;
  _QWORD *v562;
  uint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  uint64_t v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  size_t v576;
  size_t v577;
  _BYTE *v578;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  char *v585;
  std::string::size_type v586;
  uint64_t v587;
  uint64_t v588;
  void *v589;
  char v590;
  _QWORD *v591;
  uint64_t v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  void *v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  unint64_t v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  const char *v611;
  std::string::size_type v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  void *v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  uint64_t v638;
  char *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  std::string::size_type v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  void *v651;
  std::__shared_weak_count *v652;
  unint64_t *v653;
  unint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  const char *v664;
  std::__shared_weak_count *v665;
  unint64_t *v666;
  unint64_t v667;
  unint64_t *v668;
  unint64_t v669;
  std::__shared_weak_count *v670;
  unint64_t *v671;
  unint64_t v672;
  unint64_t v673;
  std::__shared_weak_count *v674;
  unint64_t *v675;
  unint64_t v676;
  std::string::size_type v677;
  char *v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  const char *v683;
  uint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  std::string::size_type v691;
  std::__shared_weak_count *v692;
  unint64_t *v693;
  unint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  std::__shared_weak_count *v698;
  unint64_t *v699;
  unint64_t v700;
  std::__shared_weak_count *v701;
  unint64_t *v702;
  unint64_t v703;
  std::string *v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  _QWORD *v711;
  const char *v712;
  void *v713;
  void *v714;
  void *v715;
  _QWORD *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t *v720;
  void *__dst;
  float32x4_t *__dsta;
  uint64_t v724;
  unsigned __int8 *v725;
  uint64_t *v726;
  void *v729[2];
  int v730;
  float32x4_t v731;
  int8x16_t v732;
  size_t v733;
  const char *v734;
  float32x4_t v735;
  float32x4_t v736;
  uint64_t v737;
  const char *v738;
  const char *v739;
  char *v740[2];
  char *v741[2];
  float32x4_t v743;
  int8x16_t v744;
  uint64_t *v745;
  float32x4_t v746;
  int32x4_t v747;
  float32x4_t v748;
  float v749;
  int8x16_t v750;
  const char *v751;
  uint64_t v752;
  uint64_t *v753;
  const char *v754;
  const char *v755;
  char *v756[2];
  const char *v757;
  char *v758[2];
  float64x2_t v759;
  const char *v760;
  const char *v761;
  uint64_t **v763;
  double v764;
  char v765;
  uint64_t v766;
  std::string v767;
  std::string v768;
  __int128 v769;
  char *v770;
  const char *v771;
  uint64_t v772;
  std::__shared_weak_count *v773;
  char v774;
  char v775;
  char v776;
  void *__src;
  __int128 v778;
  int32x4_t object[4];
  char v780;
  unint64_t v781;
  void *v782;
  char v783;
  unint64_t v784;
  int v785;
  _BYTE v786[160];
  _BYTE oslog[40];
  void *v788;
  const char *v789;
  unint64_t v790;
  std::__shared_weak_count *v791;
  _BYTE v792[24];
  _BYTE v793[24];
  std::string __s;
  char *v795;
  std::__shared_weak_count *v796;
  uint64_t v797;

  v5 = a1;
  v6 = a5;
  v797 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 16) = a5 + 24;
  v763 = (uint64_t **)(a5 + 16);
  *(_OWORD *)(a5 + 40) = 0u;
  v716 = (_QWORD *)(a5 + 40);
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 68) = 0u;
  v7 = (uint64_t *)a2[16];
  v753 = (uint64_t *)a2[17];
  if (v7 != v753)
  {
    v717 = *MEMORY[0x24BEDB7F0];
    v714 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
    v715 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v713 = (void *)(MEMORY[0x24BEDB848] + 16);
    while (1)
    {
      while (1)
      {
        object[0] = *(int32x4_t *)v7;
        if (!sub_223340F28(v5, (uint64_t)object))
          break;
        v8 = sub_223822434(v5, *v7, v7[1]);
        if (*((_BYTE *)v8 + 112) == 1)
        {
          sub_223821DD4(&v767);
          if (**(int **)(v767.__r_.__value_.__r.__words[0] + 56) <= 3)
          {
            v10 = *(unsigned __int8 *)(v767.__r_.__value_.__r.__words[0] + 72);
            v11 = sub_22322F254((uint64_t)v767.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
            v12 = v11;
            if (v10 || v11)
            {
              sub_223195210((uint64_t)object);
              LOBYTE(v764) = *((_BYTE *)v8 + 112);
              *(double *)v792 = (double)*a4 / 1000000000.0;
              LODWORD(v769) = 0;
              sub_223323730(&v768, "[ProcessPoseUpdate] External anchor: ");
              sub_22319B83C((uint64_t)&v766, (uint64_t)&v768, (unsigned __int8 *)v7);
              *(_QWORD *)oslog = &v768;
              *(_QWORD *)&oslog[8] = " state: ";
              *(_QWORD *)&oslog[16] = &v768;
              *(_QWORD *)&oslog[24] = " state: ";
              *(_QWORD *)&oslog[32] = " state: ";
              if ((_DWORD)v769 == -1)
                sub_22316DD70();
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
              ((void (*)(std::string *, std::string *))off_24EC5B1A8[v769])(&__s, &v768);
              sub_223847110(&__s, (char *)&v764);
              *(_QWORD *)oslog = &v768;
              *(_QWORD *)&oslog[8] = &__s;
              *(_QWORD *)&oslog[16] = &v768;
              *(_QWORD *)&oslog[24] = &__s;
              *(_QWORD *)&oslog[32] = &__s;
              if ((_DWORD)v769 == -1)
                sub_22316DD70();
              *(_QWORD *)v793 = oslog;
              ((void (*)(_BYTE *, std::string *))off_24EC5B0E8[v769])(v793, &v768);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              *(_QWORD *)oslog = &v768;
              *(_QWORD *)&oslog[8] = " t: ";
              *(_QWORD *)&oslog[16] = &v768;
              *(_QWORD *)&oslog[24] = " t: ";
              *(_QWORD *)&oslog[32] = " t: ";
              if ((_DWORD)v769 == -1)
                sub_22316DD70();
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
              ((void (*)(std::string *, std::string *))off_24EC5B1C0[v769])(&__s, &v768);
              sub_223701C90((uint64_t *)v792, &__s);
              *(_QWORD *)oslog = &v768;
              *(_QWORD *)&oslog[8] = &__s;
              *(_QWORD *)&oslog[16] = &v768;
              *(_QWORD *)&oslog[24] = &__s;
              *(_QWORD *)&oslog[32] = &__s;
              if ((_DWORD)v769 == -1)
                sub_22316DD70();
              *(_QWORD *)v793 = oslog;
              ((void (*)(_BYTE *, std::string *))off_24EC5B0E8[v769])(v793, &v768);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              if ((_DWORD)v769 == -1)
                sub_22316DD70();
              *(_QWORD *)oslog = &__s;
              ((void (*)(void **__return_ptr, _BYTE *, std::string *))off_24EC5B118[v769])(&__src, oslog, &v768);
              if ((_DWORD)v769 != -1)
                ((void (*)(_BYTE *, std::string *))off_24EC5B100[v769])(oslog, &v768);
              if (v778 >= 0)
                p_src = (const char *)&__src;
              else
                p_src = (const char *)__src;
              v14 = strlen(p_src);
              sub_2231813E8((int32x4_t *)object[1].i64, (uint64_t)p_src, v14);
              if ((SHIBYTE(v778) & 0x80000000) == 0)
              {
                v15 = v785;
                v730 = v10;
                if ((v785 & 0x10) == 0)
                  goto LABEL_25;
LABEL_120:
                v67 = v784;
                v68 = (const void **)&v780;
                if (v784 < v781)
                {
                  v784 = v781;
                  v67 = v781;
                  v68 = (const void **)&v780;
                }
LABEL_123:
                v69 = *v68;
                v16 = v67 - (_QWORD)*v68;
                if (v16 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v16 >= 0x17)
                {
                  v70 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v16 | 7) != 0x17)
                    v70 = v16 | 7;
                  v71 = v70 + 1;
                  v17 = operator new(v70 + 1);
                  *(_QWORD *)&v793[8] = v16;
                  *(_QWORD *)&v793[16] = v71 | 0x8000000000000000;
                  *(_QWORD *)v793 = v17;
                }
                else
                {
                  v793[23] = v67 - *(_BYTE *)v68;
                  v17 = v793;
                  if (!v16)
                    goto LABEL_131;
                }
                memmove(v17, v69, v16);
                goto LABEL_131;
              }
              operator delete(__src);
              v15 = v785;
              v730 = v10;
              if ((v785 & 0x10) != 0)
                goto LABEL_120;
LABEL_25:
              if ((v15 & 8) != 0)
              {
                v67 = object[3].i64[1];
                v68 = (const void **)&object[2].i64[1];
                goto LABEL_123;
              }
              v16 = 0;
              v793[23] = 0;
              v17 = v793;
LABEL_131:
              v17[v16] = 0;
              v768.__r_.__value_.__r.__words[0] = (std::string::size_type)&v767;
              v768.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v768.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
              LODWORD(v769) = 3;
              *((_QWORD *)&v769 + 1) = "unknown file";
              LODWORD(v770) = 492;
              v771 = "unknown function";
              v772 = 0;
              v773 = 0;
              v72 = v793;
              if (v793[23] < 0)
                v72 = *(const char **)v793;
              v739 = v72;
              v73 = *(_QWORD *)v768.__r_.__value_.__l.__data_;
              v74 = (const char *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 16);
              v712 = v74;
              if (*(char *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 39) < 0)
              {
                v74 = *(const char **)(v73 + 16);
                v75 = *(_QWORD *)(v73 + 24);
                v77 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v77 & 1) == 0)
                {
LABEL_413:
                  if (__cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)&__s);
                    sub_223199C58("com.apple.cv3d", (unint64_t)&__s, byte_255788F40);
                    if ((_BYTE)v795 && SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__s.__r_.__value_.__l.__data_);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                    v5 = a1;
                  }
                }
              }
              else
              {
                v75 = *(unsigned __int8 *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 39);
                v76 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v76 & 1) == 0)
                  goto LABEL_413;
              }
              if (byte_255788F40[23] >= 0)
                v78 = byte_255788F40;
              else
                v78 = *(const char **)byte_255788F40;
              if (byte_255788F40[23] >= 0)
                v79 = byte_255788F40[23];
              else
                v79 = *(_QWORD *)&byte_255788F40[8];
              *(_QWORD *)oslog = os_log_create(v78, v74);
              if (v79 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v79 >= 0x17)
              {
                v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v79 | 7) != 0x17)
                  v81 = v79 | 7;
                v82 = v81 + 1;
                v80 = operator new(v81 + 1);
                *(_QWORD *)&oslog[24] = v82 | 0x8000000000000000;
                *(_QWORD *)&oslog[8] = v80;
                *(_QWORD *)&oslog[16] = v79;
                v5 = a1;
              }
              else
              {
                oslog[31] = v79;
                v80 = &oslog[8];
                if (!v79)
                {
LABEL_151:
                  v80[v79] = 0;
                  oslog[32] = 1;
                  if (v75 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v75 >= 0x17)
                  {
                    v85 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v75 | 7) != 0x17)
                      v85 = v75 | 7;
                    v86 = v85 + 1;
                    v83 = operator new(v85 + 1);
                    v790 = v86 | 0x8000000000000000;
                    v788 = v83;
                    v789 = (const char *)v75;
                  }
                  else
                  {
                    HIBYTE(v790) = v75;
                    v83 = &v788;
                    if (!v75)
                    {
                      LOBYTE(v788) = 0;
                      LOBYTE(v791) = 1;
                      v84 = *(NSObject **)oslog;
                      if ((SHIBYTE(v790) & 0x80000000) == 0)
                        goto LABEL_155;
LABEL_161:
                      operator delete(v788);
                      v6 = a5;
                      if (oslog[32])
                        goto LABEL_162;
                      goto LABEL_164;
                    }
                  }
                  memmove(v83, v74, v75);
                  *((_BYTE *)v83 + v75) = 0;
                  LOBYTE(v791) = 1;
                  v84 = *(NSObject **)oslog;
                  if (SHIBYTE(v790) < 0)
                    goto LABEL_161;
LABEL_155:
                  v6 = a5;
                  if (oslog[32])
                  {
LABEL_162:
                    if ((oslog[31] & 0x80000000) != 0)
                      operator delete(*(void **)&oslog[8]);
                  }
LABEL_164:
                  if (*(_QWORD *)oslog)
                    os_release(*(void **)oslog);
                  if (v12 && *(_QWORD *)(v12 + 24))
                  {
                    v87 = _os_log_pack_size();
                    v88 = operator new(v87, (std::align_val_t)8uLL);
                    v89 = (_QWORD *)operator new();
                    *v89 = &off_24EC1F7F0;
                    v89[1] = 0;
                    v89[2] = 0;
                    v89[3] = v88;
                    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
                    __s.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
                    __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v89;
                    v795 = 0;
                    v796 = 0;
                    v90 = strlen(v739);
                    if (v90 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v91 = v90;
                    if (v90 >= 0x17)
                    {
                      v127 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17)
                        v127 = v90 | 7;
                      v128 = v127 + 1;
                      v92 = operator new(v127 + 1);
                      *((_QWORD *)&v778 + 1) = v128 | 0x8000000000000000;
                      __src = v92;
                      *(_QWORD *)&v778 = v91;
                    }
                    else
                    {
                      HIBYTE(v778) = v90;
                      v92 = &__src;
                      if (!v90)
                        goto LABEL_217;
                    }
                    memcpy(v92, v739, v91);
LABEL_217:
                    *((_BYTE *)v92 + v91) = 0;
                    v129 = __src;
                    *(_QWORD *)v792 = v778;
                    *(_QWORD *)&v792[7] = *(_QWORD *)((char *)&v778 + 7);
                    v130 = HIBYTE(v778);
                    v131 = operator new(0x38uLL);
                    v131[1] = 0;
                    v131[2] = 0;
                    v131[3] = off_24EC1FA48;
                    *v131 = &off_24EC1F9F8;
                    v132 = *(_QWORD *)v792;
                    v131[4] = v129;
                    v131[5] = v132;
                    *(_QWORD *)((char *)v131 + 47) = *(_QWORD *)&v792[7];
                    *((_BYTE *)v131 + 55) = v130;
                    *(_QWORD *)v792 = 0;
                    *(_QWORD *)&v792[7] = 0;
                    v133 = v796;
                    v795 = (char *)(v131 + 3);
                    v796 = (std::__shared_weak_count *)v131;
                    v6 = a5;
                    if (v133)
                    {
                      p_shared_owners = (unint64_t *)&v133->__shared_owners_;
                      do
                        v135 = __ldaxr(p_shared_owners);
                      while (__stlxr(v135 - 1, p_shared_owners));
                      if (!v135)
                      {
                        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                        std::__shared_weak_count::__release_weak(v133);
                      }
                    }
                    *(std::string *)oslog = __s;
                    v136 = v795;
                    if (__s.__r_.__value_.__r.__words[2])
                    {
                      v137 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                      do
                        v138 = __ldxr(v137);
                      while (__stxr(v138 + 1, v137));
                    }
                    v139 = v796;
                    *(_QWORD *)&oslog[24] = v136;
                    *(_QWORD *)&oslog[32] = v796;
                    if (v796)
                    {
                      v140 = (unint64_t *)&v796->__shared_owners_;
                      do
                        v141 = __ldxr(v140);
                      while (__stxr(v141 + 1, v140));
                      v788 = v136;
                      do
                        v142 = __ldaxr(v140);
                      while (__stlxr(v142 - 1, v140));
                      if (!v142)
                      {
                        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                        std::__shared_weak_count::__release_weak(v139);
                      }
                    }
                    else
                    {
                      v788 = v136;
                    }
                    v207 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                    if (__s.__r_.__value_.__r.__words[2])
                    {
                      v208 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                      do
                        v209 = __ldaxr(v208);
                      while (__stlxr(v209 - 1, v208));
                      if (!v209)
                      {
                        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                        std::__shared_weak_count::__release_weak(v207);
                      }
                    }
                    v210 = *(_QWORD *)oslog;
                    if (*((char *)v788 + 31) >= 0)
                      v211 = (char *)v788 + 8;
                    else
                      v211 = (char *)*((_QWORD *)v788 + 1);
                    v212 = _os_log_pack_fill();
                    *(_DWORD *)v212 = 136315138;
                    *(_QWORD *)(v212 + 4) = v211;
                    v213 = operator new();
                    v214 = *(unsigned __int8 *)(v73 + 39);
                    v215 = v712;
                    if ((v214 & 0x80u) != 0)
                    {
                      v215 = *(const char **)(v73 + 16);
                      v214 = *(_QWORD *)(v73 + 24);
                    }
                    *(_QWORD *)v213 = v210;
                    *(_OWORD *)(v213 + 8) = *(_OWORD *)&oslog[8];
                    *(_QWORD *)&oslog[8] = 0;
                    *(_QWORD *)&oslog[16] = 0;
                    *(_OWORD *)(v213 + 24) = *(_OWORD *)&oslog[24];
                    *(_QWORD *)&oslog[24] = 0;
                    *(_QWORD *)&oslog[32] = 0;
                    *(_QWORD *)(v213 + 40) = v215;
                    *(_QWORD *)(v213 + 48) = v214;
                    *(_BYTE *)(v213 + 56) = 1;
                    __src = 0;
                    __s.__r_.__value_.__r.__words[0] = v213;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &__s);
                    v216 = __s.__r_.__value_.__r.__words[0];
                    __s.__r_.__value_.__r.__words[0] = 0;
                    v94 = v730;
                    if (v216)
                    {
                      v217 = *(std::__shared_weak_count **)(v216 + 32);
                      if (v217)
                      {
                        v218 = (unint64_t *)&v217->__shared_owners_;
                        do
                          v219 = __ldaxr(v218);
                        while (__stlxr(v219 - 1, v218));
                        if (!v219)
                        {
                          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                          std::__shared_weak_count::__release_weak(v217);
                        }
                      }
                      v220 = *(std::__shared_weak_count **)(v216 + 16);
                      if (v220)
                      {
                        v221 = (unint64_t *)&v220->__shared_owners_;
                        do
                          v222 = __ldaxr(v221);
                        while (__stlxr(v222 - 1, v221));
                        if (!v222)
                        {
                          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                          std::__shared_weak_count::__release_weak(v220);
                        }
                      }
                      MEMORY[0x227684CE8](v216, 0x10F0C40B62ED6C6);
                      v223 = __src;
                      __src = 0;
                      if (v223)
                      {
                        v224 = (std::__shared_weak_count *)*((_QWORD *)v223 + 4);
                        if (v224)
                        {
                          v225 = (unint64_t *)&v224->__shared_owners_;
                          do
                            v226 = __ldaxr(v225);
                          while (__stlxr(v226 - 1, v225));
                          if (!v226)
                          {
                            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                            std::__shared_weak_count::__release_weak(v224);
                          }
                        }
                        v227 = (std::__shared_weak_count *)*((_QWORD *)v223 + 2);
                        if (v227)
                        {
                          v228 = (unint64_t *)&v227->__shared_owners_;
                          do
                            v229 = __ldaxr(v228);
                          while (__stlxr(v229 - 1, v228));
                          if (!v229)
                          {
                            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                            std::__shared_weak_count::__release_weak(v227);
                          }
                        }
                        MEMORY[0x227684CE8](v223, 0x10F0C40B62ED6C6);
                      }
                    }
                    v230 = *(std::__shared_weak_count **)&oslog[32];
                    if (*(_QWORD *)&oslog[32])
                    {
                      v231 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                      do
                        v232 = __ldaxr(v231);
                      while (__stlxr(v232 - 1, v231));
                      if (!v232)
                      {
                        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                        std::__shared_weak_count::__release_weak(v230);
                        v233 = *(std::__shared_weak_count **)&oslog[16];
                        if (*(_QWORD *)&oslog[16])
                          goto LABEL_371;
                        goto LABEL_374;
                      }
                    }
                    v233 = *(std::__shared_weak_count **)&oslog[16];
                    if (!*(_QWORD *)&oslog[16])
                      goto LABEL_374;
LABEL_371:
                    v234 = (unint64_t *)&v233->__shared_owners_;
                    do
                      v235 = __ldaxr(v234);
                    while (__stlxr(v235 - 1, v234));
                    if (v235)
                    {
LABEL_374:
                      if (v94)
                        goto LABEL_375;
LABEL_378:
                      sub_223182C08((uint64_t)&v768);
                      v237 = v773;
                      if (!v773)
                        goto LABEL_382;
                      v238 = (unint64_t *)&v773->__shared_owners_;
                      do
                        v239 = __ldaxr(v238);
                      while (__stlxr(v239 - 1, v238));
                      if (!v239)
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                        if ((v793[23] & 0x80000000) != 0)
LABEL_383:
                          operator delete(*(void **)v793);
                      }
                      else
                      {
LABEL_382:
                        if ((v793[23] & 0x80000000) != 0)
                          goto LABEL_383;
                      }
                      object[0].i64[0] = v717;
                      *(uint64_t *)((char *)object[0].i64 + *(_QWORD *)(v717 - 24)) = (uint64_t)v715;
                      object[1].i64[0] = (uint64_t)v714;
                      object[1].i64[1] = (uint64_t)v713;
                      if (v783 < 0)
                        operator delete(v782);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      v9 = MEMORY[0x227684BE0](v786);
                      goto LABEL_387;
                    }
                    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                    std::__shared_weak_count::__release_weak(v233);
                    if (!v730)
                      goto LABEL_378;
                  }
                  else
                  {
                    os_log_type_enabled(v84, OS_LOG_TYPE_INFO);
                    *(_DWORD *)oslog = 136315138;
                    *(_QWORD *)&oslog[4] = v739;
                    v93 = (void *)_os_log_send_and_compose_impl();
                    v94 = v730;
                    if (!v93)
                      goto LABEL_374;
                    free(v93);
                    if (!v730)
                      goto LABEL_378;
                  }
LABEL_375:
                  v236 = v793;
                  if (v793[23] < 0)
                    v236 = *(const char **)v793;
                  sub_22322C138((uint64_t)&v768, "%s", v236);
                  sub_223182C08((uint64_t)&v768);
                  goto LABEL_378;
                }
              }
              memmove(v80, v78, v79);
              goto LABEL_151;
            }
          }
LABEL_387:
          v240 = sub_2231D77B8(*((unsigned __int8 *)v8 + 113), 16, *(int8x8_t *)&v9);
          v241 = v240;
          v242 = sub_2231D793C(*((unsigned __int8 *)v8 + 114), v240, 0);
          *((_BYTE *)v8 + 112) = 3;
          *((_BYTE *)v8 + 113) = v241;
          *((_BYTE *)v8 + 114) = v242;
          v8[11] = *a4;
          sub_2231A9984(v763, (unsigned __int8 *)v8, v8);
          ++*(_DWORD *)v6;
          v7 += 2;
          if (v7 == v753)
            goto LABEL_418;
        }
        else
        {
          sub_223821DD4(v792);
          if (**(int **)(*(_QWORD *)v792 + 56) <= 2)
          {
            v26 = *(unsigned __int8 *)(*(_QWORD *)v792 + 72);
            v27 = sub_22322F254(*(uint64_t *)v792, "OSLogSurrogateAppender", 1, 0);
            v28 = v27;
            if (v26 || v27)
            {
              *(_QWORD *)oslog = v792;
              *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
              *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
              *(_DWORD *)&oslog[24] = 2;
              *(_QWORD *)&oslog[32] = "unknown file";
              LODWORD(v788) = 485;
              v789 = "unknown function";
              v790 = 0;
              v791 = 0;
              sub_2245664AC((unsigned __int8 *)v7, &__s);
              v29 = **(_QWORD **)oslog;
              v30 = (const char *)(**(_QWORD **)oslog + 16);
              v738 = v30;
              if (*(char *)(**(_QWORD **)oslog + 39) < 0)
              {
                v30 = *(const char **)(v29 + 16);
                v31 = *(_QWORD *)(v29 + 24);
                v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v50 & 1) == 0)
                {
LABEL_408:
                  if (__cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)&v768);
                    sub_223199C58("com.apple.cv3d", (unint64_t)&v768, byte_255788F40);
                    if ((_BYTE)v769 && SHIBYTE(v768.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v768.__r_.__value_.__l.__data_);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                  }
                }
              }
              else
              {
                v31 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
                v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v32 & 1) == 0)
                  goto LABEL_408;
              }
              if (byte_255788F40[23] >= 0)
                v51 = byte_255788F40;
              else
                v51 = *(const char **)byte_255788F40;
              if (byte_255788F40[23] >= 0)
                v52 = byte_255788F40[23];
              else
                v52 = *(_QWORD *)&byte_255788F40[8];
              object[0].i64[0] = (uint64_t)os_log_create(v51, v30);
              if (v52 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v52 >= 0x17)
              {
                v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v52 | 7) != 0x17)
                  v54 = v52 | 7;
                v55 = v54 + 1;
                v53 = (uint64_t *)operator new(v54 + 1);
                object[1].i64[1] = v55 | 0x8000000000000000;
                object[0].i64[1] = (uint64_t)v53;
                object[1].i64[0] = v52;
              }
              else
              {
                object[1].i8[15] = v52;
                v53 = &object[0].i64[1];
                if (!v52)
                {
LABEL_95:
                  *((_BYTE *)v53 + v52) = 0;
                  object[2].i8[0] = 1;
                  if (v31 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v6 = a5;
                  if (v31 >= 0x17)
                  {
                    v58 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v31 | 7) != 0x17)
                      v58 = v31 | 7;
                    v59 = v58 + 1;
                    v56 = (uint64_t *)operator new(v58 + 1);
                    object[3].i64[1] = v59 | 0x8000000000000000;
                    object[2].i64[1] = (uint64_t)v56;
                    object[3].i64[0] = v31;
                  }
                  else
                  {
                    object[3].i8[15] = v31;
                    v56 = &object[2].i64[1];
                    if (!v31)
                    {
                      object[2].i8[8] = 0;
                      v780 = 1;
                      v57 = object[0].i64[0];
                      if ((object[3].i8[15] & 0x80000000) == 0)
                        goto LABEL_99;
LABEL_105:
                      operator delete((void *)object[2].i64[1]);
                      if (object[2].i8[0])
                        goto LABEL_106;
                      goto LABEL_108;
                    }
                  }
                  memmove(v56, v30, v31);
                  *((_BYTE *)v56 + v31) = 0;
                  v780 = 1;
                  v57 = object[0].i64[0];
                  if (object[3].i8[15] < 0)
                    goto LABEL_105;
LABEL_99:
                  if (object[2].i8[0])
                  {
LABEL_106:
                    if (object[1].i8[15] < 0)
                      operator delete((void *)object[0].i64[1]);
                  }
LABEL_108:
                  if (object[0].i64[0])
                    os_release((void *)object[0].i64[0]);
                  if (v28 && *(_QWORD *)(v28 + 24))
                  {
                    v60 = _os_log_pack_size();
                    v61 = operator new(v60, (std::align_val_t)8uLL);
                    v62 = (_QWORD *)operator new();
                    *v62 = &off_24EC1F7F0;
                    v62[1] = 0;
                    v62[2] = 0;
                    v62[3] = v61;
                    v768.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
                    v768.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
                    v768.__r_.__value_.__r.__words[2] = (std::string::size_type)v62;
                    v769 = 0uLL;
                    v63 = strlen((const char *)&__s);
                    if (v63 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v64 = v63;
                    if (v63 >= 0x17)
                    {
                      v111 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v63 | 7) != 0x17)
                        v111 = v63 | 7;
                      v112 = v111 + 1;
                      v65 = operator new(v111 + 1);
                      *((_QWORD *)&v778 + 1) = v112 | 0x8000000000000000;
                      __src = v65;
                      *(_QWORD *)&v778 = v64;
                    }
                    else
                    {
                      HIBYTE(v778) = v63;
                      v65 = &__src;
                      if (!v63)
                        goto LABEL_198;
                    }
                    memcpy(v65, &__s, v64);
LABEL_198:
                    *((_BYTE *)v65 + v64) = 0;
                    v113 = __src;
                    *(_QWORD *)v793 = v778;
                    *(_QWORD *)&v793[7] = *(_QWORD *)((char *)&v778 + 7);
                    v114 = HIBYTE(v778);
                    v115 = operator new(0x38uLL);
                    v115[1] = 0;
                    v115[2] = 0;
                    v115[3] = off_24EC1FA48;
                    *v115 = &off_24EC1F9F8;
                    v116 = *(_QWORD *)v793;
                    v115[4] = v113;
                    v115[5] = v116;
                    *(_QWORD *)((char *)v115 + 47) = *(_QWORD *)&v793[7];
                    *((_BYTE *)v115 + 55) = v114;
                    *(_QWORD *)v793 = 0;
                    *(_QWORD *)&v793[7] = 0;
                    v117 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
                    *(_QWORD *)&v769 = v115 + 3;
                    *((_QWORD *)&v769 + 1) = v115;
                    if (v117)
                    {
                      v118 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v119 = __ldaxr(v118);
                      while (__stlxr(v119 - 1, v118));
                      if (!v119)
                      {
                        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                        std::__shared_weak_count::__release_weak(v117);
                      }
                    }
                    object[0] = *(int32x4_t *)&v768.__r_.__value_.__l.__data_;
                    v120 = v769;
                    object[1].i64[0] = v768.__r_.__value_.__r.__words[2];
                    if (v768.__r_.__value_.__r.__words[2])
                    {
                      v121 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
                      do
                        v122 = __ldxr(v121);
                      while (__stxr(v122 + 1, v121));
                    }
                    v123 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
                    object[1].i64[1] = v120;
                    object[2].i64[0] = *((_QWORD *)&v769 + 1);
                    if (*((_QWORD *)&v769 + 1))
                    {
                      v124 = (unint64_t *)(*((_QWORD *)&v769 + 1) + 8);
                      do
                        v125 = __ldxr(v124);
                      while (__stxr(v125 + 1, v124));
                      object[2].i64[1] = v120;
                      do
                        v126 = __ldaxr(v124);
                      while (__stlxr(v126 - 1, v124));
                      if (!v126)
                      {
                        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                        std::__shared_weak_count::__release_weak(v123);
                      }
                    }
                    else
                    {
                      object[2].i64[1] = v120;
                    }
                    v175 = (std::__shared_weak_count *)v768.__r_.__value_.__r.__words[2];
                    if (v768.__r_.__value_.__r.__words[2])
                    {
                      v176 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
                      do
                        v177 = __ldaxr(v176);
                      while (__stlxr(v177 - 1, v176));
                      if (!v177)
                      {
                        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                        std::__shared_weak_count::__release_weak(v175);
                      }
                    }
                    v178 = object[0].i64[0];
                    if (*(char *)(object[2].i64[1] + 31) >= 0)
                      v179 = object[2].i64[1] + 8;
                    else
                      v179 = *(_QWORD *)(object[2].i64[1] + 8);
                    v180 = _os_log_pack_fill();
                    *(_DWORD *)v180 = 136315138;
                    *(_QWORD *)(v180 + 4) = v179;
                    v181 = operator new();
                    v182 = *(unsigned __int8 *)(v29 + 39);
                    v183 = v738;
                    if ((v182 & 0x80u) != 0)
                    {
                      v183 = *(const char **)(v29 + 16);
                      v182 = *(_QWORD *)(v29 + 24);
                    }
                    *(_QWORD *)v181 = v178;
                    *(int32x4_t *)(v181 + 8) = *(int32x4_t *)((char *)object + 8);
                    object[0].i64[1] = 0;
                    object[1].i64[0] = 0;
                    *(int32x4_t *)(v181 + 24) = *(int32x4_t *)((char *)&object[1] + 8);
                    object[1].i64[1] = 0;
                    object[2].i64[0] = 0;
                    *(_QWORD *)(v181 + 40) = v183;
                    *(_QWORD *)(v181 + 48) = v182;
                    *(_BYTE *)(v181 + 56) = 2;
                    __src = 0;
                    v768.__r_.__value_.__r.__words[0] = v181;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v768);
                    v184 = v768.__r_.__value_.__r.__words[0];
                    v768.__r_.__value_.__r.__words[0] = 0;
                    if (v184)
                    {
                      v185 = *(std::__shared_weak_count **)(v184 + 32);
                      if (v185)
                      {
                        v186 = (unint64_t *)&v185->__shared_owners_;
                        do
                          v187 = __ldaxr(v186);
                        while (__stlxr(v187 - 1, v186));
                        if (!v187)
                        {
                          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                          std::__shared_weak_count::__release_weak(v185);
                        }
                      }
                      v188 = *(std::__shared_weak_count **)(v184 + 16);
                      if (v188)
                      {
                        v189 = (unint64_t *)&v188->__shared_owners_;
                        do
                          v190 = __ldaxr(v189);
                        while (__stlxr(v190 - 1, v189));
                        if (!v190)
                        {
                          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                          std::__shared_weak_count::__release_weak(v188);
                        }
                      }
                      MEMORY[0x227684CE8](v184, 0x10F0C40B62ED6C6);
                      v191 = __src;
                      __src = 0;
                      if (v191)
                      {
                        v192 = (std::__shared_weak_count *)*((_QWORD *)v191 + 4);
                        if (v192)
                        {
                          v193 = (unint64_t *)&v192->__shared_owners_;
                          do
                            v194 = __ldaxr(v193);
                          while (__stlxr(v194 - 1, v193));
                          if (!v194)
                          {
                            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                            std::__shared_weak_count::__release_weak(v192);
                          }
                        }
                        v195 = (std::__shared_weak_count *)*((_QWORD *)v191 + 2);
                        if (v195)
                        {
                          v196 = (unint64_t *)&v195->__shared_owners_;
                          do
                            v197 = __ldaxr(v196);
                          while (__stlxr(v197 - 1, v196));
                          if (!v197)
                          {
                            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                            std::__shared_weak_count::__release_weak(v195);
                          }
                        }
                        MEMORY[0x227684CE8](v191, 0x10F0C40B62ED6C6);
                      }
                    }
                    v198 = (std::__shared_weak_count *)object[2].i64[0];
                    if (object[2].i64[0])
                    {
                      v199 = (unint64_t *)(object[2].i64[0] + 8);
                      do
                        v200 = __ldaxr(v199);
                      while (__stlxr(v200 - 1, v199));
                      if (!v200)
                      {
                        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                        std::__shared_weak_count::__release_weak(v198);
                        v201 = (std::__shared_weak_count *)object[1].i64[0];
                        if (object[1].i64[0])
                          goto LABEL_320;
                        goto LABEL_323;
                      }
                    }
                    v201 = (std::__shared_weak_count *)object[1].i64[0];
                    if (!object[1].i64[0])
                      goto LABEL_323;
LABEL_320:
                    v202 = (unint64_t *)&v201->__shared_owners_;
                    do
                      v203 = __ldaxr(v202);
                    while (__stlxr(v203 - 1, v202));
                    if (v203)
                    {
LABEL_323:
                      if (v26)
                        goto LABEL_324;
LABEL_325:
                      sub_223182C08((uint64_t)oslog);
                      v204 = v791;
                      if (v791)
                      {
                        v205 = (unint64_t *)&v791->__shared_owners_;
                        do
                          v206 = __ldaxr(v205);
                        while (__stlxr(v206 - 1, v205));
                        if (!v206)
                        {
                          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                          std::__shared_weak_count::__release_weak(v204);
                        }
                      }
                      goto LABEL_330;
                    }
                    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                    std::__shared_weak_count::__release_weak(v201);
                    if (!v26)
                      goto LABEL_325;
                  }
                  else
                  {
                    os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG);
                    object[0].i32[0] = 136315138;
                    *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)&__s;
                    v66 = (void *)_os_log_send_and_compose_impl();
                    if (!v66)
                      goto LABEL_323;
                    free(v66);
                    if (!v26)
                      goto LABEL_325;
                  }
LABEL_324:
                  sub_2245664AC((unsigned __int8 *)v7, object);
                  sub_22322C138((uint64_t)oslog, "Invalid AE(%s)", object[0].i8);
                  sub_223182C08((uint64_t)oslog);
                  goto LABEL_325;
                }
              }
              memmove(v53, v51, v52);
              goto LABEL_95;
            }
          }
LABEL_330:
          ++*(_DWORD *)(v6 + 68);
          v5 = a1;
          v7 += 2;
          if (v7 == v753)
            goto LABEL_418;
        }
      }
      sub_223821DD4(v792);
      if (**(int **)(*(_QWORD *)v792 + 56) <= 2)
      {
        v18 = *(unsigned __int8 *)(*(_QWORD *)v792 + 72);
        v19 = sub_22322F254(*(uint64_t *)v792, "OSLogSurrogateAppender", 1, 0);
        v20 = v19;
        if (v18 || v19 != 0)
          break;
      }
LABEL_3:
      ++*(_DWORD *)(v6 + 64);
      v5 = a1;
      v7 += 2;
      if (v7 == v753)
        goto LABEL_418;
    }
    *(_QWORD *)oslog = v792;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 2;
    *(_QWORD *)&oslog[32] = "unknown file";
    LODWORD(v788) = 477;
    v789 = "unknown function";
    v790 = 0;
    v791 = 0;
    sub_2245664AC((unsigned __int8 *)v7, &__s);
    v22 = **(_QWORD **)oslog;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v24 = *(const char **)(v22 + 16);
      v23 = *(_QWORD *)(v22 + 24);
      v737 = **(_QWORD **)oslog + 16;
      v33 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v33 & 1) != 0)
        goto LABEL_42;
    }
    else
    {
      v23 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v24 = (const char *)(**(_QWORD **)oslog + 16);
      v737 = (uint64_t)v24;
      v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v25 & 1) != 0)
        goto LABEL_42;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v768);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v768, byte_255788F40);
      if ((_BYTE)v769 && SHIBYTE(v768.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v768.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_42:
    if (byte_255788F40[23] >= 0)
      v34 = byte_255788F40;
    else
      v34 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v35 = byte_255788F40[23];
    else
      v35 = *(_QWORD *)&byte_255788F40[8];
    object[0].i64[0] = (uint64_t)os_log_create(v34, v24);
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v35 >= 0x17)
    {
      v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v37 = v35 | 7;
      v38 = v37 + 1;
      v36 = (uint64_t *)operator new(v37 + 1);
      object[1].i64[1] = v38 | 0x8000000000000000;
      object[0].i64[1] = (uint64_t)v36;
      object[1].i64[0] = v35;
    }
    else
    {
      object[1].i8[15] = v35;
      v36 = &object[0].i64[1];
      if (!v35)
      {
LABEL_56:
        *((_BYTE *)v36 + v35) = 0;
        object[2].i8[0] = 1;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v6 = a5;
        if (v23 >= 0x17)
        {
          v41 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v41 = v23 | 7;
          v42 = v41 + 1;
          v39 = (uint64_t *)operator new(v41 + 1);
          object[3].i64[1] = v42 | 0x8000000000000000;
          object[2].i64[1] = (uint64_t)v39;
          object[3].i64[0] = v23;
        }
        else
        {
          object[3].i8[15] = v23;
          v39 = &object[2].i64[1];
          if (!v23)
          {
            object[2].i8[8] = 0;
            v780 = 1;
            v40 = object[0].i64[0];
            if ((object[3].i8[15] & 0x80000000) == 0)
              goto LABEL_60;
            goto LABEL_66;
          }
        }
        memmove(v39, v24, v23);
        *((_BYTE *)v39 + v23) = 0;
        v780 = 1;
        v40 = object[0].i64[0];
        if ((object[3].i8[15] & 0x80000000) == 0)
        {
LABEL_60:
          if (!object[2].i8[0])
            goto LABEL_69;
          goto LABEL_67;
        }
LABEL_66:
        operator delete((void *)object[2].i64[1]);
        if (!object[2].i8[0])
          goto LABEL_69;
LABEL_67:
        if (object[1].i8[15] < 0)
          operator delete((void *)object[0].i64[1]);
LABEL_69:
        if (object[0].i64[0])
          os_release((void *)object[0].i64[0]);
        if (!v20 || !*(_QWORD *)(v20 + 24))
        {
          os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG);
          object[0].i32[0] = 136315138;
          *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)&__s;
          v49 = (void *)_os_log_send_and_compose_impl();
          if (v49)
          {
            free(v49);
            if (!v18)
              goto LABEL_276;
            goto LABEL_275;
          }
          goto LABEL_274;
        }
        v43 = _os_log_pack_size();
        v44 = operator new(v43, (std::align_val_t)8uLL);
        v45 = (_QWORD *)operator new();
        *v45 = &off_24EC1F7F0;
        v45[1] = 0;
        v45[2] = 0;
        v45[3] = v44;
        v768.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
        v768.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
        v768.__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
        v769 = 0uLL;
        v46 = strlen((const char *)&__s);
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v47 = v46;
        if (v46 >= 0x17)
        {
          v95 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v95 = v46 | 7;
          v96 = v95 + 1;
          v48 = operator new(v95 + 1);
          *((_QWORD *)&v778 + 1) = v96 | 0x8000000000000000;
          __src = v48;
          *(_QWORD *)&v778 = v47;
        }
        else
        {
          HIBYTE(v778) = v46;
          v48 = &__src;
          if (!v46)
            goto LABEL_179;
        }
        memcpy(v48, &__s, v47);
LABEL_179:
        *((_BYTE *)v48 + v47) = 0;
        v97 = __src;
        *(_QWORD *)v793 = v778;
        *(_QWORD *)&v793[7] = *(_QWORD *)((char *)&v778 + 7);
        v98 = HIBYTE(v778);
        v99 = operator new(0x38uLL);
        v99[1] = 0;
        v99[2] = 0;
        v99[3] = off_24EC1FA48;
        *v99 = &off_24EC1F9F8;
        v100 = *(_QWORD *)v793;
        v99[4] = v97;
        v99[5] = v100;
        *(_QWORD *)((char *)v99 + 47) = *(_QWORD *)&v793[7];
        *((_BYTE *)v99 + 55) = v98;
        *(_QWORD *)v793 = 0;
        *(_QWORD *)&v793[7] = 0;
        v101 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
        *(_QWORD *)&v769 = v99 + 3;
        *((_QWORD *)&v769 + 1) = v99;
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        object[0] = *(int32x4_t *)&v768.__r_.__value_.__l.__data_;
        v104 = v769;
        object[1].i64[0] = v768.__r_.__value_.__r.__words[2];
        if (v768.__r_.__value_.__r.__words[2])
        {
          v105 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
        object[1].i64[1] = v104;
        object[2].i64[0] = *((_QWORD *)&v769 + 1);
        if (*((_QWORD *)&v769 + 1))
        {
          v108 = (unint64_t *)(*((_QWORD *)&v769 + 1) + 8);
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
          object[2].i64[1] = v104;
          do
            v110 = __ldaxr(v108);
          while (__stlxr(v110 - 1, v108));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        else
        {
          object[2].i64[1] = v104;
        }
        v143 = (std::__shared_weak_count *)v768.__r_.__value_.__r.__words[2];
        if (v768.__r_.__value_.__r.__words[2])
        {
          v144 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        v146 = object[0].i64[0];
        if (*(char *)(object[2].i64[1] + 31) >= 0)
          v147 = object[2].i64[1] + 8;
        else
          v147 = *(_QWORD *)(object[2].i64[1] + 8);
        v148 = _os_log_pack_fill();
        *(_DWORD *)v148 = 136315138;
        *(_QWORD *)(v148 + 4) = v147;
        v149 = operator new();
        v150 = *(unsigned __int8 *)(v22 + 39);
        v151 = v737;
        if ((v150 & 0x80u) != 0)
        {
          v151 = *(_QWORD *)(v22 + 16);
          v150 = *(_QWORD *)(v22 + 24);
        }
        *(_QWORD *)v149 = v146;
        *(int32x4_t *)(v149 + 8) = *(int32x4_t *)((char *)object + 8);
        object[0].i64[1] = 0;
        object[1].i64[0] = 0;
        *(int32x4_t *)(v149 + 24) = *(int32x4_t *)((char *)&object[1] + 8);
        object[1].i64[1] = 0;
        object[2].i64[0] = 0;
        *(_QWORD *)(v149 + 40) = v151;
        *(_QWORD *)(v149 + 48) = v150;
        *(_BYTE *)(v149 + 56) = 2;
        __src = 0;
        v768.__r_.__value_.__r.__words[0] = v149;
        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), &v768);
        v152 = v768.__r_.__value_.__r.__words[0];
        v768.__r_.__value_.__r.__words[0] = 0;
        if (v152)
        {
          v153 = *(std::__shared_weak_count **)(v152 + 32);
          if (v153)
          {
            v154 = (unint64_t *)&v153->__shared_owners_;
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          v156 = *(std::__shared_weak_count **)(v152 + 16);
          if (v156)
          {
            v157 = (unint64_t *)&v156->__shared_owners_;
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          MEMORY[0x227684CE8](v152, 0x10F0C40B62ED6C6);
          v159 = __src;
          __src = 0;
          if (v159)
          {
            v160 = (std::__shared_weak_count *)*((_QWORD *)v159 + 4);
            if (v160)
            {
              v161 = (unint64_t *)&v160->__shared_owners_;
              do
                v162 = __ldaxr(v161);
              while (__stlxr(v162 - 1, v161));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                std::__shared_weak_count::__release_weak(v160);
              }
            }
            v163 = (std::__shared_weak_count *)*((_QWORD *)v159 + 2);
            if (v163)
            {
              v164 = (unint64_t *)&v163->__shared_owners_;
              do
                v165 = __ldaxr(v164);
              while (__stlxr(v165 - 1, v164));
              if (!v165)
              {
                ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                std::__shared_weak_count::__release_weak(v163);
              }
            }
            MEMORY[0x227684CE8](v159, 0x10F0C40B62ED6C6);
          }
        }
        v166 = (std::__shared_weak_count *)object[2].i64[0];
        if (!object[2].i64[0])
          goto LABEL_270;
        v167 = (unint64_t *)(object[2].i64[0] + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
          v169 = (std::__shared_weak_count *)object[1].i64[0];
          if (!object[1].i64[0])
            goto LABEL_274;
        }
        else
        {
LABEL_270:
          v169 = (std::__shared_weak_count *)object[1].i64[0];
          if (!object[1].i64[0])
            goto LABEL_274;
        }
        v170 = (unint64_t *)&v169->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
          if (!v18)
            goto LABEL_276;
          goto LABEL_275;
        }
LABEL_274:
        if (!v18)
        {
LABEL_276:
          sub_223182C08((uint64_t)oslog);
          v172 = v791;
          if (v791)
          {
            v173 = (unint64_t *)&v791->__shared_owners_;
            do
              v174 = __ldaxr(v173);
            while (__stlxr(v174 - 1, v173));
            if (!v174)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v172);
            }
          }
          goto LABEL_3;
        }
LABEL_275:
        sub_2245664AC((unsigned __int8 *)v7, object);
        sub_22322C138((uint64_t)oslog, "Unknown AE(%s)", object[0].i8);
        sub_223182C08((uint64_t)oslog);
        goto LABEL_276;
      }
    }
    memmove(v36, v34, v35);
    goto LABEL_56;
  }
LABEL_418:
  v244 = (uint64_t *)a2[13];
  v243 = (uint64_t *)a2[14];
  if (v244 != v243)
  {
    v724 = *MEMORY[0x24BEDB7F0];
    v719 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    __dst = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v718 = MEMORY[0x24BEDB848] + 16;
    v745 = (uint64_t *)a2[14];
    while (1)
    {
      while (1)
      {
        object[0] = *(int32x4_t *)v244;
        if (!sub_223340F28(v5, (uint64_t)object))
          break;
        sub_223821DD4(&v767);
        if (**(int **)(v767.__r_.__value_.__r.__words[0] + 56) <= 3)
        {
          v245 = *(unsigned __int8 *)(v767.__r_.__value_.__r.__words[0] + 72);
          v246 = sub_22322F254((uint64_t)v767.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
          v247 = v246;
          if (v245 || v246 != 0)
          {
            sub_223195210((uint64_t)object);
            LOBYTE(v764) = *((_BYTE *)sub_223822434(v5, *v244, v244[1]) + 112);
            *(double *)v792 = (double)*a4 / 1000000000.0;
            LODWORD(v769) = 0;
            sub_2232CFAFC(&v768, "[ProcessPoseUpdate] Removing: ");
            sub_22319B83C((uint64_t)&v766, (uint64_t)&v768, (unsigned __int8 *)v244);
            *(_QWORD *)oslog = &v768;
            *(_QWORD *)&oslog[8] = " state: ";
            *(_QWORD *)&oslog[16] = &v768;
            *(_QWORD *)&oslog[24] = " state: ";
            *(_QWORD *)&oslog[32] = " state: ";
            if ((_DWORD)v769 == -1)
              sub_22316DD70();
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
            ((void (*)(std::string *, std::string *))off_24EC5B1A8[v769])(&__s, &v768);
            sub_223847110(&__s, (char *)&v764);
            *(_QWORD *)oslog = &v768;
            *(_QWORD *)&oslog[8] = &__s;
            *(_QWORD *)&oslog[16] = &v768;
            *(_QWORD *)&oslog[24] = &__s;
            *(_QWORD *)&oslog[32] = &__s;
            if ((_DWORD)v769 == -1)
              sub_22316DD70();
            *(_QWORD *)v793 = oslog;
            ((void (*)(_BYTE *, std::string *))off_24EC5B0E8[v769])(v793, &v768);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            *(_QWORD *)oslog = &v768;
            *(_QWORD *)&oslog[8] = " t: ";
            *(_QWORD *)&oslog[16] = &v768;
            *(_QWORD *)&oslog[24] = " t: ";
            *(_QWORD *)&oslog[32] = " t: ";
            if ((_DWORD)v769 == -1)
              sub_22316DD70();
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
            ((void (*)(std::string *, std::string *))off_24EC5B1C0[v769])(&__s, &v768);
            sub_223701C90((uint64_t *)v792, &__s);
            *(_QWORD *)oslog = &v768;
            *(_QWORD *)&oslog[8] = &__s;
            *(_QWORD *)&oslog[16] = &v768;
            *(_QWORD *)&oslog[24] = &__s;
            *(_QWORD *)&oslog[32] = &__s;
            if ((_DWORD)v769 == -1)
              sub_22316DD70();
            *(_QWORD *)v793 = oslog;
            ((void (*)(_BYTE *, std::string *))off_24EC5B0E8[v769])(v793, &v768);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            if ((_DWORD)v769 == -1)
              sub_22316DD70();
            *(_QWORD *)oslog = &__s;
            ((void (*)(void **__return_ptr, _BYTE *, std::string *))off_24EC5B118[v769])(&__src, oslog, &v768);
            if ((_DWORD)v769 != -1)
              ((void (*)(_BYTE *, std::string *))off_24EC5B100[v769])(oslog, &v768);
            if (v778 >= 0)
              v249 = (const char *)&__src;
            else
              v249 = (const char *)__src;
            v250 = strlen(v249);
            sub_2231813E8((int32x4_t *)object[1].i64, (uint64_t)v249, v250);
            if ((SHIBYTE(v778) & 0x80000000) == 0)
            {
              v251 = v785;
              if ((v785 & 0x10) == 0)
                goto LABEL_444;
LABEL_455:
              v262 = v784;
              v263 = (const void **)&v780;
              if (v784 < v781)
              {
                v784 = v781;
                v262 = v781;
                v263 = (const void **)&v780;
              }
LABEL_458:
              v264 = *v263;
              v252 = v262 - (_QWORD)*v263;
              if (v252 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v252 >= 0x17)
              {
                v265 = (v252 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v252 | 7) != 0x17)
                  v265 = v252 | 7;
                v266 = v265 + 1;
                v253 = operator new(v265 + 1);
                *(_QWORD *)&v793[8] = v252;
                *(_QWORD *)&v793[16] = v266 | 0x8000000000000000;
                *(_QWORD *)v793 = v253;
              }
              else
              {
                v793[23] = v262 - *(_BYTE *)v263;
                v253 = v793;
                if (!v252)
                  goto LABEL_466;
              }
              memmove(v253, v264, v252);
              goto LABEL_466;
            }
            operator delete(__src);
            v251 = v785;
            if ((v785 & 0x10) != 0)
              goto LABEL_455;
LABEL_444:
            if ((v251 & 8) != 0)
            {
              v262 = object[3].i64[1];
              v263 = (const void **)&object[2].i64[1];
              goto LABEL_458;
            }
            v252 = 0;
            v793[23] = 0;
            v253 = v793;
LABEL_466:
            v253[v252] = 0;
            v768.__r_.__value_.__r.__words[0] = (std::string::size_type)&v767;
            v768.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v768.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            LODWORD(v769) = 3;
            *((_QWORD *)&v769 + 1) = "unknown file";
            LODWORD(v770) = 519;
            v771 = "unknown function";
            v772 = 0;
            v773 = 0;
            v267 = v793;
            if (v793[23] < 0)
              v267 = *(const char **)v793;
            v755 = v267;
            v268 = *(_QWORD *)v768.__r_.__value_.__l.__data_;
            v269 = (const char *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 16);
            v734 = v269;
            if (*(char *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v269 = *(const char **)(v268 + 16);
              v270 = *(_QWORD *)(v268 + 24);
              v272 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v272 & 1) == 0)
              {
LABEL_703:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&__s);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&__s, byte_255788F40);
                  if ((_BYTE)v795 && SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__s.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                  v5 = a1;
                }
              }
            }
            else
            {
              v270 = *(unsigned __int8 *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 39);
              v271 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v271 & 1) == 0)
                goto LABEL_703;
            }
            if (byte_255788F40[23] >= 0)
              v273 = byte_255788F40;
            else
              v273 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v274 = byte_255788F40[23];
            else
              v274 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)oslog = os_log_create(v273, v269);
            if (v274 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v274 >= 0x17)
            {
              v276 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v274 | 7) != 0x17)
                v276 = v274 | 7;
              v277 = v276 + 1;
              v275 = operator new(v276 + 1);
              *(_QWORD *)&oslog[24] = v277 | 0x8000000000000000;
              *(_QWORD *)&oslog[8] = v275;
              *(_QWORD *)&oslog[16] = v274;
              v5 = a1;
            }
            else
            {
              oslog[31] = v274;
              v275 = &oslog[8];
              if (!v274)
              {
LABEL_486:
                v275[v274] = 0;
                oslog[32] = 1;
                if (v270 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v270 >= 0x17)
                {
                  v280 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v270 | 7) != 0x17)
                    v280 = v270 | 7;
                  v281 = v280 + 1;
                  v278 = operator new(v280 + 1);
                  v790 = v281 | 0x8000000000000000;
                  v788 = v278;
                  v789 = (const char *)v270;
                }
                else
                {
                  HIBYTE(v790) = v270;
                  v278 = &v788;
                  if (!v270)
                  {
                    LOBYTE(v788) = 0;
                    LOBYTE(v791) = 1;
                    v279 = *(NSObject **)oslog;
                    if ((SHIBYTE(v790) & 0x80000000) == 0)
                      goto LABEL_490;
LABEL_496:
                    operator delete(v788);
                    v6 = a5;
                    if (oslog[32])
                      goto LABEL_497;
                    goto LABEL_499;
                  }
                }
                memmove(v278, v269, v270);
                *((_BYTE *)v278 + v270) = 0;
                LOBYTE(v791) = 1;
                v279 = *(NSObject **)oslog;
                if (SHIBYTE(v790) < 0)
                  goto LABEL_496;
LABEL_490:
                v6 = a5;
                if (oslog[32])
                {
LABEL_497:
                  if ((oslog[31] & 0x80000000) != 0)
                    operator delete(*(void **)&oslog[8]);
                }
LABEL_499:
                if (*(_QWORD *)oslog)
                  os_release(*(void **)oslog);
                if (v247 && *(_QWORD *)(v247 + 24))
                {
                  v282 = _os_log_pack_size();
                  v283 = operator new(v282, (std::align_val_t)8uLL);
                  v284 = (_QWORD *)operator new();
                  *v284 = &off_24EC1F7F0;
                  v284[1] = 0;
                  v284[2] = 0;
                  v284[3] = v283;
                  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v283;
                  __s.__r_.__value_.__l.__size_ = (std::string::size_type)v283;
                  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v284;
                  v795 = 0;
                  v796 = 0;
                  v285 = strlen(v755);
                  if (v285 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v286 = v285;
                  if (v285 >= 0x17)
                  {
                    v306 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v285 | 7) != 0x17)
                      v306 = v285 | 7;
                    v307 = v306 + 1;
                    v287 = operator new(v306 + 1);
                    *((_QWORD *)&v778 + 1) = v307 | 0x8000000000000000;
                    __src = v287;
                    *(_QWORD *)&v778 = v286;
                  }
                  else
                  {
                    HIBYTE(v778) = v285;
                    v287 = &__src;
                    if (!v285)
                      goto LABEL_553;
                  }
                  memcpy(v287, v755, v286);
LABEL_553:
                  *((_BYTE *)v287 + v286) = 0;
                  v308 = __src;
                  *(_QWORD *)v792 = v778;
                  *(_QWORD *)&v792[7] = *(_QWORD *)((char *)&v778 + 7);
                  v309 = HIBYTE(v778);
                  v310 = operator new(0x38uLL);
                  v310[1] = 0;
                  v310[2] = 0;
                  v310[3] = off_24EC1FA48;
                  *v310 = &off_24EC1F9F8;
                  v311 = *(_QWORD *)v792;
                  v310[4] = v308;
                  v310[5] = v311;
                  *(_QWORD *)((char *)v310 + 47) = *(_QWORD *)&v792[7];
                  *((_BYTE *)v310 + 55) = v309;
                  *(_QWORD *)v792 = 0;
                  *(_QWORD *)&v792[7] = 0;
                  v312 = v796;
                  v795 = (char *)(v310 + 3);
                  v796 = (std::__shared_weak_count *)v310;
                  v6 = a5;
                  if (v312)
                  {
                    v313 = (unint64_t *)&v312->__shared_owners_;
                    do
                      v314 = __ldaxr(v313);
                    while (__stlxr(v314 - 1, v313));
                    if (!v314)
                    {
                      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                      std::__shared_weak_count::__release_weak(v312);
                    }
                  }
                  *(std::string *)oslog = __s;
                  v315 = v795;
                  if (__s.__r_.__value_.__r.__words[2])
                  {
                    v316 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                    do
                      v317 = __ldxr(v316);
                    while (__stxr(v317 + 1, v316));
                  }
                  v318 = v796;
                  *(_QWORD *)&oslog[24] = v315;
                  *(_QWORD *)&oslog[32] = v796;
                  if (v796)
                  {
                    v319 = (unint64_t *)&v796->__shared_owners_;
                    do
                      v320 = __ldxr(v319);
                    while (__stxr(v320 + 1, v319));
                    v788 = v315;
                    do
                      v321 = __ldaxr(v319);
                    while (__stlxr(v321 - 1, v319));
                    if (!v321)
                    {
                      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                      std::__shared_weak_count::__release_weak(v318);
                    }
                  }
                  else
                  {
                    v788 = v315;
                  }
                  v322 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                  if (__s.__r_.__value_.__r.__words[2])
                  {
                    v323 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                    do
                      v324 = __ldaxr(v323);
                    while (__stlxr(v324 - 1, v323));
                    if (!v324)
                    {
                      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                      std::__shared_weak_count::__release_weak(v322);
                    }
                  }
                  v325 = *(_QWORD *)oslog;
                  if (*((char *)v788 + 31) >= 0)
                    v326 = (char *)v788 + 8;
                  else
                    v326 = (char *)*((_QWORD *)v788 + 1);
                  v327 = _os_log_pack_fill();
                  *(_DWORD *)v327 = 136315138;
                  *(_QWORD *)(v327 + 4) = v326;
                  v328 = operator new();
                  v329 = *(unsigned __int8 *)(v268 + 39);
                  v330 = v734;
                  if ((v329 & 0x80u) != 0)
                  {
                    v330 = *(const char **)(v268 + 16);
                    v329 = *(_QWORD *)(v268 + 24);
                  }
                  *(_QWORD *)v328 = v325;
                  *(_OWORD *)(v328 + 8) = *(_OWORD *)&oslog[8];
                  *(_QWORD *)&oslog[8] = 0;
                  *(_QWORD *)&oslog[16] = 0;
                  *(_OWORD *)(v328 + 24) = *(_OWORD *)&oslog[24];
                  *(_QWORD *)&oslog[24] = 0;
                  *(_QWORD *)&oslog[32] = 0;
                  *(_QWORD *)(v328 + 40) = v330;
                  *(_QWORD *)(v328 + 48) = v329;
                  *(_BYTE *)(v328 + 56) = 1;
                  __src = 0;
                  __s.__r_.__value_.__r.__words[0] = v328;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v247 + 24) + 40))(*(_QWORD *)(v247 + 24), &__s);
                  v331 = __s.__r_.__value_.__r.__words[0];
                  __s.__r_.__value_.__r.__words[0] = 0;
                  if (v331)
                  {
                    v332 = *(std::__shared_weak_count **)(v331 + 32);
                    if (v332)
                    {
                      v333 = (unint64_t *)&v332->__shared_owners_;
                      do
                        v334 = __ldaxr(v333);
                      while (__stlxr(v334 - 1, v333));
                      if (!v334)
                      {
                        ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                        std::__shared_weak_count::__release_weak(v332);
                      }
                    }
                    v335 = *(std::__shared_weak_count **)(v331 + 16);
                    if (v335)
                    {
                      v336 = (unint64_t *)&v335->__shared_owners_;
                      do
                        v337 = __ldaxr(v336);
                      while (__stlxr(v337 - 1, v336));
                      if (!v337)
                      {
                        ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                        std::__shared_weak_count::__release_weak(v335);
                      }
                    }
                    MEMORY[0x227684CE8](v331, 0x10F0C40B62ED6C6);
                    v338 = __src;
                    __src = 0;
                    if (v338)
                    {
                      v339 = (std::__shared_weak_count *)*((_QWORD *)v338 + 4);
                      if (v339)
                      {
                        v340 = (unint64_t *)&v339->__shared_owners_;
                        do
                          v341 = __ldaxr(v340);
                        while (__stlxr(v341 - 1, v340));
                        if (!v341)
                        {
                          ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                          std::__shared_weak_count::__release_weak(v339);
                        }
                      }
                      v342 = (std::__shared_weak_count *)*((_QWORD *)v338 + 2);
                      if (v342)
                      {
                        v343 = (unint64_t *)&v342->__shared_owners_;
                        do
                          v344 = __ldaxr(v343);
                        while (__stlxr(v344 - 1, v343));
                        if (!v344)
                        {
                          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                          std::__shared_weak_count::__release_weak(v342);
                        }
                      }
                      MEMORY[0x227684CE8](v338, 0x10F0C40B62ED6C6);
                    }
                  }
                  v345 = *(std::__shared_weak_count **)&oslog[32];
                  if (*(_QWORD *)&oslog[32])
                  {
                    v346 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                    do
                      v347 = __ldaxr(v346);
                    while (__stlxr(v347 - 1, v346));
                    if (!v347)
                    {
                      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                      std::__shared_weak_count::__release_weak(v345);
                      v348 = *(std::__shared_weak_count **)&oslog[16];
                      if (*(_QWORD *)&oslog[16])
                        goto LABEL_607;
                      goto LABEL_610;
                    }
                  }
                  v348 = *(std::__shared_weak_count **)&oslog[16];
                  if (!*(_QWORD *)&oslog[16])
                    goto LABEL_610;
LABEL_607:
                  v349 = (unint64_t *)&v348->__shared_owners_;
                  do
                    v350 = __ldaxr(v349);
                  while (__stlxr(v350 - 1, v349));
                  if (v350)
                  {
LABEL_610:
                    if (v245)
                      goto LABEL_611;
LABEL_614:
                    sub_223182C08((uint64_t)&v768);
                    v352 = v773;
                    if (!v773)
                      goto LABEL_618;
                    v353 = (unint64_t *)&v773->__shared_owners_;
                    do
                      v354 = __ldaxr(v353);
                    while (__stlxr(v354 - 1, v353));
                    if (!v354)
                    {
                      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                      std::__shared_weak_count::__release_weak(v352);
                      if ((v793[23] & 0x80000000) != 0)
LABEL_619:
                        operator delete(*(void **)v793);
                    }
                    else
                    {
LABEL_618:
                      if ((v793[23] & 0x80000000) != 0)
                        goto LABEL_619;
                    }
                    object[0].i64[0] = v724;
                    *(uint64_t *)((char *)object[0].i64 + *(_QWORD *)(v724 - 24)) = (uint64_t)__dst;
                    object[1].i64[0] = v719;
                    object[1].i64[1] = v718;
                    v243 = v745;
                    if (v783 < 0)
                      operator delete(v782);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](v786);
                    goto LABEL_623;
                  }
                  ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                  std::__shared_weak_count::__release_weak(v348);
                  if (!v245)
                    goto LABEL_614;
                }
                else
                {
                  os_log_type_enabled(v279, OS_LOG_TYPE_INFO);
                  *(_DWORD *)oslog = 136315138;
                  *(_QWORD *)&oslog[4] = v755;
                  v288 = (void *)_os_log_send_and_compose_impl();
                  if (!v288)
                    goto LABEL_610;
                  free(v288);
                  if (!v245)
                    goto LABEL_614;
                }
LABEL_611:
                v351 = v793;
                if (v793[23] < 0)
                  v351 = *(const char **)v793;
                sub_22322C138((uint64_t)&v768, "%s", v351);
                sub_223182C08((uint64_t)&v768);
                goto LABEL_614;
              }
            }
            memmove(v275, v273, v274);
            goto LABEL_486;
          }
        }
LABEL_623:
        v355 = sub_223822434(v5, *v244, v244[1]);
        *((_WORD *)v355 + 56) = 0x2000;
        *((_BYTE *)v355 + 114) = 0;
        sub_2231A9984(v763, (unsigned __int8 *)v244, v244);
        ++*(_DWORD *)(v6 + 4);
        v244 += 2;
        if (v244 == v243)
          goto LABEL_713;
      }
      sub_223821DD4(v792);
      if (**(int **)(*(_QWORD *)v792 + 56) <= 2)
      {
        v254 = *(unsigned __int8 *)(*(_QWORD *)v792 + 72);
        v255 = sub_22322F254(*(uint64_t *)v792, "OSLogSurrogateAppender", 1, 0);
        v256 = v255;
        if (v254 || v255 != 0)
          break;
      }
LABEL_421:
      ++*(_DWORD *)(v6 + 72);
      v244 += 2;
      if (v244 == v243)
        goto LABEL_713;
    }
    *(_QWORD *)oslog = v792;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 2;
    *(_QWORD *)&oslog[32] = "unknown file";
    LODWORD(v788) = 512;
    v789 = "unknown function";
    v790 = 0;
    v791 = 0;
    sub_2245664AC((unsigned __int8 *)v244, &__s);
    v258 = **(_QWORD **)oslog;
    v259 = (const char *)(**(_QWORD **)oslog + 16);
    v754 = v259;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v259 = *(const char **)(v258 + 16);
      v260 = *(_QWORD *)(v258 + 24);
      v289 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v289 & 1) != 0)
        goto LABEL_511;
    }
    else
    {
      v260 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v261 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v261 & 1) != 0)
        goto LABEL_511;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v768);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v768, byte_255788F40);
      if ((_BYTE)v769 && SHIBYTE(v768.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v768.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v5 = a1;
    }
LABEL_511:
    if (byte_255788F40[23] >= 0)
      v290 = byte_255788F40;
    else
      v290 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v291 = byte_255788F40[23];
    else
      v291 = *(_QWORD *)&byte_255788F40[8];
    object[0].i64[0] = (uint64_t)os_log_create(v290, v259);
    if (v291 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v291 >= 0x17)
    {
      v293 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v291 | 7) != 0x17)
        v293 = v291 | 7;
      v294 = v293 + 1;
      v292 = (uint64_t *)operator new(v293 + 1);
      object[1].i64[1] = v294 | 0x8000000000000000;
      object[0].i64[1] = (uint64_t)v292;
      object[1].i64[0] = v291;
      v5 = a1;
    }
    else
    {
      object[1].i8[15] = v291;
      v292 = &object[0].i64[1];
      if (!v291)
      {
LABEL_525:
        *((_BYTE *)v292 + v291) = 0;
        object[2].i8[0] = 1;
        if (v260 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v260 >= 0x17)
        {
          v297 = (v260 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v260 | 7) != 0x17)
            v297 = v260 | 7;
          v298 = v297 + 1;
          v295 = (uint64_t *)operator new(v297 + 1);
          object[3].i64[1] = v298 | 0x8000000000000000;
          object[2].i64[1] = (uint64_t)v295;
          object[3].i64[0] = v260;
        }
        else
        {
          object[3].i8[15] = v260;
          v295 = &object[2].i64[1];
          if (!v260)
          {
            object[2].i8[8] = 0;
            v780 = 1;
            v296 = object[0].i64[0];
            if ((object[3].i8[15] & 0x80000000) == 0)
              goto LABEL_529;
            goto LABEL_535;
          }
        }
        memmove(v295, v259, v260);
        *((_BYTE *)v295 + v260) = 0;
        v780 = 1;
        v296 = object[0].i64[0];
        if ((object[3].i8[15] & 0x80000000) == 0)
        {
LABEL_529:
          v6 = a5;
          if (!object[2].i8[0])
            goto LABEL_538;
          goto LABEL_536;
        }
LABEL_535:
        operator delete((void *)object[2].i64[1]);
        v6 = a5;
        if (!object[2].i8[0])
          goto LABEL_538;
LABEL_536:
        if (object[1].i8[15] < 0)
          operator delete((void *)object[0].i64[1]);
LABEL_538:
        if (object[0].i64[0])
          os_release((void *)object[0].i64[0]);
        if (!v256 || !*(_QWORD *)(v256 + 24))
        {
          os_log_type_enabled(v296, OS_LOG_TYPE_DEBUG);
          object[0].i32[0] = 136315138;
          *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)&__s;
          v305 = (void *)_os_log_send_and_compose_impl();
          if (!v305)
            goto LABEL_692;
          free(v305);
          if (!v254)
            goto LABEL_694;
          goto LABEL_693;
        }
        v299 = _os_log_pack_size();
        v300 = operator new(v299, (std::align_val_t)8uLL);
        v301 = (_QWORD *)operator new();
        *v301 = &off_24EC1F7F0;
        v301[1] = 0;
        v301[2] = 0;
        v301[3] = v300;
        v768.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
        v768.__r_.__value_.__l.__size_ = (std::string::size_type)v300;
        v768.__r_.__value_.__r.__words[2] = (std::string::size_type)v301;
        v769 = 0uLL;
        v302 = strlen((const char *)&__s);
        if (v302 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v303 = v302;
        if (v302 >= 0x17)
        {
          v356 = (v302 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v302 | 7) != 0x17)
            v356 = v302 | 7;
          v357 = v356 + 1;
          v304 = operator new(v356 + 1);
          *((_QWORD *)&v778 + 1) = v357 | 0x8000000000000000;
          __src = v304;
          *(_QWORD *)&v778 = v303;
        }
        else
        {
          HIBYTE(v778) = v302;
          v304 = &__src;
          if (!v302)
            goto LABEL_631;
        }
        memcpy(v304, &__s, v303);
LABEL_631:
        *((_BYTE *)v304 + v303) = 0;
        v358 = __src;
        *(_QWORD *)v793 = v778;
        *(_QWORD *)&v793[7] = *(_QWORD *)((char *)&v778 + 7);
        v359 = HIBYTE(v778);
        v360 = operator new(0x38uLL);
        v360[1] = 0;
        v360[2] = 0;
        v360[3] = off_24EC1FA48;
        *v360 = &off_24EC1F9F8;
        v361 = *(_QWORD *)v793;
        v360[4] = v358;
        v360[5] = v361;
        *(_QWORD *)((char *)v360 + 47) = *(_QWORD *)&v793[7];
        *((_BYTE *)v360 + 55) = v359;
        *(_QWORD *)v793 = 0;
        *(_QWORD *)&v793[7] = 0;
        v362 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
        *(_QWORD *)&v769 = v360 + 3;
        *((_QWORD *)&v769 + 1) = v360;
        v6 = a5;
        if (v362)
        {
          v363 = (unint64_t *)&v362->__shared_owners_;
          do
            v364 = __ldaxr(v363);
          while (__stlxr(v364 - 1, v363));
          if (!v364)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
        object[0] = *(int32x4_t *)&v768.__r_.__value_.__l.__data_;
        v365 = v769;
        object[1].i64[0] = v768.__r_.__value_.__r.__words[2];
        if (v768.__r_.__value_.__r.__words[2])
        {
          v366 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
          do
            v367 = __ldxr(v366);
          while (__stxr(v367 + 1, v366));
        }
        v368 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
        object[1].i64[1] = v365;
        object[2].i64[0] = *((_QWORD *)&v769 + 1);
        if (*((_QWORD *)&v769 + 1))
        {
          v369 = (unint64_t *)(*((_QWORD *)&v769 + 1) + 8);
          do
            v370 = __ldxr(v369);
          while (__stxr(v370 + 1, v369));
          object[2].i64[1] = v365;
          do
            v371 = __ldaxr(v369);
          while (__stlxr(v371 - 1, v369));
          if (!v371)
          {
            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
            std::__shared_weak_count::__release_weak(v368);
          }
        }
        else
        {
          object[2].i64[1] = v365;
        }
        v372 = (std::__shared_weak_count *)v768.__r_.__value_.__r.__words[2];
        if (v768.__r_.__value_.__r.__words[2])
        {
          v373 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
          do
            v374 = __ldaxr(v373);
          while (__stlxr(v374 - 1, v373));
          if (!v374)
          {
            ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
            std::__shared_weak_count::__release_weak(v372);
          }
        }
        v375 = object[0].i64[0];
        if (*(char *)(object[2].i64[1] + 31) >= 0)
          v376 = object[2].i64[1] + 8;
        else
          v376 = *(_QWORD *)(object[2].i64[1] + 8);
        v377 = _os_log_pack_fill();
        *(_DWORD *)v377 = 136315138;
        *(_QWORD *)(v377 + 4) = v376;
        v378 = operator new();
        v379 = *(unsigned __int8 *)(v258 + 39);
        v380 = v754;
        if ((v379 & 0x80u) != 0)
        {
          v380 = *(const char **)(v258 + 16);
          v379 = *(_QWORD *)(v258 + 24);
        }
        *(_QWORD *)v378 = v375;
        *(int32x4_t *)(v378 + 8) = *(int32x4_t *)((char *)object + 8);
        object[0].i64[1] = 0;
        object[1].i64[0] = 0;
        *(int32x4_t *)(v378 + 24) = *(int32x4_t *)((char *)&object[1] + 8);
        object[1].i64[1] = 0;
        object[2].i64[0] = 0;
        *(_QWORD *)(v378 + 40) = v380;
        *(_QWORD *)(v378 + 48) = v379;
        *(_BYTE *)(v378 + 56) = 2;
        __src = 0;
        v768.__r_.__value_.__r.__words[0] = v378;
        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v256 + 24) + 40))(*(_QWORD *)(v256 + 24), &v768);
        v381 = v768.__r_.__value_.__r.__words[0];
        v768.__r_.__value_.__r.__words[0] = 0;
        if (v381)
        {
          v382 = *(std::__shared_weak_count **)(v381 + 32);
          if (v382)
          {
            v383 = (unint64_t *)&v382->__shared_owners_;
            do
              v384 = __ldaxr(v383);
            while (__stlxr(v384 - 1, v383));
            if (!v384)
            {
              ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
              std::__shared_weak_count::__release_weak(v382);
            }
          }
          v385 = *(std::__shared_weak_count **)(v381 + 16);
          if (v385)
          {
            v386 = (unint64_t *)&v385->__shared_owners_;
            do
              v387 = __ldaxr(v386);
            while (__stlxr(v387 - 1, v386));
            if (!v387)
            {
              ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
              std::__shared_weak_count::__release_weak(v385);
            }
          }
          MEMORY[0x227684CE8](v381, 0x10F0C40B62ED6C6);
          v388 = __src;
          __src = 0;
          if (v388)
          {
            v389 = (std::__shared_weak_count *)*((_QWORD *)v388 + 4);
            if (v389)
            {
              v390 = (unint64_t *)&v389->__shared_owners_;
              do
                v391 = __ldaxr(v390);
              while (__stlxr(v391 - 1, v390));
              if (!v391)
              {
                ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                std::__shared_weak_count::__release_weak(v389);
              }
            }
            v392 = (std::__shared_weak_count *)*((_QWORD *)v388 + 2);
            if (v392)
            {
              v393 = (unint64_t *)&v392->__shared_owners_;
              do
                v394 = __ldaxr(v393);
              while (__stlxr(v394 - 1, v393));
              if (!v394)
              {
                ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                std::__shared_weak_count::__release_weak(v392);
              }
            }
            MEMORY[0x227684CE8](v388, 0x10F0C40B62ED6C6);
          }
        }
        v395 = (std::__shared_weak_count *)object[2].i64[0];
        if (!object[2].i64[0])
          goto LABEL_688;
        v396 = (unint64_t *)(object[2].i64[0] + 8);
        do
          v397 = __ldaxr(v396);
        while (__stlxr(v397 - 1, v396));
        if (!v397)
        {
          ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
          std::__shared_weak_count::__release_weak(v395);
          v398 = (std::__shared_weak_count *)object[1].i64[0];
          if (!object[1].i64[0])
            goto LABEL_692;
        }
        else
        {
LABEL_688:
          v398 = (std::__shared_weak_count *)object[1].i64[0];
          if (!object[1].i64[0])
            goto LABEL_692;
        }
        v399 = (unint64_t *)&v398->__shared_owners_;
        do
          v400 = __ldaxr(v399);
        while (__stlxr(v400 - 1, v399));
        if (v400)
        {
LABEL_692:
          if (!v254)
            goto LABEL_694;
          goto LABEL_693;
        }
        ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
        std::__shared_weak_count::__release_weak(v398);
        if (!v254)
        {
LABEL_694:
          sub_223182C08((uint64_t)oslog);
          v401 = v791;
          if (v791)
          {
            v402 = (unint64_t *)&v791->__shared_owners_;
            do
              v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
          }
          v243 = v745;
          goto LABEL_421;
        }
LABEL_693:
        sub_2245664AC((unsigned __int8 *)v244, object);
        sub_22322C138((uint64_t)oslog, "Unknown AR(%s)", object[0].i8);
        sub_223182C08((uint64_t)oslog);
        goto LABEL_694;
      }
    }
    memmove(v292, v290, v291);
    goto LABEL_525;
  }
LABEL_713:
  if ((uint64_t)(a2[2] - a2[1]) >> 4 != (uint64_t)(a2[5] - a2[4]) >> 6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 528, (uint64_t)"anchors_update.new_uuids.size() == anchors_update.new_poses.size()", 66, (uint64_t)&unk_224595B55, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_1228;
  }
  v405 = (uint64_t *)a2[7];
  v404 = (uint64_t *)a2[8];
  v406 = (float32x4_t *)a2[10];
  __dsta = (float32x4_t *)a2[11];
  if (((char *)v404 - (char *)v405) >> 4 != ((char *)__dsta - (char *)v406) >> 6)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 529, (uint64_t)"anchors_update.updated_uuids.size() == anchors_update.updated_poses.size()", 74, (uint64_t)&unk_224595B55, 0, (void (*)(void **))sub_22457406C))
    {
      v405 = (uint64_t *)a2[7];
      v404 = (uint64_t *)a2[8];
      v406 = (float32x4_t *)a2[10];
      __dsta = (float32x4_t *)a2[11];
      goto LABEL_718;
    }
LABEL_1228:
    abort();
  }
LABEL_718:
  if (v405 != v404 || v406 != __dsta)
  {
    v710 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v711 = (_QWORD *)*MEMORY[0x24BEDB7F0];
    v709 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v708 = (void *)(MEMORY[0x24BEDB848] + 16);
    v720 = v404;
    do
    {
      *(float32x4_t *)v740 = *v406;
      v743 = v406[1];
      v748 = v406[2];
      *(float32x4_t *)v756 = v406[3];
      *(float32x4_t *)v729 = *a3;
      v731 = a3[1];
      v735 = a3[2];
      v746 = a3[3];
      object[0] = *(int32x4_t *)v405;
      if (!sub_223340F28(v5, (uint64_t)object))
        goto LABEL_1174;
      v407 = (float32x4_t *)sub_223822434(v5, *v405, v405[1]);
      v409 = v407;
      if (!v407[7].i8[0])
      {
        sub_223821DD4(v792);
        if (**(int **)(*(_QWORD *)v792 + 56) > 2)
          goto LABEL_1042;
        v426 = *(unsigned __int8 *)(*(_QWORD *)v792 + 72);
        v427 = sub_22322F254(*(uint64_t *)v792, "OSLogSurrogateAppender", 1, 0);
        v428 = v427;
        if (!v426 && !v427)
          goto LABEL_1042;
        *(_QWORD *)oslog = v792;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 2;
        *(_QWORD *)&oslog[32] = "unknown file";
        LODWORD(v788) = 547;
        v789 = "unknown function";
        v790 = 0;
        v791 = 0;
        sub_2245664AC((unsigned __int8 *)v405, &__s);
        v726 = v405;
        v429 = **(_QWORD **)oslog;
        v430 = (const char *)(**(_QWORD **)oslog + 16);
        v757 = v430;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v430 = *(const char **)(v429 + 16);
          v431 = *(_QWORD *)(v429 + 24);
          v491 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v491 & 1) == 0)
          {
LABEL_1187:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v768);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v768, byte_255788F40);
              if ((_BYTE)v769 && SHIBYTE(v768.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v768.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
              v5 = a1;
            }
          }
        }
        else
        {
          v431 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v432 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v432 & 1) == 0)
            goto LABEL_1187;
        }
        if (byte_255788F40[23] >= 0)
          v492 = byte_255788F40;
        else
          v492 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v493 = byte_255788F40[23];
        else
          v493 = *(_QWORD *)&byte_255788F40[8];
        object[0].i64[0] = (uint64_t)os_log_create(v492, v430);
        if (v493 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v493 >= 0x17)
        {
          v495 = (v493 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v493 | 7) != 0x17)
            v495 = v493 | 7;
          v496 = v495 + 1;
          v494 = (uint64_t *)operator new(v495 + 1);
          object[1].i64[1] = v496 | 0x8000000000000000;
          object[0].i64[1] = (uint64_t)v494;
          object[1].i64[0] = v493;
          v5 = a1;
        }
        else
        {
          object[1].i8[15] = v493;
          v494 = &object[0].i64[1];
          if (!v493)
          {
LABEL_816:
            *((_BYTE *)v494 + v493) = 0;
            object[2].i8[0] = 1;
            if (v431 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v431 >= 0x17)
            {
              v499 = (v431 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v431 | 7) != 0x17)
                v499 = v431 | 7;
              v500 = v499 + 1;
              v497 = (uint64_t *)operator new(v499 + 1);
              object[3].i64[1] = v500 | 0x8000000000000000;
              object[2].i64[1] = (uint64_t)v497;
              object[3].i64[0] = v431;
            }
            else
            {
              object[3].i8[15] = v431;
              v497 = &object[2].i64[1];
              if (!v431)
              {
                object[2].i8[8] = 0;
                v780 = 1;
                v498 = object[0].i64[0];
                if ((object[3].i8[15] & 0x80000000) == 0)
                  goto LABEL_820;
LABEL_826:
                operator delete((void *)object[2].i64[1]);
                v405 = v726;
                if (object[2].i8[0])
                  goto LABEL_827;
                goto LABEL_829;
              }
            }
            memmove(v497, v430, v431);
            *((_BYTE *)v497 + v431) = 0;
            v780 = 1;
            v498 = object[0].i64[0];
            if (object[3].i8[15] < 0)
              goto LABEL_826;
LABEL_820:
            v405 = v726;
            if (object[2].i8[0])
            {
LABEL_827:
              if (object[1].i8[15] < 0)
                operator delete((void *)object[0].i64[1]);
            }
LABEL_829:
            if (object[0].i64[0])
              os_release((void *)object[0].i64[0]);
            if (v428 && *(_QWORD *)(v428 + 24))
            {
              v501 = _os_log_pack_size();
              v502 = operator new(v501, (std::align_val_t)8uLL);
              v503 = (_QWORD *)operator new();
              *v503 = &off_24EC1F7F0;
              v503[1] = 0;
              v503[2] = 0;
              v503[3] = v502;
              v768.__r_.__value_.__r.__words[0] = (std::string::size_type)v502;
              v768.__r_.__value_.__l.__size_ = (std::string::size_type)v502;
              v768.__r_.__value_.__r.__words[2] = (std::string::size_type)v503;
              v769 = 0uLL;
              v504 = strlen((const char *)&__s);
              if (v504 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v505 = v504;
              if (v504 >= 0x17)
              {
                v558 = (v504 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v504 | 7) != 0x17)
                  v558 = v504 | 7;
                v559 = v558 + 1;
                v506 = operator new(v558 + 1);
                *((_QWORD *)&v778 + 1) = v559 | 0x8000000000000000;
                __src = v506;
                *(_QWORD *)&v778 = v505;
              }
              else
              {
                HIBYTE(v778) = v504;
                v506 = &__src;
                if (!v504)
                  goto LABEL_939;
              }
              memcpy(v506, &__s, v505);
LABEL_939:
              *((_BYTE *)v506 + v505) = 0;
              v560 = __src;
              *(_QWORD *)v793 = v778;
              *(_QWORD *)&v793[7] = *(_QWORD *)((char *)&v778 + 7);
              v561 = HIBYTE(v778);
              v562 = operator new(0x38uLL);
              v562[1] = 0;
              v562[2] = 0;
              v562[3] = off_24EC1FA48;
              *v562 = &off_24EC1F9F8;
              v563 = *(_QWORD *)v793;
              v562[4] = v560;
              v562[5] = v563;
              *(_QWORD *)((char *)v562 + 47) = *(_QWORD *)&v793[7];
              *((_BYTE *)v562 + 55) = v561;
              *(_QWORD *)v793 = 0;
              *(_QWORD *)&v793[7] = 0;
              v564 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
              *(_QWORD *)&v769 = v562 + 3;
              *((_QWORD *)&v769 + 1) = v562;
              v405 = v726;
              if (v564)
              {
                v565 = (unint64_t *)&v564->__shared_owners_;
                do
                  v566 = __ldaxr(v565);
                while (__stlxr(v566 - 1, v565));
                if (!v566)
                {
                  ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
                  std::__shared_weak_count::__release_weak(v564);
                }
              }
              object[0] = *(int32x4_t *)&v768.__r_.__value_.__l.__data_;
              v567 = v769;
              object[1].i64[0] = v768.__r_.__value_.__r.__words[2];
              if (v768.__r_.__value_.__r.__words[2])
              {
                v568 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
                do
                  v569 = __ldxr(v568);
                while (__stxr(v569 + 1, v568));
              }
              v570 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
              object[1].i64[1] = v567;
              object[2].i64[0] = *((_QWORD *)&v769 + 1);
              if (*((_QWORD *)&v769 + 1))
              {
                v571 = (unint64_t *)(*((_QWORD *)&v769 + 1) + 8);
                do
                  v572 = __ldxr(v571);
                while (__stxr(v572 + 1, v571));
                object[2].i64[1] = v567;
                do
                  v573 = __ldaxr(v571);
                while (__stlxr(v573 - 1, v571));
                if (!v573)
                {
                  ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                  std::__shared_weak_count::__release_weak(v570);
                }
              }
              else
              {
                object[2].i64[1] = v567;
              }
              v603 = (std::__shared_weak_count *)v768.__r_.__value_.__r.__words[2];
              if (v768.__r_.__value_.__r.__words[2])
              {
                v604 = (unint64_t *)(v768.__r_.__value_.__r.__words[2] + 8);
                do
                  v605 = __ldaxr(v604);
                while (__stlxr(v605 - 1, v604));
                if (!v605)
                {
                  ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
                  std::__shared_weak_count::__release_weak(v603);
                }
              }
              v606 = object[0].i64[0];
              if (*(char *)(object[2].i64[1] + 31) >= 0)
                v607 = object[2].i64[1] + 8;
              else
                v607 = *(_QWORD *)(object[2].i64[1] + 8);
              v608 = _os_log_pack_fill();
              *(_DWORD *)v608 = 136315138;
              *(_QWORD *)(v608 + 4) = v607;
              v609 = operator new();
              v610 = *(unsigned __int8 *)(v429 + 39);
              v611 = v757;
              if ((v610 & 0x80u) != 0)
              {
                v611 = *(const char **)(v429 + 16);
                v610 = *(_QWORD *)(v429 + 24);
              }
              *(_QWORD *)v609 = v606;
              *(int32x4_t *)(v609 + 8) = *(int32x4_t *)((char *)object + 8);
              object[0].i64[1] = 0;
              object[1].i64[0] = 0;
              *(int32x4_t *)(v609 + 24) = *(int32x4_t *)((char *)&object[1] + 8);
              object[1].i64[1] = 0;
              object[2].i64[0] = 0;
              *(_QWORD *)(v609 + 40) = v611;
              *(_QWORD *)(v609 + 48) = v610;
              *(_BYTE *)(v609 + 56) = 2;
              __src = 0;
              v768.__r_.__value_.__r.__words[0] = v609;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v428 + 24) + 40))(*(_QWORD *)(v428 + 24), &v768);
              v612 = v768.__r_.__value_.__r.__words[0];
              v768.__r_.__value_.__r.__words[0] = 0;
              if (v612)
              {
                v613 = *(std::__shared_weak_count **)(v612 + 32);
                if (v613)
                {
                  v614 = (unint64_t *)&v613->__shared_owners_;
                  do
                    v615 = __ldaxr(v614);
                  while (__stlxr(v615 - 1, v614));
                  if (!v615)
                  {
                    ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
                    std::__shared_weak_count::__release_weak(v613);
                  }
                }
                v616 = *(std::__shared_weak_count **)(v612 + 16);
                if (v616)
                {
                  v617 = (unint64_t *)&v616->__shared_owners_;
                  do
                    v618 = __ldaxr(v617);
                  while (__stlxr(v618 - 1, v617));
                  if (!v618)
                  {
                    ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
                    std::__shared_weak_count::__release_weak(v616);
                  }
                }
                MEMORY[0x227684CE8](v612, 0x10F0C40B62ED6C6);
                v619 = __src;
                __src = 0;
                if (v619)
                {
                  v620 = (std::__shared_weak_count *)*((_QWORD *)v619 + 4);
                  if (v620)
                  {
                    v621 = (unint64_t *)&v620->__shared_owners_;
                    do
                      v622 = __ldaxr(v621);
                    while (__stlxr(v622 - 1, v621));
                    if (!v622)
                    {
                      ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
                      std::__shared_weak_count::__release_weak(v620);
                    }
                  }
                  v623 = (std::__shared_weak_count *)*((_QWORD *)v619 + 2);
                  if (v623)
                  {
                    v624 = (unint64_t *)&v623->__shared_owners_;
                    do
                      v625 = __ldaxr(v624);
                    while (__stlxr(v625 - 1, v624));
                    if (!v625)
                    {
                      ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
                      std::__shared_weak_count::__release_weak(v623);
                    }
                  }
                  MEMORY[0x227684CE8](v619, 0x10F0C40B62ED6C6);
                }
              }
              v626 = (std::__shared_weak_count *)object[2].i64[0];
              if (object[2].i64[0])
              {
                v627 = (unint64_t *)(object[2].i64[0] + 8);
                do
                  v628 = __ldaxr(v627);
                while (__stlxr(v628 - 1, v627));
                if (!v628)
                {
                  ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
                  std::__shared_weak_count::__release_weak(v626);
                  v629 = (std::__shared_weak_count *)object[1].i64[0];
                  if (object[1].i64[0])
                    goto LABEL_1032;
                  goto LABEL_1035;
                }
              }
              v629 = (std::__shared_weak_count *)object[1].i64[0];
              if (!object[1].i64[0])
                goto LABEL_1035;
LABEL_1032:
              v630 = (unint64_t *)&v629->__shared_owners_;
              do
                v631 = __ldaxr(v630);
              while (__stlxr(v631 - 1, v630));
              if (v631)
              {
LABEL_1035:
                if (v426)
                  goto LABEL_1036;
LABEL_1037:
                sub_223182C08((uint64_t)oslog);
                v632 = v791;
                if (v791)
                {
                  v633 = (unint64_t *)&v791->__shared_owners_;
                  do
                    v634 = __ldaxr(v633);
                  while (__stlxr(v634 - 1, v633));
                  if (!v634)
                  {
                    ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
                    std::__shared_weak_count::__release_weak(v632);
                  }
                }
LABEL_1042:
                v6 = a5;
                ++*(_DWORD *)(a5 + 80);
                goto LABEL_1173;
              }
              ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
              std::__shared_weak_count::__release_weak(v629);
              if (!v426)
                goto LABEL_1037;
            }
            else
            {
              os_log_type_enabled(v498, OS_LOG_TYPE_DEBUG);
              object[0].i32[0] = 136315138;
              *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)&__s;
              v507 = (void *)_os_log_send_and_compose_impl();
              if (!v507)
                goto LABEL_1035;
              free(v507);
              if (!v426)
                goto LABEL_1037;
            }
LABEL_1036:
            sub_2245664AC((unsigned __int8 *)v405, object);
            sub_22322C138((uint64_t)oslog, "Unusable AU(%s)", object[0].i8);
            sub_223182C08((uint64_t)oslog);
            goto LABEL_1037;
          }
        }
        memmove(v494, v492, v493);
        goto LABEL_816;
      }
      v725 = (unsigned __int8 *)v405;
      v410 = v407[7].i8[1];
      if ((v410 & 0x10) != 0)
      {
        v411 = sub_2231D77B8(v407[7].u8[1], 4, v408);
        v409[7].i8[0] = 1;
        v409[7].i8[1] = v411;
      }
      v412 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v740, *(float *)v729), v743, (float32x2_t)v729[0], 1), v748, *(float32x4_t *)v729, 2), *(float32x4_t *)v756, *(float32x4_t *)v729, 3);
      v413 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v740, v731.f32[0]), v743, *(float32x2_t *)v731.f32, 1), v748, v731, 2), *(float32x4_t *)v756, v731, 3);
      v414 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v740, v735.f32[0]), v743, *(float32x2_t *)v735.f32, 1), v748, v735, 2), *(float32x4_t *)v756, v735, 3);
      v415 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v740, v746.f32[0]), v743, *(float32x2_t *)v746.f32, 1), v748, v746, 2), *(float32x4_t *)v756, v746, 3);
      v416 = v409[4];
      v417 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v412, COERCE_FLOAT(*(_OWORD *)&v409[2])), v413, *(float32x2_t *)v409[2].f32, 1), v414, v409[2], 2), v415, v409[2], 3);
      v418 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v412, COERCE_FLOAT(*(_OWORD *)&v409[3])), v413, *(float32x2_t *)v409[3].f32, 1), v414, v409[3], 2), v415, v409[3], 3);
      v744 = (int8x16_t)v414;
      v747 = (int32x4_t)v412;
      v736 = v415;
      *(float32x4_t *)v741 = v413;
      object[0] = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v412, COERCE_FLOAT(*(_OWORD *)&v409[1])), v413, *(float32x2_t *)v409[1].f32, 1), v414, v409[1], 2), v415, v409[1], 3);
      object[1] = (int32x4_t)v417;
      object[2] = (int32x4_t)v418;
      object[3] = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v412, v416.f32[0]), v413, *(float32x2_t *)v416.f32, 1), v414, v416, 2), v415, v416, 3);
      memset(oslog, 0, 24);
      v768.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      v768.__r_.__value_.__l.__size_ = 0;
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
      __s.__r_.__value_.__l.__size_ = 0;
      sub_2236763FC((float32x2_t **)&v768, (float **)&__s);
      v419 = *(int8x16_t *)oslog;
      v420 = (float32x2_t)vextq_s8(v419, v419, 8uLL).u64[0];
      v421 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v419.i8, *(float32x2_t *)v419.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)oslog, 1), *(float32x2_t *)oslog, 1), v420, v420).f32[0];
      if (v421 >= 0.0061)
      {
        v433 = sqrtf(v421);
        v749 = v421;
        *(_OWORD *)v758 = *(_OWORD *)oslog;
        v434 = __sincosf_stret(v433);
        v421 = v749;
        v419 = *(int8x16_t *)v758;
        v424 = v434.__sinval / v433;
        v422 = (float)(1.0 / v749) * (float)(1.0 - v434.__cosval);
        v423 = (float)(1.0 / v749) * (float)(1.0 - (float)(v434.__sinval / v433));
        if (v749 < 0.00000149)
        {
LABEL_736:
          v425 = (float)(v421 * 0.000033069) + (float)((float)(v421 * 0.0013889) + 0.083333);
          goto LABEL_738;
        }
      }
      else
      {
        v422 = 0.5 - (float)(v421 * (float)((float)(v421 / -720.0) + 0.041667));
        v423 = 0.16667 - (float)(v421 * (float)((float)(v421 / -5040.0) + 0.0083333));
        v424 = 1.0 - (float)(v421 * v423);
        if (v421 < 0.00000149)
          goto LABEL_736;
      }
      if (v421 <= 9.0)
        v425 = (float)((float)(v422 * 0.5) - v423) / v424;
      else
        v425 = (float)(v422 + (float)(v424 * -0.5)) / (float)(v421 * v422);
LABEL_738:
      v435 = (float32x4_t)vextq_s8(vextq_s8(v419, v419, 0xCuLL), v419, 8uLL);
      v436 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v419, (int32x4_t)v419), v419, 0xCuLL);
      v437 = (int8x16_t)vsubq_f32(vmulq_f32(v435, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(object[3], object[3]), (int8x16_t)object[3], 0xCuLL)), vmulq_f32(v436, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)object[3], (int8x16_t)object[3], 0xCuLL), (int8x16_t)object[3], 8uLL)));
      v438.i64[0] = 0xBF000000BF000000;
      v438.i64[1] = 0xBF000000BF000000;
      v439 = vaddq_f32(vaddq_f32((float32x4_t)object[3], vmulq_f32((float32x4_t)v437, v438)), vmulq_n_f32(vsubq_f32(vmulq_f32(v435, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v437, (int32x4_t)v437), v437, 0xCuLL)), vmulq_f32(v436, (float32x4_t)vextq_s8(vextq_s8(v437, v437, 0xCuLL), v437, 8uLL))), v425));
      *(_DWORD *)&oslog[20] = v439.i32[2];
      *(_QWORD *)&oslog[12] = v439.i64[0];
      v440 = vabsq_f32(*(float32x4_t *)oslog);
      v441 = (int8x16_t)vcvt_hight_f64_f32(v440);
      v750 = (int8x16_t)vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vabsq_f32(*(float32x4_t *)&oslog[16]));
      v759 = vcvtq_f64_f32(*(float32x2_t *)v440.f32);
      if (v409[7].i8[0] != 1
        || (*(_QWORD *)&v442.f64[0] = v441.i64[0],
            v442.f64[1] = NAN,
            vmaxnmvq_f64(vmaxnmq_f64(v759, v442)) >= 0.00872664619)
        || (v443 = (float64x2_t)vdupq_lane_s64(0xFFF8000000000000, 0),
            *(_QWORD *)&v443.f64[0] = v750.i64[1],
            vmaxnmvq_f64(vmaxnmq_f64((float64x2_t)vextq_s8(v441, v750, 8uLL), v443)) >= 0.0299999993))
      {
        v732 = v441;
        sub_223821DD4(&v767);
        v405 = (uint64_t *)v725;
        if (**(int **)(v767.__r_.__value_.__r.__words[0] + 56) > 3
          || (v454 = *(unsigned __int8 *)(v767.__r_.__value_.__r.__words[0] + 72),
              v455 = sub_22322F254((uint64_t)v767.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0),
              v456 = v455,
              !v454)
          && !v455)
        {
          v457 = v409[7].u8[1];
          if (v409[7].i8[0] != 1)
            goto LABEL_761;
          goto LABEL_762;
        }
        sub_223195210((uint64_t)object);
        v482 = v732;
        *(_QWORD *)&v483.f64[0] = vextq_s8(v482, v482, 8uLL).u64[0];
        v484 = (int8x16_t)v759;
        v484.i64[1] = vextq_s8(v484, v484, 8uLL).u64[0];
        v765 = v409[7].i8[0];
        v482.i64[1] = 0xFFF8000000000000;
        *(_QWORD *)&v483.f64[1] = v750.i64[0];
        v485 = (float64x2_t)vdupq_lane_s64(0xFFF8000000000000, 0);
        *(_QWORD *)v792 = vmaxnmvq_f64(vmaxnmq_f64((float64x2_t)v484, (float64x2_t)v482));
        *(_QWORD *)&v485.f64[0] = vextq_s8(v750, v750, 8uLL).u64[0];
        v766 = vmaxnmvq_f64(vmaxnmq_f64(v483, v485));
        v764 = (double)*a4 / 1000000000.0;
        LODWORD(v769) = 0;
        sub_2231B0F48(&v768, "[ProcessPoseUpdate] Updating ");
        sub_22319B83C((uint64_t)&v776, (uint64_t)&v768, (unsigned __int8 *)v409);
        *(_QWORD *)oslog = &v768;
        *(_QWORD *)&oslog[8] = " state: ";
        *(_QWORD *)&oslog[16] = &v768;
        *(_QWORD *)&oslog[24] = " state: ";
        *(_QWORD *)&oslog[32] = " state: ";
        if ((_DWORD)v769 == -1)
          sub_22316DD70();
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
        ((void (*)(std::string *, std::string *))off_24EC5B1A8[v769])(&__s, &v768);
        sub_223847110(&__s, &v765);
        *(_QWORD *)oslog = &v768;
        *(_QWORD *)&oslog[8] = &__s;
        *(_QWORD *)&oslog[16] = &v768;
        *(_QWORD *)&oslog[24] = &__s;
        *(_QWORD *)&oslog[32] = &__s;
        if ((_DWORD)v769 == -1)
          sub_22316DD70();
        *(_QWORD *)v793 = oslog;
        ((void (*)(_BYTE *, std::string *))off_24EC5B0E8[v769])(v793, &v768);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        *(_QWORD *)oslog = &v768;
        *(_QWORD *)&oslog[8] = " ΔR: ";
        *(_QWORD *)&oslog[16] = &v768;
        *(_QWORD *)&oslog[24] = " ΔR: ";
        *(_QWORD *)&oslog[32] = " ΔR: ";
        if ((_DWORD)v769 == -1)
          sub_22316DD70();
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
        ((void (*)(std::string *, std::string *))off_24EC5B190[v769])(&__s, &v768);
        sub_2233B45E8((uint64_t)&v775, (uint64_t)&v768, (double *)v792);
        *(_QWORD *)oslog = &v768;
        *(_QWORD *)&oslog[8] = " ΔT: ";
        *(_QWORD *)&oslog[16] = &v768;
        *(_QWORD *)&oslog[24] = " ΔT: ";
        *(_QWORD *)&oslog[32] = " ΔT: ";
        if ((_DWORD)v769 == -1)
          sub_22316DD70();
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
        ((void (*)(std::string *, std::string *))off_24EC5B190[v769])(&__s, &v768);
        sub_2233B45E8((uint64_t)&v774, (uint64_t)&v768, (double *)&v766);
        *(_QWORD *)oslog = &v768;
        *(_QWORD *)&oslog[8] = " t: ";
        *(_QWORD *)&oslog[16] = &v768;
        *(_QWORD *)&oslog[24] = " t: ";
        *(_QWORD *)&oslog[32] = " t: ";
        if ((_DWORD)v769 == -1)
          sub_22316DD70();
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
        ((void (*)(std::string *, std::string *))off_24EC5B1C0[v769])(&__s, &v768);
        sub_223701C90((uint64_t *)&v764, &__s);
        *(_QWORD *)oslog = &v768;
        *(_QWORD *)&oslog[8] = &__s;
        *(_QWORD *)&oslog[16] = &v768;
        *(_QWORD *)&oslog[24] = &__s;
        *(_QWORD *)&oslog[32] = &__s;
        if ((_DWORD)v769 == -1)
          sub_22316DD70();
        *(_QWORD *)v793 = oslog;
        ((void (*)(_BYTE *, std::string *))off_24EC5B0E8[v769])(v793, &v768);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if ((_DWORD)v769 == -1)
          sub_22316DD70();
        *(_QWORD *)oslog = &__s;
        ((void (*)(void **__return_ptr, _BYTE *, std::string *))off_24EC5B118[v769])(&__src, oslog, &v768);
        if ((_DWORD)v769 != -1)
          ((void (*)(_BYTE *, std::string *))off_24EC5B100[v769])(oslog, &v768);
        if (v778 >= 0)
          v486 = (const char *)&__src;
        else
          v486 = (const char *)__src;
        v487 = strlen(v486);
        sub_2231813E8((int32x4_t *)object[1].i64, (uint64_t)v486, v487);
        if ((SHIBYTE(v778) & 0x80000000) == 0)
        {
          v488 = v785;
          if ((v785 & 0x10) == 0)
            goto LABEL_796;
LABEL_880:
          v525 = v784;
          v526 = (const void **)&v780;
          if (v784 < v781)
          {
            v784 = v781;
            v525 = v781;
            v526 = (const void **)&v780;
          }
LABEL_883:
          v527 = *v526;
          v489 = v525 - (_QWORD)*v526;
          if (v489 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v489 >= 0x17)
          {
            v528 = (v489 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v489 | 7) != 0x17)
              v528 = v489 | 7;
            v529 = v528 + 1;
            v490 = operator new(v528 + 1);
            *(_QWORD *)&v793[8] = v489;
            *(_QWORD *)&v793[16] = v529 | 0x8000000000000000;
            *(_QWORD *)v793 = v490;
          }
          else
          {
            v793[23] = v525 - *(_BYTE *)v526;
            v490 = v793;
            if (!v489)
              goto LABEL_891;
          }
          memmove(v490, v527, v489);
          goto LABEL_891;
        }
        operator delete(__src);
        v488 = v785;
        if ((v785 & 0x10) != 0)
          goto LABEL_880;
LABEL_796:
        if ((v488 & 8) != 0)
        {
          v525 = object[3].i64[1];
          v526 = (const void **)&object[2].i64[1];
          goto LABEL_883;
        }
        v489 = 0;
        v793[23] = 0;
        v490 = v793;
LABEL_891:
        v490[v489] = 0;
        v768.__r_.__value_.__r.__words[0] = (std::string::size_type)&v767;
        v768.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v768.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v769) = 3;
        *((_QWORD *)&v769 + 1) = "unknown file";
        LODWORD(v770) = 594;
        v771 = "unknown function";
        v772 = 0;
        v773 = 0;
        v530 = v793;
        if (v793[23] < 0)
          v530 = *(const char **)v793;
        v761 = v530;
        v531 = *(_QWORD *)v768.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v533 = *(const char **)(v531 + 16);
          v532 = *(_QWORD *)(v531 + 24);
          v752 = *(_QWORD *)v768.__r_.__value_.__l.__data_ + 16;
          v535 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v535 & 1) == 0)
          {
LABEL_1197:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&__s);
              sub_223199C58("com.apple.cv3d", (unint64_t)&__s, byte_255788F40);
              if ((_BYTE)v795 && SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v532 = *(unsigned __int8 *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 39);
          v533 = (const char *)(*(_QWORD *)v768.__r_.__value_.__l.__data_ + 16);
          v752 = (uint64_t)v533;
          v534 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v534 & 1) == 0)
            goto LABEL_1197;
        }
        if (byte_255788F40[23] >= 0)
          v536 = byte_255788F40;
        else
          v536 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v537 = byte_255788F40[23];
        else
          v537 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)oslog = os_log_create(v536, v533);
        if (v537 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v537 >= 0x17)
        {
          v733 = v532;
          v539 = v406;
          v540 = v533;
          v541 = v456;
          v542 = v531;
          v543 = v454;
          v544 = (v537 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v537 | 7) != 0x17)
            v544 = v537 | 7;
          v545 = v544 + 1;
          v538 = operator new(v544 + 1);
          *(_QWORD *)&oslog[24] = v545 | 0x8000000000000000;
          *(_QWORD *)&oslog[8] = v538;
          *(_QWORD *)&oslog[16] = v537;
          v454 = v543;
          v531 = v542;
          v456 = v541;
          v533 = v540;
          v406 = v539;
          v532 = v733;
        }
        else
        {
          oslog[31] = v537;
          v538 = &oslog[8];
          if (!v537)
          {
LABEL_911:
            v538[v537] = 0;
            oslog[32] = 1;
            if (v532 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v532 >= 0x17)
            {
              v548 = (v532 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v532 | 7) != 0x17)
                v548 = v532 | 7;
              v549 = v548 + 1;
              v546 = operator new(v548 + 1);
              v790 = v549 | 0x8000000000000000;
              v788 = v546;
              v789 = (const char *)v532;
            }
            else
            {
              HIBYTE(v790) = v532;
              v546 = &v788;
              if (!v532)
              {
                LOBYTE(v788) = 0;
                LOBYTE(v791) = 1;
                v547 = *(NSObject **)oslog;
                if ((SHIBYTE(v790) & 0x80000000) == 0)
                  goto LABEL_915;
LABEL_921:
                operator delete(v788);
                v6 = a5;
                if (oslog[32])
                  goto LABEL_922;
                goto LABEL_924;
              }
            }
            memmove(v546, v533, v532);
            *((_BYTE *)v546 + v532) = 0;
            LOBYTE(v791) = 1;
            v547 = *(NSObject **)oslog;
            if (SHIBYTE(v790) < 0)
              goto LABEL_921;
LABEL_915:
            v6 = a5;
            if (oslog[32])
            {
LABEL_922:
              if ((oslog[31] & 0x80000000) != 0)
                operator delete(*(void **)&oslog[8]);
            }
LABEL_924:
            if (*(_QWORD *)oslog)
              os_release(*(void **)oslog);
            if (v456 && *(_QWORD *)(v456 + 24))
            {
              v550 = _os_log_pack_size();
              v551 = operator new(v550, (std::align_val_t)8uLL);
              v552 = (_QWORD *)operator new();
              *v552 = &off_24EC1F7F0;
              v552[1] = 0;
              v552[2] = 0;
              v552[3] = v551;
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v551;
              __s.__r_.__value_.__l.__size_ = (std::string::size_type)v551;
              __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v552;
              v795 = 0;
              v796 = 0;
              v553 = strlen(v761);
              if (v553 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v554 = v553;
              if (v553 >= 0x17)
              {
                v587 = (v553 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v553 | 7) != 0x17)
                  v587 = v553 | 7;
                v588 = v587 + 1;
                v555 = operator new(v587 + 1);
                *((_QWORD *)&v778 + 1) = v588 | 0x8000000000000000;
                __src = v555;
                *(_QWORD *)&v778 = v554;
              }
              else
              {
                HIBYTE(v778) = v553;
                v555 = &__src;
                if (!v553)
                {
                  v556 = v454;
LABEL_978:
                  *((_BYTE *)v555 + v554) = 0;
                  v589 = __src;
                  *(_QWORD *)v792 = v778;
                  *(_QWORD *)&v792[7] = *(_QWORD *)((char *)&v778 + 7);
                  v590 = HIBYTE(v778);
                  v591 = operator new(0x38uLL);
                  v591[1] = 0;
                  v591[2] = 0;
                  v591[3] = off_24EC1FA48;
                  *v591 = &off_24EC1F9F8;
                  v592 = *(_QWORD *)v792;
                  v591[4] = v589;
                  v591[5] = v592;
                  *(_QWORD *)((char *)v591 + 47) = *(_QWORD *)&v792[7];
                  *((_BYTE *)v591 + 55) = v590;
                  *(_QWORD *)v792 = 0;
                  *(_QWORD *)&v792[7] = 0;
                  v593 = v796;
                  v795 = (char *)(v591 + 3);
                  v796 = (std::__shared_weak_count *)v591;
                  v6 = a5;
                  v454 = v556;
                  if (v593)
                  {
                    v594 = (unint64_t *)&v593->__shared_owners_;
                    do
                      v595 = __ldaxr(v594);
                    while (__stlxr(v595 - 1, v594));
                    if (!v595)
                    {
                      ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
                      std::__shared_weak_count::__release_weak(v593);
                    }
                  }
                  *(std::string *)oslog = __s;
                  v596 = v795;
                  if (__s.__r_.__value_.__r.__words[2])
                  {
                    v597 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                    do
                      v598 = __ldxr(v597);
                    while (__stxr(v598 + 1, v597));
                  }
                  v599 = v796;
                  *(_QWORD *)&oslog[24] = v596;
                  *(_QWORD *)&oslog[32] = v796;
                  if (v796)
                  {
                    v600 = (unint64_t *)&v796->__shared_owners_;
                    do
                      v601 = __ldxr(v600);
                    while (__stxr(v601 + 1, v600));
                    v788 = v596;
                    do
                      v602 = __ldaxr(v600);
                    while (__stlxr(v602 - 1, v600));
                    if (!v602)
                    {
                      ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                      std::__shared_weak_count::__release_weak(v599);
                    }
                  }
                  else
                  {
                    v788 = v596;
                  }
                  v635 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                  if (__s.__r_.__value_.__r.__words[2])
                  {
                    v636 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                    do
                      v637 = __ldaxr(v636);
                    while (__stlxr(v637 - 1, v636));
                    if (!v637)
                    {
                      ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
                      std::__shared_weak_count::__release_weak(v635);
                    }
                  }
                  v638 = *(_QWORD *)oslog;
                  if (*((char *)v788 + 31) >= 0)
                    v639 = (char *)v788 + 8;
                  else
                    v639 = (char *)*((_QWORD *)v788 + 1);
                  v640 = _os_log_pack_fill();
                  *(_DWORD *)v640 = 136315138;
                  *(_QWORD *)(v640 + 4) = v639;
                  v641 = operator new();
                  v642 = *(unsigned __int8 *)(v531 + 39);
                  v643 = v752;
                  if ((v642 & 0x80u) != 0)
                  {
                    v643 = *(_QWORD *)(v531 + 16);
                    v642 = *(_QWORD *)(v531 + 24);
                  }
                  *(_QWORD *)v641 = v638;
                  *(_OWORD *)(v641 + 8) = *(_OWORD *)&oslog[8];
                  *(_QWORD *)&oslog[8] = 0;
                  *(_QWORD *)&oslog[16] = 0;
                  *(_OWORD *)(v641 + 24) = *(_OWORD *)&oslog[24];
                  *(_QWORD *)&oslog[24] = 0;
                  *(_QWORD *)&oslog[32] = 0;
                  *(_QWORD *)(v641 + 40) = v643;
                  *(_QWORD *)(v641 + 48) = v642;
                  *(_BYTE *)(v641 + 56) = 1;
                  __src = 0;
                  __s.__r_.__value_.__r.__words[0] = v641;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v456 + 24) + 40))(*(_QWORD *)(v456 + 24), &__s);
                  v644 = __s.__r_.__value_.__r.__words[0];
                  __s.__r_.__value_.__r.__words[0] = 0;
                  v405 = (uint64_t *)v725;
                  if (v644)
                  {
                    v645 = *(std::__shared_weak_count **)(v644 + 32);
                    if (v645)
                    {
                      v646 = (unint64_t *)&v645->__shared_owners_;
                      do
                        v647 = __ldaxr(v646);
                      while (__stlxr(v647 - 1, v646));
                      if (!v647)
                      {
                        ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                        std::__shared_weak_count::__release_weak(v645);
                      }
                    }
                    v648 = *(std::__shared_weak_count **)(v644 + 16);
                    if (v648)
                    {
                      v649 = (unint64_t *)&v648->__shared_owners_;
                      do
                        v650 = __ldaxr(v649);
                      while (__stlxr(v650 - 1, v649));
                      if (!v650)
                      {
                        ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                        std::__shared_weak_count::__release_weak(v648);
                      }
                    }
                    MEMORY[0x227684CE8](v644, 0x10F0C40B62ED6C6);
                    v651 = __src;
                    __src = 0;
                    if (v651)
                    {
                      v652 = (std::__shared_weak_count *)*((_QWORD *)v651 + 4);
                      if (v652)
                      {
                        v653 = (unint64_t *)&v652->__shared_owners_;
                        do
                          v654 = __ldaxr(v653);
                        while (__stlxr(v654 - 1, v653));
                        if (!v654)
                        {
                          ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
                          std::__shared_weak_count::__release_weak(v652);
                        }
                      }
                      v655 = (std::__shared_weak_count *)*((_QWORD *)v651 + 2);
                      if (v655)
                      {
                        v656 = (unint64_t *)&v655->__shared_owners_;
                        do
                          v657 = __ldaxr(v656);
                        while (__stlxr(v657 - 1, v656));
                        if (!v657)
                        {
                          ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
                          std::__shared_weak_count::__release_weak(v655);
                        }
                      }
                      MEMORY[0x227684CE8](v651, 0x10F0C40B62ED6C6);
                    }
                  }
                  v658 = *(std::__shared_weak_count **)&oslog[32];
                  if (*(_QWORD *)&oslog[32])
                  {
                    v659 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                    do
                      v660 = __ldaxr(v659);
                    while (__stlxr(v660 - 1, v659));
                    if (!v660)
                    {
                      ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
                      std::__shared_weak_count::__release_weak(v658);
                      v661 = *(std::__shared_weak_count **)&oslog[16];
                      if (*(_QWORD *)&oslog[16])
                        goto LABEL_1082;
                      goto LABEL_1085;
                    }
                  }
                  v661 = *(std::__shared_weak_count **)&oslog[16];
                  if (!*(_QWORD *)&oslog[16])
                    goto LABEL_1085;
LABEL_1082:
                  v662 = (unint64_t *)&v661->__shared_owners_;
                  do
                    v663 = __ldaxr(v662);
                  while (__stlxr(v663 - 1, v662));
                  if (v663)
                  {
LABEL_1085:
                    if (v454)
                      goto LABEL_1086;
LABEL_1089:
                    sub_223182C08((uint64_t)&v768);
                    v665 = v773;
                    if (!v773)
                      goto LABEL_1093;
                    v666 = (unint64_t *)&v773->__shared_owners_;
                    do
                      v667 = __ldaxr(v666);
                    while (__stlxr(v667 - 1, v666));
                    if (!v667)
                    {
                      ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
                      std::__shared_weak_count::__release_weak(v665);
                      if ((v793[23] & 0x80000000) != 0)
LABEL_1094:
                        operator delete(*(void **)v793);
                    }
                    else
                    {
LABEL_1093:
                      if ((v793[23] & 0x80000000) != 0)
                        goto LABEL_1094;
                    }
                    object[0].i64[0] = (uint64_t)v711;
                    *(uint64_t *)((char *)object[0].i64 + *(v711 - 3)) = v710;
                    object[1].i64[0] = v709;
                    object[1].i64[1] = (uint64_t)v708;
                    if (v783 < 0)
                      operator delete(v782);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](v786);
                    v457 = v409[7].u8[1];
                    if (v409[7].i8[0] != 1)
                    {
LABEL_761:
                      v458 = sub_2231D77B8(v457, 2, v453);
                      v457 = sub_2231D77B8(v458, 4, v459);
                      v460 = sub_2231D793C(v409[7].u8[2], v457, 0);
                      v409[7].i8[0] = 1;
                      v409[7].i8[1] = v457;
                      v409[7].i8[2] = v460;
                      ++*(_DWORD *)(v6 + 8);
                    }
LABEL_762:
                    v461 = sub_2231D77B8(v457, 4, v453);
                    v462 = v461;
                    v463 = sub_2231D793C(v409[7].u8[2], v461, 0);
                    v409[7].i8[0] = 1;
                    v409[7].i8[1] = v462;
                    v464.i64[0] = vzip1q_s32(v747, *(int32x4_t *)v741).u64[0];
                    v465 = (int8x16_t)vnegq_f32(v736);
                    v464.i64[1] = v744.u32[0];
                    v466 = (int8x16_t)vtrn2q_s32(v747, *(int32x4_t *)v741);
                    v466.i32[2] = v744.i32[1];
                    v467 = (int8x16_t)vzip2q_s32(v747, *(int32x4_t *)v741);
                    *(float32x2_t *)v468.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v464.f32, *(float *)v465.i32), *(float32x2_t *)v466.i8, *(float32x2_t *)v736.f32, 1), *(float32x2_t *)v467.i8, v736, 2);
                    v467.i32[2] = v744.i32[2];
                    v469 = vdupq_laneq_s32((int32x4_t)v467, 2).u32[0];
                    v468.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v744.i8, *(float32x2_t *)v465.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v744.i8, 1), *(float32x2_t *)v736.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v465, v465, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v744, v744, 8uLL)).u32[0]);
                    v470 = vextq_s8(vextq_s8(v466, v466, 0xCuLL), v467, 8uLL);
                    v467.i64[0] = __PAIR64__(v470.u32[0], v466.u32[0]);
                    v409[7].i8[2] = v463;
                    v467.i64[1] = v470.u32[1];
                    v466.i64[0] = v470.i64[1];
                    v466.i64[1] = v469;
                    v409[1] = v464;
                    v409[2] = (float32x4_t)v467;
                    v409[3] = (float32x4_t)v466;
                    v409[4] = v468;
                    v409[5].i64[1] = *a4;
                    sub_2231A9984(v763, (unsigned __int8 *)v405, v405);
                    v472 = *(_OWORD **)(v6 + 48);
                    v471 = *(_QWORD *)(v6 + 56);
                    if ((unint64_t)v472 < v471)
                    {
                      *v472 = *(_OWORD *)v405;
                      v473 = v472 + 1;
                      v5 = a1;
LABEL_777:
                      *(_QWORD *)(v6 + 48) = v473;
                      goto LABEL_1173;
                    }
                    v474 = (_OWORD *)*v716;
                    v475 = ((uint64_t)v472 - *v716) >> 4;
                    v476 = v475 + 1;
                    if ((unint64_t)(v475 + 1) >> 60)
                      sub_22316E078();
                    v477 = v471 - (_QWORD)v474;
                    if (v477 >> 3 > v476)
                      v476 = v477 >> 3;
                    if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF0)
                      v478 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v478 = v476;
                    if (v478)
                    {
                      if (v478 >> 60)
                        sub_223174E94();
                      v479 = (char *)operator new(16 * v478);
                      v480 = &v479[16 * v475];
                      *(_OWORD *)v480 = *(_OWORD *)v405;
                      v481 = (uint64_t)v480;
                      if (v472 != v474)
                        goto LABEL_773;
LABEL_799:
                      v5 = a1;
                      v473 = v480 + 16;
                      *(_QWORD *)(v6 + 40) = v481;
                      *(_QWORD *)(v6 + 48) = v480 + 16;
                      *(_QWORD *)(v6 + 56) = &v479[16 * v478];
                      if (!v472)
                        goto LABEL_777;
                    }
                    else
                    {
                      v479 = 0;
                      v480 = (char *)(16 * v475);
                      *(_OWORD *)(16 * v475) = *(_OWORD *)v405;
                      v481 = 16 * v475;
                      if (v472 == v474)
                        goto LABEL_799;
LABEL_773:
                      v5 = a1;
                      do
                      {
                        *(_OWORD *)(v481 - 16) = *(v472 - 1);
                        v481 -= 16;
                        --v472;
                      }
                      while (v472 != v474);
                      v472 = (_OWORD *)*v716;
                      v473 = v480 + 16;
                      *(_QWORD *)(v6 + 40) = v481;
                      *(_QWORD *)(v6 + 48) = v480 + 16;
                      *(_QWORD *)(v6 + 56) = &v479[16 * v478];
                      if (!v472)
                        goto LABEL_777;
                    }
                    operator delete(v472);
                    goto LABEL_777;
                  }
                  ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
                  std::__shared_weak_count::__release_weak(v661);
                  if (!v454)
                    goto LABEL_1089;
LABEL_1086:
                  v664 = v793;
                  if (v793[23] < 0)
                    v664 = *(const char **)v793;
                  sub_22322C138((uint64_t)&v768, "%s", v664);
                  sub_223182C08((uint64_t)&v768);
                  goto LABEL_1089;
                }
              }
              v556 = v454;
              memcpy(v555, v761, v554);
              goto LABEL_978;
            }
            os_log_type_enabled(v547, OS_LOG_TYPE_INFO);
            *(_DWORD *)oslog = 136315138;
            *(_QWORD *)&oslog[4] = v761;
            v557 = (void *)_os_log_send_and_compose_impl();
            v405 = (uint64_t *)v725;
            if (!v557)
              goto LABEL_1085;
            free(v557);
            if (!v454)
              goto LABEL_1089;
            goto LABEL_1086;
          }
        }
        memmove(v538, v536, v537);
        goto LABEL_911;
      }
      memset(&v767, 0, sizeof(v767));
      if ((v410 & 0x10) != 0)
      {
        v793[0] = v409[7].i8[1] & 0xFB;
        *(_DWORD *)&oslog[24] = -1;
        *(_QWORD *)oslog = operator new(0x40uLL);
        *(_OWORD *)&oslog[8] = xmmword_2245C4440;
        strcpy(*(char **)oslog, "(was external, removing pose update, setting update state to ");
        *(_DWORD *)&oslog[24] = 1;
        sub_22356F9F4((uint64_t)&__src, (uint64_t)oslog, v793);
        object[0].i64[0] = (uint64_t)oslog;
        object[0].i64[1] = (uint64_t)")";
        object[1].i64[0] = (uint64_t)oslog;
        object[1].i64[1] = (uint64_t)")";
        object[2].i64[0] = (uint64_t)")";
        if (*(_DWORD *)&oslog[24] == -1)
          sub_22316DD70();
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
        ((void (*)(std::string *, _BYTE *))off_24EC5B178[*(unsigned int *)&oslog[24]])(&__s, oslog);
        if (*(_DWORD *)&oslog[24] == -1)
          sub_22316DD70();
        object[0].i64[0] = (uint64_t)&__s;
        ((void (*)(std::string *__return_ptr, int32x4_t *, _BYTE *))off_24EC5B118[*(unsigned int *)&oslog[24]])(&v768, object, oslog);
        if (*(_DWORD *)&oslog[24] != -1)
          ((void (*)(int32x4_t *, _BYTE *))off_24EC5B100[*(unsigned int *)&oslog[24]])(object, oslog);
        if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v767.__r_.__value_.__l.__data_);
        v767 = v768;
        v444 = v793[0];
        v409[7].i8[0] = 1;
        v409[7].i8[1] = v444;
      }
      sub_223821DD4(&v766);
      v405 = (uint64_t *)v725;
      if (**(int **)(v766 + 56) <= 2)
      {
        v445 = *(unsigned __int8 *)(v766 + 72);
        v446 = sub_22322F254(v766, "OSLogSurrogateAppender", 1, 0);
        v447 = v446;
        if (v445 || v446)
        {
          *(_QWORD *)oslog = &v766;
          *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
          *(_DWORD *)&oslog[24] = 2;
          *(_QWORD *)&oslog[32] = "unknown file";
          LODWORD(v788) = 582;
          v789 = "unknown function";
          v790 = 0;
          v791 = 0;
          sub_2245664AC(v725, &__src);
          v448 = &v767;
          if ((v767.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v448 = (std::string *)v767.__r_.__value_.__r.__words[0];
          v760 = (const char *)v448;
          v449 = **(_QWORD **)oslog;
          v450 = (const char *)(**(_QWORD **)oslog + 16);
          v751 = v450;
          if (*(char *)(**(_QWORD **)oslog + 39) < 0)
          {
            v450 = *(const char **)(v449 + 16);
            v451 = *(_QWORD *)(v449 + 24);
            v508 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v508 & 1) == 0)
            {
LABEL_1192:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&v768);
                sub_223199C58("com.apple.cv3d", (unint64_t)&v768, byte_255788F40);
                if ((_BYTE)v769 && SHIBYTE(v768.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v768.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                v5 = a1;
              }
            }
          }
          else
          {
            v451 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
            v452 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v452 & 1) == 0)
              goto LABEL_1192;
          }
          if (byte_255788F40[23] >= 0)
            v509 = byte_255788F40;
          else
            v509 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v510 = byte_255788F40[23];
          else
            v510 = *(_QWORD *)&byte_255788F40[8];
          object[0].i64[0] = (uint64_t)os_log_create(v509, v450);
          if (v510 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v510 >= 0x17)
          {
            v512 = (v510 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v510 | 7) != 0x17)
              v512 = v510 | 7;
            v513 = v512 + 1;
            v511 = (uint64_t *)operator new(v512 + 1);
            object[1].i64[1] = v513 | 0x8000000000000000;
            object[0].i64[1] = (uint64_t)v511;
            object[1].i64[0] = v510;
            v5 = a1;
          }
          else
          {
            object[1].i8[15] = v510;
            v511 = &object[0].i64[1];
            if (!v510)
            {
LABEL_855:
              *((_BYTE *)v511 + v510) = 0;
              object[2].i8[0] = 1;
              if (v451 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v6 = a5;
              if (v451 >= 0x17)
              {
                v516 = (v451 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v451 | 7) != 0x17)
                  v516 = v451 | 7;
                v517 = v516 + 1;
                v514 = (uint64_t *)operator new(v516 + 1);
                object[3].i64[1] = v517 | 0x8000000000000000;
                object[2].i64[1] = (uint64_t)v514;
                object[3].i64[0] = v451;
              }
              else
              {
                object[3].i8[15] = v451;
                v514 = &object[2].i64[1];
                if (!v451)
                {
                  object[2].i8[8] = 0;
                  v780 = 1;
                  v515 = object[0].i64[0];
                  if ((object[3].i8[15] & 0x80000000) == 0)
                    goto LABEL_859;
LABEL_865:
                  operator delete((void *)object[2].i64[1]);
                  v405 = (uint64_t *)v725;
                  if (object[2].i8[0])
                    goto LABEL_866;
                  goto LABEL_868;
                }
              }
              memmove(v514, v450, v451);
              *((_BYTE *)v514 + v451) = 0;
              v780 = 1;
              v515 = object[0].i64[0];
              if (object[3].i8[15] < 0)
                goto LABEL_865;
LABEL_859:
              v405 = (uint64_t *)v725;
              if (object[2].i8[0])
              {
LABEL_866:
                if (object[1].i8[15] < 0)
                  operator delete((void *)object[0].i64[1]);
              }
LABEL_868:
              if (object[0].i64[0])
                os_release((void *)object[0].i64[0]);
              if (v447 && *(_QWORD *)(v447 + 24))
              {
                v518 = _os_log_pack_size();
                v519 = operator new(v518, (std::align_val_t)8uLL);
                v520 = (_QWORD *)operator new();
                *v520 = &off_24EC1F7F0;
                v520[1] = 0;
                v520[2] = 0;
                v520[3] = v519;
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v519;
                __s.__r_.__value_.__l.__size_ = (std::string::size_type)v519;
                __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v520;
                v795 = 0;
                v796 = 0;
                v521 = strlen((const char *)&__src);
                if (v521 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v522 = v521;
                if (v521 >= 0x17)
                {
                  v574 = (v521 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v521 | 7) != 0x17)
                    v574 = v521 | 7;
                  v575 = v574 + 1;
                  v523 = operator new(v574 + 1);
                  *(_QWORD *)&v793[8] = v522;
                  *(_QWORD *)&v793[16] = v575 | 0x8000000000000000;
                  *(_QWORD *)v793 = v523;
                }
                else
                {
                  v793[23] = v521;
                  v523 = v793;
                  if (!v521)
                  {
LABEL_958:
                    v523[v522] = 0;
                    v576 = strlen(v760);
                    if (v576 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v577 = v576;
                    if (v576 >= 0x17)
                    {
                      v579 = (v576 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v576 | 7) != 0x17)
                        v579 = v576 | 7;
                      v580 = v579 + 1;
                      v578 = operator new(v579 + 1);
                      *(_QWORD *)&v792[8] = v577;
                      *(_QWORD *)&v792[16] = v580 | 0x8000000000000000;
                      *(_QWORD *)v792 = v578;
                    }
                    else
                    {
                      v792[23] = v576;
                      v578 = v792;
                      if (!v576)
                        goto LABEL_966;
                    }
                    memcpy(v578, v760, v577);
LABEL_966:
                    v578[v577] = 0;
                    object[1].i64[0] = *(_QWORD *)&v793[8];
                    *(uint64_t *)((char *)object[1].i64 + 7) = *(_QWORD *)&v793[15];
                    object[2] = *(int32x4_t *)v792;
                    *(uint64_t *)((char *)&object[2].i64[1] + 7) = *(_QWORD *)&v792[15];
                    object[0].i64[0] = (uint64_t)off_24EC20780;
                    object[0].i64[1] = *(_QWORD *)v793;
                    object[1].i8[15] = v793[23];
                    object[3].i8[7] = v792[23];
                    v581 = (char *)operator new(0x50uLL);
                    *((_QWORD *)v581 + 1) = 0;
                    *((_QWORD *)v581 + 2) = 0;
                    *((_QWORD *)v581 + 3) = off_24EC20780;
                    *(_QWORD *)v581 = &off_24EC20730;
                    *((int32x4_t *)v581 + 2) = *(int32x4_t *)((char *)object + 8);
                    *((_QWORD *)v581 + 6) = object[1].i64[1];
                    object[0].i64[1] = 0;
                    object[1] = 0uLL;
                    *(int32x4_t *)(v581 + 56) = object[2];
                    *((_QWORD *)v581 + 9) = object[3].i64[0];
                    memset(&object[2], 0, 24);
                    v582 = v796;
                    v795 = v581 + 24;
                    v796 = (std::__shared_weak_count *)v581;
                    if (!v582)
                      goto LABEL_970;
                    v583 = (unint64_t *)&v582->__shared_owners_;
                    do
                      v584 = __ldaxr(v583);
                    while (__stlxr(v584 - 1, v583));
                    if (v584)
                    {
LABEL_970:
                      if ((object[3].i8[7] & 0x80000000) == 0)
                        goto LABEL_971;
LABEL_1106:
                      operator delete((void *)object[2].i64[0]);
                      if (object[1].i8[15] < 0)
                        goto LABEL_1107;
LABEL_972:
                      v768 = __s;
                      v586 = __s.__r_.__value_.__r.__words[2];
                      v585 = v795;
                      if (!__s.__r_.__value_.__r.__words[2])
                        goto LABEL_1110;
LABEL_1108:
                      v668 = (unint64_t *)(v586 + 8);
                      do
                        v669 = __ldxr(v668);
                      while (__stxr(v669 + 1, v668));
                      goto LABEL_1110;
                    }
                    ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
                    std::__shared_weak_count::__release_weak(v582);
                    if (object[3].i8[7] < 0)
                      goto LABEL_1106;
LABEL_971:
                    if ((object[1].i8[15] & 0x80000000) == 0)
                      goto LABEL_972;
LABEL_1107:
                    operator delete((void *)object[0].i64[1]);
                    v768 = __s;
                    v586 = __s.__r_.__value_.__r.__words[2];
                    v585 = v795;
                    if (__s.__r_.__value_.__r.__words[2])
                      goto LABEL_1108;
LABEL_1110:
                    v670 = v796;
                    *(_QWORD *)&v769 = v585;
                    *((_QWORD *)&v769 + 1) = v796;
                    if (v796)
                    {
                      v671 = (unint64_t *)&v796->__shared_owners_;
                      do
                        v672 = __ldxr(v671);
                      while (__stxr(v672 + 1, v671));
                      v770 = v585;
                      do
                        v673 = __ldaxr(v671);
                      while (__stlxr(v673 - 1, v671));
                      if (!v673)
                      {
                        ((void (*)(std::__shared_weak_count *))v670->__on_zero_shared)(v670);
                        std::__shared_weak_count::__release_weak(v670);
                      }
                    }
                    else
                    {
                      v770 = v585;
                    }
                    v674 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                    if (__s.__r_.__value_.__r.__words[2])
                    {
                      v675 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                      do
                        v676 = __ldaxr(v675);
                      while (__stlxr(v676 - 1, v675));
                      if (!v676)
                      {
                        ((void (*)(std::__shared_weak_count *))v674->__on_zero_shared)(v674);
                        std::__shared_weak_count::__release_weak(v674);
                      }
                    }
                    v677 = v768.__r_.__value_.__r.__words[0];
                    if (v770[31] >= 0)
                      v678 = v770 + 8;
                    else
                      v678 = (char *)*((_QWORD *)v770 + 1);
                    if (v770[55] >= 0)
                      v679 = v770 + 32;
                    else
                      v679 = (char *)*((_QWORD *)v770 + 4);
                    v680 = _os_log_pack_fill();
                    *(_DWORD *)v680 = 136315394;
                    *(_QWORD *)(v680 + 4) = v678;
                    *(_WORD *)(v680 + 12) = 2080;
                    *(_QWORD *)(v680 + 14) = v679;
                    v681 = operator new();
                    v682 = *(unsigned __int8 *)(v449 + 39);
                    v683 = v751;
                    if ((v682 & 0x80u) != 0)
                    {
                      v683 = *(const char **)(v449 + 16);
                      v682 = *(_QWORD *)(v449 + 24);
                    }
                    *(_QWORD *)v681 = v677;
                    *(_OWORD *)(v681 + 8) = *(_OWORD *)&v768.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v768.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v681 + 24) = v769;
                    v769 = 0uLL;
                    *(_QWORD *)(v681 + 40) = v683;
                    *(_QWORD *)(v681 + 48) = v682;
                    *(_BYTE *)(v681 + 56) = 2;
                    __s.__r_.__value_.__r.__words[0] = 0;
                    object[0].i64[0] = v681;
                    (*(void (**)(_QWORD, int32x4_t *))(**(_QWORD **)(v447 + 24) + 40))(*(_QWORD *)(v447 + 24), object);
                    v5 = a1;
                    v405 = (uint64_t *)v725;
                    v684 = object[0].i64[0];
                    object[0].i64[0] = 0;
                    if (v684)
                    {
                      v685 = *(std::__shared_weak_count **)(v684 + 32);
                      if (v685)
                      {
                        v686 = (unint64_t *)&v685->__shared_owners_;
                        do
                          v687 = __ldaxr(v686);
                        while (__stlxr(v687 - 1, v686));
                        if (!v687)
                        {
                          ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
                          std::__shared_weak_count::__release_weak(v685);
                        }
                      }
                      v688 = *(std::__shared_weak_count **)(v684 + 16);
                      if (v688)
                      {
                        v689 = (unint64_t *)&v688->__shared_owners_;
                        do
                          v690 = __ldaxr(v689);
                        while (__stlxr(v690 - 1, v689));
                        if (!v690)
                        {
                          ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
                          std::__shared_weak_count::__release_weak(v688);
                        }
                      }
                      MEMORY[0x227684CE8](v684, 0x10F0C40B62ED6C6);
                      v691 = __s.__r_.__value_.__r.__words[0];
                      __s.__r_.__value_.__r.__words[0] = 0;
                      if (v691)
                      {
                        v692 = *(std::__shared_weak_count **)(v691 + 32);
                        if (v692)
                        {
                          v693 = (unint64_t *)&v692->__shared_owners_;
                          do
                            v694 = __ldaxr(v693);
                          while (__stlxr(v694 - 1, v693));
                          if (!v694)
                          {
                            ((void (*)(std::__shared_weak_count *))v692->__on_zero_shared)(v692);
                            std::__shared_weak_count::__release_weak(v692);
                          }
                        }
                        v695 = *(std::__shared_weak_count **)(v691 + 16);
                        if (v695)
                        {
                          v696 = (unint64_t *)&v695->__shared_owners_;
                          do
                            v697 = __ldaxr(v696);
                          while (__stlxr(v697 - 1, v696));
                          if (!v697)
                          {
                            ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
                            std::__shared_weak_count::__release_weak(v695);
                          }
                        }
                        MEMORY[0x227684CE8](v691, 0x10F0C40B62ED6C6);
                      }
                    }
                    v698 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
                    if (*((_QWORD *)&v769 + 1))
                    {
                      v699 = (unint64_t *)(*((_QWORD *)&v769 + 1) + 8);
                      do
                        v700 = __ldaxr(v699);
                      while (__stlxr(v700 - 1, v699));
                      if (!v700)
                      {
                        ((void (*)(std::__shared_weak_count *))v698->__on_zero_shared)(v698);
                        std::__shared_weak_count::__release_weak(v698);
                        v701 = (std::__shared_weak_count *)v768.__r_.__value_.__r.__words[2];
                        if (v768.__r_.__value_.__r.__words[2])
                          goto LABEL_1159;
                        goto LABEL_1162;
                      }
                    }
                    v701 = (std::__shared_weak_count *)v768.__r_.__value_.__r.__words[2];
                    if (!v768.__r_.__value_.__r.__words[2])
                      goto LABEL_1162;
LABEL_1159:
                    v702 = (unint64_t *)&v701->__shared_owners_;
                    do
                      v703 = __ldaxr(v702);
                    while (__stlxr(v703 - 1, v702));
                    if (v703)
                    {
LABEL_1162:
                      if (v445)
                        goto LABEL_1163;
LABEL_1167:
                      sub_223182C08((uint64_t)oslog);
                      v705 = v791;
                      if (v791)
                      {
                        v706 = (unint64_t *)&v791->__shared_owners_;
                        do
                          v707 = __ldaxr(v706);
                        while (__stlxr(v707 - 1, v706));
                        if (!v707)
                        {
                          ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
                          std::__shared_weak_count::__release_weak(v705);
                          ++*(_DWORD *)(a5 + 76);
                          if ((SHIBYTE(v767.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_1173;
LABEL_1172:
                          operator delete(v767.__r_.__value_.__l.__data_);
                          goto LABEL_1173;
                        }
                      }
                      goto LABEL_1171;
                    }
                    ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
                    std::__shared_weak_count::__release_weak(v701);
                    if (!v445)
                      goto LABEL_1167;
LABEL_1163:
                    sub_2245664AC((unsigned __int8 *)v405, object);
                    if ((v767.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v704 = &v767;
                    else
                      v704 = (std::string *)v767.__r_.__value_.__r.__words[0];
                    sub_22322C138((uint64_t)oslog, "Trivial AU(%s)%s", object[0].i8, (const char *)v704);
                    sub_223182C08((uint64_t)oslog);
                    goto LABEL_1167;
                  }
                }
                memcpy(v523, &__src, v522);
                goto LABEL_958;
              }
              os_log_type_enabled(v515, OS_LOG_TYPE_DEBUG);
              object[0].i32[0] = 136315394;
              *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)&__src;
              object[0].i16[6] = 2080;
              *(uint64_t *)((char *)&object[0].i64[1] + 6) = (uint64_t)v760;
              v524 = (void *)_os_log_send_and_compose_impl();
              if (!v524)
                goto LABEL_1162;
              free(v524);
              if (!v445)
                goto LABEL_1167;
              goto LABEL_1163;
            }
          }
          memmove(v511, v509, v510);
          goto LABEL_855;
        }
      }
LABEL_1171:
      ++*(_DWORD *)(v6 + 76);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_1172;
LABEL_1173:
      v404 = v720;
LABEL_1174:
      v405 += 2;
      v406 += 4;
    }
    while (v405 != v404 || v406 != __dsta);
  }
}

void sub_223835CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (LOBYTE(STACK[0x208]))
  {
    if (SLOBYTE(STACK[0x207]) < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x390]);
  sub_2238365B4(a44);
  _Unwind_Resume(a1);
}

void sub_2238364EC()
{
  JUMPOUT(0x2238364B4);
}

void sub_2238364F4()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836504()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383650C()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836534()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383653C()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836544()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383654C()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836554()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383655C()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836564()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383656C()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836574()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383657C()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836584()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383658C()
{
  JUMPOUT(0x2238364B4);
}

void sub_223836594()
{
  JUMPOUT(0x2238364B4);
}

void sub_22383659C()
{
  JUMPOUT(0x2238364B4);
}

void sub_2238365A4()
{
  JUMPOUT(0x2238364B4);
}

void sub_2238365AC()
{
  JUMPOUT(0x2238364B4);
}

uint64_t sub_2238365B4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  sub_223198030(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t sub_2238365F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v7;
  uint64_t *v8;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(uint64_t **)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    v3 = v2[16];
    v4 = *((unsigned __int8 *)v2 + 144);
    v2 = (uint64_t *)*v2;
    if (v3 >= 1 && v4 != 0)
      break;
    if (!v2)
      goto LABEL_32;
  }
  if (v2)
  {
    v7 = 1;
    v8 = v2;
    do
    {
      while (v8[16] < 1 || *((_BYTE *)v8 + 144) == 0)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          goto LABEL_21;
      }
      ++v7;
      v8 = (uint64_t *)*v8;
    }
    while (v8);
LABEL_21:
    v10 = v4 == 1;
    do
    {
      while (1)
      {
        v11 = *((unsigned __int8 *)v2 + 144);
        if (v2[16] >= 1 && v11 != 0)
          break;
        v2 = (uint64_t *)*v2;
        if (!v2)
          goto LABEL_32;
      }
      if (v11 == 1)
        ++v10;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
LABEL_32:
  LODWORD(v13) = 0;
  v14 = *(_QWORD *)(a1 + 16);
  do
  {
    if (*(_BYTE *)(v14 + 144) == 1)
      v13 = (v13 + 1);
    else
      v13 = v13;
    v14 = *(_QWORD *)v14;
  }
  while (v14);
  do
  {
    if (*((_BYTE *)v1 + 144))
      v14 = (v14 + 1);
    else
      v14 = v14;
    v1 = (uint64_t *)*v1;
  }
  while (v1);
  return v13 | (v14 << 32);
}

void sub_2238366F0(unsigned __int8 *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unsigned __int8 v23;
  void *__p[2];
  uint64_t v25;
  char v26;
  void *v27[2];
  uint64_t v28;
  char v29;
  void *v30[2];
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  _BYTE v34[8];
  uint64_t v35;
  void *v36[2];
  char v37;
  int v38;
  char v39;
  char *v40;
  unsigned __int8 v41[8];
  uint64_t v42[2];
  int v43;
  unsigned __int8 v44;
  uint64_t v45[2];
  char v46;
  unsigned __int8 *v47;
  void **v48;
  unsigned __int8 *v49;
  void **v50;
  void **v51;
  uint64_t v52[2];
  char v53;
  unsigned __int8 v54[8];
  uint64_t v55[2];
  char v56;
  unsigned __int8 v57;
  uint64_t v58[2];
  char v59;
  unsigned __int8 v60[8];
  uint64_t v61[2];
  char v62;
  unsigned __int8 v63;
  uint64_t v64[2];
  char v65;
  unsigned __int8 v66[8];
  uint64_t v67[2];
  char v68;
  unsigned __int8 v69;
  uint64_t v70[2];
  char v71;
  unsigned __int8 v72[8];
  uint64_t v73[2];
  char v74;
  unsigned __int8 v75;
  uint64_t v76[2];
  char v77;
  unsigned __int8 *v78;
  uint64_t v79[2];
  char v80;
  unsigned __int8 v81;
  uint64_t v82[2];
  char v83;
  unsigned __int8 v84[8];
  uint64_t v85[2];
  int v86;
  _BYTE v87[8];
  uint64_t v88[2];
  char v89;
  unsigned __int8 v90[8];
  uint64_t v91[2];
  char v92;
  unsigned __int8 v93;
  uint64_t v94[2];
  char v95;
  _BYTE v96[8];
  uint64_t v97[2];
  char v98;
  _BYTE v99[8];
  uint64_t v100[2];
  char v101;
  _BYTE v102[8];
  uint64_t v103[2];
  char v104;
  _BYTE v105[8];
  uint64_t v106[2];
  char v107;
  _BYTE v108[8];
  uint64_t v109[2];
  char v110;
  _BYTE v111[8];
  uint64_t v112[2];
  char v113;
  _BYTE v114[8];
  uint64_t v115[2];
  char v116;
  _BYTE v117[8];
  uint64_t v118[2];
  char v119;
  _BYTE v120[8];
  uint64_t v121[2];
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v90[0] = 3;
  v4 = (char *)operator new(0x18uLL);
  v4[23] = 4;
  strcpy(v4, "uuid");
  v91[0] = (uint64_t)v4;
  v91[1] = (uint64_t)v90;
  v92 = 1;
  v86 = 0;
  sub_22319B83C((uint64_t)&v78, (uint64_t)v84, (unsigned __int8 *)a2);
  if (v86 == -1)
    sub_22316DD70();
  v78 = v72;
  ((void (*)(void **__return_ptr, unsigned __int8 **, unsigned __int8 *))off_24EC5B118[v86])(v32, &v78, v84);
  if (v86 != -1)
    ((void (*)(unsigned __int8 **, unsigned __int8 *))off_24EC5B100[v86])(&v78, v84);
  v94[0] = 0;
  v93 = 3;
  v5 = operator new(0x18uLL);
  *(_OWORD *)v5 = *(_OWORD *)v32;
  v5[2] = v33;
  v32[1] = 0;
  v33 = 0;
  v32[0] = 0;
  v94[0] = (uint64_t)v5;
  v94[1] = (uint64_t)&v93;
  v95 = 1;
  sub_2237995F8((uint64_t)v96, (uint64_t)v90, 2, 1, 2);
  v97[1] = (uint64_t)v96;
  v98 = 1;
  v84[0] = 3;
  v6 = (char *)operator new(0x18uLL);
  v6[23] = 17;
  strcpy(v6, "keyframe_to_world");
  v85[0] = (uint64_t)v6;
  v85[1] = (uint64_t)v84;
  LOBYTE(v86) = 1;
  v87[0] = 0;
  v88[0] = 0;
  sub_22379A9A0((uint64_t)v87, (float *)(a2 + 16));
  v88[1] = (uint64_t)v87;
  v89 = 1;
  sub_2237995F8((uint64_t)v99, (uint64_t)v84, 2, 1, 2);
  v100[1] = (uint64_t)v99;
  v101 = 1;
  LOBYTE(v78) = 3;
  v7 = (char *)operator new(0x18uLL);
  v7[23] = 11;
  strcpy(v7, "create_time");
  v79[0] = (uint64_t)v7;
  v79[1] = (uint64_t)&v78;
  v80 = 1;
  v8 = *(_QWORD *)(a2 + 80);
  v81 = 5;
  v82[0] = v8;
  v82[1] = (uint64_t)&v81;
  v83 = 1;
  sub_2237995F8((uint64_t)v102, (uint64_t)&v78, 2, 1, 2);
  v103[1] = (uint64_t)v102;
  v104 = 1;
  v72[0] = 3;
  v9 = (char *)operator new(0x18uLL);
  v9[23] = 11;
  strcpy(v9, "update_time");
  v73[0] = (uint64_t)v9;
  v73[1] = (uint64_t)v72;
  v74 = 1;
  v10 = *(_QWORD *)(a2 + 88);
  v75 = 5;
  v76[0] = v10;
  v76[1] = (uint64_t)&v75;
  v77 = 1;
  sub_2237995F8((uint64_t)v105, (uint64_t)v72, 2, 1, 2);
  v106[1] = (uint64_t)v105;
  v107 = 1;
  v66[0] = 3;
  v11 = (char *)operator new(0x18uLL);
  v11[23] = 9;
  strcpy(v11, "save_time");
  v67[0] = (uint64_t)v11;
  v67[1] = (uint64_t)v66;
  v68 = 1;
  v12 = *(_QWORD *)(a2 + 96);
  v69 = 5;
  v70[0] = v12;
  v70[1] = (uint64_t)&v69;
  v71 = 1;
  sub_2237995F8((uint64_t)v108, (uint64_t)v66, 2, 1, 2);
  v109[1] = (uint64_t)v108;
  v110 = 1;
  v60[0] = 3;
  v13 = (char *)operator new(0x18uLL);
  strcpy(v13, "color_invalidated_time");
  v13[23] = 22;
  v61[0] = (uint64_t)v13;
  v61[1] = (uint64_t)v60;
  v62 = 1;
  v14 = *(_QWORD *)(a2 + 104);
  v63 = 5;
  v64[0] = v14;
  v64[1] = (uint64_t)&v63;
  v65 = 1;
  sub_2237995F8((uint64_t)v111, (uint64_t)v60, 2, 1, 2);
  v112[1] = (uint64_t)v111;
  v113 = 1;
  v54[0] = 3;
  v15 = (char *)operator new(0x18uLL);
  v15[23] = 10;
  strcpy(v15, "pose_state");
  v55[0] = (uint64_t)v15;
  v55[1] = (uint64_t)v54;
  v56 = 1;
  v29 = *(_BYTE *)(a2 + 112);
  v43 = 0;
  sub_223847110(v36, &v29);
  v47 = v41;
  v48 = v36;
  v49 = v41;
  v50 = v36;
  v51 = v36;
  if (v43 == -1)
    sub_22316DD70();
  v27[0] = &v47;
  ((void (*)(void **, unsigned __int8 *))off_24EC5B0E8[v43])(v27, v41);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v43 == -1)
    sub_22316DD70();
  v47 = (unsigned __int8 *)v36;
  ((void (*)(void **__return_ptr, unsigned __int8 **, unsigned __int8 *))off_24EC5B118[v43])(v30, &v47, v41);
  if (v43 != -1)
    ((void (*)(unsigned __int8 **, unsigned __int8 *))off_24EC5B100[v43])(&v47, v41);
  v58[0] = 0;
  v57 = 3;
  v16 = operator new(0x18uLL);
  *(_OWORD *)v16 = *(_OWORD *)v30;
  v16[2] = v31;
  v30[1] = 0;
  v31 = 0;
  v30[0] = 0;
  v58[0] = (uint64_t)v16;
  v58[1] = (uint64_t)&v57;
  v59 = 1;
  sub_2237995F8((uint64_t)v114, (uint64_t)v54, 2, 1, 2);
  v115[1] = (uint64_t)v114;
  v116 = 1;
  LOBYTE(v47) = 3;
  v17 = (char *)operator new(0x18uLL);
  v17[23] = 12;
  strcpy(v17, "update_state");
  v48 = (void **)v17;
  v49 = (unsigned __int8 *)&v47;
  LOBYTE(v50) = 1;
  v26 = *(_BYTE *)(a2 + 113);
  v43 = 0;
  sub_22356F9F4((uint64_t)v36, (uint64_t)v41, &v26);
  if (v43 == -1)
    sub_22316DD70();
  v36[0] = __p;
  ((void (*)(void **__return_ptr, void **, unsigned __int8 *))off_24EC5B118[v43])(v27, v36, v41);
  if (v43 != -1)
    ((void (*)(void **, unsigned __int8 *))off_24EC5B100[v43])(v36, v41);
  v52[0] = 0;
  LOBYTE(v51) = 3;
  v18 = operator new(0x18uLL);
  *(_OWORD *)v18 = *(_OWORD *)v27;
  v18[2] = v28;
  v27[1] = 0;
  v28 = 0;
  v27[0] = 0;
  v52[0] = (uint64_t)v18;
  v52[1] = (uint64_t)&v51;
  v53 = 1;
  sub_2237995F8((uint64_t)v117, (uint64_t)&v47, 2, 1, 2);
  v118[1] = (uint64_t)v117;
  v119 = 1;
  v41[0] = 3;
  v19 = (char *)operator new(0x18uLL);
  v19[23] = 11;
  strcpy(v19, "change_hint");
  v42[0] = (uint64_t)v19;
  v42[1] = (uint64_t)v41;
  LOBYTE(v43) = 1;
  v23 = *(_BYTE *)(a2 + 114);
  v38 = 0;
  sub_223847364((uint64_t)&v40, (uint64_t)v36, &v23);
  if (v38 == -1)
    sub_22316DD70();
  v40 = &v39;
  ((void (*)(void **__return_ptr, char **, void **))off_24EC5B118[v38])(__p, &v40, v36);
  if (v38 != -1)
    ((void (*)(char **, void **))off_24EC5B100[v38])(&v40, v36);
  v45[0] = 0;
  v44 = 3;
  v20 = operator new(0x18uLL);
  *(_OWORD *)v20 = *(_OWORD *)__p;
  v20[2] = v25;
  __p[1] = 0;
  v25 = 0;
  __p[0] = 0;
  v45[0] = (uint64_t)v20;
  v45[1] = (uint64_t)&v44;
  v46 = 1;
  sub_2237995F8((uint64_t)v120, (uint64_t)v41, 2, 1, 2);
  v121[1] = (uint64_t)v120;
  v122 = 1;
  sub_2237995F8((uint64_t)v34, (uint64_t)v96, 9, 1, 2);
  v21 = *a1;
  *a1 = v34[0];
  v34[0] = v21;
  v22 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v35;
  v35 = v22;
  sub_223454278(&v35, v21);
  sub_223454278(v121, v120[0]);
  sub_223454278(v118, v117[0]);
  sub_223454278(v115, v114[0]);
  sub_223454278(v112, v111[0]);
  sub_223454278(v109, v108[0]);
  sub_223454278(v106, v105[0]);
  sub_223454278(v103, v102[0]);
  sub_223454278(v100, v99[0]);
  sub_223454278(v97, v96[0]);
  sub_223454278(v45, v44);
  sub_223454278(v42, v41[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  sub_223454278(v52, v51);
  sub_223454278((uint64_t *)&v48, v47);
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  sub_223454278(v58, v57);
  sub_223454278(v55, v54[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  sub_223454278(v64, v63);
  sub_223454278(v61, v60[0]);
  sub_223454278(v70, v69);
  sub_223454278(v67, v66[0]);
  sub_223454278(v76, v75);
  sub_223454278(v73, v72[0]);
  sub_223454278(v82, v81);
  sub_223454278(v79, v78);
  sub_223454278(v88, v87[0]);
  sub_223454278(v85, v84[0]);
  sub_223454278(v94, v93);
  sub_223454278(v91, v90[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
}

void sub_2238370F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

unint64_t sub_22383748C(unint64_t result, uint64_t *a2, _QWORD **a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  __int128 v27;
  _QWORD *v28;
  unint64_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v40;
  int8x8_t v41;
  uint8x8_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  __int128 v73;
  _QWORD *v74;
  unint64_t v75;
  int8x8_t v76;
  uint8x8_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v84;
  unint64_t v86;
  int8x8_t v87;
  uint8x8_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  _BOOL4 v99;
  __int128 v100;
  _QWORD *v101;
  unint64_t v102;
  int8x8_t v103;
  uint8x8_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v111;
  unint64_t v113;
  int8x8_t v114;
  uint8x8_t v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v122;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _BOOL4 v143;
  _BOOL4 v144;
  uint64_t *v145;
  uint64_t *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL4 v154;
  _QWORD *v155;
  unint64_t v156;
  int8x8_t v157;
  uint8x8_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v165;
  __int128 v167;
  unint64_t v168;
  int8x8_t v169;
  uint8x8_t v170;
  unint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v177;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  _QWORD *v182;
  unint64_t v183;
  int8x8_t v184;
  uint8x8_t v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v192;
  __int128 v194;
  int8x8_t v195;
  uint8x8_t v196;
  unint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v203;
  _QWORD *v205;
  uint64_t *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  _BOOL4 v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t *v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL4 v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  _QWORD *v226;
  unint64_t v227;
  int8x8_t v228;
  uint8x8_t v229;
  unint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v236;
  int8x8_t v238;
  uint8x8_t v239;
  unint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v246;
  int64_t v248;
  int64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  _BOOL4 v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  BOOL v264;
  uint64_t *v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  _BOOL4 v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  _BOOL4 v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v281;
  uint64_t *v282;
  int64_t v283;
  uint64_t v284;
  uint64_t v285;
  _BOOL4 v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  _QWORD *v291;
  unint64_t v292;
  int8x8_t v293;
  uint8x8_t v294;
  unint64_t v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v301;
  int8x8_t v303;
  uint8x8_t v304;
  unint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v311;
  uint64_t v313;
  unint64_t v314;
  uint64_t *v315;
  _QWORD *v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  _BOOL4 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  BOOL v325;
  uint64_t *v326;
  _QWORD *v327;
  unint64_t v328;
  int8x8_t v329;
  uint8x8_t v330;
  unint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v337;
  int8x8_t v339;
  uint8x8_t v340;
  unint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v347;
  uint64_t *v349;
  uint64_t *v350;
  _QWORD *v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  _BOOL4 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  BOOL v361;
  uint64_t *v362;
  _QWORD *v363;
  unint64_t v364;
  int8x8_t v365;
  uint8x8_t v366;
  unint64_t v367;
  _QWORD *v368;
  _QWORD *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v373;
  int8x8_t v375;
  uint8x8_t v376;
  unint64_t v377;
  _QWORD *v378;
  _QWORD *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v383;
  std::string *v385;
  std::string::size_type v386;
  std::string *v387;
  std::string::size_type v388;
  std::string *v389;
  std::string::size_type v390;
  std::string *v391;
  std::string::size_type v392;
  std::string *v393;
  std::string::size_type v394;
  std::string *v395;
  std::string::size_type v396;
  std::string *v397;
  std::string::size_type size;
  std::string *v399;
  std::string::size_type v400;
  std::string *v401;
  std::string::size_type v402;
  std::string *v403;
  std::string::size_type v404;
  std::string *v405;
  std::string::size_type v406;
  std::string *v407;
  std::string::size_type v408;
  std::string *v409;
  std::string::size_type v410;
  std::string *v411;
  std::string::size_type v412;
  std::string *v413;
  std::string::size_type v414;
  std::string *v415;
  std::string::size_type v416;
  std::string *v417;
  std::string::size_type v418;
  std::string *v419;
  std::string::size_type v420;
  uint64_t *v421;
  int64_t v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  int64_t v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t *v431;
  char v432;
  char *v433;
  std::string v434;
  char v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  int v439;
  uint64_t v440;

  v431 = (uint64_t *)result;
  v440 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v423 = a2 - 4;
  v425 = a2 - 2;
  v421 = a2 - 6;
  v8 = v431;
  v429 = a2;
  while (2)
  {
    v9 = v8;
    v10 = (char *)a2 - (char *)v8;
    v11 = ((char *)a2 - (char *)v8) >> 4;
    v431 = v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v205 = *a3;
        v206 = a2 - 2;
        v207 = sub_22381AF00(v205, *(a2 - 2), *(a2 - 1));
        result = (unint64_t)sub_22381AF00(v205, *v431, v431[1]);
        v208 = v207[11];
        v209 = *(_QWORD *)(result + 88);
        v37 = v208 == v209;
        v210 = v208 >= v209;
        if (v37)
          v210 = v207[10] > *(_QWORD *)(result + 80);
        if (v210)
        {
          v438 = *(_OWORD *)v431;
          *(_OWORD *)v431 = *(_OWORD *)v206;
          *(_OWORD *)v206 = v438;
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_22383A6C8(v9, v9 + 2, v425, a3);
      case 4uLL:
        return (unint64_t)sub_22383AB4C(v9, v9 + 2, v9 + 4, v425, a3);
      case 5uLL:
        return (unint64_t)sub_22383A4F4(v9, v9 + 2, v9 + 4, v9 + 6, v425, a3);
      default:
        if (v10 > 383)
        {
          if (!a4)
          {
            if (v9 == a2)
              return result;
            v248 = (v11 - 2) >> 1;
            v428 = v248;
            do
            {
              v249 = v248;
              if (v428 >= v248)
              {
                v422 = v248;
                v250 = (2 * v248) | 1;
                v251 = &v431[2 * v250];
                v252 = 2 * v248 + 2;
                if (v252 < (uint64_t)v11)
                {
                  v253 = *a3;
                  v254 = sub_22381AF00(*a3, *v251, v251[1]);
                  v255 = sub_22381AF00(v253, v251[2], v251[3]);
                  v256 = v254[11];
                  v257 = v255[11];
                  v37 = v256 == v257;
                  v258 = v256 >= v257;
                  if (v37)
                    v258 = v254[10] > v255[10];
                  if (v258)
                  {
                    v251 += 2;
                    v250 = v252;
                  }
                }
                v259 = *a3;
                v260 = sub_22381AF00(*a3, *v251, v251[1]);
                v261 = &v431[2 * v422];
                result = (unint64_t)sub_22381AF00(v259, *v261, v261[1]);
                v262 = v260[11];
                v263 = *(_QWORD *)(result + 88);
                v37 = v262 == v263;
                v264 = v262 >= v263;
                if (v37)
                  v264 = v260[10] > *(_QWORD *)(result + 80);
                v249 = v422;
                if (!v264)
                {
                  v424 = v261[1];
                  v426 = *v261;
                  do
                  {
                    v265 = v261;
                    v261 = v251;
                    *(_OWORD *)v265 = *(_OWORD *)v251;
                    if (v428 < v250)
                      break;
                    v266 = (2 * v250) | 1;
                    v251 = &v431[2 * v266];
                    v250 = 2 * v250 + 2;
                    if (v250 >= (uint64_t)v11)
                    {
                      v250 = v266;
                    }
                    else
                    {
                      v267 = *a3;
                      v268 = sub_22381AF00(*a3, *v251, v251[1]);
                      v269 = sub_22381AF00(v267, v251[2], v251[3]);
                      v270 = v268[11];
                      v271 = v269[11];
                      v37 = v270 == v271;
                      v272 = v270 >= v271;
                      if (v37)
                        v272 = v268[10] > v269[10];
                      if (v272)
                        v251 += 2;
                      else
                        v250 = v266;
                    }
                    v273 = *a3;
                    v274 = sub_22381AF00(*a3, *v251, v251[1]);
                    result = (unint64_t)sub_22381AF00(v273, v426, v424);
                    v275 = v274[11];
                    v276 = *(_QWORD *)(result + 88);
                    v37 = v275 == v276;
                    v277 = v275 >= v276;
                    if (v37)
                      v277 = v274[10] > *(_QWORD *)(result + 80);
                  }
                  while (!v277);
                  *v261 = v426;
                  v261[1] = v424;
                  v249 = v422;
                }
              }
              v248 = v249 - 1;
            }
            while (v249);
            v278 = (unint64_t)v10 >> 4;
            v279 = v429;
            while (1)
            {
              v281 = 0;
              v282 = v431;
              v436 = *(_OWORD *)v431;
              v283 = (unint64_t)(v278 - 2) >> 1;
              while (2)
              {
                v287 = &v282[2 * v281 + 2];
                v288 = (2 * v281) | 1;
                v289 = 2 * v281 + 2;
                if (v289 >= v278)
                  goto LABEL_482;
                v290 = &v282[2 * v281 + 4];
                v291 = *a3;
                v437 = *(_OWORD *)v287;
                v292 = sub_22456636C((unsigned __int8 *)&v437);
                v293 = (int8x8_t)v291[1];
                if (!*(_QWORD *)&v293)
                  goto LABEL_718;
                v294 = (uint8x8_t)vcnt_s8(v293);
                v294.i16[0] = vaddlv_u8(v294);
                if (v294.u32[0] > 1uLL)
                {
                  v295 = v292;
                  if (v292 >= *(_QWORD *)&v293)
                    v295 = v292 % *(_QWORD *)&v293;
                }
                else
                {
                  v295 = (*(_QWORD *)&v293 - 1) & v292;
                }
                v296 = *(_QWORD **)(*v291 + 8 * v295);
                if (!v296 || (v297 = (_QWORD *)*v296) == 0)
                {
LABEL_718:
                  v439 = 0;
                  sub_223846924(&v438, "Entry not found ");
                  sub_22319B83C((uint64_t)&v433, (uint64_t)&v438, (unsigned __int8 *)&v437);
                  if (v439 == -1)
                    sub_22316DD70();
                  v433 = &v432;
                  ((void (*)(std::string *__return_ptr, char **, __int128 *))off_24EC5B118[v439])(&v434, &v433, &v438);
                  if (v439 != -1)
                    ((void (*)(char **, __int128 *))off_24EC5B100[v439])(&v433, &v438);
                  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v397 = &v434;
                  else
                    v397 = (std::string *)v434.__r_.__value_.__r.__words[0];
                  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                  else
                    size = v434.__r_.__value_.__l.__size_;
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v397, size, (void (*)(void **))sub_22457406C);
                  std::string::~string(&v434);
                  abort();
                }
                if (v294.u32[0] < 2uLL)
                {
                  v298 = *(_QWORD *)&v293 - 1;
                  while (1)
                  {
                    v301 = v297[1];
                    if (v292 == v301)
                    {
                      if (v297[2] == (_QWORD)v437 && v297[3] == *((_QWORD *)&v437 + 1))
                        goto LABEL_512;
                    }
                    else if ((v301 & v298) != v295)
                    {
                      goto LABEL_718;
                    }
                    v297 = (_QWORD *)*v297;
                    if (!v297)
                      goto LABEL_718;
                  }
                }
                while (1)
                {
                  v299 = v297[1];
                  if (v292 == v299)
                    break;
                  if (v299 >= *(_QWORD *)&v293)
                    v299 %= *(_QWORD *)&v293;
                  if (v299 != v295)
                    goto LABEL_718;
LABEL_494:
                  v297 = (_QWORD *)*v297;
                  if (!v297)
                    goto LABEL_718;
                }
                if (v297[2] != (_QWORD)v437 || v297[3] != *((_QWORD *)&v437 + 1))
                  goto LABEL_494;
LABEL_512:
                v437 = *(_OWORD *)v290;
                result = sub_22456636C((unsigned __int8 *)&v437);
                v303 = (int8x8_t)v291[1];
                if (!*(_QWORD *)&v303)
                  goto LABEL_720;
                v304 = (uint8x8_t)vcnt_s8(v303);
                v304.i16[0] = vaddlv_u8(v304);
                if (v304.u32[0] > 1uLL)
                {
                  v305 = result;
                  if (result >= *(_QWORD *)&v303)
                    v305 = result % *(_QWORD *)&v303;
                }
                else
                {
                  v305 = (*(_QWORD *)&v303 - 1) & result;
                }
                v306 = *(_QWORD **)(*v291 + 8 * v305);
                if (!v306 || (v307 = (_QWORD *)*v306) == 0)
                {
LABEL_720:
                  v439 = 0;
                  sub_223846924(&v438, "Entry not found ");
                  sub_22319B83C((uint64_t)&v433, (uint64_t)&v438, (unsigned __int8 *)&v437);
                  if (v439 == -1)
                    sub_22316DD70();
                  v433 = &v432;
                  ((void (*)(std::string *__return_ptr, char **, __int128 *))off_24EC5B118[v439])(&v434, &v433, &v438);
                  if (v439 != -1)
                    ((void (*)(char **, __int128 *))off_24EC5B100[v439])(&v433, &v438);
                  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v399 = &v434;
                  else
                    v399 = (std::string *)v434.__r_.__value_.__r.__words[0];
                  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v400 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                  else
                    v400 = v434.__r_.__value_.__l.__size_;
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v399, v400, (void (*)(void **))sub_22457406C);
                  std::string::~string(&v434);
                  abort();
                }
                if (v304.u32[0] < 2uLL)
                {
                  v308 = *(_QWORD *)&v303 - 1;
                  while (1)
                  {
                    v311 = v307[1];
                    if (result == v311)
                    {
                      if (v307[2] == (_QWORD)v437 && v307[3] == *((_QWORD *)&v437 + 1))
                        goto LABEL_477;
                    }
                    else if ((v311 & v308) != v305)
                    {
                      goto LABEL_720;
                    }
                    v307 = (_QWORD *)*v307;
                    if (!v307)
                      goto LABEL_720;
                  }
                }
                while (2)
                {
                  v309 = v307[1];
                  if (result != v309)
                  {
                    if (v309 >= *(_QWORD *)&v303)
                      v309 %= *(_QWORD *)&v303;
                    if (v309 != v305)
                      goto LABEL_720;
                    goto LABEL_522;
                  }
                  if (v307[2] != (_QWORD)v437 || v307[3] != *((_QWORD *)&v437 + 1))
                  {
LABEL_522:
                    v307 = (_QWORD *)*v307;
                    if (!v307)
                      goto LABEL_720;
                    continue;
                  }
                  break;
                }
LABEL_477:
                v284 = v297[15];
                v285 = v307[15];
                v37 = v284 == v285;
                v286 = v284 >= v285;
                if (v37)
                  v286 = v297[14] > v307[14];
                if (v286)
                {
                  v287 += 2;
                  v288 = v289;
                }
                v283 = (unint64_t)(v278 - 2) >> 1;
LABEL_482:
                *(_OWORD *)v282 = *(_OWORD *)v287;
                v282 = v287;
                v281 = v288;
                if (v288 <= v283)
                  continue;
                break;
              }
              v279 -= 2;
              if (v287 == v279)
              {
                *(_OWORD *)v287 = v436;
                goto LABEL_475;
              }
              *(_OWORD *)v287 = *(_OWORD *)v279;
              *(_OWORD *)v279 = v436;
              v313 = (char *)v287 - (char *)v431 + 16;
              if (v313 >= 17)
              {
                v430 = v278;
                v314 = (((unint64_t)v313 >> 4) - 2) >> 1;
                v315 = &v431[2 * v314];
                v316 = *a3;
                v317 = sub_22381AF00(*a3, *v315, v315[1]);
                result = (unint64_t)sub_22381AF00(v316, *v287, v287[1]);
                v318 = v317[11];
                v319 = *(_QWORD *)(result + 88);
                v37 = v318 == v319;
                v320 = v318 >= v319;
                if (v37)
                  v320 = v317[10] > *(_QWORD *)(result + 80);
                v278 = v430;
                if (v320)
                  break;
              }
LABEL_475:
              if (v278-- <= 2)
                return result;
            }
            v321 = *v287;
            v322 = v287[1];
LABEL_550:
            v326 = v287;
            v287 = v315;
            *(_OWORD *)v326 = *(_OWORD *)v315;
            if (!v314)
            {
LABEL_608:
              *v287 = v321;
              v287[1] = v322;
              v278 = v430;
              goto LABEL_475;
            }
            v314 = (v314 - 1) >> 1;
            v315 = &v431[2 * v314];
            v327 = *a3;
            v437 = *(_OWORD *)v315;
            v328 = sub_22456636C((unsigned __int8 *)&v437);
            v329 = (int8x8_t)v327[1];
            if (!*(_QWORD *)&v329)
              goto LABEL_756;
            v330 = (uint8x8_t)vcnt_s8(v329);
            v330.i16[0] = vaddlv_u8(v330);
            if (v330.u32[0] > 1uLL)
            {
              v331 = v328;
              if (v328 >= *(_QWORD *)&v329)
                v331 = v328 % *(_QWORD *)&v329;
            }
            else
            {
              v331 = (*(_QWORD *)&v329 - 1) & v328;
            }
            v332 = *(_QWORD **)(*v327 + 8 * v331);
            if (!v332 || (v333 = (_QWORD *)*v332) == 0)
            {
LABEL_756:
              v439 = 0;
              sub_223846924(&v438, "Entry not found ");
              sub_22319B83C((uint64_t)&v433, (uint64_t)&v438, (unsigned __int8 *)&v437);
              if (v439 == -1)
                sub_22316DD70();
              v433 = &v432;
              ((void (*)(std::string *__return_ptr, char **, __int128 *))off_24EC5B118[v439])(&v434, &v433, &v438);
              if (v439 != -1)
                ((void (*)(char **, __int128 *))off_24EC5B100[v439])(&v433, &v438);
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v417 = &v434;
              else
                v417 = (std::string *)v434.__r_.__value_.__r.__words[0];
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v418 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
              else
                v418 = v434.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v417, v418, (void (*)(void **))sub_22457406C);
              std::string::~string(&v434);
              abort();
            }
            if (v330.u32[0] < 2uLL)
            {
              v334 = *(_QWORD *)&v329 - 1;
              while (1)
              {
                v337 = v333[1];
                if (v328 == v337)
                {
                  if (v333[2] == (_QWORD)v437 && v333[3] == *((_QWORD *)&v437 + 1))
                    goto LABEL_579;
                }
                else if ((v337 & v334) != v331)
                {
                  goto LABEL_756;
                }
                v333 = (_QWORD *)*v333;
                if (!v333)
                  goto LABEL_756;
              }
            }
            while (1)
            {
              v335 = v333[1];
              if (v328 == v335)
              {
                if (v333[2] == (_QWORD)v437 && v333[3] == *((_QWORD *)&v437 + 1))
                {
LABEL_579:
                  *(_QWORD *)&v437 = v321;
                  *((_QWORD *)&v437 + 1) = v322;
                  result = sub_22456636C((unsigned __int8 *)&v437);
                  v339 = (int8x8_t)v327[1];
                  if (!*(_QWORD *)&v339)
                    goto LABEL_758;
                  v340 = (uint8x8_t)vcnt_s8(v339);
                  v340.i16[0] = vaddlv_u8(v340);
                  if (v340.u32[0] > 1uLL)
                  {
                    v341 = result;
                    if (result >= *(_QWORD *)&v339)
                      v341 = result % *(_QWORD *)&v339;
                  }
                  else
                  {
                    v341 = (*(_QWORD *)&v339 - 1) & result;
                  }
                  v342 = *(_QWORD **)(*v327 + 8 * v341);
                  if (!v342 || (v343 = (_QWORD *)*v342) == 0)
                  {
LABEL_758:
                    v439 = 0;
                    sub_223846924(&v438, "Entry not found ");
                    sub_22319B83C((uint64_t)&v433, (uint64_t)&v438, (unsigned __int8 *)&v437);
                    if (v439 == -1)
                      sub_22316DD70();
                    v433 = &v432;
                    ((void (*)(std::string *__return_ptr, char **, __int128 *))off_24EC5B118[v439])(&v434, &v433, &v438);
                    if (v439 != -1)
                      ((void (*)(char **, __int128 *))off_24EC5B100[v439])(&v433, &v438);
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v419 = &v434;
                    else
                      v419 = (std::string *)v434.__r_.__value_.__r.__words[0];
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v420 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                    else
                      v420 = v434.__r_.__value_.__l.__size_;
                    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v419, v420, (void (*)(void **))sub_22457406C);
                    std::string::~string(&v434);
                    abort();
                  }
                  if (v340.u32[0] < 2uLL)
                  {
                    v344 = *(_QWORD *)&v339 - 1;
                    while (1)
                    {
                      v347 = v343[1];
                      if (result == v347)
                      {
                        if (v343[2] == (_QWORD)v437 && v343[3] == *((_QWORD *)&v437 + 1))
                          goto LABEL_547;
                      }
                      else if ((v347 & v344) != v341)
                      {
                        goto LABEL_758;
                      }
                      v343 = (_QWORD *)*v343;
                      if (!v343)
                        goto LABEL_758;
                    }
                  }
                  while (2)
                  {
                    v345 = v343[1];
                    if (result != v345)
                    {
                      if (v345 >= *(_QWORD *)&v339)
                        v345 %= *(_QWORD *)&v339;
                      if (v345 != v341)
                        goto LABEL_758;
                      goto LABEL_589;
                    }
                    if (v343[2] != (_QWORD)v437 || v343[3] != *((_QWORD *)&v437 + 1))
                    {
LABEL_589:
                      v343 = (_QWORD *)*v343;
                      if (!v343)
                        goto LABEL_758;
                      continue;
                    }
                    break;
                  }
LABEL_547:
                  v323 = v333[15];
                  v324 = v343[15];
                  v37 = v323 == v324;
                  v325 = v323 >= v324;
                  if (v37)
                    v325 = v333[14] > v343[14];
                  if (!v325)
                    goto LABEL_608;
                  goto LABEL_550;
                }
              }
              else
              {
                if (v335 >= *(_QWORD *)&v329)
                  v335 %= *(_QWORD *)&v329;
                if (v335 != v331)
                  goto LABEL_756;
              }
              v333 = (_QWORD *)*v333;
              if (!v333)
                goto LABEL_756;
            }
          }
          v12 = &v9[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            sub_22383A6C8(&v9[2 * (v11 >> 1)], v9, v425, a3);
          }
          else
          {
            sub_22383A6C8(v9, &v9[2 * (v11 >> 1)], v425, a3);
            v13 = &v431[2 * (v11 >> 1)];
            sub_22383A6C8(v431 + 2, v13 - 2, v423, a3);
            sub_22383A6C8(v431 + 4, v13 + 2, v421, a3);
            sub_22383A6C8(v13 - 2, v12, v13 + 2, a3);
            v438 = *(_OWORD *)v431;
            *(_OWORD *)v431 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v438;
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v14 = *a3;
            v15 = sub_22381AF00(*a3, *(v431 - 2), *(v431 - 1));
            v16 = sub_22381AF00(v14, *v431, v431[1]);
            v17 = v15[11];
            v18 = v16[11];
            v37 = v17 == v18;
            v19 = v17 >= v18;
            if (v37)
              v19 = v15[10] > v16[10];
            if (!v19)
            {
              v125 = *v431;
              v126 = v431[1];
              v127 = *a3;
              v128 = sub_22381AF00(*a3, *v431, v126);
              result = (unint64_t)sub_22381AF00(v127, *(v429 - 2), *(v429 - 1));
              v129 = v128[11];
              v130 = *(_QWORD *)(result + 88);
              v37 = v129 == v130;
              v131 = v129 >= v130;
              if (v37)
                v131 = v128[10] > *(_QWORD *)(result + 80);
              if (v131)
              {
                v132 = v431;
                do
                {
                  v133 = *a3;
                  v134 = sub_22381AF00(*a3, v125, v126);
                  v8 = v132 + 2;
                  result = (unint64_t)sub_22381AF00(v133, v132[2], v132[3]);
                  v135 = v134[11];
                  v136 = *(_QWORD *)(result + 88);
                  v37 = v135 == v136;
                  v137 = v135 >= v136;
                  if (v37)
                    v137 = v134[10] > *(_QWORD *)(result + 80);
                  v132 += 2;
                }
                while (!v137);
              }
              else
              {
                v138 = v431 + 2;
                do
                {
                  v8 = v138;
                  if (v138 >= v429)
                    break;
                  v139 = *a3;
                  v140 = sub_22381AF00(*a3, v125, v126);
                  result = (unint64_t)sub_22381AF00(v139, *v8, v8[1]);
                  v141 = v140[11];
                  v142 = *(_QWORD *)(result + 88);
                  v143 = v140[10] > *(_QWORD *)(result + 80);
                  v37 = v141 == v142;
                  v144 = v141 >= v142;
                  if (!v37)
                    v143 = v144;
                  v138 = v8 + 2;
                }
                while (!v143);
              }
              v145 = v429;
              if (v8 < v429)
              {
                v146 = v429;
                do
                {
                  v147 = *a3;
                  v148 = sub_22381AF00(*a3, v125, v126);
                  v145 = v146 - 2;
                  result = (unint64_t)sub_22381AF00(v147, *(v146 - 2), *(v146 - 1));
                  v149 = v148[11];
                  v150 = *(_QWORD *)(result + 88);
                  v37 = v149 == v150;
                  v151 = v149 >= v150;
                  if (v37)
                    v151 = v148[10] > *(_QWORD *)(result + 80);
                  v146 -= 2;
                }
                while (v151);
              }
              while (v8 < v145)
              {
                v438 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v145;
                *(_OWORD *)v145 = v438;
                while (2)
                {
                  v155 = *a3;
                  *(_QWORD *)&v437 = v125;
                  *((_QWORD *)&v437 + 1) = v126;
                  v156 = sub_22456636C((unsigned __int8 *)&v437);
                  v157 = (int8x8_t)v155[1];
                  if (!*(_QWORD *)&v157)
                    goto LABEL_722;
                  v158 = (uint8x8_t)vcnt_s8(v157);
                  v158.i16[0] = vaddlv_u8(v158);
                  if (v158.u32[0] > 1uLL)
                  {
                    v159 = v156;
                    if (v156 >= *(_QWORD *)&v157)
                      v159 = v156 % *(_QWORD *)&v157;
                  }
                  else
                  {
                    v159 = (*(_QWORD *)&v157 - 1) & v156;
                  }
                  v160 = *(_QWORD **)(*v155 + 8 * v159);
                  if (!v160 || (v161 = (_QWORD *)*v160) == 0)
                  {
LABEL_722:
                    v439 = 0;
                    sub_223846924(&v438, "Entry not found ");
                    sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                    if (v439 == -1)
                      sub_22316DD70();
                    *(_QWORD *)&v436 = &v435;
                    ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                    if (v439 != -1)
                      ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v401 = &v434;
                    else
                      v401 = (std::string *)v434.__r_.__value_.__r.__words[0];
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v402 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                    else
                      v402 = v434.__r_.__value_.__l.__size_;
                    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v401, v402, (void (*)(void **))sub_22457406C);
                    std::string::~string(&v434);
                    abort();
                  }
                  if (v158.u32[0] < 2uLL)
                  {
                    v162 = *(_QWORD *)&v157 - 1;
                    while (1)
                    {
                      v165 = v161[1];
                      if (v156 == v165)
                      {
                        if (v161[2] == (_QWORD)v437 && v161[3] == *((_QWORD *)&v437 + 1))
                          goto LABEL_265;
                      }
                      else if ((v165 & v162) != v159)
                      {
                        goto LABEL_722;
                      }
                      v161 = (_QWORD *)*v161;
                      if (!v161)
                        goto LABEL_722;
                    }
                  }
                  while (1)
                  {
                    v163 = v161[1];
                    if (v156 == v163)
                      break;
                    if (v163 >= *(_QWORD *)&v157)
                      v163 %= *(_QWORD *)&v157;
                    if (v163 != v159)
                      goto LABEL_722;
LABEL_247:
                    v161 = (_QWORD *)*v161;
                    if (!v161)
                      goto LABEL_722;
                  }
                  if (v161[2] != (_QWORD)v437 || v161[3] != *((_QWORD *)&v437 + 1))
                    goto LABEL_247;
LABEL_265:
                  v167 = *((_OWORD *)v8 + 1);
                  v8 += 2;
                  v437 = v167;
                  v168 = sub_22456636C((unsigned __int8 *)&v437);
                  v169 = (int8x8_t)v155[1];
                  if (!*(_QWORD *)&v169)
                    goto LABEL_724;
                  v170 = (uint8x8_t)vcnt_s8(v169);
                  v170.i16[0] = vaddlv_u8(v170);
                  if (v170.u32[0] > 1uLL)
                  {
                    v171 = v168;
                    if (v168 >= *(_QWORD *)&v169)
                      v171 = v168 % *(_QWORD *)&v169;
                  }
                  else
                  {
                    v171 = (*(_QWORD *)&v169 - 1) & v168;
                  }
                  v172 = *(_QWORD **)(*v155 + 8 * v171);
                  if (!v172 || (v173 = (_QWORD *)*v172) == 0)
                  {
LABEL_724:
                    v439 = 0;
                    sub_223846924(&v438, "Entry not found ");
                    sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                    if (v439 == -1)
                      sub_22316DD70();
                    *(_QWORD *)&v436 = &v435;
                    ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                    if (v439 != -1)
                      ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v403 = &v434;
                    else
                      v403 = (std::string *)v434.__r_.__value_.__r.__words[0];
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v404 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                    else
                      v404 = v434.__r_.__value_.__l.__size_;
                    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v403, v404, (void (*)(void **))sub_22457406C);
                    std::string::~string(&v434);
                    abort();
                  }
                  if (v170.u32[0] < 2uLL)
                  {
                    v174 = *(_QWORD *)&v169 - 1;
                    while (1)
                    {
                      v177 = v173[1];
                      if (v168 == v177)
                      {
                        if (v173[2] == (_QWORD)v437 && v173[3] == *((_QWORD *)&v437 + 1))
                          goto LABEL_234;
                      }
                      else if ((v177 & v174) != v171)
                      {
                        goto LABEL_724;
                      }
                      v173 = (_QWORD *)*v173;
                      if (!v173)
                        goto LABEL_724;
                    }
                  }
                  while (2)
                  {
                    v175 = v173[1];
                    if (v168 != v175)
                    {
                      if (v175 >= *(_QWORD *)&v169)
                        v175 %= *(_QWORD *)&v169;
                      if (v175 != v171)
                        goto LABEL_724;
                      goto LABEL_275;
                    }
                    if (v173[2] != (_QWORD)v437 || v173[3] != *((_QWORD *)&v437 + 1))
                    {
LABEL_275:
                      v173 = (_QWORD *)*v173;
                      if (!v173)
                        goto LABEL_724;
                      continue;
                    }
                    break;
                  }
LABEL_234:
                  v152 = v161[15];
                  v153 = v173[15];
                  v37 = v152 == v153;
                  v154 = v152 >= v153;
                  if (v37)
                    v154 = v161[14] > v173[14];
                  if (!v154)
                    continue;
                  break;
                }
                while (2)
                {
                  v182 = *a3;
                  *(_QWORD *)&v437 = v125;
                  *((_QWORD *)&v437 + 1) = v126;
                  v183 = sub_22456636C((unsigned __int8 *)&v437);
                  v184 = (int8x8_t)v182[1];
                  if (!*(_QWORD *)&v184)
                    goto LABEL_726;
                  v185 = (uint8x8_t)vcnt_s8(v184);
                  v185.i16[0] = vaddlv_u8(v185);
                  if (v185.u32[0] > 1uLL)
                  {
                    v186 = v183;
                    if (v183 >= *(_QWORD *)&v184)
                      v186 = v183 % *(_QWORD *)&v184;
                  }
                  else
                  {
                    v186 = (*(_QWORD *)&v184 - 1) & v183;
                  }
                  v187 = *(_QWORD **)(*v182 + 8 * v186);
                  if (!v187 || (v188 = (_QWORD *)*v187) == 0)
                  {
LABEL_726:
                    v439 = 0;
                    sub_223846924(&v438, "Entry not found ");
                    sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                    if (v439 == -1)
                      sub_22316DD70();
                    *(_QWORD *)&v436 = &v435;
                    ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                    if (v439 != -1)
                      ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v405 = &v434;
                    else
                      v405 = (std::string *)v434.__r_.__value_.__r.__words[0];
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v406 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                    else
                      v406 = v434.__r_.__value_.__l.__size_;
                    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v405, v406, (void (*)(void **))sub_22457406C);
                    std::string::~string(&v434);
                    abort();
                  }
                  if (v185.u32[0] < 2uLL)
                  {
                    v189 = *(_QWORD *)&v184 - 1;
                    while (1)
                    {
                      v192 = v188[1];
                      if (v183 == v192)
                      {
                        if (v188[2] == (_QWORD)v437 && v188[3] == *((_QWORD *)&v437 + 1))
                          goto LABEL_325;
                      }
                      else if ((v192 & v189) != v186)
                      {
                        goto LABEL_726;
                      }
                      v188 = (_QWORD *)*v188;
                      if (!v188)
                        goto LABEL_726;
                    }
                  }
                  while (2)
                  {
                    v190 = v188[1];
                    if (v183 != v190)
                    {
                      if (v190 >= *(_QWORD *)&v184)
                        v190 %= *(_QWORD *)&v184;
                      if (v190 != v186)
                        goto LABEL_726;
                      goto LABEL_307;
                    }
                    if (v188[2] != (_QWORD)v437 || v188[3] != *((_QWORD *)&v437 + 1))
                    {
LABEL_307:
                      v188 = (_QWORD *)*v188;
                      if (!v188)
                        goto LABEL_726;
                      continue;
                    }
                    break;
                  }
LABEL_325:
                  v194 = *((_OWORD *)v145 - 1);
                  v145 -= 2;
                  v437 = v194;
                  result = sub_22456636C((unsigned __int8 *)&v437);
                  v195 = (int8x8_t)v182[1];
                  if (!*(_QWORD *)&v195)
                    goto LABEL_728;
                  v196 = (uint8x8_t)vcnt_s8(v195);
                  v196.i16[0] = vaddlv_u8(v196);
                  if (v196.u32[0] > 1uLL)
                  {
                    v197 = result;
                    if (result >= *(_QWORD *)&v195)
                      v197 = result % *(_QWORD *)&v195;
                  }
                  else
                  {
                    v197 = (*(_QWORD *)&v195 - 1) & result;
                  }
                  v198 = *(_QWORD **)(*v182 + 8 * v197);
                  if (!v198 || (v199 = (_QWORD *)*v198) == 0)
                  {
LABEL_728:
                    v439 = 0;
                    sub_223846924(&v438, "Entry not found ");
                    sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                    if (v439 == -1)
                      sub_22316DD70();
                    *(_QWORD *)&v436 = &v435;
                    ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                    if (v439 != -1)
                      ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v407 = &v434;
                    else
                      v407 = (std::string *)v434.__r_.__value_.__r.__words[0];
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v408 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                    else
                      v408 = v434.__r_.__value_.__l.__size_;
                    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v407, v408, (void (*)(void **))sub_22457406C);
                    std::string::~string(&v434);
                    abort();
                  }
                  if (v196.u32[0] < 2uLL)
                  {
                    v200 = *(_QWORD *)&v195 - 1;
                    while (1)
                    {
                      v203 = v199[1];
                      if (result == v203)
                      {
                        if (v199[2] == (_QWORD)v437 && v199[3] == *((_QWORD *)&v437 + 1))
                          goto LABEL_294;
                      }
                      else if ((v203 & v200) != v197)
                      {
                        goto LABEL_728;
                      }
                      v199 = (_QWORD *)*v199;
                      if (!v199)
                        goto LABEL_728;
                    }
                  }
                  while (2)
                  {
                    v201 = v199[1];
                    if (result != v201)
                    {
                      if (v201 >= *(_QWORD *)&v195)
                        v201 %= *(_QWORD *)&v195;
                      if (v201 != v197)
                        goto LABEL_728;
                      goto LABEL_335;
                    }
                    if (v199[2] != (_QWORD)v437 || v199[3] != *((_QWORD *)&v437 + 1))
                    {
LABEL_335:
                      v199 = (_QWORD *)*v199;
                      if (!v199)
                        goto LABEL_728;
                      continue;
                    }
                    break;
                  }
LABEL_294:
                  v179 = v188[15];
                  v180 = v199[15];
                  v37 = v179 == v180;
                  v181 = v179 >= v180;
                  if (v37)
                    v181 = v188[14] > v199[14];
                  if (v181)
                    continue;
                  break;
                }
              }
              a2 = v429;
              if (v8 - 2 != v431)
                *(_OWORD *)v431 = *((_OWORD *)v8 - 1);
              a5 = 0;
              *(v8 - 2) = v125;
              *(v8 - 1) = v126;
              continue;
            }
          }
          v20 = v431;
          v22 = *v431;
          v21 = v431[1];
          while (2)
          {
            v26 = v20;
            v27 = *((_OWORD *)v20 + 1);
            v20 += 2;
            v28 = *a3;
            v437 = v27;
            v29 = sub_22456636C((unsigned __int8 *)&v437);
            v30 = (int8x8_t)v28[1];
            if (!*(_QWORD *)&v30)
              goto LABEL_714;
            v31 = (uint8x8_t)vcnt_s8(v30);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              v32 = v29;
              if (v29 >= *(_QWORD *)&v30)
                v32 = v29 % *(_QWORD *)&v30;
            }
            else
            {
              v32 = (*(_QWORD *)&v30 - 1) & v29;
            }
            v33 = *(_QWORD **)(*v28 + 8 * v32);
            if (!v33 || (v34 = (_QWORD *)*v33) == 0)
            {
LABEL_714:
              v439 = 0;
              sub_223846924(&v438, "Entry not found ");
              sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
              if (v439 == -1)
                sub_22316DD70();
              *(_QWORD *)&v436 = &v435;
              ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
              if (v439 != -1)
                ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v393 = &v434;
              else
                v393 = (std::string *)v434.__r_.__value_.__r.__words[0];
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v394 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
              else
                v394 = v434.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v393, v394, (void (*)(void **))sub_22457406C);
              std::string::~string(&v434);
              abort();
            }
            if (v31.u32[0] < 2uLL)
            {
              v35 = *(_QWORD *)&v30 - 1;
              while (1)
              {
                v38 = v34[1];
                if (v29 == v38)
                {
                  if (v34[2] == (_QWORD)v437 && v34[3] == *((_QWORD *)&v437 + 1))
                    goto LABEL_45;
                }
                else if ((v38 & v35) != v32)
                {
                  goto LABEL_714;
                }
                v34 = (_QWORD *)*v34;
                if (!v34)
                  goto LABEL_714;
              }
            }
            while (1)
            {
              v36 = v34[1];
              if (v29 == v36)
                break;
              if (v36 >= *(_QWORD *)&v30)
                v36 %= *(_QWORD *)&v30;
              if (v36 != v32)
                goto LABEL_714;
LABEL_27:
              v34 = (_QWORD *)*v34;
              if (!v34)
                goto LABEL_714;
            }
            v37 = v34[2] == (_QWORD)v437 && v34[3] == *((_QWORD *)&v437 + 1);
            if (!v37)
              goto LABEL_27;
LABEL_45:
            *(_QWORD *)&v437 = v22;
            *((_QWORD *)&v437 + 1) = v21;
            v40 = sub_22456636C((unsigned __int8 *)&v437);
            v41 = (int8x8_t)v28[1];
            if (!*(_QWORD *)&v41)
              goto LABEL_716;
            v42 = (uint8x8_t)vcnt_s8(v41);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              v43 = v40;
              if (v40 >= *(_QWORD *)&v41)
                v43 = v40 % *(_QWORD *)&v41;
            }
            else
            {
              v43 = (*(_QWORD *)&v41 - 1) & v40;
            }
            v44 = *(_QWORD **)(*v28 + 8 * v43);
            if (!v44 || (v45 = (_QWORD *)*v44) == 0)
            {
LABEL_716:
              v439 = 0;
              sub_223846924(&v438, "Entry not found ");
              sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
              if (v439 == -1)
                sub_22316DD70();
              *(_QWORD *)&v436 = &v435;
              ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
              if (v439 != -1)
                ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v395 = &v434;
              else
                v395 = (std::string *)v434.__r_.__value_.__r.__words[0];
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v396 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
              else
                v396 = v434.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v395, v396, (void (*)(void **))sub_22457406C);
              std::string::~string(&v434);
              abort();
            }
            if (v42.u32[0] < 2uLL)
            {
              v46 = *(_QWORD *)&v41 - 1;
              while (1)
              {
                v49 = v45[1];
                if (v40 == v49)
                {
                  if (v45[2] == (_QWORD)v437 && v45[3] == *((_QWORD *)&v437 + 1))
                    goto LABEL_14;
                }
                else if ((v49 & v46) != v43)
                {
                  goto LABEL_716;
                }
                v45 = (_QWORD *)*v45;
                if (!v45)
                  goto LABEL_716;
              }
            }
            while (2)
            {
              v47 = v45[1];
              if (v40 != v47)
              {
                if (v47 >= *(_QWORD *)&v41)
                  v47 %= *(_QWORD *)&v41;
                if (v47 != v43)
                  goto LABEL_716;
                goto LABEL_55;
              }
              if (v45[2] != (_QWORD)v437 || v45[3] != *((_QWORD *)&v437 + 1))
              {
LABEL_55:
                v45 = (_QWORD *)*v45;
                if (!v45)
                  goto LABEL_716;
                continue;
              }
              break;
            }
LABEL_14:
            v23 = v34[15];
            v24 = v45[15];
            v37 = v23 == v24;
            v25 = v23 >= v24;
            if (v37)
              v25 = v34[14] > v45[14];
            if (v25)
              continue;
            break;
          }
          v51 = v429;
          if (v26 == v431)
          {
            v51 = v429;
            do
            {
              if (v20 >= v51)
                break;
              v60 = *(v51 - 2);
              v61 = *(v51 - 1);
              v51 -= 2;
              v62 = *a3;
              v63 = sub_22381AF00(*a3, v60, v61);
              v64 = sub_22381AF00(v62, v22, v21);
              v65 = v63[11];
              v66 = v64[11];
              v37 = v65 == v66;
              v67 = v65 >= v66;
              if (v37)
                v67 = v63[10] > v64[10];
            }
            while (!v67);
          }
          else
          {
            do
            {
              v52 = *(v51 - 2);
              v53 = *(v51 - 1);
              v51 -= 2;
              v54 = *a3;
              v55 = sub_22381AF00(*a3, v52, v53);
              v56 = sub_22381AF00(v54, v22, v21);
              v57 = v55[11];
              v58 = v56[11];
              v37 = v57 == v58;
              v59 = v57 >= v58;
              if (v37)
                v59 = v55[10] > v56[10];
            }
            while (!v59);
          }
          v8 = v20;
          if (v20 >= v51)
            goto LABEL_208;
          v68 = v51;
          while (2)
          {
            v438 = *(_OWORD *)v8;
            v69 = v438;
            *(_OWORD *)v8 = *(_OWORD *)v68;
            *(_OWORD *)v68 = v69;
            while (2)
            {
              v73 = *((_OWORD *)v8 + 1);
              v8 += 2;
              v74 = *a3;
              v437 = v73;
              v75 = sub_22456636C((unsigned __int8 *)&v437);
              v76 = (int8x8_t)v74[1];
              if (!*(_QWORD *)&v76)
                goto LABEL_367;
              v77 = (uint8x8_t)vcnt_s8(v76);
              v77.i16[0] = vaddlv_u8(v77);
              if (v77.u32[0] > 1uLL)
              {
                v78 = v75;
                if (v75 >= *(_QWORD *)&v76)
                  v78 = v75 % *(_QWORD *)&v76;
              }
              else
              {
                v78 = (*(_QWORD *)&v76 - 1) & v75;
              }
              v79 = *(_QWORD **)(*v74 + 8 * v78);
              if (!v79 || (v80 = (_QWORD *)*v79) == 0)
              {
LABEL_367:
                v439 = 0;
                sub_223846924(&v438, "Entry not found ");
                sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                if (v439 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v436 = &v435;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                if (v439 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v385 = &v434;
                else
                  v385 = (std::string *)v434.__r_.__value_.__r.__words[0];
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v386 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                else
                  v386 = v434.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v385, v386, (void (*)(void **))sub_22457406C);
                std::string::~string(&v434);
                abort();
              }
              if (v77.u32[0] < 2uLL)
              {
                v81 = *(_QWORD *)&v76 - 1;
                while (1)
                {
                  v84 = v80[1];
                  if (v75 == v84)
                  {
                    if (v80[2] == (_QWORD)v437 && v80[3] == *((_QWORD *)&v437 + 1))
                      goto LABEL_119;
                  }
                  else if ((v84 & v81) != v78)
                  {
                    goto LABEL_367;
                  }
                  v80 = (_QWORD *)*v80;
                  if (!v80)
                    goto LABEL_367;
                }
              }
              while (2)
              {
                v82 = v80[1];
                if (v75 != v82)
                {
                  if (v82 >= *(_QWORD *)&v76)
                    v82 %= *(_QWORD *)&v76;
                  if (v82 != v78)
                    goto LABEL_367;
                  goto LABEL_101;
                }
                if (v80[2] != (_QWORD)v437 || v80[3] != *((_QWORD *)&v437 + 1))
                {
LABEL_101:
                  v80 = (_QWORD *)*v80;
                  if (!v80)
                    goto LABEL_367;
                  continue;
                }
                break;
              }
LABEL_119:
              *(_QWORD *)&v437 = v22;
              *((_QWORD *)&v437 + 1) = v21;
              v86 = sub_22456636C((unsigned __int8 *)&v437);
              v87 = (int8x8_t)v74[1];
              if (!*(_QWORD *)&v87)
                goto LABEL_369;
              v88 = (uint8x8_t)vcnt_s8(v87);
              v88.i16[0] = vaddlv_u8(v88);
              if (v88.u32[0] > 1uLL)
              {
                v89 = v86;
                if (v86 >= *(_QWORD *)&v87)
                  v89 = v86 % *(_QWORD *)&v87;
              }
              else
              {
                v89 = (*(_QWORD *)&v87 - 1) & v86;
              }
              v90 = *(_QWORD **)(*v74 + 8 * v89);
              if (!v90 || (v91 = (_QWORD *)*v90) == 0)
              {
LABEL_369:
                v439 = 0;
                sub_223846924(&v438, "Entry not found ");
                sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                if (v439 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v436 = &v435;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                if (v439 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v387 = &v434;
                else
                  v387 = (std::string *)v434.__r_.__value_.__r.__words[0];
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v388 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                else
                  v388 = v434.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v387, v388, (void (*)(void **))sub_22457406C);
                std::string::~string(&v434);
                abort();
              }
              if (v88.u32[0] < 2uLL)
              {
                v92 = *(_QWORD *)&v87 - 1;
                while (1)
                {
                  v95 = v91[1];
                  if (v86 == v95)
                  {
                    if (v91[2] == (_QWORD)v437 && v91[3] == *((_QWORD *)&v437 + 1))
                      goto LABEL_88;
                  }
                  else if ((v95 & v92) != v89)
                  {
                    goto LABEL_369;
                  }
                  v91 = (_QWORD *)*v91;
                  if (!v91)
                    goto LABEL_369;
                }
              }
              while (2)
              {
                v93 = v91[1];
                if (v86 != v93)
                {
                  if (v93 >= *(_QWORD *)&v87)
                    v93 %= *(_QWORD *)&v87;
                  if (v93 != v89)
                    goto LABEL_369;
                  goto LABEL_129;
                }
                if (v91[2] != (_QWORD)v437 || v91[3] != *((_QWORD *)&v437 + 1))
                {
LABEL_129:
                  v91 = (_QWORD *)*v91;
                  if (!v91)
                    goto LABEL_369;
                  continue;
                }
                break;
              }
LABEL_88:
              v70 = v80[15];
              v71 = v91[15];
              v37 = v70 == v71;
              v72 = v70 >= v71;
              if (v37)
                v72 = v80[14] > v91[14];
              if (v72)
                continue;
              break;
            }
            while (2)
            {
              v100 = *((_OWORD *)v68 - 1);
              v68 -= 2;
              v101 = *a3;
              v437 = v100;
              v102 = sub_22456636C((unsigned __int8 *)&v437);
              v103 = (int8x8_t)v101[1];
              if (!*(_QWORD *)&v103)
                goto LABEL_371;
              v104 = (uint8x8_t)vcnt_s8(v103);
              v104.i16[0] = vaddlv_u8(v104);
              if (v104.u32[0] > 1uLL)
              {
                v105 = v102;
                if (v102 >= *(_QWORD *)&v103)
                  v105 = v102 % *(_QWORD *)&v103;
              }
              else
              {
                v105 = (*(_QWORD *)&v103 - 1) & v102;
              }
              v106 = *(_QWORD **)(*v101 + 8 * v105);
              if (!v106 || (v107 = (_QWORD *)*v106) == 0)
              {
LABEL_371:
                v439 = 0;
                sub_223846924(&v438, "Entry not found ");
                sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                if (v439 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v436 = &v435;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                if (v439 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v389 = &v434;
                else
                  v389 = (std::string *)v434.__r_.__value_.__r.__words[0];
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v390 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                else
                  v390 = v434.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v389, v390, (void (*)(void **))sub_22457406C);
                std::string::~string(&v434);
                abort();
              }
              if (v104.u32[0] < 2uLL)
              {
                v108 = *(_QWORD *)&v103 - 1;
                while (1)
                {
                  v111 = v107[1];
                  if (v102 == v111)
                  {
                    if (v107[2] == (_QWORD)v437 && v107[3] == *((_QWORD *)&v437 + 1))
                      goto LABEL_179;
                  }
                  else if ((v111 & v108) != v105)
                  {
                    goto LABEL_371;
                  }
                  v107 = (_QWORD *)*v107;
                  if (!v107)
                    goto LABEL_371;
                }
              }
              while (2)
              {
                v109 = v107[1];
                if (v102 != v109)
                {
                  if (v109 >= *(_QWORD *)&v103)
                    v109 %= *(_QWORD *)&v103;
                  if (v109 != v105)
                    goto LABEL_371;
                  goto LABEL_161;
                }
                if (v107[2] != (_QWORD)v437 || v107[3] != *((_QWORD *)&v437 + 1))
                {
LABEL_161:
                  v107 = (_QWORD *)*v107;
                  if (!v107)
                    goto LABEL_371;
                  continue;
                }
                break;
              }
LABEL_179:
              *(_QWORD *)&v437 = v22;
              *((_QWORD *)&v437 + 1) = v21;
              v113 = sub_22456636C((unsigned __int8 *)&v437);
              v114 = (int8x8_t)v101[1];
              if (!*(_QWORD *)&v114)
                goto LABEL_373;
              v115 = (uint8x8_t)vcnt_s8(v114);
              v115.i16[0] = vaddlv_u8(v115);
              if (v115.u32[0] > 1uLL)
              {
                v116 = v113;
                if (v113 >= *(_QWORD *)&v114)
                  v116 = v113 % *(_QWORD *)&v114;
              }
              else
              {
                v116 = (*(_QWORD *)&v114 - 1) & v113;
              }
              v117 = *(_QWORD **)(*v101 + 8 * v116);
              if (!v117 || (v118 = (_QWORD *)*v117) == 0)
              {
LABEL_373:
                v439 = 0;
                sub_223846924(&v438, "Entry not found ");
                sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                if (v439 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v436 = &v435;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                if (v439 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v391 = &v434;
                else
                  v391 = (std::string *)v434.__r_.__value_.__r.__words[0];
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v392 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                else
                  v392 = v434.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v391, v392, (void (*)(void **))sub_22457406C);
                std::string::~string(&v434);
                abort();
              }
              if (v115.u32[0] < 2uLL)
              {
                v119 = *(_QWORD *)&v114 - 1;
                while (1)
                {
                  v122 = v118[1];
                  if (v113 == v122)
                  {
                    if (v118[2] == (_QWORD)v437 && v118[3] == *((_QWORD *)&v437 + 1))
                      goto LABEL_148;
                  }
                  else if ((v122 & v119) != v116)
                  {
                    goto LABEL_373;
                  }
                  v118 = (_QWORD *)*v118;
                  if (!v118)
                    goto LABEL_373;
                }
              }
              while (2)
              {
                v120 = v118[1];
                if (v113 != v120)
                {
                  if (v120 >= *(_QWORD *)&v114)
                    v120 %= *(_QWORD *)&v114;
                  if (v120 != v116)
                    goto LABEL_373;
                  goto LABEL_189;
                }
                if (v118[2] != (_QWORD)v437 || v118[3] != *((_QWORD *)&v437 + 1))
                {
LABEL_189:
                  v118 = (_QWORD *)*v118;
                  if (!v118)
                    goto LABEL_373;
                  continue;
                }
                break;
              }
LABEL_148:
              v97 = v107[15];
              v98 = v118[15];
              v37 = v97 == v98;
              v99 = v97 >= v98;
              if (v37)
                v99 = v107[14] > v118[14];
              if (!v99)
                continue;
              break;
            }
            if (v8 < v68)
              continue;
            break;
          }
LABEL_208:
          result = (unint64_t)v431;
          if (v8 - 2 != v431)
            *(_OWORD *)v431 = *((_OWORD *)v8 - 1);
          *(v8 - 2) = v22;
          *(v8 - 1) = v21;
          if (v20 < v51)
          {
LABEL_213:
            result = sub_22383748C(result, v8 - 2, a3, a4, a5 & 1);
            a5 = 0;
            a2 = v429;
            continue;
          }
          v124 = sub_22383A8A0(v431, v8 - 2, a3);
          result = sub_22383A8A0(v8, v429, a3);
          if (!(_DWORD)result)
          {
            a2 = v429;
            result = (unint64_t)v431;
            if (!v124)
              goto LABEL_213;
            continue;
          }
          a2 = v8 - 2;
          if (v124)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v9 != a2)
          {
            v211 = v9 + 2;
            if (v9 + 2 != a2)
            {
              v212 = v9;
              do
              {
                v214 = v211;
                v215 = *a3;
                v216 = sub_22381AF00(*a3, v212[2], v212[3]);
                result = (unint64_t)sub_22381AF00(v215, *v212, v212[1]);
                v217 = v216[11];
                v218 = *(_QWORD *)(result + 88);
                v37 = v217 == v218;
                v219 = v217 >= v218;
                if (v37)
                  v219 = v216[10] > *(_QWORD *)(result + 80);
                v220 = v429;
                if (!v219)
                  goto LABEL_381;
                v221 = *v214;
                v222 = v212[3];
                v213 = v214;
LABEL_389:
                *(_OWORD *)v213 = *(_OWORD *)v212;
                if (v212 != v431)
                {
                  v213 = v212;
                  v226 = *a3;
                  *(_QWORD *)&v437 = v221;
                  *((_QWORD *)&v437 + 1) = v222;
                  v227 = sub_22456636C((unsigned __int8 *)&v437);
                  v228 = (int8x8_t)v226[1];
                  if (!*(_QWORD *)&v228)
                    goto LABEL_752;
                  v229 = (uint8x8_t)vcnt_s8(v228);
                  v229.i16[0] = vaddlv_u8(v229);
                  if (v229.u32[0] > 1uLL)
                  {
                    v230 = v227;
                    if (v227 >= *(_QWORD *)&v228)
                      v230 = v227 % *(_QWORD *)&v228;
                  }
                  else
                  {
                    v230 = (*(_QWORD *)&v228 - 1) & v227;
                  }
                  v231 = *(_QWORD **)(*v226 + 8 * v230);
                  if (!v231 || (v232 = (_QWORD *)*v231) == 0)
                  {
LABEL_752:
                    v439 = 0;
                    sub_223846924(&v438, "Entry not found ");
                    sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                    if (v439 == -1)
                      sub_22316DD70();
                    *(_QWORD *)&v436 = &v435;
                    ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                    if (v439 != -1)
                      ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v413 = &v434;
                    else
                      v413 = (std::string *)v434.__r_.__value_.__r.__words[0];
                    if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v414 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                    else
                      v414 = v434.__r_.__value_.__l.__size_;
                    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v413, v414, (void (*)(void **))sub_22457406C);
                    std::string::~string(&v434);
                    abort();
                  }
                  if (v229.u32[0] < 2uLL)
                  {
                    v233 = *(_QWORD *)&v228 - 1;
                    while (1)
                    {
                      v236 = v232[1];
                      if (v227 == v236)
                      {
                        if (v232[2] == (_QWORD)v437 && v232[3] == *((_QWORD *)&v437 + 1))
                          goto LABEL_418;
                      }
                      else if ((v236 & v233) != v230)
                      {
                        goto LABEL_752;
                      }
                      v232 = (_QWORD *)*v232;
                      if (!v232)
                        goto LABEL_752;
                    }
                  }
                  while (1)
                  {
                    v234 = v232[1];
                    if (v227 == v234)
                    {
                      if (v232[2] == (_QWORD)v437 && v232[3] == *((_QWORD *)&v437 + 1))
                      {
LABEL_418:
                        v212 -= 2;
                        v437 = *((_OWORD *)v213 - 1);
                        result = sub_22456636C((unsigned __int8 *)&v437);
                        v238 = (int8x8_t)v226[1];
                        if (!*(_QWORD *)&v238)
                          goto LABEL_754;
                        v239 = (uint8x8_t)vcnt_s8(v238);
                        v239.i16[0] = vaddlv_u8(v239);
                        if (v239.u32[0] > 1uLL)
                        {
                          v240 = result;
                          if (result >= *(_QWORD *)&v238)
                            v240 = result % *(_QWORD *)&v238;
                        }
                        else
                        {
                          v240 = (*(_QWORD *)&v238 - 1) & result;
                        }
                        v241 = *(_QWORD **)(*v226 + 8 * v240);
                        if (!v241 || (v242 = (_QWORD *)*v241) == 0)
                        {
LABEL_754:
                          v439 = 0;
                          sub_223846924(&v438, "Entry not found ");
                          sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
                          if (v439 == -1)
                            sub_22316DD70();
                          *(_QWORD *)&v436 = &v435;
                          ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
                          if (v439 != -1)
                            ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
                          if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v415 = &v434;
                          else
                            v415 = (std::string *)v434.__r_.__value_.__r.__words[0];
                          if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v416 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
                          else
                            v416 = v434.__r_.__value_.__l.__size_;
                          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v415, v416, (void (*)(void **))sub_22457406C);
                          std::string::~string(&v434);
                          abort();
                        }
                        if (v239.u32[0] < 2uLL)
                        {
                          v243 = *(_QWORD *)&v238 - 1;
                          while (1)
                          {
                            v246 = v242[1];
                            if (result == v246)
                            {
                              if (v242[2] == (_QWORD)v437 && v242[3] == *((_QWORD *)&v437 + 1))
                                goto LABEL_386;
                            }
                            else if ((v246 & v243) != v240)
                            {
                              goto LABEL_754;
                            }
                            v242 = (_QWORD *)*v242;
                            if (!v242)
                              goto LABEL_754;
                          }
                        }
                        while (2)
                        {
                          v244 = v242[1];
                          if (result != v244)
                          {
                            if (v244 >= *(_QWORD *)&v238)
                              v244 %= *(_QWORD *)&v238;
                            if (v244 != v240)
                              goto LABEL_754;
                            goto LABEL_428;
                          }
                          if (v242[2] != (_QWORD)v437 || v242[3] != *((_QWORD *)&v437 + 1))
                          {
LABEL_428:
                            v242 = (_QWORD *)*v242;
                            if (!v242)
                              goto LABEL_754;
                            continue;
                          }
                          break;
                        }
LABEL_386:
                        v223 = v232[15];
                        v224 = v242[15];
                        v37 = v223 == v224;
                        v225 = v223 >= v224;
                        if (v37)
                          v225 = v232[14] > v242[14];
                        v220 = v429;
                        if (!v225)
                          goto LABEL_380;
                        goto LABEL_389;
                      }
                    }
                    else
                    {
                      if (v234 >= *(_QWORD *)&v228)
                        v234 %= *(_QWORD *)&v228;
                      if (v234 != v230)
                        goto LABEL_752;
                    }
                    v232 = (_QWORD *)*v232;
                    if (!v232)
                      goto LABEL_752;
                  }
                }
                v213 = v431;
LABEL_380:
                *v213 = v221;
                v213[1] = v222;
LABEL_381:
                v211 = v214 + 2;
                v212 = v214;
              }
              while (v214 + 2 != v220);
            }
          }
          return result;
        }
        if (v9 == a2)
          return result;
        v349 = v9 + 2;
        if (v9 + 2 == a2)
          return result;
        while (2)
        {
          v350 = v349;
          v351 = *a3;
          v352 = sub_22381AF00(*a3, v431[2], v431[3]);
          result = (unint64_t)sub_22381AF00(v351, *v431, v431[1]);
          v353 = v352[11];
          v354 = *(_QWORD *)(result + 88);
          v37 = v353 == v354;
          v355 = v353 >= v354;
          if (v37)
            v355 = v352[10] > *(_QWORD *)(result + 80);
          if (!v355)
            goto LABEL_613;
          v356 = *v350;
          v357 = v431[3];
          v358 = v350;
          while (2)
          {
            v362 = v358;
            v358 = v431;
            *(_OWORD *)v362 = *(_OWORD *)v431;
            v363 = *a3;
            *(_QWORD *)&v437 = v356;
            *((_QWORD *)&v437 + 1) = v357;
            v364 = sub_22456636C((unsigned __int8 *)&v437);
            v365 = (int8x8_t)v363[1];
            if (!*(_QWORD *)&v365)
              goto LABEL_748;
            v366 = (uint8x8_t)vcnt_s8(v365);
            v366.i16[0] = vaddlv_u8(v366);
            if (v366.u32[0] > 1uLL)
            {
              v367 = v364;
              if (v364 >= *(_QWORD *)&v365)
                v367 = v364 % *(_QWORD *)&v365;
            }
            else
            {
              v367 = (*(_QWORD *)&v365 - 1) & v364;
            }
            v368 = *(_QWORD **)(*v363 + 8 * v367);
            if (!v368 || (v369 = (_QWORD *)*v368) == 0)
            {
LABEL_748:
              v439 = 0;
              sub_223846924(&v438, "Entry not found ");
              sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
              if (v439 == -1)
                sub_22316DD70();
              *(_QWORD *)&v436 = &v435;
              ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
              if (v439 != -1)
                ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v409 = &v434;
              else
                v409 = (std::string *)v434.__r_.__value_.__r.__words[0];
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v410 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
              else
                v410 = v434.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v409, v410, (void (*)(void **))sub_22457406C);
              std::string::~string(&v434);
              abort();
            }
            if (v366.u32[0] < 2uLL)
            {
              v370 = *(_QWORD *)&v365 - 1;
              while (1)
              {
                v373 = v369[1];
                if (v364 == v373)
                {
                  if (v369[2] == (_QWORD)v437 && v369[3] == *((_QWORD *)&v437 + 1))
                    goto LABEL_649;
                }
                else if ((v373 & v370) != v367)
                {
                  goto LABEL_748;
                }
                v369 = (_QWORD *)*v369;
                if (!v369)
                  goto LABEL_748;
              }
            }
            while (1)
            {
              v371 = v369[1];
              if (v364 == v371)
                break;
              if (v371 >= *(_QWORD *)&v365)
                v371 %= *(_QWORD *)&v365;
              if (v371 != v367)
                goto LABEL_748;
LABEL_631:
              v369 = (_QWORD *)*v369;
              if (!v369)
                goto LABEL_748;
            }
            if (v369[2] != (_QWORD)v437 || v369[3] != *((_QWORD *)&v437 + 1))
              goto LABEL_631;
LABEL_649:
            v431 -= 2;
            v437 = *((_OWORD *)v358 - 1);
            result = sub_22456636C((unsigned __int8 *)&v437);
            v375 = (int8x8_t)v363[1];
            if (!*(_QWORD *)&v375)
              goto LABEL_750;
            v376 = (uint8x8_t)vcnt_s8(v375);
            v376.i16[0] = vaddlv_u8(v376);
            if (v376.u32[0] > 1uLL)
            {
              v377 = result;
              if (result >= *(_QWORD *)&v375)
                v377 = result % *(_QWORD *)&v375;
            }
            else
            {
              v377 = (*(_QWORD *)&v375 - 1) & result;
            }
            v378 = *(_QWORD **)(*v363 + 8 * v377);
            if (!v378 || (v379 = (_QWORD *)*v378) == 0)
            {
LABEL_750:
              v439 = 0;
              sub_223846924(&v438, "Entry not found ");
              sub_22319B83C((uint64_t)&v436, (uint64_t)&v438, (unsigned __int8 *)&v437);
              if (v439 == -1)
                sub_22316DD70();
              *(_QWORD *)&v436 = &v435;
              ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v439])(&v434, &v436, &v438);
              if (v439 != -1)
                ((void (*)(__int128 *, __int128 *))off_24EC5B100[v439])(&v436, &v438);
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v411 = &v434;
              else
                v411 = (std::string *)v434.__r_.__value_.__r.__words[0];
              if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v412 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
              else
                v412 = v434.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v411, v412, (void (*)(void **))sub_22457406C);
              std::string::~string(&v434);
              abort();
            }
            if (v376.u32[0] < 2uLL)
            {
              v380 = *(_QWORD *)&v375 - 1;
              while (1)
              {
                v383 = v379[1];
                if (result == v383)
                {
                  if (v379[2] == (_QWORD)v437 && v379[3] == *((_QWORD *)&v437 + 1))
                    goto LABEL_618;
                }
                else if ((v383 & v380) != v377)
                {
                  goto LABEL_750;
                }
                v379 = (_QWORD *)*v379;
                if (!v379)
                  goto LABEL_750;
              }
            }
            while (2)
            {
              v381 = v379[1];
              if (result != v381)
              {
                if (v381 >= *(_QWORD *)&v375)
                  v381 %= *(_QWORD *)&v375;
                if (v381 != v377)
                  goto LABEL_750;
                goto LABEL_659;
              }
              if (v379[2] != (_QWORD)v437 || v379[3] != *((_QWORD *)&v437 + 1))
              {
LABEL_659:
                v379 = (_QWORD *)*v379;
                if (!v379)
                  goto LABEL_750;
                continue;
              }
              break;
            }
LABEL_618:
            v359 = v369[15];
            v360 = v379[15];
            v37 = v359 == v360;
            v361 = v359 >= v360;
            if (v37)
              v361 = v369[14] > v379[14];
            if (v361)
              continue;
            break;
          }
          *v358 = v356;
          v358[1] = v357;
LABEL_613:
          v349 = v350 + 2;
          v431 = v350;
          if (v350 + 2 != v429)
            continue;
          return result;
        }
    }
  }
}

void sub_223839FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,int a34)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

_QWORD *sub_22383A4F4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD **a6)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  __int128 v37;

  sub_22383AB4C(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = sub_22381AF00(*a6, *a5, a5[1]);
  result = sub_22381AF00(v12, *a4, a4[1]);
  v15 = v13[11];
  v16 = result[11];
  v17 = v15 == v16;
  v18 = v15 >= v16;
  if (v17)
    v18 = v13[10] > result[10];
  if (v18)
  {
    v19 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v19;
    v20 = *a6;
    v21 = sub_22381AF00(*a6, *a4, a4[1]);
    result = sub_22381AF00(v20, *a3, a3[1]);
    v22 = v21[11];
    v23 = result[11];
    v17 = v22 == v23;
    v24 = v22 >= v23;
    if (v17)
      v24 = v21[10] > result[10];
    if (v24)
    {
      v25 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v25;
      v26 = *a6;
      v27 = sub_22381AF00(*a6, *a3, a3[1]);
      result = sub_22381AF00(v26, *a2, a2[1]);
      v28 = v27[11];
      v29 = result[11];
      v17 = v28 == v29;
      v30 = v28 >= v29;
      if (v17)
        v30 = v27[10] > result[10];
      if (v30)
      {
        v31 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v31;
        v32 = *a6;
        v33 = sub_22381AF00(v32, *a2, a2[1]);
        result = sub_22381AF00(v32, *a1, a1[1]);
        v34 = v33[11];
        v35 = result[11];
        v17 = v34 == v35;
        v36 = v34 >= v35;
        if (v17)
          v36 = v33[10] > result[10];
        if (v36)
        {
          v37 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v37;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22383A6C8(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD **a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;

  v8 = *a4;
  v9 = sub_22381AF00(*a4, *a2, a2[1]);
  v10 = sub_22381AF00(v8, *a1, a1[1]);
  v11 = v9[11];
  v12 = v10[11];
  v13 = v11 == v12;
  v14 = v11 >= v12;
  if (v13)
    v15 = v9[10] > v10[10];
  else
    v15 = v14;
  v16 = *a4;
  v17 = sub_22381AF00(*a4, *a3, a3[1]);
  result = sub_22381AF00(v16, *a2, a2[1]);
  v19 = v17[11];
  v20 = result[11];
  v13 = v19 == v20;
  v21 = v19 >= v20;
  if (v13)
    v21 = v17[10] > result[10];
  if (v15)
  {
    if (v21)
    {
      v22 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_18:
      *(_OWORD *)a3 = v22;
      return result;
    }
    v30 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v30;
    v31 = *a4;
    v32 = sub_22381AF00(*a4, *a3, a3[1]);
    result = sub_22381AF00(v31, *a2, a2[1]);
    v33 = v32[11];
    v34 = result[11];
    v13 = v33 == v34;
    v35 = v33 >= v34;
    if (v13)
      v35 = v32[10] > result[10];
    if (v35)
    {
      v22 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_18;
    }
  }
  else if (v21)
  {
    v23 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v23;
    v24 = *a4;
    v25 = sub_22381AF00(*a4, *a2, a2[1]);
    result = sub_22381AF00(v24, *a1, a1[1]);
    v26 = v25[11];
    v27 = result[11];
    v13 = v26 == v27;
    v28 = v26 >= v27;
    if (v13)
      v28 = v25[10] > result[10];
    if (v28)
    {
      v29 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v29;
    }
  }
  return result;
}

BOOL sub_22383A8A0(uint64_t *a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char *v36;
  uint64_t *v37;
  int v38;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 2;
      v9 = *a3;
      v10 = sub_22381AF00(*a3, *(a2 - 2), *(a2 - 1));
      v11 = sub_22381AF00(v9, *a1, a1[1]);
      v12 = v10[11];
      v13 = v11[11];
      v14 = v12 == v13;
      v15 = v12 >= v13;
      if (v14)
        v15 = v10[10] > v11[10];
      if (v15)
      {
        v16 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)v8 = v16;
      }
      return 1;
    case 3:
      sub_22383A6C8(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_22383AB4C(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_22383A4F4(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v17 = a1 + 4;
      sub_22383A6C8(a1, a1 + 2, a1 + 4, a3);
      v18 = a1 + 6;
      if (a1 + 6 == v4)
        return 1;
      v19 = 0;
      v20 = 0;
      v37 = v4;
      break;
  }
  while (1)
  {
    v21 = *a3;
    v22 = sub_22381AF00(*a3, *v18, v18[1]);
    v23 = sub_22381AF00(v21, *v17, v17[1]);
    v24 = v22[11];
    v25 = v23[11];
    v14 = v24 == v25;
    v26 = v24 >= v25;
    if (v14)
      v26 = v22[10] > v23[10];
    if (v26)
      break;
LABEL_19:
    v17 = v18;
    v19 += 16;
    v18 += 2;
    if (v18 == v4)
      return 1;
  }
  v38 = v20;
  v27 = *v18;
  v28 = v18[1];
  v29 = v19;
  do
  {
    *(_OWORD *)((char *)a1 + v29 + 48) = *(_OWORD *)((char *)a1 + v29 + 32);
    if (v29 == -32)
    {
      *a1 = v27;
      a1[1] = v28;
      v20 = v38 + 1;
      v4 = v37;
      if (v38 != 7)
        goto LABEL_19;
      return v18 + 2 == v4;
    }
    v30 = *a3;
    v31 = sub_22381AF00(*a3, v27, v28);
    v32 = sub_22381AF00(v30, *(uint64_t *)((char *)a1 + v29 + 16), *(uint64_t *)((char *)a1 + v29 + 24));
    v33 = v31[11];
    v34 = v32[11];
    v14 = v33 == v34;
    v35 = v33 >= v34;
    if (v14)
      v35 = v31[10] > v32[10];
    v29 -= 16;
  }
  while (v35);
  v36 = (char *)a1 + v29;
  *((_QWORD *)v36 + 6) = v27;
  *((_QWORD *)v36 + 7) = v28;
  v20 = v38 + 1;
  v4 = v37;
  if (v38 != 7)
    goto LABEL_19;
  return v18 + 2 == v4;
}

_QWORD *sub_22383AB4C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD **a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BOOL4 v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  __int128 v29;

  sub_22383A6C8(a1, a2, a3, a5);
  v10 = *a5;
  v11 = sub_22381AF00(*a5, *a4, a4[1]);
  result = sub_22381AF00(v10, *a3, a3[1]);
  v13 = v11[11];
  v14 = result[11];
  v15 = v13 == v14;
  v16 = v13 >= v14;
  if (v15)
    v16 = v11[10] > result[10];
  if (v16)
  {
    v17 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v17;
    v18 = *a5;
    v19 = sub_22381AF00(*a5, *a3, a3[1]);
    result = sub_22381AF00(v18, *a2, a2[1]);
    v20 = v19[11];
    v21 = result[11];
    v15 = v20 == v21;
    v22 = v20 >= v21;
    if (v15)
      v22 = v19[10] > result[10];
    if (v22)
    {
      v23 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v23;
      v24 = *a5;
      v25 = sub_22381AF00(v24, *a2, a2[1]);
      result = sub_22381AF00(v24, *a1, a1[1]);
      v26 = v25[11];
      v27 = result[11];
      v15 = v26 == v27;
      v28 = v26 >= v27;
      if (v15)
        v28 = v25[10] > result[10];
      if (v28)
      {
        v29 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v29;
      }
    }
  }
  return result;
}

double sub_22383ACC8(uint64_t *a1, uint64_t *a2, int8x8_t **a3, uint64_t a4, char a5, float32x4_t a6)
{
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int8x8_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  float32x4_t v18;
  int8x8_t *v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x2_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  BOOL v27;
  BOOL v28;
  unsigned __int32 v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  int8x8_t *v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x2_t v41;
  int8x16_t v42;
  float32x2_t v43;
  float32x2_t v44;
  _BOOL4 v45;
  float v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  __int128 v51;
  int8x8_t *v52;
  unint64_t v53;
  int8x8_t v54;
  int8x8_t *v55;
  uint64_t *v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  unint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x8_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v78;
  int8x8_t *v80;
  int8x16_t v81;
  float32x2_t v82;
  float32x2_t v83;
  int8x16_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  _BOOL4 v88;
  unsigned __int32 v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  int8x8_t *v96;
  _QWORD *v97;
  _QWORD *v98;
  int8x8_t *v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x2_t v103;
  float32x2_t v104;
  int8x16_t v105;
  float32x2_t v106;
  float32x2_t v107;
  _BOOL4 v108;
  unsigned __int32 v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  __int128 v114;
  int8x8_t *v115;
  unint64_t v116;
  __int128 v117;
  int8x8_t v118;
  int8x8_t *v119;
  uint8x8_t v120;
  unint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v127;
  unint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x8_t v132;
  uint8x8_t v133;
  unint64_t v134;
  uint64_t **v135;
  uint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v140;
  int8x8_t *v142;
  int8x16_t v143;
  float32x2_t v144;
  float32x2_t v145;
  int8x16_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  _BOOL4 v150;
  unsigned __int32 v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  int8x8_t *v156;
  unint64_t v157;
  __int128 v158;
  int8x8_t v159;
  int8x8_t *v160;
  uint8x8_t v161;
  unint64_t v162;
  uint64_t **v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v168;
  unint64_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int8x8_t v173;
  uint8x8_t v174;
  unint64_t v175;
  uint64_t **v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v181;
  int8x8_t *v183;
  int8x16_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int8x16_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  BOOL v191;
  unsigned __int32 v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  int8x8_t *v197;
  _QWORD *v198;
  _QWORD *v199;
  int8x8_t *v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  float32x2_t v204;
  float32x2_t v205;
  int8x16_t v206;
  float32x2_t v207;
  float32x2_t v208;
  unsigned __int32 v209;
  float v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  int8x8_t *v217;
  _QWORD *v218;
  _QWORD *v219;
  int8x8_t *v220;
  float32x4_t v221;
  int8x16_t v222;
  float32x2_t v223;
  int8x16_t v224;
  float32x2_t v225;
  float32x2_t v226;
  BOOL v227;
  float v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  int8x8_t *v232;
  _QWORD *v233;
  _QWORD *v234;
  int8x8_t *v235;
  float32x4_t v236;
  int8x16_t v237;
  float32x2_t v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x2_t v241;
  BOOL v242;
  float v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  int8x8_t *v248;
  _QWORD *v249;
  _QWORD *v250;
  int8x8_t *v251;
  float32x4_t v252;
  int8x16_t v253;
  float32x2_t v254;
  int8x16_t v255;
  float32x2_t v256;
  float32x2_t v257;
  BOOL v258;
  float v259;
  uint64_t v260;
  uint64_t v261;
  int8x8_t *v262;
  unint64_t v263;
  int8x8_t v264;
  int8x8_t *v265;
  uint8x8_t v266;
  unint64_t v267;
  uint64_t **v268;
  uint64_t *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v273;
  __int128 v275;
  unint64_t v276;
  float32x4_t v277;
  float32x4_t v278;
  int8x8_t v279;
  uint8x8_t v280;
  unint64_t v281;
  uint64_t **v282;
  uint64_t *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v287;
  int8x8_t *v289;
  int8x16_t v290;
  float32x2_t v291;
  float32x2_t v292;
  int8x16_t v293;
  float32x2_t v294;
  float32x2_t v295;
  float32x2_t v296;
  BOOL v297;
  unsigned __int32 v298;
  float v299;
  uint64_t v300;
  uint64_t v301;
  int8x8_t *v302;
  unint64_t v303;
  int8x8_t v304;
  int8x8_t *v305;
  uint8x8_t v306;
  unint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v313;
  __int128 v315;
  unint64_t v316;
  float32x4_t v317;
  int8x8_t v318;
  uint8x8_t v319;
  unint64_t v320;
  uint64_t **v321;
  uint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v326;
  int8x8_t *v328;
  int8x16_t v329;
  float32x2_t v330;
  int8x16_t v331;
  float32x2_t v332;
  float32x2_t v333;
  _BOOL4 v334;
  float v335;
  uint64_t v336;
  uint64_t v337;
  float32x4_t *v338;
  uint64_t *v339;
  int8x8_t *v340;
  _QWORD *v341;
  _QWORD *v342;
  int8x8_t *v343;
  float32x4_t v344;
  int8x16_t v345;
  float32x2_t v346;
  int8x16_t v347;
  float32x2_t v348;
  float32x2_t v349;
  _BOOL4 v350;
  float v351;
  uint64_t *v352;
  uint64_t *v353;
  uint64_t *v354;
  int8x8_t *v355;
  _QWORD *v356;
  _QWORD *v357;
  int8x8_t *v358;
  float32x4_t v359;
  int8x16_t v360;
  float32x2_t v361;
  int8x16_t v362;
  float32x2_t v363;
  float32x2_t v364;
  _BOOL4 v365;
  float v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  int8x8_t *v372;
  unint64_t v373;
  int8x8_t v374;
  uint8x8_t v375;
  unint64_t v376;
  uint64_t **v377;
  uint64_t *v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v382;
  unint64_t v384;
  float32x4_t v385;
  int8x8_t v386;
  uint8x8_t v387;
  unint64_t v388;
  uint64_t **v389;
  uint64_t *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v394;
  int8x8_t *v396;
  int8x16_t v397;
  float32x2_t v398;
  int8x16_t v399;
  float32x2_t v400;
  float32x2_t v401;
  _BOOL4 v402;
  float v403;
  uint64_t v404;
  uint64_t v405;
  int64_t v406;
  uint64_t *v407;
  uint64_t *v408;
  int64_t v409;
  uint64_t v410;
  uint64_t v411;
  int8x8_t *v412;
  _QWORD *v413;
  _QWORD *v414;
  float32x4_t v415;
  int8x8_t *v416;
  float32x4_t v417;
  int8x16_t v418;
  float32x2_t v419;
  int8x16_t v420;
  float32x2_t v421;
  float32x2_t v422;
  float32x2_t v423;
  _BOOL4 v424;
  unsigned __int32 v425;
  float v426;
  uint64_t v427;
  uint64_t v428;
  int8x8_t *v429;
  _QWORD *v430;
  uint64_t *v431;
  _QWORD *v432;
  float32x4_t v433;
  int8x8_t *v434;
  float32x4_t v435;
  int8x16_t v436;
  float32x2_t v437;
  int8x16_t v438;
  float32x2_t v439;
  float32x2_t v440;
  float32x2_t v441;
  BOOL v442;
  unsigned __int32 v443;
  float v444;
  uint64_t v445;
  uint64_t v446;
  BOOL v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  int8x8_t *v451;
  _QWORD *v452;
  _QWORD *v453;
  float32x4_t v454;
  int8x8_t *v455;
  float32x4_t v456;
  int8x16_t v457;
  float32x2_t v458;
  int8x16_t v459;
  float32x2_t v460;
  float32x2_t v461;
  float32x2_t v462;
  _BOOL4 v463;
  unsigned __int32 v464;
  float v465;
  uint64_t v466;
  uint64_t v467;
  int8x8_t *v468;
  _QWORD *v469;
  _QWORD *v470;
  float32x4_t v471;
  int8x8_t *v472;
  float32x4_t v473;
  int8x16_t v474;
  float32x2_t v475;
  int8x16_t v476;
  float32x2_t v477;
  float32x2_t v478;
  float32x2_t v479;
  BOOL v480;
  unsigned __int32 v481;
  float v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  int8x8_t *v494;
  unint64_t v495;
  int8x8_t v496;
  uint8x8_t v497;
  unint64_t v498;
  uint64_t **v499;
  uint64_t *v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v504;
  unint64_t v506;
  float32x4_t v507;
  float32x4_t v508;
  int8x8_t v509;
  uint8x8_t v510;
  unint64_t v511;
  uint64_t **v512;
  uint64_t *v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v517;
  int8x8_t *v519;
  int8x16_t v520;
  float32x2_t v521;
  float32x2_t v522;
  int8x16_t v523;
  float32x2_t v524;
  float32x2_t v525;
  float32x2_t v526;
  _BOOL4 v527;
  unsigned __int32 v528;
  float v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t *v535;
  int8x8_t *v536;
  _QWORD *v537;
  _QWORD *v538;
  int8x8_t *v539;
  float32x4_t v540;
  int8x16_t v541;
  float32x2_t v542;
  int8x16_t v543;
  float32x2_t v544;
  float32x2_t v545;
  _BOOL4 v546;
  float v547;
  uint64_t v548;
  uint64_t v549;
  BOOL v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t *v553;
  uint64_t *v554;
  unint64_t v555;
  int8x8_t *v556;
  _QWORD *v557;
  _QWORD *v558;
  int8x8_t *v559;
  float32x4_t v560;
  int8x16_t v561;
  float32x2_t v562;
  int8x16_t v563;
  float32x2_t v564;
  float32x2_t v565;
  _BOOL4 v566;
  float v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t *v571;
  int8x8_t *v572;
  _QWORD *v573;
  _QWORD *v574;
  int8x8_t *v575;
  float32x4_t v576;
  int8x16_t v577;
  float32x2_t v578;
  int8x16_t v579;
  float32x2_t v580;
  float32x2_t v581;
  _BOOL4 v582;
  float v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int8x8_t *v588;
  unint64_t v589;
  int8x8_t v590;
  int8x8_t *v591;
  uint8x8_t v592;
  unint64_t v593;
  uint64_t **v594;
  uint64_t *v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v599;
  unint64_t v601;
  float32x4_t v602;
  int8x8_t v603;
  uint8x8_t v604;
  unint64_t v605;
  uint64_t **v606;
  uint64_t *v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v611;
  int8x8_t *v613;
  int8x16_t v614;
  float32x2_t v615;
  int8x16_t v616;
  float32x2_t v617;
  float32x2_t v618;
  _BOOL4 v619;
  float v620;
  uint64_t v621;
  uint64_t v622;
  std::string *v623;
  std::string::size_type v624;
  std::string *v625;
  std::string::size_type v626;
  std::string *v627;
  std::string::size_type v628;
  std::string *v629;
  std::string::size_type v630;
  std::string *v631;
  std::string::size_type v632;
  std::string *v633;
  std::string::size_type v634;
  std::string *v635;
  std::string::size_type size;
  std::string *v637;
  std::string::size_type v638;
  std::string *v639;
  std::string::size_type v640;
  std::string *v641;
  std::string::size_type v642;
  std::string *v643;
  std::string::size_type v644;
  std::string *v645;
  std::string::size_type v646;
  std::string *v647;
  std::string::size_type v648;
  std::string *v649;
  std::string::size_type v650;
  std::string *v651;
  std::string::size_type v652;
  std::string *v653;
  std::string::size_type v654;
  uint64_t *v656;
  uint64_t *v657;
  uint64_t v658;
  uint64_t v660;
  uint64_t *v661;
  int64_t v662;
  int64_t v664;
  uint64_t *v665;
  uint64_t *v666;
  uint64_t *v667;
  char v669;
  char *v670;
  std::string v671;
  char v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  int v676;
  uint64_t v677;

  v677 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v661 = a2 - 2;
  v656 = a2 - 6;
  v657 = a2 - 4;
  i = a1;
  v665 = a2;
  while (2)
  {
    v9 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = ((char *)a2 - (char *)i) >> 4;
    a1 = v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)a6.i64;
      case 2uLL:
        v339 = a2 - 2;
        v340 = *a3;
        v341 = sub_22381AF00(*a3, *(a2 - 2), *(a2 - 1));
        v342 = sub_22381AF00(v340, *a1, a1[1]);
        a6.i64[0] = v341[8];
        a6.i32[2] = *((_DWORD *)v341 + 18);
        v343 = a3[1];
        *(int8x8_t *)v344.f32 = *v343;
        v344.i32[2] = v343[1].i32[0];
        v345 = (int8x16_t)vsubq_f32(a6, v344);
        v346 = (float32x2_t)vextq_s8(v345, v345, 8uLL).u64[0];
        *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v345.i8, *(float32x2_t *)v345.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v345.i8, 1), *(float32x2_t *)v345.i8, 1);
        v345.i64[0] = v342[8];
        v345.i32[2] = *((_DWORD *)v342 + 18);
        v347 = (int8x16_t)vsubq_f32((float32x4_t)v345, v344);
        *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v346, v346);
        v348 = (float32x2_t)vextq_s8(v347, v347, 8uLL).u64[0];
        v349 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v347.i8, *(float32x2_t *)v347.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v347.i8, 1), *(float32x2_t *)v347.i8, 1), v348, v348);
        if (a6.f32[0] == v349.f32[0])
          goto LABEL_598;
        v27 = a6.f32[0] < v349.f32[0];
        v350 = a6.f32[0] < v349.f32[0];
        LODWORD(v351) = vsub_f32(*(float32x2_t *)a6.f32, v349).u32[0];
        *(float32x2_t *)a6.f32 = vsub_f32(v349, *(float32x2_t *)a6.f32);
        if (!v27)
          a6.f32[0] = v351;
        if (a6.f32[0] <= 0.000001)
        {
LABEL_598:
          v485 = v341[11];
          v486 = v342[11];
          if (v485 == v486)
          {
            if (v341[10] <= v342[10])
              return *(double *)a6.i64;
          }
          else if (v485 < v486)
          {
            return *(double *)a6.i64;
          }
        }
        else if (!v350)
        {
          return *(double *)a6.i64;
        }
        v675 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v339;
        a6.i64[0] = v675;
        *(_OWORD *)v339 = v675;
        return *(double *)a6.i64;
      case 3uLL:
        a6.i64[0] = sub_22383EC2C(v9, v9 + 2, v661, (_QWORD **)a3).u64[0];
        return *(double *)a6.i64;
      case 4uLL:
        sub_22383F5C8(v9, v9 + 2, v9 + 4, v661, (_QWORD **)a3);
        return *(double *)a6.i64;
      case 5uLL:
        sub_22383E818(v9, v9 + 2, v9 + 4, v9 + 6, v661, (_QWORD **)a3);
        return *(double *)a6.i64;
      default:
        if (v10 > 383)
        {
          if (!a4)
          {
            if (v9 == a2)
              return *(double *)a6.i64;
            v406 = (v11 - 2) >> 1;
            v662 = v406;
            v407 = v9;
            while (1)
            {
              v409 = v406;
              if (v662 < v406)
                goto LABEL_548;
              v664 = v406;
              v410 = (2 * v406) | 1;
              v408 = &v407[2 * v410];
              v411 = 2 * v406 + 2;
              if (v411 < (uint64_t)v11)
              {
                v412 = *a3;
                v413 = sub_22381AF00(*a3, *v408, v408[1]);
                v414 = sub_22381AF00(v412, v408[2], v408[3]);
                v415.i64[0] = v413[8];
                v415.i32[2] = *((_DWORD *)v413 + 18);
                v416 = a3[1];
                *(int8x8_t *)v417.f32 = *v416;
                v417.i32[2] = v416[1].i32[0];
                v418 = (int8x16_t)vsubq_f32(v415, v417);
                v419 = (float32x2_t)vextq_s8(v418, v418, 8uLL).u64[0];
                *(float32x2_t *)v415.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v418.i8, *(float32x2_t *)v418.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v418.i8, 1), *(float32x2_t *)v418.i8, 1);
                v418.i64[0] = v414[8];
                v418.i32[2] = *((_DWORD *)v414 + 18);
                v420 = (int8x16_t)vsubq_f32((float32x4_t)v418, v417);
                v421 = vmla_f32(*(float32x2_t *)v415.f32, v419, v419);
                v422 = (float32x2_t)vextq_s8(v420, v420, 8uLL).u64[0];
                v423 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v420.i8, *(float32x2_t *)v420.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v420.i8, 1), *(float32x2_t *)v420.i8, 1), v422, v422);
                if (v421.f32[0] != v423.f32[0])
                {
                  v27 = v421.f32[0] < v423.f32[0];
                  v424 = v421.f32[0] < v423.f32[0];
                  v425 = vsub_f32(v421, v423).u32[0];
                  LODWORD(v426) = vsub_f32(v423, v421).u32[0];
                  if (!v27)
                    v426 = *(float *)&v425;
                  if (v426 > 0.000001)
                  {
                    if (!v424)
                      goto LABEL_562;
                    goto LABEL_561;
                  }
                }
                v427 = v413[11];
                v428 = v414[11];
                if (v427 == v428)
                {
                  if (v413[10] <= v414[10])
                    goto LABEL_562;
LABEL_561:
                  v408 += 2;
                  v410 = v411;
                  goto LABEL_562;
                }
                if (v427 >= v428)
                  goto LABEL_561;
              }
LABEL_562:
              v429 = *a3;
              v430 = sub_22381AF00(*a3, *v408, v408[1]);
              v431 = &a1[2 * v664];
              v432 = sub_22381AF00(v429, *v431, v431[1]);
              v433.i64[0] = v430[8];
              v433.i32[2] = *((_DWORD *)v430 + 18);
              v434 = a3[1];
              *(int8x8_t *)v435.f32 = *v434;
              v435.i32[2] = v434[1].i32[0];
              v436 = (int8x16_t)vsubq_f32(v433, v435);
              v437 = (float32x2_t)vextq_s8(v436, v436, 8uLL).u64[0];
              *(float32x2_t *)v433.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v436.i8, *(float32x2_t *)v436.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v436.i8, 1), *(float32x2_t *)v436.i8, 1);
              v436.i64[0] = v432[8];
              v436.i32[2] = *((_DWORD *)v432 + 18);
              v438 = (int8x16_t)vsubq_f32((float32x4_t)v436, v435);
              v439 = vmla_f32(*(float32x2_t *)v433.f32, v437, v437);
              v440 = (float32x2_t)vextq_s8(v438, v438, 8uLL).u64[0];
              v441 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v438.i8, *(float32x2_t *)v438.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v438.i8, 1), *(float32x2_t *)v438.i8, 1), v440, v440);
              if (v439.f32[0] == v441.f32[0])
                goto LABEL_568;
              v27 = v439.f32[0] < v441.f32[0];
              v442 = v439.f32[0] < v441.f32[0];
              v443 = vsub_f32(v439, v441).u32[0];
              LODWORD(v444) = vsub_f32(v441, v439).u32[0];
              if (!v27)
                v444 = *(float *)&v443;
              if (v444 <= 0.000001)
              {
LABEL_568:
                v445 = v430[11];
                v446 = v432[11];
                v447 = v445 < v446;
                if (v445 == v446)
                {
                  v407 = a1;
                  v409 = v664;
                  if (v430[10] > v432[10])
                    goto LABEL_548;
                }
                else
                {
                  v407 = a1;
                  v409 = v664;
                  if (!v447)
                    goto LABEL_548;
                }
              }
              else
              {
                v407 = a1;
                v409 = v664;
                if (v442)
                  goto LABEL_548;
              }
              v658 = v431[1];
              v660 = *v431;
              for (*(_OWORD *)v431 = *(_OWORD *)v408; v662 >= v410; v409 = v664)
              {
                v448 = v408;
                v449 = 2 * v410;
                v410 = (2 * v410) | 1;
                v408 = &a1[2 * v410];
                v450 = v449 + 2;
                if (v449 + 2 < (uint64_t)v11)
                {
                  v451 = *a3;
                  v452 = sub_22381AF00(*a3, *v408, v408[1]);
                  v453 = sub_22381AF00(v451, v408[2], v408[3]);
                  v454.i64[0] = v452[8];
                  v454.i32[2] = *((_DWORD *)v452 + 18);
                  v455 = a3[1];
                  *(int8x8_t *)v456.f32 = *v455;
                  v456.i32[2] = v455[1].i32[0];
                  v457 = (int8x16_t)vsubq_f32(v454, v456);
                  v458 = (float32x2_t)vextq_s8(v457, v457, 8uLL).u64[0];
                  *(float32x2_t *)v454.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v457.i8, *(float32x2_t *)v457.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v457.i8, 1), *(float32x2_t *)v457.i8, 1);
                  v457.i64[0] = v453[8];
                  v457.i32[2] = *((_DWORD *)v453 + 18);
                  v459 = (int8x16_t)vsubq_f32((float32x4_t)v457, v456);
                  v460 = vmla_f32(*(float32x2_t *)v454.f32, v458, v458);
                  v461 = (float32x2_t)vextq_s8(v459, v459, 8uLL).u64[0];
                  v462 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v459.i8, *(float32x2_t *)v459.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v459.i8, 1), *(float32x2_t *)v459.i8, 1), v461, v461);
                  if (v460.f32[0] != v462.f32[0])
                  {
                    v27 = v460.f32[0] < v462.f32[0];
                    v463 = v460.f32[0] < v462.f32[0];
                    v464 = vsub_f32(v460, v462).u32[0];
                    LODWORD(v465) = vsub_f32(v462, v460).u32[0];
                    if (!v27)
                      v465 = *(float *)&v464;
                    if (v465 > 0.000001)
                    {
                      if (!v463)
                        goto LABEL_589;
                      goto LABEL_588;
                    }
                  }
                  v466 = v452[11];
                  v467 = v453[11];
                  if (v466 == v467)
                  {
                    if (v452[10] <= v453[10])
                      goto LABEL_589;
LABEL_588:
                    v408 += 2;
                    v410 = v450;
                    goto LABEL_589;
                  }
                  if (v466 >= v467)
                    goto LABEL_588;
                }
LABEL_589:
                v468 = *a3;
                v469 = sub_22381AF00(*a3, *v408, v408[1]);
                v470 = sub_22381AF00(v468, v660, v658);
                v471.i64[0] = v469[8];
                v471.i32[2] = *((_DWORD *)v469 + 18);
                v472 = a3[1];
                *(int8x8_t *)v473.f32 = *v472;
                v473.i32[2] = v472[1].i32[0];
                v474 = (int8x16_t)vsubq_f32(v471, v473);
                v475 = (float32x2_t)vextq_s8(v474, v474, 8uLL).u64[0];
                *(float32x2_t *)v471.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v474.i8, *(float32x2_t *)v474.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v474.i8, 1), *(float32x2_t *)v474.i8, 1);
                v474.i64[0] = v470[8];
                v474.i32[2] = *((_DWORD *)v470 + 18);
                v476 = (int8x16_t)vsubq_f32((float32x4_t)v474, v473);
                v477 = vmla_f32(*(float32x2_t *)v471.f32, v475, v475);
                v478 = (float32x2_t)vextq_s8(v476, v476, 8uLL).u64[0];
                v479 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v476.i8, *(float32x2_t *)v476.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v476.i8, 1), *(float32x2_t *)v476.i8, 1), v478, v478);
                if (v477.f32[0] == v479.f32[0])
                  goto LABEL_595;
                v27 = v477.f32[0] < v479.f32[0];
                v480 = v477.f32[0] < v479.f32[0];
                v481 = vsub_f32(v477, v479).u32[0];
                LODWORD(v482) = vsub_f32(v479, v477).u32[0];
                if (!v27)
                  v482 = *(float *)&v481;
                if (v482 <= 0.000001)
                {
LABEL_595:
                  v483 = v469[11];
                  v484 = v470[11];
                  if (v483 == v484)
                  {
                    if (v469[10] > v470[10])
                    {
LABEL_546:
                      v408 = v448;
                      v409 = v664;
                      break;
                    }
                  }
                  else if (v483 >= v484)
                  {
                    goto LABEL_546;
                  }
                }
                else if (v480)
                {
                  goto LABEL_546;
                }
                *(_OWORD *)v448 = *(_OWORD *)v408;
              }
              *v408 = v660;
              v408[1] = v658;
              v407 = a1;
LABEL_548:
              v406 = v409 - 1;
              if (!v409)
              {
                v487 = (unint64_t)v10 >> 4;
                v488 = v665;
                while (1)
                {
                  v666 = v488;
                  v489 = 0;
                  v490 = a1;
                  v673 = *(_OWORD *)a1;
                  do
                  {
                    v491 = v490;
                    v490 += 2 * v489 + 2;
                    v492 = 2 * v489;
                    v489 = (2 * v489) | 1;
                    v493 = v492 + 2;
                    if (v492 + 2 >= v487)
                      goto LABEL_606;
                    v494 = *a3;
                    v674 = *(_OWORD *)v490;
                    v495 = sub_22456636C((unsigned __int8 *)&v674);
                    v496 = v494[1];
                    if (!*(_QWORD *)&v496)
                      goto LABEL_829;
                    v497 = (uint8x8_t)vcnt_s8(v496);
                    v497.i16[0] = vaddlv_u8(v497);
                    if (v497.u32[0] > 1uLL)
                    {
                      v498 = v495;
                      if (v495 >= *(_QWORD *)&v496)
                        v498 = v495 % *(_QWORD *)&v496;
                    }
                    else
                    {
                      v498 = (*(_QWORD *)&v496 - 1) & v495;
                    }
                    v499 = *(uint64_t ***)(*(_QWORD *)v494 + 8 * v498);
                    if (!v499 || (v500 = *v499) == 0)
                    {
LABEL_829:
                      v676 = 0;
                      sub_223846924(&v675, "Entry not found ");
                      sub_22319B83C((uint64_t)&v670, (uint64_t)&v675, (unsigned __int8 *)&v674);
                      if (v676 == -1)
                        sub_22316DD70();
                      v670 = &v669;
                      ((void (*)(std::string *__return_ptr, char **, __int128 *))off_24EC5B118[v676])(&v671, &v670, &v675);
                      if (v676 != -1)
                        ((void (*)(char **, __int128 *))off_24EC5B100[v676])(&v670, &v675);
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v635 = &v671;
                      else
                        v635 = (std::string *)v671.__r_.__value_.__r.__words[0];
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        size = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                      else
                        size = v671.__r_.__value_.__l.__size_;
                      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v635, size, (void (*)(void **))sub_22457406C);
                      std::string::~string(&v671);
                      abort();
                    }
                    if (v497.u32[0] < 2uLL)
                    {
                      v501 = *(_QWORD *)&v496 - 1;
                      while (1)
                      {
                        v504 = v500[1];
                        if (v495 == v504)
                        {
                          if (v500[2] == (_QWORD)v674 && v500[3] == *((_QWORD *)&v674 + 1))
                            goto LABEL_636;
                        }
                        else if ((v504 & v501) != v498)
                        {
                          goto LABEL_829;
                        }
                        v500 = (uint64_t *)*v500;
                        if (!v500)
                          goto LABEL_829;
                      }
                    }
                    while (1)
                    {
                      v502 = v500[1];
                      if (v495 == v502)
                        break;
                      if (v502 >= *(_QWORD *)&v496)
                        v502 %= *(_QWORD *)&v496;
                      if (v502 != v498)
                        goto LABEL_829;
LABEL_618:
                      v500 = (uint64_t *)*v500;
                      if (!v500)
                        goto LABEL_829;
                    }
                    if (v500[2] != (_QWORD)v674 || v500[3] != *((_QWORD *)&v674 + 1))
                      goto LABEL_618;
LABEL_636:
                    v674 = *((_OWORD *)v490 + 1);
                    v506 = sub_22456636C((unsigned __int8 *)&v674);
                    v509 = v494[1];
                    if (!*(_QWORD *)&v509)
                      goto LABEL_831;
                    v510 = (uint8x8_t)vcnt_s8(v509);
                    v510.i16[0] = vaddlv_u8(v510);
                    if (v510.u32[0] > 1uLL)
                    {
                      v511 = v506;
                      if (v506 >= *(_QWORD *)&v509)
                        v511 = v506 % *(_QWORD *)&v509;
                    }
                    else
                    {
                      v511 = (*(_QWORD *)&v509 - 1) & v506;
                    }
                    v512 = *(uint64_t ***)(*(_QWORD *)v494 + 8 * v511);
                    if (!v512 || (v513 = *v512) == 0)
                    {
LABEL_831:
                      v676 = 0;
                      sub_223846924(&v675, "Entry not found ");
                      sub_22319B83C((uint64_t)&v670, (uint64_t)&v675, (unsigned __int8 *)&v674);
                      if (v676 == -1)
                        sub_22316DD70();
                      v670 = &v669;
                      ((void (*)(std::string *__return_ptr, char **, __int128 *))off_24EC5B118[v676])(&v671, &v670, &v675);
                      if (v676 != -1)
                        ((void (*)(char **, __int128 *))off_24EC5B100[v676])(&v670, &v675);
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v637 = &v671;
                      else
                        v637 = (std::string *)v671.__r_.__value_.__r.__words[0];
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v638 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                      else
                        v638 = v671.__r_.__value_.__l.__size_;
                      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v637, v638, (void (*)(void **))sub_22457406C);
                      std::string::~string(&v671);
                      abort();
                    }
                    if (v510.u32[0] < 2uLL)
                    {
                      v514 = *(_QWORD *)&v509 - 1;
                      while (1)
                      {
                        v517 = v513[1];
                        if (v506 == v517)
                        {
                          if (v513[2] == (_QWORD)v674 && v513[3] == *((_QWORD *)&v674 + 1))
                            goto LABEL_664;
                        }
                        else if ((v517 & v514) != v511)
                        {
                          goto LABEL_831;
                        }
                        v513 = (uint64_t *)*v513;
                        if (!v513)
                          goto LABEL_831;
                      }
                    }
                    while (2)
                    {
                      v515 = v513[1];
                      if (v506 != v515)
                      {
                        if (v515 >= *(_QWORD *)&v509)
                          v515 %= *(_QWORD *)&v509;
                        if (v515 != v511)
                          goto LABEL_831;
                        goto LABEL_646;
                      }
                      if (v513[2] != (_QWORD)v674 || v513[3] != *((_QWORD *)&v674 + 1))
                      {
LABEL_646:
                        v513 = (uint64_t *)*v513;
                        if (!v513)
                          goto LABEL_831;
                        continue;
                      }
                      break;
                    }
LABEL_664:
                    v507.i64[0] = v500[12];
                    v507.i32[2] = *((_DWORD *)v500 + 26);
                    v519 = a3[1];
                    *(int8x8_t *)v508.f32 = *v519;
                    v508.i32[2] = v519[1].i32[0];
                    v520 = (int8x16_t)vsubq_f32(v507, v508);
                    v521 = (float32x2_t)vextq_s8(v520, v520, 8uLL).u64[0];
                    v522 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v520.i8, *(float32x2_t *)v520.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v520.i8, 1), *(float32x2_t *)v520.i8, 1);
                    v520.i64[0] = v513[12];
                    v520.i32[2] = *((_DWORD *)v513 + 26);
                    v523 = (int8x16_t)vsubq_f32((float32x4_t)v520, v508);
                    v524 = vmla_f32(v522, v521, v521);
                    v525 = (float32x2_t)vextq_s8(v523, v523, 8uLL).u64[0];
                    v526 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v523.i8, *(float32x2_t *)v523.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v523.i8, 1), *(float32x2_t *)v523.i8, 1), v525, v525);
                    if (v524.f32[0] != v526.f32[0])
                    {
                      v27 = v524.f32[0] < v526.f32[0];
                      v527 = v524.f32[0] < v526.f32[0];
                      v528 = vsub_f32(v524, v526).u32[0];
                      LODWORD(v529) = vsub_f32(v526, v524).u32[0];
                      if (!v27)
                        v529 = *(float *)&v528;
                      if (v529 > 0.000001)
                      {
                        if (!v527)
                          goto LABEL_606;
LABEL_605:
                        v490 += 2;
                        v489 = v493;
                        goto LABEL_606;
                      }
                    }
                    v530 = v500[15];
                    v531 = v513[15];
                    if (v530 != v531)
                    {
                      if (v530 < v531)
                        goto LABEL_606;
                      goto LABEL_605;
                    }
                    if (v500[14] > v513[14])
                      goto LABEL_605;
LABEL_606:
                    *(_OWORD *)v491 = *(_OWORD *)v490;
                  }
                  while (v489 <= (uint64_t)((unint64_t)(v487 - 2) >> 1));
                  v488 = v666 - 2;
                  if (v490 == v666 - 2)
                  {
                    a6.i64[0] = v673;
                    *(_OWORD *)v490 = v673;
                  }
                  else
                  {
                    *(_OWORD *)v490 = *(_OWORD *)v488;
                    a6.i64[0] = v673;
                    *(_OWORD *)v488 = v673;
                    v532 = (char *)v490 - (char *)a1 + 16;
                    if (v532 >= 17)
                    {
                      v667 = v666 - 2;
                      v533 = ((unint64_t)v532 >> 4) - 2;
                      v534 = v533 >> 1;
                      v535 = &a1[2 * (v533 >> 1)];
                      v536 = *a3;
                      v537 = sub_22381AF00(*a3, *v535, v535[1]);
                      v538 = sub_22381AF00(v536, *v490, v490[1]);
                      a6.i64[0] = v537[8];
                      a6.i32[2] = *((_DWORD *)v537 + 18);
                      v539 = a3[1];
                      *(int8x8_t *)v540.f32 = *v539;
                      v540.i32[2] = v539[1].i32[0];
                      v541 = (int8x16_t)vsubq_f32(a6, v540);
                      v542 = (float32x2_t)vextq_s8(v541, v541, 8uLL).u64[0];
                      *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v541.i8, *(float32x2_t *)v541.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v541.i8, 1), *(float32x2_t *)v541.i8, 1);
                      v541.i64[0] = v538[8];
                      v541.i32[2] = *((_DWORD *)v538 + 18);
                      v543 = (int8x16_t)vsubq_f32((float32x4_t)v541, v540);
                      *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v542, v542);
                      v544 = (float32x2_t)vextq_s8(v543, v543, 8uLL).u64[0];
                      v545 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v543.i8, *(float32x2_t *)v543.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v543.i8, 1), *(float32x2_t *)v543.i8, 1), v544, v544);
                      if (a6.f32[0] == v545.f32[0])
                        goto LABEL_683;
                      v27 = a6.f32[0] < v545.f32[0];
                      v546 = a6.f32[0] < v545.f32[0];
                      LODWORD(v547) = vsub_f32(*(float32x2_t *)a6.f32, v545).u32[0];
                      *(float32x2_t *)a6.f32 = vsub_f32(v545, *(float32x2_t *)a6.f32);
                      if (!v27)
                        a6.f32[0] = v547;
                      if (a6.f32[0] <= 0.000001)
                      {
LABEL_683:
                        v548 = v537[11];
                        v549 = v538[11];
                        v550 = v548 < v549;
                        if (v548 == v549)
                        {
                          v488 = v667;
                          if (v537[10] > v538[10])
                          {
LABEL_687:
                            v551 = *v490;
                            v552 = v490[1];
                            a6 = *(float32x4_t *)v535;
                            *(_OWORD *)v490 = *(_OWORD *)v535;
                            if (v533 >= 2)
                            {
                              v554 = a1;
                              while (1)
                              {
                                v555 = v534 - 1;
                                v534 = (v534 - 1) >> 1;
                                v553 = &v554[2 * v534];
                                v556 = *a3;
                                v557 = sub_22381AF00(*a3, *v553, v553[1]);
                                v558 = sub_22381AF00(v556, v551, v552);
                                a6.i64[0] = v557[8];
                                a6.i32[2] = *((_DWORD *)v557 + 18);
                                v559 = a3[1];
                                *(int8x8_t *)v560.f32 = *v559;
                                v560.i32[2] = v559[1].i32[0];
                                v561 = (int8x16_t)vsubq_f32(a6, v560);
                                v562 = (float32x2_t)vextq_s8(v561, v561, 8uLL).u64[0];
                                *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v561.i8, *(float32x2_t *)v561.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v561.i8, 1), *(float32x2_t *)v561.i8, 1);
                                v561.i64[0] = v558[8];
                                v561.i32[2] = *((_DWORD *)v558 + 18);
                                v563 = (int8x16_t)vsubq_f32((float32x4_t)v561, v560);
                                *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v562, v562);
                                v564 = (float32x2_t)vextq_s8(v563, v563, 8uLL).u64[0];
                                v565 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v563.i8, *(float32x2_t *)v563.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v563.i8, 1), *(float32x2_t *)v563.i8, 1), v564, v564);
                                if (a6.f32[0] == v565.f32[0])
                                  goto LABEL_699;
                                v27 = a6.f32[0] < v565.f32[0];
                                v566 = a6.f32[0] < v565.f32[0];
                                LODWORD(v567) = vsub_f32(*(float32x2_t *)a6.f32, v565).u32[0];
                                *(float32x2_t *)a6.f32 = vsub_f32(v565, *(float32x2_t *)a6.f32);
                                if (!v27)
                                  a6.f32[0] = v567;
                                if (a6.f32[0] <= 0.000001)
                                {
LABEL_699:
                                  v568 = v557[11];
                                  v569 = v558[11];
                                  if (v568 == v569)
                                  {
                                    if (v557[10] <= v558[10])
                                      break;
                                  }
                                  else if (v568 < v569)
                                  {
                                    break;
                                  }
                                }
                                else if (!v566)
                                {
                                  break;
                                }
                                a6 = *(float32x4_t *)v553;
                                *(_OWORD *)v535 = *(_OWORD *)v553;
                                v535 = v553;
                                v554 = a1;
                                if (v555 <= 1)
                                  goto LABEL_689;
                              }
                            }
                            v553 = v535;
LABEL_689:
                            *v553 = v551;
                            v553[1] = v552;
                            v488 = v667;
                          }
                        }
                        else
                        {
                          v488 = v667;
                          if (!v550)
                            goto LABEL_687;
                        }
                      }
                      else
                      {
                        v488 = v667;
                        if (v546)
                          goto LABEL_687;
                      }
                    }
                  }
                  v447 = v487-- <= 2;
                  if (v447)
                    return *(double *)a6.i64;
                }
              }
            }
          }
          v12 = &v9[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            sub_22383EC2C(&v9[2 * (v11 >> 1)], v9, v661, (_QWORD **)a3);
            v14 = a1;
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            sub_22383EC2C(v9, &v9[2 * (v11 >> 1)], v661, (_QWORD **)a3);
            v13 = &a1[2 * (v11 >> 1)];
            sub_22383EC2C(a1 + 2, v13 - 2, v657, (_QWORD **)a3);
            sub_22383EC2C(a1 + 4, v13 + 2, v656, (_QWORD **)a3);
            sub_22383EC2C(v13 - 2, v12, v13 + 2, (_QWORD **)a3);
            v14 = a1;
            v675 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v675;
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_25;
          }
          v15 = *a3;
          v16 = sub_22381AF00(*a3, *(v14 - 2), *(v14 - 1));
          v17 = sub_22381AF00(v15, *a1, a1[1]);
          v18.i64[0] = v16[8];
          v18.i32[2] = *((_DWORD *)v16 + 18);
          v19 = a3[1];
          *(int8x8_t *)v20.f32 = *v19;
          v20.i32[2] = v19[1].i32[0];
          v21 = (int8x16_t)vsubq_f32(v18, v20);
          v22 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
          *(float32x2_t *)v18.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), *(float32x2_t *)v21.i8, 1);
          v21.i64[0] = v17[8];
          v21.i32[2] = *((_DWORD *)v17 + 18);
          v23 = (int8x16_t)vsubq_f32((float32x4_t)v21, v20);
          v24 = vmla_f32(*(float32x2_t *)v18.f32, v22, v22);
          v25 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
          v26 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v23.i8, 1), v25, v25);
          if (v24.f32[0] == v26.f32[0])
            goto LABEL_16;
          v27 = v24.f32[0] < v26.f32[0];
          v28 = v24.f32[0] < v26.f32[0];
          v29 = vsub_f32(v24, v26).u32[0];
          LODWORD(v30) = vsub_f32(v26, v24).u32[0];
          if (!v27)
            v30 = *(float *)&v29;
          if (v30 <= 0.000001)
          {
LABEL_16:
            v31 = v16[11];
            v32 = v17[11];
            if (v31 == v32)
            {
              v14 = a1;
              if (v16[10] > v17[10])
                goto LABEL_25;
            }
            else
            {
              v14 = a1;
              if (v31 >= v32)
                goto LABEL_25;
            }
LABEL_18:
            v33 = *v14;
            v34 = v14[1];
            v35 = *a3;
            v36 = sub_22381AF00(*a3, *v14, v34);
            v37 = sub_22381AF00(v35, *(v665 - 2), *(v665 - 1));
            a6.i64[0] = v36[8];
            a6.i32[2] = *((_DWORD *)v36 + 18);
            v38 = a3[1];
            *(int8x8_t *)v39.f32 = *v38;
            v39.i32[2] = v38[1].i32[0];
            v40 = (int8x16_t)vsubq_f32(a6, v39);
            v41 = (float32x2_t)vextq_s8(v40, v40, 8uLL).u64[0];
            *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1), *(float32x2_t *)v40.i8, 1);
            v40.i64[0] = v37[8];
            v40.i32[2] = *((_DWORD *)v37 + 18);
            v42 = (int8x16_t)vsubq_f32((float32x4_t)v40, v39);
            *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v41, v41);
            v43 = (float32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
            v44 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1), v43, v43);
            if (a6.f32[0] == v44.f32[0])
              goto LABEL_264;
            v27 = a6.f32[0] < v44.f32[0];
            v45 = a6.f32[0] < v44.f32[0];
            LODWORD(v46) = vsub_f32(*(float32x2_t *)a6.f32, v44).u32[0];
            *(float32x2_t *)a6.f32 = vsub_f32(v44, *(float32x2_t *)a6.f32);
            if (!v27)
              a6.f32[0] = v46;
            if (a6.f32[0] <= 0.000001)
            {
LABEL_264:
              v215 = v36[11];
              v216 = v37[11];
              v47 = v665;
              if (v215 == v216)
              {
                if (v36[10] > v37[10])
                  goto LABEL_280;
              }
              else if (v215 >= v216)
              {
LABEL_280:
                v231 = a1 + 2;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      i = v231;
                      v232 = *a3;
                      v233 = sub_22381AF00(*a3, v33, v34);
                      v234 = sub_22381AF00(v232, *i, i[1]);
                      v235 = a3[1];
                      a6.i64[0] = v233[8];
                      a6.i32[2] = *((_DWORD *)v233 + 18);
                      *(int8x8_t *)v236.f32 = *v235;
                      v236.i32[2] = v235[1].i32[0];
                      v237 = (int8x16_t)vsubq_f32(a6, v236);
                      v238 = (float32x2_t)vextq_s8(v237, v237, 8uLL).u64[0];
                      *(float32x2_t *)a6.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v237.i8, *(float32x2_t *)v237.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.i8, 1), *(float32x2_t *)v237.i8, 1), v238, v238);
                      v237.i64[0] = v234[8];
                      v237.i32[2] = *((_DWORD *)v234 + 18);
                      v239 = (int8x16_t)vsubq_f32((float32x4_t)v237, v236);
                      v240 = (float32x2_t)vextq_s8(v239, v239, 8uLL).u64[0];
                      v241 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v239.i8, *(float32x2_t *)v239.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v239.i8, 1), *(float32x2_t *)v239.i8, 1), v240, v240);
                      v231 = i + 2;
                      if (a6.f32[0] == v241.f32[0])
                        break;
                      v27 = a6.f32[0] < v241.f32[0];
                      v242 = a6.f32[0] < v241.f32[0];
                      LODWORD(v243) = vsub_f32(*(float32x2_t *)a6.f32, v241).u32[0];
                      *(float32x2_t *)a6.f32 = vsub_f32(v241, *(float32x2_t *)a6.f32);
                      if (!v27)
                        a6.f32[0] = v243;
                      if (a6.f32[0] <= 0.000001)
                        break;
                      if (v242)
                        goto LABEL_290;
                    }
                    v244 = v233[11];
                    v245 = v234[11];
                    if (v244 == v245)
                      break;
                    if (v244 >= v245)
                      goto LABEL_290;
                  }
                }
                while (v233[10] <= v234[10]);
                goto LABEL_290;
              }
            }
            else
            {
              v47 = v665;
              if (v45)
                goto LABEL_280;
            }
            for (i = a1 + 2; i < v47; i += 2)
            {
              v217 = *a3;
              v218 = sub_22381AF00(*a3, v33, v34);
              v219 = sub_22381AF00(v217, *i, i[1]);
              a6.i64[0] = v218[8];
              a6.i32[2] = *((_DWORD *)v218 + 18);
              v220 = a3[1];
              *(int8x8_t *)v221.f32 = *v220;
              v221.i32[2] = v220[1].i32[0];
              v222 = (int8x16_t)vsubq_f32(a6, v221);
              v223 = (float32x2_t)vextq_s8(v222, v222, 8uLL).u64[0];
              *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v222.i8, *(float32x2_t *)v222.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v222.i8, 1), *(float32x2_t *)v222.i8, 1);
              v222.i64[0] = v219[8];
              v222.i32[2] = *((_DWORD *)v219 + 18);
              v224 = (int8x16_t)vsubq_f32((float32x4_t)v222, v221);
              *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v223, v223);
              v225 = (float32x2_t)vextq_s8(v224, v224, 8uLL).u64[0];
              v226 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v224.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.i8, 1), *(float32x2_t *)v224.i8, 1), v225, v225);
              if (a6.f32[0] == v226.f32[0])
                goto LABEL_276;
              v27 = a6.f32[0] < v226.f32[0];
              v227 = a6.f32[0] < v226.f32[0];
              LODWORD(v228) = vsub_f32(*(float32x2_t *)a6.f32, v226).u32[0];
              *(float32x2_t *)a6.f32 = vsub_f32(v226, *(float32x2_t *)a6.f32);
              if (!v27)
                a6.f32[0] = v228;
              if (a6.f32[0] <= 0.000001)
              {
LABEL_276:
                v229 = v218[11];
                v230 = v219[11];
                v47 = v665;
                if (v229 == v230)
                {
                  if (v218[10] > v219[10])
                    break;
                }
                else if (v229 >= v230)
                {
                  break;
                }
              }
              else
              {
                v47 = v665;
                if (v227)
                  break;
              }
            }
LABEL_290:
            v246 = v665;
            if (i >= v665)
              goto LABEL_435;
            v247 = v661;
            do
            {
              while (1)
              {
                while (1)
                {
                  v246 = v247;
                  v248 = *a3;
                  v249 = sub_22381AF00(*a3, v33, v34);
                  v250 = sub_22381AF00(v248, *v246, v246[1]);
                  v251 = a3[1];
                  a6.i64[0] = v249[8];
                  a6.i32[2] = *((_DWORD *)v249 + 18);
                  *(int8x8_t *)v252.f32 = *v251;
                  v252.i32[2] = v251[1].i32[0];
                  v253 = (int8x16_t)vsubq_f32(a6, v252);
                  v254 = (float32x2_t)vextq_s8(v253, v253, 8uLL).u64[0];
                  *(float32x2_t *)a6.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v253.i8, *(float32x2_t *)v253.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v253.i8, 1), *(float32x2_t *)v253.i8, 1), v254, v254);
                  v253.i64[0] = v250[8];
                  v253.i32[2] = *((_DWORD *)v250 + 18);
                  v255 = (int8x16_t)vsubq_f32((float32x4_t)v253, v252);
                  v256 = (float32x2_t)vextq_s8(v255, v255, 8uLL).u64[0];
                  v257 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v255.i8, *(float32x2_t *)v255.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v255.i8, 1), *(float32x2_t *)v255.i8, 1), v256, v256);
                  v247 = v246 - 2;
                  if (a6.f32[0] == v257.f32[0])
                    break;
                  v27 = a6.f32[0] < v257.f32[0];
                  v258 = a6.f32[0] < v257.f32[0];
                  LODWORD(v259) = vsub_f32(*(float32x2_t *)a6.f32, v257).u32[0];
                  *(float32x2_t *)a6.f32 = vsub_f32(v257, *(float32x2_t *)a6.f32);
                  if (!v27)
                    a6.f32[0] = v259;
                  if (a6.f32[0] <= 0.000001)
                    break;
                  if (!v258)
                    goto LABEL_435;
                }
                v260 = v249[11];
                v261 = v250[11];
                if (v260 == v261)
                  break;
                if (v260 < v261)
                  goto LABEL_435;
              }
            }
            while (v249[10] > v250[10]);
LABEL_435:
            if (i < v246)
            {
              v675 = *(_OWORD *)i;
              *(_OWORD *)i = *(_OWORD *)v246;
              *(_OWORD *)v246 = v675;
              v262 = *a3;
              *(_QWORD *)&v674 = v33;
              *((_QWORD *)&v674 + 1) = v34;
              v263 = sub_22456636C((unsigned __int8 *)&v674);
              while (2)
              {
                v265 = v262 + 1;
                v264 = v262[1];
                if (!*(_QWORD *)&v264)
                  goto LABEL_833;
                v266 = (uint8x8_t)vcnt_s8(v264);
                v266.i16[0] = vaddlv_u8(v266);
                if (v266.u32[0] > 1uLL)
                {
                  v267 = v263;
                  if (v263 >= *(_QWORD *)&v264)
                    v267 = v263 % *(_QWORD *)&v264;
                }
                else
                {
                  v267 = (*(_QWORD *)&v264 - 1) & v263;
                }
                v268 = *(uint64_t ***)(*(_QWORD *)v262 + 8 * v267);
                if (!v268 || (v269 = *v268) == 0)
                {
LABEL_833:
                  v676 = 0;
                  sub_223846924(&v675, "Entry not found ");
                  sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                  if (v676 == -1)
                    sub_22316DD70();
                  *(_QWORD *)&v673 = &v672;
                  ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                  if (v676 != -1)
                    ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v639 = &v671;
                  else
                    v639 = (std::string *)v671.__r_.__value_.__r.__words[0];
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v640 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                  else
                    v640 = v671.__r_.__value_.__l.__size_;
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v639, v640, (void (*)(void **))sub_22457406C);
                  std::string::~string(&v671);
                  abort();
                }
                if (v266.u32[0] < 2uLL)
                {
                  v270 = *(_QWORD *)&v264 - 1;
                  while (1)
                  {
                    v273 = v269[1];
                    if (v263 == v273)
                    {
                      if (v269[2] == (_QWORD)v674 && v269[3] == *((_QWORD *)&v674 + 1))
                        goto LABEL_333;
                    }
                    else if ((v273 & v270) != v267)
                    {
                      goto LABEL_833;
                    }
                    v269 = (uint64_t *)*v269;
                    if (!v269)
                      goto LABEL_833;
                  }
                }
                while (2)
                {
                  v271 = v269[1];
                  if (v263 != v271)
                  {
                    if (v271 >= *(_QWORD *)&v264)
                      v271 %= *(_QWORD *)&v264;
                    if (v271 != v267)
                      goto LABEL_833;
                    goto LABEL_315;
                  }
                  if (v269[2] != (_QWORD)v674 || v269[3] != *((_QWORD *)&v674 + 1))
                  {
LABEL_315:
                    v269 = (uint64_t *)*v269;
                    if (!v269)
                      goto LABEL_833;
                    continue;
                  }
                  break;
                }
LABEL_333:
                v275 = *((_OWORD *)i + 1);
                i += 2;
                v674 = v275;
                v276 = sub_22456636C((unsigned __int8 *)&v674);
                v279 = *v265;
                if (!*(_QWORD *)v265)
                  goto LABEL_835;
                v280 = (uint8x8_t)vcnt_s8(v279);
                v280.i16[0] = vaddlv_u8(v280);
                if (v280.u32[0] > 1uLL)
                {
                  v281 = v276;
                  if (v276 >= *(_QWORD *)&v279)
                    v281 = v276 % *(_QWORD *)&v279;
                }
                else
                {
                  v281 = (*(_QWORD *)&v279 - 1) & v276;
                }
                v282 = *(uint64_t ***)(*(_QWORD *)v262 + 8 * v281);
                if (!v282 || (v283 = *v282) == 0)
                {
LABEL_835:
                  v676 = 0;
                  sub_223846924(&v675, "Entry not found ");
                  sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                  if (v676 == -1)
                    sub_22316DD70();
                  *(_QWORD *)&v673 = &v672;
                  ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                  if (v676 != -1)
                    ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v641 = &v671;
                  else
                    v641 = (std::string *)v671.__r_.__value_.__r.__words[0];
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v642 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                  else
                    v642 = v671.__r_.__value_.__l.__size_;
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v641, v642, (void (*)(void **))sub_22457406C);
                  std::string::~string(&v671);
                  abort();
                }
                if (v280.u32[0] < 2uLL)
                {
                  v284 = *(_QWORD *)&v279 - 1;
                  while (1)
                  {
                    v287 = v283[1];
                    if (v276 == v287)
                    {
                      if (v283[2] == (_QWORD)v674 && v283[3] == *((_QWORD *)&v674 + 1))
                        goto LABEL_361;
                    }
                    else if ((v287 & v284) != v281)
                    {
                      goto LABEL_835;
                    }
                    v283 = (uint64_t *)*v283;
                    if (!v283)
                      goto LABEL_835;
                  }
                }
                while (2)
                {
                  v285 = v283[1];
                  if (v276 != v285)
                  {
                    if (v285 >= *(_QWORD *)&v279)
                      v285 %= *(_QWORD *)&v279;
                    if (v285 != v281)
                      goto LABEL_835;
                    goto LABEL_343;
                  }
                  if (v283[2] != (_QWORD)v674 || v283[3] != *((_QWORD *)&v674 + 1))
                  {
LABEL_343:
                    v283 = (uint64_t *)*v283;
                    if (!v283)
                      goto LABEL_835;
                    continue;
                  }
                  break;
                }
LABEL_361:
                v277.i64[0] = v269[12];
                v277.i32[2] = *((_DWORD *)v269 + 26);
                v289 = a3[1];
                *(int8x8_t *)v278.f32 = *v289;
                v278.i32[2] = v289[1].i32[0];
                v290 = (int8x16_t)vsubq_f32(v277, v278);
                v291 = (float32x2_t)vextq_s8(v290, v290, 8uLL).u64[0];
                v292 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v290.i8, *(float32x2_t *)v290.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v290.i8, 1), *(float32x2_t *)v290.i8, 1);
                v290.i64[0] = v283[12];
                v290.i32[2] = *((_DWORD *)v283 + 26);
                v293 = (int8x16_t)vsubq_f32((float32x4_t)v290, v278);
                v294 = vmla_f32(v292, v291, v291);
                v295 = (float32x2_t)vextq_s8(v293, v293, 8uLL).u64[0];
                v296 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v293.i8, *(float32x2_t *)v293.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v293.i8, 1), *(float32x2_t *)v293.i8, 1), v295, v295);
                if (v294.f32[0] == v296.f32[0])
                  goto LABEL_367;
                v27 = v294.f32[0] < v296.f32[0];
                v297 = v294.f32[0] < v296.f32[0];
                v298 = vsub_f32(v294, v296).u32[0];
                LODWORD(v299) = vsub_f32(v296, v294).u32[0];
                if (!v27)
                  v299 = *(float *)&v298;
                if (v299 <= 0.000001)
                {
LABEL_367:
                  v300 = v269[15];
                  v301 = v283[15];
                  if (v300 == v301)
                  {
                    if (v269[14] > v283[14])
                      goto LABEL_371;
                  }
                  else if (v300 >= v301)
                  {
                    goto LABEL_371;
                  }
                }
                else if (v297)
                {
                  while (1)
                  {
LABEL_371:
                    v302 = *a3;
                    *(_QWORD *)&v674 = v33;
                    *((_QWORD *)&v674 + 1) = v34;
                    v303 = sub_22456636C((unsigned __int8 *)&v674);
                    v305 = v302 + 1;
                    v304 = v302[1];
                    if (!*(_QWORD *)&v304)
                      goto LABEL_837;
                    v306 = (uint8x8_t)vcnt_s8(v304);
                    v306.i16[0] = vaddlv_u8(v306);
                    if (v306.u32[0] > 1uLL)
                    {
                      v307 = v303;
                      if (v303 >= *(_QWORD *)&v304)
                        v307 = v303 % *(_QWORD *)&v304;
                    }
                    else
                    {
                      v307 = (*(_QWORD *)&v304 - 1) & v303;
                    }
                    v308 = *(uint64_t ***)(*(_QWORD *)v302 + 8 * v307);
                    if (!v308 || (v309 = *v308) == 0)
                    {
LABEL_837:
                      v676 = 0;
                      sub_223846924(&v675, "Entry not found ");
                      sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                      if (v676 == -1)
                        sub_22316DD70();
                      *(_QWORD *)&v673 = &v672;
                      ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                      if (v676 != -1)
                        ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v643 = &v671;
                      else
                        v643 = (std::string *)v671.__r_.__value_.__r.__words[0];
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v644 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                      else
                        v644 = v671.__r_.__value_.__l.__size_;
                      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v643, v644, (void (*)(void **))sub_22457406C);
                      std::string::~string(&v671);
                      abort();
                    }
                    if (v306.u32[0] < 2uLL)
                    {
                      v310 = *(_QWORD *)&v304 - 1;
                      while (1)
                      {
                        v313 = v309[1];
                        if (v303 == v313)
                        {
                          if (v309[2] == (_QWORD)v674 && v309[3] == *((_QWORD *)&v674 + 1))
                            goto LABEL_399;
                        }
                        else if ((v313 & v310) != v307)
                        {
                          goto LABEL_837;
                        }
                        v309 = (uint64_t *)*v309;
                        if (!v309)
                          goto LABEL_837;
                      }
                    }
                    while (1)
                    {
                      v311 = v309[1];
                      if (v303 == v311)
                        break;
                      if (v311 >= *(_QWORD *)&v304)
                        v311 %= *(_QWORD *)&v304;
                      if (v311 != v307)
                        goto LABEL_837;
LABEL_381:
                      v309 = (uint64_t *)*v309;
                      if (!v309)
                        goto LABEL_837;
                    }
                    if (v309[2] != (_QWORD)v674 || v309[3] != *((_QWORD *)&v674 + 1))
                      goto LABEL_381;
LABEL_399:
                    v315 = *((_OWORD *)v246 - 1);
                    v246 -= 2;
                    v674 = v315;
                    v316 = sub_22456636C((unsigned __int8 *)&v674);
                    v318 = *v305;
                    if (!*(_QWORD *)v305)
                      goto LABEL_839;
                    v319 = (uint8x8_t)vcnt_s8(v318);
                    v319.i16[0] = vaddlv_u8(v319);
                    if (v319.u32[0] > 1uLL)
                    {
                      v320 = v316;
                      if (v316 >= *(_QWORD *)&v318)
                        v320 = v316 % *(_QWORD *)&v318;
                    }
                    else
                    {
                      v320 = (*(_QWORD *)&v318 - 1) & v316;
                    }
                    v321 = *(uint64_t ***)(*(_QWORD *)v302 + 8 * v320);
                    if (!v321 || (v322 = *v321) == 0)
                    {
LABEL_839:
                      v676 = 0;
                      sub_223846924(&v675, "Entry not found ");
                      sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                      if (v676 == -1)
                        sub_22316DD70();
                      *(_QWORD *)&v673 = &v672;
                      ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                      if (v676 != -1)
                        ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v645 = &v671;
                      else
                        v645 = (std::string *)v671.__r_.__value_.__r.__words[0];
                      if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v646 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                      else
                        v646 = v671.__r_.__value_.__l.__size_;
                      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v645, v646, (void (*)(void **))sub_22457406C);
                      std::string::~string(&v671);
                      abort();
                    }
                    if (v319.u32[0] < 2uLL)
                    {
                      v323 = *(_QWORD *)&v318 - 1;
                      while (1)
                      {
                        v326 = v322[1];
                        if (v316 == v326)
                        {
                          if (v322[2] == (_QWORD)v674 && v322[3] == *((_QWORD *)&v674 + 1))
                            goto LABEL_427;
                        }
                        else if ((v326 & v323) != v320)
                        {
                          goto LABEL_839;
                        }
                        v322 = (uint64_t *)*v322;
                        if (!v322)
                          goto LABEL_839;
                      }
                    }
                    while (2)
                    {
                      v324 = v322[1];
                      if (v316 != v324)
                      {
                        if (v324 >= *(_QWORD *)&v318)
                          v324 %= *(_QWORD *)&v318;
                        if (v324 != v320)
                          goto LABEL_839;
                        goto LABEL_409;
                      }
                      if (v322[2] != (_QWORD)v674 || v322[3] != *((_QWORD *)&v674 + 1))
                      {
LABEL_409:
                        v322 = (uint64_t *)*v322;
                        if (!v322)
                          goto LABEL_839;
                        continue;
                      }
                      break;
                    }
LABEL_427:
                    a6.i64[0] = v309[12];
                    a6.i32[2] = *((_DWORD *)v309 + 26);
                    v328 = a3[1];
                    *(int8x8_t *)v317.f32 = *v328;
                    v317.i32[2] = v328[1].i32[0];
                    v329 = (int8x16_t)vsubq_f32(a6, v317);
                    v330 = (float32x2_t)vextq_s8(v329, v329, 8uLL).u64[0];
                    *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v329.i8, *(float32x2_t *)v329.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v329.i8, 1), *(float32x2_t *)v329.i8, 1);
                    v329.i64[0] = v322[12];
                    v329.i32[2] = *((_DWORD *)v322 + 26);
                    v331 = (int8x16_t)vsubq_f32((float32x4_t)v329, v317);
                    *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v330, v330);
                    v332 = (float32x2_t)vextq_s8(v331, v331, 8uLL).u64[0];
                    v333 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v331.i8, *(float32x2_t *)v331.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v331.i8, 1), *(float32x2_t *)v331.i8, 1), v332, v332);
                    if (a6.f32[0] == v333.f32[0])
                      goto LABEL_433;
                    v27 = a6.f32[0] < v333.f32[0];
                    v334 = a6.f32[0] < v333.f32[0];
                    LODWORD(v335) = vsub_f32(*(float32x2_t *)a6.f32, v333).u32[0];
                    *(float32x2_t *)a6.f32 = vsub_f32(v333, *(float32x2_t *)a6.f32);
                    if (!v27)
                      a6.f32[0] = v335;
                    if (a6.f32[0] <= 0.000001)
                    {
LABEL_433:
                      v336 = v309[15];
                      v337 = v322[15];
                      if (v336 == v337)
                      {
                        if (v309[14] <= v322[14])
                          goto LABEL_435;
                      }
                      else if (v336 < v337)
                      {
                        goto LABEL_435;
                      }
                    }
                    else if (!v334)
                    {
                      goto LABEL_435;
                    }
                  }
                }
                v262 = *a3;
                *(_QWORD *)&v674 = v33;
                *((_QWORD *)&v674 + 1) = v34;
                v263 = sub_22456636C((unsigned __int8 *)&v674);
                continue;
              }
            }
            v338 = (float32x4_t *)(i - 2);
            if (i - 2 != a1)
            {
              a6 = *v338;
              *(float32x4_t *)a1 = *v338;
            }
            a5 = 0;
            *(i - 2) = v33;
            *(i - 1) = v34;
            a2 = v665;
            continue;
          }
          v14 = a1;
          if (!v28)
            goto LABEL_18;
LABEL_25:
          v49 = *v14;
          v48 = v14[1];
          v51 = *((_OWORD *)v14 + 1);
          v50 = v14 + 2;
          v52 = *a3;
          v674 = v51;
          v53 = sub_22456636C((unsigned __int8 *)&v674);
          v55 = v52 + 1;
          v54 = v52[1];
          if (!*(_QWORD *)&v54)
            goto LABEL_825;
          v56 = a1;
          while (2)
          {
            v57 = (unint64_t)v50;
            v58 = (uint8x8_t)vcnt_s8(v54);
            v58.i16[0] = vaddlv_u8(v58);
            if (v58.u32[0] > 1uLL)
            {
              v59 = v53;
              if (v53 >= *(_QWORD *)&v54)
                v59 = v53 % *(_QWORD *)&v54;
            }
            else
            {
              v59 = (*(_QWORD *)&v54 - 1) & v53;
            }
            v60 = *(uint64_t ***)(*(_QWORD *)v52 + 8 * v59);
            if (!v60)
              goto LABEL_825;
            v61 = *v60;
            if (!*v60)
              goto LABEL_825;
            if (v58.u32[0] < 2uLL)
            {
              v62 = *(_QWORD *)&v54 - 1;
              while (1)
              {
                v65 = v61[1];
                if (v53 == v65)
                {
                  if (v61[2] == (_QWORD)v674 && v61[3] == *((_QWORD *)&v674 + 1))
                    goto LABEL_54;
                }
                else if ((v65 & v62) != v59)
                {
                  goto LABEL_825;
                }
                v61 = (uint64_t *)*v61;
                if (!v61)
                  goto LABEL_825;
              }
            }
            while (1)
            {
              v63 = v61[1];
              if (v53 == v63)
                break;
              if (v63 >= *(_QWORD *)&v54)
                v63 %= *(_QWORD *)&v54;
              if (v63 != v59)
                goto LABEL_825;
LABEL_36:
              v61 = (uint64_t *)*v61;
              if (!v61)
                goto LABEL_825;
            }
            if (v61[2] != (_QWORD)v674 || v61[3] != *((_QWORD *)&v674 + 1))
              goto LABEL_36;
LABEL_54:
            *(_QWORD *)&v674 = v49;
            *((_QWORD *)&v674 + 1) = v48;
            v67 = sub_22456636C((unsigned __int8 *)&v674);
            v70 = *v55;
            if (!*(_QWORD *)v55)
              goto LABEL_827;
            v71 = (uint8x8_t)vcnt_s8(v70);
            v71.i16[0] = vaddlv_u8(v71);
            if (v71.u32[0] > 1uLL)
            {
              v72 = v67;
              if (v67 >= *(_QWORD *)&v70)
                v72 = v67 % *(_QWORD *)&v70;
            }
            else
            {
              v72 = (*(_QWORD *)&v70 - 1) & v67;
            }
            v73 = *(uint64_t ***)(*(_QWORD *)v52 + 8 * v72);
            if (!v73 || (v74 = *v73) == 0)
            {
LABEL_827:
              v676 = 0;
              sub_223846924(&v675, "Entry not found ");
              sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
              if (v676 == -1)
                sub_22316DD70();
              *(_QWORD *)&v673 = &v672;
              ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
              if (v676 != -1)
                ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
              if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v633 = &v671;
              else
                v633 = (std::string *)v671.__r_.__value_.__r.__words[0];
              if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v634 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
              else
                v634 = v671.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v633, v634, (void (*)(void **))sub_22457406C);
              std::string::~string(&v671);
              abort();
            }
            if (v71.u32[0] < 2uLL)
            {
              v75 = *(_QWORD *)&v70 - 1;
              while (1)
              {
                v78 = v74[1];
                if (v67 == v78)
                {
                  if (v74[2] == (_QWORD)v674 && v74[3] == *((_QWORD *)&v674 + 1))
                    goto LABEL_82;
                }
                else if ((v78 & v75) != v72)
                {
                  goto LABEL_827;
                }
                v74 = (uint64_t *)*v74;
                if (!v74)
                  goto LABEL_827;
              }
            }
            while (2)
            {
              v76 = v74[1];
              if (v67 != v76)
              {
                if (v76 >= *(_QWORD *)&v70)
                  v76 %= *(_QWORD *)&v70;
                if (v76 != v72)
                  goto LABEL_827;
                goto LABEL_64;
              }
              if (v74[2] != (_QWORD)v674 || v74[3] != *((_QWORD *)&v674 + 1))
              {
LABEL_64:
                v74 = (uint64_t *)*v74;
                if (!v74)
                  goto LABEL_827;
                continue;
              }
              break;
            }
LABEL_82:
            v68.i64[0] = v61[12];
            v68.i32[2] = *((_DWORD *)v61 + 26);
            v80 = a3[1];
            *(int8x8_t *)v69.f32 = *v80;
            v69.i32[2] = v80[1].i32[0];
            v81 = (int8x16_t)vsubq_f32(v68, v69);
            v82 = (float32x2_t)vextq_s8(v81, v81, 8uLL).u64[0];
            v83 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)v81.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1), *(float32x2_t *)v81.i8, 1);
            v81.i64[0] = v74[12];
            v81.i32[2] = *((_DWORD *)v74 + 26);
            v84 = (int8x16_t)vsubq_f32((float32x4_t)v81, v69);
            v85 = vmla_f32(v83, v82, v82);
            v86 = (float32x2_t)vextq_s8(v84, v84, 8uLL).u64[0];
            v87 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v84.i8, 1), v86, v86);
            if (v85.f32[0] != v87.f32[0])
            {
              v27 = v85.f32[0] < v87.f32[0];
              v88 = v85.f32[0] < v87.f32[0];
              v89 = vsub_f32(v85, v87).u32[0];
              LODWORD(v90) = vsub_f32(v87, v85).u32[0];
              if (!v27)
                v90 = *(float *)&v89;
              if (v90 > 0.000001)
              {
                if (!v88)
                  goto LABEL_94;
LABEL_92:
                v50 = (uint64_t *)(v57 + 16);
                v52 = *a3;
                v674 = *(_OWORD *)(v57 + 16);
                v53 = sub_22456636C((unsigned __int8 *)&v674);
                v55 = v52 + 1;
                v54 = v52[1];
                v56 = (uint64_t *)v57;
                if (!*(_QWORD *)&v54)
                {
LABEL_825:
                  v676 = 0;
                  sub_223846924(&v675, "Entry not found ");
                  sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                  if (v676 == -1)
                    sub_22316DD70();
                  *(_QWORD *)&v673 = &v672;
                  ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                  if (v676 != -1)
                    ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v631 = &v671;
                  else
                    v631 = (std::string *)v671.__r_.__value_.__r.__words[0];
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v632 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                  else
                    v632 = v671.__r_.__value_.__l.__size_;
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v631, v632, (void (*)(void **))sub_22457406C);
                  std::string::~string(&v671);
                  abort();
                }
                continue;
              }
            }
            break;
          }
          v91 = v61[15];
          v92 = v74[15];
          if (v91 != v92)
          {
            if (v91 < v92)
              goto LABEL_94;
            goto LABEL_92;
          }
          if (v61[14] > v74[14])
            goto LABEL_92;
LABEL_94:
          v93 = v661;
          if (v56 == a1)
          {
            v94 = v665;
            if (v57 < (unint64_t)v665)
            {
              v95 = v661;
              do
              {
                while (1)
                {
                  v94 = v95;
                  v197 = *a3;
                  v198 = sub_22381AF00(*a3, *v95, v95[1]);
                  v199 = sub_22381AF00(v197, v49, v48);
                  v200 = a3[1];
                  v201.i64[0] = v198[8];
                  v201.i32[2] = *((_DWORD *)v198 + 18);
                  *(int8x8_t *)v202.f32 = *v200;
                  v202.i32[2] = v200[1].i32[0];
                  v203 = (int8x16_t)vsubq_f32(v201, v202);
                  v204 = (float32x2_t)vextq_s8(v203, v203, 8uLL).u64[0];
                  v205 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v203.i8, *(float32x2_t *)v203.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v203.i8, 1), *(float32x2_t *)v203.i8, 1), v204, v204);
                  v203.i64[0] = v199[8];
                  v203.i32[2] = *((_DWORD *)v199 + 18);
                  v206 = (int8x16_t)vsubq_f32((float32x4_t)v203, v202);
                  v207 = (float32x2_t)vextq_s8(v206, v206, 8uLL).u64[0];
                  v208 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v206.i8, 1), v207, v207);
                  v95 = v94 - 2;
                  if (v205.f32[0] != v208.f32[0])
                  {
                    v27 = v205.f32[0] < v208.f32[0];
                    v196 = v205.f32[0] >= v208.f32[0];
                    v209 = vsub_f32(v205, v208).u32[0];
                    LODWORD(v210) = vsub_f32(v208, v205).u32[0];
                    if (!v27)
                      v210 = *(float *)&v209;
                    if (v210 > 0.000001)
                      break;
                  }
                  v211 = v198[11];
                  v212 = v199[11];
                  if (v211 == v212)
                  {
                    if (v57 >= (unint64_t)v94 || v198[10] > v199[10])
                      goto LABEL_106;
                  }
                  else if (v57 >= (unint64_t)v94 || v211 >= v212)
                  {
                    goto LABEL_106;
                  }
                }
                if (v57 >= (unint64_t)v94)
                  v196 = 0;
              }
              while (v196);
            }
          }
          else
          {
            do
            {
              while (1)
              {
                while (1)
                {
                  v94 = v93;
                  v96 = *a3;
                  v97 = sub_22381AF00(*a3, *v93, v93[1]);
                  v98 = sub_22381AF00(v96, v49, v48);
                  v99 = a3[1];
                  v100.i64[0] = v97[8];
                  v100.i32[2] = *((_DWORD *)v97 + 18);
                  *(int8x8_t *)v101.f32 = *v99;
                  v101.i32[2] = v99[1].i32[0];
                  v102 = (int8x16_t)vsubq_f32(v100, v101);
                  v103 = (float32x2_t)vextq_s8(v102, v102, 8uLL).u64[0];
                  v104 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1), *(float32x2_t *)v102.i8, 1), v103, v103);
                  v102.i64[0] = v98[8];
                  v102.i32[2] = *((_DWORD *)v98 + 18);
                  v105 = (int8x16_t)vsubq_f32((float32x4_t)v102, v101);
                  v106 = (float32x2_t)vextq_s8(v105, v105, 8uLL).u64[0];
                  v107 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1), *(float32x2_t *)v105.i8, 1), v106, v106);
                  v93 = v94 - 2;
                  if (v104.f32[0] == v107.f32[0])
                    break;
                  v27 = v104.f32[0] < v107.f32[0];
                  v108 = v104.f32[0] < v107.f32[0];
                  v109 = vsub_f32(v104, v107).u32[0];
                  LODWORD(v110) = vsub_f32(v107, v104).u32[0];
                  if (!v27)
                    v110 = *(float *)&v109;
                  if (v110 <= 0.000001)
                    break;
                  if (v108)
                    goto LABEL_106;
                }
                v111 = v97[11];
                v112 = v98[11];
                if (v111 == v112)
                  break;
                if (v111 >= v112)
                  goto LABEL_106;
              }
            }
            while (v97[10] <= v98[10]);
          }
LABEL_106:
          i = (uint64_t *)v57;
          if (v57 >= (unint64_t)v94)
            goto LABEL_258;
          i = (uint64_t *)v57;
          v113 = v94;
          while (2)
          {
            v675 = *(_OWORD *)i;
            *(_OWORD *)i = *(_OWORD *)v113;
            *(_OWORD *)v113 = v675;
            v114 = *((_OWORD *)i + 1);
            i += 2;
            v115 = *a3;
            v674 = v114;
            v116 = sub_22456636C((unsigned __int8 *)&v674);
            while (2)
            {
              v119 = v115 + 1;
              v118 = v115[1];
              if (!*(_QWORD *)&v118)
                goto LABEL_451;
              v120 = (uint8x8_t)vcnt_s8(v118);
              v120.i16[0] = vaddlv_u8(v120);
              if (v120.u32[0] > 1uLL)
              {
                v121 = v116;
                if (v116 >= *(_QWORD *)&v118)
                  v121 = v116 % *(_QWORD *)&v118;
              }
              else
              {
                v121 = (*(_QWORD *)&v118 - 1) & v116;
              }
              v122 = *(uint64_t ***)(*(_QWORD *)v115 + 8 * v121);
              if (!v122 || (v123 = *v122) == 0)
              {
LABEL_451:
                v676 = 0;
                sub_223846924(&v675, "Entry not found ");
                sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                if (v676 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v673 = &v672;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                if (v676 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v623 = &v671;
                else
                  v623 = (std::string *)v671.__r_.__value_.__r.__words[0];
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v624 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                else
                  v624 = v671.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v623, v624, (void (*)(void **))sub_22457406C);
                std::string::~string(&v671);
                abort();
              }
              if (v120.u32[0] < 2uLL)
              {
                v124 = *(_QWORD *)&v118 - 1;
                while (1)
                {
                  v127 = v123[1];
                  if (v116 == v127)
                  {
                    if (v123[2] == (_QWORD)v674 && v123[3] == *((_QWORD *)&v674 + 1))
                      goto LABEL_140;
                  }
                  else if ((v127 & v124) != v121)
                  {
                    goto LABEL_451;
                  }
                  v123 = (uint64_t *)*v123;
                  if (!v123)
                    goto LABEL_451;
                }
              }
              while (2)
              {
                v125 = v123[1];
                if (v116 != v125)
                {
                  if (v125 >= *(_QWORD *)&v118)
                    v125 %= *(_QWORD *)&v118;
                  if (v125 != v121)
                    goto LABEL_451;
                  goto LABEL_122;
                }
                if (v123[2] != (_QWORD)v674 || v123[3] != *((_QWORD *)&v674 + 1))
                {
LABEL_122:
                  v123 = (uint64_t *)*v123;
                  if (!v123)
                    goto LABEL_451;
                  continue;
                }
                break;
              }
LABEL_140:
              *(_QWORD *)&v674 = v49;
              *((_QWORD *)&v674 + 1) = v48;
              v129 = sub_22456636C((unsigned __int8 *)&v674);
              v132 = *v119;
              if (!*(_QWORD *)v119)
                goto LABEL_453;
              v133 = (uint8x8_t)vcnt_s8(v132);
              v133.i16[0] = vaddlv_u8(v133);
              if (v133.u32[0] > 1uLL)
              {
                v134 = v129;
                if (v129 >= *(_QWORD *)&v132)
                  v134 = v129 % *(_QWORD *)&v132;
              }
              else
              {
                v134 = (*(_QWORD *)&v132 - 1) & v129;
              }
              v135 = *(uint64_t ***)(*(_QWORD *)v115 + 8 * v134);
              if (!v135 || (v136 = *v135) == 0)
              {
LABEL_453:
                v676 = 0;
                sub_223846924(&v675, "Entry not found ");
                sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                if (v676 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v673 = &v672;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                if (v676 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v625 = &v671;
                else
                  v625 = (std::string *)v671.__r_.__value_.__r.__words[0];
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v626 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                else
                  v626 = v671.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v625, v626, (void (*)(void **))sub_22457406C);
                std::string::~string(&v671);
                abort();
              }
              if (v133.u32[0] < 2uLL)
              {
                v137 = *(_QWORD *)&v132 - 1;
                while (1)
                {
                  v140 = v136[1];
                  if (v129 == v140)
                  {
                    if (v136[2] == (_QWORD)v674 && v136[3] == *((_QWORD *)&v674 + 1))
                      goto LABEL_168;
                  }
                  else if ((v140 & v137) != v134)
                  {
                    goto LABEL_453;
                  }
                  v136 = (uint64_t *)*v136;
                  if (!v136)
                    goto LABEL_453;
                }
              }
              while (2)
              {
                v138 = v136[1];
                if (v129 != v138)
                {
                  if (v138 >= *(_QWORD *)&v132)
                    v138 %= *(_QWORD *)&v132;
                  if (v138 != v134)
                    goto LABEL_453;
                  goto LABEL_150;
                }
                if (v136[2] != (_QWORD)v674 || v136[3] != *((_QWORD *)&v674 + 1))
                {
LABEL_150:
                  v136 = (uint64_t *)*v136;
                  if (!v136)
                    goto LABEL_453;
                  continue;
                }
                break;
              }
LABEL_168:
              v130.i64[0] = v123[12];
              v130.i32[2] = *((_DWORD *)v123 + 26);
              v142 = a3[1];
              *(int8x8_t *)v131.f32 = *v142;
              v131.i32[2] = v142[1].i32[0];
              v143 = (int8x16_t)vsubq_f32(v130, v131);
              v144 = (float32x2_t)vextq_s8(v143, v143, 8uLL).u64[0];
              v145 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v143.i8, 1), *(float32x2_t *)v143.i8, 1);
              v143.i64[0] = v136[12];
              v143.i32[2] = *((_DWORD *)v136 + 26);
              v146 = (int8x16_t)vsubq_f32((float32x4_t)v143, v131);
              v147 = vmla_f32(v145, v144, v144);
              v148 = (float32x2_t)vextq_s8(v146, v146, 8uLL).u64[0];
              v149 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v146.i8, *(float32x2_t *)v146.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v146.i8, 1), *(float32x2_t *)v146.i8, 1), v148, v148);
              if (v147.f32[0] != v149.f32[0])
              {
                v27 = v147.f32[0] < v149.f32[0];
                v150 = v147.f32[0] < v149.f32[0];
                v151 = vsub_f32(v147, v149).u32[0];
                LODWORD(v152) = vsub_f32(v149, v147).u32[0];
                if (!v27)
                  v152 = *(float *)&v151;
                if (v152 > 0.000001)
                {
                  if (!v150)
                    goto LABEL_176;
LABEL_111:
                  v117 = *((_OWORD *)i + 1);
                  i += 2;
                  v115 = *a3;
                  v674 = v117;
                  v116 = sub_22456636C((unsigned __int8 *)&v674);
                  continue;
                }
              }
              break;
            }
            v153 = v123[15];
            v154 = v136[15];
            if (v153 == v154)
            {
              if (v123[14] > v136[14])
                goto LABEL_111;
            }
            else if (v153 >= v154)
            {
              goto LABEL_111;
            }
LABEL_176:
            v155 = *((_OWORD *)v113 - 1);
            v113 -= 2;
            v156 = *a3;
            v674 = v155;
            v157 = sub_22456636C((unsigned __int8 *)&v674);
            while (2)
            {
              v160 = v156 + 1;
              v159 = v156[1];
              if (!*(_QWORD *)&v159)
                goto LABEL_455;
              v161 = (uint8x8_t)vcnt_s8(v159);
              v161.i16[0] = vaddlv_u8(v161);
              if (v161.u32[0] > 1uLL)
              {
                v162 = v157;
                if (v157 >= *(_QWORD *)&v159)
                  v162 = v157 % *(_QWORD *)&v159;
              }
              else
              {
                v162 = (*(_QWORD *)&v159 - 1) & v157;
              }
              v163 = *(uint64_t ***)(*(_QWORD *)v156 + 8 * v162);
              if (!v163 || (v164 = *v163) == 0)
              {
LABEL_455:
                v676 = 0;
                sub_223846924(&v675, "Entry not found ");
                sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                if (v676 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v673 = &v672;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                if (v676 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v627 = &v671;
                else
                  v627 = (std::string *)v671.__r_.__value_.__r.__words[0];
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v628 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                else
                  v628 = v671.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v627, v628, (void (*)(void **))sub_22457406C);
                std::string::~string(&v671);
                abort();
              }
              if (v161.u32[0] < 2uLL)
              {
                v165 = *(_QWORD *)&v159 - 1;
                while (1)
                {
                  v168 = v164[1];
                  if (v157 == v168)
                  {
                    if (v164[2] == (_QWORD)v674 && v164[3] == *((_QWORD *)&v674 + 1))
                      goto LABEL_207;
                  }
                  else if ((v168 & v165) != v162)
                  {
                    goto LABEL_455;
                  }
                  v164 = (uint64_t *)*v164;
                  if (!v164)
                    goto LABEL_455;
                }
              }
              while (2)
              {
                v166 = v164[1];
                if (v157 != v166)
                {
                  if (v166 >= *(_QWORD *)&v159)
                    v166 %= *(_QWORD *)&v159;
                  if (v166 != v162)
                    goto LABEL_455;
                  goto LABEL_189;
                }
                if (v164[2] != (_QWORD)v674 || v164[3] != *((_QWORD *)&v674 + 1))
                {
LABEL_189:
                  v164 = (uint64_t *)*v164;
                  if (!v164)
                    goto LABEL_455;
                  continue;
                }
                break;
              }
LABEL_207:
              *(_QWORD *)&v674 = v49;
              *((_QWORD *)&v674 + 1) = v48;
              v170 = sub_22456636C((unsigned __int8 *)&v674);
              v173 = *v160;
              if (!*(_QWORD *)v160)
                goto LABEL_457;
              v174 = (uint8x8_t)vcnt_s8(v173);
              v174.i16[0] = vaddlv_u8(v174);
              if (v174.u32[0] > 1uLL)
              {
                v175 = v170;
                if (v170 >= *(_QWORD *)&v173)
                  v175 = v170 % *(_QWORD *)&v173;
              }
              else
              {
                v175 = (*(_QWORD *)&v173 - 1) & v170;
              }
              v176 = *(uint64_t ***)(*(_QWORD *)v156 + 8 * v175);
              if (!v176 || (v177 = *v176) == 0)
              {
LABEL_457:
                v676 = 0;
                sub_223846924(&v675, "Entry not found ");
                sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                if (v676 == -1)
                  sub_22316DD70();
                *(_QWORD *)&v673 = &v672;
                ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                if (v676 != -1)
                  ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v629 = &v671;
                else
                  v629 = (std::string *)v671.__r_.__value_.__r.__words[0];
                if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v630 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                else
                  v630 = v671.__r_.__value_.__l.__size_;
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v629, v630, (void (*)(void **))sub_22457406C);
                std::string::~string(&v671);
                abort();
              }
              if (v174.u32[0] < 2uLL)
              {
                v178 = *(_QWORD *)&v173 - 1;
                while (1)
                {
                  v181 = v177[1];
                  if (v170 == v181)
                  {
                    if (v177[2] == (_QWORD)v674 && v177[3] == *((_QWORD *)&v674 + 1))
                      goto LABEL_235;
                  }
                  else if ((v181 & v178) != v175)
                  {
                    goto LABEL_457;
                  }
                  v177 = (uint64_t *)*v177;
                  if (!v177)
                    goto LABEL_457;
                }
              }
              while (2)
              {
                v179 = v177[1];
                if (v170 != v179)
                {
                  if (v179 >= *(_QWORD *)&v173)
                    v179 %= *(_QWORD *)&v173;
                  if (v179 != v175)
                    goto LABEL_457;
                  goto LABEL_217;
                }
                if (v177[2] != (_QWORD)v674 || v177[3] != *((_QWORD *)&v674 + 1))
                {
LABEL_217:
                  v177 = (uint64_t *)*v177;
                  if (!v177)
                    goto LABEL_457;
                  continue;
                }
                break;
              }
LABEL_235:
              v171.i64[0] = v164[12];
              v171.i32[2] = *((_DWORD *)v164 + 26);
              v183 = a3[1];
              *(int8x8_t *)v172.f32 = *v183;
              v172.i32[2] = v183[1].i32[0];
              v184 = (int8x16_t)vsubq_f32(v171, v172);
              v185 = (float32x2_t)vextq_s8(v184, v184, 8uLL).u64[0];
              v186 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v184.i8, *(float32x2_t *)v184.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 1), *(float32x2_t *)v184.i8, 1);
              v184.i64[0] = v177[12];
              v184.i32[2] = *((_DWORD *)v177 + 26);
              v187 = (int8x16_t)vsubq_f32((float32x4_t)v184, v172);
              v188 = vmla_f32(v186, v185, v185);
              v189 = (float32x2_t)vextq_s8(v187, v187, 8uLL).u64[0];
              v190 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v187.i8, 1), *(float32x2_t *)v187.i8, 1), v189, v189);
              if (v188.f32[0] != v190.f32[0])
              {
                v27 = v188.f32[0] < v190.f32[0];
                v191 = v188.f32[0] < v190.f32[0];
                v192 = vsub_f32(v188, v190).u32[0];
                LODWORD(v193) = vsub_f32(v190, v188).u32[0];
                if (!v27)
                  v193 = *(float *)&v192;
                if (v193 > 0.000001)
                {
                  if (v191)
                    goto LABEL_108;
LABEL_178:
                  v158 = *((_OWORD *)v113 - 1);
                  v113 -= 2;
                  v156 = *a3;
                  v674 = v158;
                  v157 = sub_22456636C((unsigned __int8 *)&v674);
                  continue;
                }
              }
              break;
            }
            v194 = v164[15];
            v195 = v177[15];
            if (v194 != v195)
            {
              if (v194 >= v195)
                goto LABEL_108;
              goto LABEL_178;
            }
            if (v164[14] <= v177[14])
              goto LABEL_178;
LABEL_108:
            if (i < v113)
              continue;
            break;
          }
LABEL_258:
          v213 = a1;
          if (i - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)i - 1);
          *(i - 2) = v49;
          *(i - 1) = v48;
          if (v57 < (unint64_t)v94)
          {
LABEL_263:
            sub_22383ACC8(v213, i - 2, a3, a4, a5 & 1);
            a5 = 0;
            a2 = v665;
            continue;
          }
          v214 = sub_22383F10C(a1, i - 2, (_QWORD **)a3);
          if (!sub_22383F10C(i, v665, (_QWORD **)a3))
          {
            a2 = v665;
            v213 = a1;
            if (!v214)
              goto LABEL_263;
            continue;
          }
          a2 = i - 2;
          if (v214)
            return *(double *)a6.i64;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v9 == a2)
            return *(double *)a6.i64;
          v352 = v9 + 2;
          if (v9 + 2 == a2)
            return *(double *)a6.i64;
          v353 = v9;
          while (1)
          {
            v354 = v353;
            v353 = v352;
            v355 = *a3;
            v356 = sub_22381AF00(*a3, v354[2], v354[3]);
            v357 = sub_22381AF00(v355, *v354, v354[1]);
            a6.i64[0] = v356[8];
            a6.i32[2] = *((_DWORD *)v356 + 18);
            v358 = a3[1];
            *(int8x8_t *)v359.f32 = *v358;
            v359.i32[2] = v358[1].i32[0];
            v360 = (int8x16_t)vsubq_f32(a6, v359);
            v361 = (float32x2_t)vextq_s8(v360, v360, 8uLL).u64[0];
            *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v360.i8, *(float32x2_t *)v360.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v360.i8, 1), *(float32x2_t *)v360.i8, 1);
            v360.i64[0] = v357[8];
            v360.i32[2] = *((_DWORD *)v357 + 18);
            v362 = (int8x16_t)vsubq_f32((float32x4_t)v360, v359);
            *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v361, v361);
            v363 = (float32x2_t)vextq_s8(v362, v362, 8uLL).u64[0];
            v364 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v362.i8, *(float32x2_t *)v362.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v362.i8, 1), *(float32x2_t *)v362.i8, 1), v363, v363);
            if (a6.f32[0] == v364.f32[0])
              goto LABEL_471;
            v27 = a6.f32[0] < v364.f32[0];
            v365 = a6.f32[0] < v364.f32[0];
            LODWORD(v366) = vsub_f32(*(float32x2_t *)a6.f32, v364).u32[0];
            *(float32x2_t *)a6.f32 = vsub_f32(v364, *(float32x2_t *)a6.f32);
            if (!v27)
              a6.f32[0] = v366;
            if (a6.f32[0] <= 0.000001)
            {
LABEL_471:
              v367 = v356[11];
              v368 = v357[11];
              if (v367 != v368)
              {
                if (v367 < v368)
                  goto LABEL_464;
LABEL_475:
                v369 = v354[2];
                v370 = v354[3];
                a6 = *(float32x4_t *)v354;
                *(_OWORD *)v353 = *(_OWORD *)v354;
                v371 = a1;
                if (v354 == a1)
                  goto LABEL_463;
LABEL_479:
                v371 = v354;
                v372 = *a3;
                *(_QWORD *)&v674 = v369;
                *((_QWORD *)&v674 + 1) = v370;
                v373 = sub_22456636C((unsigned __int8 *)&v674);
                v374 = v372[1];
                if (!*(_QWORD *)&v374)
                  goto LABEL_879;
                v375 = (uint8x8_t)vcnt_s8(v374);
                v375.i16[0] = vaddlv_u8(v375);
                if (v375.u32[0] > 1uLL)
                {
                  v376 = v373;
                  if (v373 >= *(_QWORD *)&v374)
                    v376 = v373 % *(_QWORD *)&v374;
                }
                else
                {
                  v376 = (*(_QWORD *)&v374 - 1) & v373;
                }
                v377 = *(uint64_t ***)(*(_QWORD *)v372 + 8 * v376);
                if (!v377 || (v378 = *v377) == 0)
                {
LABEL_879:
                  v676 = 0;
                  sub_223846924(&v675, "Entry not found ");
                  sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                  if (v676 == -1)
                    sub_22316DD70();
                  *(_QWORD *)&v673 = &v672;
                  ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                  if (v676 != -1)
                    ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v651 = &v671;
                  else
                    v651 = (std::string *)v671.__r_.__value_.__r.__words[0];
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v652 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                  else
                    v652 = v671.__r_.__value_.__l.__size_;
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v651, v652, (void (*)(void **))sub_22457406C);
                  std::string::~string(&v671);
                  abort();
                }
                if (v375.u32[0] < 2uLL)
                {
                  v379 = *(_QWORD *)&v374 - 1;
                  while (1)
                  {
                    v382 = v378[1];
                    if (v373 == v382)
                    {
                      if (v378[2] == (_QWORD)v674 && v378[3] == *((_QWORD *)&v674 + 1))
                        goto LABEL_507;
                    }
                    else if ((v382 & v379) != v376)
                    {
                      goto LABEL_879;
                    }
                    v378 = (uint64_t *)*v378;
                    if (!v378)
                      goto LABEL_879;
                  }
                }
                while (1)
                {
                  v380 = v378[1];
                  if (v373 == v380)
                  {
                    if (v378[2] == (_QWORD)v674 && v378[3] == *((_QWORD *)&v674 + 1))
                    {
LABEL_507:
                      v354 -= 2;
                      v674 = *((_OWORD *)v371 - 1);
                      v384 = sub_22456636C((unsigned __int8 *)&v674);
                      v386 = v372[1];
                      if (!*(_QWORD *)&v386)
                        goto LABEL_881;
                      v387 = (uint8x8_t)vcnt_s8(v386);
                      v387.i16[0] = vaddlv_u8(v387);
                      if (v387.u32[0] > 1uLL)
                      {
                        v388 = v384;
                        if (v384 >= *(_QWORD *)&v386)
                          v388 = v384 % *(_QWORD *)&v386;
                      }
                      else
                      {
                        v388 = (*(_QWORD *)&v386 - 1) & v384;
                      }
                      v389 = *(uint64_t ***)(*(_QWORD *)v372 + 8 * v388);
                      if (!v389 || (v390 = *v389) == 0)
                      {
LABEL_881:
                        v676 = 0;
                        sub_223846924(&v675, "Entry not found ");
                        sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                        if (v676 == -1)
                          sub_22316DD70();
                        *(_QWORD *)&v673 = &v672;
                        ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                        if (v676 != -1)
                          ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                        if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v653 = &v671;
                        else
                          v653 = (std::string *)v671.__r_.__value_.__r.__words[0];
                        if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v654 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                        else
                          v654 = v671.__r_.__value_.__l.__size_;
                        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v653, v654, (void (*)(void **))sub_22457406C);
                        std::string::~string(&v671);
                        abort();
                      }
                      if (v387.u32[0] < 2uLL)
                      {
                        v391 = *(_QWORD *)&v386 - 1;
                        while (1)
                        {
                          v394 = v390[1];
                          if (v384 == v394)
                          {
                            if (v390[2] == (_QWORD)v674 && v390[3] == *((_QWORD *)&v674 + 1))
                              goto LABEL_535;
                          }
                          else if ((v394 & v391) != v388)
                          {
                            goto LABEL_881;
                          }
                          v390 = (uint64_t *)*v390;
                          if (!v390)
                            goto LABEL_881;
                        }
                      }
                      while (2)
                      {
                        v392 = v390[1];
                        if (v384 != v392)
                        {
                          if (v392 >= *(_QWORD *)&v386)
                            v392 %= *(_QWORD *)&v386;
                          if (v392 != v388)
                            goto LABEL_881;
                          goto LABEL_517;
                        }
                        if (v390[2] != (_QWORD)v674 || v390[3] != *((_QWORD *)&v674 + 1))
                        {
LABEL_517:
                          v390 = (uint64_t *)*v390;
                          if (!v390)
                            goto LABEL_881;
                          continue;
                        }
                        break;
                      }
LABEL_535:
                      a6.i64[0] = v378[12];
                      a6.i32[2] = *((_DWORD *)v378 + 26);
                      v396 = a3[1];
                      *(int8x8_t *)v385.f32 = *v396;
                      v385.i32[2] = v396[1].i32[0];
                      v397 = (int8x16_t)vsubq_f32(a6, v385);
                      v398 = (float32x2_t)vextq_s8(v397, v397, 8uLL).u64[0];
                      *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v397.i8, *(float32x2_t *)v397.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v397.i8, 1), *(float32x2_t *)v397.i8, 1);
                      v397.i64[0] = v390[12];
                      v397.i32[2] = *((_DWORD *)v390 + 26);
                      v399 = (int8x16_t)vsubq_f32((float32x4_t)v397, v385);
                      *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v398, v398);
                      v400 = (float32x2_t)vextq_s8(v399, v399, 8uLL).u64[0];
                      v401 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v399.i8, *(float32x2_t *)v399.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v399.i8, 1), *(float32x2_t *)v399.i8, 1), v400, v400);
                      if (a6.f32[0] != v401.f32[0])
                      {
                        v27 = a6.f32[0] < v401.f32[0];
                        v402 = a6.f32[0] < v401.f32[0];
                        LODWORD(v403) = vsub_f32(*(float32x2_t *)a6.f32, v401).u32[0];
                        *(float32x2_t *)a6.f32 = vsub_f32(v401, *(float32x2_t *)a6.f32);
                        if (!v27)
                          a6.f32[0] = v403;
                        if (a6.f32[0] > 0.000001)
                        {
                          if (!v402)
                            goto LABEL_463;
                          goto LABEL_478;
                        }
                      }
                      v404 = v378[15];
                      v405 = v390[15];
                      if (v404 != v405)
                      {
                        if (v404 < v405)
                          goto LABEL_463;
                        goto LABEL_478;
                      }
                      if (v378[14] <= v390[14])
                      {
LABEL_463:
                        *v371 = v369;
                        v371[1] = v370;
                        goto LABEL_464;
                      }
LABEL_478:
                      a6 = *(float32x4_t *)v354;
                      *(_OWORD *)v371 = *(_OWORD *)v354;
                      v371 = a1;
                      if (v354 == a1)
                        goto LABEL_463;
                      goto LABEL_479;
                    }
                  }
                  else
                  {
                    if (v380 >= *(_QWORD *)&v374)
                      v380 %= *(_QWORD *)&v374;
                    if (v380 != v376)
                      goto LABEL_879;
                  }
                  v378 = (uint64_t *)*v378;
                  if (!v378)
                    goto LABEL_879;
                }
              }
              if (v356[10] > v357[10])
                goto LABEL_475;
            }
            else if (v365)
            {
              goto LABEL_475;
            }
LABEL_464:
            v352 = v353 + 2;
            if (v353 + 2 == v665)
              return *(double *)a6.i64;
          }
        }
        if (v9 == a2)
          return *(double *)a6.i64;
        v570 = v9 + 2;
        if (v9 + 2 == a2)
          return *(double *)a6.i64;
        while (2)
        {
          v571 = a1;
          a1 = v570;
          v572 = *a3;
          v573 = sub_22381AF00(*a3, v571[2], v571[3]);
          v574 = sub_22381AF00(v572, *v571, v571[1]);
          a6.i64[0] = v573[8];
          a6.i32[2] = *((_DWORD *)v573 + 18);
          v575 = a3[1];
          *(int8x8_t *)v576.f32 = *v575;
          v576.i32[2] = v575[1].i32[0];
          v577 = (int8x16_t)vsubq_f32(a6, v576);
          v578 = (float32x2_t)vextq_s8(v577, v577, 8uLL).u64[0];
          *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v577.i8, *(float32x2_t *)v577.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v577.i8, 1), *(float32x2_t *)v577.i8, 1);
          v577.i64[0] = v574[8];
          v577.i32[2] = *((_DWORD *)v574 + 18);
          v579 = (int8x16_t)vsubq_f32((float32x4_t)v577, v576);
          *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v578, v578);
          v580 = (float32x2_t)vextq_s8(v579, v579, 8uLL).u64[0];
          v581 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v579.i8, *(float32x2_t *)v579.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v579.i8, 1), *(float32x2_t *)v579.i8, 1), v580, v580);
          if (a6.f32[0] == v581.f32[0])
            goto LABEL_713;
          v27 = a6.f32[0] < v581.f32[0];
          v582 = a6.f32[0] < v581.f32[0];
          LODWORD(v583) = vsub_f32(*(float32x2_t *)a6.f32, v581).u32[0];
          *(float32x2_t *)a6.f32 = vsub_f32(v581, *(float32x2_t *)a6.f32);
          if (!v27)
            a6.f32[0] = v583;
          if (a6.f32[0] <= 0.000001)
          {
LABEL_713:
            v584 = v573[11];
            v585 = v574[11];
            if (v584 == v585)
            {
              if (v573[10] <= v574[10])
                goto LABEL_706;
            }
            else if (v584 < v585)
            {
              goto LABEL_706;
            }
          }
          else if (!v582)
          {
            goto LABEL_706;
          }
          v586 = *a1;
          v587 = v571[3];
          *(_OWORD *)a1 = *(_OWORD *)v571;
          v588 = *a3;
          *(_QWORD *)&v674 = v586;
          *((_QWORD *)&v674 + 1) = v587;
          v589 = sub_22456636C((unsigned __int8 *)&v674);
          v591 = v588 + 1;
          v590 = v588[1];
          if (!*(_QWORD *)&v590)
            goto LABEL_784;
          while (2)
          {
            v592 = (uint8x8_t)vcnt_s8(v590);
            v592.i16[0] = vaddlv_u8(v592);
            if (v592.u32[0] > 1uLL)
            {
              v593 = v589;
              if (v589 >= *(_QWORD *)&v590)
                v593 = v589 % *(_QWORD *)&v590;
            }
            else
            {
              v593 = (*(_QWORD *)&v590 - 1) & v589;
            }
            v594 = *(uint64_t ***)(*(_QWORD *)v588 + 8 * v593);
            if (!v594)
              goto LABEL_784;
            v595 = *v594;
            if (!*v594)
              goto LABEL_784;
            if (v592.u32[0] < 2uLL)
            {
              v596 = *(_QWORD *)&v590 - 1;
              while (1)
              {
                v599 = v595[1];
                if (v589 == v599)
                {
                  if (v595[2] == (_QWORD)v674 && v595[3] == *((_QWORD *)&v674 + 1))
                    goto LABEL_745;
                }
                else if ((v599 & v596) != v593)
                {
                  goto LABEL_784;
                }
                v595 = (uint64_t *)*v595;
                if (!v595)
                  goto LABEL_784;
              }
            }
            while (1)
            {
              v597 = v595[1];
              if (v589 == v597)
                break;
              if (v597 >= *(_QWORD *)&v590)
                v597 %= *(_QWORD *)&v590;
              if (v597 != v593)
                goto LABEL_784;
LABEL_727:
              v595 = (uint64_t *)*v595;
              if (!v595)
                goto LABEL_784;
            }
            if (v595[2] != (_QWORD)v674 || v595[3] != *((_QWORD *)&v674 + 1))
              goto LABEL_727;
LABEL_745:
            v674 = *((_OWORD *)v571 - 1);
            v601 = sub_22456636C((unsigned __int8 *)&v674);
            v603 = *v591;
            if (!*(_QWORD *)v591)
              goto LABEL_859;
            v604 = (uint8x8_t)vcnt_s8(v603);
            v604.i16[0] = vaddlv_u8(v604);
            if (v604.u32[0] > 1uLL)
            {
              v605 = v601;
              if (v601 >= *(_QWORD *)&v603)
                v605 = v601 % *(_QWORD *)&v603;
            }
            else
            {
              v605 = (*(_QWORD *)&v603 - 1) & v601;
            }
            v606 = *(uint64_t ***)(*(_QWORD *)v588 + 8 * v605);
            if (!v606 || (v607 = *v606) == 0)
            {
LABEL_859:
              v676 = 0;
              sub_223846924(&v675, "Entry not found ");
              sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
              if (v676 == -1)
                sub_22316DD70();
              *(_QWORD *)&v673 = &v672;
              ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
              if (v676 != -1)
                ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
              if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v649 = &v671;
              else
                v649 = (std::string *)v671.__r_.__value_.__r.__words[0];
              if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v650 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
              else
                v650 = v671.__r_.__value_.__l.__size_;
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v649, v650, (void (*)(void **))sub_22457406C);
              std::string::~string(&v671);
              abort();
            }
            if (v604.u32[0] < 2uLL)
            {
              v608 = *(_QWORD *)&v603 - 1;
              while (1)
              {
                v611 = v607[1];
                if (v601 == v611)
                {
                  if (v607[2] == (_QWORD)v674 && v607[3] == *((_QWORD *)&v674 + 1))
                    goto LABEL_773;
                }
                else if ((v611 & v608) != v605)
                {
                  goto LABEL_859;
                }
                v607 = (uint64_t *)*v607;
                if (!v607)
                  goto LABEL_859;
              }
            }
            while (2)
            {
              v609 = v607[1];
              if (v601 != v609)
              {
                if (v609 >= *(_QWORD *)&v603)
                  v609 %= *(_QWORD *)&v603;
                if (v609 != v605)
                  goto LABEL_859;
                goto LABEL_755;
              }
              if (v607[2] != (_QWORD)v674 || v607[3] != *((_QWORD *)&v674 + 1))
              {
LABEL_755:
                v607 = (uint64_t *)*v607;
                if (!v607)
                  goto LABEL_859;
                continue;
              }
              break;
            }
LABEL_773:
            a6.i64[0] = v595[12];
            a6.i32[2] = *((_DWORD *)v595 + 26);
            v613 = a3[1];
            *(int8x8_t *)v602.f32 = *v613;
            v602.i32[2] = v613[1].i32[0];
            v614 = (int8x16_t)vsubq_f32(a6, v602);
            v615 = (float32x2_t)vextq_s8(v614, v614, 8uLL).u64[0];
            *(float32x2_t *)a6.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v614.i8, *(float32x2_t *)v614.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v614.i8, 1), *(float32x2_t *)v614.i8, 1);
            v614.i64[0] = v607[12];
            v614.i32[2] = *((_DWORD *)v607 + 26);
            v616 = (int8x16_t)vsubq_f32((float32x4_t)v614, v602);
            *(float32x2_t *)a6.f32 = vmla_f32(*(float32x2_t *)a6.f32, v615, v615);
            v617 = (float32x2_t)vextq_s8(v616, v616, 8uLL).u64[0];
            v618 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v616.i8, *(float32x2_t *)v616.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v616.i8, 1), *(float32x2_t *)v616.i8, 1), v617, v617);
            if (a6.f32[0] != v618.f32[0])
            {
              v27 = a6.f32[0] < v618.f32[0];
              v619 = a6.f32[0] < v618.f32[0];
              LODWORD(v620) = vsub_f32(*(float32x2_t *)a6.f32, v618).u32[0];
              *(float32x2_t *)a6.f32 = vsub_f32(v618, *(float32x2_t *)a6.f32);
              if (!v27)
                a6.f32[0] = v620;
              if (a6.f32[0] > 0.000001)
              {
                if (!v619)
                  goto LABEL_705;
LABEL_783:
                *(_OWORD *)v571 = *((_OWORD *)v571 - 1);
                v588 = *a3;
                *(_QWORD *)&v674 = v586;
                *((_QWORD *)&v674 + 1) = v587;
                v589 = sub_22456636C((unsigned __int8 *)&v674);
                v591 = v588 + 1;
                v590 = v588[1];
                v571 -= 2;
                if (!*(_QWORD *)&v590)
                {
LABEL_784:
                  v676 = 0;
                  sub_223846924(&v675, "Entry not found ");
                  sub_22319B83C((uint64_t)&v673, (uint64_t)&v675, (unsigned __int8 *)&v674);
                  if (v676 == -1)
                    sub_22316DD70();
                  *(_QWORD *)&v673 = &v672;
                  ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24EC5B118[v676])(&v671, &v673, &v675);
                  if (v676 != -1)
                    ((void (*)(__int128 *, __int128 *))off_24EC5B100[v676])(&v673, &v675);
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v647 = &v671;
                  else
                    v647 = (std::string *)v671.__r_.__value_.__r.__words[0];
                  if ((v671.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v648 = HIBYTE(v671.__r_.__value_.__r.__words[2]);
                  else
                    v648 = v671.__r_.__value_.__l.__size_;
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v647, v648, (void (*)(void **))sub_22457406C);
                  std::string::~string(&v671);
                  abort();
                }
                continue;
              }
            }
            break;
          }
          v621 = v595[15];
          v622 = v607[15];
          if (v621 != v622)
          {
            if (v621 < v622)
              goto LABEL_705;
            goto LABEL_783;
          }
          if (v595[14] > v607[14])
            goto LABEL_783;
LABEL_705:
          *v571 = v586;
          v571[1] = v587;
LABEL_706:
          v570 = a1 + 2;
          if (a1 + 2 != v665)
            continue;
          return *(double *)a6.i64;
        }
    }
  }
}

void sub_22383E368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

_QWORD *sub_22383E818(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD **a6)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;
  float32x4_t v15;
  _QWORD *v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t v19;
  int8x16_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  BOOL v24;
  _BOOL4 v25;
  unsigned __int32 v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  float32x4_t v33;
  _QWORD *v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x2_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  _BOOL4 v42;
  unsigned __int32 v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  float32x4_t v50;
  _QWORD *v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x2_t v54;
  int8x16_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  _BOOL4 v59;
  unsigned __int32 v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  _QWORD *v65;
  _QWORD *v66;
  float32x4_t v67;
  _QWORD *v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x2_t v71;
  int8x16_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  _BOOL4 v76;
  unsigned __int32 v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;

  sub_22383F5C8(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = sub_22381AF00(*a6, *a5, a5[1]);
  result = sub_22381AF00(v12, *a4, a4[1]);
  v15.i64[0] = v13[8];
  v15.i32[2] = *((_DWORD *)v13 + 18);
  v16 = a6[1];
  v17.i64[0] = *v16;
  v17.i32[2] = *((_DWORD *)v16 + 2);
  v18 = (int8x16_t)vsubq_f32(v15, v17);
  v19 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
  *(float32x2_t *)v15.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)v18.i8, 1);
  v18.i64[0] = result[8];
  v18.i32[2] = *((_DWORD *)result + 18);
  v20 = (int8x16_t)vsubq_f32((float32x4_t)v18, v17);
  v21 = vmla_f32(*(float32x2_t *)v15.f32, v19, v19);
  v22 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
  v23 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1), *(float32x2_t *)v20.i8, 1), v22, v22);
  if (v21.f32[0] == v23.f32[0])
    goto LABEL_7;
  v24 = v21.f32[0] < v23.f32[0];
  v25 = v21.f32[0] < v23.f32[0];
  v26 = vsub_f32(v21, v23).u32[0];
  LODWORD(v27) = vsub_f32(v23, v21).u32[0];
  if (!v24)
    v27 = *(float *)&v26;
  if (v27 <= 0.000001)
  {
LABEL_7:
    v28 = v13[11];
    v29 = result[11];
    if (v28 == v29)
    {
      if (v13[10] <= result[10])
        return result;
    }
    else if (v28 < v29)
    {
      return result;
    }
  }
  else if (!v25)
  {
    return result;
  }
  v30 = *(_OWORD *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)a5 = v30;
  v31 = *a6;
  v32 = sub_22381AF00(*a6, *a4, a4[1]);
  result = sub_22381AF00(v31, *a3, a3[1]);
  v33.i64[0] = v32[8];
  v33.i32[2] = *((_DWORD *)v32 + 18);
  v34 = a6[1];
  v35.i64[0] = *v34;
  v35.i32[2] = *((_DWORD *)v34 + 2);
  v36 = (int8x16_t)vsubq_f32(v33, v35);
  v37 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
  *(float32x2_t *)v33.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v36.i8, 1);
  v36.i64[0] = result[8];
  v36.i32[2] = *((_DWORD *)result + 18);
  v38 = (int8x16_t)vsubq_f32((float32x4_t)v36, v35);
  v39 = vmla_f32(*(float32x2_t *)v33.f32, v37, v37);
  v40 = (float32x2_t)vextq_s8(v38, v38, 8uLL).u64[0];
  v41 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1), *(float32x2_t *)v38.i8, 1), v40, v40);
  if (v39.f32[0] == v41.f32[0])
    goto LABEL_17;
  v24 = v39.f32[0] < v41.f32[0];
  v42 = v39.f32[0] < v41.f32[0];
  v43 = vsub_f32(v39, v41).u32[0];
  LODWORD(v44) = vsub_f32(v41, v39).u32[0];
  if (!v24)
    v44 = *(float *)&v43;
  if (v44 <= 0.000001)
  {
LABEL_17:
    v45 = v32[11];
    v46 = result[11];
    if (v45 == v46)
    {
      if (v32[10] <= result[10])
        return result;
    }
    else if (v45 < v46)
    {
      return result;
    }
  }
  else if (!v42)
  {
    return result;
  }
  v47 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v47;
  v48 = *a6;
  v49 = sub_22381AF00(*a6, *a3, a3[1]);
  result = sub_22381AF00(v48, *a2, a2[1]);
  v50.i64[0] = v49[8];
  v50.i32[2] = *((_DWORD *)v49 + 18);
  v51 = a6[1];
  v52.i64[0] = *v51;
  v52.i32[2] = *((_DWORD *)v51 + 2);
  v53 = (int8x16_t)vsubq_f32(v50, v52);
  v54 = (float32x2_t)vextq_s8(v53, v53, 8uLL).u64[0];
  *(float32x2_t *)v50.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), *(float32x2_t *)v53.i8, 1);
  v53.i64[0] = result[8];
  v53.i32[2] = *((_DWORD *)result + 18);
  v55 = (int8x16_t)vsubq_f32((float32x4_t)v53, v52);
  v56 = vmla_f32(*(float32x2_t *)v50.f32, v54, v54);
  v57 = (float32x2_t)vextq_s8(v55, v55, 8uLL).u64[0];
  v58 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1), *(float32x2_t *)v55.i8, 1), v57, v57);
  if (v56.f32[0] == v58.f32[0])
    goto LABEL_27;
  v24 = v56.f32[0] < v58.f32[0];
  v59 = v56.f32[0] < v58.f32[0];
  v60 = vsub_f32(v56, v58).u32[0];
  LODWORD(v61) = vsub_f32(v58, v56).u32[0];
  if (!v24)
    v61 = *(float *)&v60;
  if (v61 <= 0.000001)
  {
LABEL_27:
    v62 = v49[11];
    v63 = result[11];
    if (v62 == v63)
    {
      if (v49[10] <= result[10])
        return result;
    }
    else if (v62 < v63)
    {
      return result;
    }
  }
  else if (!v59)
  {
    return result;
  }
  v64 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v64;
  v65 = *a6;
  v66 = sub_22381AF00(*a6, *a2, a2[1]);
  result = sub_22381AF00(v65, *a1, a1[1]);
  v67.i64[0] = v66[8];
  v67.i32[2] = *((_DWORD *)v66 + 18);
  v68 = a6[1];
  v69.i64[0] = *v68;
  v69.i32[2] = *((_DWORD *)v68 + 2);
  v70 = (int8x16_t)vsubq_f32(v67, v69);
  v71 = (float32x2_t)vextq_s8(v70, v70, 8uLL).u64[0];
  *(float32x2_t *)v67.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1), *(float32x2_t *)v70.i8, 1);
  v70.i64[0] = result[8];
  v70.i32[2] = *((_DWORD *)result + 18);
  v72 = (int8x16_t)vsubq_f32((float32x4_t)v70, v69);
  v73 = vmla_f32(*(float32x2_t *)v67.f32, v71, v71);
  v74 = (float32x2_t)vextq_s8(v72, v72, 8uLL).u64[0];
  v75 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1), *(float32x2_t *)v72.i8, 1), v74, v74);
  if (v73.f32[0] != v75.f32[0])
  {
    v24 = v73.f32[0] < v75.f32[0];
    v76 = v73.f32[0] < v75.f32[0];
    v77 = vsub_f32(v73, v75).u32[0];
    LODWORD(v78) = vsub_f32(v75, v73).u32[0];
    if (!v24)
      v78 = *(float *)&v77;
    if (v78 > 0.000001)
    {
      if (!v76)
        return result;
      goto LABEL_41;
    }
  }
  v79 = v66[11];
  v80 = result[11];
  if (v79 != v80)
  {
    if (v79 < v80)
      return result;
    goto LABEL_41;
  }
  if (v66[10] > result[10])
  {
LABEL_41:
    v81 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v81;
  }
  return result;
}

float32x4_t sub_22383EC2C(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD **a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  float32x4_t v11;
  _QWORD *v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  BOOL v20;
  BOOL v21;
  unsigned __int32 v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x2_t v32;
  int8x16_t v33;
  float32x4_t result;
  float32x2_t v35;
  float32x2_t v36;
  _BOOL4 v37;
  float v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  float32x4_t v42;
  _QWORD *v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x2_t v46;
  int8x16_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  _BOOL4 v51;
  unsigned __int32 v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x2_t v65;
  int8x16_t v66;
  float32x2_t v67;
  float32x2_t v68;
  _BOOL4 v69;
  float v70;
  float32x4_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x2_t v78;
  int8x16_t v79;
  float32x2_t v80;
  float32x2_t v81;
  _BOOL4 v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v8 = *a4;
  v9 = sub_22381AF00(*a4, *a2, a2[1]);
  v10 = sub_22381AF00(v8, *a1, a1[1]);
  v11.i64[0] = v9[8];
  v11.i32[2] = *((_DWORD *)v9 + 18);
  v12 = a4[1];
  v13.i64[0] = *v12;
  v13.i32[2] = *((_DWORD *)v12 + 2);
  v14 = (int8x16_t)vsubq_f32(v11, v13);
  v15 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
  *(float32x2_t *)v11.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), *(float32x2_t *)v14.i8, 1);
  v14.i64[0] = v10[8];
  v14.i32[2] = *((_DWORD *)v10 + 18);
  v16 = (int8x16_t)vsubq_f32((float32x4_t)v14, v13);
  v17 = vmla_f32(*(float32x2_t *)v11.f32, v15, v15);
  v18 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
  v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1), *(float32x2_t *)v16.i8, 1), v18, v18);
  if (v17.f32[0] != v19.f32[0])
  {
    v20 = v17.f32[0] < v19.f32[0];
    v21 = v17.f32[0] < v19.f32[0];
    v22 = vsub_f32(v17, v19).u32[0];
    LODWORD(v23) = vsub_f32(v19, v17).u32[0];
    if (!v20)
      v23 = *(float *)&v22;
    if (v23 > 0.000001)
    {
      if (v21)
        goto LABEL_16;
LABEL_9:
      v26 = *a4;
      v27 = sub_22381AF00(*a4, *a3, a3[1]);
      v28 = sub_22381AF00(v26, *a2, a2[1]);
      result.i64[0] = v27[8];
      result.i32[2] = *((_DWORD *)v27 + 18);
      v29 = a4[1];
      v30.i64[0] = *v29;
      v30.i32[2] = *((_DWORD *)v29 + 2);
      v31 = (int8x16_t)vsubq_f32(result, v30);
      v32 = (float32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
      *(float32x2_t *)result.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), *(float32x2_t *)v31.i8, 1);
      v31.i64[0] = v28[8];
      v31.i32[2] = *((_DWORD *)v28 + 18);
      v33 = (int8x16_t)vsubq_f32((float32x4_t)v31, v30);
      *(float32x2_t *)result.f32 = vmla_f32(*(float32x2_t *)result.f32, v32, v32);
      v35 = (float32x2_t)vextq_s8(v33, v33, 8uLL).u64[0];
      v36 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1), *(float32x2_t *)v33.i8, 1), v35, v35);
      if (result.f32[0] == v36.f32[0])
        goto LABEL_22;
      v20 = result.f32[0] < v36.f32[0];
      v37 = result.f32[0] < v36.f32[0];
      LODWORD(v38) = vsub_f32(*(float32x2_t *)result.f32, v36).u32[0];
      *(float32x2_t *)result.f32 = vsub_f32(v36, *(float32x2_t *)result.f32);
      if (!v20)
        result.f32[0] = v38;
      if (result.f32[0] <= 0.000001)
      {
LABEL_22:
        v54 = v27[11];
        v55 = v28[11];
        if (v54 == v55)
        {
          if (v27[10] <= v28[10])
            return result;
        }
        else if (v54 < v55)
        {
          return result;
        }
      }
      else if (!v37)
      {
        return result;
      }
      v71 = *(float32x4_t *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(float32x4_t *)a3 = v71;
      v72 = *a4;
      v73 = sub_22381AF00(*a4, *a2, a2[1]);
      v74 = sub_22381AF00(v72, *a1, a1[1]);
      result.i64[0] = v73[8];
      result.i32[2] = *((_DWORD *)v73 + 18);
      v75 = a4[1];
      v76.i64[0] = *v75;
      v76.i32[2] = *((_DWORD *)v75 + 2);
      v77 = (int8x16_t)vsubq_f32(result, v76);
      v78 = (float32x2_t)vextq_s8(v77, v77, 8uLL).u64[0];
      *(float32x2_t *)result.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1), *(float32x2_t *)v77.i8, 1);
      v77.i64[0] = v74[8];
      v77.i32[2] = *((_DWORD *)v74 + 18);
      v79 = (int8x16_t)vsubq_f32((float32x4_t)v77, v76);
      *(float32x2_t *)result.f32 = vmla_f32(*(float32x2_t *)result.f32, v78, v78);
      v80 = (float32x2_t)vextq_s8(v79, v79, 8uLL).u64[0];
      v81 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1), *(float32x2_t *)v79.i8, 1), v80, v80);
      if (result.f32[0] == v81.f32[0])
        goto LABEL_45;
      v20 = result.f32[0] < v81.f32[0];
      v82 = result.f32[0] < v81.f32[0];
      LODWORD(v83) = vsub_f32(*(float32x2_t *)result.f32, v81).u32[0];
      *(float32x2_t *)result.f32 = vsub_f32(v81, *(float32x2_t *)result.f32);
      if (!v20)
        result.f32[0] = v83;
      if (result.f32[0] <= 0.000001)
      {
LABEL_45:
        v86 = v73[11];
        v87 = v74[11];
        if (v86 == v87)
        {
          if (v73[10] <= v74[10])
            return result;
        }
        else if (v86 < v87)
        {
          return result;
        }
      }
      else if (!v82)
      {
        return result;
      }
      result = *(float32x4_t *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(float32x4_t *)a2 = result;
      return result;
    }
  }
  v24 = v9[11];
  v25 = v10[11];
  if (v24 == v25)
  {
    if (v9[10] <= v10[10])
      goto LABEL_9;
  }
  else if (v24 < v25)
  {
    goto LABEL_9;
  }
LABEL_16:
  v39 = *a4;
  v40 = sub_22381AF00(*a4, *a3, a3[1]);
  v41 = sub_22381AF00(v39, *a2, a2[1]);
  v42.i64[0] = v40[8];
  v42.i32[2] = *((_DWORD *)v40 + 18);
  v43 = a4[1];
  v44.i64[0] = *v43;
  v44.i32[2] = *((_DWORD *)v43 + 2);
  v45 = (int8x16_t)vsubq_f32(v42, v44);
  v46 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
  *(float32x2_t *)v42.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1), *(float32x2_t *)v45.i8, 1);
  v45.i64[0] = v41[8];
  v45.i32[2] = *((_DWORD *)v41 + 18);
  v47 = (int8x16_t)vsubq_f32((float32x4_t)v45, v44);
  v48 = vmla_f32(*(float32x2_t *)v42.f32, v46, v46);
  v49 = (float32x2_t)vextq_s8(v47, v47, 8uLL).u64[0];
  v50 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), *(float32x2_t *)v47.i8, 1), v49, v49);
  if (v48.f32[0] != v50.f32[0])
  {
    v20 = v48.f32[0] < v50.f32[0];
    v51 = v48.f32[0] < v50.f32[0];
    v52 = vsub_f32(v48, v50).u32[0];
    LODWORD(v53) = vsub_f32(v50, v48).u32[0];
    if (!v20)
      v53 = *(float *)&v52;
    if (v53 > 0.000001)
    {
      if (v51)
        goto LABEL_41;
      goto LABEL_27;
    }
  }
  v56 = v40[11];
  v57 = v41[11];
  if (v56 == v57)
  {
    if (v40[10] <= v41[10])
      goto LABEL_27;
LABEL_41:
    result = *(float32x4_t *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_50:
    *(float32x4_t *)a3 = result;
    return result;
  }
  if (v56 >= v57)
    goto LABEL_41;
LABEL_27:
  v58 = *(float32x4_t *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(float32x4_t *)a2 = v58;
  v59 = *a4;
  v60 = sub_22381AF00(*a4, *a3, a3[1]);
  v61 = sub_22381AF00(v59, *a2, a2[1]);
  result.i64[0] = v60[8];
  result.i32[2] = *((_DWORD *)v60 + 18);
  v62 = a4[1];
  v63.i64[0] = *v62;
  v63.i32[2] = *((_DWORD *)v62 + 2);
  v64 = (int8x16_t)vsubq_f32(result, v63);
  v65 = (float32x2_t)vextq_s8(v64, v64, 8uLL).u64[0];
  *(float32x2_t *)result.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1), *(float32x2_t *)v64.i8, 1);
  v64.i64[0] = v61[8];
  v64.i32[2] = *((_DWORD *)v61 + 18);
  v66 = (int8x16_t)vsubq_f32((float32x4_t)v64, v63);
  *(float32x2_t *)result.f32 = vmla_f32(*(float32x2_t *)result.f32, v65, v65);
  v67 = (float32x2_t)vextq_s8(v66, v66, 8uLL).u64[0];
  v68 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v66.i8, *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(float32x2_t *)v66.i8, 1), v67, v67);
  if (result.f32[0] != v68.f32[0])
  {
    v20 = result.f32[0] < v68.f32[0];
    v69 = result.f32[0] < v68.f32[0];
    LODWORD(v70) = vsub_f32(*(float32x2_t *)result.f32, v68).u32[0];
    *(float32x2_t *)result.f32 = vsub_f32(v68, *(float32x2_t *)result.f32);
    if (!v20)
      result.f32[0] = v70;
    if (result.f32[0] > 0.000001)
    {
      if (!v69)
        return result;
      goto LABEL_49;
    }
  }
  v84 = v60[11];
  v85 = v61[11];
  if (v84 != v85)
  {
    if (v84 < v85)
      return result;
    goto LABEL_49;
  }
  if (v60[10] > v61[10])
  {
LABEL_49:
    result = *(float32x4_t *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    goto LABEL_50;
  }
  return result;
}

BOOL sub_22383F10C(uint64_t *a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  float32x4_t v15;
  _QWORD *v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t v19;
  int8x16_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  BOOL v24;
  _BOOL4 v25;
  unsigned __int32 v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  float32x4_t v36;
  _QWORD *v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x2_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  _BOOL4 v45;
  unsigned __int32 v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  float32x4_t v54;
  _QWORD *v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x2_t v58;
  int8x16_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  _BOOL4 v63;
  unsigned __int32 v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t *v69;

  v4 = a2;
  v5 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v50 = a2 - 2;
      v51 = *a3;
      v52 = sub_22381AF00(*a3, *(a2 - 2), *(a2 - 1));
      v53 = sub_22381AF00(v51, *a1, a1[1]);
      v54.i64[0] = v52[8];
      v54.i32[2] = *((_DWORD *)v52 + 18);
      v55 = a3[1];
      v56.i64[0] = *v55;
      v56.i32[2] = *((_DWORD *)v55 + 2);
      v57 = (int8x16_t)vsubq_f32(v54, v56);
      v58 = (float32x2_t)vextq_s8(v57, v57, 8uLL).u64[0];
      *(float32x2_t *)v54.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1), *(float32x2_t *)v57.i8, 1);
      v57.i64[0] = v53[8];
      v57.i32[2] = *((_DWORD *)v53 + 18);
      v59 = (int8x16_t)vsubq_f32((float32x4_t)v57, v56);
      v60 = vmla_f32(*(float32x2_t *)v54.f32, v58, v58);
      v61 = (float32x2_t)vextq_s8(v59, v59, 8uLL).u64[0];
      v62 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), *(float32x2_t *)v59.i8, 1), v61, v61);
      if (v60.f32[0] == v62.f32[0])
        goto LABEL_42;
      v24 = v60.f32[0] < v62.f32[0];
      v63 = v60.f32[0] < v62.f32[0];
      v64 = vsub_f32(v60, v62).u32[0];
      LODWORD(v65) = vsub_f32(v62, v60).u32[0];
      if (!v24)
        v65 = *(float *)&v64;
      if (v65 <= 0.000001)
      {
LABEL_42:
        v66 = v52[11];
        v67 = v53[11];
        if (v66 == v67)
        {
          if (v52[10] <= v53[10])
            return 1;
        }
        else if (v66 < v67)
        {
          return 1;
        }
      }
      else if (!v63)
      {
        return 1;
      }
      v68 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v50;
      *(_OWORD *)v50 = v68;
      return 1;
    case 3:
      sub_22383EC2C(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_22383F5C8(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_22383E818(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v7 = a1 + 4;
      sub_22383EC2C(a1, a1 + 2, a1 + 4, a3);
      v8 = a1 + 6;
      if (a1 + 6 == v4)
        return 1;
      v9 = 0;
      v10 = 0;
      v69 = v4;
      break;
  }
  while (2)
  {
    v12 = *a3;
    v13 = sub_22381AF00(*a3, *v8, v8[1]);
    v14 = sub_22381AF00(v12, *v7, v7[1]);
    v15.i64[0] = v13[8];
    v15.i32[2] = *((_DWORD *)v13 + 18);
    v16 = a3[1];
    v17.i64[0] = *v16;
    v17.i32[2] = *((_DWORD *)v16 + 2);
    v18 = (int8x16_t)vsubq_f32(v15, v17);
    v19 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
    *(float32x2_t *)v15.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)v18.i8, 1);
    v18.i64[0] = v14[8];
    v18.i32[2] = *((_DWORD *)v14 + 18);
    v20 = (int8x16_t)vsubq_f32((float32x4_t)v18, v17);
    v21 = vmla_f32(*(float32x2_t *)v15.f32, v19, v19);
    v22 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
    v23 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1), *(float32x2_t *)v20.i8, 1), v22, v22);
    if (v21.f32[0] == v23.f32[0])
      goto LABEL_14;
    v24 = v21.f32[0] < v23.f32[0];
    v25 = v21.f32[0] < v23.f32[0];
    v26 = vsub_f32(v21, v23).u32[0];
    LODWORD(v27) = vsub_f32(v23, v21).u32[0];
    if (!v24)
      v27 = *(float *)&v26;
    if (v27 <= 0.000001)
    {
LABEL_14:
      v28 = v13[11];
      v29 = v14[11];
      if (v28 == v29)
      {
        if (v13[10] <= v14[10])
          goto LABEL_7;
      }
      else if (v28 < v29)
      {
        goto LABEL_7;
      }
    }
    else if (!v25)
    {
      goto LABEL_7;
    }
    v30 = *v8;
    v31 = v8[1];
    *(_OWORD *)v8 = *(_OWORD *)v7;
    v11 = a1;
    if (v7 == a1)
      goto LABEL_6;
    v32 = v9;
    while (1)
    {
      v33 = *a3;
      v34 = sub_22381AF00(*a3, v30, v31);
      v35 = sub_22381AF00(v33, *(uint64_t *)((char *)a1 + v32 + 16), *(uint64_t *)((char *)a1 + v32 + 24));
      v36.i64[0] = v34[8];
      v36.i32[2] = *((_DWORD *)v34 + 18);
      v37 = a3[1];
      v38.i64[0] = *v37;
      v38.i32[2] = *((_DWORD *)v37 + 2);
      v39 = (int8x16_t)vsubq_f32(v36, v38);
      v40 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
      *(float32x2_t *)v36.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1), *(float32x2_t *)v39.i8, 1);
      v39.i64[0] = v35[8];
      v39.i32[2] = *((_DWORD *)v35 + 18);
      v41 = (int8x16_t)vsubq_f32((float32x4_t)v39, v38);
      v42 = vmla_f32(*(float32x2_t *)v36.f32, v40, v40);
      v43 = (float32x2_t)vextq_s8(v41, v41, 8uLL).u64[0];
      v44 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1), *(float32x2_t *)v41.i8, 1), v43, v43);
      if (v42.f32[0] != v44.f32[0])
      {
        v24 = v42.f32[0] < v44.f32[0];
        v45 = v42.f32[0] < v44.f32[0];
        v46 = vsub_f32(v42, v44).u32[0];
        LODWORD(v47) = vsub_f32(v44, v42).u32[0];
        if (!v24)
          v47 = *(float *)&v46;
        if (v47 > 0.000001)
        {
          if (!v45)
            goto LABEL_30;
          goto LABEL_21;
        }
      }
      v48 = v34[11];
      v49 = v35[11];
      if (v48 != v49)
        break;
      if (v34[10] <= v35[10])
      {
LABEL_30:
        v11 = v7;
        goto LABEL_5;
      }
LABEL_21:
      v7 -= 2;
      *(_OWORD *)((char *)a1 + v32 + 32) = *(_OWORD *)((char *)a1 + v32 + 16);
      v32 -= 16;
      if (v32 == -32)
      {
        v11 = a1;
        goto LABEL_5;
      }
    }
    if (v48 >= v49)
      goto LABEL_21;
    v11 = (uint64_t *)((char *)a1 + v32 + 32);
LABEL_5:
    v4 = v69;
LABEL_6:
    *v11 = v30;
    v11[1] = v31;
    if (++v10 == 8)
      return v8 + 2 == v4;
LABEL_7:
    v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 != v4)
      continue;
    return 1;
  }
}

_QWORD *sub_22383F5C8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD **a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  float32x4_t v13;
  _QWORD *v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x2_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  BOOL v22;
  _BOOL4 v23;
  unsigned __int32 v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  float32x4_t v31;
  _QWORD *v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x2_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  _BOOL4 v40;
  unsigned __int32 v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  float32x4_t v48;
  _QWORD *v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x2_t v52;
  int8x16_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  _BOOL4 v57;
  unsigned __int32 v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;

  sub_22383EC2C(a1, a2, a3, a5);
  v10 = *a5;
  v11 = sub_22381AF00(*a5, *a4, a4[1]);
  result = sub_22381AF00(v10, *a3, a3[1]);
  v13.i64[0] = v11[8];
  v13.i32[2] = *((_DWORD *)v11 + 18);
  v14 = a5[1];
  v15.i64[0] = *v14;
  v15.i32[2] = *((_DWORD *)v14 + 2);
  v16 = (int8x16_t)vsubq_f32(v13, v15);
  v17 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
  *(float32x2_t *)v13.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1), *(float32x2_t *)v16.i8, 1);
  v16.i64[0] = result[8];
  v16.i32[2] = *((_DWORD *)result + 18);
  v18 = (int8x16_t)vsubq_f32((float32x4_t)v16, v15);
  v19 = vmla_f32(*(float32x2_t *)v13.f32, v17, v17);
  v20 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
  v21 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)v18.i8, 1), v20, v20);
  if (v19.f32[0] == v21.f32[0])
    goto LABEL_7;
  v22 = v19.f32[0] < v21.f32[0];
  v23 = v19.f32[0] < v21.f32[0];
  v24 = vsub_f32(v19, v21).u32[0];
  LODWORD(v25) = vsub_f32(v21, v19).u32[0];
  if (!v22)
    v25 = *(float *)&v24;
  if (v25 <= 0.000001)
  {
LABEL_7:
    v26 = v11[11];
    v27 = result[11];
    if (v26 == v27)
    {
      if (v11[10] <= result[10])
        return result;
    }
    else if (v26 < v27)
    {
      return result;
    }
  }
  else if (!v23)
  {
    return result;
  }
  v28 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v28;
  v29 = *a5;
  v30 = sub_22381AF00(*a5, *a3, a3[1]);
  result = sub_22381AF00(v29, *a2, a2[1]);
  v31.i64[0] = v30[8];
  v31.i32[2] = *((_DWORD *)v30 + 18);
  v32 = a5[1];
  v33.i64[0] = *v32;
  v33.i32[2] = *((_DWORD *)v32 + 2);
  v34 = (int8x16_t)vsubq_f32(v31, v33);
  v35 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
  *(float32x2_t *)v31.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), *(float32x2_t *)v34.i8, 1);
  v34.i64[0] = result[8];
  v34.i32[2] = *((_DWORD *)result + 18);
  v36 = (int8x16_t)vsubq_f32((float32x4_t)v34, v33);
  v37 = vmla_f32(*(float32x2_t *)v31.f32, v35, v35);
  v38 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
  v39 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v36.i8, 1), v38, v38);
  if (v37.f32[0] == v39.f32[0])
    goto LABEL_17;
  v22 = v37.f32[0] < v39.f32[0];
  v40 = v37.f32[0] < v39.f32[0];
  v41 = vsub_f32(v37, v39).u32[0];
  LODWORD(v42) = vsub_f32(v39, v37).u32[0];
  if (!v22)
    v42 = *(float *)&v41;
  if (v42 <= 0.000001)
  {
LABEL_17:
    v43 = v30[11];
    v44 = result[11];
    if (v43 == v44)
    {
      if (v30[10] <= result[10])
        return result;
    }
    else if (v43 < v44)
    {
      return result;
    }
  }
  else if (!v40)
  {
    return result;
  }
  v45 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v45;
  v46 = *a5;
  v47 = sub_22381AF00(*a5, *a2, a2[1]);
  result = sub_22381AF00(v46, *a1, a1[1]);
  v48.i64[0] = v47[8];
  v48.i32[2] = *((_DWORD *)v47 + 18);
  v49 = a5[1];
  v50.i64[0] = *v49;
  v50.i32[2] = *((_DWORD *)v49 + 2);
  v51 = (int8x16_t)vsubq_f32(v48, v50);
  v52 = (float32x2_t)vextq_s8(v51, v51, 8uLL).u64[0];
  *(float32x2_t *)v48.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), *(float32x2_t *)v51.i8, 1);
  v51.i64[0] = result[8];
  v51.i32[2] = *((_DWORD *)result + 18);
  v53 = (int8x16_t)vsubq_f32((float32x4_t)v51, v50);
  v54 = vmla_f32(*(float32x2_t *)v48.f32, v52, v52);
  v55 = (float32x2_t)vextq_s8(v53, v53, 8uLL).u64[0];
  v56 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), *(float32x2_t *)v53.i8, 1), v55, v55);
  if (v54.f32[0] != v56.f32[0])
  {
    v22 = v54.f32[0] < v56.f32[0];
    v57 = v54.f32[0] < v56.f32[0];
    v58 = vsub_f32(v54, v56).u32[0];
    LODWORD(v59) = vsub_f32(v56, v54).u32[0];
    if (!v22)
      v59 = *(float *)&v58;
    if (v59 > 0.000001)
    {
      if (!v57)
        return result;
      goto LABEL_31;
    }
  }
  v60 = v47[11];
  v61 = result[11];
  if (v60 != v61)
  {
    if (v60 < v61)
      return result;
    goto LABEL_31;
  }
  if (v47[10] > result[10])
  {
LABEL_31:
    v62 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v62;
  }
  return result;
}

_QWORD *sub_22383F8F4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *sub_22383F9A4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a1 + 1;
  v5 = (_QWORD *)a2[4];
  if (v5)
  {
    if (v5 == a2 + 1)
    {
      a1[4] = v4;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[4] + 24))(a2[4], v4);
      v6 = a1 + 5;
      v7 = a2[8];
      if (!v7)
      {
LABEL_10:
        a1[8] = v7;
        goto LABEL_12;
      }
    }
    else
    {
      a1[4] = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      v6 = a1 + 5;
      v7 = a2[8];
      if (!v7)
        goto LABEL_10;
    }
  }
  else
  {
    a1[4] = 0;
    v6 = a1 + 5;
    v7 = a2[8];
    if (!v7)
      goto LABEL_10;
  }
  if ((_QWORD *)v7 != a2 + 5)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    goto LABEL_10;
  }
  a1[8] = v6;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[8] + 24))(a2[8], v6);
LABEL_12:
  a1[9] = a2[9];
  v8 = a2[13];
  if (!v8)
  {
LABEL_15:
    a1[13] = v8;
    return a1;
  }
  if ((_QWORD *)v8 != a2 + 10)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    goto LABEL_15;
  }
  a1[13] = a1 + 10;
  (*(void (**)(_QWORD))(*(_QWORD *)a2[13] + 24))(a2[13]);
  return a1;
}

void sub_22383FAD8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 64);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22383FB4C(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_22383F9A4(&v12, a2);
  v3 = v14;
  *a1 = v12;
  if (v3)
  {
    if (v3 == v13)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_BYTE *))(*(_QWORD *)v3 + 24))(v3);
    }
    else
    {
      a1[4] = v3;
      v14 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v4 = v16;
  if (v16)
  {
    if (v16 == v15)
    {
      a1[8] = a1 + 5;
      (*(void (**)(_BYTE *))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      a1[8] = v16;
      v16 = 0;
    }
  }
  else
  {
    a1[8] = 0;
  }
  v5 = v19;
  a1[9] = v17;
  if (v5)
  {
    if (v5 == v18)
    {
      a1[13] = a1 + 10;
      (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 24))(v5);
    }
    else
    {
      a1[13] = v5;
      v19 = 0;
    }
  }
  else
  {
    a1[13] = 0;
  }
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_21;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_21:
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_26;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_26:
  result = v14;
  if (v14 == v13)
  {
    v11 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_22383FD24(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t **sub_22383FD44(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  *a1 = *a2;
  v5 = (uint64_t *)(a1 + 1);
  v6 = (uint64_t **)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      a1[4] = v5;
      (*(void (**)(uint64_t *, uint64_t *))(*a2[4] + 24))(a2[4], v5);
    }
    else
    {
      a1[4] = (uint64_t *)((uint64_t (*)(uint64_t **))(*v6)[2])(v6);
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = (uint64_t *)&off_24EC5AFD8;
  a1[8] = (uint64_t *)(a1 + 5);
  a1[9] = *a3;
  v7 = (uint64_t)a3[4];
  if (v7)
  {
    if ((uint64_t **)v7 == a3 + 1)
    {
      a1[13] = (uint64_t *)(a1 + 10);
      (*(void (**)(uint64_t *, uint64_t **))(*a3[4] + 24))(a3[4], a1 + 10);
      v8 = *a1;
      if (*a1 == a1[9])
        return a1;
      goto LABEL_12;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  a1[13] = (uint64_t *)v7;
  v8 = *a1;
  if (*a1 == a1[9])
    return a1;
  do
  {
LABEL_12:
    v9 = a1[4];
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v9 + 48))(v9, v8 + 2);
      v11 = a1[8];
      if (v11)
        goto LABEL_14;
    }
    sub_223198474();
LABEL_14:
    if (((*(uint64_t (**)(uint64_t *, uint64_t))(*v11 + 48))(v11, v10) & 1) != 0)
      break;
    v8 = (uint64_t *)**a1;
    *a1 = v8;
  }
  while (v8 != a1[9]);
  return a1;
}

void sub_22383FEA0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 64);
  if (v5 == v3)
  {
    v6 = 4;
    v5 = v3;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_22383FF48()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22383FF5C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5AFD8;
  return result;
}

void sub_22383FF80(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5AFD8;
}

BOOL sub_22383FF98(uint64_t a1, uint64_t a2)
{
  return *(uint64_t *)(a2 + 96) > 0 && *(_BYTE *)(a2 + 112) != 0;
}

uint64_t sub_22383FFB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf16KeyframeDatabase29FindCandidateKeyframesToPruneERKNS1_35KeyframePersistentDataPru"
                     "neStrategyEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf16KeyframeDatabase29FindCandidateKeyframesToPruneERKNS1_35KeyframePersis"
                                "tentDataPruneStrategyEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf16KeyframeDatabase29FindCandidateKeyframesToPruneERKNS1_35KeyframePersistentDataPruneStrategyEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf16KeyframeDatabase29FindCandidateKeyframesToPruneERKNS1_35KeyframePersistentDataPruneStrategyEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22384001C()
{
  return &unk_24EC5B048;
}

_QWORD *sub_223840028(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v24 = *(_QWORD *)(a2 + 16);
  v25[0] = &off_24EC5B068;
  v25[1] = a3;
  v26 = v25;
  v21 = 0;
  v22[0] = &off_24EC5B068;
  v22[1] = a3;
  v23 = v22;
  sub_223840230(&v24, &v21, &v15);
  v4 = v23;
  if (v23 == v22)
  {
    v5 = 4;
    v4 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v26;
  if (v26 == v25)
  {
    v7 = 4;
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v17;
  *a1 = v15;
  if (v8)
  {
    if (v8 == v16)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
    }
    else
    {
      a1[4] = v8;
      v17 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v9 = v20;
  a1[5] = v18;
  if (v9)
  {
    if (v9 == v19)
    {
      a1[9] = a1 + 6;
      (*(void (**)(_BYTE *))(*(_QWORD *)v9 + 24))(v9);
    }
    else
    {
      a1[9] = v9;
      v20 = 0;
    }
  }
  else
  {
    a1[9] = 0;
  }
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_26:
  v12 = v17;
  if (v17 == v16)
  {
    v13 = 4;
    v12 = v16;
    goto LABEL_30;
  }
  if (v17)
  {
    v13 = 5;
LABEL_30:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return a1;
}

void sub_223840220(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_223840230@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = *a1;
  v6 = v20;
  v8 = a1 + 4;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (v7 == a1 + 1)
    {
      v21 = v20;
      (*(void (**)(uint64_t *, _QWORD *))(*v7 + 24))(v7, v20);
    }
    else
    {
      v21 = v7;
      *v8 = 0;
    }
  }
  else
  {
    v21 = 0;
  }
  v16 = *a2;
  v9 = v17;
  result = a2[4];
  if (result)
  {
    if ((uint64_t *)result == a2 + 1)
    {
      v18 = v17;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v17);
    }
    else
    {
      v18 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v11 = v21;
  *a3 = v19;
  v12 = a3 + 1;
  if (v11)
  {
    if (v11 == v20)
    {
      a3[4] = v12;
      result = (*(uint64_t (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      a3[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    a3[4] = 0;
  }
  v13 = v18;
  a3[5] = v16;
  if (v13)
  {
    if (v13 == v17)
    {
      a3[9] = a3 + 6;
      result = (*(uint64_t (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      a3[9] = v13;
      v18 = 0;
    }
  }
  else
  {
    a3[9] = 0;
  }
  if (v18 == v17)
  {
    v14 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_26;
    v14 = 5;
    v9 = v18;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v9 + 8 * v14))(v9, v12);
LABEL_26:
  if (v21 == v20)
  {
    v15 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v15 = 5;
    v6 = v21;
  }
  return (*(uint64_t (**)(uint64_t *, _QWORD *))(*v6 + 8 * v15))(v6, v12);
}

void sub_223840430(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223840454()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223840468(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B068;
  result[1] = v3;
  return result;
}

uint64_t sub_22384049C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B068;
  a2[1] = v2;
  return result;
}

_QWORD *sub_2238404B8(uint64_t a1, uint64_t *a2)
{
  return sub_223822434(*(_QWORD **)(a1 + 8), *a2, a2[1]);
}

uint64_t sub_2238404C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf16KeyframeDatabase6GetAllEvEUlRT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf16KeyframeDatabase6GetAllEvEUlRT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf16KeyframeDatabase6GetAllEvEUlRT_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf16KeyframeDatabase6GetAllEvEUlRT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223840534()
{
  return &unk_24EC5B0D8;
}

void sub_223840540(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _QWORD *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  __int128 *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  __int128 *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _OWORD *v113;
  uint64_t v114;
  _OWORD *v115;
  int64_t v116;
  int64_t v117;
  unint64_t v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  __int128 *v136;
  _OWORD *v137;
  _OWORD *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _OWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _OWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _OWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 *v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _OWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  __int128 *v195;
  __int128 *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  BOOL v213;
  _OWORD *v214;
  _OWORD *v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  BOOL v226;
  _OWORD *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  BOOL v251;
  _QWORD *v252;
  __int128 *v253;
  __int128 *v254;
  uint64_t v255;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;

__n128 sub_2238416AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  result.n128_u64[0] = sub_223842110(a1, a2, a3, a4).n128_u64[0];
  v11 = (_QWORD *)(a5 + 80);
  v12 = *(_QWORD *)(a5 + 120);
  v13 = (_QWORD *)(a4 + 80);
  v14 = *(_QWORD *)(a4 + 120);
  v15 = v12 + *(_QWORD *)(a5 + 88);
  v16 = v14 + *(_QWORD *)(a4 + 88);
  v17 = v15 < v16;
  if (v15 == v16)
    v17 = *v11 + v12 < *v13 + v14;
  if (v17)
  {
    v18 = (_OWORD *)(a4 + 16);
    v59 = *(_OWORD *)a4;
    v63 = *(_OWORD *)(a4 + 16);
    v67 = *(_OWORD *)(a4 + 32);
    v71 = *(_OWORD *)(a4 + 48);
    v75 = *(_OWORD *)(a4 + 64);
    v79 = *(_OWORD *)v13;
    v83 = *(__n128 *)(a4 + 96);
    v87 = *(_OWORD *)(a4 + 112);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v20 = *(_OWORD *)(a5 + 48);
    v19 = *(_OWORD *)(a5 + 64);
    v21 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(a4 + 32) = v21;
    *(_OWORD *)(a4 + 48) = v20;
    *(_OWORD *)(a4 + 64) = v19;
    v22 = *(_OWORD *)(a5 + 112);
    v23 = *(_OWORD *)v11;
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(a4 + 112) = v22;
    *(_OWORD *)v13 = v23;
    *(_OWORD *)a5 = v59;
    *(_OWORD *)(a5 + 48) = v71;
    *(_OWORD *)(a5 + 64) = v75;
    *(_OWORD *)(a5 + 16) = v63;
    *(_OWORD *)(a5 + 32) = v67;
    result = v83;
    *(__n128 *)(a5 + 96) = v83;
    *(_OWORD *)(a5 + 112) = v87;
    *(_OWORD *)v11 = v79;
    v24 = *(_QWORD *)(a4 + 120);
    v25 = (_QWORD *)(a3 + 80);
    v26 = v24 + *(_QWORD *)(a4 + 88);
    v27 = *(_QWORD *)(a3 + 120);
    v28 = v27 + *(_QWORD *)(a3 + 88);
    v29 = v26 < v28;
    if (v26 == v28)
      v29 = *v13 + v24 < *v25 + v27;
    if (v29)
    {
      v30 = (_OWORD *)(a3 + 16);
      v60 = *(_OWORD *)a3;
      v64 = *(_OWORD *)(a3 + 16);
      v68 = *(_OWORD *)(a3 + 32);
      v72 = *(_OWORD *)(a3 + 48);
      v76 = *(_OWORD *)(a3 + 64);
      v80 = *(_OWORD *)v25;
      v84 = *(__n128 *)(a3 + 96);
      v88 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v32 = *(_OWORD *)(a4 + 48);
      v31 = *(_OWORD *)(a4 + 64);
      v33 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *v18;
      *(_OWORD *)(a3 + 32) = v33;
      *(_OWORD *)(a3 + 48) = v32;
      *(_OWORD *)(a3 + 64) = v31;
      v34 = *(_OWORD *)(a4 + 112);
      v35 = *(_OWORD *)v13;
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a4 + 96);
      *(_OWORD *)(a3 + 112) = v34;
      *(_OWORD *)v25 = v35;
      *(_OWORD *)a4 = v60;
      *(_OWORD *)(a4 + 48) = v72;
      *(_OWORD *)(a4 + 64) = v76;
      *v18 = v64;
      *(_OWORD *)(a4 + 32) = v68;
      result = v84;
      *(__n128 *)(a4 + 96) = v84;
      *(_OWORD *)(a4 + 112) = v88;
      *(_OWORD *)v13 = v80;
      v36 = *(_QWORD *)(a3 + 120);
      v37 = (_QWORD *)(a2 + 80);
      v38 = v36 + *(_QWORD *)(a3 + 88);
      v39 = *(_QWORD *)(a2 + 120);
      v40 = v39 + *(_QWORD *)(a2 + 88);
      v41 = v38 < v40;
      if (v38 == v40)
        v41 = *v25 + v36 < *v37 + v39;
      if (v41)
      {
        v42 = (_OWORD *)(a2 + 16);
        v61 = *(_OWORD *)a2;
        v65 = *(_OWORD *)(a2 + 16);
        v69 = *(_OWORD *)(a2 + 32);
        v73 = *(_OWORD *)(a2 + 48);
        v77 = *(_OWORD *)(a2 + 64);
        v81 = *(_OWORD *)v37;
        v85 = *(__n128 *)(a2 + 96);
        v89 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v44 = *(_OWORD *)(a3 + 48);
        v43 = *(_OWORD *)(a3 + 64);
        v45 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *v30;
        *(_OWORD *)(a2 + 32) = v45;
        *(_OWORD *)(a2 + 48) = v44;
        *(_OWORD *)(a2 + 64) = v43;
        v46 = *(_OWORD *)(a3 + 112);
        v47 = *(_OWORD *)v25;
        *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
        *(_OWORD *)(a2 + 112) = v46;
        *(_OWORD *)v37 = v47;
        *(_OWORD *)a3 = v61;
        *(_OWORD *)(a3 + 48) = v73;
        *(_OWORD *)(a3 + 64) = v77;
        *v30 = v65;
        *(_OWORD *)(a3 + 32) = v69;
        result = v85;
        *(__n128 *)(a3 + 96) = v85;
        *(_OWORD *)(a3 + 112) = v89;
        *(_OWORD *)v25 = v81;
        v48 = *(_QWORD *)(a2 + 120);
        v49 = (_QWORD *)(a1 + 80);
        v50 = v48 + *(_QWORD *)(a2 + 88);
        v51 = *(_QWORD *)(a1 + 120);
        v52 = v51 + *(_QWORD *)(a1 + 88);
        v53 = v50 < v52;
        if (v50 == v52)
          v53 = *v37 + v48 < *v49 + v51;
        if (v53)
        {
          v62 = *(_OWORD *)a1;
          v66 = *(_OWORD *)(a1 + 16);
          v70 = *(_OWORD *)(a1 + 32);
          v74 = *(_OWORD *)(a1 + 48);
          v78 = *(_OWORD *)(a1 + 64);
          v82 = *(_OWORD *)v49;
          v86 = *(__n128 *)(a1 + 96);
          v90 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v55 = *(_OWORD *)(a2 + 48);
          v54 = *(_OWORD *)(a2 + 64);
          v56 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *v42;
          *(_OWORD *)(a1 + 32) = v56;
          *(_OWORD *)(a1 + 48) = v55;
          *(_OWORD *)(a1 + 64) = v54;
          v57 = *(_OWORD *)(a2 + 112);
          v58 = *(_OWORD *)v37;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v57;
          *(_OWORD *)v49 = v58;
          *(_OWORD *)a2 = v62;
          *(_OWORD *)(a2 + 48) = v74;
          *(_OWORD *)(a2 + 64) = v78;
          *v42 = v66;
          *(_OWORD *)(a2 + 32) = v70;
          result = v86;
          *(__n128 *)(a2 + 96) = v86;
          *(_OWORD *)(a2 + 112) = v90;
          *(_OWORD *)v37 = v82;
        }
      }
    }
  }
  return result;
}

__n128 sub_2238419E8(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v3 = a2 + 5;
  v4 = *((_QWORD *)a2 + 10);
  v5 = a2 + 1;
  v6 = *((_QWORD *)a2 + 15);
  v7 = a1 + 1;
  v8 = a1 + 5;
  v9 = *((_QWORD *)a1 + 15);
  v10 = v6 + *((_QWORD *)a2 + 11);
  v11 = v9 + *((_QWORD *)a1 + 11);
  v12 = v10 < v11;
  if (v10 == v11)
    v12 = v6 + v4 < *v8 + v9;
  if (!v12)
  {
    v23 = a3 + 5;
    v24 = *((_QWORD *)a3 + 15);
    v25 = v24 + *((_QWORD *)a3 + 11);
    v26 = v25 < v10;
    if (v25 == v10)
      v26 = *v23 + v24 < v6 + v4;
    if (v26)
    {
      v59 = *a2;
      v63 = *v5;
      v67 = a2[2];
      v71 = a2[3];
      v75 = a2[4];
      v79 = *v3;
      v83 = (__n128)a2[6];
      v87 = a2[7];
      *a2 = *a3;
      v28 = a3[3];
      v27 = a3[4];
      v29 = a3[2];
      *v5 = a3[1];
      a2[2] = v29;
      a2[3] = v28;
      a2[4] = v27;
      v30 = a3[7];
      v31 = *(_OWORD *)v23;
      a2[6] = a3[6];
      a2[7] = v30;
      *v3 = v31;
      *a3 = v59;
      a3[3] = v71;
      a3[4] = v75;
      a3[1] = v63;
      a3[2] = v67;
      result = v83;
      a3[6] = (__int128)v83;
      a3[7] = v87;
      *(_OWORD *)v23 = v79;
      v33 = *((_QWORD *)a2 + 15);
      v34 = v33 + *((_QWORD *)a2 + 11);
      v35 = *((_QWORD *)a1 + 15);
      v36 = v35 + *((_QWORD *)a1 + 11);
      v37 = v34 < v36;
      if (v34 == v36)
        v37 = *(_QWORD *)v3 + v33 < *v8 + v35;
      if (v37)
      {
        v60 = *a1;
        v64 = *v7;
        v68 = a1[2];
        v72 = a1[3];
        v76 = a1[4];
        v80 = *(_OWORD *)v8;
        v84 = (__n128)a1[6];
        v88 = a1[7];
        *a1 = *a2;
        v39 = a2[3];
        v38 = a2[4];
        v40 = a2[2];
        *v7 = *v5;
        a1[2] = v40;
        a1[3] = v39;
        a1[4] = v38;
        v41 = a2[7];
        v42 = *v3;
        a1[6] = a2[6];
        a1[7] = v41;
        *(_OWORD *)v8 = v42;
        *a2 = v60;
        a2[3] = v72;
        a2[4] = v76;
        *v5 = v64;
        a2[2] = v68;
        result = v84;
        a2[6] = (__int128)v84;
        a2[7] = v88;
        *v3 = v80;
      }
    }
    return result;
  }
  v13 = a3 + 1;
  v14 = a3 + 5;
  v15 = *((_QWORD *)a3 + 15);
  v16 = v15 + *((_QWORD *)a3 + 11);
  v17 = v16 < v10;
  if (v16 == v10)
    v17 = *v14 + v15 < v6 + v4;
  if (v17)
  {
    v58 = *a1;
    v62 = *v7;
    v66 = a1[2];
    v70 = a1[3];
    v74 = a1[4];
    v78 = *(_OWORD *)v8;
    v82 = (__n128)a1[6];
    v86 = a1[7];
    *a1 = *a3;
    v19 = a3[3];
    v18 = a3[4];
    v20 = a3[2];
    *v7 = *v13;
    a1[2] = v20;
    a1[3] = v19;
    a1[4] = v18;
    v21 = a3[7];
    v22 = *(_OWORD *)v14;
    a1[6] = a3[6];
    a1[7] = v21;
    *(_OWORD *)v8 = v22;
LABEL_24:
    *a3 = v58;
    a3[3] = v70;
    a3[4] = v74;
    *v13 = v62;
    a3[2] = v66;
    result = v82;
    a3[6] = (__int128)v82;
    a3[7] = v86;
    *(_OWORD *)v14 = v78;
    return result;
  }
  v61 = *a1;
  v65 = *v7;
  v69 = a1[2];
  v73 = a1[3];
  v77 = a1[4];
  v81 = *(_OWORD *)v8;
  v85 = (__n128)a1[6];
  v89 = a1[7];
  *a1 = *a2;
  v44 = a2[3];
  v43 = a2[4];
  v45 = a2[2];
  *v7 = *v5;
  a1[2] = v45;
  a1[3] = v44;
  a1[4] = v43;
  v46 = a2[7];
  v47 = *v3;
  a1[6] = a2[6];
  a1[7] = v46;
  *(_OWORD *)v8 = v47;
  *a2 = v61;
  a2[3] = v73;
  a2[4] = v77;
  *v5 = v65;
  a2[2] = v69;
  result = v85;
  a2[6] = (__int128)v85;
  a2[7] = v89;
  *v3 = v81;
  v48 = *((_QWORD *)a3 + 15);
  v49 = v48 + *((_QWORD *)a3 + 11);
  v50 = *((_QWORD *)a2 + 15);
  v51 = v50 + *((_QWORD *)a2 + 11);
  v52 = v49 < v51;
  if (v49 == v51)
    v52 = *v14 + v48 < *(_QWORD *)v3 + v50;
  if (v52)
  {
    v58 = *a2;
    v62 = *v5;
    v66 = a2[2];
    v70 = a2[3];
    v74 = a2[4];
    v78 = *v3;
    v82 = (__n128)a2[6];
    v86 = a2[7];
    *a2 = *a3;
    v54 = a3[3];
    v53 = a3[4];
    v55 = a3[2];
    *v5 = *v13;
    a2[2] = v55;
    a2[3] = v54;
    a2[4] = v53;
    v56 = a3[7];
    v57 = *(_OWORD *)v14;
    a2[6] = a3[6];
    a2[7] = v56;
    *v3 = v57;
    goto LABEL_24;
  }
  return result;
}

BOOL sub_223841D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v4 = (a2 - a1) >> 7;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_QWORD *)(a2 - 48);
      v7 = *(_QWORD *)(a2 - 8);
      v8 = (_QWORD *)(a1 + 80);
      v9 = *(_QWORD *)(a1 + 120);
      v10 = v7 + *(_QWORD *)(a2 - 40);
      v11 = v9 + *(_QWORD *)(a1 + 88);
      v12 = v10 < v11;
      if (v10 == v11)
        v12 = *v6 + v7 < *v8 + v9;
      if (v12)
      {
        v13 = (_OWORD *)(a2 - 112);
        v46 = *(_OWORD *)a1;
        v48 = *(_OWORD *)(a1 + 16);
        v50 = *(_OWORD *)(a1 + 32);
        v52 = *(_OWORD *)(a1 + 48);
        v54 = *(_OWORD *)(a1 + 64);
        v56 = *(_OWORD *)v8;
        v57 = *(_OWORD *)(a1 + 96);
        v58 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 128);
        v15 = *(_OWORD *)(a2 - 80);
        v14 = *(_OWORD *)(a2 - 64);
        v16 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 112);
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a1 + 48) = v15;
        *(_OWORD *)(a1 + 64) = v14;
        v17 = *(_OWORD *)(a2 - 16);
        v18 = *(_OWORD *)v6;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v17;
        *(_OWORD *)v8 = v18;
        *(_OWORD *)(a2 - 128) = v46;
        v13[2] = v52;
        v13[3] = v54;
        *v13 = v48;
        v13[1] = v50;
        *(_OWORD *)(a2 - 32) = v57;
        *(_OWORD *)(a2 - 16) = v58;
        *(_OWORD *)v6 = v56;
      }
      return result;
    case 3:
      sub_2238419E8((__int128 *)a1, (__int128 *)(a1 + 128), (__int128 *)(a2 - 128));
      return 1;
    case 4:
      sub_223842110(a1, a1 + 128, a1 + 256, a2 - 128);
      return 1;
    case 5:
      sub_2238416AC(a1, a1 + 128, a1 + 256, a1 + 384, a2 - 128);
      return 1;
    default:
      v19 = a1 + 256;
      sub_2238419E8((__int128 *)a1, (__int128 *)(a1 + 128), (__int128 *)(a1 + 256));
      v20 = a1 + 384;
      if (a1 + 384 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (2)
  {
    v24 = *(_QWORD *)(v20 + 80);
    v25 = *(_QWORD *)(v20 + 88);
    v26 = *(_QWORD *)(v20 + 120);
    v27 = *(_QWORD *)(v19 + 120);
    v28 = v26 + v25;
    v29 = v27 + *(_QWORD *)(v19 + 88);
    v30 = v26 + v25 < v29;
    if (v26 + v25 == v29)
      v30 = v26 + v24 < *(_QWORD *)(v19 + 80) + v27;
    if (!v30)
      goto LABEL_12;
    v47 = *(_OWORD *)v20;
    v53 = *(_OWORD *)(v20 + 48);
    v55 = *(_OWORD *)(v20 + 64);
    v49 = *(_OWORD *)(v20 + 16);
    v51 = *(_OWORD *)(v20 + 32);
    v44 = *(_OWORD *)(v20 + 96);
    v45 = *(_QWORD *)(v20 + 112);
    *(_OWORD *)v20 = *(_OWORD *)v19;
    v31 = (_OWORD *)(v19 + 16);
    v32 = *(_OWORD *)(v19 + 32);
    *(_OWORD *)(v20 + 16) = *(_OWORD *)(v19 + 16);
    *(_OWORD *)(v20 + 32) = v32;
    v33 = *(_OWORD *)(v19 + 64);
    *(_OWORD *)(v20 + 48) = *(_OWORD *)(v19 + 48);
    *(_OWORD *)(v20 + 64) = v33;
    v23 = (_QWORD *)(v19 + 80);
    v34 = *(_OWORD *)(v19 + 96);
    *(_OWORD *)(v20 + 80) = *(_OWORD *)(v19 + 80);
    *(_OWORD *)(v20 + 96) = v34;
    *(_OWORD *)(v20 + 112) = *(_OWORD *)(v19 + 112);
    if (v19 == a1)
    {
LABEL_10:
      v19 = a1;
      goto LABEL_11;
    }
    v35 = v21;
    while (1)
    {
      v41 = a1 + v35;
      v42 = *(_QWORD *)(a1 + v35 + 248);
      v43 = v42 + *(_QWORD *)(a1 + v35 + 216);
      if (v28 != v43)
      {
        if (v28 >= v43)
          goto LABEL_11;
        goto LABEL_20;
      }
      if (v26 + v24 >= *(_QWORD *)(v41 + 208) + v42)
        break;
LABEL_20:
      *(_OWORD *)(v41 + 256) = *(_OWORD *)(v41 + 128);
      v31 = (_OWORD *)(v19 - 112);
      v23 = (_QWORD *)(v19 - 48);
      v19 -= 128;
      v36 = (_OWORD *)(a1 + v35);
      v37 = *(_OWORD *)(a1 + v35 + 160);
      v36[17] = *(_OWORD *)(a1 + v35 + 144);
      v36[18] = v37;
      v38 = *(_OWORD *)(a1 + v35 + 192);
      v36[19] = *(_OWORD *)(a1 + v35 + 176);
      v36[20] = v38;
      v39 = *(_OWORD *)(a1 + v35 + 224);
      v36[21] = *(_OWORD *)(a1 + v35 + 208);
      v36[22] = v39;
      v40 = *(_OWORD *)(a1 + v35 + 240);
      v35 -= 128;
      v36[23] = v40;
      if (v35 == -256)
      {
        v23 = (_QWORD *)(a1 + 80);
        goto LABEL_10;
      }
    }
    v23 = (_QWORD *)(a1 + v35 + 336);
    v31 = (_OWORD *)(a1 + v35 + 272);
    v19 = a1 + v35 + 256;
LABEL_11:
    *(_OWORD *)v19 = v47;
    v31[2] = v53;
    v31[3] = v55;
    *v31 = v49;
    v31[1] = v51;
    *v23 = v24;
    *(_QWORD *)(v19 + 88) = v25;
    *(_OWORD *)(v19 + 96) = v44;
    *(_QWORD *)(v19 + 112) = v45;
    *(_QWORD *)(v19 + 120) = v26;
    if (++v22 == 8)
      return v20 + 128 == a2;
LABEL_12:
    v19 = v20;
    v21 += 128;
    v20 += 128;
    if (v20 != a2)
      continue;
    return 1;
  }
}

__n128 sub_223842110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  result.n128_u64[0] = sub_2238419E8((__int128 *)a1, (__int128 *)a2, (__int128 *)a3).n128_u64[0];
  v9 = (_QWORD *)(a4 + 80);
  v10 = *(_QWORD *)(a4 + 120);
  v11 = (_QWORD *)(a3 + 80);
  v12 = *(_QWORD *)(a3 + 120);
  v13 = v10 + *(_QWORD *)(a4 + 88);
  v14 = v12 + *(_QWORD *)(a3 + 88);
  v15 = v13 < v14;
  if (v13 == v14)
    v15 = *v9 + v10 < *v11 + v12;
  if (v15)
  {
    v16 = (_OWORD *)(a3 + 16);
    v45 = *(_OWORD *)a3;
    v48 = *(_OWORD *)(a3 + 16);
    v51 = *(_OWORD *)(a3 + 32);
    v54 = *(_OWORD *)(a3 + 48);
    v57 = *(_OWORD *)(a3 + 64);
    v60 = *(_OWORD *)v11;
    v63 = *(__n128 *)(a3 + 96);
    v66 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v18 = *(_OWORD *)(a4 + 48);
    v17 = *(_OWORD *)(a4 + 64);
    v19 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v18;
    *(_OWORD *)(a3 + 64) = v17;
    v20 = *(_OWORD *)(a4 + 112);
    v21 = *(_OWORD *)v9;
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a3 + 112) = v20;
    *(_OWORD *)v11 = v21;
    *(_OWORD *)a4 = v45;
    *(_OWORD *)(a4 + 48) = v54;
    *(_OWORD *)(a4 + 64) = v57;
    *(_OWORD *)(a4 + 16) = v48;
    *(_OWORD *)(a4 + 32) = v51;
    result = v63;
    *(__n128 *)(a4 + 96) = v63;
    *(_OWORD *)(a4 + 112) = v66;
    *(_OWORD *)v9 = v60;
    v22 = *(_QWORD *)(a3 + 120);
    v23 = (_QWORD *)(a2 + 80);
    v24 = v22 + *(_QWORD *)(a3 + 88);
    v25 = *(_QWORD *)(a2 + 120);
    v26 = v25 + *(_QWORD *)(a2 + 88);
    v27 = v24 < v26;
    if (v24 == v26)
      v27 = *v11 + v22 < *v23 + v25;
    if (v27)
    {
      v28 = (_OWORD *)(a2 + 16);
      v46 = *(_OWORD *)a2;
      v49 = *(_OWORD *)(a2 + 16);
      v52 = *(_OWORD *)(a2 + 32);
      v55 = *(_OWORD *)(a2 + 48);
      v58 = *(_OWORD *)(a2 + 64);
      v61 = *(_OWORD *)v23;
      v64 = *(__n128 *)(a2 + 96);
      v67 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v30 = *(_OWORD *)(a3 + 48);
      v29 = *(_OWORD *)(a3 + 64);
      v31 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = *v16;
      *(_OWORD *)(a2 + 32) = v31;
      *(_OWORD *)(a2 + 48) = v30;
      *(_OWORD *)(a2 + 64) = v29;
      v32 = *(_OWORD *)(a3 + 112);
      v33 = *(_OWORD *)v11;
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = v32;
      *(_OWORD *)v23 = v33;
      *(_OWORD *)a3 = v46;
      *(_OWORD *)(a3 + 48) = v55;
      *(_OWORD *)(a3 + 64) = v58;
      *v16 = v49;
      *(_OWORD *)(a3 + 32) = v52;
      result = v64;
      *(__n128 *)(a3 + 96) = v64;
      *(_OWORD *)(a3 + 112) = v67;
      *(_OWORD *)v11 = v61;
      v34 = *(_QWORD *)(a2 + 120);
      v35 = (_QWORD *)(a1 + 80);
      v36 = v34 + *(_QWORD *)(a2 + 88);
      v37 = *(_QWORD *)(a1 + 120);
      v38 = v37 + *(_QWORD *)(a1 + 88);
      v39 = v36 < v38;
      if (v36 == v38)
        v39 = *v23 + v34 < *v35 + v37;
      if (v39)
      {
        v47 = *(_OWORD *)a1;
        v50 = *(_OWORD *)(a1 + 16);
        v53 = *(_OWORD *)(a1 + 32);
        v56 = *(_OWORD *)(a1 + 48);
        v59 = *(_OWORD *)(a1 + 64);
        v62 = *(_OWORD *)v35;
        v65 = *(__n128 *)(a1 + 96);
        v68 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v41 = *(_OWORD *)(a2 + 48);
        v40 = *(_OWORD *)(a2 + 64);
        v42 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *v28;
        *(_OWORD *)(a1 + 32) = v42;
        *(_OWORD *)(a1 + 48) = v41;
        *(_OWORD *)(a1 + 64) = v40;
        v43 = *(_OWORD *)(a2 + 112);
        v44 = *(_OWORD *)v23;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v43;
        *(_OWORD *)v35 = v44;
        *(_OWORD *)a2 = v47;
        *(_OWORD *)(a2 + 48) = v56;
        *(_OWORD *)(a2 + 64) = v59;
        *v28 = v50;
        *(_OWORD *)(a2 + 32) = v53;
        result = v65;
        *(__n128 *)(a2 + 96) = v65;
        *(_OWORD *)(a2 + 112) = v68;
        *(_OWORD *)v23 = v62;
      }
    }
  }
  return result;
}

uint64_t sub_223842390(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v4 = v14;
  v5 = a2[4];
  if (!v5)
    goto LABEL_4;
  if ((uint64_t *)v5 != a2 + 1)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_4:
    v15 = (_QWORD *)v5;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v14);
LABEL_6:
  v16 = a2[6];
  v6 = v17;
  result = a2[10];
  if (!result)
  {
LABEL_9:
    v18 = (_QWORD *)result;
    goto LABEL_11;
  }
  if ((uint64_t *)result != a2 + 7)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    goto LABEL_9;
  }
  v18 = v17;
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v17);
LABEL_11:
  v8 = v15;
  *a1 = v13;
  v9 = a1 + 1;
  if (v8)
  {
    if (v8 == v14)
    {
      a1[4] = v9;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
    }
    else
    {
      a1[4] = v8;
      v15 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v10 = v18;
  a1[6] = v16;
  if (v10)
  {
    if (v10 == v17)
    {
      a1[10] = a1 + 7;
      result = (*(uint64_t (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      a1[10] = v10;
      v18 = 0;
    }
  }
  else
  {
    a1[10] = 0;
  }
  if (v18 == v17)
  {
    v11 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_26;
    v11 = 5;
    v6 = v18;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v6 + 8 * v11))(v6, v9);
LABEL_26:
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*v4 + 8 * v12))(v4, v9);
}

void sub_22384257C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t **sub_2238425D8(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  *a1 = *a2;
  v5 = (uint64_t *)(a1 + 1);
  v6 = (uint64_t **)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      a1[4] = v5;
      (*(void (**)(uint64_t *, uint64_t *))(*a2[4] + 24))(a2[4], v5);
      a1[6] = *a3;
      v7 = (uint64_t *)(a1 + 7);
      v8 = (uint64_t)a3[4];
      if (!v8)
        goto LABEL_10;
    }
    else
    {
      a1[4] = (uint64_t *)((uint64_t (*)(uint64_t **))(*v6)[2])(v6);
      a1[6] = *a3;
      v7 = (uint64_t *)(a1 + 7);
      v8 = (uint64_t)a3[4];
      if (!v8)
        goto LABEL_10;
    }
  }
  else
  {
    a1[4] = 0;
    a1[6] = *a3;
    v7 = (uint64_t *)(a1 + 7);
    v8 = (uint64_t)a3[4];
    if (!v8)
      goto LABEL_10;
  }
  if ((uint64_t **)v8 == a3 + 1)
  {
    a1[10] = v7;
    (*(void (**)(uint64_t *, uint64_t *))(*a3[4] + 24))(a3[4], v7);
    v9 = *a1;
    if (*a1 == a1[6])
      return a1;
    goto LABEL_13;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_10:
  a1[10] = (uint64_t *)v8;
  v9 = *a1;
  if (*a1 == a1[6])
    return a1;
  do
  {
LABEL_13:
    v10 = a1[4];
    if (!v10)
      sub_223198474();
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t *, uint64_t *))(*v10 + 48))(v10, v9 + 2) + 112) != 1)
      break;
    v9 = (uint64_t *)**a1;
    *a1 = v9;
  }
  while (v9 != a1[6]);
  return a1;
}

void sub_223842730(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2238427A8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v4 = v14;
  v5 = a2[4];
  if (!v5)
    goto LABEL_4;
  if ((uint64_t *)v5 != a2 + 1)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_4:
    v15 = (_QWORD *)v5;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v14);
LABEL_6:
  v16 = a2[6];
  v6 = v17;
  result = a2[10];
  if (!result)
  {
LABEL_9:
    v18 = (_QWORD *)result;
    goto LABEL_11;
  }
  if ((uint64_t *)result != a2 + 7)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    goto LABEL_9;
  }
  v18 = v17;
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v17);
LABEL_11:
  v8 = v15;
  *a1 = v13;
  v9 = a1 + 1;
  if (v8)
  {
    if (v8 == v14)
    {
      a1[4] = v9;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
    }
    else
    {
      a1[4] = v8;
      v15 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v10 = v18;
  a1[6] = v16;
  if (v10)
  {
    if (v10 == v17)
    {
      a1[10] = a1 + 7;
      result = (*(uint64_t (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      a1[10] = v10;
      v18 = 0;
    }
  }
  else
  {
    a1[10] = 0;
  }
  if (v18 == v17)
  {
    v11 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_26;
    v11 = 5;
    v6 = v18;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v6 + 8 * v11))(v6, v9);
LABEL_26:
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*v4 + 8 * v12))(v4, v9);
}

void sub_223842994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t **sub_2238429F0(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  *a1 = *a2;
  v5 = (uint64_t *)(a1 + 1);
  v6 = (uint64_t **)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      a1[4] = v5;
      (*(void (**)(uint64_t *, uint64_t *))(*a2[4] + 24))(a2[4], v5);
      a1[6] = *a3;
      v7 = (uint64_t *)(a1 + 7);
      v8 = (uint64_t)a3[4];
      if (!v8)
        goto LABEL_10;
    }
    else
    {
      a1[4] = (uint64_t *)((uint64_t (*)(uint64_t **))(*v6)[2])(v6);
      a1[6] = *a3;
      v7 = (uint64_t *)(a1 + 7);
      v8 = (uint64_t)a3[4];
      if (!v8)
        goto LABEL_10;
    }
  }
  else
  {
    a1[4] = 0;
    a1[6] = *a3;
    v7 = (uint64_t *)(a1 + 7);
    v8 = (uint64_t)a3[4];
    if (!v8)
      goto LABEL_10;
  }
  if ((uint64_t **)v8 == a3 + 1)
  {
    a1[10] = v7;
    (*(void (**)(uint64_t *, uint64_t *))(*a3[4] + 24))(a3[4], v7);
    v9 = *a1;
    if (*a1 == a1[6])
      return a1;
    goto LABEL_13;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_10:
  a1[10] = (uint64_t *)v8;
  v9 = *a1;
  if (*a1 == a1[6])
    return a1;
  do
  {
LABEL_13:
    v10 = a1[4];
    if (!v10)
      sub_223198474();
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t *, uint64_t *))(*v10 + 48))(v10, v9 + 2) + 112) == 1)
      break;
    v9 = (uint64_t *)**a1;
    *a1 = v9;
  }
  while (v9 != a1[6]);
  return a1;
}

void sub_223842B48(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_223842BC0(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  BOOL v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __int128 *v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD *v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int64_t v142;
  int64_t v143;
  int64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _OWORD *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v181;
  __int128 *v182;
  _OWORD *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  __int128 *v198;
  __int128 *v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __int128 *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  _OWORD *v225;
  _OWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  _OWORD *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  __int128 *v242;
  __int128 *v243;
  uint64_t v244;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;

__n128 sub_223843AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;

  result.n128_u64[0] = sub_2238443FC(a1, a2, a3, a4).n128_u64[0];
  v11 = (__int128 *)(a5 + 80);
  v12 = *(_QWORD *)(a5 + 80);
  v14 = *(_QWORD *)(a4 + 80);
  v15 = *(_QWORD *)(a4 + 88);
  v13 = (__int128 *)(a4 + 80);
  v16 = v12 == v14;
  LODWORD(v12) = v12 < v14;
  v17 = *(_QWORD *)(a5 + 88);
  v18 = (unint64_t)v12 << 7;
  if (v16)
    v18 = 0;
  v16 = v17 == v15;
  v19 = (unint64_t)(v17 < v15) << 7;
  if (!v16)
    v18 = v19;
  if (v18)
  {
    v20 = (_OWORD *)(a4 + 16);
    v64 = *(_OWORD *)a4;
    v68 = *(_OWORD *)(a4 + 16);
    v72 = *(_OWORD *)(a4 + 32);
    v76 = *(_OWORD *)(a4 + 48);
    v80 = *(_OWORD *)(a4 + 64);
    v84 = *v13;
    v88 = *(__n128 *)(a4 + 96);
    v92 = *(_OWORD *)(a4 + 112);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v22 = *(_OWORD *)(a5 + 48);
    v21 = *(_OWORD *)(a5 + 64);
    v23 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(a4 + 32) = v23;
    *(_OWORD *)(a4 + 48) = v22;
    *(_OWORD *)(a4 + 64) = v21;
    v25 = *(_OWORD *)(a5 + 96);
    v24 = *(_OWORD *)(a5 + 112);
    *v13 = *v11;
    *(_OWORD *)(a4 + 96) = v25;
    *(_OWORD *)(a4 + 112) = v24;
    *(_OWORD *)a5 = v64;
    *(_OWORD *)(a5 + 16) = v68;
    *(_OWORD *)(a5 + 32) = v72;
    *(_OWORD *)(a5 + 48) = v76;
    *(_OWORD *)(a5 + 64) = v80;
    result = v88;
    *(__n128 *)(a5 + 96) = v88;
    *(_OWORD *)(a5 + 112) = v92;
    *v11 = v84;
    v26 = (__int128 *)(a3 + 80);
    v27 = *(_QWORD *)(a3 + 80);
    v28 = *(_QWORD *)(a4 + 80);
    v29 = *(_QWORD *)(a4 + 88);
    v16 = v28 == v27;
    LODWORD(v27) = v28 < v27;
    v30 = *(_QWORD *)(a3 + 88);
    v31 = (unint64_t)v27 << 7;
    if (v16)
      v31 = 0;
    v16 = v29 == v30;
    v32 = (unint64_t)(v29 < v30) << 7;
    if (!v16)
      v31 = v32;
    if (v31)
    {
      v33 = (_OWORD *)(a3 + 16);
      v65 = *(_OWORD *)a3;
      v69 = *(_OWORD *)(a3 + 16);
      v73 = *(_OWORD *)(a3 + 32);
      v77 = *(_OWORD *)(a3 + 48);
      v81 = *(_OWORD *)(a3 + 64);
      v85 = *v26;
      v89 = *(__n128 *)(a3 + 96);
      v93 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v35 = *(_OWORD *)(a4 + 48);
      v34 = *(_OWORD *)(a4 + 64);
      v36 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *v20;
      *(_OWORD *)(a3 + 32) = v36;
      *(_OWORD *)(a3 + 48) = v35;
      *(_OWORD *)(a3 + 64) = v34;
      v38 = *(_OWORD *)(a4 + 96);
      v37 = *(_OWORD *)(a4 + 112);
      *v26 = *v13;
      *(_OWORD *)(a3 + 96) = v38;
      *(_OWORD *)(a3 + 112) = v37;
      *(_OWORD *)a4 = v65;
      *v20 = v69;
      *(_OWORD *)(a4 + 32) = v73;
      *(_OWORD *)(a4 + 48) = v77;
      *(_OWORD *)(a4 + 64) = v81;
      result = v89;
      *(__n128 *)(a4 + 96) = v89;
      *(_OWORD *)(a4 + 112) = v93;
      *v13 = v85;
      v39 = (__int128 *)(a2 + 80);
      v40 = *(_QWORD *)(a2 + 80);
      v41 = *(_QWORD *)(a3 + 80);
      v42 = *(_QWORD *)(a3 + 88);
      v16 = v41 == v40;
      LODWORD(v40) = v41 < v40;
      v43 = *(_QWORD *)(a2 + 88);
      v44 = (unint64_t)v40 << 7;
      if (v16)
        v44 = 0;
      v16 = v42 == v43;
      v45 = (unint64_t)(v42 < v43) << 7;
      if (!v16)
        v44 = v45;
      if (v44)
      {
        v46 = (_OWORD *)(a2 + 16);
        v66 = *(_OWORD *)a2;
        v70 = *(_OWORD *)(a2 + 16);
        v74 = *(_OWORD *)(a2 + 32);
        v78 = *(_OWORD *)(a2 + 48);
        v82 = *(_OWORD *)(a2 + 64);
        v86 = *v39;
        v90 = *(__n128 *)(a2 + 96);
        v94 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v48 = *(_OWORD *)(a3 + 48);
        v47 = *(_OWORD *)(a3 + 64);
        v49 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *v33;
        *(_OWORD *)(a2 + 32) = v49;
        *(_OWORD *)(a2 + 48) = v48;
        *(_OWORD *)(a2 + 64) = v47;
        v51 = *(_OWORD *)(a3 + 96);
        v50 = *(_OWORD *)(a3 + 112);
        *v39 = *v26;
        *(_OWORD *)(a2 + 96) = v51;
        *(_OWORD *)(a2 + 112) = v50;
        *(_OWORD *)a3 = v66;
        *v33 = v70;
        *(_OWORD *)(a3 + 32) = v74;
        *(_OWORD *)(a3 + 48) = v78;
        *(_OWORD *)(a3 + 64) = v82;
        result = v90;
        *(__n128 *)(a3 + 96) = v90;
        *(_OWORD *)(a3 + 112) = v94;
        *v26 = v86;
        v52 = (__int128 *)(a1 + 80);
        v53 = *(_QWORD *)(a1 + 80);
        v54 = *(_QWORD *)(a2 + 80);
        v55 = *(_QWORD *)(a2 + 88);
        v16 = v54 == v53;
        LODWORD(v53) = v54 < v53;
        v56 = *(_QWORD *)(a1 + 88);
        v57 = (unint64_t)v53 << 7;
        if (v16)
          v57 = 0;
        v16 = v55 == v56;
        v58 = (unint64_t)(v55 < v56) << 7;
        if (!v16)
          v57 = v58;
        if (v57)
        {
          v67 = *(_OWORD *)a1;
          v71 = *(_OWORD *)(a1 + 16);
          v75 = *(_OWORD *)(a1 + 32);
          v79 = *(_OWORD *)(a1 + 48);
          v83 = *(_OWORD *)(a1 + 64);
          v87 = *v52;
          v91 = *(__n128 *)(a1 + 96);
          v95 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v60 = *(_OWORD *)(a2 + 48);
          v59 = *(_OWORD *)(a2 + 64);
          v61 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *v46;
          *(_OWORD *)(a1 + 32) = v61;
          *(_OWORD *)(a1 + 48) = v60;
          *(_OWORD *)(a1 + 64) = v59;
          v62 = *(_OWORD *)(a2 + 112);
          v63 = *v39;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v62;
          *v52 = v63;
          *(_OWORD *)a2 = v67;
          *(_OWORD *)(a2 + 48) = v79;
          *(_OWORD *)(a2 + 64) = v83;
          *v46 = v71;
          *(_OWORD *)(a2 + 32) = v75;
          result = v91;
          *(__n128 *)(a2 + 96) = v91;
          *(_OWORD *)(a2 + 112) = v95;
          *v39 = v87;
        }
      }
    }
  }
  return result;
}

__n128 sub_223843DB4(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  _BOOL4 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;

  v3 = a2 + 5;
  v4 = *((_QWORD *)a2 + 10);
  v5 = a1 + 5;
  v6 = *((_QWORD *)a1 + 10);
  v7 = a2 + 1;
  v8 = a1 + 1;
  v9 = v4 == v6;
  v10 = *((_QWORD *)a2 + 11);
  v11 = *((_QWORD *)a1 + 11);
  v12 = (unint64_t)(v4 < v6) << 7;
  if (v9)
    v12 = 0;
  v9 = v10 == v11;
  v13 = (unint64_t)(v10 < v11) << 7;
  if (!v9)
    v12 = v13;
  if (v12)
  {
    v14 = a3 + 5;
    v15 = *((_QWORD *)a3 + 10);
    v16 = a3 + 1;
    v9 = v15 == v4;
    v17 = v15 < v4;
    v18 = *((_QWORD *)a3 + 11);
    v19 = (unint64_t)v17 << 7;
    if (v9)
      v19 = 0;
    v9 = v18 == v10;
    v20 = (unint64_t)(v18 < v10) << 7;
    if (v9)
      v20 = v19;
    if (v20)
    {
      v64 = *a1;
      v68 = *v8;
      v72 = a1[2];
      v76 = a1[3];
      v80 = a1[4];
      v84 = *v5;
      v88 = (__n128)a1[6];
      v92 = a1[7];
      *a1 = *a3;
      v22 = a3[3];
      v21 = a3[4];
      v23 = a3[2];
      *v8 = *v16;
      a1[2] = v23;
      a1[3] = v22;
      a1[4] = v21;
      v24 = a3[7];
      v25 = *v14;
      a1[6] = a3[6];
      a1[7] = v24;
      *v5 = v25;
LABEL_29:
      *a3 = v64;
      a3[3] = v76;
      a3[4] = v80;
      *v16 = v68;
      a3[2] = v72;
      result = v88;
      a3[6] = (__int128)v88;
      a3[7] = v92;
      *v14 = v84;
      return result;
    }
    v67 = *a1;
    v71 = *v8;
    v75 = a1[2];
    v79 = a1[3];
    v83 = a1[4];
    v87 = *v5;
    v91 = (__n128)a1[6];
    v95 = a1[7];
    *a1 = *a2;
    v49 = a2[3];
    v48 = a2[4];
    v50 = a2[2];
    *v8 = *v7;
    a1[2] = v50;
    a1[3] = v49;
    a1[4] = v48;
    v52 = a2[6];
    v51 = a2[7];
    *v5 = *v3;
    a1[6] = v52;
    a1[7] = v51;
    *a2 = v67;
    *v7 = v71;
    a2[2] = v75;
    a2[3] = v79;
    a2[4] = v83;
    result = v91;
    a2[6] = (__int128)v91;
    a2[7] = v95;
    *v3 = v87;
    v53 = *((_QWORD *)a3 + 10);
    v54 = *((_QWORD *)a3 + 11);
    v55 = *((_QWORD *)a2 + 10);
    v56 = *((_QWORD *)a2 + 11);
    v9 = v53 == v55;
    v57 = (unint64_t)(v53 < v55) << 7;
    if (v9)
      v57 = 0;
    v9 = v54 == v56;
    v58 = (unint64_t)(v54 < v56) << 7;
    if (!v9)
      v57 = v58;
    if (v57)
    {
      v64 = *a2;
      v68 = *v7;
      v72 = a2[2];
      v76 = a2[3];
      v80 = a2[4];
      v84 = *v3;
      v88 = (__n128)a2[6];
      v92 = a2[7];
      *a2 = *a3;
      v60 = a3[3];
      v59 = a3[4];
      v61 = a3[2];
      *v7 = *v16;
      a2[2] = v61;
      a2[3] = v60;
      a2[4] = v59;
      v62 = a3[7];
      v63 = *v14;
      a2[6] = a3[6];
      a2[7] = v62;
      *v3 = v63;
      goto LABEL_29;
    }
  }
  else
  {
    v26 = a3 + 5;
    v27 = *((_QWORD *)a3 + 10);
    v9 = v27 == v4;
    LODWORD(v27) = v27 < v4;
    v28 = *((_QWORD *)a3 + 11);
    v29 = (unint64_t)v27 << 7;
    if (v9)
      v29 = 0;
    v9 = v28 == v10;
    v30 = (unint64_t)(v28 < v10) << 7;
    if (!v9)
      v29 = v30;
    if (v29)
    {
      v65 = *a2;
      v69 = *v7;
      v73 = a2[2];
      v77 = a2[3];
      v81 = a2[4];
      v85 = *v3;
      v89 = (__n128)a2[6];
      v93 = a2[7];
      *a2 = *a3;
      v32 = a3[3];
      v31 = a3[4];
      v33 = a3[2];
      *v7 = a3[1];
      a2[2] = v33;
      a2[3] = v32;
      a2[4] = v31;
      v35 = a3[6];
      v34 = a3[7];
      *v3 = *v26;
      a2[6] = v35;
      a2[7] = v34;
      *a3 = v65;
      a3[1] = v69;
      a3[2] = v73;
      a3[3] = v77;
      a3[4] = v81;
      result = v89;
      a3[6] = (__int128)v89;
      a3[7] = v93;
      *v26 = v85;
      v37 = *((_QWORD *)a2 + 10);
      v38 = *((_QWORD *)a2 + 11);
      v39 = *((_QWORD *)a1 + 10);
      v40 = *((_QWORD *)a1 + 11);
      v9 = v37 == v39;
      v41 = (unint64_t)(v37 < v39) << 7;
      if (v9)
        v41 = 0;
      v9 = v38 == v40;
      v42 = (unint64_t)(v38 < v40) << 7;
      if (!v9)
        v41 = v42;
      if (v41)
      {
        v66 = *a1;
        v70 = *v8;
        v74 = a1[2];
        v78 = a1[3];
        v82 = a1[4];
        v86 = *v5;
        v90 = (__n128)a1[6];
        v94 = a1[7];
        *a1 = *a2;
        v44 = a2[3];
        v43 = a2[4];
        v45 = a2[2];
        *v8 = *v7;
        a1[2] = v45;
        a1[3] = v44;
        a1[4] = v43;
        v46 = a2[7];
        v47 = *v3;
        a1[6] = a2[6];
        a1[7] = v46;
        *v5 = v47;
        *a2 = v66;
        a2[3] = v78;
        a2[4] = v82;
        *v7 = v70;
        a2[2] = v74;
        result = v90;
        a2[6] = (__int128)v90;
        a2[7] = v94;
        *v3 = v86;
      }
    }
  }
  return result;
}

BOOL sub_22384410C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v4 = (a2 - a1) >> 7;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 48);
      v7 = *(_QWORD *)(a2 - 48);
      v9 = *(_QWORD *)(a1 + 80);
      v10 = *(_QWORD *)(a1 + 88);
      v8 = (__int128 *)(a1 + 80);
      v11 = v7 == v9;
      LODWORD(v7) = v7 < v9;
      v12 = *(_QWORD *)(a2 - 40);
      v13 = (unint64_t)v7 << 7;
      if (v11)
        v13 = 0;
      v11 = v12 == v10;
      v14 = (unint64_t)(v12 < v10) << 7;
      if (!v11)
        v13 = v14;
      if (v13)
      {
        v43 = *(_OWORD *)a1;
        v45 = *(_OWORD *)(a1 + 16);
        v47 = *(_OWORD *)(a1 + 32);
        v49 = *(_OWORD *)(a1 + 48);
        v51 = *(_OWORD *)(a1 + 64);
        v53 = *v8;
        v54 = *(_OWORD *)(a1 + 96);
        v55 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 128);
        v16 = *(_OWORD *)(a2 - 80);
        v15 = *(_OWORD *)(a2 - 64);
        v17 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 112);
        *(_OWORD *)(a1 + 32) = v17;
        *(_OWORD *)(a1 + 48) = v16;
        *(_OWORD *)(a1 + 64) = v15;
        v19 = *(_OWORD *)(a2 - 32);
        v18 = *(_OWORD *)(a2 - 16);
        *v8 = *v6;
        *(_OWORD *)(a1 + 96) = v19;
        *(_OWORD *)(a1 + 112) = v18;
        *(_OWORD *)(a2 - 128) = v43;
        *(_OWORD *)(a2 - 112) = v45;
        *(_OWORD *)(a2 - 96) = v47;
        *(_OWORD *)(a2 - 80) = v49;
        *(_OWORD *)(a2 - 64) = v51;
        *(_OWORD *)(a2 - 32) = v54;
        *(_OWORD *)(a2 - 16) = v55;
        *v6 = v53;
      }
      return result;
    case 3:
      sub_223843DB4((__int128 *)a1, (__int128 *)(a1 + 128), (__int128 *)(a2 - 128));
      return 1;
    case 4:
      sub_2238443FC(a1, a1 + 128, a1 + 256, a2 - 128);
      return 1;
    case 5:
      sub_223843AA0(a1, a1 + 128, a1 + 256, a1 + 384, a2 - 128);
      return 1;
    default:
      v20 = a1 + 256;
      sub_223843DB4((__int128 *)a1, (__int128 *)(a1 + 128), (__int128 *)(a1 + 256));
      v21 = a1 + 384;
      if (a1 + 384 == a2)
        return 1;
      v22 = 0;
      v23 = 0;
      break;
  }
  while (1)
  {
    v25 = *(_QWORD *)(v21 + 80);
    v26 = *(_QWORD *)(v21 + 88);
    v27 = *(_QWORD *)(v20 + 80);
    v28 = *(_QWORD *)(v20 + 88);
    v11 = v25 == v27;
    v29 = (unint64_t)(v25 < v27) << 7;
    if (v11)
      v29 = 0;
    v11 = v26 == v28;
    v30 = (unint64_t)(v26 < v28) << 7;
    if (!v11)
      v29 = v30;
    if (v29)
    {
      v46 = *(_OWORD *)(v21 + 16);
      v48 = *(_OWORD *)(v21 + 32);
      v50 = *(_OWORD *)(v21 + 48);
      v52 = *(_OWORD *)(v21 + 64);
      v31 = v22;
      v41 = *(_OWORD *)(v21 + 96);
      v42 = *(_OWORD *)(v21 + 112);
      v44 = *(_OWORD *)v21;
      do
      {
        v32 = a1 + v31;
        v33 = *(_OWORD *)(a1 + v31 + 272);
        *(_OWORD *)(v32 + 384) = *(_OWORD *)(a1 + v31 + 256);
        *(_OWORD *)(v32 + 400) = v33;
        v34 = *(_OWORD *)(a1 + v31 + 304);
        *(_OWORD *)(v32 + 416) = *(_OWORD *)(a1 + v31 + 288);
        *(_OWORD *)(v32 + 432) = v34;
        v35 = *(_OWORD *)(a1 + v31 + 336);
        *(_OWORD *)(v32 + 448) = *(_OWORD *)(a1 + v31 + 320);
        *(_OWORD *)(v32 + 464) = v35;
        v36 = *(_OWORD *)(a1 + v31 + 368);
        *(_OWORD *)(v32 + 480) = *(_OWORD *)(a1 + v31 + 352);
        *(_OWORD *)(v32 + 496) = v36;
        if (v31 == -256)
        {
          v24 = a1;
          goto LABEL_11;
        }
        v37 = *(_QWORD *)(v32 + 208);
        v38 = *(_QWORD *)(v32 + 216);
        v11 = v25 == v37;
        v39 = (unint64_t)(v25 < v37) << 7;
        if (v11)
          v39 = 0;
        v11 = v26 == v38;
        v40 = (unint64_t)(v26 < v38) << 7;
        if (!v11)
          v39 = v40;
        v31 -= 128;
      }
      while (v39);
      v24 = a1 + v31 + 384;
LABEL_11:
      *(_OWORD *)v24 = v44;
      *(_OWORD *)(v32 + 304) = v50;
      *(_OWORD *)(v32 + 320) = v52;
      *(_OWORD *)(v32 + 272) = v46;
      *(_OWORD *)(v32 + 288) = v48;
      *(_QWORD *)(v32 + 336) = v25;
      *(_QWORD *)(v24 + 88) = v26;
      ++v23;
      *(_OWORD *)(v24 + 96) = v41;
      *(_OWORD *)(v24 + 112) = v42;
      if (v23 == 8)
        return v21 + 128 == a2;
    }
    v20 = v21;
    v22 += 128;
    v21 += 128;
    if (v21 == a2)
      return 1;
  }
}

__n128 sub_2238443FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  result.n128_u64[0] = sub_223843DB4((__int128 *)a1, (__int128 *)a2, (__int128 *)a3).n128_u64[0];
  v9 = (__int128 *)(a4 + 80);
  v10 = *(_QWORD *)(a4 + 80);
  v12 = *(_QWORD *)(a3 + 80);
  v13 = *(_QWORD *)(a3 + 88);
  v11 = (__int128 *)(a3 + 80);
  v14 = v10 == v12;
  LODWORD(v10) = v10 < v12;
  v15 = *(_QWORD *)(a4 + 88);
  v16 = (unint64_t)v10 << 7;
  if (v14)
    v16 = 0;
  v14 = v15 == v13;
  v17 = (unint64_t)(v15 < v13) << 7;
  if (!v14)
    v16 = v17;
  if (v16)
  {
    v18 = (_OWORD *)(a3 + 16);
    v49 = *(_OWORD *)a3;
    v52 = *(_OWORD *)(a3 + 16);
    v55 = *(_OWORD *)(a3 + 32);
    v58 = *(_OWORD *)(a3 + 48);
    v61 = *(_OWORD *)(a3 + 64);
    v64 = *v11;
    v67 = *(__n128 *)(a3 + 96);
    v70 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v20 = *(_OWORD *)(a4 + 48);
    v19 = *(_OWORD *)(a4 + 64);
    v21 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a3 + 32) = v21;
    *(_OWORD *)(a3 + 48) = v20;
    *(_OWORD *)(a3 + 64) = v19;
    v23 = *(_OWORD *)(a4 + 96);
    v22 = *(_OWORD *)(a4 + 112);
    *v11 = *v9;
    *(_OWORD *)(a3 + 96) = v23;
    *(_OWORD *)(a3 + 112) = v22;
    *(_OWORD *)a4 = v49;
    *(_OWORD *)(a4 + 16) = v52;
    *(_OWORD *)(a4 + 32) = v55;
    *(_OWORD *)(a4 + 48) = v58;
    *(_OWORD *)(a4 + 64) = v61;
    result = v67;
    *(__n128 *)(a4 + 96) = v67;
    *(_OWORD *)(a4 + 112) = v70;
    *v9 = v64;
    v24 = (__int128 *)(a2 + 80);
    v25 = *(_QWORD *)(a2 + 80);
    v26 = *(_QWORD *)(a3 + 80);
    v27 = *(_QWORD *)(a3 + 88);
    v14 = v26 == v25;
    LODWORD(v25) = v26 < v25;
    v28 = *(_QWORD *)(a2 + 88);
    v29 = (unint64_t)v25 << 7;
    if (v14)
      v29 = 0;
    v14 = v27 == v28;
    v30 = (unint64_t)(v27 < v28) << 7;
    if (!v14)
      v29 = v30;
    if (v29)
    {
      v31 = (_OWORD *)(a2 + 16);
      v50 = *(_OWORD *)a2;
      v53 = *(_OWORD *)(a2 + 16);
      v56 = *(_OWORD *)(a2 + 32);
      v59 = *(_OWORD *)(a2 + 48);
      v62 = *(_OWORD *)(a2 + 64);
      v65 = *v24;
      v68 = *(__n128 *)(a2 + 96);
      v71 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v33 = *(_OWORD *)(a3 + 48);
      v32 = *(_OWORD *)(a3 + 64);
      v34 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = *v18;
      *(_OWORD *)(a2 + 32) = v34;
      *(_OWORD *)(a2 + 48) = v33;
      *(_OWORD *)(a2 + 64) = v32;
      v36 = *(_OWORD *)(a3 + 96);
      v35 = *(_OWORD *)(a3 + 112);
      *v24 = *v11;
      *(_OWORD *)(a2 + 96) = v36;
      *(_OWORD *)(a2 + 112) = v35;
      *(_OWORD *)a3 = v50;
      *v18 = v53;
      *(_OWORD *)(a3 + 32) = v56;
      *(_OWORD *)(a3 + 48) = v59;
      *(_OWORD *)(a3 + 64) = v62;
      result = v68;
      *(__n128 *)(a3 + 96) = v68;
      *(_OWORD *)(a3 + 112) = v71;
      *v11 = v65;
      v37 = (__int128 *)(a1 + 80);
      v38 = *(_QWORD *)(a1 + 80);
      v39 = *(_QWORD *)(a2 + 80);
      v40 = *(_QWORD *)(a2 + 88);
      v14 = v39 == v38;
      LODWORD(v38) = v39 < v38;
      v41 = *(_QWORD *)(a1 + 88);
      v42 = (unint64_t)v38 << 7;
      if (v14)
        v42 = 0;
      v14 = v40 == v41;
      v43 = (unint64_t)(v40 < v41) << 7;
      if (!v14)
        v42 = v43;
      if (v42)
      {
        v51 = *(_OWORD *)a1;
        v54 = *(_OWORD *)(a1 + 16);
        v57 = *(_OWORD *)(a1 + 32);
        v60 = *(_OWORD *)(a1 + 48);
        v63 = *(_OWORD *)(a1 + 64);
        v66 = *v37;
        v69 = *(__n128 *)(a1 + 96);
        v72 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v45 = *(_OWORD *)(a2 + 48);
        v44 = *(_OWORD *)(a2 + 64);
        v46 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *v31;
        *(_OWORD *)(a1 + 32) = v46;
        *(_OWORD *)(a1 + 48) = v45;
        *(_OWORD *)(a1 + 64) = v44;
        v47 = *(_OWORD *)(a2 + 112);
        v48 = *v24;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v47;
        *v37 = v48;
        *(_OWORD *)a2 = v51;
        *(_OWORD *)(a2 + 48) = v60;
        *(_OWORD *)(a2 + 64) = v63;
        *v31 = v54;
        *(_OWORD *)(a2 + 32) = v57;
        result = v69;
        *(__n128 *)(a2 + 96) = v69;
        *(_OWORD *)(a2 + 112) = v72;
        *v24 = v66;
      }
    }
  }
  return result;
}

void sub_22384465C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v24[0] = v5;
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (_BYTE *)a3;
  else
    v7 = *(_BYTE **)a3;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  sub_223844E40((_QWORD *)(v5 + 16), v7, &v7[v6], 0x22u, 0x5Cu);
  v8 = v24[0];
  v9 = *(_DWORD *)(v24[0] + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v24[0] + 112);
    v13 = *(_QWORD *)(v24[0] + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v24[0] + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v8 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_19;
    }
    v14 = *(const void **)(v24[0] + 40);
    v10 = *(_QWORD *)(v24[0] + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_27:
      sub_22316DBC0();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_18;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_18:
    memmove(v11, v14, v10);
LABEL_19:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v17 + 128);
    MEMORY[0x227684CE8](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a2;
  v24[1] = __dst;
  v24[2] = a2;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v21 == -1)
    sub_22316DD70();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24EC5B0E8[v21])(&v25, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_2238448D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2238448F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223844910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223844924(_DWORD ***a1)
{
  return sub_223627410(**a1, (char *)(*a1)[1]);
}

void sub_223844930(uint64_t a1, uint64_t a2)
{
  sub_223844940((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_223844940(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5B100[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223844AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223844B38(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223844C30((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223844C28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223844C30(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223844E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223844E40(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  for (; a2 != a3; ++a2)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_2231813E8(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_223844F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_223844F44(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B100[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_223845034(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B100[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_223845124(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B100[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223845214(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223845788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2238457AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2238457C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223845818(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223845D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223845DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223845DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_223845E1C(float *a1, uint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v16;
  float v17;
  float v18;
  _QWORD *v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v12[1];
            if (v16 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v16 & (v9 - 1)) != v3)
            {
              goto LABEL_28;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v12 = operator new(0xA0uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a3;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  v12[18] = 0;
  v12[19] = 0;
  *((_OWORD *)v12 + 3) = xmmword_2246512D0;
  *((_OWORD *)v12 + 4) = unk_2246512E0;
  *((_OWORD *)v12 + 5) = xmmword_2246512F0;
  *((_OWORD *)v12 + 6) = unk_224651300;
  *((_WORD *)v12 + 72) = 0;
  *((_BYTE *)v12 + 146) = 1;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime > v9)
    {
LABEL_42:
      if (prime >> 61)
        sub_223174E94();
      v25 = operator new(8 * prime);
      v26 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v25;
      if (v26)
        operator delete(v26);
      v27 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
      while (prime != v27);
      v29 = (uint64_t *)(a1 + 4);
      v28 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v28)
        goto LABEL_74;
      v30 = v28[1];
      v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v32 = v30 & v31;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v29;
        for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
        {
          v34 = i[1] & v31;
          if (v34 == v32)
          {
            v28 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
          {
            *v28 = *i;
            v35 = 8 * v34;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v35);
            **(_QWORD **)(*(_QWORD *)a1 + v35) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v28;
            v28 = i;
            v32 = v34;
          }
        }
        goto LABEL_74;
      }
      if (v30 >= prime)
        v30 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v29;
      v39 = (_QWORD *)*v28;
      if (!*v28)
      {
LABEL_74:
        v9 = prime;
        v42 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_75;
        goto LABEL_90;
      }
      while (1)
      {
        v41 = v39[1];
        if (v41 >= prime)
          v41 %= prime;
        if (v41 == v30)
          goto LABEL_68;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v41))
        {
          *v28 = *v39;
          v40 = 8 * v41;
          *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
          **(_QWORD **)(*(_QWORD *)a1 + v40) = v39;
          v39 = v28;
LABEL_68:
          v28 = v39;
          v39 = (_QWORD *)*v39;
          if (!v39)
            goto LABEL_74;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v28;
          v28 = v39;
          v39 = (_QWORD *)*v39;
          v30 = v41;
          if (!v39)
            goto LABEL_74;
        }
      }
    }
    if (prime < v9)
    {
      v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v9)
      {
        if (!prime)
        {
          v43 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v43)
            operator delete(v43);
          v9 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v42 = -1;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      v9 = *((_QWORD *)a1 + 1);
    }
    v42 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
LABEL_75:
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v19 = *(_QWORD **)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v20)
          goto LABEL_31;
      }
      else
      {
        v3 = v8;
        v19 = *(_QWORD **)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v20)
          goto LABEL_31;
      }
      goto LABEL_91;
    }
LABEL_90:
    v3 = v42 & v8;
    v19 = *(_QWORD **)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v8));
    if (v20)
      goto LABEL_31;
    goto LABEL_91;
  }
  v19 = *(_QWORD **)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
LABEL_31:
    *v12 = *v20;
LABEL_97:
    *v20 = v12;
    goto LABEL_98;
  }
LABEL_91:
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v19[v3] = a1 + 4;
  if (*v12)
  {
    v44 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v44 >= v9)
        v44 %= v9;
    }
    else
    {
      v44 &= v9 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_97;
  }
LABEL_98:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_223846304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_223846318(_DWORD ***a1)
{
  return sub_223846334(**a1, (char *)(*a1)[1]);
}

void sub_223846324(uint64_t a1, uint64_t a2)
{
  sub_223846424((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223846334(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B100[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223846424(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5B100[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2238465D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_22384661C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223846714((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_22384670C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223846714(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223846910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223846924(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B100[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_223846A14(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B100[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_223846B04(_DWORD ***a1)
{
  return sub_223846B20(**a1, (char *)(*a1)[1]);
}

void sub_223846B10(uint64_t a1, uint64_t a2)
{
  sub_223846C10((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223846B20(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B100[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223846C10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5B100[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223846DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223846E08(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223846F00((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223846EF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223846F00(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2238470FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223847110(_BYTE *a1, char *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  result = sub_223195210(v4);
  v19 = v4;
  v6 = *a2;
  if (v6 <= 3)
    result = (uint64_t)sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)off_24EC5B1D8[v6], qword_224651310[v6]);
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v4 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v4 + 64);
    v12 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      a1[23] = 0;
      *a1 = 0;
      v8 = v4;
      if (!v4)
        return result;
LABEL_13:
      v13 = MEMORY[0x24BEDB7F0];
      v14 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
      v15 = *(_QWORD *)(v13 + 72);
      *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
      *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v8 + 16) = v15;
      if (*(char *)(v8 + 111) < 0)
        operator delete(*(void **)(v8 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](v8 + 128);
      JUMPOUT(0x227684CE8);
    }
    v11 = *(const void **)(v4 + 40);
    v12 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a1 + 1) = v12;
    *((_QWORD *)a1 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a1 = v18;
    a1 = v18;
  }
  else
  {
    a1[23] = v12;
    if (!v12)
    {
      *a1 = 0;
      v8 = v19;
      if (v19)
        goto LABEL_13;
      return result;
    }
  }
  result = (uint64_t)memmove(a1, v11, v12);
  a1[v12] = 0;
  v8 = v19;
  if (v19)
    goto LABEL_13;
  return result;
}

void sub_22384732C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223847350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223847364(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2231D772C((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5B0E8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2238475B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2238475D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238475F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223847608(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 88);
      v4 = *(void **)(a1 + 80);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 80);
      }
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v4);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(_QWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_16;
  }
  else
  {
LABEL_14:
    v8 = *(_QWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_16;
  }
  do
  {
    v9 = (_QWORD *)*v8;
    operator delete(v8);
    v8 = v9;
  }
  while (v9);
LABEL_16:
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

uint64_t sub_2238476EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v54[3];
  float32x2_t v55;
  unsigned __int32 v56;
  int v57;
  uint64_t v58;

  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v13 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)a1 = &off_24EC5B208;
  sub_2232E4FC0(a1 + 8, a3);
  *(_QWORD *)(a1 + 1208) = v9;
  *(_QWORD *)(a1 + 1216) = v8;
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 1256) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_QWORD *)(a1 + 1264) = &off_24EC1FE80;
  sub_2231DC6C8((_WORD *)(a1 + 1272));
  *(_QWORD *)(a1 + 1352) = &off_24EC1FE80;
  sub_2231DC6C8((_WORD *)(a1 + 1360));
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1488) = 0;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1512) = 0;
  *(_QWORD *)(a1 + 1528) = a4;
  *(_QWORD *)(a1 + 1536) = v13;
  *(_QWORD *)(a1 + 1544) = v12;
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_BYTE *)(a3 + 8);
  v21 = *(_BYTE *)(a3 + 9);
  v22 = *(_DWORD *)(a3 + 12);
  v54[0] = *(_OWORD *)(a3 + 744);
  v23 = operator new();
  *(_QWORD *)v23 = &off_24EC5C258;
  *(_BYTE *)(v23 + 8) = v20;
  *(_BYTE *)(v23 + 9) = v21;
  *(_DWORD *)(v23 + 12) = v22;
  *(_OWORD *)(v23 + 16) = v54[0];
  *(_QWORD *)(a1 + 1552) = v23;
  v24 = (uint64_t **)(a1 + 1560);
  *(_QWORD *)(a1 + 1624) = 0;
  *(_QWORD *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_QWORD *)(a1 + 1608) = a1 + 1616;
  *(_QWORD *)(a1 + 1632) = 0;
  v25 = (_QWORD *)operator new();
  sub_2238A54D8(v25, a1 + 8);
  v26 = 0;
  *(_QWORD *)(a1 + 1640) = v25;
  if (*(_BYTE *)(a1 + 568))
  {
    if (*(_BYTE *)(a1 + 888))
    {
      if (*(_BYTE *)(a1 + 984))
      {
        v26 = 0;
        if (*(_BYTE *)(a1 + 505))
        {
          if (*(_BYTE *)(a1 + 280))
          {
            v26 = (_QWORD *)operator new();
            *(_QWORD *)&v54[0] = 0;
            v58 = 0;
            sub_223CA6178(v26, a1 + 8, (uint64_t *)v54, &v58);
            if (v58)
              (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
            if (*(_QWORD *)&v54[0])
              (*(void (**)(_QWORD))(**(_QWORD **)&v54[0] + 8))(*(_QWORD *)&v54[0]);
          }
        }
      }
    }
  }
  *(_QWORD *)(a1 + 1648) = v26;
  *(_QWORD *)(a1 + 1680) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  sub_2232D3688();
  *(_QWORD *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1736) = 0;
  *(_QWORD *)(a1 + 1728) = a1 + 1736;
  *(_QWORD *)(a1 + 1768) = 0;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1752) = a1 + 1760;
  *(_QWORD *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_QWORD *)(a1 + 1776) = a1 + 1784;
  *(_QWORD *)(a1 + 1816) = 0;
  *(_QWORD *)(a1 + 1808) = 0;
  *(_QWORD *)(a1 + 1800) = a1 + 1808;
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1832) = 0;
  *(_QWORD *)(a1 + 1824) = a1 + 1832;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1848) = a1 + 1856;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_QWORD *)(a1 + 1872) = a1 + 1880;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_BYTE *)(a1 + 1904) = 0;
  v27 = (uint64_t *)(a1 + 1952);
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  if (!*(_BYTE *)(a1 + 888)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 87, (uint64_t)"config_.keyframing && \"Initializing KeyframeEngine with empty config\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*(_QWORD *)(a1 + 1640)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 88, (uint64_t)"monitoring_engine_ && \"Expect monitoring engine to be set\"", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_DWORD *)(a1 + 1672) = 35;
  if (sub_22321D244(a1 + 8, 1))
    *(_DWORD *)(a1 + 1672) |= 8u;
  if (sub_22321D244(a1 + 8, 16))
    *(_DWORD *)(a1 + 1672) |= 0x10u;
  if (sub_22321D244(a1 + 8, 4))
    *(_DWORD *)(a1 + 1672) |= 4u;
  if (*(_BYTE *)(a1 + 716)
    && *(_DWORD *)(a1 + 712) < (*(_DWORD *)(a1 + 720) + 10)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 112, (uint64_t)"(pruning_cg.max_num_keyframes >= pruning_cg.max_keyframe_safety_buffer + 10)", 76, (uint64_t)"Maximum number of keyframes limit is too small or safety buffer size is too high.", 81, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 772))
  {
    v32 = (uint64_t *)operator new();
    *(_QWORD *)&v54[0] = 0;
    sub_2238B352C(v32, (uint64_t *)v54, a1 + 576);
    if (*(_QWORD *)&v54[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v54[0] + 8))(*(_QWORD *)&v54[0]);
    v33 = *v24;
    *v24 = v32;
    if (v33)
    {
      v34 = v33[1];
      v33[1] = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v35 = *v33;
      *v33 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      MEMORY[0x227684CE8](v33, 0x20C40A4A59CD2);
    }
  }
  if (!*(_BYTE *)(a1 + 824))
    goto LABEL_49;
  v28.i64[0] = *(_QWORD *)(a1 + 152);
  v28.i32[2] = *(_DWORD *)(a1 + 160);
  v29.i64[0] = *(_QWORD *)(a1 + 168);
  v29.i32[2] = *(_DWORD *)(a1 + 176);
  v30.i64[0] = *(_QWORD *)(a1 + 200);
  v30.i32[2] = *(_DWORD *)(a1 + 208);
  *(_QWORD *)&v36 = vzip1q_s32(v28, v29).u64[0];
  v37 = (int8x16_t)vnegq_f32(v30);
  v31.i32[0] = *(_DWORD *)(a1 + 192);
  v38 = (int8x16_t)vtrn2q_s32(v28, v29);
  v38.i32[2] = HIDWORD(*(_QWORD *)(a1 + 184));
  v39 = (int8x16_t)vzip2q_s32(v28, v29);
  v40 = (int32x4_t)v39;
  v40.i32[2] = v31.i32[0];
  v41 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v36, *(float *)v37.i32), *(float32x2_t *)v38.i8, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v39.i8, v30, 2);
  v42 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 184), *(float32x2_t *)v37.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + 184), 1), *(float32x2_t *)v30.f32, 1);
  v43 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
  *((_QWORD *)&v36 + 1) = *(_QWORD *)(a1 + 184);
  v37.i32[3] = 0;
  v37.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v38, 0).i32[3];
  *(uint64_t *)((char *)v37.i64 + 4) = vextq_s8(v38, v39, 4uLL).u64[0];
  v40.i64[1] = vdupq_laneq_s32(v40, 2).u32[0];
  v54[1] = (__int128)v37;
  v54[2] = (__int128)v40;
  v54[0] = v36;
  v55 = v41;
  v56 = vmla_f32(v42, v43, v31).u32[0];
  v57 = 1065353216;
  v44 = operator new(0x5BB0uLL);
  v44[1] = 0;
  v44[2] = 0;
  *v44 = &off_24EC5B520;
  *(_QWORD *)(a1 + 1936) = sub_223AEFA48((uint64_t)(v44 + 3), (__int128 *)(a1 + 824), v54);
  v45 = *(std::__shared_weak_count **)(a1 + 1944);
  *(_QWORD *)(a1 + 1944) = v44;
  if (!v45)
    goto LABEL_49;
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (!*(_BYTE *)(a1 + 836))
      goto LABEL_52;
  }
  else
  {
LABEL_49:
    if (!*(_BYTE *)(a1 + 836))
      goto LABEL_52;
  }
  v48 = operator new();
  sub_223B6B270(v48);
  v49 = *v27;
  *v27 = v48;
  if (v49)
  {
    v50 = sub_223888FF8(v49);
    MEMORY[0x227684CE8](v50, 0x10A0C40790BDDCALL);
  }
LABEL_52:
  sub_223848174();
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  if (v8)
  {
    v51 = (unint64_t *)&v8->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_223847DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v31 = *(_QWORD *)(v30 - 112);
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  MEMORY[0x227684CE8](v29, 0x10A1C40D25A436CLL);
  v32 = *(_QWORD *)(v25 + 1640);
  *(_QWORD *)(v25 + 1640) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_22384B94C((uint64_t *)(v25 + 1632));
  sub_22388A7C4(*(_QWORD **)(v25 + 1616));
  sub_223167354(v25 + 1568);
  sub_223515160(v28);
  v33 = *(_QWORD *)(v25 + 1552);
  *(_QWORD *)(v25 + 1552) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(std::__shared_weak_count **)(v25 + 1544);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  sub_2231CD83C((_QWORD *)(v25 + 1264));
  v35 = *(_QWORD *)(v25 + 1256);
  *(_QWORD *)(v25 + 1256) = 0;
  if (v35)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v25 + 1208;
    v37 = *(_QWORD *)(v25 + 1248);
    *(_QWORD *)(v25 + 1248) = 0;
    if (!v37)
    {
LABEL_13:
      v38 = *(_QWORD *)(v25 + 1240);
      *(_QWORD *)(v25 + 1240) = 0;
      if (!v38)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    v36 = v25 + 1208;
    v37 = *(_QWORD *)(v25 + 1248);
    *(_QWORD *)(v25 + 1248) = 0;
    if (!v37)
      goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(v25 + 1240);
  *(_QWORD *)(v25 + 1240) = 0;
  if (!v38)
  {
LABEL_15:
    sub_22384B9CC((uint64_t *)(v25 + 1232));
    sub_22384BA10(a20);
    sub_223167354(v36);
    sub_223223FC0(v27);
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
    sub_223167354((uint64_t)&a23);
    sub_223167354((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
LABEL_14:
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  goto LABEL_15;
}

uint64_t *sub_223848130(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_223888FF8(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C40790BDDCALL);
  }
  return a1;
}

void sub_223848174()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  const char *v6;
  size_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  const char *v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  void *v67;
  __int128 v68;
  std::string::size_type v69;
  std::string *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *p_pn;
  size_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  std::string *v80;
  std::string::size_type v81;
  std::string::size_type v82;
  void *v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  std::__fs::filesystem::path *v88;
  uint64_t v89;
  const char *v90;
  unint64_t v91;
  size_t v92;
  unsigned __int8 v93;
  const char *v94;
  size_t v95;
  std::string::size_type *p_size;
  uint64_t v97;
  uint64_t v98;
  std::string::value_type *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  size_t v104;
  void *v105;
  _QWORD *v106;
  size_t v107;
  std::string::size_type v108;
  std::string *v109;
  void *v110;
  int v111;
  uint64_t v112;
  const void *v113;
  uint64_t v114;
  uint64_t v115;
  std::__fs::filesystem::path *v116;
  uint64_t v117;
  const char *v118;
  size_t v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  const char *v122;
  size_t v123;
  std::string::size_type *v124;
  uint64_t v125;
  uint64_t v126;
  std::string::value_type *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  size_t v131;
  void *v132;
  _QWORD *v133;
  size_t v134;
  std::string::size_type v135;
  std::string *v136;
  void *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  std::string::size_type v141;
  char v142;
  _QWORD *v143;
  std::string::size_type v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::string::size_type v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::string::size_type v158;
  std::string::size_type v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  std::string::size_type v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::string::size_type v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *size;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__fs::filesystem::path *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  std::string *v195;
  uint64_t v196;
  const char *v197;
  size_t v198;
  uint64_t v199;
  unsigned __int8 v200;
  const char *v201;
  size_t v202;
  _BYTE *v203;
  unint64_t v204;
  uint64_t v205;
  std::string *v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  size_t v214;
  void *v215;
  _QWORD *v216;
  size_t v217;
  std::string::size_type v218;
  std::string *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  std::string::size_type v223;
  char v224;
  _QWORD *v225;
  std::string::size_type v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::string::size_type v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::string::size_type v240;
  std::string::size_type v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  std::string::size_type v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::string::size_type v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__fs::filesystem::path *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  std::string::size_type v271;
  std::string *v272;
  char v273;
  uint64_t v274;
  char v275;
  std::string::size_type v276;
  std::string *v277;
  char v278;
  char v279;
  _OWORD *v280;
  int v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t (**v288)();
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  std::string *data;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  std::string::size_type v338;
  char v339;
  _QWORD *v340;
  std::string::size_type v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::string::size_type v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::string *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  const char *v386;
  const char *v387;
  const char *v388;
  const char *v389;
  int __src;
  int __srca;
  int __srcb;
  const char *__srcc;
  std::string v394;
  std::string pn;
  std::random_device v396;
  std::string v397;
  char *v398;
  std::string::size_type v399;
  char *v400;
  std::__fs::filesystem::path v401;
  std::__fs::filesystem::path v402;
  uint64_t v403[3];
  uint64_t *v404;
  _BYTE object[2504];
  __int128 v406;
  _OWORD __dst[156];
  std::string oslog[104];
  uint64_t v409;

  v0 = MEMORY[0x24BDAC7A8]();
  v409 = *MEMORY[0x24BDAC8D0];
  sub_22384BA54(v403);
  if (**(int **)(v403[0] + 56) > 3)
    goto LABEL_80;
  v1 = *(unsigned __int8 *)(v403[0] + 72);
  v2 = sub_22322F254(v403[0], "OSLogSurrogateAppender", 1, 0);
  v3 = v2;
  if (!v1 && v2 == 0)
    goto LABEL_80;
  __src = v1;
  oslog[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v403;
  oslog[0].__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  oslog[0].__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(oslog[1].__r_.__value_.__l.__data_) = 3;
  oslog[1].__r_.__value_.__l.__size_ = (std::string::size_type)"unknown file";
  LODWORD(oslog[1].__r_.__value_.__r.__words[2]) = 158;
  oslog[2].__r_.__value_.__r.__words[0] = (std::string::size_type)"unknown function";
  *(_OWORD *)&oslog[2].__r_.__value_.__r.__words[1] = 0uLL;
  v5 = *(_QWORD *)oslog[0].__r_.__value_.__l.__data_;
  v6 = (const char *)(*(_QWORD *)oslog[0].__r_.__value_.__l.__data_ + 16);
  v386 = v6;
  if (*(char *)(*(_QWORD *)oslog[0].__r_.__value_.__l.__data_ + 39) < 0)
  {
    v6 = *(const char **)(v5 + 16);
    v7 = *(_QWORD *)(v5 + 24);
    v9 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)oslog[0].__r_.__value_.__l.__data_ + 39);
    v8 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v8 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v10 = (const char *)&xmmword_255788F40;
  else
    v10 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v11 = byte_255788F57;
  else
    v11 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v10, v6);
  v12 = &object[8];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    *(_QWORD *)&object[16] = v11;
    *(_QWORD *)&object[24] = v14 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v12;
    goto LABEL_23;
  }
  object[31] = v11;
  if (v11)
LABEL_23:
    memmove(v12, v10, v11);
  v12[v11] = 0;
  object[32] = 1;
  v15 = &object[40];
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v7 >= 0x17)
  {
    v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v17 = v7 | 7;
    v18 = v17 + 1;
    v15 = operator new(v17 + 1);
    *(_QWORD *)&object[48] = v7;
    *(_QWORD *)&object[56] = v18 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v15;
  }
  else
  {
    object[63] = v7;
    if (!v7)
    {
      object[40] = 0;
      object[64] = 1;
      v16 = *(NSObject **)object;
      if ((object[63] & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v15, v6, v7);
  v15[v7] = 0;
  object[64] = 1;
  v16 = *(NSObject **)object;
  if ((object[63] & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[32])
      goto LABEL_37;
LABEL_35:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(*(void **)&object[40]);
  if (object[32])
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v3 && *(_QWORD *)(v3 + 24))
  {
    v19 = _os_log_pack_size();
    v20 = (std::__shared_weak_count_vtbl *)operator new(v19, (std::align_val_t)8uLL);
    v21 = (std::__shared_weak_count *)operator new();
    v22 = v21;
    v21->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = v20;
    *(_QWORD *)object = v20;
    *(_QWORD *)&object[8] = v20;
    *(_QWORD *)&object[16] = v21;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v22);
    }
    v26 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v27 = operator new();
    v28 = *(unsigned __int8 *)(v5 + 39);
    v29 = v386;
    if ((v28 & 0x80u) != 0)
    {
      v29 = *(const char **)(v5 + 16);
      v28 = *(_QWORD *)(v5 + 24);
    }
    *(_QWORD *)v27 = v26;
    *(_OWORD *)(v27 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v27 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v27 + 40) = v29;
    *(_QWORD *)(v27 + 48) = v28;
    *(_BYTE *)(v27 + 56) = 1;
    v397.__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&__dst[0] = v27;
    (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), __dst);
    v30 = *(_QWORD *)&__dst[0];
    *(_QWORD *)&__dst[0] = 0;
    if (v30)
    {
      v31 = *(std::__shared_weak_count **)(v30 + 32);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(std::__shared_weak_count **)(v30 + 16);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      MEMORY[0x227684CE8](v30, 0x10F0C40B62ED6C6);
      v397.__r_.__value_.__r.__words[0] = 0;
    }
    v37 = *(std::__shared_weak_count **)&object[32];
    v38 = __src;
    if (*(_QWORD *)&object[32])
    {
      v39 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v41 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v42 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v44 = (void *)_os_log_send_and_compose_impl();
    v38 = __src;
    if (v44)
      free(v44);
  }
  if (v38)
  {
    sub_22322C138((uint64_t)oslog, "KFE:Initializing");
    sub_223182C08((uint64_t)oslog);
  }
  sub_223182C08((uint64_t)oslog);
  v45 = (std::__shared_weak_count *)oslog[2].__r_.__value_.__r.__words[2];
  if (oslog[2].__r_.__value_.__r.__words[2])
  {
    v46 = (unint64_t *)(oslog[2].__r_.__value_.__r.__words[2] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_80:
  v48 = *(_QWORD *)(v0 + 1224);
  *(_QWORD *)(v0 + 1224) = 0;
  if (v48)
  {
    v49 = sub_223847608(v48);
    MEMORY[0x227684CE8](v49, 0x10A2C403CBED27ELL);
  }
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v51 = std::chrono::steady_clock::now().__d_.__rep_;
  v52 = operator new();
  *(_OWORD *)v52 = 0u;
  *(_OWORD *)(v52 + 16) = 0u;
  *(_DWORD *)(v52 + 32) = 1065353216;
  sub_2232D3688();
  *(_QWORD *)(v52 + 64) = 0x5000002EELL;
  *(_BYTE *)(v52 + 72) = 1;
  *(_BYTE *)(v52 + 76) = 0;
  *(_BYTE *)(v52 + 80) = 0;
  *(_BYTE *)(v52 + 104) = 0;
  *(_QWORD *)(v52 + 112) = 1000 * rep - v51;
  v53 = *(_QWORD *)(v0 + 1224);
  *(_QWORD *)(v0 + 1224) = v52;
  if (v53)
  {
    v54 = sub_223847608(v53);
    MEMORY[0x227684CE8](v54, 0x10A2C403CBED27ELL);
  }
  memset(&v394, 0, sizeof(v394));
  v404 = 0;
  if (*(_BYTE *)(v0 + 80))
  {
    sub_22384BB48(&v400);
    if (**((int **)v400 + 7) > 3)
      goto LABEL_332;
    v55 = v400[72];
    v56 = sub_22322F254((uint64_t)v400, "OSLogSurrogateAppender", 1, 0);
    v57 = v56;
    if (!v55 && !v56)
      goto LABEL_332;
    sub_223195210((uint64_t)object);
    v58 = sub_2231813E8(&object[16], (uint64_t)"Keyframes persistence enabled: ", 31);
    v59 = *(char *)(v0 + 79);
    if (v59 >= 0)
      v60 = v0 + 56;
    else
      v60 = *(_QWORD *)(v0 + 56);
    if (v59 >= 0)
      v61 = *(unsigned __int8 *)(v0 + 79);
    else
      v61 = *(_QWORD *)(v0 + 64);
    sub_2231813E8(v58, v60, v61);
    if ((object[120] & 0x10) != 0)
    {
      v84 = *(_QWORD *)&object[112];
      if (*(_QWORD *)&object[112] < *(_QWORD *)&object[72])
      {
        *(_QWORD *)&object[112] = *(_QWORD *)&object[72];
        v84 = *(_QWORD *)&object[72];
      }
      v85 = *(const void **)&object[64];
      v62 = v84 - *(_QWORD *)&object[64];
      if ((unint64_t)(v84 - *(_QWORD *)&object[64]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_204;
    }
    else
    {
      if ((object[120] & 8) == 0)
      {
        v62 = 0;
        *((_BYTE *)&v402.__pn_.__r_.__value_.__s + 23) = 0;
        v63 = &v402;
        goto LABEL_153;
      }
      v85 = *(const void **)&object[40];
      v62 = *(_QWORD *)&object[56] - *(_QWORD *)&object[40];
      if (*(_QWORD *)&object[56] - *(_QWORD *)&object[40] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_204:
        sub_22316DBC0();
    }
    if (v62 >= 0x17)
    {
      v86 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v62 | 7) != 0x17)
        v86 = v62 | 7;
      v87 = v86 + 1;
      v63 = operator new(v86 + 1);
      v402.__pn_.__r_.__value_.__l.__size_ = v62;
      v402.__pn_.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
      v402.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    }
    else
    {
      *((_BYTE *)&v402.__pn_.__r_.__value_.__s + 23) = v62;
      v63 = &v402;
      if (!v62)
      {
LABEL_153:
        v63[v62] = 0;
        *(_QWORD *)&__dst[0] = &v400;
        *((std::chrono::steady_clock::time_point *)&__dst[0] + 1) = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&__dst[1] = std::chrono::system_clock::now();
        DWORD2(__dst[1]) = 3;
        *(_QWORD *)&__dst[2] = "unknown file";
        DWORD2(__dst[2]) = 180;
        *(_QWORD *)&__dst[4] = 0;
        *(_QWORD *)&__dst[3] = "unknown function";
        *((_QWORD *)&__dst[3] + 1) = 0;
        if ((v402.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = &v402;
        else
          v88 = (std::__fs::filesystem::path *)v402.__pn_.__r_.__value_.__r.__words[0];
        v89 = **(_QWORD **)&__dst[0];
        v90 = (const char *)(**(_QWORD **)&__dst[0] + 16);
        v385 = **(_QWORD **)&__dst[0];
        v387 = v90;
        v91 = v57;
        if (*(char *)(**(_QWORD **)&__dst[0] + 39) < 0)
        {
          v90 = *(const char **)(v89 + 16);
          v92 = *(_QWORD *)(v89 + 24);
        }
        else
        {
          v92 = *(unsigned __int8 *)(**(_QWORD **)&__dst[0] + 39);
        }
        __srcb = v55;
        v93 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)oslog);
          sub_223199C58("com.apple.cv3d", (unint64_t)oslog, &xmmword_255788F40);
          if (oslog[1].__r_.__value_.__s.__data_[0] && SHIBYTE(oslog[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(oslog[0].__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v94 = (const char *)&xmmword_255788F40;
        else
          v94 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v95 = byte_255788F57;
        else
          v95 = *((_QWORD *)&xmmword_255788F40 + 1);
        oslog[0].__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v94, v90);
        p_size = &oslog[0].__r_.__value_.__l.__size_;
        if (v95 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v95 >= 0x17)
        {
          v97 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v95 | 7) != 0x17)
            v97 = v95 | 7;
          v98 = v97 + 1;
          p_size = (std::string::size_type *)operator new(v97 + 1);
          oslog[1].__r_.__value_.__r.__words[0] = v98 | 0x8000000000000000;
          oslog[0].__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
          oslog[0].__r_.__value_.__r.__words[2] = v95;
        }
        else
        {
          oslog[1].__r_.__value_.__s.__data_[7] = v95;
          if (!v95)
          {
LABEL_174:
            *((_BYTE *)p_size + v95) = 0;
            oslog[1].__r_.__value_.__s.__data_[8] = 1;
            v99 = &oslog[1].__r_.__value_.__s.__data_[16];
            if (v92 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v100 = v91;
            if (v92 >= 0x17)
            {
              v101 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v92 | 7) != 0x17)
                v101 = v92 | 7;
              v102 = v101 + 1;
              v99 = (std::string::value_type *)operator new(v101 + 1);
              oslog[2].__r_.__value_.__l.__size_ = v102 | 0x8000000000000000;
              oslog[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v99;
              oslog[2].__r_.__value_.__r.__words[0] = v92;
            }
            else
            {
              oslog[2].__r_.__value_.__s.__data_[15] = v92;
              if (!v92)
              {
LABEL_182:
                v99[v92] = 0;
                oslog[2].__r_.__value_.__s.__data_[16] = 1;
                v103 = oslog[0].__r_.__value_.__r.__words[0];
                if (oslog[2].__r_.__value_.__s.__data_[15] < 0)
                  operator delete((void *)oslog[1].__r_.__value_.__r.__words[2]);
                if (oslog[1].__r_.__value_.__s.__data_[8] && oslog[1].__r_.__value_.__s.__data_[7] < 0)
                  operator delete((void *)oslog[0].__r_.__value_.__l.__size_);
                if (oslog[0].__r_.__value_.__r.__words[0])
                  os_release(oslog[0].__r_.__value_.__l.__data_);
                if (!v91 || !*(_QWORD *)(v91 + 24))
                {
                  os_log_type_enabled(v103, OS_LOG_TYPE_INFO);
                  LODWORD(oslog[0].__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)oslog[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v88;
                  v110 = (void *)_os_log_send_and_compose_impl();
                  v111 = __srcb;
                  if (v110)
                    free(v110);
                  goto LABEL_318;
                }
                v104 = _os_log_pack_size();
                v105 = operator new(v104, (std::align_val_t)8uLL);
                v106 = (_QWORD *)operator new();
                *v106 = &off_24EC1F7F0;
                v106[1] = 0;
                v106[2] = 0;
                v106[3] = v105;
                v397.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
                v397.__r_.__value_.__l.__size_ = (std::string::size_type)v105;
                v398 = 0;
                v399 = 0;
                v397.__r_.__value_.__r.__words[2] = (std::string::size_type)v106;
                v107 = strlen((const char *)v88);
                if (v107 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v108 = v107;
                if (v107 >= 0x17)
                {
                  v139 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17)
                    v139 = v107 | 7;
                  v140 = v139 + 1;
                  v109 = (std::string *)operator new(v139 + 1);
                  pn.__r_.__value_.__l.__size_ = v108;
                  pn.__r_.__value_.__r.__words[2] = v140 | 0x8000000000000000;
                  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
                }
                else
                {
                  *((_BYTE *)&pn.__r_.__value_.__s + 23) = v107;
                  v109 = &pn;
                  if (!v107)
                  {
LABEL_257:
                    v109->__r_.__value_.__s.__data_[v108] = 0;
                    v401.__pn_.__r_.__value_.__r.__words[0] = pn.__r_.__value_.__l.__size_;
                    v141 = pn.__r_.__value_.__r.__words[0];
                    *(std::string::size_type *)((char *)v401.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&pn.__r_.__value_.__r.__words[1] + 7);
                    v142 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
                    v143 = operator new(0x38uLL);
                    v143[1] = 0;
                    v143[2] = 0;
                    v143[3] = off_24EC1FA48;
                    *v143 = &off_24EC1F9F8;
                    v144 = v401.__pn_.__r_.__value_.__r.__words[0];
                    v143[4] = v141;
                    v143[5] = v144;
                    *(_QWORD *)((char *)v143 + 47) = *(std::string::size_type *)((char *)v401.__pn_.__r_.__value_.__r.__words
                                                                               + 7);
                    *((_BYTE *)v143 + 55) = v142;
                    v401.__pn_.__r_.__value_.__r.__words[0] = 0;
                    *(std::string::size_type *)((char *)v401.__pn_.__r_.__value_.__r.__words + 7) = 0;
                    v145 = (std::__shared_weak_count *)v399;
                    v398 = (char *)(v143 + 3);
                    v399 = (std::string::size_type)v143;
                    v111 = __srcb;
                    if (v145)
                    {
                      v146 = (unint64_t *)&v145->__shared_owners_;
                      do
                        v147 = __ldaxr(v146);
                      while (__stlxr(v147 - 1, v146));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                        std::__shared_weak_count::__release_weak(v145);
                      }
                    }
                    oslog[0] = v397;
                    v148 = (std::string::size_type)v398;
                    if (v397.__r_.__value_.__r.__words[2])
                    {
                      v149 = (unint64_t *)(v397.__r_.__value_.__r.__words[2] + 8);
                      do
                        v150 = __ldxr(v149);
                      while (__stxr(v150 + 1, v149));
                    }
                    v151 = (std::__shared_weak_count *)v399;
                    oslog[1].__r_.__value_.__r.__words[0] = v148;
                    oslog[1].__r_.__value_.__l.__size_ = v399;
                    if (v399)
                    {
                      v152 = (unint64_t *)(v399 + 8);
                      do
                        v153 = __ldxr(v152);
                      while (__stxr(v153 + 1, v152));
                      oslog[1].__r_.__value_.__r.__words[2] = v148;
                      do
                        v154 = __ldaxr(v152);
                      while (__stlxr(v154 - 1, v152));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                        std::__shared_weak_count::__release_weak(v151);
                      }
                    }
                    else
                    {
                      oslog[1].__r_.__value_.__r.__words[2] = v148;
                    }
                    v155 = (std::__shared_weak_count *)v397.__r_.__value_.__r.__words[2];
                    if (v397.__r_.__value_.__r.__words[2])
                    {
                      v156 = (unint64_t *)(v397.__r_.__value_.__r.__words[2] + 8);
                      do
                        v157 = __ldaxr(v156);
                      while (__stlxr(v157 - 1, v156));
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                        std::__shared_weak_count::__release_weak(v155);
                      }
                    }
                    v158 = oslog[0].__r_.__value_.__r.__words[0];
                    if (*(char *)(oslog[1].__r_.__value_.__r.__words[2] + 31) >= 0)
                      v159 = oslog[1].__r_.__value_.__r.__words[2] + 8;
                    else
                      v159 = *(_QWORD *)(oslog[1].__r_.__value_.__r.__words[2] + 8);
                    v160 = _os_log_pack_fill();
                    *(_DWORD *)v160 = 136315138;
                    *(_QWORD *)(v160 + 4) = v159;
                    v161 = operator new();
                    v162 = *(unsigned __int8 *)(v385 + 39);
                    v163 = v387;
                    if ((v162 & 0x80u) != 0)
                    {
                      v163 = *(const char **)(v385 + 16);
                      v162 = *(_QWORD *)(v385 + 24);
                    }
                    *(_QWORD *)v161 = v158;
                    *(_OWORD *)(v161 + 8) = *(_OWORD *)&oslog[0].__r_.__value_.__r.__words[1];
                    *(_OWORD *)&oslog[0].__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v161 + 24) = *(_OWORD *)&oslog[1].__r_.__value_.__l.__data_;
                    *(_OWORD *)&oslog[1].__r_.__value_.__l.__data_ = 0uLL;
                    *(_QWORD *)(v161 + 40) = v163;
                    *(_QWORD *)(v161 + 48) = v162;
                    *(_BYTE *)(v161 + 56) = 1;
                    pn.__r_.__value_.__r.__words[0] = 0;
                    v397.__r_.__value_.__r.__words[0] = v161;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v100 + 24) + 40))(*(_QWORD *)(v100 + 24), &v397);
                    v164 = v397.__r_.__value_.__r.__words[0];
                    v397.__r_.__value_.__r.__words[0] = 0;
                    if (v164)
                    {
                      v165 = *(std::__shared_weak_count **)(v164 + 32);
                      if (v165)
                      {
                        v166 = (unint64_t *)&v165->__shared_owners_;
                        do
                          v167 = __ldaxr(v166);
                        while (__stlxr(v167 - 1, v166));
                        if (!v167)
                        {
                          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                          std::__shared_weak_count::__release_weak(v165);
                        }
                      }
                      v168 = *(std::__shared_weak_count **)(v164 + 16);
                      if (v168)
                      {
                        v169 = (unint64_t *)&v168->__shared_owners_;
                        do
                          v170 = __ldaxr(v169);
                        while (__stlxr(v170 - 1, v169));
                        if (!v170)
                        {
                          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                          std::__shared_weak_count::__release_weak(v168);
                        }
                      }
                      MEMORY[0x227684CE8](v164, 0x10F0C40B62ED6C6);
                      v171 = pn.__r_.__value_.__r.__words[0];
                      pn.__r_.__value_.__r.__words[0] = 0;
                      if (v171)
                      {
                        v172 = *(std::__shared_weak_count **)(v171 + 32);
                        if (v172)
                        {
                          v173 = (unint64_t *)&v172->__shared_owners_;
                          do
                            v174 = __ldaxr(v173);
                          while (__stlxr(v174 - 1, v173));
                          if (!v174)
                          {
                            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                            std::__shared_weak_count::__release_weak(v172);
                          }
                        }
                        v175 = *(std::__shared_weak_count **)(v171 + 16);
                        if (v175)
                        {
                          v176 = (unint64_t *)&v175->__shared_owners_;
                          do
                            v177 = __ldaxr(v176);
                          while (__stlxr(v177 - 1, v176));
                          if (!v177)
                          {
                            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                            std::__shared_weak_count::__release_weak(v175);
                          }
                        }
                        MEMORY[0x227684CE8](v171, 0x10F0C40B62ED6C6);
                      }
                    }
                    size = (std::__shared_weak_count *)oslog[1].__r_.__value_.__l.__size_;
                    if (oslog[1].__r_.__value_.__l.__size_)
                    {
                      v179 = (unint64_t *)(oslog[1].__r_.__value_.__l.__size_ + 8);
                      do
                        v180 = __ldaxr(v179);
                      while (__stlxr(v180 - 1, v179));
                      if (!v180)
                      {
                        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                        std::__shared_weak_count::__release_weak(size);
                      }
                    }
                    v181 = (std::__shared_weak_count *)oslog[0].__r_.__value_.__r.__words[2];
                    if (oslog[0].__r_.__value_.__r.__words[2])
                    {
                      v182 = (unint64_t *)(oslog[0].__r_.__value_.__r.__words[2] + 8);
                      do
                        v183 = __ldaxr(v182);
                      while (__stlxr(v183 - 1, v182));
                      if (!v183)
                      {
                        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                        std::__shared_weak_count::__release_weak(v181);
                      }
                    }
LABEL_318:
                    if (v111)
                    {
                      v184 = &v402;
                      if ((v402.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v184 = (std::__fs::filesystem::path *)v402.__pn_.__r_.__value_.__r.__words[0];
                      sub_22322C138((uint64_t)__dst, "%s", (const char *)v184);
                      sub_223182C08((uint64_t)__dst);
                    }
                    sub_223182C08((uint64_t)__dst);
                    v185 = *(std::__shared_weak_count **)&__dst[4];
                    if (*(_QWORD *)&__dst[4])
                    {
                      v186 = (unint64_t *)(*(_QWORD *)&__dst[4] + 8);
                      do
                        v187 = __ldaxr(v186);
                      while (__stlxr(v187 - 1, v186));
                      if (!v187)
                      {
                        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                        std::__shared_weak_count::__release_weak(v185);
                      }
                    }
                    if (SHIBYTE(v402.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v402.__pn_.__r_.__value_.__l.__data_);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v188 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v188;
                    *(_QWORD *)&object[24] = MEMORY[0x24BEDB848] + 16;
                    if ((object[111] & 0x80000000) != 0)
                      operator delete(*(void **)&object[88]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&object[128]);
LABEL_332:
                    sub_223FF9988(v0 + 56, oslog);
                    if (SHIBYTE(oslog[0].__r_.__value_.__r.__words[2]) < 0)
                      sub_223197FA4(object, oslog[0].__r_.__value_.__l.__data_, oslog[0].__r_.__value_.__l.__size_);
                    else
                      *(std::string *)object = oslog[0];
                    if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v394.__r_.__value_.__l.__data_);
                    v394 = *(std::string *)object;
                    object[23] = 0;
                    object[0] = 0;
                    if (SHIBYTE(oslog[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(oslog[0].__r_.__value_.__l.__data_);
                    sub_223FF97F8(v0 + 56, &pn);
                    if (*(_BYTE *)(v0 + 88))
                    {
                      *(_QWORD *)object = &off_24EC5B570;
                      *(_QWORD *)&object[8] = v0;
                      *(_QWORD *)&object[24] = object;
                      sub_2231A924C(object, v403);
                      v190 = *(_QWORD **)&object[24];
                      if (*(_BYTE **)&object[24] == object)
                      {
                        v191 = 4;
                        v190 = object;
                      }
                      else
                      {
                        if (!*(_QWORD *)&object[24])
                        {
LABEL_353:
                          v199 = *(_QWORD *)(v0 + 1224);
                          *(_BYTE *)(v199 + 72) = *(_BYTE *)(v0 + 708);
                          *(_QWORD *)(v199 + 64) = *(_QWORD *)(v0 + 700);
                          if (((*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(v0 + 1528) + 176))(*(_QWORD *)(v0 + 1528), &pn) & 1) == 0&& ((*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(v0 + 1528) + 128))(*(_QWORD *)(v0 + 1528), &pn) & 1) == 0&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 213, (uint64_t)"directory_created && \"Unable to create metadata storage directory\"", 66, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                          {
                            abort();
                          }
                          goto LABEL_356;
                        }
                        v191 = 5;
                      }
                      (*(void (**)(_QWORD *, uint64_t))(*v190 + 8 * v191))(v190, v189);
                      goto LABEL_353;
                    }
                    sub_22384BB48(&v401);
                    if (**(int **)(v401.__pn_.__r_.__value_.__r.__words[0] + 56) > 3
                      || (v192 = *(unsigned __int8 *)(v401.__pn_.__r_.__value_.__r.__words[0] + 72),
                          v193 = sub_22322F254((uint64_t)v401.__pn_.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0), v194 = v193, !v192)&& !v193)
                    {
LABEL_356:
                      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(pn.__r_.__value_.__l.__data_);
                      goto LABEL_474;
                    }
                    oslog[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
                    oslog[0].__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                    oslog[0].__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                    LODWORD(oslog[1].__r_.__value_.__l.__data_) = 3;
                    oslog[1].__r_.__value_.__l.__size_ = (std::string::size_type)"unknown file";
                    LODWORD(oslog[1].__r_.__value_.__r.__words[2]) = 217;
                    oslog[2].__r_.__value_.__r.__words[0] = (std::string::size_type)"unknown function";
                    *(_OWORD *)&oslog[2].__r_.__value_.__r.__words[1] = 0uLL;
                    if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v195 = &pn;
                    else
                      v195 = (std::string *)pn.__r_.__value_.__r.__words[0];
                    v196 = *(_QWORD *)oslog[0].__r_.__value_.__l.__data_;
                    v197 = (const char *)(*(_QWORD *)oslog[0].__r_.__value_.__l.__data_ + 16);
                    v389 = v197;
                    if (*(char *)(*(_QWORD *)oslog[0].__r_.__value_.__l.__data_ + 39) < 0)
                    {
                      v197 = *(const char **)(v196 + 16);
                      v198 = *(_QWORD *)(v196 + 24);
                    }
                    else
                    {
                      v198 = *(unsigned __int8 *)(*(_QWORD *)oslog[0].__r_.__value_.__l.__data_ + 39);
                    }
                    v200 = atomic_load((unsigned __int8 *)&qword_255788F58);
                    if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                    {
                      sub_224568628((uint64_t)object);
                      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
                      if (object[24] && (object[23] & 0x80000000) != 0)
                        operator delete(*(void **)object);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                      __cxa_guard_release(&qword_255788F58);
                    }
                    if (byte_255788F57 >= 0)
                      v201 = (const char *)&xmmword_255788F40;
                    else
                      v201 = (const char *)xmmword_255788F40;
                    if (byte_255788F57 >= 0)
                      v202 = byte_255788F57;
                    else
                      v202 = *((_QWORD *)&xmmword_255788F40 + 1);
                    __srcc = v197;
                    *(_QWORD *)object = os_log_create(v201, v197);
                    v203 = &object[8];
                    if (v202 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    if (v202 >= 0x17)
                    {
                      v204 = v194;
                      v205 = v196;
                      v206 = v195;
                      v207 = v192;
                      v208 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v202 | 7) != 0x17)
                        v208 = v202 | 7;
                      v209 = v208 + 1;
                      v203 = operator new(v208 + 1);
                      *(_QWORD *)&object[16] = v202;
                      *(_QWORD *)&object[24] = v209 | 0x8000000000000000;
                      *(_QWORD *)&object[8] = v203;
                      v192 = v207;
                      v195 = v206;
                      v196 = v205;
                      v194 = v204;
                    }
                    else
                    {
                      object[31] = v202;
                      if (!v202)
                      {
LABEL_374:
                        v203[v202] = 0;
                        object[32] = 1;
                        v210 = &object[40];
                        if (v198 > 0x7FFFFFFFFFFFFFF7)
                          sub_22316DBC0();
                        if (v198 >= 0x17)
                        {
                          v211 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v198 | 7) != 0x17)
                            v211 = v198 | 7;
                          v212 = v211 + 1;
                          v210 = operator new(v211 + 1);
                          *(_QWORD *)&object[48] = v198;
                          *(_QWORD *)&object[56] = v212 | 0x8000000000000000;
                          *(_QWORD *)&object[40] = v210;
                        }
                        else
                        {
                          object[63] = v198;
                          if (!v198)
                          {
LABEL_382:
                            v210[v198] = 0;
                            object[64] = 1;
                            v213 = *(NSObject **)object;
                            if ((object[63] & 0x80000000) != 0)
                              operator delete(*(void **)&object[40]);
                            if (object[32] && (object[31] & 0x80000000) != 0)
                              operator delete(*(void **)&object[8]);
                            if (*(_QWORD *)object)
                              os_release(*(void **)object);
                            if (!v194 || !*(_QWORD *)(v194 + 24))
                            {
                              os_log_type_enabled(v213, OS_LOG_TYPE_INFO);
                              *(_DWORD *)object = 136315138;
                              *(_QWORD *)&object[4] = v195;
                              v220 = (void *)_os_log_send_and_compose_impl();
                              if (v220)
                                free(v220);
                              goto LABEL_647;
                            }
                            v214 = _os_log_pack_size();
                            v215 = operator new(v214, (std::align_val_t)8uLL);
                            v216 = (_QWORD *)operator new();
                            *v216 = &off_24EC1F7F0;
                            v216[1] = 0;
                            v216[2] = 0;
                            v216[3] = v215;
                            *(_QWORD *)&__dst[0] = v215;
                            *((_QWORD *)&__dst[0] + 1) = v215;
                            *(_QWORD *)&__dst[2] = 0;
                            __dst[1] = (unint64_t)v216;
                            v217 = strlen((const char *)v195);
                            if (v217 > 0x7FFFFFFFFFFFFFF7)
                              sub_22316DBC0();
                            v218 = v217;
                            if (v217 >= 0x17)
                            {
                              v336 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v217 | 7) != 0x17)
                                v336 = v217 | 7;
                              v337 = v336 + 1;
                              v219 = (std::string *)operator new(v336 + 1);
                              v397.__r_.__value_.__l.__size_ = v218;
                              v397.__r_.__value_.__r.__words[2] = v337 | 0x8000000000000000;
                              v397.__r_.__value_.__r.__words[0] = (std::string::size_type)v219;
                            }
                            else
                            {
                              *((_BYTE *)&v397.__r_.__value_.__s + 23) = v217;
                              v219 = &v397;
                              if (!v217)
                              {
LABEL_588:
                                v219->__r_.__value_.__s.__data_[v218] = 0;
                                v402.__pn_.__r_.__value_.__r.__words[0] = v397.__r_.__value_.__l.__size_;
                                v338 = v397.__r_.__value_.__r.__words[0];
                                *(std::string::size_type *)((char *)v402.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v397.__r_.__value_.__r.__words[1] + 7);
                                v339 = HIBYTE(v397.__r_.__value_.__r.__words[2]);
                                v340 = operator new(0x38uLL);
                                v340[1] = 0;
                                v340[2] = 0;
                                v340[3] = off_24EC1FA48;
                                *v340 = &off_24EC1F9F8;
                                v341 = v402.__pn_.__r_.__value_.__r.__words[0];
                                v340[4] = v338;
                                v340[5] = v341;
                                *(_QWORD *)((char *)v340 + 47) = *(std::string::size_type *)((char *)v402.__pn_.__r_.__value_.__r.__words
                                                                                           + 7);
                                *((_BYTE *)v340 + 55) = v339;
                                v402.__pn_.__r_.__value_.__r.__words[0] = 0;
                                *(std::string::size_type *)((char *)v402.__pn_.__r_.__value_.__r.__words + 7) = 0;
                                v342 = *(std::__shared_weak_count **)&__dst[2];
                                *((_QWORD *)&__dst[1] + 1) = v340 + 3;
                                *(_QWORD *)&__dst[2] = v340;
                                if (v342)
                                {
                                  v343 = (unint64_t *)&v342->__shared_owners_;
                                  do
                                    v344 = __ldaxr(v343);
                                  while (__stlxr(v344 - 1, v343));
                                  if (!v344)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                                    std::__shared_weak_count::__release_weak(v342);
                                  }
                                }
                                *(_OWORD *)object = __dst[0];
                                v345 = *((_QWORD *)&__dst[1] + 1);
                                *(_QWORD *)&object[16] = *(_QWORD *)&__dst[1];
                                if (*(_QWORD *)&__dst[1])
                                {
                                  v346 = (unint64_t *)(*(_QWORD *)&__dst[1] + 8);
                                  do
                                    v347 = __ldxr(v346);
                                  while (__stxr(v347 + 1, v346));
                                }
                                v348 = *(std::__shared_weak_count **)&__dst[2];
                                *(_QWORD *)&object[24] = v345;
                                *(_QWORD *)&object[32] = *(_QWORD *)&__dst[2];
                                if (*(_QWORD *)&__dst[2])
                                {
                                  v349 = (unint64_t *)(*(_QWORD *)&__dst[2] + 8);
                                  do
                                    v350 = __ldxr(v349);
                                  while (__stxr(v350 + 1, v349));
                                  *(_QWORD *)&object[40] = v345;
                                  do
                                    v351 = __ldaxr(v349);
                                  while (__stlxr(v351 - 1, v349));
                                  if (!v351)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                                    std::__shared_weak_count::__release_weak(v348);
                                  }
                                }
                                else
                                {
                                  *(_QWORD *)&object[40] = v345;
                                }
                                v352 = *(std::__shared_weak_count **)&__dst[1];
                                if (*(_QWORD *)&__dst[1])
                                {
                                  v353 = (unint64_t *)(*(_QWORD *)&__dst[1] + 8);
                                  do
                                    v354 = __ldaxr(v353);
                                  while (__stlxr(v354 - 1, v353));
                                  if (!v354)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                                    std::__shared_weak_count::__release_weak(v352);
                                  }
                                }
                                v355 = *(_QWORD *)object;
                                if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                                  v356 = *(_QWORD *)&object[40] + 8;
                                else
                                  v356 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                                v357 = _os_log_pack_fill();
                                *(_DWORD *)v357 = 136315138;
                                *(_QWORD *)(v357 + 4) = v356;
                                v358 = operator new();
                                v359 = *(unsigned __int8 *)(v196 + 39);
                                v360 = v389;
                                if ((v359 & 0x80u) != 0)
                                {
                                  v360 = *(const char **)(v196 + 16);
                                  v359 = *(_QWORD *)(v196 + 24);
                                }
                                *(_QWORD *)v358 = v355;
                                *(_OWORD *)(v358 + 8) = *(_OWORD *)&object[8];
                                *(_QWORD *)&object[8] = 0;
                                *(_QWORD *)&object[16] = 0;
                                *(_OWORD *)(v358 + 24) = *(_OWORD *)&object[24];
                                *(_QWORD *)&object[24] = 0;
                                *(_QWORD *)&object[32] = 0;
                                *(_QWORD *)(v358 + 40) = v360;
                                *(_QWORD *)(v358 + 48) = v359;
                                *(_BYTE *)(v358 + 56) = 1;
                                v397.__r_.__value_.__r.__words[0] = 0;
                                *(_QWORD *)&__dst[0] = v358;
                                (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v194 + 24) + 40))(*(_QWORD *)(v194 + 24), __dst);
                                v361 = *(_QWORD *)&__dst[0];
                                *(_QWORD *)&__dst[0] = 0;
                                if (v361)
                                {
                                  v362 = *(std::__shared_weak_count **)(v361 + 32);
                                  if (v362)
                                  {
                                    v363 = (unint64_t *)&v362->__shared_owners_;
                                    do
                                      v364 = __ldaxr(v363);
                                    while (__stlxr(v364 - 1, v363));
                                    if (!v364)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                                      std::__shared_weak_count::__release_weak(v362);
                                    }
                                  }
                                  v365 = *(std::__shared_weak_count **)(v361 + 16);
                                  if (v365)
                                  {
                                    v366 = (unint64_t *)&v365->__shared_owners_;
                                    do
                                      v367 = __ldaxr(v366);
                                    while (__stlxr(v367 - 1, v366));
                                    if (!v367)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                                      std::__shared_weak_count::__release_weak(v365);
                                    }
                                  }
                                  MEMORY[0x227684CE8](v361, 0x10F0C40B62ED6C6);
                                  v368 = v397.__r_.__value_.__r.__words[0];
                                  v397.__r_.__value_.__r.__words[0] = 0;
                                  if (v368)
                                  {
                                    v369 = *(std::__shared_weak_count **)(v368 + 32);
                                    if (v369)
                                    {
                                      v370 = (unint64_t *)&v369->__shared_owners_;
                                      do
                                        v371 = __ldaxr(v370);
                                      while (__stlxr(v371 - 1, v370));
                                      if (!v371)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                                        std::__shared_weak_count::__release_weak(v369);
                                      }
                                    }
                                    v372 = *(std::__shared_weak_count **)(v368 + 16);
                                    if (v372)
                                    {
                                      v373 = (unint64_t *)&v372->__shared_owners_;
                                      do
                                        v374 = __ldaxr(v373);
                                      while (__stlxr(v374 - 1, v373));
                                      if (!v374)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                                        std::__shared_weak_count::__release_weak(v372);
                                      }
                                    }
                                    MEMORY[0x227684CE8](v368, 0x10F0C40B62ED6C6);
                                  }
                                }
                                v375 = *(std::__shared_weak_count **)&object[32];
                                if (*(_QWORD *)&object[32])
                                {
                                  v376 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                  do
                                    v377 = __ldaxr(v376);
                                  while (__stlxr(v377 - 1, v376));
                                  if (!v377)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                                    std::__shared_weak_count::__release_weak(v375);
                                  }
                                }
                                v378 = *(std::__shared_weak_count **)&object[16];
                                if (*(_QWORD *)&object[16])
                                {
                                  v379 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                  do
                                    v380 = __ldaxr(v379);
                                  while (__stlxr(v380 - 1, v379));
                                  if (!v380)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                                    std::__shared_weak_count::__release_weak(v378);
                                  }
                                }
LABEL_647:
                                if (v192)
                                {
                                  v381 = &pn;
                                  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v381 = (std::string *)pn.__r_.__value_.__r.__words[0];
                                  sub_22322C138((uint64_t)oslog, "Persistence disabled, not loading keyframe database: %s", (const char *)v381);
                                  sub_223182C08((uint64_t)oslog);
                                }
                                sub_223182C08((uint64_t)oslog);
                                v382 = (std::__shared_weak_count *)oslog[2].__r_.__value_.__r.__words[2];
                                if (oslog[2].__r_.__value_.__r.__words[2])
                                {
                                  v383 = (unint64_t *)(oslog[2].__r_.__value_.__r.__words[2] + 8);
                                  do
                                    v384 = __ldaxr(v383);
                                  while (__stlxr(v384 - 1, v383));
                                  if (!v384)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                                    std::__shared_weak_count::__release_weak(v382);
                                  }
                                }
                                goto LABEL_356;
                              }
                            }
                            memcpy(v219, v195, v218);
                            goto LABEL_588;
                          }
                        }
                        memmove(v210, __srcc, v198);
                        goto LABEL_382;
                      }
                    }
                    memmove(v203, v201, v202);
                    goto LABEL_374;
                  }
                }
                memcpy(v109, v88, v108);
                goto LABEL_257;
              }
            }
            memmove(v99, v90, v92);
            goto LABEL_182;
          }
        }
        memmove(p_size, v94, v95);
        goto LABEL_174;
      }
    }
    memmove(v63, v85, v62);
    goto LABEL_153;
  }
  std::__fs::filesystem::__temp_directory_path(&v402, 0);
  object[23] = 12;
  strcpy(object, "/dev/urandom");
  std::random_device::random_device(&v396, (const std::string *)object);
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  v64 = 0;
  v397.__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&v397.__r_.__value_.__s + 23) = 0;
  do
  {
    *(_DWORD *)((char *)&oslog[0].__r_.__value_.__l.__data_ + v64) = MEMORY[0x2276846DC](&v396);
    v64 += 4;
  }
  while (v64 != 2496);
  memcpy(__dst, oslog, sizeof(__dst));
  sub_2232D6424(__dst, (uint64_t)object);
  v65 = (char *)operator new(0x9F8uLL);
  *((_QWORD *)v65 + 1) = 0;
  *((_QWORD *)v65 + 2) = 0;
  *(_QWORD *)v65 = &off_24EC29A78;
  memcpy(v65 + 24, object, 0x9C8uLL);
  *((_QWORD *)v65 + 316) = &off_24EC7A6B0;
  *(_OWORD *)(v65 + 2536) = v406;
  v398 = v65 + 24;
  v399 = (std::string::size_type)v65;
  v400 = v65 + 24;
  sub_2232D69F0((unsigned int *)object, (uint64_t *)&v400);
  *(_QWORD *)&__dst[0] = (*(unsigned int *)object | ((unint64_t)object[4] << 32) | ((unint64_t)object[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)object[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&object[4]) & 0xF | 0x40u) << 48);
  *((_QWORD *)&__dst[0] + 1) = ((unint64_t)object[12] << 32) | ((unint64_t)object[13] << 40) | *(_DWORD *)&object[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&object[12] << 32) & 0xFF00000000000000 | ((unint64_t)object[14] << 48) | object[8] & 0x3F | 0x80;
  sub_2245664AC((unsigned __int8 *)__dst, object);
  v66 = operator new(0x28uLL);
  v67 = v66;
  v68 = *(_OWORD *)&object[16];
  *v66 = *(_OWORD *)object;
  v66[1] = v68;
  *((_DWORD *)v66 + 8) = *(_DWORD *)&object[32];
  *((_BYTE *)v66 + 36) = 0;
  v69 = HIBYTE(v397.__r_.__value_.__r.__words[2]);
  v70 = &v397;
  if ((v397.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v69 = v397.__r_.__value_.__l.__size_;
    v70 = (std::string *)v397.__r_.__value_.__r.__words[0];
  }
  *(_QWORD *)object = v70;
  *(_QWORD *)&object[8] = v69;
  *(_QWORD *)&object[16] = v66;
  *(_QWORD *)&object[24] = 36;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, oslog);
  v401 = (std::__fs::filesystem::path)oslog[0];
  memset(oslog, 0, 24);
  operator delete(v67);
  v71 = (std::__shared_weak_count *)v399;
  if (!v399)
    goto LABEL_107;
  v72 = (unint64_t *)(v399 + 8);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (v73)
  {
LABEL_107:
    if ((SHIBYTE(v397.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_108;
LABEL_111:
    operator delete(v397.__r_.__value_.__l.__data_);
    std::random_device::~random_device(&v396);
    if ((SHIBYTE(v402.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
  std::__shared_weak_count::__release_weak(v71);
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_111;
LABEL_108:
  std::random_device::~random_device(&v396);
  if ((SHIBYTE(v402.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_109:
    pn = v402.__pn_;
    goto LABEL_113;
  }
LABEL_112:
  sub_223197FA4(&pn, v402.__pn_.__r_.__value_.__l.__data_, v402.__pn_.__r_.__value_.__l.__size_);
LABEL_113:
  sub_22319C30C((uint64_t)&pn, &v401);
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_pn = &pn;
    else
      p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
    if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
    else
      v75 = pn.__r_.__value_.__l.__size_;
    sub_22319C4B8((void **)&v394.__r_.__value_.__l.__data_, p_pn, v75);
  }
  else
  {
    if ((*((_BYTE *)&pn.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v394 = pn;
      if (SHIBYTE(v401.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_116;
LABEL_128:
      if ((SHIBYTE(v402.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_129;
      goto LABEL_117;
    }
    sub_22319C3F4(&v394, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v401.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_128;
  }
  else if ((SHIBYTE(v401.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
LABEL_116:
  operator delete(v401.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v402.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_117:
    operator delete(v402.__pn_.__r_.__value_.__l.__data_);
LABEL_129:
  sub_22384BB48(&v400);
  if (**((int **)v400 + 7) > 3)
    goto LABEL_474;
  v76 = v400[72];
  v77 = sub_22322F254((uint64_t)v400, "OSLogSurrogateAppender", 1, 0);
  v78 = v77;
  if (!v76 && !v77)
    goto LABEL_474;
  sub_223195210((uint64_t)object);
  v79 = sub_2231813E8(&object[16], (uint64_t)"Keyframes persistence disabled. Using temporary folder: ", 56);
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = &v394;
  else
    v80 = (std::string *)v394.__r_.__value_.__r.__words[0];
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
  else
    v81 = v394.__r_.__value_.__l.__size_;
  sub_2231813E8(v79, (uint64_t)v80, v81);
  __srca = v76;
  if ((object[120] & 0x10) != 0)
  {
    v112 = *(_QWORD *)&object[112];
    if (*(_QWORD *)&object[112] < *(_QWORD *)&object[72])
    {
      *(_QWORD *)&object[112] = *(_QWORD *)&object[72];
      v112 = *(_QWORD *)&object[72];
    }
    v113 = *(const void **)&object[64];
    v82 = v112 - *(_QWORD *)&object[64];
    if ((unint64_t)(v112 - *(_QWORD *)&object[64]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_273;
  }
  else
  {
    if ((object[120] & 8) == 0)
    {
      v82 = 0;
      *((_BYTE *)&v402.__pn_.__r_.__value_.__s + 23) = 0;
      v83 = &v402;
      goto LABEL_209;
    }
    v113 = *(const void **)&object[40];
    v82 = *(_QWORD *)&object[56] - *(_QWORD *)&object[40];
    if (*(_QWORD *)&object[56] - *(_QWORD *)&object[40] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_273:
      sub_22316DBC0();
  }
  if (v82 >= 0x17)
  {
    v114 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v82 | 7) != 0x17)
      v114 = v82 | 7;
    v115 = v114 + 1;
    v83 = operator new(v114 + 1);
    v402.__pn_.__r_.__value_.__l.__size_ = v82;
    v402.__pn_.__r_.__value_.__r.__words[2] = v115 | 0x8000000000000000;
    v402.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
    goto LABEL_208;
  }
  *((_BYTE *)&v402.__pn_.__r_.__value_.__s + 23) = v82;
  v83 = &v402;
  if (v82)
LABEL_208:
    memmove(v83, v113, v82);
LABEL_209:
  *((_BYTE *)v83 + v82) = 0;
  *(_QWORD *)&__dst[0] = &v400;
  *((std::chrono::steady_clock::time_point *)&__dst[0] + 1) = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&__dst[1] = std::chrono::system_clock::now();
  DWORD2(__dst[1]) = 3;
  *(_QWORD *)&__dst[2] = "unknown file";
  DWORD2(__dst[2]) = 223;
  *(_QWORD *)&__dst[4] = 0;
  *(_QWORD *)&__dst[3] = "unknown function";
  *((_QWORD *)&__dst[3] + 1) = 0;
  if ((v402.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = &v402;
  else
    v116 = (std::__fs::filesystem::path *)v402.__pn_.__r_.__value_.__r.__words[0];
  v117 = **(_QWORD **)&__dst[0];
  v118 = (const char *)(**(_QWORD **)&__dst[0] + 16);
  v388 = v118;
  if (*(char *)(**(_QWORD **)&__dst[0] + 39) < 0)
  {
    v118 = *(const char **)(v117 + 16);
    v119 = *(_QWORD *)(v117 + 24);
    v121 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v121 & 1) != 0)
      goto LABEL_216;
  }
  else
  {
    v119 = *(unsigned __int8 *)(**(_QWORD **)&__dst[0] + 39);
    v120 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v120 & 1) != 0)
      goto LABEL_216;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)oslog);
    sub_223199C58("com.apple.cv3d", (unint64_t)oslog, &xmmword_255788F40);
    if (oslog[1].__r_.__value_.__s.__data_[0] && SHIBYTE(oslog[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(oslog[0].__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_216:
  if (byte_255788F57 >= 0)
    v122 = (const char *)&xmmword_255788F40;
  else
    v122 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v123 = byte_255788F57;
  else
    v123 = *((_QWORD *)&xmmword_255788F40 + 1);
  oslog[0].__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v122, v118);
  v124 = &oslog[0].__r_.__value_.__l.__size_;
  if (v123 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v123 >= 0x17)
  {
    v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17)
      v125 = v123 | 7;
    v126 = v125 + 1;
    v124 = (std::string::size_type *)operator new(v125 + 1);
    oslog[1].__r_.__value_.__r.__words[0] = v126 | 0x8000000000000000;
    oslog[0].__r_.__value_.__l.__size_ = (std::string::size_type)v124;
    oslog[0].__r_.__value_.__r.__words[2] = v123;
    goto LABEL_229;
  }
  oslog[1].__r_.__value_.__s.__data_[7] = v123;
  if (v123)
LABEL_229:
    memmove(v124, v122, v123);
  *((_BYTE *)v124 + v123) = 0;
  oslog[1].__r_.__value_.__s.__data_[8] = 1;
  v127 = &oslog[1].__r_.__value_.__s.__data_[16];
  if (v119 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v119 >= 0x17)
  {
    v128 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17)
      v128 = v119 | 7;
    v129 = v128 + 1;
    v127 = (std::string::value_type *)operator new(v128 + 1);
    oslog[2].__r_.__value_.__l.__size_ = v129 | 0x8000000000000000;
    oslog[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v127;
    oslog[2].__r_.__value_.__r.__words[0] = v119;
    goto LABEL_237;
  }
  oslog[2].__r_.__value_.__s.__data_[15] = v119;
  if (v119)
LABEL_237:
    memmove(v127, v118, v119);
  v127[v119] = 0;
  oslog[2].__r_.__value_.__s.__data_[16] = 1;
  v130 = oslog[0].__r_.__value_.__r.__words[0];
  if (oslog[2].__r_.__value_.__s.__data_[15] < 0)
    operator delete((void *)oslog[1].__r_.__value_.__r.__words[2]);
  if (oslog[1].__r_.__value_.__s.__data_[8] && oslog[1].__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)oslog[0].__r_.__value_.__l.__size_);
  if (oslog[0].__r_.__value_.__r.__words[0])
    os_release(oslog[0].__r_.__value_.__l.__data_);
  if (!v78 || !*(_QWORD *)(v78 + 24))
  {
    os_log_type_enabled(v130, OS_LOG_TYPE_INFO);
    LODWORD(oslog[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)oslog[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v116;
    v137 = (void *)_os_log_send_and_compose_impl();
    v138 = __srca;
    if (v137)
      free(v137);
    goto LABEL_460;
  }
  v131 = _os_log_pack_size();
  v132 = operator new(v131, (std::align_val_t)8uLL);
  v133 = (_QWORD *)operator new();
  *v133 = &off_24EC1F7F0;
  v133[1] = 0;
  v133[2] = 0;
  v133[3] = v132;
  v397.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  v397.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
  v398 = 0;
  v399 = 0;
  v397.__r_.__value_.__r.__words[2] = (std::string::size_type)v133;
  v134 = strlen((const char *)v116);
  if (v134 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v135 = v134;
  if (v134 >= 0x17)
  {
    v221 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v134 | 7) != 0x17)
      v221 = v134 | 7;
    v222 = v221 + 1;
    v136 = (std::string *)operator new(v221 + 1);
    pn.__r_.__value_.__l.__size_ = v135;
    pn.__r_.__value_.__r.__words[2] = v222 | 0x8000000000000000;
    pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v136;
    goto LABEL_400;
  }
  *((_BYTE *)&pn.__r_.__value_.__s + 23) = v134;
  v136 = &pn;
  if (v134)
LABEL_400:
    memcpy(v136, v116, v135);
  v136->__r_.__value_.__s.__data_[v135] = 0;
  v401.__pn_.__r_.__value_.__r.__words[0] = pn.__r_.__value_.__l.__size_;
  v223 = pn.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v401.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&pn.__r_.__value_.__r.__words[1] + 7);
  v224 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  v225 = operator new(0x38uLL);
  v225[1] = 0;
  v225[2] = 0;
  v225[3] = off_24EC1FA48;
  *v225 = &off_24EC1F9F8;
  v226 = v401.__pn_.__r_.__value_.__r.__words[0];
  v225[4] = v223;
  v225[5] = v226;
  *(_QWORD *)((char *)v225 + 47) = *(std::string::size_type *)((char *)v401.__pn_.__r_.__value_.__r.__words + 7);
  *((_BYTE *)v225 + 55) = v224;
  v401.__pn_.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)v401.__pn_.__r_.__value_.__r.__words + 7) = 0;
  v227 = (std::__shared_weak_count *)v399;
  v398 = (char *)(v225 + 3);
  v399 = (std::string::size_type)v225;
  if (v227)
  {
    v228 = (unint64_t *)&v227->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  oslog[0] = v397;
  v230 = (std::string::size_type)v398;
  if (v397.__r_.__value_.__r.__words[2])
  {
    v231 = (unint64_t *)(v397.__r_.__value_.__r.__words[2] + 8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
  v233 = (std::__shared_weak_count *)v399;
  oslog[1].__r_.__value_.__r.__words[0] = v230;
  oslog[1].__r_.__value_.__l.__size_ = v399;
  if (v399)
  {
    v234 = (unint64_t *)(v399 + 8);
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
    oslog[1].__r_.__value_.__r.__words[2] = v230;
    do
      v236 = __ldaxr(v234);
    while (__stlxr(v236 - 1, v234));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  else
  {
    oslog[1].__r_.__value_.__r.__words[2] = v230;
  }
  v237 = (std::__shared_weak_count *)v397.__r_.__value_.__r.__words[2];
  if (v397.__r_.__value_.__r.__words[2])
  {
    v238 = (unint64_t *)(v397.__r_.__value_.__r.__words[2] + 8);
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = oslog[0].__r_.__value_.__r.__words[0];
  if (*(char *)(oslog[1].__r_.__value_.__r.__words[2] + 31) >= 0)
    v241 = oslog[1].__r_.__value_.__r.__words[2] + 8;
  else
    v241 = *(_QWORD *)(oslog[1].__r_.__value_.__r.__words[2] + 8);
  v242 = _os_log_pack_fill();
  *(_DWORD *)v242 = 136315138;
  *(_QWORD *)(v242 + 4) = v241;
  v243 = operator new();
  v244 = *(unsigned __int8 *)(v117 + 39);
  v245 = v388;
  if ((v244 & 0x80u) != 0)
  {
    v245 = *(const char **)(v117 + 16);
    v244 = *(_QWORD *)(v117 + 24);
  }
  *(_QWORD *)v243 = v240;
  *(_OWORD *)(v243 + 8) = *(_OWORD *)&oslog[0].__r_.__value_.__r.__words[1];
  *(_OWORD *)&oslog[0].__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v243 + 24) = *(_OWORD *)&oslog[1].__r_.__value_.__l.__data_;
  *(_OWORD *)&oslog[1].__r_.__value_.__l.__data_ = 0uLL;
  *(_QWORD *)(v243 + 40) = v245;
  *(_QWORD *)(v243 + 48) = v244;
  *(_BYTE *)(v243 + 56) = 1;
  pn.__r_.__value_.__r.__words[0] = 0;
  v397.__r_.__value_.__r.__words[0] = v243;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v78 + 24) + 40))(*(_QWORD *)(v78 + 24), &v397);
  v246 = v397.__r_.__value_.__r.__words[0];
  v397.__r_.__value_.__r.__words[0] = 0;
  v138 = __srca;
  if (v246)
  {
    v247 = *(std::__shared_weak_count **)(v246 + 32);
    if (v247)
    {
      v248 = (unint64_t *)&v247->__shared_owners_;
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    v250 = *(std::__shared_weak_count **)(v246 + 16);
    if (v250)
    {
      v251 = (unint64_t *)&v250->__shared_owners_;
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (!v252)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
      }
    }
    MEMORY[0x227684CE8](v246, 0x10F0C40B62ED6C6);
    v253 = pn.__r_.__value_.__r.__words[0];
    pn.__r_.__value_.__r.__words[0] = 0;
    if (v253)
    {
      v254 = *(std::__shared_weak_count **)(v253 + 32);
      if (v254)
      {
        v255 = (unint64_t *)&v254->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = *(std::__shared_weak_count **)(v253 + 16);
      if (v257)
      {
        v258 = (unint64_t *)&v257->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      MEMORY[0x227684CE8](v253, 0x10F0C40B62ED6C6);
    }
  }
  v260 = (std::__shared_weak_count *)oslog[1].__r_.__value_.__l.__size_;
  if (oslog[1].__r_.__value_.__l.__size_)
  {
    v261 = (unint64_t *)(oslog[1].__r_.__value_.__l.__size_ + 8);
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = (std::__shared_weak_count *)oslog[0].__r_.__value_.__r.__words[2];
  if (oslog[0].__r_.__value_.__r.__words[2])
  {
    v264 = (unint64_t *)(oslog[0].__r_.__value_.__r.__words[2] + 8);
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
LABEL_460:
  if (v138)
  {
    v266 = &v402;
    if ((v402.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v266 = (std::__fs::filesystem::path *)v402.__pn_.__r_.__value_.__r.__words[0];
    sub_22322C138((uint64_t)__dst, "%s", (const char *)v266);
    sub_223182C08((uint64_t)__dst);
  }
  sub_223182C08((uint64_t)__dst);
  v267 = *(std::__shared_weak_count **)&__dst[4];
  if (*(_QWORD *)&__dst[4])
  {
    v268 = (unint64_t *)(*(_QWORD *)&__dst[4] + 8);
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  if (SHIBYTE(v402.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v402.__pn_.__r_.__value_.__l.__data_);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v270 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v270;
  *(_QWORD *)&object[24] = MEMORY[0x24BEDB848] + 16;
  if ((object[111] & 0x80000000) != 0)
    operator delete(*(void **)&object[88]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&object[128]);
LABEL_474:
  memset(object, 0, 24);
  v271 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v272 = &v394;
  else
    v272 = (std::string *)v394.__r_.__value_.__r.__words[0];
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v271 = v394.__r_.__value_.__l.__size_;
  sub_2231816F0((std::string *)object, v272, (std::string *)((char *)v272 + v271));
  v273 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(v0 + 1528) + 176))(*(_QWORD *)(v0 + 1528), object);
  v275 = v273;
  if ((object[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)object);
    if ((v275 & 1) != 0)
      goto LABEL_493;
  }
  else if ((v273 & 1) != 0)
  {
    goto LABEL_493;
  }
  memset(object, 0, 24);
  v276 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v277 = &v394;
  else
    v277 = (std::string *)v394.__r_.__value_.__r.__words[0];
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v276 = v394.__r_.__value_.__l.__size_;
  sub_2231816F0((std::string *)object, v277, (std::string *)((char *)v277 + v276));
  v278 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(v0 + 1528) + 128))(*(_QWORD *)(v0 + 1528), object);
  v279 = v278;
  if ((object[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)object);
    if ((v279 & 1) != 0)
      goto LABEL_493;
  }
  else if ((v278 & 1) != 0)
  {
    goto LABEL_493;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 228, (uint64_t)"directory_created", 17, (uint64_t)"Unable to create data storage directory", 39, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_493:
  v280 = (_OWORD *)(v0 + 648);
  v281 = *(unsigned __int8 *)(v0 + 648);
  if (v281 == 2)
  {
    v286 = (_QWORD *)operator new();
    *v286 = &off_24EC5AE38;
    v284 = *(_QWORD *)(v0 + 1240);
    *(_QWORD *)(v0 + 1240) = v286;
    if (v284)
      goto LABEL_503;
  }
  else
  {
    if (v281 != 1)
    {
      if (*(_BYTE *)(v0 + 648))
      {
        v284 = *(_QWORD *)(v0 + 1240);
        *(_QWORD *)(v0 + 1240) = 0;
        if (!v284)
          goto LABEL_504;
      }
      else
      {
        v282 = operator new();
        *(_QWORD *)v282 = &off_24EC5ADE8;
        v283 = *(_OWORD *)(v0 + 664);
        *(_OWORD *)(v282 + 8) = *v280;
        *(_OWORD *)(v282 + 24) = v283;
        *(_OWORD *)(v282 + 40) = *(_OWORD *)(v0 + 680);
        *(_QWORD *)(v282 + 56) = *(_QWORD *)(v0 + 808);
        v284 = *(_QWORD *)(v0 + 1240);
        *(_QWORD *)(v0 + 1240) = v282;
        if (!v284)
          goto LABEL_504;
      }
LABEL_503:
      (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
      goto LABEL_504;
    }
    v285 = (_QWORD *)operator new();
    *v285 = &off_24EC5AE10;
    memcpy(v285 + 1, (const void *)(v0 + 576), 0x138uLL);
    v284 = *(_QWORD *)(v0 + 1240);
    *(_QWORD *)(v0 + 1240) = v285;
    if (v284)
      goto LABEL_503;
  }
LABEL_504:
  if (*(_BYTE *)v280 == 1)
  {
    v287 = (_QWORD *)operator new();
    v288 = &off_24EC5BE38;
LABEL_508:
    *v287 = v288;
    memcpy(v287 + 1, (const void *)(v0 + 576), 0x138uLL);
    v289 = *(_QWORD *)(v0 + 1248);
    *(_QWORD *)(v0 + 1248) = v287;
    if (!v289)
      goto LABEL_510;
    goto LABEL_509;
  }
  if (!*(_BYTE *)v280)
  {
    v287 = (_QWORD *)operator new();
    v288 = &off_24EC5BE10;
    goto LABEL_508;
  }
  v289 = *(_QWORD *)(v0 + 1248);
  *(_QWORD *)(v0 + 1248) = 0;
  if (v289)
LABEL_509:
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
LABEL_510:
  *(_QWORD *)&__dst[0] = &off_24EC5B600;
  *((_QWORD *)&__dst[0] + 1) = v0;
  *((_QWORD *)&__dst[1] + 1) = __dst;
  v290 = *(_QWORD *)(v0 + 1232);
  *(_QWORD *)(v0 + 1232) = 0;
  if (v290)
  {
    v291 = sub_22318433C(v290, v274);
    MEMORY[0x227684CE8](v291, 0x10A0C408E81D1CELL);
  }
  v293 = operator new();
  v294 = *(_QWORD *)(v0 + 1528);
  v295 = *(_QWORD *)(v0 + 104);
  v296 = *(_DWORD *)(v0 + 112);
  v297 = *(_DWORD *)(v0 + 1672);
  v298 = *(unsigned __int8 *)(v0 + 53);
  v299 = (uint64_t)v404;
  if (!v404)
    goto LABEL_515;
  if (v404 != v403)
  {
    v299 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v404 + 16))(v404, v292);
LABEL_515:
    *(_QWORD *)&object[24] = v299;
    goto LABEL_519;
  }
  *(_QWORD *)&object[24] = object;
  (*(void (**)(uint64_t *, _BYTE *))(v403[0] + 24))(v403, object);
LABEL_519:
  v300 = *((_QWORD *)&__dst[1] + 1);
  if (!*((_QWORD *)&__dst[1] + 1))
  {
LABEL_522:
    oslog[1].__r_.__value_.__r.__words[0] = v300;
    goto LABEL_524;
  }
  if (*((_OWORD **)&__dst[1] + 1) != __dst)
  {
    v300 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)&__dst[1] + 1) + 16))(*((_QWORD *)&__dst[1] + 1), v292);
    goto LABEL_522;
  }
  oslog[1].__r_.__value_.__r.__words[0] = (std::string::size_type)oslog;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)&__dst[0] + 24))((uint64_t)__dst, oslog);
LABEL_524:
  sub_223184080(v293, (const void *)(v0 + 576), v294, &v394, v295, v296, v297, v298 != 0, object, oslog);
  data = (std::string *)oslog[1].__r_.__value_.__l.__data_;
  if ((std::string *)oslog[1].__r_.__value_.__l.__data_ == oslog)
  {
    v303 = 4;
    data = oslog;
  }
  else
  {
    if (!oslog[1].__r_.__value_.__r.__words[0])
      goto LABEL_529;
    v303 = 5;
  }
  (*(void (**)(void))(data->__r_.__value_.__r.__words[0] + 8 * v303))();
LABEL_529:
  v304 = *(_QWORD **)&object[24];
  if (*(_BYTE **)&object[24] == object)
  {
    v305 = 4;
    v304 = object;
  }
  else
  {
    if (!*(_QWORD *)&object[24])
      goto LABEL_534;
    v305 = 5;
  }
  (*(void (**)(void))(*v304 + 8 * v305))();
LABEL_534:
  v306 = *(_QWORD *)(v0 + 1232);
  *(_QWORD *)(v0 + 1232) = v293;
  if (v306)
  {
    v307 = sub_22318433C(v306, v301);
    MEMORY[0x227684CE8](v307, 0x10A0C408E81D1CELL);
  }
  if (*(_BYTE *)(v0 + 80) && *(_BYTE *)(v0 + 88))
  {
    sub_22384BC3C(object, v0);
    v308 = v0 + 1808;
    sub_223198030(v0 + 1800, *(_QWORD **)(v0 + 1808));
    v309 = *(_QWORD **)&object[8];
    *(_QWORD *)(v0 + 1800) = *(_QWORD *)object;
    *(_QWORD *)(v0 + 1808) = v309;
    v310 = *(_QWORD *)&object[16];
    *(_QWORD *)(v0 + 1816) = *(_QWORD *)&object[16];
    if (v310)
    {
      v309[2] = v308;
      *(_QWORD *)object = &object[8];
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      v309 = 0;
    }
    else
    {
      *(_QWORD *)(v0 + 1800) = v308;
    }
    sub_223198030((uint64_t)object, v309);
  }
  sub_223227930((uint64_t *)object);
  v311 = *(_QWORD *)(v0 + 1256);
  *(_QWORD *)(v0 + 1256) = 0;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  if (*(_BYTE *)(v0 + 768))
  {
    v312 = operator new();
    sub_223806874(v312, *(_DWORD *)(v0 + 1672));
  }
  else
  {
    v312 = operator new();
    sub_22380208C(v312, (void ***)(v0 + 1208), *(_DWORD *)(v0 + 1672));
  }
  v313 = *(_QWORD *)(v0 + 1256);
  *(_QWORD *)(v0 + 1256) = v312;
  if (v313)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
    v312 = *(_QWORD *)(v0 + 1256);
  }
  *(_DWORD *)(*(_QWORD *)(v312 + 8) + 36) = *(_DWORD *)(v0 + 600);
  v314 = *(_QWORD *)(v0 + 796);
  *(_DWORD *)(v312 + 40) = *(_DWORD *)(v0 + 804);
  *(_QWORD *)(v312 + 32) = v314;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1256) + 8) + 24) = *(_DWORD *)(v0 + 96);
  if (sub_22321D244(v0 + 8, 32))
  {
    v320 = *(_QWORD *)(v0 + 1632);
    *(_QWORD *)(v0 + 1632) = 0;
    if (v320)
    {
      v321 = *(_QWORD *)(v320 + 208);
      *(_QWORD *)(v320 + 208) = 0;
      if (v321)
      {
        v322 = sub_223889410(v321);
        MEMORY[0x227684CE8](v322, 0x10A0C40719C5C5ELL);
      }
      v323 = *(void **)(v320 + 152);
      if (v323)
        free(v323);
      *(_QWORD *)(v320 + 152) = 0;
      sub_2238895FC(v320 + 72);
      MEMORY[0x227684CE8](v320, 0x1030C40BFCA00A0);
    }
    v324 = operator new();
    sub_2238B84DC(v324, (_BYTE *)(v0 + 696));
    v325 = *(_QWORD *)(v0 + 1632);
    *(_QWORD *)(v0 + 1632) = v324;
    if (v325)
    {
      v326 = *(_QWORD *)(v325 + 208);
      *(_QWORD *)(v325 + 208) = 0;
      if (v326)
      {
        v327 = sub_223889410(v326);
        MEMORY[0x227684CE8](v327, 0x10A0C40719C5C5ELL);
      }
      v328 = *(void **)(v325 + 152);
      if (v328)
        free(v328);
      *(_QWORD *)(v325 + 152) = 0;
      sub_2238895FC(v325 + 72);
      MEMORY[0x227684CE8](v325, 0x1030C40BFCA00A0);
    }
  }
  v329 = *(_QWORD *)(v0 + 1648);
  if (v329)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v329 + 112) + 16))(*(_QWORD *)(v329 + 112));
    (*(void (**)(_QWORD))(**(_QWORD **)(v329 + 80) + 32))(*(_QWORD *)(v329 + 80));
    if (*(_BYTE *)(v329 + 184))
      *(_BYTE *)(v329 + 184) = 0;
    if (*(_BYTE *)(v329 + 104))
      *(_BYTE *)(v329 + 104) = 0;
  }
  v330 = *(_QWORD *)(v0 + 1936);
  if (v330)
    sub_223AF121C(v330);
  v331 = *(_QWORD *)(v0 + 1952);
  if (v331)
    sub_223B79198(v331);
  sub_22322797C((void **)object, v315, v316, v317, v318, v319);
  v332 = (_QWORD *)*((_QWORD *)&__dst[1] + 1);
  if (*((_OWORD **)&__dst[1] + 1) == __dst)
  {
    v333 = 4;
    v332 = __dst;
  }
  else
  {
    if (!*((_QWORD *)&__dst[1] + 1))
      goto LABEL_576;
    v333 = 5;
  }
  (*(void (**)(void))(*v332 + 8 * v333))();
LABEL_576:
  v334 = v404;
  if (v404 == v403)
  {
    v335 = 4;
    v334 = v403;
  }
  else
  {
    if (!v404)
      goto LABEL_581;
    v335 = 5;
  }
  (*(void (**)(void))(*v334 + 8 * v335))();
LABEL_581:
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
}

void sub_22384B208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char *a46,void *__p,void *a48,int a49,__int16 a50,char a51,char a52,uint64_t a53)
{
  char *v54;
  uint64_t v55;

  if ((_BYTE)a53 && a52 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x14A0]);
  if (a27 < 0)
    operator delete(a22);
  v54 = a46;
  if (a46 == &a43)
  {
    v55 = 4;
    v54 = &a43;
  }
  else
  {
    if (!a46)
      goto LABEL_11;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_11:
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_22384B94C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 208);
    *(_QWORD *)(v2 + 208) = 0;
    if (v3)
    {
      v4 = sub_223889410(v3);
      MEMORY[0x227684CE8](v4, 0x10A0C40719C5C5ELL);
    }
    v5 = *(void **)(v2 + 152);
    if (v5)
      free(v5);
    *(_QWORD *)(v2 + 152) = 0;
    sub_2238895FC(v2 + 72);
    MEMORY[0x227684CE8](v2, 0x1030C40BFCA00A0);
  }
  return a1;
}

uint64_t *sub_22384B9CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22318433C();
    MEMORY[0x227684CE8](v3, 0x10A0C408E81D1CELL);
  }
  return a1;
}

uint64_t *sub_22384BA10(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_223847608(v2);
    MEMORY[0x227684CE8](v3, 0x10A2C403CBED27ELL);
  }
  return a1;
}

void sub_22384BA54(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC898);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC898))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC890);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC898);
  }
  *a1 = qword_2540CC890;
}

void sub_22384BAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC898);
  _Unwind_Resume(a1);
}

void sub_22384BB48(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC8A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC8A8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kf");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC8A0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC8A8);
  }
  *a1 = qword_2540CC8A0;
}

void sub_22384BBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC8A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC8A8);
  _Unwind_Resume(a1);
}

void sub_22384BC3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  int64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  void **v32;
  void **v33;
  char *v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  unsigned __int8 v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  std::string *v42;
  std::string *v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  const char *v52;
  size_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  size_t v61;
  void *v62;
  _QWORD *v63;
  unint64_t *v64;
  char *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  int v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::string::size_type v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  std::string *v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unsigned __int8 v109;
  const char *v110;
  size_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  size_t v119;
  void *v120;
  _QWORD *v121;
  size_t v122;
  std::string::size_type v123;
  std::string *v124;
  void *v125;
  unsigned __int8 v126;
  const char *v127;
  size_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  size_t v136;
  void *v137;
  _QWORD *v138;
  unint64_t *v139;
  char *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::string::size_type v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::string::size_type v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  std::string *v176;
  const char *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t *v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v187;
  size_t v188;
  void **v189;
  unint64_t v190;
  const void *v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  const char *v196;
  size_t v197;
  unsigned __int8 v198;
  unsigned __int8 v199;
  const char *v200;
  size_t v201;
  std::string::size_type *p_size;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  NSObject *v208;
  size_t v209;
  void *v210;
  _QWORD *v211;
  size_t v212;
  std::string::size_type v213;
  std::string *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  std::string::size_type v218;
  char v219;
  _QWORD *v220;
  std::string::size_type v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::string::size_type v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  std::string::size_type v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::string::size_type v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  const char *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  int v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  const char *v270;
  size_t v271;
  _BYTE *v272;
  uint64_t *v273;
  unsigned __int8 v274;
  const char *v275;
  size_t v276;
  _BYTE *v277;
  uint64_t v278;
  uint64_t v279;
  _BYTE *v280;
  uint64_t v281;
  uint64_t v282;
  NSObject *v283;
  uint64_t v284;
  size_t v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const char *v296;
  std::string::size_type v297;
  _QWORD *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::string::size_type v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  int v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  void *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  uint64_t **v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  std::string *v331;
  uint64_t v332;
  size_t v333;
  const char *v334;
  unsigned __int8 v335;
  unsigned __int8 v336;
  const char *v337;
  size_t v338;
  std::string::size_type *v339;
  uint64_t v340;
  uint64_t v341;
  _BYTE *v342;
  NSObject *v343;
  uint64_t v344;
  uint64_t v345;
  size_t v346;
  void *v347;
  _QWORD *v348;
  unint64_t *v349;
  char *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::string::size_type v359;
  char *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  std::string::size_type v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::string::size_type v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  void *v386;
  std::string *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  _QWORD *v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  size_t v395;
  std::string::size_type v396;
  std::string *v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  uint64_t v404;
  std::string::size_type v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  std::string::size_type v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  const char *v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  void **v433;
  void **v434;
  std::string *v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *exception;
  _QWORD *v442;
  _QWORD *v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  const char *v449;
  const char *v450;
  const char *v451;
  int v452;
  int v453;
  uint64_t v454;
  __int128 v455;
  int v456;
  const char *v457;
  uint64_t v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  char *__s;
  char *__sa;
  char *__sb;
  std::string *v465;
  std::string v466;
  __int128 v467;
  char *v468;
  const char *v469;
  uint64_t v470;
  std::__shared_weak_count *v471;
  uint64_t v472;
  void *v473;
  void *v474;
  char *v475;
  char v476;
  void *v477;
  uint64_t *v478;
  uint64_t *v479;
  std::string *v480;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  void *v482;
  int v483;
  const char *v484;
  int v485;
  void *v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  void *v489;
  char v490;
  char v491;
  char v492;
  char v493;
  _BYTE v494[16];
  void *v495;
  char v496;
  char v497;
  void *v498;
  char v499;
  void *v500;
  char v501;
  char v502;
  char v503;
  char v504;
  std::string v505;
  std::string v506;
  __int128 v507;
  char *v508;
  std::string v509;
  char *v510;
  char *v511;
  std::string v512;
  void *__dst[2];
  int64_t v514;
  _BYTE __p[56];
  unint64_t v516;
  const void *v517;
  unint64_t v518;
  void *v519;
  void *v520;
  char v521;
  char v522;
  char v523;
  unint64_t v524;
  int v525;
  uint64_t v526;
  _BYTE v527[24];
  __int128 v528;
  char *v529;
  void *v530;
  uint64_t v531;
  std::__shared_weak_count *v532;
  void *v533;
  char v534;
  char v535;
  char v536;
  char v537;
  std::string v538;
  _BYTE v539[24];
  const char *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  uint64_t v543;

  v543 = *MEMORY[0x24BDAC8D0];
  if ((!*(_BYTE *)(a2 + 80) || !*(_BYTE *)(a2 + 88))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 2042, (uint64_t)"config_.common.persistence.storage_path && config_.common.persistence.enabled", 77, (uint64_t)"Persistence data cannot be loaded if persistence is not set up and enabled", 74, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FF97F8(a2 + 56, &v505);
  sub_22400475C((uint64_t)&v505, *(_QWORD *)(a2 + 1528), (uint64_t)v494);
  if (!v504)
  {
    sub_22384BA54(&v506);
    if (**(int **)(v506.__r_.__value_.__r.__words[0] + 56) > 4
      || (v19 = *(unsigned __int8 *)(v506.__r_.__value_.__r.__words[0] + 72),
          v20 = sub_22322F254((uint64_t)v506.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0),
          v21 = v20,
          !v19)
      && !v20)
    {
LABEL_195:
      a1[2] = 0;
      a1[1] = 0;
      *a1 = a1 + 1;
      goto LABEL_727;
    }
    v480 = &v506;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v482 = (void *)std::chrono::system_clock::now().__d_.__rep_;
    v483 = 4;
    v484 = "unknown file";
    v485 = 2049;
    v487 = 0;
    v488 = 0;
    v486 = "unknown function";
    v22 = (std::string *)v505.__r_.__value_.__r.__words[0];
    if ((v505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v505;
    if (v504)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    __sa = (char *)v22;
    sub_22456A158((uint64_t)v494, &v466);
    v456 = v19;
    if ((v466.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v466;
    else
      v23 = (std::string *)v466.__r_.__value_.__r.__words[0];
    v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v24 = v480->__r_.__value_.__r.__words[0];
    v25 = (const char *)(v480->__r_.__value_.__r.__words[0] + 16);
    v451 = v25;
    if (*(char *)(v480->__r_.__value_.__r.__words[0] + 39) < 0)
    {
      v25 = *(const char **)(v24 + 16);
      v26 = *(_QWORD *)(v24 + 24);
      v51 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v51 & 1) != 0)
        goto LABEL_90;
    }
    else
    {
      v26 = *(unsigned __int8 *)(v480->__r_.__value_.__r.__words[0] + 39);
      v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v27 & 1) != 0)
        goto LABEL_90;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_90:
    if (byte_255788F57 >= 0)
      v52 = (const char *)&xmmword_255788F40;
    else
      v52 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v53 = byte_255788F57;
    else
      v53 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)__p = os_log_create(v52, v25);
    v54 = &__p[8];
    if (v53 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v53 >= 0x17)
    {
      v55 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17)
        v55 = v53 | 7;
      v56 = v55 + 1;
      v54 = operator new(v55 + 1);
      *(_QWORD *)&__p[24] = v56 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v54;
      *(_QWORD *)&__p[16] = v53;
    }
    else
    {
      __p[31] = v53;
      if (!v53)
      {
LABEL_104:
        v54[v53] = 0;
        __p[32] = 1;
        v57 = &__p[40];
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v26 >= 0x17)
        {
          v58 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v58 = v26 | 7;
          v59 = v58 + 1;
          v57 = operator new(v58 + 1);
          v516 = v59 | 0x8000000000000000;
          *(_QWORD *)&__p[40] = v57;
          *(_QWORD *)&__p[48] = v26;
        }
        else
        {
          HIBYTE(v516) = v26;
          if (!v26)
            goto LABEL_112;
        }
        memmove(v57, v25, v26);
LABEL_112:
        v57[v26] = 0;
        LOBYTE(v517) = 1;
        v60 = *(NSObject **)__p;
        if (SHIBYTE(v516) < 0)
          operator delete(*(void **)&__p[40]);
        if (__p[32] && (__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        if (*(_QWORD *)__p)
          os_release(*(void **)__p);
        if (v21 && *(_QWORD *)(v21 + 24))
        {
          v61 = _os_log_pack_size();
          v62 = operator new(v61, (std::align_val_t)8uLL);
          v63 = (_QWORD *)operator new();
          v63[1] = 0;
          v64 = v63 + 1;
          *v63 = &off_24EC1F7F0;
          v63[2] = 0;
          v63[3] = v62;
          v538.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
          v538.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
          *(_QWORD *)v539 = 0;
          *(_QWORD *)&v539[8] = 0;
          v538.__r_.__value_.__r.__words[2] = (std::string::size_type)v63;
          sub_22388C0C0((uint64_t)__p, __sa, (const char **)&v509.__r_.__value_.__l.__data_);
          v65 = (char *)operator new(0x50uLL);
          v66 = (std::__shared_weak_count *)v65;
          *(_QWORD *)v65 = &off_24EC20730;
          *((_QWORD *)v65 + 3) = off_24EC20780;
          v67 = *(_QWORD *)&__p[48];
          *((_QWORD *)v65 + 6) = *(_QWORD *)&__p[24];
          *((_QWORD *)v65 + 1) = 0;
          v68 = (unint64_t *)(v65 + 8);
          *((_QWORD *)v65 + 2) = 0;
          *((_OWORD *)v65 + 2) = *(_OWORD *)&__p[8];
          *(_OWORD *)(v65 + 56) = *(_OWORD *)&__p[32];
          *((_QWORD *)v65 + 9) = v67;
          *(_QWORD *)v539 = v65 + 24;
          *(_QWORD *)&v539[8] = v65;
          *(_QWORD *)v527 = v62;
          *(_QWORD *)&v527[8] = v62;
          *(_QWORD *)&v527[16] = v63;
          do
            v69 = __ldxr(v64);
          while (__stxr(v69 + 1, v64));
          *(_QWORD *)&v528 = v65 + 24;
          *((_QWORD *)&v528 + 1) = v65;
          do
            v70 = __ldxr(v68);
          while (__stxr(v70 + 1, v68));
          v529 = v65 + 24;
          do
            v71 = __ldaxr(v68);
          while (__stlxr(v71 - 1, v68));
          if (!v71)
          {
            (*(void (**)(char *))(*(_QWORD *)v65 + 16))(v65);
            std::__shared_weak_count::__release_weak(v66);
          }
          v72 = (std::__shared_weak_count *)v538.__r_.__value_.__r.__words[2];
          if (v538.__r_.__value_.__r.__words[2])
          {
            v73 = (unint64_t *)(v538.__r_.__value_.__r.__words[2] + 8);
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v75 = *(_QWORD *)v527;
          if (v529[31] >= 0)
            v76 = v529 + 8;
          else
            v76 = (char *)*((_QWORD *)v529 + 1);
          if (v529[55] >= 0)
            v77 = v529 + 32;
          else
            v77 = (char *)*((_QWORD *)v529 + 4);
          v78 = _os_log_pack_fill();
          *(_DWORD *)v78 = 136315394;
          *(_QWORD *)(v78 + 4) = v76;
          *(_WORD *)(v78 + 12) = 2080;
          *(_QWORD *)(v78 + 14) = v77;
          v79 = operator new();
          v80 = *(unsigned __int8 *)(v24 + 39);
          v81 = v451;
          if ((v80 & 0x80u) != 0)
          {
            v81 = *(const char **)(v24 + 16);
            v80 = *(_QWORD *)(v24 + 24);
          }
          *(_QWORD *)v79 = v75;
          *(_OWORD *)(v79 + 8) = *(_OWORD *)&v527[8];
          *(_QWORD *)&v527[8] = 0;
          *(_QWORD *)&v527[16] = 0;
          *(_OWORD *)(v79 + 24) = v528;
          v528 = 0uLL;
          *(_QWORD *)(v79 + 40) = v81;
          *(_QWORD *)(v79 + 48) = v80;
          *(_BYTE *)(v79 + 56) = 16;
          v538.__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)__p = v79;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), __p);
          v82 = v456;
          v83 = *(_QWORD *)__p;
          *(_QWORD *)__p = 0;
          if (v83)
          {
            v84 = *(std::__shared_weak_count **)(v83 + 32);
            if (v84)
            {
              p_shared_owners = (unint64_t *)&v84->__shared_owners_;
              do
                v86 = __ldaxr(p_shared_owners);
              while (__stlxr(v86 - 1, p_shared_owners));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v87 = *(std::__shared_weak_count **)(v83 + 16);
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
            v90 = v538.__r_.__value_.__r.__words[0];
            v538.__r_.__value_.__r.__words[0] = 0;
            if (v90)
            {
              v91 = *(std::__shared_weak_count **)(v90 + 32);
              if (v91)
              {
                v92 = (unint64_t *)&v91->__shared_owners_;
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 - 1, v92));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              v94 = *(std::__shared_weak_count **)(v90 + 16);
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
            }
          }
          v97 = (std::__shared_weak_count *)*((_QWORD *)&v528 + 1);
          if (*((_QWORD *)&v528 + 1))
          {
            v98 = (unint64_t *)(*((_QWORD *)&v528 + 1) + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v100 = *(std::__shared_weak_count **)&v527[16];
          if (*(_QWORD *)&v527[16])
          {
            v101 = (unint64_t *)(*(_QWORD *)&v527[16] + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
        }
        else
        {
          os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = __sa;
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = v509.__r_.__value_.__r.__words[0];
          v103 = (void *)_os_log_send_and_compose_impl();
          v82 = v456;
          if (v103)
            free(v103);
        }
        if (SHIBYTE(v466.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v466.__r_.__value_.__l.__data_);
        if (v82)
        {
          if ((v505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v104 = &v505;
          else
            v104 = (std::string *)v505.__r_.__value_.__r.__words[0];
          if (v504)
          {
            v443 = __cxa_allocate_exception(8uLL);
            *v443 = &off_24EC1FCC0;
            __cxa_throw(v443, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
          }
          sub_22456A158((uint64_t)v494, (std::string *)__p);
          if (__p[23] >= 0)
            v105 = __p;
          else
            v105 = *(const char **)__p;
          sub_22322C138((uint64_t)&v480, "Unable to load metadata folder %s. Error: %s", (const char *)v104, v105);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          sub_223182C08((uint64_t)&v480);
        }
        sub_223182C08((uint64_t)&v480);
        v106 = v488;
        if (v488)
        {
          v107 = (unint64_t *)&v488->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        goto LABEL_195;
      }
    }
    memmove(v54, v52, v53);
    goto LABEL_104;
  }
  v4 = *(_QWORD *)(a2 + 1528);
  sub_223FF9988(a2 + 56, (std::string *)__p);
  __s = (char *)a2;
  sub_2238CFF9C(v4, (uint64_t)&v505, (uint64_t)__p, *(_QWORD **)(a2 + 1224), (uint64_t)a1);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_22381BEC0(*(_QWORD *)(a2 + 1224), (uint64_t)&v505, *(_QWORD *)(a2 + 1528), (uint64_t)&v480);
  if (!v493)
  {
    sub_22384BA54(__dst);
    if (**((int **)__dst[0] + 7) > 4)
      goto LABEL_714;
    v28 = *((unsigned __int8 *)__dst[0] + 72);
    v29 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v30 = v29;
    if (!v28 && !v29)
      goto LABEL_714;
    *(_QWORD *)v527 = __dst;
    *(std::chrono::steady_clock::time_point *)&v527[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v527[16] = std::chrono::system_clock::now();
    LODWORD(v528) = 4;
    *((_QWORD *)&v528 + 1) = "unknown file";
    LODWORD(v529) = 2061;
    v532 = 0;
    v530 = "unknown function";
    v531 = 0;
    if ((v505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v505;
    else
      v31 = (std::string *)v505.__r_.__value_.__r.__words[0];
    if (v493)
    {
      v442 = __cxa_allocate_exception(8uLL);
      *v442 = &off_24EC1FCC0;
      __cxa_throw(v442, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    v32 = (void **)v482;
    if (!v492)
      v32 = 0;
    if (SHIBYTE(v484) >= 0)
      v33 = &v482;
    else
      v33 = v32;
    if (v492)
      v34 = (char *)v33;
    else
      v34 = (char *)&unk_2246C9618;
    __sb = v34;
    v35 = **(_QWORD **)v527;
    v36 = (const char *)(**(_QWORD **)v527 + 16);
    v449 = v36;
    if (*(char *)(**(_QWORD **)v527 + 39) < 0)
    {
      v36 = *(const char **)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
    }
    else
    {
      v37 = *(unsigned __int8 *)(**(_QWORD **)v527 + 39);
    }
    v452 = v28;
    v458 = a1[2];
    v109 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v109 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v110 = (const char *)&xmmword_255788F40;
    else
      v110 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v111 = byte_255788F57;
    else
      v111 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)__p = os_log_create(v110, v36);
    v112 = &__p[8];
    if (v111 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v111 >= 0x17)
    {
      v448 = a1;
      v113 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v111 | 7) != 0x17)
        v113 = v111 | 7;
      v114 = v113 + 1;
      v112 = operator new(v113 + 1);
      *(_QWORD *)&__p[24] = v114 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v112;
      *(_QWORD *)&__p[16] = v111;
      a1 = v448;
    }
    else
    {
      __p[31] = v111;
      if (!v111)
      {
LABEL_212:
        v112[v111] = 0;
        __p[32] = 1;
        v115 = &__p[40];
        if (v37 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v37 >= 0x17)
        {
          v116 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17)
            v116 = v37 | 7;
          v117 = v116 + 1;
          v115 = operator new(v116 + 1);
          v516 = v117 | 0x8000000000000000;
          *(_QWORD *)&__p[40] = v115;
          *(_QWORD *)&__p[48] = v37;
        }
        else
        {
          HIBYTE(v516) = v37;
          if (!v37)
          {
LABEL_220:
            v115[v37] = 0;
            LOBYTE(v517) = 1;
            v118 = *(NSObject **)__p;
            if (SHIBYTE(v516) < 0)
              operator delete(*(void **)&__p[40]);
            if (__p[32] && (__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
            if (*(_QWORD *)__p)
              os_release(*(void **)__p);
            if (!v30 || !*(_QWORD *)(v30 + 24))
            {
              os_log_type_enabled(v118, OS_LOG_TYPE_ERROR);
              *(_DWORD *)__p = 136315650;
              *(_QWORD *)&__p[4] = v31;
              *(_WORD *)&__p[12] = 2080;
              *(_QWORD *)&__p[14] = __sb;
              *(_WORD *)&__p[22] = 2048;
              *(_QWORD *)&__p[24] = v458;
              v125 = (void *)_os_log_send_and_compose_impl();
              if (v125)
                free(v125);
              goto LABEL_817;
            }
            v119 = _os_log_pack_size();
            v120 = operator new(v119, (std::align_val_t)8uLL);
            v121 = (_QWORD *)operator new();
            *v121 = &off_24EC1F7F0;
            v121[1] = 0;
            v121[2] = 0;
            v121[3] = v120;
            v466.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
            v466.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
            v467 = 0uLL;
            v466.__r_.__value_.__r.__words[2] = (std::string::size_type)v121;
            v122 = strlen((const char *)v31);
            if (v122 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v123 = v122;
            if (v122 >= 0x17)
            {
              v393 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v122 | 7) != 0x17)
                v393 = v122 | 7;
              v394 = v393 + 1;
              v124 = (std::string *)operator new(v393 + 1);
              v506.__r_.__value_.__r.__words[2] = v394 | 0x8000000000000000;
              v506.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
              v506.__r_.__value_.__l.__size_ = v123;
            }
            else
            {
              *((_BYTE *)&v506.__r_.__value_.__s + 23) = v122;
              v124 = &v506;
              if (!v122)
              {
LABEL_753:
                v124->__r_.__value_.__s.__data_[v123] = 0;
                v395 = strlen(__sb);
                if (v395 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v396 = v395;
                if (v395 >= 0x17)
                {
                  v398 = (v395 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v395 | 7) != 0x17)
                    v398 = v395 | 7;
                  v399 = v398 + 1;
                  v397 = (std::string *)operator new(v398 + 1);
                  v509.__r_.__value_.__r.__words[2] = v399 | 0x8000000000000000;
                  v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v397;
                  v509.__r_.__value_.__l.__size_ = v396;
                }
                else
                {
                  *((_BYTE *)&v509.__r_.__value_.__s + 23) = v395;
                  v397 = &v509;
                  if (!v395)
                    goto LABEL_761;
                }
                memcpy(v397, __sb, v396);
LABEL_761:
                v397->__r_.__value_.__s.__data_[v396] = 0;
                *(_QWORD *)&__p[16] = v506.__r_.__value_.__l.__size_;
                *(_QWORD *)&__p[23] = *(std::string::size_type *)((char *)&v506.__r_.__value_.__r.__words[1] + 7);
                *(_QWORD *)&__p[40] = v509.__r_.__value_.__l.__size_;
                *(_QWORD *)&__p[47] = *(std::string::size_type *)((char *)&v509.__r_.__value_.__r.__words[1] + 7);
                *(_QWORD *)__p = off_24EC57608;
                *(_QWORD *)&__p[8] = v506.__r_.__value_.__r.__words[0];
                __p[31] = *((_BYTE *)&v506.__r_.__value_.__s + 23);
                *(_QWORD *)&__p[32] = v509.__r_.__value_.__r.__words[0];
                __p[55] = *((_BYTE *)&v509.__r_.__value_.__s + 23);
                v400 = (char *)operator new(0x50uLL);
                *((_QWORD *)v400 + 3) = off_24EC57608;
                *((_QWORD *)v400 + 1) = 0;
                *((_QWORD *)v400 + 2) = 0;
                *(_QWORD *)v400 = &off_24EC575B8;
                *((_OWORD *)v400 + 2) = *(_OWORD *)&__p[8];
                *((_QWORD *)v400 + 6) = *(_QWORD *)&__p[24];
                memset(&__p[8], 0, 24);
                *(_OWORD *)(v400 + 56) = *(_OWORD *)&__p[32];
                *((_QWORD *)v400 + 9) = *(_QWORD *)&__p[48];
                memset(&__p[32], 0, 24);
                v401 = (std::__shared_weak_count *)*((_QWORD *)&v467 + 1);
                *(_QWORD *)&v467 = v400 + 24;
                *((_QWORD *)&v467 + 1) = v400;
                if (v401)
                {
                  v402 = (unint64_t *)&v401->__shared_owners_;
                  do
                    v403 = __ldaxr(v402);
                  while (__stlxr(v403 - 1, v402));
                  if (!v403)
                  {
                    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                    std::__shared_weak_count::__release_weak(v401);
                  }
                }
                if ((__p[55] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&__p[32]);
                  if ((__p[31] & 0x80000000) == 0)
                  {
LABEL_768:
                    v538 = v466;
                    v405 = v466.__r_.__value_.__r.__words[2];
                    v404 = v467;
                    if (!v466.__r_.__value_.__r.__words[2])
                      goto LABEL_774;
                    goto LABEL_772;
                  }
                }
                else if ((__p[31] & 0x80000000) == 0)
                {
                  goto LABEL_768;
                }
                operator delete(*(void **)&__p[8]);
                v538 = v466;
                v405 = v466.__r_.__value_.__r.__words[2];
                v404 = v467;
                if (!v466.__r_.__value_.__r.__words[2])
                {
LABEL_774:
                  *(_QWORD *)v539 = v404;
                  *(_QWORD *)&v539[8] = *((_QWORD *)&v467 + 1);
                  if (*((_QWORD *)&v467 + 1))
                  {
                    v408 = (unint64_t *)(*((_QWORD *)&v467 + 1) + 8);
                    do
                      v409 = __ldxr(v408);
                    while (__stxr(v409 + 1, v408));
                    *(_QWORD *)&v539[16] = v404;
                    do
                      v410 = __ldaxr(v408);
                    while (__stlxr(v410 - 1, v408));
                    if (!v410)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v467 + 1) + 16))(*((_QWORD *)&v467 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v467 + 1));
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v539[16] = v404;
                  }
                  if (v466.__r_.__value_.__r.__words[2])
                  {
                    v411 = (unint64_t *)(v466.__r_.__value_.__r.__words[2] + 8);
                    do
                      v412 = __ldaxr(v411);
                    while (__stlxr(v412 - 1, v411));
                    if (!v412)
                    {
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v466.__r_.__value_.__r.__words[2]
                                                                     + 16))(v466.__r_.__value_.__r.__words[2]);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v466.__r_.__value_.__r.__words[2]);
                    }
                  }
                  v413 = v538.__r_.__value_.__r.__words[0];
                  if (*(char *)(*(_QWORD *)&v539[16] + 31) >= 0)
                    v414 = *(_QWORD *)&v539[16] + 8;
                  else
                    v414 = *(_QWORD *)(*(_QWORD *)&v539[16] + 8);
                  if (*(char *)(*(_QWORD *)&v539[16] + 55) >= 0)
                    v415 = *(_QWORD *)&v539[16] + 32;
                  else
                    v415 = *(_QWORD *)(*(_QWORD *)&v539[16] + 32);
                  v416 = _os_log_pack_fill();
                  *(_DWORD *)v416 = 136315650;
                  *(_QWORD *)(v416 + 4) = v414;
                  *(_WORD *)(v416 + 12) = 2080;
                  *(_QWORD *)(v416 + 14) = v415;
                  *(_WORD *)(v416 + 22) = 2048;
                  *(_QWORD *)(v416 + 24) = v458;
                  v417 = operator new();
                  v418 = *(unsigned __int8 *)(v35 + 39);
                  v419 = v449;
                  if ((v418 & 0x80u) != 0)
                  {
                    v419 = *(const char **)(v35 + 16);
                    v418 = *(_QWORD *)(v35 + 24);
                  }
                  *(_QWORD *)v417 = v413;
                  *(_OWORD *)(v417 + 8) = *(_OWORD *)&v538.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v538.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v417 + 24) = *(_OWORD *)v539;
                  *(_QWORD *)v539 = 0;
                  *(_QWORD *)&v539[8] = 0;
                  *(_QWORD *)(v417 + 40) = v419;
                  *(_QWORD *)(v417 + 48) = v418;
                  *(_BYTE *)(v417 + 56) = 16;
                  v466.__r_.__value_.__r.__words[0] = 0;
                  *(_QWORD *)__p = v417;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v30 + 24) + 40))(*(_QWORD *)(v30 + 24), __p);
                  v420 = *(_QWORD *)__p;
                  *(_QWORD *)__p = 0;
                  if (v420)
                  {
                    v421 = *(std::__shared_weak_count **)(v420 + 32);
                    if (v421)
                    {
                      v422 = (unint64_t *)&v421->__shared_owners_;
                      do
                        v423 = __ldaxr(v422);
                      while (__stlxr(v423 - 1, v422));
                      if (!v423)
                      {
                        ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                        std::__shared_weak_count::__release_weak(v421);
                      }
                    }
                    v424 = *(std::__shared_weak_count **)(v420 + 16);
                    if (v424)
                    {
                      v425 = (unint64_t *)&v424->__shared_owners_;
                      do
                        v426 = __ldaxr(v425);
                      while (__stlxr(v426 - 1, v425));
                      if (!v426)
                      {
                        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
                        std::__shared_weak_count::__release_weak(v424);
                      }
                    }
                    MEMORY[0x227684CE8](v420, 0x10F0C40B62ED6C6);
                    v466.__r_.__value_.__r.__words[0] = 0;
                  }
                  v427 = *(std::__shared_weak_count **)&v539[8];
                  if (*(_QWORD *)&v539[8])
                  {
                    v428 = (unint64_t *)(*(_QWORD *)&v539[8] + 8);
                    do
                      v429 = __ldaxr(v428);
                    while (__stlxr(v429 - 1, v428));
                    if (!v429)
                    {
                      ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
                      std::__shared_weak_count::__release_weak(v427);
                    }
                  }
                  v430 = (std::__shared_weak_count *)v538.__r_.__value_.__r.__words[2];
                  if (v538.__r_.__value_.__r.__words[2])
                  {
                    v431 = (unint64_t *)(v538.__r_.__value_.__r.__words[2] + 8);
                    do
                      v432 = __ldaxr(v431);
                    while (__stlxr(v432 - 1, v431));
                    if (!v432)
                    {
                      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                      std::__shared_weak_count::__release_weak(v430);
                    }
                  }
LABEL_817:
                  if (v452)
                  {
                    if (v493)
                    {
                      v444 = __cxa_allocate_exception(8uLL);
                      *v444 = &off_24EC1FCC0;
                      __cxa_throw(v444, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
                    }
                    v433 = (void **)v482;
                    if (!v492)
                      v433 = 0;
                    v434 = &v482;
                    if (SHIBYTE(v484) < 0)
                      v434 = v433;
                    if (!v492)
                      v434 = (void **)&unk_2246C9618;
                    v435 = &v505;
                    if ((v505.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v435 = (std::string *)v505.__r_.__value_.__r.__words[0];
                    sub_22322C138((uint64_t)v527, "Could not load kfd %s: %s. Removing %lu keyframes", (const char *)v435, (const char *)v434, a1[2]);
                    sub_223182C08((uint64_t)v527);
                  }
                  sub_223182C08((uint64_t)v527);
                  v436 = v532;
                  if (v532)
                  {
                    v437 = (unint64_t *)&v532->__shared_owners_;
                    do
                      v438 = __ldaxr(v437);
                    while (__stlxr(v438 - 1, v437));
                    if (!v438)
                    {
                      ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                      std::__shared_weak_count::__release_weak(v436);
                    }
                  }
                  goto LABEL_714;
                }
LABEL_772:
                v406 = (unint64_t *)(v405 + 8);
                do
                  v407 = __ldxr(v406);
                while (__stxr(v407 + 1, v406));
                goto LABEL_774;
              }
            }
            memcpy(v124, v31, v123);
            goto LABEL_753;
          }
        }
        memmove(v115, v36, v37);
        goto LABEL_220;
      }
    }
    memmove(v112, v110, v111);
    goto LABEL_212;
  }
  v477 = 0;
  v478 = 0;
  v479 = 0;
  v5 = v480;
  v6 = rep - (_QWORD)v480;
  v447 = a1;
  if ((std::string *)rep == v480)
  {
    v8 = 0;
    v7 = 0;
    v9 = *(uint64_t **)(*((_QWORD *)__s + 153) + 16);
    if (v9)
      goto LABEL_11;
LABEL_13:
    v10 = 0;
    v11 = 0uLL;
    v12 = __s;
    v13 = (void *)*((_QWORD *)__s + 210);
    if (!v13)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v6 < 0)
    sub_22316E078();
  v7 = (char *)operator new(rep - (_QWORD)v480);
  v8 = (uint64_t *)&v7[16 * (v6 >> 4)];
  v477 = v7;
  v479 = v8;
  memcpy(v7, v5, v6);
  v478 = v8;
  v9 = *(uint64_t **)(*((_QWORD *)__s + 153) + 16);
  if (!v9)
    goto LABEL_13;
LABEL_11:
  while (*((_BYTE *)v9 + 144) != 1)
  {
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_13;
  }
  v47 = (uint64_t *)*v9;
  if (*v9)
  {
    v48 = 0;
    v49 = 1;
    do
    {
      v50 = v48;
      v48 = v49;
      while (*((_BYTE *)v47 + 144) != 1)
      {
        v47 = (uint64_t *)*v47;
        if (!v47)
          goto LABEL_79;
      }
      ++v49;
      v47 = (uint64_t *)*v47;
      v50 = v48;
    }
    while (v47);
LABEL_79:
    memset(__p, 0, 24);
    if (v50 >= 0xFFFFFFFFFFFFFFFLL)
      sub_22316E078();
  }
  else
  {
    memset(__p, 0, 24);
    v49 = 1;
  }
  *(_QWORD *)__p = operator new(16 * v49);
  *(_QWORD *)&__p[8] = *(_QWORD *)__p;
  *(_QWORD *)&__p[16] = *(_QWORD *)__p + 16 * v49;
  v538.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
LABEL_83:
  *(_OWORD *)v527 = *((_OWORD *)v9 + 2);
  sub_2232E9564((char ***)&v538, v527);
  while (1)
  {
    v9 = (uint64_t *)*v9;
    if (!v9)
      break;
    if (*((_BYTE *)v9 + 144) == 1)
      goto LABEL_83;
  }
  v11 = *(_OWORD *)__p;
  v10 = *(_QWORD *)&__p[16];
  v12 = __s;
  v13 = (void *)*((_QWORD *)__s + 210);
  if (v13)
  {
LABEL_14:
    *((_QWORD *)v12 + 211) = v13;
    v455 = v11;
    operator delete(v13);
    v11 = v455;
    *((_QWORD *)v12 + 210) = 0;
    *((_QWORD *)v12 + 211) = 0;
    *((_QWORD *)v12 + 212) = 0;
  }
LABEL_15:
  *((_OWORD *)v12 + 105) = v11;
  *((_QWORD *)v12 + 212) = v10;
  v14 = (_QWORD *)*((_QWORD *)v12 + 153);
  if (v7 == (char *)v8)
  {
    v474 = 0;
    v475 = 0;
    v473 = 0;
  }
  else
  {
    v15 = (uint64_t *)v7;
    do
    {
      *((_BYTE *)sub_223822434(v14, *v15, v15[1]) + 112) = 0;
      v15 += 2;
    }
    while (v15 != v8);
    v14 = (_QWORD *)*((_QWORD *)__s + 153);
    v474 = 0;
    v475 = 0;
    v473 = 0;
    v16 = (char *)v8 - v7;
    if (v8 != (uint64_t *)v7)
    {
      if (v16 < 0)
        sub_22316E078();
      v17 = (char *)operator new((char *)v8 - v7);
      v18 = &v17[16 * (v16 >> 4)];
      v473 = v17;
      v475 = v18;
      memcpy(v17, v7, (char *)v8 - v7);
      v474 = v18;
    }
  }
  v476 = 1;
  sub_22381AB84(v14, (uint64_t)&v505, (uint64_t)&v473, *((_QWORD *)__s + 191), 0, (uint64_t)v527);
  if (v476 && v473)
  {
    v474 = v473;
    operator delete(v473);
  }
  if (v537)
  {
    if (v7 == (char *)v8)
      goto LABEL_345;
    goto LABEL_343;
  }
  v38 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error capturing kd to %s after loading it successfully. Error: %s", 0x41uLL);
  sub_22384BA54(__dst);
  if (**((int **)__dst[0] + 7) <= 5)
  {
    v39 = *((unsigned __int8 *)__dst[0] + 72);
    v40 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v41 = v40;
    if (v39 || v40)
    {
      v538.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      v538.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v538.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      *(_DWORD *)v539 = 5;
      *(_QWORD *)&v539[8] = "unknown file";
      *(_DWORD *)&v539[16] = 2082;
      v541 = 0;
      v542 = 0;
      v540 = "unknown function";
      if ((v505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v505;
      else
        v42 = (std::string *)v505.__r_.__value_.__r.__words[0];
      if (v537)
      {
        v445 = __cxa_allocate_exception(8uLL);
        *v445 = &off_24EC1FCC0;
        __cxa_throw(v445, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
      }
      sub_22456A158((uint64_t)v527, &v509);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v509;
      else
        v43 = (std::string *)v509.__r_.__value_.__r.__words[0];
      v512.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v44 = *(_QWORD *)v538.__r_.__value_.__l.__data_;
      v45 = (const char *)(*(_QWORD *)v538.__r_.__value_.__l.__data_ + 16);
      v457 = v45;
      if (*(char *)(*(_QWORD *)v538.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v45 = *(const char **)(v44 + 16);
        v46 = *(_QWORD *)(v44 + 24);
      }
      else
      {
        v46 = *(unsigned __int8 *)(*(_QWORD *)v538.__r_.__value_.__l.__data_ + 39);
      }
      v126 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if (__p[24] && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v127 = (const char *)&xmmword_255788F40;
      else
        v127 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v128 = byte_255788F57;
      else
        v128 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)__p = os_log_create(v127, v45);
      v129 = &__p[8];
      if (v128 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v128 >= 0x17)
      {
        v130 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v128 | 7) != 0x17)
          v130 = v128 | 7;
        v131 = v130 + 1;
        v129 = operator new(v130 + 1);
        *(_QWORD *)&__p[24] = v131 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v129;
        *(_QWORD *)&__p[16] = v128;
      }
      else
      {
        __p[31] = v128;
        if (!v128)
        {
LABEL_251:
          v129[v128] = 0;
          __p[32] = 1;
          v132 = &__p[40];
          if (v46 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v46 >= 0x17)
          {
            v133 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v46 | 7) != 0x17)
              v133 = v46 | 7;
            v134 = v133 + 1;
            v132 = operator new(v133 + 1);
            v516 = v134 | 0x8000000000000000;
            *(_QWORD *)&__p[40] = v132;
            *(_QWORD *)&__p[48] = v46;
          }
          else
          {
            HIBYTE(v516) = v46;
            if (!v46)
              goto LABEL_259;
          }
          memmove(v132, v45, v46);
LABEL_259:
          v132[v46] = 0;
          LOBYTE(v517) = 1;
          v135 = *(NSObject **)__p;
          if (SHIBYTE(v516) < 0)
            operator delete(*(void **)&__p[40]);
          if (__p[32] && (__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v41 && *(_QWORD *)(v41 + 24))
          {
            v136 = _os_log_pack_size();
            v137 = operator new(v136, (std::align_val_t)8uLL);
            v138 = (_QWORD *)operator new();
            v138[1] = 0;
            v139 = v138 + 1;
            *v138 = &off_24EC1F7F0;
            v138[2] = 0;
            v138[3] = v137;
            v506.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
            v506.__r_.__value_.__l.__size_ = (std::string::size_type)v137;
            v506.__r_.__value_.__r.__words[2] = (std::string::size_type)v138;
            v507 = 0uLL;
            sub_22388C0C0((uint64_t)__p, (char *)v42, (const char **)&v512.__r_.__value_.__l.__data_);
            v140 = (char *)operator new(0x50uLL);
            v141 = (std::__shared_weak_count *)v140;
            *(_QWORD *)v140 = &off_24EC20730;
            *((_QWORD *)v140 + 3) = off_24EC20780;
            v142 = *(_QWORD *)&__p[48];
            *((_QWORD *)v140 + 6) = *(_QWORD *)&__p[24];
            *((_QWORD *)v140 + 1) = 0;
            v143 = (unint64_t *)(v140 + 8);
            *((_QWORD *)v140 + 2) = 0;
            *((_OWORD *)v140 + 2) = *(_OWORD *)&__p[8];
            *(_OWORD *)(v140 + 56) = *(_OWORD *)&__p[32];
            *((_QWORD *)v140 + 9) = v142;
            *(_QWORD *)&v507 = v140 + 24;
            *((_QWORD *)&v507 + 1) = v140;
            v466.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
            v466.__r_.__value_.__l.__size_ = (std::string::size_type)v137;
            v466.__r_.__value_.__r.__words[2] = (std::string::size_type)v138;
            do
              v144 = __ldxr(v139);
            while (__stxr(v144 + 1, v139));
            *(_QWORD *)&v467 = v140 + 24;
            *((_QWORD *)&v467 + 1) = v140;
            do
              v145 = __ldxr(v143);
            while (__stxr(v145 + 1, v143));
            v468 = v140 + 24;
            do
              v146 = __ldaxr(v143);
            while (__stlxr(v146 - 1, v143));
            if (!v146)
            {
              (*(void (**)(char *))(*(_QWORD *)v140 + 16))(v140);
              std::__shared_weak_count::__release_weak(v141);
            }
            v147 = (std::__shared_weak_count *)v506.__r_.__value_.__r.__words[2];
            if (v506.__r_.__value_.__r.__words[2])
            {
              v148 = (unint64_t *)(v506.__r_.__value_.__r.__words[2] + 8);
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v150 = v466.__r_.__value_.__r.__words[0];
            if (v468[31] >= 0)
              v151 = v468 + 8;
            else
              v151 = (char *)*((_QWORD *)v468 + 1);
            if (v468[55] >= 0)
              v152 = v468 + 32;
            else
              v152 = (char *)*((_QWORD *)v468 + 4);
            v153 = _os_log_pack_fill();
            *(_DWORD *)v153 = 136315394;
            *(_QWORD *)(v153 + 4) = v151;
            *(_WORD *)(v153 + 12) = 2080;
            *(_QWORD *)(v153 + 14) = v152;
            v154 = operator new();
            v155 = *(unsigned __int8 *)(v44 + 39);
            v156 = v457;
            if ((v155 & 0x80u) != 0)
            {
              v156 = *(const char **)(v44 + 16);
              v155 = *(_QWORD *)(v44 + 24);
            }
            *(_QWORD *)v154 = v150;
            *(_OWORD *)(v154 + 8) = *(_OWORD *)&v466.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v466.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v154 + 24) = v467;
            v467 = 0uLL;
            *(_QWORD *)(v154 + 40) = v156;
            *(_QWORD *)(v154 + 48) = v155;
            *(_BYTE *)(v154 + 56) = 16;
            v506.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)__p = v154;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v41 + 24) + 40))(*(_QWORD *)(v41 + 24), __p);
            v157 = *(_QWORD *)__p;
            *(_QWORD *)__p = 0;
            if (v157)
            {
              v158 = *(std::__shared_weak_count **)(v157 + 32);
              if (v158)
              {
                v159 = (unint64_t *)&v158->__shared_owners_;
                do
                  v160 = __ldaxr(v159);
                while (__stlxr(v160 - 1, v159));
                if (!v160)
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v158);
                }
              }
              v161 = *(std::__shared_weak_count **)(v157 + 16);
              if (v161)
              {
                v162 = (unint64_t *)&v161->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
              }
              MEMORY[0x227684CE8](v157, 0x10F0C40B62ED6C6);
              v164 = v506.__r_.__value_.__r.__words[0];
              v506.__r_.__value_.__r.__words[0] = 0;
              if (v164)
              {
                v165 = *(std::__shared_weak_count **)(v164 + 32);
                if (v165)
                {
                  v166 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v167 = __ldaxr(v166);
                  while (__stlxr(v167 - 1, v166));
                  if (!v167)
                  {
                    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                    std::__shared_weak_count::__release_weak(v165);
                  }
                }
                v168 = *(std::__shared_weak_count **)(v164 + 16);
                if (v168)
                {
                  v169 = (unint64_t *)&v168->__shared_owners_;
                  do
                    v170 = __ldaxr(v169);
                  while (__stlxr(v170 - 1, v169));
                  if (!v170)
                  {
                    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                    std::__shared_weak_count::__release_weak(v168);
                  }
                }
                MEMORY[0x227684CE8](v164, 0x10F0C40B62ED6C6);
              }
            }
            if (*((_QWORD *)&v467 + 1))
            {
              v171 = (unint64_t *)(*((_QWORD *)&v467 + 1) + 8);
              do
                v172 = __ldaxr(v171);
              while (__stlxr(v172 - 1, v171));
              if (!v172)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v467 + 1) + 16))(*((_QWORD *)&v467 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v467 + 1));
              }
            }
            if (v466.__r_.__value_.__r.__words[2])
            {
              v173 = (unint64_t *)(v466.__r_.__value_.__r.__words[2] + 8);
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                (*(void (**)(std::string::size_type))(*(_QWORD *)v466.__r_.__value_.__r.__words[2] + 16))(v466.__r_.__value_.__r.__words[2]);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v466.__r_.__value_.__r.__words[2]);
              }
            }
          }
          else
          {
            os_log_type_enabled(v135, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = v42;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)&__p[14] = v512.__r_.__value_.__r.__words[0];
            v175 = (void *)_os_log_send_and_compose_impl();
            if (v175)
              free(v175);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v509.__r_.__value_.__l.__data_);
          if (v39)
          {
            if ((v505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v176 = &v505;
            else
              v176 = (std::string *)v505.__r_.__value_.__r.__words[0];
            if (v537)
            {
              v446 = __cxa_allocate_exception(8uLL);
              *v446 = &off_24EC1FCC0;
              __cxa_throw(v446, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
            }
            sub_22456A158((uint64_t)v527, (std::string *)__p);
            if (__p[23] >= 0)
              v177 = __p;
            else
              v177 = *(const char **)__p;
            sub_22322C138((uint64_t)&v538, "Error capturing kd to %s after loading it successfully. Error: %s", (const char *)v176, v177);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            sub_223182C08((uint64_t)&v538);
          }
          sub_223182C08((uint64_t)&v538);
          v178 = v542;
          if (v542)
          {
            v179 = (unint64_t *)&v542->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
          goto LABEL_342;
        }
      }
      memmove(v129, v127, v128);
      goto LABEL_251;
    }
  }
LABEL_342:
  v7 = (char *)v477;
  v8 = v478;
  if (v477 == v478)
    goto LABEL_345;
LABEL_343:
  v181 = (_QWORD *)*((_QWORD *)__s + 153);
  v182 = (uint64_t *)v7;
  do
  {
    *((_BYTE *)sub_223822434(v181, *v182, v182[1]) + 112) = 2;
    v182 += 2;
  }
  while (v182 != v8);
LABEL_345:
  if (__s[709])
    sub_223868D10((uint64_t)__s, 0);
  sub_22384BB48(&v472);
  if (**(int **)(v472 + 56) <= 3)
  {
    v183 = *(unsigned __int8 *)(v472 + 72);
    v184 = sub_22322F254(v472, "OSLogSurrogateAppender", 1, 0);
    v185 = v184;
    if (v183 || v184 != 0)
    {
      sub_223195210((uint64_t)__p);
      sub_2231813E8(&__p[16], (uint64_t)"Registering ", 12);
      v187 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v187, (uint64_t)" keyframes to disk pool", 23);
      if ((v525 & 0x10) != 0)
      {
        v190 = v524;
        if (v524 < v518)
        {
          v524 = v518;
          v190 = v518;
        }
        v191 = v517;
        v188 = v190 - (_QWORD)v517;
        if (v190 - (unint64_t)v517 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_410;
      }
      else
      {
        if ((v525 & 8) == 0)
        {
          v188 = 0;
          HIBYTE(v514) = 0;
          v189 = __dst;
          goto LABEL_365;
        }
        v191 = *(const void **)&__p[40];
        v188 = v516 - *(_QWORD *)&__p[40];
        if (v516 - *(_QWORD *)&__p[40] > 0x7FFFFFFFFFFFFFF7)
LABEL_410:
          sub_22316DBC0();
      }
      if (v188 >= 0x17)
      {
        v192 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v188 | 7) != 0x17)
          v192 = v188 | 7;
        v193 = v192 + 1;
        v189 = (void **)operator new(v192 + 1);
        v514 = v193 | 0x8000000000000000;
        __dst[0] = v189;
        __dst[1] = (void *)v188;
      }
      else
      {
        HIBYTE(v514) = v188;
        v189 = __dst;
        if (!v188)
        {
LABEL_365:
          *((_BYTE *)v189 + v188) = 0;
          v466.__r_.__value_.__r.__words[0] = (std::string::size_type)&v472;
          v466.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v466.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v467) = 3;
          *((_QWORD *)&v467 + 1) = "unknown file";
          LODWORD(v468) = 2093;
          v470 = 0;
          v471 = 0;
          v469 = "unknown function";
          if (v514 >= 0)
            v194 = (const char *)__dst;
          else
            v194 = (const char *)__dst[0];
          v195 = *(_QWORD *)v466.__r_.__value_.__l.__data_;
          v196 = (const char *)(*(_QWORD *)v466.__r_.__value_.__l.__data_ + 16);
          v459 = v196;
          if (*(char *)(*(_QWORD *)v466.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v196 = *(const char **)(v195 + 16);
            v197 = *(_QWORD *)(v195 + 24);
            v199 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v199 & 1) != 0)
              goto LABEL_372;
          }
          else
          {
            v197 = *(unsigned __int8 *)(*(_QWORD *)v466.__r_.__value_.__l.__data_ + 39);
            v198 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v198 & 1) != 0)
              goto LABEL_372;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v538);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v538, &xmmword_255788F40);
            if (v539[0] && SHIBYTE(v538.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v538.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_372:
          if (byte_255788F57 >= 0)
            v200 = (const char *)&xmmword_255788F40;
          else
            v200 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v201 = byte_255788F57;
          else
            v201 = *((_QWORD *)&xmmword_255788F40 + 1);
          v538.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v200, v196);
          p_size = &v538.__r_.__value_.__l.__size_;
          if (v201 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v201 >= 0x17)
          {
            v203 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v201 | 7) != 0x17)
              v203 = v201 | 7;
            v204 = v203 + 1;
            p_size = (std::string::size_type *)operator new(v203 + 1);
            v538.__r_.__value_.__r.__words[2] = v201;
            *(_QWORD *)v539 = v204 | 0x8000000000000000;
            v538.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
          }
          else
          {
            v539[7] = v201;
            if (!v201)
            {
LABEL_386:
              *((_BYTE *)p_size + v201) = 0;
              v539[8] = 1;
              v205 = &v539[16];
              if (v197 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v197 >= 0x17)
              {
                v206 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v197 | 7) != 0x17)
                  v206 = v197 | 7;
                v207 = v206 + 1;
                v205 = operator new(v206 + 1);
                v540 = (const char *)v197;
                v541 = v207 | 0x8000000000000000;
                *(_QWORD *)&v539[16] = v205;
              }
              else
              {
                HIBYTE(v541) = v197;
                if (!v197)
                {
LABEL_394:
                  v205[v197] = 0;
                  LOBYTE(v542) = 1;
                  v208 = v538.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v541) < 0)
                    operator delete(*(void **)&v539[16]);
                  if (v539[8] && (v539[7] & 0x80000000) != 0)
                    operator delete((void *)v538.__r_.__value_.__l.__size_);
                  if (v538.__r_.__value_.__r.__words[0])
                    os_release(v538.__r_.__value_.__l.__data_);
                  if (!v185 || !*(_QWORD *)(v185 + 24))
                  {
                    os_log_type_enabled(v208, OS_LOG_TYPE_INFO);
                    LODWORD(v538.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)v538.__r_.__value_.__r.__words + 4) = (std::string::size_type)v194;
                    v215 = (void *)_os_log_send_and_compose_impl();
                    if (v215)
                      free(v215);
                    goto LABEL_474;
                  }
                  v209 = _os_log_pack_size();
                  v210 = operator new(v209, (std::align_val_t)8uLL);
                  v211 = (_QWORD *)operator new();
                  *v211 = &off_24EC1F7F0;
                  v211[1] = 0;
                  v211[2] = 0;
                  v211[3] = v210;
                  v506.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
                  v506.__r_.__value_.__l.__size_ = (std::string::size_type)v210;
                  v506.__r_.__value_.__r.__words[2] = (std::string::size_type)v211;
                  v507 = 0uLL;
                  v212 = strlen(v194);
                  if (v212 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v213 = v212;
                  if (v212 >= 0x17)
                  {
                    v216 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v212 | 7) != 0x17)
                      v216 = v212 | 7;
                    v217 = v216 + 1;
                    v214 = (std::string *)operator new(v216 + 1);
                    v509.__r_.__value_.__r.__words[2] = v217 | 0x8000000000000000;
                    v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
                    v509.__r_.__value_.__l.__size_ = v213;
                  }
                  else
                  {
                    *((_BYTE *)&v509.__r_.__value_.__s + 23) = v212;
                    v214 = &v509;
                    if (!v212)
                    {
LABEL_415:
                      v214->__r_.__value_.__s.__data_[v213] = 0;
                      v512.__r_.__value_.__r.__words[0] = v509.__r_.__value_.__l.__size_;
                      v218 = v509.__r_.__value_.__r.__words[0];
                      *(std::string::size_type *)((char *)v512.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v509.__r_.__value_.__r.__words[1] + 7);
                      v219 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
                      v220 = operator new(0x38uLL);
                      v220[1] = 0;
                      v220[2] = 0;
                      v220[3] = off_24EC1FA48;
                      *v220 = &off_24EC1F9F8;
                      v221 = v512.__r_.__value_.__r.__words[0];
                      v220[4] = v218;
                      v220[5] = v221;
                      *(_QWORD *)((char *)v220 + 47) = *(std::string::size_type *)((char *)v512.__r_.__value_.__r.__words
                                                                                 + 7);
                      *((_BYTE *)v220 + 55) = v219;
                      v512.__r_.__value_.__r.__words[0] = 0;
                      *(std::string::size_type *)((char *)v512.__r_.__value_.__r.__words + 7) = 0;
                      v222 = (std::__shared_weak_count *)*((_QWORD *)&v507 + 1);
                      *(_QWORD *)&v507 = v220 + 3;
                      *((_QWORD *)&v507 + 1) = v220;
                      if (v222)
                      {
                        v223 = (unint64_t *)&v222->__shared_owners_;
                        do
                          v224 = __ldaxr(v223);
                        while (__stlxr(v224 - 1, v223));
                        if (!v224)
                        {
                          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                          std::__shared_weak_count::__release_weak(v222);
                        }
                      }
                      v538 = v506;
                      v225 = v507;
                      if (v506.__r_.__value_.__r.__words[2])
                      {
                        v226 = (unint64_t *)(v506.__r_.__value_.__r.__words[2] + 8);
                        do
                          v227 = __ldxr(v226);
                        while (__stxr(v227 + 1, v226));
                      }
                      v228 = (std::__shared_weak_count *)*((_QWORD *)&v507 + 1);
                      *(_QWORD *)v539 = v225;
                      *(_QWORD *)&v539[8] = *((_QWORD *)&v507 + 1);
                      if (*((_QWORD *)&v507 + 1))
                      {
                        v229 = (unint64_t *)(*((_QWORD *)&v507 + 1) + 8);
                        do
                          v230 = __ldxr(v229);
                        while (__stxr(v230 + 1, v229));
                        *(_QWORD *)&v539[16] = v225;
                        do
                          v231 = __ldaxr(v229);
                        while (__stlxr(v231 - 1, v229));
                        if (!v231)
                        {
                          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                          std::__shared_weak_count::__release_weak(v228);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&v539[16] = v225;
                      }
                      v232 = (std::__shared_weak_count *)v506.__r_.__value_.__r.__words[2];
                      if (v506.__r_.__value_.__r.__words[2])
                      {
                        v233 = (unint64_t *)(v506.__r_.__value_.__r.__words[2] + 8);
                        do
                          v234 = __ldaxr(v233);
                        while (__stlxr(v234 - 1, v233));
                        if (!v234)
                        {
                          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                          std::__shared_weak_count::__release_weak(v232);
                        }
                      }
                      v235 = v538.__r_.__value_.__r.__words[0];
                      if (*(char *)(*(_QWORD *)&v539[16] + 31) >= 0)
                        v236 = *(_QWORD *)&v539[16] + 8;
                      else
                        v236 = *(_QWORD *)(*(_QWORD *)&v539[16] + 8);
                      v237 = _os_log_pack_fill();
                      *(_DWORD *)v237 = 136315138;
                      *(_QWORD *)(v237 + 4) = v236;
                      v238 = operator new();
                      v239 = *(unsigned __int8 *)(v195 + 39);
                      v240 = v459;
                      if ((v239 & 0x80u) != 0)
                      {
                        v240 = *(const char **)(v195 + 16);
                        v239 = *(_QWORD *)(v195 + 24);
                      }
                      *(_QWORD *)v238 = v235;
                      *(_OWORD *)(v238 + 8) = *(_OWORD *)&v538.__r_.__value_.__r.__words[1];
                      *(_OWORD *)&v538.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_OWORD *)(v238 + 24) = *(_OWORD *)v539;
                      *(_QWORD *)v539 = 0;
                      *(_QWORD *)&v539[8] = 0;
                      *(_QWORD *)(v238 + 40) = v240;
                      *(_QWORD *)(v238 + 48) = v239;
                      *(_BYTE *)(v238 + 56) = 1;
                      v509.__r_.__value_.__r.__words[0] = 0;
                      v506.__r_.__value_.__r.__words[0] = v238;
                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v185 + 24) + 40))(*(_QWORD *)(v185 + 24), &v506);
                      v241 = v506.__r_.__value_.__r.__words[0];
                      v506.__r_.__value_.__r.__words[0] = 0;
                      if (v241)
                      {
                        v242 = *(std::__shared_weak_count **)(v241 + 32);
                        if (v242)
                        {
                          v243 = (unint64_t *)&v242->__shared_owners_;
                          do
                            v244 = __ldaxr(v243);
                          while (__stlxr(v244 - 1, v243));
                          if (!v244)
                          {
                            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                            std::__shared_weak_count::__release_weak(v242);
                          }
                        }
                        v245 = *(std::__shared_weak_count **)(v241 + 16);
                        if (v245)
                        {
                          v246 = (unint64_t *)&v245->__shared_owners_;
                          do
                            v247 = __ldaxr(v246);
                          while (__stlxr(v247 - 1, v246));
                          if (!v247)
                          {
                            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                            std::__shared_weak_count::__release_weak(v245);
                          }
                        }
                        MEMORY[0x227684CE8](v241, 0x10F0C40B62ED6C6);
                        v248 = v509.__r_.__value_.__r.__words[0];
                        v509.__r_.__value_.__r.__words[0] = 0;
                        if (v248)
                        {
                          v249 = *(std::__shared_weak_count **)(v248 + 32);
                          if (v249)
                          {
                            v250 = (unint64_t *)&v249->__shared_owners_;
                            do
                              v251 = __ldaxr(v250);
                            while (__stlxr(v251 - 1, v250));
                            if (!v251)
                            {
                              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                              std::__shared_weak_count::__release_weak(v249);
                            }
                          }
                          v252 = *(std::__shared_weak_count **)(v248 + 16);
                          if (v252)
                          {
                            v253 = (unint64_t *)&v252->__shared_owners_;
                            do
                              v254 = __ldaxr(v253);
                            while (__stlxr(v254 - 1, v253));
                            if (!v254)
                            {
                              ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                              std::__shared_weak_count::__release_weak(v252);
                            }
                          }
                          MEMORY[0x227684CE8](v248, 0x10F0C40B62ED6C6);
                        }
                      }
                      v255 = *(std::__shared_weak_count **)&v539[8];
                      if (*(_QWORD *)&v539[8])
                      {
                        v256 = (unint64_t *)(*(_QWORD *)&v539[8] + 8);
                        do
                          v257 = __ldaxr(v256);
                        while (__stlxr(v257 - 1, v256));
                        if (!v257)
                        {
                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                          std::__shared_weak_count::__release_weak(v255);
                        }
                      }
                      v258 = (std::__shared_weak_count *)v538.__r_.__value_.__r.__words[2];
                      if (v538.__r_.__value_.__r.__words[2])
                      {
                        v259 = (unint64_t *)(v538.__r_.__value_.__r.__words[2] + 8);
                        do
                          v260 = __ldaxr(v259);
                        while (__stlxr(v260 - 1, v259));
                        if (!v260)
                        {
                          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                          std::__shared_weak_count::__release_weak(v258);
                        }
                      }
LABEL_474:
                      if (v183)
                      {
                        v261 = (const char *)__dst;
                        if (v514 < 0)
                          v261 = (const char *)__dst[0];
                        sub_22322C138((uint64_t)&v466, "%s", v261);
                        sub_223182C08((uint64_t)&v466);
                      }
                      sub_223182C08((uint64_t)&v466);
                      v262 = v471;
                      if (v471)
                      {
                        v263 = (unint64_t *)&v471->__shared_owners_;
                        do
                          v264 = __ldaxr(v263);
                        while (__stlxr(v264 - 1, v263));
                        if (!v264)
                        {
                          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                          std::__shared_weak_count::__release_weak(v262);
                        }
                      }
                      if (SHIBYTE(v514) < 0)
                        operator delete(__dst[0]);
                      *(_QWORD *)__p = *MEMORY[0x24BEDB7F0];
                      v265 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      *(_QWORD *)&__p[16] = v265;
                      *(_QWORD *)&__p[24] = MEMORY[0x24BEDB848] + 16;
                      if (v523 < 0)
                        operator delete(v520);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x227684BE0](&v526);
                      goto LABEL_488;
                    }
                  }
                  memcpy(v214, v194, v213);
                  goto LABEL_415;
                }
              }
              memmove(v205, v196, v197);
              goto LABEL_394;
            }
          }
          memmove(p_size, v200, v201);
          goto LABEL_386;
        }
      }
      memmove(v189, v191, v188);
      goto LABEL_365;
    }
  }
LABEL_488:
  sub_22384BA54(&v509);
  if (**(int **)(v509.__r_.__value_.__r.__words[0] + 56) <= 3)
  {
    v266 = *(unsigned __int8 *)(v509.__r_.__value_.__r.__words[0] + 72);
    v267 = sub_22322F254((uint64_t)v509.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
    v268 = v267;
    if (v266 || v267)
    {
      v453 = v266;
      v538.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
      v538.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v538.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      *(_DWORD *)v539 = 3;
      *(_QWORD *)&v539[8] = "unknown file";
      *(_DWORD *)&v539[16] = 2094;
      v541 = 0;
      v542 = 0;
      v540 = "unknown function";
      v269 = *(_QWORD *)v538.__r_.__value_.__l.__data_;
      v270 = (const char *)(*(_QWORD *)v538.__r_.__value_.__l.__data_ + 16);
      v450 = v270;
      if (*(char *)(*(_QWORD *)v538.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v270 = *(const char **)(v269 + 16);
        v271 = *(_QWORD *)(v269 + 24);
      }
      else
      {
        v271 = *(unsigned __int8 *)(*(_QWORD *)v538.__r_.__value_.__l.__data_ + 39);
      }
      v272 = v477;
      v273 = v478;
      v460 = v447[2];
      v274 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v274 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if (__p[24] && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v275 = (const char *)&xmmword_255788F40;
      else
        v275 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v276 = byte_255788F57;
      else
        v276 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)__p = os_log_create(v275, v270);
      v277 = &__p[8];
      if (v276 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v276 >= 0x17)
      {
        v278 = (v276 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v276 | 7) != 0x17)
          v278 = v276 | 7;
        v279 = v278 + 1;
        v277 = operator new(v278 + 1);
        *(_QWORD *)&__p[24] = v279 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v277;
        *(_QWORD *)&__p[16] = v276;
      }
      else
      {
        __p[31] = v276;
        if (!v276)
        {
LABEL_509:
          v277[v276] = 0;
          __p[32] = 1;
          v280 = &__p[40];
          if (v271 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v271 >= 0x17)
          {
            v281 = (v271 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v271 | 7) != 0x17)
              v281 = v271 | 7;
            v282 = v281 + 1;
            v280 = operator new(v281 + 1);
            v516 = v282 | 0x8000000000000000;
            *(_QWORD *)&__p[40] = v280;
            *(_QWORD *)&__p[48] = v271;
          }
          else
          {
            HIBYTE(v516) = v271;
            if (!v271)
              goto LABEL_517;
          }
          memmove(v280, v270, v271);
LABEL_517:
          v280[v271] = 0;
          LOBYTE(v517) = 1;
          v283 = *(NSObject **)__p;
          if (SHIBYTE(v516) < 0)
            operator delete(*(void **)&__p[40]);
          if (__p[32] && (__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          v284 = ((char *)v273 - v272) >> 4;
          if (v268 && *(_QWORD *)(v268 + 24))
          {
            v285 = _os_log_pack_size();
            v286 = (std::__shared_weak_count_vtbl *)operator new(v285, (std::align_val_t)8uLL);
            v287 = (std::__shared_weak_count *)operator new();
            v288 = v287;
            v287->__shared_owners_ = 0;
            v289 = (unint64_t *)&v287->__shared_owners_;
            v287->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v287->__shared_weak_owners_ = 0;
            v287[1].__vftable = v286;
            *(_QWORD *)__p = v286;
            *(_QWORD *)&__p[8] = v286;
            *(_QWORD *)&__p[16] = v287;
            do
              v290 = __ldxr(v289);
            while (__stxr(v290 + 1, v289));
            memset(&__p[24], 0, 24);
            do
              v291 = __ldaxr(v289);
            while (__stlxr(v291 - 1, v289));
            if (!v291)
            {
              ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
              std::__shared_weak_count::__release_weak(v288);
            }
            v292 = *(_QWORD *)__p;
            v293 = _os_log_pack_fill();
            *(_DWORD *)v293 = 134218240;
            *(_QWORD *)(v293 + 4) = v284;
            *(_WORD *)(v293 + 12) = 2048;
            *(_QWORD *)(v293 + 14) = v460;
            v294 = operator new();
            v295 = *(unsigned __int8 *)(v269 + 39);
            v296 = v450;
            if ((v295 & 0x80u) != 0)
            {
              v296 = *(const char **)(v269 + 16);
              v295 = *(_QWORD *)(v269 + 24);
            }
            *(_QWORD *)v294 = v292;
            *(_OWORD *)(v294 + 8) = *(_OWORD *)&__p[8];
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            *(_OWORD *)(v294 + 24) = *(_OWORD *)&__p[24];
            *(_QWORD *)&__p[24] = 0;
            *(_QWORD *)&__p[32] = 0;
            *(_QWORD *)(v294 + 40) = v296;
            *(_QWORD *)(v294 + 48) = v295;
            *(_BYTE *)(v294 + 56) = 1;
            v506.__r_.__value_.__r.__words[0] = 0;
            v466.__r_.__value_.__r.__words[0] = v294;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v268 + 24) + 40))(*(_QWORD *)(v268 + 24), &v466);
            v297 = v466.__r_.__value_.__r.__words[0];
            v466.__r_.__value_.__r.__words[0] = 0;
            v298 = v447;
            if (v297)
            {
              v299 = *(std::__shared_weak_count **)(v297 + 32);
              if (v299)
              {
                v300 = (unint64_t *)&v299->__shared_owners_;
                do
                  v301 = __ldaxr(v300);
                while (__stlxr(v301 - 1, v300));
                if (!v301)
                {
                  ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                  std::__shared_weak_count::__release_weak(v299);
                }
              }
              v302 = *(std::__shared_weak_count **)(v297 + 16);
              if (v302)
              {
                v303 = (unint64_t *)&v302->__shared_owners_;
                do
                  v304 = __ldaxr(v303);
                while (__stlxr(v304 - 1, v303));
                if (!v304)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v302);
                }
              }
              MEMORY[0x227684CE8](v297, 0x10F0C40B62ED6C6);
              v305 = v506.__r_.__value_.__r.__words[0];
              v506.__r_.__value_.__r.__words[0] = 0;
              if (v305)
              {
                v306 = *(std::__shared_weak_count **)(v305 + 32);
                if (v306)
                {
                  v307 = (unint64_t *)&v306->__shared_owners_;
                  do
                    v308 = __ldaxr(v307);
                  while (__stlxr(v308 - 1, v307));
                  if (!v308)
                  {
                    ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                    std::__shared_weak_count::__release_weak(v306);
                  }
                }
                v309 = *(std::__shared_weak_count **)(v305 + 16);
                if (v309)
                {
                  v310 = (unint64_t *)&v309->__shared_owners_;
                  do
                    v311 = __ldaxr(v310);
                  while (__stlxr(v311 - 1, v310));
                  if (!v311)
                  {
                    ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                    std::__shared_weak_count::__release_weak(v309);
                  }
                }
                MEMORY[0x227684CE8](v305, 0x10F0C40B62ED6C6);
              }
            }
            v312 = *(std::__shared_weak_count **)&__p[32];
            v313 = v453;
            if (*(_QWORD *)&__p[32])
            {
              v314 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
              do
                v315 = __ldaxr(v314);
              while (__stlxr(v315 - 1, v314));
              if (!v315)
              {
                ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                std::__shared_weak_count::__release_weak(v312);
              }
            }
            v316 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v317 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v318 = __ldaxr(v317);
              while (__stlxr(v318 - 1, v317));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                std::__shared_weak_count::__release_weak(v316);
              }
            }
          }
          else
          {
            os_log_type_enabled(v283, OS_LOG_TYPE_INFO);
            *(_DWORD *)__p = 134218240;
            *(_QWORD *)&__p[4] = v284;
            *(_WORD *)&__p[12] = 2048;
            *(_QWORD *)&__p[14] = v460;
            v319 = (void *)_os_log_send_and_compose_impl();
            v298 = v447;
            v313 = v453;
            if (v319)
              free(v319);
          }
          if (v313)
          {
            sub_22322C138((uint64_t)&v538, "KFE:PER:KL:%lu, KD:%lu", ((char *)v478 - (_BYTE *)v477) >> 4, v298[2]);
            sub_223182C08((uint64_t)&v538);
          }
          sub_223182C08((uint64_t)&v538);
          v320 = v542;
          if (v542)
          {
            v321 = (unint64_t *)&v542->__shared_owners_;
            do
              v322 = __ldaxr(v321);
            while (__stlxr(v322 - 1, v321));
            if (!v322)
            {
              ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
              std::__shared_weak_count::__release_weak(v320);
            }
          }
          goto LABEL_576;
        }
      }
      memmove(v277, v275, v276);
      goto LABEL_509;
    }
  }
LABEL_576:
  v323 = (char *)v477;
  v324 = (char *)v478;
  v325 = __s;
  if (v477 != v478)
  {
    v326 = (uint64_t **)(__s + 1824);
    while (1)
    {
      sub_223184340(*((_QWORD *)v325 + 154), (unsigned __int8 *)v323, (uint64_t)__p);
      if ((_BYTE)v525)
        goto LABEL_578;
      sub_22384BA54(&v472);
      if (**(int **)(v472 + 56) <= 4)
      {
        v327 = *(unsigned __int8 *)(v472 + 72);
        v328 = sub_22322F254(v472, "OSLogSurrogateAppender", 1, 0);
        v329 = v328;
        if (v327 || v328 != 0)
          break;
      }
LABEL_695:
      v391 = sub_223822434(*((_QWORD **)v325 + 153), *(_QWORD *)v323, *((_QWORD *)v323 + 1));
      *((_WORD *)v391 + 56) = 0x2000;
      *((_BYTE *)v391 + 114) = 0;
      sub_2231A9984(v326, (unsigned __int8 *)v323, v323);
      if ((_BYTE)v525 || !(_BYTE)v524)
        goto LABEL_578;
      if (!v522)
      {
LABEL_700:
        if (__p[40])
          goto LABEL_701;
        goto LABEL_578;
      }
      if (v521 < 0)
      {
        operator delete(v519);
        if ((SHIBYTE(v517) & 0x80000000) == 0)
          goto LABEL_700;
      }
      else if ((SHIBYTE(v517) & 0x80000000) == 0)
      {
        goto LABEL_700;
      }
      operator delete(*(void **)&__p[48]);
      if (__p[40])
      {
LABEL_701:
        if ((__p[39] & 0x80000000) != 0)
          operator delete(*(void **)&__p[16]);
      }
LABEL_578:
      v323 += 16;
      if (v323 == v324)
        goto LABEL_711;
    }
    v466.__r_.__value_.__r.__words[0] = (std::string::size_type)&v472;
    v466.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v466.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v467) = 4;
    *((_QWORD *)&v467 + 1) = "unknown file";
    LODWORD(v468) = 2099;
    v469 = "unknown function";
    v470 = 0;
    v471 = 0;
    sub_2245664AC((unsigned __int8 *)v323, __dst);
    if ((_BYTE)v525)
    {
      v439 = __cxa_allocate_exception(8uLL);
      *v439 = &off_24EC1FCC0;
      __cxa_throw(v439, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    sub_22456A158((uint64_t)__p, &v512);
    v331 = &v512;
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v331 = (std::string *)v512.__r_.__value_.__r.__words[0];
    v465 = v331;
    v332 = *(_QWORD *)v466.__r_.__value_.__l.__data_;
    if (*(char *)(*(_QWORD *)v466.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v334 = *(const char **)(v332 + 16);
      v333 = *(_QWORD *)(v332 + 24);
      v454 = *(_QWORD *)v466.__r_.__value_.__l.__data_ + 16;
      v461 = *(_QWORD *)v466.__r_.__value_.__l.__data_;
      v336 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v336 & 1) != 0)
        goto LABEL_592;
    }
    else
    {
      v333 = *(unsigned __int8 *)(*(_QWORD *)v466.__r_.__value_.__l.__data_ + 39);
      v334 = (const char *)(*(_QWORD *)v466.__r_.__value_.__l.__data_ + 16);
      v454 = (uint64_t)v334;
      v461 = *(_QWORD *)v466.__r_.__value_.__l.__data_;
      v335 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v335 & 1) != 0)
        goto LABEL_592;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v506);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v506, &xmmword_255788F40);
      if ((_BYTE)v507 && SHIBYTE(v506.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v506.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_592:
    if (byte_255788F57 >= 0)
      v337 = (const char *)&xmmword_255788F40;
    else
      v337 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v338 = byte_255788F57;
    else
      v338 = *((_QWORD *)&xmmword_255788F40 + 1);
    v538.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v337, v334);
    if (v338 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v338 >= 0x17)
    {
      v340 = (v338 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v338 | 7) != 0x17)
        v340 = v338 | 7;
      v341 = v340 + 1;
      v339 = (std::string::size_type *)operator new(v340 + 1);
      v538.__r_.__value_.__r.__words[2] = v338;
      *(_QWORD *)v539 = v341 | 0x8000000000000000;
      v538.__r_.__value_.__l.__size_ = (std::string::size_type)v339;
    }
    else
    {
      v539[7] = v338;
      v339 = &v538.__r_.__value_.__l.__size_;
      if (!v338)
      {
LABEL_606:
        *((_BYTE *)v339 + v338) = 0;
        v539[8] = 1;
        if (v333 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v333 >= 0x17)
        {
          v344 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v333 | 7) != 0x17)
            v344 = v333 | 7;
          v345 = v344 + 1;
          v342 = operator new(v344 + 1);
          v540 = (const char *)v333;
          v541 = v345 | 0x8000000000000000;
          *(_QWORD *)&v539[16] = v342;
        }
        else
        {
          HIBYTE(v541) = v333;
          v342 = &v539[16];
          if (!v333)
          {
            v539[16] = 0;
            LOBYTE(v542) = 1;
            v343 = v538.__r_.__value_.__r.__words[0];
            if ((SHIBYTE(v541) & 0x80000000) == 0)
              goto LABEL_610;
            goto LABEL_616;
          }
        }
        memmove(v342, v334, v333);
        v342[v333] = 0;
        LOBYTE(v542) = 1;
        v343 = v538.__r_.__value_.__r.__words[0];
        if ((SHIBYTE(v541) & 0x80000000) == 0)
        {
LABEL_610:
          if (!v539[8])
            goto LABEL_619;
          goto LABEL_617;
        }
LABEL_616:
        operator delete(*(void **)&v539[16]);
        if (!v539[8])
          goto LABEL_619;
LABEL_617:
        if ((v539[7] & 0x80000000) != 0)
          operator delete((void *)v538.__r_.__value_.__l.__size_);
LABEL_619:
        if (v538.__r_.__value_.__r.__words[0])
          os_release(v538.__r_.__value_.__l.__data_);
        if (v329 && *(_QWORD *)(v329 + 24))
        {
          v346 = _os_log_pack_size();
          v347 = operator new(v346, (std::align_val_t)8uLL);
          v348 = (_QWORD *)operator new();
          v348[1] = 0;
          v349 = v348 + 1;
          *v348 = &off_24EC1F7F0;
          v348[2] = 0;
          v348[3] = v347;
          v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v347;
          v509.__r_.__value_.__l.__size_ = (std::string::size_type)v347;
          v509.__r_.__value_.__r.__words[2] = (std::string::size_type)v348;
          v510 = 0;
          v511 = 0;
          sub_22388C0C0((uint64_t)&v538, (char *)__dst, (const char **)&v465);
          v350 = (char *)operator new(0x50uLL);
          v351 = (std::__shared_weak_count *)v350;
          *((_QWORD *)v350 + 1) = 0;
          v352 = (unint64_t *)(v350 + 8);
          *((_QWORD *)v350 + 2) = 0;
          *(_QWORD *)v350 = &off_24EC20730;
          *((_QWORD *)v350 + 3) = off_24EC20780;
          *((_OWORD *)v350 + 2) = *(_OWORD *)&v538.__r_.__value_.__r.__words[1];
          *((_QWORD *)v350 + 6) = *(_QWORD *)v539;
          *(_OWORD *)(v350 + 56) = *(_OWORD *)&v539[8];
          *((_QWORD *)v350 + 9) = v540;
          v510 = v350 + 24;
          v511 = v350;
          v506.__r_.__value_.__r.__words[0] = (std::string::size_type)v347;
          v506.__r_.__value_.__l.__size_ = (std::string::size_type)v347;
          v506.__r_.__value_.__r.__words[2] = (std::string::size_type)v348;
          do
            v353 = __ldxr(v349);
          while (__stxr(v353 + 1, v349));
          *(_QWORD *)&v507 = v350 + 24;
          *((_QWORD *)&v507 + 1) = v350;
          do
            v354 = __ldxr(v352);
          while (__stxr(v354 + 1, v352));
          v508 = v350 + 24;
          do
            v355 = __ldaxr(v352);
          while (__stlxr(v355 - 1, v352));
          if (!v355)
          {
            (*(void (**)(char *))(*(_QWORD *)v350 + 16))(v350);
            std::__shared_weak_count::__release_weak(v351);
          }
          v356 = (std::__shared_weak_count *)v509.__r_.__value_.__r.__words[2];
          if (v509.__r_.__value_.__r.__words[2])
          {
            v357 = (unint64_t *)(v509.__r_.__value_.__r.__words[2] + 8);
            do
              v358 = __ldaxr(v357);
            while (__stlxr(v358 - 1, v357));
            if (!v358)
            {
              ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
              std::__shared_weak_count::__release_weak(v356);
            }
          }
          v359 = v506.__r_.__value_.__r.__words[0];
          if (v508[31] >= 0)
            v360 = v508 + 8;
          else
            v360 = (char *)*((_QWORD *)v508 + 1);
          if (v508[55] >= 0)
            v361 = v508 + 32;
          else
            v361 = (char *)*((_QWORD *)v508 + 4);
          v362 = _os_log_pack_fill();
          *(_DWORD *)v362 = 136315394;
          *(_QWORD *)(v362 + 4) = v360;
          *(_WORD *)(v362 + 12) = 2080;
          *(_QWORD *)(v362 + 14) = v361;
          v363 = operator new();
          v364 = *(unsigned __int8 *)(v461 + 39);
          v365 = v454;
          if ((v364 & 0x80u) != 0)
          {
            v365 = *(_QWORD *)(v461 + 16);
            v364 = *(_QWORD *)(v461 + 24);
          }
          *(_QWORD *)v363 = v359;
          *(_OWORD *)(v363 + 8) = *(_OWORD *)&v506.__r_.__value_.__r.__words[1];
          *(_OWORD *)&v506.__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)(v363 + 24) = v507;
          v507 = 0uLL;
          *(_QWORD *)(v363 + 40) = v365;
          *(_QWORD *)(v363 + 48) = v364;
          *(_BYTE *)(v363 + 56) = 16;
          v509.__r_.__value_.__r.__words[0] = 0;
          v538.__r_.__value_.__r.__words[0] = v363;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v329 + 24) + 40))(*(_QWORD *)(v329 + 24), &v538);
          v325 = __s;
          v326 = (uint64_t **)(__s + 1824);
          v366 = v538.__r_.__value_.__r.__words[0];
          v538.__r_.__value_.__r.__words[0] = 0;
          if (v366)
          {
            v367 = *(std::__shared_weak_count **)(v366 + 32);
            if (v367)
            {
              v368 = (unint64_t *)&v367->__shared_owners_;
              do
                v369 = __ldaxr(v368);
              while (__stlxr(v369 - 1, v368));
              if (!v369)
              {
                ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                std::__shared_weak_count::__release_weak(v367);
              }
            }
            v370 = *(std::__shared_weak_count **)(v366 + 16);
            if (v370)
            {
              v371 = (unint64_t *)&v370->__shared_owners_;
              do
                v372 = __ldaxr(v371);
              while (__stlxr(v372 - 1, v371));
              if (!v372)
              {
                ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                std::__shared_weak_count::__release_weak(v370);
              }
            }
            MEMORY[0x227684CE8](v366, 0x10F0C40B62ED6C6);
            v373 = v509.__r_.__value_.__r.__words[0];
            v509.__r_.__value_.__r.__words[0] = 0;
            if (v373)
            {
              v374 = *(std::__shared_weak_count **)(v373 + 32);
              if (v374)
              {
                v375 = (unint64_t *)&v374->__shared_owners_;
                do
                  v376 = __ldaxr(v375);
                while (__stlxr(v376 - 1, v375));
                if (!v376)
                {
                  ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                  std::__shared_weak_count::__release_weak(v374);
                }
              }
              v377 = *(std::__shared_weak_count **)(v373 + 16);
              if (v377)
              {
                v378 = (unint64_t *)&v377->__shared_owners_;
                do
                  v379 = __ldaxr(v378);
                while (__stlxr(v379 - 1, v378));
                if (!v379)
                {
                  ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                  std::__shared_weak_count::__release_weak(v377);
                }
              }
              MEMORY[0x227684CE8](v373, 0x10F0C40B62ED6C6);
            }
          }
          v380 = (std::__shared_weak_count *)*((_QWORD *)&v507 + 1);
          if (*((_QWORD *)&v507 + 1))
          {
            v381 = (unint64_t *)(*((_QWORD *)&v507 + 1) + 8);
            do
              v382 = __ldaxr(v381);
            while (__stlxr(v382 - 1, v381));
            if (!v382)
            {
              ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
              std::__shared_weak_count::__release_weak(v380);
            }
          }
          v383 = (std::__shared_weak_count *)v506.__r_.__value_.__r.__words[2];
          if (v506.__r_.__value_.__r.__words[2])
          {
            v384 = (unint64_t *)(v506.__r_.__value_.__r.__words[2] + 8);
            do
              v385 = __ldaxr(v384);
            while (__stlxr(v385 - 1, v384));
            if (!v385)
            {
              ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
              std::__shared_weak_count::__release_weak(v383);
            }
          }
        }
        else
        {
          os_log_type_enabled(v343, OS_LOG_TYPE_ERROR);
          LODWORD(v538.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v538.__r_.__value_.__r.__words + 4) = (std::string::size_type)__dst;
          WORD2(v538.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v538.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v465;
          v386 = (void *)_os_log_send_and_compose_impl();
          v325 = __s;
          v326 = (uint64_t **)(__s + 1824);
          if (v386)
            free(v386);
        }
        if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v512.__r_.__value_.__l.__data_);
          if (!v327)
          {
LABEL_690:
            sub_223182C08((uint64_t)&v466);
            v388 = v471;
            if (v471)
            {
              v389 = (unint64_t *)&v471->__shared_owners_;
              do
                v390 = __ldaxr(v389);
              while (__stlxr(v390 - 1, v389));
              if (!v390)
              {
                ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                std::__shared_weak_count::__release_weak(v388);
              }
            }
            goto LABEL_695;
          }
        }
        else if (!v327)
        {
          goto LABEL_690;
        }
        sub_2245664AC((unsigned __int8 *)v323, &v538);
        if ((_BYTE)v525)
        {
          v440 = __cxa_allocate_exception(8uLL);
          *v440 = &off_24EC1FCC0;
          __cxa_throw(v440, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
        }
        sub_22456A158((uint64_t)__p, &v506);
        if ((v506.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v387 = &v506;
        else
          v387 = (std::string *)v506.__r_.__value_.__r.__words[0];
        sub_22322C138((uint64_t)&v466, "Could not register keyframe %s: %s", (const char *)&v538, (const char *)v387);
        if (SHIBYTE(v506.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v506.__r_.__value_.__l.__data_);
        sub_223182C08((uint64_t)&v466);
        goto LABEL_690;
      }
    }
    memmove(v339, v337, v338);
    goto LABEL_606;
  }
LABEL_711:
  if (!v537 && v536)
  {
    if (v535)
    {
      if (v534 < 0)
        operator delete(v533);
      if (SHIBYTE(v532) < 0)
        operator delete(v530);
    }
    if ((_BYTE)v529 && SHIBYTE(v528) < 0)
      operator delete(*(void **)&v527[16]);
  }
  if (v477)
    operator delete(v477);
LABEL_714:
  if (v493)
  {
    v392 = v480;
    if (v480)
    {
      rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v480;
LABEL_726:
      operator delete(v392);
    }
  }
  else if (v492)
  {
    if (v491)
    {
      if (v490 < 0)
        operator delete(v489);
      if (SHIBYTE(v488) < 0)
        operator delete(v486);
    }
    if ((_BYTE)v485 && SHIBYTE(v484) < 0)
    {
      v392 = v482;
      goto LABEL_726;
    }
  }
LABEL_727:
  if (!v504 && v503)
  {
    if (v502)
    {
      if (v501 < 0)
        operator delete(v500);
      if (v499 < 0)
        operator delete(v498);
    }
    if (v497 && v496 < 0)
      operator delete(v495);
  }
  if (SHIBYTE(v505.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v505.__r_.__value_.__l.__data_);
}

void sub_22384F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  if (LOBYTE(STACK[0x2F8]) && SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  __cxa_guard_abort(&qword_255788F58);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  sub_223182DAC(v62 - 176);
  sub_223197D38((uint64_t)&STACK[0x400]);
  if (a43)
    operator delete(a43);
  sub_223888F64((uint64_t)&a46);
  sub_223198030(a18, *(_QWORD **)(a18 + 8));
  sub_223197D38((uint64_t)&a62);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_223850064()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x223850030);
  JUMPOUT(0x223850024);
}

uint64_t sub_223850070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;

  *(_QWORD *)a1 = &off_24EC5B208;
  v2 = *(_QWORD *)(a1 + 1952);
  *(_QWORD *)(a1 + 1952) = 0;
  if (v2)
  {
    v3 = sub_223888FF8(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C40790BDDCALL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 1944);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(void **)(a1 + 1912);
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(void **)(a1 + 1912);
  if (v7)
  {
LABEL_8:
    *(_QWORD *)(a1 + 1920) = v7;
    operator delete(v7);
  }
LABEL_9:
  sub_2233FADDC(*(_QWORD **)(a1 + 1880));
  sub_223198030(a1 + 1848, *(_QWORD **)(a1 + 1856));
  sub_223198030(a1 + 1824, *(_QWORD **)(a1 + 1832));
  sub_223198030(a1 + 1800, *(_QWORD **)(a1 + 1808));
  sub_223198030(a1 + 1776, *(_QWORD **)(a1 + 1784));
  sub_223198030(a1 + 1752, *(_QWORD **)(a1 + 1760));
  sub_223198030(a1 + 1728, *(_QWORD **)(a1 + 1736));
  v8 = *(std::__shared_weak_count **)(a1 + 1712);
  if (!v8)
    goto LABEL_13;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_13:
    v11 = *(void **)(a1 + 1680);
    if (!v11)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = *(void **)(a1 + 1680);
  if (v11)
  {
LABEL_14:
    *(_QWORD *)(a1 + 1688) = v11;
    operator delete(v11);
  }
LABEL_15:
  v12 = *(_QWORD *)(a1 + 1648);
  *(_QWORD *)(a1 + 1648) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 1640);
  *(_QWORD *)(a1 + 1640) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1632) = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 208);
    *(_QWORD *)(v14 + 208) = 0;
    if (v15)
    {
      v16 = sub_223889410(v15);
      MEMORY[0x227684CE8](v16, 0x10A0C40719C5C5ELL);
    }
    v17 = *(void **)(v14 + 152);
    if (v17)
      free(v17);
    *(_QWORD *)(v14 + 152) = 0;
    sub_2238895FC(v14 + 72);
    MEMORY[0x227684CE8](v14, 0x1030C40BFCA00A0);
  }
  sub_22388A7C4(*(_QWORD **)(a1 + 1616));
  v19 = *(std::__shared_weak_count **)(a1 + 1576);
  if (!v19)
    goto LABEL_29;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = *(uint64_t **)(a1 + 1560);
    *(_QWORD *)(a1 + 1560) = 0;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v22 = *(uint64_t **)(a1 + 1560);
    *(_QWORD *)(a1 + 1560) = 0;
    if (!v22)
      goto LABEL_35;
  }
  v23 = v22[1];
  v22[1] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *v22;
  *v22 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  MEMORY[0x227684CE8](v22, 0x20C40A4A59CD2);
LABEL_35:
  v25 = *(_QWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 1552) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(std::__shared_weak_count **)(a1 + 1544);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  v27 = *(void **)(a1 + 1520);
  if (v27)
  {
    free(v27);
    *(_QWORD *)(a1 + 1520) = 0;
  }
  v28 = *(void **)(a1 + 1488);
  if (v28)
  {
    free(v28);
    *(_QWORD *)(a1 + 1488) = 0;
  }
  v29 = *(void **)(a1 + 1440);
  if (v29)
  {
    *(_QWORD *)(a1 + 1448) = v29;
    operator delete(v29);
  }
  v30 = *(std::__shared_weak_count **)(a1 + 1368);
  if (!v30)
    goto LABEL_49;
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = *(std::__shared_weak_count **)(a1 + 1280);
    if (!v33)
      goto LABEL_61;
  }
  else
  {
LABEL_49:
    v33 = *(std::__shared_weak_count **)(a1 + 1280);
    if (!v33)
      goto LABEL_61;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_61:
  v36 = *(_QWORD *)(a1 + 1256);
  *(_QWORD *)(a1 + 1256) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(a1 + 1248);
  *(_QWORD *)(a1 + 1248) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *(_QWORD *)(a1 + 1232);
  *(_QWORD *)(a1 + 1232) = 0;
  if (v39)
  {
    v40 = sub_22318433C(v39, v18);
    MEMORY[0x227684CE8](v40, 0x10A0C408E81D1CELL);
  }
  v41 = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = 0;
  if (v41)
  {
    v42 = sub_223847608(v41);
    MEMORY[0x227684CE8](v42, 0x10A2C403CBED27ELL);
  }
  v43 = *(std::__shared_weak_count **)(a1 + 1216);
  if (!v43)
    goto LABEL_75;
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    sub_223223FC0(a1 + 8);
    return a1;
  }
  else
  {
LABEL_75:
    sub_223223FC0(a1 + 8);
    return a1;
  }
}

void sub_2238504AC(uint64_t a1)
{
  sub_223850070(a1);
  JUMPOUT(0x227684CE8);
}

#error "2238504D0: too big function (funcsize=0)"

void sub_2238616AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  if (LOBYTE(STACK[0x7A8]) && SLOBYTE(STACK[0x7A7]) < 0)
    operator delete((void *)STACK[0x790]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x5C0]);
  if (SLOBYTE(STACK[0xE27]) < 0)
    operator delete((void *)STACK[0xE10]);
  sub_223195348((uint64_t)&STACK[0xFF0]);
  sub_22386E470((void **)&STACK[0xF00]);
  sub_223167354((uint64_t)&STACK[0x2D0]);
  sub_223255CAC((uint64_t)&STACK[0x308]);
  sub_223510F4C(a72);
  _Unwind_Resume(a1);
}

void sub_223864894(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22388CFF0((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2238649B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2238649D0(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223864AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_223864B0C(uint64_t a1, float a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4;
  float v5;

  if (*(_BYTE *)(a1 + 16))
    v4 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = (float)v4 / 1000000.0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = (uint64_t)(float)(a2 * 1000000.0);
  *(std::chrono::steady_clock::time_point *)a1 = std::chrono::steady_clock::now();
  *(_BYTE *)(a1 + 16) = 1;
  return v5;
}

void sub_223864B8C(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  std::mutex *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  uint64_t (**v97)();
  uint64_t v98;
  std::__shared_weak_count *v99;
  _BYTE v100[23];
  __int16 v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *v105[2];
  __int128 v106;
  void *__p[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD ***)(a1 + 1648);
  if (v4)
  {
    sub_223CA6520(v4, a2 + 8, a2 + 2520, (uint64_t *)(a2 + 1872), (uint64_t)v105);
    sub_22360C6EC(a2 + 2192, (uint64_t)v105);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v5 = (char *)v105[1];
    if (v105[1])
    {
      v6 = (char *)v106;
      v7 = v105[1];
      if ((void *)v106 != v105[1])
      {
        do
        {
          v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 28);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v6 -= 248;
        }
        while (v6 != v5);
        v7 = v105[1];
      }
      *(_QWORD *)&v106 = v5;
      operator delete(v7);
    }
  }
  sub_223197368(*(_QWORD *)(a1 + 1232), (uint64_t)v105);
  v11 = sub_2238365F0(*(_QWORD *)(a1 + 1224));
  *(_QWORD *)&v110 = *(_QWORD *)(a1 + 1584);
  v12 = *(_DWORD *)(a1 + 1592);
  v13 = *(_QWORD *)(a1 + 1744);
  v14 = *(_QWORD *)(a1 + 1768);
  v15 = v108;
  *(_OWORD *)(a2 + 1952) = *(_OWORD *)__p;
  v16 = *(_OWORD *)v105;
  *(_OWORD *)(a2 + 1936) = v106;
  *(_QWORD *)&v109 = v11;
  *((_QWORD *)&v109 + 1) = v17;
  *((_QWORD *)&v110 + 1) = __PAIR64__(v13, v12);
  *(_OWORD *)(a2 + 1920) = v16;
  *(_OWORD *)(a2 + 1968) = v15;
  v18 = v110;
  *(_OWORD *)(a2 + 1984) = v109;
  *(_DWORD *)(a2 + 2016) = v14;
  *(_OWORD *)(a2 + 2000) = v18;
  v94 = operator new(0x20uLL);
  v95 = xmmword_2245B8D50;
  strcpy((char *)v94, "Stats.Keyframing.disk_usage");
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v19 = sub_2241471F8();
    v20 = v19[2];
    if (!v20)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_129;
      }
      v20 = v19[2];
    }
    v21 = *(_QWORD *)(v20 + 64);
    v22 = (std::mutex *)(v21 + 32);
    std::mutex::lock((std::mutex *)(v21 + 32));
    v24 = *(_QWORD *)(v21 + 96);
    v23 = *(_QWORD *)(v21 + 104);
    std::mutex::unlock(v22);
    if (v24 != v23)
    {
      v105[0] = "cv3d.recon.";
      v105[1] = (void *)11;
      v25 = HIBYTE(v95);
      v26 = &v94;
      if (v95 < 0)
      {
        v26 = v94;
        v25 = v95;
      }
      *(_QWORD *)&v106 = v26;
      *((_QWORD *)&v106 + 1) = v25;
      sub_2231A9820((uint64_t)v105, (uint64_t)__p, 0, 0, &v93);
      sub_2241471F8();
      v27 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
        {
          *(_QWORD *)&v96 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v96 + 1) = 2;
          v28 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
          {
            if (*(_BYTE *)(a1 + 80))
            {
              v29 = *(_QWORD *)(a1 + 1528);
              sub_223FF9988(a1 + 56, (std::string *)v105);
              v30 = sub_2238C7CB4((uint64_t)v105, v29);
              if (SBYTE7(v106) < 0)
                operator delete(v105[0]);
            }
            else
            {
              v30 = 0;
            }
            LODWORD(v97) = v30;
            strcpy(v100, "num_data_files");
            *(_QWORD *)&v100[15] = 0;
            v101 = 270;
            sub_2235353F4((int *)&v97, (__int128 *)v100, &v96, &v102);
            if (HIBYTE(v101) && (char)v101 < 0)
              operator delete(*(void **)v100);
            v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 56))(v27);
            v32 = *(void **)v31;
            v33 = *(std::__shared_weak_count **)(v31 + 8);
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            v37 = v103;
            v36 = (unint64_t *)v104;
            v97 = &off_24EC6A3B8;
            v98 = v103;
            v99 = v104;
            v103 = 0;
            v104 = 0;
            v105[0] = v32;
            v105[1] = v33;
            if (v33)
            {
              v38 = (unint64_t *)&v33->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            *(_QWORD *)&v106 = &off_24EC6A3B8;
            *((_QWORD *)&v106 + 1) = v37;
            __p[0] = v36;
            if (v36)
            {
              v40 = v36 + 1;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            (*(void (**)(uint64_t *, void **))(*v28 + 16))(v28, v105);
            v42 = (std::__shared_weak_count *)__p[0];
            if (__p[0])
            {
              v43 = (unint64_t *)((char *)__p[0] + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v45 = (std::__shared_weak_count *)v105[1];
            if (v105[1])
            {
              v46 = (unint64_t *)((char *)v105[1] + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = v99;
            if (v99)
            {
              v49 = (unint64_t *)&v99->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            if (v33)
            {
              v51 = (unint64_t *)&v33->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v53 = v104;
            if (v104)
            {
              v54 = (unint64_t *)&v104->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_124;
  v56 = sub_2241471F8();
  v57 = v56[2];
  if (!v57)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v57 = v56[2];
      goto LABEL_74;
    }
LABEL_129:
    abort();
  }
LABEL_74:
  v58 = *(_QWORD *)(v57 + 64);
  v59 = (std::mutex *)(v58 + 32);
  std::mutex::lock((std::mutex *)(v58 + 32));
  v61 = *(_QWORD *)(v58 + 96);
  v60 = *(_QWORD *)(v58 + 104);
  std::mutex::unlock(v59);
  if (v61 != v60)
  {
    v105[0] = "cv3d.recon.";
    v105[1] = (void *)11;
    v62 = HIBYTE(v95);
    v63 = &v94;
    if (v95 < 0)
    {
      v63 = v94;
      v62 = v95;
    }
    *(_QWORD *)&v106 = v63;
    *((_QWORD *)&v106 + 1) = v62;
    sub_2231A9820((uint64_t)v105, (uint64_t)__p, 0, 0, &v93);
    sub_2241471F8();
    v64 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
    {
      kdebug_trace();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
      {
        *(_QWORD *)&v96 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v96 + 1) = 2;
        v65 = sub_2241471F8();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
        {
          if (*(_BYTE *)(a1 + 80))
          {
            v66 = *(_QWORD *)(a1 + 1528);
            sub_223FF97F8(a1 + 56, (std::string *)v105);
            v67 = sub_2238C7CB4((uint64_t)v105, v66);
            if (SBYTE7(v106) < 0)
              operator delete(v105[0]);
          }
          else
          {
            v67 = 0;
          }
          LODWORD(v97) = v67;
          strcpy(v100, "num_metadata_files");
          *(_DWORD *)&v100[19] = 0;
          v101 = 274;
          sub_2235353F4((int *)&v97, (__int128 *)v100, &v96, &v102);
          if (HIBYTE(v101) && (char)v101 < 0)
            operator delete(*(void **)v100);
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 56))(v64);
          v69 = *(void **)v68;
          v70 = *(std::__shared_weak_count **)(v68 + 8);
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v74 = v103;
          v73 = (unint64_t *)v104;
          v97 = &off_24EC6A3B8;
          v98 = v103;
          v99 = v104;
          v103 = 0;
          v104 = 0;
          v105[0] = v69;
          v105[1] = v70;
          if (v70)
          {
            v75 = (unint64_t *)&v70->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          *(_QWORD *)&v106 = &off_24EC6A3B8;
          *((_QWORD *)&v106 + 1) = v74;
          __p[0] = v73;
          if (v73)
          {
            v77 = v73 + 1;
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          (*(void (**)(uint64_t *, void **))(*v65 + 16))(v65, v105);
          v79 = (std::__shared_weak_count *)__p[0];
          if (__p[0])
          {
            v80 = (unint64_t *)((char *)__p[0] + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v82 = (std::__shared_weak_count *)v105[1];
          if (v105[1])
          {
            v83 = (unint64_t *)((char *)v105[1] + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v85 = v99;
          if (v99)
          {
            v86 = (unint64_t *)&v99->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          if (v70)
          {
            v88 = (unint64_t *)&v70->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v90 = v104;
          if (v104)
          {
            v91 = (unint64_t *)&v104->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
        }
      }
      kdebug_trace();
    }
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v95) & 0x80000000) == 0)
        goto LABEL_126;
      goto LABEL_125;
    }
  }
LABEL_124:
  if (SHIBYTE(v95) < 0)
LABEL_125:
    operator delete(v94);
LABEL_126:
  kdebug_trace();
  sub_2238BCBA4(a2, *(_DWORD *)(a1 + 816));
}

void sub_22386564C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a9);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void sub_223865818(uint64_t a1, float *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223865944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223865960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v4) & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        if (*(_QWORD *)(v6 + 40))
        {
          operator delete(*(void **)(v6 + 16));
          *(_QWORD *)(v6 + 16) = &unk_2245C5160;
          *(_OWORD *)(v6 + 24) = 0u;
          *(_OWORD *)(v6 + 40) = 0u;
          v2 = *(_QWORD *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 56;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &unk_2245C5160;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  return a1;
}

uint64_t sub_223865A10(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  std::string __p;
  std::string *v10;
  std::string *p_p;
  _DWORD *v12;
  std::string *v13;
  std::string *v14;
  std::string **v15;

  v8 = 0;
  sub_22388D334(v7, "New keyframe: ");
  sub_22319B83C((uint64_t)&v6, (uint64_t)v7, a2);
  v10 = (std::string *)v7;
  p_p = (std::string *)" at time:";
  v12 = v7;
  v13 = (std::string *)" at time:";
  v14 = (std::string *)" at time:";
  if (v8 == -1)
    sub_22316DD70();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _DWORD *))off_24EC5B710[v8])(&__p, v7);
  sub_223701C90(a3, &__p);
  v10 = (std::string *)v7;
  p_p = &__p;
  v12 = v7;
  v13 = &__p;
  v14 = &__p;
  if (v8 == -1)
    sub_22316DD70();
  v15 = &v10;
  ((void (*)(std::string ***, _DWORD *))off_24EC5B310[v8])(&v15, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 == -1)
    sub_22316DD70();
  v10 = &__p;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24EC5B328[v8])(&v10, v7);
  if (v8 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24EC5B2E0[v8])(&v10, v7);
  return result;
}

void sub_223865B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223865BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  float32x4_t v7;
  __n128 v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _OWORD *v17;

  kdebug_trace();
  v10 = *(_QWORD **)(a2 + 1224);
  v11 = (uint64_t *)v10[2];
  if (v11)
  {
    while (*((_BYTE *)v11 + 144) != 1)
    {
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_4;
    }
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v12 = (uint64_t *)*v11;
    if (*v11)
    {
      v13 = 0;
      v14 = 1;
      v15 = (uint64_t *)*v11;
      do
      {
        v16 = v13;
        v13 = v14;
        while (*((_BYTE *)v15 + 144) != 1)
        {
          v15 = (uint64_t *)*v15;
          if (!v15)
            goto LABEL_12;
        }
        ++v14;
        v15 = (uint64_t *)*v15;
        v16 = v13;
      }
      while (v15);
LABEL_12:
      if (v16 >= 0xFFFFFFFFFFFFFFFLL)
        sub_22316E078();
    }
    else
    {
      v14 = 1;
    }
    v17 = operator new(16 * v14);
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = &v17[v14];
    v6 = *((_OWORD *)v11 + 2);
    for (*v17 = v6; v12; v12 = (uint64_t *)*v12)
    {
      while (*((_BYTE *)v12 + 144) != 1)
      {
        v12 = (uint64_t *)*v12;
        if (!v12)
          goto LABEL_20;
      }
      v6 = *((_OWORD *)v12 + 2);
      v17[1] = v6;
      ++v17;
    }
LABEL_20:
    *(_QWORD *)(a1 + 8) = v17 + 1;
  }
  else
  {
LABEL_4:
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  LODWORD(v6) = 0;
  sub_2238C7DD0((uint64_t **)a1, a3, v10, *(double *)&v6, v7, v8, v9);
  return kdebug_trace();
}

void sub_223865D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  _QWORD *v10;
  void *v12;

  v12 = *v9;
  if (*v9)
  {
    *v10 = v12;
    operator delete(v12);
  }
  sub_2231874DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223865D90(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223865EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223865ECC(_QWORD *a1, uint64_t a2, float32x4_t *a3, _QWORD *a4, int a5, int a6, unsigned int a7)
{
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::mutex *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v26;
  std::string::size_type v27;
  int v28;
  __n128 *v31;
  std::string *v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  const char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const char *v43;
  size_t v44;
  unsigned __int8 v45;
  const char *v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  size_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned __int8 v90;
  const char *v91;
  size_t v92;
  _BYTE *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  size_t v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  float32x4_t *v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::string::size_type v156;
  float32x4_t v157;
  __int128 v158;
  __int128 v159;
  _OWORD *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::string::size_type v166;
  std::string::size_type v167;
  _QWORD *v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  char *v177;
  char *v178;
  unsigned __int8 v179;
  uint64_t v180;
  const char *v181;
  NSObject *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  std::mutex *v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  std::string *v190;
  std::string *v191;
  uint64_t v192;
  std::string::size_type v193;
  std::string *v194;
  std::string::size_type v195;
  std::string::size_type v196;
  int v197;
  __n128 *v200;
  std::string *v201;
  size_t v202;
  std::string::size_type v203;
  unsigned int v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  char *v210;
  char *v211;
  unsigned __int8 v212;
  uint64_t v213;
  const char *v214;
  NSObject *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  int64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  char *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  char *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::string::size_type v238;
  char *v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::string::size_type v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::string::size_type v259;
  unsigned __int8 *v260;
  uint64_t **v261;
  _QWORD *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t **v265;
  uint64_t **v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t *v270;
  unint64_t v271;
  uint64_t *v272;
  _QWORD *v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  uint64_t *v280;
  int64_t v281;
  uint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  _OWORD *v287;
  uint64_t *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  int8x8_t v292;
  int v293;
  char v294;
  BOOL v295;
  uint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  std::mutex *v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  std::string::size_type v307;
  std::string *v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t *v312;
  float32x2_t *v313;
  int32x4_t v314;
  int32x4_t v315;
  __int128 v316;
  float32x4_t v317;
  int8x16_t v318;
  int8x16_t v319;
  float32x2_t v320;
  int8x16_t v321;
  float32x2_t v322;
  unint64_t v323;
  unsigned __int32 v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  char *v342;
  char *v343;
  int64_t v344;
  uint64_t v345;
  void *v346;
  std::string::size_type v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  char *v351;
  char *v352;
  void *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  _QWORD *v357;
  int v358;
  _BOOL4 v359;
  uint64_t v360;
  uint64_t **v361;
  uint64_t v362;
  uint64_t **v363;
  const char *__src;
  unsigned __int8 *__srca;
  int v366;
  uint64_t v367;
  uint64_t v368;
  const char *v369;
  std::string v370;
  std::string v371;
  int v372;
  void *v373;
  char *v374;
  char *v375;
  __int128 v376;
  _QWORD v377[3];
  void *v378[2];
  char v379;
  char v380;
  std::string __p;
  int v382;
  const char *v383;
  int v384;
  const char *v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  int8x16_t v392;
  int8x16_t v393;
  float32x2_t v394;
  unsigned __int32 v395;
  int v396;
  char *category[2];
  __int128 v398;
  int v399;
  _BYTE object[48];
  float32x4_t v401;
  float32x4_t v402;
  uint64_t v403;

  v403 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (*(_BYTE *)(a2 + 772))
  {
    kdebug_trace();
LABEL_3:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (!*(_DWORD *)sub_2231CC494(*(_QWORD *)(a2 + 1568)))
  {
    sub_22384BA54(v378);
    if (**((int **)v378[0] + 7) > 4
      || (v39 = *((unsigned __int8 *)v378[0] + 72),
          v40 = sub_22322F254((uint64_t)v378[0], "OSLogSurrogateAppender", 1, 0),
          v41 = v40,
          !v39)
      && !v40)
    {
LABEL_134:
      kdebug_trace();
      goto LABEL_3;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
    __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v382 = 4;
    v383 = "unknown file";
    v384 = 1566;
    v386 = 0;
    v387 = 0;
    v385 = "unknown function";
    v42 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
    v43 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
    v369 = v43;
    if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v43 = *(const char **)(v42 + 16);
      v44 = *(_QWORD *)(v42 + 24);
    }
    else
    {
      v44 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    }
    v45 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v46 = (const char *)&xmmword_255788F40;
    else
      v46 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v47 = byte_255788F57;
    else
      v47 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v46, v43);
    v48 = &object[8];
    if (v47 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v47 >= 0x17)
    {
      v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17)
        v49 = v47 | 7;
      v50 = v49 + 1;
      v48 = operator new(v49 + 1);
      *(_QWORD *)&object[24] = v50 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v48;
      *(_QWORD *)&object[16] = v47;
    }
    else
    {
      object[31] = v47;
      if (!v47)
      {
LABEL_67:
        v48[v47] = 0;
        object[32] = 1;
        v51 = &object[40];
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v44 >= 0x17)
        {
          v52 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v52 = v44 | 7;
          v53 = v52 + 1;
          v51 = operator new(v52 + 1);
          v401.i64[1] = v53 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v51;
          v401.i64[0] = v44;
        }
        else
        {
          v401.i8[15] = v44;
          if (!v44)
            goto LABEL_75;
        }
        memmove(v51, v43, v44);
LABEL_75:
        v51[v44] = 0;
        v402.i8[0] = 1;
        v54 = *(NSObject **)object;
        if (v401.i8[15] < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v41 && *(_QWORD *)(v41 + 24))
        {
          v55 = _os_log_pack_size();
          v56 = (std::__shared_weak_count_vtbl *)operator new(v55, (std::align_val_t)8uLL);
          v57 = (std::__shared_weak_count *)operator new();
          v58 = v57;
          v57->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          v57->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v57->__shared_weak_owners_ = 0;
          v57[1].__vftable = v56;
          *(_QWORD *)object = v56;
          *(_QWORD *)&object[8] = v56;
          *(_QWORD *)&object[16] = v57;
          do
            v60 = __ldxr(p_shared_owners);
          while (__stxr(v60 + 1, p_shared_owners));
          memset(&object[24], 0, 24);
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v58);
          }
          v62 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v63 = operator new();
          v64 = *(unsigned __int8 *)(v42 + 39);
          v65 = v369;
          if ((v64 & 0x80u) != 0)
          {
            v65 = *(const char **)(v42 + 16);
            v64 = *(_QWORD *)(v42 + 24);
          }
          *(_QWORD *)v63 = v62;
          *(_OWORD *)(v63 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v63 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v63 + 40) = v65;
          *(_QWORD *)(v63 + 48) = v64;
          *(_BYTE *)(v63 + 56) = 16;
          category[0] = 0;
          *(_QWORD *)&v391 = v63;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v41 + 24) + 40))(*(_QWORD *)(v41 + 24), &v391);
          v66 = v391;
          *(_QWORD *)&v391 = 0;
          if (v66)
          {
            v67 = *(std::__shared_weak_count **)(v66 + 32);
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v70 = *(std::__shared_weak_count **)(v66 + 16);
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            MEMORY[0x227684CE8](v66, 0x10F0C40B62ED6C6);
            v73 = category[0];
            category[0] = 0;
            if (v73)
            {
              v74 = (std::__shared_weak_count *)*((_QWORD *)v73 + 4);
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              v77 = (std::__shared_weak_count *)*((_QWORD *)v73 + 2);
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              MEMORY[0x227684CE8](v73, 0x10F0C40B62ED6C6);
            }
          }
          v80 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v81 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v84 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
        }
        else
        {
          os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v86 = (void *)_os_log_send_and_compose_impl();
          if (v86)
            free(v86);
        }
        if (v39)
        {
          sub_22322C138((uint64_t)&__p, "Frame has no valid depth, skipping integration");
          sub_223182C08((uint64_t)&__p);
        }
        sub_223182C08((uint64_t)&__p);
        v87 = v387;
        if (v387)
        {
          v88 = (unint64_t *)&v387->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        goto LABEL_134;
      }
    }
    memmove(v48, v46, v47);
    goto LABEL_67;
  }
  v358 = a6;
  sub_223196604(*(_QWORD *)(a2 + 1232), a4, (uint64_t)&v373);
  v357 = a1;
  v372 = 0;
  v14 = (char *)v373;
  v15 = v374;
  v368 = a2;
  if (v373 != v374)
  {
    do
    {
      v16 = sub_223822434(*(_QWORD **)(a2 + 1224), *((_QWORD *)v14 + 2), *((_QWORD *)v14 + 3));
      if (sub_22387CB54(a2, v16))
        ++v372;
      v14 += 32;
    }
    while (v14 != v15);
    if (v372)
    {
      *(_QWORD *)object = "cv3d.recon.";
      *(_QWORD *)&object[8] = 11;
      *(_QWORD *)&object[16] = "Stats.Keyframing.update_count";
      *(_QWORD *)&object[24] = 29;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v17 = sub_2241471F8();
        v18 = v17[2];
        if (!v18)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v18 = v17[2];
        }
        v19 = *(_QWORD *)(v18 + 64);
        v20 = (std::mutex *)(v19 + 32);
        std::mutex::lock((std::mutex *)(v19 + 32));
        v22 = *(_QWORD *)(v19 + 96);
        v21 = *(_QWORD *)(v19 + 104);
        std::mutex::unlock(v20);
        if (v22 != v21)
        {
          sub_2241471F8();
          v23 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
          {
            memset(object, 0, 32);
            *(_DWORD *)&object[32] = 728325608;
            kdebug_trace();
            sub_22387FC20(v23, &v372);
            sub_2231874DC((uint64_t)object);
          }
        }
      }
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 728325624;
      kdebug_trace();
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v26 = p_p->__r_.__value_.__r.__words[0];
        v27 = p_p->__r_.__value_.__l.__size_;
        v28 = p_p->__r_.__value_.__s.__data_[16];
        if (v26 == 0x6365722E64337663 && v27 == 0x73746174532E6E6FLL && v28 == 46)
        {
          v31 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &__p;
          else
            v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v33 = __p.__r_.__value_.__l.__size_;
          sub_223532E4C(v31, v32, v33, (unsigned int *)&v372, (uint64_t)"color_invalidated_integrate", 27);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_22384BB48(v378);
      if (**((int **)v378[0] + 7) <= 3)
      {
        v366 = *((unsigned __int8 *)v378[0] + 72);
        v34 = sub_22322F254((uint64_t)v378[0], "OSLogSurrogateAppender", 1, 0);
        v35 = v34;
        if (v366 || v34)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v382 = 3;
          v383 = "unknown file";
          v384 = 1583;
          v386 = 0;
          v387 = 0;
          v385 = "unknown function";
          v36 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v362 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v38 = *(const char **)(v36 + 16);
            v37 = *(_QWORD *)(v36 + 24);
          }
          else
          {
            v37 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v38 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          }
          v360 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
          v90 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)object);
            sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F57 >= 0)
            v91 = (const char *)&xmmword_255788F40;
          else
            v91 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v92 = byte_255788F57;
          else
            v92 = *((_QWORD *)&xmmword_255788F40 + 1);
          __src = v38;
          *(_QWORD *)object = os_log_create(v91, v38);
          v93 = &object[8];
          if (v92 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v92 >= 0x17)
          {
            v94 = v35;
            v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v92 | 7) != 0x17)
              v95 = v92 | 7;
            v96 = v95 + 1;
            v93 = operator new(v95 + 1);
            *(_QWORD *)&object[24] = v96 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v93;
            *(_QWORD *)&object[16] = v92;
            v35 = v94;
          }
          else
          {
            object[31] = v92;
            if (!v92)
            {
LABEL_151:
              v93[v92] = 0;
              object[32] = 1;
              v97 = &object[40];
              if (v37 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              a2 = v368;
              if (v37 >= 0x17)
              {
                v98 = v35;
                v99 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v37 | 7) != 0x17)
                  v99 = v37 | 7;
                v100 = v99 + 1;
                v97 = operator new(v99 + 1);
                v401.i64[1] = v100 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v97;
                v401.i64[0] = v37;
                v35 = v98;
              }
              else
              {
                v401.i8[15] = v37;
                if (!v37)
                  goto LABEL_159;
              }
              memmove(v97, __src, v37);
LABEL_159:
              v97[v37] = 0;
              v402.i8[0] = 1;
              v101 = *(NSObject **)object;
              if (v401.i8[15] < 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v35 && *(_QWORD *)(v35 + 24))
              {
                v102 = _os_log_pack_size();
                v103 = (std::__shared_weak_count_vtbl *)operator new(v102, (std::align_val_t)8uLL);
                v104 = (std::__shared_weak_count *)operator new();
                v105 = v104;
                v104->__shared_owners_ = 0;
                v106 = (unint64_t *)&v104->__shared_owners_;
                v104->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v104->__shared_weak_owners_ = 0;
                v104[1].__vftable = v103;
                *(_QWORD *)object = v103;
                *(_QWORD *)&object[8] = v103;
                *(_QWORD *)&object[16] = v104;
                do
                  v107 = __ldxr(v106);
                while (__stxr(v107 + 1, v106));
                memset(&object[24], 0, 24);
                do
                  v108 = __ldaxr(v106);
                while (__stlxr(v108 - 1, v106));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v105);
                }
                v109 = *(_QWORD *)object;
                v110 = (_DWORD *)_os_log_pack_fill();
                v111 = v372;
                *v110 = 67109120;
                v110[1] = v111;
                v112 = operator new();
                v113 = *(unsigned __int8 *)(v362 + 39);
                v114 = v360;
                if ((v113 & 0x80u) != 0)
                {
                  v114 = *(_QWORD *)(v362 + 16);
                  v113 = *(_QWORD *)(v362 + 24);
                }
                *(_QWORD *)v112 = v109;
                *(_OWORD *)(v112 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v112 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v112 + 40) = v114;
                *(_QWORD *)(v112 + 48) = v113;
                *(_BYTE *)(v112 + 56) = 1;
                category[0] = 0;
                *(_QWORD *)&v391 = v112;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v35 + 24) + 40))(*(_QWORD *)(v35 + 24), &v391);
                v115 = v391;
                *(_QWORD *)&v391 = 0;
                if (v115)
                {
                  v116 = *(std::__shared_weak_count **)(v115 + 32);
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldaxr(v117);
                    while (__stlxr(v118 - 1, v117));
                    if (!v118)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  v119 = *(std::__shared_weak_count **)(v115 + 16);
                  if (v119)
                  {
                    v120 = (unint64_t *)&v119->__shared_owners_;
                    do
                      v121 = __ldaxr(v120);
                    while (__stlxr(v121 - 1, v120));
                    if (!v121)
                    {
                      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                      std::__shared_weak_count::__release_weak(v119);
                    }
                  }
                  MEMORY[0x227684CE8](v115, 0x10F0C40B62ED6C6);
                  v122 = category[0];
                  category[0] = 0;
                  if (v122)
                  {
                    v123 = (std::__shared_weak_count *)*((_QWORD *)v122 + 4);
                    if (v123)
                    {
                      v124 = (unint64_t *)&v123->__shared_owners_;
                      do
                        v125 = __ldaxr(v124);
                      while (__stlxr(v125 - 1, v124));
                      if (!v125)
                      {
                        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                        std::__shared_weak_count::__release_weak(v123);
                      }
                    }
                    v126 = (std::__shared_weak_count *)*((_QWORD *)v122 + 2);
                    if (v126)
                    {
                      v127 = (unint64_t *)&v126->__shared_owners_;
                      do
                        v128 = __ldaxr(v127);
                      while (__stlxr(v128 - 1, v127));
                      if (!v128)
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                    }
                    MEMORY[0x227684CE8](v122, 0x10F0C40B62ED6C6);
                  }
                }
                v129 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v130 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
                v132 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v133 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v134 = __ldaxr(v133);
                  while (__stlxr(v134 - 1, v133));
                  if (!v134)
                  {
                    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                    std::__shared_weak_count::__release_weak(v132);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v101, OS_LOG_TYPE_INFO);
                *(_DWORD *)object = 67109120;
                *(_DWORD *)&object[4] = v372;
                v135 = (void *)_os_log_send_and_compose_impl();
                if (v135)
                  free(v135);
              }
              if (v366)
              {
                sub_22322C138((uint64_t)&__p, "Invalidated color of %i keyframes while integrating new frame", v372);
                sub_223182C08((uint64_t)&__p);
              }
              sub_223182C08((uint64_t)&__p);
              v136 = v387;
              if (v387)
              {
                v137 = (unint64_t *)&v387->__shared_owners_;
                do
                  v138 = __ldaxr(v137);
                while (__stlxr(v138 - 1, v137));
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
              goto LABEL_218;
            }
          }
          memmove(v93, v91, v92);
          goto LABEL_151;
        }
      }
    }
  }
LABEL_218:
  memset(&__p, 0, sizeof(__p));
  sub_22346F77C((uint64_t)&__p, (v374 - (_BYTE *)v373) >> 5);
  v139 = (char *)v373;
  v140 = v374;
  if (v373 != v374)
  {
    do
    {
      v142 = *(_QWORD *)v139;
      v141 = (std::__shared_weak_count *)*((_QWORD *)v139 + 1);
      if (v141)
      {
        v143 = (unint64_t *)&v141->__shared_owners_;
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      v145 = (float32x4_t *)sub_223822434(*(_QWORD **)(a2 + 1224), *((_QWORD *)v139 + 2), *((_QWORD *)v139 + 3));
      v147 = *a3;
      v146 = a3[1];
      v149 = a3[2];
      v148 = a3[3];
      v151 = v145[1];
      v150 = v145[2];
      v153 = v145[3];
      v152 = v145[4];
      *(_QWORD *)object = v142;
      *(_QWORD *)&object[8] = v141;
      if (v141)
      {
        v154 = (unint64_t *)&v141->__shared_owners_;
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
      }
      *(float32x4_t *)&object[16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v147, v151.f32[0]), v146, *(float32x2_t *)v151.f32, 1), v149, v151, 2), v148, v151, 3);
      *(float32x4_t *)&object[32] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v147, v150.f32[0]), v146, *(float32x2_t *)v150.f32, 1), v149, v150, 2), v148, v150, 3);
      v401 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v147, v153.f32[0]), v146, *(float32x2_t *)v153.f32, 1), v149, v153, 2), v148, v153, 3);
      v402 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v147, v152.f32[0]), v146, *(float32x2_t *)v152.f32, 1), v149, v152, 2), v148, v152, 3);
      v156 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v160 = sub_22346F8A4((void **)&__p.__r_.__value_.__l.__data_, (__int128 *)object);
        v161 = *(std::__shared_weak_count **)&object[8];
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v160;
        if (!*(_QWORD *)&object[8])
          goto LABEL_234;
        v162 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
          if (v141)
          {
LABEL_235:
            v164 = (unint64_t *)&v141->__shared_owners_;
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
        }
        else
        {
LABEL_234:
          if (v141)
            goto LABEL_235;
        }
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = v142;
        *(_QWORD *)(v156 + 8) = *(_QWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)object = 0;
        v157 = v402;
        v159 = *(_OWORD *)&object[16];
        v158 = *(_OWORD *)&object[32];
        *(float32x4_t *)(v156 + 48) = v401;
        *(float32x4_t *)(v156 + 64) = v157;
        *(_OWORD *)(v156 + 16) = v159;
        *(_OWORD *)(v156 + 32) = v158;
        __p.__r_.__value_.__l.__size_ = v156 + 80;
        if (v141)
          goto LABEL_235;
      }
      v139 += 32;
    }
    while (v139 != v140);
  }
  v167 = __p.__r_.__value_.__l.__size_;
  v166 = __p.__r_.__value_.__r.__words[0];
  v371 = __p;
  v168 = *(_QWORD **)(a2 + 1256);
  *(_DWORD *)(v168[1] + 32) = a5;
  v169 = -858993459 * ((v167 - v166) >> 4);
  if (v169 >= a7)
    v170 = a7;
  else
    v170 = v169;
  if ((_DWORD)v170)
  {
    v171 = *(_QWORD *)(a2 + 1568);
    *(_QWORD *)object = v170;
    *(_QWORD *)&object[8] = v166;
    if (!v166
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*v168 + 16))(v168, v171, object);
    if (*(_BYTE *)(a2 + 796) && *(_BYTE *)(*(_QWORD *)(a2 + 1256) + 28))
    {
      sub_22384BA54(v378);
      if (**((int **)v378[0] + 7) <= 3)
      {
        v172 = *((unsigned __int8 *)v378[0] + 72);
        v173 = sub_22322F254((uint64_t)v378[0], "OSLogSurrogateAppender", 1, 0);
        v174 = v173 ? v173 + 16 : 0;
        if (v172 || v173)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v382 = 3;
          v383 = "unknown file";
          v384 = 1610;
          v386 = 0;
          v387 = 0;
          v385 = "unknown function";
          v175 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v176 = (uint64_t *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v178 = *(char **)(v175 + 16);
            v177 = *(char **)(v175 + 24);
          }
          else
          {
            v177 = (char *)*(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v178 = (char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          }
          category[0] = v178;
          category[1] = v177;
          v179 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)object);
            sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
            a2 = v368;
          }
          v180 = byte_255788F57;
          if (byte_255788F57 >= 0)
          {
            v181 = (const char *)&xmmword_255788F40;
          }
          else
          {
            v180 = *((_QWORD *)&xmmword_255788F40 + 1);
            v181 = (const char *)xmmword_255788F40;
          }
          *(_QWORD *)&v391 = v181;
          *((_QWORD *)&v391 + 1) = v180;
          *(_QWORD *)object = os_log_create(v181, category[0]);
          sub_223199D38(&object[8], (uint64_t)&v391);
          sub_223199D38(&object[40], (uint64_t)category);
          v182 = *(NSObject **)object;
          sub_223199BDC((uint64_t)object);
          sub_2238957B4(v174, v176, v182, OS_LOG_TYPE_INFO);
          if (v172)
          {
            sub_22322C138((uint64_t)&__p, "KFE:LCD");
            sub_223182C08((uint64_t)&__p);
          }
          sub_223182DAC((uint64_t)&__p);
        }
      }
      *(_QWORD *)(a2 + 1896) = sub_2231D041C(*(_QWORD *)(a2 + 1568));
      *(_QWORD *)object = "cv3d.recon.";
      *(_QWORD *)&object[8] = 11;
      *(_QWORD *)&object[16] = "Stats.Keyframing.num_color_invalidation_events";
      *(_QWORD *)&object[24] = 46;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v183 = sub_2241471F8();
        v184 = v183[2];
        if (!v184)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v184 = v183[2];
        }
        v185 = *(_QWORD *)(v184 + 64);
        v186 = (std::mutex *)(v185 + 32);
        std::mutex::lock((std::mutex *)(v185 + 32));
        v188 = *(_QWORD *)(v185 + 96);
        v187 = *(_QWORD *)(v185 + 104);
        std::mutex::unlock(v186);
        if (v188 != v187)
        {
          v189 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v190 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_2241471F8();
          v191 = v189 >= 0 ? &__p : v190;
          v192 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v191);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v192 + 24))(v192))
          {
            memset(object, 0, 32);
            *(_DWORD *)&object[32] = 728325608;
            kdebug_trace();
            ++*(_DWORD *)(a2 + 1596);
            sub_22387FD04(v192, (int *)(a2 + 1596));
            sub_2231874DC((uint64_t)object);
          }
        }
      }
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 728325624;
      kdebug_trace();
      v193 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v193 = __p.__r_.__value_.__l.__size_;
      if (v193 >= 0x11)
      {
        v194 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v194 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v195 = v194->__r_.__value_.__r.__words[0];
        v196 = v194->__r_.__value_.__l.__size_;
        v197 = v194->__r_.__value_.__s.__data_[16];
        if (v195 == 0x6365722E64337663 && v196 == 0x73746174532E6E6FLL && v197 == 46)
        {
          v200 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v201 = &__p;
          else
            v201 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v202 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v202 = __p.__r_.__value_.__l.__size_;
          ++*(_DWORD *)(a2 + 1596);
          sub_223FD4538(v200->n128_u64[0], v201, v202, (unsigned int *)(a2 + 1596));
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(_BYTE *)(a2 + 584) && *(_DWORD *)(*(_QWORD *)(a2 + 1256) + 24) >= *(_DWORD *)(a2 + 580))
    {
      v203 = v371.__r_.__value_.__r.__words[0];
      if (-858993459 * ((v371.__r_.__value_.__l.__size_ - v371.__r_.__value_.__r.__words[0]) >> 4)
         - v170 >= *(_DWORD *)(a2 + 588))
        v204 = *(_DWORD *)(a2 + 588);
      else
        v204 = -858993459 * ((v371.__r_.__value_.__l.__size_ - v371.__r_.__value_.__r.__words[0]) >> 4) - v170;
      LODWORD(v388) = v204;
      sub_22384BA54(v378);
      if (**((int **)v378[0] + 7) <= 3)
      {
        v205 = *((unsigned __int8 *)v378[0] + 72);
        v206 = sub_22322F254((uint64_t)v378[0], "OSLogSurrogateAppender", 1, 0);
        v207 = v206 ? v206 + 16 : 0;
        if (v205 || v206)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v382 = 3;
          v383 = "unknown file";
          v384 = 1624;
          v386 = 0;
          v387 = 0;
          v385 = "unknown function";
          v208 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v209 = (uint64_t *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v211 = *(char **)(v208 + 16);
            v210 = *(char **)(v208 + 24);
          }
          else
          {
            v210 = (char *)*(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v211 = (char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          }
          category[0] = v211;
          category[1] = v210;
          v212 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v212 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)object);
            sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
            a2 = v368;
          }
          v213 = byte_255788F57;
          if (byte_255788F57 >= 0)
          {
            v214 = (const char *)&xmmword_255788F40;
          }
          else
          {
            v213 = *((_QWORD *)&xmmword_255788F40 + 1);
            v214 = (const char *)xmmword_255788F40;
          }
          *(_QWORD *)&v391 = v214;
          *((_QWORD *)&v391 + 1) = v213;
          *(_QWORD *)object = os_log_create(v214, category[0]);
          sub_223199D38(&object[8], (uint64_t)&v391);
          sub_223199D38(&object[40], (uint64_t)category);
          v215 = *(NSObject **)object;
          sub_223199BDC((uint64_t)object);
          sub_223895CB4(v207, v209, v215, OS_LOG_TYPE_INFO, (int *)&v388);
          v204 = v388;
          if (v205)
          {
            sub_22322C138((uint64_t)&__p, "KFE:SCD:%i", v388);
            sub_223182C08((uint64_t)&__p);
          }
          sub_223182DAC((uint64_t)&__p);
          v203 = v371.__r_.__value_.__r.__words[0];
        }
      }
      v216 = *(_QWORD *)(a2 + 1256);
      v217 = *(_QWORD *)(a2 + 1568);
      *(_QWORD *)object = v204;
      *(_QWORD *)&object[8] = v203 + 80 * v170;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v216 + 16))(v216, v217, object);
      LODWORD(v170) = v204 + v170;
    }
  }
  v218 = v170;
  v219 = (char *)v373;
  v220 = v374;
  v221 = v374 - (_BYTE *)v373;
  v222 = (v374 - (_BYTE *)v373) >> 5;
  v223 = v170 - v222;
  if (v170 <= v222)
  {
    if (v170 >= v222)
      goto LABEL_351;
    v234 = (char *)v373 + 32 * v170;
    while (v220 != v234)
    {
      v235 = (std::__shared_weak_count *)*((_QWORD *)v220 - 3);
      if (v235)
      {
        v236 = (unint64_t *)&v235->__shared_owners_;
        do
          v237 = __ldaxr(v236);
        while (__stlxr(v237 - 1, v236));
        if (!v237)
        {
          ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
          std::__shared_weak_count::__release_weak(v235);
        }
      }
      v220 -= 32;
    }
    goto LABEL_347;
  }
  if (v223 <= (v375 - v374) >> 5)
  {
    v234 = &v374[32 * v223];
    bzero(v374, ((32 * v170 - v221 - 32) & 0xFFFFFFFFFFFFFFE0) + 32);
LABEL_347:
    v374 = v234;
    goto LABEL_351;
  }
  v224 = (v375 - (_BYTE *)v373) >> 4;
  if (v224 <= v170)
    v224 = v170;
  if ((unint64_t)(v375 - (_BYTE *)v373) >= 0x7FFFFFFFFFFFFFE0)
    v225 = 0x7FFFFFFFFFFFFFFLL;
  else
    v225 = v224;
  if (v225 >> 59)
    goto LABEL_505;
  v226 = (char *)operator new(32 * v225);
  v227 = &v226[32 * v222];
  bzero(v227, ((32 * v218 - v221 - 32) & 0xFFFFFFFFFFFFFFE0) + 32);
  v228 = 32 * v218;
  if (v220 == v219)
  {
    v373 = v227;
    v374 = &v226[v228];
    v375 = &v226[32 * v225];
  }
  else
  {
    do
    {
      v229 = *((_OWORD *)v220 - 2);
      v220 -= 32;
      *((_OWORD *)v227 - 2) = v229;
      v227 -= 32;
      *(_QWORD *)v220 = 0;
      *((_QWORD *)v220 + 1) = 0;
      *((_OWORD *)v227 + 1) = *((_OWORD *)v220 + 1);
    }
    while (v220 != v219);
    v220 = (char *)v373;
    v230 = v374;
    v373 = v227;
    v374 = &v226[v228];
    v375 = &v226[32 * v225];
    while (v230 != v220)
    {
      v231 = (std::__shared_weak_count *)*((_QWORD *)v230 - 3);
      if (v231)
      {
        v232 = (unint64_t *)&v231->__shared_owners_;
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
        }
      }
      v230 -= 32;
    }
  }
  if (v220)
    operator delete(v220);
LABEL_351:
  v239 = (char *)v371.__r_.__value_.__l.__size_;
  v238 = v371.__r_.__value_.__r.__words[0];
  v240 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v371.__r_.__value_.__l.__size_ - v371.__r_.__value_.__r.__words[0]) >> 4);
  v241 = v218 - v240;
  if (v218 <= v240)
  {
    if (v218 < v240)
    {
      v255 = v371.__r_.__value_.__r.__words[0] + 80 * v218;
      while (v239 != (char *)v255)
      {
        v256 = (std::__shared_weak_count *)*((_QWORD *)v239 - 9);
        if (v256)
        {
          v257 = (unint64_t *)&v256->__shared_owners_;
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
        }
        v239 -= 80;
      }
      v371.__r_.__value_.__l.__size_ = v255;
    }
    goto LABEL_386;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v371.__r_.__value_.__r.__words[2] - v371.__r_.__value_.__l.__size_) >> 4) >= v241)
  {
    v259 = v371.__r_.__value_.__l.__size_ + 80 * v241;
    do
    {
      *(_QWORD *)v239 = 0;
      *((_QWORD *)v239 + 1) = 0;
      *((_OWORD *)v239 + 1) = xmmword_2246517C8;
      *((_OWORD *)v239 + 2) = unk_2246517D8;
      *((_OWORD *)v239 + 3) = xmmword_2246517E8;
      *((_OWORD *)v239 + 4) = unk_2246517F8;
      v239 += 80;
    }
    while (v239 != (char *)v259);
    v371.__r_.__value_.__l.__size_ = v259;
    goto LABEL_386;
  }
  v242 = 0x999999999999999ALL * ((uint64_t)(v371.__r_.__value_.__r.__words[2] - v371.__r_.__value_.__r.__words[0]) >> 4);
  if (v242 <= v218)
    v242 = v218;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v371.__r_.__value_.__r.__words[2] - v371.__r_.__value_.__r.__words[0]) >> 4) >= 0x199999999999999)
    v243 = 0x333333333333333;
  else
    v243 = v242;
  if (v243 > 0x333333333333333)
LABEL_505:
    sub_223174E94();
  v244 = (char *)operator new(80 * v243);
  v245 = &v244[16 * ((uint64_t)(v371.__r_.__value_.__l.__size_ - v371.__r_.__value_.__r.__words[0]) >> 4)];
  v246 = v245;
  do
  {
    *(_QWORD *)v246 = 0;
    *((_QWORD *)v246 + 1) = 0;
    *((_OWORD *)v246 + 1) = xmmword_2246517C8;
    *((_OWORD *)v246 + 2) = unk_2246517D8;
    *((_OWORD *)v246 + 3) = xmmword_2246517E8;
    *((_OWORD *)v246 + 4) = unk_2246517F8;
    v246 += 80;
  }
  while (v246 != &v244[80 * v218]);
  if (v239 == (char *)v238)
  {
    v371.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244[80 * v240];
    v371.__r_.__value_.__l.__size_ = (std::string::size_type)&v244[80 * v218];
    v371.__r_.__value_.__r.__words[2] = (std::string::size_type)&v244[80 * v243];
    if (v239)
LABEL_385:
      operator delete(v239);
  }
  else
  {
    v247 = v239;
    do
    {
      v248 = *((_OWORD *)v247 - 5);
      v247 -= 80;
      *((_OWORD *)v245 - 5) = v248;
      v245 -= 80;
      *(_QWORD *)v247 = 0;
      *((_QWORD *)v247 + 1) = 0;
      v249 = *((_OWORD *)v247 + 1);
      v250 = *((_OWORD *)v247 + 2);
      v251 = *((_OWORD *)v247 + 4);
      *((_OWORD *)v245 + 3) = *((_OWORD *)v247 + 3);
      *((_OWORD *)v245 + 4) = v251;
      *((_OWORD *)v245 + 1) = v249;
      *((_OWORD *)v245 + 2) = v250;
    }
    while (v247 != (char *)v238);
    v371.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
    v371.__r_.__value_.__l.__size_ = (std::string::size_type)&v244[80 * v218];
    v371.__r_.__value_.__r.__words[2] = (std::string::size_type)&v244[80 * v243];
    do
    {
      v252 = (std::__shared_weak_count *)*((_QWORD *)v239 - 9);
      if (v252)
      {
        v253 = (unint64_t *)&v252->__shared_owners_;
        do
          v254 = __ldaxr(v253);
        while (__stlxr(v254 - 1, v253));
        if (!v254)
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
      }
      v239 -= 80;
    }
    while (v239 != (char *)v238);
    v239 = (char *)v238;
    if (v238)
      goto LABEL_385;
  }
LABEL_386:
  v367 = sub_2231D041C(*(_QWORD *)(a2 + 1568));
  v260 = (unsigned __int8 *)v373;
  __srca = (unsigned __int8 *)v374;
  if (v373 != v374)
  {
    v261 = (uint64_t **)(a2 + 1616);
    v361 = (uint64_t **)(a2 + 1776);
    v363 = (uint64_t **)(a2 + 1728);
    v359 = v358 == 1;
    do
    {
      v262 = sub_223822434(*(_QWORD **)(a2 + 1224), *((_QWORD *)v260 + 2), *((_QWORD *)v260 + 3));
      v263 = *v261;
      v264 = v262[10];
      v265 = v261;
      v266 = v261;
      if (*v261)
      {
        while (1)
        {
          while (1)
          {
            v266 = (uint64_t **)v263;
            v267 = v263[4];
            if (v264 >= v267)
              break;
            v263 = *v266;
            v265 = v266;
            if (!*v266)
              goto LABEL_395;
          }
          if (v267 >= v264)
            break;
          v263 = v266[1];
          if (!v263)
          {
            v265 = v266 + 1;
            goto LABEL_395;
          }
        }
        v268 = (uint64_t *)v266;
        v272 = v266[6];
        v271 = (unint64_t)v266[7];
        if ((unint64_t)v272 >= v271)
        {
LABEL_400:
          v274 = (uint64_t *)v268[5];
          v275 = v272 - v274;
          v276 = v275 + 1;
          if ((unint64_t)(v275 + 1) >> 61)
            sub_22316E078();
          v277 = v271 - (_QWORD)v274;
          if (v277 >> 2 > v276)
            v276 = v277 >> 2;
          if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
            v278 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v278 = v276;
          if (v278)
          {
            if (v278 >> 61)
              sub_223174E94();
            v279 = operator new(8 * v278);
            v280 = (uint64_t *)&v279[8 * v275];
            *v280 = v367;
            v273 = v280 + 1;
            v281 = (char *)v272 - (char *)v274;
            if (v272 == v274)
              goto LABEL_417;
LABEL_411:
            v283 = v281 - 8;
            if (v283 < 0x58)
              goto LABEL_536;
            if ((unint64_t)((char *)v274 - v279) < 0x20)
              goto LABEL_536;
            v284 = (v283 >> 3) + 1;
            v285 = 8 * (v284 & 0x3FFFFFFFFFFFFFFCLL);
            v286 = &v272[v285 / 0xFFFFFFFFFFFFFFF8];
            v280 = (uint64_t *)((char *)v280 - v285);
            v287 = &v279[(char *)v272 - (char *)v274 - 16];
            v288 = v272 - 2;
            v289 = v284 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v290 = *(_OWORD *)v288;
              *(v287 - 1) = *((_OWORD *)v288 - 1);
              *v287 = v290;
              v287 -= 2;
              v288 -= 4;
              v289 -= 4;
            }
            while (v289);
            v272 = v286;
            if (v284 != (v284 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_536:
              do
              {
                v291 = *--v272;
                *--v280 = v291;
              }
              while (v272 != v274);
            }
          }
          else
          {
            v279 = 0;
            v280 = (uint64_t *)(8 * v275);
            v282 = (uint64_t *)(8 * v275);
            *v282 = v367;
            v273 = v282 + 1;
            v281 = (char *)v272 - (char *)v274;
            if (v272 != v274)
              goto LABEL_411;
          }
LABEL_417:
          v268[5] = (uint64_t)v280;
          v268[6] = (uint64_t)v273;
          v268[7] = (uint64_t)&v279[8 * v278];
          if (v274)
            operator delete(v274);
          goto LABEL_419;
        }
      }
      else
      {
LABEL_395:
        v268 = (uint64_t *)operator new(0x40uLL);
        v268[4] = v264;
        v268[5] = 0;
        v268[6] = 0;
        v268[7] = 0;
        *v268 = 0;
        v268[1] = 0;
        v268[2] = (uint64_t)v266;
        *v265 = v268;
        v269 = **(_QWORD **)(v368 + 1608);
        v270 = v268;
        if (v269)
        {
          *(_QWORD *)(v368 + 1608) = v269;
          v270 = *v265;
        }
        sub_2231A9A8C(*(uint64_t **)(v368 + 1616), v270);
        ++*(_QWORD *)(v368 + 1624);
        v272 = (uint64_t *)v268[6];
        v271 = v268[7];
        if ((unint64_t)v272 >= v271)
          goto LABEL_400;
      }
      *v272 = v367;
      v273 = v272 + 1;
LABEL_419:
      v268[6] = (uint64_t)v273;
      sub_2231A9984(v363, v260 + 16, (_OWORD *)v260 + 1);
      sub_2231A9984(v361, v260 + 16, (_OWORD *)v260 + 1);
      v262[11] = v367;
      v293 = sub_2231D77B8(*((unsigned __int8 *)v262 + 113), 8, v292);
      v294 = v293;
      v295 = sub_2231D793C(*((unsigned __int8 *)v262 + 114), v293, v359);
      *((_BYTE *)v262 + 113) = v294;
      *((_BYTE *)v262 + 114) = v295;
      v260 += 32;
      a2 = v368;
    }
    while (v260 != __srca);
  }
  v296 = (uint64_t *)v371.__r_.__value_.__r.__words[0];
  if (v371.__r_.__value_.__r.__words[0] != v371.__r_.__value_.__l.__size_)
  {
    v297 = 0;
    v298 = 16;
    do
    {
      sub_2231964C4(*(_QWORD *)(v368 + 1232), v296, (char *)v373 + v298);
      v299 = *v296;
      v382 = 0;
      sub_22388D334(&__p, "Integrated.KF_");
      std::to_string((std::string *)&v391, v297);
      *(_QWORD *)object = &__p;
      *(_QWORD *)&object[8] = &v391;
      *(_QWORD *)&object[16] = &__p;
      *(_QWORD *)&object[24] = &v391;
      *(_QWORD *)&object[32] = &v391;
      if (v382 == -1)
        sub_22316DD70();
      v378[0] = object;
      ((void (*)(void **, std::string *))off_24EC5B310[v382])(v378, &__p);
      if (v392.i8[7] < 0)
        operator delete((void *)v391);
      if (v382 == -1)
        sub_22316DD70();
      *(_QWORD *)object = &v391;
      ((void (*)(char **__return_ptr, _BYTE *, std::string *))off_24EC5B328[v382])(category, object, &__p);
      if (v382 != -1)
        ((void (*)(_BYTE *, std::string *))off_24EC5B2E0[v382])(object, &__p);
      sub_2231D7968(v299, (const void **)category);
      if (SBYTE7(v398) < 0)
        operator delete(category[0]);
      v296 += 10;
      ++v297;
      v298 += 32;
    }
    while (v296 != (uint64_t *)v371.__r_.__value_.__l.__size_);
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v300 = sub_2241471F8();
    v301 = v300[2];
    if (!v301)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v301 = v300[2];
    }
    v302 = *(_QWORD *)(v301 + 64);
    v303 = (std::mutex *)(v302 + 32);
    std::mutex::lock((std::mutex *)(v302 + 32));
    v305 = *(_QWORD *)(v302 + 96);
    v304 = *(_QWORD *)(v302 + 104);
    std::mutex::unlock(v303);
    if (v305 != v304)
    {
      *(_QWORD *)object = "cv3d.recon.";
      *(_QWORD *)&object[8] = 11;
      *(_QWORD *)&object[16] = "Keyframing.Active";
      *(_QWORD *)&object[24] = 17;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v370);
      v306 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
      v307 = v370.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v306 >= 0)
        v308 = &v370;
      else
        v308 = (std::string *)v307;
      v309 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v308);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v309 + 24))(v309))
      {
        *(_OWORD *)category = 0u;
        v398 = 0u;
        v399 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v309 + 24))(v309))
        {
          *(_QWORD *)&v376 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v376 + 1) = 2;
          v310 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v309 + 24))(v309))
          {
            sub_2241498F4((uint64_t)&__p, 0);
            v311 = (uint64_t *)v373;
            v312 = (uint64_t *)v374;
            if (v373 != v374)
            {
              do
              {
                v313 = (float32x2_t *)sub_223822434(*(_QWORD **)(v368 + 1224), v311[2], v311[3]);
                *(float32x2_t *)v314.i8 = v313[2];
                v314.i32[2] = v313[3].i32[0];
                *(float32x2_t *)v315.i8 = v313[4];
                v315.i32[2] = v313[5].i32[0];
                *(_QWORD *)&v316 = vzip1q_s32(v314, v315).u64[0];
                *(float32x2_t *)v317.f32 = v313[8];
                v317.i32[2] = v313[9].i32[0];
                v318 = (int8x16_t)vnegq_f32(v317);
                v319 = (int8x16_t)vtrn2q_s32(v314, v315);
                v319.i32[2] = HIDWORD(*(_QWORD *)&v313[6]);
                v320.i32[0] = v313[7].i32[0];
                v321 = (int8x16_t)vzip2q_s32(v314, v315);
                v322 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v316, *(float *)v318.i32), *(float32x2_t *)v319.i8, *(float32x2_t *)v317.f32, 1), *(float32x2_t *)v321.i8, v317, 2);
                v321.i32[2] = v320.i32[0];
                v323 = vextq_s8(v319, v321, 4uLL).u64[0];
                *((_QWORD *)&v316 + 1) = *(_QWORD *)&v313[6];
                v319.i32[1] = v323;
                v319.i64[1] = HIDWORD(v323);
                v321.i64[1] = vdupq_laneq_s32((int32x4_t)v321, 2).u32[0];
                v324 = vmla_f32(vmls_lane_f32(vmul_f32(v313[6], *(float32x2_t *)v318.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v313[6], 1), *(float32x2_t *)v317.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v318, v318, 8uLL), v320).u32[0];
                v392 = v319;
                v393 = v321;
                v391 = v316;
                v394 = v322;
                v395 = v324;
                v396 = 1065353216;
                v378[0] = (void *)0x3F8000003E4CCCCDLL;
                LODWORD(v378[1]) = 1045220557;
                v325 = sub_2231D0224(*v311);
                sub_224002D14(v325, (int32x2_t *)&v391, (uint64_t *)v378, (uint64_t)object, 0.1);
                sub_22414E9E0((uint64_t)&__p, (uint64_t)object);
                sub_22316F8F4((uint64_t *)object);
                v311 += 4;
              }
              while (v311 != v312);
            }
            LOBYTE(v378[0]) = 0;
            v380 = 0;
            sub_22329F414((uint64_t)&__p, (__int128 *)v378, &v376, &v388);
            if (v380 && v379 < 0)
              operator delete(v378[0]);
            sub_22316F8F4((uint64_t *)&__p);
            v326 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v309 + 56))(v309);
            v327 = *v326;
            v328 = (std::__shared_weak_count *)v326[1];
            if (v328)
            {
              v329 = (unint64_t *)&v328->__shared_owners_;
              do
                v330 = __ldxr(v329);
              while (__stxr(v330 + 1, v329));
            }
            v331 = v389;
            v332 = v390;
            v377[0] = &off_24EC6A3B8;
            v377[1] = v389;
            v377[2] = v390;
            v390 = 0;
            v389 = 0;
            *(_QWORD *)&v391 = v327;
            *((_QWORD *)&v391 + 1) = v328;
            if (v328)
            {
              v333 = (unint64_t *)&v328->__shared_owners_;
              do
                v334 = __ldxr(v333);
              while (__stxr(v334 + 1, v333));
            }
            v392.i64[0] = (uint64_t)&off_24EC6A3B8;
            v392.i64[1] = v331;
            v393.i64[0] = v332;
            if (v332)
            {
              v335 = (unint64_t *)(v332 + 8);
              do
                v336 = __ldxr(v335);
              while (__stxr(v336 + 1, v335));
            }
            (*(void (**)(uint64_t *, __int128 *))(*v310 + 16))(v310, &v391);
            sub_2241231D8((uint64_t)&v392);
            v337 = (std::__shared_weak_count *)*((_QWORD *)&v391 + 1);
            if (*((_QWORD *)&v391 + 1))
            {
              v338 = (unint64_t *)(*((_QWORD *)&v391 + 1) + 8);
              do
                v339 = __ldaxr(v338);
              while (__stlxr(v339 - 1, v338));
              if (!v339)
              {
                ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                std::__shared_weak_count::__release_weak(v337);
              }
            }
            sub_2241231D8((uint64_t)v377);
            if (v328)
            {
              v340 = (unint64_t *)&v328->__shared_owners_;
              do
                v341 = __ldaxr(v340);
              while (__stlxr(v341 - 1, v340));
              if (!v341)
              {
                ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                std::__shared_weak_count::__release_weak(v328);
              }
            }
            sub_2241231D8((uint64_t)&v388);
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v370.__r_.__value_.__l.__data_);
    }
  }
  kdebug_trace();
  v342 = (char *)v373;
  v343 = v374;
  v391 = 0uLL;
  v392.i64[0] = 0;
  v344 = v374 - (_BYTE *)v373;
  if (v374 != v373)
  {
    if (v344 < 0)
      sub_22316E078();
    *(_QWORD *)&v391 = operator new((unint64_t)v344 >> 1);
    *((_QWORD *)&v391 + 1) = v391;
    v392.i64[0] = v391 + 16 * (v344 >> 5);
    v378[0] = &v391;
    do
    {
      *(_OWORD *)category = *((_OWORD *)v342 + 1);
      sub_2232E9564((char ***)v378, category);
      v342 += 32;
    }
    while (v342 != v343);
    v345 = v392.i64[0];
    *(_OWORD *)v357 = v391;
    v357[2] = v345;
    v346 = (void *)v371.__r_.__value_.__r.__words[0];
    if (!v371.__r_.__value_.__r.__words[0])
      goto LABEL_487;
    goto LABEL_477;
  }
  *(_OWORD *)v357 = 0u;
  v357[2] = 0;
  v346 = (void *)v371.__r_.__value_.__r.__words[0];
  if (v371.__r_.__value_.__r.__words[0])
  {
LABEL_477:
    v347 = v371.__r_.__value_.__l.__size_;
    if ((void *)v371.__r_.__value_.__l.__size_ != v346)
    {
      do
      {
        v348 = *(std::__shared_weak_count **)(v347 - 72);
        if (v348)
        {
          v349 = (unint64_t *)&v348->__shared_owners_;
          do
            v350 = __ldaxr(v349);
          while (__stlxr(v350 - 1, v349));
          if (!v350)
          {
            ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
            std::__shared_weak_count::__release_weak(v348);
          }
        }
        v347 -= 80;
      }
      while ((void *)v347 != v346);
      v346 = (void *)v371.__r_.__value_.__r.__words[0];
    }
    operator delete(v346);
  }
LABEL_487:
  v351 = (char *)v373;
  if (v373)
  {
    v352 = v374;
    v353 = v373;
    if (v374 != v373)
    {
      do
      {
        v354 = (std::__shared_weak_count *)*((_QWORD *)v352 - 3);
        if (v354)
        {
          v355 = (unint64_t *)&v354->__shared_owners_;
          do
            v356 = __ldaxr(v355);
          while (__stlxr(v356 - 1, v355));
          if (!v356)
          {
            ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
            std::__shared_weak_count::__release_weak(v354);
          }
        }
        v352 -= 32;
      }
      while (v352 != v351);
      v353 = v373;
    }
    v374 = v351;
    operator delete(v353);
  }
}

void sub_223868688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (LOBYTE(STACK[0x308]))
  {
    if (SLOBYTE(STACK[0x307]) < 0)
      operator delete((void *)STACK[0x2F0]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a38);
  sub_22346C028(&a22);
  sub_2231968B4(&a26);
  _Unwind_Resume(a1);
}

void sub_223868D10(uint64_t a1, int a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t **v6;
  unsigned __int8 **v7;
  void *__p;
  unsigned __int8 *v9;

  kdebug_trace();
  if (*(_BYTE *)(a1 + 88))
  {
    sub_22382788C(*(_QWORD *)(a1 + 1224), a2, &__p);
    v4 = (unsigned __int8 *)__p;
    v5 = v9;
    if (__p != v9)
    {
      v6 = (uint64_t **)(a1 + 1824);
      v7 = (unsigned __int8 **)(a1 + 1848);
      do
      {
        sub_2231A9984(v6, v4, v4);
        sub_2231AFD68(v7, v4);
        v4 += 16;
      }
      while (v4 != v5);
    }
    kdebug_trace();
    if (__p)
    {
      v9 = (unsigned __int8 *)__p;
      operator delete(__p);
    }
  }
  else
  {
    kdebug_trace();
  }
}

void sub_223868E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223868E48(char **a1, uint64_t i, uint64_t a3, unsigned __int8 *a4)
{
  std::string::size_type v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  float32x2_t **v19;
  float32x2_t *v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  float32x2_t v24;
  char *v26;
  __int128 *v27;
  char v28;
  char v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *p_p;
  size_t v48;
  char v49;
  size_t v50;
  void **p_dst;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  unsigned int v93;
  unsigned int v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  unint64_t v99;
  const void **v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  const void *v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  size_t v114;
  const char *v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  std::string::size_type *p_size;
  const char *v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  void *v132;
  _QWORD *v133;
  size_t v134;
  size_t v135;
  void ***v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  _QWORD *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *p_shared_owners;
  unint64_t v146;
  char *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  char *v157;
  std::string::size_type v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::string::size_type v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  const char *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  const char *v189;
  uint64_t v190;
  size_t v191;
  const char *v192;
  unsigned __int8 v193;
  const char *v194;
  size_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  size_t v203;
  void *v204;
  _QWORD *v205;
  unint64_t *v206;
  char *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::string::size_type v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  int v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  std::string *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  unsigned __int8 *v258;
  char v259;
  uint64_t *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  _OWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  const char *v280;
  size_t v281;
  size_t v282;
  void **v283;
  unint64_t v284;
  const void **v285;
  const void *v286;
  uint64_t v287;
  uint64_t v288;
  void **v289;
  uint64_t v290;
  const char *v291;
  size_t v292;
  unsigned __int8 v293;
  const char *v294;
  size_t v295;
  std::string::size_type *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  NSObject *v302;
  size_t v303;
  void *v304;
  _QWORD *v305;
  size_t v306;
  size_t v307;
  void ***v308;
  void *v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  _QWORD *v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  char *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  char *v330;
  std::string::size_type v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  const char *v335;
  std::string::size_type v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  const char *v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  _QWORD *v360;
  char *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  std::mutex *v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  std::string *v372;
  std::string *v373;
  uint64_t v374;
  std::string::size_type size;
  std::string *v376;
  std::string::size_type v377;
  std::string::size_type v378;
  int v379;
  __n128 *v382;
  std::string *v383;
  size_t v384;
  int v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  const char *v389;
  size_t v390;
  unsigned __int8 v391;
  unsigned __int8 v392;
  const char *v393;
  size_t v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  NSObject *v401;
  size_t v402;
  std::__shared_weak_count_vtbl *v403;
  std::__shared_weak_count *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  _DWORD *v410;
  int v411;
  char *v412;
  uint64_t v413;
  const char *v414;
  void *v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::string::size_type v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  void *v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  std::mutex *v442;
  uint64_t v443;
  uint64_t v444;
  char v445;
  std::string *v446;
  std::string *v447;
  uint64_t v448;
  std::string::size_type v449;
  std::string *v450;
  std::string::size_type v451;
  std::string::size_type v452;
  int v453;
  __n128 *v456;
  std::string *v457;
  size_t v458;
  int v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  const char *v463;
  size_t v464;
  unsigned __int8 v465;
  unsigned __int8 v466;
  const char *v467;
  size_t v468;
  char *v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  NSObject *v475;
  size_t v476;
  std::__shared_weak_count_vtbl *v477;
  std::__shared_weak_count *v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  unint64_t v482;
  uint64_t v483;
  _DWORD *v484;
  int v485;
  char *v486;
  uint64_t v487;
  const char *v488;
  void *v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  std::string::size_type v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  void *v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  _OWORD *v517;
  uint64_t v518;
  uint64_t v519;
  const char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  unsigned __int8 *v526;
  void *__src;
  const char *__srca;
  int __srcb;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  unint64_t v536;
  char *__s;
  char *__sa;
  char *__sb;
  _QWORD *v540;
  _OWORD *v542;
  _OWORD *v543;
  uint64_t v544;
  char **v545;
  _QWORD *v546;
  const char *v547;
  uint64_t *v548;
  int v549;
  const char *v550;
  char v551;
  const char *v552;
  uint64_t v553;
  uint64_t v554;
  std::__shared_weak_count *v555;
  void *__p;
  __int128 v557;
  __int128 v558;
  char *v559;
  const char *v560;
  uint64_t v561;
  std::__shared_weak_count *v562;
  void **__dst;
  size_t v564;
  int64_t v565;
  __int128 v566;
  uint64_t v567;
  _BYTE v568[40];
  uint64_t *v569;
  uint64_t *v570;
  std::string v571;
  char *v572;
  std::__shared_weak_count *v573;
  _QWORD v574[3];
  _QWORD *v575;
  void **v576;
  __int128 v577;
  __int128 v578;
  _OWORD v579[3];
  size_t v580;
  unint64_t v581;
  char v582;
  unint64_t v583;
  void *v584;
  char v585;
  unint64_t v586;
  char v587;
  _BYTE v588[160];
  _QWORD v589[3];
  _QWORD *v590;
  std::string v591;
  __int128 v592;
  char *v593;
  const char *v594;
  unint64_t v595;
  std::__shared_weak_count *v596;
  uint64_t v597;

  v597 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *(_OWORD *)&v591.__r_.__value_.__r.__words[1] = 0uLL;
  v591.__r_.__value_.__r.__words[0] = (std::string::size_type)&v591.__r_.__value_.__l.__size_;
  v546 = (_QWORD *)(i + 1832);
  sub_22388A4A4(*(_QWORD *)(i + 1824), (unsigned __int8 *)(i + 1832), *(unsigned __int8 **)(i + 1848), (unsigned __int8 *)(i + 1856), (unsigned __int8 *)&v591, (uint64_t *)&v591.__r_.__value_.__l.__size_, (unsigned __int8 **)v579);
  v7 = v591.__r_.__value_.__r.__words[2];
  sub_223198030((uint64_t)&v591, (_QWORD *)v591.__r_.__value_.__l.__size_);
  if (v7
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 1289, (uint64_t)"verify_backlog(publishing_backlog_)", 35, (uint64_t)"Update only in pending or droppable", 35, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v8 = *(unsigned __int8 **)(i + 1224);
  v589[0] = &off_24EC5BB78;
  v589[1] = i;
  v590 = v589;
  v540 = (_QWORD *)(i + 1824);
  sub_2238A0C30((_QWORD *)(i + 1824), (int *)a3, a4, v8, v589, (uint64_t *)&v569);
  v525 = i + 1856;
  v9 = v590;
  if (v590 == v589)
  {
    v10 = 4;
    v9 = v589;
  }
  else
  {
    if (!v590)
      goto LABEL_8;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v545 = a1;
  a1[2] = 0;
  v567 = 0;
  *(_QWORD *)v568 = &unk_2245C5160;
  memset(&v568[8], 0, 32);
  v11 = (unsigned __int8 *)v569;
  v548 = v570;
  if (v569 == v570)
    goto LABEL_853;
  v523 = i + 576;
  v524 = (_QWORD *)(i + 1728);
  v526 = (unsigned __int8 *)(i + 1736);
  v533 = *MEMORY[0x24BEDB7F0];
  v531 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v532 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v542 = (_OWORD *)(i + 216);
  v543 = (_OWORD *)(i + 152);
  v530 = MEMORY[0x24BEDB848] + 16;
  v13 = a1;
  v12 = (_QWORD *)(i + 1832);
  v544 = i;
  while (2)
  {
    v566 = 0uLL;
    v14 = *(_QWORD **)(i + 1224);
    *(_OWORD *)&v591.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    v15 = sub_22456636C((unsigned __int8 *)&v591);
    v16 = (int8x8_t)v14[1];
    if (!*(_QWORD *)&v16)
      goto LABEL_865;
    v17 = (uint8x8_t)vcnt_s8(v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = v15;
      if (v15 >= *(_QWORD *)&v16)
        v18 = v15 % *(_QWORD *)&v16;
    }
    else
    {
      v18 = (*(_QWORD *)&v16 - 1) & v15;
    }
    v19 = *(float32x2_t ***)(*v14 + 8 * v18);
    if (!v19 || (v20 = *v19) == 0)
    {
LABEL_865:
      sub_2238227C8("Entry not found ", (unsigned __int8 *)&v591);
      if ((SBYTE7(v579[1]) & 0x80u) == 0)
        v517 = v579;
      else
        v517 = *(_OWORD **)&v579[0];
      if ((SBYTE7(v579[1]) & 0x80u) == 0)
        v518 = BYTE7(v579[1]);
      else
        v518 = *((_QWORD *)&v579[0] + 1);
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 258, (uint64_t)&unk_224595B55, 0, (uint64_t)v517, v518, (void (*)(void **))sub_22457406C);
      if (SBYTE7(v579[1]) < 0)
        operator delete(*(void **)&v579[0]);
      abort();
    }
    if (v17.u32[0] < 2uLL)
    {
      v21 = *(_QWORD *)&v16 - 1;
      while (1)
      {
        v24 = v20[1];
        if (*(_QWORD *)&v24 == v15)
        {
          if (*(_QWORD *)&v20[2] == v591.__r_.__value_.__r.__words[0]
            && *(_QWORD *)&v20[3] == v591.__r_.__value_.__l.__size_)
          {
            goto LABEL_39;
          }
        }
        else if ((*(_QWORD *)&v24 & v21) != v18)
        {
          goto LABEL_865;
        }
        v20 = (float32x2_t *)*v20;
        if (!v20)
          goto LABEL_865;
      }
    }
    while (1)
    {
      v22 = (unint64_t)v20[1];
      if (v22 == v15)
        break;
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_865;
LABEL_21:
      v20 = (float32x2_t *)*v20;
      if (!v20)
        goto LABEL_865;
    }
    v23 = *(_QWORD *)&v20[2] == v591.__r_.__value_.__r.__words[0]
       && *(_QWORD *)&v20[3] == v591.__r_.__value_.__l.__size_;
    if (!v23)
      goto LABEL_21;
LABEL_39:
    if (!v20[18].i8[1])
    {
      sub_22384BB48(&v554);
      if (**(int **)(v554 + 56) > 3)
        goto LABEL_95;
      v43 = *(unsigned __int8 *)(v554 + 72);
      v44 = sub_22322F254(v554, "OSLogSurrogateAppender", 1, 0);
      v45 = v44;
      if (!v43 && v44 == 0)
        goto LABEL_95;
      sub_223195210((uint64_t)v579);
      LODWORD(v592) = 0;
      sub_223208A48(&v591, "Removing keyframe with no update: ");
      sub_22319B83C((uint64_t)&v571, (uint64_t)&v591, v11);
      if ((_DWORD)v592 == -1)
        sub_22316DD70();
      v571.__r_.__value_.__r.__words[0] = (std::string::size_type)&v576;
      ((void (*)(void **__return_ptr, std::string *, std::string *))off_24EC5B328[v592])(&__p, &v571, &v591);
      if ((_DWORD)v592 != -1)
        ((void (*)(std::string *, std::string *))off_24EC5B2E0[v592])(&v571, &v591);
      if (v557 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      v48 = strlen(p_p);
      sub_2231813E8(&v579[1], (uint64_t)p_p, v48);
      if (SHIBYTE(v557) < 0)
      {
        operator delete(__p);
        v49 = v587;
        if ((v587 & 0x10) == 0)
          goto LABEL_57;
      }
      else
      {
        v49 = v587;
        if ((v587 & 0x10) == 0)
        {
LABEL_57:
          if ((v49 & 8) == 0)
          {
            v50 = 0;
            HIBYTE(v565) = 0;
            p_dst = (void **)&__dst;
            goto LABEL_153;
          }
          v99 = v581;
          v100 = (const void **)&v579[2] + 1;
LABEL_145:
          v109 = *v100;
          v50 = v99 - (_QWORD)*v100;
          if (v50 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v50 >= 0x17)
          {
            v110 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17)
              v110 = v50 | 7;
            v111 = v110 + 1;
            p_dst = (void **)operator new(v110 + 1);
            v564 = v50;
            v565 = v111 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v565) = v99 - *(_BYTE *)v100;
            p_dst = (void **)&__dst;
            if (!v50)
            {
LABEL_153:
              *((_BYTE *)p_dst + v50) = 0;
              __p = &v554;
              *(std::chrono::steady_clock::time_point *)&v557 = std::chrono::steady_clock::now();
              *((std::chrono::system_clock::time_point *)&v557 + 1) = std::chrono::system_clock::now();
              LODWORD(v558) = 3;
              *((_QWORD *)&v558 + 1) = "unknown file";
              LODWORD(v559) = 1306;
              v560 = "unknown function";
              v561 = 0;
              v562 = 0;
              if (v565 >= 0)
                v112 = (void **)&__dst;
              else
                v112 = __dst;
              v113 = *(_QWORD *)__p;
              if (*(char *)(*(_QWORD *)__p + 39) < 0)
              {
                v115 = *(const char **)(v113 + 16);
                v114 = *(_QWORD *)(v113 + 24);
                v534 = *(_QWORD *)__p + 16;
                __s = (char *)v112;
                v117 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v117 & 1) != 0)
                  goto LABEL_160;
              }
              else
              {
                v114 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
                v115 = (const char *)(*(_QWORD *)__p + 16);
                v534 = (uint64_t)v115;
                __s = (char *)v112;
                v116 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v116 & 1) != 0)
                  goto LABEL_160;
              }
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&v571);
                sub_223199C58("com.apple.cv3d", (unint64_t)&v571, &xmmword_255788F40);
                if ((_BYTE)v572 && SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v571.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
LABEL_160:
              if (byte_255788F57 >= 0)
                v118 = (const char *)&xmmword_255788F40;
              else
                v118 = (const char *)xmmword_255788F40;
              if (byte_255788F57 >= 0)
                v119 = byte_255788F57;
              else
                v119 = *((_QWORD *)&xmmword_255788F40 + 1);
              v591.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v118, v115);
              if (v119 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v119 >= 0x17)
              {
                __src = (void *)v114;
                v121 = v115;
                v122 = v45;
                v123 = v113;
                v124 = v43;
                v125 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v119 | 7) != 0x17)
                  v125 = v119 | 7;
                v126 = v125 + 1;
                p_size = (std::string::size_type *)operator new(v125 + 1);
                v591.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                *(_QWORD *)&v592 = v126 | 0x8000000000000000;
                v591.__r_.__value_.__r.__words[2] = v119;
                v43 = v124;
                v113 = v123;
                v45 = v122;
                v115 = v121;
                v114 = (size_t)__src;
              }
              else
              {
                BYTE7(v592) = v119;
                p_size = &v591.__r_.__value_.__l.__size_;
                if (!v119)
                {
LABEL_174:
                  *((_BYTE *)p_size + v119) = 0;
                  BYTE8(v592) = 1;
                  if (v114 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v114 >= 0x17)
                  {
                    v129 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v114 | 7) != 0x17)
                      v129 = v114 | 7;
                    v130 = v129 + 1;
                    v127 = (char *)operator new(v129 + 1);
                    v593 = v127;
                    v595 = v130 | 0x8000000000000000;
                    v594 = (const char *)v114;
                    i = v544;
                  }
                  else
                  {
                    HIBYTE(v595) = v114;
                    v127 = (char *)&v593;
                    i = v544;
                    if (!v114)
                    {
                      LOBYTE(v593) = 0;
                      LOBYTE(v596) = 1;
                      v128 = v591.__r_.__value_.__r.__words[0];
                      if ((SHIBYTE(v595) & 0x80000000) == 0)
                        goto LABEL_178;
                      goto LABEL_184;
                    }
                  }
                  memmove(v127, v115, v114);
                  v127[v114] = 0;
                  LOBYTE(v596) = 1;
                  v128 = v591.__r_.__value_.__r.__words[0];
                  if ((SHIBYTE(v595) & 0x80000000) == 0)
                  {
LABEL_178:
                    v12 = v546;
                    if (!BYTE8(v592))
                      goto LABEL_187;
                    goto LABEL_185;
                  }
LABEL_184:
                  operator delete(v593);
                  v12 = v546;
                  if (!BYTE8(v592))
                    goto LABEL_187;
LABEL_185:
                  if (SBYTE7(v592) < 0)
                    operator delete((void *)v591.__r_.__value_.__l.__size_);
LABEL_187:
                  if (v591.__r_.__value_.__r.__words[0])
                    os_release(v591.__r_.__value_.__l.__data_);
                  if (!v45 || !*(_QWORD *)(v45 + 24))
                  {
                    os_log_type_enabled(v128, OS_LOG_TYPE_INFO);
                    LODWORD(v591.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)v591.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
                    v137 = (void *)_os_log_send_and_compose_impl();
                    v13 = v545;
                    if (!v137)
                      goto LABEL_259;
                    free(v137);
                    if (!v43)
                      goto LABEL_263;
                    goto LABEL_260;
                  }
                  v131 = _os_log_pack_size();
                  v132 = operator new(v131, (std::align_val_t)8uLL);
                  v133 = (_QWORD *)operator new();
                  *v133 = &off_24EC1F7F0;
                  v133[1] = 0;
                  v133[2] = 0;
                  v133[3] = v132;
                  v571.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
                  v571.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
                  v571.__r_.__value_.__r.__words[2] = (std::string::size_type)v133;
                  v572 = 0;
                  v573 = 0;
                  v134 = strlen(__s);
                  if (v134 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v135 = v134;
                  if (v134 >= 0x17)
                  {
                    v138 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v134 | 7) != 0x17)
                      v138 = v134 | 7;
                    v139 = v138 + 1;
                    v136 = (void ***)operator new(v138 + 1);
                    *(_QWORD *)&v577 = v135;
                    *((_QWORD *)&v577 + 1) = v139 | 0x8000000000000000;
                    v576 = (void **)v136;
                  }
                  else
                  {
                    HIBYTE(v577) = v134;
                    v136 = &v576;
                    if (!v134)
                    {
LABEL_202:
                      *((_BYTE *)v136 + v135) = 0;
                      v140 = (uint64_t)v576;
                      *(_QWORD *)&v578 = v577;
                      *(_QWORD *)((char *)&v578 + 7) = *(_QWORD *)((char *)&v577 + 7);
                      v141 = HIBYTE(v577);
                      v142 = operator new(0x38uLL);
                      v142[1] = 0;
                      v142[2] = 0;
                      v142[3] = off_24EC1FA48;
                      *v142 = &off_24EC1F9F8;
                      v143 = v578;
                      v142[4] = v140;
                      v142[5] = v143;
                      *(_QWORD *)((char *)v142 + 47) = *(_QWORD *)((char *)&v578 + 7);
                      *((_BYTE *)v142 + 55) = v141;
                      *(_QWORD *)&v578 = 0;
                      *(_QWORD *)((char *)&v578 + 7) = 0;
                      v144 = v573;
                      v572 = (char *)(v142 + 3);
                      v573 = (std::__shared_weak_count *)v142;
                      i = v544;
                      if (v144)
                      {
                        p_shared_owners = (unint64_t *)&v144->__shared_owners_;
                        do
                          v146 = __ldaxr(p_shared_owners);
                        while (__stlxr(v146 - 1, p_shared_owners));
                        if (!v146)
                        {
                          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                          std::__shared_weak_count::__release_weak(v144);
                        }
                      }
                      v591 = v571;
                      v147 = v572;
                      if (v571.__r_.__value_.__r.__words[2])
                      {
                        v148 = (unint64_t *)(v571.__r_.__value_.__r.__words[2] + 8);
                        do
                          v149 = __ldxr(v148);
                        while (__stxr(v149 + 1, v148));
                      }
                      *(_QWORD *)&v592 = v147;
                      v150 = v573;
                      *((_QWORD *)&v592 + 1) = v573;
                      if (v573)
                      {
                        v151 = (unint64_t *)&v573->__shared_owners_;
                        do
                          v152 = __ldxr(v151);
                        while (__stxr(v152 + 1, v151));
                        v593 = v147;
                        do
                          v153 = __ldaxr(v151);
                        while (__stlxr(v153 - 1, v151));
                        if (!v153)
                        {
                          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                          std::__shared_weak_count::__release_weak(v150);
                        }
                      }
                      else
                      {
                        v593 = v147;
                      }
                      v154 = (std::__shared_weak_count *)v571.__r_.__value_.__r.__words[2];
                      if (v571.__r_.__value_.__r.__words[2])
                      {
                        v155 = (unint64_t *)(v571.__r_.__value_.__r.__words[2] + 8);
                        do
                          v156 = __ldaxr(v155);
                        while (__stlxr(v156 - 1, v155));
                        if (!v156)
                        {
                          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                          std::__shared_weak_count::__release_weak(v154);
                        }
                      }
                      if (v593[31] >= 0)
                        v157 = v593 + 8;
                      else
                        v157 = (char *)*((_QWORD *)v593 + 1);
                      v158 = v591.__r_.__value_.__r.__words[0];
                      v159 = _os_log_pack_fill();
                      *(_DWORD *)v159 = 136315138;
                      *(_QWORD *)(v159 + 4) = v157;
                      v160 = operator new();
                      v161 = *(unsigned __int8 *)(v113 + 39);
                      v162 = v534;
                      if ((v161 & 0x80u) != 0)
                      {
                        v162 = *(_QWORD *)(v113 + 16);
                        v161 = *(_QWORD *)(v113 + 24);
                      }
                      *(_QWORD *)v160 = v158;
                      *(_OWORD *)(v160 + 8) = *(_OWORD *)&v591.__r_.__value_.__r.__words[1];
                      *(_OWORD *)&v591.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_OWORD *)(v160 + 24) = v592;
                      v592 = 0uLL;
                      *(_QWORD *)(v160 + 40) = v162;
                      *(_QWORD *)(v160 + 48) = v161;
                      *(_BYTE *)(v160 + 56) = 1;
                      v576 = 0;
                      v571.__r_.__value_.__r.__words[0] = v160;
                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v45 + 24) + 40))(*(_QWORD *)(v45 + 24), &v571);
                      v163 = v571.__r_.__value_.__r.__words[0];
                      v571.__r_.__value_.__r.__words[0] = 0;
                      v13 = v545;
                      v12 = v546;
                      if (v163)
                      {
                        v164 = *(std::__shared_weak_count **)(v163 + 32);
                        if (v164)
                        {
                          v165 = (unint64_t *)&v164->__shared_owners_;
                          do
                            v166 = __ldaxr(v165);
                          while (__stlxr(v166 - 1, v165));
                          if (!v166)
                          {
                            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                            std::__shared_weak_count::__release_weak(v164);
                          }
                        }
                        v167 = *(std::__shared_weak_count **)(v163 + 16);
                        if (v167)
                        {
                          v168 = (unint64_t *)&v167->__shared_owners_;
                          do
                            v169 = __ldaxr(v168);
                          while (__stlxr(v169 - 1, v168));
                          if (!v169)
                          {
                            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                            std::__shared_weak_count::__release_weak(v167);
                          }
                        }
                        MEMORY[0x227684CE8](v163, 0x10F0C40B62ED6C6);
                        v170 = (uint64_t)v576;
                        v576 = 0;
                        if (v170)
                        {
                          v171 = *(std::__shared_weak_count **)(v170 + 32);
                          if (v171)
                          {
                            v172 = (unint64_t *)&v171->__shared_owners_;
                            do
                              v173 = __ldaxr(v172);
                            while (__stlxr(v173 - 1, v172));
                            if (!v173)
                            {
                              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                              std::__shared_weak_count::__release_weak(v171);
                            }
                          }
                          v174 = *(std::__shared_weak_count **)(v170 + 16);
                          if (v174)
                          {
                            v175 = (unint64_t *)&v174->__shared_owners_;
                            do
                              v176 = __ldaxr(v175);
                            while (__stlxr(v176 - 1, v175));
                            if (!v176)
                            {
                              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                              std::__shared_weak_count::__release_weak(v174);
                            }
                          }
                          MEMORY[0x227684CE8](v170, 0x10F0C40B62ED6C6);
                        }
                      }
                      v177 = (std::__shared_weak_count *)*((_QWORD *)&v592 + 1);
                      if (!*((_QWORD *)&v592 + 1))
                        goto LABEL_255;
                      v178 = (unint64_t *)(*((_QWORD *)&v592 + 1) + 8);
                      do
                        v179 = __ldaxr(v178);
                      while (__stlxr(v179 - 1, v178));
                      if (!v179)
                      {
                        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                        std::__shared_weak_count::__release_weak(v177);
                        v180 = (std::__shared_weak_count *)v591.__r_.__value_.__r.__words[2];
                        if (!v591.__r_.__value_.__r.__words[2])
                          goto LABEL_259;
                      }
                      else
                      {
LABEL_255:
                        v180 = (std::__shared_weak_count *)v591.__r_.__value_.__r.__words[2];
                        if (!v591.__r_.__value_.__r.__words[2])
                          goto LABEL_259;
                      }
                      v181 = (unint64_t *)&v180->__shared_owners_;
                      do
                        v182 = __ldaxr(v181);
                      while (__stlxr(v182 - 1, v181));
                      if (v182)
                      {
LABEL_259:
                        if (!v43)
                          goto LABEL_263;
                        goto LABEL_260;
                      }
                      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                      std::__shared_weak_count::__release_weak(v180);
                      if (!v43)
                        goto LABEL_263;
LABEL_260:
                      v183 = (const char *)&__dst;
                      if (v565 < 0)
                        v183 = (const char *)__dst;
                      sub_22322C138((uint64_t)&__p, "%s", v183);
                      sub_223182C08((uint64_t)&__p);
LABEL_263:
                      sub_223182C08((uint64_t)&__p);
                      v184 = v562;
                      if (!v562)
                        goto LABEL_267;
                      v185 = (unint64_t *)&v562->__shared_owners_;
                      do
                        v186 = __ldaxr(v185);
                      while (__stlxr(v186 - 1, v185));
                      if (!v186)
                      {
                        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                        std::__shared_weak_count::__release_weak(v184);
                        if ((SHIBYTE(v565) & 0x80000000) == 0)
                        {
LABEL_269:
                          *(_QWORD *)&v579[0] = v533;
                          *(_QWORD *)((char *)v579 + *(_QWORD *)(v533 - 24)) = v532;
                          *(_QWORD *)&v579[1] = v531;
                          *((_QWORD *)&v579[1] + 1) = v530;
                          if (v585 < 0)
                            operator delete(v584);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x227684BE0](v588);
                          v91 = (uint64_t *)*v12;
                          if (*v12)
                            goto LABEL_96;
                          goto LABEL_407;
                        }
                      }
                      else
                      {
LABEL_267:
                        if ((SHIBYTE(v565) & 0x80000000) == 0)
                          goto LABEL_269;
                      }
                      operator delete(__dst);
                      goto LABEL_269;
                    }
                  }
                  memcpy(v136, __s, v135);
                  goto LABEL_202;
                }
              }
              memmove(p_size, v118, v119);
              goto LABEL_174;
            }
          }
          memmove(p_dst, v109, v50);
          goto LABEL_153;
        }
      }
      v99 = v586;
      v100 = (const void **)&v582;
      if (v586 < v583)
      {
        v586 = v583;
        v99 = v583;
        v100 = (const void **)&v582;
      }
      goto LABEL_145;
    }
    if ((v20[18].i8[1] & 0x30) != 0)
    {
      v26 = (char *)operator new(0x240uLL);
      sub_223894E6C((uint64_t)v26);
      *(_QWORD *)&v566 = v26 + 24;
      *((_QWORD *)&v566 + 1) = v26;
      goto LABEL_42;
    }
    if (!*(_BYTE *)(a3 + 6) && ((v20[18].i8[1] & 1) == 0 || !*(_BYTE *)(a3 + 4)))
      goto LABEL_407;
    sub_22319597C(*(_QWORD *)(i + 1232), &v20[4], &v578);
    v52 = v578;
    if (!(_QWORD)v578)
    {
      if (*(_BYTE *)(a3 + 7))
      {
        v98 = 7;
        goto LABEL_402;
      }
      sub_223192F24(*(_QWORD *)(i + 1232), (unsigned __int8 *)&v20[4], &v554);
      v101 = v554;
      if (v554)
      {
        v102 = v555;
        if (v555)
        {
          v103 = (unint64_t *)&v555->__shared_owners_;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
        v105 = (std::__shared_weak_count *)*((_QWORD *)&v566 + 1);
        *(_QWORD *)&v566 = v101;
        *((_QWORD *)&v566 + 1) = v102;
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v98 = 0;
        v108 = v555;
        if (!v555)
        {
LABEL_400:
          if (v101)
            goto LABEL_401;
          goto LABEL_402;
        }
LABEL_396:
        v249 = (unint64_t *)&v108->__shared_owners_;
        do
          v250 = __ldaxr(v249);
        while (__stlxr(v250 - 1, v249));
        if (!v250)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
        goto LABEL_400;
      }
      sub_22384BA54(&v553);
      if (**(int **)(v553 + 56) > 4
        || (v187 = *(unsigned __int8 *)(v553 + 72), v188 = sub_22322F254(v553, "OSLogSurrogateAppender", 1, 0), !v187)
        && !v188)
      {
LABEL_395:
        v98 = 7;
        v108 = v555;
        if (!v555)
          goto LABEL_400;
        goto LABEL_396;
      }
      __sa = (char *)v188;
      v591.__r_.__value_.__r.__words[0] = (std::string::size_type)&v553;
      v591.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v591.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v592) = 4;
      *((_QWORD *)&v592 + 1) = "unknown file";
      LODWORD(v593) = 1330;
      v594 = "unknown function";
      v595 = 0;
      v596 = 0;
      sub_2245664AC((unsigned __int8 *)&v20[4], &v576);
      v551 = v20[18].i8[1];
      DWORD2(v579[1]) = 0;
      sub_22356F9F4((uint64_t)&__p, (uint64_t)v579, &v551);
      if (DWORD2(v579[1]) == -1)
        sub_22316DD70();
      __p = &v571;
      ((void (*)(void ***__return_ptr, void **, _OWORD *))off_24EC5B328[DWORD2(v579[1])])(&__dst, &__p, v579);
      if (DWORD2(v579[1]) != -1)
        ((void (*)(void **, _OWORD *))off_24EC5B2E0[DWORD2(v579[1])])(&__p, v579);
      v535 = v187;
      v189 = (const char *)&__dst;
      if (v565 < 0)
        v189 = (const char *)__dst;
      v552 = v189;
      v190 = *(_QWORD *)v591.__r_.__value_.__l.__data_;
      v521 = *(_QWORD *)v591.__r_.__value_.__l.__data_;
      if (*(char *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v192 = *(const char **)(v190 + 16);
        v191 = *(_QWORD *)(v190 + 24);
      }
      else
      {
        v191 = *(unsigned __int8 *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 39);
        v192 = (const char *)(v190 + 16);
      }
      v519 = v190 + 16;
      v193 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v193 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
        if ((_BYTE)v558 && SHIBYTE(v557) < 0)
          operator delete(__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        i = v544;
      }
      if (byte_255788F57 >= 0)
        v194 = (const char *)&xmmword_255788F40;
      else
        v194 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v195 = byte_255788F57;
      else
        v195 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)&v579[0] = os_log_create(v194, v192);
      if (v195 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      __srca = v192;
      if (v195 >= 0x17)
      {
        v197 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v195 | 7) != 0x17)
          v197 = v195 | 7;
        v198 = v197 + 1;
        v196 = (char *)operator new(v197 + 1);
        *(_QWORD *)&v579[1] = v195;
        *((_QWORD *)&v579[1] + 1) = v198 | 0x8000000000000000;
        *((_QWORD *)&v579[0] + 1) = v196;
        i = v544;
      }
      else
      {
        HIBYTE(v579[1]) = v195;
        v196 = (char *)v579 + 8;
        if (!v195)
        {
LABEL_305:
          v196[v195] = 0;
          LOBYTE(v579[2]) = 1;
          if (v191 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v191 >= 0x17)
          {
            v200 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v191 | 7) != 0x17)
              v200 = v191 | 7;
            v201 = v200 + 1;
            v199 = (char *)operator new(v200 + 1);
            v580 = v191;
            v581 = v201 | 0x8000000000000000;
            *((_QWORD *)&v579[2] + 1) = v199;
            v12 = v546;
          }
          else
          {
            HIBYTE(v581) = v191;
            v199 = (char *)&v579[2] + 8;
            v12 = v546;
            if (!v191)
              goto LABEL_313;
          }
          memmove(v199, __srca, v191);
LABEL_313:
          v199[v191] = 0;
          v582 = 1;
          v202 = *(NSObject **)&v579[0];
          if (SHIBYTE(v581) < 0)
            operator delete(*((void **)&v579[2] + 1));
          if (LOBYTE(v579[2]) && SHIBYTE(v579[1]) < 0)
            operator delete(*((void **)&v579[0] + 1));
          if (*(_QWORD *)&v579[0])
            os_release(*(void **)&v579[0]);
          if (__sa && *((_QWORD *)__sa + 3))
          {
            v203 = _os_log_pack_size();
            v204 = operator new(v203, (std::align_val_t)8uLL);
            v205 = (_QWORD *)operator new();
            v205[1] = 0;
            v206 = v205 + 1;
            *v205 = &off_24EC1F7F0;
            v205[2] = 0;
            v205[3] = v204;
            v571.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
            v571.__r_.__value_.__l.__size_ = (std::string::size_type)v204;
            v571.__r_.__value_.__r.__words[2] = (std::string::size_type)v205;
            v572 = 0;
            v573 = 0;
            sub_22388C0C0((uint64_t)v579, (char *)&v576, &v552);
            v207 = (char *)operator new(0x50uLL);
            v208 = (std::__shared_weak_count *)v207;
            *((_QWORD *)v207 + 1) = 0;
            v209 = (unint64_t *)(v207 + 8);
            *((_QWORD *)v207 + 2) = 0;
            *(_QWORD *)v207 = &off_24EC20730;
            *((_QWORD *)v207 + 3) = off_24EC20780;
            *((_OWORD *)v207 + 2) = *(_OWORD *)((char *)v579 + 8);
            *((_QWORD *)v207 + 6) = *((_QWORD *)&v579[1] + 1);
            *(_OWORD *)(v207 + 56) = v579[2];
            *((_QWORD *)v207 + 9) = v580;
            v572 = v207 + 24;
            v573 = (std::__shared_weak_count *)v207;
            __p = v204;
            *(_QWORD *)&v557 = v204;
            *((_QWORD *)&v557 + 1) = v205;
            do
              v210 = __ldxr(v206);
            while (__stxr(v210 + 1, v206));
            *(_QWORD *)&v558 = v207 + 24;
            *((_QWORD *)&v558 + 1) = v207;
            do
              v211 = __ldxr(v209);
            while (__stxr(v211 + 1, v209));
            v559 = v207 + 24;
            do
              v212 = __ldaxr(v209);
            while (__stlxr(v212 - 1, v209));
            if (!v212)
            {
              (*(void (**)(char *))(*(_QWORD *)v207 + 16))(v207);
              std::__shared_weak_count::__release_weak(v208);
            }
            v213 = (std::__shared_weak_count *)v571.__r_.__value_.__r.__words[2];
            if (v571.__r_.__value_.__r.__words[2])
            {
              v214 = (unint64_t *)(v571.__r_.__value_.__r.__words[2] + 8);
              do
                v215 = __ldaxr(v214);
              while (__stlxr(v215 - 1, v214));
              if (!v215)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
            v216 = __p;
            if (v559[31] >= 0)
              v217 = v559 + 8;
            else
              v217 = (char *)*((_QWORD *)v559 + 1);
            if (v559[55] >= 0)
              v218 = v559 + 32;
            else
              v218 = (char *)*((_QWORD *)v559 + 4);
            v219 = _os_log_pack_fill();
            *(_DWORD *)v219 = 136315394;
            *(_QWORD *)(v219 + 4) = v217;
            *(_WORD *)(v219 + 12) = 2080;
            *(_QWORD *)(v219 + 14) = v218;
            v220 = operator new();
            v221 = *(unsigned __int8 *)(v521 + 39);
            v222 = v519;
            if ((v221 & 0x80u) != 0)
            {
              v222 = *(_QWORD *)(v521 + 16);
              v221 = *(_QWORD *)(v521 + 24);
            }
            *(_QWORD *)v220 = v216;
            *(_OWORD *)(v220 + 8) = v557;
            v557 = 0uLL;
            *(_OWORD *)(v220 + 24) = v558;
            v558 = 0uLL;
            *(_QWORD *)(v220 + 40) = v222;
            *(_QWORD *)(v220 + 48) = v221;
            *(_BYTE *)(v220 + 56) = 16;
            v571.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)&v579[0] = v220;
            (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)__sa + 3) + 40))(*((_QWORD *)__sa + 3), v579);
            v12 = v546;
            v223 = *(_QWORD *)&v579[0];
            *(_QWORD *)&v579[0] = 0;
            if (v223)
            {
              v224 = *(std::__shared_weak_count **)(v223 + 32);
              if (v224)
              {
                v225 = (unint64_t *)&v224->__shared_owners_;
                do
                  v226 = __ldaxr(v225);
                while (__stlxr(v226 - 1, v225));
                if (!v226)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
              v227 = *(std::__shared_weak_count **)(v223 + 16);
              if (v227)
              {
                v228 = (unint64_t *)&v227->__shared_owners_;
                do
                  v229 = __ldaxr(v228);
                while (__stlxr(v229 - 1, v228));
                if (!v229)
                {
                  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                  std::__shared_weak_count::__release_weak(v227);
                }
              }
              MEMORY[0x227684CE8](v223, 0x10F0C40B62ED6C6);
              v230 = v571.__r_.__value_.__r.__words[0];
              v571.__r_.__value_.__r.__words[0] = 0;
              if (v230)
              {
                v231 = *(std::__shared_weak_count **)(v230 + 32);
                if (v231)
                {
                  v232 = (unint64_t *)&v231->__shared_owners_;
                  do
                    v233 = __ldaxr(v232);
                  while (__stlxr(v233 - 1, v232));
                  if (!v233)
                  {
                    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                }
                v234 = *(std::__shared_weak_count **)(v230 + 16);
                if (v234)
                {
                  v235 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 - 1, v235));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                MEMORY[0x227684CE8](v230, 0x10F0C40B62ED6C6);
              }
            }
            v237 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
            v238 = v535;
            if (*((_QWORD *)&v558 + 1))
            {
              v239 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                std::__shared_weak_count::__release_weak(v237);
              }
            }
            v241 = (std::__shared_weak_count *)*((_QWORD *)&v557 + 1);
            if (*((_QWORD *)&v557 + 1))
            {
              v242 = (unint64_t *)(*((_QWORD *)&v557 + 1) + 8);
              do
                v243 = __ldaxr(v242);
              while (__stlxr(v243 - 1, v242));
              if (!v243)
              {
                ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                std::__shared_weak_count::__release_weak(v241);
              }
            }
          }
          else
          {
            os_log_type_enabled(v202, OS_LOG_TYPE_ERROR);
            LODWORD(v579[0]) = 136315394;
            *(_QWORD *)((char *)v579 + 4) = &v576;
            WORD6(v579[0]) = 2080;
            *(_QWORD *)((char *)v579 + 14) = v552;
            v244 = (void *)_os_log_send_and_compose_impl();
            v238 = v535;
            if (v244)
              free(v244);
          }
          if (SHIBYTE(v565) < 0)
            operator delete(__dst);
          if (v238)
          {
            sub_2245664AC((unsigned __int8 *)&v20[4], v579);
            LOBYTE(v552) = v20[18].i8[1];
            LODWORD(v558) = 0;
            sub_22356F9F4((uint64_t)&v576, (uint64_t)&__p, (char *)&v552);
            if ((_DWORD)v558 == -1)
              sub_22316DD70();
            v576 = (void **)&__dst;
            ((void (*)(std::string *__return_ptr, void ***, void **))off_24EC5B328[v558])(&v571, &v576, &__p);
            if ((_DWORD)v558 != -1)
              ((void (*)(void ***, void **))off_24EC5B2E0[v558])(&v576, &__p);
            if ((v571.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v245 = &v571;
            else
              v245 = (std::string *)v571.__r_.__value_.__r.__words[0];
            sub_22322C138((uint64_t)&v591, "Keyframe cannot be retrieved: %s with state: %s", (const char *)v579, (const char *)v245);
            if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v571.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)&v591);
          }
          sub_223182C08((uint64_t)&v591);
          v246 = v596;
          if (v596)
          {
            v247 = (unint64_t *)&v596->__shared_owners_;
            do
              v248 = __ldaxr(v247);
            while (__stlxr(v248 - 1, v247));
            if (!v248)
            {
              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
              std::__shared_weak_count::__release_weak(v246);
            }
          }
          goto LABEL_395;
        }
      }
      memmove(v196, v194, v195);
      goto LABEL_305;
    }
    v53 = *((_QWORD *)&v578 + 1);
    if (*((_QWORD *)&v578 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v578 + 1) + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v566 + 1);
    *(_QWORD *)&v566 = v52;
    *((_QWORD *)&v566 + 1) = v53;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (sub_22387CB54(i, &v20[4]))
      ++HIDWORD(v567);
LABEL_401:
    v98 = 0;
LABEL_402:
    v251 = (std::__shared_weak_count *)*((_QWORD *)&v578 + 1);
    v13 = v545;
    if (!*((_QWORD *)&v578 + 1))
      goto LABEL_406;
    v252 = (unint64_t *)(*((_QWORD *)&v578 + 1) + 8);
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
      if (v98)
        goto LABEL_407;
    }
    else
    {
LABEL_406:
      if (v98)
        goto LABEL_407;
    }
    if (!*(_BYTE *)(i + 788) || (v20[18].i8[1] & 2) == 0)
      goto LABEL_42;
    v257 = *(_QWORD *)v526;
    if (*(_QWORD *)v526)
    {
      v258 = v526;
      do
      {
        v259 = sub_22319835C((unsigned __int8 *)(v257 + 25), (unsigned __int8 *)&v20[4]);
        if (v259 >= 0)
          v260 = (uint64_t *)v257;
        else
          v260 = (uint64_t *)(v257 + 8);
        if (v259 >= 0)
          v258 = (unsigned __int8 *)v257;
        v257 = *v260;
      }
      while (*v260);
      if (v258 != v526 && ((char)sub_22319835C((unsigned __int8 *)&v20[4], v258 + 25) & 0x80000000) == 0)
        goto LABEL_42;
    }
    if (!*(_QWORD *)&v568[16])
    {
      v261 = *(_QWORD **)(i + 1224);
      v574[0] = &off_24EC5BBF8;
      v574[1] = i;
      v575 = v574;
      sub_2238C82B0(&v569, v261, v523, (uint64_t)v574, (char **)v579);
      v263 = *(_QWORD *)&v579[2];
      v265 = *(char **)v568;
      v264 = *(_QWORD *)&v568[8];
      v266 = v579[0];
      v267 = v579[1];
      *(_QWORD *)&v579[0] = &unk_2245C5160;
      memset((char *)v579 + 8, 0, 32);
      v268 = *(_QWORD *)&v568[24];
      *(_OWORD *)v568 = v266;
      *(_OWORD *)&v568[16] = v267;
      *(_QWORD *)&v568[32] = v263;
      if (v268)
      {
        v269 = 0;
        v270 = (_OWORD *)(v264 + 24);
        do
        {
          if ((v265[v269] & 0x80000000) == 0 && *((_QWORD *)v270 + 2))
          {
            operator delete(*((void **)v270 - 1));
            *((_QWORD *)v270 - 1) = &unk_2245C5160;
            *v270 = 0u;
            v270[1] = 0u;
          }
          ++v269;
          v270 = (_OWORD *)((char *)v270 + 56);
        }
        while (v268 != v269);
        operator delete(v265);
        v271 = *((_QWORD *)&v579[1] + 1);
        i = v544;
        if (*((_QWORD *)&v579[1] + 1))
        {
          v272 = 0;
          v273 = 0;
          do
          {
            if ((*(char *)(*(_QWORD *)&v579[0] + v273) & 0x80000000) == 0)
            {
              v274 = *((_QWORD *)&v579[0] + 1) + v272;
              if (*(_QWORD *)(*((_QWORD *)&v579[0] + 1) + v272 + 40))
              {
                operator delete(*(void **)(v274 + 16));
                *(_QWORD *)(v274 + 16) = &unk_2245C5160;
                *(_OWORD *)(v274 + 24) = 0u;
                *(_OWORD *)(v274 + 40) = 0u;
                v271 = *((_QWORD *)&v579[1] + 1);
              }
            }
            ++v273;
            v272 += 56;
          }
          while (v273 != v271);
          operator delete(*(void **)&v579[0]);
          *(_QWORD *)&v579[0] = &unk_2245C5160;
          memset((char *)v579 + 8, 0, 32);
        }
      }
      v275 = v575;
      if (v575 == v574)
      {
        v275 = v574;
        v276 = 4;
LABEL_443:
        (*(void (**)(_QWORD *, uint64_t))(*v275 + 8 * v276))(v275, v262);
      }
      else if (v575)
      {
        v276 = 5;
        goto LABEL_443;
      }
    }
    if (!sub_2238CAF9C(v566, v20 + 6, (uint64_t *)v568, v524, *(float *)(i + 792)))
      goto LABEL_42;
    sub_22384BB48(&v554);
    if (**(int **)(v554 + 56) > 3)
      goto LABEL_590;
    v277 = *(unsigned __int8 *)(v554 + 72);
    v278 = sub_22322F254(v554, "OSLogSurrogateAppender", 1, 0);
    v279 = v278;
    if (!v277 && !v278)
      goto LABEL_590;
    sub_223195210((uint64_t)v579);
    LODWORD(v592) = 0;
    sub_223895054(&v591, "Removing redundant relocalized kf: ");
    sub_22319B83C((uint64_t)&v571, (uint64_t)&v591, (unsigned __int8 *)&v20[4]);
    if ((_DWORD)v592 == -1)
      sub_22316DD70();
    v571.__r_.__value_.__r.__words[0] = (std::string::size_type)&v576;
    ((void (*)(void **__return_ptr, std::string *, std::string *))off_24EC5B328[v592])(&__p, &v571, &v591);
    if ((_DWORD)v592 != -1)
      ((void (*)(std::string *, std::string *))off_24EC5B2E0[v592])(&v571, &v591);
    if (v557 >= 0)
      v280 = (const char *)&__p;
    else
      v280 = (const char *)__p;
    v281 = strlen(v280);
    sub_2231813E8(&v579[1], (uint64_t)v280, v281);
    if (SHIBYTE(v557) < 0)
      operator delete(__p);
    __srcb = v277;
    if ((v587 & 0x10) != 0)
    {
      v284 = v586;
      v285 = (const void **)&v582;
      if (v586 < v583)
      {
        v586 = v583;
        v284 = v583;
        v285 = (const void **)&v582;
      }
    }
    else
    {
      if ((v587 & 8) == 0)
      {
        v282 = 0;
        HIBYTE(v565) = 0;
        v283 = (void **)&__dst;
        goto LABEL_470;
      }
      v284 = v581;
      v285 = (const void **)&v579[2] + 1;
    }
    v286 = *v285;
    v282 = v284 - (_QWORD)*v285;
    if (v282 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v282 >= 0x17)
    {
      v287 = (v282 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v282 | 7) != 0x17)
        v287 = v282 | 7;
      v288 = v287 + 1;
      v283 = (void **)operator new(v287 + 1);
      v564 = v282;
      v565 = v288 | 0x8000000000000000;
      __dst = v283;
LABEL_469:
      memmove(v283, v286, v282);
      goto LABEL_470;
    }
    HIBYTE(v565) = v284 - *(_BYTE *)v285;
    v283 = (void **)&__dst;
    if (v282)
      goto LABEL_469;
LABEL_470:
    *((_BYTE *)v283 + v282) = 0;
    __p = &v554;
    *(std::chrono::steady_clock::time_point *)&v557 = std::chrono::steady_clock::now();
    *((std::chrono::system_clock::time_point *)&v557 + 1) = std::chrono::system_clock::now();
    LODWORD(v558) = 3;
    *((_QWORD *)&v558 + 1) = "unknown file";
    LODWORD(v559) = 1355;
    v560 = "unknown function";
    v561 = 0;
    v562 = 0;
    v289 = (void **)&__dst;
    if (v565 < 0)
      v289 = __dst;
    __sb = (char *)v289;
    v290 = *(_QWORD *)__p;
    v291 = (const char *)(*(_QWORD *)__p + 16);
    v520 = v291;
    v522 = *(_QWORD *)__p;
    if (*(char *)(*(_QWORD *)__p + 39) < 0)
    {
      v291 = *(const char **)(v290 + 16);
      v292 = *(_QWORD *)(v290 + 24);
    }
    else
    {
      v292 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    }
    v536 = v279;
    v293 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v293 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v571);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v571, &xmmword_255788F40);
      if ((_BYTE)v572 && SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v571.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v294 = (const char *)&xmmword_255788F40;
    else
      v294 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v295 = byte_255788F57;
    else
      v295 = *((_QWORD *)&xmmword_255788F40 + 1);
    v591.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v294, v291);
    if (v295 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v295 >= 0x17)
    {
      v297 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v295 | 7) != 0x17)
        v297 = v295 | 7;
      v298 = v297 + 1;
      v296 = (std::string::size_type *)operator new(v297 + 1);
      v591.__r_.__value_.__r.__words[2] = v295;
      *(_QWORD *)&v592 = v298 | 0x8000000000000000;
      v591.__r_.__value_.__l.__size_ = (std::string::size_type)v296;
LABEL_489:
      memmove(v296, v294, v295);
      goto LABEL_490;
    }
    BYTE7(v592) = v295;
    v296 = &v591.__r_.__value_.__l.__size_;
    if (v295)
      goto LABEL_489;
LABEL_490:
    *((_BYTE *)v296 + v295) = 0;
    BYTE8(v592) = 1;
    if (v292 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v13 = v545;
    if (v292 >= 0x17)
    {
      v300 = (v292 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v292 | 7) != 0x17)
        v300 = v292 | 7;
      v301 = v300 + 1;
      v299 = (char *)operator new(v300 + 1);
      v594 = (const char *)v292;
      v595 = v301 | 0x8000000000000000;
      v593 = v299;
      i = v544;
LABEL_497:
      memmove(v299, v291, v292);
      goto LABEL_498;
    }
    HIBYTE(v595) = v292;
    v299 = (char *)&v593;
    i = v544;
    if (v292)
      goto LABEL_497;
LABEL_498:
    v299[v292] = 0;
    LOBYTE(v596) = 1;
    v302 = v591.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v595) < 0)
      operator delete(v593);
    if (BYTE8(v592) && SBYTE7(v592) < 0)
      operator delete((void *)v591.__r_.__value_.__l.__size_);
    if (v591.__r_.__value_.__r.__words[0])
      os_release(v591.__r_.__value_.__l.__data_);
    if (v536 && *(_QWORD *)(v536 + 24))
    {
      v303 = _os_log_pack_size();
      v304 = operator new(v303, (std::align_val_t)8uLL);
      v305 = (_QWORD *)operator new();
      *v305 = &off_24EC1F7F0;
      v305[1] = 0;
      v305[2] = 0;
      v305[3] = v304;
      v571.__r_.__value_.__r.__words[0] = (std::string::size_type)v304;
      v571.__r_.__value_.__l.__size_ = (std::string::size_type)v304;
      v571.__r_.__value_.__r.__words[2] = (std::string::size_type)v305;
      v572 = 0;
      v573 = 0;
      v306 = strlen(__sb);
      if (v306 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v307 = v306;
      if (v306 >= 0x17)
      {
        v311 = (v306 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v306 | 7) != 0x17)
          v311 = v306 | 7;
        v312 = v311 + 1;
        v308 = (void ***)operator new(v311 + 1);
        *(_QWORD *)&v577 = v307;
        *((_QWORD *)&v577 + 1) = v312 | 0x8000000000000000;
        v576 = (void **)v308;
      }
      else
      {
        HIBYTE(v577) = v306;
        v308 = &v576;
        if (!v306)
          goto LABEL_517;
      }
      memcpy(v308, __sb, v307);
LABEL_517:
      *((_BYTE *)v308 + v307) = 0;
      v313 = (uint64_t)v576;
      *(_QWORD *)&v578 = v577;
      *(_QWORD *)((char *)&v578 + 7) = *(_QWORD *)((char *)&v577 + 7);
      v314 = HIBYTE(v577);
      v315 = operator new(0x38uLL);
      v315[1] = 0;
      v315[2] = 0;
      v315[3] = off_24EC1FA48;
      *v315 = &off_24EC1F9F8;
      v316 = v578;
      v315[4] = v313;
      v315[5] = v316;
      *(_QWORD *)((char *)v315 + 47) = *(_QWORD *)((char *)&v578 + 7);
      *((_BYTE *)v315 + 55) = v314;
      *(_QWORD *)&v578 = 0;
      *(_QWORD *)((char *)&v578 + 7) = 0;
      v317 = v573;
      v572 = (char *)(v315 + 3);
      v573 = (std::__shared_weak_count *)v315;
      if (v317)
      {
        v318 = (unint64_t *)&v317->__shared_owners_;
        do
          v319 = __ldaxr(v318);
        while (__stlxr(v319 - 1, v318));
        if (!v319)
        {
          ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
          std::__shared_weak_count::__release_weak(v317);
        }
      }
      v591 = v571;
      v320 = v572;
      if (v571.__r_.__value_.__r.__words[2])
      {
        v321 = (unint64_t *)(v571.__r_.__value_.__r.__words[2] + 8);
        do
          v322 = __ldxr(v321);
        while (__stxr(v322 + 1, v321));
      }
      v323 = v573;
      *(_QWORD *)&v592 = v320;
      *((_QWORD *)&v592 + 1) = v573;
      if (v573)
      {
        v324 = (unint64_t *)&v573->__shared_owners_;
        do
          v325 = __ldxr(v324);
        while (__stxr(v325 + 1, v324));
        v593 = v320;
        do
          v326 = __ldaxr(v324);
        while (__stlxr(v326 - 1, v324));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
      }
      else
      {
        v593 = v320;
      }
      v327 = (std::__shared_weak_count *)v571.__r_.__value_.__r.__words[2];
      if (v571.__r_.__value_.__r.__words[2])
      {
        v328 = (unint64_t *)(v571.__r_.__value_.__r.__words[2] + 8);
        do
          v329 = __ldaxr(v328);
        while (__stlxr(v329 - 1, v328));
        if (!v329)
        {
          ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
          std::__shared_weak_count::__release_weak(v327);
        }
      }
      if (v593[31] >= 0)
        v330 = v593 + 8;
      else
        v330 = (char *)*((_QWORD *)v593 + 1);
      v331 = v591.__r_.__value_.__r.__words[0];
      v332 = _os_log_pack_fill();
      *(_DWORD *)v332 = 136315138;
      *(_QWORD *)(v332 + 4) = v330;
      v333 = operator new();
      v334 = *(unsigned __int8 *)(v522 + 39);
      v335 = v520;
      if ((v334 & 0x80u) != 0)
      {
        v335 = *(const char **)(v522 + 16);
        v334 = *(_QWORD *)(v522 + 24);
      }
      *(_QWORD *)v333 = v331;
      *(_OWORD *)(v333 + 8) = *(_OWORD *)&v591.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v591.__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)(v333 + 24) = v592;
      v592 = 0uLL;
      *(_QWORD *)(v333 + 40) = v335;
      *(_QWORD *)(v333 + 48) = v334;
      *(_BYTE *)(v333 + 56) = 1;
      v576 = 0;
      v571.__r_.__value_.__r.__words[0] = v333;
      v13 = v545;
      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v536 + 24) + 40))(*(_QWORD *)(v536 + 24), &v571);
      v336 = v571.__r_.__value_.__r.__words[0];
      v571.__r_.__value_.__r.__words[0] = 0;
      if (v336)
      {
        v337 = *(std::__shared_weak_count **)(v336 + 32);
        if (v337)
        {
          v338 = (unint64_t *)&v337->__shared_owners_;
          do
            v339 = __ldaxr(v338);
          while (__stlxr(v339 - 1, v338));
          if (!v339)
          {
            ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
            std::__shared_weak_count::__release_weak(v337);
          }
        }
        v340 = *(std::__shared_weak_count **)(v336 + 16);
        if (v340)
        {
          v341 = (unint64_t *)&v340->__shared_owners_;
          do
            v342 = __ldaxr(v341);
          while (__stlxr(v342 - 1, v341));
          if (!v342)
          {
            ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
            std::__shared_weak_count::__release_weak(v340);
          }
        }
        MEMORY[0x227684CE8](v336, 0x10F0C40B62ED6C6);
        v343 = (uint64_t)v576;
        v576 = 0;
        if (v343)
        {
          v344 = *(std::__shared_weak_count **)(v343 + 32);
          if (v344)
          {
            v345 = (unint64_t *)&v344->__shared_owners_;
            do
              v346 = __ldaxr(v345);
            while (__stlxr(v346 - 1, v345));
            if (!v346)
            {
              ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
              std::__shared_weak_count::__release_weak(v344);
            }
          }
          v347 = *(std::__shared_weak_count **)(v343 + 16);
          if (v347)
          {
            v348 = (unint64_t *)&v347->__shared_owners_;
            do
              v349 = __ldaxr(v348);
            while (__stlxr(v349 - 1, v348));
            if (!v349)
            {
              ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
              std::__shared_weak_count::__release_weak(v347);
            }
          }
          MEMORY[0x227684CE8](v343, 0x10F0C40B62ED6C6);
        }
      }
      v350 = (std::__shared_weak_count *)*((_QWORD *)&v592 + 1);
      v310 = __srcb;
      if (*((_QWORD *)&v592 + 1))
      {
        v351 = (unint64_t *)(*((_QWORD *)&v592 + 1) + 8);
        do
          v352 = __ldaxr(v351);
        while (__stlxr(v352 - 1, v351));
        if (!v352)
        {
          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
          std::__shared_weak_count::__release_weak(v350);
        }
      }
      v353 = (std::__shared_weak_count *)v591.__r_.__value_.__r.__words[2];
      if (v591.__r_.__value_.__r.__words[2])
      {
        v354 = (unint64_t *)(v591.__r_.__value_.__r.__words[2] + 8);
        do
          v355 = __ldaxr(v354);
        while (__stlxr(v355 - 1, v354));
        if (!v355)
        {
          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
          std::__shared_weak_count::__release_weak(v353);
        }
      }
    }
    else
    {
      os_log_type_enabled(v302, OS_LOG_TYPE_INFO);
      LODWORD(v591.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v591.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sb;
      v309 = (void *)_os_log_send_and_compose_impl();
      v310 = __srcb;
      if (v309)
        free(v309);
    }
    if (v310)
    {
      v356 = (const char *)&__dst;
      if (v565 < 0)
        v356 = (const char *)__dst;
      sub_22322C138((uint64_t)&__p, "%s", v356);
      sub_223182C08((uint64_t)&__p);
    }
    sub_223182C08((uint64_t)&__p);
    v357 = v562;
    if (v562)
    {
      v358 = (unint64_t *)&v562->__shared_owners_;
      do
        v359 = __ldaxr(v358);
      while (__stlxr(v359 - 1, v358));
      if (!v359)
      {
        ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
        std::__shared_weak_count::__release_weak(v357);
      }
    }
    if (SHIBYTE(v565) < 0)
      operator delete(__dst);
    *(_QWORD *)&v579[0] = v533;
    *(_QWORD *)((char *)v579 + *(_QWORD *)(v533 - 24)) = v532;
    *(_QWORD *)&v579[1] = v531;
    *((_QWORD *)&v579[1] + 1) = MEMORY[0x24BEDB848] + 16;
    if (v585 < 0)
      operator delete(v584);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v588);
LABEL_590:
    v360 = sub_223822434(*(_QWORD **)(i + 1224), *(_QWORD *)&v20[4], *(_QWORD *)&v20[5]);
    *((_WORD *)v360 + 56) = 0x2000;
    *((_BYTE *)v360 + 114) = 0;
    v361 = (char *)operator new(0x240uLL);
    sub_223894E6C((uint64_t)v361);
    v362 = (std::__shared_weak_count *)*((_QWORD *)&v566 + 1);
    *(_QWORD *)&v566 = v361 + 24;
    *((_QWORD *)&v566 + 1) = v361;
    if (v362)
    {
      v363 = (unint64_t *)&v362->__shared_owners_;
      do
        v364 = __ldaxr(v363);
      while (__stlxr(v364 - 1, v363));
      if (!v364)
      {
        ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
        std::__shared_weak_count::__release_weak(v362);
      }
    }
    LODWORD(v567) = v567 + 1;
LABEL_42:
    v27 = (__int128 *)&v20[6];
    v28 = v20[18].i8[1];
    v29 = v20[18].i8[2];
    v31 = (char *)v13[1];
    v30 = v13[2];
    if ((unint64_t)v31 >= v30)
    {
      v59 = (char *)*v13;
      v60 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)&v31[-*v13] >> 3);
      v61 = v60 + 1;
      if (v60 + 1 > 0x108421084210842)
        sub_22316E078();
      v62 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v30 - (_QWORD)v59) >> 3);
      if (2 * v62 > v61)
        v61 = 2 * v62;
      if (v62 >= 0x84210842108421)
        v63 = 0x108421084210842;
      else
        v63 = v61;
      if (v63 > 0x108421084210842)
        sub_223174E94();
      v64 = (char *)operator new(248 * v63);
      v65 = &v64[248 * v60];
      v66 = v566;
      v566 = 0uLL;
      v67 = &v64[248 * v63];
      *(_OWORD *)v65 = *(_OWORD *)v20[4].f32;
      *((_OWORD *)v65 + 1) = v66;
      v68 = *v27;
      v69 = *(_OWORD *)v20[8].f32;
      v70 = *(_OWORD *)v20[12].f32;
      *((_OWORD *)v65 + 4) = *(_OWORD *)v20[10].f32;
      *((_OWORD *)v65 + 5) = v70;
      *((_OWORD *)v65 + 2) = v68;
      *((_OWORD *)v65 + 3) = v69;
      *((float32x2_t *)v65 + 12) = v20[14];
      *((float32x2_t *)v65 + 13) = v20[15];
      v71 = v543[3];
      *((_OWORD *)v65 + 9) = v543[2];
      *((_OWORD *)v65 + 10) = v71;
      v72 = v543[1];
      *((_OWORD *)v65 + 7) = *v543;
      *((_OWORD *)v65 + 8) = v72;
      v73 = v542[3];
      *((_OWORD *)v65 + 13) = v542[2];
      *((_OWORD *)v65 + 14) = v73;
      v74 = v542[1];
      *((_OWORD *)v65 + 11) = *v542;
      *((_OWORD *)v65 + 12) = v74;
      v65[240] = v28;
      v65[241] = v29;
      v42 = v65 + 248;
      if (v31 == v59)
      {
        i = v544;
        v13 = v545;
        *v545 = v65;
        v545[1] = v42;
        v545[2] = v67;
      }
      else
      {
        v75 = 0;
        v13 = v545;
        do
        {
          v76 = &v31[v75];
          v77 = &v65[v75];
          *(_OWORD *)(v77 - 248) = *(_OWORD *)&v31[v75 - 248];
          *(_OWORD *)(v77 - 232) = *(_OWORD *)&v31[v75 - 232];
          *((_QWORD *)v76 - 29) = 0;
          *((_QWORD *)v76 - 28) = 0;
          v78 = *(_OWORD *)&v31[v75 - 216];
          v79 = *(_OWORD *)&v31[v75 - 200];
          v80 = *(_OWORD *)&v31[v75 - 184];
          *(_OWORD *)(v77 - 168) = *(_OWORD *)&v31[v75 - 168];
          *(_OWORD *)(v77 - 184) = v80;
          *(_OWORD *)(v77 - 200) = v79;
          *(_OWORD *)(v77 - 216) = v78;
          *(_OWORD *)(v77 - 152) = *(_OWORD *)&v31[v75 - 152];
          v81 = *(_OWORD *)&v31[v75 - 136];
          v82 = *(_OWORD *)&v31[v75 - 120];
          v83 = *(_OWORD *)&v31[v75 - 104];
          *(_OWORD *)(v77 - 88) = *(_OWORD *)&v31[v75 - 88];
          *(_OWORD *)(v77 - 104) = v83;
          *(_OWORD *)(v77 - 120) = v82;
          *(_OWORD *)(v77 - 136) = v81;
          v84 = *(_OWORD *)&v31[v75 - 72];
          v85 = *(_OWORD *)&v31[v75 - 56];
          v86 = *(_OWORD *)&v31[v75 - 40];
          *(_OWORD *)(v77 - 24) = *(_OWORD *)&v31[v75 - 24];
          *(_OWORD *)(v77 - 40) = v86;
          *(_OWORD *)(v77 - 56) = v85;
          *(_OWORD *)(v77 - 72) = v84;
          *((_WORD *)v77 - 4) = *(_WORD *)&v31[v75 - 8];
          v75 -= 248;
        }
        while (&v31[v75] != v59);
        v31 = *v545;
        v87 = v545[1];
        *v545 = &v65[v75];
        v545[1] = v42;
        v545[2] = v67;
        for (i = v544; v87 != v31; v87 -= 248)
        {
          v88 = (std::__shared_weak_count *)*((_QWORD *)v87 - 28);
          if (v88)
          {
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
        }
      }
      if (v31)
        operator delete(v31);
    }
    else
    {
      v32 = v566;
      v566 = 0uLL;
      *(_OWORD *)v31 = *(_OWORD *)v20[4].f32;
      *((_OWORD *)v31 + 1) = v32;
      v33 = *v27;
      v34 = *(_OWORD *)v20[8].f32;
      v35 = *(_OWORD *)v20[12].f32;
      *((_OWORD *)v31 + 4) = *(_OWORD *)v20[10].f32;
      *((_OWORD *)v31 + 5) = v35;
      *((_OWORD *)v31 + 2) = v33;
      *((_OWORD *)v31 + 3) = v34;
      *((float32x2_t *)v31 + 12) = v20[14];
      *((float32x2_t *)v31 + 13) = v20[15];
      v36 = *v543;
      v37 = v543[1];
      v38 = v543[3];
      *((_OWORD *)v31 + 9) = v543[2];
      *((_OWORD *)v31 + 10) = v38;
      *((_OWORD *)v31 + 7) = v36;
      *((_OWORD *)v31 + 8) = v37;
      v39 = *v542;
      v40 = v542[1];
      v41 = v542[3];
      *((_OWORD *)v31 + 13) = v542[2];
      *((_OWORD *)v31 + 14) = v41;
      *((_OWORD *)v31 + 11) = v39;
      *((_OWORD *)v31 + 12) = v40;
      v31[240] = v28;
      v31[241] = v29;
      v42 = v31 + 248;
      i = v544;
    }
    v13[1] = v42;
    v12 = v546;
LABEL_95:
    v91 = (uint64_t *)*v12;
    if (*v12)
    {
LABEL_96:
      v92 = v12;
      do
      {
        v93 = *((unsigned __int8 *)v91 + 25);
        v94 = *v11;
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 26);
        v94 = v11[1];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 27);
        v94 = v11[2];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 28);
        v94 = v11[3];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 29);
        v94 = v11[4];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 30);
        v94 = v11[5];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 31);
        v94 = v11[6];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 32);
        v94 = v11[7];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 33);
        v94 = v11[8];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 34);
        v94 = v11[9];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 35);
        v94 = v11[10];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 36);
        v94 = v11[11];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 37);
        v94 = v11[12];
        if (v93 != v94)
          goto LABEL_114;
        v93 = *((unsigned __int8 *)v91 + 38);
        v94 = v11[13];
        if (v93 == v94
          && (v93 = *((unsigned __int8 *)v91 + 39), v94 = v11[14], v93 == v94)
          && (v93 = *((unsigned __int8 *)v91 + 40), v94 = v11[15], v93 == v94))
        {
          v92 = v91;
        }
        else
        {
LABEL_114:
          if (v93 < v94)
            ++v91;
          else
            v92 = v91;
        }
        v91 = (uint64_t *)*v91;
      }
      while (v91);
      if (v92 != v12 && ((char)sub_22319835C(v11, (unsigned __int8 *)v92 + 25) & 0x80000000) == 0)
      {
        v95 = (_QWORD *)v92[1];
        v96 = v92;
        if (v95)
        {
          do
          {
            v97 = v95;
            v95 = (_QWORD *)*v95;
          }
          while (v95);
        }
        else
        {
          do
          {
            v97 = (_QWORD *)v96[2];
            v23 = *v97 == (_QWORD)v96;
            v96 = v97;
          }
          while (!v23);
        }
        if ((_QWORD *)*v540 == v92)
          *v540 = v97;
        --*(_QWORD *)(i + 1840);
        sub_2231AFE60(*(uint64_t **)(i + 1832), v92);
        operator delete(v92);
      }
    }
LABEL_407:
    v254 = (std::__shared_weak_count *)*((_QWORD *)&v566 + 1);
    if (*((_QWORD *)&v566 + 1))
    {
      v255 = (unint64_t *)(*((_QWORD *)&v566 + 1) + 8);
      do
        v256 = __ldaxr(v255);
      while (__stlxr(v256 - 1, v255));
      if (!v256)
      {
        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
        std::__shared_weak_count::__release_weak(v254);
      }
    }
    v11 += 16;
    if (v11 != (unsigned __int8 *)v548)
      continue;
    break;
  }
  if (HIDWORD(v567))
  {
    *(_QWORD *)&v579[0] = "cv3d.recon.";
    *((_QWORD *)&v579[0] + 1) = 11;
    *(_QWORD *)&v579[1] = "Stats.Keyframing.update_count";
    *((_QWORD *)&v579[1] + 1) = 29;
    sub_2231A9820((uint64_t)v579, (uint64_t)&v579[2], 0, 0, &v591);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v365 = sub_2241471F8();
      v366 = v365[2];
      if (!v366)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v366 = v365[2];
      }
      v367 = *(_QWORD *)(v366 + 64);
      v368 = (std::mutex *)(v367 + 32);
      std::mutex::lock((std::mutex *)(v367 + 32));
      v370 = *(_QWORD *)(v367 + 96);
      v369 = *(_QWORD *)(v367 + 104);
      std::mutex::unlock(v368);
      if (v370 != v369)
      {
        v371 = HIBYTE(v591.__r_.__value_.__r.__words[2]);
        v372 = (std::string *)v591.__r_.__value_.__r.__words[0];
        sub_2241471F8();
        v373 = v371 >= 0 ? &v591 : v372;
        v374 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v373);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v374 + 24))(v374))
        {
          memset(v579, 0, 32);
          LODWORD(v579[2]) = 728325608;
          kdebug_trace();
          sub_22387CC84(v374, (int *)&v567 + 1, "color_invalidated_flush");
          kdebug_trace();
        }
      }
    }
    memset(v579, 0, 32);
    LODWORD(v579[2]) = 728325624;
    kdebug_trace();
    size = HIBYTE(v591.__r_.__value_.__r.__words[2]);
    if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v591.__r_.__value_.__l.__size_;
    if (size >= 0x11)
    {
      v376 = &v591;
      if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v376 = (std::string *)v591.__r_.__value_.__r.__words[0];
      v377 = v376->__r_.__value_.__r.__words[0];
      v378 = v376->__r_.__value_.__l.__size_;
      v379 = v376->__r_.__value_.__s.__data_[16];
      if (v377 == 0x6365722E64337663 && v378 == 0x73746174532E6E6FLL && v379 == 46)
      {
        v382 = sub_223187510();
        if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v383 = &v591;
        else
          v383 = (std::string *)v591.__r_.__value_.__r.__words[0];
        if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v384 = HIBYTE(v591.__r_.__value_.__r.__words[2]);
        else
          v384 = v591.__r_.__value_.__l.__size_;
        sub_223532E4C(v382, v383, v384, (unsigned int *)&v567 + 1, (uint64_t)"color_invalidated_flush", 23);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v591.__r_.__value_.__l.__data_);
    sub_22384BA54(&v576);
    if (*(int *)v576[7] <= 3)
    {
      v385 = *((unsigned __int8 *)v576 + 72);
      v386 = sub_22322F254((uint64_t)v576, "OSLogSurrogateAppender", 1, 0);
      v387 = v386;
      if (v385 || v386)
      {
        v591.__r_.__value_.__r.__words[0] = (std::string::size_type)&v576;
        v591.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v591.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v592) = 3;
        *((_QWORD *)&v592 + 1) = "unknown file";
        LODWORD(v593) = 1373;
        v595 = 0;
        v596 = 0;
        v594 = "unknown function";
        v388 = *(_QWORD *)v591.__r_.__value_.__l.__data_;
        v389 = (const char *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 16);
        v547 = v389;
        if (*(char *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v389 = *(const char **)(v388 + 16);
          v390 = *(_QWORD *)(v388 + 24);
          v549 = v385;
          v392 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v392 & 1) == 0)
          {
LABEL_882:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v579);
              sub_223199C58("com.apple.cv3d", (unint64_t)v579, &xmmword_255788F40);
              if (BYTE8(v579[1]) && SBYTE7(v579[1]) < 0)
                operator delete(*(void **)&v579[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v390 = *(unsigned __int8 *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 39);
          v549 = v385;
          v391 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v391 & 1) == 0)
            goto LABEL_882;
        }
        if (byte_255788F57 >= 0)
          v393 = (const char *)&xmmword_255788F40;
        else
          v393 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v394 = byte_255788F57;
        else
          v394 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)&v579[0] = os_log_create(v393, v389);
        v395 = (char *)v579 + 8;
        if (v394 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v394 >= 0x17)
        {
          v396 = (v394 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v394 | 7) != 0x17)
            v396 = v394 | 7;
          v397 = v396 + 1;
          v395 = (char *)operator new(v396 + 1);
          *(_QWORD *)&v579[1] = v394;
          *((_QWORD *)&v579[1] + 1) = v397 | 0x8000000000000000;
          *((_QWORD *)&v579[0] + 1) = v395;
        }
        else
        {
          HIBYTE(v579[1]) = v394;
          if (!v394)
          {
LABEL_665:
            v395[v394] = 0;
            LOBYTE(v579[2]) = 1;
            v398 = (char *)&v579[2] + 8;
            if (v390 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v390 >= 0x17)
            {
              v399 = (v390 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v390 | 7) != 0x17)
                v399 = v390 | 7;
              v400 = v399 + 1;
              v398 = (char *)operator new(v399 + 1);
              v580 = v390;
              v581 = v400 | 0x8000000000000000;
              *((_QWORD *)&v579[2] + 1) = v398;
            }
            else
            {
              HIBYTE(v581) = v390;
              if (!v390)
              {
LABEL_673:
                v398[v390] = 0;
                v582 = 1;
                v401 = *(NSObject **)&v579[0];
                if (SHIBYTE(v581) < 0)
                  operator delete(*((void **)&v579[2] + 1));
                i = v544;
                if (LOBYTE(v579[2]) && SHIBYTE(v579[1]) < 0)
                  operator delete(*((void **)&v579[0] + 1));
                if (*(_QWORD *)&v579[0])
                  os_release(*(void **)&v579[0]);
                if (v387 && *(_QWORD *)(v387 + 24))
                {
                  v402 = _os_log_pack_size();
                  v403 = (std::__shared_weak_count_vtbl *)operator new(v402, (std::align_val_t)8uLL);
                  v404 = (std::__shared_weak_count *)operator new();
                  v405 = v404;
                  v404->__shared_owners_ = 0;
                  v406 = (unint64_t *)&v404->__shared_owners_;
                  v404->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v404->__shared_weak_owners_ = 0;
                  v404[1].__vftable = v403;
                  *(_QWORD *)&v579[0] = v403;
                  *((_QWORD *)&v579[0] + 1) = v403;
                  *(_QWORD *)&v579[1] = v404;
                  do
                    v407 = __ldxr(v406);
                  while (__stxr(v407 + 1, v406));
                  memset((char *)&v579[1] + 8, 0, 24);
                  do
                    v408 = __ldaxr(v406);
                  while (__stlxr(v408 - 1, v406));
                  if (!v408)
                  {
                    ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                    std::__shared_weak_count::__release_weak(v405);
                  }
                  v409 = *(_QWORD *)&v579[0];
                  v410 = (_DWORD *)_os_log_pack_fill();
                  v411 = HIDWORD(v567);
                  *v410 = 67109120;
                  v410[1] = v411;
                  v412 = (char *)operator new();
                  v413 = *(unsigned __int8 *)(v388 + 39);
                  v414 = v547;
                  if ((v413 & 0x80u) != 0)
                  {
                    v414 = *(const char **)(v388 + 16);
                    v413 = *(_QWORD *)(v388 + 24);
                  }
                  *(_QWORD *)v412 = v409;
                  *(_OWORD *)(v412 + 8) = *(_OWORD *)((char *)v579 + 8);
                  *((_QWORD *)&v579[0] + 1) = 0;
                  *(_QWORD *)&v579[1] = 0;
                  *(_OWORD *)(v412 + 24) = *(_OWORD *)((char *)&v579[1] + 8);
                  *((_QWORD *)&v579[1] + 1) = 0;
                  *(_QWORD *)&v579[2] = 0;
                  *((_QWORD *)v412 + 5) = v414;
                  *((_QWORD *)v412 + 6) = v413;
                  v412[56] = 1;
                  v571.__r_.__value_.__r.__words[0] = 0;
                  __p = v412;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v387 + 24) + 40))(*(_QWORD *)(v387 + 24), &__p);
                  v415 = __p;
                  __p = 0;
                  i = v544;
                  if (v415)
                  {
                    v416 = (std::__shared_weak_count *)*((_QWORD *)v415 + 4);
                    if (v416)
                    {
                      v417 = (unint64_t *)&v416->__shared_owners_;
                      do
                        v418 = __ldaxr(v417);
                      while (__stlxr(v418 - 1, v417));
                      if (!v418)
                      {
                        ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                        std::__shared_weak_count::__release_weak(v416);
                      }
                    }
                    v419 = (std::__shared_weak_count *)*((_QWORD *)v415 + 2);
                    if (v419)
                    {
                      v420 = (unint64_t *)&v419->__shared_owners_;
                      do
                        v421 = __ldaxr(v420);
                      while (__stlxr(v421 - 1, v420));
                      if (!v421)
                      {
                        ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                        std::__shared_weak_count::__release_weak(v419);
                      }
                    }
                    MEMORY[0x227684CE8](v415, 0x10F0C40B62ED6C6);
                    v422 = v571.__r_.__value_.__r.__words[0];
                    v571.__r_.__value_.__r.__words[0] = 0;
                    if (v422)
                    {
                      v423 = *(std::__shared_weak_count **)(v422 + 32);
                      if (v423)
                      {
                        v424 = (unint64_t *)&v423->__shared_owners_;
                        do
                          v425 = __ldaxr(v424);
                        while (__stlxr(v425 - 1, v424));
                        if (!v425)
                        {
                          ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
                          std::__shared_weak_count::__release_weak(v423);
                        }
                      }
                      v426 = *(std::__shared_weak_count **)(v422 + 16);
                      if (v426)
                      {
                        v427 = (unint64_t *)&v426->__shared_owners_;
                        do
                          v428 = __ldaxr(v427);
                        while (__stlxr(v428 - 1, v427));
                        if (!v428)
                        {
                          ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                          std::__shared_weak_count::__release_weak(v426);
                        }
                      }
                      MEMORY[0x227684CE8](v422, 0x10F0C40B62ED6C6);
                    }
                  }
                  v429 = *(std::__shared_weak_count **)&v579[2];
                  if (*(_QWORD *)&v579[2])
                  {
                    v430 = (unint64_t *)(*(_QWORD *)&v579[2] + 8);
                    do
                      v431 = __ldaxr(v430);
                    while (__stlxr(v431 - 1, v430));
                    if (!v431)
                    {
                      ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
                      std::__shared_weak_count::__release_weak(v429);
                    }
                  }
                  v432 = *(std::__shared_weak_count **)&v579[1];
                  if (*(_QWORD *)&v579[1])
                  {
                    v433 = (unint64_t *)(*(_QWORD *)&v579[1] + 8);
                    do
                      v434 = __ldaxr(v433);
                    while (__stlxr(v434 - 1, v433));
                    if (!v434)
                    {
                      ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
                      std::__shared_weak_count::__release_weak(v432);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v401, OS_LOG_TYPE_INFO);
                  LODWORD(v579[0]) = 67109120;
                  DWORD1(v579[0]) = HIDWORD(v567);
                  v435 = (void *)_os_log_send_and_compose_impl();
                  if (v435)
                    free(v435);
                }
                if (v549)
                {
                  sub_22322C138((uint64_t)&v591, "KFE:IKC:F:%i", HIDWORD(v567));
                  sub_223182C08((uint64_t)&v591);
                }
                sub_223182C08((uint64_t)&v591);
                v436 = v596;
                if (v596)
                {
                  v437 = (unint64_t *)&v596->__shared_owners_;
                  do
                    v438 = __ldaxr(v437);
                  while (__stlxr(v438 - 1, v437));
                  if (!v438)
                  {
                    ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                    std::__shared_weak_count::__release_weak(v436);
                  }
                }
                goto LABEL_732;
              }
            }
            memmove(v398, v389, v390);
            goto LABEL_673;
          }
        }
        memmove(v395, v393, v394);
        goto LABEL_665;
      }
    }
  }
LABEL_732:
  if ((_DWORD)v567)
  {
    *(_QWORD *)&v579[0] = "cv3d.recon.";
    *((_QWORD *)&v579[0] + 1) = 11;
    *(_QWORD *)&v579[1] = "Stats.Keyframing.update_count";
    *((_QWORD *)&v579[1] + 1) = 29;
    sub_2231A9820((uint64_t)v579, (uint64_t)&v579[2], 0, 0, &v591);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v439 = sub_2241471F8();
      v440 = v439[2];
      if (!v440)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v440 = v439[2];
      }
      v441 = *(_QWORD *)(v440 + 64);
      v442 = (std::mutex *)(v441 + 32);
      std::mutex::lock((std::mutex *)(v441 + 32));
      v444 = *(_QWORD *)(v441 + 96);
      v443 = *(_QWORD *)(v441 + 104);
      std::mutex::unlock(v442);
      if (v444 != v443)
      {
        v445 = HIBYTE(v591.__r_.__value_.__r.__words[2]);
        v446 = (std::string *)v591.__r_.__value_.__r.__words[0];
        sub_2241471F8();
        v447 = v445 >= 0 ? &v591 : v446;
        v448 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v447);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v448 + 24))(v448))
        {
          memset(v579, 0, 32);
          LODWORD(v579[2]) = 728325608;
          kdebug_trace();
          sub_22387CC84(v448, (int *)&v567, "redundant_reloc_removed");
          kdebug_trace();
        }
      }
    }
    memset(v579, 0, 32);
    LODWORD(v579[2]) = 728325624;
    kdebug_trace();
    v449 = HIBYTE(v591.__r_.__value_.__r.__words[2]);
    if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v449 = v591.__r_.__value_.__l.__size_;
    if (v449 >= 0x11)
    {
      v450 = &v591;
      if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v450 = (std::string *)v591.__r_.__value_.__r.__words[0];
      v451 = v450->__r_.__value_.__r.__words[0];
      v452 = v450->__r_.__value_.__l.__size_;
      v453 = v450->__r_.__value_.__s.__data_[16];
      if (v451 == 0x6365722E64337663 && v452 == 0x73746174532E6E6FLL && v453 == 46)
      {
        v456 = sub_223187510();
        if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v457 = &v591;
        else
          v457 = (std::string *)v591.__r_.__value_.__r.__words[0];
        if ((v591.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v458 = HIBYTE(v591.__r_.__value_.__r.__words[2]);
        else
          v458 = v591.__r_.__value_.__l.__size_;
        sub_223532E4C(v456, v457, v458, (unsigned int *)&v567, (uint64_t)"redundant_reloc_removed", 23);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v591.__r_.__value_.__l.__data_);
    sub_22384BB48(&v576);
    if (*(int *)v576[7] <= 3)
    {
      v459 = *((unsigned __int8 *)v576 + 72);
      v460 = sub_22322F254((uint64_t)v576, "OSLogSurrogateAppender", 1, 0);
      v461 = v460;
      if (v459 || v460)
      {
        v591.__r_.__value_.__r.__words[0] = (std::string::size_type)&v576;
        v591.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v591.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v592) = 3;
        *((_QWORD *)&v592 + 1) = "unknown file";
        LODWORD(v593) = 1378;
        v595 = 0;
        v596 = 0;
        v594 = "unknown function";
        v462 = *(_QWORD *)v591.__r_.__value_.__l.__data_;
        v463 = (const char *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 16);
        v550 = v463;
        if (*(char *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v463 = *(const char **)(v462 + 16);
          v464 = *(_QWORD *)(v462 + 24);
          v466 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v466 & 1) == 0)
          {
LABEL_889:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v579);
              sub_223199C58("com.apple.cv3d", (unint64_t)v579, &xmmword_255788F40);
              if (BYTE8(v579[1]) && SBYTE7(v579[1]) < 0)
                operator delete(*(void **)&v579[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v464 = *(unsigned __int8 *)(*(_QWORD *)v591.__r_.__value_.__l.__data_ + 39);
          v465 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v465 & 1) == 0)
            goto LABEL_889;
        }
        if (byte_255788F57 >= 0)
          v467 = (const char *)&xmmword_255788F40;
        else
          v467 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v468 = byte_255788F57;
        else
          v468 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)&v579[0] = os_log_create(v467, v463);
        v469 = (char *)v579 + 8;
        if (v468 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v468 >= 0x17)
        {
          v470 = (v468 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v468 | 7) != 0x17)
            v470 = v468 | 7;
          v471 = v470 + 1;
          v469 = (char *)operator new(v470 + 1);
          *(_QWORD *)&v579[1] = v468;
          *((_QWORD *)&v579[1] + 1) = v471 | 0x8000000000000000;
          *((_QWORD *)&v579[0] + 1) = v469;
        }
        else
        {
          HIBYTE(v579[1]) = v468;
          if (!v468)
          {
LABEL_786:
            v469[v468] = 0;
            LOBYTE(v579[2]) = 1;
            v472 = (char *)&v579[2] + 8;
            if (v464 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v464 >= 0x17)
            {
              v473 = (v464 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v464 | 7) != 0x17)
                v473 = v464 | 7;
              v474 = v473 + 1;
              v472 = (char *)operator new(v473 + 1);
              v580 = v464;
              v581 = v474 | 0x8000000000000000;
              *((_QWORD *)&v579[2] + 1) = v472;
            }
            else
            {
              HIBYTE(v581) = v464;
              if (!v464)
              {
LABEL_794:
                v472[v464] = 0;
                v582 = 1;
                v475 = *(NSObject **)&v579[0];
                if (SHIBYTE(v581) < 0)
                  operator delete(*((void **)&v579[2] + 1));
                i = v544;
                if (LOBYTE(v579[2]) && SHIBYTE(v579[1]) < 0)
                  operator delete(*((void **)&v579[0] + 1));
                if (*(_QWORD *)&v579[0])
                  os_release(*(void **)&v579[0]);
                if (v461 && *(_QWORD *)(v461 + 24))
                {
                  v476 = _os_log_pack_size();
                  v477 = (std::__shared_weak_count_vtbl *)operator new(v476, (std::align_val_t)8uLL);
                  v478 = (std::__shared_weak_count *)operator new();
                  v479 = v478;
                  v478->__shared_owners_ = 0;
                  v480 = (unint64_t *)&v478->__shared_owners_;
                  v478->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v478->__shared_weak_owners_ = 0;
                  v478[1].__vftable = v477;
                  *(_QWORD *)&v579[0] = v477;
                  *((_QWORD *)&v579[0] + 1) = v477;
                  *(_QWORD *)&v579[1] = v478;
                  do
                    v481 = __ldxr(v480);
                  while (__stxr(v481 + 1, v480));
                  memset((char *)&v579[1] + 8, 0, 24);
                  do
                    v482 = __ldaxr(v480);
                  while (__stlxr(v482 - 1, v480));
                  if (!v482)
                  {
                    ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
                    std::__shared_weak_count::__release_weak(v479);
                  }
                  v483 = *(_QWORD *)&v579[0];
                  v484 = (_DWORD *)_os_log_pack_fill();
                  v485 = v567;
                  *v484 = 67109120;
                  v484[1] = v485;
                  v486 = (char *)operator new();
                  v487 = *(unsigned __int8 *)(v462 + 39);
                  v488 = v550;
                  if ((v487 & 0x80u) != 0)
                  {
                    v488 = *(const char **)(v462 + 16);
                    v487 = *(_QWORD *)(v462 + 24);
                  }
                  *(_QWORD *)v486 = v483;
                  *(_OWORD *)(v486 + 8) = *(_OWORD *)((char *)v579 + 8);
                  *((_QWORD *)&v579[0] + 1) = 0;
                  *(_QWORD *)&v579[1] = 0;
                  *(_OWORD *)(v486 + 24) = *(_OWORD *)((char *)&v579[1] + 8);
                  *((_QWORD *)&v579[1] + 1) = 0;
                  *(_QWORD *)&v579[2] = 0;
                  *((_QWORD *)v486 + 5) = v488;
                  *((_QWORD *)v486 + 6) = v487;
                  v486[56] = 1;
                  v571.__r_.__value_.__r.__words[0] = 0;
                  __p = v486;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v461 + 24) + 40))(*(_QWORD *)(v461 + 24), &__p);
                  v489 = __p;
                  __p = 0;
                  i = v544;
                  if (v489)
                  {
                    v490 = (std::__shared_weak_count *)*((_QWORD *)v489 + 4);
                    if (v490)
                    {
                      v491 = (unint64_t *)&v490->__shared_owners_;
                      do
                        v492 = __ldaxr(v491);
                      while (__stlxr(v492 - 1, v491));
                      if (!v492)
                      {
                        ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
                        std::__shared_weak_count::__release_weak(v490);
                      }
                    }
                    v493 = (std::__shared_weak_count *)*((_QWORD *)v489 + 2);
                    if (v493)
                    {
                      v494 = (unint64_t *)&v493->__shared_owners_;
                      do
                        v495 = __ldaxr(v494);
                      while (__stlxr(v495 - 1, v494));
                      if (!v495)
                      {
                        ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
                        std::__shared_weak_count::__release_weak(v493);
                      }
                    }
                    MEMORY[0x227684CE8](v489, 0x10F0C40B62ED6C6);
                    v496 = v571.__r_.__value_.__r.__words[0];
                    v571.__r_.__value_.__r.__words[0] = 0;
                    if (v496)
                    {
                      v497 = *(std::__shared_weak_count **)(v496 + 32);
                      if (v497)
                      {
                        v498 = (unint64_t *)&v497->__shared_owners_;
                        do
                          v499 = __ldaxr(v498);
                        while (__stlxr(v499 - 1, v498));
                        if (!v499)
                        {
                          ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
                          std::__shared_weak_count::__release_weak(v497);
                        }
                      }
                      v500 = *(std::__shared_weak_count **)(v496 + 16);
                      if (v500)
                      {
                        v501 = (unint64_t *)&v500->__shared_owners_;
                        do
                          v502 = __ldaxr(v501);
                        while (__stlxr(v502 - 1, v501));
                        if (!v502)
                        {
                          ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
                          std::__shared_weak_count::__release_weak(v500);
                        }
                      }
                      MEMORY[0x227684CE8](v496, 0x10F0C40B62ED6C6);
                    }
                  }
                  v503 = *(std::__shared_weak_count **)&v579[2];
                  if (*(_QWORD *)&v579[2])
                  {
                    v504 = (unint64_t *)(*(_QWORD *)&v579[2] + 8);
                    do
                      v505 = __ldaxr(v504);
                    while (__stlxr(v505 - 1, v504));
                    if (!v505)
                    {
                      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
                      std::__shared_weak_count::__release_weak(v503);
                    }
                  }
                  v506 = *(std::__shared_weak_count **)&v579[1];
                  if (*(_QWORD *)&v579[1])
                  {
                    v507 = (unint64_t *)(*(_QWORD *)&v579[1] + 8);
                    do
                      v508 = __ldaxr(v507);
                    while (__stlxr(v508 - 1, v507));
                    if (!v508)
                    {
                      ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
                      std::__shared_weak_count::__release_weak(v506);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v475, OS_LOG_TYPE_INFO);
                  LODWORD(v579[0]) = 67109120;
                  DWORD1(v579[0]) = v567;
                  v509 = (void *)_os_log_send_and_compose_impl();
                  if (v509)
                    free(v509);
                }
                if (v459)
                {
                  sub_22322C138((uint64_t)&v591, "KFE:RRR:%u", v567);
                  sub_223182C08((uint64_t)&v591);
                }
                sub_223182C08((uint64_t)&v591);
                v510 = v596;
                if (v596)
                {
                  v511 = (unint64_t *)&v596->__shared_owners_;
                  do
                    v512 = __ldaxr(v511);
                  while (__stlxr(v512 - 1, v511));
                  if (!v512)
                  {
                    ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
                    std::__shared_weak_count::__release_weak(v510);
                  }
                }
                goto LABEL_853;
              }
            }
            memmove(v472, v463, v464);
            goto LABEL_794;
          }
        }
        memmove(v469, v467, v468);
        goto LABEL_786;
      }
    }
  }
LABEL_853:
  if (!*(_DWORD *)(*(_QWORD *)(i + 1640) + 8))
  {
    sub_223198030(i + 1848, *(_QWORD **)(i + 1856));
    *(_QWORD *)(i + 1848) = v525;
    *(_OWORD *)(i + 1856) = 0u;
  }
  kdebug_trace();
  v513 = *(_QWORD *)&v568[24];
  if (*(_QWORD *)&v568[24])
  {
    v514 = 0;
    v515 = 0;
    do
    {
      if ((*(char *)(*(_QWORD *)v568 + v515) & 0x80000000) == 0)
      {
        v516 = *(_QWORD *)&v568[8] + v514;
        if (*(_QWORD *)(*(_QWORD *)&v568[8] + v514 + 40))
        {
          operator delete(*(void **)(v516 + 16));
          *(_QWORD *)(v516 + 16) = &unk_2245C5160;
          *(_OWORD *)(v516 + 24) = 0u;
          *(_OWORD *)(v516 + 40) = 0u;
          v513 = *(_QWORD *)&v568[24];
        }
      }
      ++v515;
      v514 += 56;
    }
    while (v515 != v513);
    operator delete(*(void **)v568);
  }
  if (v569)
  {
    v570 = v569;
    operator delete(v569);
  }
}

void sub_22386CDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53)
{
  uint64_t v53;
  uint64_t v54;
  void *v56;

  if (LOBYTE(STACK[0x2F8]) && SLOBYTE(STACK[0x2F7]) < 0)
    operator delete(*(void **)(v53 + 224));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v54 - 176);
  sub_223865960((uint64_t)&STACK[0x220]);
  sub_223473EA8(a53);
  v56 = (void *)STACK[0x248];
  if (!STACK[0x248])
    _Unwind_Resume(a1);
  STACK[0x250] = (unint64_t)v56;
  operator delete(v56);
  _Unwind_Resume(a1);
}

void sub_22386D4F4(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22386D614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22386D630(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22386D750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22386D76C(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22386D88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22386D8A8(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22329D76C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22386D9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22386D9E4(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22329D76C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22386DB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22386DB20(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22386DC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22386DC5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = *a2;
  if (!*(_BYTE *)(a1 + 192))
  {
    v18 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v18;
    *a2 = 0;
    a2[1] = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (*((_BYTE *)a2 + 40))
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      v19 = a2 + 3;
      v20 = a2[3];
      *(_QWORD *)(a1 + 24) = v20;
      v21 = a1 + 24;
      v22 = a2[4];
      *(_QWORD *)(a1 + 32) = v22;
      if (v22)
      {
        *(_QWORD *)(v20 + 16) = v21;
        a2[2] = (uint64_t)v19;
        *v19 = 0;
        a2[4] = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v21;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    if (*((_BYTE *)a2 + 184))
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_QWORD *)(a1 + 64) = a2[8];
      a2[6] = 0;
      a2[7] = 0;
      a2[8] = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_QWORD *)(a1 + 88) = a2[11];
      a2[9] = 0;
      a2[10] = 0;
      a2[11] = 0;
      v27 = *((_OWORD *)a2 + 6);
      v28 = *((_OWORD *)a2 + 7);
      v29 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v29;
      *(_OWORD *)(a1 + 96) = v27;
      *(_OWORD *)(a1 + 112) = v28;
      v30 = *((_OWORD *)a2 + 10);
      *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
      *(_OWORD *)(a1 + 160) = v30;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_BYTE *)(a1 + 192) = 1;
    return a1;
  }
  v5 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    v9 = (_QWORD *)(a1 + 16);
    v10 = *(unsigned __int8 *)(a1 + 40);
    if (v10 == *((unsigned __int8 *)a2 + 40))
      goto LABEL_7;
LABEL_15:
    if (v10)
    {
      sub_223198030((uint64_t)v9, *(_QWORD **)(a1 + 24));
      *(_BYTE *)(a1 + 40) = 0;
      v15 = (_QWORD *)(a1 + 48);
      v16 = a2 + 6;
      v17 = *(unsigned __int8 *)(a1 + 184);
      if (v17 == *((unsigned __int8 *)a2 + 184))
        goto LABEL_28;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      v23 = a2 + 3;
      v24 = a2[3];
      *(_QWORD *)(a1 + 24) = v24;
      v25 = a1 + 24;
      v26 = a2[4];
      *(_QWORD *)(a1 + 32) = v26;
      if (v26)
      {
        *(_QWORD *)(v24 + 16) = v25;
        a2[2] = (uint64_t)v23;
        *v23 = 0;
        a2[4] = 0;
      }
      else
      {
        *v9 = v25;
      }
      *(_BYTE *)(a1 + 40) = 1;
      v15 = (_QWORD *)(a1 + 48);
      v16 = a2 + 6;
      v17 = *(unsigned __int8 *)(a1 + 184);
      if (v17 == *((unsigned __int8 *)a2 + 184))
        goto LABEL_28;
    }
LABEL_42:
    if (v17)
    {
      v43 = *(_QWORD **)(a1 + 72);
      if (v43)
      {
        v44 = *(_QWORD **)(a1 + 80);
        v45 = *(void **)(a1 + 72);
        if (v44 != v43)
        {
          do
            v44 = sub_223173E64(v44 - 45);
          while (v44 != v43);
          v45 = *(void **)(a1 + 72);
        }
        *(_QWORD *)(a1 + 80) = v43;
        operator delete(v45);
      }
      v46 = (_QWORD *)*v15;
      if (*v15)
      {
        v47 = *(_QWORD **)(a1 + 56);
        v48 = (_QWORD *)*v15;
        if (v47 != v46)
        {
          do
            v47 = sub_223173E64(v47 - 45);
          while (v47 != v46);
          v48 = (_QWORD *)*v15;
        }
        *(_QWORD *)(a1 + 56) = v46;
        operator delete(v48);
      }
      *(_BYTE *)(a1 + 184) = 0;
      return a1;
    }
    else
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_QWORD *)(a1 + 64) = a2[8];
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_QWORD *)(a1 + 88) = a2[11];
      a2[9] = 0;
      a2[10] = 0;
      a2[11] = 0;
      v49 = *((_OWORD *)a2 + 6);
      v50 = *((_OWORD *)a2 + 7);
      v51 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v51;
      *(_OWORD *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 112) = v50;
      v52 = *((_OWORD *)a2 + 10);
      *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
      *(_OWORD *)(a1 + 160) = v52;
      *(_BYTE *)(a1 + 184) = 1;
      return a1;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  v9 = (_QWORD *)(a1 + 16);
  v10 = *(unsigned __int8 *)(a1 + 40);
  if (v10 != *((unsigned __int8 *)a2 + 40))
    goto LABEL_15;
LABEL_7:
  if (!v10)
    goto LABEL_27;
  v11 = a1 + 24;
  sub_223198030((uint64_t)v9, *(_QWORD **)(a1 + 24));
  *(_QWORD *)(a1 + 16) = a2[2];
  v12 = a2 + 3;
  v13 = a2[3];
  *(_QWORD *)(a1 + 24) = v13;
  v14 = a2[4];
  *(_QWORD *)(a1 + 32) = v14;
  if (!v14)
  {
    *v9 = v11;
LABEL_27:
    v15 = (_QWORD *)(a1 + 48);
    v16 = a2 + 6;
    v17 = *(unsigned __int8 *)(a1 + 184);
    if (v17 != *((unsigned __int8 *)a2 + 184))
      goto LABEL_42;
    goto LABEL_28;
  }
  *(_QWORD *)(v13 + 16) = v11;
  a2[2] = (uint64_t)v12;
  *v12 = 0;
  a2[4] = 0;
  v15 = (_QWORD *)(a1 + 48);
  v16 = a2 + 6;
  v17 = *(unsigned __int8 *)(a1 + 184);
  if (v17 != *((unsigned __int8 *)a2 + 184))
    goto LABEL_42;
LABEL_28:
  if (!v17)
    return a1;
  v32 = (_QWORD *)*v15;
  if (*v15)
  {
    v33 = *(_QWORD **)(a1 + 56);
    v34 = (_QWORD *)*v15;
    if (v33 != v32)
    {
      do
        v33 = sub_223173E64(v33 - 45);
      while (v33 != v32);
      v34 = (_QWORD *)*v15;
    }
    *(_QWORD *)(a1 + 56) = v32;
    operator delete(v34);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  *v16 = 0;
  v16[1] = 0;
  v16[2] = 0;
  v35 = (void **)(a1 + 72);
  v36 = *(_QWORD **)(a1 + 72);
  if (v36)
  {
    v37 = *(_QWORD **)(a1 + 80);
    v38 = *(void **)(a1 + 72);
    if (v37 != v36)
    {
      do
        v37 = sub_223173E64(v37 - 45);
      while (v37 != v36);
      v38 = *v35;
    }
    *(_QWORD *)(a1 + 80) = v36;
    operator delete(v38);
    *v35 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 88) = a2[11];
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  v39 = *((_OWORD *)a2 + 6);
  v40 = *((_OWORD *)a2 + 7);
  v41 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 144) = v41;
  *(_OWORD *)(a1 + 96) = v39;
  *(_OWORD *)(a1 + 112) = v40;
  v42 = *((_OWORD *)a2 + 10);
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)(a1 + 160) = v42;
  return a1;
}

__n128 sub_22386E0E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (*(_BYTE *)(a1 + 136))
  {
    v4 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v5 = *(_QWORD **)(a1 + 8);
      v6 = *(_QWORD **)a1;
      if (v5 != v4)
      {
        do
          v5 = sub_223173E64(v5 - 45);
        while (v5 != v4);
        v6 = *(_QWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v6);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v7 = (void **)(a1 + 24);
    v8 = *(_QWORD **)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD **)(a1 + 32);
      v10 = *(void **)(a1 + 24);
      if (v9 != v8)
      {
        do
          v9 = sub_223173E64(v9 - 45);
        while (v9 != v8);
        v10 = *v7;
      }
      *(_QWORD *)(a1 + 32) = v8;
      operator delete(v10);
      *v7 = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v11 = *(_OWORD *)(a2 + 48);
    v12 = *(_OWORD *)(a2 + 64);
    v13 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)(a1 + 64) = v12;
    result = *(__n128 *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(__n128 *)(a1 + 112) = result;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v15 = *(_OWORD *)(a2 + 48);
    v16 = *(_OWORD *)(a2 + 64);
    v17 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v16;
    result = *(__n128 *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(__n128 *)(a1 + 112) = result;
    *(_BYTE *)(a1 + 136) = 1;
  }
  return result;
}

_QWORD *sub_22386E26C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_223173E64(v3 - 45);
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)*a1;
  if (*a1)
  {
    v6 = (_QWORD *)a1[1];
    v7 = (_QWORD *)*a1;
    if (v6 != v5)
    {
      do
        v6 = sub_223173E64(v6 - 45);
      while (v6 != v5);
      v7 = (_QWORD *)*a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_22386E2FC(uint64_t a1, char *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  __int128 __p;
  char v11;
  char v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    *(_QWORD *)&v9 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v9 + 1) = 2;
    v4 = sub_2241471F8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    {
      v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      LOBYTE(__p) = 0;
      v12 = 0;
      sub_2235350DC(a2, &__p, &v9, v13);
      sub_2231AA5A4((uint64_t)v4, v5, (uint64_t)v13);
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v12)
      {
        if (v11 < 0)
          operator delete((void *)__p);
      }
    }
  }
}

void sub_22386E40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  if (a18)
  {
    if (a17 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_22386E470(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_22388925C(v3 - 464);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_22386E4C8(uint64_t a1, float *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 8;
    strcpy((char *)__p, "kos (ms)");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2231FBBA8((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_22386E57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22386E598(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22386E6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22386E6D4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t ***v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  unsigned __int8 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  size_t v49;
  const char *v50;
  unsigned __int8 v51;
  const char *v52;
  size_t v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  _BYTE *v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  size_t v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  size_t v64;
  size_t v65;
  void **v66;
  void *v67;
  int v68;
  uint64_t v69;
  void **v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  const char *v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  size_t v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  size_t v133;
  size_t v134;
  void **v135;
  void *v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  char v143;
  _QWORD *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void *v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void **v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  char *v188;
  _QWORD *v189;
  uint64_t *v190;
  unint64_t v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  unint64_t v194;
  unsigned int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  void **v210;
  void **v211;
  int v212;
  void **v213;
  void **v214;
  unsigned int v215;
  unsigned int v216;
  BOOL v217;
  void ***v218;
  void **v219;
  unsigned int v220;
  void **v221;
  void **v222;
  void **v223;
  void **v224;
  void **v225;
  void **v226;
  void **v227;
  void **v228;
  void **v229;
  void **v230;
  void **v231;
  void **v232;
  void **v233;
  void **v234;
  void **v235;
  void ***v236;
  void **v237;
  void **v238;
  void **v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  std::mutex *v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  std::string *v247;
  std::string *v248;
  uint64_t v249;
  std::string::size_type size;
  std::string *v251;
  std::string::size_type v252;
  std::string::size_type v253;
  int v254;
  __n128 *v257;
  std::string *v258;
  size_t v259;
  void **v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v265;
  const char *v266;
  size_t v267;
  unsigned __int8 v268;
  unsigned __int8 v269;
  const char *v270;
  size_t v271;
  _BYTE *v272;
  uint64_t v273;
  uint64_t v274;
  _BYTE *v275;
  NSObject *v276;
  uint64_t v277;
  uint64_t v278;
  size_t v279;
  std::__shared_weak_count_vtbl *v280;
  std::__shared_weak_count *v281;
  size_t v282;
  size_t v283;
  void **v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  void **v288;
  char v289;
  _QWORD *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  char *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  const char *v310;
  void *v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  void **v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  _QWORD *v334;
  void **v335;
  void **v336;
  unsigned __int8 *v337;
  char *v338;
  std::string::size_type v339;
  int v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v344;
  const char *v345;
  size_t v346;
  uint64_t v347;
  char *v348;
  unsigned __int8 v349;
  size_t v350;
  const char *v351;
  _BYTE *v352;
  uint64_t v353;
  _BYTE *v354;
  uint64_t v355;
  NSObject *v356;
  double v357;
  size_t v358;
  std::__shared_weak_count_vtbl *v359;
  std::__shared_weak_count *v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  const char *v369;
  void *v370;
  uint64_t *v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  void *v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  uint64_t *v395;
  _OWORD *v396;
  _OWORD *v397;
  double v398;
  _QWORD *v399;
  _QWORD *v400;
  char *v401;
  _QWORD *v402;
  double v403;
  _QWORD *v404;
  _QWORD *v405;
  _QWORD *v406;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v411;
  _QWORD *v412;
  void *v414;
  char *v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  _QWORD *v424;
  _QWORD *v425;
  int v426;
  unint64_t v427;
  unint64_t v428;
  BOOL v429;
  uint64_t v430;
  uint64_t v431;
  size_t v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  unsigned __int8 v436;
  const char *v437;
  size_t v438;
  _BYTE *v439;
  uint64_t v440;
  uint64_t v441;
  _BYTE *v442;
  uint64_t v443;
  NSObject *v444;
  double v445;
  double v446;
  size_t v447;
  std::__shared_weak_count_vtbl *v448;
  std::__shared_weak_count *v449;
  size_t v450;
  size_t v451;
  void **v452;
  void *v453;
  uint64_t v454;
  void **v455;
  char v456;
  _QWORD *v457;
  uint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  char *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  void *v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  void **v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  int v501;
  unint64_t v502;
  uint64_t v504;
  size_t v505;
  const char *v506;
  unsigned __int8 v507;
  const char *v508;
  size_t v509;
  _BYTE *v510;
  uint64_t v511;
  uint64_t v512;
  _BYTE *v513;
  uint64_t v514;
  NSObject *v515;
  size_t v516;
  std::__shared_weak_count_vtbl *v517;
  std::__shared_weak_count *v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  void *v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  int v543;
  unint64_t *v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  void *v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  _QWORD *v553;
  char *v554;
  char *v555;
  int64_t v556;
  unint64_t v557;
  uint64_t v558;
  unint64_t v559;
  char *v560;
  char *v561;
  char *v562;
  char *v563;
  unsigned __int8 *v564;
  uint64_t *v565;
  uint64_t v566;
  uint64_t v567;
  std::mutex *v568;
  uint64_t v569;
  uint64_t v570;
  char v571;
  std::string *v572;
  std::string *v573;
  uint64_t v574;
  std::string::size_type v575;
  std::string *v576;
  std::string::size_type v577;
  std::string::size_type v578;
  int v579;
  __n128 *v582;
  std::string *v583;
  size_t v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t v587;
  std::mutex *v588;
  uint64_t v589;
  uint64_t v590;
  char v591;
  std::string *v592;
  std::string *v593;
  uint64_t v594;
  std::string::size_type v595;
  std::string *v596;
  std::string::size_type v597;
  std::string::size_type v598;
  int v599;
  __n128 *v602;
  std::string *v603;
  size_t v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t v607;
  std::mutex *v608;
  uint64_t v609;
  uint64_t v610;
  char v611;
  std::string *v612;
  std::string *v613;
  uint64_t v614;
  std::string::size_type v615;
  std::string *v616;
  std::string::size_type v617;
  std::string::size_type v618;
  int v619;
  __n128 *v622;
  std::string *v623;
  size_t v624;
  uint64_t *v625;
  uint64_t v626;
  uint64_t v627;
  std::mutex *v628;
  uint64_t v629;
  uint64_t v630;
  char v631;
  std::string *v632;
  std::string *v633;
  uint64_t v634;
  std::string::size_type v635;
  std::string *v636;
  std::string::size_type v637;
  std::string::size_type v638;
  int v639;
  __n128 *v642;
  std::string *v643;
  size_t v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  std::mutex *v648;
  uint64_t v649;
  uint64_t v650;
  char v651;
  std::string *v652;
  std::string *v653;
  uint64_t v654;
  std::string::size_type v655;
  std::string *v656;
  std::string::size_type v657;
  std::string::size_type v658;
  int v659;
  __n128 *v662;
  std::string *v663;
  size_t v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t v667;
  std::mutex *v668;
  uint64_t v669;
  uint64_t v670;
  char v671;
  std::string *v672;
  std::string *v673;
  uint64_t v674;
  std::string::size_type v675;
  std::string *v676;
  std::string::size_type v677;
  std::string::size_type v678;
  int v679;
  __n128 *v682;
  std::string *v683;
  size_t v684;
  uint64_t *v685;
  uint64_t v686;
  uint64_t v687;
  std::mutex *v688;
  uint64_t v689;
  uint64_t v690;
  char v691;
  std::string *v692;
  std::string *v693;
  uint64_t v694;
  std::string::size_type v695;
  std::string *v696;
  std::string::size_type v697;
  std::string::size_type v698;
  int v699;
  __n128 *v702;
  std::string *v703;
  size_t v704;
  uint64_t *v705;
  uint64_t v706;
  uint64_t v707;
  std::mutex *v708;
  uint64_t v709;
  uint64_t v710;
  char v711;
  std::string *v712;
  std::string *v713;
  uint64_t v714;
  std::string::size_type v715;
  std::string *v716;
  std::string::size_type v717;
  std::string::size_type v718;
  int v719;
  __n128 *v722;
  std::string *v723;
  size_t v724;
  uint64_t *v725;
  uint64_t v726;
  uint64_t v727;
  std::mutex *v728;
  uint64_t v729;
  uint64_t v730;
  char v731;
  std::string *v732;
  std::string *v733;
  uint64_t v734;
  std::string::size_type v735;
  std::string *v736;
  std::string::size_type v737;
  std::string::size_type v738;
  int v739;
  __n128 *v742;
  std::string *v743;
  size_t v744;
  uint64_t *v745;
  uint64_t v746;
  uint64_t v747;
  std::mutex *v748;
  uint64_t v749;
  uint64_t v750;
  char v751;
  std::string *v752;
  std::string *v753;
  uint64_t v754;
  std::string::size_type v755;
  std::string *v756;
  std::string::size_type v757;
  std::string::size_type v758;
  int v759;
  __n128 *v762;
  std::string *v763;
  size_t v764;
  uint64_t *v765;
  uint64_t v766;
  uint64_t v767;
  std::mutex *v768;
  uint64_t v769;
  uint64_t v770;
  char v771;
  std::string *v772;
  std::string *v773;
  uint64_t v774;
  std::string::size_type v775;
  std::string *v776;
  std::string::size_type v777;
  std::string::size_type v778;
  int v779;
  __n128 *v782;
  std::string *v783;
  size_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  void *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  _QWORD *v793;
  unsigned __int8 v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unsigned int v801;
  int v802;
  int v803;
  int v804;
  __int128 v805;
  uint64_t v806;
  int v807;
  uint64_t v808;
  int v809;
  unint64_t v810;
  unint64_t v811;
  uint64_t v812;
  const char *v813;
  size_t v814;
  unsigned __int8 v815;
  unsigned __int8 v816;
  const char *v817;
  size_t v818;
  _BYTE *v819;
  uint64_t v820;
  uint64_t v821;
  _BYTE *v822;
  NSObject *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  double v833;
  uint64_t v834;
  size_t v835;
  std::__shared_weak_count_vtbl *v836;
  std::__shared_weak_count *v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  unint64_t v841;
  uint64_t v842;
  unsigned int v843;
  int v844;
  int v845;
  int v846;
  int v847;
  int v848;
  int v849;
  int v850;
  int v851;
  char *v852;
  uint64_t v853;
  const char *v854;
  void *v855;
  uint64_t v856;
  std::__shared_weak_count *v857;
  unint64_t *v858;
  unint64_t v859;
  std::__shared_weak_count *v860;
  unint64_t *v861;
  unint64_t v862;
  uint64_t v863;
  std::__shared_weak_count *v864;
  unint64_t *v865;
  unint64_t v866;
  std::__shared_weak_count *v867;
  unint64_t *v868;
  unint64_t v869;
  std::__shared_weak_count *v870;
  int v871;
  unint64_t *v872;
  unint64_t v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t v876;
  void *v877;
  std::__shared_weak_count *v878;
  unint64_t *v879;
  unint64_t v880;
  _QWORD *v881;
  uint64_t v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  unint64_t v889;
  std::chrono::steady_clock::time_point v890;
  _QWORD *v891;
  _QWORD *v892;
  const char *v893;
  int v894;
  uint64_t __dst;
  const char *v896;
  void *v897;
  void *v898;
  uint64_t v899;
  int v900;
  const char *v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  char *v905;
  int v906;
  uint64_t **v907;
  uint64_t v908;
  unsigned __int8 *v909;
  const char *v910;
  uint64_t v911;
  uint64_t *v912;
  uint64_t v913;
  _QWORD *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  int v921;
  int v922;
  uint64_t **v923;
  uint64_t *v924;
  uint64_t v925;
  void *v926;
  uint64_t *v927;
  _BYTE v928[12];
  uint64_t v929;
  void *v930[2];
  std::__shared_weak_count *v931;
  char *v932;
  std::__shared_weak_count *v933;
  void **v934;
  __int128 v935;
  std::string v936;
  int v937;
  const char *v938;
  int v939;
  const char *v940;
  uint64_t v941;
  std::__shared_weak_count *v942;
  void *v943[2];
  char *v944;
  char __s[40];
  unsigned int v946[4];
  _BYTE object[64];
  unsigned int v948;
  __int16 v949;
  int v950;
  __int16 v951;
  int v952;
  __int16 v953;
  int v954;
  __int16 v955;
  uint64_t v956;
  __int16 v957;
  int v958;
  __int16 v959;
  int v960;
  __int16 v961;
  int v962;
  __int16 v963;
  int v964;
  __int16 v965;
  int v966;
  __int16 v967;
  int v968;
  uint64_t v969;

  v969 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v890.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_22382FCB0(*(_QWORD **)(a1 + 1224), a2, (float32x4_t *)(a1 + 152), a3, (uint64_t)&v920);
  v912 = a3;
  v917 = a1;
  v6 = (uint64_t **)(a1 + 1824);
  v7 = v923;
  if (v923 != &v924)
  {
    v8 = (uint64_t *)(a1 + 1832);
    while (1)
    {
      v9 = *v8;
      if (*v8)
        break;
      v18 = 0;
      v12 = v8;
      v11 = (uint64_t ***)v8;
      v19 = v7[1];
      v20 = v19;
      v21 = v7;
      if (!v19)
        goto LABEL_51;
      do
      {
LABEL_48:
        v22 = (uint64_t **)v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
LABEL_53:
      if (!v18)
      {
        v23 = v7;
        if (v19)
        {
          do
          {
            v24 = (uint64_t **)v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v24 = (uint64_t **)v23[2];
            v40 = *v24 == (uint64_t *)v23;
            v23 = v24;
          }
          while (!v40);
        }
        if (v923 == v7)
          v923 = v24;
        --v925;
        sub_2231AFE60(v924, (uint64_t *)v7);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = v12;
        *v11 = v7;
        v25 = (uint64_t *)**v6;
        if (v25)
        {
          *v6 = v25;
          v7 = *v11;
        }
        sub_2231A9A8C(*(uint64_t **)(v917 + 1832), (uint64_t *)v7);
        ++*(_QWORD *)(v917 + 1840);
      }
      v7 = v22;
      if (v22 == &v924)
        goto LABEL_63;
    }
    v10 = *((unsigned __int8 *)v7 + 25);
    v11 = (uint64_t ***)v8;
    while (1)
    {
      v12 = (_QWORD *)v9;
      v13 = *(unsigned __int8 *)(v9 + 25);
      v14 = v10 >= v13;
      if (v10 != v13)
        break;
      v15 = *((unsigned __int8 *)v7 + 26);
      v13 = *((unsigned __int8 *)v12 + 26);
      v14 = v15 >= v13;
      if (v15 != v13)
        goto LABEL_37;
      v15 = *((unsigned __int8 *)v7 + 27);
      v13 = *((unsigned __int8 *)v12 + 27);
      v14 = v15 >= v13;
      if (v15 != v13)
        goto LABEL_37;
      v15 = *((unsigned __int8 *)v7 + 28);
      v13 = *((unsigned __int8 *)v12 + 28);
      v14 = v15 >= v13;
      if (v15 != v13)
        goto LABEL_37;
      v15 = *((unsigned __int8 *)v7 + 29);
      v13 = *((unsigned __int8 *)v12 + 29);
      v14 = v15 >= v13;
      if (v15 == v13
        && (v15 = *((unsigned __int8 *)v7 + 30), v13 = *((unsigned __int8 *)v12 + 30), v14 = v15 >= v13, v15 == v13))
      {
        v16 = *((unsigned __int8 *)v7 + 31);
        v17 = *((unsigned __int8 *)v12 + 31);
        if (v16 != v17)
          goto LABEL_24;
        v16 = *((unsigned __int8 *)v7 + 32);
        v17 = *((unsigned __int8 *)v12 + 32);
        if (v16 != v17)
          goto LABEL_24;
        v16 = *((unsigned __int8 *)v7 + 33);
        v17 = *((unsigned __int8 *)v12 + 33);
        if (v16 != v17)
          goto LABEL_24;
        v16 = *((unsigned __int8 *)v7 + 34);
        v17 = *((unsigned __int8 *)v12 + 34);
        if (v16 != v17)
          goto LABEL_24;
        v16 = *((unsigned __int8 *)v7 + 35);
        v17 = *((unsigned __int8 *)v12 + 35);
        if (v16 != v17)
          goto LABEL_24;
        v16 = *((unsigned __int8 *)v7 + 36);
        v17 = *((unsigned __int8 *)v12 + 36);
        if (v16 != v17)
          goto LABEL_24;
        v16 = *((unsigned __int8 *)v7 + 37);
        v17 = *((unsigned __int8 *)v12 + 37);
        if (v16 != v17
          || (v16 = *((unsigned __int8 *)v7 + 38), v17 = *((unsigned __int8 *)v12 + 38), v16 != v17)
          || (v16 = *((unsigned __int8 *)v7 + 39), v17 = *((unsigned __int8 *)v12 + 39), v16 != v17)
          || (v16 = *((unsigned __int8 *)v7 + 40), v17 = *((unsigned __int8 *)v12 + 40), v16 != v17))
        {
LABEL_24:
          if (v16 < v17)
            goto LABEL_7;
        }
        v13 = *((unsigned __int8 *)v12 + 31);
        v15 = *((unsigned __int8 *)v7 + 31);
        if (v13 == v15)
        {
          v13 = *((unsigned __int8 *)v12 + 32);
          v15 = *((unsigned __int8 *)v7 + 32);
          if (v13 == v15)
          {
            v13 = *((unsigned __int8 *)v12 + 33);
            v15 = *((unsigned __int8 *)v7 + 33);
            if (v13 == v15)
            {
              v13 = *((unsigned __int8 *)v12 + 34);
              v15 = *((unsigned __int8 *)v7 + 34);
              if (v13 == v15)
              {
                v13 = *((unsigned __int8 *)v12 + 35);
                v15 = *((unsigned __int8 *)v7 + 35);
                if (v13 == v15)
                {
                  v13 = *((unsigned __int8 *)v12 + 36);
                  v15 = *((unsigned __int8 *)v7 + 36);
                  if (v13 == v15)
                  {
                    v13 = *((unsigned __int8 *)v12 + 37);
                    v15 = *((unsigned __int8 *)v7 + 37);
                    if (v13 == v15)
                    {
                      v13 = *((unsigned __int8 *)v12 + 38);
                      v15 = *((unsigned __int8 *)v7 + 38);
                      if (v13 == v15)
                      {
                        v13 = *((unsigned __int8 *)v12 + 39);
                        v15 = *((unsigned __int8 *)v7 + 39);
                        if (v13 == v15)
                        {
                          v13 = *((unsigned __int8 *)v12 + 40);
                          v15 = *((unsigned __int8 *)v7 + 40);
                          if (v13 == v15)
                          {
                            v18 = v12;
                            v19 = v7[1];
                            v20 = v19;
                            v21 = v7;
                            if (v19)
                              goto LABEL_48;
                            do
                            {
LABEL_51:
                              v22 = (uint64_t **)v21[2];
                              v40 = *v22 == (uint64_t *)v21;
                              v21 = v22;
                            }
                            while (!v40);
                            goto LABEL_53;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_39:
        if (v13 >= v15)
        {
          v18 = v12;
          v19 = v7[1];
          v20 = v19;
          v21 = v7;
          if (v19)
            goto LABEL_48;
          goto LABEL_51;
        }
        v11 = (uint64_t ***)(v12 + 1);
        v9 = v12[1];
        if (!v9)
        {
          v18 = 0;
          v19 = v7[1];
          v20 = v19;
          v21 = v7;
          if (v19)
            goto LABEL_48;
          goto LABEL_51;
        }
      }
      else
      {
LABEL_37:
        if (v14)
          goto LABEL_39;
LABEL_7:
        v9 = *v12;
        v11 = (uint64_t ***)v12;
        if (!*v12)
        {
          v18 = 0;
          v11 = (uint64_t ***)v12;
          v19 = v7[1];
          v20 = v19;
          v21 = v7;
          if (!v19)
            goto LABEL_51;
          goto LABEL_48;
        }
      }
    }
    v15 = *((unsigned __int8 *)v7 + 25);
    goto LABEL_37;
  }
LABEL_63:
  v907 = v6;
  v26 = (uint64_t *)v926;
  v27 = v927;
  if (v926 != v927)
  {
    do
    {
      v28 = *v26;
      v29 = v26[1];
      if (sub_22321D244(v917 + 8, 32))
      {
        v30 = sub_223822434(*(_QWORD **)(v917 + 1224), v28, v29);
        if (!*((_BYTE *)v30 + 112)
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 985, (uint64_t)"kf.IsUsable()", 13, (uint64_t)"Updated list of keyframes must be valid", 39, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_2238B9C8C(*(_QWORD *)(v917 + 1632), v30, (__int128 *)v30 + 1, v912);
      }
      v26 += 2;
    }
    while (v26 != v27);
  }
  v31 = a2;
  v32 = (char *)a2[7];
  v914 = v31;
  v33 = (char *)v31[8];
  if (v32 == v33)
  {
    LODWORD(v34) = 0;
    v188 = v32;
    v35 = v917;
    goto LABEL_324;
  }
  v34 = 0;
  v35 = v917;
  v905 = (char *)v31[8];
  do
  {
    *(_OWORD *)v943 = *(_OWORD *)v32;
    v36 = *(_QWORD **)(v35 + 1224);
    *(_OWORD *)object = *(_OWORD *)v943;
    if (!sub_223340F28(v36, (uint64_t)object))
    {
      if (!*(_BYTE *)(v35 + 88) || !*(_BYTE *)(v35 + 80) || *(_BYTE *)(*(_QWORD *)(v35 + 1224) + 76) == 5)
      {
        sub_22384BB48(&v919);
        if (**(int **)(v919 + 56) > 2)
          goto LABEL_73;
        v37 = *(unsigned __int8 *)(v919 + 72);
        v38 = sub_22322F254(v919, "OSLogSurrogateAppender", 1, 0);
        v39 = v38;
        v40 = !v37 && v38 == 0;
        if (v40)
          goto LABEL_73;
        v936.__r_.__value_.__r.__words[0] = (std::string::size_type)&v919;
        v936.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v936.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v937 = 2;
        v938 = "unknown file";
        v939 = 1002;
        v940 = "unknown function";
        v941 = 0;
        v942 = 0;
        sub_2245664AC((unsigned __int8 *)v943, __s);
        v41 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
        v42 = (const char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
        v896 = v42;
        v899 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v42 = *(const char **)(v41 + 16);
          v43 = *(_QWORD *)(v41 + 24);
          v51 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v51 & 1) == 0)
          {
LABEL_312:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v930);
              sub_223199C58("com.apple.cv3d", (unint64_t)v930, byte_255788F40);
              if ((_BYTE)v932 && SHIBYTE(v931) < 0)
                operator delete(v930[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v43 = *(unsigned __int8 *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39);
          v44 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v44 & 1) == 0)
            goto LABEL_312;
        }
        if (byte_255788F40[23] >= 0)
          v52 = byte_255788F40;
        else
          v52 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v53 = byte_255788F40[23];
        else
          v53 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)object = os_log_create(v52, v42);
        if (v53 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v53 >= 0x17)
        {
          v55 = v34;
          v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v53 | 7) != 0x17)
            v56 = v53 | 7;
          v34 = v56 + 1;
          v54 = operator new(v56 + 1);
          *(_QWORD *)&object[24] = v34 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v54;
          *(_QWORD *)&object[16] = v53;
          LODWORD(v34) = v55;
        }
        else
        {
          object[31] = v53;
          v54 = &object[8];
          if (!v53)
          {
LABEL_107:
            v54[v53] = 0;
            object[32] = 1;
            if (v43 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v33 = v905;
            if (v43 >= 0x17)
            {
              v59 = v34;
              v60 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v43 | 7) != 0x17)
                v60 = v43 | 7;
              v34 = v60 + 1;
              v57 = operator new(v60 + 1);
              *(_QWORD *)&object[56] = v34 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v57;
              *(_QWORD *)&object[48] = v43;
              LODWORD(v34) = v59;
            }
            else
            {
              object[63] = v43;
              v57 = &object[40];
              if (!v43)
              {
                object[40] = 0;
                LOBYTE(v948) = 1;
                v58 = *(NSObject **)object;
                if ((object[63] & 0x80000000) == 0)
                  goto LABEL_111;
LABEL_117:
                operator delete(*(void **)&object[40]);
                if (object[32])
                  goto LABEL_118;
                goto LABEL_120;
              }
            }
            memmove(v57, v42, v43);
            v57[v43] = 0;
            LOBYTE(v948) = 1;
            v58 = *(NSObject **)object;
            if ((object[63] & 0x80000000) != 0)
              goto LABEL_117;
LABEL_111:
            if (object[32])
            {
LABEL_118:
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
            }
LABEL_120:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v39 && *(_QWORD *)(v39 + 24))
            {
              v61 = _os_log_pack_size();
              v62 = (std::__shared_weak_count_vtbl *)operator new(v61, (std::align_val_t)8uLL);
              v63 = (std::__shared_weak_count *)operator new();
              v63->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v63->__shared_owners_ = 0;
              v63->__shared_weak_owners_ = 0;
              v63[1].__vftable = v62;
              v930[0] = v62;
              v930[1] = v62;
              v931 = v63;
              v932 = 0;
              v933 = 0;
              v64 = strlen(__s);
              if (v64 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v65 = v64;
              if (v64 >= 0x17)
              {
                v68 = v34;
                v69 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v64 | 7) != 0x17)
                  v69 = v64 | 7;
                v34 = v69 + 1;
                v66 = (void **)operator new(v69 + 1);
                *(_QWORD *)&v935 = v65;
                *((_QWORD *)&v935 + 1) = v34 | 0x8000000000000000;
                v934 = v66;
                LODWORD(v34) = v68;
              }
              else
              {
                HIBYTE(v935) = v64;
                v66 = (void **)&v934;
                if (!v64)
                  goto LABEL_135;
              }
              memcpy(v66, __s, v65);
LABEL_135:
              *((_BYTE *)v66 + v65) = 0;
              v70 = v934;
              *(_QWORD *)v946 = v935;
              *(_QWORD *)((char *)&v946[1] + 3) = *(_QWORD *)((char *)&v935 + 7);
              v71 = HIBYTE(v935);
              v72 = operator new(0x38uLL);
              v72[1] = 0;
              v72[2] = 0;
              v72[3] = off_24EC1FA48;
              *v72 = &off_24EC1F9F8;
              v73 = *(_QWORD *)v946;
              v72[4] = v70;
              v72[5] = v73;
              *(_QWORD *)((char *)v72 + 47) = *(_QWORD *)((char *)&v946[1] + 3);
              *((_BYTE *)v72 + 55) = v71;
              memset(v946, 0, 15);
              v74 = v933;
              v932 = (char *)(v72 + 3);
              v933 = (std::__shared_weak_count *)v72;
              if (v74)
              {
                p_shared_owners = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(p_shared_owners);
                while (__stlxr(v76 - 1, p_shared_owners));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              *(_OWORD *)object = *(_OWORD *)v930;
              v77 = v932;
              *(_QWORD *)&object[16] = v931;
              if (v931)
              {
                v78 = (unint64_t *)&v931->__shared_owners_;
                do
                  v79 = __ldxr(v78);
                while (__stxr(v79 + 1, v78));
              }
              v80 = v933;
              *(_QWORD *)&object[24] = v77;
              *(_QWORD *)&object[32] = v933;
              if (v933)
              {
                v81 = (unint64_t *)&v933->__shared_owners_;
                do
                  v82 = __ldxr(v81);
                while (__stxr(v82 + 1, v81));
                *(_QWORD *)&object[40] = v77;
                do
                  v83 = __ldaxr(v81);
                while (__stlxr(v83 - 1, v81));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              else
              {
                *(_QWORD *)&object[40] = v77;
              }
              v84 = v931;
              if (v931)
              {
                v85 = (unint64_t *)&v931->__shared_owners_;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              v87 = *(_QWORD *)object;
              if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                v88 = *(_QWORD *)&object[40] + 8;
              else
                v88 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
              v89 = _os_log_pack_fill();
              *(_DWORD *)v89 = 136315138;
              *(_QWORD *)(v89 + 4) = v88;
              v90 = (char *)operator new();
              v91 = *(unsigned __int8 *)(v899 + 39);
              v92 = v896;
              if ((v91 & 0x80u) != 0)
              {
                v92 = *(const char **)(v899 + 16);
                v91 = *(_QWORD *)(v899 + 24);
              }
              *(_QWORD *)v90 = v87;
              *(_OWORD *)(v90 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v90 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_QWORD *)v90 + 5) = v92;
              *((_QWORD *)v90 + 6) = v91;
              v90[56] = 2;
              v934 = 0;
              v930[0] = v90;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v39 + 24) + 40))(*(_QWORD *)(v39 + 24), v930);
              v93 = v930[0];
              v930[0] = 0;
              if (v93)
              {
                v94 = (std::__shared_weak_count *)*((_QWORD *)v93 + 4);
                if (v94)
                {
                  v95 = (unint64_t *)&v94->__shared_owners_;
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }
                v97 = (std::__shared_weak_count *)*((_QWORD *)v93 + 2);
                if (v97)
                {
                  v98 = (unint64_t *)&v97->__shared_owners_;
                  do
                    v99 = __ldaxr(v98);
                  while (__stlxr(v99 - 1, v98));
                  if (!v99)
                  {
                    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                    std::__shared_weak_count::__release_weak(v97);
                  }
                }
                MEMORY[0x227684CE8](v93, 0x10F0C40B62ED6C6);
                v100 = v934;
                v934 = 0;
                if (v100)
                {
                  v101 = (std::__shared_weak_count *)v100[4];
                  if (v101)
                  {
                    v102 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  v104 = (std::__shared_weak_count *)v100[2];
                  if (v104)
                  {
                    v105 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  MEMORY[0x227684CE8](v100, 0x10F0C40B62ED6C6);
                }
              }
              v107 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v108 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                  v110 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                    goto LABEL_189;
                  goto LABEL_192;
                }
              }
              v110 = *(std::__shared_weak_count **)&object[16];
              if (!*(_QWORD *)&object[16])
                goto LABEL_192;
LABEL_189:
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (v112)
              {
LABEL_192:
                if (v37)
                  goto LABEL_193;
LABEL_194:
                sub_223182C08((uint64_t)&v936);
                v113 = v942;
                if (v942)
                {
                  v114 = (unint64_t *)&v942->__shared_owners_;
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
LABEL_73:
                v34 = (v34 + 1);
                v35 = v917;
                goto LABEL_74;
              }
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
              if (!v37)
                goto LABEL_194;
            }
            else
            {
              os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = __s;
              v67 = (void *)_os_log_send_and_compose_impl();
              if (!v67)
                goto LABEL_192;
              free(v67);
              if (!v37)
                goto LABEL_194;
            }
LABEL_193:
            sub_2245664AC((unsigned __int8 *)v943, object);
            sub_22322C138((uint64_t)&v936, "Unknown AU(%s)", object);
            sub_223182C08((uint64_t)&v936);
            goto LABEL_194;
          }
        }
        memmove(v54, v52, v53);
        goto LABEL_107;
      }
      sub_22384BA54(&v919);
      if (**(int **)(v919 + 56) <= 4)
      {
        v45 = *(unsigned __int8 *)(v919 + 72);
        v46 = sub_22322F254(v919, "OSLogSurrogateAppender", 1, 0);
        v47 = v46;
        if (v45 || v46)
        {
          v936.__r_.__value_.__r.__words[0] = (std::string::size_type)&v919;
          v936.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v936.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v937 = 4;
          v938 = "unknown file";
          v939 = 1000;
          v940 = "unknown function";
          v941 = 0;
          v942 = 0;
          sub_2245664AC((unsigned __int8 *)v943, __s);
          v900 = v45;
          v48 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
          if (*(char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v50 = *(const char **)(v48 + 16);
            v49 = *(_QWORD *)(v48 + 24);
          }
          else
          {
            v49 = *(unsigned __int8 *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39);
            v50 = (const char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
          }
          v897 = (void *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
          v116 = *v912;
          v117 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v930);
            sub_223199C58("com.apple.cv3d", (unint64_t)v930, byte_255788F40);
            if ((_BYTE)v932 && SHIBYTE(v931) < 0)
              operator delete(v930[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F40[23] >= 0)
            v118 = byte_255788F40;
          else
            v118 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v119 = byte_255788F40[23];
          else
            v119 = *(_QWORD *)&byte_255788F40[8];
          *(_QWORD *)object = os_log_create(v118, v50);
          if (v119 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v119 >= 0x17)
          {
            v121 = v34;
            v122 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v119 | 7) != 0x17)
              v122 = v119 | 7;
            v123 = v122 + 1;
            v120 = operator new(v122 + 1);
            *(_QWORD *)&object[24] = v123 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v120;
            *(_QWORD *)&object[16] = v119;
            v34 = v121;
          }
          else
          {
            object[31] = v119;
            v120 = &object[8];
            if (!v119)
            {
LABEL_219:
              v120[v119] = 0;
              object[32] = 1;
              if (v49 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v33 = v905;
              if (v49 >= 0x17)
              {
                v126 = v34;
                v127 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v49 | 7) != 0x17)
                  v127 = v49 | 7;
                v128 = v127 + 1;
                v124 = operator new(v127 + 1);
                *(_QWORD *)&object[56] = v128 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v124;
                *(_QWORD *)&object[48] = v49;
                v34 = v126;
              }
              else
              {
                object[63] = v49;
                v124 = &object[40];
                if (!v49)
                {
                  object[40] = 0;
                  LOBYTE(v948) = 1;
                  v125 = *(NSObject **)object;
                  if ((object[63] & 0x80000000) == 0)
                    goto LABEL_223;
                  goto LABEL_229;
                }
              }
              memmove(v124, v50, v49);
              v124[v49] = 0;
              LOBYTE(v948) = 1;
              v125 = *(NSObject **)object;
              if ((object[63] & 0x80000000) == 0)
              {
LABEL_223:
                if (!object[32])
                  goto LABEL_232;
                goto LABEL_230;
              }
LABEL_229:
              operator delete(*(void **)&object[40]);
              if (!object[32])
                goto LABEL_232;
LABEL_230:
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
LABEL_232:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              v129 = (double)v116 / 1000000000.0;
              if (!v47 || !*(_QWORD *)(v47 + 24))
              {
                os_log_type_enabled(v125, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315394;
                *(_QWORD *)&object[4] = __s;
                *(_WORD *)&object[12] = 2048;
                *(double *)&object[14] = v129;
                v136 = (void *)_os_log_send_and_compose_impl();
                v35 = v917;
                v137 = v912;
                v138 = v900;
                if (v136)
                  free(v136);
                goto LABEL_305;
              }
              v130 = _os_log_pack_size();
              v131 = (std::__shared_weak_count_vtbl *)operator new(v130, (std::align_val_t)8uLL);
              v132 = (std::__shared_weak_count *)operator new();
              v132->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v132->__shared_owners_ = 0;
              v132->__shared_weak_owners_ = 0;
              v132[1].__vftable = v131;
              v930[0] = v131;
              v930[1] = v131;
              v931 = v132;
              v932 = 0;
              v933 = 0;
              v133 = strlen(__s);
              if (v133 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v134 = v133;
              if (v133 >= 0x17)
              {
                v139 = v34;
                v140 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v133 | 7) != 0x17)
                  v140 = v133 | 7;
                v141 = v140 + 1;
                v135 = (void **)operator new(v140 + 1);
                *(_QWORD *)&v935 = v134;
                *((_QWORD *)&v935 + 1) = v141 | 0x8000000000000000;
                v934 = v135;
                v34 = v139;
              }
              else
              {
                HIBYTE(v935) = v133;
                v135 = (void **)&v934;
                if (!v133)
                {
LABEL_246:
                  *((_BYTE *)v135 + v134) = 0;
                  v142 = v934;
                  *(_QWORD *)v946 = v935;
                  *(_QWORD *)((char *)&v946[1] + 3) = *(_QWORD *)((char *)&v935 + 7);
                  v143 = HIBYTE(v935);
                  v144 = operator new(0x38uLL);
                  v144[1] = 0;
                  v144[2] = 0;
                  v144[3] = off_24EC36038;
                  *v144 = &off_24EC35FE8;
                  v145 = *(_QWORD *)v946;
                  v144[4] = v142;
                  v144[5] = v145;
                  *(_QWORD *)((char *)v144 + 47) = *(_QWORD *)((char *)&v946[1] + 3);
                  *((_BYTE *)v144 + 55) = v143;
                  memset(v946, 0, 15);
                  v146 = v933;
                  v932 = (char *)(v144 + 3);
                  v933 = (std::__shared_weak_count *)v144;
                  if (v146)
                  {
                    v147 = (unint64_t *)&v146->__shared_owners_;
                    do
                      v148 = __ldaxr(v147);
                    while (__stlxr(v148 - 1, v147));
                    if (!v148)
                    {
                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                      std::__shared_weak_count::__release_weak(v146);
                    }
                  }
                  *(_OWORD *)object = *(_OWORD *)v930;
                  v149 = v932;
                  *(_QWORD *)&object[16] = v931;
                  if (v931)
                  {
                    v150 = (unint64_t *)&v931->__shared_owners_;
                    do
                      v151 = __ldxr(v150);
                    while (__stxr(v151 + 1, v150));
                  }
                  v152 = v933;
                  *(_QWORD *)&object[24] = v149;
                  *(_QWORD *)&object[32] = v933;
                  if (v933)
                  {
                    v153 = (unint64_t *)&v933->__shared_owners_;
                    do
                      v154 = __ldxr(v153);
                    while (__stxr(v154 + 1, v153));
                    *(_QWORD *)&object[40] = v149;
                    do
                      v155 = __ldaxr(v153);
                    while (__stlxr(v155 - 1, v153));
                    if (!v155)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&object[40] = v149;
                  }
                  v156 = v931;
                  if (v931)
                  {
                    v157 = (unint64_t *)&v931->__shared_owners_;
                    do
                      v158 = __ldaxr(v157);
                    while (__stlxr(v158 - 1, v157));
                    if (!v158)
                    {
                      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                      std::__shared_weak_count::__release_weak(v156);
                    }
                  }
                  v159 = *(_QWORD *)object;
                  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                    v160 = *(_QWORD *)&object[40] + 8;
                  else
                    v160 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                  v161 = _os_log_pack_fill();
                  *(_DWORD *)v161 = 136315394;
                  *(_QWORD *)(v161 + 4) = v160;
                  *(_WORD *)(v161 + 12) = 2048;
                  *(double *)(v161 + 14) = v129;
                  v162 = (char *)operator new();
                  v163 = *(unsigned __int8 *)(v48 + 39);
                  v164 = v897;
                  if ((v163 & 0x80u) != 0)
                  {
                    v164 = *(void **)(v48 + 16);
                    v163 = *(_QWORD *)(v48 + 24);
                  }
                  *(_QWORD *)v162 = v159;
                  *(_OWORD *)(v162 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v162 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v162 + 5) = v164;
                  *((_QWORD *)v162 + 6) = v163;
                  v162[56] = 16;
                  v934 = 0;
                  v930[0] = v162;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), v930);
                  v165 = v930[0];
                  v930[0] = 0;
                  v35 = v917;
                  v137 = v912;
                  if (v165)
                  {
                    v166 = (std::__shared_weak_count *)*((_QWORD *)v165 + 4);
                    if (v166)
                    {
                      v167 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v168 = __ldaxr(v167);
                      while (__stlxr(v168 - 1, v167));
                      if (!v168)
                      {
                        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                        std::__shared_weak_count::__release_weak(v166);
                      }
                    }
                    v169 = (std::__shared_weak_count *)*((_QWORD *)v165 + 2);
                    if (v169)
                    {
                      v170 = (unint64_t *)&v169->__shared_owners_;
                      do
                        v171 = __ldaxr(v170);
                      while (__stlxr(v171 - 1, v170));
                      if (!v171)
                      {
                        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                        std::__shared_weak_count::__release_weak(v169);
                      }
                    }
                    MEMORY[0x227684CE8](v165, 0x10F0C40B62ED6C6);
                    v172 = v934;
                    v934 = 0;
                    if (v172)
                    {
                      v173 = (std::__shared_weak_count *)v172[4];
                      if (v173)
                      {
                        v174 = (unint64_t *)&v173->__shared_owners_;
                        do
                          v175 = __ldaxr(v174);
                        while (__stlxr(v175 - 1, v174));
                        if (!v175)
                        {
                          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                          std::__shared_weak_count::__release_weak(v173);
                        }
                      }
                      v176 = (std::__shared_weak_count *)v172[2];
                      if (v176)
                      {
                        v177 = (unint64_t *)&v176->__shared_owners_;
                        do
                          v178 = __ldaxr(v177);
                        while (__stlxr(v178 - 1, v177));
                        if (!v178)
                        {
                          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                          std::__shared_weak_count::__release_weak(v176);
                        }
                      }
                      MEMORY[0x227684CE8](v172, 0x10F0C40B62ED6C6);
                    }
                  }
                  v179 = *(std::__shared_weak_count **)&object[32];
                  v138 = v900;
                  if (*(_QWORD *)&object[32])
                  {
                    v180 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v181 = __ldaxr(v180);
                    while (__stlxr(v181 - 1, v180));
                    if (!v181)
                    {
                      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                      std::__shared_weak_count::__release_weak(v179);
                    }
                  }
                  v182 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v183 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v184 = __ldaxr(v183);
                    while (__stlxr(v184 - 1, v183));
                    if (!v184)
                    {
                      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                      std::__shared_weak_count::__release_weak(v182);
                    }
                  }
LABEL_305:
                  if (v138)
                  {
                    sub_2245664AC((unsigned __int8 *)v943, object);
                    sub_22322C138((uint64_t)&v936, "Received SLAM's relocalized anchor update(%s) prior to kfd loading at time %lf. Possible loss of data.", object, (double)*v137 / 1000000000.0);
                    sub_223182C08((uint64_t)&v936);
                  }
                  sub_223182C08((uint64_t)&v936);
                  v185 = v942;
                  if (v942)
                  {
                    v186 = (unint64_t *)&v942->__shared_owners_;
                    do
                      v187 = __ldaxr(v186);
                    while (__stlxr(v187 - 1, v186));
                    if (!v187)
                    {
                      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                      std::__shared_weak_count::__release_weak(v185);
                    }
                  }
                  goto LABEL_74;
                }
              }
              memcpy(v135, __s, v134);
              goto LABEL_246;
            }
          }
          memmove(v120, v118, v119);
          goto LABEL_219;
        }
      }
    }
LABEL_74:
    v32 += 16;
  }
  while (v32 != v33);
  v32 = (char *)v914[7];
  v188 = (char *)v914[8];
LABEL_324:
  v906 = v34;
  v189 = v914;
  if ((unint64_t)(v188 - v32) > 0x40 && *(_BYTE *)(v35 + 610))
  {
    v190 = *(uint64_t **)(*(_QWORD *)(v35 + 1224) + 16);
    if (v190)
    {
      while (*((_BYTE *)v190 + 144) != 1)
      {
        v190 = (uint64_t *)*v190;
        if (!v190)
          goto LABEL_329;
      }
      v944 = 0;
      v943[1] = 0;
      v943[0] = &v943[1];
LABEL_598:
      *(_OWORD *)object = *((_OWORD *)v190 + 2);
      v337 = sub_223426D4C(v943, (uint64_t *)&v943[1], (unsigned __int8 **)&v936, (uint64_t *)v930, object);
      if (!*(_QWORD *)v337)
      {
        v338 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v338 + 25) = *(_OWORD *)object;
        v339 = v936.__r_.__value_.__r.__words[0];
        *(_QWORD *)v338 = 0;
        *((_QWORD *)v338 + 1) = 0;
        *((_QWORD *)v338 + 2) = v339;
        *(_QWORD *)v337 = v338;
        if (*(_QWORD *)v943[0])
        {
          v943[0] = *(void **)v943[0];
          v338 = *(char **)v337;
        }
        sub_2231A9A8C((uint64_t *)v943[1], (uint64_t *)v338);
        ++v944;
      }
      while (1)
      {
        v190 = (uint64_t *)*v190;
        if (!v190)
          break;
        if (*((_BYTE *)v190 + 144) == 1)
          goto LABEL_598;
      }
    }
    else
    {
LABEL_329:
      v944 = 0;
      v943[1] = 0;
      v943[0] = &v943[1];
    }
    v191 = (unint64_t)v944;
    v192 = (unsigned __int8 *)v914[7];
    v193 = (unsigned __int8 *)v914[8];
    if (v192 == v193)
    {
      v194 = (unint64_t)v944;
      v35 = v917;
      if (!v944)
        goto LABEL_695;
LABEL_434:
      if ((float)((float)v191 * 0.1) < (float)v194)
        goto LABEL_695;
      *(_QWORD *)object = "cv3d.recon.";
      *(_QWORD *)&object[8] = 11;
      *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
      *(_QWORD *)&object[24] = 27;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v240 = sub_2241471F8();
        v241 = v240[2];
        if (!v241)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v241 = v240[2];
        }
        v242 = *(_QWORD *)(v241 + 64);
        v243 = (std::mutex *)(v242 + 32);
        std::mutex::lock((std::mutex *)(v242 + 32));
        v245 = *(_QWORD *)(v242 + 96);
        v244 = *(_QWORD *)(v242 + 104);
        std::mutex::unlock(v243);
        v40 = v245 == v244;
        v35 = v917;
        if (!v40)
        {
          v246 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
          v247 = (std::string *)v936.__r_.__value_.__r.__words[0];
          sub_2241471F8();
          v248 = v246 >= 0 ? &v936 : v247;
          v249 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v248);
          v35 = v917;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v249 + 24))(v249))
          {
            memset(object, 0, 32);
            *(_DWORD *)&object[32] = 728325608;
            kdebug_trace();
            v930[0] = v944;
            sub_223197768((double *)&qword_255788F20, v249, (uint64_t *)v930, "not_in_slam");
            sub_2231874DC((uint64_t)object);
          }
        }
      }
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 728325624;
      kdebug_trace();
      size = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v936.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        v251 = &v936;
        if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v251 = (std::string *)v936.__r_.__value_.__r.__words[0];
        v252 = v251->__r_.__value_.__r.__words[0];
        v253 = v251->__r_.__value_.__l.__size_;
        v254 = v251->__r_.__value_.__s.__data_[16];
        if (v252 == 0x6365722E64337663 && v253 == 0x73746174532E6E6FLL && v254 == 46)
        {
          v257 = sub_223187510();
          if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v258 = &v936;
          else
            v258 = (std::string *)v936.__r_.__value_.__r.__words[0];
          if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v259 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
          else
            v259 = v936.__r_.__value_.__l.__size_;
          v930[0] = v944;
          sub_22318760C((uint64_t *)v257, v258, v259, (uint64_t *)v930, (uint64_t)"not_in_slam", 11);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v936.__r_.__value_.__l.__data_);
      v260 = (void **)v943[0];
      if (v943[0] != &v943[1])
      {
        while (2)
        {
          sub_22384BA54(&v919);
          v909 = (unsigned __int8 *)v260 + 25;
          if (**(int **)(v919 + 56) > 4)
            goto LABEL_586;
          v261 = *(unsigned __int8 *)(v919 + 72);
          v262 = sub_22322F254(v919, "OSLogSurrogateAppender", 1, 0);
          v263 = v262;
          if (!v261 && v262 == 0)
            goto LABEL_586;
          v936.__r_.__value_.__r.__words[0] = (std::string::size_type)&v919;
          v936.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v936.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v937 = 4;
          v938 = "unknown file";
          v939 = 1034;
          v940 = "unknown function";
          v941 = 0;
          v942 = 0;
          sub_2245664AC(v909, __s);
          v265 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
          v266 = (const char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
          v901 = v266;
          if (*(char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v266 = *(const char **)(v265 + 16);
            v267 = *(_QWORD *)(v265 + 24);
            v903 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
            v269 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v269 & 1) == 0)
            {
LABEL_592:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v930);
                sub_223199C58("com.apple.cv3d", (unint64_t)v930, byte_255788F40);
                if ((_BYTE)v932 && SHIBYTE(v931) < 0)
                  operator delete(v930[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
            }
          }
          else
          {
            v267 = *(unsigned __int8 *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39);
            v903 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
            v268 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v268 & 1) == 0)
              goto LABEL_592;
          }
          if (byte_255788F40[23] >= 0)
            v270 = byte_255788F40;
          else
            v270 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v271 = byte_255788F40[23];
          else
            v271 = *(_QWORD *)&byte_255788F40[8];
          *(_QWORD *)object = os_log_create(v270, v266);
          if (v271 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v271 >= 0x17)
          {
            v273 = (v271 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v271 | 7) != 0x17)
              v273 = v271 | 7;
            v274 = v273 + 1;
            v272 = operator new(v273 + 1);
            *(_QWORD *)&object[24] = v274 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v272;
            *(_QWORD *)&object[16] = v271;
          }
          else
          {
            object[31] = v271;
            v272 = &object[8];
            if (!v271)
            {
LABEL_493:
              v272[v271] = 0;
              object[32] = 1;
              if (v267 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              LODWORD(v34) = v906;
              if (v267 >= 0x17)
              {
                v277 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v267 | 7) != 0x17)
                  v277 = v267 | 7;
                v278 = v277 + 1;
                v275 = operator new(v277 + 1);
                *(_QWORD *)&object[56] = v278 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v275;
                *(_QWORD *)&object[48] = v267;
              }
              else
              {
                object[63] = v267;
                v275 = &object[40];
                if (!v267)
                {
                  object[40] = 0;
                  LOBYTE(v948) = 1;
                  v276 = *(NSObject **)object;
                  if ((object[63] & 0x80000000) == 0)
                    goto LABEL_497;
LABEL_503:
                  operator delete(*(void **)&object[40]);
                  if (object[32])
                    goto LABEL_504;
                  goto LABEL_506;
                }
              }
              memmove(v275, v266, v267);
              v275[v267] = 0;
              LOBYTE(v948) = 1;
              v276 = *(NSObject **)object;
              if ((object[63] & 0x80000000) != 0)
                goto LABEL_503;
LABEL_497:
              if (object[32])
              {
LABEL_504:
                if ((object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_506:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v263 && *(_QWORD *)(v263 + 24))
              {
                v279 = _os_log_pack_size();
                v280 = (std::__shared_weak_count_vtbl *)operator new(v279, (std::align_val_t)8uLL);
                v281 = (std::__shared_weak_count *)operator new();
                v281->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v281->__shared_owners_ = 0;
                v281->__shared_weak_owners_ = 0;
                v281[1].__vftable = v280;
                v930[0] = v280;
                v930[1] = v280;
                v931 = v281;
                v932 = 0;
                v933 = 0;
                v282 = strlen(__s);
                if (v282 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v283 = v282;
                if (v282 >= 0x17)
                {
                  v286 = (v282 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v282 | 7) != 0x17)
                    v286 = v282 | 7;
                  v287 = v286 + 1;
                  v284 = (void **)operator new(v286 + 1);
                  *(_QWORD *)&v935 = v283;
                  *((_QWORD *)&v935 + 1) = v287 | 0x8000000000000000;
                  v934 = v284;
                }
                else
                {
                  HIBYTE(v935) = v282;
                  v284 = (void **)&v934;
                  if (!v282)
                    goto LABEL_520;
                }
                memcpy(v284, __s, v283);
LABEL_520:
                *((_BYTE *)v284 + v283) = 0;
                v288 = v934;
                *(_QWORD *)v946 = v935;
                *(_QWORD *)((char *)&v946[1] + 3) = *(_QWORD *)((char *)&v935 + 7);
                v289 = HIBYTE(v935);
                v290 = operator new(0x38uLL);
                v290[1] = 0;
                v290[2] = 0;
                v290[3] = off_24EC1FA48;
                *v290 = &off_24EC1F9F8;
                v291 = *(_QWORD *)v946;
                v290[4] = v288;
                v290[5] = v291;
                *(_QWORD *)((char *)v290 + 47) = *(_QWORD *)((char *)&v946[1] + 3);
                *((_BYTE *)v290 + 55) = v289;
                memset(v946, 0, 15);
                v292 = v933;
                v932 = (char *)(v290 + 3);
                v933 = (std::__shared_weak_count *)v290;
                if (v292)
                {
                  v293 = (unint64_t *)&v292->__shared_owners_;
                  do
                    v294 = __ldaxr(v293);
                  while (__stlxr(v294 - 1, v293));
                  if (!v294)
                  {
                    ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                    std::__shared_weak_count::__release_weak(v292);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v930;
                v295 = v932;
                *(_QWORD *)&object[16] = v931;
                if (v931)
                {
                  v296 = (unint64_t *)&v931->__shared_owners_;
                  do
                    v297 = __ldxr(v296);
                  while (__stxr(v297 + 1, v296));
                }
                v298 = v933;
                *(_QWORD *)&object[24] = v295;
                *(_QWORD *)&object[32] = v933;
                if (v933)
                {
                  v299 = (unint64_t *)&v933->__shared_owners_;
                  do
                    v300 = __ldxr(v299);
                  while (__stxr(v300 + 1, v299));
                  *(_QWORD *)&object[40] = v295;
                  do
                    v301 = __ldaxr(v299);
                  while (__stlxr(v301 - 1, v299));
                  if (!v301)
                  {
                    ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                    std::__shared_weak_count::__release_weak(v298);
                  }
                }
                else
                {
                  *(_QWORD *)&object[40] = v295;
                }
                v302 = v931;
                if (v931)
                {
                  v303 = (unint64_t *)&v931->__shared_owners_;
                  do
                    v304 = __ldaxr(v303);
                  while (__stlxr(v304 - 1, v303));
                  if (!v304)
                  {
                    ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                    std::__shared_weak_count::__release_weak(v302);
                  }
                }
                v305 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                  v306 = *(_QWORD *)&object[40] + 8;
                else
                  v306 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                v307 = _os_log_pack_fill();
                *(_DWORD *)v307 = 136315138;
                *(_QWORD *)(v307 + 4) = v306;
                v308 = (char *)operator new();
                v309 = *(unsigned __int8 *)(v903 + 39);
                v310 = v901;
                if ((v309 & 0x80u) != 0)
                {
                  v310 = *(const char **)(v903 + 16);
                  v309 = *(_QWORD *)(v903 + 24);
                }
                *(_QWORD *)v308 = v305;
                *(_OWORD *)(v308 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v308 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *((_QWORD *)v308 + 5) = v310;
                *((_QWORD *)v308 + 6) = v309;
                v308[56] = 16;
                v934 = 0;
                v930[0] = v308;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v263 + 24) + 40))(*(_QWORD *)(v263 + 24), v930);
                v311 = v930[0];
                v930[0] = 0;
                if (v311)
                {
                  v312 = (std::__shared_weak_count *)*((_QWORD *)v311 + 4);
                  if (v312)
                  {
                    v313 = (unint64_t *)&v312->__shared_owners_;
                    do
                      v314 = __ldaxr(v313);
                    while (__stlxr(v314 - 1, v313));
                    if (!v314)
                    {
                      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                      std::__shared_weak_count::__release_weak(v312);
                    }
                  }
                  v315 = (std::__shared_weak_count *)*((_QWORD *)v311 + 2);
                  if (v315)
                  {
                    v316 = (unint64_t *)&v315->__shared_owners_;
                    do
                      v317 = __ldaxr(v316);
                    while (__stlxr(v317 - 1, v316));
                    if (!v317)
                    {
                      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                      std::__shared_weak_count::__release_weak(v315);
                    }
                  }
                  MEMORY[0x227684CE8](v311, 0x10F0C40B62ED6C6);
                  v318 = v934;
                  v934 = 0;
                  if (v318)
                  {
                    v319 = (std::__shared_weak_count *)v318[4];
                    if (v319)
                    {
                      v320 = (unint64_t *)&v319->__shared_owners_;
                      do
                        v321 = __ldaxr(v320);
                      while (__stlxr(v321 - 1, v320));
                      if (!v321)
                      {
                        ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                        std::__shared_weak_count::__release_weak(v319);
                      }
                    }
                    v322 = (std::__shared_weak_count *)v318[2];
                    if (v322)
                    {
                      v323 = (unint64_t *)&v322->__shared_owners_;
                      do
                        v324 = __ldaxr(v323);
                      while (__stlxr(v324 - 1, v323));
                      if (!v324)
                      {
                        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                        std::__shared_weak_count::__release_weak(v322);
                      }
                    }
                    MEMORY[0x227684CE8](v318, 0x10F0C40B62ED6C6);
                  }
                }
                v325 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v326 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v327 = __ldaxr(v326);
                  while (__stlxr(v327 - 1, v326));
                  if (!v327)
                  {
                    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                    std::__shared_weak_count::__release_weak(v325);
                  }
                }
                v328 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v329 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v330 = __ldaxr(v329);
                  while (__stlxr(v330 - 1, v329));
                  if (!v330)
                  {
                    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                    std::__shared_weak_count::__release_weak(v328);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v276, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315138;
                *(_QWORD *)&object[4] = __s;
                v285 = (void *)_os_log_send_and_compose_impl();
                if (v285)
                  free(v285);
              }
              if (v261)
              {
                sub_2245664AC(v909, object);
                sub_22322C138((uint64_t)&v936, "Removing keyframe not known by SLAM: %s", object);
                sub_223182C08((uint64_t)&v936);
              }
              sub_223182C08((uint64_t)&v936);
              v331 = v942;
              if (v942)
              {
                v332 = (unint64_t *)&v942->__shared_owners_;
                do
                  v333 = __ldaxr(v332);
                while (__stlxr(v333 - 1, v332));
                if (!v333)
                {
                  ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                  std::__shared_weak_count::__release_weak(v331);
                }
              }
LABEL_586:
              v35 = v917;
              v334 = sub_223822434(*(_QWORD **)(v917 + 1224), *(uint64_t *)((char *)v260 + 25), *(uint64_t *)((char *)v260 + 33));
              *((_WORD *)v334 + 56) = 0x2000;
              *((_BYTE *)v334 + 114) = 0;
              sub_2231A9984(v907, v909, v909);
              ++v921;
              v335 = (void **)v260[1];
              if (v335)
              {
                do
                {
                  v336 = v335;
                  v335 = (void **)*v335;
                }
                while (v335);
              }
              else
              {
                do
                {
                  v336 = (void **)v260[2];
                  v40 = *v336 == v260;
                  v260 = v336;
                }
                while (!v40);
              }
              v260 = v336;
              v189 = v914;
              if (v336 == &v943[1])
                goto LABEL_605;
              continue;
            }
          }
          break;
        }
        memmove(v272, v270, v271);
        goto LABEL_493;
      }
LABEL_605:
      sub_22384BA54(&v934);
      if (*(int *)v934[7] <= 3)
      {
        v340 = *((unsigned __int8 *)v934 + 72);
        v341 = sub_22322F254((uint64_t)v934, "OSLogSurrogateAppender", 1, 0);
        v342 = v341;
        if (v340 || v341 != 0)
        {
          v936.__r_.__value_.__r.__words[0] = (std::string::size_type)&v934;
          v936.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v936.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v937 = 3;
          v938 = "unknown file";
          v939 = 1040;
          v942 = 0;
          v940 = "unknown function";
          v941 = 0;
          v344 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
          v345 = (const char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
          v910 = v345;
          if (*(char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v345 = *(const char **)(v344 + 16);
            v346 = *(_QWORD *)(v344 + 24);
          }
          else
          {
            v346 = *(unsigned __int8 *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39);
          }
          v347 = *v912;
          v348 = v944;
          v349 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v349 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)object);
            sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
            LODWORD(v34) = v906;
          }
          if (byte_255788F40[23] >= 0)
            v350 = byte_255788F40[23];
          else
            v350 = *(_QWORD *)&byte_255788F40[8];
          if (byte_255788F40[23] >= 0)
            v351 = byte_255788F40;
          else
            v351 = *(const char **)byte_255788F40;
          *(_QWORD *)object = os_log_create(v351, v345);
          v352 = &object[8];
          if (v350 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v350 >= 0x17)
          {
            v353 = (v350 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v350 | 7) != 0x17)
              v353 = v350 | 7;
            v34 = v353 + 1;
            v352 = operator new(v353 + 1);
            *(_QWORD *)&object[24] = v34 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v352;
            *(_QWORD *)&object[16] = v350;
            LODWORD(v34) = v906;
          }
          else
          {
            object[31] = v350;
            if (!v350)
            {
LABEL_628:
              v352[v350] = 0;
              object[32] = 1;
              v354 = &object[40];
              if (v346 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v346 >= 0x17)
              {
                v355 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v346 | 7) != 0x17)
                  v355 = v346 | 7;
                v34 = v355 + 1;
                v354 = operator new(v355 + 1);
                *(_QWORD *)&object[56] = v34 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v354;
                *(_QWORD *)&object[48] = v346;
                LODWORD(v34) = v906;
              }
              else
              {
                object[63] = v346;
                if (!v346)
                {
LABEL_636:
                  v354[v346] = 0;
                  LOBYTE(v948) = 1;
                  v356 = *(NSObject **)object;
                  if ((object[63] & 0x80000000) != 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  v357 = (double)v347 / 1000000000.0;
                  if (v342 && *(_QWORD *)(v342 + 24))
                  {
                    v358 = _os_log_pack_size();
                    v359 = (std::__shared_weak_count_vtbl *)operator new(v358, (std::align_val_t)8uLL);
                    v360 = (std::__shared_weak_count *)operator new();
                    v361 = v360;
                    v360->__shared_owners_ = 0;
                    v362 = (unint64_t *)&v360->__shared_owners_;
                    v360->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v360->__shared_weak_owners_ = 0;
                    v360[1].__vftable = v359;
                    *(_QWORD *)object = v359;
                    *(_QWORD *)&object[8] = v359;
                    *(_QWORD *)&object[16] = v360;
                    do
                      v363 = __ldxr(v362);
                    while (__stxr(v363 + 1, v362));
                    memset(&object[24], 0, 24);
                    do
                      v364 = __ldaxr(v362);
                    while (__stlxr(v364 - 1, v362));
                    if (!v364)
                    {
                      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                      std::__shared_weak_count::__release_weak(v361);
                    }
                    v365 = *(_QWORD *)object;
                    v366 = _os_log_pack_fill();
                    *(_DWORD *)v366 = 134218240;
                    *(double *)(v366 + 4) = v357;
                    *(_WORD *)(v366 + 12) = 2048;
                    *(_QWORD *)(v366 + 14) = v348;
                    v367 = (char *)operator new();
                    v368 = *(unsigned __int8 *)(v344 + 39);
                    v369 = v910;
                    if ((v368 & 0x80u) != 0)
                    {
                      v369 = *(const char **)(v344 + 16);
                      v368 = *(_QWORD *)(v344 + 24);
                    }
                    *(_QWORD *)v367 = v365;
                    *(_OWORD *)(v367 + 8) = *(_OWORD *)&object[8];
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v367 + 24) = *(_OWORD *)&object[24];
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    *((_QWORD *)v367 + 5) = v369;
                    *((_QWORD *)v367 + 6) = v368;
                    v367[56] = 1;
                    *(_QWORD *)__s = 0;
                    v930[0] = v367;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v342 + 24) + 40))(*(_QWORD *)(v342 + 24), v930);
                    v189 = v914;
                    v370 = v930[0];
                    v930[0] = 0;
                    LODWORD(v34) = v906;
                    v35 = v917;
                    v371 = v912;
                    if (v370)
                    {
                      v372 = (std::__shared_weak_count *)*((_QWORD *)v370 + 4);
                      if (v372)
                      {
                        v373 = (unint64_t *)&v372->__shared_owners_;
                        do
                          v374 = __ldaxr(v373);
                        while (__stlxr(v374 - 1, v373));
                        if (!v374)
                        {
                          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                          std::__shared_weak_count::__release_weak(v372);
                        }
                      }
                      v375 = (std::__shared_weak_count *)*((_QWORD *)v370 + 2);
                      if (v375)
                      {
                        v376 = (unint64_t *)&v375->__shared_owners_;
                        do
                          v377 = __ldaxr(v376);
                        while (__stlxr(v377 - 1, v376));
                        if (!v377)
                        {
                          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                          std::__shared_weak_count::__release_weak(v375);
                        }
                      }
                      MEMORY[0x227684CE8](v370, 0x10F0C40B62ED6C6);
                      v378 = *(_QWORD *)__s;
                      *(_QWORD *)__s = 0;
                      if (v378)
                      {
                        v379 = *(std::__shared_weak_count **)(v378 + 32);
                        if (v379)
                        {
                          v380 = (unint64_t *)&v379->__shared_owners_;
                          do
                            v381 = __ldaxr(v380);
                          while (__stlxr(v381 - 1, v380));
                          if (!v381)
                          {
                            ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                            std::__shared_weak_count::__release_weak(v379);
                          }
                        }
                        v382 = *(std::__shared_weak_count **)(v378 + 16);
                        if (v382)
                        {
                          v383 = (unint64_t *)&v382->__shared_owners_;
                          do
                            v384 = __ldaxr(v383);
                          while (__stlxr(v384 - 1, v383));
                          if (!v384)
                          {
                            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                            std::__shared_weak_count::__release_weak(v382);
                          }
                        }
                        MEMORY[0x227684CE8](v378, 0x10F0C40B62ED6C6);
                      }
                    }
                    v385 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v386 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v387 = __ldaxr(v386);
                      while (__stlxr(v387 - 1, v386));
                      if (!v387)
                      {
                        ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                        std::__shared_weak_count::__release_weak(v385);
                      }
                    }
                    v388 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v389 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v390 = __ldaxr(v389);
                      while (__stlxr(v390 - 1, v389));
                      if (!v390)
                      {
                        ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                        std::__shared_weak_count::__release_weak(v388);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v356, OS_LOG_TYPE_INFO);
                    *(_DWORD *)object = 134218240;
                    *(double *)&object[4] = v357;
                    *(_WORD *)&object[12] = 2048;
                    *(_QWORD *)&object[14] = v348;
                    v391 = (void *)_os_log_send_and_compose_impl();
                    v189 = v914;
                    v35 = v917;
                    v371 = v912;
                    if (v391)
                      free(v391);
                  }
                  if (v340)
                  {
                    sub_22322C138((uint64_t)&v936, "KFE:RMKFNK t:%f, NR:%lu", (double)*v371 / 1000000000.0, v944);
                    sub_223182C08((uint64_t)&v936);
                  }
                  sub_223182C08((uint64_t)&v936);
                  v392 = v942;
                  if (v942)
                  {
                    v393 = (unint64_t *)&v942->__shared_owners_;
                    do
                      v394 = __ldaxr(v393);
                    while (__stlxr(v394 - 1, v393));
                    if (!v394)
                    {
                      ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                      std::__shared_weak_count::__release_weak(v392);
                    }
                  }
                  goto LABEL_695;
                }
              }
              memmove(v354, v345, v346);
              goto LABEL_636;
            }
          }
          memmove(v352, v351, v350);
          goto LABEL_628;
        }
      }
    }
    else
    {
      do
      {
        if (v943[1])
        {
          v195 = *v192;
          v196 = v192[1];
          v197 = v192[2];
          v198 = v192[3];
          v199 = v192[4];
          v200 = v192[5];
          v201 = v192[6];
          v202 = v192[7];
          v203 = v192[8];
          v204 = v192[9];
          v205 = v192[10];
          v206 = v192[11];
          v207 = v192[12];
          v208 = v192[13];
          v209 = v192[14];
          v210 = &v943[1];
          v211 = (void **)v943[1];
          v212 = v192[15];
          do
          {
            v213 = v211;
            v214 = v210;
            v215 = *((unsigned __int8 *)v211 + 25);
            v216 = *v192;
            if (v215 != v195)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 26);
            v216 = v192[1];
            if (v215 != v196)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 27);
            v216 = v192[2];
            if (v215 != v197)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 28);
            v216 = v192[3];
            if (v215 != v198)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 29);
            v216 = v192[4];
            if (v215 != v199)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 30);
            v216 = v192[5];
            if (v215 != v200)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 31);
            v216 = v192[6];
            if (v215 != v201)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 32);
            v216 = v192[7];
            if (v215 != v202)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 33);
            v216 = v192[8];
            if (v215 != v203)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 34);
            v216 = v192[9];
            if (v215 != v204)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 35);
            v216 = v192[10];
            if (v215 != v205)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 36);
            v216 = v192[11];
            if (v215 != v206)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 37);
            v216 = v192[12];
            if (v215 != v207)
              goto LABEL_354;
            v215 = *((unsigned __int8 *)v211 + 38);
            v216 = v192[13];
            if (v215 == v208
              && (v215 = *((unsigned __int8 *)v211 + 39), v216 = v192[14], v215 == v209)
              && (v215 = *((unsigned __int8 *)v211 + 40), v216 = v192[15], v215 == v212))
            {
              v217 = 0;
              v218 = (void ***)(v211 + 1);
              v210 = v211;
            }
            else
            {
LABEL_354:
              v217 = v215 < v216;
              v218 = (void ***)(v211 + 1);
              if (v217)
              {
                ++v211;
                v210 = v214;
              }
              else
              {
                v210 = v211;
              }
            }
            v211 = (void **)*v211;
          }
          while (v211);
          if (v210 != &v943[1])
          {
            v219 = v217 ? v214 : v213;
            v220 = *((unsigned __int8 *)v219 + 25);
            if (v195 == v220)
            {
              v221 = v217 ? v214 : v213;
              v220 = *((unsigned __int8 *)v221 + 26);
              v195 = v192[1];
              if (v196 == v220)
              {
                v222 = v217 ? v214 : v213;
                v220 = *((unsigned __int8 *)v222 + 27);
                v195 = v192[2];
                if (v197 == v220)
                {
                  v223 = v217 ? v214 : v213;
                  v220 = *((unsigned __int8 *)v223 + 28);
                  v195 = v192[3];
                  if (v198 == v220)
                  {
                    v224 = v217 ? v214 : v213;
                    v220 = *((unsigned __int8 *)v224 + 29);
                    v195 = v192[4];
                    if (v199 == v220)
                    {
                      v225 = v217 ? v214 : v213;
                      v220 = *((unsigned __int8 *)v225 + 30);
                      v195 = v192[5];
                      if (v200 == v220)
                      {
                        v226 = v217 ? v214 : v213;
                        v220 = *((unsigned __int8 *)v226 + 31);
                        v195 = v192[6];
                        if (v201 == v220)
                        {
                          v227 = v217 ? v214 : v213;
                          v220 = *((unsigned __int8 *)v227 + 32);
                          v195 = v192[7];
                          if (v202 == v220)
                          {
                            v228 = v217 ? v214 : v213;
                            v220 = *((unsigned __int8 *)v228 + 33);
                            v195 = v192[8];
                            if (v203 == v220)
                            {
                              v229 = v217 ? v214 : v213;
                              v220 = *((unsigned __int8 *)v229 + 34);
                              v195 = v192[9];
                              if (v204 == v220)
                              {
                                v230 = v217 ? v214 : v213;
                                v220 = *((unsigned __int8 *)v230 + 35);
                                v195 = v192[10];
                                if (v205 == v220)
                                {
                                  v231 = v217 ? v214 : v213;
                                  v220 = *((unsigned __int8 *)v231 + 36);
                                  v195 = v192[11];
                                  if (v206 == v220)
                                  {
                                    v232 = v217 ? v214 : v213;
                                    v220 = *((unsigned __int8 *)v232 + 37);
                                    v195 = v192[12];
                                    if (v207 == v220)
                                    {
                                      v233 = v217 ? v214 : v213;
                                      v220 = *((unsigned __int8 *)v233 + 38);
                                      v195 = v192[13];
                                      if (v208 == v220)
                                      {
                                        v234 = v217 ? v214 : v213;
                                        v220 = *((unsigned __int8 *)v234 + 39);
                                        v195 = v192[14];
                                        if (v209 == v220)
                                        {
                                          v235 = v217 ? v214 : v213;
                                          v220 = *((unsigned __int8 *)v235 + 40);
                                          v195 = v192[15];
                                          if (v212 == v220)
                                            goto LABEL_424;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v195 >= v220)
            {
LABEL_424:
              v236 = (void ***)(v214 + 1);
              if (!v217)
                v236 = v218;
              v237 = *v236;
              v238 = v210;
              if (*v236)
              {
                do
                {
                  v239 = v237;
                  v237 = (void **)*v237;
                }
                while (v237);
              }
              else
              {
                do
                {
                  v239 = (void **)v238[2];
                  v40 = *v239 == v238;
                  v238 = v239;
                }
                while (!v40);
              }
              if (v943[0] == v210)
                v943[0] = v239;
              --v944;
              sub_2231AFE60((uint64_t *)v943[1], (uint64_t *)v210);
              operator delete(v210);
            }
          }
        }
        v192 += 16;
      }
      while (v192 != v193);
      v194 = (unint64_t)v944;
      LODWORD(v34) = v906;
      v35 = v917;
      if (v944)
        goto LABEL_434;
    }
LABEL_695:
    sub_223198030((uint64_t)v943, (_QWORD *)v943[1]);
  }
  v395 = v912;
  if (*(_BYTE *)(v35 + 716))
  {
    sub_2238CF414(v189, *(_QWORD **)(v35 + 1224), (uint64_t *)object);
    v396 = *(_OWORD **)object;
    v397 = *(_OWORD **)&object[8];
    v936.__r_.__value_.__r.__words[0] = v35 + 1912;
    if (*(_QWORD *)object != *(_QWORD *)&object[8])
    {
      do
        sub_2232E9564((char ***)&v936, v396++);
      while (v396 != v397);
      v396 = *(_OWORD **)object;
    }
    if (v396)
    {
      *(_QWORD *)&object[8] = v396;
      operator delete(v396);
    }
  }
  if (!*(_BYTE *)(v35 + 688))
    goto LABEL_998;
  v398 = *(double *)(v35 + 680);
  v943[1] = 0;
  v943[0] = 0;
  v944 = 0;
  v399 = *(_QWORD **)(v35 + 1872);
  v400 = (_QWORD *)(v35 + 1880);
  if (v399 == (_QWORD *)(v35 + 1880))
    goto LABEL_997;
  v401 = 0;
  v402 = (_QWORD *)(v35 + 1872);
  v403 = v398 * 1000000000.0;
  while (2)
  {
    v404 = v399 + 4;
    v405 = (_QWORD *)v914[7];
    v406 = (_QWORD *)v914[8];
    if (v405 != v406)
    {
      while (*v405 != *v404 || v405[1] != v399[5])
      {
        v405 += 2;
        if (v405 == v406)
        {
          v405 = (_QWORD *)v914[8];
          break;
        }
      }
    }
    if (v405 == v406)
    {
      v408 = (_QWORD *)v914[1];
      v409 = (_QWORD *)v914[2];
      if (v408 != v409)
      {
        while (*v408 != *v404 || v408[1] != v399[5])
        {
          v408 += 2;
          if (v408 == v409)
          {
            v408 = (_QWORD *)v914[2];
            break;
          }
        }
      }
      if (v408 == v409)
      {
        v411 = (_QWORD *)v914[16];
        v412 = (_QWORD *)v914[17];
        if (v411 != v412)
        {
          while (*v411 != *v404 || v411[1] != v399[5])
          {
            v411 += 2;
            if (v411 == v412)
            {
              v411 = (_QWORD *)v914[17];
              break;
            }
          }
        }
        if (v411 == v412)
        {
          if (v403 + (double)(uint64_t)v399[6] > (double)*v912)
            goto LABEL_751;
          sub_22384BA54(&v919);
          if (**(int **)(v919 + 56) > 4
            || ((v426 = *(unsigned __int8 *)(v919 + 72),
                 v427 = sub_22322F254(v919, "OSLogSurrogateAppender", 1, 0),
                 v428 = v427,
                 !v426)
              ? (v429 = v427 == 0)
              : (v429 = 0),
                v429))
          {
LABEL_874:
            sub_22384BA54(&v934);
            if (*(int *)v934[7] > 3)
              goto LABEL_964;
            v501 = *((unsigned __int8 *)v934 + 72);
            v502 = sub_22322F254((uint64_t)v934, "OSLogSurrogateAppender", 1, 0);
            if (!v501 && v502 == 0)
              goto LABEL_964;
            v883 = v501;
            v889 = v502;
            v936.__r_.__value_.__r.__words[0] = (std::string::size_type)&v934;
            v936.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v936.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v937 = 3;
            v938 = "unknown file";
            v939 = 1068;
            v940 = "unknown function";
            v941 = 0;
            v942 = 0;
            v504 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
            if (*(char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v506 = *(const char **)(v504 + 16);
              v505 = *(_QWORD *)(v504 + 24);
            }
            else
            {
              v505 = *(unsigned __int8 *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39);
              v506 = (const char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
            }
            v882 = *(_QWORD *)v936.__r_.__value_.__l.__data_ + 16;
            v892 = v402;
            v885 = v399[6];
            v887 = *v912;
            v507 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v507 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v930);
              sub_223199C58("com.apple.cv3d", (unint64_t)v930, byte_255788F40);
              if ((_BYTE)v932 && SHIBYTE(v931) < 0)
                operator delete(v930[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
            if (byte_255788F40[23] >= 0)
              v508 = byte_255788F40;
            else
              v508 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v509 = byte_255788F40[23];
            else
              v509 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)object = os_log_create(v508, v506);
            if (v509 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v509 >= 0x17)
            {
              v511 = (v509 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v509 | 7) != 0x17)
                v511 = v509 | 7;
              v512 = v511 + 1;
              v510 = operator new(v511 + 1);
              *(_QWORD *)&object[24] = v512 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v510;
              *(_QWORD *)&object[16] = v509;
            }
            else
            {
              object[31] = v509;
              v510 = &object[8];
              if (!v509)
              {
LABEL_897:
                v510[v509] = 0;
                object[32] = 1;
                if (v505 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v402 = v892;
                if (v505 >= 0x17)
                {
                  v514 = (v505 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v505 | 7) != 0x17)
                    v514 = v505 | 7;
                  v34 = v514 + 1;
                  v513 = operator new(v514 + 1);
                  *(_QWORD *)&object[56] = v34 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v513;
                  *(_QWORD *)&object[48] = v505;
                  LODWORD(v34) = v906;
                }
                else
                {
                  object[63] = v505;
                  v513 = &object[40];
                  LODWORD(v34) = v906;
                  if (!v505)
                    goto LABEL_905;
                }
                memmove(v513, v506, v505);
LABEL_905:
                v513[v505] = 0;
                LOBYTE(v948) = 1;
                v515 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  operator delete(*(void **)&object[40]);
                if (object[32] && (object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v889 && *(_QWORD *)(v889 + 24))
                {
                  v516 = _os_log_pack_size();
                  v517 = (std::__shared_weak_count_vtbl *)operator new(v516, (std::align_val_t)8uLL);
                  v518 = (std::__shared_weak_count *)operator new();
                  v519 = v518;
                  v518->__shared_owners_ = 0;
                  v520 = (unint64_t *)&v518->__shared_owners_;
                  v518->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v518->__shared_weak_owners_ = 0;
                  v518[1].__vftable = v517;
                  *(_QWORD *)object = v517;
                  *(_QWORD *)&object[8] = v517;
                  *(_QWORD *)&object[16] = v518;
                  do
                    v521 = __ldxr(v520);
                  while (__stxr(v521 + 1, v520));
                  memset(&object[24], 0, 24);
                  v402 = v892;
                  do
                    v522 = __ldaxr(v520);
                  while (__stlxr(v522 - 1, v520));
                  if (!v522)
                  {
                    ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
                    std::__shared_weak_count::__release_weak(v519);
                  }
                  v523 = *(_QWORD *)object;
                  v524 = _os_log_pack_fill();
                  *(_DWORD *)v524 = 134218240;
                  *(_QWORD *)(v524 + 4) = v885;
                  *(_WORD *)(v524 + 12) = 2048;
                  *(_QWORD *)(v524 + 14) = v887;
                  v525 = (char *)operator new();
                  v526 = *(unsigned __int8 *)(v504 + 39);
                  v527 = v882;
                  if ((v526 & 0x80u) != 0)
                  {
                    v527 = *(_QWORD *)(v504 + 16);
                    v526 = *(_QWORD *)(v504 + 24);
                  }
                  *(_QWORD *)v525 = v523;
                  *(_OWORD *)(v525 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v525 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v525 + 5) = v527;
                  *((_QWORD *)v525 + 6) = v526;
                  v525[56] = 1;
                  *(_QWORD *)__s = 0;
                  v930[0] = v525;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v889 + 24) + 40))(*(_QWORD *)(v889 + 24), v930);
                  v528 = v930[0];
                  v930[0] = 0;
                  v35 = v917;
                  if (v528)
                  {
                    v529 = (std::__shared_weak_count *)*((_QWORD *)v528 + 4);
                    if (v529)
                    {
                      v530 = (unint64_t *)&v529->__shared_owners_;
                      do
                        v531 = __ldaxr(v530);
                      while (__stlxr(v531 - 1, v530));
                      if (!v531)
                      {
                        ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
                        std::__shared_weak_count::__release_weak(v529);
                      }
                    }
                    v532 = (std::__shared_weak_count *)*((_QWORD *)v528 + 2);
                    if (v532)
                    {
                      v533 = (unint64_t *)&v532->__shared_owners_;
                      do
                        v534 = __ldaxr(v533);
                      while (__stlxr(v534 - 1, v533));
                      if (!v534)
                      {
                        ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
                        std::__shared_weak_count::__release_weak(v532);
                      }
                    }
                    MEMORY[0x227684CE8](v528, 0x10F0C40B62ED6C6);
                    v535 = *(_QWORD *)__s;
                    *(_QWORD *)__s = 0;
                    if (v535)
                    {
                      v536 = *(std::__shared_weak_count **)(v535 + 32);
                      if (v536)
                      {
                        v537 = (unint64_t *)&v536->__shared_owners_;
                        do
                          v538 = __ldaxr(v537);
                        while (__stlxr(v538 - 1, v537));
                        if (!v538)
                        {
                          ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                          std::__shared_weak_count::__release_weak(v536);
                        }
                      }
                      v539 = *(std::__shared_weak_count **)(v535 + 16);
                      if (v539)
                      {
                        v540 = (unint64_t *)&v539->__shared_owners_;
                        do
                          v541 = __ldaxr(v540);
                        while (__stlxr(v541 - 1, v540));
                        if (!v541)
                        {
                          ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
                          std::__shared_weak_count::__release_weak(v539);
                        }
                      }
                      MEMORY[0x227684CE8](v535, 0x10F0C40B62ED6C6);
                    }
                  }
                  v542 = *(std::__shared_weak_count **)&object[32];
                  v543 = v883;
                  if (*(_QWORD *)&object[32])
                  {
                    v544 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v545 = __ldaxr(v544);
                    while (__stlxr(v545 - 1, v544));
                    if (!v545)
                    {
                      ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
                      std::__shared_weak_count::__release_weak(v542);
                    }
                  }
                  v546 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v547 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v548 = __ldaxr(v547);
                    while (__stlxr(v548 - 1, v547));
                    if (!v548)
                    {
                      ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                      std::__shared_weak_count::__release_weak(v546);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v515, OS_LOG_TYPE_INFO);
                  *(_DWORD *)object = 134218240;
                  *(_QWORD *)&object[4] = v885;
                  *(_WORD *)&object[12] = 2048;
                  *(_QWORD *)&object[14] = v887;
                  v549 = (void *)_os_log_send_and_compose_impl();
                  v35 = v917;
                  v543 = v883;
                  if (v549)
                    free(v549);
                }
                if (v543)
                {
                  sub_22322C138((uint64_t)&v936, "KFE:RMKFNC CT:%llu, T:%llu", v399[6], *v912);
                  sub_223182C08((uint64_t)&v936);
                }
                sub_223182C08((uint64_t)&v936);
                v550 = v942;
                if (v942)
                {
                  v551 = (unint64_t *)&v942->__shared_owners_;
                  do
                    v552 = __ldaxr(v551);
                  while (__stlxr(v552 - 1, v551));
                  if (!v552)
                  {
                    ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
                    std::__shared_weak_count::__release_weak(v550);
                  }
                }
LABEL_964:
                v553 = sub_223822434(*(_QWORD **)(v35 + 1224), v399[4], v399[5]);
                *((_WORD *)v553 + 56) = 0x2000;
                *((_BYTE *)v553 + 114) = 0;
                sub_2231A9984(v907, (unsigned __int8 *)v399 + 32, (_OWORD *)v399 + 2);
                v554 = (char *)v943[1];
                if (v943[1] < v944)
                {
                  *(_OWORD *)v943[1] = *(_OWORD *)v404;
                  v414 = v554 + 16;
                  goto LABEL_749;
                }
                v555 = (char *)v943[0];
                v556 = ((char *)v943[1] - (char *)v943[0]) >> 4;
                v557 = v556 + 1;
                if ((unint64_t)(v556 + 1) >> 60)
LABEL_1459:
                  sub_22316E078();
                v558 = v944 - (char *)v943[0];
                if ((v944 - (char *)v943[0]) >> 3 > v557)
                  v557 = v558 >> 3;
                if ((unint64_t)v558 >= 0x7FFFFFFFFFFFFFF0)
                  v559 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v559 = v557;
                if (v559)
                {
                  if (v559 >> 60)
LABEL_1460:
                    sub_223174E94();
                  v560 = (char *)operator new(16 * v559);
                  v561 = &v560[16 * v556];
                  *(_OWORD *)v561 = *(_OWORD *)v404;
                  v562 = v561;
                  if (v554 == v555)
                  {
LABEL_980:
                    v414 = v561 + 16;
                    v943[0] = v562;
                    v944 = &v560[16 * v559];
                    if (!v554)
                      goto LABEL_749;
                    goto LABEL_981;
                  }
                }
                else
                {
                  v560 = 0;
                  v561 = (char *)(16 * v556);
                  *(_OWORD *)(16 * v556) = *(_OWORD *)v404;
                  v562 = (char *)(16 * v556);
                  if (v554 == v555)
                    goto LABEL_980;
                }
                do
                {
                  *((_OWORD *)v562 - 1) = *((_OWORD *)v554 - 1);
                  v562 -= 16;
                  v554 -= 16;
                }
                while (v554 != v555);
                v554 = (char *)v943[0];
                v414 = v561 + 16;
                v943[0] = v562;
                v944 = &v560[16 * v559];
                if (!v554)
                  goto LABEL_749;
LABEL_981:
                v423 = v554;
LABEL_748:
                operator delete(v423);
                goto LABEL_749;
              }
            }
            memmove(v510, v508, v509);
            goto LABEL_897;
          }
          v936.__r_.__value_.__r.__words[0] = (std::string::size_type)&v919;
          v936.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v936.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v937 = 4;
          v938 = "unknown file";
          v939 = 1066;
          v940 = "unknown function";
          v941 = 0;
          v942 = 0;
          sub_2245664AC((unsigned __int8 *)v399 + 32, __s);
          v430 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
          v431 = *(_QWORD *)v936.__r_.__value_.__l.__data_ + 16;
          v886 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
          if (*(char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v433 = *(const char **)(v430 + 16);
            v432 = *(_QWORD *)(v430 + 24);
          }
          else
          {
            v432 = *(unsigned __int8 *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39);
            v433 = (const char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
          }
          v888 = v428;
          v891 = v402;
          v434 = v399[6];
          v435 = *v912;
          v436 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v436 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v930);
            sub_223199C58("com.apple.cv3d", (unint64_t)v930, byte_255788F40);
            if ((_BYTE)v932 && SHIBYTE(v931) < 0)
              operator delete(v930[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F40[23] >= 0)
            v437 = byte_255788F40;
          else
            v437 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v438 = byte_255788F40[23];
          else
            v438 = *(_QWORD *)&byte_255788F40[8];
          *(_QWORD *)object = os_log_create(v437, v433);
          if (v438 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v884 = v431;
          if (v438 >= 0x17)
          {
            v440 = (v438 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v438 | 7) != 0x17)
              v440 = v438 | 7;
            v441 = v440 + 1;
            v439 = operator new(v440 + 1);
            *(_QWORD *)&object[24] = v441 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v439;
            *(_QWORD *)&object[16] = v438;
          }
          else
          {
            object[31] = v438;
            v439 = &object[8];
            if (!v438)
            {
LABEL_781:
              v439[v438] = 0;
              object[32] = 1;
              if (v432 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v402 = v891;
              if (v432 >= 0x17)
              {
                v443 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v432 | 7) != 0x17)
                  v443 = v432 | 7;
                v34 = v443 + 1;
                v442 = operator new(v443 + 1);
                *(_QWORD *)&object[56] = v34 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v442;
                *(_QWORD *)&object[48] = v432;
                LODWORD(v34) = v906;
              }
              else
              {
                object[63] = v432;
                v442 = &object[40];
                LODWORD(v34) = v906;
                if (!v432)
                {
LABEL_789:
                  v442[v432] = 0;
                  LOBYTE(v948) = 1;
                  v444 = *(NSObject **)object;
                  if ((object[63] & 0x80000000) != 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  v445 = (double)v434 / 1000000000.0;
                  v446 = (double)v435 / 1000000000.0;
                  if (!v888 || !*(_QWORD *)(v888 + 24))
                  {
                    os_log_type_enabled(v444, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)object = 136315650;
                    *(_QWORD *)&object[4] = __s;
                    *(_WORD *)&object[12] = 2048;
                    *(double *)&object[14] = v445;
                    *(_WORD *)&object[22] = 2048;
                    *(double *)&object[24] = v446;
                    v453 = (void *)_os_log_send_and_compose_impl();
                    v35 = v917;
                    if (v453)
                      free(v453);
                    goto LABEL_867;
                  }
                  v447 = _os_log_pack_size();
                  v448 = (std::__shared_weak_count_vtbl *)operator new(v447, (std::align_val_t)8uLL);
                  v449 = (std::__shared_weak_count *)operator new();
                  v449->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v449->__shared_owners_ = 0;
                  v449->__shared_weak_owners_ = 0;
                  v449[1].__vftable = v448;
                  v930[0] = v448;
                  v930[1] = v448;
                  v931 = v449;
                  v932 = 0;
                  v933 = 0;
                  v450 = strlen(__s);
                  if (v450 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v451 = v450;
                  if (v450 >= 0x17)
                  {
                    v454 = (v450 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v450 | 7) != 0x17)
                      v454 = v450 | 7;
                    v34 = v454 + 1;
                    v452 = (void **)operator new(v454 + 1);
                    *(_QWORD *)&v935 = v451;
                    *((_QWORD *)&v935 + 1) = v34 | 0x8000000000000000;
                    v934 = v452;
                    LODWORD(v34) = v906;
                  }
                  else
                  {
                    HIBYTE(v935) = v450;
                    v452 = (void **)&v934;
                    if (!v450)
                    {
LABEL_808:
                      *((_BYTE *)v452 + v451) = 0;
                      v455 = v934;
                      *(_QWORD *)v946 = v935;
                      *(_QWORD *)((char *)&v946[1] + 3) = *(_QWORD *)((char *)&v935 + 7);
                      v456 = HIBYTE(v935);
                      v457 = operator new(0x40uLL);
                      v457[1] = 0;
                      v457[2] = 0;
                      v457[3] = off_24EC1F890;
                      *v457 = &off_24EC1F840;
                      v458 = *(_QWORD *)v946;
                      v457[4] = v455;
                      v457[5] = v458;
                      *(_QWORD *)((char *)v457 + 47) = *(_QWORD *)((char *)&v946[1] + 3);
                      *((_BYTE *)v457 + 55) = v456;
                      memset(v946, 0, 15);
                      v459 = v933;
                      v932 = (char *)(v457 + 3);
                      v933 = (std::__shared_weak_count *)v457;
                      if (v459)
                      {
                        v460 = (unint64_t *)&v459->__shared_owners_;
                        do
                          v461 = __ldaxr(v460);
                        while (__stlxr(v461 - 1, v460));
                        if (!v461)
                        {
                          ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                          std::__shared_weak_count::__release_weak(v459);
                        }
                      }
                      *(_OWORD *)object = *(_OWORD *)v930;
                      v462 = v932;
                      *(_QWORD *)&object[16] = v931;
                      if (v931)
                      {
                        v463 = (unint64_t *)&v931->__shared_owners_;
                        do
                          v464 = __ldxr(v463);
                        while (__stxr(v464 + 1, v463));
                      }
                      v465 = v933;
                      *(_QWORD *)&object[24] = v462;
                      *(_QWORD *)&object[32] = v933;
                      if (v933)
                      {
                        v466 = (unint64_t *)&v933->__shared_owners_;
                        do
                          v467 = __ldxr(v466);
                        while (__stxr(v467 + 1, v466));
                        *(_QWORD *)&object[40] = v462;
                        do
                          v468 = __ldaxr(v466);
                        while (__stlxr(v468 - 1, v466));
                        if (!v468)
                        {
                          ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                          std::__shared_weak_count::__release_weak(v465);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&object[40] = v462;
                      }
                      v469 = v931;
                      if (v931)
                      {
                        v470 = (unint64_t *)&v931->__shared_owners_;
                        do
                          v471 = __ldaxr(v470);
                        while (__stlxr(v471 - 1, v470));
                        if (!v471)
                        {
                          ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                          std::__shared_weak_count::__release_weak(v469);
                        }
                      }
                      v472 = *(_QWORD *)object;
                      if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                        v473 = *(_QWORD *)&object[40] + 8;
                      else
                        v473 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                      v474 = _os_log_pack_fill();
                      *(_DWORD *)v474 = 136315650;
                      *(_QWORD *)(v474 + 4) = v473;
                      *(_WORD *)(v474 + 12) = 2048;
                      *(double *)(v474 + 14) = v445;
                      *(_WORD *)(v474 + 22) = 2048;
                      *(double *)(v474 + 24) = v446;
                      v475 = (char *)operator new();
                      v476 = *(unsigned __int8 *)(v886 + 39);
                      v477 = v884;
                      if ((v476 & 0x80u) != 0)
                      {
                        v477 = *(_QWORD *)(v886 + 16);
                        v476 = *(_QWORD *)(v886 + 24);
                      }
                      *(_QWORD *)v475 = v472;
                      *(_OWORD *)(v475 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v475 + 24) = *(_OWORD *)&object[24];
                      *(_QWORD *)&object[24] = 0;
                      *(_QWORD *)&object[32] = 0;
                      *((_QWORD *)v475 + 5) = v477;
                      *((_QWORD *)v475 + 6) = v476;
                      v475[56] = 16;
                      v934 = 0;
                      v930[0] = v475;
                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v888 + 24) + 40))(*(_QWORD *)(v888 + 24), v930);
                      v478 = v930[0];
                      v930[0] = 0;
                      v35 = v917;
                      v402 = v891;
                      if (v478)
                      {
                        v479 = (std::__shared_weak_count *)*((_QWORD *)v478 + 4);
                        if (v479)
                        {
                          v480 = (unint64_t *)&v479->__shared_owners_;
                          do
                            v481 = __ldaxr(v480);
                          while (__stlxr(v481 - 1, v480));
                          if (!v481)
                          {
                            ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
                            std::__shared_weak_count::__release_weak(v479);
                          }
                        }
                        v482 = (std::__shared_weak_count *)*((_QWORD *)v478 + 2);
                        if (v482)
                        {
                          v483 = (unint64_t *)&v482->__shared_owners_;
                          do
                            v484 = __ldaxr(v483);
                          while (__stlxr(v484 - 1, v483));
                          if (!v484)
                          {
                            ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
                            std::__shared_weak_count::__release_weak(v482);
                          }
                        }
                        MEMORY[0x227684CE8](v478, 0x10F0C40B62ED6C6);
                        v485 = v934;
                        v934 = 0;
                        if (v485)
                        {
                          v486 = (std::__shared_weak_count *)v485[4];
                          if (v486)
                          {
                            v487 = (unint64_t *)&v486->__shared_owners_;
                            do
                              v488 = __ldaxr(v487);
                            while (__stlxr(v488 - 1, v487));
                            if (!v488)
                            {
                              ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
                              std::__shared_weak_count::__release_weak(v486);
                            }
                          }
                          v489 = (std::__shared_weak_count *)v485[2];
                          if (v489)
                          {
                            v490 = (unint64_t *)&v489->__shared_owners_;
                            do
                              v491 = __ldaxr(v490);
                            while (__stlxr(v491 - 1, v490));
                            if (!v491)
                            {
                              ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
                              std::__shared_weak_count::__release_weak(v489);
                            }
                          }
                          MEMORY[0x227684CE8](v485, 0x10F0C40B62ED6C6);
                        }
                      }
                      v492 = *(std::__shared_weak_count **)&object[32];
                      if (*(_QWORD *)&object[32])
                      {
                        v493 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                        do
                          v494 = __ldaxr(v493);
                        while (__stlxr(v494 - 1, v493));
                        if (!v494)
                        {
                          ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
                          std::__shared_weak_count::__release_weak(v492);
                        }
                      }
                      v495 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v496 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v497 = __ldaxr(v496);
                        while (__stlxr(v497 - 1, v496));
                        if (!v497)
                        {
                          ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                          std::__shared_weak_count::__release_weak(v495);
                        }
                      }
LABEL_867:
                      if (v426)
                      {
                        sub_2245664AC((unsigned __int8 *)v399 + 32, object);
                        sub_22322C138((uint64_t)&v936, "Removing keyframe %s created at %lf that was not confirmed by SLAM by %lf", object, (double)(uint64_t)v399[6] / 1000000000.0, (double)*v912 / 1000000000.0);
                        sub_223182C08((uint64_t)&v936);
                      }
                      sub_223182C08((uint64_t)&v936);
                      v498 = v942;
                      if (v942)
                      {
                        v499 = (unint64_t *)&v942->__shared_owners_;
                        do
                          v500 = __ldaxr(v499);
                        while (__stlxr(v500 - 1, v499));
                        if (!v500)
                        {
                          ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
                          std::__shared_weak_count::__release_weak(v498);
                        }
                      }
                      goto LABEL_874;
                    }
                  }
                  memcpy(v452, __s, v451);
                  goto LABEL_808;
                }
              }
              memmove(v442, v433, v432);
              goto LABEL_789;
            }
          }
          memmove(v439, v437, v438);
          goto LABEL_781;
        }
      }
    }
    if (v401 < v944)
    {
      *(_OWORD *)v401 = *(_OWORD *)v404;
      v414 = v401 + 16;
      goto LABEL_750;
    }
    v415 = (char *)v943[0];
    v416 = (v401 - (char *)v943[0]) >> 4;
    v417 = v416 + 1;
    if ((unint64_t)(v416 + 1) >> 60)
      goto LABEL_1459;
    v418 = v944 - (char *)v943[0];
    if ((v944 - (char *)v943[0]) >> 3 > v417)
      v417 = v418 >> 3;
    if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFF0)
      v419 = 0xFFFFFFFFFFFFFFFLL;
    else
      v419 = v417;
    if (!v419)
    {
      v420 = 0;
      v421 = (char *)(16 * v416);
      *(_OWORD *)(16 * v416) = *(_OWORD *)v404;
      v422 = (char *)(16 * v416);
      if (v401 == v415)
        goto LABEL_746;
      goto LABEL_743;
    }
    if (v419 >> 60)
      goto LABEL_1460;
    v420 = (char *)operator new(16 * v419);
    v421 = &v420[16 * v416];
    *(_OWORD *)v421 = *(_OWORD *)v404;
    v422 = v421;
    if (v401 != v415)
    {
      do
      {
LABEL_743:
        *((_OWORD *)v422 - 1) = *((_OWORD *)v401 - 1);
        v422 -= 16;
        v401 -= 16;
      }
      while (v401 != v415);
      v401 = (char *)v943[0];
      v414 = v421 + 16;
      v943[0] = v422;
      v943[1] = v421 + 16;
      v944 = &v420[16 * v419];
      if (!v401)
        goto LABEL_749;
LABEL_747:
      v423 = v401;
      goto LABEL_748;
    }
LABEL_746:
    v414 = v421 + 16;
    v943[0] = v422;
    v943[1] = v421 + 16;
    v944 = &v420[16 * v419];
    if (v401)
      goto LABEL_747;
LABEL_749:
    v35 = v917;
LABEL_750:
    v943[1] = v414;
    v401 = (char *)v414;
LABEL_751:
    v424 = (_QWORD *)v399[1];
    if (v424)
    {
      do
      {
        v425 = v424;
        v424 = (_QWORD *)*v424;
      }
      while (v424);
    }
    else
    {
      do
      {
        v425 = (_QWORD *)v399[2];
        v40 = *v425 == (_QWORD)v399;
        v399 = v425;
      }
      while (!v40);
    }
    v399 = v425;
    if (v425 != v400)
      continue;
    break;
  }
  v563 = (char *)v943[0];
  if (v943[0] == v401)
  {
    v395 = v912;
    if (v401)
      goto LABEL_996;
  }
  else
  {
    v564 = (unsigned __int8 *)v943[0];
    v395 = v912;
    do
    {
      sub_22389466C(v402, v564);
      v564 += 16;
    }
    while (v564 != (unsigned __int8 *)v401);
    v401 = v563;
    if (v563)
    {
LABEL_996:
      v943[1] = v401;
      operator delete(v401);
    }
  }
LABEL_997:
  v189 = v914;
LABEL_998:
  v946[0] = (unint64_t)((char *)v927 - (_BYTE *)v926) >> 4;
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.process_slam_time";
  *(_QWORD *)&object[24] = 34;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v565 = sub_2241471F8();
    v566 = v565[2];
    if (!v566)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v566 = v565[2];
    }
    v567 = *(_QWORD *)(v566 + 64);
    v568 = (std::mutex *)(v567 + 32);
    std::mutex::lock((std::mutex *)(v567 + 32));
    v570 = *(_QWORD *)(v567 + 96);
    v569 = *(_QWORD *)(v567 + 104);
    std::mutex::unlock(v568);
    v40 = v570 == v569;
    v35 = v917;
    if (!v40)
    {
      v571 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v572 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v573 = v571 >= 0 ? &v936 : v572;
      v574 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v573);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v574 + 24))(v574))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        *(float *)v930 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v890.__d_.__rep_) / 1000000.0;
        sub_22386E598((double *)&qword_255788F20, v574, (float *)v930, "total (ms)");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v575 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v575 = v936.__r_.__value_.__l.__size_;
  if (v575 >= 0x11)
  {
    v576 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v576 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v577 = v576->__r_.__value_.__r.__words[0];
    v578 = v576->__r_.__value_.__l.__size_;
    v579 = v576->__r_.__value_.__s.__data_[16];
    if (v577 == 0x6365722E64337663 && v578 == 0x73746174532E6E6FLL && v579 == 46)
    {
      v582 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v583 = &v936;
      else
        v583 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v584 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v584 = v936.__r_.__value_.__l.__size_;
      *(float *)v930 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v890.__d_.__rep_) / 1000000.0;
      sub_2231897A8((uint64_t *)v582, v583, v584, (float *)v930, (uint64_t)"total (ms)", 10);
      v395 = v912;
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v585 = sub_2241471F8();
    v586 = v585[2];
    if (!v586)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v586 = v585[2];
    }
    v587 = *(_QWORD *)(v586 + 64);
    v588 = (std::mutex *)(v587 + 32);
    std::mutex::lock((std::mutex *)(v587 + 32));
    v590 = *(_QWORD *)(v587 + 96);
    v589 = *(_QWORD *)(v587 + 104);
    std::mutex::unlock(v588);
    v40 = v590 == v589;
    v35 = v917;
    if (!v40)
    {
      v591 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v592 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v593 = v591 >= 0 ? &v936 : v592;
      v594 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v593);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v594 + 24))(v594))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v930[0] = *(void **)(v917 + 1888);
        sub_22346BDB0((double *)&qword_255788F20, v594, (uint64_t *)v930, "created_not_confirmed");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v595 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v595 = v936.__r_.__value_.__l.__size_;
  if (v595 >= 0x11)
  {
    v596 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v596 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v597 = v596->__r_.__value_.__r.__words[0];
    v598 = v596->__r_.__value_.__l.__size_;
    v599 = v596->__r_.__value_.__s.__data_[16];
    if (v597 == 0x6365722E64337663 && v598 == 0x73746174532E6E6FLL && v599 == 46)
    {
      v602 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v603 = &v936;
      else
        v603 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v604 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v604 = v936.__r_.__value_.__l.__size_;
      v930[0] = *(void **)(v35 + 1888);
      sub_22318760C((uint64_t *)v602, v603, v604, (uint64_t *)v930, (uint64_t)"created_not_confirmed", 21);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v605 = sub_2241471F8();
    v606 = v605[2];
    if (!v606)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v606 = v605[2];
    }
    v607 = *(_QWORD *)(v606 + 64);
    v608 = (std::mutex *)(v607 + 32);
    std::mutex::lock((std::mutex *)(v607 + 32));
    v610 = *(_QWORD *)(v607 + 96);
    v609 = *(_QWORD *)(v607 + 104);
    std::mutex::unlock(v608);
    v40 = v610 == v609;
    v35 = v917;
    if (!v40)
    {
      v611 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v612 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v613 = v611 >= 0 ? &v936 : v612;
      v614 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v613);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v614 + 24))(v614))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v930[0] = (void *)((uint64_t)(v189[2] - v189[1]) >> 4);
        sub_223187734((double *)&qword_255788F20, v614, (uint64_t *)v930, "new_received");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v615 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v615 = v936.__r_.__value_.__l.__size_;
  if (v615 >= 0x11)
  {
    v616 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v616 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v617 = v616->__r_.__value_.__r.__words[0];
    v618 = v616->__r_.__value_.__l.__size_;
    v619 = v616->__r_.__value_.__s.__data_[16];
    if (v617 == 0x6365722E64337663 && v618 == 0x73746174532E6E6FLL && v619 == 46)
    {
      v622 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v623 = &v936;
      else
        v623 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v624 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v624 = v936.__r_.__value_.__l.__size_;
      v930[0] = (void *)((uint64_t)(v189[2] - v189[1]) >> 4);
      sub_22318760C((uint64_t *)v622, v623, v624, (uint64_t *)v930, (uint64_t)"new_received", 12);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v625 = sub_2241471F8();
    v626 = v625[2];
    if (!v626)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v626 = v625[2];
    }
    v627 = *(_QWORD *)(v626 + 64);
    v628 = (std::mutex *)(v627 + 32);
    std::mutex::lock((std::mutex *)(v627 + 32));
    v630 = *(_QWORD *)(v627 + 96);
    v629 = *(_QWORD *)(v627 + 104);
    std::mutex::unlock(v628);
    v40 = v630 == v629;
    v35 = v917;
    if (!v40)
    {
      v631 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v632 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v633 = v631 >= 0 ? &v936 : v632;
      v634 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v633);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v634 + 24))(v634))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v930[0] = (void *)((uint64_t)(v189[8] - v189[7]) >> 4);
        sub_223875C34((double *)&qword_255788F20, v634, (uint64_t *)v930, "updated_received");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v635 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v635 = v936.__r_.__value_.__l.__size_;
  if (v635 >= 0x11)
  {
    v636 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v636 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v637 = v636->__r_.__value_.__r.__words[0];
    v638 = v636->__r_.__value_.__l.__size_;
    v639 = v636->__r_.__value_.__s.__data_[16];
    if (v637 == 0x6365722E64337663 && v638 == 0x73746174532E6E6FLL && v639 == 46)
    {
      v642 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v643 = &v936;
      else
        v643 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v644 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v644 = v936.__r_.__value_.__l.__size_;
      v930[0] = (void *)((uint64_t)(v189[8] - v189[7]) >> 4);
      sub_22318760C((uint64_t *)v642, v643, v644, (uint64_t *)v930, (uint64_t)"updated_received", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v645 = sub_2241471F8();
    v646 = v645[2];
    if (!v646)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v646 = v645[2];
    }
    v647 = *(_QWORD *)(v646 + 64);
    v648 = (std::mutex *)(v647 + 32);
    std::mutex::lock((std::mutex *)(v647 + 32));
    v650 = *(_QWORD *)(v647 + 96);
    v649 = *(_QWORD *)(v647 + 104);
    std::mutex::unlock(v648);
    v40 = v650 == v649;
    v35 = v917;
    if (!v40)
    {
      v651 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v652 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v653 = v651 >= 0 ? &v936 : v652;
      v654 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v653);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v654 + 24))(v654))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v930[0] = (void *)((uint64_t)(v189[14] - v189[13]) >> 4);
        sub_223875C34((double *)&qword_255788F20, v654, (uint64_t *)v930, "removed_received");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v655 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v655 = v936.__r_.__value_.__l.__size_;
  if (v655 >= 0x11)
  {
    v656 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v656 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v657 = v656->__r_.__value_.__r.__words[0];
    v658 = v656->__r_.__value_.__l.__size_;
    v659 = v656->__r_.__value_.__s.__data_[16];
    if (v657 == 0x6365722E64337663 && v658 == 0x73746174532E6E6FLL && v659 == 46)
    {
      v662 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v663 = &v936;
      else
        v663 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v664 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v664 = v936.__r_.__value_.__l.__size_;
      v930[0] = (void *)((uint64_t)(v189[14] - v189[13]) >> 4);
      sub_22318760C((uint64_t *)v662, v663, v664, (uint64_t *)v930, (uint64_t)"removed_received", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v665 = sub_2241471F8();
    v666 = v665[2];
    if (!v666)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v666 = v665[2];
    }
    v667 = *(_QWORD *)(v666 + 64);
    v668 = (std::mutex *)(v667 + 32);
    std::mutex::lock((std::mutex *)(v667 + 32));
    v670 = *(_QWORD *)(v667 + 96);
    v669 = *(_QWORD *)(v667 + 104);
    std::mutex::unlock(v668);
    v40 = v670 == v669;
    v35 = v917;
    if (!v40)
    {
      v671 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v672 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v673 = v671 >= 0 ? &v936 : v672;
      v674 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v673);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v674 + 24))(v674))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v930[0] = (void *)((uint64_t)(v189[17] - v189[16]) >> 4);
        sub_22346BEEC((double *)&qword_255788F20, v674, (uint64_t *)v930, "external_received");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v675 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v675 = v936.__r_.__value_.__l.__size_;
  if (v675 >= 0x11)
  {
    v676 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v676 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v677 = v676->__r_.__value_.__r.__words[0];
    v678 = v676->__r_.__value_.__l.__size_;
    v679 = v676->__r_.__value_.__s.__data_[16];
    if (v677 == 0x6365722E64337663 && v678 == 0x73746174532E6E6FLL && v679 == 46)
    {
      v682 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v683 = &v936;
      else
        v683 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v684 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v684 = v936.__r_.__value_.__l.__size_;
      v930[0] = (void *)((uint64_t)(v189[17] - v189[16]) >> 4);
      sub_22318760C((uint64_t *)v682, v683, v684, (uint64_t *)v930, (uint64_t)"external_received", 17);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v685 = sub_2241471F8();
    v686 = v685[2];
    if (!v686)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v686 = v685[2];
    }
    v687 = *(_QWORD *)(v686 + 64);
    v688 = (std::mutex *)(v687 + 32);
    std::mutex::lock((std::mutex *)(v687 + 32));
    v690 = *(_QWORD *)(v687 + 96);
    v689 = *(_QWORD *)(v687 + 104);
    std::mutex::unlock(v688);
    v40 = v690 == v689;
    v35 = v917;
    if (!v40)
    {
      v691 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v692 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v693 = v691 >= 0 ? &v936 : v692;
      v694 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v693);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v694 + 24))(v694))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        sub_223532D10((double *)&qword_255788F20, v694, (int *)v946, "updated");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v695 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v695 = v936.__r_.__value_.__l.__size_;
  if (v695 >= 0x11)
  {
    v696 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v696 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v697 = v696->__r_.__value_.__r.__words[0];
    v698 = v696->__r_.__value_.__l.__size_;
    v699 = v696->__r_.__value_.__s.__data_[16];
    if (v697 == 0x6365722E64337663 && v698 == 0x73746174532E6E6FLL && v699 == 46)
    {
      v702 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v703 = &v936;
      else
        v703 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v704 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v704 = v936.__r_.__value_.__l.__size_;
      sub_223532E4C(v702, v703, v704, v946, (uint64_t)"updated", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v705 = sub_2241471F8();
    v706 = v705[2];
    if (!v706)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v706 = v705[2];
    }
    v707 = *(_QWORD *)(v706 + 64);
    v708 = (std::mutex *)(v707 + 32);
    std::mutex::lock((std::mutex *)(v707 + 32));
    v710 = *(_QWORD *)(v707 + 96);
    v709 = *(_QWORD *)(v707 + 104);
    std::mutex::unlock(v708);
    v40 = v710 == v709;
    v35 = v917;
    if (!v40)
    {
      v711 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v712 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v713 = v711 >= 0 ? &v936 : v712;
      v714 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v713);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v714 + 24))(v714))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        sub_223875D70((double *)&qword_255788F20, v714, &v922, "relocalized");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v715 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v715 = v936.__r_.__value_.__l.__size_;
  if (v715 >= 0x11)
  {
    v716 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v716 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v717 = v716->__r_.__value_.__r.__words[0];
    v718 = v716->__r_.__value_.__l.__size_;
    v719 = v716->__r_.__value_.__s.__data_[16];
    if (v717 == 0x6365722E64337663 && v718 == 0x73746174532E6E6FLL && v719 == 46)
    {
      v722 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v723 = &v936;
      else
        v723 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v724 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v724 = v936.__r_.__value_.__l.__size_;
      sub_223532E4C(v722, v723, v724, (unsigned int *)&v922, (uint64_t)"relocalized", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v725 = sub_2241471F8();
    v726 = v725[2];
    if (!v726)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v726 = v725[2];
    }
    v727 = *(_QWORD *)(v726 + 64);
    v728 = (std::mutex *)(v727 + 32);
    std::mutex::lock((std::mutex *)(v727 + 32));
    v730 = *(_QWORD *)(v727 + 96);
    v729 = *(_QWORD *)(v727 + 104);
    std::mutex::unlock(v728);
    v40 = v730 == v729;
    v35 = v917;
    if (!v40)
    {
      v731 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v732 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v733 = v731 >= 0 ? &v936 : v732;
      v734 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v733);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v734 + 24))(v734))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        sub_223875EAC((double *)&qword_255788F20, v734, &v920, "external");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v735 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v735 = v936.__r_.__value_.__l.__size_;
  if (v735 >= 0x11)
  {
    v736 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v736 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v737 = v736->__r_.__value_.__r.__words[0];
    v738 = v736->__r_.__value_.__l.__size_;
    v739 = v736->__r_.__value_.__s.__data_[16];
    if (v737 == 0x6365722E64337663 && v738 == 0x73746174532E6E6FLL && v739 == 46)
    {
      v742 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v743 = &v936;
      else
        v743 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v744 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v744 = v936.__r_.__value_.__l.__size_;
      sub_223532E4C(v742, v743, v744, (unsigned int *)&v920, (uint64_t)"external", 8);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v745 = sub_2241471F8();
    v746 = v745[2];
    if (!v746)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v746 = v745[2];
    }
    v747 = *(_QWORD *)(v746 + 64);
    v748 = (std::mutex *)(v747 + 32);
    std::mutex::lock((std::mutex *)(v747 + 32));
    v750 = *(_QWORD *)(v747 + 96);
    v749 = *(_QWORD *)(v747 + 104);
    std::mutex::unlock(v748);
    v40 = v750 == v749;
    v35 = v917;
    if (!v40)
    {
      v751 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v752 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v753 = v751 >= 0 ? &v936 : v752;
      v754 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v753);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v754 + 24))(v754))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        sub_22356511C((double *)&qword_255788F20, v754, &v921, "removed");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v755 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v755 = v936.__r_.__value_.__l.__size_;
  if (v755 >= 0x11)
  {
    v756 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v756 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v757 = v756->__r_.__value_.__r.__words[0];
    v758 = v756->__r_.__value_.__l.__size_;
    v759 = v756->__r_.__value_.__s.__data_[16];
    if (v757 == 0x6365722E64337663 && v758 == 0x73746174532E6E6FLL && v759 == 46)
    {
      v762 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v763 = &v936;
      else
        v763 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v764 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v764 = v936.__r_.__value_.__l.__size_;
      sub_223532E4C(v762, v763, v764, (unsigned int *)&v921, (uint64_t)"removed", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.slam_count";
  *(_QWORD *)&object[24] = 27;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v936);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v765 = sub_2241471F8();
    v766 = v765[2];
    if (!v766)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v766 = v765[2];
    }
    v767 = *(_QWORD *)(v766 + 64);
    v768 = (std::mutex *)(v767 + 32);
    std::mutex::lock((std::mutex *)(v767 + 32));
    v770 = *(_QWORD *)(v767 + 96);
    v769 = *(_QWORD *)(v767 + 104);
    std::mutex::unlock(v768);
    v40 = v770 == v769;
    v35 = v917;
    if (!v40)
    {
      v771 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      v772 = (std::string *)v936.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v773 = v771 >= 0 ? &v936 : v772;
      v774 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v773);
      v35 = v917;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v774 + 24))(v774))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v930[0] = (void *)((uint64_t)(v189[20] - v189[19]) >> 4);
        sub_223875FE8((double *)&qword_255788F20, v774, (uint64_t *)v930, "nearby");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v775 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
  if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v775 = v936.__r_.__value_.__l.__size_;
  if (v775 >= 0x11)
  {
    v776 = &v936;
    if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v776 = (std::string *)v936.__r_.__value_.__r.__words[0];
    v777 = v776->__r_.__value_.__r.__words[0];
    v778 = v776->__r_.__value_.__l.__size_;
    v779 = v776->__r_.__value_.__s.__data_[16];
    if (v777 == 0x6365722E64337663 && v778 == 0x73746174532E6E6FLL && v779 == 46)
    {
      v782 = sub_223187510();
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v783 = &v936;
      else
        v783 = (std::string *)v936.__r_.__value_.__r.__words[0];
      if ((v936.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v784 = HIBYTE(v936.__r_.__value_.__r.__words[2]);
      else
        v784 = v936.__r_.__value_.__l.__size_;
      v930[0] = (void *)((uint64_t)(v189[20] - v189[19]) >> 4);
      sub_22318760C((uint64_t *)v782, v783, v784, (uint64_t *)v930, (uint64_t)"nearby", 6);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  kdebug_trace();
  sub_22384BA54(v943);
  v785 = *v395;
  v786 = *(_QWORD *)(v35 + 1888);
  v788 = (void *)v189[1];
  v787 = v189[2];
  v789 = v189[8];
  v911 = v189[17];
  v913 = v189[7];
  v908 = v189[16];
  v791 = v189[13];
  v790 = v189[14];
  v793 = v189 + 19;
  v792 = v189[19];
  v902 = v793[1];
  v904 = v790;
  v934 = (void **)v943[0];
  if (**((int **)v943[0] + 7) > 3)
    goto LABEL_1456;
  v794 = atomic_load((unsigned __int8 *)&qword_2540CC8B0);
  if ((v794 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC8B0))
  {
    qword_2540CC8B8 = 0;
    qword_2540CC8C0 = 0;
    v881 = operator new(0x78uLL);
    v881[1] = 0;
    v881[2] = 0;
    *((_BYTE *)v881 + 24) = 0;
    *v881 = &off_24EC5B3D0;
    *((_BYTE *)v881 + 112) = 0;
    qword_2540CC8B8 = (uint64_t)(v881 + 3);
    qword_2540CC8C0 = (uint64_t)v881;
    __cxa_atexit((void (*)(void *))sub_223889F18, &qword_2540CC8B8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CC8B0);
    LODWORD(v34) = v906;
    v35 = v917;
  }
  v795 = *(_QWORD *)(v35 + 1888);
  v796 = (uint64_t)(v914[2] - v914[1]) >> 4;
  v797 = (uint64_t)(v914[8] - v914[7]) >> 4;
  v798 = (uint64_t)(v914[17] - v914[16]) >> 4;
  v799 = (uint64_t)(v914[14] - v914[13]) >> 4;
  v800 = (uint64_t)(v914[20] - v914[19]) >> 4;
  v801 = v946[0];
  v802 = v922;
  v803 = v920;
  v804 = v921;
  *(_QWORD *)&v805 = v929;
  v806 = *(_QWORD *)v928;
  v807 = *(_DWORD *)&v928[8];
  v808 = qword_2540CC8B8;
  if (!*(_BYTE *)(qword_2540CC8B8 + 88))
  {
LABEL_1367:
    *(_QWORD *)v808 = v795;
    *(_QWORD *)(v808 + 8) = v796;
    *(_QWORD *)(v808 + 16) = v797;
    *(_QWORD *)(v808 + 24) = v798;
    *(_QWORD *)(v808 + 32) = v799;
    *(_DWORD *)(v808 + 40) = v801;
    *(_DWORD *)(v808 + 44) = v802;
    *(_DWORD *)(v808 + 48) = v803;
    *(_DWORD *)(v808 + 52) = v804;
    *(_QWORD *)(v808 + 56) = v800;
    *(_DWORD *)(v808 + 64) = v34;
    *((_QWORD *)&v805 + 1) = v806;
    *(_OWORD *)(v808 + 68) = v805;
    *(_DWORD *)(v808 + 84) = v807;
    *(_BYTE *)(v808 + 88) = 1;
    v809 = *((unsigned __int8 *)v934 + 72);
    v810 = sub_22322F254((uint64_t)v934, "OSLogSurrogateAppender", 1, 0);
    v811 = v810;
    if (!v809 && !v810)
      goto LABEL_1456;
    __dst = v789;
    v898 = v788;
    v915 = v787;
    v918 = v786;
    v894 = v809;
    v936.__r_.__value_.__r.__words[0] = (std::string::size_type)&v934;
    v936.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v936.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v937 = 3;
    v938 = "unknown file";
    v939 = 1114;
    v942 = 0;
    v940 = "unknown function";
    v941 = 0;
    v812 = *(_QWORD *)v936.__r_.__value_.__l.__data_;
    v813 = (const char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 16);
    v893 = v813;
    if (*(char *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v813 = *(const char **)(v812 + 16);
      v814 = *(_QWORD *)(v812 + 24);
      v816 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v816 & 1) != 0)
        goto LABEL_1375;
    }
    else
    {
      v814 = *(unsigned __int8 *)(*(_QWORD *)v936.__r_.__value_.__l.__data_ + 39);
      v815 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v815 & 1) != 0)
        goto LABEL_1375;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_1375:
    if (byte_255788F40[23] >= 0)
      v817 = byte_255788F40;
    else
      v817 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v818 = byte_255788F40[23];
    else
      v818 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v817, v813);
    v819 = &object[8];
    if (v818 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v818 >= 0x17)
    {
      v820 = (v818 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v818 | 7) != 0x17)
        v820 = v818 | 7;
      v821 = v820 + 1;
      v819 = operator new(v820 + 1);
      *(_QWORD *)&object[24] = v821 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v819;
      *(_QWORD *)&object[16] = v818;
    }
    else
    {
      object[31] = v818;
      if (!v818)
      {
LABEL_1389:
        v819[v818] = 0;
        object[32] = 1;
        v822 = &object[40];
        if (v814 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v814 >= 0x17)
        {
          v824 = (v814 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v814 | 7) != 0x17)
            v824 = v814 | 7;
          v825 = v824 + 1;
          v822 = operator new(v824 + 1);
          *(_QWORD *)&object[56] = v825 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v822;
          *(_QWORD *)&object[48] = v814;
        }
        else
        {
          object[63] = v814;
          if (!v814)
          {
            object[40] = 0;
            LOBYTE(v948) = 1;
            v823 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_1393;
            goto LABEL_1399;
          }
        }
        memmove(v822, v813, v814);
        v822[v814] = 0;
        LOBYTE(v948) = 1;
        v823 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_1393:
          if (!object[32])
            goto LABEL_1402;
          goto LABEL_1400;
        }
LABEL_1399:
        operator delete(*(void **)&object[40]);
        if (!object[32])
        {
LABEL_1402:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          v826 = v904 - v791;
          v827 = v902 - v792;
          v828 = (v915 - (uint64_t)v898) >> 4;
          v829 = (__dst - v913) >> 4;
          v830 = (v911 - v908) >> 4;
          v831 = v826 >> 4;
          v832 = v827 >> 4;
          v833 = (double)v785 / 1000000000.0;
          if (v811 && *(_QWORD *)(v811 + 24))
          {
            v916 = v827 >> 4;
            v834 = v826 >> 4;
            v835 = _os_log_pack_size();
            v836 = (std::__shared_weak_count_vtbl *)operator new(v835, (std::align_val_t)8uLL);
            v837 = (std::__shared_weak_count *)operator new();
            v838 = v837;
            v837->__shared_owners_ = 0;
            v839 = (unint64_t *)&v837->__shared_owners_;
            v837->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v837->__shared_weak_owners_ = 0;
            v837[1].__vftable = v836;
            *(_QWORD *)object = v836;
            *(_QWORD *)&object[8] = v836;
            *(_QWORD *)&object[16] = v837;
            do
              v840 = __ldxr(v839);
            while (__stxr(v840 + 1, v839));
            memset(&object[24], 0, 24);
            do
              v841 = __ldaxr(v839);
            while (__stlxr(v841 - 1, v839));
            if (!v841)
            {
              ((void (*)(std::__shared_weak_count *))v837->__on_zero_shared)(v837);
              std::__shared_weak_count::__release_weak(v838);
            }
            v842 = _os_log_pack_fill();
            v843 = v946[0];
            v844 = v920;
            v845 = v921;
            v846 = v929;
            v847 = HIDWORD(v929);
            v848 = v922;
            v849 = *(_DWORD *)v928;
            v850 = *(_DWORD *)&v928[4];
            v851 = *(_DWORD *)&v928[8];
            *(_DWORD *)v842 = 134222080;
            *(double *)(v842 + 4) = v833;
            *(_WORD *)(v842 + 12) = 2048;
            *(_QWORD *)(v842 + 14) = v918;
            *(_WORD *)(v842 + 22) = 2048;
            *(_QWORD *)(v842 + 24) = v828;
            *(_WORD *)(v842 + 32) = 2048;
            *(_QWORD *)(v842 + 34) = (__dst - v913) >> 4;
            *(_WORD *)(v842 + 42) = 2048;
            *(_QWORD *)(v842 + 44) = v830;
            *(_WORD *)(v842 + 52) = 2048;
            *(_QWORD *)(v842 + 54) = v834;
            *(_WORD *)(v842 + 62) = 1024;
            *(_DWORD *)(v842 + 64) = v843;
            *(_WORD *)(v842 + 68) = 1024;
            *(_DWORD *)(v842 + 70) = v848;
            *(_WORD *)(v842 + 74) = 1024;
            *(_DWORD *)(v842 + 76) = v844;
            *(_WORD *)(v842 + 80) = 1024;
            *(_DWORD *)(v842 + 82) = v845;
            *(_WORD *)(v842 + 86) = 2048;
            *(_QWORD *)(v842 + 88) = v916;
            *(_WORD *)(v842 + 96) = 1024;
            *(_DWORD *)(v842 + 98) = v906;
            *(_WORD *)(v842 + 102) = 1024;
            *(_DWORD *)(v842 + 104) = v846;
            *(_WORD *)(v842 + 108) = 1024;
            *(_DWORD *)(v842 + 110) = v847;
            *(_WORD *)(v842 + 114) = 1024;
            *(_DWORD *)(v842 + 116) = v849;
            *(_WORD *)(v842 + 120) = 1024;
            *(_DWORD *)(v842 + 122) = v850;
            *(_WORD *)(v842 + 126) = 1024;
            *(_DWORD *)(v842 + 128) = v851;
            v852 = (char *)operator new();
            v853 = *(unsigned __int8 *)(v812 + 39);
            v854 = v893;
            if ((v853 & 0x80u) != 0)
            {
              v854 = *(const char **)(v812 + 16);
              v853 = *(_QWORD *)(v812 + 24);
            }
            *(_OWORD *)v852 = *(_OWORD *)object;
            *((_QWORD *)v852 + 2) = *(_QWORD *)&object[16];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v852 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v852 + 5) = v854;
            *((_QWORD *)v852 + 6) = v853;
            v852[56] = 1;
            *(_QWORD *)__s = 0;
            v930[0] = v852;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v811 + 24) + 40))(*(_QWORD *)(v811 + 24), v930);
            v855 = v930[0];
            v930[0] = 0;
            v829 = (__dst - v913) >> 4;
            v831 = v834;
            v832 = v916;
            v856 = v918;
            if (v855)
            {
              v857 = (std::__shared_weak_count *)*((_QWORD *)v855 + 4);
              if (v857)
              {
                v858 = (unint64_t *)&v857->__shared_owners_;
                do
                  v859 = __ldaxr(v858);
                while (__stlxr(v859 - 1, v858));
                if (!v859)
                {
                  ((void (*)(std::__shared_weak_count *))v857->__on_zero_shared)(v857);
                  std::__shared_weak_count::__release_weak(v857);
                }
              }
              v860 = (std::__shared_weak_count *)*((_QWORD *)v855 + 2);
              if (v860)
              {
                v861 = (unint64_t *)&v860->__shared_owners_;
                do
                  v862 = __ldaxr(v861);
                while (__stlxr(v862 - 1, v861));
                if (!v862)
                {
                  ((void (*)(std::__shared_weak_count *))v860->__on_zero_shared)(v860);
                  std::__shared_weak_count::__release_weak(v860);
                }
              }
              MEMORY[0x227684CE8](v855, 0x10F0C40B62ED6C6);
              v863 = *(_QWORD *)__s;
              *(_QWORD *)__s = 0;
              if (v863)
              {
                v864 = *(std::__shared_weak_count **)(v863 + 32);
                if (v864)
                {
                  v865 = (unint64_t *)&v864->__shared_owners_;
                  do
                    v866 = __ldaxr(v865);
                  while (__stlxr(v866 - 1, v865));
                  if (!v866)
                  {
                    ((void (*)(std::__shared_weak_count *))v864->__on_zero_shared)(v864);
                    std::__shared_weak_count::__release_weak(v864);
                  }
                }
                v867 = *(std::__shared_weak_count **)(v863 + 16);
                if (v867)
                {
                  v868 = (unint64_t *)&v867->__shared_owners_;
                  do
                    v869 = __ldaxr(v868);
                  while (__stlxr(v869 - 1, v868));
                  if (!v869)
                  {
                    ((void (*)(std::__shared_weak_count *))v867->__on_zero_shared)(v867);
                    std::__shared_weak_count::__release_weak(v867);
                  }
                }
                MEMORY[0x227684CE8](v863, 0x10F0C40B62ED6C6);
              }
            }
            v870 = *(std::__shared_weak_count **)&object[32];
            v871 = v894;
            if (*(_QWORD *)&object[32])
            {
              v872 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v873 = __ldaxr(v872);
              while (__stlxr(v873 - 1, v872));
              if (!v873)
              {
                ((void (*)(std::__shared_weak_count *))v870->__on_zero_shared)(v870);
                std::__shared_weak_count::__release_weak(v870);
              }
            }
            v874 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v875 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v876 = __ldaxr(v875);
              while (__stlxr(v876 - 1, v875));
              if (!v876)
              {
                ((void (*)(std::__shared_weak_count *))v874->__on_zero_shared)(v874);
                std::__shared_weak_count::__release_weak(v874);
              }
            }
          }
          else
          {
            os_log_type_enabled(v823, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134222080;
            *(double *)&object[4] = v833;
            *(_WORD *)&object[12] = 2048;
            v856 = v918;
            *(_QWORD *)&object[14] = v918;
            *(_WORD *)&object[22] = 2048;
            *(_QWORD *)&object[24] = (v915 - (uint64_t)v898) >> 4;
            *(_WORD *)&object[32] = 2048;
            *(_QWORD *)&object[34] = (__dst - v913) >> 4;
            *(_WORD *)&object[42] = 2048;
            *(_QWORD *)&object[44] = (v911 - v908) >> 4;
            *(_WORD *)&object[52] = 2048;
            *(_QWORD *)&object[54] = v831;
            *(_WORD *)&object[62] = 1024;
            v948 = v946[0];
            v949 = 1024;
            v950 = v922;
            v951 = 1024;
            v952 = v920;
            v953 = 1024;
            v954 = v921;
            v955 = 2048;
            v956 = v832;
            v957 = 1024;
            v958 = v906;
            v959 = 1024;
            v960 = v929;
            v961 = 1024;
            v962 = HIDWORD(v929);
            v963 = 1024;
            v964 = *(_DWORD *)v928;
            v965 = 1024;
            v966 = *(_DWORD *)&v928[4];
            v967 = 1024;
            v968 = *(_DWORD *)&v928[8];
            v877 = (void *)_os_log_send_and_compose_impl();
            v871 = v894;
            if (v877)
              free(v877);
          }
          if (v871)
          {
            sub_22322C138((uint64_t)&v936, "KFE:PUpdate:t:%f, RA:%zu, AN:%lu, AU:%lu, AE:%lu, AR:%lu, NU:%u, NRL:%u, NE:%u, NR:%u, NA:%zu, UAU:%u, TAU:%u, UuAU:%u, UAE:%u, IAE:%u, UAR:%u", v833, v856, v828, v829, v830, v831, v946[0], v922, v920, v921, v832, v906, v929, HIDWORD(v929), *(_DWORD *)v928, *(_DWORD *)&v928[4],
              *(_DWORD *)&v928[8]);
            sub_223182C08((uint64_t)&v936);
          }
          sub_223182C08((uint64_t)&v936);
          v878 = v942;
          if (v942)
          {
            v879 = (unint64_t *)&v942->__shared_owners_;
            do
              v880 = __ldaxr(v879);
            while (__stlxr(v880 - 1, v879));
            if (!v880)
            {
              ((void (*)(std::__shared_weak_count *))v878->__on_zero_shared)(v878);
              std::__shared_weak_count::__release_weak(v878);
            }
          }
          goto LABEL_1456;
        }
LABEL_1400:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        goto LABEL_1402;
      }
    }
    memmove(v819, v817, v818);
    goto LABEL_1389;
  }
  if (*(_QWORD *)qword_2540CC8B8 != v795
    || *(_QWORD *)(qword_2540CC8B8 + 8) != v796
    || *(_QWORD *)(qword_2540CC8B8 + 16) != v797
    || *(_QWORD *)(qword_2540CC8B8 + 24) != v798
    || *(_QWORD *)(qword_2540CC8B8 + 32) != v799
    || *(_DWORD *)(qword_2540CC8B8 + 40) != v946[0]
    || *(_DWORD *)(qword_2540CC8B8 + 44) != v922
    || *(_DWORD *)(qword_2540CC8B8 + 48) != v920
    || *(_DWORD *)(qword_2540CC8B8 + 52) != v921
    || *(_QWORD *)(qword_2540CC8B8 + 56) != v800
    || *(_DWORD *)(qword_2540CC8B8 + 64) != (_DWORD)v34
    || *(_DWORD *)(qword_2540CC8B8 + 68) != (_DWORD)v929
    || *(_OWORD *)(qword_2540CC8B8 + 72) != __PAIR128__(*(unint64_t *)&v928[4], __PAIR64__(*(unsigned int *)v928, HIDWORD(v929))))
  {
    *(_BYTE *)(qword_2540CC8B8 + 88) = 0;
    goto LABEL_1367;
  }
LABEL_1456:
  if (v926)
  {
    v927 = (uint64_t *)v926;
    operator delete(v926);
  }
  sub_223198030((uint64_t)&v923, v924);
}

void sub_22387526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (LOBYTE(STACK[0x2B8]))
  {
    if (SLOBYTE(STACK[0x2B7]) < 0)
      operator delete((void *)STACK[0x2A0]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x208]);
  sub_223198030((uint64_t)&STACK[0x250], (_QWORD *)STACK[0x258]);
  sub_2238365B4((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_223875BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    sub_2238365B4((uint64_t)&a54);
    _Unwind_Resume(a1);
  }
  sub_2238365B4((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_223875BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v55;

  v55 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v55;
    operator delete(v55);
    sub_2238365B4((uint64_t)&a54);
    _Unwind_Resume(a1);
  }
  sub_2238365B4((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_223875BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v55;

  v55 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v55;
    operator delete(v55);
    sub_2238365B4((uint64_t)&a54);
    _Unwind_Resume(a1);
  }
  sub_2238365B4((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_223875C34(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223875D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223875D70(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223875E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223875EAC(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223875FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223875FE8(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223876108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223876124@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char ***v36;
  _QWORD *v37;
  char ***v38;
  _QWORD *v39;
  char **v40;
  char ***v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char **v47;
  char ***v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char ***v54;
  uint64_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  char **v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _OWORD *v101;
  int64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  __int128 *v108;
  uint64_t *v109;
  _QWORD *v110;
  __int128 *v111;
  char v112;
  char v113;
  unint64_t v114;
  char **v115;
  _QWORD *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unsigned int *v134;
  uint64_t v135;
  _OWORD *__p;
  char v137[32];
  char *v138;
  char **v139;
  _BYTE v140[24];
  _BYTE *v141;
  char **v142;
  _QWORD v143[3];
  _QWORD *v144;
  char **v145;
  _QWORD v146[3];
  _QWORD *v147;
  char **v148;
  _QWORD v149[3];
  _QWORD *v150;
  char **v151;
  _QWORD v152[3];
  _QWORD *v153;
  char **v154;
  _QWORD v155[3];
  _QWORD *v156;
  char **v157;
  _QWORD v158[3];
  _QWORD *v159;
  char **v160;
  _QWORD v161[3];
  _QWORD *v162;
  char **v163;
  _QWORD v164[3];
  _QWORD *v165;
  char **v166;
  _QWORD v167[3];
  _QWORD *v168;
  char **v169;
  _QWORD v170[3];
  _QWORD *v171;
  char **v172;
  _QWORD v173[3];
  _QWORD *v174;
  char **v175;
  _QWORD v176[3];
  _QWORD *v177;
  char **v178;
  std::__shared_weak_count *v179;
  char **v180;
  uint64_t *v181;
  char **v182;
  _QWORD v183[3];
  _QWORD *v184;
  char **v185;
  _QWORD v186[3];
  _QWORD *v187;
  char **v188;
  _QWORD v189[3];
  _QWORD *v190;
  char **v191;
  _QWORD v192[3];
  _QWORD *v193;
  char **v194;
  _QWORD v195[3];
  _QWORD *v196;
  char **v197;
  _QWORD v198[3];
  _QWORD *v199;
  char **v200;
  _QWORD v201[3];
  uint64_t *v202;
  char **v203;
  _QWORD v204[3];
  _QWORD *v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223840028(v137, *(_QWORD *)(a1 + 1224), *(_QWORD *)(a1 + 1224));
  v6 = (uint64_t)v138;
  v145 = *(char ***)v137;
  v7 = v146;
  if (!v138)
    goto LABEL_4;
  if (v138 != &v137[8])
  {
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)v138 + 16))();
LABEL_4:
    v147 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v147 = v146;
  (*(void (**)(void))(*(_QWORD *)v138 + 24))();
LABEL_6:
  v8 = (uint64_t)v141;
  v142 = v139;
  v9 = v143;
  if (!v141)
  {
LABEL_9:
    v144 = (_QWORD *)v8;
    goto LABEL_11;
  }
  if (v141 != v140)
  {
    v8 = (*(uint64_t (**)(void))(*(_QWORD *)v141 + 16))();
    goto LABEL_9;
  }
  v144 = v143;
  (*(void (**)(void))(*(_QWORD *)v141 + 24))();
LABEL_11:
  __p = 0;
  v10 = (uint64_t)v147;
  v157 = v145;
  v11 = v158;
  if (!v147)
  {
LABEL_14:
    v159 = (_QWORD *)v10;
    goto LABEL_16;
  }
  if (v147 != v146)
  {
    v10 = (*(uint64_t (**)(void))(*v147 + 16))();
    goto LABEL_14;
  }
  v159 = v158;
  (*(void (**)(_QWORD *, _QWORD *))(v146[0] + 24))(v146, v158);
LABEL_16:
  v12 = (uint64_t)v144;
  v154 = v142;
  v13 = v155;
  if (!v144)
  {
LABEL_19:
    v156 = (_QWORD *)v12;
    goto LABEL_21;
  }
  if (v144 != v143)
  {
    v12 = (*(uint64_t (**)(void))(*v144 + 16))();
    goto LABEL_19;
  }
  v156 = v155;
  (*(void (**)(_QWORD *, _QWORD *))(v143[0] + 24))(v143, v155);
LABEL_21:
  v14 = (uint64_t)v159;
  v178 = v157;
  v15 = (uint64_t *)&v179;
  if (!v159)
  {
LABEL_24:
    v181 = (uint64_t *)v14;
    goto LABEL_26;
  }
  if (v159 != v158)
  {
    v14 = (*(uint64_t (**)(void))(*v159 + 16))();
    goto LABEL_24;
  }
  v181 = (uint64_t *)&v179;
  (*(void (**)(_QWORD *, std::__shared_weak_count **))(v158[0] + 24))(v158, &v179);
LABEL_26:
  v16 = (uint64_t)v156;
  v203 = v154;
  v17 = v204;
  if (!v156)
  {
LABEL_29:
    v205 = (_QWORD *)v16;
    goto LABEL_31;
  }
  if (v156 != v155)
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*v156 + 16))(v156);
    goto LABEL_29;
  }
  v205 = v204;
  (*(void (**)(_QWORD *, _QWORD *))(v155[0] + 24))(v155, v204);
LABEL_31:
  v18 = (char *)v178;
  if (v178 != v203)
  {
    v19 = 0;
    do
    {
      ++v19;
      v18 = *(char **)v18;
    }
    while (v18 != (char *)v203);
    v178 = v203;
    v20 = v205;
    if (v205 != v204)
      goto LABEL_35;
LABEL_38:
    v21 = 4;
    goto LABEL_39;
  }
  v19 = 0;
  v20 = v205;
  if (v205 == v204)
    goto LABEL_38;
LABEL_35:
  if (!v20)
    goto LABEL_40;
  v21 = 5;
  v17 = v20;
LABEL_39:
  (*(void (**)(_QWORD *))(*v17 + 8 * v21))(v17);
LABEL_40:
  if (v181 == (uint64_t *)&v179)
  {
    v22 = 4;
  }
  else
  {
    if (!v181)
      goto LABEL_45;
    v22 = 5;
    v15 = v181;
  }
  (*(void (**)(uint64_t *))(*v15 + 8 * v22))(v15);
LABEL_45:
  if (v156 == v155)
  {
    v23 = 4;
  }
  else
  {
    if (!v156)
      goto LABEL_50;
    v23 = 5;
    v13 = v156;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v23))(v13);
LABEL_50:
  if (v159 == v158)
  {
    v24 = 4;
  }
  else
  {
    if (!v159)
      goto LABEL_55;
    v24 = 5;
    v11 = v159;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v24))(v11);
LABEL_55:
  v25 = (uint64_t)v147;
  v151 = v145;
  v26 = v152;
  if (!v147)
  {
LABEL_58:
    v153 = (_QWORD *)v25;
    goto LABEL_60;
  }
  if (v147 != v146)
  {
    v25 = (*(uint64_t (**)(void))(*v147 + 16))();
    goto LABEL_58;
  }
  v153 = v152;
  (*(void (**)(_QWORD *, _QWORD *))(v146[0] + 24))(v146, v152);
LABEL_60:
  v27 = (uint64_t)v144;
  v148 = v142;
  v28 = v149;
  if (!v144)
  {
LABEL_63:
    v150 = (_QWORD *)v27;
    goto LABEL_65;
  }
  if (v144 != v143)
  {
    v27 = (*(uint64_t (**)(void))(*v144 + 16))();
    goto LABEL_63;
  }
  v150 = v149;
  (*(void (**)(_QWORD *, _QWORD *))(v143[0] + 24))(v143, v149);
LABEL_65:
  v135 = a1;
  if (!v19)
  {
    v29 = 0;
    goto LABEL_251;
  }
  if (v19 >> 57)
    sub_22316E078();
  v29 = operator new(v19 << 7);
  __p = v29;
  v30 = (uint64_t)v153;
  v163 = v151;
  if (!v153)
    goto LABEL_70;
  if (v153 != v152)
  {
    v30 = (*(uint64_t (**)(void))(*v153 + 16))();
LABEL_70:
    v165 = (_QWORD *)v30;
    goto LABEL_73;
  }
  v165 = v164;
  (*(void (**)(_QWORD *, _QWORD *))(v152[0] + 24))(v152, v164);
LABEL_73:
  v31 = (uint64_t)v150;
  v160 = v148;
  if (!v150)
  {
LABEL_76:
    v162 = (_QWORD *)v31;
    goto LABEL_78;
  }
  if (v150 != v149)
  {
    v31 = (*(uint64_t (**)(void))(*v150 + 16))();
    goto LABEL_76;
  }
  v162 = v161;
  (*(void (**)(_QWORD *, _QWORD *))(v149[0] + 24))(v149, v161);
LABEL_78:
  v32 = (uint64_t)v165;
  v169 = v163;
  if (!v165)
  {
LABEL_81:
    v171 = (_QWORD *)v32;
    goto LABEL_83;
  }
  if (v165 != v164)
  {
    v32 = (*(uint64_t (**)(void))(*v165 + 16))();
    goto LABEL_81;
  }
  v171 = v170;
  (*(void (**)(_QWORD *, _QWORD *))(v164[0] + 24))(v164, v170);
LABEL_83:
  v33 = (uint64_t)v162;
  v166 = v160;
  if (!v162)
  {
LABEL_86:
    v168 = (_QWORD *)v33;
    goto LABEL_88;
  }
  if (v162 != v161)
  {
    v33 = (*(uint64_t (**)(void))(*v162 + 16))();
    goto LABEL_86;
  }
  v168 = v167;
  (*(void (**)(_QWORD *))(v161[0] + 24))(v161);
LABEL_88:
  v34 = (uint64_t)v171;
  v175 = v169;
  if (!v171)
  {
LABEL_91:
    v177 = (_QWORD *)v34;
    goto LABEL_93;
  }
  if (v171 != v170)
  {
    v34 = (*(uint64_t (**)(void))(*v171 + 16))();
    goto LABEL_91;
  }
  v177 = v176;
  (*(void (**)(_QWORD *, _QWORD *))(v170[0] + 24))(v170, v176);
LABEL_93:
  v35 = (uint64_t)v168;
  v172 = v166;
  if (!v168)
  {
LABEL_96:
    v174 = (_QWORD *)v35;
    goto LABEL_98;
  }
  if (v168 != v167)
  {
    v35 = (*(uint64_t (**)(void))(*v168 + 16))();
    goto LABEL_96;
  }
  v174 = v173;
  (*(void (**)(_QWORD *, _QWORD *))(v167[0] + 24))(v167, v173);
LABEL_98:
  v188 = v175;
  v36 = &v188;
  v37 = v189;
  if (!v177)
  {
LABEL_101:
    v36[4] = 0;
    goto LABEL_103;
  }
  if (v177 != v176)
  {
    v36 = &v175;
    v190 = v177;
    goto LABEL_101;
  }
  v190 = v189;
  (*(void (**)(_QWORD *, _QWORD *))(v176[0] + 24))(v176, v189);
LABEL_103:
  v185 = v172;
  v38 = &v185;
  v39 = v186;
  if (!v174)
  {
LABEL_106:
    v38[4] = 0;
    goto LABEL_108;
  }
  if (v174 != v173)
  {
    v38 = &v172;
    v187 = v174;
    goto LABEL_106;
  }
  v187 = v186;
  (*(void (**)(_QWORD *, _QWORD *))(v173[0] + 24))(v173, v186);
LABEL_108:
  v40 = v188;
  v197 = v188;
  v41 = &v197;
  v42 = v198;
  if (!v190)
    goto LABEL_111;
  if (v190 != v189)
  {
    v41 = &v188;
    v199 = v190;
LABEL_111:
    v41[4] = 0;
    v203 = v40;
    v43 = v204;
    v44 = v199;
    if (v199)
      goto LABEL_112;
LABEL_116:
    v205 = 0;
    v200 = v40;
    goto LABEL_117;
  }
  v199 = v198;
  (*(void (**)(_QWORD *, _QWORD *))(v189[0] + 24))(v189, v198);
  v40 = v197;
  v203 = v197;
  v43 = v204;
  v44 = v199;
  if (!v199)
    goto LABEL_116;
LABEL_112:
  if (v44 == v198)
  {
    v205 = v204;
    (*(void (**)(_QWORD *, _QWORD *))(v198[0] + 24))(v198, v204);
    v45 = v205;
    v200 = v203;
    if (v205)
      goto LABEL_119;
LABEL_117:
    v202 = 0;
    goto LABEL_122;
  }
  v45 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v44 + 16))(v44);
  v205 = v45;
  v200 = v203;
  if (!v45)
    goto LABEL_117;
LABEL_119:
  if (v45 == v204)
  {
    v202 = v201;
    (*(void (**)(_QWORD *))(v204[0] + 24))(v204);
  }
  else
  {
    v202 = v45;
    v205 = 0;
  }
LABEL_122:
  if (v205 == v204)
  {
    v46 = 4;
  }
  else
  {
    if (!v205)
      goto LABEL_127;
    v46 = 5;
    v43 = v205;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v46))(v43);
LABEL_127:
  v47 = v185;
  v191 = v185;
  v48 = &v191;
  v49 = v192;
  v134 = a2;
  if (!v187)
    goto LABEL_130;
  if (v187 != v186)
  {
    v48 = &v185;
    v193 = v187;
LABEL_130:
    v48[4] = 0;
    v203 = v47;
    v50 = v204;
    v51 = v193;
    if (v193)
      goto LABEL_131;
LABEL_135:
    v205 = 0;
    v194 = v47;
    goto LABEL_136;
  }
  v193 = v192;
  (*(void (**)(_QWORD *, _QWORD *))(v186[0] + 24))(v186, v192);
  v47 = v191;
  v203 = v191;
  v50 = v204;
  v51 = v193;
  if (!v193)
    goto LABEL_135;
LABEL_131:
  if (v51 == v192)
  {
    v205 = v204;
    (*(void (**)(_QWORD *, _QWORD *))(v192[0] + 24))(v192, v204);
    v52 = v205;
    v194 = v203;
    if (v205)
      goto LABEL_138;
LABEL_136:
    v196 = 0;
    goto LABEL_141;
  }
  v52 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v51 + 16))(v51);
  v205 = v52;
  v194 = v203;
  if (!v52)
    goto LABEL_136;
LABEL_138:
  if (v52 == v204)
  {
    v196 = v195;
    (*(void (**)(_QWORD *))(v204[0] + 24))(v204);
  }
  else
  {
    v196 = v52;
    v205 = 0;
  }
LABEL_141:
  if (v205 == v204)
  {
    v53 = 4;
  }
  else
  {
    if (!v205)
      goto LABEL_146;
    v53 = 5;
    v50 = v205;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v53))(v50);
LABEL_146:
  v178 = v200;
  v54 = &v178;
  v55 = (uint64_t *)&v179;
  if (!v202)
  {
LABEL_149:
    v54[4] = 0;
    goto LABEL_151;
  }
  v54 = &v200;
  if (v202 != v201)
  {
    v181 = v202;
    goto LABEL_149;
  }
  v181 = (uint64_t *)&v179;
  (*(void (**)(void))(v201[0] + 24))();
LABEL_151:
  v182 = v194;
  v56 = v183;
  if (v196)
  {
    if (v196 == v195)
    {
      v184 = v183;
      (*(void (**)(void))(v195[0] + 24))();
    }
    else
    {
      v184 = v196;
      v196 = 0;
    }
  }
  else
  {
    v184 = 0;
  }
  v57 = v196;
  if (v196 == v195)
  {
    v58 = 4;
    v57 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_161;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_161:
  if (v193 == v192)
  {
    v59 = 4;
  }
  else
  {
    if (!v193)
      goto LABEL_166;
    v59 = 5;
    v49 = v193;
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v59))(v49);
LABEL_166:
  v60 = v202;
  if (v202 == v201)
  {
    v62 = 4;
    v60 = v201;
    v61 = v161;
  }
  else
  {
    v61 = v161;
    if (!v202)
      goto LABEL_171;
    v62 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v62))();
LABEL_171:
  if (v199 == v198)
  {
    v63 = 4;
  }
  else
  {
    if (!v199)
      goto LABEL_176;
    v63 = 5;
    v42 = v199;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v63))(v42);
LABEL_176:
  if (v187 == v186)
  {
    v65 = 4;
    v64 = v170;
  }
  else
  {
    v64 = v170;
    if (!v187)
      goto LABEL_181;
    v65 = 5;
    v39 = v187;
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v65))(v39);
LABEL_181:
  if (v190 == v189)
  {
    v66 = 4;
  }
  else
  {
    if (!v190)
      goto LABEL_186;
    v66 = 5;
    v37 = v190;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v66))(v37);
LABEL_186:
  v67 = v173;
  if (v174 == v173)
  {
    v68 = 4;
  }
  else
  {
    if (!v174)
      goto LABEL_191;
    v68 = 5;
    v67 = v174;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_191:
  v69 = v176;
  if (v177 == v176)
  {
    v70 = 4;
  }
  else
  {
    if (!v177)
      goto LABEL_196;
    v70 = 5;
    v69 = v177;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_196:
  v71 = (uint64_t)v181;
  v203 = v178;
  v72 = v204;
  if (!v181)
  {
LABEL_199:
    v205 = (_QWORD *)v71;
    goto LABEL_201;
  }
  if (v181 != (uint64_t *)&v179)
  {
    v71 = (*(uint64_t (**)(void))(*v181 + 16))();
    goto LABEL_199;
  }
  v205 = v204;
  ((void (*)(std::__shared_weak_count **, _QWORD *))v179[1].__vftable)(&v179, v204);
LABEL_201:
  v73 = (uint64_t)v184;
  v200 = v182;
  v74 = v201;
  if (!v184)
  {
LABEL_204:
    v202 = (uint64_t *)v73;
    goto LABEL_206;
  }
  if (v184 != v183)
  {
    v73 = (*(uint64_t (**)(void))(*v184 + 16))();
    goto LABEL_204;
  }
  v202 = v201;
  (*(void (**)(_QWORD *, _QWORD *))(v183[0] + 24))(v183, v201);
LABEL_206:
  v75 = v203;
  if (v203 != v200)
  {
    v76 = v29;
    do
    {
      if (!v205)
        sub_223198474();
      v77 = (_OWORD *)(*(uint64_t (**)(_QWORD *, char **))(*v205 + 48))(v205, v75 + 2);
      *v76 = *v77;
      v78 = v77[1];
      v79 = v77[2];
      v80 = v77[4];
      v76[3] = v77[3];
      v76[4] = v80;
      v76[1] = v78;
      v76[2] = v79;
      v81 = v77[5];
      v82 = v77[7];
      v76[6] = v77[6];
      v76[7] = v82;
      v76[5] = v81;
      v75 = (char **)*v203;
      v203 = v75;
      v76 += 8;
    }
    while (v75 != v200);
    v29 = v76;
  }
  if (v202 == v201)
  {
    v83 = 4;
  }
  else
  {
    if (!v202)
      goto LABEL_216;
    v83 = 5;
    v74 = v202;
  }
  (*(void (**)(uint64_t *))(*v74 + 8 * v83))(v74);
LABEL_216:
  if (v205 == v204)
  {
    v84 = 4;
    v28 = v149;
  }
  else
  {
    v28 = v149;
    if (!v205)
      goto LABEL_221;
    v84 = 5;
    v72 = v205;
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v84))(v72);
LABEL_221:
  if (v184 == v183)
  {
    v86 = 4;
    v85 = v164;
  }
  else
  {
    v85 = v164;
    if (!v184)
      goto LABEL_226;
    v86 = 5;
    v56 = v184;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v86))(v56);
LABEL_226:
  if (v181 == (uint64_t *)&v179)
  {
    v87 = 4;
    v9 = v143;
    v7 = v146;
  }
  else
  {
    v9 = v143;
    v7 = v146;
    if (!v181)
      goto LABEL_231;
    v87 = 5;
    v55 = v181;
  }
  (*(void (**)(uint64_t *))(*v55 + 8 * v87))(v55);
LABEL_231:
  if (v168 == v167)
  {
    v88 = 4;
    a2 = v134;
    v89 = v167;
  }
  else
  {
    a2 = v134;
    if (!v168)
      goto LABEL_236;
    v88 = 5;
    v89 = v168;
  }
  (*(void (**)(void))(*v89 + 8 * v88))();
LABEL_236:
  if (v171 == v170)
  {
    v90 = 4;
  }
  else
  {
    if (!v171)
      goto LABEL_241;
    v90 = 5;
    v64 = v171;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v90))(v64);
LABEL_241:
  if (v162 == v161)
  {
    v91 = 4;
  }
  else
  {
    if (!v162)
      goto LABEL_246;
    v91 = 5;
    v61 = v162;
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v91))(v61);
LABEL_246:
  if (v165 == v164)
  {
    v92 = 4;
  }
  else
  {
    if (!v165)
      goto LABEL_251;
    v92 = 5;
    v85 = v165;
  }
  (*(void (**)(_QWORD *))(*v85 + 8 * v92))(v85);
LABEL_251:
  if (v150 == v149)
  {
    v93 = 4;
  }
  else
  {
    if (!v150)
      goto LABEL_256;
    v93 = 5;
    v28 = v150;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v93))(v28);
LABEL_256:
  if (v153 == v152)
  {
    v94 = 4;
  }
  else
  {
    if (!v153)
      goto LABEL_261;
    v94 = 5;
    v26 = v153;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v94))(v26);
LABEL_261:
  if (v144 == v143)
  {
    v95 = 4;
  }
  else
  {
    if (!v144)
      goto LABEL_266;
    v95 = 5;
    v9 = v144;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v95))(v9);
LABEL_266:
  if (v147 == v146)
  {
    v96 = 4;
  }
  else
  {
    if (!v147)
      goto LABEL_271;
    v96 = 5;
    v7 = v147;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v96))(v7);
LABEL_271:
  v97 = v141;
  if (v141 == v140)
  {
    v98 = 4;
    v97 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_276;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_276:
  v99 = v138;
  if (v138 == &v137[8])
  {
    v100 = 4;
    v99 = &v137[8];
  }
  else
  {
    if (!v138)
      goto LABEL_281;
    v100 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v99 + 8 * v100))();
LABEL_281:
  v101 = __p;
  v179 = 0;
  v178 = 0;
  v180 = 0;
  v102 = (char *)v29 - (char *)__p;
  if (v29 == __p)
  {
    v103 = 0;
  }
  else
  {
    if (v102 < 0)
      sub_22316E078();
    v178 = (char **)operator new((unint64_t)v102 >> 3);
    v179 = (std::__shared_weak_count *)v178;
    v180 = &v178[2 * (v102 >> 7)];
    v203 = (char **)&v178;
    do
    {
      *(_OWORD *)v137 = *v101;
      sub_2232E9564(&v203, v137);
      v101 += 8;
    }
    while (v101 != v29);
    v103 = (char *)v178;
    v102 = (int64_t)v179;
  }
  v104 = 126 - 2 * __clz((v102 - (uint64_t)v103) >> 4);
  v105 = v135;
  v178 = *(char ***)(v135 + 1224);
  if ((char *)v102 == v103)
    v106 = 0;
  else
    v106 = v104;
  sub_22383748C((unint64_t)v103, (uint64_t *)v102, &v178, v106, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((_BYTE *)a2 + 4))
    v107 = *a2;
  else
    v107 = (v102 - (uint64_t)v103) >> 4;
  if ((char *)v102 != v103)
  {
    v108 = (__int128 *)(v135 + 152);
    v109 = (uint64_t *)v103;
    do
    {
      if (0xEF7BDEF7BDEF7BDFLL * ((a3[1] - *a3) >> 3) >= v107)
        break;
      sub_22319597C(*(_QWORD *)(v105 + 1232), v109, &v178);
      if (v178)
      {
        v110 = sub_223822434(*(_QWORD **)(v105 + 1224), *v109, v109[1]);
        v111 = (__int128 *)(v110 + 2);
        v112 = *((_BYTE *)v110 + 113);
        v137[0] = v112;
        v113 = *((_BYTE *)v110 + 114);
        LOBYTE(v203) = v113;
        v114 = a3[1];
        v115 = v178;
        v116 = &v179->__vftable;
        if (v114 >= a3[2])
        {
          v128 = sub_223889FC8(a3, v110, (uint64_t)v178, (uint64_t)v179, v111, v110 + 10, v110 + 11, v108, v137, (char *)&v203);
        }
        else
        {
          if (v179)
          {
            p_shared_owners = (unint64_t *)&v179->__shared_owners_;
            do
              v118 = __ldxr(p_shared_owners);
            while (__stxr(v118 + 1, p_shared_owners));
          }
          *(_OWORD *)v114 = *(_OWORD *)v110;
          *(_QWORD *)(v114 + 16) = v115;
          *(_QWORD *)(v114 + 24) = v116;
          v119 = *v111;
          v120 = *((_OWORD *)v110 + 2);
          v121 = *((_OWORD *)v110 + 4);
          *(_OWORD *)(v114 + 64) = *((_OWORD *)v110 + 3);
          *(_OWORD *)(v114 + 80) = v121;
          *(_OWORD *)(v114 + 32) = v119;
          *(_OWORD *)(v114 + 48) = v120;
          *(_QWORD *)(v114 + 96) = v110[10];
          *(_QWORD *)(v114 + 104) = v110[11];
          v122 = *v108;
          v123 = *(_OWORD *)(v135 + 168);
          v124 = *(_OWORD *)(v135 + 200);
          *(_OWORD *)(v114 + 144) = *(_OWORD *)(v135 + 184);
          *(_OWORD *)(v114 + 160) = v124;
          *(_OWORD *)(v114 + 112) = v122;
          *(_OWORD *)(v114 + 128) = v123;
          v125 = *(_OWORD *)(v135 + 216);
          v126 = *(_OWORD *)(v135 + 232);
          v127 = *(_OWORD *)(v135 + 264);
          *(_OWORD *)(v114 + 208) = *(_OWORD *)(v135 + 248);
          *(_OWORD *)(v114 + 224) = v127;
          *(_OWORD *)(v114 + 176) = v125;
          *(_OWORD *)(v114 + 192) = v126;
          *(_BYTE *)(v114 + 240) = v112;
          *(_BYTE *)(v114 + 241) = v113;
          v128 = v114 + 248;
        }
        a3[1] = v128;
      }
      v129 = v105;
      v130 = v179;
      if (v179)
      {
        v131 = (unint64_t *)&v179->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      v109 += 2;
      v105 = v129;
    }
    while (v109 != (uint64_t *)v102);
    v102 = (int64_t)v103;
  }
  if (v102)
    operator delete((void *)v102);
  if (__p)
    operator delete(__p);
  return kdebug_trace();
}

void sub_2238772F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223877724(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  __int128 *v9;
  char v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t *v34;
  uint64_t *v35;

  sub_223865BC0((uint64_t)&v34, a1, a2);
  v5 = ((char *)v35 - (char *)v34) >> 4;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_2236581AC((uint64_t)a3, v5);
  v6 = v34;
  v7 = v35;
  if (v34 != v35)
  {
    do
    {
      sub_22319597C(*(_QWORD *)(a1 + 1232), v6, &v32);
      if (v32)
      {
        v8 = sub_223822434(*(_QWORD **)(a1 + 1224), *v6, v6[1]);
        v9 = (__int128 *)(v8 + 2);
        v10 = *((_BYTE *)v8 + 113);
        v31 = v10;
        v11 = *((_BYTE *)v8 + 114);
        v30 = v11;
        v12 = a3[1];
        v13 = v32;
        v14 = (uint64_t)v33;
        if (v12 >= a3[2])
        {
          v26 = sub_223889FC8(a3, v8, v32, (uint64_t)v33, v9, v8 + 10, v8 + 11, (__int128 *)(a1 + 152), &v31, &v30);
        }
        else
        {
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
          }
          *(_OWORD *)v12 = *(_OWORD *)v8;
          *(_QWORD *)(v12 + 16) = v13;
          *(_QWORD *)(v12 + 24) = v14;
          v17 = *v9;
          v18 = *((_OWORD *)v8 + 2);
          v19 = *((_OWORD *)v8 + 4);
          *(_OWORD *)(v12 + 64) = *((_OWORD *)v8 + 3);
          *(_OWORD *)(v12 + 80) = v19;
          *(_OWORD *)(v12 + 32) = v17;
          *(_OWORD *)(v12 + 48) = v18;
          *(_QWORD *)(v12 + 96) = v8[10];
          *(_QWORD *)(v12 + 104) = v8[11];
          v20 = *(_OWORD *)(a1 + 152);
          v21 = *(_OWORD *)(a1 + 168);
          v22 = *(_OWORD *)(a1 + 200);
          *(_OWORD *)(v12 + 144) = *(_OWORD *)(a1 + 184);
          *(_OWORD *)(v12 + 160) = v22;
          *(_OWORD *)(v12 + 112) = v20;
          *(_OWORD *)(v12 + 128) = v21;
          v23 = *(_OWORD *)(a1 + 216);
          v24 = *(_OWORD *)(a1 + 232);
          v25 = *(_OWORD *)(a1 + 264);
          *(_OWORD *)(v12 + 208) = *(_OWORD *)(a1 + 248);
          *(_OWORD *)(v12 + 224) = v25;
          *(_OWORD *)(v12 + 176) = v23;
          *(_OWORD *)(v12 + 192) = v24;
          *(_BYTE *)(v12 + 240) = v10;
          *(_BYTE *)(v12 + 241) = v11;
          v26 = v12 + 248;
        }
        a3[1] = v26;
      }
      v27 = v33;
      if (v33)
      {
        v28 = (unint64_t *)&v33->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v6 += 2;
    }
    while (v6 != v7);
    v6 = v34;
  }
  if (v6)
  {
    v35 = v6;
    operator delete(v6);
  }
}

void sub_2238778F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15)
{
  void **v15;

  sub_223473EA8(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_22387792C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>, float a5@<S1>, unsigned int a6@<S2>, unsigned int a7@<S3>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unsigned __int32 v27;
  __int128 v28;
  uint64_t *v29;
  _OWORD *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  __int128 v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v100;
  _OWORD *v101;
  __int128 *v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  _OWORD v111[3];
  float32x2_t v112;
  unsigned __int32 v113;
  int v114;
  float32x2_t v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  int v125;
  __int128 v126;
  _BYTE v127[80];
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v123 = 0u;
  v124 = 0u;
  v125 = 728308068;
  kdebug_trace();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v14 = *(_QWORD *)(a1 + 1568);
  if (!v14)
    return kdebug_trace();
  v104 = a3;
  if (!*(_BYTE *)(a1 + 888))
    sub_22324A974();
  v122 = *(_QWORD *)(a1 + 808);
  v15 = sub_2231D0224(v14);
  v16 = *(_QWORD *)(v15 + 88);
  *(float *)&v17 = 0.5 / tan((float)(a4 * 0.017453) * 0.5) * (double)v16;
  *(float *)&v18 = 0.5 / tan((float)(a5 * 0.017453) * 0.5) * (double)HIDWORD(v16);
  *(_QWORD *)&v111[0] = __PAIR64__(v18, v17);
  *((float *)v111 + 2) = (float)v16 * 0.5;
  *((float *)v111 + 3) = (float)HIDWORD(v16) * 0.5;
  sub_223207E58(v127, (int *)v111);
  v120 = *(_DWORD *)&v127[72];
  v116 = *(_OWORD *)&v127[8];
  v117 = *(_OWORD *)&v127[24];
  v20.i32[3] = *(_DWORD *)&v127[68];
  v118 = *(_OWORD *)&v127[40];
  v19.i32[3] = *(_DWORD *)&v127[52];
  v119 = *(_OWORD *)&v127[56];
  v121 = v16;
  v115[0] = (float32x2_t)&off_24EC207B8;
  v115[1] = (float32x2_t)&off_24EC20868;
  v19.i64[0] = *(_QWORD *)a2;
  v19.i32[2] = *(_DWORD *)(a2 + 8);
  v20.i64[0] = *(_QWORD *)(a2 + 16);
  v20.i32[2] = *(_DWORD *)(a2 + 24);
  v21.i32[0] = *(_DWORD *)(a2 + 40);
  v22.i64[0] = *(_QWORD *)(a2 + 48);
  v22.i32[2] = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v23 = vzip1q_s32(v19, v20).u64[0];
  v24 = (int8x16_t)vnegq_f32(v22);
  v25 = (int8x16_t)vtrn2q_s32(v19, v20);
  v25.i32[2] = HIDWORD(*(_QWORD *)(a2 + 32));
  v26 = (int8x16_t)vzip2q_s32(v19, v20);
  v26.i32[2] = v21.i32[0];
  v27 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 32), *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 32), 1), *(float32x2_t *)v22.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), v21).u32[0];
  *((_QWORD *)&v23 + 1) = *(_QWORD *)(a2 + 32);
  HIDWORD(v28) = 0;
  LODWORD(v28) = vdupq_lane_s32(*(int32x2_t *)&v25, 0).i32[3];
  *(_QWORD *)((char *)&v28 + 4) = vextq_s8(v25, v26, 4uLL).u64[0];
  v26.i64[1] = vdupq_laneq_s32((int32x4_t)v26, 2).u32[0];
  v111[2] = v26;
  v111[0] = v23;
  v111[1] = v28;
  v112 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v23, *(float *)v24.i32), *(float32x2_t *)v25.i8, *(float32x2_t *)v22.f32, 1), *(float32x2_t *)v26.i8, v22, 2);
  v113 = v27;
  v114 = 1065353216;
  v110 = __PAIR64__(a7, a6);
  v108 = 0;
  v109 = 0;
  v107 = 0;
  v29 = *(uint64_t **)(*(_QWORD *)(a1 + 1224) + 16);
  if (!v29)
    return kdebug_trace();
  while (*((_BYTE *)v29 + 144) != 1)
  {
    v29 = (uint64_t *)*v29;
    if (!v29)
      return kdebug_trace();
  }
LABEL_8:
  if (!sub_223EA55CC((float32x2_t *)&v110, (float32x2_t *)v111, v115, &v122, (uint64_t)(v29 + 6), v15))
    goto LABEL_27;
  v30 = v29 + 4;
  v31 = v108;
  if (v108 < v109)
  {
    *(_OWORD *)v108 = *v30;
    v32 = v31 + 16;
    goto LABEL_26;
  }
  v33 = v107;
  v34 = (v108 - v107) >> 4;
  v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 60)
    sub_22316E078();
  v36 = v109 - v107;
  if ((v109 - v107) >> 3 > v35)
    v35 = v36 >> 3;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
    v37 = 0xFFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
  {
    if (v37 >> 60)
      sub_223174E94();
    v38 = (char *)operator new(16 * v37);
    v39 = &v38[16 * v34];
    *(_OWORD *)v39 = *v30;
    v40 = (uint64_t)v39;
    if (v31 == v33)
      goto LABEL_24;
  }
  else
  {
    v38 = 0;
    v39 = (char *)(16 * v34);
    *(_OWORD *)(16 * v34) = *v30;
    v40 = 16 * v34;
    if (v31 == v33)
      goto LABEL_24;
  }
  do
  {
    *(_OWORD *)(v40 - 16) = *((_OWORD *)v31 - 1);
    v40 -= 16;
    v31 -= 16;
  }
  while (v31 != v33);
  v31 = v107;
LABEL_24:
  v32 = v39 + 16;
  v107 = (char *)v40;
  v109 = &v38[16 * v37];
  if (v31)
    operator delete(v31);
LABEL_26:
  v108 = v32;
LABEL_27:
  while (1)
  {
    v29 = (uint64_t *)*v29;
    if (!v29)
      break;
    if (*((_BYTE *)v29 + 144) == 1)
      goto LABEL_8;
  }
  v41 = v107;
  v103 = v108;
  if (v107 != v108)
  {
    v101 = (_OWORD *)(a1 + 216);
    v102 = (__int128 *)(a1 + 152);
    v100 = a1;
    while (1)
    {
      v126 = *(_OWORD *)v41;
      sub_22319597C(*(_QWORD *)(a1 + 1232), &v126, &v105);
      if (!v105)
        goto LABEL_68;
      v42 = sub_223822434(*(_QWORD **)(a1 + 1224), v126, *((uint64_t *)&v126 + 1));
      v43 = *((_OWORD *)v42 + 1);
      *(_OWORD *)v127 = *(_OWORD *)v42;
      v44 = *((_OWORD *)v42 + 2);
      v45 = *((_OWORD *)v42 + 3);
      *(_OWORD *)&v127[16] = v43;
      *(_OWORD *)&v127[32] = v44;
      v46 = *((_OWORD *)v42 + 4);
      *(_OWORD *)&v127[48] = v45;
      *(_OWORD *)&v127[64] = v46;
      v47 = v42[10];
      v48 = v42[11];
      v50 = v104;
      v49 = v105;
      v52 = (char *)v104[1];
      v51 = v104[2];
      v53 = v106;
      if ((unint64_t)v52 >= v51)
        break;
      if (v106)
      {
        p_shared_owners = (unint64_t *)&v106->__shared_owners_;
        do
          v55 = __ldxr(p_shared_owners);
        while (__stxr(v55 + 1, p_shared_owners));
      }
      *(_OWORD *)v52 = *(_OWORD *)v127;
      *((_QWORD *)v52 + 2) = v49;
      *((_QWORD *)v52 + 3) = v53;
      *((_OWORD *)v52 + 2) = *(_OWORD *)&v127[16];
      *((_OWORD *)v52 + 3) = *(_OWORD *)&v127[32];
      *((_OWORD *)v52 + 4) = *(_OWORD *)&v127[48];
      *((_OWORD *)v52 + 5) = *(_OWORD *)&v127[64];
      *((_QWORD *)v52 + 12) = v47;
      *((_QWORD *)v52 + 13) = v48;
      v56 = *v102;
      v57 = v102[1];
      v58 = v102[3];
      *((_OWORD *)v52 + 9) = v102[2];
      *((_OWORD *)v52 + 10) = v58;
      *((_OWORD *)v52 + 7) = v56;
      *((_OWORD *)v52 + 8) = v57;
      a1 = v100;
      v60 = v101[2];
      v59 = v101[3];
      v61 = v101[1];
      *((_OWORD *)v52 + 11) = *v101;
      *((_OWORD *)v52 + 12) = v61;
      *((_OWORD *)v52 + 13) = v60;
      *((_OWORD *)v52 + 14) = v59;
      *((_WORD *)v52 + 120) = 0;
      v62 = v52 + 248;
LABEL_67:
      v50[1] = v62;
LABEL_68:
      v96 = v106;
      if (v106)
      {
        v97 = (unint64_t *)&v106->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v41 += 16;
      if (v41 == v103)
      {
        v41 = v107;
        goto LABEL_74;
      }
    }
    v63 = (char *)*v104;
    v64 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)&v52[-*v104] >> 3);
    v65 = v64 + 1;
    if (v64 + 1 > 0x108421084210842)
      sub_22316E078();
    v66 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v51 - (_QWORD)v63) >> 3);
    if (2 * v66 > v65)
      v65 = 2 * v66;
    if (v66 >= 0x84210842108421)
      v67 = 0x108421084210842;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 > 0x108421084210842)
        sub_223174E94();
      v68 = (char *)operator new(248 * v67);
      if (!v53)
        goto LABEL_53;
    }
    else
    {
      v68 = 0;
      if (!v106)
      {
LABEL_53:
        v71 = &v68[248 * v64];
        *(_OWORD *)v71 = *(_OWORD *)v127;
        *((_QWORD *)v71 + 2) = v49;
        *((_QWORD *)v71 + 3) = v53;
        v72 = *(_OWORD *)&v127[32];
        v73 = &v68[248 * v67];
        *((_OWORD *)v71 + 2) = *(_OWORD *)&v127[16];
        *((_OWORD *)v71 + 3) = v72;
        v74 = *(_OWORD *)&v127[64];
        *((_OWORD *)v71 + 4) = *(_OWORD *)&v127[48];
        *((_OWORD *)v71 + 5) = v74;
        *((_QWORD *)v71 + 12) = v47;
        *((_QWORD *)v71 + 13) = v48;
        v75 = *v102;
        v76 = v102[1];
        v77 = v102[3];
        *((_OWORD *)v71 + 9) = v102[2];
        *((_OWORD *)v71 + 10) = v77;
        *((_OWORD *)v71 + 7) = v75;
        *((_OWORD *)v71 + 8) = v76;
        v78 = v101[3];
        *((_OWORD *)v71 + 13) = v101[2];
        *((_OWORD *)v71 + 14) = v78;
        v79 = v101[1];
        *((_OWORD *)v71 + 11) = *v101;
        *((_OWORD *)v71 + 12) = v79;
        v62 = v71 + 248;
        *((_WORD *)v71 + 120) = 0;
        if (v52 == v63)
        {
          v50 = v104;
          *v104 = v71;
          v104[1] = v62;
          v104[2] = v73;
          a1 = v100;
        }
        else
        {
          v80 = 0;
          v50 = v104;
          a1 = v100;
          do
          {
            v81 = &v52[v80];
            v82 = &v71[v80];
            *(_OWORD *)(v82 - 248) = *(_OWORD *)&v52[v80 - 248];
            *(_OWORD *)(v82 - 232) = *(_OWORD *)&v52[v80 - 232];
            *((_QWORD *)v81 - 29) = 0;
            *((_QWORD *)v81 - 28) = 0;
            v83 = *(_OWORD *)&v52[v80 - 216];
            v84 = *(_OWORD *)&v52[v80 - 200];
            v85 = *(_OWORD *)&v52[v80 - 184];
            *(_OWORD *)(v82 - 168) = *(_OWORD *)&v52[v80 - 168];
            *(_OWORD *)(v82 - 184) = v85;
            *(_OWORD *)(v82 - 200) = v84;
            *(_OWORD *)(v82 - 216) = v83;
            *(_OWORD *)(v82 - 152) = *(_OWORD *)&v52[v80 - 152];
            v86 = *(_OWORD *)&v52[v80 - 136];
            v87 = *(_OWORD *)&v52[v80 - 120];
            v88 = *(_OWORD *)&v52[v80 - 104];
            *(_OWORD *)(v82 - 88) = *(_OWORD *)&v52[v80 - 88];
            *(_OWORD *)(v82 - 104) = v88;
            *(_OWORD *)(v82 - 120) = v87;
            *(_OWORD *)(v82 - 136) = v86;
            v89 = *(_OWORD *)&v52[v80 - 72];
            v90 = *(_OWORD *)&v52[v80 - 56];
            v91 = *(_OWORD *)&v52[v80 - 40];
            *(_OWORD *)(v82 - 24) = *(_OWORD *)&v52[v80 - 24];
            *(_OWORD *)(v82 - 40) = v91;
            *(_OWORD *)(v82 - 56) = v90;
            *(_OWORD *)(v82 - 72) = v89;
            *((_WORD *)v82 - 4) = *(_WORD *)&v52[v80 - 8];
            v80 -= 248;
          }
          while (&v52[v80] != v63);
          v63 = (char *)*v104;
          v92 = (char *)v104[1];
          *v104 = &v71[v80];
          v104[1] = v62;
          v104[2] = v73;
          while (v92 != v63)
          {
            v93 = (std::__shared_weak_count *)*((_QWORD *)v92 - 28);
            if (v93)
            {
              v94 = (unint64_t *)&v93->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            v92 -= 248;
          }
        }
        if (v63)
          operator delete(v63);
        goto LABEL_67;
      }
    }
    v69 = (unint64_t *)&v53->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v63 = (char *)*v104;
    v52 = (char *)v104[1];
    goto LABEL_53;
  }
LABEL_74:
  if (v41)
    operator delete(v41);
  return kdebug_trace();
}

void sub_223878100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p)
    operator delete(__p);
  sub_223473EA8(a13);
  sub_2231874DC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_223878174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 *v24;
  _QWORD *v25;
  __int128 *v26;
  _QWORD *v27;
  __int128 *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 *v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD *v76;
  __int128 *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  _OWORD *v109;
  char v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v136;
  _QWORD *i;
  float v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _QWORD v142[3];
  _QWORD *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _QWORD v148[3];
  _QWORD *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _QWORD v154[3];
  _QWORD *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _QWORD v160[3];
  _QWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _QWORD v166[3];
  _QWORD *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _QWORD v172[3];
  _QWORD *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _QWORD v178[3];
  _QWORD *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _QWORD v184[3];
  _QWORD *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _QWORD v190[3];
  _QWORD *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _QWORD v196[3];
  _QWORD *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _QWORD v202[3];
  _QWORD *v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _QWORD v208[3];
  _QWORD *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  _QWORD v214[3];
  _QWORD *v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  _QWORD v220[3];
  _QWORD *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _QWORD v226[3];
  _QWORD *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  _QWORD v232[3];
  _QWORD *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _QWORD v238[3];
  _QWORD *v239;
  __int128 v240;
  __int128 v241;
  _BYTE v242[40];
  _QWORD v243[2];
  _BYTE *v244;
  _OWORD v245[3];
  __int128 v246;
  __int128 v247;
  _QWORD v248[3];
  _QWORD *v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _QWORD v254[3];
  _QWORD *v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  _QWORD v260[3];
  _QWORD *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  _QWORD v266[3];
  _QWORD *v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  _QWORD v272[3];
  _QWORD *v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _QWORD v278[3];
  _QWORD *v279;
  __int128 v280;
  __int128 v281;
  _OWORD v282[2];
  _QWORD v283[3];
  _QWORD *v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;

  v287 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v138 = a4 * a4;
  v8 = *(uint64_t **)(*(_QWORD *)(a1 + 1224) + 16);
  for (i = a3; v8; v8 = (uint64_t *)*v8)
  {
    if (*((_BYTE *)v8 + 144) == 1)
      break;
  }
  *(_QWORD *)&v237 = 0;
  v236 = *(unint64_t *)&v282[0];
  *(_OWORD *)((char *)v282 + 8) = *(unint64_t *)&v282[0];
  v139 = v237;
  *(_QWORD *)&v282[0] = v8;
  v270 = v237;
  v285 = v237;
  *(_QWORD *)&v286 = 0;
  v9 = v283;
  v283[0] = &off_24EC5B420;
  v283[1] = a2;
  v283[2] = &v138;
  v284 = v283;
  if (v8)
  {
    v10 = v283;
    while (((*(uint64_t (**)(_QWORD *, uint64_t *))(*v10 + 48))(v10, v8 + 4) & 1) == 0)
    {
      v8 = **(uint64_t ***)&v282[0];
      *(_QWORD *)&v282[0] = v8;
      if (v8 != *(uint64_t **)&v282[1])
      {
        while (*((_BYTE *)v8 + 144) != 1)
        {
          v8 = (uint64_t *)*v8;
          *(_QWORD *)&v282[0] = v8;
          if (v8 == *(uint64_t **)&v282[1])
          {
            v8 = *(uint64_t **)&v282[1];
            break;
          }
        }
      }
      if (v8 == (uint64_t *)v285)
        break;
      v10 = v284;
      if (!v284)
        sub_223198474();
    }
  }
  v276 = v270;
  *(_QWORD *)&v277 = 0;
  v280 = v270;
  *(_QWORD *)&v281 = 0;
  v11 = v278;
  v278[0] = &off_24EC5B420;
  v278[1] = a2;
  v278[2] = &v138;
  v279 = v278;
  v236 = v282[0];
  v237 = v282[1];
  v12 = v238;
  if (v284)
  {
    if (v284 == v283)
    {
      v239 = v238;
      (*(void (**)(_QWORD *, _QWORD *))(v283[0] + 24))(v283, v238);
    }
    else
    {
      v239 = v284;
      v284 = 0;
    }
  }
  else
  {
    v239 = 0;
  }
  v240 = v285;
  v241 = v286;
  *(_OWORD *)v242 = v276;
  *(_OWORD *)&v242[16] = v277;
  v13 = &v242[32];
  if (v279)
  {
    if (v279 == v278)
    {
      v244 = &v242[32];
      (*(void (**)(_QWORD *, _BYTE *))(v278[0] + 24))(v278, &v242[32]);
    }
    else
    {
      v244 = v279;
      v279 = 0;
    }
  }
  else
  {
    v244 = 0;
  }
  v245[0] = v280;
  v245[1] = v281;
  if (v279 == v278)
  {
    v14 = 4;
  }
  else
  {
    if (!v279)
      goto LABEL_29;
    v14 = 5;
    v11 = v279;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v14))(v11);
LABEL_29:
  if (v284 == v283)
  {
    v15 = 4;
  }
  else
  {
    if (!v284)
      goto LABEL_34;
    v15 = 5;
    v9 = v284;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v15))(v9);
LABEL_34:
  v140 = v236;
  v141 = v237;
  v16 = &v140;
  if (!v239)
  {
LABEL_37:
    *((_QWORD *)v16 + 7) = 0;
    goto LABEL_39;
  }
  if (v239 != v238)
  {
    v16 = &v236;
    v143 = v239;
    goto LABEL_37;
  }
  v143 = v142;
  (*(void (**)(_QWORD *, _QWORD *))(v238[0] + 24))(v238, v142);
LABEL_39:
  v144 = v240;
  v145 = v241;
  v146 = *(_OWORD *)v242;
  v147 = *(_OWORD *)&v242[16];
  if (v244)
  {
    if (v244 == &v242[32])
    {
      v149 = v148;
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)&v242[32] + 24))(&v242[32], v148);
    }
    else
    {
      v149 = v244;
      v244 = 0;
    }
  }
  else
  {
    v149 = 0;
  }
  v150 = v245[0];
  v151 = v245[1];
  if (v244 == &v242[32])
  {
    v17 = 4;
  }
  else
  {
    if (!v244)
      goto LABEL_49;
    v17 = 5;
    v13 = v244;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v17))(v13);
LABEL_49:
  if (v239 == v238)
  {
    v18 = 4;
  }
  else
  {
    if (!v239)
      goto LABEL_54;
    v18 = 5;
    v12 = v239;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v18))(v12);
LABEL_54:
  v258 = v140;
  v259 = v141;
  v19 = v143;
  if (!v143)
  {
    v261 = 0;
    v262 = v144;
    v263 = v145;
    v270 = v140;
    v271 = v141;
    v20 = v272;
LABEL_62:
    v273 = v19;
    goto LABEL_63;
  }
  if (v143 == v142)
  {
    v261 = v260;
    (*(void (**)(_QWORD *))(v142[0] + 24))(v142);
    v19 = v261;
  }
  else
  {
    v19 = (_QWORD *)(*(uint64_t (**)(void))(*v143 + 16))();
    v261 = v19;
  }
  v262 = v144;
  v263 = v145;
  v270 = v258;
  v271 = v259;
  v20 = v272;
  if (!v19)
    goto LABEL_62;
  if (v19 != v260)
  {
    v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
    goto LABEL_62;
  }
  v273 = v272;
  (*(void (**)(_QWORD *, _QWORD *))(v260[0] + 24))(v260, v272);
LABEL_63:
  v274 = v262;
  v275 = v263;
  v252 = v146;
  v253 = v147;
  v21 = v254;
  v22 = v149;
  if (!v149)
  {
    v255 = 0;
    v256 = v150;
    v257 = v151;
    v264 = v146;
    v265 = v147;
    v23 = v266;
LABEL_71:
    v267 = v22;
    goto LABEL_72;
  }
  if (v149 == v148)
  {
    v255 = v254;
    (*(void (**)(_QWORD *, _QWORD *))(v148[0] + 24))(v148, v254);
    v22 = v255;
  }
  else
  {
    v22 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v149 + 16))(v149);
    v255 = v22;
  }
  v256 = v150;
  v257 = v151;
  v264 = v252;
  v265 = v253;
  v23 = v266;
  if (!v22)
    goto LABEL_71;
  if (v22 != v254)
  {
    v22 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v22 + 16))(v22);
    goto LABEL_71;
  }
  v267 = v266;
  (*(void (**)(_QWORD *, _QWORD *))(v254[0] + 24))(v254, v266);
LABEL_72:
  v268 = v256;
  v269 = v257;
  v282[0] = v270;
  v282[1] = v271;
  v24 = v282;
  v25 = v283;
  if (!v273)
  {
LABEL_75:
    *((_QWORD *)v24 + 7) = 0;
    goto LABEL_77;
  }
  if (v273 != v272)
  {
    v24 = &v270;
    v284 = v273;
    goto LABEL_75;
  }
  v284 = v283;
  (*(void (**)(_QWORD *, _QWORD *))(v272[0] + 24))(v272, v283);
LABEL_77:
  v285 = v274;
  v286 = v275;
  v276 = v264;
  v277 = v265;
  v26 = &v276;
  v27 = v278;
  if (!v267)
  {
LABEL_80:
    *((_QWORD *)v26 + 7) = 0;
    goto LABEL_82;
  }
  if (v267 != v266)
  {
    v26 = &v264;
    v279 = v267;
    goto LABEL_80;
  }
  v279 = v278;
  (*(void (**)(_QWORD *, _QWORD *))(v266[0] + 24))(v266, v278);
LABEL_82:
  v280 = v268;
  v281 = v269;
  v236 = v282[0];
  v237 = v282[1];
  v28 = &v236;
  v29 = v238;
  if (!v284)
  {
LABEL_85:
    *((_QWORD *)v28 + 7) = 0;
    goto LABEL_87;
  }
  if (v284 != v283)
  {
    v28 = v282;
    v239 = v284;
    goto LABEL_85;
  }
  v239 = v238;
  (*(void (**)(_QWORD *, _QWORD *))(v283[0] + 24))(v283, v238);
LABEL_87:
  v240 = v285;
  v241 = v286;
  *(_OWORD *)&v242[8] = v276;
  *(_OWORD *)&v242[24] = v277;
  v30 = v243;
  if (v279)
  {
    if (v279 == v278)
    {
      *(_QWORD *)&v245[0] = v243;
      (*(void (**)(_QWORD *, _QWORD *))(v278[0] + 24))(v278, v243);
    }
    else
    {
      *(_QWORD *)&v245[0] = v279;
      v279 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v245[0] = 0;
  }
  *(_OWORD *)((char *)v245 + 8) = v280;
  *(_OWORD *)((char *)&v245[1] + 8) = v281;
  if (v279 == v278)
  {
    v31 = 4;
  }
  else
  {
    if (!v279)
      goto LABEL_97;
    v31 = 5;
    v27 = v279;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v31))(v27);
LABEL_97:
  if (v284 == v283)
  {
    v32 = 4;
  }
  else
  {
    if (!v284)
      goto LABEL_102;
    v32 = 5;
    v25 = v284;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v32))(v25);
LABEL_102:
  if (v267 == v266)
  {
    v33 = 4;
  }
  else
  {
    if (!v267)
      goto LABEL_107;
    v33 = 5;
    v23 = v267;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v33))(v23);
LABEL_107:
  if (v255 == v254)
  {
    v35 = 4;
    v34 = v260;
  }
  else
  {
    v34 = v260;
    if (!v255)
      goto LABEL_112;
    v35 = 5;
    v21 = v255;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v35))(v21);
LABEL_112:
  if (v273 == v272)
  {
    v36 = 4;
  }
  else
  {
    if (!v273)
      goto LABEL_117;
    v36 = 5;
    v20 = v273;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v36))(v20);
LABEL_117:
  if (v261 == v260)
  {
    v37 = 4;
  }
  else
  {
    if (!v261)
      goto LABEL_122;
    v37 = 5;
    v34 = v261;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v37))(v34);
LABEL_122:
  v152 = v236;
  v153 = v237;
  v38 = &v152;
  if (!v239)
  {
LABEL_125:
    *((_QWORD *)v38 + 7) = 0;
    goto LABEL_127;
  }
  if (v239 != v238)
  {
    v38 = &v236;
    v155 = v239;
    goto LABEL_125;
  }
  v155 = v154;
  (*(void (**)(_QWORD *, _QWORD *))(v238[0] + 24))(v238, v154);
LABEL_127:
  v156 = v240;
  v157 = v241;
  v158 = *(_OWORD *)&v242[8];
  v159 = *(_OWORD *)&v242[24];
  if (*(_QWORD *)&v245[0])
  {
    if (*(_QWORD **)&v245[0] == v243)
    {
      v161 = v160;
      (*(void (**)(_QWORD *, _QWORD *))(v243[0] + 24))(v243, v160);
    }
    else
    {
      v161 = *(_QWORD **)&v245[0];
      *(_QWORD *)&v245[0] = 0;
    }
  }
  else
  {
    v161 = 0;
  }
  v162 = *(_OWORD *)((char *)v245 + 8);
  v163 = *(_OWORD *)((char *)&v245[1] + 8);
  if (*(_QWORD **)&v245[0] == v243)
  {
    v39 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v245[0])
      goto LABEL_137;
    v39 = 5;
    v30 = *(_QWORD **)&v245[0];
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v39))(v30);
LABEL_137:
  if (v239 == v238)
  {
    v40 = 4;
  }
  else
  {
    if (!v239)
      goto LABEL_142;
    v40 = 5;
    v29 = v239;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v40))(v29);
LABEL_142:
  v170 = v152;
  v171 = v153;
  v41 = (uint64_t)v155;
  if (!v155)
  {
LABEL_145:
    v173 = (_QWORD *)v41;
    goto LABEL_147;
  }
  if (v155 != v154)
  {
    v41 = (*(uint64_t (**)(_QWORD *))(*v155 + 16))(v155);
    goto LABEL_145;
  }
  v173 = v172;
  (*(void (**)(_QWORD *, _QWORD *))(v154[0] + 24))(v154, v172);
LABEL_147:
  v174 = v156;
  v175 = v157;
  v164 = v158;
  v165 = v159;
  v42 = (uint64_t)v161;
  if (!v161)
  {
LABEL_150:
    v167 = (_QWORD *)v42;
    goto LABEL_152;
  }
  if (v161 != v160)
  {
    v42 = (*(uint64_t (**)(_QWORD *))(*v161 + 16))(v161);
    goto LABEL_150;
  }
  v167 = v166;
  (*(void (**)(_QWORD *, _QWORD *))(v160[0] + 24))(v160, v166);
LABEL_152:
  v168 = v162;
  v169 = v163;
  *i = 0;
  i[1] = 0;
  i[2] = 0;
  v194 = v170;
  v195 = v171;
  v43 = (uint64_t)v173;
  if (!v173)
  {
LABEL_155:
    v197 = (_QWORD *)v43;
    goto LABEL_157;
  }
  if (v173 != v172)
  {
    v43 = (*(uint64_t (**)(_QWORD *))(*v173 + 16))(v173);
    goto LABEL_155;
  }
  v197 = v196;
  (*(void (**)(_QWORD *, _QWORD *))(v172[0] + 24))(v172, v196);
LABEL_157:
  v198 = v174;
  v199 = v175;
  v188 = v164;
  v189 = v165;
  v44 = v190;
  v45 = (uint64_t)v167;
  if (!v167)
  {
LABEL_160:
    v191 = (_QWORD *)v45;
    goto LABEL_162;
  }
  if (v167 != v166)
  {
    v45 = (*(uint64_t (**)(_QWORD *))(*v167 + 16))(v167);
    goto LABEL_160;
  }
  v191 = v190;
  (*(void (**)(_QWORD *, _QWORD *))(v166[0] + 24))(v166, v190);
LABEL_162:
  v192 = v168;
  v193 = v169;
  v236 = v194;
  v237 = v195;
  v46 = v238;
  v47 = (uint64_t)v197;
  if (!v197)
  {
LABEL_165:
    v239 = (_QWORD *)v47;
    goto LABEL_167;
  }
  if (v197 != v196)
  {
    v47 = (*(uint64_t (**)(_QWORD *))(*v197 + 16))(v197);
    goto LABEL_165;
  }
  v239 = v238;
  (*(void (**)(_QWORD *, _QWORD *))(v196[0] + 24))(v196, v238);
LABEL_167:
  v240 = v198;
  v241 = v199;
  v282[0] = v188;
  v282[1] = v189;
  v48 = v283;
  v49 = (uint64_t)v191;
  if (!v191)
  {
LABEL_170:
    v284 = (_QWORD *)v49;
    goto LABEL_172;
  }
  if (v191 != v190)
  {
    v49 = (*(uint64_t (**)(_QWORD *))(*v191 + 16))(v191);
    goto LABEL_170;
  }
  v284 = v283;
  (*(void (**)(_QWORD *, _QWORD *))(v190[0] + 24))(v190, v283);
LABEL_172:
  v285 = v192;
  v286 = v193;
  v50 = (uint64_t *)v236;
  v51 = *(uint64_t **)&v282[0];
  if ((_QWORD)v236 == *(_QWORD *)&v282[0])
  {
    v52 = 0;
  }
  else
  {
    v52 = 0;
    do
    {
      v50 = (uint64_t *)*v50;
      *(_QWORD *)&v236 = v50;
      if (v50 != (uint64_t *)v237)
      {
        while (*((_BYTE *)v50 + 144) != 1)
        {
          v50 = (uint64_t *)*v50;
          *(_QWORD *)&v236 = v50;
          if (v50 == (uint64_t *)v237)
          {
            v50 = (uint64_t *)v237;
            break;
          }
        }
      }
      if (v50 != (uint64_t *)v240)
      {
        do
        {
          if (!v239)
            sub_223198474();
          v53 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v239 + 48))(v239, v50 + 4);
          v50 = (uint64_t *)v236;
          if ((v53 & 1) != 0)
            break;
          v50 = *(uint64_t **)v236;
          *(_QWORD *)&v236 = v50;
          if (v50 != (uint64_t *)v237)
          {
            while (*((_BYTE *)v50 + 144) != 1)
            {
              v50 = (uint64_t *)*v50;
              *(_QWORD *)&v236 = v50;
              if (v50 == (uint64_t *)v237)
              {
                v50 = (uint64_t *)v237;
                break;
              }
            }
          }
        }
        while (v50 != (uint64_t *)v240);
        v51 = *(uint64_t **)&v282[0];
      }
      ++v52;
    }
    while (v50 != v51);
  }
  if (v284 == v283)
  {
    v54 = 4;
  }
  else
  {
    if (!v284)
      goto LABEL_195;
    v54 = 5;
    v48 = v284;
  }
  (*(void (**)(_QWORD *))(*v48 + 8 * v54))(v48);
LABEL_195:
  if (v239 == v238)
  {
    v56 = 4;
    v55 = v172;
  }
  else
  {
    v55 = v172;
    if (!v239)
      goto LABEL_200;
    v56 = 5;
    v46 = v239;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v56))(v46);
LABEL_200:
  if (v191 == v190)
  {
    v59 = 4;
    v57 = v196;
    v58 = v160;
  }
  else
  {
    v57 = v196;
    v58 = v160;
    if (!v191)
      goto LABEL_205;
    v59 = 5;
    v44 = v191;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v59))(v44);
LABEL_205:
  if (v197 == v196)
  {
    v60 = 4;
  }
  else
  {
    if (!v197)
      goto LABEL_210;
    v60 = 5;
    v57 = v197;
  }
  (*(void (**)(_QWORD *))(*v57 + 8 * v60))(v57);
LABEL_210:
  v182 = v170;
  v183 = v171;
  v61 = (uint64_t)v173;
  if (!v173)
  {
LABEL_213:
    v185 = (_QWORD *)v61;
    goto LABEL_215;
  }
  if (v173 != v172)
  {
    v61 = (*(uint64_t (**)(_QWORD *))(*v173 + 16))(v173);
    goto LABEL_213;
  }
  v185 = v184;
  (*(void (**)(_QWORD *, _QWORD *))(v172[0] + 24))(v172, v184);
LABEL_215:
  v186 = v174;
  v187 = v175;
  v176 = v164;
  v177 = v165;
  v62 = (uint64_t)v167;
  if (!v167)
  {
    v63 = v166;
    goto LABEL_219;
  }
  v63 = v166;
  if (v167 != v166)
  {
    v62 = (*(uint64_t (**)(_QWORD *))(*v167 + 16))(v167);
LABEL_219:
    v179 = (_QWORD *)v62;
    goto LABEL_221;
  }
  v179 = v178;
  (*(void (**)(_QWORD *))(v166[0] + 24))(v166);
LABEL_221:
  v180 = v168;
  v181 = v169;
  v64 = v142;
  if (!v52)
    goto LABEL_423;
  if (v52 >> 60)
    sub_22316E078();
  v65 = (char *)operator new(16 * v52);
  *i = v65;
  i[1] = v65;
  i[2] = &v65[16 * v52];
  v206 = v182;
  v207 = v183;
  v66 = (uint64_t)v185;
  if (!v185)
    goto LABEL_226;
  if (v185 != v184)
  {
    v66 = (*(uint64_t (**)(_QWORD *))(*v185 + 16))(v185);
LABEL_226:
    v209 = (_QWORD *)v66;
    goto LABEL_230;
  }
  v209 = v208;
  (*(void (**)(_QWORD *, _QWORD *))(v184[0] + 24))(v184, v208);
LABEL_230:
  v210 = v186;
  v211 = v187;
  v200 = v176;
  v201 = v177;
  v67 = (uint64_t)v179;
  if (!v179)
  {
LABEL_233:
    v203 = (_QWORD *)v67;
    goto LABEL_235;
  }
  if (v179 != v178)
  {
    v67 = (*(uint64_t (**)(_QWORD *))(*v179 + 16))(v179);
    goto LABEL_233;
  }
  v203 = v202;
  (*(void (**)(_QWORD *))(v178[0] + 24))(v178);
LABEL_235:
  v136 = v65;
  v204 = v180;
  v205 = v181;
  v218 = v206;
  v219 = v207;
  v68 = (uint64_t)v209;
  if (!v209)
  {
LABEL_238:
    v221 = (_QWORD *)v68;
    goto LABEL_240;
  }
  if (v209 != v208)
  {
    v68 = (*(uint64_t (**)(_QWORD *))(*v209 + 16))(v209);
    goto LABEL_238;
  }
  v221 = v220;
  (*(void (**)(_QWORD *, _QWORD *))(v208[0] + 24))(v208, v220);
LABEL_240:
  v222 = v210;
  v223 = v211;
  v212 = v200;
  v213 = v201;
  v69 = (uint64_t)v203;
  if (!v203)
  {
LABEL_243:
    v215 = (_QWORD *)v69;
    goto LABEL_245;
  }
  if (v203 != v202)
  {
    v69 = (*(uint64_t (**)(_QWORD *))(*v203 + 16))(v203);
    goto LABEL_243;
  }
  v215 = v214;
  (*(void (**)(_QWORD *, _QWORD *))(v202[0] + 24))(v202, v214);
LABEL_245:
  v216 = v204;
  v217 = v205;
  v230 = v218;
  v231 = v219;
  v70 = (uint64_t)v221;
  if (!v221)
  {
LABEL_248:
    v233 = (_QWORD *)v70;
    goto LABEL_250;
  }
  if (v221 != v220)
  {
    v70 = (*(uint64_t (**)(_QWORD *))(*v221 + 16))(v221);
    goto LABEL_248;
  }
  v233 = v232;
  (*(void (**)(_QWORD *, _QWORD *))(v220[0] + 24))(v220, v232);
LABEL_250:
  v234 = v222;
  v235 = v223;
  v224 = v212;
  v225 = v213;
  v71 = v226;
  v72 = (uint64_t)v215;
  if (!v215)
  {
LABEL_253:
    v227 = (_QWORD *)v72;
    goto LABEL_255;
  }
  if (v215 != v214)
  {
    v72 = (*(uint64_t (**)(_QWORD *))(*v215 + 16))(v215);
    goto LABEL_253;
  }
  v227 = v226;
  (*(void (**)(_QWORD *, _QWORD *))(v214[0] + 24))(v214, v226);
LABEL_255:
  v228 = v216;
  v229 = v217;
  v252 = v230;
  v253 = v231;
  v73 = &v252;
  v74 = v254;
  if (!v233)
  {
LABEL_258:
    *((_QWORD *)v73 + 7) = 0;
    goto LABEL_260;
  }
  if (v233 != v232)
  {
    v73 = &v230;
    v255 = v233;
    goto LABEL_258;
  }
  v255 = v254;
  (*(void (**)(_QWORD *, _QWORD *))(v232[0] + 24))(v232, v254);
LABEL_260:
  v256 = v234;
  v257 = v235;
  v246 = v224;
  v247 = v225;
  v75 = &v246;
  v76 = v248;
  if (!v227)
  {
LABEL_263:
    *((_QWORD *)v75 + 7) = 0;
    goto LABEL_265;
  }
  if (v227 != v226)
  {
    v75 = &v224;
    v249 = v227;
    goto LABEL_263;
  }
  v249 = v248;
  (*(void (**)(_QWORD *, _QWORD *))(v226[0] + 24))(v226, v248);
LABEL_265:
  v250 = v228;
  v251 = v229;
  v270 = v252;
  v271 = v253;
  v77 = &v270;
  v78 = v272;
  if (!v255)
  {
LABEL_268:
    *((_QWORD *)v77 + 7) = 0;
    goto LABEL_270;
  }
  if (v255 != v254)
  {
    v77 = &v252;
    v273 = v255;
    goto LABEL_268;
  }
  v273 = v272;
  (*(void (**)(_QWORD *, _QWORD *))(v254[0] + 24))(v254, v272);
LABEL_270:
  v274 = v256;
  v275 = v257;
  v282[0] = v270;
  v282[1] = v271;
  v79 = v283;
  if (!v273)
  {
    v284 = 0;
    v285 = v256;
    v286 = v257;
    v276 = v270;
    v277 = v271;
LABEL_278:
    v81 = &v276;
    goto LABEL_279;
  }
  if (v273 == v272)
  {
    v284 = v283;
    (*(void (**)(_QWORD *, _QWORD *))(v272[0] + 24))(v272, v283);
    v80 = v284;
  }
  else
  {
    v80 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v273 + 16))(v273);
    v284 = v80;
  }
  v81 = v282;
  v285 = v274;
  v286 = v275;
  v276 = v282[0];
  v277 = v282[1];
  if (!v80)
    goto LABEL_278;
  if (v80 != v283)
  {
    v279 = v80;
LABEL_279:
    *((_QWORD *)v81 + 7) = 0;
    goto LABEL_280;
  }
  v279 = v278;
  (*(void (**)(_QWORD *))(v283[0] + 24))(v283);
LABEL_280:
  v280 = v285;
  v281 = v286;
  if (v284 == v283)
  {
    v82 = 4;
  }
  else
  {
    if (!v284)
      goto LABEL_285;
    v82 = 5;
    v79 = v284;
  }
  (*(void (**)(_QWORD *))(*v79 + 8 * v82))(v79);
LABEL_285:
  v258 = v246;
  v259 = v247;
  v83 = &v258;
  v84 = v260;
  if (!v249)
  {
LABEL_288:
    *((_QWORD *)v83 + 7) = 0;
    goto LABEL_290;
  }
  if (v249 != v248)
  {
    v83 = &v246;
    v261 = v249;
    goto LABEL_288;
  }
  v261 = v260;
  (*(void (**)(_QWORD *, _QWORD *))(v248[0] + 24))(v248, v260);
LABEL_290:
  v262 = v250;
  v263 = v251;
  v282[0] = v258;
  v282[1] = v259;
  v85 = v283;
  if (!v261)
  {
    v284 = 0;
    v285 = v250;
    v286 = v251;
    v264 = v258;
    v265 = v259;
LABEL_298:
    v87 = &v264;
    goto LABEL_299;
  }
  if (v261 == v260)
  {
    v284 = v283;
    (*(void (**)(_QWORD *, _QWORD *))(v260[0] + 24))(v260, v283);
    v86 = v284;
  }
  else
  {
    v86 = (_QWORD *)(*(uint64_t (**)(void))(*v261 + 16))();
    v284 = v86;
  }
  v87 = v282;
  v285 = v262;
  v286 = v263;
  v264 = v282[0];
  v265 = v282[1];
  if (!v86)
    goto LABEL_298;
  if (v86 != v283)
  {
    v267 = v86;
LABEL_299:
    *((_QWORD *)v87 + 7) = 0;
    goto LABEL_300;
  }
  v267 = v266;
  (*(void (**)(_QWORD *))(v283[0] + 24))(v283);
LABEL_300:
  v268 = v285;
  v269 = v286;
  if (v284 == v283)
  {
    v88 = 4;
  }
  else
  {
    if (!v284)
      goto LABEL_305;
    v88 = 5;
    v85 = v284;
  }
  (*(void (**)(_QWORD *))(*v85 + 8 * v88))(v85);
LABEL_305:
  v236 = v276;
  v237 = v277;
  v89 = &v236;
  v90 = v238;
  if (!v279)
  {
LABEL_308:
    *((_QWORD *)v89 + 7) = 0;
    goto LABEL_310;
  }
  v89 = &v276;
  if (v279 != v278)
  {
    v239 = v279;
    goto LABEL_308;
  }
  v239 = v238;
  (*(void (**)(void))(v278[0] + 24))();
LABEL_310:
  v240 = v280;
  v241 = v281;
  *(_OWORD *)&v242[8] = v264;
  *(_OWORD *)&v242[24] = v265;
  v91 = v243;
  if (v267)
  {
    if (v267 == v266)
    {
      *(_QWORD *)&v245[0] = v243;
      (*(void (**)(void))(v266[0] + 24))();
    }
    else
    {
      *(_QWORD *)&v245[0] = v267;
      v267 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v245[0] = 0;
  }
  *(_OWORD *)((char *)v245 + 8) = v268;
  *(_OWORD *)((char *)&v245[1] + 8) = v269;
  v92 = v267;
  if (v267 == v266)
  {
    v93 = 4;
    v92 = v266;
  }
  else
  {
    if (!v267)
      goto LABEL_320;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_320:
  if (v261 == v260)
  {
    v94 = 4;
  }
  else
  {
    if (!v261)
      goto LABEL_325;
    v94 = 5;
    v84 = v261;
  }
  (*(void (**)(_QWORD *))(*v84 + 8 * v94))(v84);
LABEL_325:
  v95 = v279;
  if (v279 == v278)
  {
    v96 = 4;
    v95 = v278;
  }
  else
  {
    if (!v279)
      goto LABEL_330;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_330:
  if (v273 == v272)
  {
    v97 = 4;
  }
  else
  {
    if (!v273)
      goto LABEL_335;
    v97 = 5;
    v78 = v273;
  }
  (*(void (**)(_QWORD *))(*v78 + 8 * v97))(v78);
LABEL_335:
  if (v249 == v248)
  {
    v99 = 4;
    v98 = v232;
  }
  else
  {
    v98 = v232;
    if (!v249)
      goto LABEL_340;
    v99 = 5;
    v76 = v249;
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v99))(v76);
LABEL_340:
  if (v255 == v254)
  {
    v100 = 4;
    v58 = v160;
  }
  else
  {
    v58 = v160;
    if (!v255)
      goto LABEL_345;
    v100 = 5;
    v74 = v255;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v100))(v74);
LABEL_345:
  if (v227 == v226)
  {
    v101 = 4;
  }
  else
  {
    if (!v227)
      goto LABEL_350;
    v101 = 5;
    v71 = v227;
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v101))(v71);
LABEL_350:
  if (v233 == v232)
  {
    v102 = 4;
  }
  else
  {
    if (!v233)
      goto LABEL_355;
    v102 = 5;
    v98 = v233;
  }
  (*(void (**)(_QWORD *))(*v98 + 8 * v102))(v98);
LABEL_355:
  v282[0] = v236;
  v282[1] = v237;
  v103 = v283;
  v104 = (uint64_t)v239;
  if (!v239)
  {
LABEL_358:
    v284 = (_QWORD *)v104;
    goto LABEL_360;
  }
  if (v239 != v238)
  {
    v104 = (*(uint64_t (**)(void))(*v239 + 16))();
    goto LABEL_358;
  }
  v284 = v283;
  (*(void (**)(_QWORD *, _QWORD *))(v238[0] + 24))(v238, v283);
LABEL_360:
  v285 = v240;
  v286 = v241;
  v276 = *(_OWORD *)&v242[8];
  v277 = *(_OWORD *)&v242[24];
  v105 = v278;
  v106 = *(_QWORD *)&v245[0];
  if (!*(_QWORD *)&v245[0])
  {
LABEL_363:
    v279 = (_QWORD *)v106;
    goto LABEL_365;
  }
  if (*(_QWORD **)&v245[0] != v243)
  {
    v106 = (*(uint64_t (**)(void))(**(_QWORD **)&v245[0] + 16))();
    goto LABEL_363;
  }
  v279 = v278;
  (*(void (**)(_QWORD *, _QWORD *))(v243[0] + 24))(v243, v278);
LABEL_365:
  v280 = *(_OWORD *)((char *)v245 + 8);
  v281 = *(_OWORD *)((char *)&v245[1] + 8);
  v107 = *(uint64_t **)&v282[0];
  v108 = (uint64_t *)v276;
  if (*(_QWORD *)&v282[0] == (_QWORD)v276)
  {
    v109 = v136;
  }
  else
  {
    v109 = v136;
    do
    {
      *v109 = *((_OWORD *)v107 + 2);
      v107 = (uint64_t *)*v107;
      *(_QWORD *)&v282[0] = v107;
      if (v107 != *(uint64_t **)&v282[1])
      {
        while (*((_BYTE *)v107 + 144) != 1)
        {
          v107 = (uint64_t *)*v107;
          *(_QWORD *)&v282[0] = v107;
          if (v107 == *(uint64_t **)&v282[1])
          {
            v107 = *(uint64_t **)&v282[1];
            break;
          }
        }
      }
      if (v107 != (uint64_t *)v285)
      {
        do
        {
          if (!v284)
            sub_223198474();
          v110 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v284 + 48))(v284, v107 + 4);
          v107 = *(uint64_t **)&v282[0];
          if ((v110 & 1) != 0)
            break;
          v107 = **(uint64_t ***)&v282[0];
          *(_QWORD *)&v282[0] = v107;
          if (v107 != *(uint64_t **)&v282[1])
          {
            while (*((_BYTE *)v107 + 144) != 1)
            {
              v107 = (uint64_t *)*v107;
              *(_QWORD *)&v282[0] = v107;
              if (v107 == *(uint64_t **)&v282[1])
              {
                v107 = *(uint64_t **)&v282[1];
                break;
              }
            }
          }
        }
        while (v107 != (uint64_t *)v285);
        v108 = (uint64_t *)v276;
      }
      ++v109;
    }
    while (v107 != v108);
  }
  if (v279 == v278)
  {
    v111 = 4;
  }
  else
  {
    if (!v279)
      goto LABEL_388;
    v111 = 5;
    v105 = v279;
  }
  (*(void (**)(_QWORD *))(*v105 + 8 * v111))(v105);
LABEL_388:
  if (v284 == v283)
  {
    v113 = 4;
    v112 = v202;
  }
  else
  {
    v112 = v202;
    if (!v284)
      goto LABEL_393;
    v113 = 5;
    v103 = v284;
  }
  (*(void (**)(_QWORD *))(*v103 + 8 * v113))(v103);
LABEL_393:
  if (*(_QWORD **)&v245[0] == v243)
  {
    v114 = 4;
    v55 = v172;
  }
  else
  {
    v55 = v172;
    if (!*(_QWORD *)&v245[0])
      goto LABEL_398;
    v114 = 5;
    v91 = *(_QWORD **)&v245[0];
  }
  (*(void (**)(_QWORD *))(*v91 + 8 * v114))(v91);
LABEL_398:
  if (v239 == v238)
  {
    v116 = 4;
    v115 = v220;
  }
  else
  {
    v115 = v220;
    if (!v239)
      goto LABEL_403;
    v116 = 5;
    v90 = v239;
  }
  (*(void (**)(_QWORD *))(*v90 + 8 * v116))(v90);
LABEL_403:
  v117 = v214;
  if (v215 == v214)
  {
    v118 = 4;
    v63 = v166;
  }
  else
  {
    v63 = v166;
    if (!v215)
      goto LABEL_408;
    v118 = 5;
    v117 = v215;
  }
  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_408:
  if (v221 == v220)
  {
    v119 = 4;
  }
  else
  {
    if (!v221)
      goto LABEL_413;
    v119 = 5;
    v115 = v221;
  }
  (*(void (**)(_QWORD *))(*v115 + 8 * v119))(v115);
LABEL_413:
  i[1] = v109;
  if (v203 == v202)
  {
    v120 = 4;
    v64 = v142;
  }
  else
  {
    v64 = v142;
    if (!v203)
      goto LABEL_418;
    v120 = 5;
    v112 = v203;
  }
  (*(void (**)(_QWORD *))(*v112 + 8 * v120))(v112);
LABEL_418:
  v121 = v208;
  if (v209 == v208)
  {
    v122 = 4;
  }
  else
  {
    if (!v209)
      goto LABEL_423;
    v122 = 5;
    v121 = v209;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_423:
  v123 = v178;
  if (v179 == v178)
  {
    v126 = 4;
    v125 = v154;
    v124 = v148;
  }
  else
  {
    v125 = v154;
    v124 = v148;
    if (!v179)
      goto LABEL_428;
    v126 = 5;
    v123 = v179;
  }
  (*(void (**)(void))(*v123 + 8 * v126))();
LABEL_428:
  if (v185 == v184)
  {
    v128 = v184;
    v127 = 4;
  }
  else
  {
    if (!v185)
      goto LABEL_433;
    v127 = 5;
    v128 = v185;
  }
  (*(void (**)(void))(*v128 + 8 * v127))();
LABEL_433:
  if (v167 == v166)
  {
    v129 = 4;
  }
  else
  {
    if (!v167)
      goto LABEL_438;
    v129 = 5;
    v63 = v167;
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v129))(v63);
LABEL_438:
  if (v173 == v172)
  {
    v130 = 4;
  }
  else
  {
    if (!v173)
      goto LABEL_443;
    v130 = 5;
    v55 = v173;
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v130))(v55);
LABEL_443:
  if (v161 == v160)
  {
    v131 = 4;
  }
  else
  {
    if (!v161)
      goto LABEL_448;
    v131 = 5;
    v58 = v161;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v131))(v58);
LABEL_448:
  if (v155 == v154)
  {
    v132 = 4;
  }
  else
  {
    if (!v155)
      goto LABEL_453;
    v132 = 5;
    v125 = v155;
  }
  (*(void (**)(_QWORD *))(*v125 + 8 * v132))(v125);
LABEL_453:
  if (v149 == v148)
  {
    v133 = 4;
  }
  else
  {
    if (!v149)
      goto LABEL_458;
    v133 = 5;
    v124 = v149;
  }
  (*(void (**)(_QWORD *))(*v124 + 8 * v133))(v124);
LABEL_458:
  if (v143 == v142)
  {
    v134 = 4;
    goto LABEL_462;
  }
  if (v143)
  {
    v134 = 5;
    v64 = v143;
LABEL_462:
    (*(void (**)(_QWORD *))(*v64 + 8 * v134))(v64);
  }
  return kdebug_trace();
}

void sub_223879DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22387A3A0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 17;
  v3 = (_QWORD *)a1[20];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_22387A420(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 16;
  v3 = (_QWORD *)a1[19];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_22387A4A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 *v22;
  _QWORD *v23;
  __int128 *v24;
  _QWORD *v25;
  __int128 *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t result;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  __int128 *v71;
  _QWORD *v72;
  __int128 *v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t *v106;
  _OWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  _QWORD *v132;
  __int128 v133;
  __int128 v134;
  _QWORD v135[3];
  _QWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _QWORD v141[3];
  _QWORD *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD v147[3];
  _QWORD *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _QWORD v153[3];
  _QWORD *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _QWORD v159[3];
  _QWORD *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _QWORD v165[3];
  _QWORD *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _QWORD v171[3];
  _QWORD *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _QWORD v177[3];
  _QWORD *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _QWORD v183[3];
  _QWORD *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  _QWORD v189[3];
  _QWORD *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  _QWORD v195[3];
  _QWORD *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _QWORD v201[3];
  _QWORD *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  _QWORD v207[3];
  _QWORD *v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _QWORD v213[3];
  _QWORD *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _QWORD v219[3];
  _QWORD *v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _QWORD v225[3];
  _QWORD *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  _QWORD v231[3];
  _QWORD *v232;
  __int128 v233;
  __int128 v234;
  _BYTE v235[40];
  _QWORD v236[2];
  _BYTE *v237;
  _BYTE v238[40];
  __int128 v239;
  __int128 v240;
  _QWORD v241[3];
  _QWORD *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  _QWORD v247[3];
  _QWORD *v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _QWORD v253[3];
  _QWORD *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  _QWORD v259[3];
  _QWORD *v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  _QWORD v265[3];
  _QWORD *v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  _QWORD v271[3];
  _QWORD *v272;
  __int128 v273;
  __int128 v274;
  _BYTE v275[32];
  _QWORD v276[3];
  _QWORD *v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;

  v280 = *MEMORY[0x24BDAC8D0];
  for (i = *(uint64_t **)(*(_QWORD *)(a1 + 1224) + 16); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 144) == 1)
      break;
  }
  *(_QWORD *)&v230 = 0;
  v229 = *(unint64_t *)v275;
  *(_OWORD *)&v275[8] = *(unint64_t *)v275;
  *(_QWORD *)v275 = i;
  v263 = v230;
  v278 = v230;
  *(_QWORD *)&v279 = 0;
  v6 = v276;
  v276[0] = &off_24EC5B4A0;
  v276[1] = a2;
  v277 = v276;
  if (i)
  {
    v7 = v276;
    while (((*(uint64_t (**)(_QWORD *, uint64_t *))(*v7 + 48))(v7, i + 4) & 1) == 0)
    {
      i = **(uint64_t ***)v275;
      *(_QWORD *)v275 = i;
      if (i != *(uint64_t **)&v275[16])
      {
        while (*((_BYTE *)i + 144) != 1)
        {
          i = (uint64_t *)*i;
          *(_QWORD *)v275 = i;
          if (i == *(uint64_t **)&v275[16])
          {
            i = *(uint64_t **)&v275[16];
            break;
          }
        }
      }
      if (i == (uint64_t *)v278)
        break;
      v7 = v277;
      if (!v277)
        sub_223198474();
    }
  }
  v269 = v263;
  v273 = v263;
  *(_QWORD *)&v274 = 0;
  v8 = v271;
  *(_QWORD *)&v270 = 0;
  v271[0] = &off_24EC5B4A0;
  v271[1] = a2;
  v272 = v271;
  v229 = *(_OWORD *)v275;
  v230 = *(_OWORD *)&v275[16];
  v9 = v231;
  if (v277)
  {
    if (v277 == v276)
    {
      v232 = v231;
      (*(void (**)(_QWORD *, _QWORD *))(v276[0] + 24))(v276, v231);
    }
    else
    {
      v232 = v277;
      v277 = 0;
    }
  }
  else
  {
    v232 = 0;
  }
  v233 = v278;
  v234 = v279;
  *(_OWORD *)v235 = v269;
  *(_OWORD *)&v235[16] = v270;
  v10 = &v235[32];
  if (v272)
  {
    if (v272 == v271)
    {
      v237 = &v235[32];
      (*(void (**)(uint64_t, _QWORD *))(v271[0] + 24))((uint64_t)v271, &v235[32]);
    }
    else
    {
      v237 = v272;
      v272 = 0;
    }
  }
  else
  {
    v237 = 0;
  }
  *(_OWORD *)v238 = v273;
  *(_OWORD *)&v238[16] = v274;
  if (v272 == v271)
  {
    v11 = 4;
  }
  else
  {
    if (!v272)
      goto LABEL_29;
    v11 = 5;
    v8 = v272;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v11))(v8);
LABEL_29:
  if (v277 == v276)
  {
    v12 = 4;
  }
  else
  {
    if (!v277)
      goto LABEL_34;
    v12 = 5;
    v6 = v277;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v12))(v6);
LABEL_34:
  v133 = v229;
  v134 = v230;
  v13 = &v133;
  if (!v232)
  {
LABEL_37:
    *((_QWORD *)v13 + 7) = 0;
    goto LABEL_39;
  }
  if (v232 != v231)
  {
    v13 = &v229;
    v136 = v232;
    goto LABEL_37;
  }
  v136 = v135;
  (*(void (**)(_QWORD *, _QWORD *))(v231[0] + 24))(v231, v135);
LABEL_39:
  v137 = v233;
  v138 = v234;
  v139 = *(_OWORD *)v235;
  v140 = *(_OWORD *)&v235[16];
  if (v237)
  {
    if (v237 == &v235[32])
    {
      v142 = v141;
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)&v235[32] + 24))(&v235[32], v141);
    }
    else
    {
      v142 = v237;
      v237 = 0;
    }
  }
  else
  {
    v142 = 0;
  }
  v143 = *(_OWORD *)v238;
  v144 = *(_OWORD *)&v238[16];
  if (v237 == &v235[32])
  {
    v14 = 4;
  }
  else
  {
    if (!v237)
      goto LABEL_49;
    v14 = 5;
    v10 = v237;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v14))(v10);
LABEL_49:
  if (v232 == v231)
  {
    v15 = 4;
  }
  else
  {
    if (!v232)
      goto LABEL_54;
    v15 = 5;
    v9 = v232;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v15))(v9);
LABEL_54:
  v251 = v133;
  v252 = v134;
  v16 = v253;
  v17 = v136;
  if (!v136)
  {
    v254 = 0;
    v255 = v137;
    v256 = v138;
    v263 = v133;
    v264 = v134;
    v18 = v265;
LABEL_62:
    v266 = v17;
    goto LABEL_63;
  }
  if (v136 == v135)
  {
    v254 = v253;
    (*(void (**)(_QWORD *, _QWORD *))(v135[0] + 24))(v135, v253);
    v17 = v254;
  }
  else
  {
    v17 = (_QWORD *)(*(uint64_t (**)(void))(*v136 + 16))();
    v254 = v17;
  }
  v255 = v137;
  v256 = v138;
  v263 = v251;
  v264 = v252;
  v18 = v265;
  if (!v17)
    goto LABEL_62;
  if (v17 != v253)
  {
    v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
    goto LABEL_62;
  }
  v266 = v265;
  (*(void (**)(_QWORD *, _QWORD *))(v253[0] + 24))(v253, v265);
LABEL_63:
  v268 = v256;
  v267 = v255;
  v245 = v139;
  v246 = v140;
  v19 = v247;
  v20 = v142;
  if (!v142)
  {
    v248 = 0;
    v249 = v143;
    v250 = v144;
    v257 = v139;
    v258 = v140;
    v21 = v259;
LABEL_71:
    v260 = v20;
    goto LABEL_72;
  }
  if (v142 == v141)
  {
    v248 = v247;
    (*(void (**)(_QWORD *, _QWORD *))(v141[0] + 24))(v141, v247);
    v20 = v248;
  }
  else
  {
    v20 = (_QWORD *)(*(uint64_t (**)(void))(*v142 + 16))();
    v248 = v20;
  }
  v249 = v143;
  v250 = v144;
  v257 = v245;
  v258 = v246;
  v21 = v259;
  if (!v20)
    goto LABEL_71;
  if (v20 != v247)
  {
    v20 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
    goto LABEL_71;
  }
  v260 = v259;
  (*(void (**)(_QWORD *, _QWORD *))(v247[0] + 24))(v247, v259);
LABEL_72:
  v262 = v250;
  v261 = v249;
  *(_OWORD *)v275 = v263;
  *(_OWORD *)&v275[16] = v264;
  v22 = (__int128 *)v275;
  v23 = v276;
  if (!v266)
  {
LABEL_75:
    *((_QWORD *)v22 + 7) = 0;
    goto LABEL_77;
  }
  if (v266 != v265)
  {
    v22 = &v263;
    v277 = v266;
    goto LABEL_75;
  }
  v277 = v276;
  (*(void (**)(_QWORD *, _QWORD *))(v265[0] + 24))(v265, v276);
LABEL_77:
  v278 = v267;
  v279 = v268;
  v269 = v257;
  v270 = v258;
  v24 = &v269;
  v25 = v271;
  if (!v260)
  {
LABEL_80:
    *((_QWORD *)v24 + 7) = 0;
    goto LABEL_82;
  }
  if (v260 != v259)
  {
    v24 = &v257;
    v272 = v260;
    goto LABEL_80;
  }
  v272 = v271;
  (*(void (**)(_QWORD *, _QWORD *))(v259[0] + 24))(v259, v271);
LABEL_82:
  v273 = v261;
  v274 = v262;
  v229 = *(_OWORD *)v275;
  v230 = *(_OWORD *)&v275[16];
  v26 = &v229;
  v27 = v231;
  if (!v277)
  {
LABEL_85:
    *((_QWORD *)v26 + 7) = 0;
    goto LABEL_87;
  }
  if (v277 != v276)
  {
    v26 = (__int128 *)v275;
    v232 = v277;
    goto LABEL_85;
  }
  v232 = v231;
  (*(void (**)(_QWORD *, _QWORD *))(v276[0] + 24))(v276, v231);
LABEL_87:
  v233 = v278;
  v234 = v279;
  *(_OWORD *)&v235[8] = v269;
  *(_OWORD *)&v235[24] = v270;
  v28 = v236;
  if (v272)
  {
    if (v272 == v271)
    {
      *(_QWORD *)v238 = v236;
      (*(void (**)(uint64_t, _QWORD *))(v271[0] + 24))((uint64_t)v271, v236);
    }
    else
    {
      *(_QWORD *)v238 = v272;
      v272 = 0;
    }
  }
  else
  {
    *(_QWORD *)v238 = 0;
  }
  *(_OWORD *)&v238[8] = v273;
  *(_OWORD *)&v238[24] = v274;
  if (v272 == v271)
  {
    v29 = 4;
  }
  else
  {
    if (!v272)
      goto LABEL_97;
    v29 = 5;
    v25 = v272;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v29))(v25);
LABEL_97:
  if (v277 == v276)
  {
    v30 = 4;
  }
  else
  {
    if (!v277)
      goto LABEL_102;
    v30 = 5;
    v23 = v277;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v30))(v23);
LABEL_102:
  if (v260 == v259)
  {
    v31 = 4;
  }
  else
  {
    if (!v260)
      goto LABEL_107;
    v31 = 5;
    v21 = v260;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v31))(v21);
LABEL_107:
  if (v248 == v247)
  {
    v32 = 4;
  }
  else
  {
    if (!v248)
      goto LABEL_112;
    v32 = 5;
    v19 = v248;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v32))(v19);
LABEL_112:
  if (v266 == v265)
  {
    v33 = 4;
  }
  else
  {
    if (!v266)
      goto LABEL_117;
    v33 = 5;
    v18 = v266;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v33))(v18);
LABEL_117:
  if (v254 == v253)
  {
    v34 = 4;
  }
  else
  {
    if (!v254)
      goto LABEL_122;
    v34 = 5;
    v16 = v254;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v34))(v16);
LABEL_122:
  v145 = v229;
  v146 = v230;
  v35 = &v145;
  if (!v232)
  {
LABEL_125:
    *((_QWORD *)v35 + 7) = 0;
    goto LABEL_127;
  }
  if (v232 != v231)
  {
    v35 = &v229;
    v148 = v232;
    goto LABEL_125;
  }
  v148 = v147;
  (*(void (**)(_QWORD *, _QWORD *))(v231[0] + 24))(v231, v147);
LABEL_127:
  v149 = v233;
  v150 = v234;
  v151 = *(_OWORD *)&v235[8];
  v152 = *(_OWORD *)&v235[24];
  if (*(_QWORD *)v238)
  {
    if (*(_QWORD **)v238 == v236)
    {
      v154 = v153;
      (*(void (**)(_QWORD *, _QWORD *))(v236[0] + 24))(v236, v153);
    }
    else
    {
      v154 = *(_QWORD **)v238;
      *(_QWORD *)v238 = 0;
    }
  }
  else
  {
    v154 = 0;
  }
  v155 = *(_OWORD *)&v238[8];
  v156 = *(_OWORD *)&v238[24];
  if (*(_QWORD **)v238 == v236)
  {
    v36 = 4;
  }
  else
  {
    if (!*(_QWORD *)v238)
      goto LABEL_137;
    v36 = 5;
    v28 = *(_QWORD **)v238;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v36))(v28);
LABEL_137:
  if (v232 == v231)
  {
    v37 = 4;
  }
  else
  {
    if (!v232)
      goto LABEL_142;
    v37 = 5;
    v27 = v232;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v37))(v27);
LABEL_142:
  v163 = v145;
  v164 = v146;
  v38 = v165;
  v39 = (uint64_t)v148;
  if (!v148)
  {
LABEL_145:
    v166 = (_QWORD *)v39;
    goto LABEL_147;
  }
  if (v148 != v147)
  {
    v39 = (*(uint64_t (**)(void))(*v148 + 16))();
    goto LABEL_145;
  }
  v166 = v165;
  (*(void (**)(_QWORD *, _QWORD *))(v147[0] + 24))(v147, v165);
LABEL_147:
  v167 = v149;
  v168 = v150;
  v157 = v151;
  v158 = v152;
  v40 = v159;
  v41 = (uint64_t)v154;
  if (!v154)
  {
LABEL_150:
    v160 = (_QWORD *)v41;
    goto LABEL_152;
  }
  if (v154 != v153)
  {
    v41 = (*(uint64_t (**)(void))(*v154 + 16))();
    goto LABEL_150;
  }
  v160 = v159;
  (*(void (**)(_QWORD *, _QWORD *))(v153[0] + 24))(v153, v159);
LABEL_152:
  v161 = v155;
  v162 = v156;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v187 = v163;
  v188 = v164;
  v42 = v189;
  v43 = (uint64_t)v166;
  if (!v166)
  {
LABEL_155:
    v190 = (_QWORD *)v43;
    goto LABEL_157;
  }
  if (v166 != v165)
  {
    v43 = (*(uint64_t (**)(void))(*v166 + 16))();
    goto LABEL_155;
  }
  v190 = v189;
  (*(void (**)(_QWORD *, _QWORD *))(v165[0] + 24))(v165, v189);
LABEL_157:
  v191 = v167;
  v192 = v168;
  v181 = v157;
  v182 = v158;
  v44 = v183;
  v45 = (uint64_t)v160;
  if (!v160)
  {
LABEL_160:
    v184 = (_QWORD *)v45;
    goto LABEL_162;
  }
  if (v160 != v159)
  {
    v45 = (*(uint64_t (**)(void))(*v160 + 16))();
    goto LABEL_160;
  }
  v184 = v183;
  (*(void (**)(_QWORD *, _QWORD *))(v159[0] + 24))(v159, v183);
LABEL_162:
  v185 = v161;
  v186 = v162;
  v229 = v187;
  v230 = v188;
  v46 = v231;
  v47 = (uint64_t)v190;
  if (!v190)
  {
LABEL_165:
    v232 = (_QWORD *)v47;
    goto LABEL_167;
  }
  if (v190 != v189)
  {
    v47 = (*(uint64_t (**)(void))(*v190 + 16))();
    goto LABEL_165;
  }
  v232 = v231;
  (*(void (**)(_QWORD *, _QWORD *))(v189[0] + 24))(v189, v231);
LABEL_167:
  v233 = v191;
  v234 = v192;
  *(_OWORD *)v275 = v181;
  *(_OWORD *)&v275[16] = v182;
  v48 = v276;
  v49 = (uint64_t)v184;
  if (!v184)
  {
LABEL_170:
    v277 = (_QWORD *)v49;
    goto LABEL_172;
  }
  if (v184 != v183)
  {
    v49 = (*(uint64_t (**)(void))(*v184 + 16))();
    goto LABEL_170;
  }
  v277 = v276;
  (*(void (**)(_QWORD *, _QWORD *))(v183[0] + 24))(v183, v276);
LABEL_172:
  v278 = v185;
  v279 = v186;
  v50 = (uint64_t *)v229;
  v51 = *(uint64_t **)v275;
  if ((_QWORD)v229 == *(_QWORD *)v275)
  {
    v52 = 0;
  }
  else
  {
    v52 = 0;
    do
    {
      v50 = (uint64_t *)*v50;
      *(_QWORD *)&v229 = v50;
      if (v50 != (uint64_t *)v230)
      {
        while (*((_BYTE *)v50 + 144) != 1)
        {
          v50 = (uint64_t *)*v50;
          *(_QWORD *)&v229 = v50;
          if (v50 == (uint64_t *)v230)
          {
            v50 = (uint64_t *)v230;
            break;
          }
        }
      }
      if (v50 != (uint64_t *)v233)
      {
        do
        {
          if (!v232)
            sub_223198474();
          v53 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v232 + 48))(v232, v50 + 4);
          v50 = (uint64_t *)v229;
          if ((v53 & 1) != 0)
            break;
          v50 = *(uint64_t **)v229;
          *(_QWORD *)&v229 = v50;
          if (v50 != (uint64_t *)v230)
          {
            while (*((_BYTE *)v50 + 144) != 1)
            {
              v50 = (uint64_t *)*v50;
              *(_QWORD *)&v229 = v50;
              if (v50 == (uint64_t *)v230)
              {
                v50 = (uint64_t *)v230;
                break;
              }
            }
          }
        }
        while (v50 != (uint64_t *)v233);
        v51 = *(uint64_t **)v275;
      }
      ++v52;
    }
    while (v50 != v51);
  }
  if (v277 == v276)
  {
    v54 = 4;
  }
  else
  {
    if (!v277)
      goto LABEL_195;
    v54 = 5;
    v48 = v277;
  }
  (*(void (**)(_QWORD *))(*v48 + 8 * v54))(v48);
LABEL_195:
  if (v232 == v231)
  {
    v55 = 4;
  }
  else
  {
    if (!v232)
      goto LABEL_200;
    v55 = 5;
    v46 = v232;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v55))(v46);
LABEL_200:
  if (v184 == v183)
  {
    v56 = 4;
  }
  else
  {
    if (!v184)
      goto LABEL_205;
    v56 = 5;
    v44 = v184;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v56))(v44);
LABEL_205:
  if (v190 == v189)
  {
    v57 = 4;
  }
  else
  {
    if (!v190)
      goto LABEL_210;
    v57 = 5;
    v42 = v190;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v57))(v42);
LABEL_210:
  v175 = v163;
  v176 = v164;
  v58 = v177;
  v59 = (uint64_t)v166;
  if (!v166)
  {
LABEL_213:
    v178 = (_QWORD *)v59;
    goto LABEL_215;
  }
  if (v166 != v165)
  {
    v59 = (*(uint64_t (**)(void))(*v166 + 16))();
    goto LABEL_213;
  }
  v178 = v177;
  (*(void (**)(_QWORD *, _QWORD *))(v165[0] + 24))(v165, v177);
LABEL_215:
  v179 = v167;
  v180 = v168;
  v169 = v157;
  v170 = v158;
  v60 = v171;
  result = (uint64_t)v160;
  if (!v160)
  {
LABEL_218:
    v172 = (_QWORD *)result;
    goto LABEL_220;
  }
  if (v160 != v159)
  {
    result = (*(uint64_t (**)(void))(*v160 + 16))();
    goto LABEL_218;
  }
  v172 = v171;
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(v159[0] + 24))(v159, v171);
LABEL_220:
  v173 = v161;
  v174 = v162;
  if (!v52)
    goto LABEL_423;
  if (v52 >> 60)
    sub_22316E078();
  v62 = (char *)operator new(16 * v52);
  *a3 = v62;
  a3[1] = v62;
  a3[2] = &v62[16 * v52];
  v199 = v175;
  v200 = v176;
  v63 = (uint64_t)v178;
  if (!v178)
    goto LABEL_225;
  if (v178 != v177)
  {
    v63 = (*(uint64_t (**)(void))(*v178 + 16))();
LABEL_225:
    v202 = (_QWORD *)v63;
    goto LABEL_229;
  }
  v202 = v201;
  (*(void (**)(_QWORD *, _QWORD *))(v177[0] + 24))(v177, v201);
LABEL_229:
  v203 = v179;
  v204 = v180;
  v193 = v169;
  v194 = v170;
  v64 = (uint64_t)v172;
  if (!v172)
  {
LABEL_232:
    v196 = (_QWORD *)v64;
    goto LABEL_234;
  }
  if (v172 != v171)
  {
    v64 = (*(uint64_t (**)(void))(*v172 + 16))();
    goto LABEL_232;
  }
  v196 = v195;
  (*(void (**)(_QWORD *, _QWORD *))(v171[0] + 24))(v171, v195);
LABEL_234:
  v197 = v173;
  v198 = v174;
  v211 = v199;
  v212 = v200;
  v65 = (uint64_t)v202;
  if (!v202)
  {
LABEL_237:
    v214 = (_QWORD *)v65;
    goto LABEL_239;
  }
  if (v202 != v201)
  {
    v65 = (*(uint64_t (**)(void))(*v202 + 16))();
    goto LABEL_237;
  }
  v214 = v213;
  (*(void (**)(_QWORD *, _QWORD *))(v201[0] + 24))(v201, v213);
LABEL_239:
  v215 = v203;
  v216 = v204;
  v205 = v193;
  v206 = v194;
  v66 = (uint64_t)v196;
  v132 = a3;
  v131 = v62;
  if (!v196)
  {
LABEL_242:
    v208 = (_QWORD *)v66;
    goto LABEL_244;
  }
  if (v196 != v195)
  {
    v66 = (*(uint64_t (**)(void))(*v196 + 16))();
    goto LABEL_242;
  }
  v208 = v207;
  (*(void (**)(_QWORD *))(v195[0] + 24))(v195);
LABEL_244:
  v209 = v197;
  v210 = v198;
  v223 = v211;
  v224 = v212;
  v67 = v225;
  v68 = (uint64_t)v214;
  if (!v214)
  {
LABEL_247:
    v226 = (_QWORD *)v68;
    goto LABEL_249;
  }
  if (v214 != v213)
  {
    v68 = (*(uint64_t (**)(void))(*v214 + 16))();
    goto LABEL_247;
  }
  v226 = v225;
  (*(void (**)(_QWORD *, _QWORD *))(v213[0] + 24))(v213, v225);
LABEL_249:
  v227 = v215;
  v228 = v216;
  v217 = v205;
  v218 = v206;
  v69 = v219;
  v70 = (uint64_t)v208;
  if (!v208)
  {
LABEL_252:
    v220 = (_QWORD *)v70;
    goto LABEL_254;
  }
  if (v208 != v207)
  {
    v70 = (*(uint64_t (**)(void))(*v208 + 16))();
    goto LABEL_252;
  }
  v220 = v219;
  (*(void (**)(_QWORD *, _QWORD *))(v207[0] + 24))(v207, v219);
LABEL_254:
  v221 = v209;
  v222 = v210;
  v245 = v223;
  v246 = v224;
  v71 = &v245;
  v72 = v247;
  if (!v226)
  {
LABEL_257:
    *((_QWORD *)v71 + 7) = 0;
    goto LABEL_259;
  }
  if (v226 != v225)
  {
    v71 = &v223;
    v248 = v226;
    goto LABEL_257;
  }
  v248 = v247;
  (*(void (**)(_QWORD *, _QWORD *))(v225[0] + 24))(v225, v247);
LABEL_259:
  v249 = v227;
  v250 = v228;
  v239 = v217;
  v240 = v218;
  v73 = &v239;
  v74 = v241;
  if (!v220)
  {
LABEL_262:
    *((_QWORD *)v73 + 7) = 0;
    goto LABEL_264;
  }
  if (v220 != v219)
  {
    v73 = &v217;
    v242 = v220;
    goto LABEL_262;
  }
  v242 = v241;
  (*(void (**)(_QWORD *, _QWORD *))(v219[0] + 24))(v219, v241);
LABEL_264:
  v243 = v221;
  v244 = v222;
  v263 = v245;
  v264 = v246;
  v75 = &v263;
  v76 = v265;
  if (!v248)
  {
LABEL_267:
    *((_QWORD *)v75 + 7) = 0;
    goto LABEL_269;
  }
  if (v248 != v247)
  {
    v75 = &v245;
    v266 = v248;
    goto LABEL_267;
  }
  v266 = v265;
  (*(void (**)(_QWORD *, _QWORD *))(v247[0] + 24))(v247, v265);
LABEL_269:
  v267 = v249;
  v268 = v250;
  *(_OWORD *)v275 = v263;
  *(_OWORD *)&v275[16] = v264;
  v77 = v276;
  if (!v266)
  {
    v277 = 0;
    v278 = v249;
    v279 = v250;
    v269 = v263;
    v270 = v264;
LABEL_277:
    v79 = &v269;
    goto LABEL_278;
  }
  if (v266 == v265)
  {
    v277 = v276;
    (*(void (**)(_QWORD *, _QWORD *))(v265[0] + 24))(v265, v276);
    v78 = v277;
  }
  else
  {
    v78 = (_QWORD *)(*(uint64_t (**)(void))(*v266 + 16))();
    v277 = v78;
  }
  v79 = (__int128 *)v275;
  v278 = v267;
  v279 = v268;
  v269 = *(_OWORD *)v275;
  v270 = *(_OWORD *)&v275[16];
  if (!v78)
    goto LABEL_277;
  if (v78 != v276)
  {
    v272 = v78;
LABEL_278:
    *((_QWORD *)v79 + 7) = 0;
    goto LABEL_279;
  }
  v272 = v271;
  (*(void (**)(_QWORD *))(v276[0] + 24))(v276);
LABEL_279:
  v274 = v279;
  v273 = v278;
  if (v277 == v276)
  {
    v80 = 4;
  }
  else
  {
    if (!v277)
      goto LABEL_284;
    v80 = 5;
    v77 = v277;
  }
  (*(void (**)(_QWORD *))(*v77 + 8 * v80))(v77);
LABEL_284:
  v251 = v239;
  v252 = v240;
  v81 = &v251;
  v82 = v253;
  if (!v242)
  {
LABEL_287:
    *((_QWORD *)v81 + 7) = 0;
    goto LABEL_289;
  }
  if (v242 != v241)
  {
    v81 = &v239;
    v254 = v242;
    goto LABEL_287;
  }
  v254 = v253;
  (*(void (**)(_QWORD *, _QWORD *))(v241[0] + 24))(v241, v253);
LABEL_289:
  v255 = v243;
  v256 = v244;
  *(_OWORD *)v275 = v251;
  *(_OWORD *)&v275[16] = v252;
  v83 = v276;
  if (!v254)
  {
    v277 = 0;
    v278 = v243;
    v279 = v244;
    v257 = v251;
    v258 = v252;
LABEL_297:
    v85 = &v257;
    goto LABEL_298;
  }
  if (v254 == v253)
  {
    v277 = v276;
    (*(void (**)(_QWORD *, _QWORD *))(v253[0] + 24))(v253, v276);
    v84 = v277;
  }
  else
  {
    v84 = (_QWORD *)(*(uint64_t (**)(void))(*v254 + 16))();
    v277 = v84;
  }
  v85 = (__int128 *)v275;
  v278 = v255;
  v279 = v256;
  v257 = *(_OWORD *)v275;
  v258 = *(_OWORD *)&v275[16];
  if (!v84)
    goto LABEL_297;
  if (v84 != v276)
  {
    v260 = v84;
LABEL_298:
    *((_QWORD *)v85 + 7) = 0;
    goto LABEL_299;
  }
  v260 = v259;
  (*(void (**)(_QWORD *))(v276[0] + 24))(v276);
LABEL_299:
  v262 = v279;
  v261 = v278;
  if (v277 == v276)
  {
    v86 = 4;
  }
  else
  {
    if (!v277)
      goto LABEL_304;
    v86 = 5;
    v83 = v277;
  }
  (*(void (**)(_QWORD *))(*v83 + 8 * v86))(v83);
LABEL_304:
  v229 = v269;
  v230 = v270;
  v87 = &v229;
  v88 = v231;
  if (!v272)
  {
LABEL_307:
    *((_QWORD *)v87 + 7) = 0;
    goto LABEL_309;
  }
  v87 = &v269;
  if (v272 != v271)
  {
    v232 = v272;
    goto LABEL_307;
  }
  v232 = v231;
  (*(void (**)(uint64_t, _QWORD *))(v271[0] + 24))((uint64_t)v271, v231);
LABEL_309:
  v233 = v273;
  v234 = v274;
  *(_OWORD *)&v235[8] = v257;
  *(_OWORD *)&v235[24] = v258;
  v89 = v236;
  if (v260)
  {
    if (v260 == v259)
    {
      *(_QWORD *)v238 = v236;
      (*(void (**)(void))(v259[0] + 24))();
    }
    else
    {
      *(_QWORD *)v238 = v260;
      v260 = 0;
    }
  }
  else
  {
    *(_QWORD *)v238 = 0;
  }
  *(_OWORD *)&v238[8] = v261;
  *(_OWORD *)&v238[24] = v262;
  v90 = v260;
  if (v260 == v259)
  {
    v91 = 4;
    v90 = v259;
  }
  else
  {
    if (!v260)
      goto LABEL_319;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_319:
  if (v254 == v253)
  {
    v92 = 4;
  }
  else
  {
    if (!v254)
      goto LABEL_324;
    v92 = 5;
    v82 = v254;
  }
  (*(void (**)(_QWORD *))(*v82 + 8 * v92))(v82);
LABEL_324:
  v93 = v272;
  if (v272 == v271)
  {
    v95 = 4;
    v93 = v271;
    v94 = v132;
  }
  else
  {
    v94 = v132;
    if (!v272)
      goto LABEL_329;
    v95 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v95))();
LABEL_329:
  if (v266 == v265)
  {
    v96 = 4;
  }
  else
  {
    if (!v266)
      goto LABEL_334;
    v96 = 5;
    v76 = v266;
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v96))(v76);
LABEL_334:
  if (v242 == v241)
  {
    v98 = 4;
    v97 = v213;
  }
  else
  {
    v97 = v213;
    if (!v242)
      goto LABEL_339;
    v98 = 5;
    v74 = v242;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v98))(v74);
LABEL_339:
  if (v248 == v247)
  {
    v99 = 4;
  }
  else
  {
    if (!v248)
      goto LABEL_344;
    v99 = 5;
    v72 = v248;
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v99))(v72);
LABEL_344:
  if (v220 == v219)
  {
    v100 = 4;
  }
  else
  {
    if (!v220)
      goto LABEL_349;
    v100 = 5;
    v69 = v220;
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v100))(v69);
LABEL_349:
  if (v226 == v225)
  {
    v101 = 4;
  }
  else
  {
    if (!v226)
      goto LABEL_354;
    v101 = 5;
    v67 = v226;
  }
  (*(void (**)(_QWORD *))(*v67 + 8 * v101))(v67);
LABEL_354:
  *(_OWORD *)v275 = v229;
  *(_OWORD *)&v275[16] = v230;
  v102 = v276;
  v103 = (uint64_t)v232;
  if (!v232)
  {
LABEL_357:
    v277 = (_QWORD *)v103;
    goto LABEL_359;
  }
  if (v232 != v231)
  {
    v103 = (*(uint64_t (**)(void))(*v232 + 16))();
    goto LABEL_357;
  }
  v277 = v276;
  (*(void (**)(_QWORD *, _QWORD *))(v231[0] + 24))(v231, v276);
LABEL_359:
  v278 = v233;
  v279 = v234;
  v269 = *(_OWORD *)&v235[8];
  v270 = *(_OWORD *)&v235[24];
  v104 = v271;
  result = *(_QWORD *)v238;
  if (!*(_QWORD *)v238)
  {
    v40 = v159;
    v38 = v165;
    goto LABEL_363;
  }
  v40 = v159;
  v38 = v165;
  if (*(_QWORD **)v238 != v236)
  {
    result = (*(uint64_t (**)(void))(**(_QWORD **)v238 + 16))();
LABEL_363:
    v272 = (_QWORD *)result;
    goto LABEL_365;
  }
  v272 = v271;
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(v236[0] + 24))(v236, v271);
LABEL_365:
  v273 = *(_OWORD *)&v238[8];
  v274 = *(_OWORD *)&v238[24];
  v105 = *(uint64_t **)v275;
  v106 = (uint64_t *)v269;
  if (*(_QWORD *)v275 == (_QWORD)v269)
  {
    v107 = v131;
  }
  else
  {
    v107 = v131;
    do
    {
      *v107 = *((_OWORD *)v105 + 2);
      v105 = (uint64_t *)*v105;
      *(_QWORD *)v275 = v105;
      if (v105 != *(uint64_t **)&v275[16])
      {
        while (*((_BYTE *)v105 + 144) != 1)
        {
          v105 = (uint64_t *)*v105;
          *(_QWORD *)v275 = v105;
          if (v105 == *(uint64_t **)&v275[16])
          {
            v105 = *(uint64_t **)&v275[16];
            break;
          }
        }
      }
      if (v105 != (uint64_t *)v278)
      {
        do
        {
          if (!v277)
            sub_223198474();
          result = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v277 + 48))(v277, v105 + 4);
          v105 = *(uint64_t **)v275;
          if ((result & 1) != 0)
            break;
          v105 = **(uint64_t ***)v275;
          *(_QWORD *)v275 = v105;
          if (v105 != *(uint64_t **)&v275[16])
          {
            while (*((_BYTE *)v105 + 144) != 1)
            {
              v105 = (uint64_t *)*v105;
              *(_QWORD *)v275 = v105;
              if (v105 == *(uint64_t **)&v275[16])
              {
                v105 = *(uint64_t **)&v275[16];
                break;
              }
            }
          }
        }
        while (v105 != (uint64_t *)v278);
        v106 = (uint64_t *)v269;
      }
      ++v107;
    }
    while (v105 != v106);
  }
  if (v272 == v271)
  {
    v108 = 4;
  }
  else
  {
    if (!v272)
      goto LABEL_388;
    v108 = 5;
    v104 = v272;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v104 + 8 * v108))(v104);
LABEL_388:
  if (v277 == v276)
  {
    v110 = 4;
    v109 = v195;
  }
  else
  {
    v109 = v195;
    if (!v277)
      goto LABEL_393;
    v110 = 5;
    v102 = v277;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v102 + 8 * v110))(v102);
LABEL_393:
  if (*(_QWORD **)v238 == v236)
  {
    v111 = 4;
  }
  else
  {
    if (!*(_QWORD *)v238)
      goto LABEL_398;
    v111 = 5;
    v89 = *(_QWORD **)v238;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v89 + 8 * v111))(v89);
LABEL_398:
  if (v232 == v231)
  {
    v113 = 4;
    v112 = v201;
  }
  else
  {
    v112 = v201;
    if (!v232)
      goto LABEL_403;
    v113 = 5;
    v88 = v232;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v88 + 8 * v113))(v88);
LABEL_403:
  if (v208 == v207)
  {
    v114 = 4;
    v60 = v171;
    v115 = v207;
  }
  else
  {
    v60 = v171;
    if (!v208)
      goto LABEL_408;
    v114 = 5;
    v115 = v208;
  }
  result = (*(uint64_t (**)(void))(*v115 + 8 * v114))();
LABEL_408:
  if (v214 == v213)
  {
    v116 = 4;
  }
  else
  {
    if (!v214)
      goto LABEL_413;
    v116 = 5;
    v97 = v214;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v97 + 8 * v116))(v97);
LABEL_413:
  v94[1] = v107;
  if (v196 == v195)
  {
    v117 = 4;
  }
  else
  {
    if (!v196)
      goto LABEL_418;
    v117 = 5;
    v109 = v196;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v109 + 8 * v117))(v109);
LABEL_418:
  if (v202 == v201)
  {
    v118 = 4;
  }
  else
  {
    if (!v202)
      goto LABEL_423;
    v118 = 5;
    v112 = v202;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v112 + 8 * v118))(v112);
LABEL_423:
  if (v172 == v171)
  {
    v122 = 4;
    v119 = v135;
    v121 = v153;
    v120 = v147;
  }
  else
  {
    v119 = v135;
    v121 = v153;
    v120 = v147;
    if (!v172)
      goto LABEL_428;
    v122 = 5;
    v60 = v172;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v60 + 8 * v122))(v60);
LABEL_428:
  if (v178 == v177)
  {
    v123 = 4;
  }
  else
  {
    if (!v178)
      goto LABEL_433;
    v123 = 5;
    v58 = v178;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v58 + 8 * v123))(v58);
LABEL_433:
  if (v160 == v159)
  {
    v125 = 4;
    v124 = v141;
  }
  else
  {
    v124 = v141;
    if (!v160)
      goto LABEL_438;
    v125 = 5;
    v40 = v160;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v40 + 8 * v125))(v40);
LABEL_438:
  if (v166 == v165)
  {
    v126 = 4;
  }
  else
  {
    if (!v166)
      goto LABEL_443;
    v126 = 5;
    v38 = v166;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v38 + 8 * v126))(v38);
LABEL_443:
  if (v154 == v153)
  {
    v127 = 4;
  }
  else
  {
    if (!v154)
      goto LABEL_448;
    v127 = 5;
    v121 = v154;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v121 + 8 * v127))(v121);
LABEL_448:
  if (v148 == v147)
  {
    v128 = 4;
  }
  else
  {
    if (!v148)
      goto LABEL_453;
    v128 = 5;
    v120 = v148;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v120 + 8 * v128))(v120);
LABEL_453:
  if (v142 == v141)
  {
    v129 = 4;
  }
  else
  {
    if (!v142)
      goto LABEL_458;
    v129 = 5;
    v124 = v142;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v124 + 8 * v129))(v124);
LABEL_458:
  if (v136 == v135)
  {
    v130 = 4;
  }
  else
  {
    if (!v136)
      return result;
    v130 = 5;
    v119 = v136;
  }
  return (*(uint64_t (**)(_QWORD *))(*v119 + 8 * v130))(v119);
}

void sub_22387C0D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_22387C67C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const std::error_category *v20;
  __int128 v21;
  const std::error_category *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  CFErrorRef v27[3];
  void *__p[2];
  char v29;
  __int128 v30;
  char v31;
  std::error_condition v32;
  int v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 1224);
  v35 = *(_OWORD *)a2;
  if (sub_223340F28(v6, (uint64_t)&v35))
  {
    sub_22319597C(*(_QWORD *)(a1 + 1232), a2, &v30);
    if ((_QWORD)v30)
    {
      v7 = (__int128 *)sub_223822434(*(_QWORD **)(a1 + 1224), *a2, a2[1]);
      v8 = v7[1];
      v35 = *v7;
      v36 = v8;
      v9 = v7[3];
      v37 = v7[2];
      v38 = v9;
      v10 = v7[5];
      v39 = v7[4];
      v11 = v30;
      if (*((_QWORD *)&v30 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      *(_OWORD *)a3 = v35;
      v14 = v37;
      *(_OWORD *)(a3 + 32) = v36;
      *(_OWORD *)(a3 + 48) = v14;
      v15 = v39;
      *(_OWORD *)(a3 + 64) = v38;
      *(_OWORD *)(a3 + 80) = v15;
      v16 = *(_OWORD *)(a1 + 184);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a3 + 144) = v16;
      v17 = *(_OWORD *)(a1 + 216);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(a1 + 200);
      *(_OWORD *)(a3 + 176) = v17;
      v18 = *(_OWORD *)(a1 + 248);
      *(_OWORD *)(a3 + 192) = *(_OWORD *)(a1 + 232);
      *(_OWORD *)(a3 + 208) = v18;
      *(_OWORD *)(a3 + 224) = *(_OWORD *)(a1 + 264);
      v19 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a3 + 16) = v11;
      *(_OWORD *)(a3 + 96) = v10;
      *(_OWORD *)(a3 + 112) = v19;
      *(_WORD *)(a3 + 240) = 0;
      *(_BYTE *)(a3 + 248) = 1;
    }
    else
    {
      v33 = 0;
      sub_2231A17D8(&v32, "Keyframe ");
      sub_22319B83C((uint64_t)&v31, (uint64_t)&v32, (unsigned __int8 *)a2);
      *(_QWORD *)&v35 = &v32;
      *((_QWORD *)&v35 + 1) = " is not in memory";
      *(_QWORD *)&v36 = &v32;
      *((_QWORD *)&v36 + 1) = " is not in memory";
      *(_QWORD *)&v37 = " is not in memory";
      if (v33 == -1)
        sub_22316DD70();
      v34 = &v35;
      ((void (*)(__int128 **, std::error_condition *))off_24EC5BB50[v33])(&v34, &v32);
      if (v33 == -1)
        sub_22316DD70();
      *(_QWORD *)&v35 = &v34;
      ((void (*)(void **__return_ptr, __int128 *, std::error_condition *))off_24EC5B328[v33])(__p, &v35, &v32);
      if (v33 != -1)
        ((void (*)(__int128 *, std::error_condition *))off_24EC5B2E0[v33])(&v35, &v32);
      v22 = std::generic_category();
      *(_QWORD *)&v32.__val_ = 22;
      v32.__cat_ = v22;
      sub_2245321DC(&v32, (uint64_t)__p, v27);
      v23 = *(_OWORD *)v27;
      *(_OWORD *)v27 = 0uLL;
      *(_OWORD *)a3 = v23;
      *(_BYTE *)(a3 + 248) = 0;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v33 = 0;
    sub_2231A17D8(&v32, "Keyframe ");
    sub_22319B83C((uint64_t)&v34, (uint64_t)&v32, (unsigned __int8 *)a2);
    *(_QWORD *)&v35 = &v32;
    *((_QWORD *)&v35 + 1) = " does not exist";
    *(_QWORD *)&v36 = &v32;
    *((_QWORD *)&v36 + 1) = " does not exist";
    *(_QWORD *)&v37 = " does not exist";
    if (v33 == -1)
      sub_22316DD70();
    v27[0] = (CFErrorRef)&v35;
    ((void (*)(CFErrorRef *, std::error_condition *))off_24EC5BB38[v33])(v27, &v32);
    if (v33 == -1)
      sub_22316DD70();
    *(_QWORD *)&v35 = v27;
    ((void (*)(void **__return_ptr, __int128 *, std::error_condition *))off_24EC5B328[v33])(__p, &v35, &v32);
    if (v33 != -1)
      ((void (*)(__int128 *, std::error_condition *))off_24EC5B2E0[v33])(&v35, &v32);
    v20 = std::generic_category();
    *(_QWORD *)&v32.__val_ = 22;
    v32.__cat_ = v20;
    sub_2245321DC(&v32, (uint64_t)__p, (CFErrorRef *)&v30);
    v21 = v30;
    v30 = 0uLL;
    *(_OWORD *)a3 = v21;
    *(_BYTE *)(a3 + 248) = 0;
    if (v29 < 0)
      operator delete(__p[0]);
  }
}

void sub_22387CA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22387CB00(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = 0;
  v4 = 0;
  sub_223868E48(a3, a1, a2, (unsigned __int8 *)&v3);
}

uint64_t sub_22387CB34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1648);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_22387CB54(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v12 = 0u;
  v13 = 0u;
  v14 = 728308156;
  kdebug_trace();
  sub_22319597C(*(_QWORD *)(a1 + 1232), a2, &v10);
  if (v10 && (v4 = *(_QWORD *)(a1 + 1896), a2[10] < v4) && a2[13] != v4)
  {
    sub_2231D3694(v10);
    a2[13] = *(_QWORD *)(a1 + 1896);
    v5 = 1;
    v6 = v11;
    if (!v11)
      goto LABEL_9;
  }
  else
  {
    v5 = 0;
    v6 = v11;
    if (!v11)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  kdebug_trace();
  return v5;
}

void sub_22387CC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_2231874DC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22387CC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387CC84(uint64_t a1, int *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_22387CDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22387CDCC(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  LOBYTE(v5) = 0;
  v16 = *((_BYTE *)a2 + 120);
  if (!v16)
  {
    v5 = *a2;
    LOBYTE(__p[0]) = 0;
    v15 = 0;
    if (*((_BYTE *)a2 + 112))
    {
      v8 = 0;
      if (*((_BYTE *)a2 + 40))
      {
        *(_OWORD *)__p = a2[1];
        v7 = *((_QWORD *)a2 + 4);
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v8 = 1;
      }
      LOBYTE(v9) = 0;
      v14 = 0;
      if (*((_BYTE *)a2 + 104))
      {
        v3 = *((_QWORD *)a2 + 9);
        v10 = *((_QWORD *)a2 + 8);
        v9 = a2[3];
        *((_QWORD *)a2 + 7) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *((_QWORD *)a2 + 6) = 0;
        v11 = v3;
        *(_OWORD *)v12 = a2[5];
        v13 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 11) = 0;
        *((_QWORD *)a2 + 12) = 0;
        v14 = 1;
      }
      v15 = 1;
    }
  }
  sub_223895144((uint64_t)&v5, a1);
  if (v16 || !v15)
    return a1;
  if (v14)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v10) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_18:
      operator delete((void *)v9);
      if (!v8)
        return a1;
      goto LABEL_15;
    }
    operator delete(v12[0]);
    if (SHIBYTE(v10) < 0)
      goto LABEL_18;
  }
LABEL_14:
  if (!v8)
    return a1;
LABEL_15:
  if ((SHIBYTE(v7) & 0x80000000) == 0)
    return a1;
  operator delete(__p[0]);
  return a1;
}

void sub_22387CF30(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  size_t v7;
  const char *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  int v70;
  const char *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *object;
  void *v78[2];
  __int128 v79;
  void *__p[2];
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;

  sub_22384BA54(&v76);
  if (**(int **)(v76 + 56) > 3)
    goto LABEL_91;
  v2 = *(unsigned __int8 *)(v76 + 72);
  v3 = sub_22322F254(v76, "OSLogSurrogateAppender", 1, 0);
  v4 = v3;
  if (!v2 && v3 == 0)
    goto LABEL_91;
  v69[0] = &v76;
  v69[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v69[2] = std::chrono::system_clock::now().__d_.__rep_;
  v70 = 3;
  v71 = "unknown file";
  v72 = 1425;
  v74 = 0;
  v75 = 0;
  v73 = "unknown function";
  v6 = v76;
  if (*(char *)(v76 + 39) < 0)
  {
    v8 = *(const char **)(v76 + 16);
    v7 = *(_QWORD *)(v76 + 24);
    v68 = *(_QWORD *)v69[0] + 16;
    v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *(unsigned __int8 *)(v76 + 39);
    v8 = (const char *)(*(_QWORD *)v69[0] + 16);
    v68 = (uint64_t)v8;
    v9 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
    if ((_BYTE)v79 && SHIBYTE(v78[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F40[23] >= 0)
    v11 = byte_255788F40;
  else
    v11 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v12 = byte_255788F40[23];
  else
    v12 = *(_QWORD *)&byte_255788F40[8];
  object = os_log_create(v11, v8);
  v13 = v78;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v14 = v4;
    v15 = v8;
    v16 = v6;
    v17 = v2;
    v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v18 = v12 | 7;
    v19 = v18 + 1;
    v13 = operator new(v18 + 1);
    v78[1] = (void *)v12;
    *(_QWORD *)&v79 = v19 | 0x8000000000000000;
    v78[0] = v13;
    v2 = v17;
    v6 = v16;
    v8 = v15;
    v4 = v14;
    goto LABEL_23;
  }
  BYTE7(v79) = v12;
  if (v12)
LABEL_23:
    memmove(v13, v11, v12);
  *((_BYTE *)v13 + v12) = 0;
  BYTE8(v79) = 1;
  v20 = __p;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v7 >= 0x17)
  {
    v22 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v22 = v7 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = (void *)v7;
    v81 = v23 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v81) = v7;
    if (!v7)
    {
      LOBYTE(__p[0]) = 0;
      v82 = 1;
      v21 = object;
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v8, v7);
  *((_BYTE *)v20 + v7) = 0;
  v82 = 1;
  v21 = object;
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v79))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v79) < 0)
      operator delete(v78[0]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v79))
    goto LABEL_35;
LABEL_37:
  if (object)
    os_release(object);
  if (v4 && *(_QWORD *)(v4 + 24))
  {
    v24 = _os_log_pack_size();
    v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
    v26 = (std::__shared_weak_count *)operator new();
    v27 = v26;
    v26->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v26->__shared_weak_owners_ = 0;
    v26[1].__vftable = v25;
    object = v25;
    v78[0] = v25;
    v78[1] = v26;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v79 = 0uLL;
    __p[0] = 0;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v27);
    }
    v31 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v32 = operator new();
    v33 = *(unsigned __int8 *)(v6 + 39);
    v34 = v68;
    if ((v33 & 0x80u) != 0)
    {
      v34 = *(_QWORD *)(v6 + 16);
      v33 = *(_QWORD *)(v6 + 24);
    }
    *(_QWORD *)v32 = v31;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)v78;
    v78[0] = 0;
    v78[1] = 0;
    *(_OWORD *)(v32 + 24) = v79;
    v79 = 0uLL;
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = v33;
    *(_BYTE *)(v32 + 56) = 1;
    v83 = 0;
    v84 = v32;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v84);
    v35 = v84;
    v84 = 0;
    if (v35)
    {
      v36 = *(std::__shared_weak_count **)(v35 + 32);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = *(std::__shared_weak_count **)(v35 + 16);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      MEMORY[0x227684CE8](v35, 0x10F0C40B62ED6C6);
      v42 = v83;
      v83 = 0;
      if (v42)
      {
        v43 = *(std::__shared_weak_count **)(v42 + 32);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = *(std::__shared_weak_count **)(v42 + 16);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        MEMORY[0x227684CE8](v42, 0x10F0C40B62ED6C6);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)v78[1];
    if (v78[1])
    {
      v53 = (unint64_t *)((char *)v78[1] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v55 = (void *)_os_log_send_and_compose_impl();
    if (v55)
      free(v55);
  }
  if (v2)
  {
    sub_22322C138((uint64_t)v69, "KFE:Reset");
    sub_223182C08((uint64_t)v69);
  }
  sub_223182C08((uint64_t)v69);
  v56 = v75;
  if (v75)
  {
    v57 = (unint64_t *)&v75->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_91:
  *(_QWORD *)(a1 + 1600) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  sub_22388A7C4(*(_QWORD **)(a1 + 1616));
  *(_QWORD *)(a1 + 1608) = a1 + 1616;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_QWORD *)(a1 + 1616) = 0;
  sub_223198030(a1 + 1728, *(_QWORD **)(a1 + 1736));
  *(_QWORD *)(a1 + 1728) = a1 + 1736;
  *(_QWORD *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1736) = 0;
  sub_223198030(a1 + 1752, *(_QWORD **)(a1 + 1760));
  *(_QWORD *)(a1 + 1752) = a1 + 1760;
  *(_QWORD *)(a1 + 1768) = 0;
  *(_QWORD *)(a1 + 1760) = 0;
  sub_223198030(a1 + 1776, *(_QWORD **)(a1 + 1784));
  *(_QWORD *)(a1 + 1776) = a1 + 1784;
  *(_QWORD *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_QWORD *)(a1 + 1656) = 0;
  sub_223198030(a1 + 1824, *(_QWORD **)(a1 + 1832));
  *(_QWORD *)(a1 + 1824) = a1 + 1832;
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1832) = 0;
  sub_223198030(a1 + 1848, *(_QWORD **)(a1 + 1856));
  *(_QWORD *)(a1 + 1848) = a1 + 1856;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  v59 = (_QWORD *)operator new();
  sub_2238A54D8(v59, a1 + 8);
  v60 = *(_QWORD *)(a1 + 1640);
  *(_QWORD *)(a1 + 1640) = v59;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  sub_2233FADDC(*(_QWORD **)(a1 + 1880));
  *(_QWORD *)(a1 + 1872) = a1 + 1880;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 1880) = 0;
  sub_223848174();
  v61 = *(_QWORD **)(a1 + 1024);
  v62 = *(std::__shared_weak_count **)(a1 + 1032);
  object = v61;
  v78[0] = v62;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  if (v61)
  {
    v65 = v61[3];
    if (!v65)
      sub_223198474();
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 48))(v65);
  }
  if (v62)
  {
    v66 = (unint64_t *)&v62->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_22387D7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22387D7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387D860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387D874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22387D8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C40319E9F20);
  _Unwind_Resume(a1);
}

void sub_22387D8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387D8F4(uint64_t a1)
{
  sub_22318A234(*(_QWORD *)(a1 + 1232));
}

void sub_22387D8FC(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  const char *v8;
  size_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *p_p;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned __int8 v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  const char *v64;
  size_t v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  const char *v68;
  size_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  size_t v119;
  const char *v120;
  unsigned __int8 v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  size_t v126;
  const char *v127;
  unsigned __int8 v128;
  const char *v129;
  size_t v130;
  _BYTE *v131;
  unint64_t v132;
  const char *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  size_t v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unsigned __int8 v180;
  const char *v181;
  size_t v182;
  _BYTE *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  size_t v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  size_t v194;
  size_t v195;
  _QWORD *p_dst;
  void *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char v202;
  _QWORD *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  _QWORD *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  const char *v250;
  char *__s;
  char *__sa;
  char *__sb;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v260;
  int v261;
  const char *v262;
  int v263;
  const char *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  __int128 v267;
  std::__shared_weak_count *v268;
  char *v269;
  std::__shared_weak_count *v270;
  _QWORD *__dst;
  __int128 v272;
  _BYTE object[24];
  __int128 v274;
  void *__p;
  size_t v276;
  unint64_t v277;
  char v278;
  uint64_t v279[5];

  v279[2] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CC898);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC898))
  {
    sub_22455F53C(&v258);
    sub_223174DE4(object, "cv3dapi.recon3d");
    sub_2232300E0(&v258, (uint64_t)object, &qword_2540CC890);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CC898);
  }
  v279[0] = qword_2540CC890;
  if (**(int **)(qword_2540CC890 + 56) <= 3)
  {
    v3 = *(unsigned __int8 *)(qword_2540CC890 + 72);
    v4 = sub_22322F254(qword_2540CC890, "OSLogSurrogateAppender", 1, 0);
    v5 = v4;
    if (v3 || v4 != 0)
    {
      v254 = a1;
      v258 = v279;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v260 = std::chrono::system_clock::now().__d_.__rep_;
      v261 = 3;
      v262 = "unknown file";
      v263 = 1467;
      v265 = 0;
      v266 = 0;
      v264 = "unknown function";
      v7 = *v258;
      v8 = (const char *)(*v258 + 16);
      __s = (char *)v8;
      if (*(char *)(*v258 + 39) < 0)
      {
        v8 = *(const char **)(v7 + 16);
        v9 = *(_QWORD *)(v7 + 24);
        v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v11 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        v9 = *(unsigned __int8 *)(*v258 + 39);
        v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v10 & 1) != 0)
          goto LABEL_11;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
        if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_11:
      if (byte_255788F40[23] >= 0)
        v12 = byte_255788F40;
      else
        v12 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v13 = byte_255788F40[23];
      else
        v13 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)object = os_log_create(v12, v8);
      v14 = &object[8];
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v13 >= 0x17)
      {
        v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v15 = v13 | 7;
        v16 = v15 + 1;
        v14 = operator new(v15 + 1);
        *(_QWORD *)&object[16] = v13;
        *(_QWORD *)&v274 = v16 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v14;
      }
      else
      {
        BYTE7(v274) = v13;
        if (!v13)
        {
LABEL_25:
          v14[v13] = 0;
          BYTE8(v274) = 1;
          p_p = &__p;
          if (v9 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v9 >= 0x17)
          {
            v19 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v9 | 7) != 0x17)
              v19 = v9 | 7;
            v20 = v19 + 1;
            p_p = operator new(v19 + 1);
            v276 = v9;
            v277 = v20 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v277) = v9;
            if (!v9)
            {
              LOBYTE(__p) = 0;
              v278 = 1;
              v18 = *(NSObject **)object;
              if ((SHIBYTE(v277) & 0x80000000) == 0)
                goto LABEL_29;
              goto LABEL_35;
            }
          }
          memmove(p_p, v8, v9);
          *((_BYTE *)p_p + v9) = 0;
          v278 = 1;
          v18 = *(NSObject **)object;
          if ((SHIBYTE(v277) & 0x80000000) == 0)
          {
LABEL_29:
            if (!BYTE8(v274))
              goto LABEL_38;
            goto LABEL_36;
          }
LABEL_35:
          operator delete(__p);
          if (!BYTE8(v274))
          {
LABEL_38:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v5 && *(_QWORD *)(v5 + 24))
            {
              v21 = _os_log_pack_size();
              v22 = (std::__shared_weak_count_vtbl *)operator new(v21, (std::align_val_t)8uLL);
              v23 = (std::__shared_weak_count *)operator new();
              v24 = v23;
              v23->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v23->__shared_owners_;
              v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v23->__shared_weak_owners_ = 0;
              v23[1].__vftable = v22;
              *(_QWORD *)object = v22;
              *(_QWORD *)&object[8] = v22;
              *(_QWORD *)&object[16] = v23;
              do
                v26 = __ldxr(p_shared_owners);
              while (__stxr(v26 + 1, p_shared_owners));
              v274 = 0uLL;
              __p = 0;
              do
                v27 = __ldaxr(p_shared_owners);
              while (__stlxr(v27 - 1, p_shared_owners));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v24);
              }
              v28 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v29 = operator new();
              v30 = *(unsigned __int8 *)(v7 + 39);
              v31 = *(char **)(v7 + 16);
              v32 = *(_QWORD *)(v7 + 24);
              v33 = v274;
              *(_OWORD *)(v29 + 8) = *(_OWORD *)&object[8];
              if ((v30 & 0x80u) != 0)
                v30 = v32;
              else
                v31 = __s;
              *(_QWORD *)v29 = v28;
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v29 + 24) = v33;
              v274 = 0uLL;
              *(_QWORD *)(v29 + 40) = v31;
              *(_QWORD *)(v29 + 48) = v30;
              *(_BYTE *)(v29 + 56) = 1;
              __dst = 0;
              *(_QWORD *)&v267 = v29;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v267);
              v34 = v267;
              *(_QWORD *)&v267 = 0;
              if (v34)
              {
                v35 = *(std::__shared_weak_count **)(v34 + 32);
                if (v35)
                {
                  v36 = (unint64_t *)&v35->__shared_owners_;
                  do
                    v37 = __ldaxr(v36);
                  while (__stlxr(v37 - 1, v36));
                  if (!v37)
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                }
                v38 = *(std::__shared_weak_count **)(v34 + 16);
                if (v38)
                {
                  v39 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                MEMORY[0x227684CE8](v34, 0x10F0C40B62ED6C6);
                v41 = __dst;
                __dst = 0;
                if (v41)
                {
                  v42 = (std::__shared_weak_count *)v41[4];
                  if (v42)
                  {
                    v43 = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(v43);
                    while (__stlxr(v44 - 1, v43));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                  v45 = (std::__shared_weak_count *)v41[2];
                  if (v45)
                  {
                    v46 = (unint64_t *)&v45->__shared_owners_;
                    do
                      v47 = __ldaxr(v46);
                    while (__stlxr(v47 - 1, v46));
                    if (!v47)
                    {
                      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                      std::__shared_weak_count::__release_weak(v45);
                    }
                  }
                  MEMORY[0x227684CE8](v41, 0x10F0C40B62ED6C6);
                }
              }
              v48 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
              a1 = v254;
              if (*((_QWORD *)&v274 + 1))
              {
                v49 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              v51 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v52 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            else
            {
              os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
              *(_WORD *)object = 0;
              v54 = (void *)_os_log_send_and_compose_impl();
              a1 = v254;
              if (v54)
                free(v54);
            }
            if (v3)
            {
              sub_22322C138((uint64_t)&v258, "KFE:PER:Disk available");
              sub_223182C08((uint64_t)&v258);
            }
            sub_223182C08((uint64_t)&v258);
            v55 = v266;
            if (v266)
            {
              v56 = (unint64_t *)&v266->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            goto LABEL_93;
          }
LABEL_36:
          if (SBYTE7(v274) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_38;
        }
      }
      memmove(v14, v12, v13);
      goto LABEL_25;
    }
  }
LABEL_93:
  v58 = atomic_load((unsigned __int8 *)&qword_2540CC8A8);
  if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC8A8))
  {
    sub_22455F53C(&v258);
    sub_223174DE4(object, "cv3d.recon.kf");
    sub_2232300E0(&v258, (uint64_t)object, &qword_2540CC8A0);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CC8A8);
  }
  v279[0] = qword_2540CC8A0;
  if (**(int **)(qword_2540CC8A0 + 56) > 2)
    goto LABEL_184;
  v59 = *(unsigned __int8 *)(qword_2540CC8A0 + 72);
  v60 = sub_22322F254(qword_2540CC8A0, "OSLogSurrogateAppender", 1, 0);
  v61 = v60;
  if (!v59 && v60 == 0)
    goto LABEL_184;
  v255 = a1;
  v258 = v279;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v260 = std::chrono::system_clock::now().__d_.__rep_;
  v261 = 2;
  v262 = "unknown file";
  v263 = 1468;
  v265 = 0;
  v266 = 0;
  v264 = "unknown function";
  v63 = *v258;
  v64 = (const char *)(*v258 + 16);
  __sa = (char *)v64;
  if (*(char *)(*v258 + 39) < 0)
  {
    v64 = *(const char **)(v63 + 16);
    v65 = *(_QWORD *)(v63 + 24);
    v67 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v67 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v65 = *(unsigned __int8 *)(*v258 + 39);
    v66 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v66 & 1) != 0)
      goto LABEL_103;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_103:
  if (byte_255788F40[23] >= 0)
    v68 = byte_255788F40;
  else
    v68 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v69 = byte_255788F40[23];
  else
    v69 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)object = os_log_create(v68, v64);
  v70 = &object[8];
  if (v69 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v69 >= 0x17)
  {
    v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17)
      v71 = v69 | 7;
    v72 = v71 + 1;
    v70 = operator new(v71 + 1);
    *(_QWORD *)&object[16] = v69;
    *(_QWORD *)&v274 = v72 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v70;
    goto LABEL_116;
  }
  BYTE7(v274) = v69;
  if (v69)
LABEL_116:
    memmove(v70, v68, v69);
  v70[v69] = 0;
  BYTE8(v274) = 1;
  v73 = &__p;
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v65 >= 0x17)
  {
    v75 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v75 = v65 | 7;
    v76 = v75 + 1;
    v73 = operator new(v75 + 1);
    v276 = v65;
    v277 = v76 | 0x8000000000000000;
    __p = v73;
  }
  else
  {
    HIBYTE(v277) = v65;
    if (!v65)
    {
      LOBYTE(__p) = 0;
      v278 = 1;
      v74 = *(NSObject **)object;
      if ((SHIBYTE(v277) & 0x80000000) == 0)
        goto LABEL_121;
      goto LABEL_127;
    }
  }
  memmove(v73, v64, v65);
  *((_BYTE *)v73 + v65) = 0;
  v278 = 1;
  v74 = *(NSObject **)object;
  if ((SHIBYTE(v277) & 0x80000000) == 0)
  {
LABEL_121:
    if (!BYTE8(v274))
      goto LABEL_130;
    goto LABEL_128;
  }
LABEL_127:
  operator delete(__p);
  if (!BYTE8(v274))
    goto LABEL_130;
LABEL_128:
  if (SBYTE7(v274) < 0)
    operator delete(*(void **)&object[8]);
LABEL_130:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v61 && *(_QWORD *)(v61 + 24))
  {
    v77 = _os_log_pack_size();
    v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
    v79 = (std::__shared_weak_count *)operator new();
    v80 = v79;
    v79->__shared_owners_ = 0;
    v81 = (unint64_t *)&v79->__shared_owners_;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v78;
    *(_QWORD *)object = v78;
    *(_QWORD *)&object[8] = v78;
    *(_QWORD *)&object[16] = v79;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    v274 = 0uLL;
    __p = 0;
    do
      v83 = __ldaxr(v81);
    while (__stlxr(v83 - 1, v81));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v80);
    }
    v84 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v85 = operator new();
    v86 = *(unsigned __int8 *)(v63 + 39);
    v87 = *(char **)(v63 + 16);
    v88 = *(_QWORD *)(v63 + 24);
    v89 = v274;
    *(_OWORD *)(v85 + 8) = *(_OWORD *)&object[8];
    if ((v86 & 0x80u) != 0)
      v86 = v88;
    else
      v87 = __sa;
    *(_QWORD *)v85 = v84;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v85 + 24) = v89;
    v274 = 0uLL;
    *(_QWORD *)(v85 + 40) = v87;
    *(_QWORD *)(v85 + 48) = v86;
    *(_BYTE *)(v85 + 56) = 2;
    __dst = 0;
    *(_QWORD *)&v267 = v85;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v61 + 24) + 40))(*(_QWORD *)(v61 + 24), &v267);
    v90 = v267;
    *(_QWORD *)&v267 = 0;
    if (v90)
    {
      v91 = *(std::__shared_weak_count **)(v90 + 32);
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v94 = *(std::__shared_weak_count **)(v90 + 16);
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
      v97 = __dst;
      __dst = 0;
      if (v97)
      {
        v98 = (std::__shared_weak_count *)v97[4];
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v101 = (std::__shared_weak_count *)v97[2];
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
      }
    }
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
    a1 = v255;
    if (*((_QWORD *)&v274 + 1))
    {
      v105 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v108 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
  else
  {
    os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG);
    *(_WORD *)object = 0;
    v110 = (void *)_os_log_send_and_compose_impl();
    a1 = v255;
    if (v110)
      free(v110);
  }
  if (v59)
  {
    sub_22322C138((uint64_t)&v258, "Filesystem access granted");
    sub_223182C08((uint64_t)&v258);
  }
  sub_223182C08((uint64_t)&v258);
  v111 = v266;
  if (v266)
  {
    v112 = (unint64_t *)&v266->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 1224) + 76) == 5)
        goto LABEL_185;
LABEL_192:
      if (!*(_BYTE *)(a1 + 80) || !*(_BYTE *)(a1 + 88))
        return;
      sub_22384BB48(&v257);
      if (**(int **)(v257 + 56) > 3
        || (v122 = *(unsigned __int8 *)(v257 + 72),
            v123 = sub_22322F254(v257, "OSLogSurrogateAppender", 1, 0),
            v124 = v123,
            !v122)
        && !v123)
      {
LABEL_396:
        sub_22384BC3C(object, a1);
        sub_223475C18((_QWORD *)(a1 + 1800), *(unsigned __int8 **)object, &object[8]);
        sub_223198030((uint64_t)object, *(_QWORD **)&object[8]);
        return;
      }
      v258 = &v257;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v260 = std::chrono::system_clock::now().__d_.__rep_;
      v261 = 3;
      v262 = "unknown file";
      v263 = 1478;
      v265 = 0;
      v266 = 0;
      v264 = "unknown function";
      __sb = (char *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        __sb = *(char **)(a1 + 56);
      v125 = *v258;
      if (*(char *)(*v258 + 39) < 0)
      {
        v127 = *(const char **)(v125 + 16);
        v126 = *(_QWORD *)(v125 + 24);
      }
      else
      {
        v126 = *(unsigned __int8 *)(*v258 + 39);
        v127 = (const char *)(*v258 + 16);
      }
      v249 = *v258 + 16;
      v250 = (const char *)(a1 + 56);
      v256 = a1;
      v180 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v180 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
        if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v181 = byte_255788F40;
      else
        v181 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v182 = byte_255788F40[23];
      else
        v182 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)object = os_log_create(v181, v127);
      v183 = &object[8];
      if (v182 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v182 >= 0x17)
      {
        v184 = v122;
        v185 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v182 | 7) != 0x17)
          v185 = v182 | 7;
        v186 = v185 + 1;
        v183 = operator new(v185 + 1);
        *(_QWORD *)&object[16] = v182;
        *(_QWORD *)&v274 = v186 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v183;
        v122 = v184;
      }
      else
      {
        BYTE7(v274) = v182;
        if (!v182)
        {
LABEL_300:
          v183[v182] = 0;
          BYTE8(v274) = 1;
          v187 = &__p;
          if (v126 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v126 >= 0x17)
          {
            v188 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v126 | 7) != 0x17)
              v188 = v126 | 7;
            v189 = v188 + 1;
            v187 = operator new(v188 + 1);
            v276 = v126;
            v277 = v189 | 0x8000000000000000;
            __p = v187;
          }
          else
          {
            HIBYTE(v277) = v126;
            if (!v126)
            {
LABEL_308:
              *((_BYTE *)v187 + v126) = 0;
              v278 = 1;
              v190 = *(NSObject **)object;
              if (SHIBYTE(v277) < 0)
                operator delete(__p);
              if (BYTE8(v274) && SBYTE7(v274) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v124 || !*(_QWORD *)(v124 + 24))
              {
                os_log_type_enabled(v190, OS_LOG_TYPE_INFO);
                *(_DWORD *)object = 136315138;
                *(_QWORD *)&object[4] = __sb;
                v197 = (void *)_os_log_send_and_compose_impl();
                v198 = (const char *)(a1 + 56);
                if (v197)
                  free(v197);
                goto LABEL_387;
              }
              v191 = _os_log_pack_size();
              v192 = (std::__shared_weak_count_vtbl *)operator new(v191, (std::align_val_t)8uLL);
              v193 = (std::__shared_weak_count *)operator new();
              v193->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v193->__shared_owners_ = 0;
              v193->__shared_weak_owners_ = 0;
              v193[1].__vftable = v192;
              *(_QWORD *)&v267 = v192;
              *((_QWORD *)&v267 + 1) = v192;
              v269 = 0;
              v270 = 0;
              v268 = v193;
              v194 = strlen(__sb);
              if (v194 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v195 = v194;
              if (v194 >= 0x17)
              {
                v199 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v194 | 7) != 0x17)
                  v199 = v194 | 7;
                v200 = v199 + 1;
                p_dst = operator new(v199 + 1);
                *(_QWORD *)&v272 = v195;
                *((_QWORD *)&v272 + 1) = v200 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v272) = v194;
                p_dst = &__dst;
                if (!v194)
                {
LABEL_327:
                  *((_BYTE *)p_dst + v195) = 0;
                  v201 = __dst;
                  v279[0] = v272;
                  *(uint64_t *)((char *)v279 + 7) = *(_QWORD *)((char *)&v272 + 7);
                  v202 = HIBYTE(v272);
                  v203 = operator new(0x38uLL);
                  v203[1] = 0;
                  v203[2] = 0;
                  v203[3] = off_24EC1FA48;
                  *v203 = &off_24EC1F9F8;
                  v204 = v279[0];
                  v203[4] = v201;
                  v203[5] = v204;
                  *(_QWORD *)((char *)v203 + 47) = *(uint64_t *)((char *)v279 + 7);
                  *((_BYTE *)v203 + 55) = v202;
                  memset(v279, 0, 15);
                  v205 = v270;
                  v269 = (char *)(v203 + 3);
                  v270 = (std::__shared_weak_count *)v203;
                  if (v205)
                  {
                    v206 = (unint64_t *)&v205->__shared_owners_;
                    do
                      v207 = __ldaxr(v206);
                    while (__stlxr(v207 - 1, v206));
                    if (!v207)
                    {
                      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                      std::__shared_weak_count::__release_weak(v205);
                    }
                  }
                  *(_OWORD *)object = v267;
                  v208 = v269;
                  *(_QWORD *)&object[16] = v268;
                  if (v268)
                  {
                    v209 = (unint64_t *)&v268->__shared_owners_;
                    do
                      v210 = __ldxr(v209);
                    while (__stxr(v210 + 1, v209));
                  }
                  v211 = v270;
                  *(_QWORD *)&v274 = v208;
                  *((_QWORD *)&v274 + 1) = v270;
                  if (v270)
                  {
                    v212 = (unint64_t *)&v270->__shared_owners_;
                    do
                      v213 = __ldxr(v212);
                    while (__stxr(v213 + 1, v212));
                    __p = v208;
                    do
                      v214 = __ldaxr(v212);
                    while (__stlxr(v214 - 1, v212));
                    if (!v214)
                    {
                      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                      std::__shared_weak_count::__release_weak(v211);
                    }
                  }
                  else
                  {
                    __p = v208;
                  }
                  v215 = v268;
                  if (v268)
                  {
                    v216 = (unint64_t *)&v268->__shared_owners_;
                    do
                      v217 = __ldaxr(v216);
                    while (__stlxr(v217 - 1, v216));
                    if (!v217)
                    {
                      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                      std::__shared_weak_count::__release_weak(v215);
                    }
                  }
                  v218 = *(_QWORD *)object;
                  if (*((char *)__p + 31) >= 0)
                    v219 = (char *)__p + 8;
                  else
                    v219 = (char *)*((_QWORD *)__p + 1);
                  v220 = _os_log_pack_fill();
                  *(_DWORD *)v220 = 136315138;
                  *(_QWORD *)(v220 + 4) = v219;
                  v221 = operator new();
                  v222 = *(unsigned __int8 *)(v125 + 39);
                  v223 = *(_QWORD *)(v125 + 16);
                  v224 = *(_QWORD *)(v125 + 24);
                  v225 = v274;
                  *(_OWORD *)(v221 + 8) = *(_OWORD *)&object[8];
                  if ((v222 & 0x80u) != 0)
                    v222 = v224;
                  else
                    v223 = v249;
                  *(_QWORD *)v221 = v218;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v221 + 24) = v225;
                  v274 = 0uLL;
                  *(_QWORD *)(v221 + 40) = v223;
                  *(_QWORD *)(v221 + 48) = v222;
                  *(_BYTE *)(v221 + 56) = 1;
                  __dst = 0;
                  *(_QWORD *)&v267 = v221;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v124 + 24) + 40))(*(_QWORD *)(v124 + 24), &v267);
                  v226 = v267;
                  *(_QWORD *)&v267 = 0;
                  v198 = v250;
                  if (v226)
                  {
                    v227 = *(std::__shared_weak_count **)(v226 + 32);
                    if (v227)
                    {
                      v228 = (unint64_t *)&v227->__shared_owners_;
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                        std::__shared_weak_count::__release_weak(v227);
                      }
                    }
                    v230 = *(std::__shared_weak_count **)(v226 + 16);
                    if (v230)
                    {
                      v231 = (unint64_t *)&v230->__shared_owners_;
                      do
                        v232 = __ldaxr(v231);
                      while (__stlxr(v232 - 1, v231));
                      if (!v232)
                      {
                        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                        std::__shared_weak_count::__release_weak(v230);
                      }
                    }
                    MEMORY[0x227684CE8](v226, 0x10F0C40B62ED6C6);
                    v233 = __dst;
                    __dst = 0;
                    if (v233)
                    {
                      v234 = (std::__shared_weak_count *)v233[4];
                      if (v234)
                      {
                        v235 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v235);
                        while (__stlxr(v236 - 1, v235));
                        if (!v236)
                        {
                          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                          std::__shared_weak_count::__release_weak(v234);
                        }
                      }
                      v237 = (std::__shared_weak_count *)v233[2];
                      if (v237)
                      {
                        v238 = (unint64_t *)&v237->__shared_owners_;
                        do
                          v239 = __ldaxr(v238);
                        while (__stlxr(v239 - 1, v238));
                        if (!v239)
                        {
                          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                          std::__shared_weak_count::__release_weak(v237);
                        }
                      }
                      MEMORY[0x227684CE8](v233, 0x10F0C40B62ED6C6);
                    }
                  }
                  v240 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
                  a1 = v256;
                  if (*((_QWORD *)&v274 + 1))
                  {
                    v241 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
                    do
                      v242 = __ldaxr(v241);
                    while (__stlxr(v242 - 1, v241));
                    if (!v242)
                    {
                      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                      std::__shared_weak_count::__release_weak(v240);
                    }
                  }
                  v243 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v244 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v245 = __ldaxr(v244);
                    while (__stlxr(v245 - 1, v244));
                    if (!v245)
                    {
                      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                      std::__shared_weak_count::__release_weak(v243);
                    }
                  }
LABEL_387:
                  if (v122)
                  {
                    if (*(char *)(a1 + 79) < 0)
                      v198 = *(const char **)v198;
                    sub_22322C138((uint64_t)&v258, "Loading persisted metadata post disk-access grant: %s", v198);
                    sub_223182C08((uint64_t)&v258);
                  }
                  sub_223182C08((uint64_t)&v258);
                  v246 = v266;
                  if (v266)
                  {
                    v247 = (unint64_t *)&v266->__shared_owners_;
                    do
                      v248 = __ldaxr(v247);
                    while (__stlxr(v248 - 1, v247));
                    if (!v248)
                    {
                      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                      std::__shared_weak_count::__release_weak(v246);
                    }
                  }
                  goto LABEL_396;
                }
              }
              memcpy(p_dst, __sb, v195);
              goto LABEL_327;
            }
          }
          memmove(v187, v127, v126);
          goto LABEL_308;
        }
      }
      memmove(v183, v181, v182);
      goto LABEL_300;
    }
  }
LABEL_184:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 1224) + 76) != 5)
    goto LABEL_192;
LABEL_185:
  sub_22384BA54(v279);
  if (**(int **)(v279[0] + 56) > 4)
    return;
  v114 = *(unsigned __int8 *)(v279[0] + 72);
  v115 = sub_22322F254(v279[0], "OSLogSurrogateAppender", 1, 0);
  v116 = v115;
  if (!v114 && !v115)
    return;
  v258 = v279;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v260 = std::chrono::system_clock::now().__d_.__rep_;
  v261 = 4;
  v262 = "unknown file";
  v263 = 1471;
  v265 = 0;
  v266 = 0;
  v264 = "unknown function";
  v117 = *v258;
  v118 = *v258 + 16;
  if (*(char *)(*v258 + 39) < 0)
  {
    v120 = *(const char **)(v117 + 16);
    v119 = *(_QWORD *)(v117 + 24);
    v128 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v128 & 1) != 0)
      goto LABEL_202;
  }
  else
  {
    v119 = *(unsigned __int8 *)(*v258 + 39);
    v120 = (const char *)(*v258 + 16);
    v121 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v121 & 1) != 0)
      goto LABEL_202;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_202:
  if (byte_255788F40[23] >= 0)
    v129 = byte_255788F40;
  else
    v129 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v130 = byte_255788F40[23];
  else
    v130 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)object = os_log_create(v129, v120);
  v131 = &object[8];
  if (v130 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v130 >= 0x17)
  {
    v132 = v116;
    v133 = v120;
    v134 = v117;
    v135 = v114;
    v136 = v118;
    v137 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v137 = v130 | 7;
    v138 = v137 + 1;
    v131 = operator new(v137 + 1);
    *(_QWORD *)&object[16] = v130;
    *(_QWORD *)&v274 = v138 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v131;
    v118 = v136;
    v114 = v135;
    v117 = v134;
    v120 = v133;
    v116 = v132;
    goto LABEL_215;
  }
  BYTE7(v274) = v130;
  if (v130)
LABEL_215:
    memmove(v131, v129, v130);
  v131[v130] = 0;
  BYTE8(v274) = 1;
  v139 = &__p;
  if (v119 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v119 >= 0x17)
  {
    v140 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17)
      v140 = v119 | 7;
    v141 = v140 + 1;
    v139 = operator new(v140 + 1);
    v276 = v119;
    v277 = v141 | 0x8000000000000000;
    __p = v139;
  }
  else
  {
    HIBYTE(v277) = v119;
    if (!v119)
      goto LABEL_224;
  }
  memmove(v139, v120, v119);
LABEL_224:
  *((_BYTE *)v139 + v119) = 0;
  v278 = 1;
  v142 = *(NSObject **)object;
  if (SHIBYTE(v277) < 0)
    operator delete(__p);
  if (BYTE8(v274) && SBYTE7(v274) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v116 && *(_QWORD *)(v116 + 24))
  {
    v143 = _os_log_pack_size();
    v144 = (std::__shared_weak_count_vtbl *)operator new(v143, (std::align_val_t)8uLL);
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v145;
    v145->__shared_owners_ = 0;
    v147 = (unint64_t *)&v145->__shared_owners_;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v144;
    *(_QWORD *)object = v144;
    *(_QWORD *)&object[8] = v144;
    *(_QWORD *)&object[16] = v145;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
    v274 = 0uLL;
    __p = 0;
    do
      v149 = __ldaxr(v147);
    while (__stlxr(v149 - 1, v147));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v146);
    }
    v150 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v151 = operator new();
    v152 = *(unsigned __int8 *)(v117 + 39);
    v153 = *(_QWORD *)(v117 + 16);
    v154 = *(_QWORD *)(v117 + 24);
    v155 = v274;
    *(_OWORD *)(v151 + 8) = *(_OWORD *)&object[8];
    if ((v152 & 0x80u) != 0)
      v152 = v154;
    else
      v153 = v118;
    *(_QWORD *)v151 = v150;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v151 + 24) = v155;
    v274 = 0uLL;
    *(_QWORD *)(v151 + 40) = v153;
    *(_QWORD *)(v151 + 48) = v152;
    *(_BYTE *)(v151 + 56) = 16;
    __dst = 0;
    *(_QWORD *)&v267 = v151;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v116 + 24) + 40))(*(_QWORD *)(v116 + 24), &v267);
    v156 = v267;
    *(_QWORD *)&v267 = 0;
    if (v156)
    {
      v157 = *(std::__shared_weak_count **)(v156 + 32);
      if (v157)
      {
        v158 = (unint64_t *)&v157->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = *(std::__shared_weak_count **)(v156 + 16);
      if (v160)
      {
        v161 = (unint64_t *)&v160->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      MEMORY[0x227684CE8](v156, 0x10F0C40B62ED6C6);
      v163 = __dst;
      __dst = 0;
      if (v163)
      {
        v164 = (std::__shared_weak_count *)v163[4];
        if (v164)
        {
          v165 = (unint64_t *)&v164->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        v167 = (std::__shared_weak_count *)v163[2];
        if (v167)
        {
          v168 = (unint64_t *)&v167->__shared_owners_;
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        MEMORY[0x227684CE8](v163, 0x10F0C40B62ED6C6);
      }
    }
    v170 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
    if (*((_QWORD *)&v274 + 1))
    {
      v171 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    v173 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v174 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
  }
  else
  {
    os_log_type_enabled(v142, OS_LOG_TYPE_ERROR);
    *(_WORD *)object = 0;
    v176 = (void *)_os_log_send_and_compose_impl();
    if (v176)
      free(v176);
  }
  if (v114)
  {
    sub_22322C138((uint64_t)&v258, "Data loaded prior to access!");
    sub_223182C08((uint64_t)&v258);
  }
  sub_223182C08((uint64_t)&v258);
  v177 = v266;
  if (v266)
  {
    v178 = (unint64_t *)&v266->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
}

void sub_22387F674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387F6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC8A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC8A8);
  _Unwind_Resume(a1);
}

void sub_22387F724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC898);
  _Unwind_Resume(a1);
}

void sub_22387F77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_22319A054(&a25);
  sub_22319A054(&a30);
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387F7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387F7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  int v26;

  if (v26 < 0)
  {
    operator delete(v25);
    sub_223199DE8((uint64_t)&a25);
    sub_223182DAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387F828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  sub_22319A054(&a25);
  sub_22319A054(&a30);
  sub_223199DE8((uint64_t)&object);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387F8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387F938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387F950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387F96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40 && a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387F9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34)
{
  sub_223198030((uint64_t)&a33, a34);
  _Unwind_Resume(a1);
}

void sub_22387F9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387F9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22387F9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40 && a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387FA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40 && a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22387FA68(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22387FA8C(_QWORD *a1, void *a2, size_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  size_t v10;
  __int128 v11;
  std::string *p_p;
  size_t v13;
  uint64_t v14;
  std::mutex *v15;
  std::string __p;
  _QWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v9 = *a1;
    v17[0] = a2;
    v17[1] = a3;
    v17[2] = ".";
    v17[3] = 1;
    v17[4] = a5;
    v17[5] = a6;
    sub_2231A9820((uint64_t)v17, (uint64_t)&v18, 0, 0, &__p);
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::mutex::lock((std::mutex *)(v9 + 152));
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)v11;
    if ((v10 & 0x80u) == 0)
      v13 = v10;
    else
      v13 = *((_QWORD *)&v11 + 1);
    sub_223FD4418(v9 + 32, p_p, v13, a4);
    std::mutex::unlock((std::mutex *)(v9 + 152));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = *a1;
    v15 = (std::mutex *)(*a1 + 152);
    std::mutex::lock(v15);
    sub_223FD4418(v14 + 32, a2, a3, a4);
    std::mutex::unlock(v15);
  }
}

void sub_22387FBD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22387FBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22387FC20(uint64_t a1, int *a2)
{
  char *v4;
  uint64_t *v5;
  __int128 v6;
  void *__p;
  __int128 v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v4 = (char *)operator new(0x20uLL);
    v8 = xmmword_2245B8D50;
    strcpy(v4, "color_invalidated_integrate");
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    __p = v4;
    v5 = sub_2241471F8();
    sub_22356F6DC((uint64_t)v5, a1, a2, (uint64_t)&__p, &v6);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
  }
}

void sub_22387FCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22387FD04(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t *v5;
  __int128 v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    v5 = sub_2241471F8();
    return sub_223895BA0((uint64_t)v5, a1, a2, (uint64_t)&unk_2245C9EFE, &v6);
  }
  return result;
}

uint64_t sub_22387FD7C(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  std::string::size_type *p_size;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::string *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  std::string *v70;
  std::string::size_type size;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  std::string::size_type v78;
  _QWORD *v79;
  std::string *v80;
  std::string::size_type v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type v86;
  uint64_t *i;
  std::string *v88;
  std::string::size_type v89;
  _QWORD *v90;
  unsigned __int8 v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  std::string *v99;
  uint64_t v100;
  const char *v101;
  size_t v102;
  std::string *p_p;
  uint64_t v104;
  size_t v105;
  const char *v106;
  uint64_t v107;
  unsigned __int8 v108;
  const char *v109;
  size_t v110;
  std::string::size_type *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  size_t v118;
  void *v119;
  _QWORD *v120;
  size_t v121;
  size_t v122;
  _QWORD *v123;
  void *v124;
  int v125;
  unsigned __int8 v126;
  const char *v127;
  size_t v128;
  std::string::size_type *v129;
  std::string *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  size_t v138;
  void *v139;
  _QWORD *v140;
  size_t v141;
  size_t v142;
  _QWORD *p_dst;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  char v148;
  _QWORD *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  char *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::string::size_type v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string::size_type v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  _QWORD *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::string *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::string::size_type v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const char *v224;
  std::string::size_type v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  _QWORD *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::string *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t *v256;
  int v257;
  const char *v258;
  std::string v259;
  std::string v260;
  std::string v261;
  std::string __p;
  std::string v263;
  int v264;
  const char *v265;
  int v266;
  const char *v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  std::string v271;
  char *v272;
  std::__shared_weak_count *v273;
  _QWORD *__dst;
  __int128 v275;
  _QWORD v276[3];
  _QWORD *v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  std::string v280;
  __int128 v281;
  char *v282;
  size_t v283;
  unint64_t v284;
  char v285;
  _QWORD v286[5];

  v286[2] = *MEMORY[0x24BDAC8D0];
  sub_22384BA54(&v278);
  if (**(int **)(v278 + 56) > 3)
    goto LABEL_91;
  v4 = *(unsigned __int8 *)(v278 + 72);
  v5 = sub_22322F254(v278, "OSLogSurrogateAppender", 1, 0);
  v6 = v5;
  v7 = !v4 && v5 == 0;
  if (v7)
    goto LABEL_91;
  v255 = v4;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
  v263.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v263.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v264 = 3;
  v265 = "unknown file";
  v266 = 1681;
  v268 = 0;
  v269 = 0;
  v267 = "unknown function";
  v8 = v278;
  v9 = (const char *)(v278 + 16);
  v253 = v278 + 16;
  if (*(char *)(v278 + 39) < 0)
  {
    v9 = *(const char **)(v278 + 16);
    v10 = *(_QWORD *)(v278 + 24);
    v251 = a1;
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v278 + 39);
    v251 = a1;
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v280);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v280, byte_255788F40);
    if ((_BYTE)v281 && SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v280.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F40[23] >= 0)
    v13 = byte_255788F40;
  else
    v13 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v14 = byte_255788F40[23];
  else
    v14 = *(_QWORD *)&byte_255788F40[8];
  v280.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v13, v9);
  p_size = &v280.__r_.__value_.__l.__size_;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_size = (std::string::size_type *)operator new(v16 + 1);
    v280.__r_.__value_.__r.__words[2] = v14;
    *(_QWORD *)&v281 = v17 | 0x8000000000000000;
    v280.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    goto LABEL_23;
  }
  BYTE7(v281) = v14;
  if (v14)
LABEL_23:
    memmove(p_size, v13, v14);
  *((_BYTE *)p_size + v14) = 0;
  BYTE8(v281) = 1;
  v18 = (char *)&v282;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  a1 = v251;
  if (v10 >= 0x17)
  {
    v20 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v20 = v10 | 7;
    v21 = v20 + 1;
    v18 = (char *)operator new(v20 + 1);
    v283 = v10;
    v284 = v21 | 0x8000000000000000;
    v282 = v18;
  }
  else
  {
    HIBYTE(v284) = v10;
    if (!v10)
    {
      LOBYTE(v282) = 0;
      v285 = 1;
      v19 = v280.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v284) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v18, v9, v10);
  v18[v10] = 0;
  v285 = 1;
  v19 = v280.__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v284) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v281))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v281) < 0)
      operator delete((void *)v280.__r_.__value_.__l.__size_);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(v282);
  if (BYTE8(v281))
    goto LABEL_35;
LABEL_37:
  if (v280.__r_.__value_.__r.__words[0])
    os_release(v280.__r_.__value_.__l.__data_);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v22 = _os_log_pack_size();
    v23 = (std::__shared_weak_count_vtbl *)operator new(v22, (std::align_val_t)8uLL);
    v24 = (std::__shared_weak_count *)operator new();
    v25 = v24;
    v24->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = v23;
    v280.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v280.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    v280.__r_.__value_.__r.__words[2] = (std::string::size_type)v24;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v281 = 0uLL;
    v282 = 0;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v25);
    }
    v29 = v280.__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v30 = operator new();
    v31 = *(unsigned __int8 *)(v8 + 39);
    v32 = v253;
    if ((v31 & 0x80u) != 0)
    {
      v32 = *(_QWORD *)(v8 + 16);
      v31 = *(_QWORD *)(v8 + 24);
    }
    *(_QWORD *)v30 = v29;
    *(_OWORD *)(v30 + 8) = *(_OWORD *)&v280.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v280.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v30 + 24) = v281;
    v281 = 0uLL;
    *(_QWORD *)(v30 + 40) = v32;
    *(_QWORD *)(v30 + 48) = v31;
    *(_BYTE *)(v30 + 56) = 1;
    __dst = 0;
    v271.__r_.__value_.__r.__words[0] = v30;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v271);
    v33 = v271.__r_.__value_.__r.__words[0];
    v271.__r_.__value_.__r.__words[0] = 0;
    v34 = v255;
    if (v33)
    {
      v35 = *(std::__shared_weak_count **)(v33 + 32);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)(v33 + 16);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      MEMORY[0x227684CE8](v33, 0x10F0C40B62ED6C6);
      v41 = __dst;
      __dst = 0;
      if (v41)
      {
        v42 = (std::__shared_weak_count *)v41[4];
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = (std::__shared_weak_count *)v41[2];
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        MEMORY[0x227684CE8](v41, 0x10F0C40B62ED6C6);
      }
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
    if (*((_QWORD *)&v281 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)v280.__r_.__value_.__r.__words[2];
    if (v280.__r_.__value_.__r.__words[2])
    {
      v52 = (unint64_t *)(v280.__r_.__value_.__r.__words[2] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  else
  {
    os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
    LOWORD(v280.__r_.__value_.__l.__data_) = 0;
    LODWORD(v249) = 2;
    v54 = (void *)_os_log_send_and_compose_impl();
    v34 = v255;
    if (v54)
      free(v54);
  }
  if (v34)
  {
    sub_22322C138((uint64_t)&v263, "KFE:Save");
    sub_223182C08((uint64_t)&v263);
  }
  sub_223182C08((uint64_t)&v263);
  v55 = v269;
  if (v269)
  {
    v56 = (unint64_t *)&v269->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
LABEL_91:
  memset(&v280, 0, sizeof(v280));
  v58 = *(unsigned __int8 *)(a2 + 23);
  if ((v58 & 0x80u) == 0)
    v59 = (std::string *)a2;
  else
    v59 = *(std::string **)a2;
  if ((v58 & 0x80u) != 0)
    v58 = *(_QWORD *)(a2 + 8);
  sub_2231816F0(&v280, v59, (std::string *)((char *)v59 + v58));
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(a1 + 1528) + 16))(&v261, *(_QWORD *)(a1 + 1528), &v280);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 1528) + 176))(*(_QWORD *)(a1 + 1528), &v261) & 1) == 0&& ((*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 1528) + 128))(*(_QWORD *)(a1 + 1528), &v261) & 1) == 0)
  {
    v95 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error creating directory: %s", 0x1CuLL);
    sub_22384BA54(&__p);
    if (**(int **)(__p.__r_.__value_.__r.__words[0] + 56) > 5
      || (v96 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 72),
          v97 = sub_22322F254((uint64_t)__p.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0),
          v98 = v97,
          !v96)
      && !v97)
    {
LABEL_440:
      v60 = 0;
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_385;
      return v60;
    }
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v263.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v263.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v264 = 5;
    v265 = "unknown file";
    v266 = 1688;
    v268 = 0;
    v269 = 0;
    v267 = "unknown function";
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = &v261;
    else
      v99 = (std::string *)v261.__r_.__value_.__r.__words[0];
    v100 = *(_QWORD *)v263.__r_.__value_.__l.__data_;
    v101 = (const char *)(*(_QWORD *)v263.__r_.__value_.__l.__data_ + 16);
    v258 = v101;
    if (*(char *)(*(_QWORD *)v263.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v101 = *(const char **)(v100 + 16);
      v102 = *(_QWORD *)(v100 + 24);
    }
    else
    {
      v102 = *(unsigned __int8 *)(*(_QWORD *)v263.__r_.__value_.__l.__data_ + 39);
    }
    v126 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v280);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v280, byte_255788F40);
      if ((_BYTE)v281 && SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v127 = byte_255788F40;
    else
      v127 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v128 = byte_255788F40[23];
    else
      v128 = *(_QWORD *)&byte_255788F40[8];
    v280.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v127, v101);
    v129 = &v280.__r_.__value_.__l.__size_;
    if (v128 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v128 >= 0x17)
    {
      v130 = v99;
      v131 = v96;
      v132 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v128 | 7) != 0x17)
        v132 = v128 | 7;
      v133 = v132 + 1;
      v129 = (std::string::size_type *)operator new(v132 + 1);
      v280.__r_.__value_.__r.__words[2] = v128;
      *(_QWORD *)&v281 = v133 | 0x8000000000000000;
      v280.__r_.__value_.__l.__size_ = (std::string::size_type)v129;
      v96 = v131;
      v99 = v130;
    }
    else
    {
      BYTE7(v281) = v128;
      if (!v128)
      {
LABEL_247:
        *((_BYTE *)v129 + v128) = 0;
        BYTE8(v281) = 1;
        v134 = (char *)&v282;
        if (v102 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v102 >= 0x17)
        {
          v135 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v102 | 7) != 0x17)
            v135 = v102 | 7;
          v136 = v135 + 1;
          v134 = (char *)operator new(v135 + 1);
          v283 = v102;
          v284 = v136 | 0x8000000000000000;
          v282 = v134;
        }
        else
        {
          HIBYTE(v284) = v102;
          if (!v102)
          {
LABEL_255:
            v134[v102] = 0;
            v285 = 1;
            v137 = v280.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v284) < 0)
              operator delete(v282);
            if (BYTE8(v281) && SBYTE7(v281) < 0)
              operator delete((void *)v280.__r_.__value_.__l.__size_);
            if (v280.__r_.__value_.__r.__words[0])
              os_release(v280.__r_.__value_.__l.__data_);
            if (!v98 || !*(_QWORD *)(v98 + 24))
            {
              os_log_type_enabled(v137, OS_LOG_TYPE_ERROR);
              LODWORD(v280.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v280.__r_.__value_.__r.__words + 4) = (std::string::size_type)v99;
              v144 = (void *)_os_log_send_and_compose_impl();
              if (v144)
                free(v144);
              goto LABEL_431;
            }
            v138 = _os_log_pack_size();
            v139 = operator new(v138, (std::align_val_t)8uLL);
            v140 = (_QWORD *)operator new();
            *v140 = &off_24EC1F7F0;
            v140[1] = 0;
            v140[2] = 0;
            v140[3] = v139;
            v271.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
            v271.__r_.__value_.__l.__size_ = (std::string::size_type)v139;
            v272 = 0;
            v273 = 0;
            v271.__r_.__value_.__r.__words[2] = (std::string::size_type)v140;
            v141 = strlen((const char *)v99);
            if (v141 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v142 = v141;
            if (v141 >= 0x17)
            {
              v161 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v141 | 7) != 0x17)
                v161 = v141 | 7;
              v162 = v161 + 1;
              p_dst = operator new(v161 + 1);
              *(_QWORD *)&v275 = v142;
              *((_QWORD *)&v275 + 1) = v162 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v275) = v141;
              p_dst = &__dst;
              if (!v141)
              {
LABEL_293:
                *((_BYTE *)p_dst + v142) = 0;
                v163 = __dst;
                *(_QWORD *)&v278 = v275;
                *(_QWORD *)((char *)&v278 + 7) = *(_QWORD *)((char *)&v275 + 7);
                v164 = HIBYTE(v275);
                v165 = operator new(0x38uLL);
                v165[1] = 0;
                v165[2] = 0;
                v165[3] = off_24EC1FA48;
                *v165 = &off_24EC1F9F8;
                v166 = v278;
                v165[4] = v163;
                v165[5] = v166;
                *(_QWORD *)((char *)v165 + 47) = *(_QWORD *)((char *)&v278 + 7);
                *((_BYTE *)v165 + 55) = v164;
                *(_QWORD *)&v278 = 0;
                *(_QWORD *)((char *)&v278 + 7) = 0;
                v167 = v273;
                v272 = (char *)(v165 + 3);
                v273 = (std::__shared_weak_count *)v165;
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                v280 = v271;
                v170 = v272;
                if (v271.__r_.__value_.__r.__words[2])
                {
                  v171 = (unint64_t *)(v271.__r_.__value_.__r.__words[2] + 8);
                  do
                    v172 = __ldxr(v171);
                  while (__stxr(v172 + 1, v171));
                }
                v173 = v273;
                *(_QWORD *)&v281 = v170;
                *((_QWORD *)&v281 + 1) = v273;
                if (v273)
                {
                  v174 = (unint64_t *)&v273->__shared_owners_;
                  do
                    v175 = __ldxr(v174);
                  while (__stxr(v175 + 1, v174));
                  v282 = v170;
                  do
                    v176 = __ldaxr(v174);
                  while (__stlxr(v176 - 1, v174));
                  if (!v176)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                  }
                }
                else
                {
                  v282 = v170;
                }
                v216 = (std::__shared_weak_count *)v271.__r_.__value_.__r.__words[2];
                if (v271.__r_.__value_.__r.__words[2])
                {
                  v217 = (unint64_t *)(v271.__r_.__value_.__r.__words[2] + 8);
                  do
                    v218 = __ldaxr(v217);
                  while (__stlxr(v218 - 1, v217));
                  if (!v218)
                  {
                    ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                    std::__shared_weak_count::__release_weak(v216);
                  }
                }
                v219 = v280.__r_.__value_.__r.__words[0];
                if (v282[31] >= 0)
                  v220 = v282 + 8;
                else
                  v220 = (char *)*((_QWORD *)v282 + 1);
                v221 = _os_log_pack_fill();
                *(_DWORD *)v221 = 136315138;
                *(_QWORD *)(v221 + 4) = v220;
                v222 = operator new();
                v223 = *(unsigned __int8 *)(v100 + 39);
                v224 = v258;
                if ((v223 & 0x80u) != 0)
                {
                  v224 = *(const char **)(v100 + 16);
                  v223 = *(_QWORD *)(v100 + 24);
                }
                *(_QWORD *)v222 = v219;
                *(_OWORD *)(v222 + 8) = *(_OWORD *)&v280.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v280.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v222 + 24) = v281;
                v281 = 0uLL;
                *(_QWORD *)(v222 + 40) = v224;
                *(_QWORD *)(v222 + 48) = v223;
                *(_BYTE *)(v222 + 56) = 16;
                __dst = 0;
                v271.__r_.__value_.__r.__words[0] = v222;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v98 + 24) + 40))(*(_QWORD *)(v98 + 24), &v271);
                v225 = v271.__r_.__value_.__r.__words[0];
                v271.__r_.__value_.__r.__words[0] = 0;
                if (v225)
                {
                  v226 = *(std::__shared_weak_count **)(v225 + 32);
                  if (v226)
                  {
                    v227 = (unint64_t *)&v226->__shared_owners_;
                    do
                      v228 = __ldaxr(v227);
                    while (__stlxr(v228 - 1, v227));
                    if (!v228)
                    {
                      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                      std::__shared_weak_count::__release_weak(v226);
                    }
                  }
                  v229 = *(std::__shared_weak_count **)(v225 + 16);
                  if (v229)
                  {
                    v230 = (unint64_t *)&v229->__shared_owners_;
                    do
                      v231 = __ldaxr(v230);
                    while (__stlxr(v231 - 1, v230));
                    if (!v231)
                    {
                      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                      std::__shared_weak_count::__release_weak(v229);
                    }
                  }
                  MEMORY[0x227684CE8](v225, 0x10F0C40B62ED6C6);
                  v232 = __dst;
                  __dst = 0;
                  if (v232)
                  {
                    v233 = (std::__shared_weak_count *)v232[4];
                    if (v233)
                    {
                      v234 = (unint64_t *)&v233->__shared_owners_;
                      do
                        v235 = __ldaxr(v234);
                      while (__stlxr(v235 - 1, v234));
                      if (!v235)
                      {
                        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                        std::__shared_weak_count::__release_weak(v233);
                      }
                    }
                    v236 = (std::__shared_weak_count *)v232[2];
                    if (v236)
                    {
                      v237 = (unint64_t *)&v236->__shared_owners_;
                      do
                        v238 = __ldaxr(v237);
                      while (__stlxr(v238 - 1, v237));
                      if (!v238)
                      {
                        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                        std::__shared_weak_count::__release_weak(v236);
                      }
                    }
                    MEMORY[0x227684CE8](v232, 0x10F0C40B62ED6C6);
                  }
                }
                v239 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
                if (*((_QWORD *)&v281 + 1))
                {
                  v240 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
                  do
                    v241 = __ldaxr(v240);
                  while (__stlxr(v241 - 1, v240));
                  if (!v241)
                  {
                    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                    std::__shared_weak_count::__release_weak(v239);
                  }
                }
                v242 = (std::__shared_weak_count *)v280.__r_.__value_.__r.__words[2];
                if (v280.__r_.__value_.__r.__words[2])
                {
                  v243 = (unint64_t *)(v280.__r_.__value_.__r.__words[2] + 8);
                  do
                    v244 = __ldaxr(v243);
                  while (__stlxr(v244 - 1, v243));
                  if (!v244)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
LABEL_431:
                if (v96)
                {
                  v245 = &v261;
                  if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v245 = (std::string *)v261.__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)&v263, "Error creating directory: %s", (const char *)v245);
                  sub_223182C08((uint64_t)&v263);
                }
                sub_223182C08((uint64_t)&v263);
                v246 = v269;
                if (v269)
                {
                  v247 = (unint64_t *)&v269->__shared_owners_;
                  do
                    v248 = __ldaxr(v247);
                  while (__stlxr(v248 - 1, v247));
                  if (!v248)
                  {
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                  }
                }
                goto LABEL_440;
              }
            }
            memcpy(p_dst, v99, v142);
            goto LABEL_293;
          }
        }
        memmove(v134, v101, v102);
        goto LABEL_255;
      }
    }
    memmove(v129, v127, v128);
    goto LABEL_247;
  }
  memset(&v259, 0, sizeof(v259));
  sub_2231816F0(&v259, (std::string *)"integrated_frames.txt", (std::string *)"");
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v260, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  else
    v260 = v261;
  sub_22319C30C((uint64_t)&v260, (std::__fs::filesystem::path *)&v259);
  (*(void (**)(__int128 *__return_ptr, _QWORD, std::string *, uint64_t))(**(_QWORD **)(a1 + 1528) + 376))(&v278, *(_QWORD *)(a1 + 1528), &v260, 16);
  v60 = *((_QWORD *)&v278 + 1);
  if (!*((_QWORD *)&v278 + 1))
  {
    v91 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Integrated frames file cannot be created %s", 0x2BuLL);
    sub_22384BA54(&v270);
    if (**(int **)(v270 + 56) > 5)
      goto LABEL_368;
    v92 = *(unsigned __int8 *)(v270 + 72);
    v93 = sub_22322F254(v270, "OSLogSurrogateAppender", 1, 0);
    v94 = v93;
    if (!v92 && !v93)
      goto LABEL_368;
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v270;
    v263.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v263.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v264 = 5;
    v265 = "unknown file";
    v266 = 1703;
    v268 = 0;
    v269 = 0;
    v267 = "unknown function";
    v257 = v92;
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__p, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
    else
      __p = v260;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v104 = *(_QWORD *)v263.__r_.__value_.__l.__data_;
    v254 = *(_QWORD *)v263.__r_.__value_.__l.__data_;
    if (*(char *)(*(_QWORD *)v263.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v106 = *(const char **)(v104 + 16);
      v105 = *(_QWORD *)(v104 + 24);
    }
    else
    {
      v105 = *(unsigned __int8 *)(*(_QWORD *)v263.__r_.__value_.__l.__data_ + 39);
      v106 = (const char *)(*(_QWORD *)v263.__r_.__value_.__l.__data_ + 16);
    }
    v252 = *(_QWORD *)v263.__r_.__value_.__l.__data_ + 16;
    v107 = a1;
    v108 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v280);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v280, byte_255788F40);
      if ((_BYTE)v281 && SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v109 = byte_255788F40;
    else
      v109 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v110 = byte_255788F40[23];
    else
      v110 = *(_QWORD *)&byte_255788F40[8];
    v280.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v109, v106);
    v111 = &v280.__r_.__value_.__l.__size_;
    if (v110 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v110 >= 0x17)
    {
      v112 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v110 | 7) != 0x17)
        v112 = v110 | 7;
      v113 = v112 + 1;
      v111 = (std::string::size_type *)operator new(v112 + 1);
      v280.__r_.__value_.__r.__words[2] = v110;
      *(_QWORD *)&v281 = v113 | 0x8000000000000000;
      v280.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
    }
    else
    {
      BYTE7(v281) = v110;
      if (!v110)
      {
LABEL_208:
        *((_BYTE *)v111 + v110) = 0;
        BYTE8(v281) = 1;
        v114 = (char *)&v282;
        if (v105 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        a1 = v107;
        if (v105 >= 0x17)
        {
          v115 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v105 | 7) != 0x17)
            v115 = v105 | 7;
          v116 = v115 + 1;
          v114 = (char *)operator new(v115 + 1);
          v283 = v105;
          v284 = v116 | 0x8000000000000000;
          v282 = v114;
        }
        else
        {
          HIBYTE(v284) = v105;
          if (!v105)
          {
LABEL_216:
            v114[v105] = 0;
            v285 = 1;
            v117 = v280.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v284) < 0)
              operator delete(v282);
            if (BYTE8(v281) && SBYTE7(v281) < 0)
              operator delete((void *)v280.__r_.__value_.__l.__size_);
            if (v280.__r_.__value_.__r.__words[0])
              os_release(v280.__r_.__value_.__l.__data_);
            if (!v94 || !*(_QWORD *)(v94 + 24))
            {
              os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
              LODWORD(v280.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v280.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
              v124 = (void *)_os_log_send_and_compose_impl();
              v125 = v257;
              if (v124)
                free(v124);
              goto LABEL_352;
            }
            v118 = _os_log_pack_size();
            v119 = operator new(v118, (std::align_val_t)8uLL);
            v120 = (_QWORD *)operator new();
            *v120 = &off_24EC1F7F0;
            v120[1] = 0;
            v120[2] = 0;
            v120[3] = v119;
            v271.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
            v271.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
            v272 = 0;
            v273 = 0;
            v271.__r_.__value_.__r.__words[2] = (std::string::size_type)v120;
            v121 = strlen((const char *)p_p);
            if (v121 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v122 = v121;
            if (v121 >= 0x17)
            {
              v145 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v121 | 7) != 0x17)
                v145 = v121 | 7;
              v146 = v145 + 1;
              v123 = operator new(v145 + 1);
              *(_QWORD *)&v275 = v122;
              *((_QWORD *)&v275 + 1) = v146 | 0x8000000000000000;
              __dst = v123;
            }
            else
            {
              HIBYTE(v275) = v121;
              v123 = &__dst;
              if (!v121)
              {
LABEL_274:
                *((_BYTE *)v123 + v122) = 0;
                v147 = __dst;
                v286[0] = v275;
                *(_QWORD *)((char *)v286 + 7) = *(_QWORD *)((char *)&v275 + 7);
                v148 = HIBYTE(v275);
                v149 = operator new(0x38uLL);
                v149[1] = 0;
                v149[2] = 0;
                v149[3] = off_24EC1FA48;
                *v149 = &off_24EC1F9F8;
                v150 = v286[0];
                v149[4] = v147;
                v149[5] = v150;
                *(_QWORD *)((char *)v149 + 47) = *(_QWORD *)((char *)v286 + 7);
                *((_BYTE *)v149 + 55) = v148;
                v286[0] = 0;
                *(_QWORD *)((char *)v286 + 7) = 0;
                v151 = v273;
                v272 = (char *)(v149 + 3);
                v273 = (std::__shared_weak_count *)v149;
                if (v151)
                {
                  v152 = (unint64_t *)&v151->__shared_owners_;
                  do
                    v153 = __ldaxr(v152);
                  while (__stlxr(v153 - 1, v152));
                  if (!v153)
                  {
                    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                }
                v280 = v271;
                v154 = v272;
                if (v271.__r_.__value_.__r.__words[2])
                {
                  v155 = (unint64_t *)(v271.__r_.__value_.__r.__words[2] + 8);
                  do
                    v156 = __ldxr(v155);
                  while (__stxr(v156 + 1, v155));
                }
                v157 = v273;
                *(_QWORD *)&v281 = v154;
                *((_QWORD *)&v281 + 1) = v273;
                if (v273)
                {
                  v158 = (unint64_t *)&v273->__shared_owners_;
                  do
                    v159 = __ldxr(v158);
                  while (__stxr(v159 + 1, v158));
                  v282 = v154;
                  do
                    v160 = __ldaxr(v158);
                  while (__stlxr(v160 - 1, v158));
                  if (!v160)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                else
                {
                  v282 = v154;
                }
                v177 = (std::__shared_weak_count *)v271.__r_.__value_.__r.__words[2];
                if (v271.__r_.__value_.__r.__words[2])
                {
                  v178 = (unint64_t *)(v271.__r_.__value_.__r.__words[2] + 8);
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
                v180 = v280.__r_.__value_.__r.__words[0];
                if (v282[31] >= 0)
                  v181 = v282 + 8;
                else
                  v181 = (char *)*((_QWORD *)v282 + 1);
                v182 = _os_log_pack_fill();
                *(_DWORD *)v182 = 136315138;
                *(_QWORD *)(v182 + 4) = v181;
                v183 = operator new();
                v184 = *(unsigned __int8 *)(v254 + 39);
                v185 = v252;
                if ((v184 & 0x80u) != 0)
                {
                  v185 = *(_QWORD *)(v254 + 16);
                  v184 = *(_QWORD *)(v254 + 24);
                }
                *(_QWORD *)v183 = v180;
                *(_OWORD *)(v183 + 8) = *(_OWORD *)&v280.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v280.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v183 + 24) = v281;
                v281 = 0uLL;
                *(_QWORD *)(v183 + 40) = v185;
                *(_QWORD *)(v183 + 48) = v184;
                *(_BYTE *)(v183 + 56) = 16;
                __dst = 0;
                v271.__r_.__value_.__r.__words[0] = v183;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v94 + 24) + 40))(*(_QWORD *)(v94 + 24), &v271);
                v186 = v271.__r_.__value_.__r.__words[0];
                v271.__r_.__value_.__r.__words[0] = 0;
                if (v186)
                {
                  v187 = *(std::__shared_weak_count **)(v186 + 32);
                  if (v187)
                  {
                    v188 = (unint64_t *)&v187->__shared_owners_;
                    do
                      v189 = __ldaxr(v188);
                    while (__stlxr(v189 - 1, v188));
                    if (!v189)
                    {
                      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                      std::__shared_weak_count::__release_weak(v187);
                    }
                  }
                  v190 = *(std::__shared_weak_count **)(v186 + 16);
                  if (v190)
                  {
                    v191 = (unint64_t *)&v190->__shared_owners_;
                    do
                      v192 = __ldaxr(v191);
                    while (__stlxr(v192 - 1, v191));
                    if (!v192)
                    {
                      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                      std::__shared_weak_count::__release_weak(v190);
                    }
                  }
                  MEMORY[0x227684CE8](v186, 0x10F0C40B62ED6C6);
                  v193 = __dst;
                  __dst = 0;
                  if (v193)
                  {
                    v194 = (std::__shared_weak_count *)v193[4];
                    if (v194)
                    {
                      v195 = (unint64_t *)&v194->__shared_owners_;
                      do
                        v196 = __ldaxr(v195);
                      while (__stlxr(v196 - 1, v195));
                      if (!v196)
                      {
                        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                        std::__shared_weak_count::__release_weak(v194);
                      }
                    }
                    v197 = (std::__shared_weak_count *)v193[2];
                    if (v197)
                    {
                      v198 = (unint64_t *)&v197->__shared_owners_;
                      do
                        v199 = __ldaxr(v198);
                      while (__stlxr(v199 - 1, v198));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                        std::__shared_weak_count::__release_weak(v197);
                      }
                    }
                    MEMORY[0x227684CE8](v193, 0x10F0C40B62ED6C6);
                  }
                }
                v200 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
                v60 = 0;
                v125 = v257;
                if (*((_QWORD *)&v281 + 1))
                {
                  v201 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
                  do
                    v202 = __ldaxr(v201);
                  while (__stlxr(v202 - 1, v201));
                  if (!v202)
                  {
                    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                    std::__shared_weak_count::__release_weak(v200);
                  }
                }
                v203 = (std::__shared_weak_count *)v280.__r_.__value_.__r.__words[2];
                if (v280.__r_.__value_.__r.__words[2])
                {
                  v204 = (unint64_t *)(v280.__r_.__value_.__r.__words[2] + 8);
                  do
                    v205 = __ldaxr(v204);
                  while (__stlxr(v205 - 1, v204));
                  if (!v205)
                  {
                    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                    std::__shared_weak_count::__release_weak(v203);
                  }
                }
LABEL_352:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (v125)
                {
                  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                    sub_223197FA4(&v280, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
                  else
                    v280 = v260;
                  v206 = &v280;
                  if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v206 = (std::string *)v280.__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)&v263, "Integrated frames file cannot be created %s", (const char *)v206);
                  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v280.__r_.__value_.__l.__data_);
                  sub_223182C08((uint64_t)&v263);
                }
                sub_223182C08((uint64_t)&v263);
                v207 = v269;
                if (v269)
                {
                  v208 = (unint64_t *)&v269->__shared_owners_;
                  do
                    v209 = __ldaxr(v208);
                  while (__stlxr(v209 - 1, v208));
                  if (!v209)
                  {
                    ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                    std::__shared_weak_count::__release_weak(v207);
                  }
                }
                goto LABEL_368;
              }
            }
            memcpy(v123, p_p, v122);
            goto LABEL_274;
          }
        }
        memmove(v114, v106, v105);
        goto LABEL_216;
      }
    }
    memmove(v111, v109, v110);
    goto LABEL_208;
  }
  v61 = *(_QWORD **)(a1 + 1608);
  v62 = *((_QWORD *)&v278 + 1);
  if (v61 == (_QWORD *)(a1 + 1616))
    goto LABEL_170;
  v250 = *((_QWORD *)&v278 + 1);
  do
  {
    v63 = v61[4];
    v64 = (_BYTE *)v61[5];
    v65 = (_BYTE *)v61[6];
    v66 = v65 - v64;
    if (v65 == v64)
    {
      v68 = 0;
      v67 = 0;
    }
    else
    {
      if (v66 < 0)
        sub_22316E078();
      v67 = (uint64_t *)operator new(v65 - v64);
      v68 = &v67[v66 >> 3];
      memcpy(v67, v64, v66);
    }
    sub_22456D250("%.8f", &v280, (double)v63 / 1000000000.0, v249);
    v69 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v278 + 1) + 16))(*((_QWORD *)&v278 + 1));
    if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v280;
    else
      v70 = (std::string *)v280.__r_.__value_.__r.__words[0];
    if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v280.__r_.__value_.__r.__words[2]);
    else
      size = v280.__r_.__value_.__l.__size_;
    sub_2231813E8(v69, (uint64_t)v70, size);
    v72 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v278 + 1) + 16))(*((_QWORD *)&v278 + 1));
    sub_2231813E8(v72, (uint64_t)" ", 1);
    if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v280.__r_.__value_.__l.__data_);
    v73 = v67 - v68;
    if (v73 >= -1)
      v74 = -1;
    else
      v74 = v67 - v68;
    v75 = (char *)v67 - (char *)v68;
    v256 = v67;
    if (v67 == v68)
    {
      v77 = 0;
    }
    else
    {
      v76 = v67;
      v77 = 0;
      do
      {
        sub_22456D250("%.8f", &v280, (double)*v76 / 1000000000.0);
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
        else
          v78 = v280.__r_.__value_.__l.__size_;
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v280.__r_.__value_.__l.__data_);
        v77 += v78;
        ++v76;
      }
      while (v76 != v68);
    }
    memset(&v263, 0, sizeof(v263));
    std::string::reserve(&v263, v77 + ~v74);
    if ((v75 & 0x8000000000000000) != 0)
    {
      sub_22456D250("%.8f", &v280, (double)*v256 / 1000000000.0);
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &v280;
      else
        v85 = (std::string *)v280.__r_.__value_.__r.__words[0];
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
      else
        v86 = v280.__r_.__value_.__l.__size_;
      std::string::append(&v263, (const std::string::value_type *)v85, v86);
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      if ((unint64_t)(v73 + 1) >= 2)
      {
        for (i = v256 + 1; i != v68; ++i)
        {
          std::string::append(&v263, " ", 1uLL);
          sub_22456D250("%.8f", &v280, (double)*i / 1000000000.0);
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v88 = &v280;
          else
            v88 = (std::string *)v280.__r_.__value_.__r.__words[0];
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
          else
            v89 = v280.__r_.__value_.__l.__size_;
          std::string::append(&v263, (const std::string::value_type *)v88, v89);
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v280.__r_.__value_.__l.__data_);
        }
      }
    }
    v79 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v278 + 1) + 16))(*((_QWORD *)&v278 + 1));
    if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v80 = &v263;
    else
      v80 = (std::string *)v263.__r_.__value_.__r.__words[0];
    if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
    else
      v81 = v263.__r_.__value_.__l.__size_;
    sub_2231813E8(v79, (uint64_t)v80, v81);
    v82 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v278 + 1) + 16))(*((_QWORD *)&v278 + 1));
    v280.__r_.__value_.__s.__data_[0] = 10;
    sub_2231813E8(v82, (uint64_t)&v280, 1);
    if ((SHIBYTE(v263.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v256)
        goto LABEL_141;
LABEL_140:
      operator delete(v256);
      goto LABEL_141;
    }
    operator delete(v263.__r_.__value_.__l.__data_);
    if (v256)
      goto LABEL_140;
LABEL_141:
    v83 = (_QWORD *)v61[1];
    if (v83)
    {
      do
      {
        v84 = v83;
        v83 = (_QWORD *)*v83;
      }
      while (v83);
    }
    else
    {
      do
      {
        v84 = (_QWORD *)v61[2];
        v7 = *v84 == (_QWORD)v61;
        v61 = v84;
      }
      while (!v7);
    }
    v61 = v84;
  }
  while (v84 != (_QWORD *)(a1 + 1616));
  v62 = *((_QWORD *)&v278 + 1);
  v60 = v250;
LABEL_170:
  v90 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
  v280.__r_.__value_.__s.__data_[0] = 10;
  sub_2231813E8(v90, (uint64_t)&v280, 1);
LABEL_368:
  v210 = v279;
  if (!v279)
    goto LABEL_372;
  v211 = (unint64_t *)&v279->__shared_owners_;
  do
    v212 = __ldaxr(v211);
  while (__stlxr(v212 - 1, v211));
  if (!v212)
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_377;
LABEL_373:
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_374;
LABEL_378:
    operator delete(v259.__r_.__value_.__l.__data_);
    if (v60)
      goto LABEL_379;
  }
  else
  {
LABEL_372:
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_373;
LABEL_377:
    operator delete(v260.__r_.__value_.__l.__data_);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_378;
LABEL_374:
    if (!v60)
      goto LABEL_384;
LABEL_379:
    v276[0] = &off_24EC5BC78;
    v276[1] = a1;
    v277 = v276;
    v60 = sub_2238D26B0();
    v213 = v277;
    if (v277 == v276)
    {
      v214 = 4;
      v213 = v276;
    }
    else
    {
      if (!v277)
        goto LABEL_384;
      v214 = 5;
    }
    (*(void (**)(_QWORD *))(*v213 + 8 * v214))(v213);
  }
LABEL_384:
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
LABEL_385:
    operator delete(v261.__r_.__value_.__l.__data_);
  return v60;
}

void sub_223881B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  if (*(_BYTE *)(v60 - 168) && *(char *)(v60 - 169) < 0)
    operator delete(*(void **)(v60 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a41);
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_22388205C(uint64_t a1, uint64_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  std::string::size_type *p_size;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  std::string::size_type v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::string *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  _OWORD *v68;
  __int128 v69;
  int v70;
  uint64_t *v71;
  uint64_t **i;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  unint64_t v79;
  size_t v80;
  int v81;
  int v82;
  _BYTE *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t **v86;
  uint64_t **v87;
  _BYTE *v88;
  size_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  size_t v95;
  size_t v96;
  int v97;
  int v98;
  __int128 v99;
  _QWORD *v100;
  _BYTE *v101;
  uint64_t *v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  _DWORD *v106;
  float32x2_t *v107;
  char *v108;
  char *v109;
  char **v110;
  char **v111;
  _BYTE *v112;
  size_t v113;
  char *v114;
  char *v115;
  char *v116;
  int v117;
  char *v118;
  size_t v119;
  size_t v120;
  int v121;
  int v122;
  char *v123;
  _BYTE *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  _BYTE *v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  _OWORD *v138;
  _OWORD *v139;
  __int128 v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  void **v151;
  void **v152;
  void **v153;
  uint64_t v154;
  float32x2_t v155;
  char **v156;
  char **v157;
  char *v158;
  _BYTE *v159;
  size_t v160;
  char *v161;
  char *v162;
  char *v163;
  int v164;
  char *v165;
  size_t v166;
  size_t v167;
  int v168;
  int v169;
  char *v170;
  _BYTE *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  _BYTE *v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  float32x2_t v185;
  __int128 v186;
  unint64_t v187;
  _DWORD *v188;
  _DWORD *v189;
  _DWORD *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  int v198;
  float v199;
  float v200;
  float32x2_t v201;
  char **v202;
  char **v203;
  char *v204;
  _BYTE *v205;
  size_t v206;
  char *v207;
  char *v208;
  char *v209;
  int v210;
  char *v211;
  size_t v212;
  size_t v213;
  int v214;
  int v215;
  char *v216;
  _BYTE *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  _BYTE *v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  float32x2_t v231;
  __int128 v232;
  unint64_t v233;
  char *v234;
  _BYTE *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  int v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL8 v247;
  uint64_t v249;
  _DWORD *v250;
  float32x2_t v251;
  float32x2_t v252;
  float32x2_t v253;
  float32x2_t v254;
  float32x2_t v255;
  float32x2_t v256;
  float32x2_t v257;
  float32x2_t v258;
  __int128 v259;
  float32x2_t v260;
  __int128 v261;
  uint64_t v262;
  unsigned __int8 *v263;
  _BYTE v264[24];
  std::string object;
  __int128 v266;
  void *__p[2];
  unint64_t v268;
  char v269;
  const void ***v270;
  char *v271;
  uint64_t v272;
  const void ***v273;
  char *v274;
  uint64_t v275;
  const void ***v276;
  char *v277;
  uint64_t v278;
  const void ***v279;
  uint64_t *v280;
  uint64_t v281;
  const void ***v282;
  uint64_t *v283;
  uint64_t v284;
  void *v285[2];
  char v286;
  __int128 v287;
  __int128 v288;
  const char *v289;
  int v290;
  const char *v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  uint64_t v294;

  v294 = *MEMORY[0x24BDAC8D0];
  sub_22384BA54(&v279);
  v249 = a1;
  if (*(int *)v279[7] > 3)
    goto LABEL_90;
  v7 = *((unsigned __int8 *)v279 + 72);
  v8 = sub_22322F254((uint64_t)v279, "OSLogSurrogateAppender", 1, 0);
  v9 = v8;
  v10 = !v7 && v8 == 0;
  if (v10)
    goto LABEL_90;
  *(_QWORD *)&v287 = &v279;
  *((std::chrono::steady_clock::time_point *)&v287 + 1) = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v288 = std::chrono::system_clock::now();
  DWORD2(v288) = 3;
  v289 = "unknown file";
  v290 = 1725;
  v293 = 0;
  v291 = "unknown function";
  v292 = 0;
  v11 = *(_QWORD *)v287;
  if (*(char *)(*(_QWORD *)v287 + 39) < 0)
  {
    v13 = *(const char **)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    v262 = *(_QWORD *)v287 + 16;
    v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v15 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)v287 + 39);
    v13 = (const char *)(*(_QWORD *)v287 + 16);
    v262 = (uint64_t)v13;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
    if ((_BYTE)v266 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F40[23] >= 0)
    v16 = byte_255788F40;
  else
    v16 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v17 = byte_255788F40[23];
  else
    v17 = *(_QWORD *)&byte_255788F40[8];
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v16, v13);
  p_size = &object.__r_.__value_.__l.__size_;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v17 >= 0x17)
  {
    v19 = v9;
    v20 = v13;
    v21 = v11;
    v22 = v7;
    v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v23 = v17 | 7;
    v24 = v23 + 1;
    p_size = (std::string::size_type *)operator new(v23 + 1);
    object.__r_.__value_.__r.__words[2] = v17;
    *(_QWORD *)&v266 = v24 | 0x8000000000000000;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    v7 = v22;
    v11 = v21;
    v13 = v20;
    v9 = v19;
    goto LABEL_23;
  }
  BYTE7(v266) = v17;
  if (v17)
LABEL_23:
    memmove(p_size, v16, v17);
  *((_BYTE *)p_size + v17) = 0;
  BYTE8(v266) = 1;
  v25 = __p;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v27 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v27 = v12 | 7;
    v28 = v27 + 1;
    v25 = operator new(v27 + 1);
    __p[1] = (void *)v12;
    v268 = v28 | 0x8000000000000000;
    __p[0] = v25;
  }
  else
  {
    HIBYTE(v268) = v12;
    if (!v12)
    {
      LOBYTE(__p[0]) = 0;
      v269 = 1;
      v26 = object.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v268) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v25, v13, v12);
  *((_BYTE *)v25 + v12) = 0;
  v269 = 1;
  v26 = object.__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v268) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v266))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(__p[0]);
  if (!BYTE8(v266))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v266) < 0)
    operator delete((void *)object.__r_.__value_.__l.__size_);
LABEL_37:
  if (object.__r_.__value_.__r.__words[0])
    os_release(object.__r_.__value_.__l.__data_);
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v29 = _os_log_pack_size();
    v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
    v31 = (std::__shared_weak_count *)operator new();
    v32 = v31;
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v31->__shared_weak_owners_ = 0;
    v31[1].__vftable = v30;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
    object.__r_.__value_.__r.__words[2] = (std::string::size_type)v31;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    v266 = 0uLL;
    __p[0] = 0;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v32);
    }
    v36 = object.__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v37 = (char *)operator new();
    v38 = *(unsigned __int8 *)(v11 + 39);
    v39 = v262;
    if ((v38 & 0x80u) != 0)
    {
      v39 = *(_QWORD *)(v11 + 16);
      v38 = *(_QWORD *)(v11 + 24);
    }
    *(_QWORD *)v37 = v36;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
    *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v37 + 24) = v266;
    v266 = 0uLL;
    *((_QWORD *)v37 + 5) = v39;
    *((_QWORD *)v37 + 6) = v38;
    v37[56] = 1;
    v282 = 0;
    v285[0] = v37;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v285);
    v40 = v285[0];
    v285[0] = 0;
    a1 = v249;
    if (v40)
    {
      v41 = (std::__shared_weak_count *)*((_QWORD *)v40 + 4);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)*((_QWORD *)v40 + 2);
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
      v47 = (const void **)v282;
      v282 = 0;
      if (v47)
      {
        v48 = (std::__shared_weak_count *)v47[4];
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)v47[2];
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
    if (*((_QWORD *)&v266 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
    if (object.__r_.__value_.__r.__words[2])
    {
      v58 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    v60 = (void *)_os_log_send_and_compose_impl();
    a1 = v249;
    if (v60)
      free(v60);
  }
  if (v7)
  {
    sub_22322C138((uint64_t)&v287, "KFE:SaveRmB");
    sub_223182C08((uint64_t)&v287);
  }
  sub_223182C08((uint64_t)&v287);
  v61 = v293;
  if (v293)
  {
    v62 = (unint64_t *)&v293->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      if (*(_QWORD *)(a1 + 1952))
        goto LABEL_92;
      goto LABEL_91;
    }
  }
LABEL_90:
  if (*(_QWORD *)(a1 + 1952))
    goto LABEL_92;
LABEL_91:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 1727, (uint64_t)"room_boundary_identification_", 29, (uint64_t)"Cannot save rmb when llrb is disabled", 37, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_92:
  memset(&object, 0, sizeof(object));
  v64 = *(unsigned __int8 *)(a2 + 23);
  if ((v64 & 0x80u) == 0)
    v65 = (std::string *)a2;
  else
    v65 = *(std::string **)a2;
  if ((v64 & 0x80u) != 0)
    v64 = *(_QWORD *)(a2 + 8);
  sub_2231816F0(&object, v65, (std::string *)((char *)v65 + v64));
  (*(void (**)(void **__return_ptr, _QWORD, std::string *))(**(_QWORD **)(a1 + 1528) + 16))(v285, *(_QWORD *)(a1 + 1528), &object);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    operator delete(object.__r_.__value_.__l.__data_);
  v66 = *(_QWORD *)(a1 + 1952);
  v284 = 0;
  v283 = 0;
  v282 = (const void ***)&v283;
  v281 = 0;
  v280 = 0;
  v279 = (const void ***)&v280;
  v278 = 0;
  v277 = 0;
  v276 = (const void ***)&v277;
  v275 = 0;
  v274 = 0;
  v273 = (const void ***)&v274;
  v272 = 0;
  v271 = 0;
  v270 = (const void ***)&v271;
  sub_2241498F4((uint64_t)&object, 0);
  v67 = *(unsigned __int8 **)(v66 + 56);
  if (v67)
  {
    do
    {
      v263 = v67;
      sub_2245664AC(v67 + 16, &v287);
      v68 = operator new(0x28uLL);
      *(_QWORD *)v264 = v68;
      *(_OWORD *)&v264[8] = xmmword_2245C4640;
      v69 = v288;
      *v68 = v287;
      v68[1] = v69;
      *((_DWORD *)v68 + 8) = (_DWORD)v289;
      *((_BYTE *)v68 + 36) = 0;
      v70 = *((_DWORD *)v263 + 130);
      v71 = v283;
      for (i = &v283; ; v71 = *i)
      {
        v73 = i;
        if (!v71)
          goto LABEL_124;
LABEL_105:
        i = (uint64_t **)v71;
        v76 = v71[4];
        v74 = v71 + 4;
        v75 = (uint64_t *)v76;
        v77 = *((char *)v74 + 23);
        v78 = v77 >= 0 ? v74 : v75;
        v79 = v77 >= 0 ? *((unsigned __int8 *)v74 + 23) : v74[1];
        v80 = v79 >= 0x24 ? 36 : v79;
        v81 = memcmp(v68, v78, v80);
        if (v81)
          break;
        if (v79 <= 0x24)
          goto LABEL_118;
LABEL_103:
        ;
      }
      if (v81 < 0)
        goto LABEL_103;
LABEL_118:
      v82 = memcmp(v78, v68, v80);
      if (v82)
      {
        if ((v82 & 0x80000000) == 0)
          goto LABEL_128;
      }
      else if (v79 >= 0x24)
      {
LABEL_128:
        *((_DWORD *)i + 14) = v70;
        v85 = v280;
        v86 = &v280;
        v87 = &v280;
        if (!v280)
          goto LABEL_155;
LABEL_129:
        if (v264[23] >= 0)
          v88 = v264;
        else
          v88 = *(_BYTE **)v264;
        if (v264[23] >= 0)
          v89 = v264[23];
        else
          v89 = *(_QWORD *)&v264[8];
        while (1)
        {
          v86 = (uint64_t **)v85;
          v92 = v85[4];
          v90 = v85 + 4;
          v91 = (uint64_t *)v92;
          v93 = *((char *)v90 + 23);
          if (v93 >= 0)
            v94 = v90;
          else
            v94 = v91;
          if (v93 >= 0)
            v95 = *((unsigned __int8 *)v90 + 23);
          else
            v95 = v90[1];
          if (v95 >= v89)
            v96 = v89;
          else
            v96 = v95;
          v97 = memcmp(v88, v94, v96);
          if (v97)
          {
            if (v97 < 0)
              goto LABEL_135;
          }
          else if (v89 < v95)
          {
LABEL_135:
            v85 = *v86;
            v87 = v86;
            if (!*v86)
              goto LABEL_155;
            continue;
          }
          v98 = memcmp(v94, v88, v96);
          if (v98)
          {
            if ((v98 & 0x80000000) == 0)
              goto LABEL_162;
          }
          else if (v95 >= v89)
          {
LABEL_162:
            v103 = v86 + 7;
            if (v86 + 7 != (uint64_t **)(v263 + 256))
              goto LABEL_163;
            goto LABEL_164;
          }
          v85 = v86[1];
          if (!v85)
          {
            v87 = v86 + 1;
            goto LABEL_155;
          }
        }
      }
      v71 = i[1];
      if (v71)
        goto LABEL_105;
      v73 = i + 1;
LABEL_124:
      v83 = operator new(0x40uLL);
      sub_223197FA4(v83 + 32, v68, 0x24uLL);
      *((_DWORD *)v83 + 14) = 0;
      *(_QWORD *)v83 = 0;
      *((_QWORD *)v83 + 1) = 0;
      *((_QWORD *)v83 + 2) = i;
      *v73 = (uint64_t *)v83;
      v84 = (uint64_t *)v83;
      if (*v282)
      {
        v282 = (const void ***)*v282;
        v84 = *v73;
      }
      sub_2231A9A8C(v283, v84);
      ++v284;
      *((_DWORD *)v83 + 14) = v70;
      v85 = v280;
      v86 = &v280;
      v87 = &v280;
      if (v280)
        goto LABEL_129;
LABEL_155:
      v100 = operator new(0x50uLL);
      v101 = v100 + 4;
      if ((v264[23] & 0x80000000) != 0)
      {
        sub_223197FA4(v101, *(void **)v264, *(unint64_t *)&v264[8]);
      }
      else
      {
        *(_OWORD *)v101 = *(_OWORD *)v264;
        v100[6] = *(_QWORD *)&v264[16];
      }
      v100[7] = 0;
      v100[8] = 0;
      v100[9] = 0;
      *v100 = 0;
      v100[1] = 0;
      v100[2] = v86;
      *v87 = v100;
      v102 = v100;
      if (*v279)
      {
        v279 = (const void ***)*v279;
        v102 = *v87;
      }
      sub_2231A9A8C(v280, v102);
      ++v281;
      v103 = v100 + 7;
      if (v100 + 7 != (_QWORD *)(v263 + 256))
LABEL_163:
        sub_22342D7E8(v103, *((char **)v263 + 32), *((char **)v263 + 33), (uint64_t)(*((_QWORD *)v263 + 33) - *((_QWORD *)v263 + 32)) >> 2);
LABEL_164:
      v104 = (unsigned __int8 *)*((_QWORD *)v263 + 61);
      if (v104)
      {
        while (1)
        {
          v109 = v277;
          v110 = &v277;
          v111 = &v277;
          if (v277)
            break;
LABEL_196:
          v123 = (char *)operator new(0x50uLL);
          v124 = v123 + 32;
          if ((v264[23] & 0x80000000) != 0)
          {
            sub_223197FA4(v124, *(void **)v264, *(unint64_t *)&v264[8]);
          }
          else
          {
            *(_OWORD *)v124 = *(_OWORD *)v264;
            *((_QWORD *)v123 + 6) = *(_QWORD *)&v264[16];
          }
          *((_QWORD *)v123 + 7) = 0;
          *((_QWORD *)v123 + 8) = 0;
          *((_QWORD *)v123 + 9) = 0;
          *(_QWORD *)v123 = 0;
          *((_QWORD *)v123 + 1) = 0;
          *((_QWORD *)v123 + 2) = v110;
          *v111 = v123;
          v125 = v123;
          if (*v276)
          {
            v276 = (const void ***)*v276;
            v125 = *v111;
          }
          v126 = v277;
          v10 = v125 == v277;
          v125[24] = v125 == v277;
          if (!v10)
          {
            do
            {
              v127 = *((_QWORD *)v125 + 2);
              if (*(_BYTE *)(v127 + 24))
                break;
              v128 = *(char **)(v127 + 16);
              v129 = *(_QWORD *)v128;
              if (*(_QWORD *)v128 == v127)
              {
                v132 = *((_QWORD *)v128 + 1);
                if (!v132 || (v133 = *(unsigned __int8 *)(v132 + 24), v130 = (_BYTE *)(v132 + 24), v133))
                {
                  if (*(char **)v127 == v125)
                  {
                    *(_BYTE *)(v127 + 24) = 1;
                    v128[24] = 0;
                    v136 = *(_QWORD *)(v127 + 8);
                    *(_QWORD *)v128 = v136;
                    if (v136)
                      goto LABEL_216;
                  }
                  else
                  {
                    v134 = *(uint64_t **)(v127 + 8);
                    v135 = *v134;
                    *(_QWORD *)(v127 + 8) = *v134;
                    if (v135)
                    {
                      *(_QWORD *)(v135 + 16) = v127;
                      v128 = *(char **)(v127 + 16);
                    }
                    v134[2] = (uint64_t)v128;
                    *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8 * (**(_QWORD **)(v127 + 16) != v127)) = v134;
                    *v134 = v127;
                    *(_QWORD *)(v127 + 16) = v134;
                    v128 = (char *)v134[2];
                    v127 = *(_QWORD *)v128;
                    *((_BYTE *)v134 + 24) = 1;
                    v128[24] = 0;
                    v136 = *(_QWORD *)(v127 + 8);
                    *(_QWORD *)v128 = v136;
                    if (v136)
LABEL_216:
                      *(_QWORD *)(v136 + 16) = v128;
                  }
                  *(_QWORD *)(v127 + 16) = *((_QWORD *)v128 + 2);
                  *(_QWORD *)(*((_QWORD *)v128 + 2) + 8 * (**((_QWORD **)v128 + 2) != (_QWORD)v128)) = v127;
                  *(_QWORD *)(v127 + 8) = v128;
LABEL_223:
                  *((_QWORD *)v128 + 2) = v127;
                  break;
                }
              }
              else if (!v129 || (v131 = *(unsigned __int8 *)(v129 + 24), v130 = (_BYTE *)(v129 + 24), v131))
              {
                if (*(char **)v127 == v125)
                {
                  v154 = *((_QWORD *)v125 + 1);
                  *(_QWORD *)v127 = v154;
                  if (v154)
                  {
                    *(_QWORD *)(v154 + 16) = v127;
                    v128 = *(char **)(v127 + 16);
                  }
                  *((_QWORD *)v125 + 2) = v128;
                  *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8 * (**(_QWORD **)(v127 + 16) != v127)) = v125;
                  *((_QWORD *)v125 + 1) = v127;
                  *(_QWORD *)(v127 + 16) = v125;
                  v128 = (char *)*((_QWORD *)v125 + 2);
                  v125[24] = 1;
                  v128[24] = 0;
                  v127 = *((_QWORD *)v128 + 1);
                  v137 = *(char **)v127;
                  *((_QWORD *)v128 + 1) = *(_QWORD *)v127;
                  if (v137)
LABEL_221:
                    *((_QWORD *)v137 + 2) = v128;
                }
                else
                {
                  *(_BYTE *)(v127 + 24) = 1;
                  v128[24] = 0;
                  v127 = *((_QWORD *)v128 + 1);
                  v137 = *(char **)v127;
                  *((_QWORD *)v128 + 1) = *(_QWORD *)v127;
                  if (v137)
                    goto LABEL_221;
                }
                *(_QWORD *)(v127 + 16) = *((_QWORD *)v128 + 2);
                *(_QWORD *)(*((_QWORD *)v128 + 2) + 8 * (**((_QWORD **)v128 + 2) != (_QWORD)v128)) = v127;
                *(_QWORD *)v127 = v128;
                goto LABEL_223;
              }
              *(_BYTE *)(v127 + 24) = 1;
              v125 = v128;
              v128[24] = v128 == v126;
              *v130 = 1;
            }
            while (v128 != v126);
          }
          ++v278;
LABEL_225:
          sub_2245664AC(v104 + 16, &v287);
          v138 = operator new(0x28uLL);
          v139 = v138;
          v140 = v288;
          *v138 = v287;
          v138[1] = v140;
          *((_DWORD *)v138 + 8) = (_DWORD)v289;
          *((_BYTE *)v138 + 36) = 0;
          v142 = *((_QWORD *)v123 + 8);
          v141 = *((_QWORD *)v123 + 9);
          if (v142 < v141)
          {
            *(_QWORD *)v142 = v138;
            DWORD1(v99) = 0;
            *(_OWORD *)(v142 + 8) = xmmword_2245C4640;
            v108 = (char *)(v142 + 24);
          }
          else
          {
            v143 = *((_QWORD *)v123 + 7);
            v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v142 - v143) >> 3);
            v145 = v144 + 1;
            if (v144 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_22316E078();
            v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141 - v143) >> 3);
            if (2 * v146 > v145)
              v145 = 2 * v146;
            if (v146 >= 0x555555555555555)
              v147 = 0xAAAAAAAAAAAAAAALL;
            else
              v147 = v145;
            if (v147)
            {
              if (v147 > 0xAAAAAAAAAAAAAAALL)
                sub_223174E94();
              v148 = (char *)operator new(24 * v147);
            }
            else
            {
              v148 = 0;
            }
            v149 = &v148[24 * v144];
            v150 = &v148[24 * v147];
            *(_QWORD *)v149 = v139;
            DWORD1(v99) = 0;
            *(_OWORD *)(v149 + 8) = xmmword_2245C4640;
            v108 = v149 + 24;
            v151 = (void **)*((_QWORD *)v123 + 7);
            v152 = (void **)*((_QWORD *)v123 + 8);
            if (v152 == v151)
            {
              *((_QWORD *)v123 + 7) = v149;
              *((_QWORD *)v123 + 8) = v108;
              *((_QWORD *)v123 + 9) = v150;
            }
            else
            {
              do
              {
                v99 = *(_OWORD *)(v152 - 3);
                *((_QWORD *)v149 - 1) = *(v152 - 1);
                *(_OWORD *)(v149 - 24) = v99;
                v149 -= 24;
                *(v152 - 2) = 0;
                *(v152 - 1) = 0;
                *(v152 - 3) = 0;
                v152 -= 3;
              }
              while (v152 != v151);
              v152 = (void **)*((_QWORD *)v123 + 7);
              v153 = (void **)*((_QWORD *)v123 + 8);
              *((_QWORD *)v123 + 7) = v149;
              *((_QWORD *)v123 + 8) = v108;
              *((_QWORD *)v123 + 9) = v150;
              while (v153 != v152)
              {
                if (*((char *)v153 - 1) < 0)
                  operator delete(*(v153 - 3));
                v153 -= 3;
              }
            }
            if (v152)
              operator delete(v152);
          }
          *((_QWORD *)v123 + 8) = v108;
          v104 = *(unsigned __int8 **)v104;
          if (!v104)
            goto LABEL_165;
        }
        if (v264[23] >= 0)
          v112 = v264;
        else
          v112 = *(_BYTE **)v264;
        if (v264[23] >= 0)
          v113 = v264[23];
        else
          v113 = *(_QWORD *)&v264[8];
        while (1)
        {
          v110 = (char **)v109;
          v116 = (char *)*((_QWORD *)v109 + 4);
          v114 = v109 + 32;
          v115 = v116;
          v117 = v114[23];
          if (v117 >= 0)
            v118 = v114;
          else
            v118 = v115;
          if (v117 >= 0)
            v119 = v114[23];
          else
            v119 = *((_QWORD *)v114 + 1);
          if (v119 >= v113)
            v120 = v113;
          else
            v120 = v119;
          v121 = memcmp(v112, v118, v120);
          if (v121)
          {
            if (v121 < 0)
              goto LABEL_176;
          }
          else if (v113 < v119)
          {
LABEL_176:
            v109 = *v110;
            v111 = v110;
            if (!*v110)
              goto LABEL_196;
            continue;
          }
          v122 = memcmp(v118, v112, v120);
          if (v122)
          {
            if ((v122 & 0x80000000) == 0)
              goto LABEL_218;
          }
          else if (v119 >= v113)
          {
LABEL_218:
            v123 = (char *)v110;
            goto LABEL_225;
          }
          v109 = v110[1];
          if (!v109)
          {
            v111 = v110 + 1;
            goto LABEL_196;
          }
        }
      }
LABEL_165:
      v105 = v263;
      v106 = (_DWORD *)*((_QWORD *)v263 + 35);
      v250 = (_DWORD *)*((_QWORD *)v263 + 36);
      if (v106 != v250)
      {
        v107 = (float32x2_t *)(v263 + 388);
        while (1)
        {
          LODWORD(v99) = *v106;
          v254 = (float32x2_t)v99;
          LODWORD(v99) = v106[1];
          v256 = (float32x2_t)v99;
          LODWORD(v99) = *((_DWORD *)v105 + 94);
          v258 = (float32x2_t)v99;
          v251 = *v107;
          v4.i32[0] = *((_DWORD *)v263 + 99);
          v155 = *(float32x2_t *)(v263 + 400);
          v3.i32[0] = *((_DWORD *)v263 + 102);
          v252 = *(float32x2_t *)(v263 + 412);
          v2.i32[0] = *((_DWORD *)v263 + 105);
          v156 = &v271;
          v157 = &v271;
          v158 = v271;
          if (v271)
          {
            if (v264[23] >= 0)
              v159 = v264;
            else
              v159 = *(_BYTE **)v264;
            if (v264[23] >= 0)
              v160 = v264[23];
            else
              v160 = *(_QWORD *)&v264[8];
            while (1)
            {
              v156 = (char **)v158;
              v163 = (char *)*((_QWORD *)v158 + 4);
              v161 = v158 + 32;
              v162 = v163;
              v164 = v161[23];
              if (v164 >= 0)
                v165 = v161;
              else
                v165 = v162;
              if (v164 >= 0)
                v166 = v161[23];
              else
                v166 = *((_QWORD *)v161 + 1);
              if (v166 >= v160)
                v167 = v160;
              else
                v167 = v166;
              v168 = memcmp(v159, v165, v167);
              if (v168)
              {
                if (v168 < 0)
                  goto LABEL_260;
LABEL_274:
                v169 = memcmp(v165, v159, v167);
                if (v169)
                {
                  if ((v169 & 0x80000000) == 0)
                    goto LABEL_302;
                }
                else if (v166 >= v160)
                {
LABEL_302:
                  v170 = (char *)v156;
                  goto LABEL_309;
                }
                v158 = v156[1];
                if (!v158)
                {
                  v157 = v156 + 1;
                  break;
                }
              }
              else
              {
                if (v160 >= v166)
                  goto LABEL_274;
LABEL_260:
                v158 = *v156;
                v157 = v156;
                if (!*v156)
                  break;
              }
            }
          }
          v170 = (char *)operator new(0x50uLL);
          v171 = v170 + 32;
          if ((v264[23] & 0x80000000) != 0)
          {
            sub_223197FA4(v171, *(void **)v264, *(unint64_t *)&v264[8]);
          }
          else
          {
            *(_OWORD *)v171 = *(_OWORD *)v264;
            *((_QWORD *)v170 + 6) = *(_QWORD *)&v264[16];
          }
          *((_QWORD *)v170 + 7) = 0;
          *((_QWORD *)v170 + 8) = 0;
          *((_QWORD *)v170 + 9) = 0;
          *(_QWORD *)v170 = 0;
          *((_QWORD *)v170 + 1) = 0;
          *((_QWORD *)v170 + 2) = v156;
          *v157 = v170;
          v172 = v170;
          if (*v270)
          {
            v270 = (const void ***)*v270;
            v172 = *v157;
          }
          v173 = v271;
          v10 = v172 == v271;
          v172[24] = v172 == v271;
          if (!v10)
          {
            do
            {
              v174 = *((_QWORD *)v172 + 2);
              if (*(_BYTE *)(v174 + 24))
                break;
              v175 = *(char **)(v174 + 16);
              v176 = *(_QWORD *)v175;
              if (*(_QWORD *)v175 == v174)
              {
                v179 = *((_QWORD *)v175 + 1);
                if (!v179 || (v180 = *(unsigned __int8 *)(v179 + 24), v177 = (_BYTE *)(v179 + 24), v180))
                {
                  if (*(char **)v174 == v172)
                  {
                    *(_BYTE *)(v174 + 24) = 1;
                    v175[24] = 0;
                    v183 = *(_QWORD *)(v174 + 8);
                    *(_QWORD *)v175 = v183;
                    if (v183)
                      goto LABEL_300;
                  }
                  else
                  {
                    v181 = *(uint64_t **)(v174 + 8);
                    v182 = *v181;
                    *(_QWORD *)(v174 + 8) = *v181;
                    if (v182)
                    {
                      *(_QWORD *)(v182 + 16) = v174;
                      v175 = *(char **)(v174 + 16);
                    }
                    v181[2] = (uint64_t)v175;
                    *(_QWORD *)(*(_QWORD *)(v174 + 16) + 8 * (**(_QWORD **)(v174 + 16) != v174)) = v181;
                    *v181 = v174;
                    *(_QWORD *)(v174 + 16) = v181;
                    v175 = (char *)v181[2];
                    v174 = *(_QWORD *)v175;
                    *((_BYTE *)v181 + 24) = 1;
                    v175[24] = 0;
                    v183 = *(_QWORD *)(v174 + 8);
                    *(_QWORD *)v175 = v183;
                    if (v183)
LABEL_300:
                      *(_QWORD *)(v183 + 16) = v175;
                  }
                  *(_QWORD *)(v174 + 16) = *((_QWORD *)v175 + 2);
                  *(_QWORD *)(*((_QWORD *)v175 + 2) + 8 * (**((_QWORD **)v175 + 2) != (_QWORD)v175)) = v174;
                  *(_QWORD *)(v174 + 8) = v175;
LABEL_307:
                  *((_QWORD *)v175 + 2) = v174;
                  break;
                }
              }
              else if (!v176 || (v178 = *(unsigned __int8 *)(v176 + 24), v177 = (_BYTE *)(v176 + 24), v178))
              {
                if (*(char **)v174 == v172)
                {
                  v245 = *((_QWORD *)v172 + 1);
                  *(_QWORD *)v174 = v245;
                  if (v245)
                  {
                    *(_QWORD *)(v245 + 16) = v174;
                    v175 = *(char **)(v174 + 16);
                  }
                  *((_QWORD *)v172 + 2) = v175;
                  *(_QWORD *)(*(_QWORD *)(v174 + 16) + 8 * (**(_QWORD **)(v174 + 16) != v174)) = v172;
                  *((_QWORD *)v172 + 1) = v174;
                  *(_QWORD *)(v174 + 16) = v172;
                  v175 = (char *)*((_QWORD *)v172 + 2);
                  v172[24] = 1;
                  v175[24] = 0;
                  v174 = *((_QWORD *)v175 + 1);
                  v184 = *(char **)v174;
                  *((_QWORD *)v175 + 1) = *(_QWORD *)v174;
                  if (v184)
LABEL_305:
                    *((_QWORD *)v184 + 2) = v175;
                }
                else
                {
                  *(_BYTE *)(v174 + 24) = 1;
                  v175[24] = 0;
                  v174 = *((_QWORD *)v175 + 1);
                  v184 = *(char **)v174;
                  *((_QWORD *)v175 + 1) = *(_QWORD *)v174;
                  if (v184)
                    goto LABEL_305;
                }
                *(_QWORD *)(v174 + 16) = *((_QWORD *)v175 + 2);
                *(_QWORD *)(*((_QWORD *)v175 + 2) + 8 * (**((_QWORD **)v175 + 2) != (_QWORD)v175)) = v174;
                *(_QWORD *)v174 = v175;
                goto LABEL_307;
              }
              *(_BYTE *)(v174 + 24) = 1;
              v172 = v175;
              v175[24] = v175 == v173;
              *v177 = 1;
            }
            while (v175 != v173);
          }
          ++v272;
LABEL_309:
          *(float32x2_t *)&v186 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v251, v254.f32[0]), v155, v256.f32[0]), v252, v258.f32[0]);
          v185 = vmla_f32(vmla_f32(vmul_f32(v4, v254), v256, v3), v258, v2);
          *((float32x2_t *)&v186 + 1) = v185;
          v188 = (_DWORD *)*((_QWORD *)v170 + 8);
          v187 = *((_QWORD *)v170 + 9);
          if ((unint64_t)v188 >= v187)
          {
            v190 = (_DWORD *)*((_QWORD *)v170 + 7);
            v191 = 0xAAAAAAAAAAAAAAABLL * (v188 - v190) + 1;
            if (v191 > 0x1555555555555555)
              sub_22316E078();
            v192 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - (_QWORD)v190) >> 2);
            if (2 * v192 > v191)
              v191 = 2 * v192;
            v193 = v192 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v191;
            if (v193)
            {
              v259 = v186;
              if (v193 > 0x1555555555555555)
                sub_223174E94();
              v194 = (char *)operator new(12 * v193);
              v186 = v259;
            }
            else
            {
              v194 = 0;
            }
            v195 = &v194[4 * (v188 - v190)];
            *(_QWORD *)v195 = v186;
            *((_DWORD *)v195 + 2) = DWORD2(v186);
            v196 = v195;
            if (v188 != v190)
            {
              do
              {
                v197 = *(_QWORD *)(v188 - 3);
                v188 -= 3;
                v198 = v188[2];
                *(_QWORD *)(v196 - 12) = v197;
                v196 -= 12;
                *((_DWORD *)v196 + 2) = v198;
              }
              while (v188 != v190);
              v188 = (_DWORD *)*((_QWORD *)v170 + 7);
            }
            v189 = v195 + 12;
            *((_QWORD *)v170 + 7) = v196;
            *((_QWORD *)v170 + 8) = v195 + 12;
            *((_QWORD *)v170 + 9) = &v194[12 * v193];
            if (v188)
              operator delete(v188);
          }
          else
          {
            v188[2] = v185.i32[0];
            *(_QWORD *)v188 = v186;
            v189 = v188 + 3;
          }
          *((_QWORD *)v170 + 8) = v189;
          v185.i32[0] = *v106;
          v257 = v185;
          v185.i32[0] = v106[1];
          v260 = v185;
          v199 = *((float *)v263 + 94);
          v200 = *((float *)v263 + 95);
          v253 = *v107;
          v4.i32[0] = *((_DWORD *)v263 + 99);
          v201 = *(float32x2_t *)(v263 + 400);
          v3.i32[0] = *((_DWORD *)v263 + 102);
          v255 = *(float32x2_t *)(v263 + 412);
          v2.i32[0] = *((_DWORD *)v263 + 105);
          v202 = &v274;
          v203 = &v274;
          v204 = v274;
          if (v274)
            break;
LABEL_353:
          v216 = (char *)operator new(0x50uLL);
          v217 = v216 + 32;
          if ((v264[23] & 0x80000000) != 0)
          {
            sub_223197FA4(v217, *(void **)v264, *(unint64_t *)&v264[8]);
          }
          else
          {
            DWORD1(v99) = *(_DWORD *)&v264[4];
            *(_OWORD *)v217 = *(_OWORD *)v264;
            *((_QWORD *)v216 + 6) = *(_QWORD *)&v264[16];
          }
          *((_QWORD *)v216 + 7) = 0;
          *((_QWORD *)v216 + 8) = 0;
          *((_QWORD *)v216 + 9) = 0;
          *(_QWORD *)v216 = 0;
          *((_QWORD *)v216 + 1) = 0;
          *((_QWORD *)v216 + 2) = v202;
          *v203 = v216;
          v218 = v216;
          if (*v273)
          {
            v273 = (const void ***)*v273;
            v218 = *v203;
          }
          v219 = v274;
          v10 = v218 == v274;
          v218[24] = v218 == v274;
          if (!v10)
          {
            do
            {
              v220 = *((_QWORD *)v218 + 2);
              if (*(_BYTE *)(v220 + 24))
                break;
              v221 = *(char **)(v220 + 16);
              v222 = *(_QWORD *)v221;
              if (*(_QWORD *)v221 == v220)
              {
                v225 = *((_QWORD *)v221 + 1);
                if (!v225 || (v226 = *(unsigned __int8 *)(v225 + 24), v223 = (_BYTE *)(v225 + 24), v226))
                {
                  if (*(char **)v220 == v218)
                  {
                    *(_BYTE *)(v220 + 24) = 1;
                    v221[24] = 0;
                    v229 = *(_QWORD *)(v220 + 8);
                    *(_QWORD *)v221 = v229;
                    if (v229)
                      goto LABEL_373;
                  }
                  else
                  {
                    v227 = *(uint64_t **)(v220 + 8);
                    v228 = *v227;
                    *(_QWORD *)(v220 + 8) = *v227;
                    if (v228)
                    {
                      *(_QWORD *)(v228 + 16) = v220;
                      v221 = *(char **)(v220 + 16);
                    }
                    v227[2] = (uint64_t)v221;
                    *(_QWORD *)(*(_QWORD *)(v220 + 16) + 8 * (**(_QWORD **)(v220 + 16) != v220)) = v227;
                    *v227 = v220;
                    *(_QWORD *)(v220 + 16) = v227;
                    v221 = (char *)v227[2];
                    v220 = *(_QWORD *)v221;
                    *((_BYTE *)v227 + 24) = 1;
                    v221[24] = 0;
                    v229 = *(_QWORD *)(v220 + 8);
                    *(_QWORD *)v221 = v229;
                    if (v229)
LABEL_373:
                      *(_QWORD *)(v229 + 16) = v221;
                  }
                  *(_QWORD *)(v220 + 16) = *((_QWORD *)v221 + 2);
                  *(_QWORD *)(*((_QWORD *)v221 + 2) + 8 * (**((_QWORD **)v221 + 2) != (_QWORD)v221)) = v220;
                  *(_QWORD *)(v220 + 8) = v221;
LABEL_380:
                  *((_QWORD *)v221 + 2) = v220;
                  break;
                }
              }
              else if (!v222 || (v224 = *(unsigned __int8 *)(v222 + 24), v223 = (_BYTE *)(v222 + 24), v224))
              {
                if (*(char **)v220 == v218)
                {
                  v246 = *((_QWORD *)v218 + 1);
                  *(_QWORD *)v220 = v246;
                  if (v246)
                  {
                    *(_QWORD *)(v246 + 16) = v220;
                    v221 = *(char **)(v220 + 16);
                  }
                  *((_QWORD *)v218 + 2) = v221;
                  *(_QWORD *)(*(_QWORD *)(v220 + 16) + 8 * (**(_QWORD **)(v220 + 16) != v220)) = v218;
                  *((_QWORD *)v218 + 1) = v220;
                  *(_QWORD *)(v220 + 16) = v218;
                  v221 = (char *)*((_QWORD *)v218 + 2);
                  v218[24] = 1;
                  v221[24] = 0;
                  v220 = *((_QWORD *)v221 + 1);
                  v230 = *(char **)v220;
                  *((_QWORD *)v221 + 1) = *(_QWORD *)v220;
                  if (v230)
LABEL_378:
                    *((_QWORD *)v230 + 2) = v221;
                }
                else
                {
                  *(_BYTE *)(v220 + 24) = 1;
                  v221[24] = 0;
                  v220 = *((_QWORD *)v221 + 1);
                  v230 = *(char **)v220;
                  *((_QWORD *)v221 + 1) = *(_QWORD *)v220;
                  if (v230)
                    goto LABEL_378;
                }
                *(_QWORD *)(v220 + 16) = *((_QWORD *)v221 + 2);
                *(_QWORD *)(*((_QWORD *)v221 + 2) + 8 * (**((_QWORD **)v221 + 2) != (_QWORD)v221)) = v220;
                *(_QWORD *)v220 = v221;
                goto LABEL_380;
              }
              *(_BYTE *)(v220 + 24) = 1;
              v218 = v221;
              v221[24] = v221 == v219;
              *v223 = 1;
            }
            while (v221 != v219);
          }
          ++v275;
LABEL_382:
          *(float *)&v99 = v199 + v200;
          *(float32x2_t *)&v232 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v253, v257.f32[0]), v201, v260.f32[0]), v255, v199 + v200);
          v231 = vmla_f32(vmla_f32(vmul_f32(v4, v257), v260, v3), *(float32x2_t *)&v99, v2);
          *((float32x2_t *)&v232 + 1) = v231;
          v234 = (char *)*((_QWORD *)v216 + 8);
          v233 = *((_QWORD *)v216 + 9);
          if ((unint64_t)v234 < v233)
          {
            *((_DWORD *)v234 + 2) = v231.i32[0];
            *(_QWORD *)v234 = v232;
            *((_QWORD *)v216 + 8) = v234 + 12;
            v106 += 2;
            v105 = v263;
            if (v106 == v250)
              goto LABEL_412;
          }
          else
          {
            v235 = (_BYTE *)*((_QWORD *)v216 + 7);
            v236 = 0xAAAAAAAAAAAAAAABLL * ((v234 - v235) >> 2) + 1;
            if (v236 > 0x1555555555555555)
              sub_22316E078();
            v237 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v233 - (_QWORD)v235) >> 2);
            if (2 * v237 > v236)
              v236 = 2 * v237;
            if (v237 >= 0xAAAAAAAAAAAAAAALL)
              v238 = 0x1555555555555555;
            else
              v238 = v236;
            if (v238)
            {
              v261 = v232;
              if (v238 > 0x1555555555555555)
                sub_223174E94();
              v239 = (char *)operator new(12 * v238);
              v232 = v261;
            }
            else
            {
              v239 = 0;
            }
            v240 = &v239[4 * ((v234 - v235) >> 2)];
            *(_QWORD *)v240 = v232;
            *((_DWORD *)v240 + 2) = DWORD2(v232);
            v241 = v240;
            if (v234 != v235)
            {
              do
              {
                v242 = *(_QWORD *)(v234 - 12);
                v234 -= 12;
                v243 = *((_DWORD *)v234 + 2);
                *(_QWORD *)(v241 - 12) = v242;
                v241 -= 12;
                *((_DWORD *)v241 + 2) = v243;
              }
              while (v234 != v235);
              v234 = (char *)*((_QWORD *)v216 + 7);
            }
            v244 = v240 + 12;
            *((_QWORD *)v216 + 7) = v241;
            *((_QWORD *)v216 + 8) = v240 + 12;
            *((_QWORD *)v216 + 9) = &v239[12 * v238];
            if (v234)
              operator delete(v234);
            *((_QWORD *)v216 + 8) = v244;
            v106 += 2;
            v105 = v263;
            if (v106 == v250)
              goto LABEL_412;
          }
        }
        if (v264[23] >= 0)
          v205 = v264;
        else
          v205 = *(_BYTE **)v264;
        if (v264[23] >= 0)
          v206 = v264[23];
        else
          v206 = *(_QWORD *)&v264[8];
        while (1)
        {
          v202 = (char **)v204;
          v209 = (char *)*((_QWORD *)v204 + 4);
          v207 = v204 + 32;
          v208 = v209;
          v210 = v207[23];
          if (v210 >= 0)
            v211 = v207;
          else
            v211 = v208;
          if (v210 >= 0)
            v212 = v207[23];
          else
            v212 = *((_QWORD *)v207 + 1);
          if (v212 >= v206)
            v213 = v206;
          else
            v213 = v212;
          v214 = memcmp(v205, v211, v213);
          if (v214)
          {
            if (v214 < 0)
              goto LABEL_333;
          }
          else if (v206 < v212)
          {
LABEL_333:
            v204 = *v202;
            v203 = v202;
            if (!*v202)
              goto LABEL_353;
            continue;
          }
          v215 = memcmp(v211, v205, v213);
          if (v215)
          {
            if ((v215 & 0x80000000) == 0)
              goto LABEL_375;
          }
          else if (v212 >= v206)
          {
LABEL_375:
            v216 = (char *)v202;
            goto LABEL_382;
          }
          v204 = v202[1];
          if (!v204)
          {
            v203 = v202 + 1;
            goto LABEL_353;
          }
        }
      }
LABEL_412:
      sub_223B6A9C0((uint64_t)(v105 + 32), 1, (uint64_t)&v287);
      if ((_QWORD)v287 != *((_QWORD *)&v287 + 1))
        sub_22414E9E0((uint64_t)&object, (uint64_t)&v287);
      sub_22316F8F4((uint64_t *)&v287);
      if ((v264[23] & 0x80000000) != 0)
        operator delete(*(void **)v264);
      v67 = *(unsigned __int8 **)v263;
    }
    while (*(_QWORD *)v263);
  }
  v247 = sub_2238DCDC8((uint64_t)v285, (uint64_t *)&object, (const void ***)&v282, (const void ***)&v279, (const void ***)&v276, (const void ***)&v273, (const void ***)&v270, *(_QWORD *)(v249 + 1528));
  sub_22316F8F4((uint64_t *)&object);
  sub_2238961E0(v271);
  sub_2238961E0(v274);
  sub_223454BFC((uint64_t)&v276, v277);
  sub_2238961E0((char *)v280);
  sub_22375C06C((char *)v283);
  if (v286 < 0)
    operator delete(v285[0]);
  return v247;
}

void sub_223883A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a41)
  {
    if (a40 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_223883A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_22319A054((uint64_t *)&STACK[0x2C8]);
  sub_22319A054((uint64_t *)&STACK[0x2B0]);
  sub_223199DE8((uint64_t)&a35);
  sub_223182DAC((uint64_t)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_223883A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_223199DE8((uint64_t)&a35);
  sub_223182DAC((uint64_t)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_223883AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_223883AD8(_Unwind_Exception *a1)
{
  sub_223182DAC((uint64_t)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_223883AEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_223883C4C(uint64_t a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  std::string::size_type v7;
  const char *v8;
  size_t v9;
  unsigned __int8 v10;
  const void *v11;
  size_t v12;
  unsigned __int8 v13;
  const void *v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  const char *v64;
  size_t v65;
  unsigned __int8 v66;
  const char *v67;
  size_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  size_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  __int128 v88;
  std::string::size_type v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  __int128 v129;
  std::string::size_type v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  unint64_t *v144;
  unsigned __int8 v145;
  size_t v146;
  const char *v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  size_t v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::string::size_type v165;
  uint64_t v166;
  __int128 v167;
  std::string::size_type v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void *v181;
  unint64_t *v182;
  uint64_t v184;
  unsigned __int8 v185;
  const char *v186;
  size_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  double v195;
  size_t v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  __int128 v209;
  std::string::size_type v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::string::size_type v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  int v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  void *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  std::string *v238;
  uint64_t v239;
  const char *v240;
  size_t v241;
  unsigned __int8 v242;
  const char *v243;
  size_t v244;
  std::string::size_type *p_size;
  uint64_t v246;
  uint64_t v247;
  void **v248;
  uint64_t v249;
  uint64_t v250;
  NSObject *v251;
  size_t v252;
  void *v253;
  _QWORD *v254;
  size_t v255;
  size_t v256;
  _QWORD *p_dst;
  void *v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char v263;
  _QWORD *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  void *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::string::size_type v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  std::string::size_type v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  _QWORD *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::string *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  _QWORD *exception;
  const char *v310;
  int v311;
  const char *v312;
  _BYTE *v313;
  int v314;
  std::string::size_type v315;
  const char *v316;
  const char *v317;
  char *v318;
  std::string v319;
  uint64_t v320[3];
  int v321;
  const char *v322;
  int v323;
  const char *v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  uint64_t v327;
  std::string v328;
  std::string v329;
  void *__p;
  char *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  std::string v338;
  char *v339;
  std::__shared_weak_count *v340;
  _QWORD *__dst;
  __int128 v342;
  _BYTE oslog[24];
  __int128 v344;
  void *v345;
  void *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  void *v349;
  char v350;
  char v351;
  char v352;
  char v353;
  _BYTE object[40];
  void *v355;
  void *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  void *v359;
  char v360;
  char v361;
  char v362;
  char v363;
  std::string v364;
  __int128 v365;
  void *v366[2];
  unint64_t v367;
  char v368;
  _QWORD v369[5];

  v369[2] = *MEMORY[0x24BDAC8D0];
  v333 = a2;
  v334 = 0;
  v335 = 0;
  v336 = 0;
  v337 = 728307696;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 88))
  {
    v10 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_22384BB48(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v11 = *(const void **)(*(_QWORD *)object + 16);
      v12 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v11 = (const void *)(*(_QWORD *)object + 16);
      v12 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v11, v12, "Recon pers not enabled", 0x16uLL);
    sub_22384BA54(&v338);
    if (**(int **)(v338.__r_.__value_.__r.__words[0] + 56) > 5)
      goto LABEL_343;
    v24 = *(unsigned __int8 *)(v338.__r_.__value_.__r.__words[0] + 72);
    v25 = sub_22322F254((uint64_t)v338.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
    v26 = v25;
    if (!v24 && !v25)
      goto LABEL_343;
    *(_QWORD *)oslog = &v338;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    LODWORD(v344) = 5;
    *((_QWORD *)&v344 + 1) = "unknown file";
    LODWORD(v345) = 1772;
    v347 = 0;
    v348 = 0;
    v346 = "unknown function";
    v27 = **(_QWORD **)oslog;
    v28 = (const char *)(**(_QWORD **)oslog + 16);
    v316 = v28;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v28 = *(const char **)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
      v66 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v66 & 1) != 0)
        goto LABEL_125;
    }
    else
    {
      v29 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v30 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v30 & 1) != 0)
        goto LABEL_125;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_125:
    if (byte_255788F40[23] >= 0)
      v67 = byte_255788F40;
    else
      v67 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v68 = byte_255788F40[23];
    else
      v68 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v67, v28);
    v69 = &object[8];
    if (v68 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v68 >= 0x17)
    {
      v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v68 | 7) != 0x17)
        v70 = v68 | 7;
      v71 = v70 + 1;
      v69 = operator new(v70 + 1);
      *(_QWORD *)&object[16] = v68;
      *(_QWORD *)&object[24] = v71 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v69;
    }
    else
    {
      object[31] = v68;
      if (!v68)
      {
LABEL_139:
        v69[v68] = 0;
        object[32] = 1;
        v72 = &v355;
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v29 >= 0x17)
        {
          v73 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v73 = v29 | 7;
          v74 = v73 + 1;
          v72 = operator new(v73 + 1);
          v357 = v74 | 0x8000000000000000;
          v355 = v72;
          v356 = (void *)v29;
        }
        else
        {
          HIBYTE(v357) = v29;
          if (!v29)
            goto LABEL_147;
        }
        memmove(v72, v28, v29);
LABEL_147:
        *((_BYTE *)v72 + v29) = 0;
        LOBYTE(v358) = 1;
        v75 = *(NSObject **)object;
        if (SHIBYTE(v357) < 0)
          operator delete(v355);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v26 && *(_QWORD *)(v26 + 24))
        {
          v76 = _os_log_pack_size();
          v77 = (std::__shared_weak_count_vtbl *)operator new(v76, (std::align_val_t)8uLL);
          v78 = (std::__shared_weak_count *)operator new();
          v79 = v78;
          v78->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v78->__shared_owners_;
          v78->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v78->__shared_weak_owners_ = 0;
          v78[1].__vftable = v77;
          *(_QWORD *)object = v77;
          *(_QWORD *)&object[8] = v77;
          *(_QWORD *)&object[16] = v78;
          do
            v81 = __ldxr(p_shared_owners);
          while (__stxr(v81 + 1, p_shared_owners));
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          v355 = 0;
          do
            v82 = __ldaxr(p_shared_owners);
          while (__stlxr(v82 - 1, p_shared_owners));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v79);
          }
          v83 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v84 = operator new();
          v85 = *(unsigned __int8 *)(v27 + 39);
          v86 = *(const char **)(v27 + 16);
          v87 = *(_QWORD *)(v27 + 24);
          v88 = *(_OWORD *)&object[24];
          *(_OWORD *)(v84 + 8) = *(_OWORD *)&object[8];
          if ((v85 & 0x80u) != 0)
            v85 = v87;
          else
            v86 = v316;
          *(_QWORD *)v84 = v83;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v84 + 24) = v88;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v84 + 40) = v86;
          *(_QWORD *)(v84 + 48) = v85;
          *(_BYTE *)(v84 + 56) = 16;
          v320[0] = 0;
          v364.__r_.__value_.__r.__words[0] = v84;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), &v364);
          v89 = v364.__r_.__value_.__r.__words[0];
          v364.__r_.__value_.__r.__words[0] = 0;
          if (v89)
          {
            v90 = *(std::__shared_weak_count **)(v89 + 32);
            if (v90)
            {
              v91 = (unint64_t *)&v90->__shared_owners_;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            v93 = *(std::__shared_weak_count **)(v89 + 16);
            if (v93)
            {
              v94 = (unint64_t *)&v93->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            MEMORY[0x227684CE8](v89, 0x10F0C40B62ED6C6);
            v320[0] = 0;
          }
          v96 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v97 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v99 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v100 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
        }
        else
        {
          os_log_type_enabled(v75, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v102 = (void *)_os_log_send_and_compose_impl();
          if (v102)
            free(v102);
        }
        if (v24)
        {
          sub_22322C138((uint64_t)oslog, "Recon pers not enabled");
          sub_223182C08((uint64_t)oslog);
        }
        sub_223182C08((uint64_t)oslog);
        v103 = v348;
        if (!v348)
          goto LABEL_343;
        v104 = (unint64_t *)&v348->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
LABEL_341:
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
        goto LABEL_343;
      }
    }
    memmove(v69, v67, v68);
    goto LABEL_139;
  }
  if (!*(_BYTE *)(a1 + 80))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_22384BB48(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v14 = *(const void **)(*(_QWORD *)object + 16);
      v15 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v14 = (const void *)(*(_QWORD *)object + 16);
      v15 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v14, v15, "Storage not specified", 0x15uLL);
    sub_22384BA54(&v338);
    if (**(int **)(v338.__r_.__value_.__r.__words[0] + 56) > 5)
      goto LABEL_343;
    v31 = *(unsigned __int8 *)(v338.__r_.__value_.__r.__words[0] + 72);
    v32 = sub_22322F254((uint64_t)v338.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
    v33 = v32;
    if (!v31 && !v32)
      goto LABEL_343;
    *(_QWORD *)oslog = &v338;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    LODWORD(v344) = 5;
    *((_QWORD *)&v344 + 1) = "unknown file";
    LODWORD(v345) = 1778;
    v347 = 0;
    v348 = 0;
    v346 = "unknown function";
    v34 = **(_QWORD **)oslog;
    v35 = (const char *)(**(_QWORD **)oslog + 16);
    v317 = v35;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v35 = *(const char **)(v34 + 16);
      v36 = *(_QWORD *)(v34 + 24);
    }
    else
    {
      v36 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
    }
    v107 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v108 = byte_255788F40;
    else
      v108 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v109 = byte_255788F40[23];
    else
      v109 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v108, v35);
    v110 = &object[8];
    if (v109 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v109 >= 0x17)
    {
      v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v109 | 7) != 0x17)
        v111 = v109 | 7;
      v112 = v111 + 1;
      v110 = operator new(v111 + 1);
      *(_QWORD *)&object[16] = v109;
      *(_QWORD *)&object[24] = v112 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v110;
    }
    else
    {
      object[31] = v109;
      if (!v109)
      {
LABEL_214:
        v110[v109] = 0;
        object[32] = 1;
        v113 = &v355;
        if (v36 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v36 >= 0x17)
        {
          v114 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17)
            v114 = v36 | 7;
          v115 = v114 + 1;
          v113 = operator new(v114 + 1);
          v357 = v115 | 0x8000000000000000;
          v355 = v113;
          v356 = (void *)v36;
        }
        else
        {
          HIBYTE(v357) = v36;
          if (!v36)
            goto LABEL_222;
        }
        memmove(v113, v35, v36);
LABEL_222:
        *((_BYTE *)v113 + v36) = 0;
        LOBYTE(v358) = 1;
        v116 = *(NSObject **)object;
        if (SHIBYTE(v357) < 0)
          operator delete(v355);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v33 && *(_QWORD *)(v33 + 24))
        {
          v117 = _os_log_pack_size();
          v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
          v119 = (std::__shared_weak_count *)operator new();
          v120 = v119;
          v119->__shared_owners_ = 0;
          v121 = (unint64_t *)&v119->__shared_owners_;
          v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v119->__shared_weak_owners_ = 0;
          v119[1].__vftable = v118;
          *(_QWORD *)object = v118;
          *(_QWORD *)&object[8] = v118;
          *(_QWORD *)&object[16] = v119;
          do
            v122 = __ldxr(v121);
          while (__stxr(v122 + 1, v121));
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          v355 = 0;
          do
            v123 = __ldaxr(v121);
          while (__stlxr(v123 - 1, v121));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v120);
          }
          v124 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v125 = operator new();
          v126 = *(unsigned __int8 *)(v34 + 39);
          v127 = *(const char **)(v34 + 16);
          v128 = *(_QWORD *)(v34 + 24);
          v129 = *(_OWORD *)&object[24];
          *(_OWORD *)(v125 + 8) = *(_OWORD *)&object[8];
          if ((v126 & 0x80u) != 0)
            v126 = v128;
          else
            v127 = v317;
          *(_QWORD *)v125 = v124;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v125 + 24) = v129;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v125 + 40) = v127;
          *(_QWORD *)(v125 + 48) = v126;
          *(_BYTE *)(v125 + 56) = 16;
          v320[0] = 0;
          v364.__r_.__value_.__r.__words[0] = v125;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v33 + 24) + 40))(*(_QWORD *)(v33 + 24), &v364);
          v130 = v364.__r_.__value_.__r.__words[0];
          v364.__r_.__value_.__r.__words[0] = 0;
          if (v130)
          {
            v131 = *(std::__shared_weak_count **)(v130 + 32);
            if (v131)
            {
              v132 = (unint64_t *)&v131->__shared_owners_;
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            v134 = *(std::__shared_weak_count **)(v130 + 16);
            if (v134)
            {
              v135 = (unint64_t *)&v134->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            MEMORY[0x227684CE8](v130, 0x10F0C40B62ED6C6);
            v320[0] = 0;
          }
          v137 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v138 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v140 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v141 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
        }
        else
        {
          os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v143 = (void *)_os_log_send_and_compose_impl();
          if (v143)
            free(v143);
        }
        if (v31)
        {
          sub_22322C138((uint64_t)oslog, "Storage not specified");
          sub_223182C08((uint64_t)oslog);
        }
        sub_223182C08((uint64_t)oslog);
        v103 = v348;
        if (!v348)
          goto LABEL_343;
        v144 = (unint64_t *)&v348->__shared_owners_;
        do
          v105 = __ldaxr(v144);
        while (__stlxr(v105 - 1, v144));
        goto LABEL_341;
      }
    }
    memmove(v110, v108, v109);
    goto LABEL_214;
  }
  if (a2 == 2)
  {
    sub_22384BB48(&v338);
    if (**(int **)(v338.__r_.__value_.__r.__words[0] + 56) > 3
      || (v4 = *(unsigned __int8 *)(v338.__r_.__value_.__r.__words[0] + 72),
          v5 = sub_22322F254((uint64_t)v338.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0),
          v6 = v5,
          !v4)
      && !v5)
    {
LABEL_343:
      v17 = 0;
      goto LABEL_344;
    }
    *(_QWORD *)oslog = &v338;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    LODWORD(v344) = 3;
    *((_QWORD *)&v344 + 1) = "unknown file";
    LODWORD(v345) = 1791;
    v347 = 0;
    v348 = 0;
    v346 = "unknown function";
    v7 = v338.__r_.__value_.__r.__words[0];
    v8 = (const char *)(v338.__r_.__value_.__r.__words[0] + 16);
    v315 = v338.__r_.__value_.__r.__words[0] + 16;
    if (*(char *)(v338.__r_.__value_.__r.__words[0] + 39) < 0)
    {
      v8 = *(const char **)(v338.__r_.__value_.__r.__words[0] + 16);
      v9 = *(_QWORD *)(v338.__r_.__value_.__r.__words[0] + 24);
    }
    else
    {
      v9 = *(unsigned __int8 *)(v338.__r_.__value_.__r.__words[0] + 39);
    }
    v145 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v146 = byte_255788F40[23];
    else
      v146 = *(_QWORD *)&byte_255788F40[8];
    if (byte_255788F40[23] >= 0)
      v147 = byte_255788F40;
    else
      v147 = *(const char **)byte_255788F40;
    *(_QWORD *)object = os_log_create(v147, v8);
    v148 = &object[8];
    if (v146 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v146 >= 0x17)
    {
      v149 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v146 | 7) != 0x17)
        v149 = v146 | 7;
      v150 = v149 + 1;
      v148 = operator new(v149 + 1);
      *(_QWORD *)&object[16] = v146;
      *(_QWORD *)&object[24] = v150 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v148;
    }
    else
    {
      object[31] = v146;
      if (!v146)
      {
LABEL_286:
        v148[v146] = 0;
        object[32] = 1;
        v151 = &v355;
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v9 >= 0x17)
        {
          v152 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v152 = v9 | 7;
          v153 = v152 + 1;
          v151 = operator new(v152 + 1);
          v357 = v153 | 0x8000000000000000;
          v355 = v151;
          v356 = (void *)v9;
        }
        else
        {
          HIBYTE(v357) = v9;
          if (!v9)
            goto LABEL_294;
        }
        memmove(v151, v8, v9);
LABEL_294:
        *((_BYTE *)v151 + v9) = 0;
        LOBYTE(v358) = 1;
        v154 = *(NSObject **)object;
        if (SHIBYTE(v357) < 0)
          operator delete(v355);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v6 && *(_QWORD *)(v6 + 24))
        {
          v155 = _os_log_pack_size();
          v156 = (std::__shared_weak_count_vtbl *)operator new(v155, (std::align_val_t)8uLL);
          v157 = (std::__shared_weak_count *)operator new();
          v158 = v157;
          v157->__shared_owners_ = 0;
          v159 = (unint64_t *)&v157->__shared_owners_;
          v157->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v157->__shared_weak_owners_ = 0;
          v157[1].__vftable = v156;
          *(_QWORD *)object = v156;
          *(_QWORD *)&object[8] = v156;
          *(_QWORD *)&object[16] = v157;
          do
            v160 = __ldxr(v159);
          while (__stxr(v160 + 1, v159));
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          v355 = 0;
          do
            v161 = __ldaxr(v159);
          while (__stlxr(v161 - 1, v159));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v158);
          }
          v162 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v163 = operator new();
          v164 = *(unsigned __int8 *)(v7 + 39);
          v165 = *(_QWORD *)(v7 + 16);
          v166 = *(_QWORD *)(v7 + 24);
          v167 = *(_OWORD *)&object[24];
          *(_OWORD *)(v163 + 8) = *(_OWORD *)&object[8];
          if ((v164 & 0x80u) != 0)
            v164 = v166;
          else
            v165 = v315;
          *(_QWORD *)v163 = v162;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v163 + 24) = v167;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v163 + 40) = v165;
          *(_QWORD *)(v163 + 48) = v164;
          *(_BYTE *)(v163 + 56) = 1;
          v320[0] = 0;
          v364.__r_.__value_.__r.__words[0] = v163;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v364);
          v168 = v364.__r_.__value_.__r.__words[0];
          v364.__r_.__value_.__r.__words[0] = 0;
          if (v168)
          {
            v169 = *(std::__shared_weak_count **)(v168 + 32);
            if (v169)
            {
              v170 = (unint64_t *)&v169->__shared_owners_;
              do
                v171 = __ldaxr(v170);
              while (__stlxr(v171 - 1, v170));
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
            }
            v172 = *(std::__shared_weak_count **)(v168 + 16);
            if (v172)
            {
              v173 = (unint64_t *)&v172->__shared_owners_;
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
              }
            }
            MEMORY[0x227684CE8](v168, 0x10F0C40B62ED6C6);
            v320[0] = 0;
          }
          v175 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v176 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          v178 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v179 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
        }
        else
        {
          os_log_type_enabled(v154, OS_LOG_TYPE_INFO);
          *(_WORD *)object = 0;
          v181 = (void *)_os_log_send_and_compose_impl();
          if (v181)
            free(v181);
        }
        if (v4)
        {
          sub_22322C138((uint64_t)oslog, "Skipping saving snapshot since strategy is not specified");
          sub_223182C08((uint64_t)oslog);
        }
        sub_223182C08((uint64_t)oslog);
        v103 = v348;
        if (!v348)
          goto LABEL_343;
        v182 = (unint64_t *)&v348->__shared_owners_;
        do
          v105 = __ldaxr(v182);
        while (__stlxr(v105 - 1, v182));
        goto LABEL_341;
      }
    }
    memmove(v148, v147, v146);
    goto LABEL_286;
  }
  v331 = 0;
  v332 = 0;
  __p = 0;
  v16 = *(_QWORD **)(*(_QWORD *)(a1 + 1224) + 16);
  if (!v16)
    goto LABEL_18;
  while (*((_BYTE *)v16 + 144) != 1)
  {
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_18;
  }
  v37 = *(unsigned __int8 **)(a1 + 1784);
  if (!v37)
  {
    v106 = (_QWORD *)*v16;
    if (*v16)
    {
      do
        v106 = (_QWORD *)*v106;
      while (v106);
    }
    goto LABEL_18;
  }
  v38 = (unsigned __int8 *)(a1 + 1784);
LABEL_44:
  v39 = *((unsigned __int8 *)v16 + 32);
  v40 = (unsigned __int8 *)(a1 + 1784);
  do
  {
    v41 = v37[25];
    v42 = *((unsigned __int8 *)v16 + 32);
    if (v41 != v39)
      goto LABEL_62;
    v41 = v37[26];
    v42 = *((unsigned __int8 *)v16 + 33);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[27];
    v42 = *((unsigned __int8 *)v16 + 34);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[28];
    v42 = *((unsigned __int8 *)v16 + 35);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[29];
    v42 = *((unsigned __int8 *)v16 + 36);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[30];
    v42 = *((unsigned __int8 *)v16 + 37);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[31];
    v42 = *((unsigned __int8 *)v16 + 38);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[32];
    v42 = *((unsigned __int8 *)v16 + 39);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[33];
    v42 = *((unsigned __int8 *)v16 + 40);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[34];
    v42 = *((unsigned __int8 *)v16 + 41);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[35];
    v42 = *((unsigned __int8 *)v16 + 42);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[36];
    v42 = *((unsigned __int8 *)v16 + 43);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[37];
    v42 = *((unsigned __int8 *)v16 + 44);
    if (v41 != v42)
      goto LABEL_62;
    v41 = v37[38];
    v42 = *((unsigned __int8 *)v16 + 45);
    if (v41 == v42
      && (v41 = v37[39], v42 = *((unsigned __int8 *)v16 + 46), v41 == v42)
      && (v41 = v37[40], v42 = *((unsigned __int8 *)v16 + 47), v41 == v42))
    {
      v40 = v37;
    }
    else
    {
LABEL_62:
      if (v41 < v42)
        v37 += 8;
      else
        v40 = v37;
    }
    v37 = *(unsigned __int8 **)v37;
  }
  while (v37);
  if (v40 != v38)
  {
    v43 = v40[25];
    if (v39 == v43)
    {
      v39 = *((unsigned __int8 *)v16 + 33);
      v43 = v40[26];
      if (v39 == v43)
      {
        v39 = *((unsigned __int8 *)v16 + 34);
        v43 = v40[27];
        if (v39 == v43)
        {
          v39 = *((unsigned __int8 *)v16 + 35);
          v43 = v40[28];
          if (v39 == v43)
          {
            v39 = *((unsigned __int8 *)v16 + 36);
            v43 = v40[29];
            if (v39 == v43)
            {
              v39 = *((unsigned __int8 *)v16 + 37);
              v43 = v40[30];
              if (v39 == v43)
              {
                v39 = *((unsigned __int8 *)v16 + 38);
                v43 = v40[31];
                if (v39 == v43)
                {
                  v39 = *((unsigned __int8 *)v16 + 39);
                  v43 = v40[32];
                  if (v39 == v43)
                  {
                    v39 = *((unsigned __int8 *)v16 + 40);
                    v43 = v40[33];
                    if (v39 == v43)
                    {
                      v39 = *((unsigned __int8 *)v16 + 41);
                      v43 = v40[34];
                      if (v39 == v43)
                      {
                        v39 = *((unsigned __int8 *)v16 + 42);
                        v43 = v40[35];
                        if (v39 == v43)
                        {
                          v39 = *((unsigned __int8 *)v16 + 43);
                          v43 = v40[36];
                          if (v39 == v43)
                          {
                            v39 = *((unsigned __int8 *)v16 + 44);
                            v43 = v40[37];
                            if (v39 == v43)
                            {
                              v39 = *((unsigned __int8 *)v16 + 45);
                              v43 = v40[38];
                              if (v39 == v43)
                              {
                                v39 = *((unsigned __int8 *)v16 + 46);
                                v43 = v40[39];
                                if (v39 == v43)
                                {
                                  v39 = *((unsigned __int8 *)v16 + 47);
                                  v43 = v40[40];
                                  if (v39 == v43)
                                    goto LABEL_84;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v39 >= v43)
    {
LABEL_84:
      v44 = v16[16];
      if (a2 == 1)
      {
        v45 = *(_QWORD *)(a1 + 1600);
        v46 = *(double *)(a1 + 736) * 1000000000.0;
        if (v46 >= (double)(v45 - v16[14]) || v16[15] <= v44 || v46 >= (double)(v45 - v44))
          goto LABEL_112;
      }
      else if (a2 || v16[15] <= v44)
      {
        goto LABEL_112;
      }
      sub_22319597C(*(_QWORD *)(a1 + 1232), v16 + 4, oslog);
      if (*(_QWORD *)oslog)
      {
        *(_OWORD *)object = *((_OWORD *)v16 + 2);
        *(_QWORD *)&object[16] = *(_QWORD *)oslog;
        *(_QWORD *)&object[24] = *(_QWORD *)&oslog[8];
        if (*(_QWORD *)&oslog[8])
        {
          v49 = (unint64_t *)(*(_QWORD *)&oslog[8] + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = v331;
        if ((unint64_t)v331 >= v332)
        {
          v52 = (char *)sub_22388A684(&__p, (uint64_t)object);
          v53 = *(std::__shared_weak_count **)&object[24];
          v331 = v52;
          if (*(_QWORD *)&object[24])
          {
            v54 = (unint64_t *)(*(_QWORD *)&object[24] + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
        }
        else
        {
          *(_OWORD *)v331 = *(_OWORD *)object;
          *((_OWORD *)v51 + 1) = *(_OWORD *)&object[16];
          v331 = v51 + 32;
        }
      }
      v56 = *(std::__shared_weak_count **)&oslog[8];
      if (*(_QWORD *)&oslog[8])
      {
        v57 = (unint64_t *)(*(_QWORD *)&oslog[8] + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
  }
LABEL_112:
  while (1)
  {
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    if (*((_BYTE *)v16 + 144) == 1)
    {
      v37 = *(unsigned __int8 **)v38;
      if (*(_QWORD *)v38)
        goto LABEL_44;
    }
  }
  if (__p == v331)
  {
LABEL_18:
    kdebug_trace();
    v17 = 1;
    v18 = (char *)__p;
    if (!__p)
      goto LABEL_344;
    goto LABEL_19;
  }
  sub_22384BB48(v320);
  if (**(int **)(v320[0] + 56) > 3)
    goto LABEL_430;
  v59 = *(unsigned __int8 *)(v320[0] + 72);
  v60 = sub_22322F254(v320[0], "OSLogSurrogateAppender", 1, 0);
  v61 = v60;
  if (!v59 && v60 == 0)
    goto LABEL_430;
  v311 = v59;
  *(_QWORD *)object = v320;
  *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
  *(_DWORD *)&object[24] = 3;
  *(_QWORD *)&object[32] = "unknown file";
  LODWORD(v355) = 1832;
  v358 = 0;
  v356 = "unknown function";
  v357 = 0;
  v63 = **(_QWORD **)object;
  v64 = (const char *)(**(_QWORD **)object + 16);
  v310 = v64;
  if (*(char *)(**(_QWORD **)object + 39) < 0)
  {
    v64 = *(const char **)(v63 + 16);
    v65 = *(_QWORD *)(v63 + 24);
  }
  else
  {
    v65 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
  }
  v313 = __p;
  v318 = v331;
  v184 = *(_QWORD *)(a1 + 1600);
  v185 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)oslog);
    sub_223199C58("com.apple.cv3d", (unint64_t)oslog, byte_255788F40);
    if ((_BYTE)v344 && (oslog[23] & 0x80000000) != 0)
      operator delete(*(void **)oslog);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v186 = byte_255788F40;
  else
    v186 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v187 = byte_255788F40[23];
  else
    v187 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)oslog = os_log_create(v186, v64);
  v188 = &oslog[8];
  if (v187 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v187 >= 0x17)
  {
    v189 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v187 | 7) != 0x17)
      v189 = v187 | 7;
    v190 = v189 + 1;
    v188 = operator new(v189 + 1);
    *(_QWORD *)&oslog[16] = v187;
    *(_QWORD *)&v344 = v190 | 0x8000000000000000;
    *(_QWORD *)&oslog[8] = v188;
    goto LABEL_361;
  }
  BYTE7(v344) = v187;
  if (v187)
LABEL_361:
    memmove(v188, v186, v187);
  v188[v187] = 0;
  BYTE8(v344) = 1;
  v191 = &v345;
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v65 >= 0x17)
  {
    v192 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v192 = v65 | 7;
    v193 = v192 + 1;
    v191 = operator new(v192 + 1);
    v346 = (void *)v65;
    v347 = v193 | 0x8000000000000000;
    v345 = v191;
  }
  else
  {
    HIBYTE(v347) = v65;
    if (!v65)
      goto LABEL_370;
  }
  memmove(v191, v64, v65);
LABEL_370:
  *((_BYTE *)v191 + v65) = 0;
  LOBYTE(v348) = 1;
  v194 = *(NSObject **)oslog;
  if (SHIBYTE(v347) < 0)
    operator delete(v345);
  if (BYTE8(v344) && SBYTE7(v344) < 0)
    operator delete(*(void **)&oslog[8]);
  if (*(_QWORD *)oslog)
    os_release(*(void **)oslog);
  v195 = (double)v184 / 1000000000.0;
  if (v61 && *(_QWORD *)(v61 + 24))
  {
    v196 = _os_log_pack_size();
    v197 = (std::__shared_weak_count_vtbl *)operator new(v196, (std::align_val_t)8uLL);
    v198 = (std::__shared_weak_count *)operator new();
    v199 = v198;
    v198->__shared_owners_ = 0;
    v200 = (unint64_t *)&v198->__shared_owners_;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v198->__shared_weak_owners_ = 0;
    v198[1].__vftable = v197;
    *(_QWORD *)oslog = v197;
    *(_QWORD *)&oslog[8] = v197;
    *(_QWORD *)&oslog[16] = v198;
    do
      v201 = __ldxr(v200);
    while (__stxr(v201 + 1, v200));
    v344 = 0uLL;
    v345 = 0;
    do
      v202 = __ldaxr(v200);
    while (__stlxr(v202 - 1, v200));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v199);
    }
    v203 = *(_QWORD *)oslog;
    v204 = _os_log_pack_fill();
    *(_DWORD *)v204 = 134218240;
    *(_QWORD *)(v204 + 4) = (v318 - v313) >> 5;
    *(_WORD *)(v204 + 12) = 2048;
    *(double *)(v204 + 14) = v195;
    v205 = operator new();
    v206 = *(unsigned __int8 *)(v63 + 39);
    v207 = *(const char **)(v63 + 16);
    v208 = *(_QWORD *)(v63 + 24);
    v209 = v344;
    *(_OWORD *)(v205 + 8) = *(_OWORD *)&oslog[8];
    if ((v206 & 0x80u) != 0)
      v206 = v208;
    else
      v207 = v310;
    *(_QWORD *)v205 = v203;
    *(_QWORD *)&oslog[8] = 0;
    *(_QWORD *)&oslog[16] = 0;
    *(_OWORD *)(v205 + 24) = v209;
    v344 = 0uLL;
    *(_QWORD *)(v205 + 40) = v207;
    *(_QWORD *)(v205 + 48) = v206;
    *(_BYTE *)(v205 + 56) = 1;
    v338.__r_.__value_.__r.__words[0] = 0;
    v364.__r_.__value_.__r.__words[0] = v205;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v61 + 24) + 40))(*(_QWORD *)(v61 + 24), &v364);
    v210 = v364.__r_.__value_.__r.__words[0];
    v364.__r_.__value_.__r.__words[0] = 0;
    if (v210)
    {
      v211 = *(std::__shared_weak_count **)(v210 + 32);
      if (v211)
      {
        v212 = (unint64_t *)&v211->__shared_owners_;
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v214 = *(std::__shared_weak_count **)(v210 + 16);
      if (v214)
      {
        v215 = (unint64_t *)&v214->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      MEMORY[0x227684CE8](v210, 0x10F0C40B62ED6C6);
      v217 = v338.__r_.__value_.__r.__words[0];
      v338.__r_.__value_.__r.__words[0] = 0;
      if (v217)
      {
        v218 = *(std::__shared_weak_count **)(v217 + 32);
        if (v218)
        {
          v219 = (unint64_t *)&v218->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
        v221 = *(std::__shared_weak_count **)(v217 + 16);
        if (v221)
        {
          v222 = (unint64_t *)&v221->__shared_owners_;
          do
            v223 = __ldaxr(v222);
          while (__stlxr(v223 - 1, v222));
          if (!v223)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
          }
        }
        MEMORY[0x227684CE8](v217, 0x10F0C40B62ED6C6);
      }
    }
    v224 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
    v225 = v311;
    if (*((_QWORD *)&v344 + 1))
    {
      v226 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        std::__shared_weak_count::__release_weak(v224);
      }
    }
    v228 = *(std::__shared_weak_count **)&oslog[16];
    if (*(_QWORD *)&oslog[16])
    {
      v229 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
  }
  else
  {
    os_log_type_enabled(v194, OS_LOG_TYPE_INFO);
    *(_DWORD *)oslog = 134218240;
    *(_QWORD *)&oslog[4] = (v318 - v313) >> 5;
    *(_WORD *)&oslog[12] = 2048;
    *(double *)&oslog[14] = v195;
    v231 = (void *)_os_log_send_and_compose_impl();
    v225 = v311;
    if (v231)
      free(v231);
  }
  if (v225)
  {
    sub_22322C138((uint64_t)object, "Saving snapshot (%zu kfs) at %.4f", (v331 - (_BYTE *)__p) >> 5, (double)*(uint64_t *)(a1 + 1600) / 1000000000.0);
    sub_223182C08((uint64_t)object);
  }
  sub_223182C08((uint64_t)object);
  v232 = v358;
  if (v358)
  {
    v233 = (unint64_t *)&v358->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
LABEL_430:
  sub_223FF9988(a1 + 56, &v329);
  sub_223FF97F8(a1 + 56, &v328);
  sub_22400475C((uint64_t)&v329, *(_QWORD *)(a1 + 1528), (uint64_t)object);
  sub_22400475C((uint64_t)&v328, *(_QWORD *)(a1 + 1528), (uint64_t)oslog);
  if (v363 && v353)
  {
    sub_22319746C(*(_QWORD *)(a1 + 1232), &__p);
    if (!v353 && v352)
    {
      if (v351)
      {
        if (v350 < 0)
          operator delete(v349);
        if (SHIBYTE(v348) < 0)
          operator delete(v346);
      }
      if ((_BYTE)v345 && SHIBYTE(v344) < 0)
        operator delete(*(void **)&oslog[16]);
    }
    if (!v363 && v362)
    {
      if (v361)
      {
        if (v360 < 0)
          operator delete(v359);
        if (SHIBYTE(v358) < 0)
          operator delete(v356);
      }
      if ((_BYTE)v355 && (object[39] & 0x80000000) != 0)
        operator delete(*(void **)&object[16]);
    }
    if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v328.__r_.__value_.__l.__data_);
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v329.__r_.__value_.__l.__data_);
    goto LABEL_18;
  }
  sub_22384BA54(&v327);
  if (**(int **)(v327 + 56) <= 4)
  {
    v235 = *(unsigned __int8 *)(v327 + 72);
    v236 = sub_22322F254(v327, "OSLogSurrogateAppender", 1, 0);
    v237 = v236;
    if (v235 || v236)
    {
      v320[0] = (uint64_t)&v327;
      v320[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v320[2] = std::chrono::system_clock::now().__d_.__rep_;
      v321 = 4;
      v322 = "unknown file";
      v323 = 1843;
      v325 = 0;
      v326 = 0;
      v324 = "unknown function";
      v314 = v235;
      if (v363)
      {
        if (v353)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = &off_24EC1FCC0;
          __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
        }
        v238 = &v319;
        sub_22456A158((uint64_t)oslog, &v319);
      }
      else
      {
        v238 = &v319;
        sub_22456A158((uint64_t)object, &v319);
      }
      if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v238 = (std::string *)v319.__r_.__value_.__r.__words[0];
      v239 = *(_QWORD *)v320[0];
      v240 = (const char *)(*(_QWORD *)v320[0] + 16);
      v312 = v240;
      if (*(char *)(*(_QWORD *)v320[0] + 39) < 0)
      {
        v240 = *(const char **)(v239 + 16);
        v241 = *(_QWORD *)(v239 + 24);
      }
      else
      {
        v241 = *(unsigned __int8 *)(*(_QWORD *)v320[0] + 39);
      }
      v242 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v242 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v364);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v364, byte_255788F40);
        if ((_BYTE)v365 && SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v364.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v243 = byte_255788F40;
      else
        v243 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v244 = byte_255788F40[23];
      else
        v244 = *(_QWORD *)&byte_255788F40[8];
      v364.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v243, v240);
      p_size = &v364.__r_.__value_.__l.__size_;
      if (v244 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v244 >= 0x17)
      {
        v246 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v244 | 7) != 0x17)
          v246 = v244 | 7;
        v247 = v246 + 1;
        p_size = (std::string::size_type *)operator new(v246 + 1);
        v364.__r_.__value_.__r.__words[2] = v244;
        *(_QWORD *)&v365 = v247 | 0x8000000000000000;
        v364.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      }
      else
      {
        BYTE7(v365) = v244;
        if (!v244)
        {
LABEL_484:
          *((_BYTE *)p_size + v244) = 0;
          BYTE8(v365) = 1;
          v248 = v366;
          if (v241 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v241 >= 0x17)
          {
            v249 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v241 | 7) != 0x17)
              v249 = v241 | 7;
            v250 = v249 + 1;
            v248 = (void **)operator new(v249 + 1);
            v366[1] = (void *)v241;
            v367 = v250 | 0x8000000000000000;
            v366[0] = v248;
          }
          else
          {
            HIBYTE(v367) = v241;
            if (!v241)
            {
LABEL_492:
              *((_BYTE *)v248 + v241) = 0;
              v368 = 1;
              v251 = v364.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v367) < 0)
                operator delete(v366[0]);
              if (BYTE8(v365) && SBYTE7(v365) < 0)
                operator delete((void *)v364.__r_.__value_.__l.__size_);
              if (v364.__r_.__value_.__r.__words[0])
                os_release(v364.__r_.__value_.__l.__data_);
              if (!v237 || !*(_QWORD *)(v237 + 24))
              {
                os_log_type_enabled(v251, OS_LOG_TYPE_ERROR);
                LODWORD(v364.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v364.__r_.__value_.__r.__words + 4) = (std::string::size_type)v238;
                v258 = (void *)_os_log_send_and_compose_impl();
                v259 = v314;
                if (v258)
                  free(v258);
                goto LABEL_570;
              }
              v252 = _os_log_pack_size();
              v253 = operator new(v252, (std::align_val_t)8uLL);
              v254 = (_QWORD *)operator new();
              *v254 = &off_24EC1F7F0;
              v254[1] = 0;
              v254[2] = 0;
              v254[3] = v253;
              v338.__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
              v338.__r_.__value_.__l.__size_ = (std::string::size_type)v253;
              v339 = 0;
              v340 = 0;
              v338.__r_.__value_.__r.__words[2] = (std::string::size_type)v254;
              v255 = strlen((const char *)v238);
              if (v255 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v256 = v255;
              if (v255 >= 0x17)
              {
                v260 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v255 | 7) != 0x17)
                  v260 = v255 | 7;
                v261 = v260 + 1;
                p_dst = operator new(v260 + 1);
                *(_QWORD *)&v342 = v256;
                *((_QWORD *)&v342 + 1) = v261 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v342) = v255;
                p_dst = &__dst;
                if (!v255)
                {
LABEL_511:
                  *((_BYTE *)p_dst + v256) = 0;
                  v262 = __dst;
                  v369[0] = v342;
                  *(_QWORD *)((char *)v369 + 7) = *(_QWORD *)((char *)&v342 + 7);
                  v263 = HIBYTE(v342);
                  v264 = operator new(0x38uLL);
                  v264[1] = 0;
                  v264[2] = 0;
                  v264[3] = off_24EC1FA48;
                  *v264 = &off_24EC1F9F8;
                  v265 = v369[0];
                  v264[4] = v262;
                  v264[5] = v265;
                  *(_QWORD *)((char *)v264 + 47) = *(_QWORD *)((char *)v369 + 7);
                  *((_BYTE *)v264 + 55) = v263;
                  v369[0] = 0;
                  *(_QWORD *)((char *)v369 + 7) = 0;
                  v266 = v340;
                  v339 = (char *)(v264 + 3);
                  v340 = (std::__shared_weak_count *)v264;
                  if (v266)
                  {
                    v267 = (unint64_t *)&v266->__shared_owners_;
                    do
                      v268 = __ldaxr(v267);
                    while (__stlxr(v268 - 1, v267));
                    if (!v268)
                    {
                      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                      std::__shared_weak_count::__release_weak(v266);
                    }
                  }
                  v364 = v338;
                  v269 = v339;
                  if (v338.__r_.__value_.__r.__words[2])
                  {
                    v270 = (unint64_t *)(v338.__r_.__value_.__r.__words[2] + 8);
                    do
                      v271 = __ldxr(v270);
                    while (__stxr(v271 + 1, v270));
                  }
                  v272 = v340;
                  *(_QWORD *)&v365 = v269;
                  *((_QWORD *)&v365 + 1) = v340;
                  if (v340)
                  {
                    v273 = (unint64_t *)&v340->__shared_owners_;
                    do
                      v274 = __ldxr(v273);
                    while (__stxr(v274 + 1, v273));
                    v366[0] = v269;
                    do
                      v275 = __ldaxr(v273);
                    while (__stlxr(v275 - 1, v273));
                    if (!v275)
                    {
                      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                      std::__shared_weak_count::__release_weak(v272);
                    }
                  }
                  else
                  {
                    v366[0] = v269;
                  }
                  v276 = (std::__shared_weak_count *)v338.__r_.__value_.__r.__words[2];
                  if (v338.__r_.__value_.__r.__words[2])
                  {
                    v277 = (unint64_t *)(v338.__r_.__value_.__r.__words[2] + 8);
                    do
                      v278 = __ldaxr(v277);
                    while (__stlxr(v278 - 1, v277));
                    if (!v278)
                    {
                      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                      std::__shared_weak_count::__release_weak(v276);
                    }
                  }
                  v279 = v364.__r_.__value_.__r.__words[0];
                  if (*((char *)v366[0] + 31) >= 0)
                    v280 = (char *)v366[0] + 8;
                  else
                    v280 = (char *)*((_QWORD *)v366[0] + 1);
                  v281 = _os_log_pack_fill();
                  *(_DWORD *)v281 = 136315138;
                  *(_QWORD *)(v281 + 4) = v280;
                  v282 = operator new();
                  v283 = *(unsigned __int8 *)(v239 + 39);
                  v284 = v312;
                  if ((v283 & 0x80u) != 0)
                  {
                    v284 = *(const char **)(v239 + 16);
                    v283 = *(_QWORD *)(v239 + 24);
                  }
                  *(_QWORD *)v282 = v279;
                  *(_OWORD *)(v282 + 8) = *(_OWORD *)&v364.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v364.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v282 + 24) = v365;
                  v365 = 0uLL;
                  *(_QWORD *)(v282 + 40) = v284;
                  *(_QWORD *)(v282 + 48) = v283;
                  *(_BYTE *)(v282 + 56) = 16;
                  __dst = 0;
                  v338.__r_.__value_.__r.__words[0] = v282;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v237 + 24) + 40))(*(_QWORD *)(v237 + 24), &v338);
                  v285 = v338.__r_.__value_.__r.__words[0];
                  v338.__r_.__value_.__r.__words[0] = 0;
                  v259 = v314;
                  if (v285)
                  {
                    v286 = *(std::__shared_weak_count **)(v285 + 32);
                    if (v286)
                    {
                      v287 = (unint64_t *)&v286->__shared_owners_;
                      do
                        v288 = __ldaxr(v287);
                      while (__stlxr(v288 - 1, v287));
                      if (!v288)
                      {
                        ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                        std::__shared_weak_count::__release_weak(v286);
                      }
                    }
                    v289 = *(std::__shared_weak_count **)(v285 + 16);
                    if (v289)
                    {
                      v290 = (unint64_t *)&v289->__shared_owners_;
                      do
                        v291 = __ldaxr(v290);
                      while (__stlxr(v291 - 1, v290));
                      if (!v291)
                      {
                        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                        std::__shared_weak_count::__release_weak(v289);
                      }
                    }
                    MEMORY[0x227684CE8](v285, 0x10F0C40B62ED6C6);
                    v292 = __dst;
                    __dst = 0;
                    if (v292)
                    {
                      v293 = (std::__shared_weak_count *)v292[4];
                      if (v293)
                      {
                        v294 = (unint64_t *)&v293->__shared_owners_;
                        do
                          v295 = __ldaxr(v294);
                        while (__stlxr(v295 - 1, v294));
                        if (!v295)
                        {
                          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                          std::__shared_weak_count::__release_weak(v293);
                        }
                      }
                      v296 = (std::__shared_weak_count *)v292[2];
                      if (v296)
                      {
                        v297 = (unint64_t *)&v296->__shared_owners_;
                        do
                          v298 = __ldaxr(v297);
                        while (__stlxr(v298 - 1, v297));
                        if (!v298)
                        {
                          ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                          std::__shared_weak_count::__release_weak(v296);
                        }
                      }
                      MEMORY[0x227684CE8](v292, 0x10F0C40B62ED6C6);
                    }
                  }
                  v299 = (std::__shared_weak_count *)*((_QWORD *)&v365 + 1);
                  if (*((_QWORD *)&v365 + 1))
                  {
                    v300 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
                    do
                      v301 = __ldaxr(v300);
                    while (__stlxr(v301 - 1, v300));
                    if (!v301)
                    {
                      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                      std::__shared_weak_count::__release_weak(v299);
                    }
                  }
                  v302 = (std::__shared_weak_count *)v364.__r_.__value_.__r.__words[2];
                  if (v364.__r_.__value_.__r.__words[2])
                  {
                    v303 = (unint64_t *)(v364.__r_.__value_.__r.__words[2] + 8);
                    do
                      v304 = __ldaxr(v303);
                    while (__stlxr(v304 - 1, v303));
                    if (!v304)
                    {
                      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                      std::__shared_weak_count::__release_weak(v302);
                    }
                  }
LABEL_570:
                  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v319.__r_.__value_.__l.__data_);
                  if (v259)
                  {
                    if (v363)
                    {
                      sub_22319593C((uint64_t)oslog);
                      sub_22456A158((uint64_t)oslog, &v364);
                    }
                    else
                    {
                      sub_22319593C((uint64_t)object);
                      sub_22456A158((uint64_t)object, &v364);
                    }
                    if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v305 = &v364;
                    else
                      v305 = (std::string *)v364.__r_.__value_.__r.__words[0];
                    sub_22322C138((uint64_t)v320, "Disk access unavailable, skipping saving snapshot %s", (const char *)v305);
                    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v364.__r_.__value_.__l.__data_);
                    sub_223182C08((uint64_t)v320);
                  }
                  sub_223182C08((uint64_t)v320);
                  v306 = v326;
                  if (v326)
                  {
                    v307 = (unint64_t *)&v326->__shared_owners_;
                    do
                      v308 = __ldaxr(v307);
                    while (__stlxr(v308 - 1, v307));
                    if (!v308)
                    {
                      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                      std::__shared_weak_count::__release_weak(v306);
                    }
                  }
                  goto LABEL_587;
                }
              }
              memcpy(p_dst, v238, v256);
              goto LABEL_511;
            }
          }
          memmove(v248, v240, v241);
          goto LABEL_492;
        }
      }
      memmove(p_size, v243, v244);
      goto LABEL_484;
    }
  }
LABEL_587:
  if (!v353 && v352)
  {
    if (v351)
    {
      if (v350 < 0)
        operator delete(v349);
      if (SHIBYTE(v348) < 0)
        operator delete(v346);
    }
    if ((_BYTE)v345 && SHIBYTE(v344) < 0)
      operator delete(*(void **)&oslog[16]);
  }
  if (!v363 && v362)
  {
    if (v361)
    {
      if (v360 < 0)
        operator delete(v359);
      if (SHIBYTE(v358) < 0)
        operator delete(v356);
    }
    if ((_BYTE)v355 && (object[39] & 0x80000000) != 0)
      operator delete(*(void **)&object[16]);
  }
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v328.__r_.__value_.__l.__data_);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  v17 = 0;
  v18 = (char *)__p;
  if (__p)
  {
LABEL_19:
    v19 = v331;
    v20 = v18;
    if (v331 != v18)
    {
      do
      {
        v21 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v19 -= 32;
      }
      while (v19 != v18);
      v20 = __p;
    }
    v331 = v18;
    operator delete(v20);
  }
LABEL_344:
  kdebug_trace();
  return v17;
}

#error "223886C4C: call analysis failed (funcsize=160)"

void sub_223886EDC(uint64_t a1@<X0>, __int128 *a2@<X2>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  unint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  std::string __p;
  std::string v30;
  void *__dst[2];
  uint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) & 1) == 0)
  {
    sub_2238878F0(a3);
    return;
  }
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 1528) + 128))(*(_QWORD *)(a1 + 1528), a2);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
  v8 = operator new();
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = (unint64_t *)(v8 + 8);
  *(_QWORD *)(v8 + 24) = 850045863;
  *(_QWORD *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 1018212795;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 124) = 0u;
  *(_QWORD *)v8 = &off_24EC557C0;
  v33 = &v6[1].__vftable;
  v34 = v6;
  *a3 = v8;
  std::mutex::lock((std::mutex *)(v8 + 24));
  v10 = *(_DWORD *)(v8 + 136);
  if ((v10 & 2) != 0)
    sub_2233236D4(1u);
  do
    v11 = __ldxr(v9);
  while (__stxr(v11 + 1, v9));
  *(_DWORD *)(v8 + 136) = v10 | 2;
  std::mutex::unlock((std::mutex *)(v8 + 24));
  *(_QWORD *)&v35 = v6 + 1;
  *((_QWORD *)&v35 + 1) = v6;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(&v36, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v36 = *a2;
    v37 = *((_QWORD *)a2 + 2);
  }
  v38 = *(_QWORD *)(a1 + 1528);
  sub_223FF97F8(a1 + 56, &v39);
  v13 = *(_QWORD *)(a1 + 1232);
  memset(&v30, 0, sizeof(v30));
  sub_2231816F0(&v30, (std::string *)"data", (std::string *)"");
  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)__dst = *a2;
    v32 = *((_QWORD *)a2 + 2);
  }
  sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)&v30);
  v25 = v35;
  v35 = 0uLL;
  if (SHIBYTE(v37) < 0)
  {
    sub_223197FA4(&v26, (void *)v36, *((unint64_t *)&v36 + 1));
  }
  else
  {
    v26 = v36;
    v27 = v37;
  }
  v14 = v38;
  v28 = v38;
  __p = v39;
  memset(&v39, 0, sizeof(v39));
  v41 = 0;
  v15 = (char *)operator new(0x50uLL);
  *(_QWORD *)v15 = off_24EC5BCF8;
  *(_OWORD *)(v15 + 8) = v25;
  v16 = v15 + 24;
  if (SHIBYTE(v27) < 0)
  {
    sub_223197FA4(v16, (void *)v26, *((unint64_t *)&v26 + 1));
    v14 = v28;
  }
  else
  {
    *(_OWORD *)v16 = v26;
    *((_QWORD *)v15 + 5) = v27;
  }
  *((_QWORD *)v15 + 6) = v14;
  *(std::string *)(v15 + 56) = __p;
  memset(&__p, 0, sizeof(__p));
  v41 = v15;
  sub_2231978B0(v13, (uint64_t)__dst, (uint64_t)v40);
  v17 = v41;
  if (v41 == v40)
  {
    v18 = 4;
    v17 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_24;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_24:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_28:
    operator delete((void *)v26);
    goto LABEL_29;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    goto LABEL_28;
LABEL_29:
  if (SHIBYTE(v32) < 0)
  {
    operator delete(__dst[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      goto LABEL_33;
LABEL_38:
    operator delete((void *)v36);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (!*((_QWORD *)&v35 + 1))
      goto LABEL_43;
LABEL_39:
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_43;
  }
LABEL_37:
  operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0)
    goto LABEL_38;
LABEL_33:
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
    goto LABEL_39;
LABEL_43:
  v22 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_22388739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  unint64_t **v44;
  _QWORD *v45;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;

  v47 = (std::__shared_weak_count *)v45[2];
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(v45);
  sub_223887A90((uint64_t)&a11);
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
      goto LABEL_8;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_8:
    sub_223887A90((uint64_t)&a37);
    v50 = *v44;
    if (!*v44)
      goto LABEL_16;
    goto LABEL_12;
  }
  operator delete(a20);
  sub_223887A90((uint64_t)&a37);
  v50 = *v44;
  if (!*v44)
    goto LABEL_16;
LABEL_12:
  v51 = v50 + 1;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    (*(void (**)(unint64_t *))(*v50 + 16))(v50);
    sub_223167354((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
LABEL_16:
  sub_223167354((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_223887568(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_2238878F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::exception_ptr v10;

  v2 = operator new();
  *(_QWORD *)(v2 + 24) = 850045863;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 1018212795;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_QWORD *)v2 = &off_24EC557C0;
  v9 = v2;
  std::mutex::lock((std::mutex *)(v2 + 24));
  if ((*(_BYTE *)(v2 + 136) & 1) != 0
    || (v10.__ptr_ = 0, v3 = *(_QWORD *)(v2 + 16), std::exception_ptr::~exception_ptr(&v10), v3))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(v2 + 140) = 0;
  *(_DWORD *)(v2 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 88));
  std::mutex::unlock((std::mutex *)(v2 + 24));
  v4 = v9;
  if (!v9)
    sub_2233236D4(3u);
  *a1 = v9;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = *(_DWORD *)(v4 + 136);
  if ((v5 & 2) != 0)
    sub_2233236D4(1u);
  v6 = (unint64_t *)(v4 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  *(_DWORD *)(v4 + 136) = v5 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  return sub_2234AB028(&v9);
}

void sub_223887A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_223887A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_223887A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223887A90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 16));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_223887B28()
{
  return 1;
}

uint64_t sub_223887B30(uint64_t a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  float32x4_t *v5;
  _QWORD *v6;
  int32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x2_t v10;
  _QWORD *v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char *v53;
  _QWORD *v54;
  int8x8_t v55;
  _BYTE *v56;
  int v57;
  int8x8_t v58;
  int v59;
  char v60;
  BOOL v61;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  void *v68[2];
  __int128 v69;
  void *v70[2];
  void *v71[2];
  __int128 v72;
  void *v73[2];
  void *v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;

  v79 = 0;
  v77 = 0u;
  v78 = 0u;
  v76 = 0u;
  *(_OWORD *)v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  *(_OWORD *)v73 = 0u;
  *(_OWORD *)v70 = 0u;
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)v68 = 0u;
  v69 = 0u;
  v3 = *(uint64_t **)(a1 + 1680);
  v4 = *(uint64_t **)(a1 + 1688);
  if (v3 != v4)
  {
    if ((a2 & 1) != 0)
    {
      while (1)
      {
        v6 = sub_223822434(*(_QWORD **)(a1 + 1224), *v3, v3[1]);
        v11 = v6;
        if ((v6[14] & 0xFE) != 2)
          goto LABEL_6;
        v12 = (char *)v72;
        if ((unint64_t)v72 < *((_QWORD *)&v72 + 1))
        {
          *(_OWORD *)v72 = *(_OWORD *)v6;
          v13 = v12 + 16;
          goto LABEL_21;
        }
        v14 = (char *)v71[1];
        v15 = (uint64_t)(v72 - (unint64_t)v71[1]) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          sub_22316E078();
        v17 = *((_QWORD *)&v72 + 1) - (unint64_t)v71[1];
        if ((uint64_t)(*((_QWORD *)&v72 + 1) - (unint64_t)v71[1]) >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 60)
            sub_223174E94();
          v19 = (char *)operator new(16 * v18);
          v20 = &v19[16 * v15];
          *(_OWORD *)v20 = *(_OWORD *)v11;
          v21 = v20;
          if (v12 == v14)
          {
LABEL_19:
            v13 = v20 + 16;
            v71[1] = v21;
            *((_QWORD *)&v72 + 1) = &v19[16 * v18];
            if (!v12)
              goto LABEL_21;
LABEL_20:
            operator delete(v12);
            goto LABEL_21;
          }
        }
        else
        {
          v19 = 0;
          v20 = (char *)(16 * v15);
          *(_OWORD *)(16 * v15) = *(_OWORD *)v11;
          v21 = (char *)(16 * v15);
          if (v12 == v14)
            goto LABEL_19;
        }
        do
        {
          *((_OWORD *)v21 - 1) = *((_OWORD *)v12 - 1);
          v21 -= 16;
          v12 -= 16;
        }
        while (v12 != v14);
        v12 = v14;
        v13 = v20 + 16;
        v71[1] = v21;
        *((_QWORD *)&v72 + 1) = &v19[16 * v18];
        if (v12)
          goto LABEL_20;
LABEL_21:
        *(_QWORD *)&v72 = v13;
        v7.i64[0] = v11[2];
        v7.i32[2] = *((_DWORD *)v11 + 6);
        v8.i64[0] = v11[4];
        v8.i32[2] = *((_DWORD *)v11 + 10);
        v22 = (float32x4_t)vzip1q_s32(v7, v8);
        v23 = (int8x16_t)v22;
        v23.i32[2] = v11[6];
        v9.i64[0] = v11[8];
        v9.i32[2] = *((_DWORD *)v11 + 18);
        v24 = (int8x16_t)vnegq_f32(v9);
        v25 = (int8x16_t)vtrn2q_s32(v7, v8);
        v25.i32[2] = HIDWORD(v11[6]);
        v10.i32[0] = *((_DWORD *)v11 + 14);
        v26 = (float32x4_t)vzip2q_s32(v7, v8);
        *(float32x2_t *)v22.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v22.f32, *(float *)v24.i32), *(float32x2_t *)v25.i8, *(float32x2_t *)v9.f32, 1), *(float32x2_t *)v26.f32, v9, 2);
        v26.i32[2] = v10.i32[0];
        v27 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v26, 2).u64[0];
        v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
        v22.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32((float32x2_t)v11[6], *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v11[6], 1), *(float32x2_t *)v9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), v10).u32[0]);
        v29 = vextq_s8(v25, v23, 4uLL).u64[0];
        v23.i32[3] = 0;
        v30.i32[3] = 0;
        v30.i32[0] = v28.i32[3];
        *(uint64_t *)((char *)v30.i64 + 4) = v29;
        v26.i64[1] = v27.u32[0];
        v31 = *(float32x2_t *)(a1 + 152);
        v32.i32[0] = *(_DWORD *)(a1 + 160);
        v24.i64[0] = *(_QWORD *)(a1 + 168);
        v33 = *(float32x2_t *)(a1 + 184);
        v27.i32[0] = *(_DWORD *)(a1 + 192);
        v28.i64[0] = *(_QWORD *)(a1 + 200);
        v28.i32[2] = *(_DWORD *)(a1 + 208);
        v34 = (int8x16_t)vnegq_f32(v28);
        v35 = vmulq_n_f32((float32x4_t)v23, v32.f32[0]);
        v32.i32[1] = *(_DWORD *)(a1 + 176);
        v36 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v31, *(int32x2_t *)v24.i8), *(float *)v34.i32), (float32x2_t)vzip2_s32((int32x2_t)v31, *(int32x2_t *)v24.i8), *(float32x2_t *)v28.f32, 1), v32, v28, 2);
        v32.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v33, *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v33, 1), *(float32x2_t *)v28.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), v27).u32[0];
        v37 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v23, v31.f32[0]), v30, *(float *)v24.i32), v26, v33.f32[0]), (float32x4_t)0, v22);
        v38 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)v23, v31, 1), v30, *(float32x2_t *)v24.i8, 1), v26, v33, 1), (float32x4_t)0, v22);
        v39 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v35, v30, v32.f32[1]), v26, v27.f32[0]), (float32x4_t)0, v22);
        v40 = vaddq_f32(v22, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v23, v36.f32[0]), v30, v36, 1), v26, v32.f32[0]));
        v41 = (float32x4_t *)v73[1];
        if (v73[1] >= v74[0])
        {
          v42 = (float32x4_t *)v73[0];
          v43 = ((char *)v73[1] - (char *)v73[0]) >> 6;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 58)
            sub_223257BE4();
          v45 = (char *)v74[0] - (char *)v73[0];
          if (((char *)v74[0] - (char *)v73[0]) >> 5 > v44)
            v44 = v45 >> 5;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0)
            v46 = 0x3FFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            v63 = v40;
            v64 = v38;
            v65 = v37;
            v66 = v39;
            if (v46 >> 58)
              sub_223174E94();
            v47 = (char *)operator new(v46 << 6);
            v48 = (float32x4_t *)&v47[64 * v43];
            *v48 = v65;
            v48[1] = v64;
            v48[2] = v66;
            v48[3] = v63;
            v49 = v48;
            if (v41 == v42)
              goto LABEL_39;
            do
            {
LABEL_37:
              v50 = v41[-4];
              v51 = v41[-3];
              v52 = v41[-1];
              v49[-2] = v41[-2];
              v49[-1] = v52;
              v49[-4] = v50;
              v49[-3] = v51;
              v49 -= 4;
              v41 -= 4;
            }
            while (v41 != v42);
            v41 = v42;
          }
          else
          {
            v47 = 0;
            v48 = (float32x4_t *)(v43 << 6);
            *v48 = v37;
            v48[1] = v38;
            v48[2] = v39;
            v48[3] = v40;
            v49 = (float32x4_t *)(v43 << 6);
            if (v41 != v42)
              goto LABEL_37;
          }
LABEL_39:
          v53 = &v47[64 * v46];
          v5 = v48 + 4;
          v73[0] = v49;
          v74[0] = v53;
          if (v41)
            operator delete(v41);
          goto LABEL_5;
        }
        *(float32x4_t *)v73[1] = v37;
        v41[1] = v38;
        v5 = v41 + 4;
        v41[2] = v39;
        v41[3] = v40;
LABEL_5:
        v73[1] = v5;
LABEL_6:
        v3 += 2;
        if (v3 == v4)
          goto LABEL_45;
      }
    }
    do
    {
      v54 = sub_223822434(*(_QWORD **)(a1 + 1224), *v3, v3[1]);
      v56 = v54;
      if ((v54[14] & 0xFE) == 2)
      {
        v57 = sub_2231D77B8(*((unsigned __int8 *)v54 + 113), 2, v55);
        v59 = sub_2231D77B8(v57, 4, v58);
        v60 = v59;
        v61 = sub_2231D793C(v56[114], v59, 0);
        v56[112] = 1;
        v56[113] = v60;
        v56[114] = v61;
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
LABEL_45:
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 1680);
  v67 = 0;
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 24))(a1, v68, &v67);
  if (*((_QWORD *)&v77 + 1))
  {
    *(_QWORD *)&v78 = *((_QWORD *)&v77 + 1);
    operator delete(*((void **)&v77 + 1));
  }
  if ((_QWORD)v76)
  {
    *((_QWORD *)&v76 + 1) = v76;
    operator delete((void *)v76);
  }
  if (v74[1])
  {
    *(void **)&v75 = v74[1];
    operator delete(v74[1]);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  if (v71[1])
  {
    *(void **)&v72 = v71[1];
    operator delete(v71[1]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  if (v68[1])
  {
    *(void **)&v69 = v68[1];
    operator delete(v68[1]);
  }
  return 1;
}

void sub_223888034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223888048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22388805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223888070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223888084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223888098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2238880AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2238880C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2238880D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  std::string::size_type *p_size;
  std::string::pointer v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  int v28;
  __n128 *v31;
  std::string *v32;
  size_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  size_t v39;
  const char *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  unint64_t v46;
  const char *v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string::size_type v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  int v96;
  __int128 v97;
  void *__p;
  __int128 v99;
  int v100;
  __int128 *v101;
  int v102;
  const char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string v106;
  std::string *v107;
  _BYTE object[40];
  void *v109;
  size_t v110;
  unint64_t v111;
  char v112;
  size_t *v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v2 = a1[196];
  if (v2)
    a1[237] = sub_2231D041C(v2);
  v96 = 0;
  sub_223840028(object, a1[153], a1[153]);
  v3 = *(_QWORD *)&object[32];
  __p = *(void **)object;
  v4 = &v99;
  if (!*(_QWORD *)&object[32])
    goto LABEL_6;
  if (*(_BYTE **)&object[32] != &object[8])
  {
    v3 = (*(uint64_t (**)(void))(**(_QWORD **)&object[32] + 16))();
LABEL_6:
    v101 = (__int128 *)v3;
    goto LABEL_8;
  }
  v101 = &v99;
  (*(void (**)(void))(**(_QWORD **)&object[32] + 24))();
LABEL_8:
  v5 = (uint64_t)v113;
  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
  p_size = &v106.__r_.__value_.__l.__size_;
  if (v113)
  {
    if (v113 == &v110)
    {
      v107 = (std::string *)&v106.__r_.__value_.__r.__words[1];
      (*(void (**)(void))(*v113 + 24))();
      goto LABEL_13;
    }
    v5 = (*(uint64_t (**)(void))(*v113 + 16))();
  }
  v107 = (std::string *)v5;
LABEL_13:
  v7 = (std::string::pointer)__p;
  while (v7 != v106.__r_.__value_.__l.__data_)
  {
    if (!v101)
      sub_223198474();
    v8 = (_QWORD *)(*(uint64_t (**)(__int128 *, std::string::pointer))(*(_QWORD *)v101 + 48))(v101, v7 + 16);
    if (sub_22387CB54((uint64_t)a1, v8))
      ++v96;
    v7 = *(std::string::pointer *)__p;
    __p = *(void **)__p;
  }
  if (v107 == (std::string *)&v106.__r_.__value_.__r.__words[1])
  {
    v9 = 4;
  }
  else
  {
    if (!v107)
      goto LABEL_24;
    v9 = 5;
    p_size = (std::string::size_type *)v107;
  }
  (*(void (**)(std::string::size_type *))(*p_size + 8 * v9))(p_size);
LABEL_24:
  if (v101 == &v99)
  {
    v10 = 4;
  }
  else
  {
    if (!v101)
      goto LABEL_29;
    v10 = 5;
    v4 = v101;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v4 + 8 * v10))(v4);
LABEL_29:
  v11 = v113;
  if (v113 == &v110)
  {
    v12 = 4;
    v11 = &v110;
  }
  else
  {
    if (!v113)
      goto LABEL_34;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_34:
  v13 = *(_QWORD **)&object[32];
  if (*(_BYTE **)&object[32] == &object[8])
  {
    v14 = 4;
    v13 = &object[8];
  }
  else
  {
    if (!*(_QWORD *)&object[32])
      goto LABEL_39;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_39:
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Keyframing.update_count";
  *(_QWORD *)&object[24] = 29;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v106);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v15 = sub_2241471F8();
    v16 = v15[2];
    if (!v16)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v16 = v15[2];
    }
    v17 = *(_QWORD *)(v16 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      sub_2241471F8();
      v21 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          v22 = (char *)operator new(0x20uLL);
          v99 = xmmword_2245B8D70;
          strcpy(v22, "color_invalidated_manually");
          *(_QWORD *)&v97 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v97 + 1) = 2;
          __p = v22;
          v23 = sub_2241471F8();
          sub_22356F6DC((uint64_t)v23, v21, &v96, (uint64_t)&__p, &v97);
          if (SHIBYTE(v99) < 0)
            operator delete(__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v106.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v25 = &v106;
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v106.__r_.__value_.__r.__words[0];
    v26 = v25->__r_.__value_.__r.__words[0];
    v27 = v25->__r_.__value_.__l.__size_;
    v28 = v25->__r_.__value_.__s.__data_[16];
    if (v26 == 0x6365722E64337663 && v27 == 0x73746174532E6E6FLL && v28 == 46)
    {
      v31 = sub_223187510();
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v106;
      else
        v32 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v33 = v106.__r_.__value_.__l.__size_;
      sub_223532E4C(v31, v32, v33, (unsigned int *)&v96, (uint64_t)"color_invalidated_manually", 26);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  sub_22384BA54(&v95);
  if (**(int **)(v95 + 56) <= 3)
  {
    v34 = *(unsigned __int8 *)(v95 + 72);
    v35 = sub_22322F254(v95, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (v34 || v35)
    {
      __p = &v95;
      *(std::chrono::steady_clock::time_point *)&v99 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v99 + 1) = std::chrono::system_clock::now();
      v100 = 3;
      v101 = (__int128 *)"unknown file";
      v102 = 1978;
      v104 = 0;
      v105 = 0;
      v103 = "unknown function";
      v37 = *(unsigned __int8 **)__p;
      v38 = *(_QWORD *)__p + 16;
      if (*(char *)(*(_QWORD *)__p + 39) < 0)
      {
        v40 = (const char *)*((_QWORD *)v37 + 2);
        v39 = *((_QWORD *)v37 + 3);
        v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v42 & 1) != 0)
          goto LABEL_78;
      }
      else
      {
        v39 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
        v40 = (const char *)(*(_QWORD *)__p + 16);
        v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v41 & 1) != 0)
          goto LABEL_78;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_78:
      if (byte_255788F40[23] >= 0)
        v43 = byte_255788F40;
      else
        v43 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v44 = byte_255788F40[23];
      else
        v44 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)object = os_log_create(v43, v40);
      v45 = &object[8];
      if (v44 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v44 >= 0x17)
      {
        v46 = v36;
        v47 = v40;
        v48 = v37;
        v49 = v34;
        v50 = v38;
        v51 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v51 = v44 | 7;
        v52 = v51 + 1;
        v45 = operator new(v51 + 1);
        *(_QWORD *)&object[16] = v44;
        *(_QWORD *)&object[24] = v52 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v45;
        v38 = v50;
        v34 = v49;
        v37 = v48;
        v40 = v47;
        v36 = v46;
      }
      else
      {
        object[31] = v44;
        if (!v44)
        {
LABEL_92:
          v45[v44] = 0;
          object[32] = 1;
          v53 = &v109;
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v39 >= 0x17)
          {
            v55 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v55 = v39 | 7;
            v56 = v55 + 1;
            v53 = operator new(v55 + 1);
            v110 = v39;
            v111 = v56 | 0x8000000000000000;
            v109 = v53;
          }
          else
          {
            HIBYTE(v111) = v39;
            if (!v39)
            {
              LOBYTE(v109) = 0;
              v112 = 1;
              v54 = *(NSObject **)object;
              if ((SHIBYTE(v111) & 0x80000000) == 0)
                goto LABEL_96;
              goto LABEL_102;
            }
          }
          memmove(v53, v40, v39);
          *((_BYTE *)v53 + v39) = 0;
          v112 = 1;
          v54 = *(NSObject **)object;
          if ((SHIBYTE(v111) & 0x80000000) == 0)
          {
LABEL_96:
            if (!object[32])
              goto LABEL_105;
            goto LABEL_103;
          }
LABEL_102:
          operator delete(v109);
          if (!object[32])
          {
LABEL_105:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v36 && *(_QWORD *)(v36 + 24))
            {
              v57 = _os_log_pack_size();
              v58 = (std::__shared_weak_count_vtbl *)operator new(v57, (std::align_val_t)8uLL);
              v59 = (std::__shared_weak_count *)operator new();
              v60 = v59;
              v59->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v59->__shared_owners_;
              v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v59->__shared_weak_owners_ = 0;
              v59[1].__vftable = v58;
              *(_QWORD *)object = v58;
              *(_QWORD *)&object[8] = v58;
              *(_QWORD *)&object[16] = v59;
              do
                v62 = __ldxr(p_shared_owners);
              while (__stxr(v62 + 1, p_shared_owners));
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              v109 = 0;
              do
                v63 = __ldaxr(p_shared_owners);
              while (__stlxr(v63 - 1, p_shared_owners));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v60);
              }
              v64 = *(_QWORD *)object;
              v65 = (_DWORD *)_os_log_pack_fill();
              v66 = v96;
              *v65 = 67109120;
              v65[1] = v66;
              v67 = operator new();
              v68 = v37[39];
              if ((v68 & 0x80u) == 0)
                v69 = v38;
              else
                v69 = *((_QWORD *)v37 + 2);
              if ((v68 & 0x80u) != 0)
                v68 = *((_QWORD *)v37 + 3);
              *(_QWORD *)v67 = v64;
              *(_OWORD *)(v67 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v67 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v67 + 40) = v69;
              *(_QWORD *)(v67 + 48) = v68;
              *(_BYTE *)(v67 + 56) = 1;
              *(_QWORD *)&v97 = 0;
              v106.__r_.__value_.__r.__words[0] = v67;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), &v106);
              v70 = v106.__r_.__value_.__r.__words[0];
              v106.__r_.__value_.__r.__words[0] = 0;
              if (v70)
              {
                v71 = *(std::__shared_weak_count **)(v70 + 32);
                if (v71)
                {
                  v72 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                v74 = *(std::__shared_weak_count **)(v70 + 16);
                if (v74)
                {
                  v75 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                MEMORY[0x227684CE8](v70, 0x10F0C40B62ED6C6);
                v77 = v97;
                *(_QWORD *)&v97 = 0;
                if (v77)
                {
                  v78 = *(std::__shared_weak_count **)(v77 + 32);
                  if (v78)
                  {
                    v79 = (unint64_t *)&v78->__shared_owners_;
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 - 1, v79));
                    if (!v80)
                    {
                      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                      std::__shared_weak_count::__release_weak(v78);
                    }
                  }
                  v81 = *(std::__shared_weak_count **)(v77 + 16);
                  if (v81)
                  {
                    v82 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
                }
              }
              v84 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v85 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              v87 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v88 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
            }
            else
            {
              os_log_type_enabled(v54, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 67109120;
              *(_DWORD *)&object[4] = v96;
              v90 = (void *)_os_log_send_and_compose_impl();
              if (v90)
                free(v90);
            }
            if (v34)
            {
              sub_22322C138((uint64_t)&__p, "KFE:IKC:M:%i", v96);
              sub_223182C08((uint64_t)&__p);
            }
            sub_223182C08((uint64_t)&__p);
            v91 = v105;
            if (v105)
            {
              v92 = (unint64_t *)&v105->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            goto LABEL_162;
          }
LABEL_103:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_105;
        }
      }
      memmove(v45, v43, v44);
      goto LABEL_92;
    }
  }
LABEL_162:
  kdebug_trace();
  return 1;
}

void sub_223888D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223888D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a24);
  sub_22319A054(&a13);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223888D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223888DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223888DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223888DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *object,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223888EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29)
{
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;

  if (a28 == v30)
  {
    v32 = 4;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v32 = 5;
    v30 = a28;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v32))(v30);
LABEL_6:
  if (a19 == v29)
  {
    v33 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v33 = 5;
    v29 = a19;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v33))(v29);
LABEL_11:
  sub_2236CE728(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_223888F64(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
LABEL_11:
      operator delete(v2);
      return a1;
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if (*(char *)(a1 + 39) < 0)
  {
    v2 = *(void **)(a1 + 16);
    goto LABEL_11;
  }
  return a1;
}

uint64_t sub_223888FF8(uint64_t a1)
{
  void **v2;
  void *v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;

  v2 = *(void ***)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  if (v2)
  {
    v3 = v2[3];
    v2[3] = 0;
    if (v3)
      (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
    v4 = (char *)*v2;
    if (*v2)
    {
      v5 = (char *)v2[1];
      v6 = *v2;
      if (v5 != v4)
      {
        v7 = (char *)v2[1];
        do
        {
          v9 = (void *)*((_QWORD *)v7 - 3);
          v7 -= 24;
          v8 = v9;
          if (v9)
          {
            *((_QWORD *)v5 - 2) = v8;
            operator delete(v8);
          }
          v5 = v7;
        }
        while (v7 != v4);
        v6 = *v2;
      }
      v2[1] = v4;
      operator delete(v6);
    }
    MEMORY[0x227684CE8](v2, 0x20C40DC1BFBCFLL);
  }
  if (*(_QWORD *)(a1 + 3168))
  {
    sub_2238891A0((uint64_t *)(a1 + 3168));
    operator delete(*(void **)(a1 + 3168));
  }
  sub_22388925C(a1 + 2704);
  v10 = *(std::__shared_weak_count **)(a1 + 2632);
  if (!v10)
    goto LABEL_19;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = *(_QWORD **)(a1 + 96);
    if (!v13)
      goto LABEL_21;
  }
  else
  {
LABEL_19:
    v13 = *(_QWORD **)(a1 + 96);
    if (!v13)
      goto LABEL_21;
  }
  do
  {
    v14 = (_QWORD *)*v13;
    sub_22388925C((uint64_t)(v13 + 8));
    operator delete(v13);
    v13 = v14;
  }
  while (v14);
LABEL_21:
  v15 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v15)
    operator delete(v15);
  v16 = *(_QWORD **)(a1 + 56);
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      sub_22388925C((uint64_t)(v16 + 8));
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v18)
    operator delete(v18);
  v19 = *(_QWORD **)(a1 + 16);
  if (v19)
  {
    do
    {
      v20 = (_QWORD *)*v19;
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
  v21 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v21)
    operator delete(v21);
  return a1;
}

void sub_2238891A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      v4 = *(void **)(v3 - 96);
      if (v4)
      {
        *(_QWORD *)(v3 - 88) = v4;
        operator delete(v4);
      }
      v5 = *(_QWORD *)(v3 - 120);
      if (v5)
      {
        v6 = *(_QWORD *)(v3 - 112);
        v7 = *(void **)(v3 - 120);
        if (v6 != v5)
        {
          v8 = *(_QWORD *)(v3 - 112);
          do
          {
            v10 = *(void **)(v8 - 24);
            v8 -= 24;
            v9 = v10;
            if (v10)
            {
              *(_QWORD *)(v6 - 16) = v9;
              operator delete(v9);
            }
            v6 = v8;
          }
          while (v8 != v5);
          v7 = *(void **)(v3 - 120);
        }
        *(_QWORD *)(v3 - 112) = v5;
        operator delete(v7);
      }
      v11 = v3 - 144;
      v12 = *(void **)(v3 - 144);
      if (v12)
      {
        *(_QWORD *)(v3 - 136) = v12;
        operator delete(v12);
      }
      v3 -= 144;
    }
    while (v11 != v2);
  }
  a1[1] = v2;
}

uint64_t sub_22388925C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;

  v2 = *(_QWORD **)(a1 + 424);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 384);
  if (v5)
  {
    *(_QWORD *)(a1 + 392) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 360);
  if (v6)
  {
    *(_QWORD *)(a1 + 368) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(_QWORD *)(a1 + 272) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 240);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 248);
    v10 = *(void **)(a1 + 240);
    if (v9 != v8)
    {
      v11 = *(_QWORD *)(a1 + 248);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = *(void **)(a1 + 240);
    }
    *(_QWORD *)(a1 + 248) = v8;
    operator delete(v10);
  }
  v14 = *(void **)(a1 + 216);
  if (v14)
  {
    *(_QWORD *)(a1 + 224) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 192);
  if (v15)
  {
    *(_QWORD *)(a1 + 200) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 168);
  if (v16)
  {
    *(_QWORD *)(a1 + 176) = v16;
    operator delete(v16);
  }
  v17 = *(_QWORD *)(a1 + 144);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 152);
    v19 = *(void **)(a1 + 144);
    if (v18 != v17)
    {
      v20 = *(_QWORD *)(a1 + 152);
      do
      {
        v22 = *(void **)(v20 - 24);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *(_QWORD *)(v18 - 16) = v21;
          operator delete(v21);
        }
        v18 = v20;
      }
      while (v20 != v17);
      v19 = *(void **)(a1 + 144);
    }
    *(_QWORD *)(a1 + 152) = v17;
    operator delete(v19);
  }
  v23 = *(void **)(a1 + 48);
  if (v23)
  {
    *(_QWORD *)(a1 + 56) = v23;
    operator delete(v23);
  }
  v24 = *(_QWORD *)(a1 + 24);
  if (v24)
  {
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(void **)(a1 + 24);
    if (v25 != v24)
    {
      v27 = *(_QWORD *)(a1 + 32);
      do
      {
        v29 = *(void **)(v27 - 24);
        v27 -= 24;
        v28 = v29;
        if (v29)
        {
          *(_QWORD *)(v25 - 16) = v28;
          operator delete(v28);
        }
        v25 = v27;
      }
      while (v27 != v24);
      v26 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v24;
    operator delete(v26);
  }
  v30 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v30;
    operator delete(v30);
  }
  return a1;
}

uint64_t sub_223889410(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v2 = *(_QWORD **)(a1 + 200);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    operator delete(v4);
  sub_22388950C(a1 + 144, *(_QWORD **)(a1 + 160));
  v5 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v5)
    operator delete(v5);
  sub_22388950C(a1 + 104, *(_QWORD **)(a1 + 120));
  v6 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 56);
  if (v7)
  {
    do
    {
      v11 = (_QWORD *)*v7;
      v12 = (_QWORD *)v7[6];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = (void *)v7[4];
      v7[4] = 0;
      if (v14)
        operator delete(v14);
      operator delete(v7);
      v7 = v11;
    }
    while (v11);
  }
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v8)
    operator delete(v8);
  sub_22388950C(a1, *(_QWORD **)(a1 + 16));
  v9 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

void sub_22388950C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  BOOL v5;
  int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      v4 = (void *)v3[9];
      if (v4)
      {
        v5 = !*((_DWORD *)v3 + 23) || *((_DWORD *)v3 + 22) == 0;
        v6 = v5 ? 0 : *((_DWORD *)v3 + 23);
        if (v6 * (((381774871 * (unint64_t)(v3[12] >> 34)) >> 32) >> 2) != -1)
          goto LABEL_3;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v4 = (void *)v3[9];
        if (v4)
LABEL_3:
          free(v4);
      }
      operator delete(v3);
    }
    while (v2);
  }
}

uint64_t sub_2238895FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  char v9;
  _DWORD v10[5];
  char v11;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 28))
      v4 = *(_DWORD *)(a1 + 24) == 0;
    else
      v4 = 1;
    if (v4)
      v5 = 0;
    else
      v5 = *(_QWORD *)(a1 + 24);
    if (HIDWORD(v3) / 0x30 * HIDWORD(v5) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if ((_DWORD)v5)
      v6 = HIDWORD(v5) == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v10[0] = 0;
      v10[1] = v5 - 1;
      v10[2] = v3 / 0x30;
      v10[3] = HIDWORD(v5) - 1;
      v10[4] = HIDWORD(v3) / 0x30;
      v11 = 0;
      sub_223889714(v10, (uint64_t)&v11, (uint64_t)&v9, v2);
    }
    v7 = *(void **)(a1 + 8);
    if (v7)
      free(v7);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_223889714(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  void **v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (a1[3])
  {
    v6 = 0;
    while (1)
    {
      v7 = a4;
      if (a1[1])
        break;
LABEL_3:
      sub_223889878(v7);
      a4 += 48 * a1[4];
      if (++v6 >= a1[3])
        goto LABEL_20;
    }
    v8 = 0;
    v7 = a4;
    while (1)
    {
      v9 = *(void ***)(v7 + 8);
      v10 = *(void ***)(v7 + 16);
      *(_QWORD *)(v7 + 40) = 0;
      v11 = (char *)v10 - (char *)v9;
      if ((unint64_t)((char *)v10 - (char *)v9) >= 0x11)
      {
        do
        {
          operator delete(*v9);
          v10 = *(void ***)(v7 + 16);
          v9 = (void **)(*(_QWORD *)(v7 + 8) + 8);
          *(_QWORD *)(v7 + 8) = v9;
          v11 = (char *)v10 - (char *)v9;
        }
        while ((unint64_t)((char *)v10 - (char *)v9) > 0x10);
      }
      v12 = v11 >> 3;
      if (v12 == 1)
      {
        v13 = 11;
      }
      else
      {
        if (v12 != 2)
          goto LABEL_14;
        v13 = 22;
      }
      *(_QWORD *)(v7 + 32) = v13;
LABEL_14:
      if (v9 != v10)
      {
        do
        {
          v14 = *v9++;
          operator delete(v14);
        }
        while (v9 != v10);
        v16 = *(_QWORD *)(v7 + 8);
        v15 = *(_QWORD *)(v7 + 16);
        if (v15 != v16)
          *(_QWORD *)(v7 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (*(_QWORD *)v7)
        operator delete(*(void **)v7);
      v7 += 48 * a1[2];
      if (++v8 >= a1[1])
        goto LABEL_3;
    }
  }
LABEL_20:
  if (a1[1])
  {
    v17 = 0;
    do
    {
      sub_223889878(a4);
      a4 += 48 * a1[2];
      ++v17;
    }
    while (v17 < a1[1]);
  }
  return sub_223889878(a4);
}

uint64_t sub_223889878(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 11;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 22;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22388993C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

char *sub_2238899CC(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0x2E8BA2E8BA2E8BA3 * ((v3 - (_BYTE *)*a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x1745D1745D1745DLL)
    sub_22316E078();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - v4) >> 4) > v6)
    v6 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - v4) >> 4);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - v4) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v6 = 0x1745D1745D1745DLL;
  if (v6 > 0x1745D1745D1745DLL)
    sub_223174E94();
  v8 = 176 * v6;
  v9 = (char *)operator new(176 * v6);
  v10 = *(_OWORD *)(a2 + 16);
  v11 = &v9[176 * v5];
  v12 = &v9[v8];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v10;
  v13 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v11 + 3) = v13;
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  v14 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v11 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v11 + 7) = v14;
  v15 = *(_OWORD *)(a2 + 128);
  v16 = *(_OWORD *)(a2 + 144);
  *((_DWORD *)v11 + 40) = *(_DWORD *)(a2 + 160);
  *((_OWORD *)v11 + 8) = v15;
  *((_OWORD *)v11 + 9) = v16;
  *((_QWORD *)v11 + 21) = *(_QWORD *)(a2 + 168);
  v17 = v11 + 176;
  *((_QWORD *)v11 + 10) = &off_24EC207B8;
  *((_QWORD *)v11 + 11) = &off_24EC20868;
  v18 = (char *)(v3 - v4);
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v17;
    a1[2] = v12;
    if (!v3)
      return v17;
    goto LABEL_16;
  }
  v19 = 0;
  do
  {
    v20 = &v11[v19];
    *((_OWORD *)v20 - 11) = *(_OWORD *)&v3[v19 - 176];
    v21 = *(_OWORD *)&v3[v19 - 160];
    v22 = *(_OWORD *)&v3[v19 - 144];
    v23 = *(_OWORD *)&v3[v19 - 112];
    *((_OWORD *)v20 - 8) = *(_OWORD *)&v3[v19 - 128];
    *((_OWORD *)v20 - 7) = v23;
    *((_QWORD *)v20 - 11) = &off_24EC20868;
    *((_OWORD *)v20 - 10) = v21;
    *((_OWORD *)v20 - 9) = v22;
    *((_QWORD *)v20 - 10) = *(_QWORD *)&v3[v19 - 80];
    *((_QWORD *)v20 - 9) = *(_QWORD *)&v3[v19 - 72];
    *((_OWORD *)v20 - 4) = *(_OWORD *)&v3[v19 - 64];
    v24 = *(_OWORD *)&v3[v19 - 48];
    v25 = *(_OWORD *)&v3[v19 - 32];
    *((_DWORD *)v20 - 4) = *(_DWORD *)&v3[v19 - 16];
    *((_OWORD *)v20 - 3) = v24;
    *((_OWORD *)v20 - 2) = v25;
    *((_QWORD *)v20 - 1) = *(_QWORD *)&v3[v19 - 8];
    *((_QWORD *)v20 - 12) = &off_24EC207B8;
    v19 -= 176;
  }
  while (&v3[v19] != v4);
  *a1 = &v11[v19];
  a1[1] = v17;
  a1[2] = v12;
  if ((unint64_t)(v18 - 176) < 0xB0)
    goto LABEL_24;
  v26 = (unint64_t)(v18 - 176) / 0xB0 + 1;
  v27 = v3 - 272;
  v28 = v26 & 0x3FFFFFFFFFFFFFELL;
  do
  {
    *((_QWORD *)v27 + 22) = &off_24EC20828;
    *(_QWORD *)v27 = &off_24EC20828;
    v27 -= 352;
    v28 -= 2;
  }
  while (v28);
  v3 -= 176 * (v26 & 0x3FFFFFFFFFFFFFELL);
  if (v26 != (v26 & 0x3FFFFFFFFFFFFFELL))
  {
LABEL_24:
    do
    {
      *((_QWORD *)v3 - 12) = &off_24EC20828;
      v3 -= 176;
    }
    while (v3 != v4);
  }
  v3 = v4;
  if (v4)
LABEL_16:
    operator delete(v3);
  return v17;
}

uint64_t **sub_223889C0C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  *a1 = *a3;
  v7 = (uint64_t *)(a1 + 1);
  v8 = (uint64_t **)a3[4];
  if (v8)
  {
    if (v8 == a3 + 1)
    {
      a1[4] = v7;
      (*(void (**)(uint64_t *, uint64_t *))(*a3[4] + 24))(a3[4], v7);
    }
    else
    {
      a1[4] = (uint64_t *)((uint64_t (*)(uint64_t **))(*v8)[2])(v8);
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = (uint64_t *)&off_24EC5B350;
  a1[6] = a2;
  a1[8] = (uint64_t *)(a1 + 5);
  a1[9] = *a4;
  v9 = (uint64_t)a4[4];
  if (v9)
  {
    if ((uint64_t **)v9 == a4 + 1)
    {
      a1[13] = (uint64_t *)(a1 + 10);
      (*(void (**)(uint64_t *, uint64_t **))(*a4[4] + 24))(a4[4], a1 + 10);
      v10 = *a1;
      if (*a1 == a1[9])
        return a1;
      goto LABEL_12;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  a1[13] = (uint64_t *)v9;
  v10 = *a1;
  if (*a1 == a1[9])
    return a1;
  do
  {
LABEL_12:
    v11 = a1[4];
    if (v11)
    {
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v11 + 48))(v11, v10 + 2);
      v13 = a1[8];
      if (v13)
        goto LABEL_14;
    }
    sub_223198474();
LABEL_14:
    if (((*(uint64_t (**)(uint64_t *, uint64_t))(*v13 + 48))(v13, v12) & 1) != 0)
      break;
    v10 = (uint64_t *)**a1;
    *a1 = v10;
  }
  while (v10 != a1[9]);
  return a1;
}

void sub_223889D6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 64);
  if (v5 == v3)
  {
    v6 = 4;
    v5 = v3;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_223889E14()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223889E28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B350;
  result[1] = v3;
  return result;
}

uint64_t sub_223889E5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B350;
  a2[1] = v2;
  return result;
}

BOOL sub_223889E78(uint64_t a1, _QWORD *a2)
{
  return sub_2231A88F8((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1232) + 320), a2) != 0;
}

uint64_t sub_223889EA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223889F0C()
{
  return &unk_24EC5B3B0;
}

uint64_t sub_223889F18(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223889F80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5B3D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223889F90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5B3D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223889FC8(uint64_t *a1, _OWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5, _QWORD *a6, uint64_t *a7, __int128 *a8, char *a9, char *a10)
{
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _OWORD *v55;
  uint64_t v56;

  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  v13 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)&v12[-*a1] >> 3);
  v14 = v13 + 1;
  if (v13 + 1 > 0x108421084210842)
    sub_22316E078();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - (uint64_t)v11) >> 3) > v14)
    v14 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - (uint64_t)v11) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - (uint64_t)v11) >> 3) >= 0x84210842108421)
    v20 = 0x108421084210842;
  else
    v20 = v14;
  if (!v20)
  {
    v21 = 0;
    v23 = a9;
    v22 = a10;
    v24 = 248 * v13;
    if (!a4)
      goto LABEL_15;
    goto LABEL_12;
  }
  v55 = a2;
  v56 = a4;
  if (v20 > 0x108421084210842)
    sub_223174E94();
  v21 = (char *)operator new(248 * v20);
  a2 = v55;
  a4 = v56;
  v23 = a9;
  v22 = a10;
  v24 = (uint64_t)&v21[248 * v13];
  if (v56)
  {
LABEL_12:
    v25 = (unint64_t *)(a4 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v11 = (char *)*a1;
    v12 = (char *)a1[1];
  }
LABEL_15:
  *(_OWORD *)v24 = *a2;
  v27 = &v21[248 * v13];
  *((_QWORD *)v27 + 2) = a3;
  *((_QWORD *)v27 + 3) = a4;
  v28 = &v21[248 * v20];
  v29 = a5[1];
  *((_OWORD *)v27 + 2) = *a5;
  *((_OWORD *)v27 + 3) = v29;
  v30 = a5[3];
  *((_OWORD *)v27 + 4) = a5[2];
  *((_OWORD *)v27 + 5) = v30;
  v31 = *a7;
  *((_QWORD *)v27 + 12) = *a6;
  *((_QWORD *)v27 + 13) = v31;
  v32 = *a8;
  v33 = a8[1];
  v34 = a8[3];
  *((_OWORD *)v27 + 9) = a8[2];
  *((_OWORD *)v27 + 10) = v34;
  *((_OWORD *)v27 + 7) = v32;
  *((_OWORD *)v27 + 8) = v33;
  v35 = a8[5];
  *((_OWORD *)v27 + 11) = a8[4];
  *((_OWORD *)v27 + 12) = v35;
  v36 = a8[7];
  *((_OWORD *)v27 + 13) = a8[6];
  *((_OWORD *)v27 + 14) = v36;
  v27[240] = *v23;
  v37 = v24 + 248;
  v27[241] = *v22;
  if (v12 == v11)
  {
    *a1 = v24;
    a1[1] = v37;
    a1[2] = (uint64_t)v28;
  }
  else
  {
    v38 = 0;
    do
    {
      v39 = &v12[v38];
      v40 = v24 + v38;
      *(_OWORD *)(v40 - 248) = *(_OWORD *)&v12[v38 - 248];
      *(_OWORD *)(v40 - 232) = *(_OWORD *)&v12[v38 - 232];
      *((_QWORD *)v39 - 29) = 0;
      *((_QWORD *)v39 - 28) = 0;
      v41 = *(_OWORD *)&v12[v38 - 216];
      v42 = *(_OWORD *)&v12[v38 - 200];
      v43 = *(_OWORD *)&v12[v38 - 184];
      *(_OWORD *)(v40 - 168) = *(_OWORD *)&v12[v38 - 168];
      *(_OWORD *)(v40 - 184) = v43;
      *(_OWORD *)(v40 - 200) = v42;
      *(_OWORD *)(v40 - 216) = v41;
      *(_OWORD *)(v40 - 152) = *(_OWORD *)&v12[v38 - 152];
      v44 = *(_OWORD *)&v12[v38 - 136];
      v45 = *(_OWORD *)&v12[v38 - 120];
      v46 = *(_OWORD *)&v12[v38 - 104];
      *(_OWORD *)(v40 - 88) = *(_OWORD *)&v12[v38 - 88];
      *(_OWORD *)(v40 - 104) = v46;
      *(_OWORD *)(v40 - 120) = v45;
      *(_OWORD *)(v40 - 136) = v44;
      v47 = *(_OWORD *)&v12[v38 - 72];
      v48 = *(_OWORD *)&v12[v38 - 56];
      v49 = *(_OWORD *)&v12[v38 - 40];
      *(_OWORD *)(v40 - 24) = *(_OWORD *)&v12[v38 - 24];
      *(_OWORD *)(v40 - 40) = v49;
      *(_OWORD *)(v40 - 56) = v48;
      *(_OWORD *)(v40 - 72) = v47;
      *(_WORD *)(v40 - 8) = *(_WORD *)&v12[v38 - 8];
      v38 -= 248;
    }
    while (&v12[v38] != v11);
    v11 = (char *)*a1;
    v50 = (char *)a1[1];
    *a1 = v24 + v38;
    a1[1] = v37;
    a1[2] = (uint64_t)v28;
    while (v50 != v11)
    {
      v51 = (std::__shared_weak_count *)*((_QWORD *)v50 - 28);
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v50 -= 248;
    }
  }
  if (v11)
    operator delete(v11);
  return v37;
}

void sub_22388A288()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_22388A29C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC5B420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22388A2D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC5B420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_22388A2F4(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v4;
  int8x16_t v5;
  float32x2_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  a3.i64[0] = *(_QWORD *)(a2 + 64);
  a3.i32[2] = *(_DWORD *)(a2 + 72);
  a4.i64[0] = *(_QWORD *)v4;
  a4.i32[2] = *(_DWORD *)(v4 + 8);
  v5 = (int8x16_t)vsubq_f32(a3, a4);
  v6 = (float32x2_t)vextq_s8(v5, v5, 8uLL).u64[0];
  return vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1), *(float32x2_t *)v5.i8, 1), v6, v6).f32[0] <= **(float **)(a1 + 16);
}

uint64_t sub_22388A334(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d5recon2kf14KeyframeEngine29GetKeyframeUUIDsListForSphereERKN3cva6MatrixIfLj3ELj1ELb1EEEfE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d5recon2kf14KeyframeEngine29GetKeyframeUUIDsListForSphereERKN3cva6MatrixIfLj3ELj1ELb1EEEfE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d5recon2kf14KeyframeEngine29GetKeyframeUUIDsListForSphereERKN3cva6MatrixIfLj3ELj1ELb1EEEfE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d5recon2kf14KeyframeEngine29GetKeyframeUUIDsListForSphereERKN3cva6MatrixIfLj3ELj1ELb1EEEfE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22388A3A0()
{
  return &unk_24EC5B480;
}

void sub_22388A3B0()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22388A3C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B4A0;
  result[1] = v3;
  return result;
}

uint64_t sub_22388A3F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B4A0;
  a2[1] = v2;
  return result;
}

BOOL sub_22388A414(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88) > **(_QWORD **)(a1 + 8);
}

uint64_t sub_22388A42C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d5recon2kf14KeyframeEngine44CreateKeyframeUUIDsListUpdatedAfterTimestampERKNSt3__16chrono8du"
                     "rationIxNS3_5ratioILl1ELl1000000000EEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d5recon2kf14KeyframeEngine44CreateKeyframeUUIDsListUpdatedAfterTimestampERKNSt3__"
                                "16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d5recon2kf14KeyframeEngine44CreateKeyframeUUIDsListUpdatedAfterTimestampERKNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d5recon2kf14KeyframeEngine44CreateKeyframeUUIDsListUpdatedAfterTimestampERKNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22388A498()
{
  return &unk_24EC5B500;
}

uint64_t sub_22388A4A4@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t *a6@<X5>, unsigned __int8 **a7@<X8>)
{
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  char *v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t **v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;

  if ((unsigned __int8 *)result != a2)
  {
    v12 = a3;
    if (a3 != a4)
    {
      v13 = (unsigned __int8 *)result;
      while (1)
      {
        result = sub_22319835C(v13 + 25, v12 + 25);
        if ((result & 0x80) != 0)
        {
          v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
          if (v16)
          {
            do
            {
              v13 = v16;
              v16 = *(unsigned __int8 **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = v13;
              v13 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
            }
            while (*(unsigned __int8 **)v13 != v17);
          }
          goto LABEL_29;
        }
        result = sub_22319835C(v12 + 25, v13 + 25);
        if ((result & 0x80) == 0)
          break;
LABEL_25:
        v25 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
        if (v25)
        {
          do
          {
            v12 = v25;
            v25 = *(unsigned __int8 **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = v12;
            v12 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
          }
          while (*(unsigned __int8 **)v12 != v26);
        }
LABEL_29:
        if (v13 == a2 || v12 == a4)
          goto LABEL_31;
      }
      result = (uint64_t)sub_223426D4C(a5, a6, &v28, &v27, v13 + 25);
      v14 = *(char **)result;
      if (*(_QWORD *)result)
      {
        v15 = (uint64_t *)*((_QWORD *)v14 + 1);
        if (!v15)
        {
          do
          {
LABEL_19:
            a6 = (uint64_t *)*((_QWORD *)v14 + 2);
            v22 = *a6 == (_QWORD)v14;
            v14 = (char *)a6;
          }
          while (!v22);
LABEL_21:
          v23 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
          if (v23)
          {
            do
            {
              v13 = v23;
              v23 = *(unsigned __int8 **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = v13;
              v13 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
            }
            while (*(unsigned __int8 **)v13 != v24);
          }
          goto LABEL_25;
        }
      }
      else
      {
        v18 = (uint64_t **)result;
        v14 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v14 + 25) = *(_OWORD *)(v13 + 25);
        v19 = v28;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = v19;
        *v18 = (uint64_t *)v14;
        v20 = **(_QWORD ***)a5;
        v21 = (uint64_t *)v14;
        if (v20)
        {
          *(_QWORD *)a5 = v20;
          v21 = *v18;
        }
        result = (uint64_t)sub_2231A9A8C(*((uint64_t **)a5 + 1), v21);
        ++*((_QWORD *)a5 + 2);
        v15 = (uint64_t *)*((_QWORD *)v14 + 1);
        if (!v15)
          goto LABEL_19;
      }
      do
      {
        a6 = v15;
        v15 = (uint64_t *)*v15;
      }
      while (v15);
      goto LABEL_21;
    }
  }
LABEL_31:
  *a7 = a2;
  a7[1] = a4;
  a7[2] = a5;
  a7[3] = (unsigned __int8 *)a6;
  return result;
}

_OWORD *sub_22388A684(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  _OWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_22316E078();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_223174E94();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v13;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v14 = v11 + 32;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      *((_OWORD *)v11 - 2) = *((_OWORD *)v16 - 2);
      *((_OWORD *)v11 - 1) = *((_OWORD *)v16 - 1);
      v11 -= 32;
      *((_QWORD *)v16 - 2) = 0;
      *((_QWORD *)v16 - 1) = 0;
      v16 -= 32;
    }
    while (v16 != v15);
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    while (v17 != v16)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 32;
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

void sub_22388A7C4(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_22388A7C4(*a1);
    sub_22388A7C4(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_22388A80C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5B520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22388A81C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5B520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22388A84C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;

  v2 = *(_QWORD *)(a1 + 23464);
  *(_QWORD *)(a1 + 23464) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 80);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10F0C401ED89F8CLL);
  }
  sub_22388925C(a1 + 22992);
  *(_QWORD *)(a1 + 22856) = off_24EC5FCD8;
  v6 = *(std::__shared_weak_count **)(a1 + 22976);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_12:
    if ((*(char *)(a1 + 22967) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (*(char *)(a1 + 22967) < 0)
LABEL_13:
    operator delete(*(void **)(a1 + 22944));
LABEL_14:
  if (*(_QWORD *)(a1 + 22912))
  {
    sub_2238891A0((uint64_t *)(a1 + 22912));
    operator delete(*(void **)(a1 + 22912));
  }
  v9 = *(_QWORD **)(a1 + 22888);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 22872);
  *(_QWORD *)(a1 + 22872) = 0;
  if (v11)
    operator delete(v11);
  sub_22388ACBC((void **)(a1 + 21672));
  v12 = *(_QWORD **)(a1 + 21632);
  if (v12)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v14 = *(void **)(a1 + 21616);
  *(_QWORD *)(a1 + 21616) = 0;
  if (v14)
    operator delete(v14);
  v15 = *(_QWORD *)(a1 + 21544);
  *(_QWORD *)(a1 + 21544) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD **)(a1 + 21520);
  if (v16)
  {
    v17 = *(_QWORD **)(a1 + 21528);
    v18 = *(void **)(a1 + 21520);
    if (v17 != v16)
    {
      do
        v17 = sub_22388AEE8(v17 - 46);
      while (v17 != v16);
      v18 = *(void **)(a1 + 21520);
    }
    *(_QWORD *)(a1 + 21528) = v16;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 21496);
  if (v19)
  {
    *(_QWORD *)(a1 + 21504) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 21472);
  if (v20)
  {
    *(_QWORD *)(a1 + 21480) = v20;
    operator delete(v20);
  }
  sub_223198030(a1 + 21448, *(_QWORD **)(a1 + 21456));
  v21 = *(_QWORD **)(a1 + 21416);
  if (v21)
  {
    v22 = *(_QWORD **)(a1 + 21424);
    v23 = *(void **)(a1 + 21416);
    if (v22 != v21)
    {
      do
      {
        v24 = (_QWORD *)*(v22 - 3);
        if (v24)
        {
          do
          {
            v25 = (_QWORD *)*v24;
            operator delete(v24);
            v24 = v25;
          }
          while (v25);
        }
        v27 = (void *)*(v22 - 5);
        v22 -= 5;
        v26 = v27;
        *v22 = 0;
        if (v27)
          operator delete(v26);
      }
      while (v22 != v21);
      v23 = *(void **)(a1 + 21416);
    }
    *(_QWORD *)(a1 + 21424) = v21;
    operator delete(v23);
  }
  v28 = *(_QWORD **)(a1 + 21392);
  if (v28)
  {
    do
    {
      v42 = (_QWORD *)*v28;
      v43 = (_QWORD *)v28[26];
      if (v43)
      {
        do
        {
          v44 = (_QWORD *)*v43;
          operator delete(v43);
          v43 = v44;
        }
        while (v44);
      }
      v45 = (void *)v28[24];
      v28[24] = 0;
      if (v45)
        operator delete(v45);
      operator delete(v28);
      v28 = v42;
    }
    while (v42);
  }
  v29 = *(void **)(a1 + 21376);
  *(_QWORD *)(a1 + 21376) = 0;
  if (v29)
    operator delete(v29);
  v30 = *(_QWORD **)(a1 + 21344);
  if (v30)
  {
    do
    {
      v31 = (_QWORD *)*v30;
      sub_22316F8F4(v30 + 4);
      operator delete(v30);
      v30 = v31;
    }
    while (v31);
  }
  v32 = *(void **)(a1 + 21328);
  *(_QWORD *)(a1 + 21328) = 0;
  if (v32)
    operator delete(v32);
  v33 = *(void **)(a1 + 21304);
  if (v33)
  {
    *(_QWORD *)(a1 + 21312) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(a1 + 21280);
  if (v34)
  {
    *(_QWORD *)(a1 + 21288) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(a1 + 21248);
  if (v35)
  {
    *(_QWORD *)(a1 + 21256) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(a1 + 21224);
  if (v36)
  {
    *(_QWORD *)(a1 + 21232) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(a1 + 21200);
  if (v37)
  {
    *(_QWORD *)(a1 + 21208) = v37;
    operator delete(v37);
  }
  sub_22388B1A4((_QWORD *)(a1 + 208));
  sub_223198030(a1 + 184, *(_QWORD **)(a1 + 192));
  sub_223198030(a1 + 160, *(_QWORD **)(a1 + 168));
  v38 = *(void **)(a1 + 128);
  if (v38)
  {
    *(_QWORD *)(a1 + 136) = v38;
    operator delete(v38);
  }
  v39 = *(_QWORD **)(a1 + 104);
  if (v39)
  {
    do
    {
      v40 = (_QWORD *)*v39;
      sub_22316F8F4(v39 + 28);
      operator delete(v39);
      v39 = v40;
    }
    while (v40);
  }
  v41 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v41)
    operator delete(v41);
}

uint64_t sub_22388ABEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *(_QWORD *)a1 = off_24EC5FCD8;
  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_6:
      v5 = (uint64_t *)(a1 + 56);
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 88));
  v5 = (uint64_t *)(a1 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
LABEL_7:
    sub_2238891A0(v5);
    operator delete((void *)*v5);
  }
LABEL_8:
  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

void **sub_22388ACBC(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v2 = a1[15];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_22388ADB8((uint64_t)(v2 + 5));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = a1[13];
  a1[13] = 0;
  if (v4)
    operator delete(v4);
  sub_22388AE48((uint64_t)(a1 + 8));
  v5 = a1[5];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (char *)*a1;
  if (*a1)
  {
    v9 = (char *)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 28);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 256;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_22388ADB8(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (_QWORD *)*((_QWORD *)v2 + 7);
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v8)
        operator delete(v8);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_22388AE48(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void **v6;
  void *v7;
  void **v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void **)v2[7];
      if (v6)
      {
        do
        {
          v8 = (void **)*v6;
          if (*((char *)v6 + 39) < 0)
            operator delete(v6[2]);
          operator delete(v6);
          v6 = v8;
        }
        while (v8);
      }
      v7 = (void *)v2[5];
      v2[5] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_22388AEE8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v2 = (void *)a1[41];
  if (v2)
  {
    v3 = a1[42];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_22388925C(v3 - 464);
      while ((void *)v3 != v2);
      v4 = (void *)a1[41];
    }
    a1[42] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[28];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[26];
  a1[26] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[22];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      sub_22388AFA4(v8 + 3);
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[20];
  a1[20] = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

_QWORD *sub_22388AFA4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;

  v2 = (_QWORD *)a1[51];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[49];
  a1[49] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[46];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[44];
  a1[44] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[40];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[38];
  a1[38] = 0;
  if (v10)
    operator delete(v10);
  v11 = (void *)a1[35];
  if (v11)
  {
    a1[36] = v11;
    operator delete(v11);
  }
  v12 = (_QWORD *)a1[30];
  if (v12)
  {
    do
    {
      v20 = (_QWORD *)*v12;
      v21 = (_QWORD *)v12[6];
      if (v21)
      {
        do
        {
          v22 = (_QWORD *)*v21;
          operator delete(v21);
          v21 = v22;
        }
        while (v22);
      }
      v23 = (void *)v12[4];
      v12[4] = 0;
      if (v23)
        operator delete(v23);
      operator delete(v12);
      v12 = v20;
    }
    while (v20);
  }
  v13 = (void *)a1[28];
  a1[28] = 0;
  if (v13)
    operator delete(v13);
  v14 = (void *)a1[24];
  if (v14)
  {
    a1[25] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[21];
  if (v15)
  {
    a1[22] = v15;
    operator delete(v15);
  }
  v16 = a1[18];
  if (v16)
  {
    v17 = a1[19];
    v18 = (void *)a1[18];
    if (v17 != v16)
    {
      v19 = a1[19];
      do
      {
        v25 = *(void **)(v19 - 24);
        v19 -= 24;
        v24 = v25;
        if (v25)
        {
          *(_QWORD *)(v17 - 16) = v24;
          operator delete(v24);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)a1[18];
    }
    a1[19] = v16;
    operator delete(v18);
  }
  v26 = (void *)a1[15];
  if (v26)
  {
    a1[16] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[12];
  if (v27)
  {
    a1[13] = v27;
    operator delete(v27);
  }
  v28 = (void *)a1[9];
  if (v28)
  {
    a1[10] = v28;
    operator delete(v28);
  }
  v29 = a1[6];
  if (v29)
  {
    v30 = a1[7];
    v31 = (void *)a1[6];
    if (v30 != v29)
    {
      v32 = a1[7];
      do
      {
        v34 = *(void **)(v32 - 24);
        v32 -= 24;
        v33 = v34;
        if (v34)
        {
          *(_QWORD *)(v30 - 16) = v33;
          operator delete(v33);
        }
        v30 = v32;
      }
      while (v32 != v29);
      v31 = (void *)a1[6];
    }
    a1[7] = v29;
    operator delete(v31);
  }
  v35 = (void *)a1[3];
  if (v35)
  {
    a1[4] = v35;
    operator delete(v35);
  }
  return a1;
}

_QWORD *sub_22388B1A4(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  *a1 = &off_24EC5BDA0;
  v2 = (void *)a1[2618];
  if (v2)
  {
    a1[2619] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[2615];
  if (v3)
  {
    v4 = (_QWORD *)a1[2616];
    v5 = (void *)a1[2615];
    if (v4 != v3)
    {
      do
      {
        v6 = (_QWORD *)*(v4 - 4);
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v9 = (void *)*(v4 - 6);
        v4 -= 6;
        v8 = v9;
        *v4 = 0;
        if (v9)
          operator delete(v8);
      }
      while (v4 != v3);
      v5 = (void *)a1[2615];
    }
    a1[2616] = v3;
    operator delete(v5);
  }
  v10 = (_QWORD *)a1[2611];
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)a1[2609];
  a1[2609] = 0;
  if (v12)
    operator delete(v12);
  v13 = (void *)a1[2606];
  if (v13)
  {
    a1[2607] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[2603];
  if (v14)
  {
    a1[2604] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[2600];
  if (v15)
  {
    a1[2601] = v15;
    operator delete(v15);
  }
  return sub_223E8A464(a1);
}

void sub_22388B29C(_QWORD *a1)
{
  sub_22388B1A4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22388B2C0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;

  *(_QWORD *)(a1 + 176) = 0x80000000;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD **)(a1 + 20928);
  v3 = *(_QWORD **)(a1 + 20920);
  while (v2 != v3)
  {
    v4 = (_QWORD *)*(v2 - 4);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v7 = (void *)*(v2 - 6);
    v2 -= 6;
    v6 = v7;
    *v2 = 0;
    if (v7)
      operator delete(v6);
  }
  *(_QWORD *)(a1 + 20928) = v3;
  *(_QWORD *)(a1 + 20808) = *(_QWORD *)(a1 + 20800);
  *(_QWORD *)(a1 + 20832) = *(_QWORD *)(a1 + 20824);
  *(_QWORD *)(a1 + 20856) = *(_QWORD *)(a1 + 20848);
  *(_QWORD *)(a1 + 20952) = *(_QWORD *)(a1 + 20944);
}

void sub_22388B398()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22388B3AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B570;
  result[1] = v3;
  return result;
}

uint64_t sub_22388B3E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B570;
  a2[1] = v2;
  return result;
}

BOOL sub_22388B3FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _OWORD *v6;
  _BOOL8 v7;
  unsigned __int8 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  size_t v15;
  const char *v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  std::string::size_type *p_size;
  std::string *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  char *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  char *v38;
  size_t v39;
  char *shared_owners;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::string *v58;
  std::string *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *exception;
  _QWORD *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  std::string v70;
  std::string *v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  void *__p;
  void *v81;
  _OWORD *v82;
  char v83;
  std::string v84;
  __int128 v85;
  void *v86;
  char v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  char v93;
  char v94;
  char v95;
  std::string v96;
  unint64_t v97;
  __int128 v98;
  size_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(v3 + 1224);
  v85 = *(_OWORD *)a2;
  if (!sub_223340F28(v4, (uint64_t)&v85))
    return 0;
  sub_223822434(*(_QWORD **)(v3 + 1224), *a2, a2[1])[12] = *(_QWORD *)(v3 + 1600);
  sub_223FF97F8(v3 + 56, &v84);
  v5 = *(_QWORD **)(v3 + 1224);
  __p = 0;
  v6 = operator new(0x10uLL);
  v81 = v6 + 1;
  v82 = v6 + 1;
  *v6 = *(_OWORD *)a2;
  __p = v6;
  v83 = 1;
  sub_22381AB84(v5, (uint64_t)&v84, (uint64_t)&__p, *(_QWORD *)(v3 + 1528), 1, (uint64_t)&v85);
  if (v83 && __p)
  {
    v81 = __p;
    operator delete(__p);
  }
  v7 = v95 != 0;
  if (!v95)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error saving kd to %s. Error: %s", 0x20uLL);
    sub_22384BA54(&v79);
    if (**(int **)(v79 + 56) > 5)
      goto LABEL_101;
    v9 = *(unsigned __int8 *)(v79 + 72);
    v10 = sub_22322F254(v79, "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (!v9 && !v10)
      goto LABEL_101;
    v72[0] = &v79;
    v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v72[2] = std::chrono::system_clock::now().__d_.__rep_;
    v73 = 5;
    v74 = "unknown file";
    v75 = 197;
    v77 = 0;
    v78 = 0;
    v76 = "unknown function";
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v84;
    else
      v12 = (std::string *)v84.__r_.__value_.__r.__words[0];
    if (v95)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    sub_22456A158((uint64_t)&v85, &v70);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v70;
    else
      v13 = (std::string *)v70.__r_.__value_.__r.__words[0];
    v71 = v13;
    v14 = *(_QWORD *)v72[0];
    if (*(char *)(*(_QWORD *)v72[0] + 39) < 0)
    {
      v16 = *(const char **)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
    }
    else
    {
      v15 = *(unsigned __int8 *)(*(_QWORD *)v72[0] + 39);
      v16 = (const char *)(*(_QWORD *)v72[0] + 16);
    }
    v68 = *(_QWORD *)v72[0] + 16;
    v69 = *(_QWORD *)v72[0];
    v17 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v96);
      if ((_BYTE)v97)
      {
        *(std::string *)byte_255788F40 = v96;
      }
      else
      {
        byte_255788F40[23] = 14;
        strcpy(byte_255788F40, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v18 = byte_255788F40;
    else
      v18 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v19 = byte_255788F40[23];
    else
      v19 = *(_QWORD *)&byte_255788F40[8];
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v18, v16);
    p_size = &v96.__r_.__value_.__l.__size_;
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v19 >= 0x17)
    {
      v67 = v16;
      v21 = v12;
      v22 = v11;
      v23 = v9;
      v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v24 = v19 | 7;
      v25 = v24 + 1;
      p_size = (std::string::size_type *)operator new(v24 + 1);
      v96.__r_.__value_.__r.__words[2] = v19;
      v97 = v25 | 0x8000000000000000;
      v96.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      v9 = v23;
      v11 = v22;
      v12 = v21;
      v16 = v67;
    }
    else
    {
      HIBYTE(v97) = v19;
      if (!v19)
      {
LABEL_37:
        *((_BYTE *)p_size + v19) = 0;
        LOBYTE(v98) = 1;
        v26 = (char *)&v98 + 8;
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v15 >= 0x17)
        {
          v27 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v27 = v15 | 7;
          v28 = v27 + 1;
          v26 = (char *)operator new(v27 + 1);
          v99 = v15;
          v100 = v28 | 0x8000000000000000;
          *((_QWORD *)&v98 + 1) = v26;
        }
        else
        {
          HIBYTE(v100) = v15;
          if (!v15)
            goto LABEL_45;
        }
        memmove(v26, v16, v15);
LABEL_45:
        v26[v15] = 0;
        v101 = 1;
        v29 = v96.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v100) < 0)
          operator delete(*((void **)&v98 + 1));
        if ((_BYTE)v98 && SHIBYTE(v97) < 0)
          operator delete((void *)v96.__r_.__value_.__l.__size_);
        if (v96.__r_.__value_.__r.__words[0])
          os_release(v96.__r_.__value_.__l.__data_);
        if (v11 && *(_QWORD *)(v11 + 24))
        {
          v30 = (char *)v12;
          v31 = _os_log_pack_size();
          v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
          v33 = (std::__shared_weak_count *)operator new();
          v33->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v33->__shared_weak_owners_ = 0;
          v33[1].__vftable = v32;
          sub_22388C0C0((uint64_t)&v96, v30, (const char **)&v71);
          v66 = v9;
          v35 = (char *)operator new(0x50uLL);
          v36 = (std::__shared_weak_count *)v35;
          *((_QWORD *)v35 + 1) = 0;
          v37 = (unint64_t *)(v35 + 8);
          *((_QWORD *)v35 + 2) = 0;
          *(_QWORD *)v35 = &off_24EC20730;
          *((_QWORD *)v35 + 3) = off_24EC20780;
          v38 = v35 + 24;
          v39 = v99;
          *((_QWORD *)v35 + 6) = v97;
          shared_owners = v35 + 32;
          *((_OWORD *)v35 + 2) = *(_OWORD *)&v96.__r_.__value_.__r.__words[1];
          v41 = v35 + 56;
          *(_OWORD *)(v35 + 56) = v98;
          *((_QWORD *)v35 + 9) = v39;
          do
            v42 = __ldxr(p_shared_owners);
          while (__stxr(v42 + 1, p_shared_owners));
          do
            v43 = __ldxr(v37);
          while (__stxr(v43 + 1, v37));
          do
            v44 = __ldaxr(v37);
          while (__stlxr(v44 - 1, v37));
          if (!v44)
          {
            (*(void (**)(char *))(*(_QWORD *)v35 + 16))(v35);
            std::__shared_weak_count::__release_weak(v36);
          }
          do
            v45 = __ldaxr(p_shared_owners);
          while (__stlxr(v45 - 1, p_shared_owners));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          if (SHIBYTE(v36[2].__vftable) < 0)
            shared_owners = (char *)v36[1].__shared_owners_;
          if (SHIBYTE(v36[3].__vftable) < 0)
            v41 = (char *)v36[2].__shared_owners_;
          v46 = _os_log_pack_fill();
          *(_DWORD *)v46 = 136315394;
          *(_QWORD *)(v46 + 4) = shared_owners;
          *(_WORD *)(v46 + 12) = 2080;
          *(_QWORD *)(v46 + 14) = v41;
          v47 = operator new();
          v48 = *(unsigned __int8 *)(v69 + 39);
          v49 = v68;
          if ((v48 & 0x80u) != 0)
          {
            v49 = *(_QWORD *)(v69 + 16);
            v48 = *(_QWORD *)(v69 + 24);
          }
          *(_QWORD *)v47 = v32;
          *(_QWORD *)(v47 + 8) = v32;
          *(_QWORD *)(v47 + 16) = v33;
          *(_QWORD *)(v47 + 24) = v38;
          *(_QWORD *)(v47 + 32) = v36;
          *(_QWORD *)(v47 + 40) = v49;
          *(_QWORD *)(v47 + 48) = v48;
          *(_BYTE *)(v47 + 56) = 16;
          v96.__r_.__value_.__r.__words[0] = v47;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v96);
          v50 = v96.__r_.__value_.__r.__words[0];
          v96.__r_.__value_.__r.__words[0] = 0;
          v9 = v66;
          if (v50)
          {
            v51 = *(std::__shared_weak_count **)(v50 + 32);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = *(std::__shared_weak_count **)(v50 + 16);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            MEMORY[0x227684CE8](v50, 0x10F0C40B62ED6C6);
          }
        }
        else
        {
          os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
          LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
          WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v71;
          v57 = (void *)_os_log_send_and_compose_impl();
          if (v57)
            free(v57);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (v9)
        {
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v58 = &v84;
          else
            v58 = (std::string *)v84.__r_.__value_.__r.__words[0];
          if (v95)
          {
            v65 = __cxa_allocate_exception(8uLL);
            *v65 = &off_24EC1FCC0;
            __cxa_throw(v65, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
          }
          sub_22456A158((uint64_t)&v85, &v96);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v59 = &v96;
          else
            v59 = (std::string *)v96.__r_.__value_.__r.__words[0];
          sub_22322C138((uint64_t)v72, "Error saving kd to %s. Error: %s", (const char *)v58, (const char *)v59);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          sub_223182C08((uint64_t)v72);
        }
        sub_223182C08((uint64_t)v72);
        v60 = v78;
        if (v78)
        {
          v61 = (unint64_t *)&v78->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        goto LABEL_101;
      }
    }
    memmove(p_size, v18, v19);
    goto LABEL_37;
  }
  sub_2231AFD68((unsigned __int8 **)(v3 + 1776), (unsigned __int8 *)a2);
LABEL_101:
  if (!v95 && v94)
  {
    if (v93)
    {
      if (v92 < 0)
        operator delete(v91);
      if (v90 < 0)
        operator delete(v89);
    }
    if (v88 && v87 < 0)
      operator delete(v86);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  return v7;
}

void sub_22388BD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;
  __int16 a67;
  __int16 a69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;

  __cxa_guard_abort(&qword_255788F58);
  if (a21 < 0)
    operator delete(__p);
  sub_223182C08((uint64_t)&a23);
  v70 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v71 = (unint64_t *)(a31 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (!(_BYTE)a69 && (_BYTE)a67)
  {
    if (a65)
    {
      if (a64 < 0)
        operator delete(a59);
      if (a57 < 0)
        operator delete(a52);
    }
    if (a51 && a50 < 0)
      operator delete(a45);
  }
  if (a42 < 0)
  {
    operator delete(a37);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22388C048(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22388C0B4()
{
  return &unk_24EC5B5E0;
}

unint64_t sub_22388C0C0(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_22388C240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22388C260()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22388C274(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B600;
  result[1] = v3;
  return result;
}

uint64_t sub_22388C2A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B600;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22388C2C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *result;
  int v6;
  int v7;
  unint64_t v8;
  void **v9;
  size_t v10;
  char v11;
  size_t v12;
  void **v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  size_t v37;
  size_t v38;
  _BYTE *v39;
  void *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  char *v50;
  char *shared_owners;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  const char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  const char *v76;
  int v77;
  const char *v78;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void *__dst[2];
  int64_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  _QWORD v92[3];
  const void *v93;
  uint64_t v94;
  const void *v95;
  unint64_t v96;
  void *v97;
  char v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  _BYTE v102[24];
  unint64_t v103;
  char v104;
  void *v105[2];
  unint64_t v106;
  char v107;
  _QWORD v108[5];

  v108[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(v3 + 1224);
  v91 = *(_OWORD *)a2;
  result = sub_223340F28(v4, (uint64_t)&v91);
  if (result)
  {
    sub_22384BB48(&v89);
    if (**(int **)(v89 + 56) > 3
      || (v6 = *(unsigned __int8 *)(v89 + 72),
          v7 = *(_BYTE *)(v89 + 72) != 0,
          v8 = sub_22322F254(v89, "OSLogSurrogateAppender", 1, 0),
          ((v8 == 0) & ~v7) != 0))
    {
LABEL_113:
      v72 = sub_223822434(*(_QWORD **)(v3 + 1224), *a2, a2[1]);
      *((_WORD *)v72 + 56) = 0x2000;
      *((_BYTE *)v72 + 114) = 0;
      return sub_2231A9984((uint64_t **)(v3 + 1824), (unsigned __int8 *)a2, a2);
    }
    sub_223195210((uint64_t)&v91);
    LODWORD(v103) = 0;
    sub_223845034(v102, "Invalidating keyframe: ");
    sub_22319B83C((uint64_t)__dst, (uint64_t)v102, (unsigned __int8 *)a2);
    if ((_DWORD)v103 == -1)
      sub_22316DD70();
    __dst[0] = &v90;
    ((void (*)(void **__return_ptr, void **, _BYTE *))off_24EC5B328[v103])(__p, __dst, v102);
    if ((_DWORD)v103 != -1)
      ((void (*)(void **, _BYTE *))off_24EC5B2E0[v103])(__dst, v102);
    v77 = v6;
    if (rep >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = strlen((const char *)v9);
    sub_2231813E8(v92, (uint64_t)v9, v10);
    if (SHIBYTE(rep) < 0)
    {
      operator delete(__p[0]);
      v11 = v100;
      if ((v100 & 0x10) == 0)
      {
LABEL_12:
        if ((v11 & 8) == 0)
        {
          v12 = 0;
          HIBYTE(v88) = 0;
          v13 = __dst;
          goto LABEL_25;
        }
        v15 = v93;
        v12 = v94 - (_QWORD)v93;
        if ((unint64_t)(v94 - (_QWORD)v93) > 0x7FFFFFFFFFFFFFF7)
LABEL_69:
          sub_22316DBC0();
LABEL_18:
        if (v12 >= 0x17)
        {
          v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v16 = v12 | 7;
          v17 = v16 + 1;
          v13 = (void **)operator new(v16 + 1);
          __dst[1] = (void *)v12;
          v88 = v17 | 0x8000000000000000;
          __dst[0] = v13;
        }
        else
        {
          HIBYTE(v88) = v12;
          v13 = __dst;
          if (!v12)
          {
LABEL_25:
            *((_BYTE *)v13 + v12) = 0;
            __p[0] = &v89;
            __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
            rep = std::chrono::system_clock::now().__d_.__rep_;
            v81 = 3;
            v82 = "unknown file";
            v83 = 237;
            v85 = 0;
            v86 = 0;
            v84 = "unknown function";
            v18 = (void **)__dst[0];
            if (v88 >= 0)
              v18 = __dst;
            v19 = *(_QWORD *)__p[0];
            v20 = (const char *)(*(_QWORD *)__p[0] + 16);
            v76 = v20;
            v78 = (const char *)v18;
            if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
            {
              v20 = *(const char **)(v19 + 16);
              v21 = *(_QWORD *)(v19 + 24);
            }
            else
            {
              v21 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
            }
            v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v102);
              if ((_BYTE)v103)
              {
                *(_OWORD *)byte_255788F40 = *(_OWORD *)v102;
                *(_QWORD *)&byte_255788F40[16] = *(_QWORD *)&v102[16];
              }
              else
              {
                byte_255788F40[23] = 14;
                strcpy(byte_255788F40, "com.apple.cv3d");
              }
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
            if (byte_255788F40[23] >= 0)
              v23 = byte_255788F40;
            else
              v23 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v24 = byte_255788F40[23];
            else
              v24 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)v102 = os_log_create(v23, v20);
            v25 = &v102[8];
            if (v24 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v24 >= 0x17)
            {
              v26 = v8;
              v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17)
                v27 = v24 | 7;
              v28 = v27 + 1;
              v25 = operator new(v27 + 1);
              *(_QWORD *)&v102[16] = v24;
              v103 = v28 | 0x8000000000000000;
              *(_QWORD *)&v102[8] = v25;
              v8 = v26;
            }
            else
            {
              HIBYTE(v103) = v24;
              if (!v24)
              {
LABEL_45:
                v25[v24] = 0;
                v104 = 1;
                v29 = v105;
                if (v21 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v21 >= 0x17)
                {
                  v30 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v21 | 7) != 0x17)
                    v30 = v21 | 7;
                  v31 = v30 + 1;
                  v29 = (void **)operator new(v30 + 1);
                  v105[1] = (void *)v21;
                  v106 = v31 | 0x8000000000000000;
                  v105[0] = v29;
                }
                else
                {
                  HIBYTE(v106) = v21;
                  if (!v21)
                  {
LABEL_53:
                    *((_BYTE *)v29 + v21) = 0;
                    v107 = 1;
                    v32 = *(NSObject **)v102;
                    if (SHIBYTE(v106) < 0)
                      operator delete(v105[0]);
                    if (v104 && SHIBYTE(v103) < 0)
                      operator delete(*(void **)&v102[8]);
                    if (*(_QWORD *)v102)
                      os_release(*(void **)v102);
                    if (!v8 || !*(_QWORD *)(v8 + 24))
                    {
                      os_log_type_enabled(v32, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v102 = 136315138;
                      *(_QWORD *)&v102[4] = v78;
                      v40 = (void *)_os_log_send_and_compose_impl();
                      v41 = v77;
                      if (v40)
                        free(v40);
                      goto LABEL_99;
                    }
                    v33 = _os_log_pack_size();
                    v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
                    v35 = (std::__shared_weak_count *)operator new();
                    v35->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
                    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v35->__shared_weak_owners_ = 0;
                    v35[1].__vftable = v34;
                    v74 = v34;
                    v37 = strlen(v78);
                    v75 = v35;
                    if (v37 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v38 = v37;
                    if (v37 >= 0x17)
                    {
                      v42 = v8;
                      v43 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v37 | 7) != 0x17)
                        v43 = v37 | 7;
                      v44 = v43 + 1;
                      v39 = operator new(v43 + 1);
                      *(_QWORD *)&v102[8] = v38;
                      *(_QWORD *)&v102[16] = v44 | 0x8000000000000000;
                      *(_QWORD *)v102 = v39;
                      v8 = v42;
                    }
                    else
                    {
                      v102[23] = v37;
                      v39 = v102;
                      if (!v37)
                      {
LABEL_74:
                        v73 = v8;
                        v39[v38] = 0;
                        v108[0] = *(_QWORD *)&v102[8];
                        v45 = *(_QWORD *)v102;
                        *(_QWORD *)((char *)v108 + 7) = *(_QWORD *)&v102[15];
                        v46 = v102[23];
                        v47 = operator new(0x38uLL);
                        v48 = (std::__shared_weak_count *)v47;
                        v47[1] = 0;
                        v49 = v47 + 1;
                        v47[3] = off_24EC1FA48;
                        v50 = (char *)(v47 + 3);
                        v47[2] = 0;
                        v47[4] = v45;
                        shared_owners = (char *)(v47 + 4);
                        *v47 = &off_24EC1F9F8;
                        v47[5] = v108[0];
                        *(_QWORD *)((char *)v47 + 47) = *(_QWORD *)((char *)v108 + 7);
                        *((_BYTE *)v47 + 55) = v46;
                        do
                          v52 = __ldxr(p_shared_owners);
                        while (__stxr(v52 + 1, p_shared_owners));
                        do
                          v53 = __ldxr(v49);
                        while (__stxr(v53 + 1, v49));
                        do
                          v54 = __ldaxr(v49);
                        while (__stlxr(v54 - 1, v49));
                        if (!v54)
                        {
                          (*(void (**)(_QWORD *))(*v47 + 16))(v47);
                          std::__shared_weak_count::__release_weak(v48);
                        }
                        do
                          v55 = __ldaxr(p_shared_owners);
                        while (__stlxr(v55 - 1, p_shared_owners));
                        if (!v55)
                        {
                          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                          std::__shared_weak_count::__release_weak(v75);
                        }
                        if (SHIBYTE(v48[2].__vftable) < 0)
                          shared_owners = (char *)v48[1].__shared_owners_;
                        v56 = _os_log_pack_fill();
                        *(_DWORD *)v56 = 136315138;
                        *(_QWORD *)(v56 + 4) = shared_owners;
                        v57 = operator new();
                        v58 = *(unsigned __int8 *)(v19 + 39);
                        v59 = v76;
                        if ((v58 & 0x80u) != 0)
                        {
                          v59 = *(const char **)(v19 + 16);
                          v58 = *(_QWORD *)(v19 + 24);
                        }
                        *(_QWORD *)v57 = v74;
                        *(_QWORD *)(v57 + 8) = v74;
                        *(_QWORD *)(v57 + 16) = v75;
                        *(_QWORD *)(v57 + 24) = v50;
                        *(_QWORD *)(v57 + 32) = v48;
                        *(_QWORD *)(v57 + 40) = v59;
                        *(_QWORD *)(v57 + 48) = v58;
                        *(_BYTE *)(v57 + 56) = 1;
                        *(_QWORD *)v102 = v57;
                        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v73 + 24) + 40))(*(_QWORD *)(v73 + 24), v102);
                        v60 = *(_QWORD *)v102;
                        *(_QWORD *)v102 = 0;
                        v41 = v77;
                        if (v60)
                        {
                          v61 = *(std::__shared_weak_count **)(v60 + 32);
                          if (v61)
                          {
                            v62 = (unint64_t *)&v61->__shared_owners_;
                            do
                              v63 = __ldaxr(v62);
                            while (__stlxr(v63 - 1, v62));
                            if (!v63)
                            {
                              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                              std::__shared_weak_count::__release_weak(v61);
                            }
                          }
                          v64 = *(std::__shared_weak_count **)(v60 + 16);
                          if (v64)
                          {
                            v65 = (unint64_t *)&v64->__shared_owners_;
                            do
                              v66 = __ldaxr(v65);
                            while (__stlxr(v66 - 1, v65));
                            if (!v66)
                            {
                              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                              std::__shared_weak_count::__release_weak(v64);
                            }
                          }
                          MEMORY[0x227684CE8](v60, 0x10F0C40B62ED6C6);
                        }
LABEL_99:
                        if (v41)
                        {
                          v67 = (const char *)__dst;
                          if (v88 < 0)
                            v67 = (const char *)__dst[0];
                          sub_22322C138((uint64_t)__p, "%s", v67);
                          sub_223182C08((uint64_t)__p);
                        }
                        sub_223182C08((uint64_t)__p);
                        v68 = v86;
                        if (v86)
                        {
                          v69 = (unint64_t *)&v86->__shared_owners_;
                          do
                            v70 = __ldaxr(v69);
                          while (__stlxr(v70 - 1, v69));
                          if (!v70)
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                          }
                        }
                        if (SHIBYTE(v88) < 0)
                          operator delete(__dst[0]);
                        *(_QWORD *)&v91 = *MEMORY[0x24BEDB7F0];
                        v71 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(_QWORD *)((char *)&v92[-2] + *(_QWORD *)(v91 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v92[0] = v71;
                        v92[1] = MEMORY[0x24BEDB848] + 16;
                        if (v98 < 0)
                          operator delete(v97);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x227684BE0](&v101);
                        goto LABEL_113;
                      }
                    }
                    memcpy(v39, v78, v38);
                    goto LABEL_74;
                  }
                }
                memmove(v29, v20, v21);
                goto LABEL_53;
              }
            }
            memmove(v25, v23, v24);
            goto LABEL_45;
          }
        }
        memmove(v13, v15, v12);
        goto LABEL_25;
      }
    }
    else
    {
      v11 = v100;
      if ((v100 & 0x10) == 0)
        goto LABEL_12;
    }
    v14 = v99;
    if (v99 < v96)
    {
      v99 = v96;
      v14 = v96;
    }
    v15 = v95;
    v12 = v14 - (_QWORD)v95;
    if (v14 - (unint64_t)v95 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_69;
    goto LABEL_18;
  }
  return result;
}

void sub_22388CC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t v62;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a19);
  v59 = a30;
  if (a30)
  {
    p_shared_owners = (unint64_t *)&a30->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (a36 < 0)
    operator delete(__p);
  a39 = *MEMORY[0x24BEDB7F0];
  v62 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a39 + *(_QWORD *)(a39 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a41 = v62;
  a42 = MEMORY[0x24BEDB848] + 16;
  if (a55 < 0)
    operator delete(a50);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&a58);
  _Unwind_Resume(a1);
}

void sub_22388CF58(uint64_t a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x22388CF70);
}

uint64_t sub_22388CF78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine10InitializeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22388CFE4()
{
  return &unk_24EC5B670;
}

uint64_t sub_22388CFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2231AD9F0(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_22388D0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_22388D128(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B2E0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_22388D21C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22388D230(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B690;
  result[1] = v3;
  return result;
}

uint64_t sub_22388D264(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B690;
  a2[1] = v2;
  return result;
}

double sub_22388D280@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  sub_22319597C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1232), a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t sub_22388D2BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_10")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_10" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_10"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_10" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22388D328()
{
  return &unk_24EC5B700;
}

_DWORD *sub_22388D334(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5B2E0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_QWORD *sub_22388D424(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = a1 + 25;
  v3 = (_QWORD *)a1[28];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[23];
  if (v5 == a1 + 20)
  {
    v6 = 4;
    v5 = a1 + 20;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[19];
  if (v7 == a1 + 16)
  {
    v8 = 4;
    v7 = a1 + 16;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[13];
  if (v9 == a1 + 10)
  {
    v10 = 4;
    v9 = a1 + 10;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[8];
  if (v11 == a1 + 5)
  {
    v12 = 4;
    v11 = a1 + 5;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[4];
  if (v13 == a1 + 1)
  {
    v14 = 4;
    v13 = a1 + 1;
    goto LABEL_30;
  }
  if (v13)
  {
    v14 = 5;
LABEL_30:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

_QWORD *sub_22388D564(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a1 + 1;
  v5 = (_QWORD *)a2[4];
  if (v5)
  {
    if (v5 == a2 + 1)
    {
      a1[4] = v4;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[4] + 24))(a2[4], v4);
      v6 = a1 + 5;
      v7 = a2[8];
      if (!v7)
      {
LABEL_10:
        a1[8] = v7;
        goto LABEL_12;
      }
    }
    else
    {
      a1[4] = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      v6 = a1 + 5;
      v7 = a2[8];
      if (!v7)
        goto LABEL_10;
    }
  }
  else
  {
    a1[4] = 0;
    v6 = a1 + 5;
    v7 = a2[8];
    if (!v7)
      goto LABEL_10;
  }
  if ((_QWORD *)v7 != a2 + 5)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    goto LABEL_10;
  }
  a1[8] = v6;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[8] + 24))(a2[8], v6);
LABEL_12:
  a1[9] = a2[9];
  v8 = a2[13];
  if (!v8)
  {
LABEL_15:
    a1[13] = v8;
    return a1;
  }
  if ((_QWORD *)v8 != a2 + 10)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    goto LABEL_15;
  }
  a1[13] = a1 + 10;
  (*(void (**)(_QWORD))(*(_QWORD *)a2[13] + 24))(a2[13]);
  return a1;
}

void sub_22388D698(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 64);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22388D70C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  _OWORD *v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _OWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD v332[3];
  _QWORD *v333;
  _QWORD v334[3];
  _QWORD *v335;
  uint64_t v336;
  _QWORD v337[3];
  _QWORD *v338;
  uint64_t v339;
  _BYTE v340[24];
  _BYTE *v341;
  _BYTE v342[24];
  _BYTE *v343;
  uint64_t v344;
  _BYTE v345[24];
  _BYTE *v346;
  uint64_t v347;
  _QWORD v348[3];
  _QWORD *v349;
  _QWORD v350[3];
  _QWORD *v351;
  uint64_t v352;
  _QWORD v353[3];
  _QWORD *v354;
  uint64_t v355;
  _BYTE v356[24];
  _BYTE *v357;
  _BYTE v358[24];
  _BYTE *v359;
  uint64_t v360;
  _BYTE v361[24];
  _BYTE *v362;
  _QWORD *v363;
  _QWORD v364[3];
  _QWORD *v365;
  _QWORD v366[3];
  _QWORD *v367;
  _QWORD *v368;
  _QWORD v369[3];
  _QWORD *v370;
  _QWORD *v371;
  _BYTE v372[24];
  _BYTE *v373;
  _BYTE v374[24];
  _BYTE *v375;
  uint64_t v376;
  _BYTE v377[24];
  _BYTE *v378;
  _QWORD *v379;
  _QWORD v380[3];
  _QWORD *v381;
  _QWORD v382[3];
  _QWORD *v383;
  _QWORD *v384;
  _QWORD v385[3];
  _QWORD *v386;
  _QWORD *v387;
  _BYTE v388[24];
  _BYTE *v389;
  _BYTE v390[24];
  _BYTE *v391;
  uint64_t v392;
  _BYTE v393[24];
  _BYTE *v394;
  uint64_t v395;
  _QWORD v396[3];
  _QWORD *v397;
  _QWORD v398[3];
  _QWORD *v399;
  uint64_t v400;
  _QWORD v401[3];
  _QWORD *v402;
  uint64_t v403;
  _QWORD v404[3];
  _QWORD *v405;
  _QWORD v406[3];
  _QWORD *v407;
  uint64_t v408;
  _QWORD v409[3];
  _QWORD *v410;
  uint64_t v411;
  _QWORD v412[3];
  _QWORD *v413;
  _QWORD v414[3];
  _QWORD *v415;
  uint64_t v416;
  _QWORD v417[3];
  _QWORD *v418;
  uint64_t v419;
  _QWORD v420[3];
  _QWORD *v421;
  _QWORD v422[3];
  _QWORD *v423;
  uint64_t v424;
  _QWORD v425[3];
  _QWORD *v426;
  uint64_t v427;
  _QWORD v428[3];
  _QWORD *v429;
  _QWORD v430[3];
  _QWORD *v431;
  uint64_t v432;
  _QWORD v433[3];
  _QWORD *v434;
  uint64_t v435;
  _QWORD v436[3];
  _QWORD *v437;
  _QWORD v438[3];
  _QWORD *v439;
  uint64_t v440;
  _QWORD v441[3];
  _QWORD *v442;
  uint64_t v443;
  _QWORD v444[3];
  _QWORD *v445;
  _QWORD v446[3];
  _QWORD *v447;
  uint64_t v448;
  _QWORD v449[3];
  _QWORD *v450;
  uint64_t v451;
  _QWORD v452[3];
  _QWORD *v453;
  _QWORD v454[3];
  _QWORD *v455;
  uint64_t v456;
  _QWORD v457[3];
  _QWORD *v458;
  uint64_t v459;
  _BYTE v460[24];
  _BYTE *v461;
  _BYTE v462[24];
  _BYTE *v463;
  uint64_t v464;
  _BYTE v465[24];
  _BYTE *v466;
  uint64_t v467;
  _BYTE v468[24];
  _BYTE *v469;
  _BYTE v470[24];
  _BYTE *v471;
  uint64_t v472;
  _BYTE v473[24];
  _BYTE *v474;
  uint64_t v475;
  _BYTE v476[24];
  _BYTE *v477;
  _BYTE v478[24];
  _BYTE *v479;
  uint64_t v480;
  _BYTE v481[24];
  _BYTE *v482;
  uint64_t v483;
  _BYTE v484[24];
  _BYTE *v485;
  _BYTE v486[24];
  _BYTE *v487;
  uint64_t v488;
  _BYTE v489[24];
  _BYTE *v490;
  _QWORD *v491;
  _BYTE v492[24];
  _BYTE *v493;
  _BYTE v494[24];
  _BYTE *v495;
  _QWORD *v496;
  _BYTE v497[24];
  _BYTE *v498;
  _QWORD *v499;
  _BYTE v500[24];
  _BYTE *v501;
  _BYTE v502[24];
  _BYTE *v503;
  uint64_t v504;
  _BYTE v505[24];
  _BYTE *v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t v523;
  _BYTE v524[24];
  _BYTE *v525;
  _BYTE v526[24];
  _BYTE *v527;
  _BYTE v528[24];
  _BYTE *v529;
  _BYTE v530[24];
  _BYTE *v531;
  _BYTE v532[24];
  _BYTE *v533;
  _BYTE v534[24];
  _BYTE *v535;
  uint64_t v536;
  _BYTE v537[24];
  _BYTE *v538;
  _BYTE v539[24];
  _BYTE *v540;
  _BYTE v541[24];
  _BYTE *v542;
  _BYTE v543[24];
  _BYTE *v544;
  _BYTE v545[24];
  _BYTE *v546;
  _BYTE v547[24];
  _BYTE *v548;
  uint64_t v549;
  _BYTE v550[24];
  _BYTE *v551;
  _BYTE v552[24];
  _BYTE *v553;
  _BYTE v554[24];
  _BYTE *v555;
  _BYTE v556[24];
  _BYTE *v557;
  _BYTE v558[24];
  _BYTE *v559;
  _BYTE v560[24];
  _BYTE *v561;
  uint64_t v562;
  _BYTE v563[24];
  _BYTE *v564;
  _BYTE v565[24];
  _BYTE *v566;
  _BYTE v567[24];
  _BYTE *v568;
  _BYTE v569[24];
  _BYTE *v570;
  _BYTE v571[24];
  _BYTE *v572;
  _BYTE v573[24];
  _BYTE *v574;
  _QWORD *v575;
  _BYTE v576[24];
  _BYTE *v577;
  _BYTE v578[24];
  _BYTE *v579;
  uint64_t v580;
  _BYTE v581[24];
  _BYTE *v582;
  uint64_t v583;
  _BYTE v584[24];
  _BYTE *v585;
  _BYTE v586[24];
  _BYTE *v587;
  uint64_t v588;
  _BYTE v589[24];
  _BYTE *v590;
  _QWORD *v591;
  _BYTE v592[24];
  _BYTE *v593;
  _BYTE v594[24];
  _BYTE *v595;
  _QWORD *v596;
  _BYTE v597[24];
  _BYTE *v598;
  _QWORD *v599;
  _BYTE v600[24];
  _BYTE *v601;
  _BYTE v602[24];
  _BYTE *v603;
  uint64_t v604;
  _BYTE v605[24];
  _BYTE *v606;
  uint64_t v607;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v607 = *MEMORY[0x24BDAC8D0];
  *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  sub_22388D564(&v379, v3);
  sub_22388D564(&v387, v4 + 15);
  sub_22388D564(&v363, v2);
  sub_22388D564(&v371, v2 + 15);
  v6 = (uint64_t)v381;
  v491 = v379;
  if (!v381)
    goto LABEL_4;
  if (v381 != v380)
  {
    v6 = (*(uint64_t (**)(void))(*v381 + 16))();
LABEL_4:
    v493 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v493 = v492;
  (*(void (**)(_QWORD *, _BYTE *))(v380[0] + 24))(v380, v492);
LABEL_6:
  v7 = (uint64_t)v383;
  if (!v383)
  {
LABEL_9:
    v495 = (_BYTE *)v7;
    goto LABEL_11;
  }
  if (v383 != v382)
  {
    v7 = (*(uint64_t (**)(void))(*v383 + 16))();
    goto LABEL_9;
  }
  v495 = v494;
  (*(void (**)(_QWORD *, _BYTE *))(v382[0] + 24))(v382, v494);
LABEL_11:
  v8 = (uint64_t)v386;
  v496 = v384;
  if (!v386)
  {
LABEL_14:
    v498 = (_BYTE *)v8;
    goto LABEL_16;
  }
  if (v386 != v385)
  {
    v8 = (*(uint64_t (**)(void))(*v386 + 16))();
    goto LABEL_14;
  }
  v498 = v497;
  (*(void (**)(_QWORD *, _BYTE *))(v385[0] + 24))(v385, v497);
LABEL_16:
  v9 = (uint64_t)v389;
  v499 = v387;
  if (!v389)
  {
LABEL_19:
    v501 = (_BYTE *)v9;
    goto LABEL_21;
  }
  if (v389 != v388)
  {
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)v389 + 16))();
    goto LABEL_19;
  }
  v501 = v500;
  (*(void (**)(void))(*(_QWORD *)v389 + 24))();
LABEL_21:
  v10 = v502;
  v11 = (uint64_t)v391;
  if (!v391)
  {
LABEL_24:
    v503 = (_BYTE *)v11;
    goto LABEL_26;
  }
  if (v391 != v390)
  {
    v11 = (*(uint64_t (**)(void))(*(_QWORD *)v391 + 16))();
    goto LABEL_24;
  }
  v503 = v502;
  (*(void (**)(void))(*(_QWORD *)v391 + 24))();
LABEL_26:
  v12 = (uint64_t)v394;
  v504 = v392;
  v13 = v505;
  if (!v394)
  {
LABEL_29:
    v506 = (_BYTE *)v12;
    goto LABEL_31;
  }
  if (v394 != v393)
  {
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)v394 + 16))();
    goto LABEL_29;
  }
  v506 = v505;
  (*(void (**)(void))(*(_QWORD *)v394 + 24))();
LABEL_31:
  v14 = (uint64_t)v365;
  v591 = v363;
  if (!v365)
  {
LABEL_34:
    v593 = (_BYTE *)v14;
    goto LABEL_36;
  }
  if (v365 != v364)
  {
    v14 = (*(uint64_t (**)(void))(*v365 + 16))();
    goto LABEL_34;
  }
  v593 = v592;
  (*(void (**)(_QWORD *))(v364[0] + 24))(v364);
LABEL_36:
  v15 = v594;
  v16 = (uint64_t)v367;
  if (!v367)
  {
LABEL_39:
    v595 = (_BYTE *)v16;
    goto LABEL_41;
  }
  if (v367 != v366)
  {
    v16 = (*(uint64_t (**)(void))(*v367 + 16))();
    goto LABEL_39;
  }
  v595 = v594;
  (*(void (**)(_QWORD *, _BYTE *))(v366[0] + 24))(v366, v594);
LABEL_41:
  v328 = v2 + 15;
  v17 = (uint64_t)v370;
  v596 = v368;
  v18 = v597;
  if (!v370)
  {
LABEL_44:
    v598 = (_BYTE *)v17;
    goto LABEL_46;
  }
  if (v370 != v369)
  {
    v17 = (*(uint64_t (**)(void))(*v370 + 16))();
    goto LABEL_44;
  }
  v598 = v597;
  (*(void (**)(_QWORD *, _BYTE *))(v369[0] + 24))(v369, v597);
LABEL_46:
  v19 = (uint64_t)v373;
  v599 = v371;
  v20 = v600;
  if (!v373)
  {
LABEL_49:
    v601 = (_BYTE *)v19;
    goto LABEL_51;
  }
  if (v373 != v372)
  {
    v19 = (*(uint64_t (**)(void))(*(_QWORD *)v373 + 16))();
    goto LABEL_49;
  }
  v601 = v600;
  (*(void (**)(void))(*(_QWORD *)v373 + 24))();
LABEL_51:
  v21 = v4 + 15;
  v22 = v2;
  v23 = v602;
  v24 = (uint64_t)v375;
  if (!v375)
  {
LABEL_54:
    v603 = (_BYTE *)v24;
    goto LABEL_56;
  }
  if (v375 != v374)
  {
    v24 = (*(uint64_t (**)(void))(*(_QWORD *)v375 + 16))();
    goto LABEL_54;
  }
  v603 = v602;
  (*(void (**)(void))(*(_QWORD *)v375 + 24))();
LABEL_56:
  v330 = v5;
  v25 = (uint64_t)v378;
  v604 = v376;
  v26 = v605;
  if (!v378)
  {
LABEL_59:
    v606 = (_BYTE *)v25;
    goto LABEL_61;
  }
  if (v378 != v377)
  {
    v25 = (*(uint64_t (**)(void))(*(_QWORD *)v378 + 16))();
    goto LABEL_59;
  }
  v606 = v605;
  (*(void (**)(void))(*(_QWORD *)v378 + 24))();
LABEL_61:
  v329 = v4;
  v27 = v491;
  if (v491 == v591)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    do
    {
      do
      {
        v27 = (_QWORD *)*v27;
        v491 = v27;
        if (v27 == v496)
          break;
        if (!v493
          || (v29 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v493 + 48))(v493, v27 + 2), !v495))
        {
LABEL_940:
          sub_223198474();
        }
        v30 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v495 + 48))(v495, v29);
        v27 = v491;
      }
      while ((v30 & 1) == 0);
LABEL_73:
      while (v27 != v499)
      {
        if (!v493)
          goto LABEL_940;
        v33 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v493 + 48))(v493, v27 + 2);
        v27 = v491;
        if (*(_BYTE *)(v33 + 112) != 1)
          break;
        while (1)
        {
          v27 = (_QWORD *)*v27;
          v491 = v27;
          if (v27 == v496)
            break;
          if (!v493)
            goto LABEL_940;
          v31 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v493 + 48))(v493, v27 + 2);
          if (!v495)
            goto LABEL_940;
          v32 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v495 + 48))(v495, v31);
          v27 = v491;
          if ((v32 & 1) != 0)
            goto LABEL_73;
        }
      }
      ++v28;
    }
    while (v27 != v591);
  }
  if (v606 == v605)
  {
    v34 = 4;
  }
  else
  {
    if (!v606)
      goto LABEL_83;
    v34 = 5;
    v26 = v606;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v34))(v26);
LABEL_83:
  if (v603 == v602)
  {
    v36 = 4;
    v35 = v330;
  }
  else
  {
    v35 = v330;
    if (!v603)
      goto LABEL_88;
    v36 = 5;
    v23 = v603;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v36))(v23);
LABEL_88:
  if (v601 == v600)
  {
    v40 = 4;
    v37 = v22;
    v38 = v21;
    v39 = v492;
  }
  else
  {
    v37 = v22;
    v38 = v21;
    v39 = v492;
    if (!v601)
      goto LABEL_93;
    v40 = 5;
    v20 = v601;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v40))(v20);
LABEL_93:
  if (v598 == v597)
  {
    v42 = 4;
    v41 = v494;
  }
  else
  {
    v41 = v494;
    if (!v598)
      goto LABEL_98;
    v42 = 5;
    v18 = v598;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v42))(v18);
LABEL_98:
  if (v595 == v594)
  {
    v43 = 4;
  }
  else
  {
    if (!v595)
      goto LABEL_103;
    v43 = 5;
    v15 = v595;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v43))(v15);
LABEL_103:
  v44 = v592;
  if (v593 == v592)
  {
    v46 = 4;
    v45 = v497;
  }
  else
  {
    v45 = v497;
    if (!v593)
      goto LABEL_108;
    v46 = 5;
    v44 = v593;
  }
  (*(void (**)(void))(*v44 + 8 * v46))();
LABEL_108:
  if (v506 == v505)
  {
    v47 = 4;
  }
  else
  {
    if (!v506)
      goto LABEL_113;
    v47 = 5;
    v13 = v506;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v47))(v13);
LABEL_113:
  if (v503 == v502)
  {
    v49 = 4;
    v48 = v500;
  }
  else
  {
    v48 = v500;
    if (!v503)
      goto LABEL_118;
    v49 = 5;
    v10 = v503;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v49))(v10);
LABEL_118:
  if (v501 == v500)
  {
    v50 = 4;
  }
  else
  {
    if (!v501)
      goto LABEL_123;
    v50 = 5;
    v48 = v501;
  }
  (*(void (**)(_QWORD *))(*v48 + 8 * v50))(v48);
LABEL_123:
  if (v498 == v497)
  {
    v51 = 4;
  }
  else
  {
    if (!v498)
      goto LABEL_128;
    v51 = 5;
    v45 = v498;
  }
  (*(void (**)(_QWORD *))(*v45 + 8 * v51))(v45);
LABEL_128:
  if (v495 == v494)
  {
    v52 = 4;
  }
  else
  {
    if (!v495)
      goto LABEL_133;
    v52 = 5;
    v41 = v495;
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v52))(v41);
LABEL_133:
  if (v493 == v492)
  {
    v53 = 4;
  }
  else
  {
    if (!v493)
      goto LABEL_138;
    v53 = 5;
    v39 = v493;
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v53))(v39);
LABEL_138:
  v54 = v378;
  if (v378 == v377)
  {
    v55 = 4;
    v54 = v377;
  }
  else
  {
    if (!v378)
      goto LABEL_143;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_143:
  v56 = v375;
  if (v375 == v374)
  {
    v57 = 4;
    v56 = v374;
  }
  else
  {
    if (!v375)
      goto LABEL_148;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_148:
  v58 = v373;
  if (v373 == v372)
  {
    v59 = 4;
    v58 = v372;
  }
  else
  {
    if (!v373)
      goto LABEL_153;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_153:
  v60 = v370;
  if (v370 == v369)
  {
    v61 = 4;
    v60 = v369;
  }
  else
  {
    if (!v370)
      goto LABEL_158;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_158:
  v62 = v367;
  if (v367 == v366)
  {
    v63 = 4;
    v62 = v366;
  }
  else
  {
    if (!v367)
      goto LABEL_163;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_163:
  v64 = v365;
  if (v365 == v364)
  {
    v65 = 4;
    v64 = v364;
  }
  else
  {
    if (!v365)
      goto LABEL_168;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_168:
  v66 = v394;
  if (v394 == v393)
  {
    v67 = 4;
    v66 = v393;
  }
  else
  {
    if (!v394)
      goto LABEL_173;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_173:
  v68 = v391;
  if (v391 == v390)
  {
    v69 = 4;
    v68 = v390;
  }
  else
  {
    if (!v391)
      goto LABEL_178;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_178:
  v70 = v389;
  if (v389 == v388)
  {
    v71 = 4;
    v70 = v388;
  }
  else
  {
    if (!v389)
      goto LABEL_183;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_183:
  v72 = v386;
  if (v386 == v385)
  {
    v73 = 4;
    v72 = v385;
  }
  else
  {
    if (!v386)
      goto LABEL_188;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_188:
  v74 = v383;
  if (v383 == v382)
  {
    v75 = 4;
    v74 = v382;
  }
  else
  {
    if (!v383)
      goto LABEL_193;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_193:
  v76 = v381;
  if (v381 == v380)
  {
    v77 = 4;
    v76 = v380;
  }
  else
  {
    if (!v381)
      goto LABEL_198;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_198:
  sub_22388D564(&v347, v329);
  sub_22388D564(&v355, v38);
  sub_22388D564(&v331, v37);
  sub_22388D564(&v339, v328);
  if (!v28)
    goto LABEL_879;
  if (v28 >> 60)
    sub_22316E078();
  v78 = (char *)operator new(16 * v28);
  *v35 = v78;
  v35[1] = v78;
  v35[2] = &v78[16 * v28];
  v79 = (uint64_t)v349;
  v411 = v347;
  if (!v349)
    goto LABEL_203;
  if (v349 != v348)
  {
    v79 = (*(uint64_t (**)(void))(*v349 + 16))();
LABEL_203:
    v413 = (_QWORD *)v79;
    goto LABEL_205;
  }
  v413 = v412;
  (*(void (**)(_QWORD *, _QWORD *))(v348[0] + 24))(v348, v412);
LABEL_205:
  v80 = (uint64_t)v351;
  if (!v351)
  {
LABEL_208:
    v415 = (_QWORD *)v80;
    goto LABEL_210;
  }
  if (v351 != v350)
  {
    v80 = (*(uint64_t (**)(void))(*v351 + 16))();
    goto LABEL_208;
  }
  v415 = v414;
  (*(void (**)(_QWORD *, _QWORD *))(v350[0] + 24))(v350, v414);
LABEL_210:
  v81 = (uint64_t)v354;
  v416 = v352;
  if (!v354)
  {
LABEL_213:
    v418 = (_QWORD *)v81;
    goto LABEL_215;
  }
  if (v354 != v353)
  {
    v81 = (*(uint64_t (**)(void))(*v354 + 16))();
    goto LABEL_213;
  }
  v418 = v417;
  (*(void (**)(_QWORD *, _QWORD *))(v353[0] + 24))(v353, v417);
LABEL_215:
  v82 = (uint64_t)v357;
  v419 = v355;
  if (!v357)
  {
LABEL_218:
    v421 = (_QWORD *)v82;
    goto LABEL_220;
  }
  if (v357 != v356)
  {
    v82 = (*(uint64_t (**)(void))(*(_QWORD *)v357 + 16))();
    goto LABEL_218;
  }
  v421 = v420;
  (*(void (**)(void))(*(_QWORD *)v357 + 24))();
LABEL_220:
  v83 = (uint64_t)v359;
  if (!v359)
  {
LABEL_223:
    v423 = (_QWORD *)v83;
    goto LABEL_225;
  }
  if (v359 != v358)
  {
    v83 = (*(uint64_t (**)(void))(*(_QWORD *)v359 + 16))();
    goto LABEL_223;
  }
  v423 = v422;
  (*(void (**)(void))(*(_QWORD *)v359 + 24))();
LABEL_225:
  v84 = (uint64_t)v362;
  v424 = v360;
  if (!v362)
  {
LABEL_228:
    v426 = (_QWORD *)v84;
    goto LABEL_230;
  }
  if (v362 != v361)
  {
    v84 = (*(uint64_t (**)(void))(*(_QWORD *)v362 + 16))();
    goto LABEL_228;
  }
  v426 = v425;
  (*(void (**)(void))(*(_QWORD *)v362 + 24))();
LABEL_230:
  v85 = (uint64_t)v333;
  v395 = v331;
  if (!v333)
  {
LABEL_233:
    v397 = (_QWORD *)v85;
    goto LABEL_235;
  }
  if (v333 != v332)
  {
    v85 = (*(uint64_t (**)(void))(*v333 + 16))();
    goto LABEL_233;
  }
  v397 = v396;
  (*(void (**)(_QWORD *, _QWORD *))(v332[0] + 24))(v332, v396);
LABEL_235:
  v86 = (uint64_t)v335;
  if (!v335)
  {
LABEL_238:
    v399 = (_QWORD *)v86;
    goto LABEL_240;
  }
  if (v335 != v334)
  {
    v86 = (*(uint64_t (**)(void))(*v335 + 16))();
    goto LABEL_238;
  }
  v399 = v398;
  (*(void (**)(_QWORD *, _QWORD *))(v334[0] + 24))(v334, v398);
LABEL_240:
  v87 = (uint64_t)v338;
  v400 = v336;
  if (!v338)
  {
LABEL_243:
    v402 = (_QWORD *)v87;
    goto LABEL_245;
  }
  if (v338 != v337)
  {
    v87 = (*(uint64_t (**)(void))(*v338 + 16))();
    goto LABEL_243;
  }
  v402 = v401;
  (*(void (**)(_QWORD *, _QWORD *))(v337[0] + 24))(v337, v401);
LABEL_245:
  v88 = (uint64_t)v341;
  v403 = v339;
  if (!v341)
  {
LABEL_248:
    v405 = (_QWORD *)v88;
    goto LABEL_250;
  }
  if (v341 != v340)
  {
    v88 = (*(uint64_t (**)(void))(*(_QWORD *)v341 + 16))();
    goto LABEL_248;
  }
  v405 = v404;
  (*(void (**)(void))(*(_QWORD *)v341 + 24))();
LABEL_250:
  v89 = (uint64_t)v343;
  if (!v343)
  {
LABEL_253:
    v407 = (_QWORD *)v89;
    goto LABEL_255;
  }
  if (v343 != v342)
  {
    v89 = (*(uint64_t (**)(void))(*(_QWORD *)v343 + 16))();
    goto LABEL_253;
  }
  v407 = v406;
  (*(void (**)(void))(*(_QWORD *)v343 + 24))();
LABEL_255:
  v90 = (uint64_t)v346;
  v408 = v344;
  if (!v346)
  {
LABEL_258:
    v410 = (_QWORD *)v90;
    goto LABEL_260;
  }
  if (v346 != v345)
  {
    v90 = (*(uint64_t (**)(void))(*(_QWORD *)v346 + 16))();
    goto LABEL_258;
  }
  v410 = v409;
  (*(void (**)(void))(*(_QWORD *)v346 + 24))();
LABEL_260:
  v327 = (_OWORD *)v35[1];
  v91 = (uint64_t)v413;
  v443 = v411;
  if (!v413)
  {
LABEL_263:
    v445 = (_QWORD *)v91;
    goto LABEL_265;
  }
  if (v413 != v412)
  {
    v91 = (*(uint64_t (**)(void))(*v413 + 16))();
    goto LABEL_263;
  }
  v445 = v444;
  (*(void (**)(_QWORD *))(v412[0] + 24))(v412);
LABEL_265:
  v92 = (uint64_t)v415;
  if (!v415)
  {
LABEL_268:
    v447 = (_QWORD *)v92;
    goto LABEL_270;
  }
  if (v415 != v414)
  {
    v92 = (*(uint64_t (**)(void))(*v415 + 16))();
    goto LABEL_268;
  }
  v447 = v446;
  (*(void (**)(_QWORD *))(v414[0] + 24))(v414);
LABEL_270:
  v93 = (uint64_t)v418;
  v448 = v416;
  if (!v418)
  {
LABEL_273:
    v450 = (_QWORD *)v93;
    goto LABEL_275;
  }
  if (v418 != v417)
  {
    v93 = (*(uint64_t (**)(void))(*v418 + 16))();
    goto LABEL_273;
  }
  v450 = v449;
  (*(void (**)(_QWORD *))(v417[0] + 24))(v417);
LABEL_275:
  v94 = (uint64_t)v421;
  v451 = v419;
  if (!v421)
  {
LABEL_278:
    v453 = (_QWORD *)v94;
    goto LABEL_280;
  }
  if (v421 != v420)
  {
    v94 = (*(uint64_t (**)(void))(*v421 + 16))();
    goto LABEL_278;
  }
  v453 = v452;
  (*(void (**)(_QWORD *))(v420[0] + 24))(v420);
LABEL_280:
  v95 = (uint64_t)v423;
  if (!v423)
  {
LABEL_283:
    v455 = (_QWORD *)v95;
    goto LABEL_285;
  }
  if (v423 != v422)
  {
    v95 = (*(uint64_t (**)(void))(*v423 + 16))();
    goto LABEL_283;
  }
  v455 = v454;
  (*(void (**)(_QWORD *))(v422[0] + 24))(v422);
LABEL_285:
  v96 = (uint64_t)v426;
  v456 = v424;
  if (!v426)
  {
LABEL_288:
    v458 = (_QWORD *)v96;
    goto LABEL_290;
  }
  if (v426 != v425)
  {
    v96 = (*(uint64_t (**)(void))(*v426 + 16))();
    goto LABEL_288;
  }
  v458 = v457;
  (*(void (**)(_QWORD *))(v425[0] + 24))(v425);
LABEL_290:
  v97 = (uint64_t)v397;
  v427 = v395;
  if (!v397)
  {
LABEL_293:
    v429 = (_QWORD *)v97;
    goto LABEL_295;
  }
  if (v397 != v396)
  {
    v97 = (*(uint64_t (**)(void))(*v397 + 16))();
    goto LABEL_293;
  }
  v429 = v428;
  (*(void (**)(_QWORD *))(v396[0] + 24))(v396);
LABEL_295:
  v98 = (uint64_t)v399;
  if (!v399)
  {
LABEL_298:
    v431 = (_QWORD *)v98;
    goto LABEL_300;
  }
  if (v399 != v398)
  {
    v98 = (*(uint64_t (**)(void))(*v399 + 16))();
    goto LABEL_298;
  }
  v431 = v430;
  (*(void (**)(_QWORD *))(v398[0] + 24))(v398);
LABEL_300:
  v99 = (uint64_t)v402;
  v432 = v400;
  if (!v402)
  {
LABEL_303:
    v434 = (_QWORD *)v99;
    goto LABEL_305;
  }
  if (v402 != v401)
  {
    v99 = (*(uint64_t (**)(void))(*v402 + 16))();
    goto LABEL_303;
  }
  v434 = v433;
  (*(void (**)(_QWORD *))(v401[0] + 24))(v401);
LABEL_305:
  v100 = (uint64_t)v405;
  v435 = v403;
  if (!v405)
  {
LABEL_308:
    v437 = (_QWORD *)v100;
    goto LABEL_310;
  }
  if (v405 != v404)
  {
    v100 = (*(uint64_t (**)(void))(*v405 + 16))();
    goto LABEL_308;
  }
  v437 = v436;
  (*(void (**)(_QWORD *))(v404[0] + 24))(v404);
LABEL_310:
  v101 = (uint64_t)v407;
  if (!v407)
  {
LABEL_313:
    v439 = (_QWORD *)v101;
    goto LABEL_315;
  }
  if (v407 != v406)
  {
    v101 = (*(uint64_t (**)(void))(*v407 + 16))();
    goto LABEL_313;
  }
  v439 = v438;
  (*(void (**)(_QWORD *))(v406[0] + 24))(v406);
LABEL_315:
  v102 = (uint64_t)v410;
  v440 = v408;
  if (!v410)
  {
LABEL_318:
    v442 = (_QWORD *)v102;
    goto LABEL_320;
  }
  if (v410 != v409)
  {
    v102 = (*(uint64_t (**)(void))(*v410 + 16))();
    goto LABEL_318;
  }
  v442 = v441;
  (*(void (**)(_QWORD *))(v409[0] + 24))(v409);
LABEL_320:
  v103 = (uint64_t)v445;
  v475 = v443;
  if (!v445)
  {
LABEL_323:
    v477 = (_BYTE *)v103;
    goto LABEL_325;
  }
  if (v445 != v444)
  {
    v103 = (*(uint64_t (**)(void))(*v445 + 16))();
    goto LABEL_323;
  }
  v477 = v476;
  (*(void (**)(_QWORD *))(v444[0] + 24))(v444);
LABEL_325:
  v104 = (uint64_t)v447;
  if (!v447)
  {
LABEL_328:
    v479 = (_BYTE *)v104;
    goto LABEL_330;
  }
  if (v447 != v446)
  {
    v104 = (*(uint64_t (**)(void))(*v447 + 16))();
    goto LABEL_328;
  }
  v479 = v478;
  (*(void (**)(_QWORD *, _BYTE *))(v446[0] + 24))(v446, v478);
LABEL_330:
  v105 = (uint64_t)v450;
  v480 = v448;
  if (!v450)
  {
LABEL_333:
    v482 = (_BYTE *)v105;
    goto LABEL_335;
  }
  if (v450 != v449)
  {
    v105 = (*(uint64_t (**)(void))(*v450 + 16))();
    goto LABEL_333;
  }
  v482 = v481;
  (*(void (**)(_QWORD *))(v449[0] + 24))(v449);
LABEL_335:
  v106 = (uint64_t)v453;
  v483 = v451;
  if (!v453)
  {
LABEL_338:
    v485 = (_BYTE *)v106;
    goto LABEL_340;
  }
  if (v453 != v452)
  {
    v106 = (*(uint64_t (**)(void))(*v453 + 16))();
    goto LABEL_338;
  }
  v485 = v484;
  (*(void (**)(_QWORD *))(v452[0] + 24))(v452);
LABEL_340:
  v107 = v486;
  v108 = (uint64_t)v455;
  if (!v455)
  {
LABEL_343:
    v487 = (_BYTE *)v108;
    goto LABEL_345;
  }
  if (v455 != v454)
  {
    v108 = (*(uint64_t (**)(void))(*v455 + 16))();
    goto LABEL_343;
  }
  v487 = v486;
  (*(void (**)(_QWORD *, _BYTE *))(v454[0] + 24))(v454, v486);
LABEL_345:
  v109 = (uint64_t)v458;
  v488 = v456;
  v110 = v489;
  if (!v458)
  {
LABEL_348:
    v490 = (_BYTE *)v109;
    goto LABEL_350;
  }
  if (v458 != v457)
  {
    v109 = (*(uint64_t (**)(void))(*v458 + 16))();
    goto LABEL_348;
  }
  v490 = v489;
  (*(void (**)(_QWORD *, _BYTE *))(v457[0] + 24))(v457, v489);
LABEL_350:
  v111 = (uint64_t)v429;
  v459 = v427;
  v112 = v460;
  if (!v429)
  {
LABEL_353:
    v461 = (_BYTE *)v111;
    goto LABEL_355;
  }
  if (v429 != v428)
  {
    v111 = (*(uint64_t (**)(void))(*v429 + 16))();
    goto LABEL_353;
  }
  v461 = v460;
  (*(void (**)(_QWORD *, _BYTE *))(v428[0] + 24))(v428, v460);
LABEL_355:
  v113 = v462;
  v114 = (uint64_t)v431;
  if (!v431)
  {
LABEL_358:
    v463 = (_BYTE *)v114;
    goto LABEL_360;
  }
  if (v431 != v430)
  {
    v114 = (*(uint64_t (**)(void))(*v431 + 16))();
    goto LABEL_358;
  }
  v463 = v462;
  (*(void (**)(_QWORD *, _BYTE *))(v430[0] + 24))(v430, v462);
LABEL_360:
  v115 = (uint64_t)v434;
  v464 = v432;
  v116 = v465;
  if (!v434)
  {
LABEL_363:
    v466 = (_BYTE *)v115;
    goto LABEL_365;
  }
  if (v434 != v433)
  {
    v115 = (*(uint64_t (**)(void))(*v434 + 16))();
    goto LABEL_363;
  }
  v466 = v465;
  (*(void (**)(_QWORD *, _BYTE *))(v433[0] + 24))(v433, v465);
LABEL_365:
  v117 = (uint64_t)v437;
  v467 = v435;
  v118 = v468;
  if (!v437)
  {
LABEL_368:
    v469 = (_BYTE *)v117;
    goto LABEL_370;
  }
  if (v437 != v436)
  {
    v117 = (*(uint64_t (**)(void))(*v437 + 16))();
    goto LABEL_368;
  }
  v469 = v468;
  (*(void (**)(_QWORD *, _BYTE *))(v436[0] + 24))(v436, v468);
LABEL_370:
  v119 = v470;
  v120 = (uint64_t)v439;
  if (!v439)
  {
LABEL_373:
    v471 = (_BYTE *)v120;
    goto LABEL_375;
  }
  if (v439 != v438)
  {
    v120 = (*(uint64_t (**)(void))(*v439 + 16))();
    goto LABEL_373;
  }
  v471 = v470;
  (*(void (**)(_QWORD *, _BYTE *))(v438[0] + 24))(v438, v470);
LABEL_375:
  v121 = (uint64_t)v442;
  v472 = v440;
  v122 = v473;
  if (!v442)
  {
LABEL_378:
    v474 = (_BYTE *)v121;
    goto LABEL_380;
  }
  if (v442 != v441)
  {
    v121 = (*(uint64_t (**)(void))(*v442 + 16))();
    goto LABEL_378;
  }
  v474 = v473;
  (*(void (**)(_QWORD *, _BYTE *))(v441[0] + 24))(v441, v473);
LABEL_380:
  sub_223891D60(&v536, &v475);
  sub_223891D60(&v523, &v459);
  sub_223891D60(&v575, &v536);
  sub_223891AE8(&v591, &v575);
  sub_223891D60(&v549, &v523);
  sub_223891AE8(&v562, &v549);
  sub_223891D60(&v491, &v591);
  sub_223891D60(&v507, &v562);
  v123 = v574;
  if (v574 == v573)
  {
    v124 = 4;
    v123 = v573;
  }
  else
  {
    if (!v574)
      goto LABEL_385;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_385:
  v125 = v572;
  if (v572 == v571)
  {
    v126 = 4;
    v125 = v571;
  }
  else
  {
    if (!v572)
      goto LABEL_390;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_390:
  v127 = v570;
  if (v570 == v569)
  {
    v128 = 4;
    v127 = v569;
  }
  else
  {
    if (!v570)
      goto LABEL_395;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_395:
  v129 = v568;
  if (v568 == v567)
  {
    v130 = 4;
    v129 = v567;
  }
  else
  {
    if (!v568)
      goto LABEL_400;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_400:
  v131 = v566;
  if (v566 == v565)
  {
    v132 = 4;
    v131 = v565;
  }
  else
  {
    if (!v566)
      goto LABEL_405;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_405:
  v133 = v564;
  if (v564 == v563)
  {
    v134 = 4;
    v133 = v563;
  }
  else
  {
    if (!v564)
      goto LABEL_410;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_410:
  v135 = v561;
  if (v561 == v560)
  {
    v136 = 4;
    v135 = v560;
  }
  else
  {
    if (!v561)
      goto LABEL_415;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_415:
  v137 = v559;
  if (v559 == v558)
  {
    v138 = 4;
    v137 = v558;
  }
  else
  {
    if (!v559)
      goto LABEL_420;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_420:
  v139 = v557;
  if (v557 == v556)
  {
    v140 = 4;
    v139 = v556;
  }
  else
  {
    if (!v557)
      goto LABEL_425;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_425:
  v141 = v555;
  if (v555 == v554)
  {
    v142 = 4;
    v141 = v554;
  }
  else
  {
    if (!v555)
      goto LABEL_430;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_430:
  v143 = v553;
  if (v553 == v552)
  {
    v144 = 4;
    v143 = v552;
  }
  else
  {
    if (!v553)
      goto LABEL_435;
    v144 = 5;
  }
  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_435:
  v145 = v551;
  if (v551 == v550)
  {
    v146 = 4;
    v145 = v550;
  }
  else
  {
    if (!v551)
      goto LABEL_440;
    v146 = 5;
  }
  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_440:
  v147 = v606;
  if (v606 == v605)
  {
    v148 = 4;
    v147 = v605;
  }
  else
  {
    if (!v606)
      goto LABEL_445;
    v148 = 5;
  }
  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_445:
  v149 = v603;
  if (v603 == v602)
  {
    v150 = 4;
    v149 = v602;
  }
  else
  {
    if (!v603)
      goto LABEL_450;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_450:
  v151 = v601;
  if (v601 == v600)
  {
    v152 = 4;
    v151 = v600;
  }
  else
  {
    if (!v601)
      goto LABEL_455;
    v152 = 5;
  }
  (*(void (**)(void))(*v151 + 8 * v152))();
LABEL_455:
  v153 = v598;
  if (v598 == v597)
  {
    v154 = 4;
    v153 = v597;
  }
  else
  {
    if (!v598)
      goto LABEL_460;
    v154 = 5;
  }
  (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_460:
  v155 = v595;
  if (v595 == v594)
  {
    v156 = 4;
    v155 = v594;
  }
  else
  {
    if (!v595)
      goto LABEL_465;
    v156 = 5;
  }
  (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_465:
  v157 = v593;
  if (v593 == v592)
  {
    v158 = 4;
    v157 = v592;
  }
  else
  {
    if (!v593)
      goto LABEL_470;
    v158 = 5;
  }
  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_470:
  v159 = v590;
  if (v590 == v589)
  {
    v160 = 4;
    v159 = v589;
  }
  else
  {
    if (!v590)
      goto LABEL_475;
    v160 = 5;
  }
  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_475:
  v161 = v587;
  if (v587 == v586)
  {
    v162 = 4;
    v161 = v586;
  }
  else
  {
    if (!v587)
      goto LABEL_480;
    v162 = 5;
  }
  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_480:
  v163 = v585;
  if (v585 == v584)
  {
    v164 = 4;
    v163 = v584;
  }
  else
  {
    if (!v585)
      goto LABEL_485;
    v164 = 5;
  }
  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_485:
  v165 = v582;
  if (v582 == v581)
  {
    v166 = 4;
    v165 = v581;
  }
  else
  {
    if (!v582)
      goto LABEL_490;
    v166 = 5;
  }
  (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_490:
  v167 = v579;
  if (v579 == v578)
  {
    v168 = 4;
    v167 = v578;
  }
  else
  {
    if (!v579)
      goto LABEL_495;
    v168 = 5;
  }
  (*(void (**)(void))(*v167 + 8 * v168))();
LABEL_495:
  v169 = v577;
  if (v577 == v576)
  {
    v170 = 4;
    v169 = v576;
  }
  else
  {
    if (!v577)
      goto LABEL_500;
    v170 = 5;
  }
  (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_500:
  v171 = v535;
  if (v535 == v534)
  {
    v172 = 4;
    v171 = v534;
  }
  else
  {
    if (!v535)
      goto LABEL_505;
    v172 = 5;
  }
  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_505:
  v173 = v533;
  if (v533 == v532)
  {
    v174 = 4;
    v173 = v532;
  }
  else
  {
    if (!v533)
      goto LABEL_510;
    v174 = 5;
  }
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_510:
  v175 = v531;
  if (v531 == v530)
  {
    v176 = 4;
    v175 = v530;
  }
  else
  {
    if (!v531)
      goto LABEL_515;
    v176 = 5;
  }
  (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_515:
  v177 = v529;
  if (v529 == v528)
  {
    v178 = 4;
    v177 = v528;
  }
  else
  {
    if (!v529)
      goto LABEL_520;
    v178 = 5;
  }
  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_520:
  v179 = v527;
  if (v527 == v526)
  {
    v180 = 4;
    v179 = v526;
  }
  else
  {
    if (!v527)
      goto LABEL_525;
    v180 = 5;
  }
  (*(void (**)(void))(*v179 + 8 * v180))();
LABEL_525:
  v181 = v525;
  if (v525 == v524)
  {
    v182 = 4;
    v181 = v524;
  }
  else
  {
    if (!v525)
      goto LABEL_530;
    v182 = 5;
  }
  (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_530:
  v183 = v548;
  if (v548 == v547)
  {
    v184 = 4;
    v183 = v547;
  }
  else
  {
    if (!v548)
      goto LABEL_535;
    v184 = 5;
  }
  (*(void (**)(void))(*v183 + 8 * v184))();
LABEL_535:
  v185 = v546;
  if (v546 == v545)
  {
    v186 = 4;
    v185 = v545;
  }
  else
  {
    if (!v546)
      goto LABEL_540;
    v186 = 5;
  }
  (*(void (**)(void))(*v185 + 8 * v186))();
LABEL_540:
  v187 = v544;
  if (v544 == v543)
  {
    v188 = 4;
    v187 = v543;
  }
  else
  {
    if (!v544)
      goto LABEL_545;
    v188 = 5;
  }
  (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_545:
  v189 = v542;
  if (v542 == v541)
  {
    v190 = 4;
    v189 = v541;
  }
  else
  {
    if (!v542)
      goto LABEL_550;
    v190 = 5;
  }
  (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_550:
  v191 = v540;
  if (v540 == v539)
  {
    v192 = 4;
    v191 = v539;
  }
  else
  {
    if (!v540)
      goto LABEL_555;
    v192 = 5;
  }
  (*(void (**)(void))(*v191 + 8 * v192))();
LABEL_555:
  v193 = v538;
  if (v538 == v537)
  {
    v194 = 4;
    v193 = v537;
  }
  else
  {
    if (!v538)
      goto LABEL_560;
    v194 = 5;
  }
  (*(void (**)(void))(*v193 + 8 * v194))();
LABEL_560:
  if (v474 == v473)
  {
    v195 = 4;
  }
  else
  {
    if (!v474)
      goto LABEL_565;
    v195 = 5;
    v122 = v474;
  }
  (*(void (**)(_QWORD *))(*v122 + 8 * v195))(v122);
LABEL_565:
  if (v471 == v470)
  {
    v196 = 4;
  }
  else
  {
    if (!v471)
      goto LABEL_570;
    v196 = 5;
    v119 = v471;
  }
  (*(void (**)(_QWORD *))(*v119 + 8 * v196))(v119);
LABEL_570:
  if (v469 == v468)
  {
    v197 = 4;
  }
  else
  {
    if (!v469)
      goto LABEL_575;
    v197 = 5;
    v118 = v469;
  }
  (*(void (**)(_QWORD *))(*v118 + 8 * v197))(v118);
LABEL_575:
  if (v466 == v465)
  {
    v199 = 4;
    v198 = v478;
  }
  else
  {
    v198 = v478;
    if (!v466)
      goto LABEL_580;
    v199 = 5;
    v116 = v466;
  }
  (*(void (**)(_QWORD *))(*v116 + 8 * v199))(v116);
LABEL_580:
  if (v463 == v462)
  {
    v200 = 4;
  }
  else
  {
    if (!v463)
      goto LABEL_585;
    v200 = 5;
    v113 = v463;
  }
  (*(void (**)(_QWORD *))(*v113 + 8 * v200))(v113);
LABEL_585:
  if (v461 == v460)
  {
    v201 = 4;
  }
  else
  {
    if (!v461)
      goto LABEL_590;
    v201 = 5;
    v112 = v461;
  }
  (*(void (**)(_QWORD *))(*v112 + 8 * v201))(v112);
LABEL_590:
  if (v490 == v489)
  {
    v202 = 4;
  }
  else
  {
    if (!v490)
      goto LABEL_595;
    v202 = 5;
    v110 = v490;
  }
  (*(void (**)(_QWORD *))(*v110 + 8 * v202))(v110);
LABEL_595:
  if (v487 == v486)
  {
    v203 = 4;
  }
  else
  {
    if (!v487)
      goto LABEL_600;
    v203 = 5;
    v107 = v487;
  }
  (*(void (**)(_QWORD *))(*v107 + 8 * v203))(v107);
LABEL_600:
  v204 = v484;
  if (v485 == v484)
  {
    v205 = 4;
  }
  else
  {
    if (!v485)
      goto LABEL_605;
    v205 = 5;
    v204 = v485;
  }
  (*(void (**)(void))(*v204 + 8 * v205))();
LABEL_605:
  v206 = v481;
  if (v482 == v481)
  {
    v207 = 4;
  }
  else
  {
    if (!v482)
      goto LABEL_610;
    v207 = 5;
    v206 = v482;
  }
  (*(void (**)(void))(*v206 + 8 * v207))();
LABEL_610:
  if (v479 == v478)
  {
    v208 = 4;
  }
  else
  {
    if (!v479)
      goto LABEL_615;
    v208 = 5;
    v198 = v479;
  }
  (*(void (**)(_QWORD *))(*v198 + 8 * v208))(v198);
LABEL_615:
  v209 = v476;
  if (v477 == v476)
  {
    v210 = 4;
  }
  else
  {
    if (!v477)
      goto LABEL_620;
    v210 = 5;
    v209 = v477;
  }
  (*(void (**)(void))(*v209 + 8 * v210))();
LABEL_620:
  v211 = (uint64_t)v493;
  v591 = v491;
  if (!v493)
  {
LABEL_623:
    v593 = (_BYTE *)v211;
    goto LABEL_625;
  }
  if (v493 != v492)
  {
    v211 = (*(uint64_t (**)(void))(*(_QWORD *)v493 + 16))();
    goto LABEL_623;
  }
  v593 = v592;
  (*(void (**)(void))(*(_QWORD *)v493 + 24))();
LABEL_625:
  v212 = (uint64_t)v495;
  if (!v495)
  {
LABEL_628:
    v595 = (_BYTE *)v212;
    goto LABEL_630;
  }
  if (v495 != v494)
  {
    v212 = (*(uint64_t (**)(void))(*(_QWORD *)v495 + 16))();
    goto LABEL_628;
  }
  v595 = v594;
  (*(void (**)(void))(*(_QWORD *)v495 + 24))();
LABEL_630:
  v213 = (uint64_t)v498;
  v596 = v496;
  if (!v498)
  {
LABEL_633:
    v598 = (_BYTE *)v213;
    goto LABEL_635;
  }
  if (v498 != v497)
  {
    v213 = (*(uint64_t (**)(void))(*(_QWORD *)v498 + 16))();
    goto LABEL_633;
  }
  v598 = v597;
  (*(void (**)(void))(*(_QWORD *)v498 + 24))();
LABEL_635:
  v214 = (uint64_t)v501;
  v599 = v499;
  v215 = v600;
  if (!v501)
  {
LABEL_638:
    v601 = (_BYTE *)v214;
    goto LABEL_640;
  }
  if (v501 != v500)
  {
    v214 = (*(uint64_t (**)(void))(*(_QWORD *)v501 + 16))();
    goto LABEL_638;
  }
  v601 = v600;
  (*(void (**)(void))(*(_QWORD *)v501 + 24))();
LABEL_640:
  v216 = v602;
  v217 = (uint64_t)v503;
  if (!v503)
  {
LABEL_643:
    v603 = (_BYTE *)v217;
    goto LABEL_645;
  }
  if (v503 != v502)
  {
    v217 = (*(uint64_t (**)(void))(*(_QWORD *)v503 + 16))();
    goto LABEL_643;
  }
  v603 = v602;
  (*(void (**)(void))(*(_QWORD *)v503 + 24))();
LABEL_645:
  v218 = (uint64_t)v506;
  v604 = v504;
  v219 = v605;
  if (!v506)
  {
LABEL_648:
    v606 = (_BYTE *)v218;
    goto LABEL_650;
  }
  if (v506 != v505)
  {
    v218 = (*(uint64_t (**)(void))(*(_QWORD *)v506 + 16))();
    goto LABEL_648;
  }
  v606 = v605;
  (*(void (**)(void))(*(_QWORD *)v506 + 24))();
LABEL_650:
  v220 = (uint64_t)v509;
  v575 = v507;
  v221 = v576;
  if (!v509)
  {
LABEL_653:
    v577 = (_BYTE *)v220;
    goto LABEL_655;
  }
  if (v509 != &v508)
  {
    v220 = (*(uint64_t (**)(void))(*v509 + 16))();
    goto LABEL_653;
  }
  v577 = v576;
  (*(void (**)(void))(*v509 + 24))();
LABEL_655:
  v222 = v578;
  v223 = (uint64_t)v511;
  if (!v511)
  {
LABEL_658:
    v579 = (_BYTE *)v223;
    goto LABEL_660;
  }
  if (v511 != &v510)
  {
    v223 = (*(uint64_t (**)(void))(*v511 + 16))();
    goto LABEL_658;
  }
  v579 = v578;
  (*(void (**)(void))(*v511 + 24))();
LABEL_660:
  v224 = (uint64_t)v514;
  v580 = v512;
  v225 = v581;
  if (!v514)
  {
LABEL_663:
    v582 = (_BYTE *)v224;
    goto LABEL_665;
  }
  if (v514 != &v513)
  {
    v224 = (*(uint64_t (**)(void))(*v514 + 16))();
    goto LABEL_663;
  }
  v582 = v581;
  (*(void (**)(void))(*v514 + 24))();
LABEL_665:
  v226 = (uint64_t)v517;
  v583 = v515;
  v227 = v584;
  if (!v517)
  {
LABEL_668:
    v585 = (_BYTE *)v226;
    goto LABEL_670;
  }
  if (v517 != &v516)
  {
    v226 = (*(uint64_t (**)(void))(*v517 + 16))();
    goto LABEL_668;
  }
  v585 = v584;
  (*(void (**)(void))(*v517 + 24))();
LABEL_670:
  v228 = v586;
  v229 = (uint64_t)v519;
  if (!v519)
  {
LABEL_673:
    v587 = (_BYTE *)v229;
    goto LABEL_675;
  }
  if (v519 != &v518)
  {
    v229 = (*(uint64_t (**)(void))(*v519 + 16))();
    goto LABEL_673;
  }
  v587 = v586;
  (*(void (**)(void))(*v519 + 24))();
LABEL_675:
  v230 = (uint64_t)v522;
  v588 = v520;
  v231 = v589;
  if (!v522)
  {
LABEL_678:
    v590 = (_BYTE *)v230;
    goto LABEL_680;
  }
  if (v522 != &v521)
  {
    v230 = (*(uint64_t (**)(void))(*v522 + 16))();
    goto LABEL_678;
  }
  v590 = v589;
  (*(void (**)(void))(*v522 + 24))();
LABEL_680:
  v232 = v591;
  if (v591 == v575)
  {
    v233 = v327;
  }
  else
  {
    v233 = v327;
    do
    {
      if (!v593)
LABEL_941:
        sub_223198474();
      *v233 = *(_OWORD *)(*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v593 + 48))(v593, v232 + 2);
      v232 = (_QWORD *)*v591;
      v591 = v232;
      if (v232 == v596)
        goto LABEL_694;
      do
      {
        if (!v593)
          goto LABEL_941;
        v234 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v593 + 48))(v593, v232 + 2);
        if (!v595)
          goto LABEL_941;
        v235 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v595 + 48))(v595, v234);
        v232 = v591;
        if ((v235 & 1) != 0)
          break;
        v232 = (_QWORD *)*v591;
        v591 = v232;
      }
      while (v232 != v596);
LABEL_694:
      while (v232 != v599)
      {
        if (!v593)
          goto LABEL_941;
        v238 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v593 + 48))(v593, v232 + 2);
        v232 = v591;
        if (*(_BYTE *)(v238 + 112) != 1)
          break;
        while (1)
        {
          v232 = (_QWORD *)*v232;
          v591 = v232;
          if (v232 == v596)
            break;
          if (!v593)
            goto LABEL_941;
          v236 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v593 + 48))(v593, v232 + 2);
          if (!v595)
            goto LABEL_941;
          v237 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v595 + 48))(v595, v236);
          v232 = v591;
          if ((v237 & 1) != 0)
            goto LABEL_694;
        }
      }
      ++v233;
    }
    while (v232 != v575);
  }
  if (v590 == v589)
  {
    v239 = 4;
  }
  else
  {
    if (!v590)
      goto LABEL_704;
    v239 = 5;
    v231 = v590;
  }
  (*(void (**)(_QWORD *))(*v231 + 8 * v239))(v231);
LABEL_704:
  if (v587 == v586)
  {
    v241 = 4;
    v240 = v412;
  }
  else
  {
    v240 = v412;
    if (!v587)
      goto LABEL_709;
    v241 = 5;
    v228 = v587;
  }
  (*(void (**)(_QWORD *))(*v228 + 8 * v241))(v228);
LABEL_709:
  if (v585 == v584)
  {
    v242 = 4;
  }
  else
  {
    if (!v585)
      goto LABEL_714;
    v242 = 5;
    v227 = v585;
  }
  (*(void (**)(_QWORD *))(*v227 + 8 * v242))(v227);
LABEL_714:
  if (v582 == v581)
  {
    v245 = 4;
    v243 = v414;
    v244 = v404;
  }
  else
  {
    v243 = v414;
    v244 = v404;
    if (!v582)
      goto LABEL_719;
    v245 = 5;
    v225 = v582;
  }
  (*(void (**)(_QWORD *))(*v225 + 8 * v245))(v225);
LABEL_719:
  if (v579 == v578)
  {
    v247 = 4;
    v246 = v417;
  }
  else
  {
    v246 = v417;
    if (!v579)
      goto LABEL_724;
    v247 = 5;
    v222 = v579;
  }
  (*(void (**)(_QWORD *))(*v222 + 8 * v247))(v222);
LABEL_724:
  if (v577 == v576)
  {
    v249 = 4;
    v248 = v420;
  }
  else
  {
    v248 = v420;
    if (!v577)
      goto LABEL_729;
    v249 = 5;
    v221 = v577;
  }
  (*(void (**)(_QWORD *))(*v221 + 8 * v249))(v221);
LABEL_729:
  if (v606 == v605)
  {
    v251 = 4;
    v250 = v396;
  }
  else
  {
    v250 = v396;
    if (!v606)
      goto LABEL_734;
    v251 = 5;
    v219 = v606;
  }
  (*(void (**)(_QWORD *))(*v219 + 8 * v251))(v219);
LABEL_734:
  if (v603 == v602)
  {
    v253 = 4;
    v252 = v398;
  }
  else
  {
    v252 = v398;
    if (!v603)
      goto LABEL_739;
    v253 = 5;
    v216 = v603;
  }
  (*(void (**)(_QWORD *))(*v216 + 8 * v253))(v216);
LABEL_739:
  if (v601 == v600)
  {
    v254 = 4;
    v35 = v330;
  }
  else
  {
    v35 = v330;
    if (!v601)
      goto LABEL_744;
    v254 = 5;
    v215 = v601;
  }
  (*(void (**)(_QWORD *))(*v215 + 8 * v254))(v215);
LABEL_744:
  v255 = v597;
  if (v598 == v597)
  {
    v257 = 4;
    v256 = v422;
  }
  else
  {
    v256 = v422;
    if (!v598)
      goto LABEL_749;
    v257 = 5;
    v255 = v598;
  }
  (*(void (**)(void))(*v255 + 8 * v257))();
LABEL_749:
  v258 = v594;
  if (v595 == v594)
  {
    v259 = 4;
  }
  else
  {
    if (!v595)
      goto LABEL_754;
    v259 = 5;
    v258 = v595;
  }
  (*(void (**)(void))(*v258 + 8 * v259))();
LABEL_754:
  v260 = v592;
  if (v593 == v592)
  {
    v261 = 4;
  }
  else
  {
    if (!v593)
      goto LABEL_759;
    v261 = 5;
    v260 = v593;
  }
  (*(void (**)(void))(*v260 + 8 * v261))();
LABEL_759:
  sub_223891888(&v491);
  v262 = v441;
  if (v442 == v441)
  {
    v263 = 4;
  }
  else
  {
    if (!v442)
      goto LABEL_764;
    v263 = 5;
    v262 = v442;
  }
  (*(void (**)(void))(*v262 + 8 * v263))();
LABEL_764:
  v264 = v438;
  if (v439 == v438)
  {
    v265 = 4;
  }
  else
  {
    if (!v439)
      goto LABEL_769;
    v265 = 5;
    v264 = v439;
  }
  (*(void (**)(void))(*v264 + 8 * v265))();
LABEL_769:
  v266 = v436;
  if (v437 == v436)
  {
    v267 = 4;
  }
  else
  {
    if (!v437)
      goto LABEL_774;
    v267 = 5;
    v266 = v437;
  }
  (*(void (**)(void))(*v266 + 8 * v267))();
LABEL_774:
  v268 = v433;
  if (v434 == v433)
  {
    v269 = 4;
  }
  else
  {
    if (!v434)
      goto LABEL_779;
    v269 = 5;
    v268 = v434;
  }
  (*(void (**)(void))(*v268 + 8 * v269))();
LABEL_779:
  v270 = v430;
  if (v431 == v430)
  {
    v271 = 4;
  }
  else
  {
    if (!v431)
      goto LABEL_784;
    v271 = 5;
    v270 = v431;
  }
  (*(void (**)(void))(*v270 + 8 * v271))();
LABEL_784:
  v272 = v428;
  if (v429 == v428)
  {
    v273 = 4;
  }
  else
  {
    if (!v429)
      goto LABEL_789;
    v273 = 5;
    v272 = v429;
  }
  (*(void (**)(void))(*v272 + 8 * v273))();
LABEL_789:
  v274 = v457;
  if (v458 == v457)
  {
    v275 = 4;
  }
  else
  {
    if (!v458)
      goto LABEL_794;
    v275 = 5;
    v274 = v458;
  }
  (*(void (**)(void))(*v274 + 8 * v275))();
LABEL_794:
  v276 = v454;
  if (v455 == v454)
  {
    v277 = 4;
  }
  else
  {
    if (!v455)
      goto LABEL_799;
    v277 = 5;
    v276 = v455;
  }
  (*(void (**)(void))(*v276 + 8 * v277))();
LABEL_799:
  v278 = v452;
  if (v453 == v452)
  {
    v279 = 4;
  }
  else
  {
    if (!v453)
      goto LABEL_804;
    v279 = 5;
    v278 = v453;
  }
  (*(void (**)(void))(*v278 + 8 * v279))();
LABEL_804:
  v280 = v449;
  if (v450 == v449)
  {
    v281 = 4;
  }
  else
  {
    if (!v450)
      goto LABEL_809;
    v281 = 5;
    v280 = v450;
  }
  (*(void (**)(void))(*v280 + 8 * v281))();
LABEL_809:
  v282 = v446;
  if (v447 == v446)
  {
    v283 = 4;
  }
  else
  {
    if (!v447)
      goto LABEL_814;
    v283 = 5;
    v282 = v447;
  }
  (*(void (**)(void))(*v282 + 8 * v283))();
LABEL_814:
  v284 = v444;
  if (v445 == v444)
  {
    v285 = 4;
  }
  else
  {
    if (!v445)
      goto LABEL_819;
    v285 = 5;
    v284 = v445;
  }
  (*(void (**)(void))(*v284 + 8 * v285))();
LABEL_819:
  v35[1] = v233;
  v286 = v409;
  if (v410 == v409)
  {
    v288 = 4;
    v287 = v425;
  }
  else
  {
    v287 = v425;
    if (!v410)
      goto LABEL_824;
    v288 = 5;
    v286 = v410;
  }
  (*(void (**)(void))(*v286 + 8 * v288))();
LABEL_824:
  v289 = v406;
  if (v407 == v406)
  {
    v290 = 4;
  }
  else
  {
    if (!v407)
      goto LABEL_829;
    v290 = 5;
    v289 = v407;
  }
  (*(void (**)(void))(*v289 + 8 * v290))();
LABEL_829:
  if (v405 == v404)
  {
    v291 = 4;
  }
  else
  {
    if (!v405)
      goto LABEL_834;
    v291 = 5;
    v244 = v405;
  }
  (*(void (**)(_QWORD *))(*v244 + 8 * v291))(v244);
LABEL_834:
  v292 = v401;
  if (v402 == v401)
  {
    v293 = 4;
  }
  else
  {
    if (!v402)
      goto LABEL_839;
    v293 = 5;
    v292 = v402;
  }
  (*(void (**)(void))(*v292 + 8 * v293))();
LABEL_839:
  if (v399 == v398)
  {
    v294 = 4;
  }
  else
  {
    if (!v399)
      goto LABEL_844;
    v294 = 5;
    v252 = v399;
  }
  (*(void (**)(_QWORD *))(*v252 + 8 * v294))(v252);
LABEL_844:
  if (v397 == v396)
  {
    v295 = 4;
  }
  else
  {
    if (!v397)
      goto LABEL_849;
    v295 = 5;
    v250 = v397;
  }
  (*(void (**)(_QWORD *))(*v250 + 8 * v295))(v250);
LABEL_849:
  if (v426 == v425)
  {
    v296 = 4;
  }
  else
  {
    if (!v426)
      goto LABEL_854;
    v296 = 5;
    v287 = v426;
  }
  (*(void (**)(_QWORD *))(*v287 + 8 * v296))(v287);
LABEL_854:
  if (v423 == v422)
  {
    v297 = 4;
  }
  else
  {
    if (!v423)
      goto LABEL_859;
    v297 = 5;
    v256 = v423;
  }
  (*(void (**)(_QWORD *))(*v256 + 8 * v297))(v256);
LABEL_859:
  if (v421 == v420)
  {
    v298 = 4;
  }
  else
  {
    if (!v421)
      goto LABEL_864;
    v298 = 5;
    v248 = v421;
  }
  (*(void (**)(_QWORD *))(*v248 + 8 * v298))(v248);
LABEL_864:
  if (v418 == v417)
  {
    v299 = 4;
  }
  else
  {
    if (!v418)
      goto LABEL_869;
    v299 = 5;
    v246 = v418;
  }
  (*(void (**)(_QWORD *))(*v246 + 8 * v299))(v246);
LABEL_869:
  if (v415 == v414)
  {
    v300 = 4;
  }
  else
  {
    if (!v415)
      goto LABEL_874;
    v300 = 5;
    v243 = v415;
  }
  (*(void (**)(_QWORD *))(*v243 + 8 * v300))(v243);
LABEL_874:
  if (v413 == v412)
  {
    v301 = 4;
  }
  else
  {
    if (!v413)
      goto LABEL_879;
    v301 = 5;
    v240 = v413;
  }
  (*(void (**)(_QWORD *))(*v240 + 8 * v301))(v240);
LABEL_879:
  v302 = v346;
  if (v346 == v345)
  {
    v303 = 4;
    v302 = v345;
  }
  else
  {
    if (!v346)
      goto LABEL_884;
    v303 = 5;
  }
  (*(void (**)(void))(*v302 + 8 * v303))();
LABEL_884:
  v304 = v343;
  if (v343 == v342)
  {
    v305 = 4;
    v304 = v342;
  }
  else
  {
    if (!v343)
      goto LABEL_889;
    v305 = 5;
  }
  (*(void (**)(void))(*v304 + 8 * v305))();
LABEL_889:
  v306 = v341;
  if (v341 == v340)
  {
    v307 = 4;
    v306 = v340;
  }
  else
  {
    if (!v341)
      goto LABEL_894;
    v307 = 5;
  }
  (*(void (**)(void))(*v306 + 8 * v307))();
LABEL_894:
  v308 = v338;
  if (v338 == v337)
  {
    v309 = 4;
    v308 = v337;
  }
  else
  {
    if (!v338)
      goto LABEL_899;
    v309 = 5;
  }
  (*(void (**)(void))(*v308 + 8 * v309))();
LABEL_899:
  v310 = v335;
  if (v335 == v334)
  {
    v311 = 4;
    v310 = v334;
  }
  else
  {
    if (!v335)
      goto LABEL_904;
    v311 = 5;
  }
  (*(void (**)(void))(*v310 + 8 * v311))();
LABEL_904:
  v312 = v333;
  if (v333 == v332)
  {
    v313 = 4;
    v312 = v332;
  }
  else
  {
    if (!v333)
      goto LABEL_909;
    v313 = 5;
  }
  (*(void (**)(void))(*v312 + 8 * v313))();
LABEL_909:
  v314 = v362;
  if (v362 == v361)
  {
    v315 = 4;
    v314 = v361;
  }
  else
  {
    if (!v362)
      goto LABEL_914;
    v315 = 5;
  }
  (*(void (**)(void))(*v314 + 8 * v315))();
LABEL_914:
  v316 = v359;
  if (v359 == v358)
  {
    v317 = 4;
    v316 = v358;
  }
  else
  {
    if (!v359)
      goto LABEL_919;
    v317 = 5;
  }
  (*(void (**)(void))(*v316 + 8 * v317))();
LABEL_919:
  v318 = v357;
  if (v357 == v356)
  {
    v319 = 4;
    v318 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_924;
    v319 = 5;
  }
  (*(void (**)(void))(*v318 + 8 * v319))();
LABEL_924:
  v320 = v354;
  if (v354 == v353)
  {
    v321 = 4;
    v320 = v353;
  }
  else
  {
    if (!v354)
      goto LABEL_929;
    v321 = 5;
  }
  (*(void (**)(void))(*v320 + 8 * v321))();
LABEL_929:
  v322 = v351;
  if (v351 == v350)
  {
    v323 = 4;
    v322 = v350;
  }
  else
  {
    if (!v351)
      goto LABEL_934;
    v323 = 5;
  }
  (*(void (**)(void))(*v322 + 8 * v323))();
LABEL_934:
  v324 = v349;
  if (v349 == v348)
  {
    v325 = 4;
    v324 = v348;
    goto LABEL_938;
  }
  if (v349)
  {
    v325 = 5;
LABEL_938:
    (*(void (**)(void))(*v324 + 8 * v325))();
  }
  return v35;
}

void sub_22389060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;

  if ((_QWORD *)STACK[0x10A8] == v69)
  {
    v75 = 4;
  }
  else
  {
    if (!STACK[0x10A8])
      goto LABEL_6;
    v75 = 5;
    v69 = (_QWORD *)STACK[0x10A8];
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v75))(v69);
LABEL_6:
  if ((_QWORD *)STACK[0x1088] == v73)
  {
    v76 = 4;
  }
  else
  {
    if (!STACK[0x1088])
      goto LABEL_11;
    v76 = 5;
    v73 = (_QWORD *)STACK[0x1088];
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v76))(v73);
LABEL_11:
  if ((_QWORD *)STACK[0x1058] == v72)
  {
    v77 = 4;
  }
  else
  {
    if (!STACK[0x1058])
      goto LABEL_16;
    v77 = 5;
    v72 = (_QWORD *)STACK[0x1058];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v77))(v72);
LABEL_16:
  if ((_QWORD *)STACK[0x1030] == v71)
  {
    v78 = 4;
  }
  else
  {
    if (!STACK[0x1030])
      goto LABEL_21;
    v78 = 5;
    v71 = (_QWORD *)STACK[0x1030];
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v78))(v71);
LABEL_21:
  if ((_QWORD *)STACK[0x1010] == v70)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x1010])
      goto LABEL_26;
    v79 = 5;
    v70 = (_QWORD *)STACK[0x1010];
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v79))(v70);
LABEL_26:
  sub_22388D424(&STACK[0x10E0]);
  sub_223891888(&STACK[0xA50]);
  sub_22388D424(&STACK[0x690]);
  sub_22388D424(&STACK[0x780]);
  *(_QWORD *)(a38 + 8) = a22;
  sub_22388D424(&STACK[0x4B0]);
  sub_22388D424(&STACK[0x5A0]);
  v80 = *(void **)a38;
  if (*(_QWORD *)a38)
  {
    *(_QWORD *)(a38 + 8) = v80;
    operator delete(v80);
  }
  sub_22388D424(&a39);
  sub_22388D424(&a69);
  _Unwind_Resume(a1);
}

void sub_223891854(_Unwind_Exception *a1)
{
  sub_22388D424(&STACK[0x10E0]);
  sub_22388D424(&STACK[0xA50]);
  sub_22388D424(&STACK[0x2D0]);
  sub_22388D424(&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

_QWORD *sub_223891888(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v2 = a1 + 55;
  v3 = (_QWORD *)a1[58];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[53];
  if (v5 == a1 + 50)
  {
    v6 = 4;
    v5 = a1 + 50;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[49];
  if (v7 == a1 + 46)
  {
    v8 = 4;
    v7 = a1 + 46;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[43];
  if (v9 == a1 + 40)
  {
    v10 = 4;
    v9 = a1 + 40;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[38];
  if (v11 == a1 + 35)
  {
    v12 = 4;
    v11 = a1 + 35;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[34];
  if (v13 == a1 + 31)
  {
    v14 = 4;
    v13 = a1 + 31;
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = (_QWORD *)a1[28];
  if (v15 == a1 + 25)
  {
    v16 = 4;
    v15 = a1 + 25;
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = (_QWORD *)a1[23];
  if (v17 == a1 + 20)
  {
    v18 = 4;
    v17 = a1 + 20;
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  v19 = (_QWORD *)a1[19];
  if (v19 == a1 + 16)
  {
    v20 = 4;
    v19 = a1 + 16;
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_46:
  v21 = (_QWORD *)a1[13];
  if (v21 == a1 + 10)
  {
    v22 = 4;
    v21 = a1 + 10;
  }
  else
  {
    if (!v21)
      goto LABEL_51;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_51:
  v23 = (_QWORD *)a1[8];
  if (v23 == a1 + 5)
  {
    v24 = 4;
    v23 = a1 + 5;
  }
  else
  {
    if (!v23)
      goto LABEL_56;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_56:
  v25 = (_QWORD *)a1[4];
  if (v25 == a1 + 1)
  {
    v26 = 4;
    v25 = a1 + 1;
    goto LABEL_60;
  }
  if (v25)
  {
    v26 = 5;
LABEL_60:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return a1;
}

_QWORD *sub_223891AE8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  sub_22388D564(&v16, a2);
  sub_22388D564(&v23, a2 + 15);
  sub_223891D60(a1, &v16);
  v4 = v29;
  if (v29 == v28)
  {
    v5 = 4;
    v4 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v27;
  if (v27 == v26)
  {
    v7 = 4;
    v6 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v25;
  if (v25 == v24)
  {
    v9 = 4;
    v8 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v22;
  if (v22 == v21)
  {
    v11 = 4;
    v10 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_26;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_26:
  result = v18;
  if (v18 == v17)
  {
    v15 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_223891CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23)
{
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (!a2)
    _Unwind_Resume(exception_object);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_7;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_7:
  v26 = a18;
  if (a18 == &a15)
  {
    v27 = 4;
    v26 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_12;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_12:
  v28 = a14;
  if (a14 == &a11)
  {
    v29 = 4;
    v28 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_18;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_18:
  sub_22316DC48(exception_object);
}

_QWORD *sub_223891D60(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  *a1 = *a2;
  v4 = a2 + 4;
  v5 = (_QWORD *)a2[4];
  if (!v5)
  {
    v4 = a1 + 4;
    goto LABEL_5;
  }
  if (v5 != a2 + 1)
  {
    a1[4] = v5;
LABEL_5:
    *v4 = 0;
    goto LABEL_7;
  }
  a1[4] = a1 + 1;
  (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
LABEL_7:
  v6 = a2 + 8;
  v7 = (_QWORD *)a2[8];
  if (!v7)
  {
    v6 = a1 + 8;
    goto LABEL_11;
  }
  if (v7 != a2 + 5)
  {
    a1[8] = v7;
LABEL_11:
    *v6 = 0;
    goto LABEL_13;
  }
  a1[8] = a1 + 5;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
LABEL_13:
  a1[9] = a2[9];
  v8 = a2 + 13;
  v9 = (_QWORD *)a2[13];
  if (!v9)
  {
    v8 = a1 + 13;
    goto LABEL_17;
  }
  if (v9 != a2 + 10)
  {
    a1[13] = v9;
LABEL_17:
    *v8 = 0;
    goto LABEL_19;
  }
  a1[13] = a1 + 10;
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
LABEL_19:
  a1[15] = a2[15];
  v10 = a2 + 19;
  v11 = (_QWORD *)a2[19];
  if (!v11)
  {
    v10 = a1 + 19;
    goto LABEL_23;
  }
  if (v11 != a2 + 16)
  {
    a1[19] = v11;
LABEL_23:
    *v10 = 0;
    goto LABEL_25;
  }
  a1[19] = a1 + 16;
  (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
LABEL_25:
  v12 = a2 + 23;
  v13 = (_QWORD *)a2[23];
  if (!v13)
  {
    v12 = a1 + 23;
    goto LABEL_29;
  }
  if (v13 != a2 + 20)
  {
    a1[23] = v13;
LABEL_29:
    *v12 = 0;
    goto LABEL_31;
  }
  a1[23] = a1 + 20;
  (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);
LABEL_31:
  a1[24] = a2[24];
  v14 = a2 + 28;
  v15 = (_QWORD *)a2[28];
  if (!v15)
  {
    v14 = a1 + 28;
    goto LABEL_35;
  }
  if (v15 != a2 + 25)
  {
    a1[28] = v15;
LABEL_35:
    *v14 = 0;
    return a1;
  }
  a1[28] = a1 + 25;
  (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14);
  return a1;
}

_QWORD *sub_223891F60(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v2 = a1 + 54;
  v3 = (_QWORD *)a1[57];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[52];
  if (v5 == a1 + 49)
  {
    v6 = 4;
    v5 = a1 + 49;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[48];
  if (v7 == a1 + 45)
  {
    v8 = 4;
    v7 = a1 + 45;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[42];
  if (v9 == a1 + 39)
  {
    v10 = 4;
    v9 = a1 + 39;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[37];
  if (v11 == a1 + 34)
  {
    v12 = 4;
    v11 = a1 + 34;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[33];
  if (v13 == a1 + 30)
  {
    v14 = 4;
    v13 = a1 + 30;
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = (_QWORD *)a1[28];
  if (v15 == a1 + 25)
  {
    v16 = 4;
    v15 = a1 + 25;
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = (_QWORD *)a1[23];
  if (v17 == a1 + 20)
  {
    v18 = 4;
    v17 = a1 + 20;
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  v19 = (_QWORD *)a1[19];
  if (v19 == a1 + 16)
  {
    v20 = 4;
    v19 = a1 + 16;
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_46:
  v21 = (_QWORD *)a1[13];
  if (v21 == a1 + 10)
  {
    v22 = 4;
    v21 = a1 + 10;
  }
  else
  {
    if (!v21)
      goto LABEL_51;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_51:
  v23 = (_QWORD *)a1[8];
  if (v23 == a1 + 5)
  {
    v24 = 4;
    v23 = a1 + 5;
  }
  else
  {
    if (!v23)
      goto LABEL_56;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_56:
  v25 = (_QWORD *)a1[4];
  if (v25 == a1 + 1)
  {
    v26 = 4;
    v25 = a1 + 1;
    goto LABEL_60;
  }
  if (v25)
  {
    v26 = 5;
LABEL_60:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return a1;
}

_QWORD *sub_2238921C0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v5 = sub_22388D564(a1, a2) + 15;
  sub_22388D564(v5, a3);
  v6 = (_QWORD *)*a1;
  for (i = (_QWORD *)a1[15]; v6 != i; i = (_QWORD *)*v5)
  {
    v8 = a1[4];
    if (!v8)
LABEL_13:
      sub_223198474();
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v6 + 2) + 112) != 1)
      break;
    v6 = (_QWORD *)*a1;
    do
    {
      v6 = (_QWORD *)*v6;
      *a1 = v6;
      if (v6 == (_QWORD *)a1[9])
        break;
      v9 = a1[4];
      if (!v9)
        goto LABEL_13;
      v10 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v6 + 2);
      v11 = a1[8];
      if (!v11)
        goto LABEL_13;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v10);
      v6 = (_QWORD *)*a1;
    }
    while ((v12 & 1) == 0);
  }
  return a1;
}

void sub_223892298(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = (_QWORD *)v1[13];
  if (v3 == v1 + 10)
  {
    v4 = 4;
    v3 = v1 + 10;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)v1[8];
  if (v5 == v1 + 5)
  {
    v6 = 4;
    v5 = v1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)v1[4];
  if (v7 == v1 + 1)
  {
    v8 = 4;
    v7 = v1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void sub_2238923D8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2238923EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5B738;
  return result;
}

void sub_223892410(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5B738;
}

uint64_t sub_223892428()
{
  return 0;
}

uint64_t sub_223892430(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22389249C()
{
  return &unk_24EC5B798;
}

void sub_2238924AC()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2238924C0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5B7B8;
  return result;
}

void sub_2238924E4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5B7B8;
}

BOOL sub_2238924FC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return *a3 == 0;
}

uint64_t sub_22389250C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_15")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_15" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_15"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_15" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223892578()
{
  return &unk_24EC5B818;
}

void sub_223892588()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22389259C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B838;
  result[1] = v3;
  return result;
}

uint64_t sub_2238925D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B838;
  a2[1] = v2;
  return result;
}

BOOL sub_2238925EC(uint64_t a1, _QWORD *a2)
{
  return sub_2231A88F8((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1232) + 320), a2) != 0;
}

uint64_t sub_223892614(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_16")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_16" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_16"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_16" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223892680()
{
  return &unk_24EC5B898;
}

void sub_223892690()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2238926A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5B8B8;
  return result;
}

void sub_2238926C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5B8B8;
}

BOOL sub_2238926E0(uint64_t a1, _BYTE *a2)
{
  return (*a2 & 0x30) != 0;
}

uint64_t sub_2238926F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_19")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_19" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_19"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_19" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22389275C()
{
  return &unk_24EC5B918;
}

void sub_22389276C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223892780()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5B938;
  return result;
}

void sub_2238927A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5B938;
}

uint64_t sub_2238927BC()
{
  return 1;
}

uint64_t sub_2238927C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_5"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223892830()
{
  return &unk_24EC5B998;
}

void sub_223892840()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223892854(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5B9B8;
  result[1] = v3;
  return result;
}

uint64_t sub_223892888(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5B9B8;
  a2[1] = v2;
  return result;
}

BOOL sub_2238928A4(uint64_t a1, _QWORD *a2)
{
  return sub_2231A88F8((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1232) + 320), a2) != 0;
}

uint64_t sub_2238928CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_18")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_18" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_18"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_18" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223892938()
{
  return &unk_24EC5BA18;
}

void sub_223892948()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22389295C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5BA38;
  result[1] = v3;
  return result;
}

uint64_t sub_223892990(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5BA38;
  a2[1] = v2;
  return result;
}

uint64_t sub_2238929AC(uint64_t a1, uint64_t *a2)
{
  return *((unsigned __int8 *)sub_223822434(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 1224), *a2, a2[1]) + 113);
}

uint64_t sub_2238929D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_20")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_20" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_20"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE4$_20" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223892A40()
{
  return &unk_24EC5BAA8;
}

void sub_223892A50()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223892A64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5BAC8;
  result[1] = v3;
  return result;
}

uint64_t sub_223892A98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5BAC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_223892AB4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  int8x8_t v3;
  int v4;
  uint64_t result;

  v2 = sub_223822434(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 1224), *a2, a2[1]);
  v4 = *((unsigned __int8 *)v2 + 113);
  if ((v4 | 8) != 8)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeEngine.cpp", 702, (uint64_t)"kf.UpdateState() == frame::KeyframeUpdateStateContentUpdated || kf.UpdateState() == frame::KeyframeUpdateStateNoUpdate", 118, (uint64_t)"Unexpected keyframe update state during strobing", 48, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *((unsigned __int8 *)v2 + 113);
  }
  result = sub_2231D77B8(v4, 8, v3);
  *(_WORD *)((char *)v2 + 113) = result;
  return result;
}

uint64_t sub_223892B40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_6")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_6"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf14KeyframeEngine16ProcessRGBDFrameERKNS0_5frame11FrameBundleEE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223892BAC()
{
  return &unk_24EC5BB28;
}

void sub_223892BB8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x227684CE8](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_223892F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223892F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223892F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223892FA4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223893518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

